{"text": " Hello, Jeroen. Hello, Dillon. I really hope we meet people's expectations with today's episode. That goes off on a good start. You want to tell people the episode topic so they can appreciate how bad that pun was just now? Yeah, well, I think they got it from the episode title, but today we're going to talk about Elm tests, which is dealing with expectations. Or do you want me to explain the pun? It's always funnier when you explain the joke. If there's one thing I've learned, always explain the joke. Okay, so you said talking about meeting people's expectations and in Elm tests, you write expectations for a test to pass. See, if people weren't on the floor laughing the first time, now they're definitely laughing really hard. You're welcome. Okay, so let's quickly move on from that and give people a little introduction to Elm tests. So like, for somebody who has never encountered it, what what the heck is it? How do you even get set up with it in the first place? Yeah, so Elm tests is the official library and tool to write tests in Elm and for Elm code. So you have two parts for it. You have one part that is the library, which is Elm dash explorations slash test. And there's the CLI, which is run on nodes. So you to install it, you do well, the name is Elm test. And to install you do npm install Elm tests. That's pretty much it. Oh, and then actually, there's an Elm test init command, which is kind of helpful for kind of setting things up because there's a there's a section in your Elm dot JSON, which has test dependencies. And it needs to make sure it installs the you know, proper version of Elm exploration slash test the package that allows you to make assertions and declare test cases. Yeah, so you so you have your production code or your source code. And next to that, you usually have a tests folder in which you put all the tests. And Elm test is going to read all the tests, find all the tests that are available in that folder. With a little bit of magic, and with a little bit of magic, build something using your test dependencies that is your in Elm JSON, right and run them. Yeah, it it's kind of hard to wrap your brain around it at first. But what it does is it looks for any values that are exposed in your test folder of the type test, you could expose like multiple top level values in a module of type test, and it will run those you could expose a list. Well, you create like a list of tests with a describe. A describe is just a function that takes a test, which takes a list of tests, and the title for the whole group. Yep, exactly. And really, what a test is in Elm is it's you just invoke one of the expect helper functions, for example, expect dot equal, and that takes two values. So if you say expect dot equal one, two, it's going to say, I expected, let's see, actually, usually you pipe it. So it's hard to think about which one is expected and actual. If you say one, right pipe, expect dot equal two, it's going to say, I got one, but I expected it to be two. Yeah, exactly. So ultimately, that's what an Elm test case is. It's literally just an expectation. So one of the things that's really beautiful about the design of Elm is the fact that it's so testable, because it's just people bend over backwards. I think we might have talked about this on another episode, but people bend over backwards in other languages trying to make all of these side effects and trying to assert on all of these impure things and trying to make non deterministic things deterministic. So you have some code that depends on time. You have some environment stuff that it's picking out and reading global variables and things like that. And you have to do all of this setup. And some of it's implicit, some of it's required, some of it's not. You're not quite sure which of the pieces are required or not. You're not sure which pieces are deterministic or not. You might get tests randomly failing on the first of the month. With Elm, you don't have any of those problems. And I can't tell you how, I mean, I've got a background in doing agile technical coaching. So I've spent a good deal of time trying to sort of coach people on some of these best practices around testing. And so many of these are just built into the Elm language because of the purity, because testing is so natural when it's just input output. And so that's all an Elm test is. It's like you have this input, you get this output, and then state a few things that you expected about that output. That's all it is. And it's so nice to test in Elm. So please do it. Please write tests in Elm. That is actually one of the things that is always quite hard with tests is the setting up. And so when you have complex functions, complex environments, to get the thing testable in a testable state, you need to do a lot of techniques and inversion of control, mucking, to get it testable. And in Elm, since you're only dealing with pure functions, a lot of those problems go away directly. Yes. Yeah. And on the topic of testable design, I think this is one of the things that maybe somebody who is more new to test driven development might not be familiar with this concept, but I think it's a really important one. Actually, many people consider test driven development to be a design practice rather than a testing practice. Because what test driven development does, you know, when you're writing a unit test, before you write the code that makes that unit test pass, what you're doing is you're being deliberate about what you want the design to look like, rather than letting the implementation guide the design. You're letting your intentionality guide the design. And by definition, you're making it testable because you're writing it in a way that's nice to test and nice to use before you write, you know, the implementation. So naturally, if you write the implementation first, what's going to tend to happen is it's going to be a design that's very difficult to test. And there's this inherent quality with testable design that it's decoupled. And similarly, if you have not test driven your design, it tends to get coupled. So test driven development is a good technique for designing your code in a way that is nicely decoupled and nice, you know, nice to maintain whether like independent of the tests, it's just tends to be nicer designed code. Definitely. So as you just said, when you do TDD, you use the functions, the library before you've finished designing it. And when you use it, that's when you find the flaws in your API design. So if you try to make the API look good after the fact, it wouldn't get you the same result as if you did it over the course of the writing. Yeah. So before we go into too many more details of like the specifics of Elm test, maybe let's introduce like the basic concepts of test driven development. For example, red green refactor. So red green refactor is, it's just a very liberating way to work actually, because the thing is, it spreads out a large difficult task over many small individual steps. And so I find it a lot more enjoyable to work in that style, rather than trying to get everything working at once, which is very overwhelming and kind of gives you this analysis paralysis. Test driven development allows you to say, how do I get this one case working, you know, if I'm doing something that transforms a list in some way, what if I give it an empty list? You know, does it give me the correct result for an empty list? And then you you write a test case that does that you make it pass. And in the process, you get several, several things wired up. And so it's actually moving you forward where you're making sure that you get the wiring because you've got a fully working thing at each step. So the red part is you write a failing test, you have an assertion that fails. Now, that was the red part, the first part, that's the red part. And in Elm, a compiler error could be part of that failure process, right? So you, you may write a red test where there's a compilation error, you fix that there's an expectation failure, and then you fix that. And that's okay. But the thing that's important is that you're following the failures you're getting when you run your test. So you write an assertion, you run the test, it prints out the current problem, which may be from the Elm compiler saying it doesn't compile. But you're fixing what running the test tells you you need to fix. And that's the test driven part. So that's the red part. The green part is you fake it till you make it you do the simplest thing you could possibly do to get it green. Usually the stupidest solution is the good one. If your inputs are like multiply six by seven, just hard code 42. It's stupid, but it works. And to make sure that that doesn't say you write a different test later, it says multiply two by three, and then 42 will not be the correct answer for that one. So there you have to generalize. Yeah, exactly. There are a lot. There are so many really elegant principles at play here that I find are just very, very useful ideas in programming, like Yagni, you ain't gonna need it. So that's the idea that you think you're gonna need to handle this case, you think you're gonna need this functionality, but write it when you when you do need it when when you do have concrete evidence that you need it. You know, in the case of like, building out a product, that concrete evidence might be that you observe users using it and see that they're running into a problem or get feedback from them. In the case of a test, the you ain't gonna need it, you know, you prove that you need it by writing a test. And then now you need that design, but don't design things in anticipation of I'm gonna need to generalize this. This design discipline of fake it till you make it doing the stupidest thing that could possibly work. Or as some people like to say, the simplest thing that could possibly work that keeps you honest about not over designing and anticipating what you're going to need. And it also our brains are much better equipped to solve one case than to like, have the generalized solution to something. It's so much easier to just think about one case at a time. So I hope you break that down. So we got the red, we got green, what is a refactor? The refactor, that's the one that that people forget to do a lot of the time. Refactor is, well, it's quite delightful to do in Elm. Refactor is when the tests are green, refactor. Now you know, I've been I've been thinking a lot lately about refactoring in Elm, refactoring tools. You know, I've been I've been doing some work on making some contributions to IntelliJ Elm for some automated refactorings. I know you also are thinking about these types of things you're in with Elm review. Yep, definitely. The idea with the refactor step in TDD is now you have a test that kind of demonstrates the behavior that you want is happening. So now you can safely refactor. So one of the things in TDD also is that you don't want to you don't want to start refactoring when you're in a red state because then you make a refactoring and you don't have that green to tell you everything went well. Yeah. So if you started refactoring, either stop the new test or stash or whatever refactoring you were attempting, just do one or the other, not both at the same time. That's a great tip. Yeah, I find I find myself in practice using that technique quite a bit. You just you're writing a new test and then you're like, wait a minute, I really need to refactor this thing to build this thing that the new test case wants me to build. And as you say, you comment out the new test, you skip it, but now you're back at a green state and you can refactor all you want. And it's this is another really great principle of test driven development, which is make the change easy, then make the easy change. How is that related to testing? Because it's part of the refactor step. So you want as much as possible to rely on. So sometimes that means that you you have a new test case. So red, green refactor, we kind of introduced the different steps, but you kind of iterate on that cycle, adding new cases. So you do red green refactor, you can refactor anytime it's green, it's really more of a state machine than like a discrete sequence, right? Yeah, then you add a new test case as needed when when there's more behavior you need to add, you add a test case to prove you need that new behavior handled. Yeah. And then as you say, you find that I really need to generalize this piece of code or extract this function or add a parameter here or whatever it might be, in order to make this next step easier, like this step is going to be too big, unless I do a refactoring step first. And so as you as you pointed out, you you skip the new test you were adding, or you come to comment it out, you stash it, whatever you need to do to get back to a green state. But now you know, okay, I am going to need to do this refactoring to make the next step easier. And so you make the change easy. And then you make the easy change. So you want to do as much of the heavy lifting as possible as a set of refactoring steps. So that when you make the behavior change, it's dead simple. And the search space for where a problem could happen is much smaller. I'm curious, do you factor at every step or every few steps? I usually do every few but I don't know if that's the best way to do it. I think it totally depends the way I think about refactoring, which really, we could definitely do several episodes just about that topic. And I'm sure we will. But the way I think about refactoring is we're constantly reading code, we're reading code more often than we're writing code. So you want it to be very inexpensive to read code, because we do it often. So we want to optimize for reading code, and for changing code, right? Those are if we if you can make reading and changing code extremely inexpensive and efficient, then you're going to have a good code base to work with your you know, you're in good shape. So refactoring helps you do that. But as you read the code, you start to understand things about the code, you start to see certain patterns, you start to realize like, okay, this variable is called accumulator. But really, this is like the concatenation of a list of strings. Yeah, this is like the the admin users. That's really what this accumulator represents. So you're reading the you know, you're reading through your code, and you see some variable and and you're like, what is this doing, right? Because that's what happens when you're reading code. You're like, I need to add this feature. What the heck is this doing? You read it, you sort of understand it. And then when you have that insight refactor. So that's one cue you can use to refactor is when you start to understand something, take that understanding out of your head and put it back in the code. And now the next time you or someone else is reading that code, they don't have to do that extra step of processing it in their brain to get the understanding it's more readily available or sometimes that understanding might not be like a variable name, but it might be extracting a particular function that that represents some operation, you know, grouping something together, having something in a certain module. But I find that helpful to think about as you're reading code, just refactor something if you see something that can change, just do it. And I think people sometimes think about refactoring as something that you take a month on a branch, and just do a giant rewrite. And that's like a lot of people's notion of refactoring. And that's called summer. But when all the colleagues are on vacation, go refactor. And I mean, it's one thing to like dedicate a large chunk of time to refactoring, but it's another thing to just get like just do a giant step and you want to break it down into a lot of tiny steps whether or not you spend a long time refactoring. And also like, yeah, so anyway, I mean, I like to keep myself honest about making tiny changes where there's almost zero risk that I've changed behavior unintentionally. One thing I would like to point out or to emphasize on is during your refactor, you should not support new cases. So if something needs and deserves a test written for it, and doesn't work at the moment, and refactoring the way you do it makes a test pass, then you should first write the test and then refactor it. Otherwise, you lose one good loop, one good cycle. And this cycle is very, brings a lot of good things. I do find that sometimes I like to generalize as part of refactoring step. I'm not sure if that's compatible with what you're saying right now or not. But so there's this one I guess not. I mean, I guess I would clarify that I don't call that refactoring. I call that generalizing. And sometimes people use the word refactoring there, right? So if you're refactoring, it means you're not changing the behavior, right? But if you suddenly fix a bug during your refactoring, it means it wasn't a refactoring step. And that, you know, it's not that you shouldn't fix bugs or change your code in a way that resolves bugs. It's just, no, that it's not a refactoring. And there's a particular role that a low or zero risk refactoring plays in the development process. It's a very helpful technique. It's good to have the word generalizing in mind for both steps. Exactly. Exactly. They're like different modes of operation. So know which one you're in. There are different approaches to test driven development. You can do this technique called triangulation where you sort of every time you want to generalize your code, you write a failing test that proves that it needs to be generalized first. So like basically, you only generalize code by responding to a failing test. I find in practice, sometimes that gives you like, you know, you hard code a case like you you're doing fizzbuzz and you say fizzbuzz for for one is one. And then you just hard code fizzbuzz to return the string one. And now you say fizzbuzz of two is two, you have to write a failing test in order to remove the hard coding of the number one from the return value. Yeah, but really, to me, it seems just noisy to have two test cases that are testing, turning a regular number into a string. And so sometimes I'll do that as a generalization step where I'll just Kent Beck in test driven development by example, which is a really nice book, he talks about this idea as like, removing duplication between the test case and the production code. So anyway, that's a technique that I sometimes reach for rather than sometimes it can become a little bit dogmatic to just follow triangulation at every step. And it doesn't feel natural in a context. So I recommend that people try out these approaches, it can be nice to do some exercises, some some kata, we can link to some code kata. But it's really nice to just practice code kata, and try out these different techniques to get experience with them. And then you have to use your own judgment in a real code base to figure out which techniques make sense for you. But if you've at least experienced them, then you have a better sense of of how they help you write better code. Now you know everything about test driven development. Okay, well, shall we talk about some some more of the details of the specific elm test package? Yeah, we can do that. We didn't say how you how you write a test. Maybe we should go into that. Let's do it. The way you write a test is you use the import the test module. You do you call the test function from the module. So test, followed by the title of the of the test. And I found that one pretty important because if the test fails, you know that whatever you wrote in the title is the thing that is not working anymore. The failing test message is like part of the thing you're building when you write a failing test. Because if it ever fails in the future, that's going to be what's guiding somebody to fix the broken thing. Yeah, so the title and the expectation error. So exactly, use both. Exactly. So yeah, you got the title. And then usually what you do is you pipe user left pizza, followed by a anonymous function. So which takes this argument, empty tuple. So a unit. Yep. And then inside of that, you write the setup of the function, setup of the test, followed by the expectations that you want to make sure that happen. The reason why there is a anonymous function is for performance reasons. So that's if you only want to run tests from one file from one specific location, all the tests are not run on that executed exactly uselessly. Because Elm does eager evaluation. So if you Yeah, if you make it a lambda, then you have to pass an argument for it to evaluate that. Whereas if you don't call that lambda, it's not going to evaluate the body of that lambda until you pass in the unit to that. Yeah, which makes everything much, much faster. Yeah, and it allows the test framework to give you feedback as it's running things rather than just blocking on evaluating everything at once and then Yeah, giving you feedback. And I think another thing, I guess there could have been a different design for this. But that unit argument of that lambda, it becomes a value if you're doing fuzz testing. Yeah. Shall we get into fuzz testing now then? We may as well. Let's do it. So what is fuzz testing Dillon? Well, fuzz testing is also known as property testing property based testing. And I think actually property based testing is a good term for it too, because it kind of gives you this sense that you're testing a general class of data. So you you're making assertions about properties of that class of data, rather than in the traditional unit testing style, making assertions about one specific case, one specific function call, and the output of that. So what fuzz testing does is it uses a random generator with a random seed, you can build up either simple or complex data types, you could you could do fuzz dot int to have a fuzzer that gives you an int, you can build up a fuzzer very much like you build up a decoder. And get a complex data type, you could build your own custom data type. And then you know, you can get a list of those fuzzed values and compose them together much like a decoder. And then you you make assertions about those randomly generated values. And if you want to reproduce a particular failure, then you can copy the random seed and pass that in as a flag when you run elm test on the command line. Yeah. And because when elm test fails, you get a big error message saying, hey, if you want to produce it exactly like the way I just ran it, run this command and it contains a seed flag and the list of files. Exactly. And and the reason that it's that it's running it with a random seed. The point is, like conceptually, you're not running the test against one value, you're running it against an infinite sized set. And you're using a random sample of that. But every time your test runs in your CI or your local environment, it's running on a different random sample. So as you run the tests more, you approach running the tests on the infinite sample of everything and asserting that property about that whole data set. Yes. I'm not sure if we actually said it, but the idea is that you write your test, your first test, and then it will run a lot of times, usually 100 times. Yeah, I think that's the default with different inputs. Yes, exactly. So yeah, whenever you you run your test, you get 100 or more if you want to test generate it with values that make sense that don't make sense. But your setup will be run with a lot of different inputs. So if something goes wrong, you will know which values it will be for. And you won't generally have coverage for a lot more cases than you would have thoughts by yourself. Yes. Yeah, because you're basically testing an infinite sized set because every time you run it, it runs it with a different sample. Yeah. Another cool feature of fuzz testing is that it will shrink down the result set to give you the simplest failing test case. So if you're using a string fuzzer, for example, and your string fuzzer, like so like a common common example is like a palindrome, right? Or just any sort of reversible operation. You know, if I encode this to a JSON value and then decode that JSON value, I should have the same thing I started with or if I take a string, and I reverse if I take a string and check if it's a palindrome, then the reverse of that string should also be a palindrome. For example, that's like kind of property that we're talking about when talking about property based testing. It's a behavior property of the whole system. Exactly. So if that assertion were to fail on empty string, maybe the you know, maybe that property also fails on a 200 character long string. But the failure it's going to give you is the empty string. So that's called shrinking that it reduces down the failures to find the the simplest failure it can produce. Yeah, it's kind of like a very magical concept. It's kind of cool that that feature is just built into it. Yeah, the way I think it works is, I think it's going to try that string with 200 characters first, or we'll probably try the empty string first. But at some point, it will try the 200 character long string. And if it finds it that it fails, it will try to simplify it to this shrinking part by generating a few simpler cases than the 201. So maybe 190 characters or 199. So we'll generate a few ones, and we'll run the test on each of those. And if one of those fails, then it will try over and over and over again with those values, until finds the simplest thing, which could be an empty string or which could be something else depends what your problem is. Right. Martin Janacek has been working on, I guess it's pronounced minithesis. I don't know because it looks like mini thesis, but it's actually like a mini version of something called hypothesis. And hypothesis is like another approach to this idea of like property based shrinking. But it allows you to do property based testing in a way where you can do end then. The basic short description from what I understand from the readme of the project is that there's like the random fuzz values, there's like the actual concrete values, and then there's like the seed that determines those values. And the idea of like hypothesis and mini thesis is... I'm just going to say mini thesis also. I know, I know. It keeps track of the underlying seeds that generated those values. And so it allows you to do end then. Whereas like the Elm fuzz library doesn't provide end then. But those are all like fun sort of academic details. But in practice, fuzzing is just a really cool technique that's at your disposal when you write tests with Elm test, it's built in. I've used it like a few months ago, I was testing some logic around a money module in a code base. And it was really nice to do some property based testing because with money you want to make sure that there aren't any bugs. And so it was quite nice to be able to like to say if I take the difference of two sums of money, then it should be zero if I'm taking the difference of the same value of money. Or like it parses negative money correctly. So if there's a negative sign in front, whatever the actual value of the dollars and cents are, when there's a negative value in front, the value will be negative, right? That's like a property you can assert across the whole set of data. And it's just an extra set of confidence. Sometimes it's nice to be able to also reason about like concrete values with a plain unit test, but it's nice to have both at your disposal. The thing I have found very difficult to use with property testing is building the data sets. So usually what I find is, and this is why I don't use it much, actually, pretty much never, is because there's always something that you don't do know what to accept as input. For instance, you say if you put a minus sign before the value, they should be negative. But that is not the case if the value is zero. So how do you say I want a float or an integer, but not zero? Because for zero, it will fail. And it will definitely try zero at some point. Right. I know. I agree. That's a really tricky part of it. One way you can do that is you could do like fuzz.int and then you could do fuzz.map int plus one. Then what if it generated minus one? Oh, isn't there like a positive or you could do like absolute value. You have to get clever with it. Yeah. I guess there's not a positive int one, but you could make a positive int fuzzer by saying taking the absolute value and then adding one. Yeah. And then you can give yourself this building block of a positive int fuzzer. But it is a little bit awkward. I think there's a way to like say that a particular fuzz value to exclude it, but it can also lead to like stack overflow issues with the fuzzing. Yeah. Or you could also ignore the test, say expect.pass, meaning the test will just pass if the value is not valid. But if your values are rarely valid, then the test is not worth much. Right. Oh, there is an int range. There's int range. So you can give it a range. There's float range. And you can get clever like sometimes with characters. Like you could create, there's also fuzz.constant and fuzz.oneof. So like you could make like a vowel fuzzer and you can build up all sorts of complex things, but you do have to get a little clever. And I mean, much like Elm, sometimes the way that you want to express it isn't the way it's going to be natural to express it. And so you have to go a different route. But once you do, you can find an elegant solution. Yeah. Jeroen, do you ever test views in Elm? No. Do you know what the reason why? Tell me. Because he mostly writes Elm review and there's no view in Elm review. Well, except in the name, but that's it. No, I don't. I know there's a module or several modules to test the HTML in Elm tests or Elm explorations tests, but I've never tried them. Have you? I've used them a tiny bit, but I find that if I'm doing unit testing, what I find is that usually what I want to do is I want to create a data type that represents what the view is going to be and make assertions on that data type. And then pass that like sometimes in an object oriented context, people talk about like view objects, you know, that you can have something that represents everything in a formatted way and the view is just templating it. It's just picking off those little pieces of that view object, right? So that's what makes a lot of sense to me is just have all of that data formatted in a particular way. And if I want to make assertions about that format, I don't need to grab it out with CSS selectors in the HTML output. I just make assertions about this data type. And then I pass that data type to be rendered as my view. But all it's doing is picking off these values and presenting them directly. It's not manipulating them or doing any logic on them. Okay, but then you don't test your view much. Right, exactly. So to me, doing a unit test at the view level never feels like it's adding value and giving me confidence. It just feels like a pain and it feels like it's coupling me to some things that I don't want to be coupled to. And it doesn't feel like it makes me feel more confident that I got things right in my view. If I want to change my view, then I change my view. I want to test the underlying logic. Now, that said, that changes if we're talking about a more high level test rather than a unit level test. If we're talking about an end to end test, then it's very valuable. Then you say, okay, I click on the login button. I type this into this input field. I click on this button. I navigate to this page. I should see this show up. Then in that case, making assertions about what's on the page is great. So that's the distinction I would make. Yeah, if you can write scenarios, which bring a lot more value because you test a lot more things, make sure that things don't break. Whereas with unit tests, you only test one tiny thing and that could work, but not the whole thing. Exactly. Yeah, the sort of spectrum from unit to end to end testing is, you know, the lower level would be unit tests and the higher level would be end to end tests. So on the lower level, you're more tied to the implementation. You're less confident about the pieces fitting end to end. You're less realistic, right? But they're faster to run. They're easier to write. Unit tests are great for exhaustively checking corner cases. Especially with property based testing. Yeah, property based testing is a great way to do that because they're very fast to run and it's easy to write a lot of them. But if you think about exercising corner cases in an end to end scenario, you're like, log into this page as this user. Now you have this combinatoric explosion where you're like, okay, well you log in as this user and this user and you log in as a guest user, you log in as an admin user, you log in as a regular user, and then you test out the corner case for all of those. It doesn't make any sense. You don't have 10,000 end to end tests in your project? Yeah, it gets insane, right? So that's the way I think about it is the role of a unit test is to exhaustively check corner cases, but it's not to give you confidence that the entire system is working together. So there's this notion of like the testing pyramid where like if you split off the pyramid into three sections where the very top triangle is one part of the pyramid, then there's like the middle slice of the pyramid and then there's like the bottom part of the pyramid. The bottom part of the pyramid is the biggest chunk. That's your unit tests. You want a lot of unit tests. The middle chunk is like integration tests which don't exercise the full system, but they piece together some parts of it. And then the top most chunk is like end to end tests or like smoke tests and that sort of thing. And you want to have few of those, but they give you confidence that everything is working out together. So, you know, to be honest, I hear more and more people talking about the value of end to end testing and I find myself writing more and more end to end tests as I go along because ultimately I want to have confidence that I can hit the deploy button and just be confident that things are working. It depends on the use case, but it's good to have like a sense of the role that these different types of tests play and then you kind of have to use your own judgment. Yeah, I think you need all of them. Yeah, you need to balance the speed and how many you want for each one. So that it remains maintainable and fast and so that it doesn't hinder you more than it helps you. Right, exactly. What I've seen a lot of with people being hindered by their test suites and it becoming a burden is like in Ruby on Rails shops, people end up with like all of these sort of integration tests that are mocking things like crazy. So they're doing a mixture of like they're actually executing database requests, you know, they're actually like performing database queries and they're sort of rendering HTML and making assertions about the HTML and like stubbing out HTTP requests, mocking certain like reaching in and stubbing out certain functions. So they return something and then making a mock to assert that this method gets called on this one thing. So you don't know what's real and what's fake. And to me, that kind of test has so little value because for one thing, it's very coupled to the actual implementation. So if I change the implementation, you can end up with either false positives or false negatives. So you can have a failing test when everything as far as the user is concerned is working perfectly. You have a passing test when everything is completely broken for the user. And so all I can say is I'm very happy that Elm doesn't have or need mocking. Yeah. That makes me think of another very cool part of Elm with regard to testing. You know what one of the worst things with tests are is that when you have tests that depend on each other, when you set up something in one test and the second test depends on the first one to have been run. And that is so awful to debug and to run. But it doesn't work when a dude tests that only. Like what? I'd blocked that out of my memory, but you brought it back. Yeah. I think you don't have that in Elm because everything's immutable. Exactly. And deterministic. There's like some test helper. I don't remember if it's an R spec or mini test, but like I think in some Ruby thing, there's like a method that you can call and it makes it so the order is deterministic. So the order is like always in the same order rather than randomizing the order of the tests. For exactly the type of thing you're describing, they run the tests in a random order, but there's some method you can call that makes the order fixed. And the method name is like, I'm a horrible person and I don't know, I kill puppies or something like that. It's like some awful name. It's like if you really want to do it, you at least have to admit that you're a terrible person first. I need to find that one. We'll link to it in the show notes just for fun. That's better than those React hidden functions that is, please don't use me or something. Oh my goodness. So I was writing a test in Ruby the other week and I actually like shipped some code and there was a method missing error. And I'm like, what? How on earth did this test pass? And then there was this exception in production. And then I was looking into it and someone actually pointed it out. They're like, Oh yeah, R spec monkey patches the global variable context. So there was some undefined thing context, but R spec was monkey patching it so it wasn't giving a method missing exception. So that was a fun one. Suffice it to say, consider yourself very lucky to be working in Elm and testing is so much nicer than it is in other languages. So please write tests. Yeah. Jeroen, how do you think about this sort of question of what do you test in a typed functional language like Elm and when do you rely on types or perhaps, you know, certain properties that something like Elm review or tooling can provide you? Oh, usually I try to make impossible states impossible. I stop when I can't find a way to make something impossible or when it becomes very unusable. I try to balance usability and correctness. So I still don't know when I would use Elm review for something like that. It really depends on the case. I think there's a lot of places where you could use Elm review kind of as a test in a way, something that tests the contents of your code base. Yeah. I mean, you can certainly use it to make assertions about literal values. Yeah, exactly. So I made a blog post at one point saying here's a safe way to write regex in an unsafe way, in a way that looks unsafe. Yes. And that gives you the kind of the rights test for you without you having to write it. Right. Because you could, yeah, like let's say you were writing, like there's a similar thing that maybe is something a valid username. And so you could write tests that say it returns nothing if I pass empty string and it returns a just username value, like a custom type that proves that it's a valid username if I pass it this other value. So that is something you can test. And that's in a way you're leveraging the type system, but you're letting your test suite give it the stamp of approval that this type does indeed represent a valid check. You could even do fuzz testing on that, right? Yeah. If you're only passing literal values to that, you could also use Elm review to help you with that. Yeah. Because you know, never in the code base I use a constant that is the empty string. Mm hmm. I mean, ultimately these are all just verification methods, you know, whether it's static code analysis, which is, you know, essentially Elm reviews a static code analysis tool. Definitely. It could be, you know, a compiler, you know, types. It could be a unit test or an intent test. They're all just tools at our disposal to verify our code. Yeah. So what would I use tests for otherwise? It's usually business logic. So things that I can't represent with types. So if I try to have a function that says if the value is X, then do this. And if I have something else, give me something else that is something that will always be valid type wise. And that's where I would write in a unit test to make sure that in the first case you always get X. In the other cases you always get something else. You don't have to test the wiring like you do in JavaScript or maybe in Ruby. I don't know Ruby that much. So there's a lot less tests that you have to write. Right. Exactly. Yeah. There are a lot of tests in Ruby about, I mean, like a lot of, a lot of API's in Ruby. It's like if you pass in a string, then you call it like this. If you pass in a list of strings, then you call it like this. If you pass in a regex, then it's going to run it like this. If you pass in a hash and it has a key called this, then it's going to run it like this. And like, and of course you have to check for nil. And if this thing is nil, then it's going to interpret it as this or as that. And it's so much simpler in Elm just having, having the confidence that those things are going to be wired up correctly both for the caller and you know, your, your test cases are exercising all the different paths. And you also just have the simplicity that you can't overload functions like in other languages. And in some cases maybe it would be convenient, but it really, it's, it's a, it's a very nice quality of Elm that keeps things very easy to think about and test. Yeah. In the testing pyramid, I would actually put the Elm compiler at the, at the base of it. Yes. Like a tree or something. I like this. I like this. Well, but you want more, you want even more. Yeah. Right. More than unit tests. Yeah. I would also put Elm review between any Elm compiler and unit tests maybe. So Elm compiler, Elm review, unit tests, integration tests, end to end tests. Maybe Elm review could be after, it could be somewhere else, but. Yeah. It might depend on the context too. Cause there are some things that Elm review can make really great assertions about with static analysis. And there are some things that can't do good stuff, static analysis on. If it's like, if it's looking at literal values, then it can do a lot. If it's looking at user input values, then it can't necessarily make as many guarantees about that. Yeah. And that's where you would use types or unit tests, probably unit tests in this case. Right. Or end to end tests. I like this extended, extended pyramid. Yeah. Use whatever you can to, to create confidence in your system. Exactly. So we get all these tools, like even Elm GraphQL gives you a lot of guarantees. I don't know where you would put it in the pyramid, but it gives you some kind of confidence. I mean, I would put that as part of the Elm compiler, you know, it's just extending the number of guarantees that the Elm compiler can make for you. Yeah, exactly. So this question came up of how or whether you should test internals of your Elm modules. Do you have thoughts on that? Yeah. So usually I try not to test implementation details. But I find that what you test in unit tests are kind of like implementation details of end to end tests. That's right. They totally are. Everything is an imitation, is an internal of something else. Yep. So I think it's best to try to test at the highest possible level, even in unit tests, when you can. But if something gets very complicated or impossible to test, because you think something might get into some kind of state, but you don't know how, then testing the implementation could be useful. Yeah. It's not something I do often, though. I totally agree with you that unit tests are testing the implementation. When you look at it, it's, I mean, from one perspective, any unit test is the implementation, as you said, of the end to end story. So you are testing implementation, and you are actually coupling yourself to specific implementation by writing a unit test. So that's why some people really double down on end to end tests more, because they say, well, now I can change the implementation, and my tests keep passing. So I think one question to keep in mind is, how much extra setup am I having to do? How much noise is there in the test where I can't tell whether the thing I care about in this test is being exercised and is working or not? So if you have to do a bunch of setup, like we mentioned at the beginning, if you have to log in as this kind of user, that kind of user, that kind of user, and then you test 100 edge cases on this one part of the page, but you have to navigate in 10 pages deep to test that. Maybe there's a unit test where you can really thoroughly exercise the edge cases of if it's a guest user or an admin user or whatever, what's the visibility? What are the visibility permissions? And then you have one end to end test or a couple of end to end tests that exercise that and make sure you indeed can only see pages that you have permission to view. You can't see the admin panel if you're a guest or a regular user or whatever, but you want to thoroughly exercise all of those permutations in unit tests. That's what unit tests are great for. And if the implementation changes somehow, you can throw those tests away. It's not a big deal, but it's nice to have some confidence that the user is going to see things working correctly because it's actually exercising that code that your unit test is testing. But in terms of should you test internals of Elm modules, I very much agree that I think it's a feature that you can't write Elm unit tests of internal private things. I don't think that approach makes sense to me. I think of it as if you find yourself wanting to test the internals of one module, then what that's saying is it belongs as its own responsibility. I think about code often in terms of responsibility. Should this really be the job of the admin privileges, like the admin module to know whether I have access to this or not? Or should it be its own module that tells what you have access to? Maybe that belongs as its own responsibility. And maybe the fact that I'm trying to test this function like admin has access to that's like a private function in this module means that it wants to be its own responsibility and it wants to be tested separately and in a separate module. I think a lot of test room development is about, it's not a magic bullet. It doesn't fix your design. It doesn't make your code nice or make your code work. Unfortunately. Unfortunately, but it does expose issues and then you have to pay attention to the signals it's giving you. So if something is uncomfortable, that might be a design smell. That might mean, Hey, this code is hard to test. Well, what's that telling me about my design? We talked about end to end testing, but we didn't really talk about how you would do that in Elm. I think sometimes when people think about testing Elm, like we're so used to living within the Elm ecosystem and we don't want to go outside of it, but I think it's worth just stating that it's okay to use non Elm tools to test Elm code. For example, you can use Cypress to exercise, you know, to pull up a browser and start clicking around and you know, you might have to write some JavaScript and make some assertions there, but it's okay. Like use the best tool for the job. Yeah. I love Cypress. I find it very good. I'm very sorry that I've never had the chance to use it at work and I have the chance to try it out, set it up and then it got forgotten. But that's what often happens with end to end tests. In my experience, they get left out. Oh, but they can be so helpful. Yeah. And then there's also Elm program tests. So I would characterize Elm program test as more of a, an integration test than an end to end test because it's not, it's not running end to end, right? It's not running in a browser. Yeah. Yeah, exactly. It's, it's simulating putting pieces together rather than actually doing that. Yeah. You're writing scenarios like I have this application or this element. When it gets displayed, the user clicks on something and then this action gets triggered or this command gets triggered. This message. Why? What did I say? All of those other things. And then you cycle and try other things and do expectations all the way around. Right. And then it simulates HTTP responses coming back with certain statuses and bodies and stuff. But I think that could be the topic of another episode. Definitely could be the topic of another episode. Let us know if you want that. I think that could be a fun one. I've been getting a lot of value out of Elm program test. I think it's a really cool tool. Definitely, definitely check it out. And, you know, one, one point to mention on that topic is testing effects. So like effects are opaque in Elm. You can't inspect a command, right? You can't like look at the command that's being returned and make assertions about it. So one of the things that Elm program test has you do, which is kind of a pain, but you get a lot of value and it's not the worst design idea. It's a reasonable design. You have to create a custom type that's a sort of intermediary value that represents all the possible effects that you can have in your domain. And then you have to write a function that turns that effect custom type that you define into an Elm command, which is an opaque thing. So you can make assertions about the commands that you're receiving. So yeah, I mean, basically Elm program test is it's actually you, you kind of give it your init and update and view, and it ties those pieces together and simulates some of the commands and stuff. So that's quite a cool technique. Martin Janacek had an Elm Europe talk that he gave about this tool he built called architecture test and Richard Feldman built like a similar tool for basically testing your update function. So that's another kind of interesting concept. I haven't played around with those particular tools too much, but there's so much you can play around with testing in Elm. It's really it's purity makes it really fun to play around with testing things. Yeah. I think the biggest hurdle is getting started. We like to write code and we like to refactor, but writing tests is a bit of a pain. But once you get into the hang of it, and once you have that coverage, then it feels very good. Exactly. Yeah. Yeah. And it is. Yeah. I mean, I really think that it's a great way to slice up a large task into small chunks because when you're looking at implementing something, you're like, where do I even be? Like, what do I even want it to look like when I call the function? What do I even want the API to look like? Well, you know, with the test, that's the first thing you do the red step, you write what, what might it look like? And then before you even run the test, you're like, is this really what I want it to look like? And you can think about that without worrying about the implementation a little bit. So it's a habit. And I think I think the way you get started, as with any habit is try it out, and then try it out some more and then try it out some more experiment. Soon, you'll you'll get Stockholm syndrome and you'll learn to love it. All right. Well, I think that gives people enough to get started. And maybe we'll we'll circle back another time with some some deeper dives on Elm program test, and maybe some other testing techniques, some refactoring techniques. But hopefully that gives people a good place to start. Yeah, I think it does. I hope it does. Let us know if it does. Let us know if it meets your expectations. Well, it didn't. Until next time. Until next time. Bye bye.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 7.82, "text": " Hello, Jeroen. Hello, Dillon. I really hope we meet people's expectations with today's", "tokens": [50364, 2425, 11, 508, 2032, 268, 13, 2425, 11, 28160, 13, 286, 534, 1454, 321, 1677, 561, 311, 9843, 365, 965, 311, 50755, 50755, 3500, 13, 663, 1709, 766, 322, 257, 665, 722, 13, 509, 528, 281, 980, 561, 264, 3500, 4829, 370, 436, 51219, 51219, 393, 4449, 577, 1578, 300, 4468, 390, 445, 586, 30, 865, 11, 731, 11, 286, 519, 436, 658, 309, 490, 264, 3500, 51505, 51505, 4876, 11, 457, 965, 321, 434, 516, 281, 751, 466, 2699, 76, 6921, 11, 597, 307, 6260, 365, 9843, 13, 51811, 51811], "temperature": 0.0, "avg_logprob": -0.21445588142641128, "compression_ratio": 1.5789473684210527, "no_caption_prob": 0.2060714066028595}, {"id": 1, "seek": 0, "start": 7.82, "end": 17.1, "text": " episode. That goes off on a good start. You want to tell people the episode topic so they", "tokens": [50364, 2425, 11, 508, 2032, 268, 13, 2425, 11, 28160, 13, 286, 534, 1454, 321, 1677, 561, 311, 9843, 365, 965, 311, 50755, 50755, 3500, 13, 663, 1709, 766, 322, 257, 665, 722, 13, 509, 528, 281, 980, 561, 264, 3500, 4829, 370, 436, 51219, 51219, 393, 4449, 577, 1578, 300, 4468, 390, 445, 586, 30, 865, 11, 731, 11, 286, 519, 436, 658, 309, 490, 264, 3500, 51505, 51505, 4876, 11, 457, 965, 321, 434, 516, 281, 751, 466, 2699, 76, 6921, 11, 597, 307, 6260, 365, 9843, 13, 51811, 51811], "temperature": 0.0, "avg_logprob": -0.21445588142641128, "compression_ratio": 1.5789473684210527, "no_caption_prob": 0.2060714066028595}, {"id": 2, "seek": 0, "start": 17.1, "end": 22.82, "text": " can appreciate how bad that pun was just now? Yeah, well, I think they got it from the episode", "tokens": [50364, 2425, 11, 508, 2032, 268, 13, 2425, 11, 28160, 13, 286, 534, 1454, 321, 1677, 561, 311, 9843, 365, 965, 311, 50755, 50755, 3500, 13, 663, 1709, 766, 322, 257, 665, 722, 13, 509, 528, 281, 980, 561, 264, 3500, 4829, 370, 436, 51219, 51219, 393, 4449, 577, 1578, 300, 4468, 390, 445, 586, 30, 865, 11, 731, 11, 286, 519, 436, 658, 309, 490, 264, 3500, 51505, 51505, 4876, 11, 457, 965, 321, 434, 516, 281, 751, 466, 2699, 76, 6921, 11, 597, 307, 6260, 365, 9843, 13, 51811, 51811], "temperature": 0.0, "avg_logprob": -0.21445588142641128, "compression_ratio": 1.5789473684210527, "no_caption_prob": 0.2060714066028595}, {"id": 3, "seek": 0, "start": 22.82, "end": 28.94, "text": " title, but today we're going to talk about Elm tests, which is dealing with expectations.", "tokens": [50364, 2425, 11, 508, 2032, 268, 13, 2425, 11, 28160, 13, 286, 534, 1454, 321, 1677, 561, 311, 9843, 365, 965, 311, 50755, 50755, 3500, 13, 663, 1709, 766, 322, 257, 665, 722, 13, 509, 528, 281, 980, 561, 264, 3500, 4829, 370, 436, 51219, 51219, 393, 4449, 577, 1578, 300, 4468, 390, 445, 586, 30, 865, 11, 731, 11, 286, 519, 436, 658, 309, 490, 264, 3500, 51505, 51505, 4876, 11, 457, 965, 321, 434, 516, 281, 751, 466, 2699, 76, 6921, 11, 597, 307, 6260, 365, 9843, 13, 51811, 51811], "temperature": 0.0, "avg_logprob": -0.21445588142641128, "compression_ratio": 1.5789473684210527, "no_caption_prob": 0.2060714066028595}, {"id": 4, "seek": 2894, "start": 28.94, "end": 34.6, "text": " Or do you want me to explain the pun? It's always funnier when you explain the joke.", "tokens": [50364, 1610, 360, 291, 528, 385, 281, 2903, 264, 4468, 30, 467, 311, 1009, 1019, 19165, 562, 291, 2903, 264, 7647, 13, 50647, 50647, 759, 456, 311, 472, 551, 286, 600, 3264, 11, 1009, 2903, 264, 7647, 13, 1033, 11, 370, 291, 848, 1417, 50951, 50951, 466, 3440, 561, 311, 9843, 293, 294, 2699, 76, 6921, 11, 291, 2464, 9843, 337, 257, 1500, 51221, 51221, 281, 1320, 13, 3008, 11, 498, 561, 4999, 380, 322, 264, 4123, 5059, 264, 700, 565, 11, 586, 436, 434, 2138, 51511, 51511], "temperature": 0.0, "avg_logprob": -0.1283669632472349, "compression_ratio": 1.647887323943662, "no_caption_prob": 0.00017947735614143312}, {"id": 5, "seek": 2894, "start": 34.6, "end": 40.68, "text": " If there's one thing I've learned, always explain the joke. Okay, so you said talking", "tokens": [50364, 1610, 360, 291, 528, 385, 281, 2903, 264, 4468, 30, 467, 311, 1009, 1019, 19165, 562, 291, 2903, 264, 7647, 13, 50647, 50647, 759, 456, 311, 472, 551, 286, 600, 3264, 11, 1009, 2903, 264, 7647, 13, 1033, 11, 370, 291, 848, 1417, 50951, 50951, 466, 3440, 561, 311, 9843, 293, 294, 2699, 76, 6921, 11, 291, 2464, 9843, 337, 257, 1500, 51221, 51221, 281, 1320, 13, 3008, 11, 498, 561, 4999, 380, 322, 264, 4123, 5059, 264, 700, 565, 11, 586, 436, 434, 2138, 51511, 51511], "temperature": 0.0, "avg_logprob": -0.1283669632472349, "compression_ratio": 1.647887323943662, "no_caption_prob": 0.00017947735614143312}, {"id": 6, "seek": 2894, "start": 40.68, "end": 46.08, "text": " about meeting people's expectations and in Elm tests, you write expectations for a test", "tokens": [50364, 1610, 360, 291, 528, 385, 281, 2903, 264, 4468, 30, 467, 311, 1009, 1019, 19165, 562, 291, 2903, 264, 7647, 13, 50647, 50647, 759, 456, 311, 472, 551, 286, 600, 3264, 11, 1009, 2903, 264, 7647, 13, 1033, 11, 370, 291, 848, 1417, 50951, 50951, 466, 3440, 561, 311, 9843, 293, 294, 2699, 76, 6921, 11, 291, 2464, 9843, 337, 257, 1500, 51221, 51221, 281, 1320, 13, 3008, 11, 498, 561, 4999, 380, 322, 264, 4123, 5059, 264, 700, 565, 11, 586, 436, 434, 2138, 51511, 51511], "temperature": 0.0, "avg_logprob": -0.1283669632472349, "compression_ratio": 1.647887323943662, "no_caption_prob": 0.00017947735614143312}, {"id": 7, "seek": 2894, "start": 46.08, "end": 51.88, "text": " to pass. See, if people weren't on the floor laughing the first time, now they're definitely", "tokens": [50364, 1610, 360, 291, 528, 385, 281, 2903, 264, 4468, 30, 467, 311, 1009, 1019, 19165, 562, 291, 2903, 264, 7647, 13, 50647, 50647, 759, 456, 311, 472, 551, 286, 600, 3264, 11, 1009, 2903, 264, 7647, 13, 1033, 11, 370, 291, 848, 1417, 50951, 50951, 466, 3440, 561, 311, 9843, 293, 294, 2699, 76, 6921, 11, 291, 2464, 9843, 337, 257, 1500, 51221, 51221, 281, 1320, 13, 3008, 11, 498, 561, 4999, 380, 322, 264, 4123, 5059, 264, 700, 565, 11, 586, 436, 434, 2138, 51511, 51511], "temperature": 0.0, "avg_logprob": -0.1283669632472349, "compression_ratio": 1.647887323943662, "no_caption_prob": 0.00017947735614143312}, {"id": 8, "seek": 5188, "start": 51.88, "end": 61.32, "text": " laughing really hard. You're welcome. Okay, so let's quickly move on from that and give", "tokens": [50364, 5059, 534, 1152, 13, 509, 434, 2928, 13, 1033, 11, 370, 718, 311, 2661, 1286, 322, 490, 300, 293, 976, 50836, 50836, 561, 257, 707, 9339, 281, 2699, 76, 6921, 13, 407, 411, 11, 337, 2618, 567, 575, 1128, 20381, 51206, 51206, 309, 11, 437, 437, 264, 12872, 307, 309, 30, 1012, 360, 291, 754, 483, 992, 493, 365, 309, 294, 264, 700, 1081, 30, 865, 11, 51489, 51489], "temperature": 0.0, "avg_logprob": -0.12987725163849306, "compression_ratio": 1.4010416666666667, "no_caption_prob": 0.00018505577463656664}, {"id": 9, "seek": 5188, "start": 61.32, "end": 68.72, "text": " people a little introduction to Elm tests. So like, for somebody who has never encountered", "tokens": [50364, 5059, 534, 1152, 13, 509, 434, 2928, 13, 1033, 11, 370, 718, 311, 2661, 1286, 322, 490, 300, 293, 976, 50836, 50836, 561, 257, 707, 9339, 281, 2699, 76, 6921, 13, 407, 411, 11, 337, 2618, 567, 575, 1128, 20381, 51206, 51206, 309, 11, 437, 437, 264, 12872, 307, 309, 30, 1012, 360, 291, 754, 483, 992, 493, 365, 309, 294, 264, 700, 1081, 30, 865, 11, 51489, 51489], "temperature": 0.0, "avg_logprob": -0.12987725163849306, "compression_ratio": 1.4010416666666667, "no_caption_prob": 0.00018505577463656664}, {"id": 10, "seek": 5188, "start": 68.72, "end": 74.38, "text": " it, what what the heck is it? How do you even get set up with it in the first place? Yeah,", "tokens": [50364, 5059, 534, 1152, 13, 509, 434, 2928, 13, 1033, 11, 370, 718, 311, 2661, 1286, 322, 490, 300, 293, 976, 50836, 50836, 561, 257, 707, 9339, 281, 2699, 76, 6921, 13, 407, 411, 11, 337, 2618, 567, 575, 1128, 20381, 51206, 51206, 309, 11, 437, 437, 264, 12872, 307, 309, 30, 1012, 360, 291, 754, 483, 992, 493, 365, 309, 294, 264, 700, 1081, 30, 865, 11, 51489, 51489], "temperature": 0.0, "avg_logprob": -0.12987725163849306, "compression_ratio": 1.4010416666666667, "no_caption_prob": 0.00018505577463656664}, {"id": 11, "seek": 7438, "start": 74.38, "end": 83.96, "text": " so Elm tests is the official library and tool to write tests in Elm and for Elm code. So", "tokens": [50364, 370, 2699, 76, 6921, 307, 264, 4783, 6405, 293, 2290, 281, 2464, 6921, 294, 2699, 76, 293, 337, 2699, 76, 3089, 13, 407, 50843, 50843, 291, 362, 732, 3166, 337, 309, 13, 509, 362, 472, 644, 300, 307, 264, 6405, 11, 597, 307, 2699, 76, 8240, 24765, 763, 51169, 51169, 17330, 1500, 13, 400, 456, 311, 264, 12855, 40, 11, 597, 307, 1190, 322, 13891, 13, 407, 291, 281, 3625, 309, 11, 291, 360, 51529, 51529], "temperature": 0.0, "avg_logprob": -0.13005801958915514, "compression_ratio": 1.569767441860465, "no_caption_prob": 2.3910031814011745e-05}, {"id": 12, "seek": 7438, "start": 83.96, "end": 90.47999999999999, "text": " you have two parts for it. You have one part that is the library, which is Elm dash explorations", "tokens": [50364, 370, 2699, 76, 6921, 307, 264, 4783, 6405, 293, 2290, 281, 2464, 6921, 294, 2699, 76, 293, 337, 2699, 76, 3089, 13, 407, 50843, 50843, 291, 362, 732, 3166, 337, 309, 13, 509, 362, 472, 644, 300, 307, 264, 6405, 11, 597, 307, 2699, 76, 8240, 24765, 763, 51169, 51169, 17330, 1500, 13, 400, 456, 311, 264, 12855, 40, 11, 597, 307, 1190, 322, 13891, 13, 407, 291, 281, 3625, 309, 11, 291, 360, 51529, 51529], "temperature": 0.0, "avg_logprob": -0.13005801958915514, "compression_ratio": 1.569767441860465, "no_caption_prob": 2.3910031814011745e-05}, {"id": 13, "seek": 7438, "start": 90.47999999999999, "end": 97.67999999999999, "text": " slash test. And there's the CLI, which is run on nodes. So you to install it, you do", "tokens": [50364, 370, 2699, 76, 6921, 307, 264, 4783, 6405, 293, 2290, 281, 2464, 6921, 294, 2699, 76, 293, 337, 2699, 76, 3089, 13, 407, 50843, 50843, 291, 362, 732, 3166, 337, 309, 13, 509, 362, 472, 644, 300, 307, 264, 6405, 11, 597, 307, 2699, 76, 8240, 24765, 763, 51169, 51169, 17330, 1500, 13, 400, 456, 311, 264, 12855, 40, 11, 597, 307, 1190, 322, 13891, 13, 407, 291, 281, 3625, 309, 11, 291, 360, 51529, 51529], "temperature": 0.0, "avg_logprob": -0.13005801958915514, "compression_ratio": 1.569767441860465, "no_caption_prob": 2.3910031814011745e-05}, {"id": 14, "seek": 9768, "start": 97.68, "end": 105.80000000000001, "text": " well, the name is Elm test. And to install you do npm install Elm tests. That's pretty", "tokens": [50364, 731, 11, 264, 1315, 307, 2699, 76, 1500, 13, 400, 281, 3625, 291, 360, 297, 14395, 3625, 2699, 76, 6921, 13, 663, 311, 1238, 50770, 50770, 709, 309, 13, 876, 11, 293, 550, 767, 11, 456, 311, 364, 2699, 76, 1500, 3157, 5622, 11, 597, 307, 733, 295, 4961, 51122, 51122, 337, 733, 295, 3287, 721, 493, 570, 456, 311, 257, 456, 311, 257, 3541, 294, 428, 2699, 76, 5893, 31828, 11, 51410, 51410, 597, 575, 1500, 36606, 13, 400, 309, 2203, 281, 652, 988, 309, 3625, 82, 264, 291, 458, 11, 2296, 51680, 51680], "temperature": 0.0, "avg_logprob": -0.14934733479293352, "compression_ratio": 1.6342592592592593, "no_caption_prob": 4.8322981456294656e-05}, {"id": 15, "seek": 9768, "start": 105.80000000000001, "end": 112.84, "text": " much it. Oh, and then actually, there's an Elm test init command, which is kind of helpful", "tokens": [50364, 731, 11, 264, 1315, 307, 2699, 76, 1500, 13, 400, 281, 3625, 291, 360, 297, 14395, 3625, 2699, 76, 6921, 13, 663, 311, 1238, 50770, 50770, 709, 309, 13, 876, 11, 293, 550, 767, 11, 456, 311, 364, 2699, 76, 1500, 3157, 5622, 11, 597, 307, 733, 295, 4961, 51122, 51122, 337, 733, 295, 3287, 721, 493, 570, 456, 311, 257, 456, 311, 257, 3541, 294, 428, 2699, 76, 5893, 31828, 11, 51410, 51410, 597, 575, 1500, 36606, 13, 400, 309, 2203, 281, 652, 988, 309, 3625, 82, 264, 291, 458, 11, 2296, 51680, 51680], "temperature": 0.0, "avg_logprob": -0.14934733479293352, "compression_ratio": 1.6342592592592593, "no_caption_prob": 4.8322981456294656e-05}, {"id": 16, "seek": 9768, "start": 112.84, "end": 118.60000000000001, "text": " for kind of setting things up because there's a there's a section in your Elm dot JSON,", "tokens": [50364, 731, 11, 264, 1315, 307, 2699, 76, 1500, 13, 400, 281, 3625, 291, 360, 297, 14395, 3625, 2699, 76, 6921, 13, 663, 311, 1238, 50770, 50770, 709, 309, 13, 876, 11, 293, 550, 767, 11, 456, 311, 364, 2699, 76, 1500, 3157, 5622, 11, 597, 307, 733, 295, 4961, 51122, 51122, 337, 733, 295, 3287, 721, 493, 570, 456, 311, 257, 456, 311, 257, 3541, 294, 428, 2699, 76, 5893, 31828, 11, 51410, 51410, 597, 575, 1500, 36606, 13, 400, 309, 2203, 281, 652, 988, 309, 3625, 82, 264, 291, 458, 11, 2296, 51680, 51680], "temperature": 0.0, "avg_logprob": -0.14934733479293352, "compression_ratio": 1.6342592592592593, "no_caption_prob": 4.8322981456294656e-05}, {"id": 17, "seek": 9768, "start": 118.60000000000001, "end": 124.0, "text": " which has test dependencies. And it needs to make sure it installs the you know, proper", "tokens": [50364, 731, 11, 264, 1315, 307, 2699, 76, 1500, 13, 400, 281, 3625, 291, 360, 297, 14395, 3625, 2699, 76, 6921, 13, 663, 311, 1238, 50770, 50770, 709, 309, 13, 876, 11, 293, 550, 767, 11, 456, 311, 364, 2699, 76, 1500, 3157, 5622, 11, 597, 307, 733, 295, 4961, 51122, 51122, 337, 733, 295, 3287, 721, 493, 570, 456, 311, 257, 456, 311, 257, 3541, 294, 428, 2699, 76, 5893, 31828, 11, 51410, 51410, 597, 575, 1500, 36606, 13, 400, 309, 2203, 281, 652, 988, 309, 3625, 82, 264, 291, 458, 11, 2296, 51680, 51680], "temperature": 0.0, "avg_logprob": -0.14934733479293352, "compression_ratio": 1.6342592592592593, "no_caption_prob": 4.8322981456294656e-05}, {"id": 18, "seek": 12400, "start": 124.0, "end": 129.4, "text": " version of Elm exploration slash test the package that allows you to make assertions", "tokens": [50364, 3037, 295, 2699, 76, 16197, 17330, 1500, 264, 7372, 300, 4045, 291, 281, 652, 19810, 626, 50634, 50634, 293, 19710, 1500, 3331, 13, 865, 11, 370, 291, 370, 291, 362, 428, 4265, 3089, 420, 428, 4009, 3089, 13, 51018, 51018, 400, 958, 281, 300, 11, 291, 2673, 362, 257, 6921, 10820, 294, 597, 291, 829, 439, 264, 6921, 13, 400, 51314, 51314, 2699, 76, 1500, 307, 516, 281, 1401, 439, 264, 6921, 11, 915, 439, 264, 6921, 300, 366, 2435, 294, 300, 10820, 13, 51706, 51706], "temperature": 0.0, "avg_logprob": -0.17005882479927756, "compression_ratio": 1.7623762376237624, "no_caption_prob": 2.392325950495433e-05}, {"id": 19, "seek": 12400, "start": 129.4, "end": 137.08, "text": " and declare test cases. Yeah, so you so you have your production code or your source code.", "tokens": [50364, 3037, 295, 2699, 76, 16197, 17330, 1500, 264, 7372, 300, 4045, 291, 281, 652, 19810, 626, 50634, 50634, 293, 19710, 1500, 3331, 13, 865, 11, 370, 291, 370, 291, 362, 428, 4265, 3089, 420, 428, 4009, 3089, 13, 51018, 51018, 400, 958, 281, 300, 11, 291, 2673, 362, 257, 6921, 10820, 294, 597, 291, 829, 439, 264, 6921, 13, 400, 51314, 51314, 2699, 76, 1500, 307, 516, 281, 1401, 439, 264, 6921, 11, 915, 439, 264, 6921, 300, 366, 2435, 294, 300, 10820, 13, 51706, 51706], "temperature": 0.0, "avg_logprob": -0.17005882479927756, "compression_ratio": 1.7623762376237624, "no_caption_prob": 2.392325950495433e-05}, {"id": 20, "seek": 12400, "start": 137.08, "end": 143.0, "text": " And next to that, you usually have a tests folder in which you put all the tests. And", "tokens": [50364, 3037, 295, 2699, 76, 16197, 17330, 1500, 264, 7372, 300, 4045, 291, 281, 652, 19810, 626, 50634, 50634, 293, 19710, 1500, 3331, 13, 865, 11, 370, 291, 370, 291, 362, 428, 4265, 3089, 420, 428, 4009, 3089, 13, 51018, 51018, 400, 958, 281, 300, 11, 291, 2673, 362, 257, 6921, 10820, 294, 597, 291, 829, 439, 264, 6921, 13, 400, 51314, 51314, 2699, 76, 1500, 307, 516, 281, 1401, 439, 264, 6921, 11, 915, 439, 264, 6921, 300, 366, 2435, 294, 300, 10820, 13, 51706, 51706], "temperature": 0.0, "avg_logprob": -0.17005882479927756, "compression_ratio": 1.7623762376237624, "no_caption_prob": 2.392325950495433e-05}, {"id": 21, "seek": 12400, "start": 143.0, "end": 150.84, "text": " Elm test is going to read all the tests, find all the tests that are available in that folder.", "tokens": [50364, 3037, 295, 2699, 76, 16197, 17330, 1500, 264, 7372, 300, 4045, 291, 281, 652, 19810, 626, 50634, 50634, 293, 19710, 1500, 3331, 13, 865, 11, 370, 291, 370, 291, 362, 428, 4265, 3089, 420, 428, 4009, 3089, 13, 51018, 51018, 400, 958, 281, 300, 11, 291, 2673, 362, 257, 6921, 10820, 294, 597, 291, 829, 439, 264, 6921, 13, 400, 51314, 51314, 2699, 76, 1500, 307, 516, 281, 1401, 439, 264, 6921, 11, 915, 439, 264, 6921, 300, 366, 2435, 294, 300, 10820, 13, 51706, 51706], "temperature": 0.0, "avg_logprob": -0.17005882479927756, "compression_ratio": 1.7623762376237624, "no_caption_prob": 2.392325950495433e-05}, {"id": 22, "seek": 15084, "start": 150.84, "end": 156.04, "text": " With a little bit of magic, and with a little bit of magic, build something using your test", "tokens": [50364, 2022, 257, 707, 857, 295, 5585, 11, 293, 365, 257, 707, 857, 295, 5585, 11, 1322, 746, 1228, 428, 1500, 50624, 50624, 36606, 300, 307, 428, 294, 2699, 76, 31828, 11, 558, 293, 1190, 552, 13, 865, 11, 309, 309, 311, 733, 295, 1152, 281, 50989, 50989, 7019, 428, 3567, 926, 309, 412, 700, 13, 583, 437, 309, 775, 307, 309, 1542, 337, 604, 4190, 300, 366, 51250, 51250, 9495, 294, 428, 1500, 10820, 295, 264, 2010, 1500, 11, 291, 727, 19219, 411, 3866, 1192, 1496, 4190, 51579, 51579], "temperature": 0.0, "avg_logprob": -0.1072058834872403, "compression_ratio": 1.6061946902654867, "no_caption_prob": 6.540411959576886e-06}, {"id": 23, "seek": 15084, "start": 156.04, "end": 163.34, "text": " dependencies that is your in Elm JSON, right and run them. Yeah, it it's kind of hard to", "tokens": [50364, 2022, 257, 707, 857, 295, 5585, 11, 293, 365, 257, 707, 857, 295, 5585, 11, 1322, 746, 1228, 428, 1500, 50624, 50624, 36606, 300, 307, 428, 294, 2699, 76, 31828, 11, 558, 293, 1190, 552, 13, 865, 11, 309, 309, 311, 733, 295, 1152, 281, 50989, 50989, 7019, 428, 3567, 926, 309, 412, 700, 13, 583, 437, 309, 775, 307, 309, 1542, 337, 604, 4190, 300, 366, 51250, 51250, 9495, 294, 428, 1500, 10820, 295, 264, 2010, 1500, 11, 291, 727, 19219, 411, 3866, 1192, 1496, 4190, 51579, 51579], "temperature": 0.0, "avg_logprob": -0.1072058834872403, "compression_ratio": 1.6061946902654867, "no_caption_prob": 6.540411959576886e-06}, {"id": 24, "seek": 15084, "start": 163.34, "end": 168.56, "text": " wrap your brain around it at first. But what it does is it looks for any values that are", "tokens": [50364, 2022, 257, 707, 857, 295, 5585, 11, 293, 365, 257, 707, 857, 295, 5585, 11, 1322, 746, 1228, 428, 1500, 50624, 50624, 36606, 300, 307, 428, 294, 2699, 76, 31828, 11, 558, 293, 1190, 552, 13, 865, 11, 309, 309, 311, 733, 295, 1152, 281, 50989, 50989, 7019, 428, 3567, 926, 309, 412, 700, 13, 583, 437, 309, 775, 307, 309, 1542, 337, 604, 4190, 300, 366, 51250, 51250, 9495, 294, 428, 1500, 10820, 295, 264, 2010, 1500, 11, 291, 727, 19219, 411, 3866, 1192, 1496, 4190, 51579, 51579], "temperature": 0.0, "avg_logprob": -0.1072058834872403, "compression_ratio": 1.6061946902654867, "no_caption_prob": 6.540411959576886e-06}, {"id": 25, "seek": 15084, "start": 168.56, "end": 175.14000000000001, "text": " exposed in your test folder of the type test, you could expose like multiple top level values", "tokens": [50364, 2022, 257, 707, 857, 295, 5585, 11, 293, 365, 257, 707, 857, 295, 5585, 11, 1322, 746, 1228, 428, 1500, 50624, 50624, 36606, 300, 307, 428, 294, 2699, 76, 31828, 11, 558, 293, 1190, 552, 13, 865, 11, 309, 309, 311, 733, 295, 1152, 281, 50989, 50989, 7019, 428, 3567, 926, 309, 412, 700, 13, 583, 437, 309, 775, 307, 309, 1542, 337, 604, 4190, 300, 366, 51250, 51250, 9495, 294, 428, 1500, 10820, 295, 264, 2010, 1500, 11, 291, 727, 19219, 411, 3866, 1192, 1496, 4190, 51579, 51579], "temperature": 0.0, "avg_logprob": -0.1072058834872403, "compression_ratio": 1.6061946902654867, "no_caption_prob": 6.540411959576886e-06}, {"id": 26, "seek": 17514, "start": 175.14, "end": 181.44, "text": " in a module of type test, and it will run those you could expose a list. Well, you create", "tokens": [50364, 294, 257, 10088, 295, 2010, 1500, 11, 293, 309, 486, 1190, 729, 291, 727, 19219, 257, 1329, 13, 1042, 11, 291, 1884, 50679, 50679, 411, 257, 1329, 295, 6921, 365, 257, 6786, 13, 316, 6786, 307, 445, 257, 2445, 300, 2516, 257, 1500, 11, 597, 50941, 50941, 2516, 257, 1329, 295, 6921, 11, 293, 264, 4876, 337, 264, 1379, 1594, 13, 7010, 11, 2293, 13, 400, 534, 11, 437, 51269, 51269, 257, 1500, 307, 294, 2699, 76, 307, 309, 311, 291, 445, 41117, 472, 295, 264, 2066, 36133, 6828, 11, 337, 1365, 11, 51617, 51617], "temperature": 0.0, "avg_logprob": -0.11668625074563567, "compression_ratio": 1.6790697674418604, "no_caption_prob": 2.5070283300010487e-05}, {"id": 27, "seek": 17514, "start": 181.44, "end": 186.67999999999998, "text": " like a list of tests with a describe. A describe is just a function that takes a test, which", "tokens": [50364, 294, 257, 10088, 295, 2010, 1500, 11, 293, 309, 486, 1190, 729, 291, 727, 19219, 257, 1329, 13, 1042, 11, 291, 1884, 50679, 50679, 411, 257, 1329, 295, 6921, 365, 257, 6786, 13, 316, 6786, 307, 445, 257, 2445, 300, 2516, 257, 1500, 11, 597, 50941, 50941, 2516, 257, 1329, 295, 6921, 11, 293, 264, 4876, 337, 264, 1379, 1594, 13, 7010, 11, 2293, 13, 400, 534, 11, 437, 51269, 51269, 257, 1500, 307, 294, 2699, 76, 307, 309, 311, 291, 445, 41117, 472, 295, 264, 2066, 36133, 6828, 11, 337, 1365, 11, 51617, 51617], "temperature": 0.0, "avg_logprob": -0.11668625074563567, "compression_ratio": 1.6790697674418604, "no_caption_prob": 2.5070283300010487e-05}, {"id": 28, "seek": 17514, "start": 186.67999999999998, "end": 193.23999999999998, "text": " takes a list of tests, and the title for the whole group. Yep, exactly. And really, what", "tokens": [50364, 294, 257, 10088, 295, 2010, 1500, 11, 293, 309, 486, 1190, 729, 291, 727, 19219, 257, 1329, 13, 1042, 11, 291, 1884, 50679, 50679, 411, 257, 1329, 295, 6921, 365, 257, 6786, 13, 316, 6786, 307, 445, 257, 2445, 300, 2516, 257, 1500, 11, 597, 50941, 50941, 2516, 257, 1329, 295, 6921, 11, 293, 264, 4876, 337, 264, 1379, 1594, 13, 7010, 11, 2293, 13, 400, 534, 11, 437, 51269, 51269, 257, 1500, 307, 294, 2699, 76, 307, 309, 311, 291, 445, 41117, 472, 295, 264, 2066, 36133, 6828, 11, 337, 1365, 11, 51617, 51617], "temperature": 0.0, "avg_logprob": -0.11668625074563567, "compression_ratio": 1.6790697674418604, "no_caption_prob": 2.5070283300010487e-05}, {"id": 29, "seek": 17514, "start": 193.23999999999998, "end": 200.2, "text": " a test is in Elm is it's you just invoke one of the expect helper functions, for example,", "tokens": [50364, 294, 257, 10088, 295, 2010, 1500, 11, 293, 309, 486, 1190, 729, 291, 727, 19219, 257, 1329, 13, 1042, 11, 291, 1884, 50679, 50679, 411, 257, 1329, 295, 6921, 365, 257, 6786, 13, 316, 6786, 307, 445, 257, 2445, 300, 2516, 257, 1500, 11, 597, 50941, 50941, 2516, 257, 1329, 295, 6921, 11, 293, 264, 4876, 337, 264, 1379, 1594, 13, 7010, 11, 2293, 13, 400, 534, 11, 437, 51269, 51269, 257, 1500, 307, 294, 2699, 76, 307, 309, 311, 291, 445, 41117, 472, 295, 264, 2066, 36133, 6828, 11, 337, 1365, 11, 51617, 51617], "temperature": 0.0, "avg_logprob": -0.11668625074563567, "compression_ratio": 1.6790697674418604, "no_caption_prob": 2.5070283300010487e-05}, {"id": 30, "seek": 20020, "start": 200.2, "end": 206.88, "text": " expect dot equal, and that takes two values. So if you say expect dot equal one, two, it's", "tokens": [50364, 2066, 5893, 2681, 11, 293, 300, 2516, 732, 4190, 13, 407, 498, 291, 584, 2066, 5893, 2681, 472, 11, 732, 11, 309, 311, 50698, 50698, 516, 281, 584, 11, 286, 5176, 11, 718, 311, 536, 11, 767, 11, 2673, 291, 11240, 309, 13, 407, 309, 311, 1152, 281, 519, 50984, 50984, 466, 597, 472, 307, 5176, 293, 3539, 13, 759, 291, 584, 472, 11, 558, 11240, 11, 2066, 5893, 2681, 51314, 51314, 732, 11, 309, 311, 516, 281, 584, 11, 286, 658, 472, 11, 457, 286, 5176, 309, 281, 312, 732, 13, 865, 11, 2293, 13, 407, 6284, 11, 51830, 51830], "temperature": 0.0, "avg_logprob": -0.12900116374191728, "compression_ratio": 1.8894736842105264, "no_caption_prob": 3.88299158657901e-05}, {"id": 31, "seek": 20020, "start": 206.88, "end": 212.6, "text": " going to say, I expected, let's see, actually, usually you pipe it. So it's hard to think", "tokens": [50364, 2066, 5893, 2681, 11, 293, 300, 2516, 732, 4190, 13, 407, 498, 291, 584, 2066, 5893, 2681, 472, 11, 732, 11, 309, 311, 50698, 50698, 516, 281, 584, 11, 286, 5176, 11, 718, 311, 536, 11, 767, 11, 2673, 291, 11240, 309, 13, 407, 309, 311, 1152, 281, 519, 50984, 50984, 466, 597, 472, 307, 5176, 293, 3539, 13, 759, 291, 584, 472, 11, 558, 11240, 11, 2066, 5893, 2681, 51314, 51314, 732, 11, 309, 311, 516, 281, 584, 11, 286, 658, 472, 11, 457, 286, 5176, 309, 281, 312, 732, 13, 865, 11, 2293, 13, 407, 6284, 11, 51830, 51830], "temperature": 0.0, "avg_logprob": -0.12900116374191728, "compression_ratio": 1.8894736842105264, "no_caption_prob": 3.88299158657901e-05}, {"id": 32, "seek": 20020, "start": 212.6, "end": 219.2, "text": " about which one is expected and actual. If you say one, right pipe, expect dot equal", "tokens": [50364, 2066, 5893, 2681, 11, 293, 300, 2516, 732, 4190, 13, 407, 498, 291, 584, 2066, 5893, 2681, 472, 11, 732, 11, 309, 311, 50698, 50698, 516, 281, 584, 11, 286, 5176, 11, 718, 311, 536, 11, 767, 11, 2673, 291, 11240, 309, 13, 407, 309, 311, 1152, 281, 519, 50984, 50984, 466, 597, 472, 307, 5176, 293, 3539, 13, 759, 291, 584, 472, 11, 558, 11240, 11, 2066, 5893, 2681, 51314, 51314, 732, 11, 309, 311, 516, 281, 584, 11, 286, 658, 472, 11, 457, 286, 5176, 309, 281, 312, 732, 13, 865, 11, 2293, 13, 407, 6284, 11, 51830, 51830], "temperature": 0.0, "avg_logprob": -0.12900116374191728, "compression_ratio": 1.8894736842105264, "no_caption_prob": 3.88299158657901e-05}, {"id": 33, "seek": 20020, "start": 219.2, "end": 229.51999999999998, "text": " two, it's going to say, I got one, but I expected it to be two. Yeah, exactly. So ultimately,", "tokens": [50364, 2066, 5893, 2681, 11, 293, 300, 2516, 732, 4190, 13, 407, 498, 291, 584, 2066, 5893, 2681, 472, 11, 732, 11, 309, 311, 50698, 50698, 516, 281, 584, 11, 286, 5176, 11, 718, 311, 536, 11, 767, 11, 2673, 291, 11240, 309, 13, 407, 309, 311, 1152, 281, 519, 50984, 50984, 466, 597, 472, 307, 5176, 293, 3539, 13, 759, 291, 584, 472, 11, 558, 11240, 11, 2066, 5893, 2681, 51314, 51314, 732, 11, 309, 311, 516, 281, 584, 11, 286, 658, 472, 11, 457, 286, 5176, 309, 281, 312, 732, 13, 865, 11, 2293, 13, 407, 6284, 11, 51830, 51830], "temperature": 0.0, "avg_logprob": -0.12900116374191728, "compression_ratio": 1.8894736842105264, "no_caption_prob": 3.88299158657901e-05}, {"id": 34, "seek": 22952, "start": 229.52, "end": 237.0, "text": " that's what an Elm test case is. It's literally just an expectation. So one of the things", "tokens": [50364, 300, 311, 437, 364, 2699, 76, 1500, 1389, 307, 13, 467, 311, 3736, 445, 364, 14334, 13, 407, 472, 295, 264, 721, 50738, 50738, 300, 311, 534, 2238, 466, 264, 1715, 295, 2699, 76, 307, 264, 1186, 300, 309, 311, 370, 1500, 712, 11, 570, 51072, 51072, 309, 311, 445, 561, 11229, 670, 12204, 13, 286, 519, 321, 1062, 362, 2825, 466, 341, 322, 1071, 51284, 51284, 3500, 11, 457, 561, 11229, 670, 12204, 294, 661, 8650, 1382, 281, 652, 439, 295, 613, 51608, 51608], "temperature": 0.0, "avg_logprob": -0.09796575568188196, "compression_ratio": 1.6713615023474178, "no_caption_prob": 4.3999618355883285e-05}, {"id": 35, "seek": 22952, "start": 237.0, "end": 243.68, "text": " that's really beautiful about the design of Elm is the fact that it's so testable, because", "tokens": [50364, 300, 311, 437, 364, 2699, 76, 1500, 1389, 307, 13, 467, 311, 3736, 445, 364, 14334, 13, 407, 472, 295, 264, 721, 50738, 50738, 300, 311, 534, 2238, 466, 264, 1715, 295, 2699, 76, 307, 264, 1186, 300, 309, 311, 370, 1500, 712, 11, 570, 51072, 51072, 309, 311, 445, 561, 11229, 670, 12204, 13, 286, 519, 321, 1062, 362, 2825, 466, 341, 322, 1071, 51284, 51284, 3500, 11, 457, 561, 11229, 670, 12204, 294, 661, 8650, 1382, 281, 652, 439, 295, 613, 51608, 51608], "temperature": 0.0, "avg_logprob": -0.09796575568188196, "compression_ratio": 1.6713615023474178, "no_caption_prob": 4.3999618355883285e-05}, {"id": 36, "seek": 22952, "start": 243.68, "end": 247.92000000000002, "text": " it's just people bend over backwards. I think we might have talked about this on another", "tokens": [50364, 300, 311, 437, 364, 2699, 76, 1500, 1389, 307, 13, 467, 311, 3736, 445, 364, 14334, 13, 407, 472, 295, 264, 721, 50738, 50738, 300, 311, 534, 2238, 466, 264, 1715, 295, 2699, 76, 307, 264, 1186, 300, 309, 311, 370, 1500, 712, 11, 570, 51072, 51072, 309, 311, 445, 561, 11229, 670, 12204, 13, 286, 519, 321, 1062, 362, 2825, 466, 341, 322, 1071, 51284, 51284, 3500, 11, 457, 561, 11229, 670, 12204, 294, 661, 8650, 1382, 281, 652, 439, 295, 613, 51608, 51608], "temperature": 0.0, "avg_logprob": -0.09796575568188196, "compression_ratio": 1.6713615023474178, "no_caption_prob": 4.3999618355883285e-05}, {"id": 37, "seek": 22952, "start": 247.92000000000002, "end": 254.4, "text": " episode, but people bend over backwards in other languages trying to make all of these", "tokens": [50364, 300, 311, 437, 364, 2699, 76, 1500, 1389, 307, 13, 467, 311, 3736, 445, 364, 14334, 13, 407, 472, 295, 264, 721, 50738, 50738, 300, 311, 534, 2238, 466, 264, 1715, 295, 2699, 76, 307, 264, 1186, 300, 309, 311, 370, 1500, 712, 11, 570, 51072, 51072, 309, 311, 445, 561, 11229, 670, 12204, 13, 286, 519, 321, 1062, 362, 2825, 466, 341, 322, 1071, 51284, 51284, 3500, 11, 457, 561, 11229, 670, 12204, 294, 661, 8650, 1382, 281, 652, 439, 295, 613, 51608, 51608], "temperature": 0.0, "avg_logprob": -0.09796575568188196, "compression_ratio": 1.6713615023474178, "no_caption_prob": 4.3999618355883285e-05}, {"id": 38, "seek": 25440, "start": 254.4, "end": 262.2, "text": " side effects and trying to assert on all of these impure things and trying to make non", "tokens": [50364, 1252, 5065, 293, 1382, 281, 19810, 322, 439, 295, 613, 704, 540, 721, 293, 1382, 281, 652, 2107, 50754, 50754, 15957, 3142, 721, 15957, 3142, 13, 407, 291, 362, 512, 3089, 300, 5946, 322, 565, 13, 509, 362, 51092, 51092, 512, 2823, 1507, 300, 309, 311, 8867, 484, 293, 3760, 4338, 9102, 293, 721, 411, 51364, 51364, 300, 13, 400, 291, 362, 281, 360, 439, 295, 341, 8657, 13, 400, 512, 295, 309, 311, 26947, 11, 512, 295, 309, 311, 4739, 11, 51668, 51668, 512, 295, 309, 311, 406, 13, 509, 434, 406, 1596, 988, 597, 295, 264, 3755, 366, 4739, 420, 406, 13, 509, 434, 51856, 51856], "temperature": 0.0, "avg_logprob": -0.1015478480945934, "compression_ratio": 1.9267241379310345, "no_caption_prob": 7.141326932469383e-05}, {"id": 39, "seek": 25440, "start": 262.2, "end": 268.96, "text": " deterministic things deterministic. So you have some code that depends on time. You have", "tokens": [50364, 1252, 5065, 293, 1382, 281, 19810, 322, 439, 295, 613, 704, 540, 721, 293, 1382, 281, 652, 2107, 50754, 50754, 15957, 3142, 721, 15957, 3142, 13, 407, 291, 362, 512, 3089, 300, 5946, 322, 565, 13, 509, 362, 51092, 51092, 512, 2823, 1507, 300, 309, 311, 8867, 484, 293, 3760, 4338, 9102, 293, 721, 411, 51364, 51364, 300, 13, 400, 291, 362, 281, 360, 439, 295, 341, 8657, 13, 400, 512, 295, 309, 311, 26947, 11, 512, 295, 309, 311, 4739, 11, 51668, 51668, 512, 295, 309, 311, 406, 13, 509, 434, 406, 1596, 988, 597, 295, 264, 3755, 366, 4739, 420, 406, 13, 509, 434, 51856, 51856], "temperature": 0.0, "avg_logprob": -0.1015478480945934, "compression_ratio": 1.9267241379310345, "no_caption_prob": 7.141326932469383e-05}, {"id": 40, "seek": 25440, "start": 268.96, "end": 274.4, "text": " some environment stuff that it's picking out and reading global variables and things like", "tokens": [50364, 1252, 5065, 293, 1382, 281, 19810, 322, 439, 295, 613, 704, 540, 721, 293, 1382, 281, 652, 2107, 50754, 50754, 15957, 3142, 721, 15957, 3142, 13, 407, 291, 362, 512, 3089, 300, 5946, 322, 565, 13, 509, 362, 51092, 51092, 512, 2823, 1507, 300, 309, 311, 8867, 484, 293, 3760, 4338, 9102, 293, 721, 411, 51364, 51364, 300, 13, 400, 291, 362, 281, 360, 439, 295, 341, 8657, 13, 400, 512, 295, 309, 311, 26947, 11, 512, 295, 309, 311, 4739, 11, 51668, 51668, 512, 295, 309, 311, 406, 13, 509, 434, 406, 1596, 988, 597, 295, 264, 3755, 366, 4739, 420, 406, 13, 509, 434, 51856, 51856], "temperature": 0.0, "avg_logprob": -0.1015478480945934, "compression_ratio": 1.9267241379310345, "no_caption_prob": 7.141326932469383e-05}, {"id": 41, "seek": 25440, "start": 274.4, "end": 280.48, "text": " that. And you have to do all of this setup. And some of it's implicit, some of it's required,", "tokens": [50364, 1252, 5065, 293, 1382, 281, 19810, 322, 439, 295, 613, 704, 540, 721, 293, 1382, 281, 652, 2107, 50754, 50754, 15957, 3142, 721, 15957, 3142, 13, 407, 291, 362, 512, 3089, 300, 5946, 322, 565, 13, 509, 362, 51092, 51092, 512, 2823, 1507, 300, 309, 311, 8867, 484, 293, 3760, 4338, 9102, 293, 721, 411, 51364, 51364, 300, 13, 400, 291, 362, 281, 360, 439, 295, 341, 8657, 13, 400, 512, 295, 309, 311, 26947, 11, 512, 295, 309, 311, 4739, 11, 51668, 51668, 512, 295, 309, 311, 406, 13, 509, 434, 406, 1596, 988, 597, 295, 264, 3755, 366, 4739, 420, 406, 13, 509, 434, 51856, 51856], "temperature": 0.0, "avg_logprob": -0.1015478480945934, "compression_ratio": 1.9267241379310345, "no_caption_prob": 7.141326932469383e-05}, {"id": 42, "seek": 25440, "start": 280.48, "end": 284.24, "text": " some of it's not. You're not quite sure which of the pieces are required or not. You're", "tokens": [50364, 1252, 5065, 293, 1382, 281, 19810, 322, 439, 295, 613, 704, 540, 721, 293, 1382, 281, 652, 2107, 50754, 50754, 15957, 3142, 721, 15957, 3142, 13, 407, 291, 362, 512, 3089, 300, 5946, 322, 565, 13, 509, 362, 51092, 51092, 512, 2823, 1507, 300, 309, 311, 8867, 484, 293, 3760, 4338, 9102, 293, 721, 411, 51364, 51364, 300, 13, 400, 291, 362, 281, 360, 439, 295, 341, 8657, 13, 400, 512, 295, 309, 311, 26947, 11, 512, 295, 309, 311, 4739, 11, 51668, 51668, 512, 295, 309, 311, 406, 13, 509, 434, 406, 1596, 988, 597, 295, 264, 3755, 366, 4739, 420, 406, 13, 509, 434, 51856, 51856], "temperature": 0.0, "avg_logprob": -0.1015478480945934, "compression_ratio": 1.9267241379310345, "no_caption_prob": 7.141326932469383e-05}, {"id": 43, "seek": 28424, "start": 284.24, "end": 289.32, "text": " not sure which pieces are deterministic or not. You might get tests randomly failing", "tokens": [50364, 406, 988, 597, 3755, 366, 15957, 3142, 420, 406, 13, 509, 1062, 483, 6921, 16979, 18223, 50618, 50618, 322, 264, 700, 295, 264, 1618, 13, 2022, 2699, 76, 11, 291, 500, 380, 362, 604, 295, 729, 2740, 13, 400, 286, 393, 380, 980, 50868, 50868, 291, 577, 11, 286, 914, 11, 286, 600, 658, 257, 3678, 294, 884, 30072, 6191, 15818, 13, 407, 286, 600, 4418, 51230, 51230, 257, 665, 2028, 295, 565, 1382, 281, 1333, 295, 6560, 561, 322, 512, 295, 613, 1151, 7525, 926, 51458, 51458, 4997, 13, 400, 370, 867, 295, 613, 366, 445, 3094, 666, 264, 2699, 76, 2856, 570, 295, 264, 34382, 11, 51702, 51702], "temperature": 0.0, "avg_logprob": -0.09895817722593035, "compression_ratio": 1.6145454545454545, "no_caption_prob": 2.546570794947911e-05}, {"id": 44, "seek": 28424, "start": 289.32, "end": 294.32, "text": " on the first of the month. With Elm, you don't have any of those problems. And I can't tell", "tokens": [50364, 406, 988, 597, 3755, 366, 15957, 3142, 420, 406, 13, 509, 1062, 483, 6921, 16979, 18223, 50618, 50618, 322, 264, 700, 295, 264, 1618, 13, 2022, 2699, 76, 11, 291, 500, 380, 362, 604, 295, 729, 2740, 13, 400, 286, 393, 380, 980, 50868, 50868, 291, 577, 11, 286, 914, 11, 286, 600, 658, 257, 3678, 294, 884, 30072, 6191, 15818, 13, 407, 286, 600, 4418, 51230, 51230, 257, 665, 2028, 295, 565, 1382, 281, 1333, 295, 6560, 561, 322, 512, 295, 613, 1151, 7525, 926, 51458, 51458, 4997, 13, 400, 370, 867, 295, 613, 366, 445, 3094, 666, 264, 2699, 76, 2856, 570, 295, 264, 34382, 11, 51702, 51702], "temperature": 0.0, "avg_logprob": -0.09895817722593035, "compression_ratio": 1.6145454545454545, "no_caption_prob": 2.546570794947911e-05}, {"id": 45, "seek": 28424, "start": 294.32, "end": 301.56, "text": " you how, I mean, I've got a background in doing agile technical coaching. So I've spent", "tokens": [50364, 406, 988, 597, 3755, 366, 15957, 3142, 420, 406, 13, 509, 1062, 483, 6921, 16979, 18223, 50618, 50618, 322, 264, 700, 295, 264, 1618, 13, 2022, 2699, 76, 11, 291, 500, 380, 362, 604, 295, 729, 2740, 13, 400, 286, 393, 380, 980, 50868, 50868, 291, 577, 11, 286, 914, 11, 286, 600, 658, 257, 3678, 294, 884, 30072, 6191, 15818, 13, 407, 286, 600, 4418, 51230, 51230, 257, 665, 2028, 295, 565, 1382, 281, 1333, 295, 6560, 561, 322, 512, 295, 613, 1151, 7525, 926, 51458, 51458, 4997, 13, 400, 370, 867, 295, 613, 366, 445, 3094, 666, 264, 2699, 76, 2856, 570, 295, 264, 34382, 11, 51702, 51702], "temperature": 0.0, "avg_logprob": -0.09895817722593035, "compression_ratio": 1.6145454545454545, "no_caption_prob": 2.546570794947911e-05}, {"id": 46, "seek": 28424, "start": 301.56, "end": 306.12, "text": " a good deal of time trying to sort of coach people on some of these best practices around", "tokens": [50364, 406, 988, 597, 3755, 366, 15957, 3142, 420, 406, 13, 509, 1062, 483, 6921, 16979, 18223, 50618, 50618, 322, 264, 700, 295, 264, 1618, 13, 2022, 2699, 76, 11, 291, 500, 380, 362, 604, 295, 729, 2740, 13, 400, 286, 393, 380, 980, 50868, 50868, 291, 577, 11, 286, 914, 11, 286, 600, 658, 257, 3678, 294, 884, 30072, 6191, 15818, 13, 407, 286, 600, 4418, 51230, 51230, 257, 665, 2028, 295, 565, 1382, 281, 1333, 295, 6560, 561, 322, 512, 295, 613, 1151, 7525, 926, 51458, 51458, 4997, 13, 400, 370, 867, 295, 613, 366, 445, 3094, 666, 264, 2699, 76, 2856, 570, 295, 264, 34382, 11, 51702, 51702], "temperature": 0.0, "avg_logprob": -0.09895817722593035, "compression_ratio": 1.6145454545454545, "no_caption_prob": 2.546570794947911e-05}, {"id": 47, "seek": 28424, "start": 306.12, "end": 311.0, "text": " testing. And so many of these are just built into the Elm language because of the purity,", "tokens": [50364, 406, 988, 597, 3755, 366, 15957, 3142, 420, 406, 13, 509, 1062, 483, 6921, 16979, 18223, 50618, 50618, 322, 264, 700, 295, 264, 1618, 13, 2022, 2699, 76, 11, 291, 500, 380, 362, 604, 295, 729, 2740, 13, 400, 286, 393, 380, 980, 50868, 50868, 291, 577, 11, 286, 914, 11, 286, 600, 658, 257, 3678, 294, 884, 30072, 6191, 15818, 13, 407, 286, 600, 4418, 51230, 51230, 257, 665, 2028, 295, 565, 1382, 281, 1333, 295, 6560, 561, 322, 512, 295, 613, 1151, 7525, 926, 51458, 51458, 4997, 13, 400, 370, 867, 295, 613, 366, 445, 3094, 666, 264, 2699, 76, 2856, 570, 295, 264, 34382, 11, 51702, 51702], "temperature": 0.0, "avg_logprob": -0.09895817722593035, "compression_ratio": 1.6145454545454545, "no_caption_prob": 2.546570794947911e-05}, {"id": 48, "seek": 31100, "start": 311.0, "end": 318.44, "text": " because testing is so natural when it's just input output. And so that's all an Elm test", "tokens": [50364, 570, 4997, 307, 370, 3303, 562, 309, 311, 445, 4846, 5598, 13, 400, 370, 300, 311, 439, 364, 2699, 76, 1500, 50736, 50736, 307, 13, 467, 311, 411, 291, 362, 341, 4846, 11, 291, 483, 341, 5598, 11, 293, 550, 1785, 257, 1326, 721, 300, 51054, 51054, 291, 5176, 466, 300, 5598, 13, 663, 311, 439, 309, 307, 13, 400, 309, 311, 370, 1481, 281, 1500, 294, 2699, 76, 13, 407, 51324, 51324, 1767, 360, 309, 13, 2555, 2464, 6921, 294, 2699, 76, 13, 51468, 51468, 663, 307, 767, 472, 295, 264, 721, 300, 307, 1009, 1596, 1152, 365, 6921, 307, 264, 3287, 51668, 51668], "temperature": 0.0, "avg_logprob": -0.11790111577399423, "compression_ratio": 1.7300884955752212, "no_caption_prob": 2.9308805096661672e-05}, {"id": 49, "seek": 31100, "start": 318.44, "end": 324.8, "text": " is. It's like you have this input, you get this output, and then state a few things that", "tokens": [50364, 570, 4997, 307, 370, 3303, 562, 309, 311, 445, 4846, 5598, 13, 400, 370, 300, 311, 439, 364, 2699, 76, 1500, 50736, 50736, 307, 13, 467, 311, 411, 291, 362, 341, 4846, 11, 291, 483, 341, 5598, 11, 293, 550, 1785, 257, 1326, 721, 300, 51054, 51054, 291, 5176, 466, 300, 5598, 13, 663, 311, 439, 309, 307, 13, 400, 309, 311, 370, 1481, 281, 1500, 294, 2699, 76, 13, 407, 51324, 51324, 1767, 360, 309, 13, 2555, 2464, 6921, 294, 2699, 76, 13, 51468, 51468, 663, 307, 767, 472, 295, 264, 721, 300, 307, 1009, 1596, 1152, 365, 6921, 307, 264, 3287, 51668, 51668], "temperature": 0.0, "avg_logprob": -0.11790111577399423, "compression_ratio": 1.7300884955752212, "no_caption_prob": 2.9308805096661672e-05}, {"id": 50, "seek": 31100, "start": 324.8, "end": 330.2, "text": " you expected about that output. That's all it is. And it's so nice to test in Elm. So", "tokens": [50364, 570, 4997, 307, 370, 3303, 562, 309, 311, 445, 4846, 5598, 13, 400, 370, 300, 311, 439, 364, 2699, 76, 1500, 50736, 50736, 307, 13, 467, 311, 411, 291, 362, 341, 4846, 11, 291, 483, 341, 5598, 11, 293, 550, 1785, 257, 1326, 721, 300, 51054, 51054, 291, 5176, 466, 300, 5598, 13, 663, 311, 439, 309, 307, 13, 400, 309, 311, 370, 1481, 281, 1500, 294, 2699, 76, 13, 407, 51324, 51324, 1767, 360, 309, 13, 2555, 2464, 6921, 294, 2699, 76, 13, 51468, 51468, 663, 307, 767, 472, 295, 264, 721, 300, 307, 1009, 1596, 1152, 365, 6921, 307, 264, 3287, 51668, 51668], "temperature": 0.0, "avg_logprob": -0.11790111577399423, "compression_ratio": 1.7300884955752212, "no_caption_prob": 2.9308805096661672e-05}, {"id": 51, "seek": 31100, "start": 330.2, "end": 333.08, "text": " please do it. Please write tests in Elm.", "tokens": [50364, 570, 4997, 307, 370, 3303, 562, 309, 311, 445, 4846, 5598, 13, 400, 370, 300, 311, 439, 364, 2699, 76, 1500, 50736, 50736, 307, 13, 467, 311, 411, 291, 362, 341, 4846, 11, 291, 483, 341, 5598, 11, 293, 550, 1785, 257, 1326, 721, 300, 51054, 51054, 291, 5176, 466, 300, 5598, 13, 663, 311, 439, 309, 307, 13, 400, 309, 311, 370, 1481, 281, 1500, 294, 2699, 76, 13, 407, 51324, 51324, 1767, 360, 309, 13, 2555, 2464, 6921, 294, 2699, 76, 13, 51468, 51468, 663, 307, 767, 472, 295, 264, 721, 300, 307, 1009, 1596, 1152, 365, 6921, 307, 264, 3287, 51668, 51668], "temperature": 0.0, "avg_logprob": -0.11790111577399423, "compression_ratio": 1.7300884955752212, "no_caption_prob": 2.9308805096661672e-05}, {"id": 52, "seek": 31100, "start": 333.08, "end": 337.08, "text": " That is actually one of the things that is always quite hard with tests is the setting", "tokens": [50364, 570, 4997, 307, 370, 3303, 562, 309, 311, 445, 4846, 5598, 13, 400, 370, 300, 311, 439, 364, 2699, 76, 1500, 50736, 50736, 307, 13, 467, 311, 411, 291, 362, 341, 4846, 11, 291, 483, 341, 5598, 11, 293, 550, 1785, 257, 1326, 721, 300, 51054, 51054, 291, 5176, 466, 300, 5598, 13, 663, 311, 439, 309, 307, 13, 400, 309, 311, 370, 1481, 281, 1500, 294, 2699, 76, 13, 407, 51324, 51324, 1767, 360, 309, 13, 2555, 2464, 6921, 294, 2699, 76, 13, 51468, 51468, 663, 307, 767, 472, 295, 264, 721, 300, 307, 1009, 1596, 1152, 365, 6921, 307, 264, 3287, 51668, 51668], "temperature": 0.0, "avg_logprob": -0.11790111577399423, "compression_ratio": 1.7300884955752212, "no_caption_prob": 2.9308805096661672e-05}, {"id": 53, "seek": 33708, "start": 337.08, "end": 346.44, "text": " up. And so when you have complex functions, complex environments, to get the thing testable", "tokens": [50364, 493, 13, 400, 370, 562, 291, 362, 3997, 6828, 11, 3997, 12388, 11, 281, 483, 264, 551, 1500, 712, 50832, 50832, 294, 257, 1500, 712, 1785, 11, 291, 643, 281, 360, 257, 688, 295, 7512, 293, 43576, 295, 1969, 11, 275, 33260, 11, 51190, 51190, 281, 483, 309, 1500, 712, 13, 400, 294, 2699, 76, 11, 1670, 291, 434, 787, 6260, 365, 6075, 6828, 11, 257, 688, 295, 51510, 51510, 729, 2740, 352, 1314, 3838, 13, 51636, 51636], "temperature": 0.0, "avg_logprob": -0.19294630289077758, "compression_ratio": 1.6031746031746033, "no_caption_prob": 5.307050741976127e-05}, {"id": 54, "seek": 33708, "start": 346.44, "end": 353.59999999999997, "text": " in a testable state, you need to do a lot of techniques and inversion of control, mucking,", "tokens": [50364, 493, 13, 400, 370, 562, 291, 362, 3997, 6828, 11, 3997, 12388, 11, 281, 483, 264, 551, 1500, 712, 50832, 50832, 294, 257, 1500, 712, 1785, 11, 291, 643, 281, 360, 257, 688, 295, 7512, 293, 43576, 295, 1969, 11, 275, 33260, 11, 51190, 51190, 281, 483, 309, 1500, 712, 13, 400, 294, 2699, 76, 11, 1670, 291, 434, 787, 6260, 365, 6075, 6828, 11, 257, 688, 295, 51510, 51510, 729, 2740, 352, 1314, 3838, 13, 51636, 51636], "temperature": 0.0, "avg_logprob": -0.19294630289077758, "compression_ratio": 1.6031746031746033, "no_caption_prob": 5.307050741976127e-05}, {"id": 55, "seek": 33708, "start": 353.59999999999997, "end": 360.0, "text": " to get it testable. And in Elm, since you're only dealing with pure functions, a lot of", "tokens": [50364, 493, 13, 400, 370, 562, 291, 362, 3997, 6828, 11, 3997, 12388, 11, 281, 483, 264, 551, 1500, 712, 50832, 50832, 294, 257, 1500, 712, 1785, 11, 291, 643, 281, 360, 257, 688, 295, 7512, 293, 43576, 295, 1969, 11, 275, 33260, 11, 51190, 51190, 281, 483, 309, 1500, 712, 13, 400, 294, 2699, 76, 11, 1670, 291, 434, 787, 6260, 365, 6075, 6828, 11, 257, 688, 295, 51510, 51510, 729, 2740, 352, 1314, 3838, 13, 51636, 51636], "temperature": 0.0, "avg_logprob": -0.19294630289077758, "compression_ratio": 1.6031746031746033, "no_caption_prob": 5.307050741976127e-05}, {"id": 56, "seek": 33708, "start": 360.0, "end": 362.52, "text": " those problems go away directly.", "tokens": [50364, 493, 13, 400, 370, 562, 291, 362, 3997, 6828, 11, 3997, 12388, 11, 281, 483, 264, 551, 1500, 712, 50832, 50832, 294, 257, 1500, 712, 1785, 11, 291, 643, 281, 360, 257, 688, 295, 7512, 293, 43576, 295, 1969, 11, 275, 33260, 11, 51190, 51190, 281, 483, 309, 1500, 712, 13, 400, 294, 2699, 76, 11, 1670, 291, 434, 787, 6260, 365, 6075, 6828, 11, 257, 688, 295, 51510, 51510, 729, 2740, 352, 1314, 3838, 13, 51636, 51636], "temperature": 0.0, "avg_logprob": -0.19294630289077758, "compression_ratio": 1.6031746031746033, "no_caption_prob": 5.307050741976127e-05}, {"id": 57, "seek": 36252, "start": 362.52, "end": 370.59999999999997, "text": " Yes. Yeah. And on the topic of testable design, I think this is one of the things that maybe", "tokens": [50364, 1079, 13, 865, 13, 400, 322, 264, 4829, 295, 1500, 712, 1715, 11, 286, 519, 341, 307, 472, 295, 264, 721, 300, 1310, 50768, 50768, 2618, 567, 307, 544, 777, 281, 1500, 9555, 3250, 1062, 406, 312, 4963, 365, 341, 3410, 11, 457, 51036, 51036, 286, 519, 309, 311, 257, 534, 1021, 472, 13, 5135, 11, 867, 561, 1949, 1500, 9555, 3250, 51234, 51234, 281, 312, 257, 1715, 3124, 2831, 813, 257, 4997, 3124, 13, 1436, 437, 1500, 9555, 3250, 51628, 51628], "temperature": 0.0, "avg_logprob": -0.11174188341413226, "compression_ratio": 1.7077625570776256, "no_caption_prob": 0.00012531464744824916}, {"id": 58, "seek": 36252, "start": 370.59999999999997, "end": 375.96, "text": " somebody who is more new to test driven development might not be familiar with this concept, but", "tokens": [50364, 1079, 13, 865, 13, 400, 322, 264, 4829, 295, 1500, 712, 1715, 11, 286, 519, 341, 307, 472, 295, 264, 721, 300, 1310, 50768, 50768, 2618, 567, 307, 544, 777, 281, 1500, 9555, 3250, 1062, 406, 312, 4963, 365, 341, 3410, 11, 457, 51036, 51036, 286, 519, 309, 311, 257, 534, 1021, 472, 13, 5135, 11, 867, 561, 1949, 1500, 9555, 3250, 51234, 51234, 281, 312, 257, 1715, 3124, 2831, 813, 257, 4997, 3124, 13, 1436, 437, 1500, 9555, 3250, 51628, 51628], "temperature": 0.0, "avg_logprob": -0.11174188341413226, "compression_ratio": 1.7077625570776256, "no_caption_prob": 0.00012531464744824916}, {"id": 59, "seek": 36252, "start": 375.96, "end": 379.91999999999996, "text": " I think it's a really important one. Actually, many people consider test driven development", "tokens": [50364, 1079, 13, 865, 13, 400, 322, 264, 4829, 295, 1500, 712, 1715, 11, 286, 519, 341, 307, 472, 295, 264, 721, 300, 1310, 50768, 50768, 2618, 567, 307, 544, 777, 281, 1500, 9555, 3250, 1062, 406, 312, 4963, 365, 341, 3410, 11, 457, 51036, 51036, 286, 519, 309, 311, 257, 534, 1021, 472, 13, 5135, 11, 867, 561, 1949, 1500, 9555, 3250, 51234, 51234, 281, 312, 257, 1715, 3124, 2831, 813, 257, 4997, 3124, 13, 1436, 437, 1500, 9555, 3250, 51628, 51628], "temperature": 0.0, "avg_logprob": -0.11174188341413226, "compression_ratio": 1.7077625570776256, "no_caption_prob": 0.00012531464744824916}, {"id": 60, "seek": 36252, "start": 379.91999999999996, "end": 387.79999999999995, "text": " to be a design practice rather than a testing practice. Because what test driven development", "tokens": [50364, 1079, 13, 865, 13, 400, 322, 264, 4829, 295, 1500, 712, 1715, 11, 286, 519, 341, 307, 472, 295, 264, 721, 300, 1310, 50768, 50768, 2618, 567, 307, 544, 777, 281, 1500, 9555, 3250, 1062, 406, 312, 4963, 365, 341, 3410, 11, 457, 51036, 51036, 286, 519, 309, 311, 257, 534, 1021, 472, 13, 5135, 11, 867, 561, 1949, 1500, 9555, 3250, 51234, 51234, 281, 312, 257, 1715, 3124, 2831, 813, 257, 4997, 3124, 13, 1436, 437, 1500, 9555, 3250, 51628, 51628], "temperature": 0.0, "avg_logprob": -0.11174188341413226, "compression_ratio": 1.7077625570776256, "no_caption_prob": 0.00012531464744824916}, {"id": 61, "seek": 38780, "start": 387.8, "end": 393.04, "text": " does, you know, when you're writing a unit test, before you write the code that makes", "tokens": [50364, 775, 11, 291, 458, 11, 562, 291, 434, 3579, 257, 4985, 1500, 11, 949, 291, 2464, 264, 3089, 300, 1669, 50626, 50626, 300, 4985, 1500, 1320, 11, 437, 291, 434, 884, 307, 291, 434, 885, 30515, 466, 437, 291, 528, 50892, 50892, 264, 1715, 281, 574, 411, 11, 2831, 813, 8295, 264, 11420, 5934, 264, 1715, 13, 509, 434, 51138, 51138, 8295, 428, 7789, 1860, 5934, 264, 1715, 13, 400, 538, 7123, 11, 291, 434, 1455, 309, 1500, 712, 51578, 51578], "temperature": 0.0, "avg_logprob": -0.09898245478250894, "compression_ratio": 1.781725888324873, "no_caption_prob": 5.561494981520809e-05}, {"id": 62, "seek": 38780, "start": 393.04, "end": 398.36, "text": " that unit test pass, what you're doing is you're being deliberate about what you want", "tokens": [50364, 775, 11, 291, 458, 11, 562, 291, 434, 3579, 257, 4985, 1500, 11, 949, 291, 2464, 264, 3089, 300, 1669, 50626, 50626, 300, 4985, 1500, 1320, 11, 437, 291, 434, 884, 307, 291, 434, 885, 30515, 466, 437, 291, 528, 50892, 50892, 264, 1715, 281, 574, 411, 11, 2831, 813, 8295, 264, 11420, 5934, 264, 1715, 13, 509, 434, 51138, 51138, 8295, 428, 7789, 1860, 5934, 264, 1715, 13, 400, 538, 7123, 11, 291, 434, 1455, 309, 1500, 712, 51578, 51578], "temperature": 0.0, "avg_logprob": -0.09898245478250894, "compression_ratio": 1.781725888324873, "no_caption_prob": 5.561494981520809e-05}, {"id": 63, "seek": 38780, "start": 398.36, "end": 403.28000000000003, "text": " the design to look like, rather than letting the implementation guide the design. You're", "tokens": [50364, 775, 11, 291, 458, 11, 562, 291, 434, 3579, 257, 4985, 1500, 11, 949, 291, 2464, 264, 3089, 300, 1669, 50626, 50626, 300, 4985, 1500, 1320, 11, 437, 291, 434, 884, 307, 291, 434, 885, 30515, 466, 437, 291, 528, 50892, 50892, 264, 1715, 281, 574, 411, 11, 2831, 813, 8295, 264, 11420, 5934, 264, 1715, 13, 509, 434, 51138, 51138, 8295, 428, 7789, 1860, 5934, 264, 1715, 13, 400, 538, 7123, 11, 291, 434, 1455, 309, 1500, 712, 51578, 51578], "temperature": 0.0, "avg_logprob": -0.09898245478250894, "compression_ratio": 1.781725888324873, "no_caption_prob": 5.561494981520809e-05}, {"id": 64, "seek": 38780, "start": 403.28000000000003, "end": 412.08000000000004, "text": " letting your intentionality guide the design. And by definition, you're making it testable", "tokens": [50364, 775, 11, 291, 458, 11, 562, 291, 434, 3579, 257, 4985, 1500, 11, 949, 291, 2464, 264, 3089, 300, 1669, 50626, 50626, 300, 4985, 1500, 1320, 11, 437, 291, 434, 884, 307, 291, 434, 885, 30515, 466, 437, 291, 528, 50892, 50892, 264, 1715, 281, 574, 411, 11, 2831, 813, 8295, 264, 11420, 5934, 264, 1715, 13, 509, 434, 51138, 51138, 8295, 428, 7789, 1860, 5934, 264, 1715, 13, 400, 538, 7123, 11, 291, 434, 1455, 309, 1500, 712, 51578, 51578], "temperature": 0.0, "avg_logprob": -0.09898245478250894, "compression_ratio": 1.781725888324873, "no_caption_prob": 5.561494981520809e-05}, {"id": 65, "seek": 41208, "start": 412.08, "end": 419.28, "text": " because you're writing it in a way that's nice to test and nice to use before you write,", "tokens": [50364, 570, 291, 434, 3579, 309, 294, 257, 636, 300, 311, 1481, 281, 1500, 293, 1481, 281, 764, 949, 291, 2464, 11, 50724, 50724, 291, 458, 11, 264, 11420, 13, 407, 8195, 11, 498, 291, 2464, 264, 11420, 700, 11, 437, 311, 51024, 51024, 516, 281, 3928, 281, 1051, 307, 309, 311, 516, 281, 312, 257, 1715, 300, 311, 588, 2252, 281, 1500, 13, 400, 51300, 51300, 456, 311, 341, 26387, 3125, 365, 1500, 712, 1715, 300, 309, 311, 979, 263, 15551, 13, 400, 14138, 11, 51718, 51718], "temperature": 0.0, "avg_logprob": -0.06018481093846011, "compression_ratio": 1.7389162561576355, "no_caption_prob": 4.0692400943953544e-05}, {"id": 66, "seek": 41208, "start": 419.28, "end": 425.28, "text": " you know, the implementation. So naturally, if you write the implementation first, what's", "tokens": [50364, 570, 291, 434, 3579, 309, 294, 257, 636, 300, 311, 1481, 281, 1500, 293, 1481, 281, 764, 949, 291, 2464, 11, 50724, 50724, 291, 458, 11, 264, 11420, 13, 407, 8195, 11, 498, 291, 2464, 264, 11420, 700, 11, 437, 311, 51024, 51024, 516, 281, 3928, 281, 1051, 307, 309, 311, 516, 281, 312, 257, 1715, 300, 311, 588, 2252, 281, 1500, 13, 400, 51300, 51300, 456, 311, 341, 26387, 3125, 365, 1500, 712, 1715, 300, 309, 311, 979, 263, 15551, 13, 400, 14138, 11, 51718, 51718], "temperature": 0.0, "avg_logprob": -0.06018481093846011, "compression_ratio": 1.7389162561576355, "no_caption_prob": 4.0692400943953544e-05}, {"id": 67, "seek": 41208, "start": 425.28, "end": 430.79999999999995, "text": " going to tend to happen is it's going to be a design that's very difficult to test. And", "tokens": [50364, 570, 291, 434, 3579, 309, 294, 257, 636, 300, 311, 1481, 281, 1500, 293, 1481, 281, 764, 949, 291, 2464, 11, 50724, 50724, 291, 458, 11, 264, 11420, 13, 407, 8195, 11, 498, 291, 2464, 264, 11420, 700, 11, 437, 311, 51024, 51024, 516, 281, 3928, 281, 1051, 307, 309, 311, 516, 281, 312, 257, 1715, 300, 311, 588, 2252, 281, 1500, 13, 400, 51300, 51300, 456, 311, 341, 26387, 3125, 365, 1500, 712, 1715, 300, 309, 311, 979, 263, 15551, 13, 400, 14138, 11, 51718, 51718], "temperature": 0.0, "avg_logprob": -0.06018481093846011, "compression_ratio": 1.7389162561576355, "no_caption_prob": 4.0692400943953544e-05}, {"id": 68, "seek": 41208, "start": 430.79999999999995, "end": 439.15999999999997, "text": " there's this inherent quality with testable design that it's decoupled. And similarly,", "tokens": [50364, 570, 291, 434, 3579, 309, 294, 257, 636, 300, 311, 1481, 281, 1500, 293, 1481, 281, 764, 949, 291, 2464, 11, 50724, 50724, 291, 458, 11, 264, 11420, 13, 407, 8195, 11, 498, 291, 2464, 264, 11420, 700, 11, 437, 311, 51024, 51024, 516, 281, 3928, 281, 1051, 307, 309, 311, 516, 281, 312, 257, 1715, 300, 311, 588, 2252, 281, 1500, 13, 400, 51300, 51300, 456, 311, 341, 26387, 3125, 365, 1500, 712, 1715, 300, 309, 311, 979, 263, 15551, 13, 400, 14138, 11, 51718, 51718], "temperature": 0.0, "avg_logprob": -0.06018481093846011, "compression_ratio": 1.7389162561576355, "no_caption_prob": 4.0692400943953544e-05}, {"id": 69, "seek": 43916, "start": 439.16, "end": 444.16, "text": " if you have not test driven your design, it tends to get coupled. So test driven development", "tokens": [50364, 498, 291, 362, 406, 1500, 9555, 428, 1715, 11, 309, 12258, 281, 483, 29482, 13, 407, 1500, 9555, 3250, 50614, 50614, 307, 257, 665, 6532, 337, 14685, 428, 3089, 294, 257, 636, 300, 307, 9594, 979, 263, 15551, 293, 1481, 11, 50944, 50944, 291, 458, 11, 1481, 281, 6909, 1968, 411, 6695, 295, 264, 6921, 11, 309, 311, 445, 12258, 281, 312, 22842, 51230, 51230, 4761, 3089, 13, 51280, 51280, 12151, 13, 407, 382, 291, 445, 848, 11, 562, 291, 360, 314, 20818, 11, 291, 764, 264, 6828, 11, 264, 6405, 51674, 51674], "temperature": 0.0, "avg_logprob": -0.0952625876978824, "compression_ratio": 1.6846846846846846, "no_caption_prob": 8.529960723535623e-06}, {"id": 70, "seek": 43916, "start": 444.16, "end": 450.76000000000005, "text": " is a good technique for designing your code in a way that is nicely decoupled and nice,", "tokens": [50364, 498, 291, 362, 406, 1500, 9555, 428, 1715, 11, 309, 12258, 281, 483, 29482, 13, 407, 1500, 9555, 3250, 50614, 50614, 307, 257, 665, 6532, 337, 14685, 428, 3089, 294, 257, 636, 300, 307, 9594, 979, 263, 15551, 293, 1481, 11, 50944, 50944, 291, 458, 11, 1481, 281, 6909, 1968, 411, 6695, 295, 264, 6921, 11, 309, 311, 445, 12258, 281, 312, 22842, 51230, 51230, 4761, 3089, 13, 51280, 51280, 12151, 13, 407, 382, 291, 445, 848, 11, 562, 291, 360, 314, 20818, 11, 291, 764, 264, 6828, 11, 264, 6405, 51674, 51674], "temperature": 0.0, "avg_logprob": -0.0952625876978824, "compression_ratio": 1.6846846846846846, "no_caption_prob": 8.529960723535623e-06}, {"id": 71, "seek": 43916, "start": 450.76000000000005, "end": 456.48, "text": " you know, nice to maintain whether like independent of the tests, it's just tends to be nicer", "tokens": [50364, 498, 291, 362, 406, 1500, 9555, 428, 1715, 11, 309, 12258, 281, 483, 29482, 13, 407, 1500, 9555, 3250, 50614, 50614, 307, 257, 665, 6532, 337, 14685, 428, 3089, 294, 257, 636, 300, 307, 9594, 979, 263, 15551, 293, 1481, 11, 50944, 50944, 291, 458, 11, 1481, 281, 6909, 1968, 411, 6695, 295, 264, 6921, 11, 309, 311, 445, 12258, 281, 312, 22842, 51230, 51230, 4761, 3089, 13, 51280, 51280, 12151, 13, 407, 382, 291, 445, 848, 11, 562, 291, 360, 314, 20818, 11, 291, 764, 264, 6828, 11, 264, 6405, 51674, 51674], "temperature": 0.0, "avg_logprob": -0.0952625876978824, "compression_ratio": 1.6846846846846846, "no_caption_prob": 8.529960723535623e-06}, {"id": 72, "seek": 43916, "start": 456.48, "end": 457.48, "text": " designed code.", "tokens": [50364, 498, 291, 362, 406, 1500, 9555, 428, 1715, 11, 309, 12258, 281, 483, 29482, 13, 407, 1500, 9555, 3250, 50614, 50614, 307, 257, 665, 6532, 337, 14685, 428, 3089, 294, 257, 636, 300, 307, 9594, 979, 263, 15551, 293, 1481, 11, 50944, 50944, 291, 458, 11, 1481, 281, 6909, 1968, 411, 6695, 295, 264, 6921, 11, 309, 311, 445, 12258, 281, 312, 22842, 51230, 51230, 4761, 3089, 13, 51280, 51280, 12151, 13, 407, 382, 291, 445, 848, 11, 562, 291, 360, 314, 20818, 11, 291, 764, 264, 6828, 11, 264, 6405, 51674, 51674], "temperature": 0.0, "avg_logprob": -0.0952625876978824, "compression_ratio": 1.6846846846846846, "no_caption_prob": 8.529960723535623e-06}, {"id": 73, "seek": 43916, "start": 457.48, "end": 465.36, "text": " Definitely. So as you just said, when you do TDD, you use the functions, the library", "tokens": [50364, 498, 291, 362, 406, 1500, 9555, 428, 1715, 11, 309, 12258, 281, 483, 29482, 13, 407, 1500, 9555, 3250, 50614, 50614, 307, 257, 665, 6532, 337, 14685, 428, 3089, 294, 257, 636, 300, 307, 9594, 979, 263, 15551, 293, 1481, 11, 50944, 50944, 291, 458, 11, 1481, 281, 6909, 1968, 411, 6695, 295, 264, 6921, 11, 309, 311, 445, 12258, 281, 312, 22842, 51230, 51230, 4761, 3089, 13, 51280, 51280, 12151, 13, 407, 382, 291, 445, 848, 11, 562, 291, 360, 314, 20818, 11, 291, 764, 264, 6828, 11, 264, 6405, 51674, 51674], "temperature": 0.0, "avg_logprob": -0.0952625876978824, "compression_ratio": 1.6846846846846846, "no_caption_prob": 8.529960723535623e-06}, {"id": 74, "seek": 46536, "start": 465.36, "end": 471.72, "text": " before you've finished designing it. And when you use it, that's when you find the flaws", "tokens": [50364, 949, 291, 600, 4335, 14685, 309, 13, 400, 562, 291, 764, 309, 11, 300, 311, 562, 291, 915, 264, 27108, 50682, 50682, 294, 428, 9362, 1715, 13, 407, 498, 291, 853, 281, 652, 264, 9362, 574, 665, 934, 264, 1186, 11, 309, 2759, 380, 51088, 51088, 483, 291, 264, 912, 1874, 382, 498, 291, 630, 309, 670, 264, 1164, 295, 264, 3579, 13, 51494, 51494], "temperature": 0.0, "avg_logprob": -0.14007158421758395, "compression_ratio": 1.5182926829268293, "no_caption_prob": 5.338074515748303e-06}, {"id": 75, "seek": 46536, "start": 471.72, "end": 479.84000000000003, "text": " in your API design. So if you try to make the API look good after the fact, it wouldn't", "tokens": [50364, 949, 291, 600, 4335, 14685, 309, 13, 400, 562, 291, 764, 309, 11, 300, 311, 562, 291, 915, 264, 27108, 50682, 50682, 294, 428, 9362, 1715, 13, 407, 498, 291, 853, 281, 652, 264, 9362, 574, 665, 934, 264, 1186, 11, 309, 2759, 380, 51088, 51088, 483, 291, 264, 912, 1874, 382, 498, 291, 630, 309, 670, 264, 1164, 295, 264, 3579, 13, 51494, 51494], "temperature": 0.0, "avg_logprob": -0.14007158421758395, "compression_ratio": 1.5182926829268293, "no_caption_prob": 5.338074515748303e-06}, {"id": 76, "seek": 46536, "start": 479.84000000000003, "end": 487.96000000000004, "text": " get you the same result as if you did it over the course of the writing.", "tokens": [50364, 949, 291, 600, 4335, 14685, 309, 13, 400, 562, 291, 764, 309, 11, 300, 311, 562, 291, 915, 264, 27108, 50682, 50682, 294, 428, 9362, 1715, 13, 407, 498, 291, 853, 281, 652, 264, 9362, 574, 665, 934, 264, 1186, 11, 309, 2759, 380, 51088, 51088, 483, 291, 264, 912, 1874, 382, 498, 291, 630, 309, 670, 264, 1164, 295, 264, 3579, 13, 51494, 51494], "temperature": 0.0, "avg_logprob": -0.14007158421758395, "compression_ratio": 1.5182926829268293, "no_caption_prob": 5.338074515748303e-06}, {"id": 77, "seek": 48796, "start": 487.96, "end": 498.32, "text": " Yeah. So before we go into too many more details of like the specifics of Elm test, maybe let's", "tokens": [50364, 865, 13, 407, 949, 321, 352, 666, 886, 867, 544, 4365, 295, 411, 264, 28454, 295, 2699, 76, 1500, 11, 1310, 718, 311, 50882, 50882, 5366, 411, 264, 3875, 10392, 295, 1500, 9555, 3250, 13, 1171, 1365, 11, 2182, 3092, 51190, 51190, 1895, 15104, 13, 407, 2182, 3092, 1895, 15104, 307, 11, 309, 311, 445, 257, 588, 6774, 990, 636, 281, 589, 767, 11, 570, 51688, 51688], "temperature": 0.0, "avg_logprob": -0.17707849585491678, "compression_ratio": 1.5054945054945055, "no_caption_prob": 6.921707245055586e-05}, {"id": 78, "seek": 48796, "start": 498.32, "end": 504.47999999999996, "text": " introduce like the basic concepts of test driven development. For example, red green", "tokens": [50364, 865, 13, 407, 949, 321, 352, 666, 886, 867, 544, 4365, 295, 411, 264, 28454, 295, 2699, 76, 1500, 11, 1310, 718, 311, 50882, 50882, 5366, 411, 264, 3875, 10392, 295, 1500, 9555, 3250, 13, 1171, 1365, 11, 2182, 3092, 51190, 51190, 1895, 15104, 13, 407, 2182, 3092, 1895, 15104, 307, 11, 309, 311, 445, 257, 588, 6774, 990, 636, 281, 589, 767, 11, 570, 51688, 51688], "temperature": 0.0, "avg_logprob": -0.17707849585491678, "compression_ratio": 1.5054945054945055, "no_caption_prob": 6.921707245055586e-05}, {"id": 79, "seek": 48796, "start": 504.47999999999996, "end": 514.4399999999999, "text": " refactor. So red green refactor is, it's just a very liberating way to work actually, because", "tokens": [50364, 865, 13, 407, 949, 321, 352, 666, 886, 867, 544, 4365, 295, 411, 264, 28454, 295, 2699, 76, 1500, 11, 1310, 718, 311, 50882, 50882, 5366, 411, 264, 3875, 10392, 295, 1500, 9555, 3250, 13, 1171, 1365, 11, 2182, 3092, 51190, 51190, 1895, 15104, 13, 407, 2182, 3092, 1895, 15104, 307, 11, 309, 311, 445, 257, 588, 6774, 990, 636, 281, 589, 767, 11, 570, 51688, 51688], "temperature": 0.0, "avg_logprob": -0.17707849585491678, "compression_ratio": 1.5054945054945055, "no_caption_prob": 6.921707245055586e-05}, {"id": 80, "seek": 51444, "start": 514.44, "end": 522.5600000000001, "text": " the thing is, it spreads out a large difficult task over many small individual steps. And", "tokens": [50364, 264, 551, 307, 11, 309, 25728, 484, 257, 2416, 2252, 5633, 670, 867, 1359, 2609, 4439, 13, 400, 50770, 50770, 370, 286, 915, 309, 257, 688, 544, 20305, 281, 589, 294, 300, 3758, 11, 2831, 813, 1382, 281, 483, 1203, 51054, 51054, 1364, 412, 1564, 11, 597, 307, 588, 13373, 293, 733, 295, 2709, 291, 341, 5215, 49507, 13, 51352, 51352, 9279, 9555, 3250, 4045, 291, 281, 584, 11, 577, 360, 286, 483, 341, 472, 1389, 1364, 11, 291, 458, 11, 51610, 51610], "temperature": 0.0, "avg_logprob": -0.10017511704388787, "compression_ratio": 1.5921052631578947, "no_caption_prob": 4.222673851472791e-06}, {"id": 81, "seek": 51444, "start": 522.5600000000001, "end": 528.24, "text": " so I find it a lot more enjoyable to work in that style, rather than trying to get everything", "tokens": [50364, 264, 551, 307, 11, 309, 25728, 484, 257, 2416, 2252, 5633, 670, 867, 1359, 2609, 4439, 13, 400, 50770, 50770, 370, 286, 915, 309, 257, 688, 544, 20305, 281, 589, 294, 300, 3758, 11, 2831, 813, 1382, 281, 483, 1203, 51054, 51054, 1364, 412, 1564, 11, 597, 307, 588, 13373, 293, 733, 295, 2709, 291, 341, 5215, 49507, 13, 51352, 51352, 9279, 9555, 3250, 4045, 291, 281, 584, 11, 577, 360, 286, 483, 341, 472, 1389, 1364, 11, 291, 458, 11, 51610, 51610], "temperature": 0.0, "avg_logprob": -0.10017511704388787, "compression_ratio": 1.5921052631578947, "no_caption_prob": 4.222673851472791e-06}, {"id": 82, "seek": 51444, "start": 528.24, "end": 534.2, "text": " working at once, which is very overwhelming and kind of gives you this analysis paralysis.", "tokens": [50364, 264, 551, 307, 11, 309, 25728, 484, 257, 2416, 2252, 5633, 670, 867, 1359, 2609, 4439, 13, 400, 50770, 50770, 370, 286, 915, 309, 257, 688, 544, 20305, 281, 589, 294, 300, 3758, 11, 2831, 813, 1382, 281, 483, 1203, 51054, 51054, 1364, 412, 1564, 11, 597, 307, 588, 13373, 293, 733, 295, 2709, 291, 341, 5215, 49507, 13, 51352, 51352, 9279, 9555, 3250, 4045, 291, 281, 584, 11, 577, 360, 286, 483, 341, 472, 1389, 1364, 11, 291, 458, 11, 51610, 51610], "temperature": 0.0, "avg_logprob": -0.10017511704388787, "compression_ratio": 1.5921052631578947, "no_caption_prob": 4.222673851472791e-06}, {"id": 83, "seek": 51444, "start": 534.2, "end": 539.36, "text": " Test driven development allows you to say, how do I get this one case working, you know,", "tokens": [50364, 264, 551, 307, 11, 309, 25728, 484, 257, 2416, 2252, 5633, 670, 867, 1359, 2609, 4439, 13, 400, 50770, 50770, 370, 286, 915, 309, 257, 688, 544, 20305, 281, 589, 294, 300, 3758, 11, 2831, 813, 1382, 281, 483, 1203, 51054, 51054, 1364, 412, 1564, 11, 597, 307, 588, 13373, 293, 733, 295, 2709, 291, 341, 5215, 49507, 13, 51352, 51352, 9279, 9555, 3250, 4045, 291, 281, 584, 11, 577, 360, 286, 483, 341, 472, 1389, 1364, 11, 291, 458, 11, 51610, 51610], "temperature": 0.0, "avg_logprob": -0.10017511704388787, "compression_ratio": 1.5921052631578947, "no_caption_prob": 4.222673851472791e-06}, {"id": 84, "seek": 53936, "start": 539.36, "end": 546.88, "text": " if I'm doing something that transforms a list in some way, what if I give it an empty list?", "tokens": [50364, 498, 286, 478, 884, 746, 300, 35592, 257, 1329, 294, 512, 636, 11, 437, 498, 286, 976, 309, 364, 6707, 1329, 30, 50740, 50740, 509, 458, 11, 775, 309, 976, 385, 264, 3006, 1874, 337, 364, 6707, 1329, 30, 400, 550, 291, 291, 2464, 50912, 50912, 257, 1500, 1389, 300, 775, 300, 291, 652, 309, 1320, 13, 400, 294, 264, 1399, 11, 291, 483, 2940, 11, 2940, 51188, 51188, 721, 27415, 493, 13, 400, 370, 309, 311, 767, 2684, 291, 2128, 689, 291, 434, 1455, 988, 300, 51484, 51484, 291, 483, 264, 27520, 570, 291, 600, 658, 257, 4498, 1364, 551, 412, 1184, 1823, 13, 407, 264, 2182, 644, 51740, 51740], "temperature": 0.0, "avg_logprob": -0.07418375943614318, "compression_ratio": 1.7248062015503876, "no_caption_prob": 6.502342876046896e-05}, {"id": 85, "seek": 53936, "start": 546.88, "end": 550.32, "text": " You know, does it give me the correct result for an empty list? And then you you write", "tokens": [50364, 498, 286, 478, 884, 746, 300, 35592, 257, 1329, 294, 512, 636, 11, 437, 498, 286, 976, 309, 364, 6707, 1329, 30, 50740, 50740, 509, 458, 11, 775, 309, 976, 385, 264, 3006, 1874, 337, 364, 6707, 1329, 30, 400, 550, 291, 291, 2464, 50912, 50912, 257, 1500, 1389, 300, 775, 300, 291, 652, 309, 1320, 13, 400, 294, 264, 1399, 11, 291, 483, 2940, 11, 2940, 51188, 51188, 721, 27415, 493, 13, 400, 370, 309, 311, 767, 2684, 291, 2128, 689, 291, 434, 1455, 988, 300, 51484, 51484, 291, 483, 264, 27520, 570, 291, 600, 658, 257, 4498, 1364, 551, 412, 1184, 1823, 13, 407, 264, 2182, 644, 51740, 51740], "temperature": 0.0, "avg_logprob": -0.07418375943614318, "compression_ratio": 1.7248062015503876, "no_caption_prob": 6.502342876046896e-05}, {"id": 86, "seek": 53936, "start": 550.32, "end": 555.84, "text": " a test case that does that you make it pass. And in the process, you get several, several", "tokens": [50364, 498, 286, 478, 884, 746, 300, 35592, 257, 1329, 294, 512, 636, 11, 437, 498, 286, 976, 309, 364, 6707, 1329, 30, 50740, 50740, 509, 458, 11, 775, 309, 976, 385, 264, 3006, 1874, 337, 364, 6707, 1329, 30, 400, 550, 291, 291, 2464, 50912, 50912, 257, 1500, 1389, 300, 775, 300, 291, 652, 309, 1320, 13, 400, 294, 264, 1399, 11, 291, 483, 2940, 11, 2940, 51188, 51188, 721, 27415, 493, 13, 400, 370, 309, 311, 767, 2684, 291, 2128, 689, 291, 434, 1455, 988, 300, 51484, 51484, 291, 483, 264, 27520, 570, 291, 600, 658, 257, 4498, 1364, 551, 412, 1184, 1823, 13, 407, 264, 2182, 644, 51740, 51740], "temperature": 0.0, "avg_logprob": -0.07418375943614318, "compression_ratio": 1.7248062015503876, "no_caption_prob": 6.502342876046896e-05}, {"id": 87, "seek": 53936, "start": 555.84, "end": 561.76, "text": " things wired up. And so it's actually moving you forward where you're making sure that", "tokens": [50364, 498, 286, 478, 884, 746, 300, 35592, 257, 1329, 294, 512, 636, 11, 437, 498, 286, 976, 309, 364, 6707, 1329, 30, 50740, 50740, 509, 458, 11, 775, 309, 976, 385, 264, 3006, 1874, 337, 364, 6707, 1329, 30, 400, 550, 291, 291, 2464, 50912, 50912, 257, 1500, 1389, 300, 775, 300, 291, 652, 309, 1320, 13, 400, 294, 264, 1399, 11, 291, 483, 2940, 11, 2940, 51188, 51188, 721, 27415, 493, 13, 400, 370, 309, 311, 767, 2684, 291, 2128, 689, 291, 434, 1455, 988, 300, 51484, 51484, 291, 483, 264, 27520, 570, 291, 600, 658, 257, 4498, 1364, 551, 412, 1184, 1823, 13, 407, 264, 2182, 644, 51740, 51740], "temperature": 0.0, "avg_logprob": -0.07418375943614318, "compression_ratio": 1.7248062015503876, "no_caption_prob": 6.502342876046896e-05}, {"id": 88, "seek": 53936, "start": 561.76, "end": 566.88, "text": " you get the wiring because you've got a fully working thing at each step. So the red part", "tokens": [50364, 498, 286, 478, 884, 746, 300, 35592, 257, 1329, 294, 512, 636, 11, 437, 498, 286, 976, 309, 364, 6707, 1329, 30, 50740, 50740, 509, 458, 11, 775, 309, 976, 385, 264, 3006, 1874, 337, 364, 6707, 1329, 30, 400, 550, 291, 291, 2464, 50912, 50912, 257, 1500, 1389, 300, 775, 300, 291, 652, 309, 1320, 13, 400, 294, 264, 1399, 11, 291, 483, 2940, 11, 2940, 51188, 51188, 721, 27415, 493, 13, 400, 370, 309, 311, 767, 2684, 291, 2128, 689, 291, 434, 1455, 988, 300, 51484, 51484, 291, 483, 264, 27520, 570, 291, 600, 658, 257, 4498, 1364, 551, 412, 1184, 1823, 13, 407, 264, 2182, 644, 51740, 51740], "temperature": 0.0, "avg_logprob": -0.07418375943614318, "compression_ratio": 1.7248062015503876, "no_caption_prob": 6.502342876046896e-05}, {"id": 89, "seek": 56688, "start": 566.88, "end": 573.76, "text": " is you write a failing test, you have an assertion that fails. Now, that was the red part, the", "tokens": [50364, 307, 291, 2464, 257, 18223, 1500, 11, 291, 362, 364, 19810, 313, 300, 18199, 13, 823, 11, 300, 390, 264, 2182, 644, 11, 264, 50708, 50708, 700, 644, 11, 300, 311, 264, 2182, 644, 13, 400, 294, 2699, 76, 11, 257, 31958, 6713, 727, 312, 644, 295, 300, 7763, 51050, 51050, 1399, 11, 558, 30, 407, 291, 11, 291, 815, 2464, 257, 2182, 1500, 689, 456, 311, 257, 40261, 6713, 11, 291, 51320, 51320, 3191, 300, 456, 311, 364, 14334, 7763, 11, 293, 550, 291, 3191, 300, 13, 400, 300, 311, 1392, 13, 583, 264, 51730, 51730], "temperature": 0.0, "avg_logprob": -0.1669139862060547, "compression_ratio": 1.7881773399014778, "no_caption_prob": 9.51618767430773e-06}, {"id": 90, "seek": 56688, "start": 573.76, "end": 580.6, "text": " first part, that's the red part. And in Elm, a compiler error could be part of that failure", "tokens": [50364, 307, 291, 2464, 257, 18223, 1500, 11, 291, 362, 364, 19810, 313, 300, 18199, 13, 823, 11, 300, 390, 264, 2182, 644, 11, 264, 50708, 50708, 700, 644, 11, 300, 311, 264, 2182, 644, 13, 400, 294, 2699, 76, 11, 257, 31958, 6713, 727, 312, 644, 295, 300, 7763, 51050, 51050, 1399, 11, 558, 30, 407, 291, 11, 291, 815, 2464, 257, 2182, 1500, 689, 456, 311, 257, 40261, 6713, 11, 291, 51320, 51320, 3191, 300, 456, 311, 364, 14334, 7763, 11, 293, 550, 291, 3191, 300, 13, 400, 300, 311, 1392, 13, 583, 264, 51730, 51730], "temperature": 0.0, "avg_logprob": -0.1669139862060547, "compression_ratio": 1.7881773399014778, "no_caption_prob": 9.51618767430773e-06}, {"id": 91, "seek": 56688, "start": 580.6, "end": 586.0, "text": " process, right? So you, you may write a red test where there's a compilation error, you", "tokens": [50364, 307, 291, 2464, 257, 18223, 1500, 11, 291, 362, 364, 19810, 313, 300, 18199, 13, 823, 11, 300, 390, 264, 2182, 644, 11, 264, 50708, 50708, 700, 644, 11, 300, 311, 264, 2182, 644, 13, 400, 294, 2699, 76, 11, 257, 31958, 6713, 727, 312, 644, 295, 300, 7763, 51050, 51050, 1399, 11, 558, 30, 407, 291, 11, 291, 815, 2464, 257, 2182, 1500, 689, 456, 311, 257, 40261, 6713, 11, 291, 51320, 51320, 3191, 300, 456, 311, 364, 14334, 7763, 11, 293, 550, 291, 3191, 300, 13, 400, 300, 311, 1392, 13, 583, 264, 51730, 51730], "temperature": 0.0, "avg_logprob": -0.1669139862060547, "compression_ratio": 1.7881773399014778, "no_caption_prob": 9.51618767430773e-06}, {"id": 92, "seek": 56688, "start": 586.0, "end": 594.2, "text": " fix that there's an expectation failure, and then you fix that. And that's okay. But the", "tokens": [50364, 307, 291, 2464, 257, 18223, 1500, 11, 291, 362, 364, 19810, 313, 300, 18199, 13, 823, 11, 300, 390, 264, 2182, 644, 11, 264, 50708, 50708, 700, 644, 11, 300, 311, 264, 2182, 644, 13, 400, 294, 2699, 76, 11, 257, 31958, 6713, 727, 312, 644, 295, 300, 7763, 51050, 51050, 1399, 11, 558, 30, 407, 291, 11, 291, 815, 2464, 257, 2182, 1500, 689, 456, 311, 257, 40261, 6713, 11, 291, 51320, 51320, 3191, 300, 456, 311, 364, 14334, 7763, 11, 293, 550, 291, 3191, 300, 13, 400, 300, 311, 1392, 13, 583, 264, 51730, 51730], "temperature": 0.0, "avg_logprob": -0.1669139862060547, "compression_ratio": 1.7881773399014778, "no_caption_prob": 9.51618767430773e-06}, {"id": 93, "seek": 59420, "start": 594.2, "end": 598.88, "text": " thing that's important is that you're following the failures you're getting when you run your", "tokens": [50364, 551, 300, 311, 1021, 307, 300, 291, 434, 3480, 264, 20774, 291, 434, 1242, 562, 291, 1190, 428, 50598, 50598, 1500, 13, 407, 291, 2464, 364, 19810, 313, 11, 291, 1190, 264, 1500, 11, 309, 22305, 484, 264, 2190, 1154, 11, 597, 50917, 50917, 815, 312, 490, 264, 2699, 76, 31958, 1566, 309, 1177, 380, 31413, 13, 583, 291, 434, 19442, 437, 2614, 264, 51222, 51222, 1500, 5112, 291, 291, 643, 281, 3191, 13, 400, 300, 311, 264, 1500, 9555, 644, 13, 407, 300, 311, 264, 2182, 644, 13, 51528, 51528, 440, 3092, 644, 307, 291, 7592, 309, 4288, 291, 652, 309, 291, 360, 264, 22811, 551, 291, 727, 6264, 51737, 51737], "temperature": 0.0, "avg_logprob": -0.07640868739077919, "compression_ratio": 1.8207171314741035, "no_caption_prob": 9.81819539447315e-06}, {"id": 94, "seek": 59420, "start": 598.88, "end": 605.26, "text": " test. So you write an assertion, you run the test, it prints out the current problem, which", "tokens": [50364, 551, 300, 311, 1021, 307, 300, 291, 434, 3480, 264, 20774, 291, 434, 1242, 562, 291, 1190, 428, 50598, 50598, 1500, 13, 407, 291, 2464, 364, 19810, 313, 11, 291, 1190, 264, 1500, 11, 309, 22305, 484, 264, 2190, 1154, 11, 597, 50917, 50917, 815, 312, 490, 264, 2699, 76, 31958, 1566, 309, 1177, 380, 31413, 13, 583, 291, 434, 19442, 437, 2614, 264, 51222, 51222, 1500, 5112, 291, 291, 643, 281, 3191, 13, 400, 300, 311, 264, 1500, 9555, 644, 13, 407, 300, 311, 264, 2182, 644, 13, 51528, 51528, 440, 3092, 644, 307, 291, 7592, 309, 4288, 291, 652, 309, 291, 360, 264, 22811, 551, 291, 727, 6264, 51737, 51737], "temperature": 0.0, "avg_logprob": -0.07640868739077919, "compression_ratio": 1.8207171314741035, "no_caption_prob": 9.81819539447315e-06}, {"id": 95, "seek": 59420, "start": 605.26, "end": 611.36, "text": " may be from the Elm compiler saying it doesn't compile. But you're fixing what running the", "tokens": [50364, 551, 300, 311, 1021, 307, 300, 291, 434, 3480, 264, 20774, 291, 434, 1242, 562, 291, 1190, 428, 50598, 50598, 1500, 13, 407, 291, 2464, 364, 19810, 313, 11, 291, 1190, 264, 1500, 11, 309, 22305, 484, 264, 2190, 1154, 11, 597, 50917, 50917, 815, 312, 490, 264, 2699, 76, 31958, 1566, 309, 1177, 380, 31413, 13, 583, 291, 434, 19442, 437, 2614, 264, 51222, 51222, 1500, 5112, 291, 291, 643, 281, 3191, 13, 400, 300, 311, 264, 1500, 9555, 644, 13, 407, 300, 311, 264, 2182, 644, 13, 51528, 51528, 440, 3092, 644, 307, 291, 7592, 309, 4288, 291, 652, 309, 291, 360, 264, 22811, 551, 291, 727, 6264, 51737, 51737], "temperature": 0.0, "avg_logprob": -0.07640868739077919, "compression_ratio": 1.8207171314741035, "no_caption_prob": 9.81819539447315e-06}, {"id": 96, "seek": 59420, "start": 611.36, "end": 617.48, "text": " test tells you you need to fix. And that's the test driven part. So that's the red part.", "tokens": [50364, 551, 300, 311, 1021, 307, 300, 291, 434, 3480, 264, 20774, 291, 434, 1242, 562, 291, 1190, 428, 50598, 50598, 1500, 13, 407, 291, 2464, 364, 19810, 313, 11, 291, 1190, 264, 1500, 11, 309, 22305, 484, 264, 2190, 1154, 11, 597, 50917, 50917, 815, 312, 490, 264, 2699, 76, 31958, 1566, 309, 1177, 380, 31413, 13, 583, 291, 434, 19442, 437, 2614, 264, 51222, 51222, 1500, 5112, 291, 291, 643, 281, 3191, 13, 400, 300, 311, 264, 1500, 9555, 644, 13, 407, 300, 311, 264, 2182, 644, 13, 51528, 51528, 440, 3092, 644, 307, 291, 7592, 309, 4288, 291, 652, 309, 291, 360, 264, 22811, 551, 291, 727, 6264, 51737, 51737], "temperature": 0.0, "avg_logprob": -0.07640868739077919, "compression_ratio": 1.8207171314741035, "no_caption_prob": 9.81819539447315e-06}, {"id": 97, "seek": 59420, "start": 617.48, "end": 621.6600000000001, "text": " The green part is you fake it till you make it you do the simplest thing you could possibly", "tokens": [50364, 551, 300, 311, 1021, 307, 300, 291, 434, 3480, 264, 20774, 291, 434, 1242, 562, 291, 1190, 428, 50598, 50598, 1500, 13, 407, 291, 2464, 364, 19810, 313, 11, 291, 1190, 264, 1500, 11, 309, 22305, 484, 264, 2190, 1154, 11, 597, 50917, 50917, 815, 312, 490, 264, 2699, 76, 31958, 1566, 309, 1177, 380, 31413, 13, 583, 291, 434, 19442, 437, 2614, 264, 51222, 51222, 1500, 5112, 291, 291, 643, 281, 3191, 13, 400, 300, 311, 264, 1500, 9555, 644, 13, 407, 300, 311, 264, 2182, 644, 13, 51528, 51528, 440, 3092, 644, 307, 291, 7592, 309, 4288, 291, 652, 309, 291, 360, 264, 22811, 551, 291, 727, 6264, 51737, 51737], "temperature": 0.0, "avg_logprob": -0.07640868739077919, "compression_ratio": 1.8207171314741035, "no_caption_prob": 9.81819539447315e-06}, {"id": 98, "seek": 62166, "start": 621.66, "end": 629.24, "text": " do to get it green. Usually the stupidest solution is the good one. If your inputs are", "tokens": [50364, 360, 281, 483, 309, 3092, 13, 11419, 264, 6631, 377, 3827, 307, 264, 665, 472, 13, 759, 428, 15743, 366, 50743, 50743, 411, 12972, 2309, 538, 3407, 11, 445, 1152, 3089, 14034, 13, 467, 311, 6631, 11, 457, 309, 1985, 13, 400, 281, 652, 51041, 51041, 988, 300, 300, 1177, 380, 584, 291, 2464, 257, 819, 1500, 1780, 11, 309, 1619, 12972, 732, 538, 1045, 11, 51341, 51341, 293, 550, 14034, 486, 406, 312, 264, 3006, 1867, 337, 300, 472, 13, 407, 456, 291, 362, 281, 2674, 1125, 13, 51595, 51595], "temperature": 0.0, "avg_logprob": -0.1676384710496472, "compression_ratio": 1.5324675324675325, "no_caption_prob": 1.922304909385275e-05}, {"id": 99, "seek": 62166, "start": 629.24, "end": 635.1999999999999, "text": " like multiply six by seven, just hard code 42. It's stupid, but it works. And to make", "tokens": [50364, 360, 281, 483, 309, 3092, 13, 11419, 264, 6631, 377, 3827, 307, 264, 665, 472, 13, 759, 428, 15743, 366, 50743, 50743, 411, 12972, 2309, 538, 3407, 11, 445, 1152, 3089, 14034, 13, 467, 311, 6631, 11, 457, 309, 1985, 13, 400, 281, 652, 51041, 51041, 988, 300, 300, 1177, 380, 584, 291, 2464, 257, 819, 1500, 1780, 11, 309, 1619, 12972, 732, 538, 1045, 11, 51341, 51341, 293, 550, 14034, 486, 406, 312, 264, 3006, 1867, 337, 300, 472, 13, 407, 456, 291, 362, 281, 2674, 1125, 13, 51595, 51595], "temperature": 0.0, "avg_logprob": -0.1676384710496472, "compression_ratio": 1.5324675324675325, "no_caption_prob": 1.922304909385275e-05}, {"id": 100, "seek": 62166, "start": 635.1999999999999, "end": 641.1999999999999, "text": " sure that that doesn't say you write a different test later, it says multiply two by three,", "tokens": [50364, 360, 281, 483, 309, 3092, 13, 11419, 264, 6631, 377, 3827, 307, 264, 665, 472, 13, 759, 428, 15743, 366, 50743, 50743, 411, 12972, 2309, 538, 3407, 11, 445, 1152, 3089, 14034, 13, 467, 311, 6631, 11, 457, 309, 1985, 13, 400, 281, 652, 51041, 51041, 988, 300, 300, 1177, 380, 584, 291, 2464, 257, 819, 1500, 1780, 11, 309, 1619, 12972, 732, 538, 1045, 11, 51341, 51341, 293, 550, 14034, 486, 406, 312, 264, 3006, 1867, 337, 300, 472, 13, 407, 456, 291, 362, 281, 2674, 1125, 13, 51595, 51595], "temperature": 0.0, "avg_logprob": -0.1676384710496472, "compression_ratio": 1.5324675324675325, "no_caption_prob": 1.922304909385275e-05}, {"id": 101, "seek": 62166, "start": 641.1999999999999, "end": 646.28, "text": " and then 42 will not be the correct answer for that one. So there you have to generalize.", "tokens": [50364, 360, 281, 483, 309, 3092, 13, 11419, 264, 6631, 377, 3827, 307, 264, 665, 472, 13, 759, 428, 15743, 366, 50743, 50743, 411, 12972, 2309, 538, 3407, 11, 445, 1152, 3089, 14034, 13, 467, 311, 6631, 11, 457, 309, 1985, 13, 400, 281, 652, 51041, 51041, 988, 300, 300, 1177, 380, 584, 291, 2464, 257, 819, 1500, 1780, 11, 309, 1619, 12972, 732, 538, 1045, 11, 51341, 51341, 293, 550, 14034, 486, 406, 312, 264, 3006, 1867, 337, 300, 472, 13, 407, 456, 291, 362, 281, 2674, 1125, 13, 51595, 51595], "temperature": 0.0, "avg_logprob": -0.1676384710496472, "compression_ratio": 1.5324675324675325, "no_caption_prob": 1.922304909385275e-05}, {"id": 102, "seek": 64628, "start": 646.28, "end": 651.4, "text": " Yeah, exactly. There are a lot. There are so many really elegant principles at play here", "tokens": [50364, 865, 11, 2293, 13, 821, 366, 257, 688, 13, 821, 366, 370, 867, 534, 21117, 9156, 412, 862, 510, 50620, 50620, 300, 286, 915, 366, 445, 588, 11, 588, 4420, 3487, 294, 9410, 11, 411, 398, 559, 3722, 11, 291, 7862, 380, 799, 50962, 50962, 643, 309, 13, 407, 300, 311, 264, 1558, 300, 291, 519, 291, 434, 799, 643, 281, 4813, 341, 1389, 11, 291, 51228, 51228, 519, 291, 434, 799, 643, 341, 14980, 11, 457, 2464, 309, 562, 291, 562, 291, 360, 643, 309, 51480, 51480, 562, 562, 291, 360, 362, 9859, 4467, 300, 291, 643, 309, 13, 509, 458, 11, 294, 264, 1389, 295, 411, 11, 51758, 51758], "temperature": 0.0, "avg_logprob": -0.13998442624522522, "compression_ratio": 1.8326359832635983, "no_caption_prob": 0.00017129322804976255}, {"id": 103, "seek": 64628, "start": 651.4, "end": 658.24, "text": " that I find are just very, very useful ideas in programming, like Yagni, you ain't gonna", "tokens": [50364, 865, 11, 2293, 13, 821, 366, 257, 688, 13, 821, 366, 370, 867, 534, 21117, 9156, 412, 862, 510, 50620, 50620, 300, 286, 915, 366, 445, 588, 11, 588, 4420, 3487, 294, 9410, 11, 411, 398, 559, 3722, 11, 291, 7862, 380, 799, 50962, 50962, 643, 309, 13, 407, 300, 311, 264, 1558, 300, 291, 519, 291, 434, 799, 643, 281, 4813, 341, 1389, 11, 291, 51228, 51228, 519, 291, 434, 799, 643, 341, 14980, 11, 457, 2464, 309, 562, 291, 562, 291, 360, 643, 309, 51480, 51480, 562, 562, 291, 360, 362, 9859, 4467, 300, 291, 643, 309, 13, 509, 458, 11, 294, 264, 1389, 295, 411, 11, 51758, 51758], "temperature": 0.0, "avg_logprob": -0.13998442624522522, "compression_ratio": 1.8326359832635983, "no_caption_prob": 0.00017129322804976255}, {"id": 104, "seek": 64628, "start": 658.24, "end": 663.56, "text": " need it. So that's the idea that you think you're gonna need to handle this case, you", "tokens": [50364, 865, 11, 2293, 13, 821, 366, 257, 688, 13, 821, 366, 370, 867, 534, 21117, 9156, 412, 862, 510, 50620, 50620, 300, 286, 915, 366, 445, 588, 11, 588, 4420, 3487, 294, 9410, 11, 411, 398, 559, 3722, 11, 291, 7862, 380, 799, 50962, 50962, 643, 309, 13, 407, 300, 311, 264, 1558, 300, 291, 519, 291, 434, 799, 643, 281, 4813, 341, 1389, 11, 291, 51228, 51228, 519, 291, 434, 799, 643, 341, 14980, 11, 457, 2464, 309, 562, 291, 562, 291, 360, 643, 309, 51480, 51480, 562, 562, 291, 360, 362, 9859, 4467, 300, 291, 643, 309, 13, 509, 458, 11, 294, 264, 1389, 295, 411, 11, 51758, 51758], "temperature": 0.0, "avg_logprob": -0.13998442624522522, "compression_ratio": 1.8326359832635983, "no_caption_prob": 0.00017129322804976255}, {"id": 105, "seek": 64628, "start": 663.56, "end": 668.6, "text": " think you're gonna need this functionality, but write it when you when you do need it", "tokens": [50364, 865, 11, 2293, 13, 821, 366, 257, 688, 13, 821, 366, 370, 867, 534, 21117, 9156, 412, 862, 510, 50620, 50620, 300, 286, 915, 366, 445, 588, 11, 588, 4420, 3487, 294, 9410, 11, 411, 398, 559, 3722, 11, 291, 7862, 380, 799, 50962, 50962, 643, 309, 13, 407, 300, 311, 264, 1558, 300, 291, 519, 291, 434, 799, 643, 281, 4813, 341, 1389, 11, 291, 51228, 51228, 519, 291, 434, 799, 643, 341, 14980, 11, 457, 2464, 309, 562, 291, 562, 291, 360, 643, 309, 51480, 51480, 562, 562, 291, 360, 362, 9859, 4467, 300, 291, 643, 309, 13, 509, 458, 11, 294, 264, 1389, 295, 411, 11, 51758, 51758], "temperature": 0.0, "avg_logprob": -0.13998442624522522, "compression_ratio": 1.8326359832635983, "no_caption_prob": 0.00017129322804976255}, {"id": 106, "seek": 64628, "start": 668.6, "end": 674.16, "text": " when when you do have concrete evidence that you need it. You know, in the case of like,", "tokens": [50364, 865, 11, 2293, 13, 821, 366, 257, 688, 13, 821, 366, 370, 867, 534, 21117, 9156, 412, 862, 510, 50620, 50620, 300, 286, 915, 366, 445, 588, 11, 588, 4420, 3487, 294, 9410, 11, 411, 398, 559, 3722, 11, 291, 7862, 380, 799, 50962, 50962, 643, 309, 13, 407, 300, 311, 264, 1558, 300, 291, 519, 291, 434, 799, 643, 281, 4813, 341, 1389, 11, 291, 51228, 51228, 519, 291, 434, 799, 643, 341, 14980, 11, 457, 2464, 309, 562, 291, 562, 291, 360, 643, 309, 51480, 51480, 562, 562, 291, 360, 362, 9859, 4467, 300, 291, 643, 309, 13, 509, 458, 11, 294, 264, 1389, 295, 411, 11, 51758, 51758], "temperature": 0.0, "avg_logprob": -0.13998442624522522, "compression_ratio": 1.8326359832635983, "no_caption_prob": 0.00017129322804976255}, {"id": 107, "seek": 67416, "start": 674.16, "end": 679.92, "text": " building out a product, that concrete evidence might be that you observe users using it and", "tokens": [50364, 2390, 484, 257, 1674, 11, 300, 9859, 4467, 1062, 312, 300, 291, 11441, 5022, 1228, 309, 293, 50652, 50652, 536, 300, 436, 434, 2614, 666, 257, 1154, 420, 483, 5824, 490, 552, 13, 682, 264, 1389, 295, 257, 1500, 11, 50894, 50894, 264, 291, 7862, 380, 799, 643, 309, 11, 291, 458, 11, 291, 7081, 300, 291, 643, 309, 538, 3579, 257, 1500, 13, 51132, 51132, 400, 550, 586, 291, 643, 300, 1715, 11, 457, 500, 380, 1715, 721, 294, 35979, 295, 286, 478, 799, 51396, 51396, 643, 281, 2674, 1125, 341, 13, 639, 1715, 13635, 295, 7592, 309, 4288, 291, 652, 309, 884, 264, 6631, 377, 51697, 51697], "temperature": 0.0, "avg_logprob": -0.10021312816722973, "compression_ratio": 1.7307692307692308, "no_caption_prob": 6.70884910505265e-05}, {"id": 108, "seek": 67416, "start": 679.92, "end": 684.76, "text": " see that they're running into a problem or get feedback from them. In the case of a test,", "tokens": [50364, 2390, 484, 257, 1674, 11, 300, 9859, 4467, 1062, 312, 300, 291, 11441, 5022, 1228, 309, 293, 50652, 50652, 536, 300, 436, 434, 2614, 666, 257, 1154, 420, 483, 5824, 490, 552, 13, 682, 264, 1389, 295, 257, 1500, 11, 50894, 50894, 264, 291, 7862, 380, 799, 643, 309, 11, 291, 458, 11, 291, 7081, 300, 291, 643, 309, 538, 3579, 257, 1500, 13, 51132, 51132, 400, 550, 586, 291, 643, 300, 1715, 11, 457, 500, 380, 1715, 721, 294, 35979, 295, 286, 478, 799, 51396, 51396, 643, 281, 2674, 1125, 341, 13, 639, 1715, 13635, 295, 7592, 309, 4288, 291, 652, 309, 884, 264, 6631, 377, 51697, 51697], "temperature": 0.0, "avg_logprob": -0.10021312816722973, "compression_ratio": 1.7307692307692308, "no_caption_prob": 6.70884910505265e-05}, {"id": 109, "seek": 67416, "start": 684.76, "end": 689.52, "text": " the you ain't gonna need it, you know, you prove that you need it by writing a test.", "tokens": [50364, 2390, 484, 257, 1674, 11, 300, 9859, 4467, 1062, 312, 300, 291, 11441, 5022, 1228, 309, 293, 50652, 50652, 536, 300, 436, 434, 2614, 666, 257, 1154, 420, 483, 5824, 490, 552, 13, 682, 264, 1389, 295, 257, 1500, 11, 50894, 50894, 264, 291, 7862, 380, 799, 643, 309, 11, 291, 458, 11, 291, 7081, 300, 291, 643, 309, 538, 3579, 257, 1500, 13, 51132, 51132, 400, 550, 586, 291, 643, 300, 1715, 11, 457, 500, 380, 1715, 721, 294, 35979, 295, 286, 478, 799, 51396, 51396, 643, 281, 2674, 1125, 341, 13, 639, 1715, 13635, 295, 7592, 309, 4288, 291, 652, 309, 884, 264, 6631, 377, 51697, 51697], "temperature": 0.0, "avg_logprob": -0.10021312816722973, "compression_ratio": 1.7307692307692308, "no_caption_prob": 6.70884910505265e-05}, {"id": 110, "seek": 67416, "start": 689.52, "end": 694.8, "text": " And then now you need that design, but don't design things in anticipation of I'm gonna", "tokens": [50364, 2390, 484, 257, 1674, 11, 300, 9859, 4467, 1062, 312, 300, 291, 11441, 5022, 1228, 309, 293, 50652, 50652, 536, 300, 436, 434, 2614, 666, 257, 1154, 420, 483, 5824, 490, 552, 13, 682, 264, 1389, 295, 257, 1500, 11, 50894, 50894, 264, 291, 7862, 380, 799, 643, 309, 11, 291, 458, 11, 291, 7081, 300, 291, 643, 309, 538, 3579, 257, 1500, 13, 51132, 51132, 400, 550, 586, 291, 643, 300, 1715, 11, 457, 500, 380, 1715, 721, 294, 35979, 295, 286, 478, 799, 51396, 51396, 643, 281, 2674, 1125, 341, 13, 639, 1715, 13635, 295, 7592, 309, 4288, 291, 652, 309, 884, 264, 6631, 377, 51697, 51697], "temperature": 0.0, "avg_logprob": -0.10021312816722973, "compression_ratio": 1.7307692307692308, "no_caption_prob": 6.70884910505265e-05}, {"id": 111, "seek": 67416, "start": 694.8, "end": 700.8199999999999, "text": " need to generalize this. This design discipline of fake it till you make it doing the stupidest", "tokens": [50364, 2390, 484, 257, 1674, 11, 300, 9859, 4467, 1062, 312, 300, 291, 11441, 5022, 1228, 309, 293, 50652, 50652, 536, 300, 436, 434, 2614, 666, 257, 1154, 420, 483, 5824, 490, 552, 13, 682, 264, 1389, 295, 257, 1500, 11, 50894, 50894, 264, 291, 7862, 380, 799, 643, 309, 11, 291, 458, 11, 291, 7081, 300, 291, 643, 309, 538, 3579, 257, 1500, 13, 51132, 51132, 400, 550, 586, 291, 643, 300, 1715, 11, 457, 500, 380, 1715, 721, 294, 35979, 295, 286, 478, 799, 51396, 51396, 643, 281, 2674, 1125, 341, 13, 639, 1715, 13635, 295, 7592, 309, 4288, 291, 652, 309, 884, 264, 6631, 377, 51697, 51697], "temperature": 0.0, "avg_logprob": -0.10021312816722973, "compression_ratio": 1.7307692307692308, "no_caption_prob": 6.70884910505265e-05}, {"id": 112, "seek": 70082, "start": 700.82, "end": 704.72, "text": " thing that could possibly work. Or as some people like to say, the simplest thing that", "tokens": [50364, 551, 300, 727, 6264, 589, 13, 1610, 382, 512, 561, 411, 281, 584, 11, 264, 22811, 551, 300, 50559, 50559, 727, 6264, 589, 300, 5965, 291, 3245, 466, 406, 670, 14685, 293, 40568, 50893, 50893, 437, 291, 434, 516, 281, 643, 13, 400, 309, 611, 527, 15442, 366, 709, 1101, 15218, 281, 5039, 472, 51257, 51257, 1389, 813, 281, 411, 11, 362, 264, 44498, 3827, 281, 746, 13, 467, 311, 370, 709, 3571, 281, 445, 51567, 51567, 519, 466, 472, 1389, 412, 257, 565, 13, 407, 286, 1454, 291, 1821, 300, 760, 13, 51755, 51755], "temperature": 0.0, "avg_logprob": -0.09776961926332454, "compression_ratio": 1.6816326530612244, "no_caption_prob": 4.7574041673215106e-05}, {"id": 113, "seek": 70082, "start": 704.72, "end": 711.4000000000001, "text": " could possibly work that keeps you honest about not over designing and anticipating", "tokens": [50364, 551, 300, 727, 6264, 589, 13, 1610, 382, 512, 561, 411, 281, 584, 11, 264, 22811, 551, 300, 50559, 50559, 727, 6264, 589, 300, 5965, 291, 3245, 466, 406, 670, 14685, 293, 40568, 50893, 50893, 437, 291, 434, 516, 281, 643, 13, 400, 309, 611, 527, 15442, 366, 709, 1101, 15218, 281, 5039, 472, 51257, 51257, 1389, 813, 281, 411, 11, 362, 264, 44498, 3827, 281, 746, 13, 467, 311, 370, 709, 3571, 281, 445, 51567, 51567, 519, 466, 472, 1389, 412, 257, 565, 13, 407, 286, 1454, 291, 1821, 300, 760, 13, 51755, 51755], "temperature": 0.0, "avg_logprob": -0.09776961926332454, "compression_ratio": 1.6816326530612244, "no_caption_prob": 4.7574041673215106e-05}, {"id": 114, "seek": 70082, "start": 711.4000000000001, "end": 718.6800000000001, "text": " what you're going to need. And it also our brains are much better equipped to solve one", "tokens": [50364, 551, 300, 727, 6264, 589, 13, 1610, 382, 512, 561, 411, 281, 584, 11, 264, 22811, 551, 300, 50559, 50559, 727, 6264, 589, 300, 5965, 291, 3245, 466, 406, 670, 14685, 293, 40568, 50893, 50893, 437, 291, 434, 516, 281, 643, 13, 400, 309, 611, 527, 15442, 366, 709, 1101, 15218, 281, 5039, 472, 51257, 51257, 1389, 813, 281, 411, 11, 362, 264, 44498, 3827, 281, 746, 13, 467, 311, 370, 709, 3571, 281, 445, 51567, 51567, 519, 466, 472, 1389, 412, 257, 565, 13, 407, 286, 1454, 291, 1821, 300, 760, 13, 51755, 51755], "temperature": 0.0, "avg_logprob": -0.09776961926332454, "compression_ratio": 1.6816326530612244, "no_caption_prob": 4.7574041673215106e-05}, {"id": 115, "seek": 70082, "start": 718.6800000000001, "end": 724.8800000000001, "text": " case than to like, have the generalized solution to something. It's so much easier to just", "tokens": [50364, 551, 300, 727, 6264, 589, 13, 1610, 382, 512, 561, 411, 281, 584, 11, 264, 22811, 551, 300, 50559, 50559, 727, 6264, 589, 300, 5965, 291, 3245, 466, 406, 670, 14685, 293, 40568, 50893, 50893, 437, 291, 434, 516, 281, 643, 13, 400, 309, 611, 527, 15442, 366, 709, 1101, 15218, 281, 5039, 472, 51257, 51257, 1389, 813, 281, 411, 11, 362, 264, 44498, 3827, 281, 746, 13, 467, 311, 370, 709, 3571, 281, 445, 51567, 51567, 519, 466, 472, 1389, 412, 257, 565, 13, 407, 286, 1454, 291, 1821, 300, 760, 13, 51755, 51755], "temperature": 0.0, "avg_logprob": -0.09776961926332454, "compression_ratio": 1.6816326530612244, "no_caption_prob": 4.7574041673215106e-05}, {"id": 116, "seek": 70082, "start": 724.8800000000001, "end": 728.6400000000001, "text": " think about one case at a time. So I hope you break that down.", "tokens": [50364, 551, 300, 727, 6264, 589, 13, 1610, 382, 512, 561, 411, 281, 584, 11, 264, 22811, 551, 300, 50559, 50559, 727, 6264, 589, 300, 5965, 291, 3245, 466, 406, 670, 14685, 293, 40568, 50893, 50893, 437, 291, 434, 516, 281, 643, 13, 400, 309, 611, 527, 15442, 366, 709, 1101, 15218, 281, 5039, 472, 51257, 51257, 1389, 813, 281, 411, 11, 362, 264, 44498, 3827, 281, 746, 13, 467, 311, 370, 709, 3571, 281, 445, 51567, 51567, 519, 466, 472, 1389, 412, 257, 565, 13, 407, 286, 1454, 291, 1821, 300, 760, 13, 51755, 51755], "temperature": 0.0, "avg_logprob": -0.09776961926332454, "compression_ratio": 1.6816326530612244, "no_caption_prob": 4.7574041673215106e-05}, {"id": 117, "seek": 72864, "start": 728.64, "end": 732.56, "text": " So we got the red, we got green, what is a refactor?", "tokens": [50364, 407, 321, 658, 264, 2182, 11, 321, 658, 3092, 11, 437, 307, 257, 1895, 15104, 30, 50560, 50560, 440, 1895, 15104, 11, 300, 311, 264, 472, 300, 300, 561, 2870, 281, 360, 257, 688, 295, 264, 565, 13, 16957, 15104, 307, 11, 50970, 50970, 731, 11, 309, 311, 1596, 35194, 281, 360, 294, 2699, 76, 13, 16957, 15104, 307, 562, 264, 6921, 366, 3092, 11, 1895, 15104, 13, 51308, 51308, 823, 291, 458, 11, 286, 600, 668, 286, 600, 668, 1953, 257, 688, 12881, 466, 1895, 578, 3662, 294, 2699, 76, 11, 1895, 578, 3662, 51557, 51557], "temperature": 0.0, "avg_logprob": -0.17839530020049124, "compression_ratio": 1.7301587301587302, "no_caption_prob": 2.7968708309344947e-05}, {"id": 118, "seek": 72864, "start": 732.56, "end": 740.76, "text": " The refactor, that's the one that that people forget to do a lot of the time. Refactor is,", "tokens": [50364, 407, 321, 658, 264, 2182, 11, 321, 658, 3092, 11, 437, 307, 257, 1895, 15104, 30, 50560, 50560, 440, 1895, 15104, 11, 300, 311, 264, 472, 300, 300, 561, 2870, 281, 360, 257, 688, 295, 264, 565, 13, 16957, 15104, 307, 11, 50970, 50970, 731, 11, 309, 311, 1596, 35194, 281, 360, 294, 2699, 76, 13, 16957, 15104, 307, 562, 264, 6921, 366, 3092, 11, 1895, 15104, 13, 51308, 51308, 823, 291, 458, 11, 286, 600, 668, 286, 600, 668, 1953, 257, 688, 12881, 466, 1895, 578, 3662, 294, 2699, 76, 11, 1895, 578, 3662, 51557, 51557], "temperature": 0.0, "avg_logprob": -0.17839530020049124, "compression_ratio": 1.7301587301587302, "no_caption_prob": 2.7968708309344947e-05}, {"id": 119, "seek": 72864, "start": 740.76, "end": 747.52, "text": " well, it's quite delightful to do in Elm. Refactor is when the tests are green, refactor.", "tokens": [50364, 407, 321, 658, 264, 2182, 11, 321, 658, 3092, 11, 437, 307, 257, 1895, 15104, 30, 50560, 50560, 440, 1895, 15104, 11, 300, 311, 264, 472, 300, 300, 561, 2870, 281, 360, 257, 688, 295, 264, 565, 13, 16957, 15104, 307, 11, 50970, 50970, 731, 11, 309, 311, 1596, 35194, 281, 360, 294, 2699, 76, 13, 16957, 15104, 307, 562, 264, 6921, 366, 3092, 11, 1895, 15104, 13, 51308, 51308, 823, 291, 458, 11, 286, 600, 668, 286, 600, 668, 1953, 257, 688, 12881, 466, 1895, 578, 3662, 294, 2699, 76, 11, 1895, 578, 3662, 51557, 51557], "temperature": 0.0, "avg_logprob": -0.17839530020049124, "compression_ratio": 1.7301587301587302, "no_caption_prob": 2.7968708309344947e-05}, {"id": 120, "seek": 72864, "start": 747.52, "end": 752.5, "text": " Now you know, I've been I've been thinking a lot lately about refactoring in Elm, refactoring", "tokens": [50364, 407, 321, 658, 264, 2182, 11, 321, 658, 3092, 11, 437, 307, 257, 1895, 15104, 30, 50560, 50560, 440, 1895, 15104, 11, 300, 311, 264, 472, 300, 300, 561, 2870, 281, 360, 257, 688, 295, 264, 565, 13, 16957, 15104, 307, 11, 50970, 50970, 731, 11, 309, 311, 1596, 35194, 281, 360, 294, 2699, 76, 13, 16957, 15104, 307, 562, 264, 6921, 366, 3092, 11, 1895, 15104, 13, 51308, 51308, 823, 291, 458, 11, 286, 600, 668, 286, 600, 668, 1953, 257, 688, 12881, 466, 1895, 578, 3662, 294, 2699, 76, 11, 1895, 578, 3662, 51557, 51557], "temperature": 0.0, "avg_logprob": -0.17839530020049124, "compression_ratio": 1.7301587301587302, "no_caption_prob": 2.7968708309344947e-05}, {"id": 121, "seek": 75250, "start": 752.5, "end": 758.72, "text": " tools. You know, I've been I've been doing some work on making some contributions to", "tokens": [50364, 3873, 13, 509, 458, 11, 286, 600, 668, 286, 600, 668, 884, 512, 589, 322, 1455, 512, 15725, 281, 50675, 50675, 18762, 72, 41, 2699, 76, 337, 512, 18473, 1895, 15104, 1109, 13, 286, 458, 291, 611, 366, 1953, 466, 613, 3467, 50923, 50923, 295, 721, 291, 434, 294, 365, 2699, 76, 3131, 13, 51005, 51005, 7010, 11, 2138, 13, 51083, 51083, 440, 1558, 365, 264, 1895, 15104, 1823, 294, 314, 20818, 307, 586, 291, 362, 257, 1500, 300, 733, 295, 31034, 51351, 51351, 264, 5223, 300, 291, 528, 307, 2737, 13, 407, 586, 291, 393, 11750, 1895, 15104, 13, 407, 472, 295, 264, 51621, 51621], "temperature": 0.0, "avg_logprob": -0.11850019737526223, "compression_ratio": 1.677685950413223, "no_caption_prob": 1.2029303434246685e-05}, {"id": 122, "seek": 75250, "start": 758.72, "end": 763.68, "text": " IntelliJ Elm for some automated refactorings. I know you also are thinking about these types", "tokens": [50364, 3873, 13, 509, 458, 11, 286, 600, 668, 286, 600, 668, 884, 512, 589, 322, 1455, 512, 15725, 281, 50675, 50675, 18762, 72, 41, 2699, 76, 337, 512, 18473, 1895, 15104, 1109, 13, 286, 458, 291, 611, 366, 1953, 466, 613, 3467, 50923, 50923, 295, 721, 291, 434, 294, 365, 2699, 76, 3131, 13, 51005, 51005, 7010, 11, 2138, 13, 51083, 51083, 440, 1558, 365, 264, 1895, 15104, 1823, 294, 314, 20818, 307, 586, 291, 362, 257, 1500, 300, 733, 295, 31034, 51351, 51351, 264, 5223, 300, 291, 528, 307, 2737, 13, 407, 586, 291, 393, 11750, 1895, 15104, 13, 407, 472, 295, 264, 51621, 51621], "temperature": 0.0, "avg_logprob": -0.11850019737526223, "compression_ratio": 1.677685950413223, "no_caption_prob": 1.2029303434246685e-05}, {"id": 123, "seek": 75250, "start": 763.68, "end": 765.32, "text": " of things you're in with Elm review.", "tokens": [50364, 3873, 13, 509, 458, 11, 286, 600, 668, 286, 600, 668, 884, 512, 589, 322, 1455, 512, 15725, 281, 50675, 50675, 18762, 72, 41, 2699, 76, 337, 512, 18473, 1895, 15104, 1109, 13, 286, 458, 291, 611, 366, 1953, 466, 613, 3467, 50923, 50923, 295, 721, 291, 434, 294, 365, 2699, 76, 3131, 13, 51005, 51005, 7010, 11, 2138, 13, 51083, 51083, 440, 1558, 365, 264, 1895, 15104, 1823, 294, 314, 20818, 307, 586, 291, 362, 257, 1500, 300, 733, 295, 31034, 51351, 51351, 264, 5223, 300, 291, 528, 307, 2737, 13, 407, 586, 291, 393, 11750, 1895, 15104, 13, 407, 472, 295, 264, 51621, 51621], "temperature": 0.0, "avg_logprob": -0.11850019737526223, "compression_ratio": 1.677685950413223, "no_caption_prob": 1.2029303434246685e-05}, {"id": 124, "seek": 75250, "start": 765.32, "end": 766.88, "text": " Yep, definitely.", "tokens": [50364, 3873, 13, 509, 458, 11, 286, 600, 668, 286, 600, 668, 884, 512, 589, 322, 1455, 512, 15725, 281, 50675, 50675, 18762, 72, 41, 2699, 76, 337, 512, 18473, 1895, 15104, 1109, 13, 286, 458, 291, 611, 366, 1953, 466, 613, 3467, 50923, 50923, 295, 721, 291, 434, 294, 365, 2699, 76, 3131, 13, 51005, 51005, 7010, 11, 2138, 13, 51083, 51083, 440, 1558, 365, 264, 1895, 15104, 1823, 294, 314, 20818, 307, 586, 291, 362, 257, 1500, 300, 733, 295, 31034, 51351, 51351, 264, 5223, 300, 291, 528, 307, 2737, 13, 407, 586, 291, 393, 11750, 1895, 15104, 13, 407, 472, 295, 264, 51621, 51621], "temperature": 0.0, "avg_logprob": -0.11850019737526223, "compression_ratio": 1.677685950413223, "no_caption_prob": 1.2029303434246685e-05}, {"id": 125, "seek": 75250, "start": 766.88, "end": 772.24, "text": " The idea with the refactor step in TDD is now you have a test that kind of demonstrates", "tokens": [50364, 3873, 13, 509, 458, 11, 286, 600, 668, 286, 600, 668, 884, 512, 589, 322, 1455, 512, 15725, 281, 50675, 50675, 18762, 72, 41, 2699, 76, 337, 512, 18473, 1895, 15104, 1109, 13, 286, 458, 291, 611, 366, 1953, 466, 613, 3467, 50923, 50923, 295, 721, 291, 434, 294, 365, 2699, 76, 3131, 13, 51005, 51005, 7010, 11, 2138, 13, 51083, 51083, 440, 1558, 365, 264, 1895, 15104, 1823, 294, 314, 20818, 307, 586, 291, 362, 257, 1500, 300, 733, 295, 31034, 51351, 51351, 264, 5223, 300, 291, 528, 307, 2737, 13, 407, 586, 291, 393, 11750, 1895, 15104, 13, 407, 472, 295, 264, 51621, 51621], "temperature": 0.0, "avg_logprob": -0.11850019737526223, "compression_ratio": 1.677685950413223, "no_caption_prob": 1.2029303434246685e-05}, {"id": 126, "seek": 75250, "start": 772.24, "end": 777.64, "text": " the behavior that you want is happening. So now you can safely refactor. So one of the", "tokens": [50364, 3873, 13, 509, 458, 11, 286, 600, 668, 286, 600, 668, 884, 512, 589, 322, 1455, 512, 15725, 281, 50675, 50675, 18762, 72, 41, 2699, 76, 337, 512, 18473, 1895, 15104, 1109, 13, 286, 458, 291, 611, 366, 1953, 466, 613, 3467, 50923, 50923, 295, 721, 291, 434, 294, 365, 2699, 76, 3131, 13, 51005, 51005, 7010, 11, 2138, 13, 51083, 51083, 440, 1558, 365, 264, 1895, 15104, 1823, 294, 314, 20818, 307, 586, 291, 362, 257, 1500, 300, 733, 295, 31034, 51351, 51351, 264, 5223, 300, 291, 528, 307, 2737, 13, 407, 586, 291, 393, 11750, 1895, 15104, 13, 407, 472, 295, 264, 51621, 51621], "temperature": 0.0, "avg_logprob": -0.11850019737526223, "compression_ratio": 1.677685950413223, "no_caption_prob": 1.2029303434246685e-05}, {"id": 127, "seek": 77764, "start": 777.64, "end": 783.64, "text": " things in TDD also is that you don't want to you don't want to start refactoring when", "tokens": [50364, 721, 294, 314, 20818, 611, 307, 300, 291, 500, 380, 528, 281, 291, 500, 380, 528, 281, 722, 1895, 578, 3662, 562, 50664, 50664, 291, 434, 294, 257, 2182, 1785, 570, 550, 291, 652, 257, 1895, 578, 3662, 293, 291, 500, 380, 362, 300, 3092, 50922, 50922, 281, 980, 291, 1203, 1437, 731, 13, 51036, 51036, 865, 13, 407, 498, 291, 1409, 1895, 578, 3662, 11, 2139, 1590, 264, 777, 1500, 420, 342, 1299, 420, 2035, 1895, 578, 3662, 51452, 51452, 291, 645, 22001, 11, 445, 360, 472, 420, 264, 661, 11, 406, 1293, 412, 264, 912, 565, 13, 51720, 51720], "temperature": 0.0, "avg_logprob": -0.15423483987456388, "compression_ratio": 1.7735849056603774, "no_caption_prob": 1.5206584976112936e-05}, {"id": 128, "seek": 77764, "start": 783.64, "end": 788.8, "text": " you're in a red state because then you make a refactoring and you don't have that green", "tokens": [50364, 721, 294, 314, 20818, 611, 307, 300, 291, 500, 380, 528, 281, 291, 500, 380, 528, 281, 722, 1895, 578, 3662, 562, 50664, 50664, 291, 434, 294, 257, 2182, 1785, 570, 550, 291, 652, 257, 1895, 578, 3662, 293, 291, 500, 380, 362, 300, 3092, 50922, 50922, 281, 980, 291, 1203, 1437, 731, 13, 51036, 51036, 865, 13, 407, 498, 291, 1409, 1895, 578, 3662, 11, 2139, 1590, 264, 777, 1500, 420, 342, 1299, 420, 2035, 1895, 578, 3662, 51452, 51452, 291, 645, 22001, 11, 445, 360, 472, 420, 264, 661, 11, 406, 1293, 412, 264, 912, 565, 13, 51720, 51720], "temperature": 0.0, "avg_logprob": -0.15423483987456388, "compression_ratio": 1.7735849056603774, "no_caption_prob": 1.5206584976112936e-05}, {"id": 129, "seek": 77764, "start": 788.8, "end": 791.08, "text": " to tell you everything went well.", "tokens": [50364, 721, 294, 314, 20818, 611, 307, 300, 291, 500, 380, 528, 281, 291, 500, 380, 528, 281, 722, 1895, 578, 3662, 562, 50664, 50664, 291, 434, 294, 257, 2182, 1785, 570, 550, 291, 652, 257, 1895, 578, 3662, 293, 291, 500, 380, 362, 300, 3092, 50922, 50922, 281, 980, 291, 1203, 1437, 731, 13, 51036, 51036, 865, 13, 407, 498, 291, 1409, 1895, 578, 3662, 11, 2139, 1590, 264, 777, 1500, 420, 342, 1299, 420, 2035, 1895, 578, 3662, 51452, 51452, 291, 645, 22001, 11, 445, 360, 472, 420, 264, 661, 11, 406, 1293, 412, 264, 912, 565, 13, 51720, 51720], "temperature": 0.0, "avg_logprob": -0.15423483987456388, "compression_ratio": 1.7735849056603774, "no_caption_prob": 1.5206584976112936e-05}, {"id": 130, "seek": 77764, "start": 791.08, "end": 799.4, "text": " Yeah. So if you started refactoring, either stop the new test or stash or whatever refactoring", "tokens": [50364, 721, 294, 314, 20818, 611, 307, 300, 291, 500, 380, 528, 281, 291, 500, 380, 528, 281, 722, 1895, 578, 3662, 562, 50664, 50664, 291, 434, 294, 257, 2182, 1785, 570, 550, 291, 652, 257, 1895, 578, 3662, 293, 291, 500, 380, 362, 300, 3092, 50922, 50922, 281, 980, 291, 1203, 1437, 731, 13, 51036, 51036, 865, 13, 407, 498, 291, 1409, 1895, 578, 3662, 11, 2139, 1590, 264, 777, 1500, 420, 342, 1299, 420, 2035, 1895, 578, 3662, 51452, 51452, 291, 645, 22001, 11, 445, 360, 472, 420, 264, 661, 11, 406, 1293, 412, 264, 912, 565, 13, 51720, 51720], "temperature": 0.0, "avg_logprob": -0.15423483987456388, "compression_ratio": 1.7735849056603774, "no_caption_prob": 1.5206584976112936e-05}, {"id": 131, "seek": 77764, "start": 799.4, "end": 804.76, "text": " you were attempting, just do one or the other, not both at the same time.", "tokens": [50364, 721, 294, 314, 20818, 611, 307, 300, 291, 500, 380, 528, 281, 291, 500, 380, 528, 281, 722, 1895, 578, 3662, 562, 50664, 50664, 291, 434, 294, 257, 2182, 1785, 570, 550, 291, 652, 257, 1895, 578, 3662, 293, 291, 500, 380, 362, 300, 3092, 50922, 50922, 281, 980, 291, 1203, 1437, 731, 13, 51036, 51036, 865, 13, 407, 498, 291, 1409, 1895, 578, 3662, 11, 2139, 1590, 264, 777, 1500, 420, 342, 1299, 420, 2035, 1895, 578, 3662, 51452, 51452, 291, 645, 22001, 11, 445, 360, 472, 420, 264, 661, 11, 406, 1293, 412, 264, 912, 565, 13, 51720, 51720], "temperature": 0.0, "avg_logprob": -0.15423483987456388, "compression_ratio": 1.7735849056603774, "no_caption_prob": 1.5206584976112936e-05}, {"id": 132, "seek": 80476, "start": 804.76, "end": 809.68, "text": " That's a great tip. Yeah, I find I find myself in practice using that technique quite a bit.", "tokens": [50364, 663, 311, 257, 869, 4125, 13, 865, 11, 286, 915, 286, 915, 2059, 294, 3124, 1228, 300, 6532, 1596, 257, 857, 13, 50610, 50610, 509, 445, 291, 434, 3579, 257, 777, 1500, 293, 550, 291, 434, 411, 11, 1699, 257, 3456, 11, 286, 534, 643, 50826, 50826, 281, 1895, 15104, 341, 551, 281, 1322, 341, 551, 300, 264, 777, 1500, 1389, 2738, 385, 281, 1322, 13, 51162, 51162, 400, 382, 291, 584, 11, 291, 2871, 484, 264, 777, 1500, 11, 291, 10023, 309, 11, 457, 586, 291, 434, 646, 412, 257, 3092, 51348, 51348, 1785, 293, 291, 393, 1895, 15104, 439, 291, 528, 13, 400, 309, 311, 341, 307, 1071, 534, 869, 8665, 51623, 51623], "temperature": 0.0, "avg_logprob": -0.060802732777391746, "compression_ratio": 1.7751004016064258, "no_caption_prob": 3.0717234039912e-05}, {"id": 133, "seek": 80476, "start": 809.68, "end": 814.0, "text": " You just you're writing a new test and then you're like, wait a minute, I really need", "tokens": [50364, 663, 311, 257, 869, 4125, 13, 865, 11, 286, 915, 286, 915, 2059, 294, 3124, 1228, 300, 6532, 1596, 257, 857, 13, 50610, 50610, 509, 445, 291, 434, 3579, 257, 777, 1500, 293, 550, 291, 434, 411, 11, 1699, 257, 3456, 11, 286, 534, 643, 50826, 50826, 281, 1895, 15104, 341, 551, 281, 1322, 341, 551, 300, 264, 777, 1500, 1389, 2738, 385, 281, 1322, 13, 51162, 51162, 400, 382, 291, 584, 11, 291, 2871, 484, 264, 777, 1500, 11, 291, 10023, 309, 11, 457, 586, 291, 434, 646, 412, 257, 3092, 51348, 51348, 1785, 293, 291, 393, 1895, 15104, 439, 291, 528, 13, 400, 309, 311, 341, 307, 1071, 534, 869, 8665, 51623, 51623], "temperature": 0.0, "avg_logprob": -0.060802732777391746, "compression_ratio": 1.7751004016064258, "no_caption_prob": 3.0717234039912e-05}, {"id": 134, "seek": 80476, "start": 814.0, "end": 820.72, "text": " to refactor this thing to build this thing that the new test case wants me to build.", "tokens": [50364, 663, 311, 257, 869, 4125, 13, 865, 11, 286, 915, 286, 915, 2059, 294, 3124, 1228, 300, 6532, 1596, 257, 857, 13, 50610, 50610, 509, 445, 291, 434, 3579, 257, 777, 1500, 293, 550, 291, 434, 411, 11, 1699, 257, 3456, 11, 286, 534, 643, 50826, 50826, 281, 1895, 15104, 341, 551, 281, 1322, 341, 551, 300, 264, 777, 1500, 1389, 2738, 385, 281, 1322, 13, 51162, 51162, 400, 382, 291, 584, 11, 291, 2871, 484, 264, 777, 1500, 11, 291, 10023, 309, 11, 457, 586, 291, 434, 646, 412, 257, 3092, 51348, 51348, 1785, 293, 291, 393, 1895, 15104, 439, 291, 528, 13, 400, 309, 311, 341, 307, 1071, 534, 869, 8665, 51623, 51623], "temperature": 0.0, "avg_logprob": -0.060802732777391746, "compression_ratio": 1.7751004016064258, "no_caption_prob": 3.0717234039912e-05}, {"id": 135, "seek": 80476, "start": 820.72, "end": 824.4399999999999, "text": " And as you say, you comment out the new test, you skip it, but now you're back at a green", "tokens": [50364, 663, 311, 257, 869, 4125, 13, 865, 11, 286, 915, 286, 915, 2059, 294, 3124, 1228, 300, 6532, 1596, 257, 857, 13, 50610, 50610, 509, 445, 291, 434, 3579, 257, 777, 1500, 293, 550, 291, 434, 411, 11, 1699, 257, 3456, 11, 286, 534, 643, 50826, 50826, 281, 1895, 15104, 341, 551, 281, 1322, 341, 551, 300, 264, 777, 1500, 1389, 2738, 385, 281, 1322, 13, 51162, 51162, 400, 382, 291, 584, 11, 291, 2871, 484, 264, 777, 1500, 11, 291, 10023, 309, 11, 457, 586, 291, 434, 646, 412, 257, 3092, 51348, 51348, 1785, 293, 291, 393, 1895, 15104, 439, 291, 528, 13, 400, 309, 311, 341, 307, 1071, 534, 869, 8665, 51623, 51623], "temperature": 0.0, "avg_logprob": -0.060802732777391746, "compression_ratio": 1.7751004016064258, "no_caption_prob": 3.0717234039912e-05}, {"id": 136, "seek": 80476, "start": 824.4399999999999, "end": 829.9399999999999, "text": " state and you can refactor all you want. And it's this is another really great principle", "tokens": [50364, 663, 311, 257, 869, 4125, 13, 865, 11, 286, 915, 286, 915, 2059, 294, 3124, 1228, 300, 6532, 1596, 257, 857, 13, 50610, 50610, 509, 445, 291, 434, 3579, 257, 777, 1500, 293, 550, 291, 434, 411, 11, 1699, 257, 3456, 11, 286, 534, 643, 50826, 50826, 281, 1895, 15104, 341, 551, 281, 1322, 341, 551, 300, 264, 777, 1500, 1389, 2738, 385, 281, 1322, 13, 51162, 51162, 400, 382, 291, 584, 11, 291, 2871, 484, 264, 777, 1500, 11, 291, 10023, 309, 11, 457, 586, 291, 434, 646, 412, 257, 3092, 51348, 51348, 1785, 293, 291, 393, 1895, 15104, 439, 291, 528, 13, 400, 309, 311, 341, 307, 1071, 534, 869, 8665, 51623, 51623], "temperature": 0.0, "avg_logprob": -0.060802732777391746, "compression_ratio": 1.7751004016064258, "no_caption_prob": 3.0717234039912e-05}, {"id": 137, "seek": 82994, "start": 829.94, "end": 835.1600000000001, "text": " of test driven development, which is make the change easy, then make the easy change.", "tokens": [50364, 295, 1500, 9555, 3250, 11, 597, 307, 652, 264, 1319, 1858, 11, 550, 652, 264, 1858, 1319, 13, 50625, 50625, 1012, 307, 300, 4077, 281, 4997, 30, 50827, 50827, 1436, 309, 311, 644, 295, 264, 1895, 15104, 1823, 13, 407, 291, 528, 382, 709, 382, 1944, 281, 10687, 322, 13, 407, 51249, 51249, 2171, 300, 1355, 300, 291, 291, 362, 257, 777, 1500, 1389, 13, 407, 2182, 11, 3092, 1895, 15104, 11, 321, 733, 51484, 51484, 295, 7268, 264, 819, 4439, 11, 457, 291, 733, 295, 44497, 322, 300, 6586, 11, 5127, 777, 51717, 51717], "temperature": 0.0, "avg_logprob": -0.10985933874071259, "compression_ratio": 1.6391304347826088, "no_caption_prob": 1.2411323950800579e-05}, {"id": 138, "seek": 82994, "start": 835.1600000000001, "end": 839.2, "text": " How is that related to testing?", "tokens": [50364, 295, 1500, 9555, 3250, 11, 597, 307, 652, 264, 1319, 1858, 11, 550, 652, 264, 1858, 1319, 13, 50625, 50625, 1012, 307, 300, 4077, 281, 4997, 30, 50827, 50827, 1436, 309, 311, 644, 295, 264, 1895, 15104, 1823, 13, 407, 291, 528, 382, 709, 382, 1944, 281, 10687, 322, 13, 407, 51249, 51249, 2171, 300, 1355, 300, 291, 291, 362, 257, 777, 1500, 1389, 13, 407, 2182, 11, 3092, 1895, 15104, 11, 321, 733, 51484, 51484, 295, 7268, 264, 819, 4439, 11, 457, 291, 733, 295, 44497, 322, 300, 6586, 11, 5127, 777, 51717, 51717], "temperature": 0.0, "avg_logprob": -0.10985933874071259, "compression_ratio": 1.6391304347826088, "no_caption_prob": 1.2411323950800579e-05}, {"id": 139, "seek": 82994, "start": 839.2, "end": 847.6400000000001, "text": " Because it's part of the refactor step. So you want as much as possible to rely on. So", "tokens": [50364, 295, 1500, 9555, 3250, 11, 597, 307, 652, 264, 1319, 1858, 11, 550, 652, 264, 1858, 1319, 13, 50625, 50625, 1012, 307, 300, 4077, 281, 4997, 30, 50827, 50827, 1436, 309, 311, 644, 295, 264, 1895, 15104, 1823, 13, 407, 291, 528, 382, 709, 382, 1944, 281, 10687, 322, 13, 407, 51249, 51249, 2171, 300, 1355, 300, 291, 291, 362, 257, 777, 1500, 1389, 13, 407, 2182, 11, 3092, 1895, 15104, 11, 321, 733, 51484, 51484, 295, 7268, 264, 819, 4439, 11, 457, 291, 733, 295, 44497, 322, 300, 6586, 11, 5127, 777, 51717, 51717], "temperature": 0.0, "avg_logprob": -0.10985933874071259, "compression_ratio": 1.6391304347826088, "no_caption_prob": 1.2411323950800579e-05}, {"id": 140, "seek": 82994, "start": 847.6400000000001, "end": 852.34, "text": " sometimes that means that you you have a new test case. So red, green refactor, we kind", "tokens": [50364, 295, 1500, 9555, 3250, 11, 597, 307, 652, 264, 1319, 1858, 11, 550, 652, 264, 1858, 1319, 13, 50625, 50625, 1012, 307, 300, 4077, 281, 4997, 30, 50827, 50827, 1436, 309, 311, 644, 295, 264, 1895, 15104, 1823, 13, 407, 291, 528, 382, 709, 382, 1944, 281, 10687, 322, 13, 407, 51249, 51249, 2171, 300, 1355, 300, 291, 291, 362, 257, 777, 1500, 1389, 13, 407, 2182, 11, 3092, 1895, 15104, 11, 321, 733, 51484, 51484, 295, 7268, 264, 819, 4439, 11, 457, 291, 733, 295, 44497, 322, 300, 6586, 11, 5127, 777, 51717, 51717], "temperature": 0.0, "avg_logprob": -0.10985933874071259, "compression_ratio": 1.6391304347826088, "no_caption_prob": 1.2411323950800579e-05}, {"id": 141, "seek": 82994, "start": 852.34, "end": 857.0, "text": " of introduced the different steps, but you kind of iterate on that cycle, adding new", "tokens": [50364, 295, 1500, 9555, 3250, 11, 597, 307, 652, 264, 1319, 1858, 11, 550, 652, 264, 1858, 1319, 13, 50625, 50625, 1012, 307, 300, 4077, 281, 4997, 30, 50827, 50827, 1436, 309, 311, 644, 295, 264, 1895, 15104, 1823, 13, 407, 291, 528, 382, 709, 382, 1944, 281, 10687, 322, 13, 407, 51249, 51249, 2171, 300, 1355, 300, 291, 291, 362, 257, 777, 1500, 1389, 13, 407, 2182, 11, 3092, 1895, 15104, 11, 321, 733, 51484, 51484, 295, 7268, 264, 819, 4439, 11, 457, 291, 733, 295, 44497, 322, 300, 6586, 11, 5127, 777, 51717, 51717], "temperature": 0.0, "avg_logprob": -0.10985933874071259, "compression_ratio": 1.6391304347826088, "no_caption_prob": 1.2411323950800579e-05}, {"id": 142, "seek": 85700, "start": 857.0, "end": 861.42, "text": " cases. So you do red green refactor, you can refactor anytime it's green, it's really more", "tokens": [50364, 3331, 13, 407, 291, 360, 2182, 3092, 1895, 15104, 11, 291, 393, 1895, 15104, 13038, 309, 311, 3092, 11, 309, 311, 534, 544, 50585, 50585, 295, 257, 1785, 3479, 813, 411, 257, 27706, 8310, 11, 558, 30, 865, 11, 550, 291, 909, 257, 777, 1500, 1389, 50863, 50863, 382, 2978, 562, 562, 456, 311, 544, 5223, 291, 643, 281, 909, 11, 291, 909, 257, 1500, 1389, 281, 7081, 51086, 51086, 291, 643, 300, 777, 5223, 18033, 13, 865, 13, 400, 550, 382, 291, 584, 11, 291, 915, 300, 286, 534, 51422, 51422, 643, 281, 2674, 1125, 341, 2522, 295, 3089, 420, 8947, 341, 2445, 420, 909, 257, 13075, 510, 420, 2035, 51706, 51706], "temperature": 0.0, "avg_logprob": -0.08909998354704483, "compression_ratio": 1.77734375, "no_caption_prob": 1.5206665011646692e-05}, {"id": 143, "seek": 85700, "start": 861.42, "end": 866.98, "text": " of a state machine than like a discrete sequence, right? Yeah, then you add a new test case", "tokens": [50364, 3331, 13, 407, 291, 360, 2182, 3092, 1895, 15104, 11, 291, 393, 1895, 15104, 13038, 309, 311, 3092, 11, 309, 311, 534, 544, 50585, 50585, 295, 257, 1785, 3479, 813, 411, 257, 27706, 8310, 11, 558, 30, 865, 11, 550, 291, 909, 257, 777, 1500, 1389, 50863, 50863, 382, 2978, 562, 562, 456, 311, 544, 5223, 291, 643, 281, 909, 11, 291, 909, 257, 1500, 1389, 281, 7081, 51086, 51086, 291, 643, 300, 777, 5223, 18033, 13, 865, 13, 400, 550, 382, 291, 584, 11, 291, 915, 300, 286, 534, 51422, 51422, 643, 281, 2674, 1125, 341, 2522, 295, 3089, 420, 8947, 341, 2445, 420, 909, 257, 13075, 510, 420, 2035, 51706, 51706], "temperature": 0.0, "avg_logprob": -0.08909998354704483, "compression_ratio": 1.77734375, "no_caption_prob": 1.5206665011646692e-05}, {"id": 144, "seek": 85700, "start": 866.98, "end": 871.44, "text": " as needed when when there's more behavior you need to add, you add a test case to prove", "tokens": [50364, 3331, 13, 407, 291, 360, 2182, 3092, 1895, 15104, 11, 291, 393, 1895, 15104, 13038, 309, 311, 3092, 11, 309, 311, 534, 544, 50585, 50585, 295, 257, 1785, 3479, 813, 411, 257, 27706, 8310, 11, 558, 30, 865, 11, 550, 291, 909, 257, 777, 1500, 1389, 50863, 50863, 382, 2978, 562, 562, 456, 311, 544, 5223, 291, 643, 281, 909, 11, 291, 909, 257, 1500, 1389, 281, 7081, 51086, 51086, 291, 643, 300, 777, 5223, 18033, 13, 865, 13, 400, 550, 382, 291, 584, 11, 291, 915, 300, 286, 534, 51422, 51422, 643, 281, 2674, 1125, 341, 2522, 295, 3089, 420, 8947, 341, 2445, 420, 909, 257, 13075, 510, 420, 2035, 51706, 51706], "temperature": 0.0, "avg_logprob": -0.08909998354704483, "compression_ratio": 1.77734375, "no_caption_prob": 1.5206665011646692e-05}, {"id": 145, "seek": 85700, "start": 871.44, "end": 878.16, "text": " you need that new behavior handled. Yeah. And then as you say, you find that I really", "tokens": [50364, 3331, 13, 407, 291, 360, 2182, 3092, 1895, 15104, 11, 291, 393, 1895, 15104, 13038, 309, 311, 3092, 11, 309, 311, 534, 544, 50585, 50585, 295, 257, 1785, 3479, 813, 411, 257, 27706, 8310, 11, 558, 30, 865, 11, 550, 291, 909, 257, 777, 1500, 1389, 50863, 50863, 382, 2978, 562, 562, 456, 311, 544, 5223, 291, 643, 281, 909, 11, 291, 909, 257, 1500, 1389, 281, 7081, 51086, 51086, 291, 643, 300, 777, 5223, 18033, 13, 865, 13, 400, 550, 382, 291, 584, 11, 291, 915, 300, 286, 534, 51422, 51422, 643, 281, 2674, 1125, 341, 2522, 295, 3089, 420, 8947, 341, 2445, 420, 909, 257, 13075, 510, 420, 2035, 51706, 51706], "temperature": 0.0, "avg_logprob": -0.08909998354704483, "compression_ratio": 1.77734375, "no_caption_prob": 1.5206665011646692e-05}, {"id": 146, "seek": 85700, "start": 878.16, "end": 883.84, "text": " need to generalize this piece of code or extract this function or add a parameter here or whatever", "tokens": [50364, 3331, 13, 407, 291, 360, 2182, 3092, 1895, 15104, 11, 291, 393, 1895, 15104, 13038, 309, 311, 3092, 11, 309, 311, 534, 544, 50585, 50585, 295, 257, 1785, 3479, 813, 411, 257, 27706, 8310, 11, 558, 30, 865, 11, 550, 291, 909, 257, 777, 1500, 1389, 50863, 50863, 382, 2978, 562, 562, 456, 311, 544, 5223, 291, 643, 281, 909, 11, 291, 909, 257, 1500, 1389, 281, 7081, 51086, 51086, 291, 643, 300, 777, 5223, 18033, 13, 865, 13, 400, 550, 382, 291, 584, 11, 291, 915, 300, 286, 534, 51422, 51422, 643, 281, 2674, 1125, 341, 2522, 295, 3089, 420, 8947, 341, 2445, 420, 909, 257, 13075, 510, 420, 2035, 51706, 51706], "temperature": 0.0, "avg_logprob": -0.08909998354704483, "compression_ratio": 1.77734375, "no_caption_prob": 1.5206665011646692e-05}, {"id": 147, "seek": 88384, "start": 883.84, "end": 888.36, "text": " it might be, in order to make this next step easier, like this step is going to be too", "tokens": [50364, 309, 1062, 312, 11, 294, 1668, 281, 652, 341, 958, 1823, 3571, 11, 411, 341, 1823, 307, 516, 281, 312, 886, 50590, 50590, 955, 11, 5969, 286, 360, 257, 1895, 578, 3662, 1823, 700, 13, 400, 370, 382, 291, 382, 291, 10932, 484, 11, 291, 291, 50900, 50900, 10023, 264, 777, 1500, 291, 645, 5127, 11, 420, 291, 808, 281, 2871, 309, 484, 11, 291, 342, 1299, 309, 11, 2035, 51206, 51206, 291, 643, 281, 360, 281, 483, 646, 281, 257, 3092, 1785, 13, 583, 586, 291, 458, 11, 1392, 11, 286, 669, 516, 281, 643, 51410, 51410, 281, 360, 341, 1895, 578, 3662, 281, 652, 264, 958, 1823, 3571, 13, 400, 370, 291, 652, 264, 1319, 1858, 13, 400, 51698, 51698], "temperature": 0.0, "avg_logprob": -0.08338304488889632, "compression_ratio": 1.8717948717948718, "no_caption_prob": 1.9222870832891203e-05}, {"id": 148, "seek": 88384, "start": 888.36, "end": 894.5600000000001, "text": " big, unless I do a refactoring step first. And so as you as you pointed out, you you", "tokens": [50364, 309, 1062, 312, 11, 294, 1668, 281, 652, 341, 958, 1823, 3571, 11, 411, 341, 1823, 307, 516, 281, 312, 886, 50590, 50590, 955, 11, 5969, 286, 360, 257, 1895, 578, 3662, 1823, 700, 13, 400, 370, 382, 291, 382, 291, 10932, 484, 11, 291, 291, 50900, 50900, 10023, 264, 777, 1500, 291, 645, 5127, 11, 420, 291, 808, 281, 2871, 309, 484, 11, 291, 342, 1299, 309, 11, 2035, 51206, 51206, 291, 643, 281, 360, 281, 483, 646, 281, 257, 3092, 1785, 13, 583, 586, 291, 458, 11, 1392, 11, 286, 669, 516, 281, 643, 51410, 51410, 281, 360, 341, 1895, 578, 3662, 281, 652, 264, 958, 1823, 3571, 13, 400, 370, 291, 652, 264, 1319, 1858, 13, 400, 51698, 51698], "temperature": 0.0, "avg_logprob": -0.08338304488889632, "compression_ratio": 1.8717948717948718, "no_caption_prob": 1.9222870832891203e-05}, {"id": 149, "seek": 88384, "start": 894.5600000000001, "end": 900.6800000000001, "text": " skip the new test you were adding, or you come to comment it out, you stash it, whatever", "tokens": [50364, 309, 1062, 312, 11, 294, 1668, 281, 652, 341, 958, 1823, 3571, 11, 411, 341, 1823, 307, 516, 281, 312, 886, 50590, 50590, 955, 11, 5969, 286, 360, 257, 1895, 578, 3662, 1823, 700, 13, 400, 370, 382, 291, 382, 291, 10932, 484, 11, 291, 291, 50900, 50900, 10023, 264, 777, 1500, 291, 645, 5127, 11, 420, 291, 808, 281, 2871, 309, 484, 11, 291, 342, 1299, 309, 11, 2035, 51206, 51206, 291, 643, 281, 360, 281, 483, 646, 281, 257, 3092, 1785, 13, 583, 586, 291, 458, 11, 1392, 11, 286, 669, 516, 281, 643, 51410, 51410, 281, 360, 341, 1895, 578, 3662, 281, 652, 264, 958, 1823, 3571, 13, 400, 370, 291, 652, 264, 1319, 1858, 13, 400, 51698, 51698], "temperature": 0.0, "avg_logprob": -0.08338304488889632, "compression_ratio": 1.8717948717948718, "no_caption_prob": 1.9222870832891203e-05}, {"id": 150, "seek": 88384, "start": 900.6800000000001, "end": 904.76, "text": " you need to do to get back to a green state. But now you know, okay, I am going to need", "tokens": [50364, 309, 1062, 312, 11, 294, 1668, 281, 652, 341, 958, 1823, 3571, 11, 411, 341, 1823, 307, 516, 281, 312, 886, 50590, 50590, 955, 11, 5969, 286, 360, 257, 1895, 578, 3662, 1823, 700, 13, 400, 370, 382, 291, 382, 291, 10932, 484, 11, 291, 291, 50900, 50900, 10023, 264, 777, 1500, 291, 645, 5127, 11, 420, 291, 808, 281, 2871, 309, 484, 11, 291, 342, 1299, 309, 11, 2035, 51206, 51206, 291, 643, 281, 360, 281, 483, 646, 281, 257, 3092, 1785, 13, 583, 586, 291, 458, 11, 1392, 11, 286, 669, 516, 281, 643, 51410, 51410, 281, 360, 341, 1895, 578, 3662, 281, 652, 264, 958, 1823, 3571, 13, 400, 370, 291, 652, 264, 1319, 1858, 13, 400, 51698, 51698], "temperature": 0.0, "avg_logprob": -0.08338304488889632, "compression_ratio": 1.8717948717948718, "no_caption_prob": 1.9222870832891203e-05}, {"id": 151, "seek": 88384, "start": 904.76, "end": 910.52, "text": " to do this refactoring to make the next step easier. And so you make the change easy. And", "tokens": [50364, 309, 1062, 312, 11, 294, 1668, 281, 652, 341, 958, 1823, 3571, 11, 411, 341, 1823, 307, 516, 281, 312, 886, 50590, 50590, 955, 11, 5969, 286, 360, 257, 1895, 578, 3662, 1823, 700, 13, 400, 370, 382, 291, 382, 291, 10932, 484, 11, 291, 291, 50900, 50900, 10023, 264, 777, 1500, 291, 645, 5127, 11, 420, 291, 808, 281, 2871, 309, 484, 11, 291, 342, 1299, 309, 11, 2035, 51206, 51206, 291, 643, 281, 360, 281, 483, 646, 281, 257, 3092, 1785, 13, 583, 586, 291, 458, 11, 1392, 11, 286, 669, 516, 281, 643, 51410, 51410, 281, 360, 341, 1895, 578, 3662, 281, 652, 264, 958, 1823, 3571, 13, 400, 370, 291, 652, 264, 1319, 1858, 13, 400, 51698, 51698], "temperature": 0.0, "avg_logprob": -0.08338304488889632, "compression_ratio": 1.8717948717948718, "no_caption_prob": 1.9222870832891203e-05}, {"id": 152, "seek": 91052, "start": 910.52, "end": 915.9399999999999, "text": " then you make the easy change. So you want to do as much of the heavy lifting as possible", "tokens": [50364, 550, 291, 652, 264, 1858, 1319, 13, 407, 291, 528, 281, 360, 382, 709, 295, 264, 4676, 15798, 382, 1944, 50635, 50635, 382, 257, 992, 295, 1895, 578, 3662, 4439, 13, 407, 300, 562, 291, 652, 264, 5223, 1319, 11, 309, 311, 3116, 2199, 13, 50976, 50976, 400, 264, 3164, 1901, 337, 689, 257, 1154, 727, 1051, 307, 709, 4356, 13, 51213, 51213, 286, 478, 6369, 11, 360, 291, 5952, 412, 633, 1823, 420, 633, 1326, 4439, 30, 286, 2673, 360, 633, 1326, 457, 51494, 51494, 286, 500, 380, 458, 498, 300, 311, 264, 1151, 636, 281, 360, 309, 13, 51654, 51654], "temperature": 0.0, "avg_logprob": -0.12550160518059364, "compression_ratio": 1.6566523605150214, "no_caption_prob": 7.527942216256633e-06}, {"id": 153, "seek": 91052, "start": 915.9399999999999, "end": 922.76, "text": " as a set of refactoring steps. So that when you make the behavior change, it's dead simple.", "tokens": [50364, 550, 291, 652, 264, 1858, 1319, 13, 407, 291, 528, 281, 360, 382, 709, 295, 264, 4676, 15798, 382, 1944, 50635, 50635, 382, 257, 992, 295, 1895, 578, 3662, 4439, 13, 407, 300, 562, 291, 652, 264, 5223, 1319, 11, 309, 311, 3116, 2199, 13, 50976, 50976, 400, 264, 3164, 1901, 337, 689, 257, 1154, 727, 1051, 307, 709, 4356, 13, 51213, 51213, 286, 478, 6369, 11, 360, 291, 5952, 412, 633, 1823, 420, 633, 1326, 4439, 30, 286, 2673, 360, 633, 1326, 457, 51494, 51494, 286, 500, 380, 458, 498, 300, 311, 264, 1151, 636, 281, 360, 309, 13, 51654, 51654], "temperature": 0.0, "avg_logprob": -0.12550160518059364, "compression_ratio": 1.6566523605150214, "no_caption_prob": 7.527942216256633e-06}, {"id": 154, "seek": 91052, "start": 922.76, "end": 927.5, "text": " And the search space for where a problem could happen is much smaller.", "tokens": [50364, 550, 291, 652, 264, 1858, 1319, 13, 407, 291, 528, 281, 360, 382, 709, 295, 264, 4676, 15798, 382, 1944, 50635, 50635, 382, 257, 992, 295, 1895, 578, 3662, 4439, 13, 407, 300, 562, 291, 652, 264, 5223, 1319, 11, 309, 311, 3116, 2199, 13, 50976, 50976, 400, 264, 3164, 1901, 337, 689, 257, 1154, 727, 1051, 307, 709, 4356, 13, 51213, 51213, 286, 478, 6369, 11, 360, 291, 5952, 412, 633, 1823, 420, 633, 1326, 4439, 30, 286, 2673, 360, 633, 1326, 457, 51494, 51494, 286, 500, 380, 458, 498, 300, 311, 264, 1151, 636, 281, 360, 309, 13, 51654, 51654], "temperature": 0.0, "avg_logprob": -0.12550160518059364, "compression_ratio": 1.6566523605150214, "no_caption_prob": 7.527942216256633e-06}, {"id": 155, "seek": 91052, "start": 927.5, "end": 933.12, "text": " I'm curious, do you factor at every step or every few steps? I usually do every few but", "tokens": [50364, 550, 291, 652, 264, 1858, 1319, 13, 407, 291, 528, 281, 360, 382, 709, 295, 264, 4676, 15798, 382, 1944, 50635, 50635, 382, 257, 992, 295, 1895, 578, 3662, 4439, 13, 407, 300, 562, 291, 652, 264, 5223, 1319, 11, 309, 311, 3116, 2199, 13, 50976, 50976, 400, 264, 3164, 1901, 337, 689, 257, 1154, 727, 1051, 307, 709, 4356, 13, 51213, 51213, 286, 478, 6369, 11, 360, 291, 5952, 412, 633, 1823, 420, 633, 1326, 4439, 30, 286, 2673, 360, 633, 1326, 457, 51494, 51494, 286, 500, 380, 458, 498, 300, 311, 264, 1151, 636, 281, 360, 309, 13, 51654, 51654], "temperature": 0.0, "avg_logprob": -0.12550160518059364, "compression_ratio": 1.6566523605150214, "no_caption_prob": 7.527942216256633e-06}, {"id": 156, "seek": 91052, "start": 933.12, "end": 936.3199999999999, "text": " I don't know if that's the best way to do it.", "tokens": [50364, 550, 291, 652, 264, 1858, 1319, 13, 407, 291, 528, 281, 360, 382, 709, 295, 264, 4676, 15798, 382, 1944, 50635, 50635, 382, 257, 992, 295, 1895, 578, 3662, 4439, 13, 407, 300, 562, 291, 652, 264, 5223, 1319, 11, 309, 311, 3116, 2199, 13, 50976, 50976, 400, 264, 3164, 1901, 337, 689, 257, 1154, 727, 1051, 307, 709, 4356, 13, 51213, 51213, 286, 478, 6369, 11, 360, 291, 5952, 412, 633, 1823, 420, 633, 1326, 4439, 30, 286, 2673, 360, 633, 1326, 457, 51494, 51494, 286, 500, 380, 458, 498, 300, 311, 264, 1151, 636, 281, 360, 309, 13, 51654, 51654], "temperature": 0.0, "avg_logprob": -0.12550160518059364, "compression_ratio": 1.6566523605150214, "no_caption_prob": 7.527942216256633e-06}, {"id": 157, "seek": 93632, "start": 936.32, "end": 942.1600000000001, "text": " I think it totally depends the way I think about refactoring, which really, we could", "tokens": [50364, 286, 519, 309, 3879, 5946, 264, 636, 286, 519, 466, 1895, 578, 3662, 11, 597, 534, 11, 321, 727, 50656, 50656, 2138, 360, 2940, 9313, 445, 466, 300, 4829, 13, 400, 286, 478, 988, 321, 486, 13, 583, 264, 50995, 50995, 636, 286, 519, 466, 1895, 578, 3662, 307, 321, 434, 6460, 3760, 3089, 11, 321, 434, 3760, 3089, 544, 2049, 51214, 51214, 813, 321, 434, 3579, 3089, 13, 407, 291, 528, 309, 281, 312, 588, 28382, 281, 1401, 3089, 11, 570, 51552, 51552, 321, 360, 309, 2049, 13, 407, 321, 528, 281, 19719, 337, 3760, 3089, 11, 293, 337, 4473, 3089, 11, 558, 30, 51782, 51782], "temperature": 0.0, "avg_logprob": -0.07918648326068843, "compression_ratio": 1.8158995815899581, "no_caption_prob": 2.7107556888950057e-05}, {"id": 158, "seek": 93632, "start": 942.1600000000001, "end": 948.94, "text": " definitely do several episodes just about that topic. And I'm sure we will. But the", "tokens": [50364, 286, 519, 309, 3879, 5946, 264, 636, 286, 519, 466, 1895, 578, 3662, 11, 597, 534, 11, 321, 727, 50656, 50656, 2138, 360, 2940, 9313, 445, 466, 300, 4829, 13, 400, 286, 478, 988, 321, 486, 13, 583, 264, 50995, 50995, 636, 286, 519, 466, 1895, 578, 3662, 307, 321, 434, 6460, 3760, 3089, 11, 321, 434, 3760, 3089, 544, 2049, 51214, 51214, 813, 321, 434, 3579, 3089, 13, 407, 291, 528, 309, 281, 312, 588, 28382, 281, 1401, 3089, 11, 570, 51552, 51552, 321, 360, 309, 2049, 13, 407, 321, 528, 281, 19719, 337, 3760, 3089, 11, 293, 337, 4473, 3089, 11, 558, 30, 51782, 51782], "temperature": 0.0, "avg_logprob": -0.07918648326068843, "compression_ratio": 1.8158995815899581, "no_caption_prob": 2.7107556888950057e-05}, {"id": 159, "seek": 93632, "start": 948.94, "end": 953.32, "text": " way I think about refactoring is we're constantly reading code, we're reading code more often", "tokens": [50364, 286, 519, 309, 3879, 5946, 264, 636, 286, 519, 466, 1895, 578, 3662, 11, 597, 534, 11, 321, 727, 50656, 50656, 2138, 360, 2940, 9313, 445, 466, 300, 4829, 13, 400, 286, 478, 988, 321, 486, 13, 583, 264, 50995, 50995, 636, 286, 519, 466, 1895, 578, 3662, 307, 321, 434, 6460, 3760, 3089, 11, 321, 434, 3760, 3089, 544, 2049, 51214, 51214, 813, 321, 434, 3579, 3089, 13, 407, 291, 528, 309, 281, 312, 588, 28382, 281, 1401, 3089, 11, 570, 51552, 51552, 321, 360, 309, 2049, 13, 407, 321, 528, 281, 19719, 337, 3760, 3089, 11, 293, 337, 4473, 3089, 11, 558, 30, 51782, 51782], "temperature": 0.0, "avg_logprob": -0.07918648326068843, "compression_ratio": 1.8158995815899581, "no_caption_prob": 2.7107556888950057e-05}, {"id": 160, "seek": 93632, "start": 953.32, "end": 960.08, "text": " than we're writing code. So you want it to be very inexpensive to read code, because", "tokens": [50364, 286, 519, 309, 3879, 5946, 264, 636, 286, 519, 466, 1895, 578, 3662, 11, 597, 534, 11, 321, 727, 50656, 50656, 2138, 360, 2940, 9313, 445, 466, 300, 4829, 13, 400, 286, 478, 988, 321, 486, 13, 583, 264, 50995, 50995, 636, 286, 519, 466, 1895, 578, 3662, 307, 321, 434, 6460, 3760, 3089, 11, 321, 434, 3760, 3089, 544, 2049, 51214, 51214, 813, 321, 434, 3579, 3089, 13, 407, 291, 528, 309, 281, 312, 588, 28382, 281, 1401, 3089, 11, 570, 51552, 51552, 321, 360, 309, 2049, 13, 407, 321, 528, 281, 19719, 337, 3760, 3089, 11, 293, 337, 4473, 3089, 11, 558, 30, 51782, 51782], "temperature": 0.0, "avg_logprob": -0.07918648326068843, "compression_ratio": 1.8158995815899581, "no_caption_prob": 2.7107556888950057e-05}, {"id": 161, "seek": 93632, "start": 960.08, "end": 964.6800000000001, "text": " we do it often. So we want to optimize for reading code, and for changing code, right?", "tokens": [50364, 286, 519, 309, 3879, 5946, 264, 636, 286, 519, 466, 1895, 578, 3662, 11, 597, 534, 11, 321, 727, 50656, 50656, 2138, 360, 2940, 9313, 445, 466, 300, 4829, 13, 400, 286, 478, 988, 321, 486, 13, 583, 264, 50995, 50995, 636, 286, 519, 466, 1895, 578, 3662, 307, 321, 434, 6460, 3760, 3089, 11, 321, 434, 3760, 3089, 544, 2049, 51214, 51214, 813, 321, 434, 3579, 3089, 13, 407, 291, 528, 309, 281, 312, 588, 28382, 281, 1401, 3089, 11, 570, 51552, 51552, 321, 360, 309, 2049, 13, 407, 321, 528, 281, 19719, 337, 3760, 3089, 11, 293, 337, 4473, 3089, 11, 558, 30, 51782, 51782], "temperature": 0.0, "avg_logprob": -0.07918648326068843, "compression_ratio": 1.8158995815899581, "no_caption_prob": 2.7107556888950057e-05}, {"id": 162, "seek": 96468, "start": 964.68, "end": 971.64, "text": " Those are if we if you can make reading and changing code extremely inexpensive and efficient,", "tokens": [50364, 3950, 366, 498, 321, 498, 291, 393, 652, 3760, 293, 4473, 3089, 4664, 28382, 293, 7148, 11, 50712, 50712, 550, 291, 434, 516, 281, 362, 257, 665, 3089, 3096, 281, 589, 365, 428, 291, 458, 11, 291, 434, 294, 665, 50900, 50900, 3909, 13, 407, 1895, 578, 3662, 3665, 291, 360, 300, 13, 583, 382, 291, 1401, 264, 3089, 11, 291, 722, 281, 1223, 51290, 51290, 721, 466, 264, 3089, 11, 291, 722, 281, 536, 1629, 8294, 11, 291, 722, 281, 4325, 411, 11, 1392, 11, 51532, 51532, 341, 7006, 307, 1219, 12989, 16381, 13, 583, 534, 11, 341, 307, 411, 264, 51782, 51782], "temperature": 0.0, "avg_logprob": -0.11002999431682083, "compression_ratio": 1.7398373983739837, "no_caption_prob": 3.480675513856113e-05}, {"id": 163, "seek": 96468, "start": 971.64, "end": 975.4, "text": " then you're going to have a good code base to work with your you know, you're in good", "tokens": [50364, 3950, 366, 498, 321, 498, 291, 393, 652, 3760, 293, 4473, 3089, 4664, 28382, 293, 7148, 11, 50712, 50712, 550, 291, 434, 516, 281, 362, 257, 665, 3089, 3096, 281, 589, 365, 428, 291, 458, 11, 291, 434, 294, 665, 50900, 50900, 3909, 13, 407, 1895, 578, 3662, 3665, 291, 360, 300, 13, 583, 382, 291, 1401, 264, 3089, 11, 291, 722, 281, 1223, 51290, 51290, 721, 466, 264, 3089, 11, 291, 722, 281, 536, 1629, 8294, 11, 291, 722, 281, 4325, 411, 11, 1392, 11, 51532, 51532, 341, 7006, 307, 1219, 12989, 16381, 13, 583, 534, 11, 341, 307, 411, 264, 51782, 51782], "temperature": 0.0, "avg_logprob": -0.11002999431682083, "compression_ratio": 1.7398373983739837, "no_caption_prob": 3.480675513856113e-05}, {"id": 164, "seek": 96468, "start": 975.4, "end": 983.1999999999999, "text": " shape. So refactoring helps you do that. But as you read the code, you start to understand", "tokens": [50364, 3950, 366, 498, 321, 498, 291, 393, 652, 3760, 293, 4473, 3089, 4664, 28382, 293, 7148, 11, 50712, 50712, 550, 291, 434, 516, 281, 362, 257, 665, 3089, 3096, 281, 589, 365, 428, 291, 458, 11, 291, 434, 294, 665, 50900, 50900, 3909, 13, 407, 1895, 578, 3662, 3665, 291, 360, 300, 13, 583, 382, 291, 1401, 264, 3089, 11, 291, 722, 281, 1223, 51290, 51290, 721, 466, 264, 3089, 11, 291, 722, 281, 536, 1629, 8294, 11, 291, 722, 281, 4325, 411, 11, 1392, 11, 51532, 51532, 341, 7006, 307, 1219, 12989, 16381, 13, 583, 534, 11, 341, 307, 411, 264, 51782, 51782], "temperature": 0.0, "avg_logprob": -0.11002999431682083, "compression_ratio": 1.7398373983739837, "no_caption_prob": 3.480675513856113e-05}, {"id": 165, "seek": 96468, "start": 983.1999999999999, "end": 988.04, "text": " things about the code, you start to see certain patterns, you start to realize like, okay,", "tokens": [50364, 3950, 366, 498, 321, 498, 291, 393, 652, 3760, 293, 4473, 3089, 4664, 28382, 293, 7148, 11, 50712, 50712, 550, 291, 434, 516, 281, 362, 257, 665, 3089, 3096, 281, 589, 365, 428, 291, 458, 11, 291, 434, 294, 665, 50900, 50900, 3909, 13, 407, 1895, 578, 3662, 3665, 291, 360, 300, 13, 583, 382, 291, 1401, 264, 3089, 11, 291, 722, 281, 1223, 51290, 51290, 721, 466, 264, 3089, 11, 291, 722, 281, 536, 1629, 8294, 11, 291, 722, 281, 4325, 411, 11, 1392, 11, 51532, 51532, 341, 7006, 307, 1219, 12989, 16381, 13, 583, 534, 11, 341, 307, 411, 264, 51782, 51782], "temperature": 0.0, "avg_logprob": -0.11002999431682083, "compression_ratio": 1.7398373983739837, "no_caption_prob": 3.480675513856113e-05}, {"id": 166, "seek": 96468, "start": 988.04, "end": 993.04, "text": " this variable is called accumulator. But really, this is like the", "tokens": [50364, 3950, 366, 498, 321, 498, 291, 393, 652, 3760, 293, 4473, 3089, 4664, 28382, 293, 7148, 11, 50712, 50712, 550, 291, 434, 516, 281, 362, 257, 665, 3089, 3096, 281, 589, 365, 428, 291, 458, 11, 291, 434, 294, 665, 50900, 50900, 3909, 13, 407, 1895, 578, 3662, 3665, 291, 360, 300, 13, 583, 382, 291, 1401, 264, 3089, 11, 291, 722, 281, 1223, 51290, 51290, 721, 466, 264, 3089, 11, 291, 722, 281, 536, 1629, 8294, 11, 291, 722, 281, 4325, 411, 11, 1392, 11, 51532, 51532, 341, 7006, 307, 1219, 12989, 16381, 13, 583, 534, 11, 341, 307, 411, 264, 51782, 51782], "temperature": 0.0, "avg_logprob": -0.11002999431682083, "compression_ratio": 1.7398373983739837, "no_caption_prob": 3.480675513856113e-05}, {"id": 167, "seek": 99304, "start": 993.04, "end": 999.56, "text": " concatenation of a list of strings. Yeah, this is like the the admin users. That's", "tokens": [50364, 1588, 7186, 399, 295, 257, 1329, 295, 13985, 13, 865, 11, 341, 307, 411, 264, 264, 24236, 5022, 13, 663, 311, 50690, 50690, 534, 437, 341, 12989, 16381, 8855, 13, 407, 291, 434, 3760, 264, 291, 458, 11, 291, 434, 3760, 50905, 50905, 807, 428, 3089, 11, 293, 291, 536, 512, 7006, 293, 293, 291, 434, 411, 11, 437, 307, 341, 884, 11, 558, 30, 51148, 51148, 1436, 300, 311, 437, 2314, 562, 291, 434, 3760, 3089, 13, 509, 434, 411, 11, 286, 643, 281, 909, 341, 4111, 13, 51363, 51363, 708, 264, 12872, 307, 341, 884, 30, 509, 1401, 309, 11, 291, 1333, 295, 1223, 309, 13, 400, 550, 562, 291, 51639, 51639], "temperature": 0.0, "avg_logprob": -0.10792331859983247, "compression_ratio": 1.78, "no_caption_prob": 1.3211248187872116e-05}, {"id": 168, "seek": 99304, "start": 999.56, "end": 1003.86, "text": " really what this accumulator represents. So you're reading the you know, you're reading", "tokens": [50364, 1588, 7186, 399, 295, 257, 1329, 295, 13985, 13, 865, 11, 341, 307, 411, 264, 264, 24236, 5022, 13, 663, 311, 50690, 50690, 534, 437, 341, 12989, 16381, 8855, 13, 407, 291, 434, 3760, 264, 291, 458, 11, 291, 434, 3760, 50905, 50905, 807, 428, 3089, 11, 293, 291, 536, 512, 7006, 293, 293, 291, 434, 411, 11, 437, 307, 341, 884, 11, 558, 30, 51148, 51148, 1436, 300, 311, 437, 2314, 562, 291, 434, 3760, 3089, 13, 509, 434, 411, 11, 286, 643, 281, 909, 341, 4111, 13, 51363, 51363, 708, 264, 12872, 307, 341, 884, 30, 509, 1401, 309, 11, 291, 1333, 295, 1223, 309, 13, 400, 550, 562, 291, 51639, 51639], "temperature": 0.0, "avg_logprob": -0.10792331859983247, "compression_ratio": 1.78, "no_caption_prob": 1.3211248187872116e-05}, {"id": 169, "seek": 99304, "start": 1003.86, "end": 1008.7199999999999, "text": " through your code, and you see some variable and and you're like, what is this doing, right?", "tokens": [50364, 1588, 7186, 399, 295, 257, 1329, 295, 13985, 13, 865, 11, 341, 307, 411, 264, 264, 24236, 5022, 13, 663, 311, 50690, 50690, 534, 437, 341, 12989, 16381, 8855, 13, 407, 291, 434, 3760, 264, 291, 458, 11, 291, 434, 3760, 50905, 50905, 807, 428, 3089, 11, 293, 291, 536, 512, 7006, 293, 293, 291, 434, 411, 11, 437, 307, 341, 884, 11, 558, 30, 51148, 51148, 1436, 300, 311, 437, 2314, 562, 291, 434, 3760, 3089, 13, 509, 434, 411, 11, 286, 643, 281, 909, 341, 4111, 13, 51363, 51363, 708, 264, 12872, 307, 341, 884, 30, 509, 1401, 309, 11, 291, 1333, 295, 1223, 309, 13, 400, 550, 562, 291, 51639, 51639], "temperature": 0.0, "avg_logprob": -0.10792331859983247, "compression_ratio": 1.78, "no_caption_prob": 1.3211248187872116e-05}, {"id": 170, "seek": 99304, "start": 1008.7199999999999, "end": 1013.02, "text": " Because that's what happens when you're reading code. You're like, I need to add this feature.", "tokens": [50364, 1588, 7186, 399, 295, 257, 1329, 295, 13985, 13, 865, 11, 341, 307, 411, 264, 264, 24236, 5022, 13, 663, 311, 50690, 50690, 534, 437, 341, 12989, 16381, 8855, 13, 407, 291, 434, 3760, 264, 291, 458, 11, 291, 434, 3760, 50905, 50905, 807, 428, 3089, 11, 293, 291, 536, 512, 7006, 293, 293, 291, 434, 411, 11, 437, 307, 341, 884, 11, 558, 30, 51148, 51148, 1436, 300, 311, 437, 2314, 562, 291, 434, 3760, 3089, 13, 509, 434, 411, 11, 286, 643, 281, 909, 341, 4111, 13, 51363, 51363, 708, 264, 12872, 307, 341, 884, 30, 509, 1401, 309, 11, 291, 1333, 295, 1223, 309, 13, 400, 550, 562, 291, 51639, 51639], "temperature": 0.0, "avg_logprob": -0.10792331859983247, "compression_ratio": 1.78, "no_caption_prob": 1.3211248187872116e-05}, {"id": 171, "seek": 99304, "start": 1013.02, "end": 1018.54, "text": " What the heck is this doing? You read it, you sort of understand it. And then when you", "tokens": [50364, 1588, 7186, 399, 295, 257, 1329, 295, 13985, 13, 865, 11, 341, 307, 411, 264, 264, 24236, 5022, 13, 663, 311, 50690, 50690, 534, 437, 341, 12989, 16381, 8855, 13, 407, 291, 434, 3760, 264, 291, 458, 11, 291, 434, 3760, 50905, 50905, 807, 428, 3089, 11, 293, 291, 536, 512, 7006, 293, 293, 291, 434, 411, 11, 437, 307, 341, 884, 11, 558, 30, 51148, 51148, 1436, 300, 311, 437, 2314, 562, 291, 434, 3760, 3089, 13, 509, 434, 411, 11, 286, 643, 281, 909, 341, 4111, 13, 51363, 51363, 708, 264, 12872, 307, 341, 884, 30, 509, 1401, 309, 11, 291, 1333, 295, 1223, 309, 13, 400, 550, 562, 291, 51639, 51639], "temperature": 0.0, "avg_logprob": -0.10792331859983247, "compression_ratio": 1.78, "no_caption_prob": 1.3211248187872116e-05}, {"id": 172, "seek": 101854, "start": 1018.54, "end": 1024.04, "text": " have that insight refactor. So that's one cue you can use to refactor is when you start", "tokens": [50364, 362, 300, 11269, 1895, 15104, 13, 407, 300, 311, 472, 22656, 291, 393, 764, 281, 1895, 15104, 307, 562, 291, 722, 50639, 50639, 281, 1223, 746, 11, 747, 300, 3701, 484, 295, 428, 1378, 293, 829, 309, 646, 294, 264, 3089, 13, 50875, 50875, 400, 586, 264, 958, 565, 291, 420, 1580, 1646, 307, 3760, 300, 3089, 11, 436, 500, 380, 362, 281, 360, 51061, 51061, 300, 2857, 1823, 295, 9007, 309, 294, 641, 3567, 281, 483, 264, 3701, 309, 311, 544, 26336, 51291, 51291, 2435, 420, 2171, 300, 3701, 1062, 406, 312, 411, 257, 7006, 1315, 11, 457, 309, 51495, 51495, 1062, 312, 49844, 257, 1729, 2445, 300, 300, 8855, 512, 6916, 11, 291, 458, 11, 51783, 51783], "temperature": 0.0, "avg_logprob": -0.07980077916925604, "compression_ratio": 1.853658536585366, "no_caption_prob": 3.32129820890259e-05}, {"id": 173, "seek": 101854, "start": 1024.04, "end": 1028.76, "text": " to understand something, take that understanding out of your head and put it back in the code.", "tokens": [50364, 362, 300, 11269, 1895, 15104, 13, 407, 300, 311, 472, 22656, 291, 393, 764, 281, 1895, 15104, 307, 562, 291, 722, 50639, 50639, 281, 1223, 746, 11, 747, 300, 3701, 484, 295, 428, 1378, 293, 829, 309, 646, 294, 264, 3089, 13, 50875, 50875, 400, 586, 264, 958, 565, 291, 420, 1580, 1646, 307, 3760, 300, 3089, 11, 436, 500, 380, 362, 281, 360, 51061, 51061, 300, 2857, 1823, 295, 9007, 309, 294, 641, 3567, 281, 483, 264, 3701, 309, 311, 544, 26336, 51291, 51291, 2435, 420, 2171, 300, 3701, 1062, 406, 312, 411, 257, 7006, 1315, 11, 457, 309, 51495, 51495, 1062, 312, 49844, 257, 1729, 2445, 300, 300, 8855, 512, 6916, 11, 291, 458, 11, 51783, 51783], "temperature": 0.0, "avg_logprob": -0.07980077916925604, "compression_ratio": 1.853658536585366, "no_caption_prob": 3.32129820890259e-05}, {"id": 174, "seek": 101854, "start": 1028.76, "end": 1032.48, "text": " And now the next time you or someone else is reading that code, they don't have to do", "tokens": [50364, 362, 300, 11269, 1895, 15104, 13, 407, 300, 311, 472, 22656, 291, 393, 764, 281, 1895, 15104, 307, 562, 291, 722, 50639, 50639, 281, 1223, 746, 11, 747, 300, 3701, 484, 295, 428, 1378, 293, 829, 309, 646, 294, 264, 3089, 13, 50875, 50875, 400, 586, 264, 958, 565, 291, 420, 1580, 1646, 307, 3760, 300, 3089, 11, 436, 500, 380, 362, 281, 360, 51061, 51061, 300, 2857, 1823, 295, 9007, 309, 294, 641, 3567, 281, 483, 264, 3701, 309, 311, 544, 26336, 51291, 51291, 2435, 420, 2171, 300, 3701, 1062, 406, 312, 411, 257, 7006, 1315, 11, 457, 309, 51495, 51495, 1062, 312, 49844, 257, 1729, 2445, 300, 300, 8855, 512, 6916, 11, 291, 458, 11, 51783, 51783], "temperature": 0.0, "avg_logprob": -0.07980077916925604, "compression_ratio": 1.853658536585366, "no_caption_prob": 3.32129820890259e-05}, {"id": 175, "seek": 101854, "start": 1032.48, "end": 1037.08, "text": " that extra step of processing it in their brain to get the understanding it's more readily", "tokens": [50364, 362, 300, 11269, 1895, 15104, 13, 407, 300, 311, 472, 22656, 291, 393, 764, 281, 1895, 15104, 307, 562, 291, 722, 50639, 50639, 281, 1223, 746, 11, 747, 300, 3701, 484, 295, 428, 1378, 293, 829, 309, 646, 294, 264, 3089, 13, 50875, 50875, 400, 586, 264, 958, 565, 291, 420, 1580, 1646, 307, 3760, 300, 3089, 11, 436, 500, 380, 362, 281, 360, 51061, 51061, 300, 2857, 1823, 295, 9007, 309, 294, 641, 3567, 281, 483, 264, 3701, 309, 311, 544, 26336, 51291, 51291, 2435, 420, 2171, 300, 3701, 1062, 406, 312, 411, 257, 7006, 1315, 11, 457, 309, 51495, 51495, 1062, 312, 49844, 257, 1729, 2445, 300, 300, 8855, 512, 6916, 11, 291, 458, 11, 51783, 51783], "temperature": 0.0, "avg_logprob": -0.07980077916925604, "compression_ratio": 1.853658536585366, "no_caption_prob": 3.32129820890259e-05}, {"id": 176, "seek": 101854, "start": 1037.08, "end": 1041.1599999999999, "text": " available or sometimes that understanding might not be like a variable name, but it", "tokens": [50364, 362, 300, 11269, 1895, 15104, 13, 407, 300, 311, 472, 22656, 291, 393, 764, 281, 1895, 15104, 307, 562, 291, 722, 50639, 50639, 281, 1223, 746, 11, 747, 300, 3701, 484, 295, 428, 1378, 293, 829, 309, 646, 294, 264, 3089, 13, 50875, 50875, 400, 586, 264, 958, 565, 291, 420, 1580, 1646, 307, 3760, 300, 3089, 11, 436, 500, 380, 362, 281, 360, 51061, 51061, 300, 2857, 1823, 295, 9007, 309, 294, 641, 3567, 281, 483, 264, 3701, 309, 311, 544, 26336, 51291, 51291, 2435, 420, 2171, 300, 3701, 1062, 406, 312, 411, 257, 7006, 1315, 11, 457, 309, 51495, 51495, 1062, 312, 49844, 257, 1729, 2445, 300, 300, 8855, 512, 6916, 11, 291, 458, 11, 51783, 51783], "temperature": 0.0, "avg_logprob": -0.07980077916925604, "compression_ratio": 1.853658536585366, "no_caption_prob": 3.32129820890259e-05}, {"id": 177, "seek": 101854, "start": 1041.1599999999999, "end": 1046.92, "text": " might be extracting a particular function that that represents some operation, you know,", "tokens": [50364, 362, 300, 11269, 1895, 15104, 13, 407, 300, 311, 472, 22656, 291, 393, 764, 281, 1895, 15104, 307, 562, 291, 722, 50639, 50639, 281, 1223, 746, 11, 747, 300, 3701, 484, 295, 428, 1378, 293, 829, 309, 646, 294, 264, 3089, 13, 50875, 50875, 400, 586, 264, 958, 565, 291, 420, 1580, 1646, 307, 3760, 300, 3089, 11, 436, 500, 380, 362, 281, 360, 51061, 51061, 300, 2857, 1823, 295, 9007, 309, 294, 641, 3567, 281, 483, 264, 3701, 309, 311, 544, 26336, 51291, 51291, 2435, 420, 2171, 300, 3701, 1062, 406, 312, 411, 257, 7006, 1315, 11, 457, 309, 51495, 51495, 1062, 312, 49844, 257, 1729, 2445, 300, 300, 8855, 512, 6916, 11, 291, 458, 11, 51783, 51783], "temperature": 0.0, "avg_logprob": -0.07980077916925604, "compression_ratio": 1.853658536585366, "no_caption_prob": 3.32129820890259e-05}, {"id": 178, "seek": 104692, "start": 1046.92, "end": 1052.2, "text": " grouping something together, having something in a certain module. But I find that helpful", "tokens": [50364, 40149, 746, 1214, 11, 1419, 746, 294, 257, 1629, 10088, 13, 583, 286, 915, 300, 4961, 50628, 50628, 281, 519, 466, 382, 291, 434, 3760, 3089, 11, 445, 1895, 15104, 746, 498, 291, 536, 746, 300, 50878, 50878, 393, 1319, 11, 445, 360, 309, 13, 400, 286, 519, 561, 2171, 519, 466, 1895, 578, 3662, 382, 746, 51138, 51138, 300, 291, 747, 257, 1618, 322, 257, 9819, 11, 293, 445, 360, 257, 7410, 28132, 13, 400, 300, 311, 411, 257, 688, 51424, 51424, 295, 561, 311, 10710, 295, 1895, 578, 3662, 13, 400, 300, 311, 1219, 4266, 13, 583, 562, 439, 264, 7734, 51774, 51774], "temperature": 0.0, "avg_logprob": -0.10524759559987862, "compression_ratio": 1.88135593220339, "no_caption_prob": 8.219819574151188e-05}, {"id": 179, "seek": 104692, "start": 1052.2, "end": 1057.2, "text": " to think about as you're reading code, just refactor something if you see something that", "tokens": [50364, 40149, 746, 1214, 11, 1419, 746, 294, 257, 1629, 10088, 13, 583, 286, 915, 300, 4961, 50628, 50628, 281, 519, 466, 382, 291, 434, 3760, 3089, 11, 445, 1895, 15104, 746, 498, 291, 536, 746, 300, 50878, 50878, 393, 1319, 11, 445, 360, 309, 13, 400, 286, 519, 561, 2171, 519, 466, 1895, 578, 3662, 382, 746, 51138, 51138, 300, 291, 747, 257, 1618, 322, 257, 9819, 11, 293, 445, 360, 257, 7410, 28132, 13, 400, 300, 311, 411, 257, 688, 51424, 51424, 295, 561, 311, 10710, 295, 1895, 578, 3662, 13, 400, 300, 311, 1219, 4266, 13, 583, 562, 439, 264, 7734, 51774, 51774], "temperature": 0.0, "avg_logprob": -0.10524759559987862, "compression_ratio": 1.88135593220339, "no_caption_prob": 8.219819574151188e-05}, {"id": 180, "seek": 104692, "start": 1057.2, "end": 1062.4, "text": " can change, just do it. And I think people sometimes think about refactoring as something", "tokens": [50364, 40149, 746, 1214, 11, 1419, 746, 294, 257, 1629, 10088, 13, 583, 286, 915, 300, 4961, 50628, 50628, 281, 519, 466, 382, 291, 434, 3760, 3089, 11, 445, 1895, 15104, 746, 498, 291, 536, 746, 300, 50878, 50878, 393, 1319, 11, 445, 360, 309, 13, 400, 286, 519, 561, 2171, 519, 466, 1895, 578, 3662, 382, 746, 51138, 51138, 300, 291, 747, 257, 1618, 322, 257, 9819, 11, 293, 445, 360, 257, 7410, 28132, 13, 400, 300, 311, 411, 257, 688, 51424, 51424, 295, 561, 311, 10710, 295, 1895, 578, 3662, 13, 400, 300, 311, 1219, 4266, 13, 583, 562, 439, 264, 7734, 51774, 51774], "temperature": 0.0, "avg_logprob": -0.10524759559987862, "compression_ratio": 1.88135593220339, "no_caption_prob": 8.219819574151188e-05}, {"id": 181, "seek": 104692, "start": 1062.4, "end": 1068.1200000000001, "text": " that you take a month on a branch, and just do a giant rewrite. And that's like a lot", "tokens": [50364, 40149, 746, 1214, 11, 1419, 746, 294, 257, 1629, 10088, 13, 583, 286, 915, 300, 4961, 50628, 50628, 281, 519, 466, 382, 291, 434, 3760, 3089, 11, 445, 1895, 15104, 746, 498, 291, 536, 746, 300, 50878, 50878, 393, 1319, 11, 445, 360, 309, 13, 400, 286, 519, 561, 2171, 519, 466, 1895, 578, 3662, 382, 746, 51138, 51138, 300, 291, 747, 257, 1618, 322, 257, 9819, 11, 293, 445, 360, 257, 7410, 28132, 13, 400, 300, 311, 411, 257, 688, 51424, 51424, 295, 561, 311, 10710, 295, 1895, 578, 3662, 13, 400, 300, 311, 1219, 4266, 13, 583, 562, 439, 264, 7734, 51774, 51774], "temperature": 0.0, "avg_logprob": -0.10524759559987862, "compression_ratio": 1.88135593220339, "no_caption_prob": 8.219819574151188e-05}, {"id": 182, "seek": 104692, "start": 1068.1200000000001, "end": 1075.1200000000001, "text": " of people's notion of refactoring. And that's called summer. But when all the colleagues", "tokens": [50364, 40149, 746, 1214, 11, 1419, 746, 294, 257, 1629, 10088, 13, 583, 286, 915, 300, 4961, 50628, 50628, 281, 519, 466, 382, 291, 434, 3760, 3089, 11, 445, 1895, 15104, 746, 498, 291, 536, 746, 300, 50878, 50878, 393, 1319, 11, 445, 360, 309, 13, 400, 286, 519, 561, 2171, 519, 466, 1895, 578, 3662, 382, 746, 51138, 51138, 300, 291, 747, 257, 1618, 322, 257, 9819, 11, 293, 445, 360, 257, 7410, 28132, 13, 400, 300, 311, 411, 257, 688, 51424, 51424, 295, 561, 311, 10710, 295, 1895, 578, 3662, 13, 400, 300, 311, 1219, 4266, 13, 583, 562, 439, 264, 7734, 51774, 51774], "temperature": 0.0, "avg_logprob": -0.10524759559987862, "compression_ratio": 1.88135593220339, "no_caption_prob": 8.219819574151188e-05}, {"id": 183, "seek": 107512, "start": 1075.12, "end": 1078.9199999999998, "text": " are on vacation, go refactor.", "tokens": [50364, 366, 322, 12830, 11, 352, 1895, 15104, 13, 50554, 50554, 400, 286, 914, 11, 309, 311, 472, 551, 281, 411, 30718, 257, 2416, 16635, 295, 565, 281, 1895, 578, 3662, 11, 457, 50836, 50836, 309, 311, 1071, 551, 281, 445, 483, 411, 445, 360, 257, 7410, 1823, 293, 291, 528, 281, 1821, 309, 760, 51124, 51124, 666, 257, 688, 295, 5870, 4439, 1968, 420, 406, 291, 3496, 257, 938, 565, 1895, 578, 3662, 13, 400, 611, 411, 11, 51400, 51400, 1338, 11, 370, 4033, 11, 286, 914, 11, 286, 411, 281, 1066, 2059, 3245, 466, 1455, 5870, 2962, 689, 456, 311, 51784, 51784], "temperature": 0.0, "avg_logprob": -0.16044373285202754, "compression_ratio": 1.6929824561403508, "no_caption_prob": 1.4285276847658679e-05}, {"id": 184, "seek": 107512, "start": 1078.9199999999998, "end": 1084.56, "text": " And I mean, it's one thing to like dedicate a large chunk of time to refactoring, but", "tokens": [50364, 366, 322, 12830, 11, 352, 1895, 15104, 13, 50554, 50554, 400, 286, 914, 11, 309, 311, 472, 551, 281, 411, 30718, 257, 2416, 16635, 295, 565, 281, 1895, 578, 3662, 11, 457, 50836, 50836, 309, 311, 1071, 551, 281, 445, 483, 411, 445, 360, 257, 7410, 1823, 293, 291, 528, 281, 1821, 309, 760, 51124, 51124, 666, 257, 688, 295, 5870, 4439, 1968, 420, 406, 291, 3496, 257, 938, 565, 1895, 578, 3662, 13, 400, 611, 411, 11, 51400, 51400, 1338, 11, 370, 4033, 11, 286, 914, 11, 286, 411, 281, 1066, 2059, 3245, 466, 1455, 5870, 2962, 689, 456, 311, 51784, 51784], "temperature": 0.0, "avg_logprob": -0.16044373285202754, "compression_ratio": 1.6929824561403508, "no_caption_prob": 1.4285276847658679e-05}, {"id": 185, "seek": 107512, "start": 1084.56, "end": 1090.32, "text": " it's another thing to just get like just do a giant step and you want to break it down", "tokens": [50364, 366, 322, 12830, 11, 352, 1895, 15104, 13, 50554, 50554, 400, 286, 914, 11, 309, 311, 472, 551, 281, 411, 30718, 257, 2416, 16635, 295, 565, 281, 1895, 578, 3662, 11, 457, 50836, 50836, 309, 311, 1071, 551, 281, 445, 483, 411, 445, 360, 257, 7410, 1823, 293, 291, 528, 281, 1821, 309, 760, 51124, 51124, 666, 257, 688, 295, 5870, 4439, 1968, 420, 406, 291, 3496, 257, 938, 565, 1895, 578, 3662, 13, 400, 611, 411, 11, 51400, 51400, 1338, 11, 370, 4033, 11, 286, 914, 11, 286, 411, 281, 1066, 2059, 3245, 466, 1455, 5870, 2962, 689, 456, 311, 51784, 51784], "temperature": 0.0, "avg_logprob": -0.16044373285202754, "compression_ratio": 1.6929824561403508, "no_caption_prob": 1.4285276847658679e-05}, {"id": 186, "seek": 107512, "start": 1090.32, "end": 1095.84, "text": " into a lot of tiny steps whether or not you spend a long time refactoring. And also like,", "tokens": [50364, 366, 322, 12830, 11, 352, 1895, 15104, 13, 50554, 50554, 400, 286, 914, 11, 309, 311, 472, 551, 281, 411, 30718, 257, 2416, 16635, 295, 565, 281, 1895, 578, 3662, 11, 457, 50836, 50836, 309, 311, 1071, 551, 281, 445, 483, 411, 445, 360, 257, 7410, 1823, 293, 291, 528, 281, 1821, 309, 760, 51124, 51124, 666, 257, 688, 295, 5870, 4439, 1968, 420, 406, 291, 3496, 257, 938, 565, 1895, 578, 3662, 13, 400, 611, 411, 11, 51400, 51400, 1338, 11, 370, 4033, 11, 286, 914, 11, 286, 411, 281, 1066, 2059, 3245, 466, 1455, 5870, 2962, 689, 456, 311, 51784, 51784], "temperature": 0.0, "avg_logprob": -0.16044373285202754, "compression_ratio": 1.6929824561403508, "no_caption_prob": 1.4285276847658679e-05}, {"id": 187, "seek": 107512, "start": 1095.84, "end": 1103.52, "text": " yeah, so anyway, I mean, I like to keep myself honest about making tiny changes where there's", "tokens": [50364, 366, 322, 12830, 11, 352, 1895, 15104, 13, 50554, 50554, 400, 286, 914, 11, 309, 311, 472, 551, 281, 411, 30718, 257, 2416, 16635, 295, 565, 281, 1895, 578, 3662, 11, 457, 50836, 50836, 309, 311, 1071, 551, 281, 445, 483, 411, 445, 360, 257, 7410, 1823, 293, 291, 528, 281, 1821, 309, 760, 51124, 51124, 666, 257, 688, 295, 5870, 4439, 1968, 420, 406, 291, 3496, 257, 938, 565, 1895, 578, 3662, 13, 400, 611, 411, 11, 51400, 51400, 1338, 11, 370, 4033, 11, 286, 914, 11, 286, 411, 281, 1066, 2059, 3245, 466, 1455, 5870, 2962, 689, 456, 311, 51784, 51784], "temperature": 0.0, "avg_logprob": -0.16044373285202754, "compression_ratio": 1.6929824561403508, "no_caption_prob": 1.4285276847658679e-05}, {"id": 188, "seek": 110352, "start": 1103.52, "end": 1108.76, "text": " almost zero risk that I've changed behavior unintentionally.", "tokens": [50364, 1920, 4018, 3148, 300, 286, 600, 3105, 5223, 45514, 379, 13, 50626, 50626, 1485, 551, 286, 576, 411, 281, 935, 484, 420, 281, 16078, 322, 307, 1830, 428, 1895, 15104, 11, 291, 50940, 50940, 820, 406, 1406, 777, 3331, 13, 407, 498, 746, 2203, 293, 17037, 257, 1500, 3720, 337, 309, 11, 51438, 51438, 293, 1177, 380, 589, 412, 264, 1623, 11, 293, 1895, 578, 3662, 264, 636, 291, 360, 309, 1669, 257, 1500, 1320, 11, 550, 51800, 51800], "temperature": 0.0, "avg_logprob": -0.10399104930736401, "compression_ratio": 1.5555555555555556, "no_caption_prob": 1.644203075557016e-05}, {"id": 189, "seek": 110352, "start": 1108.76, "end": 1115.04, "text": " One thing I would like to point out or to emphasize on is during your refactor, you", "tokens": [50364, 1920, 4018, 3148, 300, 286, 600, 3105, 5223, 45514, 379, 13, 50626, 50626, 1485, 551, 286, 576, 411, 281, 935, 484, 420, 281, 16078, 322, 307, 1830, 428, 1895, 15104, 11, 291, 50940, 50940, 820, 406, 1406, 777, 3331, 13, 407, 498, 746, 2203, 293, 17037, 257, 1500, 3720, 337, 309, 11, 51438, 51438, 293, 1177, 380, 589, 412, 264, 1623, 11, 293, 1895, 578, 3662, 264, 636, 291, 360, 309, 1669, 257, 1500, 1320, 11, 550, 51800, 51800], "temperature": 0.0, "avg_logprob": -0.10399104930736401, "compression_ratio": 1.5555555555555556, "no_caption_prob": 1.644203075557016e-05}, {"id": 190, "seek": 110352, "start": 1115.04, "end": 1125.0, "text": " should not support new cases. So if something needs and deserves a test written for it,", "tokens": [50364, 1920, 4018, 3148, 300, 286, 600, 3105, 5223, 45514, 379, 13, 50626, 50626, 1485, 551, 286, 576, 411, 281, 935, 484, 420, 281, 16078, 322, 307, 1830, 428, 1895, 15104, 11, 291, 50940, 50940, 820, 406, 1406, 777, 3331, 13, 407, 498, 746, 2203, 293, 17037, 257, 1500, 3720, 337, 309, 11, 51438, 51438, 293, 1177, 380, 589, 412, 264, 1623, 11, 293, 1895, 578, 3662, 264, 636, 291, 360, 309, 1669, 257, 1500, 1320, 11, 550, 51800, 51800], "temperature": 0.0, "avg_logprob": -0.10399104930736401, "compression_ratio": 1.5555555555555556, "no_caption_prob": 1.644203075557016e-05}, {"id": 191, "seek": 110352, "start": 1125.0, "end": 1132.24, "text": " and doesn't work at the moment, and refactoring the way you do it makes a test pass, then", "tokens": [50364, 1920, 4018, 3148, 300, 286, 600, 3105, 5223, 45514, 379, 13, 50626, 50626, 1485, 551, 286, 576, 411, 281, 935, 484, 420, 281, 16078, 322, 307, 1830, 428, 1895, 15104, 11, 291, 50940, 50940, 820, 406, 1406, 777, 3331, 13, 407, 498, 746, 2203, 293, 17037, 257, 1500, 3720, 337, 309, 11, 51438, 51438, 293, 1177, 380, 589, 412, 264, 1623, 11, 293, 1895, 578, 3662, 264, 636, 291, 360, 309, 1669, 257, 1500, 1320, 11, 550, 51800, 51800], "temperature": 0.0, "avg_logprob": -0.10399104930736401, "compression_ratio": 1.5555555555555556, "no_caption_prob": 1.644203075557016e-05}, {"id": 192, "seek": 113224, "start": 1132.24, "end": 1141.64, "text": " you should first write the test and then refactor it. Otherwise, you lose one good loop, one", "tokens": [50364, 291, 820, 700, 2464, 264, 1500, 293, 550, 1895, 15104, 309, 13, 10328, 11, 291, 3624, 472, 665, 6367, 11, 472, 50834, 50834, 665, 6586, 13, 400, 341, 6586, 307, 588, 11, 5607, 257, 688, 295, 665, 721, 13, 51222, 51222, 286, 360, 915, 300, 2171, 286, 411, 281, 2674, 1125, 382, 644, 295, 1895, 578, 3662, 1823, 13, 286, 478, 406, 988, 51638, 51638, 498, 300, 311, 18218, 365, 437, 291, 434, 1566, 558, 586, 420, 406, 13, 583, 370, 456, 311, 341, 472, 51862, 51862], "temperature": 0.0, "avg_logprob": -0.1762114321247915, "compression_ratio": 1.5586854460093897, "no_caption_prob": 9.666038749855943e-06}, {"id": 193, "seek": 113224, "start": 1141.64, "end": 1149.4, "text": " good cycle. And this cycle is very, brings a lot of good things.", "tokens": [50364, 291, 820, 700, 2464, 264, 1500, 293, 550, 1895, 15104, 309, 13, 10328, 11, 291, 3624, 472, 665, 6367, 11, 472, 50834, 50834, 665, 6586, 13, 400, 341, 6586, 307, 588, 11, 5607, 257, 688, 295, 665, 721, 13, 51222, 51222, 286, 360, 915, 300, 2171, 286, 411, 281, 2674, 1125, 382, 644, 295, 1895, 578, 3662, 1823, 13, 286, 478, 406, 988, 51638, 51638, 498, 300, 311, 18218, 365, 437, 291, 434, 1566, 558, 586, 420, 406, 13, 583, 370, 456, 311, 341, 472, 51862, 51862], "temperature": 0.0, "avg_logprob": -0.1762114321247915, "compression_ratio": 1.5586854460093897, "no_caption_prob": 9.666038749855943e-06}, {"id": 194, "seek": 113224, "start": 1149.4, "end": 1157.72, "text": " I do find that sometimes I like to generalize as part of refactoring step. I'm not sure", "tokens": [50364, 291, 820, 700, 2464, 264, 1500, 293, 550, 1895, 15104, 309, 13, 10328, 11, 291, 3624, 472, 665, 6367, 11, 472, 50834, 50834, 665, 6586, 13, 400, 341, 6586, 307, 588, 11, 5607, 257, 688, 295, 665, 721, 13, 51222, 51222, 286, 360, 915, 300, 2171, 286, 411, 281, 2674, 1125, 382, 644, 295, 1895, 578, 3662, 1823, 13, 286, 478, 406, 988, 51638, 51638, 498, 300, 311, 18218, 365, 437, 291, 434, 1566, 558, 586, 420, 406, 13, 583, 370, 456, 311, 341, 472, 51862, 51862], "temperature": 0.0, "avg_logprob": -0.1762114321247915, "compression_ratio": 1.5586854460093897, "no_caption_prob": 9.666038749855943e-06}, {"id": 195, "seek": 113224, "start": 1157.72, "end": 1162.2, "text": " if that's compatible with what you're saying right now or not. But so there's this one", "tokens": [50364, 291, 820, 700, 2464, 264, 1500, 293, 550, 1895, 15104, 309, 13, 10328, 11, 291, 3624, 472, 665, 6367, 11, 472, 50834, 50834, 665, 6586, 13, 400, 341, 6586, 307, 588, 11, 5607, 257, 688, 295, 665, 721, 13, 51222, 51222, 286, 360, 915, 300, 2171, 286, 411, 281, 2674, 1125, 382, 644, 295, 1895, 578, 3662, 1823, 13, 286, 478, 406, 988, 51638, 51638, 498, 300, 311, 18218, 365, 437, 291, 434, 1566, 558, 586, 420, 406, 13, 583, 370, 456, 311, 341, 472, 51862, 51862], "temperature": 0.0, "avg_logprob": -0.1762114321247915, "compression_ratio": 1.5586854460093897, "no_caption_prob": 9.666038749855943e-06}, {"id": 196, "seek": 116220, "start": 1162.2, "end": 1163.92, "text": " I guess not.", "tokens": [50364, 286, 2041, 406, 13, 50450, 50450, 286, 914, 11, 286, 2041, 286, 576, 17594, 300, 286, 500, 380, 818, 300, 1895, 578, 3662, 13, 286, 818, 300, 2674, 3319, 13, 50782, 50782, 400, 2171, 561, 764, 264, 1349, 1895, 578, 3662, 456, 11, 558, 30, 407, 498, 291, 434, 1895, 578, 3662, 11, 309, 51006, 51006, 1355, 291, 434, 406, 4473, 264, 5223, 11, 558, 30, 583, 498, 291, 5800, 3191, 257, 7426, 1830, 428, 51278, 51278, 1895, 578, 3662, 11, 309, 1355, 309, 2067, 380, 257, 1895, 578, 3662, 1823, 13, 400, 300, 11, 291, 458, 11, 309, 311, 406, 300, 291, 51466, 51466, 4659, 380, 3191, 15120, 420, 1319, 428, 3089, 294, 257, 636, 300, 7923, 977, 15120, 13, 467, 311, 445, 11, 572, 11, 300, 51724, 51724], "temperature": 0.0, "avg_logprob": -0.15334889383027048, "compression_ratio": 1.840637450199203, "no_caption_prob": 6.814679363742471e-05}, {"id": 197, "seek": 116220, "start": 1163.92, "end": 1170.56, "text": " I mean, I guess I would clarify that I don't call that refactoring. I call that generalizing.", "tokens": [50364, 286, 2041, 406, 13, 50450, 50450, 286, 914, 11, 286, 2041, 286, 576, 17594, 300, 286, 500, 380, 818, 300, 1895, 578, 3662, 13, 286, 818, 300, 2674, 3319, 13, 50782, 50782, 400, 2171, 561, 764, 264, 1349, 1895, 578, 3662, 456, 11, 558, 30, 407, 498, 291, 434, 1895, 578, 3662, 11, 309, 51006, 51006, 1355, 291, 434, 406, 4473, 264, 5223, 11, 558, 30, 583, 498, 291, 5800, 3191, 257, 7426, 1830, 428, 51278, 51278, 1895, 578, 3662, 11, 309, 1355, 309, 2067, 380, 257, 1895, 578, 3662, 1823, 13, 400, 300, 11, 291, 458, 11, 309, 311, 406, 300, 291, 51466, 51466, 4659, 380, 3191, 15120, 420, 1319, 428, 3089, 294, 257, 636, 300, 7923, 977, 15120, 13, 467, 311, 445, 11, 572, 11, 300, 51724, 51724], "temperature": 0.0, "avg_logprob": -0.15334889383027048, "compression_ratio": 1.840637450199203, "no_caption_prob": 6.814679363742471e-05}, {"id": 198, "seek": 116220, "start": 1170.56, "end": 1175.04, "text": " And sometimes people use the word refactoring there, right? So if you're refactoring, it", "tokens": [50364, 286, 2041, 406, 13, 50450, 50450, 286, 914, 11, 286, 2041, 286, 576, 17594, 300, 286, 500, 380, 818, 300, 1895, 578, 3662, 13, 286, 818, 300, 2674, 3319, 13, 50782, 50782, 400, 2171, 561, 764, 264, 1349, 1895, 578, 3662, 456, 11, 558, 30, 407, 498, 291, 434, 1895, 578, 3662, 11, 309, 51006, 51006, 1355, 291, 434, 406, 4473, 264, 5223, 11, 558, 30, 583, 498, 291, 5800, 3191, 257, 7426, 1830, 428, 51278, 51278, 1895, 578, 3662, 11, 309, 1355, 309, 2067, 380, 257, 1895, 578, 3662, 1823, 13, 400, 300, 11, 291, 458, 11, 309, 311, 406, 300, 291, 51466, 51466, 4659, 380, 3191, 15120, 420, 1319, 428, 3089, 294, 257, 636, 300, 7923, 977, 15120, 13, 467, 311, 445, 11, 572, 11, 300, 51724, 51724], "temperature": 0.0, "avg_logprob": -0.15334889383027048, "compression_ratio": 1.840637450199203, "no_caption_prob": 6.814679363742471e-05}, {"id": 199, "seek": 116220, "start": 1175.04, "end": 1180.48, "text": " means you're not changing the behavior, right? But if you suddenly fix a bug during your", "tokens": [50364, 286, 2041, 406, 13, 50450, 50450, 286, 914, 11, 286, 2041, 286, 576, 17594, 300, 286, 500, 380, 818, 300, 1895, 578, 3662, 13, 286, 818, 300, 2674, 3319, 13, 50782, 50782, 400, 2171, 561, 764, 264, 1349, 1895, 578, 3662, 456, 11, 558, 30, 407, 498, 291, 434, 1895, 578, 3662, 11, 309, 51006, 51006, 1355, 291, 434, 406, 4473, 264, 5223, 11, 558, 30, 583, 498, 291, 5800, 3191, 257, 7426, 1830, 428, 51278, 51278, 1895, 578, 3662, 11, 309, 1355, 309, 2067, 380, 257, 1895, 578, 3662, 1823, 13, 400, 300, 11, 291, 458, 11, 309, 311, 406, 300, 291, 51466, 51466, 4659, 380, 3191, 15120, 420, 1319, 428, 3089, 294, 257, 636, 300, 7923, 977, 15120, 13, 467, 311, 445, 11, 572, 11, 300, 51724, 51724], "temperature": 0.0, "avg_logprob": -0.15334889383027048, "compression_ratio": 1.840637450199203, "no_caption_prob": 6.814679363742471e-05}, {"id": 200, "seek": 116220, "start": 1180.48, "end": 1184.24, "text": " refactoring, it means it wasn't a refactoring step. And that, you know, it's not that you", "tokens": [50364, 286, 2041, 406, 13, 50450, 50450, 286, 914, 11, 286, 2041, 286, 576, 17594, 300, 286, 500, 380, 818, 300, 1895, 578, 3662, 13, 286, 818, 300, 2674, 3319, 13, 50782, 50782, 400, 2171, 561, 764, 264, 1349, 1895, 578, 3662, 456, 11, 558, 30, 407, 498, 291, 434, 1895, 578, 3662, 11, 309, 51006, 51006, 1355, 291, 434, 406, 4473, 264, 5223, 11, 558, 30, 583, 498, 291, 5800, 3191, 257, 7426, 1830, 428, 51278, 51278, 1895, 578, 3662, 11, 309, 1355, 309, 2067, 380, 257, 1895, 578, 3662, 1823, 13, 400, 300, 11, 291, 458, 11, 309, 311, 406, 300, 291, 51466, 51466, 4659, 380, 3191, 15120, 420, 1319, 428, 3089, 294, 257, 636, 300, 7923, 977, 15120, 13, 467, 311, 445, 11, 572, 11, 300, 51724, 51724], "temperature": 0.0, "avg_logprob": -0.15334889383027048, "compression_ratio": 1.840637450199203, "no_caption_prob": 6.814679363742471e-05}, {"id": 201, "seek": 116220, "start": 1184.24, "end": 1189.4, "text": " shouldn't fix bugs or change your code in a way that resolves bugs. It's just, no, that", "tokens": [50364, 286, 2041, 406, 13, 50450, 50450, 286, 914, 11, 286, 2041, 286, 576, 17594, 300, 286, 500, 380, 818, 300, 1895, 578, 3662, 13, 286, 818, 300, 2674, 3319, 13, 50782, 50782, 400, 2171, 561, 764, 264, 1349, 1895, 578, 3662, 456, 11, 558, 30, 407, 498, 291, 434, 1895, 578, 3662, 11, 309, 51006, 51006, 1355, 291, 434, 406, 4473, 264, 5223, 11, 558, 30, 583, 498, 291, 5800, 3191, 257, 7426, 1830, 428, 51278, 51278, 1895, 578, 3662, 11, 309, 1355, 309, 2067, 380, 257, 1895, 578, 3662, 1823, 13, 400, 300, 11, 291, 458, 11, 309, 311, 406, 300, 291, 51466, 51466, 4659, 380, 3191, 15120, 420, 1319, 428, 3089, 294, 257, 636, 300, 7923, 977, 15120, 13, 467, 311, 445, 11, 572, 11, 300, 51724, 51724], "temperature": 0.0, "avg_logprob": -0.15334889383027048, "compression_ratio": 1.840637450199203, "no_caption_prob": 6.814679363742471e-05}, {"id": 202, "seek": 118940, "start": 1189.4, "end": 1196.0, "text": " it's not a refactoring. And there's a particular role that a low or zero risk refactoring plays", "tokens": [50364, 309, 311, 406, 257, 1895, 578, 3662, 13, 400, 456, 311, 257, 1729, 3090, 300, 257, 2295, 420, 4018, 3148, 1895, 578, 3662, 5749, 50694, 50694, 294, 264, 3250, 1399, 13, 467, 311, 257, 588, 4961, 6532, 13, 50920, 50920, 467, 311, 665, 281, 362, 264, 1349, 2674, 3319, 294, 1575, 337, 1293, 4439, 13, 51174, 51174, 7587, 13, 7587, 13, 814, 434, 411, 819, 14068, 295, 6916, 13, 407, 458, 597, 472, 291, 434, 294, 13, 51484, 51484, 821, 366, 819, 11587, 281, 1500, 9555, 3250, 13, 509, 393, 360, 341, 6532, 1219, 51720, 51720], "temperature": 0.0, "avg_logprob": -0.13598499492723115, "compression_ratio": 1.646090534979424, "no_caption_prob": 2.796877561195288e-05}, {"id": 203, "seek": 118940, "start": 1196.0, "end": 1200.52, "text": " in the development process. It's a very helpful technique.", "tokens": [50364, 309, 311, 406, 257, 1895, 578, 3662, 13, 400, 456, 311, 257, 1729, 3090, 300, 257, 2295, 420, 4018, 3148, 1895, 578, 3662, 5749, 50694, 50694, 294, 264, 3250, 1399, 13, 467, 311, 257, 588, 4961, 6532, 13, 50920, 50920, 467, 311, 665, 281, 362, 264, 1349, 2674, 3319, 294, 1575, 337, 1293, 4439, 13, 51174, 51174, 7587, 13, 7587, 13, 814, 434, 411, 819, 14068, 295, 6916, 13, 407, 458, 597, 472, 291, 434, 294, 13, 51484, 51484, 821, 366, 819, 11587, 281, 1500, 9555, 3250, 13, 509, 393, 360, 341, 6532, 1219, 51720, 51720], "temperature": 0.0, "avg_logprob": -0.13598499492723115, "compression_ratio": 1.646090534979424, "no_caption_prob": 2.796877561195288e-05}, {"id": 204, "seek": 118940, "start": 1200.52, "end": 1205.6000000000001, "text": " It's good to have the word generalizing in mind for both steps.", "tokens": [50364, 309, 311, 406, 257, 1895, 578, 3662, 13, 400, 456, 311, 257, 1729, 3090, 300, 257, 2295, 420, 4018, 3148, 1895, 578, 3662, 5749, 50694, 50694, 294, 264, 3250, 1399, 13, 467, 311, 257, 588, 4961, 6532, 13, 50920, 50920, 467, 311, 665, 281, 362, 264, 1349, 2674, 3319, 294, 1575, 337, 1293, 4439, 13, 51174, 51174, 7587, 13, 7587, 13, 814, 434, 411, 819, 14068, 295, 6916, 13, 407, 458, 597, 472, 291, 434, 294, 13, 51484, 51484, 821, 366, 819, 11587, 281, 1500, 9555, 3250, 13, 509, 393, 360, 341, 6532, 1219, 51720, 51720], "temperature": 0.0, "avg_logprob": -0.13598499492723115, "compression_ratio": 1.646090534979424, "no_caption_prob": 2.796877561195288e-05}, {"id": 205, "seek": 118940, "start": 1205.6000000000001, "end": 1211.8000000000002, "text": " Exactly. Exactly. They're like different modes of operation. So know which one you're in.", "tokens": [50364, 309, 311, 406, 257, 1895, 578, 3662, 13, 400, 456, 311, 257, 1729, 3090, 300, 257, 2295, 420, 4018, 3148, 1895, 578, 3662, 5749, 50694, 50694, 294, 264, 3250, 1399, 13, 467, 311, 257, 588, 4961, 6532, 13, 50920, 50920, 467, 311, 665, 281, 362, 264, 1349, 2674, 3319, 294, 1575, 337, 1293, 4439, 13, 51174, 51174, 7587, 13, 7587, 13, 814, 434, 411, 819, 14068, 295, 6916, 13, 407, 458, 597, 472, 291, 434, 294, 13, 51484, 51484, 821, 366, 819, 11587, 281, 1500, 9555, 3250, 13, 509, 393, 360, 341, 6532, 1219, 51720, 51720], "temperature": 0.0, "avg_logprob": -0.13598499492723115, "compression_ratio": 1.646090534979424, "no_caption_prob": 2.796877561195288e-05}, {"id": 206, "seek": 118940, "start": 1211.8000000000002, "end": 1216.52, "text": " There are different approaches to test driven development. You can do this technique called", "tokens": [50364, 309, 311, 406, 257, 1895, 578, 3662, 13, 400, 456, 311, 257, 1729, 3090, 300, 257, 2295, 420, 4018, 3148, 1895, 578, 3662, 5749, 50694, 50694, 294, 264, 3250, 1399, 13, 467, 311, 257, 588, 4961, 6532, 13, 50920, 50920, 467, 311, 665, 281, 362, 264, 1349, 2674, 3319, 294, 1575, 337, 1293, 4439, 13, 51174, 51174, 7587, 13, 7587, 13, 814, 434, 411, 819, 14068, 295, 6916, 13, 407, 458, 597, 472, 291, 434, 294, 13, 51484, 51484, 821, 366, 819, 11587, 281, 1500, 9555, 3250, 13, 509, 393, 360, 341, 6532, 1219, 51720, 51720], "temperature": 0.0, "avg_logprob": -0.13598499492723115, "compression_ratio": 1.646090534979424, "no_caption_prob": 2.796877561195288e-05}, {"id": 207, "seek": 121652, "start": 1216.52, "end": 1222.28, "text": " triangulation where you sort of every time you want to generalize your code, you write", "tokens": [50364, 19335, 2776, 689, 291, 1333, 295, 633, 565, 291, 528, 281, 2674, 1125, 428, 3089, 11, 291, 2464, 50652, 50652, 257, 18223, 1500, 300, 25019, 300, 309, 2203, 281, 312, 44498, 700, 13, 407, 411, 1936, 11, 291, 50927, 50927, 787, 2674, 1125, 3089, 538, 16670, 281, 257, 18223, 1500, 13, 286, 915, 294, 3124, 11, 2171, 300, 2709, 51346, 51346, 291, 411, 11, 291, 458, 11, 291, 1152, 3089, 257, 1389, 411, 291, 291, 434, 884, 283, 8072, 65, 16740, 293, 291, 584, 283, 8072, 65, 16740, 51716, 51716], "temperature": 0.0, "avg_logprob": -0.13505078398663065, "compression_ratio": 1.736842105263158, "no_caption_prob": 2.2827212887932546e-05}, {"id": 208, "seek": 121652, "start": 1222.28, "end": 1227.78, "text": " a failing test that proves that it needs to be generalized first. So like basically, you", "tokens": [50364, 19335, 2776, 689, 291, 1333, 295, 633, 565, 291, 528, 281, 2674, 1125, 428, 3089, 11, 291, 2464, 50652, 50652, 257, 18223, 1500, 300, 25019, 300, 309, 2203, 281, 312, 44498, 700, 13, 407, 411, 1936, 11, 291, 50927, 50927, 787, 2674, 1125, 3089, 538, 16670, 281, 257, 18223, 1500, 13, 286, 915, 294, 3124, 11, 2171, 300, 2709, 51346, 51346, 291, 411, 11, 291, 458, 11, 291, 1152, 3089, 257, 1389, 411, 291, 291, 434, 884, 283, 8072, 65, 16740, 293, 291, 584, 283, 8072, 65, 16740, 51716, 51716], "temperature": 0.0, "avg_logprob": -0.13505078398663065, "compression_ratio": 1.736842105263158, "no_caption_prob": 2.2827212887932546e-05}, {"id": 209, "seek": 121652, "start": 1227.78, "end": 1236.16, "text": " only generalize code by responding to a failing test. I find in practice, sometimes that gives", "tokens": [50364, 19335, 2776, 689, 291, 1333, 295, 633, 565, 291, 528, 281, 2674, 1125, 428, 3089, 11, 291, 2464, 50652, 50652, 257, 18223, 1500, 300, 25019, 300, 309, 2203, 281, 312, 44498, 700, 13, 407, 411, 1936, 11, 291, 50927, 50927, 787, 2674, 1125, 3089, 538, 16670, 281, 257, 18223, 1500, 13, 286, 915, 294, 3124, 11, 2171, 300, 2709, 51346, 51346, 291, 411, 11, 291, 458, 11, 291, 1152, 3089, 257, 1389, 411, 291, 291, 434, 884, 283, 8072, 65, 16740, 293, 291, 584, 283, 8072, 65, 16740, 51716, 51716], "temperature": 0.0, "avg_logprob": -0.13505078398663065, "compression_ratio": 1.736842105263158, "no_caption_prob": 2.2827212887932546e-05}, {"id": 210, "seek": 121652, "start": 1236.16, "end": 1243.56, "text": " you like, you know, you hard code a case like you you're doing fizzbuzz and you say fizzbuzz", "tokens": [50364, 19335, 2776, 689, 291, 1333, 295, 633, 565, 291, 528, 281, 2674, 1125, 428, 3089, 11, 291, 2464, 50652, 50652, 257, 18223, 1500, 300, 25019, 300, 309, 2203, 281, 312, 44498, 700, 13, 407, 411, 1936, 11, 291, 50927, 50927, 787, 2674, 1125, 3089, 538, 16670, 281, 257, 18223, 1500, 13, 286, 915, 294, 3124, 11, 2171, 300, 2709, 51346, 51346, 291, 411, 11, 291, 458, 11, 291, 1152, 3089, 257, 1389, 411, 291, 291, 434, 884, 283, 8072, 65, 16740, 293, 291, 584, 283, 8072, 65, 16740, 51716, 51716], "temperature": 0.0, "avg_logprob": -0.13505078398663065, "compression_ratio": 1.736842105263158, "no_caption_prob": 2.2827212887932546e-05}, {"id": 211, "seek": 124356, "start": 1243.56, "end": 1250.6, "text": " for for one is one. And then you just hard code fizzbuzz to return the string one. And", "tokens": [50364, 337, 337, 472, 307, 472, 13, 400, 550, 291, 445, 1152, 3089, 283, 8072, 65, 16740, 281, 2736, 264, 6798, 472, 13, 400, 50716, 50716, 586, 291, 584, 283, 8072, 65, 16740, 295, 732, 307, 732, 11, 291, 362, 281, 2464, 257, 18223, 1500, 294, 1668, 281, 4159, 51050, 51050, 264, 1152, 17720, 295, 264, 1230, 472, 490, 264, 2736, 2158, 13, 865, 11, 457, 534, 11, 281, 385, 11, 309, 51382, 51382, 2544, 445, 24518, 281, 362, 732, 1500, 3331, 300, 366, 4997, 11, 6246, 257, 3890, 1230, 666, 51708, 51708], "temperature": 0.0, "avg_logprob": -0.10499650874036423, "compression_ratio": 1.70935960591133, "no_caption_prob": 2.2827443899586797e-05}, {"id": 212, "seek": 124356, "start": 1250.6, "end": 1257.28, "text": " now you say fizzbuzz of two is two, you have to write a failing test in order to remove", "tokens": [50364, 337, 337, 472, 307, 472, 13, 400, 550, 291, 445, 1152, 3089, 283, 8072, 65, 16740, 281, 2736, 264, 6798, 472, 13, 400, 50716, 50716, 586, 291, 584, 283, 8072, 65, 16740, 295, 732, 307, 732, 11, 291, 362, 281, 2464, 257, 18223, 1500, 294, 1668, 281, 4159, 51050, 51050, 264, 1152, 17720, 295, 264, 1230, 472, 490, 264, 2736, 2158, 13, 865, 11, 457, 534, 11, 281, 385, 11, 309, 51382, 51382, 2544, 445, 24518, 281, 362, 732, 1500, 3331, 300, 366, 4997, 11, 6246, 257, 3890, 1230, 666, 51708, 51708], "temperature": 0.0, "avg_logprob": -0.10499650874036423, "compression_ratio": 1.70935960591133, "no_caption_prob": 2.2827443899586797e-05}, {"id": 213, "seek": 124356, "start": 1257.28, "end": 1263.9199999999998, "text": " the hard coding of the number one from the return value. Yeah, but really, to me, it", "tokens": [50364, 337, 337, 472, 307, 472, 13, 400, 550, 291, 445, 1152, 3089, 283, 8072, 65, 16740, 281, 2736, 264, 6798, 472, 13, 400, 50716, 50716, 586, 291, 584, 283, 8072, 65, 16740, 295, 732, 307, 732, 11, 291, 362, 281, 2464, 257, 18223, 1500, 294, 1668, 281, 4159, 51050, 51050, 264, 1152, 17720, 295, 264, 1230, 472, 490, 264, 2736, 2158, 13, 865, 11, 457, 534, 11, 281, 385, 11, 309, 51382, 51382, 2544, 445, 24518, 281, 362, 732, 1500, 3331, 300, 366, 4997, 11, 6246, 257, 3890, 1230, 666, 51708, 51708], "temperature": 0.0, "avg_logprob": -0.10499650874036423, "compression_ratio": 1.70935960591133, "no_caption_prob": 2.2827443899586797e-05}, {"id": 214, "seek": 124356, "start": 1263.9199999999998, "end": 1270.44, "text": " seems just noisy to have two test cases that are testing, turning a regular number into", "tokens": [50364, 337, 337, 472, 307, 472, 13, 400, 550, 291, 445, 1152, 3089, 283, 8072, 65, 16740, 281, 2736, 264, 6798, 472, 13, 400, 50716, 50716, 586, 291, 584, 283, 8072, 65, 16740, 295, 732, 307, 732, 11, 291, 362, 281, 2464, 257, 18223, 1500, 294, 1668, 281, 4159, 51050, 51050, 264, 1152, 17720, 295, 264, 1230, 472, 490, 264, 2736, 2158, 13, 865, 11, 457, 534, 11, 281, 385, 11, 309, 51382, 51382, 2544, 445, 24518, 281, 362, 732, 1500, 3331, 300, 366, 4997, 11, 6246, 257, 3890, 1230, 666, 51708, 51708], "temperature": 0.0, "avg_logprob": -0.10499650874036423, "compression_ratio": 1.70935960591133, "no_caption_prob": 2.2827443899586797e-05}, {"id": 215, "seek": 127044, "start": 1270.44, "end": 1276.0800000000002, "text": " a string. And so sometimes I'll do that as a generalization step where I'll just Kent", "tokens": [50364, 257, 6798, 13, 400, 370, 2171, 286, 603, 360, 300, 382, 257, 2674, 2144, 1823, 689, 286, 603, 445, 15843, 50646, 50646, 19184, 294, 1500, 9555, 3250, 538, 1365, 11, 597, 307, 257, 534, 1481, 1446, 11, 415, 6686, 466, 50928, 50928, 341, 1558, 382, 411, 11, 12720, 17154, 399, 1296, 264, 1500, 1389, 293, 264, 4265, 3089, 13, 407, 51288, 51288, 4033, 11, 300, 311, 257, 6532, 300, 286, 2171, 2524, 337, 2831, 813, 2171, 309, 393, 1813, 51541, 51541, 257, 707, 857, 3000, 25915, 281, 445, 1524, 19335, 2776, 412, 633, 1823, 13, 400, 309, 1177, 380, 841, 3303, 51861, 51861], "temperature": 0.0, "avg_logprob": -0.0753503890264602, "compression_ratio": 1.6254545454545455, "no_caption_prob": 3.3213138522114605e-05}, {"id": 216, "seek": 127044, "start": 1276.0800000000002, "end": 1281.72, "text": " Beck in test driven development by example, which is a really nice book, he talks about", "tokens": [50364, 257, 6798, 13, 400, 370, 2171, 286, 603, 360, 300, 382, 257, 2674, 2144, 1823, 689, 286, 603, 445, 15843, 50646, 50646, 19184, 294, 1500, 9555, 3250, 538, 1365, 11, 597, 307, 257, 534, 1481, 1446, 11, 415, 6686, 466, 50928, 50928, 341, 1558, 382, 411, 11, 12720, 17154, 399, 1296, 264, 1500, 1389, 293, 264, 4265, 3089, 13, 407, 51288, 51288, 4033, 11, 300, 311, 257, 6532, 300, 286, 2171, 2524, 337, 2831, 813, 2171, 309, 393, 1813, 51541, 51541, 257, 707, 857, 3000, 25915, 281, 445, 1524, 19335, 2776, 412, 633, 1823, 13, 400, 309, 1177, 380, 841, 3303, 51861, 51861], "temperature": 0.0, "avg_logprob": -0.0753503890264602, "compression_ratio": 1.6254545454545455, "no_caption_prob": 3.3213138522114605e-05}, {"id": 217, "seek": 127044, "start": 1281.72, "end": 1288.92, "text": " this idea as like, removing duplication between the test case and the production code. So", "tokens": [50364, 257, 6798, 13, 400, 370, 2171, 286, 603, 360, 300, 382, 257, 2674, 2144, 1823, 689, 286, 603, 445, 15843, 50646, 50646, 19184, 294, 1500, 9555, 3250, 538, 1365, 11, 597, 307, 257, 534, 1481, 1446, 11, 415, 6686, 466, 50928, 50928, 341, 1558, 382, 411, 11, 12720, 17154, 399, 1296, 264, 1500, 1389, 293, 264, 4265, 3089, 13, 407, 51288, 51288, 4033, 11, 300, 311, 257, 6532, 300, 286, 2171, 2524, 337, 2831, 813, 2171, 309, 393, 1813, 51541, 51541, 257, 707, 857, 3000, 25915, 281, 445, 1524, 19335, 2776, 412, 633, 1823, 13, 400, 309, 1177, 380, 841, 3303, 51861, 51861], "temperature": 0.0, "avg_logprob": -0.0753503890264602, "compression_ratio": 1.6254545454545455, "no_caption_prob": 3.3213138522114605e-05}, {"id": 218, "seek": 127044, "start": 1288.92, "end": 1293.98, "text": " anyway, that's a technique that I sometimes reach for rather than sometimes it can become", "tokens": [50364, 257, 6798, 13, 400, 370, 2171, 286, 603, 360, 300, 382, 257, 2674, 2144, 1823, 689, 286, 603, 445, 15843, 50646, 50646, 19184, 294, 1500, 9555, 3250, 538, 1365, 11, 597, 307, 257, 534, 1481, 1446, 11, 415, 6686, 466, 50928, 50928, 341, 1558, 382, 411, 11, 12720, 17154, 399, 1296, 264, 1500, 1389, 293, 264, 4265, 3089, 13, 407, 51288, 51288, 4033, 11, 300, 311, 257, 6532, 300, 286, 2171, 2524, 337, 2831, 813, 2171, 309, 393, 1813, 51541, 51541, 257, 707, 857, 3000, 25915, 281, 445, 1524, 19335, 2776, 412, 633, 1823, 13, 400, 309, 1177, 380, 841, 3303, 51861, 51861], "temperature": 0.0, "avg_logprob": -0.0753503890264602, "compression_ratio": 1.6254545454545455, "no_caption_prob": 3.3213138522114605e-05}, {"id": 219, "seek": 127044, "start": 1293.98, "end": 1300.38, "text": " a little bit dogmatic to just follow triangulation at every step. And it doesn't feel natural", "tokens": [50364, 257, 6798, 13, 400, 370, 2171, 286, 603, 360, 300, 382, 257, 2674, 2144, 1823, 689, 286, 603, 445, 15843, 50646, 50646, 19184, 294, 1500, 9555, 3250, 538, 1365, 11, 597, 307, 257, 534, 1481, 1446, 11, 415, 6686, 466, 50928, 50928, 341, 1558, 382, 411, 11, 12720, 17154, 399, 1296, 264, 1500, 1389, 293, 264, 4265, 3089, 13, 407, 51288, 51288, 4033, 11, 300, 311, 257, 6532, 300, 286, 2171, 2524, 337, 2831, 813, 2171, 309, 393, 1813, 51541, 51541, 257, 707, 857, 3000, 25915, 281, 445, 1524, 19335, 2776, 412, 633, 1823, 13, 400, 309, 1177, 380, 841, 3303, 51861, 51861], "temperature": 0.0, "avg_logprob": -0.0753503890264602, "compression_ratio": 1.6254545454545455, "no_caption_prob": 3.3213138522114605e-05}, {"id": 220, "seek": 130038, "start": 1300.38, "end": 1306.18, "text": " in a context. So I recommend that people try out these approaches, it can be nice to do", "tokens": [50364, 294, 257, 4319, 13, 407, 286, 2748, 300, 561, 853, 484, 613, 11587, 11, 309, 393, 312, 1481, 281, 360, 50654, 50654, 512, 11900, 11, 512, 512, 350, 3274, 11, 321, 393, 2113, 281, 512, 3089, 350, 3274, 13, 583, 309, 311, 534, 1481, 281, 50926, 50926, 445, 3124, 3089, 350, 3274, 11, 293, 853, 484, 613, 819, 7512, 281, 483, 1752, 365, 51221, 51221, 552, 13, 400, 550, 291, 362, 281, 764, 428, 1065, 12216, 294, 257, 957, 3089, 3096, 281, 2573, 484, 597, 7512, 51559, 51559, 652, 2020, 337, 291, 13, 583, 498, 291, 600, 412, 1935, 6751, 552, 11, 550, 291, 362, 257, 1101, 2020, 51810, 51810], "temperature": 0.0, "avg_logprob": -0.13138576916285924, "compression_ratio": 1.768627450980392, "no_caption_prob": 5.920717376284301e-05}, {"id": 221, "seek": 130038, "start": 1306.18, "end": 1311.6200000000001, "text": " some exercises, some some kata, we can link to some code kata. But it's really nice to", "tokens": [50364, 294, 257, 4319, 13, 407, 286, 2748, 300, 561, 853, 484, 613, 11587, 11, 309, 393, 312, 1481, 281, 360, 50654, 50654, 512, 11900, 11, 512, 512, 350, 3274, 11, 321, 393, 2113, 281, 512, 3089, 350, 3274, 13, 583, 309, 311, 534, 1481, 281, 50926, 50926, 445, 3124, 3089, 350, 3274, 11, 293, 853, 484, 613, 819, 7512, 281, 483, 1752, 365, 51221, 51221, 552, 13, 400, 550, 291, 362, 281, 764, 428, 1065, 12216, 294, 257, 957, 3089, 3096, 281, 2573, 484, 597, 7512, 51559, 51559, 652, 2020, 337, 291, 13, 583, 498, 291, 600, 412, 1935, 6751, 552, 11, 550, 291, 362, 257, 1101, 2020, 51810, 51810], "temperature": 0.0, "avg_logprob": -0.13138576916285924, "compression_ratio": 1.768627450980392, "no_caption_prob": 5.920717376284301e-05}, {"id": 222, "seek": 130038, "start": 1311.6200000000001, "end": 1317.5200000000002, "text": " just practice code kata, and try out these different techniques to get experience with", "tokens": [50364, 294, 257, 4319, 13, 407, 286, 2748, 300, 561, 853, 484, 613, 11587, 11, 309, 393, 312, 1481, 281, 360, 50654, 50654, 512, 11900, 11, 512, 512, 350, 3274, 11, 321, 393, 2113, 281, 512, 3089, 350, 3274, 13, 583, 309, 311, 534, 1481, 281, 50926, 50926, 445, 3124, 3089, 350, 3274, 11, 293, 853, 484, 613, 819, 7512, 281, 483, 1752, 365, 51221, 51221, 552, 13, 400, 550, 291, 362, 281, 764, 428, 1065, 12216, 294, 257, 957, 3089, 3096, 281, 2573, 484, 597, 7512, 51559, 51559, 652, 2020, 337, 291, 13, 583, 498, 291, 600, 412, 1935, 6751, 552, 11, 550, 291, 362, 257, 1101, 2020, 51810, 51810], "temperature": 0.0, "avg_logprob": -0.13138576916285924, "compression_ratio": 1.768627450980392, "no_caption_prob": 5.920717376284301e-05}, {"id": 223, "seek": 130038, "start": 1317.5200000000002, "end": 1324.2800000000002, "text": " them. And then you have to use your own judgment in a real code base to figure out which techniques", "tokens": [50364, 294, 257, 4319, 13, 407, 286, 2748, 300, 561, 853, 484, 613, 11587, 11, 309, 393, 312, 1481, 281, 360, 50654, 50654, 512, 11900, 11, 512, 512, 350, 3274, 11, 321, 393, 2113, 281, 512, 3089, 350, 3274, 13, 583, 309, 311, 534, 1481, 281, 50926, 50926, 445, 3124, 3089, 350, 3274, 11, 293, 853, 484, 613, 819, 7512, 281, 483, 1752, 365, 51221, 51221, 552, 13, 400, 550, 291, 362, 281, 764, 428, 1065, 12216, 294, 257, 957, 3089, 3096, 281, 2573, 484, 597, 7512, 51559, 51559, 652, 2020, 337, 291, 13, 583, 498, 291, 600, 412, 1935, 6751, 552, 11, 550, 291, 362, 257, 1101, 2020, 51810, 51810], "temperature": 0.0, "avg_logprob": -0.13138576916285924, "compression_ratio": 1.768627450980392, "no_caption_prob": 5.920717376284301e-05}, {"id": 224, "seek": 130038, "start": 1324.2800000000002, "end": 1329.3000000000002, "text": " make sense for you. But if you've at least experienced them, then you have a better sense", "tokens": [50364, 294, 257, 4319, 13, 407, 286, 2748, 300, 561, 853, 484, 613, 11587, 11, 309, 393, 312, 1481, 281, 360, 50654, 50654, 512, 11900, 11, 512, 512, 350, 3274, 11, 321, 393, 2113, 281, 512, 3089, 350, 3274, 13, 583, 309, 311, 534, 1481, 281, 50926, 50926, 445, 3124, 3089, 350, 3274, 11, 293, 853, 484, 613, 819, 7512, 281, 483, 1752, 365, 51221, 51221, 552, 13, 400, 550, 291, 362, 281, 764, 428, 1065, 12216, 294, 257, 957, 3089, 3096, 281, 2573, 484, 597, 7512, 51559, 51559, 652, 2020, 337, 291, 13, 583, 498, 291, 600, 412, 1935, 6751, 552, 11, 550, 291, 362, 257, 1101, 2020, 51810, 51810], "temperature": 0.0, "avg_logprob": -0.13138576916285924, "compression_ratio": 1.768627450980392, "no_caption_prob": 5.920717376284301e-05}, {"id": 225, "seek": 132930, "start": 1329.3, "end": 1335.32, "text": " of of how they help you write better code. Now you know everything about test driven", "tokens": [50364, 295, 295, 577, 436, 854, 291, 2464, 1101, 3089, 13, 823, 291, 458, 1203, 466, 1500, 9555, 50665, 50665, 3250, 13, 1033, 11, 731, 11, 4393, 321, 751, 466, 512, 512, 544, 295, 264, 4365, 295, 264, 2685, 50993, 50993, 806, 76, 1500, 7372, 30, 865, 11, 321, 393, 360, 300, 13, 492, 994, 380, 584, 577, 291, 577, 291, 2464, 257, 1500, 13, 2704, 51389, 51389, 321, 820, 352, 666, 300, 13, 961, 311, 360, 309, 13, 440, 636, 291, 2464, 257, 1500, 307, 291, 764, 264, 974, 264, 51707, 51707], "temperature": 0.0, "avg_logprob": -0.1372238727326089, "compression_ratio": 1.6045454545454545, "no_caption_prob": 7.2961979640240315e-06}, {"id": 226, "seek": 132930, "start": 1335.32, "end": 1341.8799999999999, "text": " development. Okay, well, shall we talk about some some more of the details of the specific", "tokens": [50364, 295, 295, 577, 436, 854, 291, 2464, 1101, 3089, 13, 823, 291, 458, 1203, 466, 1500, 9555, 50665, 50665, 3250, 13, 1033, 11, 731, 11, 4393, 321, 751, 466, 512, 512, 544, 295, 264, 4365, 295, 264, 2685, 50993, 50993, 806, 76, 1500, 7372, 30, 865, 11, 321, 393, 360, 300, 13, 492, 994, 380, 584, 577, 291, 577, 291, 2464, 257, 1500, 13, 2704, 51389, 51389, 321, 820, 352, 666, 300, 13, 961, 311, 360, 309, 13, 440, 636, 291, 2464, 257, 1500, 307, 291, 764, 264, 974, 264, 51707, 51707], "temperature": 0.0, "avg_logprob": -0.1372238727326089, "compression_ratio": 1.6045454545454545, "no_caption_prob": 7.2961979640240315e-06}, {"id": 227, "seek": 132930, "start": 1341.8799999999999, "end": 1349.8, "text": " elm test package? Yeah, we can do that. We didn't say how you how you write a test. Maybe", "tokens": [50364, 295, 295, 577, 436, 854, 291, 2464, 1101, 3089, 13, 823, 291, 458, 1203, 466, 1500, 9555, 50665, 50665, 3250, 13, 1033, 11, 731, 11, 4393, 321, 751, 466, 512, 512, 544, 295, 264, 4365, 295, 264, 2685, 50993, 50993, 806, 76, 1500, 7372, 30, 865, 11, 321, 393, 360, 300, 13, 492, 994, 380, 584, 577, 291, 577, 291, 2464, 257, 1500, 13, 2704, 51389, 51389, 321, 820, 352, 666, 300, 13, 961, 311, 360, 309, 13, 440, 636, 291, 2464, 257, 1500, 307, 291, 764, 264, 974, 264, 51707, 51707], "temperature": 0.0, "avg_logprob": -0.1372238727326089, "compression_ratio": 1.6045454545454545, "no_caption_prob": 7.2961979640240315e-06}, {"id": 228, "seek": 132930, "start": 1349.8, "end": 1356.1599999999999, "text": " we should go into that. Let's do it. The way you write a test is you use the import the", "tokens": [50364, 295, 295, 577, 436, 854, 291, 2464, 1101, 3089, 13, 823, 291, 458, 1203, 466, 1500, 9555, 50665, 50665, 3250, 13, 1033, 11, 731, 11, 4393, 321, 751, 466, 512, 512, 544, 295, 264, 4365, 295, 264, 2685, 50993, 50993, 806, 76, 1500, 7372, 30, 865, 11, 321, 393, 360, 300, 13, 492, 994, 380, 584, 577, 291, 577, 291, 2464, 257, 1500, 13, 2704, 51389, 51389, 321, 820, 352, 666, 300, 13, 961, 311, 360, 309, 13, 440, 636, 291, 2464, 257, 1500, 307, 291, 764, 264, 974, 264, 51707, 51707], "temperature": 0.0, "avg_logprob": -0.1372238727326089, "compression_ratio": 1.6045454545454545, "no_caption_prob": 7.2961979640240315e-06}, {"id": 229, "seek": 135616, "start": 1356.16, "end": 1366.1200000000001, "text": " test module. You do you call the test function from the module. So test, followed by the", "tokens": [50364, 1500, 10088, 13, 509, 360, 291, 818, 264, 1500, 2445, 490, 264, 10088, 13, 407, 1500, 11, 6263, 538, 264, 50862, 50862, 4876, 295, 264, 295, 264, 1500, 13, 400, 286, 1352, 300, 472, 1238, 1021, 570, 498, 264, 1500, 18199, 11, 51275, 51275, 291, 458, 300, 2035, 291, 4114, 294, 264, 4876, 307, 264, 551, 300, 307, 406, 1364, 3602, 13, 51604, 51604], "temperature": 0.0, "avg_logprob": -0.1562805464773467, "compression_ratio": 1.6280487804878048, "no_caption_prob": 4.2646021029213443e-05}, {"id": 230, "seek": 135616, "start": 1366.1200000000001, "end": 1374.38, "text": " title of the of the test. And I found that one pretty important because if the test fails,", "tokens": [50364, 1500, 10088, 13, 509, 360, 291, 818, 264, 1500, 2445, 490, 264, 10088, 13, 407, 1500, 11, 6263, 538, 264, 50862, 50862, 4876, 295, 264, 295, 264, 1500, 13, 400, 286, 1352, 300, 472, 1238, 1021, 570, 498, 264, 1500, 18199, 11, 51275, 51275, 291, 458, 300, 2035, 291, 4114, 294, 264, 4876, 307, 264, 551, 300, 307, 406, 1364, 3602, 13, 51604, 51604], "temperature": 0.0, "avg_logprob": -0.1562805464773467, "compression_ratio": 1.6280487804878048, "no_caption_prob": 4.2646021029213443e-05}, {"id": 231, "seek": 135616, "start": 1374.38, "end": 1380.96, "text": " you know that whatever you wrote in the title is the thing that is not working anymore.", "tokens": [50364, 1500, 10088, 13, 509, 360, 291, 818, 264, 1500, 2445, 490, 264, 10088, 13, 407, 1500, 11, 6263, 538, 264, 50862, 50862, 4876, 295, 264, 295, 264, 1500, 13, 400, 286, 1352, 300, 472, 1238, 1021, 570, 498, 264, 1500, 18199, 11, 51275, 51275, 291, 458, 300, 2035, 291, 4114, 294, 264, 4876, 307, 264, 551, 300, 307, 406, 1364, 3602, 13, 51604, 51604], "temperature": 0.0, "avg_logprob": -0.1562805464773467, "compression_ratio": 1.6280487804878048, "no_caption_prob": 4.2646021029213443e-05}, {"id": 232, "seek": 138096, "start": 1380.96, "end": 1386.2, "text": " The failing test message is like part of the thing you're building when you write a failing", "tokens": [50364, 440, 18223, 1500, 3636, 307, 411, 644, 295, 264, 551, 291, 434, 2390, 562, 291, 2464, 257, 18223, 50626, 50626, 1500, 13, 1436, 498, 309, 1562, 18199, 294, 264, 2027, 11, 300, 311, 516, 281, 312, 437, 311, 25061, 2618, 50878, 50878, 281, 3191, 264, 5463, 551, 13, 865, 11, 370, 264, 4876, 293, 264, 14334, 6713, 13, 407, 2293, 11, 764, 51228, 51228, 1293, 13, 7587, 13, 407, 1338, 11, 291, 658, 264, 4876, 13, 400, 550, 2673, 437, 291, 360, 307, 291, 11240, 4195, 51572, 51572], "temperature": 0.0, "avg_logprob": -0.1266641828748915, "compression_ratio": 1.6481481481481481, "no_caption_prob": 2.710028456931468e-05}, {"id": 233, "seek": 138096, "start": 1386.2, "end": 1391.24, "text": " test. Because if it ever fails in the future, that's going to be what's guiding somebody", "tokens": [50364, 440, 18223, 1500, 3636, 307, 411, 644, 295, 264, 551, 291, 434, 2390, 562, 291, 2464, 257, 18223, 50626, 50626, 1500, 13, 1436, 498, 309, 1562, 18199, 294, 264, 2027, 11, 300, 311, 516, 281, 312, 437, 311, 25061, 2618, 50878, 50878, 281, 3191, 264, 5463, 551, 13, 865, 11, 370, 264, 4876, 293, 264, 14334, 6713, 13, 407, 2293, 11, 764, 51228, 51228, 1293, 13, 7587, 13, 407, 1338, 11, 291, 658, 264, 4876, 13, 400, 550, 2673, 437, 291, 360, 307, 291, 11240, 4195, 51572, 51572], "temperature": 0.0, "avg_logprob": -0.1266641828748915, "compression_ratio": 1.6481481481481481, "no_caption_prob": 2.710028456931468e-05}, {"id": 234, "seek": 138096, "start": 1391.24, "end": 1398.24, "text": " to fix the broken thing. Yeah, so the title and the expectation error. So exactly, use", "tokens": [50364, 440, 18223, 1500, 3636, 307, 411, 644, 295, 264, 551, 291, 434, 2390, 562, 291, 2464, 257, 18223, 50626, 50626, 1500, 13, 1436, 498, 309, 1562, 18199, 294, 264, 2027, 11, 300, 311, 516, 281, 312, 437, 311, 25061, 2618, 50878, 50878, 281, 3191, 264, 5463, 551, 13, 865, 11, 370, 264, 4876, 293, 264, 14334, 6713, 13, 407, 2293, 11, 764, 51228, 51228, 1293, 13, 7587, 13, 407, 1338, 11, 291, 658, 264, 4876, 13, 400, 550, 2673, 437, 291, 360, 307, 291, 11240, 4195, 51572, 51572], "temperature": 0.0, "avg_logprob": -0.1266641828748915, "compression_ratio": 1.6481481481481481, "no_caption_prob": 2.710028456931468e-05}, {"id": 235, "seek": 138096, "start": 1398.24, "end": 1405.1200000000001, "text": " both. Exactly. So yeah, you got the title. And then usually what you do is you pipe user", "tokens": [50364, 440, 18223, 1500, 3636, 307, 411, 644, 295, 264, 551, 291, 434, 2390, 562, 291, 2464, 257, 18223, 50626, 50626, 1500, 13, 1436, 498, 309, 1562, 18199, 294, 264, 2027, 11, 300, 311, 516, 281, 312, 437, 311, 25061, 2618, 50878, 50878, 281, 3191, 264, 5463, 551, 13, 865, 11, 370, 264, 4876, 293, 264, 14334, 6713, 13, 407, 2293, 11, 764, 51228, 51228, 1293, 13, 7587, 13, 407, 1338, 11, 291, 658, 264, 4876, 13, 400, 550, 2673, 437, 291, 360, 307, 291, 11240, 4195, 51572, 51572], "temperature": 0.0, "avg_logprob": -0.1266641828748915, "compression_ratio": 1.6481481481481481, "no_caption_prob": 2.710028456931468e-05}, {"id": 236, "seek": 140512, "start": 1405.12, "end": 1414.56, "text": " left pizza, followed by a anonymous function. So which takes this argument, empty tuple.", "tokens": [50364, 1411, 8298, 11, 6263, 538, 257, 24932, 2445, 13, 407, 597, 2516, 341, 6770, 11, 6707, 2604, 781, 13, 50836, 50836, 407, 257, 4985, 13, 7010, 13, 400, 550, 1854, 295, 300, 11, 291, 2464, 264, 8657, 295, 264, 2445, 11, 8657, 295, 51272, 51272, 264, 1500, 11, 6263, 538, 264, 9843, 300, 291, 528, 281, 652, 988, 300, 1051, 13, 440, 1778, 51618, 51618], "temperature": 0.0, "avg_logprob": -0.17796076589555881, "compression_ratio": 1.5963855421686748, "no_caption_prob": 7.141076639527455e-05}, {"id": 237, "seek": 140512, "start": 1414.56, "end": 1423.28, "text": " So a unit. Yep. And then inside of that, you write the setup of the function, setup of", "tokens": [50364, 1411, 8298, 11, 6263, 538, 257, 24932, 2445, 13, 407, 597, 2516, 341, 6770, 11, 6707, 2604, 781, 13, 50836, 50836, 407, 257, 4985, 13, 7010, 13, 400, 550, 1854, 295, 300, 11, 291, 2464, 264, 8657, 295, 264, 2445, 11, 8657, 295, 51272, 51272, 264, 1500, 11, 6263, 538, 264, 9843, 300, 291, 528, 281, 652, 988, 300, 1051, 13, 440, 1778, 51618, 51618], "temperature": 0.0, "avg_logprob": -0.17796076589555881, "compression_ratio": 1.5963855421686748, "no_caption_prob": 7.141076639527455e-05}, {"id": 238, "seek": 140512, "start": 1423.28, "end": 1430.1999999999998, "text": " the test, followed by the expectations that you want to make sure that happen. The reason", "tokens": [50364, 1411, 8298, 11, 6263, 538, 257, 24932, 2445, 13, 407, 597, 2516, 341, 6770, 11, 6707, 2604, 781, 13, 50836, 50836, 407, 257, 4985, 13, 7010, 13, 400, 550, 1854, 295, 300, 11, 291, 2464, 264, 8657, 295, 264, 2445, 11, 8657, 295, 51272, 51272, 264, 1500, 11, 6263, 538, 264, 9843, 300, 291, 528, 281, 652, 988, 300, 1051, 13, 440, 1778, 51618, 51618], "temperature": 0.0, "avg_logprob": -0.17796076589555881, "compression_ratio": 1.5963855421686748, "no_caption_prob": 7.141076639527455e-05}, {"id": 239, "seek": 143020, "start": 1430.2, "end": 1438.82, "text": " why there is a anonymous function is for performance reasons. So that's if you only want to run", "tokens": [50364, 983, 456, 307, 257, 24932, 2445, 307, 337, 3389, 4112, 13, 407, 300, 311, 498, 291, 787, 528, 281, 1190, 50795, 50795, 6921, 490, 472, 3991, 490, 472, 2685, 4914, 11, 439, 264, 6921, 366, 406, 1190, 322, 300, 17577, 51260, 51260, 2293, 14115, 356, 13, 1436, 2699, 76, 775, 18259, 13344, 13, 407, 498, 291, 865, 11, 498, 291, 652, 309, 51619, 51619], "temperature": 0.0, "avg_logprob": -0.19821836009170068, "compression_ratio": 1.5055555555555555, "no_caption_prob": 1.3006802873860579e-05}, {"id": 240, "seek": 143020, "start": 1438.82, "end": 1448.1200000000001, "text": " tests from one file from one specific location, all the tests are not run on that executed", "tokens": [50364, 983, 456, 307, 257, 24932, 2445, 307, 337, 3389, 4112, 13, 407, 300, 311, 498, 291, 787, 528, 281, 1190, 50795, 50795, 6921, 490, 472, 3991, 490, 472, 2685, 4914, 11, 439, 264, 6921, 366, 406, 1190, 322, 300, 17577, 51260, 51260, 2293, 14115, 356, 13, 1436, 2699, 76, 775, 18259, 13344, 13, 407, 498, 291, 865, 11, 498, 291, 652, 309, 51619, 51619], "temperature": 0.0, "avg_logprob": -0.19821836009170068, "compression_ratio": 1.5055555555555555, "no_caption_prob": 1.3006802873860579e-05}, {"id": 241, "seek": 143020, "start": 1448.1200000000001, "end": 1455.3, "text": " exactly uselessly. Because Elm does eager evaluation. So if you Yeah, if you make it", "tokens": [50364, 983, 456, 307, 257, 24932, 2445, 307, 337, 3389, 4112, 13, 407, 300, 311, 498, 291, 787, 528, 281, 1190, 50795, 50795, 6921, 490, 472, 3991, 490, 472, 2685, 4914, 11, 439, 264, 6921, 366, 406, 1190, 322, 300, 17577, 51260, 51260, 2293, 14115, 356, 13, 1436, 2699, 76, 775, 18259, 13344, 13, 407, 498, 291, 865, 11, 498, 291, 652, 309, 51619, 51619], "temperature": 0.0, "avg_logprob": -0.19821836009170068, "compression_ratio": 1.5055555555555555, "no_caption_prob": 1.3006802873860579e-05}, {"id": 242, "seek": 145530, "start": 1455.3, "end": 1461.28, "text": " a lambda, then you have to pass an argument for it to evaluate that. Whereas if you don't", "tokens": [50364, 257, 13607, 11, 550, 291, 362, 281, 1320, 364, 6770, 337, 309, 281, 13059, 300, 13, 13813, 498, 291, 500, 380, 50663, 50663, 818, 300, 13607, 11, 309, 311, 406, 516, 281, 13059, 264, 1772, 295, 300, 13607, 1826, 291, 1320, 294, 50911, 50911, 264, 4985, 281, 300, 13, 865, 11, 597, 1669, 1203, 709, 11, 709, 4663, 13, 865, 11, 293, 309, 4045, 264, 51283, 51283, 1500, 8388, 281, 976, 291, 5824, 382, 309, 311, 2614, 721, 2831, 813, 445, 17776, 322, 51591, 51591], "temperature": 0.0, "avg_logprob": -0.07131522825394554, "compression_ratio": 1.6777251184834123, "no_caption_prob": 8.092106872936711e-05}, {"id": 243, "seek": 145530, "start": 1461.28, "end": 1466.24, "text": " call that lambda, it's not going to evaluate the body of that lambda until you pass in", "tokens": [50364, 257, 13607, 11, 550, 291, 362, 281, 1320, 364, 6770, 337, 309, 281, 13059, 300, 13, 13813, 498, 291, 500, 380, 50663, 50663, 818, 300, 13607, 11, 309, 311, 406, 516, 281, 13059, 264, 1772, 295, 300, 13607, 1826, 291, 1320, 294, 50911, 50911, 264, 4985, 281, 300, 13, 865, 11, 597, 1669, 1203, 709, 11, 709, 4663, 13, 865, 11, 293, 309, 4045, 264, 51283, 51283, 1500, 8388, 281, 976, 291, 5824, 382, 309, 311, 2614, 721, 2831, 813, 445, 17776, 322, 51591, 51591], "temperature": 0.0, "avg_logprob": -0.07131522825394554, "compression_ratio": 1.6777251184834123, "no_caption_prob": 8.092106872936711e-05}, {"id": 244, "seek": 145530, "start": 1466.24, "end": 1473.68, "text": " the unit to that. Yeah, which makes everything much, much faster. Yeah, and it allows the", "tokens": [50364, 257, 13607, 11, 550, 291, 362, 281, 1320, 364, 6770, 337, 309, 281, 13059, 300, 13, 13813, 498, 291, 500, 380, 50663, 50663, 818, 300, 13607, 11, 309, 311, 406, 516, 281, 13059, 264, 1772, 295, 300, 13607, 1826, 291, 1320, 294, 50911, 50911, 264, 4985, 281, 300, 13, 865, 11, 597, 1669, 1203, 709, 11, 709, 4663, 13, 865, 11, 293, 309, 4045, 264, 51283, 51283, 1500, 8388, 281, 976, 291, 5824, 382, 309, 311, 2614, 721, 2831, 813, 445, 17776, 322, 51591, 51591], "temperature": 0.0, "avg_logprob": -0.07131522825394554, "compression_ratio": 1.6777251184834123, "no_caption_prob": 8.092106872936711e-05}, {"id": 245, "seek": 145530, "start": 1473.68, "end": 1479.84, "text": " test framework to give you feedback as it's running things rather than just blocking on", "tokens": [50364, 257, 13607, 11, 550, 291, 362, 281, 1320, 364, 6770, 337, 309, 281, 13059, 300, 13, 13813, 498, 291, 500, 380, 50663, 50663, 818, 300, 13607, 11, 309, 311, 406, 516, 281, 13059, 264, 1772, 295, 300, 13607, 1826, 291, 1320, 294, 50911, 50911, 264, 4985, 281, 300, 13, 865, 11, 597, 1669, 1203, 709, 11, 709, 4663, 13, 865, 11, 293, 309, 4045, 264, 51283, 51283, 1500, 8388, 281, 976, 291, 5824, 382, 309, 311, 2614, 721, 2831, 813, 445, 17776, 322, 51591, 51591], "temperature": 0.0, "avg_logprob": -0.07131522825394554, "compression_ratio": 1.6777251184834123, "no_caption_prob": 8.092106872936711e-05}, {"id": 246, "seek": 147984, "start": 1479.84, "end": 1485.9599999999998, "text": " evaluating everything at once and then Yeah, giving you feedback. And I think another thing,", "tokens": [50364, 27479, 1203, 412, 1564, 293, 550, 865, 11, 2902, 291, 5824, 13, 400, 286, 519, 1071, 551, 11, 50670, 50670, 286, 2041, 456, 727, 362, 668, 257, 819, 1715, 337, 341, 13, 583, 300, 4985, 6770, 295, 50936, 50936, 300, 13607, 11, 309, 3643, 257, 2158, 498, 291, 434, 884, 283, 16740, 4997, 13, 865, 13, 12128, 321, 483, 666, 51248, 51248, 283, 16740, 4997, 586, 550, 30, 492, 815, 382, 731, 13, 961, 311, 360, 309, 13, 407, 437, 307, 283, 16740, 4997, 28160, 30, 1042, 11, 51660, 51660], "temperature": 0.0, "avg_logprob": -0.15027978109276813, "compression_ratio": 1.5644444444444445, "no_caption_prob": 3.5911682061851025e-05}, {"id": 247, "seek": 147984, "start": 1485.9599999999998, "end": 1491.28, "text": " I guess there could have been a different design for this. But that unit argument of", "tokens": [50364, 27479, 1203, 412, 1564, 293, 550, 865, 11, 2902, 291, 5824, 13, 400, 286, 519, 1071, 551, 11, 50670, 50670, 286, 2041, 456, 727, 362, 668, 257, 819, 1715, 337, 341, 13, 583, 300, 4985, 6770, 295, 50936, 50936, 300, 13607, 11, 309, 3643, 257, 2158, 498, 291, 434, 884, 283, 16740, 4997, 13, 865, 13, 12128, 321, 483, 666, 51248, 51248, 283, 16740, 4997, 586, 550, 30, 492, 815, 382, 731, 13, 961, 311, 360, 309, 13, 407, 437, 307, 283, 16740, 4997, 28160, 30, 1042, 11, 51660, 51660], "temperature": 0.0, "avg_logprob": -0.15027978109276813, "compression_ratio": 1.5644444444444445, "no_caption_prob": 3.5911682061851025e-05}, {"id": 248, "seek": 147984, "start": 1491.28, "end": 1497.52, "text": " that lambda, it becomes a value if you're doing fuzz testing. Yeah. Shall we get into", "tokens": [50364, 27479, 1203, 412, 1564, 293, 550, 865, 11, 2902, 291, 5824, 13, 400, 286, 519, 1071, 551, 11, 50670, 50670, 286, 2041, 456, 727, 362, 668, 257, 819, 1715, 337, 341, 13, 583, 300, 4985, 6770, 295, 50936, 50936, 300, 13607, 11, 309, 3643, 257, 2158, 498, 291, 434, 884, 283, 16740, 4997, 13, 865, 13, 12128, 321, 483, 666, 51248, 51248, 283, 16740, 4997, 586, 550, 30, 492, 815, 382, 731, 13, 961, 311, 360, 309, 13, 407, 437, 307, 283, 16740, 4997, 28160, 30, 1042, 11, 51660, 51660], "temperature": 0.0, "avg_logprob": -0.15027978109276813, "compression_ratio": 1.5644444444444445, "no_caption_prob": 3.5911682061851025e-05}, {"id": 249, "seek": 147984, "start": 1497.52, "end": 1505.76, "text": " fuzz testing now then? We may as well. Let's do it. So what is fuzz testing Dillon? Well,", "tokens": [50364, 27479, 1203, 412, 1564, 293, 550, 865, 11, 2902, 291, 5824, 13, 400, 286, 519, 1071, 551, 11, 50670, 50670, 286, 2041, 456, 727, 362, 668, 257, 819, 1715, 337, 341, 13, 583, 300, 4985, 6770, 295, 50936, 50936, 300, 13607, 11, 309, 3643, 257, 2158, 498, 291, 434, 884, 283, 16740, 4997, 13, 865, 13, 12128, 321, 483, 666, 51248, 51248, 283, 16740, 4997, 586, 550, 30, 492, 815, 382, 731, 13, 961, 311, 360, 309, 13, 407, 437, 307, 283, 16740, 4997, 28160, 30, 1042, 11, 51660, 51660], "temperature": 0.0, "avg_logprob": -0.15027978109276813, "compression_ratio": 1.5644444444444445, "no_caption_prob": 3.5911682061851025e-05}, {"id": 250, "seek": 150576, "start": 1505.76, "end": 1511.8, "text": " fuzz testing is also known as property testing property based testing. And I think actually", "tokens": [50364, 283, 16740, 4997, 307, 611, 2570, 382, 4707, 4997, 4707, 2361, 4997, 13, 400, 286, 519, 767, 50666, 50666, 4707, 2361, 4997, 307, 257, 665, 1433, 337, 309, 886, 11, 570, 309, 733, 295, 2709, 291, 341, 50942, 50942, 2020, 300, 291, 434, 4997, 257, 2674, 1508, 295, 1412, 13, 407, 291, 291, 434, 1455, 19810, 626, 466, 51244, 51244, 7221, 295, 300, 1508, 295, 1412, 11, 2831, 813, 294, 264, 5164, 4985, 4997, 3758, 11, 1455, 51590, 51590], "temperature": 0.0, "avg_logprob": -0.07056661299717279, "compression_ratio": 1.78, "no_caption_prob": 3.591179120121524e-05}, {"id": 251, "seek": 150576, "start": 1511.8, "end": 1517.32, "text": " property based testing is a good term for it too, because it kind of gives you this", "tokens": [50364, 283, 16740, 4997, 307, 611, 2570, 382, 4707, 4997, 4707, 2361, 4997, 13, 400, 286, 519, 767, 50666, 50666, 4707, 2361, 4997, 307, 257, 665, 1433, 337, 309, 886, 11, 570, 309, 733, 295, 2709, 291, 341, 50942, 50942, 2020, 300, 291, 434, 4997, 257, 2674, 1508, 295, 1412, 13, 407, 291, 291, 434, 1455, 19810, 626, 466, 51244, 51244, 7221, 295, 300, 1508, 295, 1412, 11, 2831, 813, 294, 264, 5164, 4985, 4997, 3758, 11, 1455, 51590, 51590], "temperature": 0.0, "avg_logprob": -0.07056661299717279, "compression_ratio": 1.78, "no_caption_prob": 3.591179120121524e-05}, {"id": 252, "seek": 150576, "start": 1517.32, "end": 1523.36, "text": " sense that you're testing a general class of data. So you you're making assertions about", "tokens": [50364, 283, 16740, 4997, 307, 611, 2570, 382, 4707, 4997, 4707, 2361, 4997, 13, 400, 286, 519, 767, 50666, 50666, 4707, 2361, 4997, 307, 257, 665, 1433, 337, 309, 886, 11, 570, 309, 733, 295, 2709, 291, 341, 50942, 50942, 2020, 300, 291, 434, 4997, 257, 2674, 1508, 295, 1412, 13, 407, 291, 291, 434, 1455, 19810, 626, 466, 51244, 51244, 7221, 295, 300, 1508, 295, 1412, 11, 2831, 813, 294, 264, 5164, 4985, 4997, 3758, 11, 1455, 51590, 51590], "temperature": 0.0, "avg_logprob": -0.07056661299717279, "compression_ratio": 1.78, "no_caption_prob": 3.591179120121524e-05}, {"id": 253, "seek": 150576, "start": 1523.36, "end": 1530.28, "text": " properties of that class of data, rather than in the traditional unit testing style, making", "tokens": [50364, 283, 16740, 4997, 307, 611, 2570, 382, 4707, 4997, 4707, 2361, 4997, 13, 400, 286, 519, 767, 50666, 50666, 4707, 2361, 4997, 307, 257, 665, 1433, 337, 309, 886, 11, 570, 309, 733, 295, 2709, 291, 341, 50942, 50942, 2020, 300, 291, 434, 4997, 257, 2674, 1508, 295, 1412, 13, 407, 291, 291, 434, 1455, 19810, 626, 466, 51244, 51244, 7221, 295, 300, 1508, 295, 1412, 11, 2831, 813, 294, 264, 5164, 4985, 4997, 3758, 11, 1455, 51590, 51590], "temperature": 0.0, "avg_logprob": -0.07056661299717279, "compression_ratio": 1.78, "no_caption_prob": 3.591179120121524e-05}, {"id": 254, "seek": 153028, "start": 1530.28, "end": 1536.72, "text": " assertions about one specific case, one specific function call, and the output of that. So", "tokens": [50364, 19810, 626, 466, 472, 2685, 1389, 11, 472, 2685, 2445, 818, 11, 293, 264, 5598, 295, 300, 13, 407, 50686, 50686, 437, 283, 16740, 4997, 775, 307, 309, 4960, 257, 4974, 19265, 365, 257, 4974, 8871, 11, 291, 393, 1322, 50966, 50966, 493, 2139, 2199, 420, 3997, 1412, 3467, 11, 291, 727, 291, 727, 360, 283, 16740, 5893, 560, 281, 362, 257, 51229, 51229, 283, 3334, 4527, 300, 2709, 291, 364, 560, 11, 291, 393, 1322, 493, 257, 283, 3334, 4527, 588, 709, 411, 291, 1322, 493, 257, 51552, 51552], "temperature": 0.0, "avg_logprob": -0.09267649443253227, "compression_ratio": 1.7715736040609138, "no_caption_prob": 0.0002098569821100682}, {"id": 255, "seek": 153028, "start": 1536.72, "end": 1542.32, "text": " what fuzz testing does is it uses a random generator with a random seed, you can build", "tokens": [50364, 19810, 626, 466, 472, 2685, 1389, 11, 472, 2685, 2445, 818, 11, 293, 264, 5598, 295, 300, 13, 407, 50686, 50686, 437, 283, 16740, 4997, 775, 307, 309, 4960, 257, 4974, 19265, 365, 257, 4974, 8871, 11, 291, 393, 1322, 50966, 50966, 493, 2139, 2199, 420, 3997, 1412, 3467, 11, 291, 727, 291, 727, 360, 283, 16740, 5893, 560, 281, 362, 257, 51229, 51229, 283, 3334, 4527, 300, 2709, 291, 364, 560, 11, 291, 393, 1322, 493, 257, 283, 3334, 4527, 588, 709, 411, 291, 1322, 493, 257, 51552, 51552], "temperature": 0.0, "avg_logprob": -0.09267649443253227, "compression_ratio": 1.7715736040609138, "no_caption_prob": 0.0002098569821100682}, {"id": 256, "seek": 153028, "start": 1542.32, "end": 1547.58, "text": " up either simple or complex data types, you could you could do fuzz dot int to have a", "tokens": [50364, 19810, 626, 466, 472, 2685, 1389, 11, 472, 2685, 2445, 818, 11, 293, 264, 5598, 295, 300, 13, 407, 50686, 50686, 437, 283, 16740, 4997, 775, 307, 309, 4960, 257, 4974, 19265, 365, 257, 4974, 8871, 11, 291, 393, 1322, 50966, 50966, 493, 2139, 2199, 420, 3997, 1412, 3467, 11, 291, 727, 291, 727, 360, 283, 16740, 5893, 560, 281, 362, 257, 51229, 51229, 283, 3334, 4527, 300, 2709, 291, 364, 560, 11, 291, 393, 1322, 493, 257, 283, 3334, 4527, 588, 709, 411, 291, 1322, 493, 257, 51552, 51552], "temperature": 0.0, "avg_logprob": -0.09267649443253227, "compression_ratio": 1.7715736040609138, "no_caption_prob": 0.0002098569821100682}, {"id": 257, "seek": 153028, "start": 1547.58, "end": 1554.04, "text": " fuzzer that gives you an int, you can build up a fuzzer very much like you build up a", "tokens": [50364, 19810, 626, 466, 472, 2685, 1389, 11, 472, 2685, 2445, 818, 11, 293, 264, 5598, 295, 300, 13, 407, 50686, 50686, 437, 283, 16740, 4997, 775, 307, 309, 4960, 257, 4974, 19265, 365, 257, 4974, 8871, 11, 291, 393, 1322, 50966, 50966, 493, 2139, 2199, 420, 3997, 1412, 3467, 11, 291, 727, 291, 727, 360, 283, 16740, 5893, 560, 281, 362, 257, 51229, 51229, 283, 3334, 4527, 300, 2709, 291, 364, 560, 11, 291, 393, 1322, 493, 257, 283, 3334, 4527, 588, 709, 411, 291, 1322, 493, 257, 51552, 51552], "temperature": 0.0, "avg_logprob": -0.09267649443253227, "compression_ratio": 1.7715736040609138, "no_caption_prob": 0.0002098569821100682}, {"id": 258, "seek": 155404, "start": 1554.04, "end": 1561.24, "text": " decoder. And get a complex data type, you could build your own custom data type. And", "tokens": [50364, 979, 19866, 13, 400, 483, 257, 3997, 1412, 2010, 11, 291, 727, 1322, 428, 1065, 2375, 1412, 2010, 13, 400, 50724, 50724, 550, 291, 458, 11, 291, 393, 483, 257, 1329, 295, 729, 283, 3334, 11312, 4190, 293, 35925, 552, 1214, 709, 50960, 50960, 411, 257, 979, 19866, 13, 400, 550, 291, 291, 652, 19810, 626, 466, 729, 16979, 10833, 4190, 13, 400, 51252, 51252, 498, 291, 528, 281, 29501, 257, 1729, 7763, 11, 550, 291, 393, 5055, 264, 4974, 8871, 293, 1320, 51626, 51626], "temperature": 0.0, "avg_logprob": -0.07766324624247935, "compression_ratio": 1.7352941176470589, "no_caption_prob": 5.649553349940106e-05}, {"id": 259, "seek": 155404, "start": 1561.24, "end": 1565.96, "text": " then you know, you can get a list of those fuzzed values and compose them together much", "tokens": [50364, 979, 19866, 13, 400, 483, 257, 3997, 1412, 2010, 11, 291, 727, 1322, 428, 1065, 2375, 1412, 2010, 13, 400, 50724, 50724, 550, 291, 458, 11, 291, 393, 483, 257, 1329, 295, 729, 283, 3334, 11312, 4190, 293, 35925, 552, 1214, 709, 50960, 50960, 411, 257, 979, 19866, 13, 400, 550, 291, 291, 652, 19810, 626, 466, 729, 16979, 10833, 4190, 13, 400, 51252, 51252, 498, 291, 528, 281, 29501, 257, 1729, 7763, 11, 550, 291, 393, 5055, 264, 4974, 8871, 293, 1320, 51626, 51626], "temperature": 0.0, "avg_logprob": -0.07766324624247935, "compression_ratio": 1.7352941176470589, "no_caption_prob": 5.649553349940106e-05}, {"id": 260, "seek": 155404, "start": 1565.96, "end": 1571.8, "text": " like a decoder. And then you you make assertions about those randomly generated values. And", "tokens": [50364, 979, 19866, 13, 400, 483, 257, 3997, 1412, 2010, 11, 291, 727, 1322, 428, 1065, 2375, 1412, 2010, 13, 400, 50724, 50724, 550, 291, 458, 11, 291, 393, 483, 257, 1329, 295, 729, 283, 3334, 11312, 4190, 293, 35925, 552, 1214, 709, 50960, 50960, 411, 257, 979, 19866, 13, 400, 550, 291, 291, 652, 19810, 626, 466, 729, 16979, 10833, 4190, 13, 400, 51252, 51252, 498, 291, 528, 281, 29501, 257, 1729, 7763, 11, 550, 291, 393, 5055, 264, 4974, 8871, 293, 1320, 51626, 51626], "temperature": 0.0, "avg_logprob": -0.07766324624247935, "compression_ratio": 1.7352941176470589, "no_caption_prob": 5.649553349940106e-05}, {"id": 261, "seek": 155404, "start": 1571.8, "end": 1579.28, "text": " if you want to reproduce a particular failure, then you can copy the random seed and pass", "tokens": [50364, 979, 19866, 13, 400, 483, 257, 3997, 1412, 2010, 11, 291, 727, 1322, 428, 1065, 2375, 1412, 2010, 13, 400, 50724, 50724, 550, 291, 458, 11, 291, 393, 483, 257, 1329, 295, 729, 283, 3334, 11312, 4190, 293, 35925, 552, 1214, 709, 50960, 50960, 411, 257, 979, 19866, 13, 400, 550, 291, 291, 652, 19810, 626, 466, 729, 16979, 10833, 4190, 13, 400, 51252, 51252, 498, 291, 528, 281, 29501, 257, 1729, 7763, 11, 550, 291, 393, 5055, 264, 4974, 8871, 293, 1320, 51626, 51626], "temperature": 0.0, "avg_logprob": -0.07766324624247935, "compression_ratio": 1.7352941176470589, "no_caption_prob": 5.649553349940106e-05}, {"id": 262, "seek": 157928, "start": 1579.28, "end": 1584.2, "text": " that in as a flag when you run elm test on the command line. Yeah. And because when elm", "tokens": [50364, 300, 294, 382, 257, 7166, 562, 291, 1190, 806, 76, 1500, 322, 264, 5622, 1622, 13, 865, 13, 400, 570, 562, 806, 76, 50610, 50610, 1500, 18199, 11, 291, 483, 257, 955, 6713, 3636, 1566, 11, 4177, 11, 498, 291, 528, 281, 5258, 309, 2293, 411, 50920, 50920, 264, 636, 286, 445, 5872, 309, 11, 1190, 341, 5622, 293, 309, 8306, 257, 8871, 7166, 293, 264, 1329, 295, 7098, 13, 51288, 51288, 7587, 13, 400, 293, 264, 1778, 300, 309, 311, 300, 309, 311, 2614, 309, 365, 257, 4974, 8871, 13, 440, 935, 51616, 51616], "temperature": 0.0, "avg_logprob": -0.1427382537999104, "compression_ratio": 1.617117117117117, "no_caption_prob": 6.604962982237339e-05}, {"id": 263, "seek": 157928, "start": 1584.2, "end": 1590.3999999999999, "text": " test fails, you get a big error message saying, hey, if you want to produce it exactly like", "tokens": [50364, 300, 294, 382, 257, 7166, 562, 291, 1190, 806, 76, 1500, 322, 264, 5622, 1622, 13, 865, 13, 400, 570, 562, 806, 76, 50610, 50610, 1500, 18199, 11, 291, 483, 257, 955, 6713, 3636, 1566, 11, 4177, 11, 498, 291, 528, 281, 5258, 309, 2293, 411, 50920, 50920, 264, 636, 286, 445, 5872, 309, 11, 1190, 341, 5622, 293, 309, 8306, 257, 8871, 7166, 293, 264, 1329, 295, 7098, 13, 51288, 51288, 7587, 13, 400, 293, 264, 1778, 300, 309, 311, 300, 309, 311, 2614, 309, 365, 257, 4974, 8871, 13, 440, 935, 51616, 51616], "temperature": 0.0, "avg_logprob": -0.1427382537999104, "compression_ratio": 1.617117117117117, "no_caption_prob": 6.604962982237339e-05}, {"id": 264, "seek": 157928, "start": 1590.3999999999999, "end": 1597.76, "text": " the way I just ran it, run this command and it contains a seed flag and the list of files.", "tokens": [50364, 300, 294, 382, 257, 7166, 562, 291, 1190, 806, 76, 1500, 322, 264, 5622, 1622, 13, 865, 13, 400, 570, 562, 806, 76, 50610, 50610, 1500, 18199, 11, 291, 483, 257, 955, 6713, 3636, 1566, 11, 4177, 11, 498, 291, 528, 281, 5258, 309, 2293, 411, 50920, 50920, 264, 636, 286, 445, 5872, 309, 11, 1190, 341, 5622, 293, 309, 8306, 257, 8871, 7166, 293, 264, 1329, 295, 7098, 13, 51288, 51288, 7587, 13, 400, 293, 264, 1778, 300, 309, 311, 300, 309, 311, 2614, 309, 365, 257, 4974, 8871, 13, 440, 935, 51616, 51616], "temperature": 0.0, "avg_logprob": -0.1427382537999104, "compression_ratio": 1.617117117117117, "no_caption_prob": 6.604962982237339e-05}, {"id": 265, "seek": 157928, "start": 1597.76, "end": 1604.32, "text": " Exactly. And and the reason that it's that it's running it with a random seed. The point", "tokens": [50364, 300, 294, 382, 257, 7166, 562, 291, 1190, 806, 76, 1500, 322, 264, 5622, 1622, 13, 865, 13, 400, 570, 562, 806, 76, 50610, 50610, 1500, 18199, 11, 291, 483, 257, 955, 6713, 3636, 1566, 11, 4177, 11, 498, 291, 528, 281, 5258, 309, 2293, 411, 50920, 50920, 264, 636, 286, 445, 5872, 309, 11, 1190, 341, 5622, 293, 309, 8306, 257, 8871, 7166, 293, 264, 1329, 295, 7098, 13, 51288, 51288, 7587, 13, 400, 293, 264, 1778, 300, 309, 311, 300, 309, 311, 2614, 309, 365, 257, 4974, 8871, 13, 440, 935, 51616, 51616], "temperature": 0.0, "avg_logprob": -0.1427382537999104, "compression_ratio": 1.617117117117117, "no_caption_prob": 6.604962982237339e-05}, {"id": 266, "seek": 160432, "start": 1604.32, "end": 1609.76, "text": " is, like conceptually, you're not running the test against one value, you're running", "tokens": [50364, 307, 11, 411, 3410, 671, 11, 291, 434, 406, 2614, 264, 1500, 1970, 472, 2158, 11, 291, 434, 2614, 50636, 50636, 309, 1970, 364, 13785, 20004, 992, 13, 400, 291, 434, 1228, 257, 4974, 6889, 295, 300, 13, 583, 633, 565, 50978, 50978, 428, 1500, 6676, 294, 428, 37777, 420, 428, 2654, 2823, 11, 309, 311, 2614, 322, 257, 819, 4974, 6889, 13, 51226, 51226, 407, 382, 291, 1190, 264, 6921, 544, 11, 291, 3109, 2614, 264, 6921, 322, 264, 13785, 6889, 295, 51594, 51594, 1203, 293, 1256, 27187, 300, 4707, 466, 300, 1379, 1412, 992, 13, 1079, 13, 286, 478, 406, 988, 498, 51862, 51862], "temperature": 0.0, "avg_logprob": -0.14448830816480848, "compression_ratio": 1.8089430894308942, "no_caption_prob": 5.307259925757535e-05}, {"id": 267, "seek": 160432, "start": 1609.76, "end": 1616.6, "text": " it against an infinite sized set. And you're using a random sample of that. But every time", "tokens": [50364, 307, 11, 411, 3410, 671, 11, 291, 434, 406, 2614, 264, 1500, 1970, 472, 2158, 11, 291, 434, 2614, 50636, 50636, 309, 1970, 364, 13785, 20004, 992, 13, 400, 291, 434, 1228, 257, 4974, 6889, 295, 300, 13, 583, 633, 565, 50978, 50978, 428, 1500, 6676, 294, 428, 37777, 420, 428, 2654, 2823, 11, 309, 311, 2614, 322, 257, 819, 4974, 6889, 13, 51226, 51226, 407, 382, 291, 1190, 264, 6921, 544, 11, 291, 3109, 2614, 264, 6921, 322, 264, 13785, 6889, 295, 51594, 51594, 1203, 293, 1256, 27187, 300, 4707, 466, 300, 1379, 1412, 992, 13, 1079, 13, 286, 478, 406, 988, 498, 51862, 51862], "temperature": 0.0, "avg_logprob": -0.14448830816480848, "compression_ratio": 1.8089430894308942, "no_caption_prob": 5.307259925757535e-05}, {"id": 268, "seek": 160432, "start": 1616.6, "end": 1621.56, "text": " your test runs in your CI or your local environment, it's running on a different random sample.", "tokens": [50364, 307, 11, 411, 3410, 671, 11, 291, 434, 406, 2614, 264, 1500, 1970, 472, 2158, 11, 291, 434, 2614, 50636, 50636, 309, 1970, 364, 13785, 20004, 992, 13, 400, 291, 434, 1228, 257, 4974, 6889, 295, 300, 13, 583, 633, 565, 50978, 50978, 428, 1500, 6676, 294, 428, 37777, 420, 428, 2654, 2823, 11, 309, 311, 2614, 322, 257, 819, 4974, 6889, 13, 51226, 51226, 407, 382, 291, 1190, 264, 6921, 544, 11, 291, 3109, 2614, 264, 6921, 322, 264, 13785, 6889, 295, 51594, 51594, 1203, 293, 1256, 27187, 300, 4707, 466, 300, 1379, 1412, 992, 13, 1079, 13, 286, 478, 406, 988, 498, 51862, 51862], "temperature": 0.0, "avg_logprob": -0.14448830816480848, "compression_ratio": 1.8089430894308942, "no_caption_prob": 5.307259925757535e-05}, {"id": 269, "seek": 160432, "start": 1621.56, "end": 1628.9199999999998, "text": " So as you run the tests more, you approach running the tests on the infinite sample of", "tokens": [50364, 307, 11, 411, 3410, 671, 11, 291, 434, 406, 2614, 264, 1500, 1970, 472, 2158, 11, 291, 434, 2614, 50636, 50636, 309, 1970, 364, 13785, 20004, 992, 13, 400, 291, 434, 1228, 257, 4974, 6889, 295, 300, 13, 583, 633, 565, 50978, 50978, 428, 1500, 6676, 294, 428, 37777, 420, 428, 2654, 2823, 11, 309, 311, 2614, 322, 257, 819, 4974, 6889, 13, 51226, 51226, 407, 382, 291, 1190, 264, 6921, 544, 11, 291, 3109, 2614, 264, 6921, 322, 264, 13785, 6889, 295, 51594, 51594, 1203, 293, 1256, 27187, 300, 4707, 466, 300, 1379, 1412, 992, 13, 1079, 13, 286, 478, 406, 988, 498, 51862, 51862], "temperature": 0.0, "avg_logprob": -0.14448830816480848, "compression_ratio": 1.8089430894308942, "no_caption_prob": 5.307259925757535e-05}, {"id": 270, "seek": 160432, "start": 1628.9199999999998, "end": 1634.28, "text": " everything and asserting that property about that whole data set. Yes. I'm not sure if", "tokens": [50364, 307, 11, 411, 3410, 671, 11, 291, 434, 406, 2614, 264, 1500, 1970, 472, 2158, 11, 291, 434, 2614, 50636, 50636, 309, 1970, 364, 13785, 20004, 992, 13, 400, 291, 434, 1228, 257, 4974, 6889, 295, 300, 13, 583, 633, 565, 50978, 50978, 428, 1500, 6676, 294, 428, 37777, 420, 428, 2654, 2823, 11, 309, 311, 2614, 322, 257, 819, 4974, 6889, 13, 51226, 51226, 407, 382, 291, 1190, 264, 6921, 544, 11, 291, 3109, 2614, 264, 6921, 322, 264, 13785, 6889, 295, 51594, 51594, 1203, 293, 1256, 27187, 300, 4707, 466, 300, 1379, 1412, 992, 13, 1079, 13, 286, 478, 406, 988, 498, 51862, 51862], "temperature": 0.0, "avg_logprob": -0.14448830816480848, "compression_ratio": 1.8089430894308942, "no_caption_prob": 5.307259925757535e-05}, {"id": 271, "seek": 163428, "start": 1634.28, "end": 1641.2, "text": " we actually said it, but the idea is that you write your test, your first test, and", "tokens": [50364, 321, 767, 848, 309, 11, 457, 264, 1558, 307, 300, 291, 2464, 428, 1500, 11, 428, 700, 1500, 11, 293, 50710, 50710, 550, 309, 486, 1190, 257, 688, 295, 1413, 11, 2673, 2319, 1413, 13, 865, 11, 286, 519, 300, 311, 264, 7576, 365, 51026, 51026, 819, 15743, 13, 1079, 11, 2293, 13, 407, 1338, 11, 5699, 291, 291, 1190, 428, 1500, 11, 291, 483, 2319, 420, 544, 51472, 51472, 498, 291, 528, 281, 1500, 8460, 309, 365, 4190, 300, 652, 2020, 300, 500, 380, 652, 2020, 13, 583, 51794, 51794], "temperature": 0.0, "avg_logprob": -0.12635203330747544, "compression_ratio": 1.6572769953051643, "no_caption_prob": 7.843143248464912e-05}, {"id": 272, "seek": 163428, "start": 1641.2, "end": 1647.52, "text": " then it will run a lot of times, usually 100 times. Yeah, I think that's the default with", "tokens": [50364, 321, 767, 848, 309, 11, 457, 264, 1558, 307, 300, 291, 2464, 428, 1500, 11, 428, 700, 1500, 11, 293, 50710, 50710, 550, 309, 486, 1190, 257, 688, 295, 1413, 11, 2673, 2319, 1413, 13, 865, 11, 286, 519, 300, 311, 264, 7576, 365, 51026, 51026, 819, 15743, 13, 1079, 11, 2293, 13, 407, 1338, 11, 5699, 291, 291, 1190, 428, 1500, 11, 291, 483, 2319, 420, 544, 51472, 51472, 498, 291, 528, 281, 1500, 8460, 309, 365, 4190, 300, 652, 2020, 300, 500, 380, 652, 2020, 13, 583, 51794, 51794], "temperature": 0.0, "avg_logprob": -0.12635203330747544, "compression_ratio": 1.6572769953051643, "no_caption_prob": 7.843143248464912e-05}, {"id": 273, "seek": 163428, "start": 1647.52, "end": 1656.44, "text": " different inputs. Yes, exactly. So yeah, whenever you you run your test, you get 100 or more", "tokens": [50364, 321, 767, 848, 309, 11, 457, 264, 1558, 307, 300, 291, 2464, 428, 1500, 11, 428, 700, 1500, 11, 293, 50710, 50710, 550, 309, 486, 1190, 257, 688, 295, 1413, 11, 2673, 2319, 1413, 13, 865, 11, 286, 519, 300, 311, 264, 7576, 365, 51026, 51026, 819, 15743, 13, 1079, 11, 2293, 13, 407, 1338, 11, 5699, 291, 291, 1190, 428, 1500, 11, 291, 483, 2319, 420, 544, 51472, 51472, 498, 291, 528, 281, 1500, 8460, 309, 365, 4190, 300, 652, 2020, 300, 500, 380, 652, 2020, 13, 583, 51794, 51794], "temperature": 0.0, "avg_logprob": -0.12635203330747544, "compression_ratio": 1.6572769953051643, "no_caption_prob": 7.843143248464912e-05}, {"id": 274, "seek": 163428, "start": 1656.44, "end": 1662.8799999999999, "text": " if you want to test generate it with values that make sense that don't make sense. But", "tokens": [50364, 321, 767, 848, 309, 11, 457, 264, 1558, 307, 300, 291, 2464, 428, 1500, 11, 428, 700, 1500, 11, 293, 50710, 50710, 550, 309, 486, 1190, 257, 688, 295, 1413, 11, 2673, 2319, 1413, 13, 865, 11, 286, 519, 300, 311, 264, 7576, 365, 51026, 51026, 819, 15743, 13, 1079, 11, 2293, 13, 407, 1338, 11, 5699, 291, 291, 1190, 428, 1500, 11, 291, 483, 2319, 420, 544, 51472, 51472, 498, 291, 528, 281, 1500, 8460, 309, 365, 4190, 300, 652, 2020, 300, 500, 380, 652, 2020, 13, 583, 51794, 51794], "temperature": 0.0, "avg_logprob": -0.12635203330747544, "compression_ratio": 1.6572769953051643, "no_caption_prob": 7.843143248464912e-05}, {"id": 275, "seek": 166288, "start": 1662.88, "end": 1668.1200000000001, "text": " your setup will be run with a lot of different inputs. So if something goes wrong, you will", "tokens": [50364, 428, 8657, 486, 312, 1190, 365, 257, 688, 295, 819, 15743, 13, 407, 498, 746, 1709, 2085, 11, 291, 486, 50626, 50626, 458, 597, 4190, 309, 486, 312, 337, 13, 400, 291, 1582, 380, 5101, 362, 9645, 337, 257, 688, 544, 50974, 50974, 3331, 813, 291, 576, 362, 4598, 538, 1803, 13, 1079, 13, 865, 11, 570, 291, 434, 1936, 4997, 51396, 51396, 364, 13785, 20004, 992, 570, 633, 565, 291, 1190, 309, 11, 309, 6676, 309, 365, 257, 819, 6889, 13, 51696, 51696], "temperature": 0.0, "avg_logprob": -0.1396074849505757, "compression_ratio": 1.6244343891402715, "no_caption_prob": 2.3551878257421777e-05}, {"id": 276, "seek": 166288, "start": 1668.1200000000001, "end": 1675.0800000000002, "text": " know which values it will be for. And you won't generally have coverage for a lot more", "tokens": [50364, 428, 8657, 486, 312, 1190, 365, 257, 688, 295, 819, 15743, 13, 407, 498, 746, 1709, 2085, 11, 291, 486, 50626, 50626, 458, 597, 4190, 309, 486, 312, 337, 13, 400, 291, 1582, 380, 5101, 362, 9645, 337, 257, 688, 544, 50974, 50974, 3331, 813, 291, 576, 362, 4598, 538, 1803, 13, 1079, 13, 865, 11, 570, 291, 434, 1936, 4997, 51396, 51396, 364, 13785, 20004, 992, 570, 633, 565, 291, 1190, 309, 11, 309, 6676, 309, 365, 257, 819, 6889, 13, 51696, 51696], "temperature": 0.0, "avg_logprob": -0.1396074849505757, "compression_ratio": 1.6244343891402715, "no_caption_prob": 2.3551878257421777e-05}, {"id": 277, "seek": 166288, "start": 1675.0800000000002, "end": 1683.5200000000002, "text": " cases than you would have thoughts by yourself. Yes. Yeah, because you're basically testing", "tokens": [50364, 428, 8657, 486, 312, 1190, 365, 257, 688, 295, 819, 15743, 13, 407, 498, 746, 1709, 2085, 11, 291, 486, 50626, 50626, 458, 597, 4190, 309, 486, 312, 337, 13, 400, 291, 1582, 380, 5101, 362, 9645, 337, 257, 688, 544, 50974, 50974, 3331, 813, 291, 576, 362, 4598, 538, 1803, 13, 1079, 13, 865, 11, 570, 291, 434, 1936, 4997, 51396, 51396, 364, 13785, 20004, 992, 570, 633, 565, 291, 1190, 309, 11, 309, 6676, 309, 365, 257, 819, 6889, 13, 51696, 51696], "temperature": 0.0, "avg_logprob": -0.1396074849505757, "compression_ratio": 1.6244343891402715, "no_caption_prob": 2.3551878257421777e-05}, {"id": 278, "seek": 166288, "start": 1683.5200000000002, "end": 1689.5200000000002, "text": " an infinite sized set because every time you run it, it runs it with a different sample.", "tokens": [50364, 428, 8657, 486, 312, 1190, 365, 257, 688, 295, 819, 15743, 13, 407, 498, 746, 1709, 2085, 11, 291, 486, 50626, 50626, 458, 597, 4190, 309, 486, 312, 337, 13, 400, 291, 1582, 380, 5101, 362, 9645, 337, 257, 688, 544, 50974, 50974, 3331, 813, 291, 576, 362, 4598, 538, 1803, 13, 1079, 13, 865, 11, 570, 291, 434, 1936, 4997, 51396, 51396, 364, 13785, 20004, 992, 570, 633, 565, 291, 1190, 309, 11, 309, 6676, 309, 365, 257, 819, 6889, 13, 51696, 51696], "temperature": 0.0, "avg_logprob": -0.1396074849505757, "compression_ratio": 1.6244343891402715, "no_caption_prob": 2.3551878257421777e-05}, {"id": 279, "seek": 168952, "start": 1689.52, "end": 1697.8, "text": " Yeah. Another cool feature of fuzz testing is that it will shrink down the result set", "tokens": [50364, 865, 13, 3996, 1627, 4111, 295, 283, 16740, 4997, 307, 300, 309, 486, 23060, 760, 264, 1874, 992, 50778, 50778, 281, 976, 291, 264, 22811, 18223, 1500, 1389, 13, 407, 498, 291, 434, 1228, 257, 6798, 283, 3334, 4527, 11, 337, 1365, 11, 51144, 51144, 293, 428, 6798, 283, 3334, 4527, 11, 411, 370, 411, 257, 2689, 2689, 1365, 307, 411, 257, 3984, 471, 11505, 11, 558, 30, 51520, 51520, 1610, 445, 604, 1333, 295, 44788, 6916, 13, 509, 458, 11, 498, 286, 2058, 1429, 341, 281, 257, 31828, 2158, 51823, 51823], "temperature": 0.0, "avg_logprob": -0.12938136242805642, "compression_ratio": 1.5482456140350878, "no_caption_prob": 2.6687841454986483e-05}, {"id": 280, "seek": 168952, "start": 1697.8, "end": 1705.12, "text": " to give you the simplest failing test case. So if you're using a string fuzzer, for example,", "tokens": [50364, 865, 13, 3996, 1627, 4111, 295, 283, 16740, 4997, 307, 300, 309, 486, 23060, 760, 264, 1874, 992, 50778, 50778, 281, 976, 291, 264, 22811, 18223, 1500, 1389, 13, 407, 498, 291, 434, 1228, 257, 6798, 283, 3334, 4527, 11, 337, 1365, 11, 51144, 51144, 293, 428, 6798, 283, 3334, 4527, 11, 411, 370, 411, 257, 2689, 2689, 1365, 307, 411, 257, 3984, 471, 11505, 11, 558, 30, 51520, 51520, 1610, 445, 604, 1333, 295, 44788, 6916, 13, 509, 458, 11, 498, 286, 2058, 1429, 341, 281, 257, 31828, 2158, 51823, 51823], "temperature": 0.0, "avg_logprob": -0.12938136242805642, "compression_ratio": 1.5482456140350878, "no_caption_prob": 2.6687841454986483e-05}, {"id": 281, "seek": 168952, "start": 1705.12, "end": 1712.6399999999999, "text": " and your string fuzzer, like so like a common common example is like a palindrome, right?", "tokens": [50364, 865, 13, 3996, 1627, 4111, 295, 283, 16740, 4997, 307, 300, 309, 486, 23060, 760, 264, 1874, 992, 50778, 50778, 281, 976, 291, 264, 22811, 18223, 1500, 1389, 13, 407, 498, 291, 434, 1228, 257, 6798, 283, 3334, 4527, 11, 337, 1365, 11, 51144, 51144, 293, 428, 6798, 283, 3334, 4527, 11, 411, 370, 411, 257, 2689, 2689, 1365, 307, 411, 257, 3984, 471, 11505, 11, 558, 30, 51520, 51520, 1610, 445, 604, 1333, 295, 44788, 6916, 13, 509, 458, 11, 498, 286, 2058, 1429, 341, 281, 257, 31828, 2158, 51823, 51823], "temperature": 0.0, "avg_logprob": -0.12938136242805642, "compression_ratio": 1.5482456140350878, "no_caption_prob": 2.6687841454986483e-05}, {"id": 282, "seek": 168952, "start": 1712.6399999999999, "end": 1718.7, "text": " Or just any sort of reversible operation. You know, if I encode this to a JSON value", "tokens": [50364, 865, 13, 3996, 1627, 4111, 295, 283, 16740, 4997, 307, 300, 309, 486, 23060, 760, 264, 1874, 992, 50778, 50778, 281, 976, 291, 264, 22811, 18223, 1500, 1389, 13, 407, 498, 291, 434, 1228, 257, 6798, 283, 3334, 4527, 11, 337, 1365, 11, 51144, 51144, 293, 428, 6798, 283, 3334, 4527, 11, 411, 370, 411, 257, 2689, 2689, 1365, 307, 411, 257, 3984, 471, 11505, 11, 558, 30, 51520, 51520, 1610, 445, 604, 1333, 295, 44788, 6916, 13, 509, 458, 11, 498, 286, 2058, 1429, 341, 281, 257, 31828, 2158, 51823, 51823], "temperature": 0.0, "avg_logprob": -0.12938136242805642, "compression_ratio": 1.5482456140350878, "no_caption_prob": 2.6687841454986483e-05}, {"id": 283, "seek": 171870, "start": 1718.7, "end": 1724.0800000000002, "text": " and then decode that JSON value, I should have the same thing I started with or if I", "tokens": [50364, 293, 550, 979, 1429, 300, 31828, 2158, 11, 286, 820, 362, 264, 912, 551, 286, 1409, 365, 420, 498, 286, 50633, 50633, 747, 257, 6798, 11, 293, 286, 9943, 498, 286, 747, 257, 6798, 293, 1520, 498, 309, 311, 257, 3984, 471, 11505, 11, 550, 264, 9943, 51021, 51021, 295, 300, 6798, 820, 611, 312, 257, 3984, 471, 11505, 13, 1171, 1365, 11, 300, 311, 411, 733, 295, 4707, 51243, 51243, 300, 321, 434, 1417, 466, 562, 1417, 466, 4707, 2361, 4997, 13, 467, 311, 257, 5223, 4707, 51503, 51503, 295, 264, 1379, 1185, 13, 7587, 13, 407, 498, 300, 19810, 313, 645, 281, 3061, 322, 6707, 6798, 11, 51829, 51829], "temperature": 0.0, "avg_logprob": -0.14576012265365734, "compression_ratio": 1.764, "no_caption_prob": 1.3845874491380528e-05}, {"id": 284, "seek": 171870, "start": 1724.0800000000002, "end": 1731.8400000000001, "text": " take a string, and I reverse if I take a string and check if it's a palindrome, then the reverse", "tokens": [50364, 293, 550, 979, 1429, 300, 31828, 2158, 11, 286, 820, 362, 264, 912, 551, 286, 1409, 365, 420, 498, 286, 50633, 50633, 747, 257, 6798, 11, 293, 286, 9943, 498, 286, 747, 257, 6798, 293, 1520, 498, 309, 311, 257, 3984, 471, 11505, 11, 550, 264, 9943, 51021, 51021, 295, 300, 6798, 820, 611, 312, 257, 3984, 471, 11505, 13, 1171, 1365, 11, 300, 311, 411, 733, 295, 4707, 51243, 51243, 300, 321, 434, 1417, 466, 562, 1417, 466, 4707, 2361, 4997, 13, 467, 311, 257, 5223, 4707, 51503, 51503, 295, 264, 1379, 1185, 13, 7587, 13, 407, 498, 300, 19810, 313, 645, 281, 3061, 322, 6707, 6798, 11, 51829, 51829], "temperature": 0.0, "avg_logprob": -0.14576012265365734, "compression_ratio": 1.764, "no_caption_prob": 1.3845874491380528e-05}, {"id": 285, "seek": 171870, "start": 1731.8400000000001, "end": 1736.28, "text": " of that string should also be a palindrome. For example, that's like kind of property", "tokens": [50364, 293, 550, 979, 1429, 300, 31828, 2158, 11, 286, 820, 362, 264, 912, 551, 286, 1409, 365, 420, 498, 286, 50633, 50633, 747, 257, 6798, 11, 293, 286, 9943, 498, 286, 747, 257, 6798, 293, 1520, 498, 309, 311, 257, 3984, 471, 11505, 11, 550, 264, 9943, 51021, 51021, 295, 300, 6798, 820, 611, 312, 257, 3984, 471, 11505, 13, 1171, 1365, 11, 300, 311, 411, 733, 295, 4707, 51243, 51243, 300, 321, 434, 1417, 466, 562, 1417, 466, 4707, 2361, 4997, 13, 467, 311, 257, 5223, 4707, 51503, 51503, 295, 264, 1379, 1185, 13, 7587, 13, 407, 498, 300, 19810, 313, 645, 281, 3061, 322, 6707, 6798, 11, 51829, 51829], "temperature": 0.0, "avg_logprob": -0.14576012265365734, "compression_ratio": 1.764, "no_caption_prob": 1.3845874491380528e-05}, {"id": 286, "seek": 171870, "start": 1736.28, "end": 1741.48, "text": " that we're talking about when talking about property based testing. It's a behavior property", "tokens": [50364, 293, 550, 979, 1429, 300, 31828, 2158, 11, 286, 820, 362, 264, 912, 551, 286, 1409, 365, 420, 498, 286, 50633, 50633, 747, 257, 6798, 11, 293, 286, 9943, 498, 286, 747, 257, 6798, 293, 1520, 498, 309, 311, 257, 3984, 471, 11505, 11, 550, 264, 9943, 51021, 51021, 295, 300, 6798, 820, 611, 312, 257, 3984, 471, 11505, 13, 1171, 1365, 11, 300, 311, 411, 733, 295, 4707, 51243, 51243, 300, 321, 434, 1417, 466, 562, 1417, 466, 4707, 2361, 4997, 13, 467, 311, 257, 5223, 4707, 51503, 51503, 295, 264, 1379, 1185, 13, 7587, 13, 407, 498, 300, 19810, 313, 645, 281, 3061, 322, 6707, 6798, 11, 51829, 51829], "temperature": 0.0, "avg_logprob": -0.14576012265365734, "compression_ratio": 1.764, "no_caption_prob": 1.3845874491380528e-05}, {"id": 287, "seek": 171870, "start": 1741.48, "end": 1748.0, "text": " of the whole system. Exactly. So if that assertion were to fail on empty string,", "tokens": [50364, 293, 550, 979, 1429, 300, 31828, 2158, 11, 286, 820, 362, 264, 912, 551, 286, 1409, 365, 420, 498, 286, 50633, 50633, 747, 257, 6798, 11, 293, 286, 9943, 498, 286, 747, 257, 6798, 293, 1520, 498, 309, 311, 257, 3984, 471, 11505, 11, 550, 264, 9943, 51021, 51021, 295, 300, 6798, 820, 611, 312, 257, 3984, 471, 11505, 13, 1171, 1365, 11, 300, 311, 411, 733, 295, 4707, 51243, 51243, 300, 321, 434, 1417, 466, 562, 1417, 466, 4707, 2361, 4997, 13, 467, 311, 257, 5223, 4707, 51503, 51503, 295, 264, 1379, 1185, 13, 7587, 13, 407, 498, 300, 19810, 313, 645, 281, 3061, 322, 6707, 6798, 11, 51829, 51829], "temperature": 0.0, "avg_logprob": -0.14576012265365734, "compression_ratio": 1.764, "no_caption_prob": 1.3845874491380528e-05}, {"id": 288, "seek": 174800, "start": 1748.0, "end": 1758.2, "text": " maybe the you know, maybe that property also fails on a 200 character long string. But", "tokens": [50364, 1310, 264, 291, 458, 11, 1310, 300, 4707, 611, 18199, 322, 257, 2331, 2517, 938, 6798, 13, 583, 50874, 50874, 264, 7763, 309, 311, 516, 281, 976, 291, 307, 264, 6707, 6798, 13, 407, 300, 311, 1219, 41684, 300, 51038, 51038, 309, 18081, 760, 264, 20774, 281, 915, 264, 264, 22811, 7763, 309, 393, 5258, 13, 865, 11, 309, 311, 51400, 51400, 733, 295, 411, 257, 588, 12066, 3410, 13, 467, 311, 733, 295, 1627, 300, 300, 4111, 307, 445, 3094, 51636, 51636, 666, 309, 13, 51686, 51686], "temperature": 0.0, "avg_logprob": -0.12487197452121311, "compression_ratio": 1.639269406392694, "no_caption_prob": 3.5912657040171325e-05}, {"id": 289, "seek": 174800, "start": 1758.2, "end": 1761.48, "text": " the failure it's going to give you is the empty string. So that's called shrinking that", "tokens": [50364, 1310, 264, 291, 458, 11, 1310, 300, 4707, 611, 18199, 322, 257, 2331, 2517, 938, 6798, 13, 583, 50874, 50874, 264, 7763, 309, 311, 516, 281, 976, 291, 307, 264, 6707, 6798, 13, 407, 300, 311, 1219, 41684, 300, 51038, 51038, 309, 18081, 760, 264, 20774, 281, 915, 264, 264, 22811, 7763, 309, 393, 5258, 13, 865, 11, 309, 311, 51400, 51400, 733, 295, 411, 257, 588, 12066, 3410, 13, 467, 311, 733, 295, 1627, 300, 300, 4111, 307, 445, 3094, 51636, 51636, 666, 309, 13, 51686, 51686], "temperature": 0.0, "avg_logprob": -0.12487197452121311, "compression_ratio": 1.639269406392694, "no_caption_prob": 3.5912657040171325e-05}, {"id": 290, "seek": 174800, "start": 1761.48, "end": 1768.72, "text": " it reduces down the failures to find the the simplest failure it can produce. Yeah, it's", "tokens": [50364, 1310, 264, 291, 458, 11, 1310, 300, 4707, 611, 18199, 322, 257, 2331, 2517, 938, 6798, 13, 583, 50874, 50874, 264, 7763, 309, 311, 516, 281, 976, 291, 307, 264, 6707, 6798, 13, 407, 300, 311, 1219, 41684, 300, 51038, 51038, 309, 18081, 760, 264, 20774, 281, 915, 264, 264, 22811, 7763, 309, 393, 5258, 13, 865, 11, 309, 311, 51400, 51400, 733, 295, 411, 257, 588, 12066, 3410, 13, 467, 311, 733, 295, 1627, 300, 300, 4111, 307, 445, 3094, 51636, 51636, 666, 309, 13, 51686, 51686], "temperature": 0.0, "avg_logprob": -0.12487197452121311, "compression_ratio": 1.639269406392694, "no_caption_prob": 3.5912657040171325e-05}, {"id": 291, "seek": 174800, "start": 1768.72, "end": 1773.44, "text": " kind of like a very magical concept. It's kind of cool that that feature is just built", "tokens": [50364, 1310, 264, 291, 458, 11, 1310, 300, 4707, 611, 18199, 322, 257, 2331, 2517, 938, 6798, 13, 583, 50874, 50874, 264, 7763, 309, 311, 516, 281, 976, 291, 307, 264, 6707, 6798, 13, 407, 300, 311, 1219, 41684, 300, 51038, 51038, 309, 18081, 760, 264, 20774, 281, 915, 264, 264, 22811, 7763, 309, 393, 5258, 13, 865, 11, 309, 311, 51400, 51400, 733, 295, 411, 257, 588, 12066, 3410, 13, 467, 311, 733, 295, 1627, 300, 300, 4111, 307, 445, 3094, 51636, 51636, 666, 309, 13, 51686, 51686], "temperature": 0.0, "avg_logprob": -0.12487197452121311, "compression_ratio": 1.639269406392694, "no_caption_prob": 3.5912657040171325e-05}, {"id": 292, "seek": 174800, "start": 1773.44, "end": 1774.44, "text": " into it.", "tokens": [50364, 1310, 264, 291, 458, 11, 1310, 300, 4707, 611, 18199, 322, 257, 2331, 2517, 938, 6798, 13, 583, 50874, 50874, 264, 7763, 309, 311, 516, 281, 976, 291, 307, 264, 6707, 6798, 13, 407, 300, 311, 1219, 41684, 300, 51038, 51038, 309, 18081, 760, 264, 20774, 281, 915, 264, 264, 22811, 7763, 309, 393, 5258, 13, 865, 11, 309, 311, 51400, 51400, 733, 295, 411, 257, 588, 12066, 3410, 13, 467, 311, 733, 295, 1627, 300, 300, 4111, 307, 445, 3094, 51636, 51636, 666, 309, 13, 51686, 51686], "temperature": 0.0, "avg_logprob": -0.12487197452121311, "compression_ratio": 1.639269406392694, "no_caption_prob": 3.5912657040171325e-05}, {"id": 293, "seek": 177444, "start": 1774.44, "end": 1779.64, "text": " Yeah, the way I think it works is, I think it's going to try that string with 200 characters", "tokens": [50364, 865, 11, 264, 636, 286, 519, 309, 1985, 307, 11, 286, 519, 309, 311, 516, 281, 853, 300, 6798, 365, 2331, 4342, 50624, 50624, 700, 11, 420, 321, 603, 1391, 853, 264, 6707, 6798, 700, 13, 583, 412, 512, 935, 11, 309, 486, 853, 264, 50888, 50888, 2331, 2517, 938, 6798, 13, 400, 498, 309, 10704, 309, 300, 309, 18199, 11, 309, 486, 853, 281, 20460, 51166, 51166, 309, 281, 341, 41684, 644, 538, 17746, 257, 1326, 18587, 3331, 813, 264, 1525, 13, 407, 1310, 37609, 51632, 51632], "temperature": 0.0, "avg_logprob": -0.1630008061726888, "compression_ratio": 1.6603773584905661, "no_caption_prob": 3.1195522751659155e-05}, {"id": 294, "seek": 177444, "start": 1779.64, "end": 1784.92, "text": " first, or we'll probably try the empty string first. But at some point, it will try the", "tokens": [50364, 865, 11, 264, 636, 286, 519, 309, 1985, 307, 11, 286, 519, 309, 311, 516, 281, 853, 300, 6798, 365, 2331, 4342, 50624, 50624, 700, 11, 420, 321, 603, 1391, 853, 264, 6707, 6798, 700, 13, 583, 412, 512, 935, 11, 309, 486, 853, 264, 50888, 50888, 2331, 2517, 938, 6798, 13, 400, 498, 309, 10704, 309, 300, 309, 18199, 11, 309, 486, 853, 281, 20460, 51166, 51166, 309, 281, 341, 41684, 644, 538, 17746, 257, 1326, 18587, 3331, 813, 264, 1525, 13, 407, 1310, 37609, 51632, 51632], "temperature": 0.0, "avg_logprob": -0.1630008061726888, "compression_ratio": 1.6603773584905661, "no_caption_prob": 3.1195522751659155e-05}, {"id": 295, "seek": 177444, "start": 1784.92, "end": 1790.48, "text": " 200 character long string. And if it finds it that it fails, it will try to simplify", "tokens": [50364, 865, 11, 264, 636, 286, 519, 309, 1985, 307, 11, 286, 519, 309, 311, 516, 281, 853, 300, 6798, 365, 2331, 4342, 50624, 50624, 700, 11, 420, 321, 603, 1391, 853, 264, 6707, 6798, 700, 13, 583, 412, 512, 935, 11, 309, 486, 853, 264, 50888, 50888, 2331, 2517, 938, 6798, 13, 400, 498, 309, 10704, 309, 300, 309, 18199, 11, 309, 486, 853, 281, 20460, 51166, 51166, 309, 281, 341, 41684, 644, 538, 17746, 257, 1326, 18587, 3331, 813, 264, 1525, 13, 407, 1310, 37609, 51632, 51632], "temperature": 0.0, "avg_logprob": -0.1630008061726888, "compression_ratio": 1.6603773584905661, "no_caption_prob": 3.1195522751659155e-05}, {"id": 296, "seek": 177444, "start": 1790.48, "end": 1799.8, "text": " it to this shrinking part by generating a few simpler cases than the 201. So maybe 190", "tokens": [50364, 865, 11, 264, 636, 286, 519, 309, 1985, 307, 11, 286, 519, 309, 311, 516, 281, 853, 300, 6798, 365, 2331, 4342, 50624, 50624, 700, 11, 420, 321, 603, 1391, 853, 264, 6707, 6798, 700, 13, 583, 412, 512, 935, 11, 309, 486, 853, 264, 50888, 50888, 2331, 2517, 938, 6798, 13, 400, 498, 309, 10704, 309, 300, 309, 18199, 11, 309, 486, 853, 281, 20460, 51166, 51166, 309, 281, 341, 41684, 644, 538, 17746, 257, 1326, 18587, 3331, 813, 264, 1525, 13, 407, 1310, 37609, 51632, 51632], "temperature": 0.0, "avg_logprob": -0.1630008061726888, "compression_ratio": 1.6603773584905661, "no_caption_prob": 3.1195522751659155e-05}, {"id": 297, "seek": 179980, "start": 1799.8, "end": 1807.08, "text": " characters or 199. So we'll generate a few ones, and we'll run the test on each of those.", "tokens": [50364, 4342, 420, 4303, 13, 407, 321, 603, 8460, 257, 1326, 2306, 11, 293, 321, 603, 1190, 264, 1500, 322, 1184, 295, 729, 13, 50728, 50728, 400, 498, 472, 295, 729, 18199, 11, 550, 309, 486, 853, 670, 293, 670, 293, 670, 797, 365, 729, 4190, 11, 51074, 51074, 1826, 10704, 264, 22811, 551, 11, 597, 727, 312, 364, 6707, 6798, 420, 597, 727, 312, 746, 51374, 51374, 1646, 5946, 437, 428, 1154, 307, 13, 51504, 51504], "temperature": 0.0, "avg_logprob": -0.15968555059188452, "compression_ratio": 1.5989583333333333, "no_caption_prob": 7.483689114451408e-05}, {"id": 298, "seek": 179980, "start": 1807.08, "end": 1814.0, "text": " And if one of those fails, then it will try over and over and over again with those values,", "tokens": [50364, 4342, 420, 4303, 13, 407, 321, 603, 8460, 257, 1326, 2306, 11, 293, 321, 603, 1190, 264, 1500, 322, 1184, 295, 729, 13, 50728, 50728, 400, 498, 472, 295, 729, 18199, 11, 550, 309, 486, 853, 670, 293, 670, 293, 670, 797, 365, 729, 4190, 11, 51074, 51074, 1826, 10704, 264, 22811, 551, 11, 597, 727, 312, 364, 6707, 6798, 420, 597, 727, 312, 746, 51374, 51374, 1646, 5946, 437, 428, 1154, 307, 13, 51504, 51504], "temperature": 0.0, "avg_logprob": -0.15968555059188452, "compression_ratio": 1.5989583333333333, "no_caption_prob": 7.483689114451408e-05}, {"id": 299, "seek": 179980, "start": 1814.0, "end": 1820.0, "text": " until finds the simplest thing, which could be an empty string or which could be something", "tokens": [50364, 4342, 420, 4303, 13, 407, 321, 603, 8460, 257, 1326, 2306, 11, 293, 321, 603, 1190, 264, 1500, 322, 1184, 295, 729, 13, 50728, 50728, 400, 498, 472, 295, 729, 18199, 11, 550, 309, 486, 853, 670, 293, 670, 293, 670, 797, 365, 729, 4190, 11, 51074, 51074, 1826, 10704, 264, 22811, 551, 11, 597, 727, 312, 364, 6707, 6798, 420, 597, 727, 312, 746, 51374, 51374, 1646, 5946, 437, 428, 1154, 307, 13, 51504, 51504], "temperature": 0.0, "avg_logprob": -0.15968555059188452, "compression_ratio": 1.5989583333333333, "no_caption_prob": 7.483689114451408e-05}, {"id": 300, "seek": 179980, "start": 1820.0, "end": 1822.6, "text": " else depends what your problem is.", "tokens": [50364, 4342, 420, 4303, 13, 407, 321, 603, 8460, 257, 1326, 2306, 11, 293, 321, 603, 1190, 264, 1500, 322, 1184, 295, 729, 13, 50728, 50728, 400, 498, 472, 295, 729, 18199, 11, 550, 309, 486, 853, 670, 293, 670, 293, 670, 797, 365, 729, 4190, 11, 51074, 51074, 1826, 10704, 264, 22811, 551, 11, 597, 727, 312, 364, 6707, 6798, 420, 597, 727, 312, 746, 51374, 51374, 1646, 5946, 437, 428, 1154, 307, 13, 51504, 51504], "temperature": 0.0, "avg_logprob": -0.15968555059188452, "compression_ratio": 1.5989583333333333, "no_caption_prob": 7.483689114451408e-05}, {"id": 301, "seek": 182260, "start": 1822.6, "end": 1830.36, "text": " Right. Martin Janacek has been working on, I guess it's pronounced minithesis. I don't", "tokens": [50364, 1779, 13, 9184, 4956, 617, 74, 575, 668, 1364, 322, 11, 286, 2041, 309, 311, 23155, 923, 355, 9374, 13, 286, 500, 380, 50752, 50752, 458, 570, 309, 1542, 411, 8382, 22288, 11, 457, 309, 311, 767, 411, 257, 8382, 3037, 295, 746, 51076, 51076, 1219, 17291, 13, 400, 17291, 307, 411, 1071, 3109, 281, 341, 1558, 295, 411, 4707, 51550, 51550], "temperature": 0.0, "avg_logprob": -0.18971596658229828, "compression_ratio": 1.5375722543352601, "no_caption_prob": 6.921777094248682e-05}, {"id": 302, "seek": 182260, "start": 1830.36, "end": 1836.84, "text": " know because it looks like mini thesis, but it's actually like a mini version of something", "tokens": [50364, 1779, 13, 9184, 4956, 617, 74, 575, 668, 1364, 322, 11, 286, 2041, 309, 311, 23155, 923, 355, 9374, 13, 286, 500, 380, 50752, 50752, 458, 570, 309, 1542, 411, 8382, 22288, 11, 457, 309, 311, 767, 411, 257, 8382, 3037, 295, 746, 51076, 51076, 1219, 17291, 13, 400, 17291, 307, 411, 1071, 3109, 281, 341, 1558, 295, 411, 4707, 51550, 51550], "temperature": 0.0, "avg_logprob": -0.18971596658229828, "compression_ratio": 1.5375722543352601, "no_caption_prob": 6.921777094248682e-05}, {"id": 303, "seek": 182260, "start": 1836.84, "end": 1846.32, "text": " called hypothesis. And hypothesis is like another approach to this idea of like property", "tokens": [50364, 1779, 13, 9184, 4956, 617, 74, 575, 668, 1364, 322, 11, 286, 2041, 309, 311, 23155, 923, 355, 9374, 13, 286, 500, 380, 50752, 50752, 458, 570, 309, 1542, 411, 8382, 22288, 11, 457, 309, 311, 767, 411, 257, 8382, 3037, 295, 746, 51076, 51076, 1219, 17291, 13, 400, 17291, 307, 411, 1071, 3109, 281, 341, 1558, 295, 411, 4707, 51550, 51550], "temperature": 0.0, "avg_logprob": -0.18971596658229828, "compression_ratio": 1.5375722543352601, "no_caption_prob": 6.921777094248682e-05}, {"id": 304, "seek": 184632, "start": 1846.32, "end": 1853.6, "text": " based shrinking. But it allows you to do property based testing in a way where you can do end", "tokens": [50364, 2361, 41684, 13, 583, 309, 4045, 291, 281, 360, 4707, 2361, 4997, 294, 257, 636, 689, 291, 393, 360, 917, 50728, 50728, 550, 13, 440, 3875, 2099, 3855, 490, 437, 286, 1223, 490, 264, 1401, 1398, 295, 264, 1716, 51132, 51132, 307, 300, 456, 311, 411, 264, 4974, 283, 16740, 4190, 11, 456, 311, 411, 264, 3539, 9859, 4190, 11, 51403, 51403, 293, 550, 456, 311, 411, 264, 8871, 300, 24799, 729, 4190, 13, 400, 264, 1558, 295, 411, 17291, 51716, 51716], "temperature": 0.0, "avg_logprob": -0.13550241788228354, "compression_ratio": 1.7307692307692308, "no_caption_prob": 4.3317377276252955e-05}, {"id": 305, "seek": 184632, "start": 1853.6, "end": 1861.6799999999998, "text": " then. The basic short description from what I understand from the readme of the project", "tokens": [50364, 2361, 41684, 13, 583, 309, 4045, 291, 281, 360, 4707, 2361, 4997, 294, 257, 636, 689, 291, 393, 360, 917, 50728, 50728, 550, 13, 440, 3875, 2099, 3855, 490, 437, 286, 1223, 490, 264, 1401, 1398, 295, 264, 1716, 51132, 51132, 307, 300, 456, 311, 411, 264, 4974, 283, 16740, 4190, 11, 456, 311, 411, 264, 3539, 9859, 4190, 11, 51403, 51403, 293, 550, 456, 311, 411, 264, 8871, 300, 24799, 729, 4190, 13, 400, 264, 1558, 295, 411, 17291, 51716, 51716], "temperature": 0.0, "avg_logprob": -0.13550241788228354, "compression_ratio": 1.7307692307692308, "no_caption_prob": 4.3317377276252955e-05}, {"id": 306, "seek": 184632, "start": 1861.6799999999998, "end": 1867.1, "text": " is that there's like the random fuzz values, there's like the actual concrete values,", "tokens": [50364, 2361, 41684, 13, 583, 309, 4045, 291, 281, 360, 4707, 2361, 4997, 294, 257, 636, 689, 291, 393, 360, 917, 50728, 50728, 550, 13, 440, 3875, 2099, 3855, 490, 437, 286, 1223, 490, 264, 1401, 1398, 295, 264, 1716, 51132, 51132, 307, 300, 456, 311, 411, 264, 4974, 283, 16740, 4190, 11, 456, 311, 411, 264, 3539, 9859, 4190, 11, 51403, 51403, 293, 550, 456, 311, 411, 264, 8871, 300, 24799, 729, 4190, 13, 400, 264, 1558, 295, 411, 17291, 51716, 51716], "temperature": 0.0, "avg_logprob": -0.13550241788228354, "compression_ratio": 1.7307692307692308, "no_caption_prob": 4.3317377276252955e-05}, {"id": 307, "seek": 184632, "start": 1867.1, "end": 1873.36, "text": " and then there's like the seed that determines those values. And the idea of like hypothesis", "tokens": [50364, 2361, 41684, 13, 583, 309, 4045, 291, 281, 360, 4707, 2361, 4997, 294, 257, 636, 689, 291, 393, 360, 917, 50728, 50728, 550, 13, 440, 3875, 2099, 3855, 490, 437, 286, 1223, 490, 264, 1401, 1398, 295, 264, 1716, 51132, 51132, 307, 300, 456, 311, 411, 264, 4974, 283, 16740, 4190, 11, 456, 311, 411, 264, 3539, 9859, 4190, 11, 51403, 51403, 293, 550, 456, 311, 411, 264, 8871, 300, 24799, 729, 4190, 13, 400, 264, 1558, 295, 411, 17291, 51716, 51716], "temperature": 0.0, "avg_logprob": -0.13550241788228354, "compression_ratio": 1.7307692307692308, "no_caption_prob": 4.3317377276252955e-05}, {"id": 308, "seek": 187336, "start": 1873.36, "end": 1876.52, "text": " and mini thesis is...", "tokens": [50364, 293, 8382, 22288, 307, 485, 50522, 50522, 286, 478, 445, 516, 281, 584, 8382, 22288, 611, 13, 50644, 50644, 286, 458, 11, 286, 458, 13, 467, 5965, 2837, 295, 264, 14217, 9203, 300, 10833, 729, 4190, 13, 400, 370, 50968, 50968, 309, 4045, 291, 281, 360, 917, 550, 13, 13813, 411, 264, 2699, 76, 283, 16740, 6405, 1177, 380, 2893, 917, 550, 13, 51322, 51322, 583, 729, 366, 439, 411, 1019, 1333, 295, 7778, 4365, 13, 583, 294, 3124, 11, 283, 3334, 8781, 307, 445, 51540, 51540, 257, 534, 1627, 6532, 300, 311, 412, 428, 26400, 562, 291, 2464, 6921, 365, 2699, 76, 1500, 11, 309, 311, 3094, 51756, 51756], "temperature": 0.0, "avg_logprob": -0.16024398803710938, "compression_ratio": 1.626923076923077, "no_caption_prob": 5.771888481831411e-06}, {"id": 309, "seek": 187336, "start": 1876.52, "end": 1878.9599999999998, "text": " I'm just going to say mini thesis also.", "tokens": [50364, 293, 8382, 22288, 307, 485, 50522, 50522, 286, 478, 445, 516, 281, 584, 8382, 22288, 611, 13, 50644, 50644, 286, 458, 11, 286, 458, 13, 467, 5965, 2837, 295, 264, 14217, 9203, 300, 10833, 729, 4190, 13, 400, 370, 50968, 50968, 309, 4045, 291, 281, 360, 917, 550, 13, 13813, 411, 264, 2699, 76, 283, 16740, 6405, 1177, 380, 2893, 917, 550, 13, 51322, 51322, 583, 729, 366, 439, 411, 1019, 1333, 295, 7778, 4365, 13, 583, 294, 3124, 11, 283, 3334, 8781, 307, 445, 51540, 51540, 257, 534, 1627, 6532, 300, 311, 412, 428, 26400, 562, 291, 2464, 6921, 365, 2699, 76, 1500, 11, 309, 311, 3094, 51756, 51756], "temperature": 0.0, "avg_logprob": -0.16024398803710938, "compression_ratio": 1.626923076923077, "no_caption_prob": 5.771888481831411e-06}, {"id": 310, "seek": 187336, "start": 1878.9599999999998, "end": 1885.4399999999998, "text": " I know, I know. It keeps track of the underlying seeds that generated those values. And so", "tokens": [50364, 293, 8382, 22288, 307, 485, 50522, 50522, 286, 478, 445, 516, 281, 584, 8382, 22288, 611, 13, 50644, 50644, 286, 458, 11, 286, 458, 13, 467, 5965, 2837, 295, 264, 14217, 9203, 300, 10833, 729, 4190, 13, 400, 370, 50968, 50968, 309, 4045, 291, 281, 360, 917, 550, 13, 13813, 411, 264, 2699, 76, 283, 16740, 6405, 1177, 380, 2893, 917, 550, 13, 51322, 51322, 583, 729, 366, 439, 411, 1019, 1333, 295, 7778, 4365, 13, 583, 294, 3124, 11, 283, 3334, 8781, 307, 445, 51540, 51540, 257, 534, 1627, 6532, 300, 311, 412, 428, 26400, 562, 291, 2464, 6921, 365, 2699, 76, 1500, 11, 309, 311, 3094, 51756, 51756], "temperature": 0.0, "avg_logprob": -0.16024398803710938, "compression_ratio": 1.626923076923077, "no_caption_prob": 5.771888481831411e-06}, {"id": 311, "seek": 187336, "start": 1885.4399999999998, "end": 1892.52, "text": " it allows you to do end then. Whereas like the Elm fuzz library doesn't provide end then.", "tokens": [50364, 293, 8382, 22288, 307, 485, 50522, 50522, 286, 478, 445, 516, 281, 584, 8382, 22288, 611, 13, 50644, 50644, 286, 458, 11, 286, 458, 13, 467, 5965, 2837, 295, 264, 14217, 9203, 300, 10833, 729, 4190, 13, 400, 370, 50968, 50968, 309, 4045, 291, 281, 360, 917, 550, 13, 13813, 411, 264, 2699, 76, 283, 16740, 6405, 1177, 380, 2893, 917, 550, 13, 51322, 51322, 583, 729, 366, 439, 411, 1019, 1333, 295, 7778, 4365, 13, 583, 294, 3124, 11, 283, 3334, 8781, 307, 445, 51540, 51540, 257, 534, 1627, 6532, 300, 311, 412, 428, 26400, 562, 291, 2464, 6921, 365, 2699, 76, 1500, 11, 309, 311, 3094, 51756, 51756], "temperature": 0.0, "avg_logprob": -0.16024398803710938, "compression_ratio": 1.626923076923077, "no_caption_prob": 5.771888481831411e-06}, {"id": 312, "seek": 187336, "start": 1892.52, "end": 1896.8799999999999, "text": " But those are all like fun sort of academic details. But in practice, fuzzing is just", "tokens": [50364, 293, 8382, 22288, 307, 485, 50522, 50522, 286, 478, 445, 516, 281, 584, 8382, 22288, 611, 13, 50644, 50644, 286, 458, 11, 286, 458, 13, 467, 5965, 2837, 295, 264, 14217, 9203, 300, 10833, 729, 4190, 13, 400, 370, 50968, 50968, 309, 4045, 291, 281, 360, 917, 550, 13, 13813, 411, 264, 2699, 76, 283, 16740, 6405, 1177, 380, 2893, 917, 550, 13, 51322, 51322, 583, 729, 366, 439, 411, 1019, 1333, 295, 7778, 4365, 13, 583, 294, 3124, 11, 283, 3334, 8781, 307, 445, 51540, 51540, 257, 534, 1627, 6532, 300, 311, 412, 428, 26400, 562, 291, 2464, 6921, 365, 2699, 76, 1500, 11, 309, 311, 3094, 51756, 51756], "temperature": 0.0, "avg_logprob": -0.16024398803710938, "compression_ratio": 1.626923076923077, "no_caption_prob": 5.771888481831411e-06}, {"id": 313, "seek": 187336, "start": 1896.8799999999999, "end": 1901.1999999999998, "text": " a really cool technique that's at your disposal when you write tests with Elm test, it's built", "tokens": [50364, 293, 8382, 22288, 307, 485, 50522, 50522, 286, 478, 445, 516, 281, 584, 8382, 22288, 611, 13, 50644, 50644, 286, 458, 11, 286, 458, 13, 467, 5965, 2837, 295, 264, 14217, 9203, 300, 10833, 729, 4190, 13, 400, 370, 50968, 50968, 309, 4045, 291, 281, 360, 917, 550, 13, 13813, 411, 264, 2699, 76, 283, 16740, 6405, 1177, 380, 2893, 917, 550, 13, 51322, 51322, 583, 729, 366, 439, 411, 1019, 1333, 295, 7778, 4365, 13, 583, 294, 3124, 11, 283, 3334, 8781, 307, 445, 51540, 51540, 257, 534, 1627, 6532, 300, 311, 412, 428, 26400, 562, 291, 2464, 6921, 365, 2699, 76, 1500, 11, 309, 311, 3094, 51756, 51756], "temperature": 0.0, "avg_logprob": -0.16024398803710938, "compression_ratio": 1.626923076923077, "no_caption_prob": 5.771888481831411e-06}, {"id": 314, "seek": 190120, "start": 1901.2, "end": 1910.44, "text": " in. I've used it like a few months ago, I was testing some logic around a money module", "tokens": [50364, 294, 13, 286, 600, 1143, 309, 411, 257, 1326, 2493, 2057, 11, 286, 390, 4997, 512, 9952, 926, 257, 1460, 10088, 50826, 50826, 294, 257, 3089, 3096, 13, 400, 309, 390, 534, 1481, 281, 360, 512, 4707, 2361, 4997, 570, 365, 51087, 51087, 1460, 291, 528, 281, 652, 988, 300, 456, 3212, 380, 604, 15120, 13, 400, 370, 309, 390, 1596, 1481, 281, 312, 1075, 51374, 51374, 281, 411, 281, 584, 498, 286, 747, 264, 2649, 295, 732, 34499, 295, 1460, 11, 550, 309, 820, 312, 4018, 51809, 51809], "temperature": 0.0, "avg_logprob": -0.10962061829619356, "compression_ratio": 1.6157407407407407, "no_caption_prob": 4.0693073970032856e-05}, {"id": 315, "seek": 190120, "start": 1910.44, "end": 1915.66, "text": " in a code base. And it was really nice to do some property based testing because with", "tokens": [50364, 294, 13, 286, 600, 1143, 309, 411, 257, 1326, 2493, 2057, 11, 286, 390, 4997, 512, 9952, 926, 257, 1460, 10088, 50826, 50826, 294, 257, 3089, 3096, 13, 400, 309, 390, 534, 1481, 281, 360, 512, 4707, 2361, 4997, 570, 365, 51087, 51087, 1460, 291, 528, 281, 652, 988, 300, 456, 3212, 380, 604, 15120, 13, 400, 370, 309, 390, 1596, 1481, 281, 312, 1075, 51374, 51374, 281, 411, 281, 584, 498, 286, 747, 264, 2649, 295, 732, 34499, 295, 1460, 11, 550, 309, 820, 312, 4018, 51809, 51809], "temperature": 0.0, "avg_logprob": -0.10962061829619356, "compression_ratio": 1.6157407407407407, "no_caption_prob": 4.0693073970032856e-05}, {"id": 316, "seek": 190120, "start": 1915.66, "end": 1921.4, "text": " money you want to make sure that there aren't any bugs. And so it was quite nice to be able", "tokens": [50364, 294, 13, 286, 600, 1143, 309, 411, 257, 1326, 2493, 2057, 11, 286, 390, 4997, 512, 9952, 926, 257, 1460, 10088, 50826, 50826, 294, 257, 3089, 3096, 13, 400, 309, 390, 534, 1481, 281, 360, 512, 4707, 2361, 4997, 570, 365, 51087, 51087, 1460, 291, 528, 281, 652, 988, 300, 456, 3212, 380, 604, 15120, 13, 400, 370, 309, 390, 1596, 1481, 281, 312, 1075, 51374, 51374, 281, 411, 281, 584, 498, 286, 747, 264, 2649, 295, 732, 34499, 295, 1460, 11, 550, 309, 820, 312, 4018, 51809, 51809], "temperature": 0.0, "avg_logprob": -0.10962061829619356, "compression_ratio": 1.6157407407407407, "no_caption_prob": 4.0693073970032856e-05}, {"id": 317, "seek": 190120, "start": 1921.4, "end": 1930.1000000000001, "text": " to like to say if I take the difference of two sums of money, then it should be zero", "tokens": [50364, 294, 13, 286, 600, 1143, 309, 411, 257, 1326, 2493, 2057, 11, 286, 390, 4997, 512, 9952, 926, 257, 1460, 10088, 50826, 50826, 294, 257, 3089, 3096, 13, 400, 309, 390, 534, 1481, 281, 360, 512, 4707, 2361, 4997, 570, 365, 51087, 51087, 1460, 291, 528, 281, 652, 988, 300, 456, 3212, 380, 604, 15120, 13, 400, 370, 309, 390, 1596, 1481, 281, 312, 1075, 51374, 51374, 281, 411, 281, 584, 498, 286, 747, 264, 2649, 295, 732, 34499, 295, 1460, 11, 550, 309, 820, 312, 4018, 51809, 51809], "temperature": 0.0, "avg_logprob": -0.10962061829619356, "compression_ratio": 1.6157407407407407, "no_caption_prob": 4.0693073970032856e-05}, {"id": 318, "seek": 193010, "start": 1930.1, "end": 1936.7199999999998, "text": " if I'm taking the difference of the same value of money. Or like it parses negative money", "tokens": [50364, 498, 286, 478, 1940, 264, 2649, 295, 264, 912, 2158, 295, 1460, 13, 1610, 411, 309, 21156, 279, 3671, 1460, 50695, 50695, 8944, 13, 407, 498, 456, 311, 257, 3671, 1465, 294, 1868, 11, 2035, 264, 3539, 2158, 295, 264, 3808, 50949, 50949, 293, 14941, 366, 11, 562, 456, 311, 257, 3671, 2158, 294, 1868, 11, 264, 2158, 486, 312, 3671, 11, 558, 30, 51197, 51197, 663, 311, 411, 257, 4707, 291, 393, 19810, 2108, 264, 1379, 992, 295, 1412, 13, 400, 309, 311, 445, 364, 2857, 51519, 51519, 992, 295, 6687, 13, 4803, 309, 311, 1481, 281, 312, 1075, 281, 611, 1778, 466, 411, 9859, 51777, 51777], "temperature": 0.0, "avg_logprob": -0.08643297715620561, "compression_ratio": 1.74609375, "no_caption_prob": 2.79683754342841e-05}, {"id": 319, "seek": 193010, "start": 1936.7199999999998, "end": 1941.8, "text": " correctly. So if there's a negative sign in front, whatever the actual value of the dollars", "tokens": [50364, 498, 286, 478, 1940, 264, 2649, 295, 264, 912, 2158, 295, 1460, 13, 1610, 411, 309, 21156, 279, 3671, 1460, 50695, 50695, 8944, 13, 407, 498, 456, 311, 257, 3671, 1465, 294, 1868, 11, 2035, 264, 3539, 2158, 295, 264, 3808, 50949, 50949, 293, 14941, 366, 11, 562, 456, 311, 257, 3671, 2158, 294, 1868, 11, 264, 2158, 486, 312, 3671, 11, 558, 30, 51197, 51197, 663, 311, 411, 257, 4707, 291, 393, 19810, 2108, 264, 1379, 992, 295, 1412, 13, 400, 309, 311, 445, 364, 2857, 51519, 51519, 992, 295, 6687, 13, 4803, 309, 311, 1481, 281, 312, 1075, 281, 611, 1778, 466, 411, 9859, 51777, 51777], "temperature": 0.0, "avg_logprob": -0.08643297715620561, "compression_ratio": 1.74609375, "no_caption_prob": 2.79683754342841e-05}, {"id": 320, "seek": 193010, "start": 1941.8, "end": 1946.76, "text": " and cents are, when there's a negative value in front, the value will be negative, right?", "tokens": [50364, 498, 286, 478, 1940, 264, 2649, 295, 264, 912, 2158, 295, 1460, 13, 1610, 411, 309, 21156, 279, 3671, 1460, 50695, 50695, 8944, 13, 407, 498, 456, 311, 257, 3671, 1465, 294, 1868, 11, 2035, 264, 3539, 2158, 295, 264, 3808, 50949, 50949, 293, 14941, 366, 11, 562, 456, 311, 257, 3671, 2158, 294, 1868, 11, 264, 2158, 486, 312, 3671, 11, 558, 30, 51197, 51197, 663, 311, 411, 257, 4707, 291, 393, 19810, 2108, 264, 1379, 992, 295, 1412, 13, 400, 309, 311, 445, 364, 2857, 51519, 51519, 992, 295, 6687, 13, 4803, 309, 311, 1481, 281, 312, 1075, 281, 611, 1778, 466, 411, 9859, 51777, 51777], "temperature": 0.0, "avg_logprob": -0.08643297715620561, "compression_ratio": 1.74609375, "no_caption_prob": 2.79683754342841e-05}, {"id": 321, "seek": 193010, "start": 1946.76, "end": 1953.1999999999998, "text": " That's like a property you can assert across the whole set of data. And it's just an extra", "tokens": [50364, 498, 286, 478, 1940, 264, 2649, 295, 264, 912, 2158, 295, 1460, 13, 1610, 411, 309, 21156, 279, 3671, 1460, 50695, 50695, 8944, 13, 407, 498, 456, 311, 257, 3671, 1465, 294, 1868, 11, 2035, 264, 3539, 2158, 295, 264, 3808, 50949, 50949, 293, 14941, 366, 11, 562, 456, 311, 257, 3671, 2158, 294, 1868, 11, 264, 2158, 486, 312, 3671, 11, 558, 30, 51197, 51197, 663, 311, 411, 257, 4707, 291, 393, 19810, 2108, 264, 1379, 992, 295, 1412, 13, 400, 309, 311, 445, 364, 2857, 51519, 51519, 992, 295, 6687, 13, 4803, 309, 311, 1481, 281, 312, 1075, 281, 611, 1778, 466, 411, 9859, 51777, 51777], "temperature": 0.0, "avg_logprob": -0.08643297715620561, "compression_ratio": 1.74609375, "no_caption_prob": 2.79683754342841e-05}, {"id": 322, "seek": 193010, "start": 1953.1999999999998, "end": 1958.36, "text": " set of confidence. Sometimes it's nice to be able to also reason about like concrete", "tokens": [50364, 498, 286, 478, 1940, 264, 2649, 295, 264, 912, 2158, 295, 1460, 13, 1610, 411, 309, 21156, 279, 3671, 1460, 50695, 50695, 8944, 13, 407, 498, 456, 311, 257, 3671, 1465, 294, 1868, 11, 2035, 264, 3539, 2158, 295, 264, 3808, 50949, 50949, 293, 14941, 366, 11, 562, 456, 311, 257, 3671, 2158, 294, 1868, 11, 264, 2158, 486, 312, 3671, 11, 558, 30, 51197, 51197, 663, 311, 411, 257, 4707, 291, 393, 19810, 2108, 264, 1379, 992, 295, 1412, 13, 400, 309, 311, 445, 364, 2857, 51519, 51519, 992, 295, 6687, 13, 4803, 309, 311, 1481, 281, 312, 1075, 281, 611, 1778, 466, 411, 9859, 51777, 51777], "temperature": 0.0, "avg_logprob": -0.08643297715620561, "compression_ratio": 1.74609375, "no_caption_prob": 2.79683754342841e-05}, {"id": 323, "seek": 195836, "start": 1958.36, "end": 1964.0, "text": " values with a plain unit test, but it's nice to have both at your disposal.", "tokens": [50364, 4190, 365, 257, 11121, 4985, 1500, 11, 457, 309, 311, 1481, 281, 362, 1293, 412, 428, 26400, 13, 50646, 50646, 440, 551, 286, 362, 1352, 588, 2252, 281, 764, 365, 4707, 4997, 307, 2390, 264, 1412, 50908, 50908, 6352, 13, 407, 2673, 437, 286, 915, 307, 11, 293, 341, 307, 983, 286, 500, 380, 764, 309, 709, 11, 767, 11, 1238, 51328, 51328, 709, 1128, 11, 307, 570, 456, 311, 1009, 746, 300, 291, 500, 380, 360, 458, 437, 281, 3241, 382, 4846, 13, 51722, 51722], "temperature": 0.0, "avg_logprob": -0.14688858118924228, "compression_ratio": 1.5944700460829493, "no_caption_prob": 6.961975941521814e-06}, {"id": 324, "seek": 195836, "start": 1964.0, "end": 1969.24, "text": " The thing I have found very difficult to use with property testing is building the data", "tokens": [50364, 4190, 365, 257, 11121, 4985, 1500, 11, 457, 309, 311, 1481, 281, 362, 1293, 412, 428, 26400, 13, 50646, 50646, 440, 551, 286, 362, 1352, 588, 2252, 281, 764, 365, 4707, 4997, 307, 2390, 264, 1412, 50908, 50908, 6352, 13, 407, 2673, 437, 286, 915, 307, 11, 293, 341, 307, 983, 286, 500, 380, 764, 309, 709, 11, 767, 11, 1238, 51328, 51328, 709, 1128, 11, 307, 570, 456, 311, 1009, 746, 300, 291, 500, 380, 360, 458, 437, 281, 3241, 382, 4846, 13, 51722, 51722], "temperature": 0.0, "avg_logprob": -0.14688858118924228, "compression_ratio": 1.5944700460829493, "no_caption_prob": 6.961975941521814e-06}, {"id": 325, "seek": 195836, "start": 1969.24, "end": 1977.6399999999999, "text": " sets. So usually what I find is, and this is why I don't use it much, actually, pretty", "tokens": [50364, 4190, 365, 257, 11121, 4985, 1500, 11, 457, 309, 311, 1481, 281, 362, 1293, 412, 428, 26400, 13, 50646, 50646, 440, 551, 286, 362, 1352, 588, 2252, 281, 764, 365, 4707, 4997, 307, 2390, 264, 1412, 50908, 50908, 6352, 13, 407, 2673, 437, 286, 915, 307, 11, 293, 341, 307, 983, 286, 500, 380, 764, 309, 709, 11, 767, 11, 1238, 51328, 51328, 709, 1128, 11, 307, 570, 456, 311, 1009, 746, 300, 291, 500, 380, 360, 458, 437, 281, 3241, 382, 4846, 13, 51722, 51722], "temperature": 0.0, "avg_logprob": -0.14688858118924228, "compression_ratio": 1.5944700460829493, "no_caption_prob": 6.961975941521814e-06}, {"id": 326, "seek": 195836, "start": 1977.6399999999999, "end": 1985.52, "text": " much never, is because there's always something that you don't do know what to accept as input.", "tokens": [50364, 4190, 365, 257, 11121, 4985, 1500, 11, 457, 309, 311, 1481, 281, 362, 1293, 412, 428, 26400, 13, 50646, 50646, 440, 551, 286, 362, 1352, 588, 2252, 281, 764, 365, 4707, 4997, 307, 2390, 264, 1412, 50908, 50908, 6352, 13, 407, 2673, 437, 286, 915, 307, 11, 293, 341, 307, 983, 286, 500, 380, 764, 309, 709, 11, 767, 11, 1238, 51328, 51328, 709, 1128, 11, 307, 570, 456, 311, 1009, 746, 300, 291, 500, 380, 360, 458, 437, 281, 3241, 382, 4846, 13, 51722, 51722], "temperature": 0.0, "avg_logprob": -0.14688858118924228, "compression_ratio": 1.5944700460829493, "no_caption_prob": 6.961975941521814e-06}, {"id": 327, "seek": 198552, "start": 1985.52, "end": 1992.4, "text": " For instance, you say if you put a minus sign before the value, they should be negative.", "tokens": [50364, 1171, 5197, 11, 291, 584, 498, 291, 829, 257, 3175, 1465, 949, 264, 2158, 11, 436, 820, 312, 3671, 13, 50708, 50708, 583, 300, 307, 406, 264, 1389, 498, 264, 2158, 307, 4018, 13, 407, 577, 360, 291, 584, 286, 528, 257, 15706, 420, 364, 24922, 11, 51151, 51151, 457, 406, 4018, 30, 1436, 337, 4018, 11, 309, 486, 3061, 13, 400, 309, 486, 2138, 853, 4018, 412, 512, 935, 13, 51414, 51414, 1779, 13, 286, 458, 13, 286, 3986, 13, 663, 311, 257, 534, 12414, 644, 295, 309, 13, 1485, 636, 291, 393, 360, 300, 307, 291, 51716, 51716], "temperature": 0.0, "avg_logprob": -0.14699870464848538, "compression_ratio": 1.5508474576271187, "no_caption_prob": 1.618745955056511e-05}, {"id": 328, "seek": 198552, "start": 1992.4, "end": 2001.26, "text": " But that is not the case if the value is zero. So how do you say I want a float or an integer,", "tokens": [50364, 1171, 5197, 11, 291, 584, 498, 291, 829, 257, 3175, 1465, 949, 264, 2158, 11, 436, 820, 312, 3671, 13, 50708, 50708, 583, 300, 307, 406, 264, 1389, 498, 264, 2158, 307, 4018, 13, 407, 577, 360, 291, 584, 286, 528, 257, 15706, 420, 364, 24922, 11, 51151, 51151, 457, 406, 4018, 30, 1436, 337, 4018, 11, 309, 486, 3061, 13, 400, 309, 486, 2138, 853, 4018, 412, 512, 935, 13, 51414, 51414, 1779, 13, 286, 458, 13, 286, 3986, 13, 663, 311, 257, 534, 12414, 644, 295, 309, 13, 1485, 636, 291, 393, 360, 300, 307, 291, 51716, 51716], "temperature": 0.0, "avg_logprob": -0.14699870464848538, "compression_ratio": 1.5508474576271187, "no_caption_prob": 1.618745955056511e-05}, {"id": 329, "seek": 198552, "start": 2001.26, "end": 2006.52, "text": " but not zero? Because for zero, it will fail. And it will definitely try zero at some point.", "tokens": [50364, 1171, 5197, 11, 291, 584, 498, 291, 829, 257, 3175, 1465, 949, 264, 2158, 11, 436, 820, 312, 3671, 13, 50708, 50708, 583, 300, 307, 406, 264, 1389, 498, 264, 2158, 307, 4018, 13, 407, 577, 360, 291, 584, 286, 528, 257, 15706, 420, 364, 24922, 11, 51151, 51151, 457, 406, 4018, 30, 1436, 337, 4018, 11, 309, 486, 3061, 13, 400, 309, 486, 2138, 853, 4018, 412, 512, 935, 13, 51414, 51414, 1779, 13, 286, 458, 13, 286, 3986, 13, 663, 311, 257, 534, 12414, 644, 295, 309, 13, 1485, 636, 291, 393, 360, 300, 307, 291, 51716, 51716], "temperature": 0.0, "avg_logprob": -0.14699870464848538, "compression_ratio": 1.5508474576271187, "no_caption_prob": 1.618745955056511e-05}, {"id": 330, "seek": 198552, "start": 2006.52, "end": 2012.56, "text": " Right. I know. I agree. That's a really tricky part of it. One way you can do that is you", "tokens": [50364, 1171, 5197, 11, 291, 584, 498, 291, 829, 257, 3175, 1465, 949, 264, 2158, 11, 436, 820, 312, 3671, 13, 50708, 50708, 583, 300, 307, 406, 264, 1389, 498, 264, 2158, 307, 4018, 13, 407, 577, 360, 291, 584, 286, 528, 257, 15706, 420, 364, 24922, 11, 51151, 51151, 457, 406, 4018, 30, 1436, 337, 4018, 11, 309, 486, 3061, 13, 400, 309, 486, 2138, 853, 4018, 412, 512, 935, 13, 51414, 51414, 1779, 13, 286, 458, 13, 286, 3986, 13, 663, 311, 257, 534, 12414, 644, 295, 309, 13, 1485, 636, 291, 393, 360, 300, 307, 291, 51716, 51716], "temperature": 0.0, "avg_logprob": -0.14699870464848538, "compression_ratio": 1.5508474576271187, "no_caption_prob": 1.618745955056511e-05}, {"id": 331, "seek": 201256, "start": 2012.56, "end": 2019.3999999999999, "text": " could do like fuzz.int and then you could do fuzz.map int plus one.", "tokens": [50364, 727, 360, 411, 283, 16740, 13, 686, 293, 550, 291, 727, 360, 283, 16740, 13, 24223, 560, 1804, 472, 13, 50706, 50706, 1396, 437, 498, 309, 10833, 3175, 472, 30, 876, 11, 1943, 380, 456, 411, 257, 3353, 420, 291, 727, 51016, 51016, 360, 411, 8236, 2158, 13, 509, 362, 281, 483, 13494, 365, 309, 13, 865, 13, 286, 2041, 456, 311, 406, 257, 3353, 51336, 51336, 560, 472, 11, 457, 291, 727, 652, 257, 3353, 560, 283, 3334, 4527, 538, 1566, 1940, 264, 8236, 2158, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.14753589630126954, "compression_ratio": 1.7354497354497354, "no_caption_prob": 4.683711449615657e-05}, {"id": 332, "seek": 201256, "start": 2019.3999999999999, "end": 2025.6, "text": " Then what if it generated minus one? Oh, isn't there like a positive or you could", "tokens": [50364, 727, 360, 411, 283, 16740, 13, 686, 293, 550, 291, 727, 360, 283, 16740, 13, 24223, 560, 1804, 472, 13, 50706, 50706, 1396, 437, 498, 309, 10833, 3175, 472, 30, 876, 11, 1943, 380, 456, 411, 257, 3353, 420, 291, 727, 51016, 51016, 360, 411, 8236, 2158, 13, 509, 362, 281, 483, 13494, 365, 309, 13, 865, 13, 286, 2041, 456, 311, 406, 257, 3353, 51336, 51336, 560, 472, 11, 457, 291, 727, 652, 257, 3353, 560, 283, 3334, 4527, 538, 1566, 1940, 264, 8236, 2158, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.14753589630126954, "compression_ratio": 1.7354497354497354, "no_caption_prob": 4.683711449615657e-05}, {"id": 333, "seek": 201256, "start": 2025.6, "end": 2032.0, "text": " do like absolute value. You have to get clever with it. Yeah. I guess there's not a positive", "tokens": [50364, 727, 360, 411, 283, 16740, 13, 686, 293, 550, 291, 727, 360, 283, 16740, 13, 24223, 560, 1804, 472, 13, 50706, 50706, 1396, 437, 498, 309, 10833, 3175, 472, 30, 876, 11, 1943, 380, 456, 411, 257, 3353, 420, 291, 727, 51016, 51016, 360, 411, 8236, 2158, 13, 509, 362, 281, 483, 13494, 365, 309, 13, 865, 13, 286, 2041, 456, 311, 406, 257, 3353, 51336, 51336, 560, 472, 11, 457, 291, 727, 652, 257, 3353, 560, 283, 3334, 4527, 538, 1566, 1940, 264, 8236, 2158, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.14753589630126954, "compression_ratio": 1.7354497354497354, "no_caption_prob": 4.683711449615657e-05}, {"id": 334, "seek": 201256, "start": 2032.0, "end": 2037.56, "text": " int one, but you could make a positive int fuzzer by saying taking the absolute value", "tokens": [50364, 727, 360, 411, 283, 16740, 13, 686, 293, 550, 291, 727, 360, 283, 16740, 13, 24223, 560, 1804, 472, 13, 50706, 50706, 1396, 437, 498, 309, 10833, 3175, 472, 30, 876, 11, 1943, 380, 456, 411, 257, 3353, 420, 291, 727, 51016, 51016, 360, 411, 8236, 2158, 13, 509, 362, 281, 483, 13494, 365, 309, 13, 865, 13, 286, 2041, 456, 311, 406, 257, 3353, 51336, 51336, 560, 472, 11, 457, 291, 727, 652, 257, 3353, 560, 283, 3334, 4527, 538, 1566, 1940, 264, 8236, 2158, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.14753589630126954, "compression_ratio": 1.7354497354497354, "no_caption_prob": 4.683711449615657e-05}, {"id": 335, "seek": 203756, "start": 2037.56, "end": 2043.3999999999999, "text": " and then adding one. Yeah. And then you can give yourself this building block of a positive", "tokens": [50364, 293, 550, 5127, 472, 13, 865, 13, 400, 550, 291, 393, 976, 1803, 341, 2390, 3461, 295, 257, 3353, 50656, 50656, 560, 283, 3334, 4527, 13, 583, 309, 307, 257, 707, 857, 11411, 13, 286, 519, 456, 311, 257, 636, 281, 411, 584, 300, 257, 1729, 51019, 51019, 283, 16740, 2158, 281, 33536, 309, 11, 457, 309, 393, 611, 1477, 281, 411, 8630, 37772, 2663, 365, 264, 51368, 51368, 283, 3334, 8781, 13, 865, 13, 1610, 291, 727, 611, 11200, 264, 1500, 11, 584, 2066, 13, 9216, 11, 3620, 264, 1500, 486, 51752, 51752], "temperature": 0.0, "avg_logprob": -0.14296205838521323, "compression_ratio": 1.6017699115044248, "no_caption_prob": 3.3211825211765245e-05}, {"id": 336, "seek": 203756, "start": 2043.3999999999999, "end": 2050.66, "text": " int fuzzer. But it is a little bit awkward. I think there's a way to like say that a particular", "tokens": [50364, 293, 550, 5127, 472, 13, 865, 13, 400, 550, 291, 393, 976, 1803, 341, 2390, 3461, 295, 257, 3353, 50656, 50656, 560, 283, 3334, 4527, 13, 583, 309, 307, 257, 707, 857, 11411, 13, 286, 519, 456, 311, 257, 636, 281, 411, 584, 300, 257, 1729, 51019, 51019, 283, 16740, 2158, 281, 33536, 309, 11, 457, 309, 393, 611, 1477, 281, 411, 8630, 37772, 2663, 365, 264, 51368, 51368, 283, 3334, 8781, 13, 865, 13, 1610, 291, 727, 611, 11200, 264, 1500, 11, 584, 2066, 13, 9216, 11, 3620, 264, 1500, 486, 51752, 51752], "temperature": 0.0, "avg_logprob": -0.14296205838521323, "compression_ratio": 1.6017699115044248, "no_caption_prob": 3.3211825211765245e-05}, {"id": 337, "seek": 203756, "start": 2050.66, "end": 2057.64, "text": " fuzz value to exclude it, but it can also lead to like stack overflow issues with the", "tokens": [50364, 293, 550, 5127, 472, 13, 865, 13, 400, 550, 291, 393, 976, 1803, 341, 2390, 3461, 295, 257, 3353, 50656, 50656, 560, 283, 3334, 4527, 13, 583, 309, 307, 257, 707, 857, 11411, 13, 286, 519, 456, 311, 257, 636, 281, 411, 584, 300, 257, 1729, 51019, 51019, 283, 16740, 2158, 281, 33536, 309, 11, 457, 309, 393, 611, 1477, 281, 411, 8630, 37772, 2663, 365, 264, 51368, 51368, 283, 3334, 8781, 13, 865, 13, 1610, 291, 727, 611, 11200, 264, 1500, 11, 584, 2066, 13, 9216, 11, 3620, 264, 1500, 486, 51752, 51752], "temperature": 0.0, "avg_logprob": -0.14296205838521323, "compression_ratio": 1.6017699115044248, "no_caption_prob": 3.3211825211765245e-05}, {"id": 338, "seek": 203756, "start": 2057.64, "end": 2065.32, "text": " fuzzing. Yeah. Or you could also ignore the test, say expect.pass, meaning the test will", "tokens": [50364, 293, 550, 5127, 472, 13, 865, 13, 400, 550, 291, 393, 976, 1803, 341, 2390, 3461, 295, 257, 3353, 50656, 50656, 560, 283, 3334, 4527, 13, 583, 309, 307, 257, 707, 857, 11411, 13, 286, 519, 456, 311, 257, 636, 281, 411, 584, 300, 257, 1729, 51019, 51019, 283, 16740, 2158, 281, 33536, 309, 11, 457, 309, 393, 611, 1477, 281, 411, 8630, 37772, 2663, 365, 264, 51368, 51368, 283, 3334, 8781, 13, 865, 13, 1610, 291, 727, 611, 11200, 264, 1500, 11, 584, 2066, 13, 9216, 11, 3620, 264, 1500, 486, 51752, 51752], "temperature": 0.0, "avg_logprob": -0.14296205838521323, "compression_ratio": 1.6017699115044248, "no_caption_prob": 3.3211825211765245e-05}, {"id": 339, "seek": 206532, "start": 2065.32, "end": 2073.48, "text": " just pass if the value is not valid. But if your values are rarely valid, then the test", "tokens": [50364, 445, 1320, 498, 264, 2158, 307, 406, 7363, 13, 583, 498, 428, 4190, 366, 13752, 7363, 11, 550, 264, 1500, 50772, 50772, 307, 406, 3163, 709, 13, 1779, 13, 876, 11, 456, 307, 364, 560, 3613, 13, 821, 311, 560, 3613, 13, 407, 291, 393, 976, 51074, 51074, 309, 257, 3613, 13, 821, 311, 15706, 3613, 13, 400, 291, 393, 483, 13494, 411, 2171, 365, 4342, 13, 51450, 51450, 1743, 291, 727, 1884, 11, 456, 311, 611, 283, 16740, 13, 25279, 394, 293, 283, 16740, 13, 546, 2670, 13, 407, 411, 291, 727, 652, 411, 51856, 51856], "temperature": 0.0, "avg_logprob": -0.1701831624965475, "compression_ratio": 1.7414634146341463, "no_caption_prob": 2.71086046268465e-05}, {"id": 340, "seek": 206532, "start": 2073.48, "end": 2079.52, "text": " is not worth much. Right. Oh, there is an int range. There's int range. So you can give", "tokens": [50364, 445, 1320, 498, 264, 2158, 307, 406, 7363, 13, 583, 498, 428, 4190, 366, 13752, 7363, 11, 550, 264, 1500, 50772, 50772, 307, 406, 3163, 709, 13, 1779, 13, 876, 11, 456, 307, 364, 560, 3613, 13, 821, 311, 560, 3613, 13, 407, 291, 393, 976, 51074, 51074, 309, 257, 3613, 13, 821, 311, 15706, 3613, 13, 400, 291, 393, 483, 13494, 411, 2171, 365, 4342, 13, 51450, 51450, 1743, 291, 727, 1884, 11, 456, 311, 611, 283, 16740, 13, 25279, 394, 293, 283, 16740, 13, 546, 2670, 13, 407, 411, 291, 727, 652, 411, 51856, 51856], "temperature": 0.0, "avg_logprob": -0.1701831624965475, "compression_ratio": 1.7414634146341463, "no_caption_prob": 2.71086046268465e-05}, {"id": 341, "seek": 206532, "start": 2079.52, "end": 2087.04, "text": " it a range. There's float range. And you can get clever like sometimes with characters.", "tokens": [50364, 445, 1320, 498, 264, 2158, 307, 406, 7363, 13, 583, 498, 428, 4190, 366, 13752, 7363, 11, 550, 264, 1500, 50772, 50772, 307, 406, 3163, 709, 13, 1779, 13, 876, 11, 456, 307, 364, 560, 3613, 13, 821, 311, 560, 3613, 13, 407, 291, 393, 976, 51074, 51074, 309, 257, 3613, 13, 821, 311, 15706, 3613, 13, 400, 291, 393, 483, 13494, 411, 2171, 365, 4342, 13, 51450, 51450, 1743, 291, 727, 1884, 11, 456, 311, 611, 283, 16740, 13, 25279, 394, 293, 283, 16740, 13, 546, 2670, 13, 407, 411, 291, 727, 652, 411, 51856, 51856], "temperature": 0.0, "avg_logprob": -0.1701831624965475, "compression_ratio": 1.7414634146341463, "no_caption_prob": 2.71086046268465e-05}, {"id": 342, "seek": 206532, "start": 2087.04, "end": 2095.1600000000003, "text": " Like you could create, there's also fuzz.constant and fuzz.oneof. So like you could make like", "tokens": [50364, 445, 1320, 498, 264, 2158, 307, 406, 7363, 13, 583, 498, 428, 4190, 366, 13752, 7363, 11, 550, 264, 1500, 50772, 50772, 307, 406, 3163, 709, 13, 1779, 13, 876, 11, 456, 307, 364, 560, 3613, 13, 821, 311, 560, 3613, 13, 407, 291, 393, 976, 51074, 51074, 309, 257, 3613, 13, 821, 311, 15706, 3613, 13, 400, 291, 393, 483, 13494, 411, 2171, 365, 4342, 13, 51450, 51450, 1743, 291, 727, 1884, 11, 456, 311, 611, 283, 16740, 13, 25279, 394, 293, 283, 16740, 13, 546, 2670, 13, 407, 411, 291, 727, 652, 411, 51856, 51856], "temperature": 0.0, "avg_logprob": -0.1701831624965475, "compression_ratio": 1.7414634146341463, "no_caption_prob": 2.71086046268465e-05}, {"id": 343, "seek": 209516, "start": 2095.16, "end": 2100.72, "text": " a vowel fuzzer and you can build up all sorts of complex things, but you do have to get", "tokens": [50364, 257, 29410, 283, 3334, 4527, 293, 291, 393, 1322, 493, 439, 7527, 295, 3997, 721, 11, 457, 291, 360, 362, 281, 483, 50642, 50642, 257, 707, 13494, 13, 400, 286, 914, 11, 709, 411, 2699, 76, 11, 2171, 264, 636, 300, 291, 528, 281, 5109, 50880, 50880, 309, 1943, 380, 264, 636, 309, 311, 516, 281, 312, 3303, 281, 5109, 309, 13, 400, 370, 291, 362, 281, 352, 257, 819, 51058, 51058, 7955, 13, 583, 1564, 291, 360, 11, 291, 393, 915, 364, 21117, 3827, 13, 865, 13, 508, 2032, 268, 11, 360, 291, 1562, 1500, 6809, 51394, 51394, 294, 2699, 76, 30, 883, 13, 1144, 291, 458, 437, 264, 1778, 983, 30, 5115, 385, 13, 1436, 415, 5240, 13657, 2699, 76, 3131, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.11186188224732406, "compression_ratio": 1.618705035971223, "no_caption_prob": 4.2646883230190724e-05}, {"id": 344, "seek": 209516, "start": 2100.72, "end": 2105.48, "text": " a little clever. And I mean, much like Elm, sometimes the way that you want to express", "tokens": [50364, 257, 29410, 283, 3334, 4527, 293, 291, 393, 1322, 493, 439, 7527, 295, 3997, 721, 11, 457, 291, 360, 362, 281, 483, 50642, 50642, 257, 707, 13494, 13, 400, 286, 914, 11, 709, 411, 2699, 76, 11, 2171, 264, 636, 300, 291, 528, 281, 5109, 50880, 50880, 309, 1943, 380, 264, 636, 309, 311, 516, 281, 312, 3303, 281, 5109, 309, 13, 400, 370, 291, 362, 281, 352, 257, 819, 51058, 51058, 7955, 13, 583, 1564, 291, 360, 11, 291, 393, 915, 364, 21117, 3827, 13, 865, 13, 508, 2032, 268, 11, 360, 291, 1562, 1500, 6809, 51394, 51394, 294, 2699, 76, 30, 883, 13, 1144, 291, 458, 437, 264, 1778, 983, 30, 5115, 385, 13, 1436, 415, 5240, 13657, 2699, 76, 3131, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.11186188224732406, "compression_ratio": 1.618705035971223, "no_caption_prob": 4.2646883230190724e-05}, {"id": 345, "seek": 209516, "start": 2105.48, "end": 2109.04, "text": " it isn't the way it's going to be natural to express it. And so you have to go a different", "tokens": [50364, 257, 29410, 283, 3334, 4527, 293, 291, 393, 1322, 493, 439, 7527, 295, 3997, 721, 11, 457, 291, 360, 362, 281, 483, 50642, 50642, 257, 707, 13494, 13, 400, 286, 914, 11, 709, 411, 2699, 76, 11, 2171, 264, 636, 300, 291, 528, 281, 5109, 50880, 50880, 309, 1943, 380, 264, 636, 309, 311, 516, 281, 312, 3303, 281, 5109, 309, 13, 400, 370, 291, 362, 281, 352, 257, 819, 51058, 51058, 7955, 13, 583, 1564, 291, 360, 11, 291, 393, 915, 364, 21117, 3827, 13, 865, 13, 508, 2032, 268, 11, 360, 291, 1562, 1500, 6809, 51394, 51394, 294, 2699, 76, 30, 883, 13, 1144, 291, 458, 437, 264, 1778, 983, 30, 5115, 385, 13, 1436, 415, 5240, 13657, 2699, 76, 3131, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.11186188224732406, "compression_ratio": 1.618705035971223, "no_caption_prob": 4.2646883230190724e-05}, {"id": 346, "seek": 209516, "start": 2109.04, "end": 2115.7599999999998, "text": " route. But once you do, you can find an elegant solution. Yeah. Jeroen, do you ever test views", "tokens": [50364, 257, 29410, 283, 3334, 4527, 293, 291, 393, 1322, 493, 439, 7527, 295, 3997, 721, 11, 457, 291, 360, 362, 281, 483, 50642, 50642, 257, 707, 13494, 13, 400, 286, 914, 11, 709, 411, 2699, 76, 11, 2171, 264, 636, 300, 291, 528, 281, 5109, 50880, 50880, 309, 1943, 380, 264, 636, 309, 311, 516, 281, 312, 3303, 281, 5109, 309, 13, 400, 370, 291, 362, 281, 352, 257, 819, 51058, 51058, 7955, 13, 583, 1564, 291, 360, 11, 291, 393, 915, 364, 21117, 3827, 13, 865, 13, 508, 2032, 268, 11, 360, 291, 1562, 1500, 6809, 51394, 51394, 294, 2699, 76, 30, 883, 13, 1144, 291, 458, 437, 264, 1778, 983, 30, 5115, 385, 13, 1436, 415, 5240, 13657, 2699, 76, 3131, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.11186188224732406, "compression_ratio": 1.618705035971223, "no_caption_prob": 4.2646883230190724e-05}, {"id": 347, "seek": 209516, "start": 2115.7599999999998, "end": 2123.16, "text": " in Elm? No. Do you know what the reason why? Tell me. Because he mostly writes Elm review", "tokens": [50364, 257, 29410, 283, 3334, 4527, 293, 291, 393, 1322, 493, 439, 7527, 295, 3997, 721, 11, 457, 291, 360, 362, 281, 483, 50642, 50642, 257, 707, 13494, 13, 400, 286, 914, 11, 709, 411, 2699, 76, 11, 2171, 264, 636, 300, 291, 528, 281, 5109, 50880, 50880, 309, 1943, 380, 264, 636, 309, 311, 516, 281, 312, 3303, 281, 5109, 309, 13, 400, 370, 291, 362, 281, 352, 257, 819, 51058, 51058, 7955, 13, 583, 1564, 291, 360, 11, 291, 393, 915, 364, 21117, 3827, 13, 865, 13, 508, 2032, 268, 11, 360, 291, 1562, 1500, 6809, 51394, 51394, 294, 2699, 76, 30, 883, 13, 1144, 291, 458, 437, 264, 1778, 983, 30, 5115, 385, 13, 1436, 415, 5240, 13657, 2699, 76, 3131, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.11186188224732406, "compression_ratio": 1.618705035971223, "no_caption_prob": 4.2646883230190724e-05}, {"id": 348, "seek": 212316, "start": 2123.16, "end": 2131.52, "text": " and there's no view in Elm review. Well, except in the name, but that's it. No, I don't. I", "tokens": [50364, 293, 456, 311, 572, 1910, 294, 2699, 76, 3131, 13, 1042, 11, 3993, 294, 264, 1315, 11, 457, 300, 311, 309, 13, 883, 11, 286, 500, 380, 13, 286, 50782, 50782, 458, 456, 311, 257, 10088, 420, 2940, 16679, 281, 1500, 264, 17995, 294, 2699, 76, 6921, 420, 2699, 76, 24765, 763, 51170, 51170, 6921, 11, 457, 286, 600, 1128, 3031, 552, 13, 3560, 291, 30, 286, 600, 1143, 552, 257, 5870, 857, 11, 457, 286, 915, 300, 51562, 51562], "temperature": 0.0, "avg_logprob": -0.14980597612334462, "compression_ratio": 1.5314285714285714, "no_caption_prob": 1.1478531632747035e-05}, {"id": 349, "seek": 212316, "start": 2131.52, "end": 2139.2799999999997, "text": " know there's a module or several modules to test the HTML in Elm tests or Elm explorations", "tokens": [50364, 293, 456, 311, 572, 1910, 294, 2699, 76, 3131, 13, 1042, 11, 3993, 294, 264, 1315, 11, 457, 300, 311, 309, 13, 883, 11, 286, 500, 380, 13, 286, 50782, 50782, 458, 456, 311, 257, 10088, 420, 2940, 16679, 281, 1500, 264, 17995, 294, 2699, 76, 6921, 420, 2699, 76, 24765, 763, 51170, 51170, 6921, 11, 457, 286, 600, 1128, 3031, 552, 13, 3560, 291, 30, 286, 600, 1143, 552, 257, 5870, 857, 11, 457, 286, 915, 300, 51562, 51562], "temperature": 0.0, "avg_logprob": -0.14980597612334462, "compression_ratio": 1.5314285714285714, "no_caption_prob": 1.1478531632747035e-05}, {"id": 350, "seek": 212316, "start": 2139.2799999999997, "end": 2147.12, "text": " tests, but I've never tried them. Have you? I've used them a tiny bit, but I find that", "tokens": [50364, 293, 456, 311, 572, 1910, 294, 2699, 76, 3131, 13, 1042, 11, 3993, 294, 264, 1315, 11, 457, 300, 311, 309, 13, 883, 11, 286, 500, 380, 13, 286, 50782, 50782, 458, 456, 311, 257, 10088, 420, 2940, 16679, 281, 1500, 264, 17995, 294, 2699, 76, 6921, 420, 2699, 76, 24765, 763, 51170, 51170, 6921, 11, 457, 286, 600, 1128, 3031, 552, 13, 3560, 291, 30, 286, 600, 1143, 552, 257, 5870, 857, 11, 457, 286, 915, 300, 51562, 51562], "temperature": 0.0, "avg_logprob": -0.14980597612334462, "compression_ratio": 1.5314285714285714, "no_caption_prob": 1.1478531632747035e-05}, {"id": 351, "seek": 214712, "start": 2147.12, "end": 2153.88, "text": " if I'm doing unit testing, what I find is that usually what I want to do is I want to", "tokens": [50364, 498, 286, 478, 884, 4985, 4997, 11, 437, 286, 915, 307, 300, 2673, 437, 286, 528, 281, 360, 307, 286, 528, 281, 50702, 50702, 1884, 257, 1412, 2010, 300, 8855, 437, 264, 1910, 307, 516, 281, 312, 293, 652, 19810, 626, 322, 50930, 50930, 300, 1412, 2010, 13, 400, 550, 1320, 300, 411, 2171, 294, 364, 2657, 21841, 4319, 11, 561, 751, 51210, 51210, 466, 411, 1910, 6565, 11, 291, 458, 11, 300, 291, 393, 362, 746, 300, 8855, 1203, 51464, 51464, 294, 257, 1254, 32509, 636, 293, 264, 1910, 307, 445, 9100, 990, 309, 13, 467, 311, 445, 8867, 766, 729, 707, 3755, 51742, 51742], "temperature": 0.0, "avg_logprob": -0.07014324488463225, "compression_ratio": 1.7936507936507937, "no_caption_prob": 9.609250264475122e-05}, {"id": 352, "seek": 214712, "start": 2153.88, "end": 2158.44, "text": " create a data type that represents what the view is going to be and make assertions on", "tokens": [50364, 498, 286, 478, 884, 4985, 4997, 11, 437, 286, 915, 307, 300, 2673, 437, 286, 528, 281, 360, 307, 286, 528, 281, 50702, 50702, 1884, 257, 1412, 2010, 300, 8855, 437, 264, 1910, 307, 516, 281, 312, 293, 652, 19810, 626, 322, 50930, 50930, 300, 1412, 2010, 13, 400, 550, 1320, 300, 411, 2171, 294, 364, 2657, 21841, 4319, 11, 561, 751, 51210, 51210, 466, 411, 1910, 6565, 11, 291, 458, 11, 300, 291, 393, 362, 746, 300, 8855, 1203, 51464, 51464, 294, 257, 1254, 32509, 636, 293, 264, 1910, 307, 445, 9100, 990, 309, 13, 467, 311, 445, 8867, 766, 729, 707, 3755, 51742, 51742], "temperature": 0.0, "avg_logprob": -0.07014324488463225, "compression_ratio": 1.7936507936507937, "no_caption_prob": 9.609250264475122e-05}, {"id": 353, "seek": 214712, "start": 2158.44, "end": 2164.04, "text": " that data type. And then pass that like sometimes in an object oriented context, people talk", "tokens": [50364, 498, 286, 478, 884, 4985, 4997, 11, 437, 286, 915, 307, 300, 2673, 437, 286, 528, 281, 360, 307, 286, 528, 281, 50702, 50702, 1884, 257, 1412, 2010, 300, 8855, 437, 264, 1910, 307, 516, 281, 312, 293, 652, 19810, 626, 322, 50930, 50930, 300, 1412, 2010, 13, 400, 550, 1320, 300, 411, 2171, 294, 364, 2657, 21841, 4319, 11, 561, 751, 51210, 51210, 466, 411, 1910, 6565, 11, 291, 458, 11, 300, 291, 393, 362, 746, 300, 8855, 1203, 51464, 51464, 294, 257, 1254, 32509, 636, 293, 264, 1910, 307, 445, 9100, 990, 309, 13, 467, 311, 445, 8867, 766, 729, 707, 3755, 51742, 51742], "temperature": 0.0, "avg_logprob": -0.07014324488463225, "compression_ratio": 1.7936507936507937, "no_caption_prob": 9.609250264475122e-05}, {"id": 354, "seek": 214712, "start": 2164.04, "end": 2169.12, "text": " about like view objects, you know, that you can have something that represents everything", "tokens": [50364, 498, 286, 478, 884, 4985, 4997, 11, 437, 286, 915, 307, 300, 2673, 437, 286, 528, 281, 360, 307, 286, 528, 281, 50702, 50702, 1884, 257, 1412, 2010, 300, 8855, 437, 264, 1910, 307, 516, 281, 312, 293, 652, 19810, 626, 322, 50930, 50930, 300, 1412, 2010, 13, 400, 550, 1320, 300, 411, 2171, 294, 364, 2657, 21841, 4319, 11, 561, 751, 51210, 51210, 466, 411, 1910, 6565, 11, 291, 458, 11, 300, 291, 393, 362, 746, 300, 8855, 1203, 51464, 51464, 294, 257, 1254, 32509, 636, 293, 264, 1910, 307, 445, 9100, 990, 309, 13, 467, 311, 445, 8867, 766, 729, 707, 3755, 51742, 51742], "temperature": 0.0, "avg_logprob": -0.07014324488463225, "compression_ratio": 1.7936507936507937, "no_caption_prob": 9.609250264475122e-05}, {"id": 355, "seek": 214712, "start": 2169.12, "end": 2174.68, "text": " in a formatted way and the view is just templating it. It's just picking off those little pieces", "tokens": [50364, 498, 286, 478, 884, 4985, 4997, 11, 437, 286, 915, 307, 300, 2673, 437, 286, 528, 281, 360, 307, 286, 528, 281, 50702, 50702, 1884, 257, 1412, 2010, 300, 8855, 437, 264, 1910, 307, 516, 281, 312, 293, 652, 19810, 626, 322, 50930, 50930, 300, 1412, 2010, 13, 400, 550, 1320, 300, 411, 2171, 294, 364, 2657, 21841, 4319, 11, 561, 751, 51210, 51210, 466, 411, 1910, 6565, 11, 291, 458, 11, 300, 291, 393, 362, 746, 300, 8855, 1203, 51464, 51464, 294, 257, 1254, 32509, 636, 293, 264, 1910, 307, 445, 9100, 990, 309, 13, 467, 311, 445, 8867, 766, 729, 707, 3755, 51742, 51742], "temperature": 0.0, "avg_logprob": -0.07014324488463225, "compression_ratio": 1.7936507936507937, "no_caption_prob": 9.609250264475122e-05}, {"id": 356, "seek": 217468, "start": 2174.68, "end": 2179.7599999999998, "text": " of that view object, right? So that's what makes a lot of sense to me is just have all", "tokens": [50364, 295, 300, 1910, 2657, 11, 558, 30, 407, 300, 311, 437, 1669, 257, 688, 295, 2020, 281, 385, 307, 445, 362, 439, 50618, 50618, 295, 300, 1412, 1254, 32509, 294, 257, 1729, 636, 13, 400, 498, 286, 528, 281, 652, 19810, 626, 466, 300, 50870, 50870, 7877, 11, 286, 500, 380, 643, 281, 4444, 309, 484, 365, 24387, 3048, 830, 294, 264, 17995, 5598, 13, 286, 445, 652, 51209, 51209, 19810, 626, 466, 341, 1412, 2010, 13, 400, 550, 286, 1320, 300, 1412, 2010, 281, 312, 28748, 382, 452, 51452, 51452, 1910, 13, 583, 439, 309, 311, 884, 307, 8867, 766, 613, 4190, 293, 15578, 552, 3838, 13, 467, 311, 51692, 51692], "temperature": 0.0, "avg_logprob": -0.0744638024714955, "compression_ratio": 1.650190114068441, "no_caption_prob": 1.184292614198057e-05}, {"id": 357, "seek": 217468, "start": 2179.7599999999998, "end": 2184.7999999999997, "text": " of that data formatted in a particular way. And if I want to make assertions about that", "tokens": [50364, 295, 300, 1910, 2657, 11, 558, 30, 407, 300, 311, 437, 1669, 257, 688, 295, 2020, 281, 385, 307, 445, 362, 439, 50618, 50618, 295, 300, 1412, 1254, 32509, 294, 257, 1729, 636, 13, 400, 498, 286, 528, 281, 652, 19810, 626, 466, 300, 50870, 50870, 7877, 11, 286, 500, 380, 643, 281, 4444, 309, 484, 365, 24387, 3048, 830, 294, 264, 17995, 5598, 13, 286, 445, 652, 51209, 51209, 19810, 626, 466, 341, 1412, 2010, 13, 400, 550, 286, 1320, 300, 1412, 2010, 281, 312, 28748, 382, 452, 51452, 51452, 1910, 13, 583, 439, 309, 311, 884, 307, 8867, 766, 613, 4190, 293, 15578, 552, 3838, 13, 467, 311, 51692, 51692], "temperature": 0.0, "avg_logprob": -0.0744638024714955, "compression_ratio": 1.650190114068441, "no_caption_prob": 1.184292614198057e-05}, {"id": 358, "seek": 217468, "start": 2184.7999999999997, "end": 2191.58, "text": " format, I don't need to grab it out with CSS selectors in the HTML output. I just make", "tokens": [50364, 295, 300, 1910, 2657, 11, 558, 30, 407, 300, 311, 437, 1669, 257, 688, 295, 2020, 281, 385, 307, 445, 362, 439, 50618, 50618, 295, 300, 1412, 1254, 32509, 294, 257, 1729, 636, 13, 400, 498, 286, 528, 281, 652, 19810, 626, 466, 300, 50870, 50870, 7877, 11, 286, 500, 380, 643, 281, 4444, 309, 484, 365, 24387, 3048, 830, 294, 264, 17995, 5598, 13, 286, 445, 652, 51209, 51209, 19810, 626, 466, 341, 1412, 2010, 13, 400, 550, 286, 1320, 300, 1412, 2010, 281, 312, 28748, 382, 452, 51452, 51452, 1910, 13, 583, 439, 309, 311, 884, 307, 8867, 766, 613, 4190, 293, 15578, 552, 3838, 13, 467, 311, 51692, 51692], "temperature": 0.0, "avg_logprob": -0.0744638024714955, "compression_ratio": 1.650190114068441, "no_caption_prob": 1.184292614198057e-05}, {"id": 359, "seek": 217468, "start": 2191.58, "end": 2196.44, "text": " assertions about this data type. And then I pass that data type to be rendered as my", "tokens": [50364, 295, 300, 1910, 2657, 11, 558, 30, 407, 300, 311, 437, 1669, 257, 688, 295, 2020, 281, 385, 307, 445, 362, 439, 50618, 50618, 295, 300, 1412, 1254, 32509, 294, 257, 1729, 636, 13, 400, 498, 286, 528, 281, 652, 19810, 626, 466, 300, 50870, 50870, 7877, 11, 286, 500, 380, 643, 281, 4444, 309, 484, 365, 24387, 3048, 830, 294, 264, 17995, 5598, 13, 286, 445, 652, 51209, 51209, 19810, 626, 466, 341, 1412, 2010, 13, 400, 550, 286, 1320, 300, 1412, 2010, 281, 312, 28748, 382, 452, 51452, 51452, 1910, 13, 583, 439, 309, 311, 884, 307, 8867, 766, 613, 4190, 293, 15578, 552, 3838, 13, 467, 311, 51692, 51692], "temperature": 0.0, "avg_logprob": -0.0744638024714955, "compression_ratio": 1.650190114068441, "no_caption_prob": 1.184292614198057e-05}, {"id": 360, "seek": 217468, "start": 2196.44, "end": 2201.24, "text": " view. But all it's doing is picking off these values and presenting them directly. It's", "tokens": [50364, 295, 300, 1910, 2657, 11, 558, 30, 407, 300, 311, 437, 1669, 257, 688, 295, 2020, 281, 385, 307, 445, 362, 439, 50618, 50618, 295, 300, 1412, 1254, 32509, 294, 257, 1729, 636, 13, 400, 498, 286, 528, 281, 652, 19810, 626, 466, 300, 50870, 50870, 7877, 11, 286, 500, 380, 643, 281, 4444, 309, 484, 365, 24387, 3048, 830, 294, 264, 17995, 5598, 13, 286, 445, 652, 51209, 51209, 19810, 626, 466, 341, 1412, 2010, 13, 400, 550, 286, 1320, 300, 1412, 2010, 281, 312, 28748, 382, 452, 51452, 51452, 1910, 13, 583, 439, 309, 311, 884, 307, 8867, 766, 613, 4190, 293, 15578, 552, 3838, 13, 467, 311, 51692, 51692], "temperature": 0.0, "avg_logprob": -0.0744638024714955, "compression_ratio": 1.650190114068441, "no_caption_prob": 1.184292614198057e-05}, {"id": 361, "seek": 220124, "start": 2201.24, "end": 2207.3999999999996, "text": " not manipulating them or doing any logic on them. Okay, but then you don't test your view", "tokens": [50364, 406, 40805, 552, 420, 884, 604, 9952, 322, 552, 13, 1033, 11, 457, 550, 291, 500, 380, 1500, 428, 1910, 50672, 50672, 709, 13, 1779, 11, 2293, 13, 407, 281, 385, 11, 884, 257, 4985, 1500, 412, 264, 1910, 1496, 1128, 3417, 411, 309, 311, 51140, 51140, 5127, 2158, 293, 2902, 385, 6687, 13, 467, 445, 3417, 411, 257, 1822, 293, 309, 3417, 411, 309, 311, 51398, 51398, 37447, 385, 281, 512, 721, 300, 286, 500, 380, 528, 281, 312, 29482, 281, 13, 400, 309, 1177, 380, 841, 411, 51623, 51623], "temperature": 0.0, "avg_logprob": -0.13133881681708878, "compression_ratio": 1.658878504672897, "no_caption_prob": 1.5446037650690414e-05}, {"id": 362, "seek": 220124, "start": 2207.3999999999996, "end": 2216.7599999999998, "text": " much. Right, exactly. So to me, doing a unit test at the view level never feels like it's", "tokens": [50364, 406, 40805, 552, 420, 884, 604, 9952, 322, 552, 13, 1033, 11, 457, 550, 291, 500, 380, 1500, 428, 1910, 50672, 50672, 709, 13, 1779, 11, 2293, 13, 407, 281, 385, 11, 884, 257, 4985, 1500, 412, 264, 1910, 1496, 1128, 3417, 411, 309, 311, 51140, 51140, 5127, 2158, 293, 2902, 385, 6687, 13, 467, 445, 3417, 411, 257, 1822, 293, 309, 3417, 411, 309, 311, 51398, 51398, 37447, 385, 281, 512, 721, 300, 286, 500, 380, 528, 281, 312, 29482, 281, 13, 400, 309, 1177, 380, 841, 411, 51623, 51623], "temperature": 0.0, "avg_logprob": -0.13133881681708878, "compression_ratio": 1.658878504672897, "no_caption_prob": 1.5446037650690414e-05}, {"id": 363, "seek": 220124, "start": 2216.7599999999998, "end": 2221.9199999999996, "text": " adding value and giving me confidence. It just feels like a pain and it feels like it's", "tokens": [50364, 406, 40805, 552, 420, 884, 604, 9952, 322, 552, 13, 1033, 11, 457, 550, 291, 500, 380, 1500, 428, 1910, 50672, 50672, 709, 13, 1779, 11, 2293, 13, 407, 281, 385, 11, 884, 257, 4985, 1500, 412, 264, 1910, 1496, 1128, 3417, 411, 309, 311, 51140, 51140, 5127, 2158, 293, 2902, 385, 6687, 13, 467, 445, 3417, 411, 257, 1822, 293, 309, 3417, 411, 309, 311, 51398, 51398, 37447, 385, 281, 512, 721, 300, 286, 500, 380, 528, 281, 312, 29482, 281, 13, 400, 309, 1177, 380, 841, 411, 51623, 51623], "temperature": 0.0, "avg_logprob": -0.13133881681708878, "compression_ratio": 1.658878504672897, "no_caption_prob": 1.5446037650690414e-05}, {"id": 364, "seek": 220124, "start": 2221.9199999999996, "end": 2226.4199999999996, "text": " coupling me to some things that I don't want to be coupled to. And it doesn't feel like", "tokens": [50364, 406, 40805, 552, 420, 884, 604, 9952, 322, 552, 13, 1033, 11, 457, 550, 291, 500, 380, 1500, 428, 1910, 50672, 50672, 709, 13, 1779, 11, 2293, 13, 407, 281, 385, 11, 884, 257, 4985, 1500, 412, 264, 1910, 1496, 1128, 3417, 411, 309, 311, 51140, 51140, 5127, 2158, 293, 2902, 385, 6687, 13, 467, 445, 3417, 411, 257, 1822, 293, 309, 3417, 411, 309, 311, 51398, 51398, 37447, 385, 281, 512, 721, 300, 286, 500, 380, 528, 281, 312, 29482, 281, 13, 400, 309, 1177, 380, 841, 411, 51623, 51623], "temperature": 0.0, "avg_logprob": -0.13133881681708878, "compression_ratio": 1.658878504672897, "no_caption_prob": 1.5446037650690414e-05}, {"id": 365, "seek": 222642, "start": 2226.42, "end": 2231.76, "text": " it makes me feel more confident that I got things right in my view. If I want to change", "tokens": [50364, 309, 1669, 385, 841, 544, 6679, 300, 286, 658, 721, 558, 294, 452, 1910, 13, 759, 286, 528, 281, 1319, 50631, 50631, 452, 1910, 11, 550, 286, 1319, 452, 1910, 13, 286, 528, 281, 1500, 264, 14217, 9952, 13, 823, 11, 300, 848, 11, 50923, 50923, 300, 2962, 498, 321, 434, 1417, 466, 257, 544, 1090, 1496, 1500, 2831, 813, 257, 4985, 1496, 1500, 13, 51169, 51169, 759, 321, 434, 1417, 466, 364, 917, 281, 917, 1500, 11, 550, 309, 311, 588, 8263, 13, 1396, 291, 584, 11, 1392, 11, 51415, 51415, 286, 2052, 322, 264, 24276, 2960, 13, 286, 2010, 341, 666, 341, 4846, 2519, 13, 286, 2052, 322, 341, 2960, 13, 51661, 51661], "temperature": 0.0, "avg_logprob": -0.09868515862358941, "compression_ratio": 1.8481012658227849, "no_caption_prob": 0.00020984822185710073}, {"id": 366, "seek": 222642, "start": 2231.76, "end": 2237.6, "text": " my view, then I change my view. I want to test the underlying logic. Now, that said,", "tokens": [50364, 309, 1669, 385, 841, 544, 6679, 300, 286, 658, 721, 558, 294, 452, 1910, 13, 759, 286, 528, 281, 1319, 50631, 50631, 452, 1910, 11, 550, 286, 1319, 452, 1910, 13, 286, 528, 281, 1500, 264, 14217, 9952, 13, 823, 11, 300, 848, 11, 50923, 50923, 300, 2962, 498, 321, 434, 1417, 466, 257, 544, 1090, 1496, 1500, 2831, 813, 257, 4985, 1496, 1500, 13, 51169, 51169, 759, 321, 434, 1417, 466, 364, 917, 281, 917, 1500, 11, 550, 309, 311, 588, 8263, 13, 1396, 291, 584, 11, 1392, 11, 51415, 51415, 286, 2052, 322, 264, 24276, 2960, 13, 286, 2010, 341, 666, 341, 4846, 2519, 13, 286, 2052, 322, 341, 2960, 13, 51661, 51661], "temperature": 0.0, "avg_logprob": -0.09868515862358941, "compression_ratio": 1.8481012658227849, "no_caption_prob": 0.00020984822185710073}, {"id": 367, "seek": 222642, "start": 2237.6, "end": 2242.52, "text": " that changes if we're talking about a more high level test rather than a unit level test.", "tokens": [50364, 309, 1669, 385, 841, 544, 6679, 300, 286, 658, 721, 558, 294, 452, 1910, 13, 759, 286, 528, 281, 1319, 50631, 50631, 452, 1910, 11, 550, 286, 1319, 452, 1910, 13, 286, 528, 281, 1500, 264, 14217, 9952, 13, 823, 11, 300, 848, 11, 50923, 50923, 300, 2962, 498, 321, 434, 1417, 466, 257, 544, 1090, 1496, 1500, 2831, 813, 257, 4985, 1496, 1500, 13, 51169, 51169, 759, 321, 434, 1417, 466, 364, 917, 281, 917, 1500, 11, 550, 309, 311, 588, 8263, 13, 1396, 291, 584, 11, 1392, 11, 51415, 51415, 286, 2052, 322, 264, 24276, 2960, 13, 286, 2010, 341, 666, 341, 4846, 2519, 13, 286, 2052, 322, 341, 2960, 13, 51661, 51661], "temperature": 0.0, "avg_logprob": -0.09868515862358941, "compression_ratio": 1.8481012658227849, "no_caption_prob": 0.00020984822185710073}, {"id": 368, "seek": 222642, "start": 2242.52, "end": 2247.44, "text": " If we're talking about an end to end test, then it's very valuable. Then you say, okay,", "tokens": [50364, 309, 1669, 385, 841, 544, 6679, 300, 286, 658, 721, 558, 294, 452, 1910, 13, 759, 286, 528, 281, 1319, 50631, 50631, 452, 1910, 11, 550, 286, 1319, 452, 1910, 13, 286, 528, 281, 1500, 264, 14217, 9952, 13, 823, 11, 300, 848, 11, 50923, 50923, 300, 2962, 498, 321, 434, 1417, 466, 257, 544, 1090, 1496, 1500, 2831, 813, 257, 4985, 1496, 1500, 13, 51169, 51169, 759, 321, 434, 1417, 466, 364, 917, 281, 917, 1500, 11, 550, 309, 311, 588, 8263, 13, 1396, 291, 584, 11, 1392, 11, 51415, 51415, 286, 2052, 322, 264, 24276, 2960, 13, 286, 2010, 341, 666, 341, 4846, 2519, 13, 286, 2052, 322, 341, 2960, 13, 51661, 51661], "temperature": 0.0, "avg_logprob": -0.09868515862358941, "compression_ratio": 1.8481012658227849, "no_caption_prob": 0.00020984822185710073}, {"id": 369, "seek": 222642, "start": 2247.44, "end": 2252.36, "text": " I click on the login button. I type this into this input field. I click on this button.", "tokens": [50364, 309, 1669, 385, 841, 544, 6679, 300, 286, 658, 721, 558, 294, 452, 1910, 13, 759, 286, 528, 281, 1319, 50631, 50631, 452, 1910, 11, 550, 286, 1319, 452, 1910, 13, 286, 528, 281, 1500, 264, 14217, 9952, 13, 823, 11, 300, 848, 11, 50923, 50923, 300, 2962, 498, 321, 434, 1417, 466, 257, 544, 1090, 1496, 1500, 2831, 813, 257, 4985, 1496, 1500, 13, 51169, 51169, 759, 321, 434, 1417, 466, 364, 917, 281, 917, 1500, 11, 550, 309, 311, 588, 8263, 13, 1396, 291, 584, 11, 1392, 11, 51415, 51415, 286, 2052, 322, 264, 24276, 2960, 13, 286, 2010, 341, 666, 341, 4846, 2519, 13, 286, 2052, 322, 341, 2960, 13, 51661, 51661], "temperature": 0.0, "avg_logprob": -0.09868515862358941, "compression_ratio": 1.8481012658227849, "no_caption_prob": 0.00020984822185710073}, {"id": 370, "seek": 225236, "start": 2252.36, "end": 2258.8, "text": " I navigate to this page. I should see this show up. Then in that case, making assertions", "tokens": [50364, 286, 12350, 281, 341, 3028, 13, 286, 820, 536, 341, 855, 493, 13, 1396, 294, 300, 1389, 11, 1455, 19810, 626, 50686, 50686, 466, 437, 311, 322, 264, 3028, 307, 869, 13, 407, 300, 311, 264, 16844, 286, 576, 652, 13, 865, 11, 498, 291, 50952, 50952, 393, 2464, 15077, 11, 597, 1565, 257, 688, 544, 2158, 570, 291, 1500, 257, 688, 544, 721, 11, 51178, 51178, 652, 988, 300, 721, 500, 380, 1821, 13, 13813, 365, 4985, 6921, 11, 291, 787, 1500, 472, 5870, 551, 51556, 51556], "temperature": 0.0, "avg_logprob": -0.1139160050286187, "compression_ratio": 1.6175115207373272, "no_caption_prob": 1.777833494998049e-05}, {"id": 371, "seek": 225236, "start": 2258.8, "end": 2264.1200000000003, "text": " about what's on the page is great. So that's the distinction I would make. Yeah, if you", "tokens": [50364, 286, 12350, 281, 341, 3028, 13, 286, 820, 536, 341, 855, 493, 13, 1396, 294, 300, 1389, 11, 1455, 19810, 626, 50686, 50686, 466, 437, 311, 322, 264, 3028, 307, 869, 13, 407, 300, 311, 264, 16844, 286, 576, 652, 13, 865, 11, 498, 291, 50952, 50952, 393, 2464, 15077, 11, 597, 1565, 257, 688, 544, 2158, 570, 291, 1500, 257, 688, 544, 721, 11, 51178, 51178, 652, 988, 300, 721, 500, 380, 1821, 13, 13813, 365, 4985, 6921, 11, 291, 787, 1500, 472, 5870, 551, 51556, 51556], "temperature": 0.0, "avg_logprob": -0.1139160050286187, "compression_ratio": 1.6175115207373272, "no_caption_prob": 1.777833494998049e-05}, {"id": 372, "seek": 225236, "start": 2264.1200000000003, "end": 2268.6400000000003, "text": " can write scenarios, which bring a lot more value because you test a lot more things,", "tokens": [50364, 286, 12350, 281, 341, 3028, 13, 286, 820, 536, 341, 855, 493, 13, 1396, 294, 300, 1389, 11, 1455, 19810, 626, 50686, 50686, 466, 437, 311, 322, 264, 3028, 307, 869, 13, 407, 300, 311, 264, 16844, 286, 576, 652, 13, 865, 11, 498, 291, 50952, 50952, 393, 2464, 15077, 11, 597, 1565, 257, 688, 544, 2158, 570, 291, 1500, 257, 688, 544, 721, 11, 51178, 51178, 652, 988, 300, 721, 500, 380, 1821, 13, 13813, 365, 4985, 6921, 11, 291, 787, 1500, 472, 5870, 551, 51556, 51556], "temperature": 0.0, "avg_logprob": -0.1139160050286187, "compression_ratio": 1.6175115207373272, "no_caption_prob": 1.777833494998049e-05}, {"id": 373, "seek": 225236, "start": 2268.6400000000003, "end": 2276.2000000000003, "text": " make sure that things don't break. Whereas with unit tests, you only test one tiny thing", "tokens": [50364, 286, 12350, 281, 341, 3028, 13, 286, 820, 536, 341, 855, 493, 13, 1396, 294, 300, 1389, 11, 1455, 19810, 626, 50686, 50686, 466, 437, 311, 322, 264, 3028, 307, 869, 13, 407, 300, 311, 264, 16844, 286, 576, 652, 13, 865, 11, 498, 291, 50952, 50952, 393, 2464, 15077, 11, 597, 1565, 257, 688, 544, 2158, 570, 291, 1500, 257, 688, 544, 721, 11, 51178, 51178, 652, 988, 300, 721, 500, 380, 1821, 13, 13813, 365, 4985, 6921, 11, 291, 787, 1500, 472, 5870, 551, 51556, 51556], "temperature": 0.0, "avg_logprob": -0.1139160050286187, "compression_ratio": 1.6175115207373272, "no_caption_prob": 1.777833494998049e-05}, {"id": 374, "seek": 227620, "start": 2276.2, "end": 2286.8399999999997, "text": " and that could work, but not the whole thing. Exactly. Yeah, the sort of spectrum from unit", "tokens": [50364, 293, 300, 727, 589, 11, 457, 406, 264, 1379, 551, 13, 7587, 13, 865, 11, 264, 1333, 295, 11143, 490, 4985, 50896, 50896, 281, 917, 281, 917, 4997, 307, 11, 291, 458, 11, 264, 3126, 1496, 576, 312, 4985, 6921, 293, 264, 2946, 1496, 51204, 51204, 576, 312, 917, 281, 917, 6921, 13, 407, 322, 264, 3126, 1496, 11, 291, 434, 544, 9601, 281, 264, 11420, 13, 51516, 51516, 509, 434, 1570, 6679, 466, 264, 3755, 15669, 917, 281, 917, 13, 509, 434, 1570, 12465, 11, 558, 30, 51782, 51782], "temperature": 0.0, "avg_logprob": -0.08338626571323561, "compression_ratio": 1.7621359223300972, "no_caption_prob": 4.0693274058867246e-05}, {"id": 375, "seek": 227620, "start": 2286.8399999999997, "end": 2293.0, "text": " to end to end testing is, you know, the lower level would be unit tests and the higher level", "tokens": [50364, 293, 300, 727, 589, 11, 457, 406, 264, 1379, 551, 13, 7587, 13, 865, 11, 264, 1333, 295, 11143, 490, 4985, 50896, 50896, 281, 917, 281, 917, 4997, 307, 11, 291, 458, 11, 264, 3126, 1496, 576, 312, 4985, 6921, 293, 264, 2946, 1496, 51204, 51204, 576, 312, 917, 281, 917, 6921, 13, 407, 322, 264, 3126, 1496, 11, 291, 434, 544, 9601, 281, 264, 11420, 13, 51516, 51516, 509, 434, 1570, 6679, 466, 264, 3755, 15669, 917, 281, 917, 13, 509, 434, 1570, 12465, 11, 558, 30, 51782, 51782], "temperature": 0.0, "avg_logprob": -0.08338626571323561, "compression_ratio": 1.7621359223300972, "no_caption_prob": 4.0693274058867246e-05}, {"id": 376, "seek": 227620, "start": 2293.0, "end": 2299.24, "text": " would be end to end tests. So on the lower level, you're more tied to the implementation.", "tokens": [50364, 293, 300, 727, 589, 11, 457, 406, 264, 1379, 551, 13, 7587, 13, 865, 11, 264, 1333, 295, 11143, 490, 4985, 50896, 50896, 281, 917, 281, 917, 4997, 307, 11, 291, 458, 11, 264, 3126, 1496, 576, 312, 4985, 6921, 293, 264, 2946, 1496, 51204, 51204, 576, 312, 917, 281, 917, 6921, 13, 407, 322, 264, 3126, 1496, 11, 291, 434, 544, 9601, 281, 264, 11420, 13, 51516, 51516, 509, 434, 1570, 6679, 466, 264, 3755, 15669, 917, 281, 917, 13, 509, 434, 1570, 12465, 11, 558, 30, 51782, 51782], "temperature": 0.0, "avg_logprob": -0.08338626571323561, "compression_ratio": 1.7621359223300972, "no_caption_prob": 4.0693274058867246e-05}, {"id": 377, "seek": 227620, "start": 2299.24, "end": 2304.56, "text": " You're less confident about the pieces fitting end to end. You're less realistic, right?", "tokens": [50364, 293, 300, 727, 589, 11, 457, 406, 264, 1379, 551, 13, 7587, 13, 865, 11, 264, 1333, 295, 11143, 490, 4985, 50896, 50896, 281, 917, 281, 917, 4997, 307, 11, 291, 458, 11, 264, 3126, 1496, 576, 312, 4985, 6921, 293, 264, 2946, 1496, 51204, 51204, 576, 312, 917, 281, 917, 6921, 13, 407, 322, 264, 3126, 1496, 11, 291, 434, 544, 9601, 281, 264, 11420, 13, 51516, 51516, 509, 434, 1570, 6679, 466, 264, 3755, 15669, 917, 281, 917, 13, 509, 434, 1570, 12465, 11, 558, 30, 51782, 51782], "temperature": 0.0, "avg_logprob": -0.08338626571323561, "compression_ratio": 1.7621359223300972, "no_caption_prob": 4.0693274058867246e-05}, {"id": 378, "seek": 230456, "start": 2304.56, "end": 2309.7999999999997, "text": " But they're faster to run. They're easier to write. Unit tests are great for exhaustively", "tokens": [50364, 583, 436, 434, 4663, 281, 1190, 13, 814, 434, 3571, 281, 2464, 13, 27894, 6921, 366, 869, 337, 14687, 3413, 50626, 50626, 8568, 4538, 3331, 13, 8545, 365, 4707, 2361, 4997, 13, 865, 11, 4707, 2361, 4997, 50920, 50920, 307, 257, 869, 636, 281, 360, 300, 570, 436, 434, 588, 2370, 281, 1190, 293, 309, 311, 1858, 281, 2464, 257, 51160, 51160, 688, 295, 552, 13, 583, 498, 291, 519, 466, 27272, 4538, 3331, 294, 364, 917, 281, 917, 9005, 11, 291, 434, 51406, 51406, 411, 11, 3565, 666, 341, 3028, 382, 341, 4195, 13, 823, 291, 362, 341, 2512, 31927, 299, 15673, 689, 51744, 51744], "temperature": 0.0, "avg_logprob": -0.10584817109284578, "compression_ratio": 1.7115384615384615, "no_caption_prob": 1.8058210116578266e-05}, {"id": 379, "seek": 230456, "start": 2309.7999999999997, "end": 2315.68, "text": " checking corner cases. Especially with property based testing. Yeah, property based testing", "tokens": [50364, 583, 436, 434, 4663, 281, 1190, 13, 814, 434, 3571, 281, 2464, 13, 27894, 6921, 366, 869, 337, 14687, 3413, 50626, 50626, 8568, 4538, 3331, 13, 8545, 365, 4707, 2361, 4997, 13, 865, 11, 4707, 2361, 4997, 50920, 50920, 307, 257, 869, 636, 281, 360, 300, 570, 436, 434, 588, 2370, 281, 1190, 293, 309, 311, 1858, 281, 2464, 257, 51160, 51160, 688, 295, 552, 13, 583, 498, 291, 519, 466, 27272, 4538, 3331, 294, 364, 917, 281, 917, 9005, 11, 291, 434, 51406, 51406, 411, 11, 3565, 666, 341, 3028, 382, 341, 4195, 13, 823, 291, 362, 341, 2512, 31927, 299, 15673, 689, 51744, 51744], "temperature": 0.0, "avg_logprob": -0.10584817109284578, "compression_ratio": 1.7115384615384615, "no_caption_prob": 1.8058210116578266e-05}, {"id": 380, "seek": 230456, "start": 2315.68, "end": 2320.48, "text": " is a great way to do that because they're very fast to run and it's easy to write a", "tokens": [50364, 583, 436, 434, 4663, 281, 1190, 13, 814, 434, 3571, 281, 2464, 13, 27894, 6921, 366, 869, 337, 14687, 3413, 50626, 50626, 8568, 4538, 3331, 13, 8545, 365, 4707, 2361, 4997, 13, 865, 11, 4707, 2361, 4997, 50920, 50920, 307, 257, 869, 636, 281, 360, 300, 570, 436, 434, 588, 2370, 281, 1190, 293, 309, 311, 1858, 281, 2464, 257, 51160, 51160, 688, 295, 552, 13, 583, 498, 291, 519, 466, 27272, 4538, 3331, 294, 364, 917, 281, 917, 9005, 11, 291, 434, 51406, 51406, 411, 11, 3565, 666, 341, 3028, 382, 341, 4195, 13, 823, 291, 362, 341, 2512, 31927, 299, 15673, 689, 51744, 51744], "temperature": 0.0, "avg_logprob": -0.10584817109284578, "compression_ratio": 1.7115384615384615, "no_caption_prob": 1.8058210116578266e-05}, {"id": 381, "seek": 230456, "start": 2320.48, "end": 2325.4, "text": " lot of them. But if you think about exercising corner cases in an end to end scenario, you're", "tokens": [50364, 583, 436, 434, 4663, 281, 1190, 13, 814, 434, 3571, 281, 2464, 13, 27894, 6921, 366, 869, 337, 14687, 3413, 50626, 50626, 8568, 4538, 3331, 13, 8545, 365, 4707, 2361, 4997, 13, 865, 11, 4707, 2361, 4997, 50920, 50920, 307, 257, 869, 636, 281, 360, 300, 570, 436, 434, 588, 2370, 281, 1190, 293, 309, 311, 1858, 281, 2464, 257, 51160, 51160, 688, 295, 552, 13, 583, 498, 291, 519, 466, 27272, 4538, 3331, 294, 364, 917, 281, 917, 9005, 11, 291, 434, 51406, 51406, 411, 11, 3565, 666, 341, 3028, 382, 341, 4195, 13, 823, 291, 362, 341, 2512, 31927, 299, 15673, 689, 51744, 51744], "temperature": 0.0, "avg_logprob": -0.10584817109284578, "compression_ratio": 1.7115384615384615, "no_caption_prob": 1.8058210116578266e-05}, {"id": 382, "seek": 230456, "start": 2325.4, "end": 2332.16, "text": " like, log into this page as this user. Now you have this combinatoric explosion where", "tokens": [50364, 583, 436, 434, 4663, 281, 1190, 13, 814, 434, 3571, 281, 2464, 13, 27894, 6921, 366, 869, 337, 14687, 3413, 50626, 50626, 8568, 4538, 3331, 13, 8545, 365, 4707, 2361, 4997, 13, 865, 11, 4707, 2361, 4997, 50920, 50920, 307, 257, 869, 636, 281, 360, 300, 570, 436, 434, 588, 2370, 281, 1190, 293, 309, 311, 1858, 281, 2464, 257, 51160, 51160, 688, 295, 552, 13, 583, 498, 291, 519, 466, 27272, 4538, 3331, 294, 364, 917, 281, 917, 9005, 11, 291, 434, 51406, 51406, 411, 11, 3565, 666, 341, 3028, 382, 341, 4195, 13, 823, 291, 362, 341, 2512, 31927, 299, 15673, 689, 51744, 51744], "temperature": 0.0, "avg_logprob": -0.10584817109284578, "compression_ratio": 1.7115384615384615, "no_caption_prob": 1.8058210116578266e-05}, {"id": 383, "seek": 233216, "start": 2332.16, "end": 2337.56, "text": " you're like, okay, well you log in as this user and this user and you log in as a guest", "tokens": [50364, 291, 434, 411, 11, 1392, 11, 731, 291, 3565, 294, 382, 341, 4195, 293, 341, 4195, 293, 291, 3565, 294, 382, 257, 8341, 50634, 50634, 4195, 11, 291, 3565, 294, 382, 364, 24236, 4195, 11, 291, 3565, 294, 382, 257, 3890, 4195, 11, 293, 550, 291, 1500, 484, 50932, 50932, 264, 4538, 1389, 337, 439, 295, 729, 13, 467, 1177, 380, 652, 604, 2020, 13, 509, 500, 380, 362, 1266, 11, 1360, 917, 51204, 51204, 281, 917, 6921, 294, 428, 1716, 30, 865, 11, 309, 2170, 10838, 11, 558, 30, 407, 300, 311, 264, 636, 286, 519, 466, 51606, 51606], "temperature": 0.0, "avg_logprob": -0.12297733157288794, "compression_ratio": 1.7254901960784315, "no_caption_prob": 1.9525752577465028e-05}, {"id": 384, "seek": 233216, "start": 2337.56, "end": 2343.52, "text": " user, you log in as an admin user, you log in as a regular user, and then you test out", "tokens": [50364, 291, 434, 411, 11, 1392, 11, 731, 291, 3565, 294, 382, 341, 4195, 293, 341, 4195, 293, 291, 3565, 294, 382, 257, 8341, 50634, 50634, 4195, 11, 291, 3565, 294, 382, 364, 24236, 4195, 11, 291, 3565, 294, 382, 257, 3890, 4195, 11, 293, 550, 291, 1500, 484, 50932, 50932, 264, 4538, 1389, 337, 439, 295, 729, 13, 467, 1177, 380, 652, 604, 2020, 13, 509, 500, 380, 362, 1266, 11, 1360, 917, 51204, 51204, 281, 917, 6921, 294, 428, 1716, 30, 865, 11, 309, 2170, 10838, 11, 558, 30, 407, 300, 311, 264, 636, 286, 519, 466, 51606, 51606], "temperature": 0.0, "avg_logprob": -0.12297733157288794, "compression_ratio": 1.7254901960784315, "no_caption_prob": 1.9525752577465028e-05}, {"id": 385, "seek": 233216, "start": 2343.52, "end": 2348.96, "text": " the corner case for all of those. It doesn't make any sense. You don't have 10,000 end", "tokens": [50364, 291, 434, 411, 11, 1392, 11, 731, 291, 3565, 294, 382, 341, 4195, 293, 341, 4195, 293, 291, 3565, 294, 382, 257, 8341, 50634, 50634, 4195, 11, 291, 3565, 294, 382, 364, 24236, 4195, 11, 291, 3565, 294, 382, 257, 3890, 4195, 11, 293, 550, 291, 1500, 484, 50932, 50932, 264, 4538, 1389, 337, 439, 295, 729, 13, 467, 1177, 380, 652, 604, 2020, 13, 509, 500, 380, 362, 1266, 11, 1360, 917, 51204, 51204, 281, 917, 6921, 294, 428, 1716, 30, 865, 11, 309, 2170, 10838, 11, 558, 30, 407, 300, 311, 264, 636, 286, 519, 466, 51606, 51606], "temperature": 0.0, "avg_logprob": -0.12297733157288794, "compression_ratio": 1.7254901960784315, "no_caption_prob": 1.9525752577465028e-05}, {"id": 386, "seek": 233216, "start": 2348.96, "end": 2357.0, "text": " to end tests in your project? Yeah, it gets insane, right? So that's the way I think about", "tokens": [50364, 291, 434, 411, 11, 1392, 11, 731, 291, 3565, 294, 382, 341, 4195, 293, 341, 4195, 293, 291, 3565, 294, 382, 257, 8341, 50634, 50634, 4195, 11, 291, 3565, 294, 382, 364, 24236, 4195, 11, 291, 3565, 294, 382, 257, 3890, 4195, 11, 293, 550, 291, 1500, 484, 50932, 50932, 264, 4538, 1389, 337, 439, 295, 729, 13, 467, 1177, 380, 652, 604, 2020, 13, 509, 500, 380, 362, 1266, 11, 1360, 917, 51204, 51204, 281, 917, 6921, 294, 428, 1716, 30, 865, 11, 309, 2170, 10838, 11, 558, 30, 407, 300, 311, 264, 636, 286, 519, 466, 51606, 51606], "temperature": 0.0, "avg_logprob": -0.12297733157288794, "compression_ratio": 1.7254901960784315, "no_caption_prob": 1.9525752577465028e-05}, {"id": 387, "seek": 235700, "start": 2357.0, "end": 2362.76, "text": " it is the role of a unit test is to exhaustively check corner cases, but it's not to give you", "tokens": [50364, 309, 307, 264, 3090, 295, 257, 4985, 1500, 307, 281, 14687, 3413, 1520, 4538, 3331, 11, 457, 309, 311, 406, 281, 976, 291, 50652, 50652, 6687, 300, 264, 2302, 1185, 307, 1364, 1214, 13, 407, 456, 311, 341, 10710, 295, 411, 264, 50922, 50922, 4997, 25950, 689, 411, 498, 291, 7472, 766, 264, 25950, 666, 1045, 10863, 689, 264, 51190, 51190, 588, 1192, 13369, 307, 472, 644, 295, 264, 25950, 11, 550, 456, 311, 411, 264, 2808, 13153, 295, 264, 51468, 51468, 25950, 293, 550, 456, 311, 411, 264, 2767, 644, 295, 264, 25950, 13, 440, 2767, 644, 295, 264, 25950, 51680, 51680], "temperature": 0.0, "avg_logprob": -0.0857958748227074, "compression_ratio": 2.0, "no_caption_prob": 0.00020025877165608108}, {"id": 388, "seek": 235700, "start": 2362.76, "end": 2368.16, "text": " confidence that the entire system is working together. So there's this notion of like the", "tokens": [50364, 309, 307, 264, 3090, 295, 257, 4985, 1500, 307, 281, 14687, 3413, 1520, 4538, 3331, 11, 457, 309, 311, 406, 281, 976, 291, 50652, 50652, 6687, 300, 264, 2302, 1185, 307, 1364, 1214, 13, 407, 456, 311, 341, 10710, 295, 411, 264, 50922, 50922, 4997, 25950, 689, 411, 498, 291, 7472, 766, 264, 25950, 666, 1045, 10863, 689, 264, 51190, 51190, 588, 1192, 13369, 307, 472, 644, 295, 264, 25950, 11, 550, 456, 311, 411, 264, 2808, 13153, 295, 264, 51468, 51468, 25950, 293, 550, 456, 311, 411, 264, 2767, 644, 295, 264, 25950, 13, 440, 2767, 644, 295, 264, 25950, 51680, 51680], "temperature": 0.0, "avg_logprob": -0.0857958748227074, "compression_ratio": 2.0, "no_caption_prob": 0.00020025877165608108}, {"id": 389, "seek": 235700, "start": 2368.16, "end": 2373.52, "text": " testing pyramid where like if you split off the pyramid into three sections where the", "tokens": [50364, 309, 307, 264, 3090, 295, 257, 4985, 1500, 307, 281, 14687, 3413, 1520, 4538, 3331, 11, 457, 309, 311, 406, 281, 976, 291, 50652, 50652, 6687, 300, 264, 2302, 1185, 307, 1364, 1214, 13, 407, 456, 311, 341, 10710, 295, 411, 264, 50922, 50922, 4997, 25950, 689, 411, 498, 291, 7472, 766, 264, 25950, 666, 1045, 10863, 689, 264, 51190, 51190, 588, 1192, 13369, 307, 472, 644, 295, 264, 25950, 11, 550, 456, 311, 411, 264, 2808, 13153, 295, 264, 51468, 51468, 25950, 293, 550, 456, 311, 411, 264, 2767, 644, 295, 264, 25950, 13, 440, 2767, 644, 295, 264, 25950, 51680, 51680], "temperature": 0.0, "avg_logprob": -0.0857958748227074, "compression_ratio": 2.0, "no_caption_prob": 0.00020025877165608108}, {"id": 390, "seek": 235700, "start": 2373.52, "end": 2379.08, "text": " very top triangle is one part of the pyramid, then there's like the middle slice of the", "tokens": [50364, 309, 307, 264, 3090, 295, 257, 4985, 1500, 307, 281, 14687, 3413, 1520, 4538, 3331, 11, 457, 309, 311, 406, 281, 976, 291, 50652, 50652, 6687, 300, 264, 2302, 1185, 307, 1364, 1214, 13, 407, 456, 311, 341, 10710, 295, 411, 264, 50922, 50922, 4997, 25950, 689, 411, 498, 291, 7472, 766, 264, 25950, 666, 1045, 10863, 689, 264, 51190, 51190, 588, 1192, 13369, 307, 472, 644, 295, 264, 25950, 11, 550, 456, 311, 411, 264, 2808, 13153, 295, 264, 51468, 51468, 25950, 293, 550, 456, 311, 411, 264, 2767, 644, 295, 264, 25950, 13, 440, 2767, 644, 295, 264, 25950, 51680, 51680], "temperature": 0.0, "avg_logprob": -0.0857958748227074, "compression_ratio": 2.0, "no_caption_prob": 0.00020025877165608108}, {"id": 391, "seek": 235700, "start": 2379.08, "end": 2383.32, "text": " pyramid and then there's like the bottom part of the pyramid. The bottom part of the pyramid", "tokens": [50364, 309, 307, 264, 3090, 295, 257, 4985, 1500, 307, 281, 14687, 3413, 1520, 4538, 3331, 11, 457, 309, 311, 406, 281, 976, 291, 50652, 50652, 6687, 300, 264, 2302, 1185, 307, 1364, 1214, 13, 407, 456, 311, 341, 10710, 295, 411, 264, 50922, 50922, 4997, 25950, 689, 411, 498, 291, 7472, 766, 264, 25950, 666, 1045, 10863, 689, 264, 51190, 51190, 588, 1192, 13369, 307, 472, 644, 295, 264, 25950, 11, 550, 456, 311, 411, 264, 2808, 13153, 295, 264, 51468, 51468, 25950, 293, 550, 456, 311, 411, 264, 2767, 644, 295, 264, 25950, 13, 440, 2767, 644, 295, 264, 25950, 51680, 51680], "temperature": 0.0, "avg_logprob": -0.0857958748227074, "compression_ratio": 2.0, "no_caption_prob": 0.00020025877165608108}, {"id": 392, "seek": 238332, "start": 2383.32, "end": 2389.56, "text": " is the biggest chunk. That's your unit tests. You want a lot of unit tests. The middle chunk", "tokens": [50364, 307, 264, 3880, 16635, 13, 663, 311, 428, 4985, 6921, 13, 509, 528, 257, 688, 295, 4985, 6921, 13, 440, 2808, 16635, 50676, 50676, 307, 411, 10980, 6921, 597, 500, 380, 5380, 264, 1577, 1185, 11, 457, 436, 2522, 1214, 512, 50898, 50898, 3166, 295, 309, 13, 400, 550, 264, 1192, 881, 16635, 307, 411, 917, 281, 917, 6921, 420, 411, 8439, 6921, 51230, 51230, 293, 300, 1333, 295, 551, 13, 400, 291, 528, 281, 362, 1326, 295, 729, 11, 457, 436, 976, 291, 6687, 51534, 51534, 300, 1203, 307, 1364, 484, 1214, 13, 407, 11, 291, 458, 11, 281, 312, 3245, 11, 286, 1568, 544, 293, 544, 51790, 51790], "temperature": 0.0, "avg_logprob": -0.07592702763421195, "compression_ratio": 1.75390625, "no_caption_prob": 2.9772445486742072e-05}, {"id": 393, "seek": 238332, "start": 2389.56, "end": 2394.0, "text": " is like integration tests which don't exercise the full system, but they piece together some", "tokens": [50364, 307, 264, 3880, 16635, 13, 663, 311, 428, 4985, 6921, 13, 509, 528, 257, 688, 295, 4985, 6921, 13, 440, 2808, 16635, 50676, 50676, 307, 411, 10980, 6921, 597, 500, 380, 5380, 264, 1577, 1185, 11, 457, 436, 2522, 1214, 512, 50898, 50898, 3166, 295, 309, 13, 400, 550, 264, 1192, 881, 16635, 307, 411, 917, 281, 917, 6921, 420, 411, 8439, 6921, 51230, 51230, 293, 300, 1333, 295, 551, 13, 400, 291, 528, 281, 362, 1326, 295, 729, 11, 457, 436, 976, 291, 6687, 51534, 51534, 300, 1203, 307, 1364, 484, 1214, 13, 407, 11, 291, 458, 11, 281, 312, 3245, 11, 286, 1568, 544, 293, 544, 51790, 51790], "temperature": 0.0, "avg_logprob": -0.07592702763421195, "compression_ratio": 1.75390625, "no_caption_prob": 2.9772445486742072e-05}, {"id": 394, "seek": 238332, "start": 2394.0, "end": 2400.6400000000003, "text": " parts of it. And then the top most chunk is like end to end tests or like smoke tests", "tokens": [50364, 307, 264, 3880, 16635, 13, 663, 311, 428, 4985, 6921, 13, 509, 528, 257, 688, 295, 4985, 6921, 13, 440, 2808, 16635, 50676, 50676, 307, 411, 10980, 6921, 597, 500, 380, 5380, 264, 1577, 1185, 11, 457, 436, 2522, 1214, 512, 50898, 50898, 3166, 295, 309, 13, 400, 550, 264, 1192, 881, 16635, 307, 411, 917, 281, 917, 6921, 420, 411, 8439, 6921, 51230, 51230, 293, 300, 1333, 295, 551, 13, 400, 291, 528, 281, 362, 1326, 295, 729, 11, 457, 436, 976, 291, 6687, 51534, 51534, 300, 1203, 307, 1364, 484, 1214, 13, 407, 11, 291, 458, 11, 281, 312, 3245, 11, 286, 1568, 544, 293, 544, 51790, 51790], "temperature": 0.0, "avg_logprob": -0.07592702763421195, "compression_ratio": 1.75390625, "no_caption_prob": 2.9772445486742072e-05}, {"id": 395, "seek": 238332, "start": 2400.6400000000003, "end": 2406.7200000000003, "text": " and that sort of thing. And you want to have few of those, but they give you confidence", "tokens": [50364, 307, 264, 3880, 16635, 13, 663, 311, 428, 4985, 6921, 13, 509, 528, 257, 688, 295, 4985, 6921, 13, 440, 2808, 16635, 50676, 50676, 307, 411, 10980, 6921, 597, 500, 380, 5380, 264, 1577, 1185, 11, 457, 436, 2522, 1214, 512, 50898, 50898, 3166, 295, 309, 13, 400, 550, 264, 1192, 881, 16635, 307, 411, 917, 281, 917, 6921, 420, 411, 8439, 6921, 51230, 51230, 293, 300, 1333, 295, 551, 13, 400, 291, 528, 281, 362, 1326, 295, 729, 11, 457, 436, 976, 291, 6687, 51534, 51534, 300, 1203, 307, 1364, 484, 1214, 13, 407, 11, 291, 458, 11, 281, 312, 3245, 11, 286, 1568, 544, 293, 544, 51790, 51790], "temperature": 0.0, "avg_logprob": -0.07592702763421195, "compression_ratio": 1.75390625, "no_caption_prob": 2.9772445486742072e-05}, {"id": 396, "seek": 238332, "start": 2406.7200000000003, "end": 2411.84, "text": " that everything is working out together. So, you know, to be honest, I hear more and more", "tokens": [50364, 307, 264, 3880, 16635, 13, 663, 311, 428, 4985, 6921, 13, 509, 528, 257, 688, 295, 4985, 6921, 13, 440, 2808, 16635, 50676, 50676, 307, 411, 10980, 6921, 597, 500, 380, 5380, 264, 1577, 1185, 11, 457, 436, 2522, 1214, 512, 50898, 50898, 3166, 295, 309, 13, 400, 550, 264, 1192, 881, 16635, 307, 411, 917, 281, 917, 6921, 420, 411, 8439, 6921, 51230, 51230, 293, 300, 1333, 295, 551, 13, 400, 291, 528, 281, 362, 1326, 295, 729, 11, 457, 436, 976, 291, 6687, 51534, 51534, 300, 1203, 307, 1364, 484, 1214, 13, 407, 11, 291, 458, 11, 281, 312, 3245, 11, 286, 1568, 544, 293, 544, 51790, 51790], "temperature": 0.0, "avg_logprob": -0.07592702763421195, "compression_ratio": 1.75390625, "no_caption_prob": 2.9772445486742072e-05}, {"id": 397, "seek": 241184, "start": 2411.84, "end": 2416.56, "text": " people talking about the value of end to end testing and I find myself writing more and", "tokens": [50364, 561, 1417, 466, 264, 2158, 295, 917, 281, 917, 4997, 293, 286, 915, 2059, 3579, 544, 293, 50600, 50600, 544, 917, 281, 917, 6921, 382, 286, 352, 2051, 570, 6284, 286, 528, 281, 362, 6687, 300, 50876, 50876, 286, 393, 2045, 264, 7274, 2960, 293, 445, 312, 6679, 300, 721, 366, 1364, 13, 467, 5946, 322, 264, 51130, 51130, 764, 1389, 11, 457, 309, 311, 665, 281, 362, 411, 257, 2020, 295, 264, 3090, 300, 613, 819, 3467, 295, 51348, 51348, 6921, 862, 293, 550, 291, 733, 295, 362, 281, 764, 428, 1065, 12216, 13, 51500, 51500], "temperature": 0.0, "avg_logprob": -0.10301179596872041, "compression_ratio": 1.7405857740585775, "no_caption_prob": 4.985868508811109e-05}, {"id": 398, "seek": 241184, "start": 2416.56, "end": 2422.08, "text": " more end to end tests as I go along because ultimately I want to have confidence that", "tokens": [50364, 561, 1417, 466, 264, 2158, 295, 917, 281, 917, 4997, 293, 286, 915, 2059, 3579, 544, 293, 50600, 50600, 544, 917, 281, 917, 6921, 382, 286, 352, 2051, 570, 6284, 286, 528, 281, 362, 6687, 300, 50876, 50876, 286, 393, 2045, 264, 7274, 2960, 293, 445, 312, 6679, 300, 721, 366, 1364, 13, 467, 5946, 322, 264, 51130, 51130, 764, 1389, 11, 457, 309, 311, 665, 281, 362, 411, 257, 2020, 295, 264, 3090, 300, 613, 819, 3467, 295, 51348, 51348, 6921, 862, 293, 550, 291, 733, 295, 362, 281, 764, 428, 1065, 12216, 13, 51500, 51500], "temperature": 0.0, "avg_logprob": -0.10301179596872041, "compression_ratio": 1.7405857740585775, "no_caption_prob": 4.985868508811109e-05}, {"id": 399, "seek": 241184, "start": 2422.08, "end": 2427.1600000000003, "text": " I can hit the deploy button and just be confident that things are working. It depends on the", "tokens": [50364, 561, 1417, 466, 264, 2158, 295, 917, 281, 917, 4997, 293, 286, 915, 2059, 3579, 544, 293, 50600, 50600, 544, 917, 281, 917, 6921, 382, 286, 352, 2051, 570, 6284, 286, 528, 281, 362, 6687, 300, 50876, 50876, 286, 393, 2045, 264, 7274, 2960, 293, 445, 312, 6679, 300, 721, 366, 1364, 13, 467, 5946, 322, 264, 51130, 51130, 764, 1389, 11, 457, 309, 311, 665, 281, 362, 411, 257, 2020, 295, 264, 3090, 300, 613, 819, 3467, 295, 51348, 51348, 6921, 862, 293, 550, 291, 733, 295, 362, 281, 764, 428, 1065, 12216, 13, 51500, 51500], "temperature": 0.0, "avg_logprob": -0.10301179596872041, "compression_ratio": 1.7405857740585775, "no_caption_prob": 4.985868508811109e-05}, {"id": 400, "seek": 241184, "start": 2427.1600000000003, "end": 2431.52, "text": " use case, but it's good to have like a sense of the role that these different types of", "tokens": [50364, 561, 1417, 466, 264, 2158, 295, 917, 281, 917, 4997, 293, 286, 915, 2059, 3579, 544, 293, 50600, 50600, 544, 917, 281, 917, 6921, 382, 286, 352, 2051, 570, 6284, 286, 528, 281, 362, 6687, 300, 50876, 50876, 286, 393, 2045, 264, 7274, 2960, 293, 445, 312, 6679, 300, 721, 366, 1364, 13, 467, 5946, 322, 264, 51130, 51130, 764, 1389, 11, 457, 309, 311, 665, 281, 362, 411, 257, 2020, 295, 264, 3090, 300, 613, 819, 3467, 295, 51348, 51348, 6921, 862, 293, 550, 291, 733, 295, 362, 281, 764, 428, 1065, 12216, 13, 51500, 51500], "temperature": 0.0, "avg_logprob": -0.10301179596872041, "compression_ratio": 1.7405857740585775, "no_caption_prob": 4.985868508811109e-05}, {"id": 401, "seek": 241184, "start": 2431.52, "end": 2434.56, "text": " tests play and then you kind of have to use your own judgment.", "tokens": [50364, 561, 1417, 466, 264, 2158, 295, 917, 281, 917, 4997, 293, 286, 915, 2059, 3579, 544, 293, 50600, 50600, 544, 917, 281, 917, 6921, 382, 286, 352, 2051, 570, 6284, 286, 528, 281, 362, 6687, 300, 50876, 50876, 286, 393, 2045, 264, 7274, 2960, 293, 445, 312, 6679, 300, 721, 366, 1364, 13, 467, 5946, 322, 264, 51130, 51130, 764, 1389, 11, 457, 309, 311, 665, 281, 362, 411, 257, 2020, 295, 264, 3090, 300, 613, 819, 3467, 295, 51348, 51348, 6921, 862, 293, 550, 291, 733, 295, 362, 281, 764, 428, 1065, 12216, 13, 51500, 51500], "temperature": 0.0, "avg_logprob": -0.10301179596872041, "compression_ratio": 1.7405857740585775, "no_caption_prob": 4.985868508811109e-05}, {"id": 402, "seek": 243456, "start": 2434.56, "end": 2442.52, "text": " Yeah, I think you need all of them. Yeah, you need to balance the speed and how many", "tokens": [50364, 865, 11, 286, 519, 291, 643, 439, 295, 552, 13, 865, 11, 291, 643, 281, 4772, 264, 3073, 293, 577, 867, 50762, 50762, 291, 528, 337, 1184, 472, 13, 407, 300, 309, 7023, 6909, 712, 293, 2370, 293, 370, 300, 309, 1177, 380, 51228, 51228, 276, 5669, 291, 544, 813, 309, 3665, 291, 13, 51382, 51382, 1779, 11, 2293, 13, 708, 286, 600, 1612, 257, 688, 295, 365, 561, 885, 20138, 4073, 538, 641, 1500, 459, 3324, 51642, 51642], "temperature": 0.0, "avg_logprob": -0.16869403697826243, "compression_ratio": 1.5392670157068062, "no_caption_prob": 1.5206682292046025e-05}, {"id": 403, "seek": 243456, "start": 2442.52, "end": 2451.84, "text": " you want for each one. So that it remains maintainable and fast and so that it doesn't", "tokens": [50364, 865, 11, 286, 519, 291, 643, 439, 295, 552, 13, 865, 11, 291, 643, 281, 4772, 264, 3073, 293, 577, 867, 50762, 50762, 291, 528, 337, 1184, 472, 13, 407, 300, 309, 7023, 6909, 712, 293, 2370, 293, 370, 300, 309, 1177, 380, 51228, 51228, 276, 5669, 291, 544, 813, 309, 3665, 291, 13, 51382, 51382, 1779, 11, 2293, 13, 708, 286, 600, 1612, 257, 688, 295, 365, 561, 885, 20138, 4073, 538, 641, 1500, 459, 3324, 51642, 51642], "temperature": 0.0, "avg_logprob": -0.16869403697826243, "compression_ratio": 1.5392670157068062, "no_caption_prob": 1.5206682292046025e-05}, {"id": 404, "seek": 243456, "start": 2451.84, "end": 2454.92, "text": " hinder you more than it helps you.", "tokens": [50364, 865, 11, 286, 519, 291, 643, 439, 295, 552, 13, 865, 11, 291, 643, 281, 4772, 264, 3073, 293, 577, 867, 50762, 50762, 291, 528, 337, 1184, 472, 13, 407, 300, 309, 7023, 6909, 712, 293, 2370, 293, 370, 300, 309, 1177, 380, 51228, 51228, 276, 5669, 291, 544, 813, 309, 3665, 291, 13, 51382, 51382, 1779, 11, 2293, 13, 708, 286, 600, 1612, 257, 688, 295, 365, 561, 885, 20138, 4073, 538, 641, 1500, 459, 3324, 51642, 51642], "temperature": 0.0, "avg_logprob": -0.16869403697826243, "compression_ratio": 1.5392670157068062, "no_caption_prob": 1.5206682292046025e-05}, {"id": 405, "seek": 243456, "start": 2454.92, "end": 2460.12, "text": " Right, exactly. What I've seen a lot of with people being hindered by their test suites", "tokens": [50364, 865, 11, 286, 519, 291, 643, 439, 295, 552, 13, 865, 11, 291, 643, 281, 4772, 264, 3073, 293, 577, 867, 50762, 50762, 291, 528, 337, 1184, 472, 13, 407, 300, 309, 7023, 6909, 712, 293, 2370, 293, 370, 300, 309, 1177, 380, 51228, 51228, 276, 5669, 291, 544, 813, 309, 3665, 291, 13, 51382, 51382, 1779, 11, 2293, 13, 708, 286, 600, 1612, 257, 688, 295, 365, 561, 885, 20138, 4073, 538, 641, 1500, 459, 3324, 51642, 51642], "temperature": 0.0, "avg_logprob": -0.16869403697826243, "compression_ratio": 1.5392670157068062, "no_caption_prob": 1.5206682292046025e-05}, {"id": 406, "seek": 246012, "start": 2460.12, "end": 2466.56, "text": " and it becoming a burden is like in Ruby on Rails shops, people end up with like all of", "tokens": [50364, 293, 309, 5617, 257, 12578, 307, 411, 294, 19907, 322, 48526, 14457, 11, 561, 917, 493, 365, 411, 439, 295, 50686, 50686, 613, 1333, 295, 10980, 6921, 300, 366, 49792, 721, 411, 3219, 13, 407, 436, 434, 884, 257, 9925, 50964, 50964, 295, 411, 436, 434, 767, 32368, 8149, 12475, 11, 291, 458, 11, 436, 434, 767, 411, 51210, 51210, 10205, 8149, 24109, 293, 436, 434, 1333, 295, 22407, 17995, 293, 1455, 19810, 626, 466, 51515, 51515], "temperature": 0.0, "avg_logprob": -0.1127762734135495, "compression_ratio": 1.6543778801843319, "no_caption_prob": 2.3922455511637963e-05}, {"id": 407, "seek": 246012, "start": 2466.56, "end": 2472.12, "text": " these sort of integration tests that are mocking things like crazy. So they're doing a mixture", "tokens": [50364, 293, 309, 5617, 257, 12578, 307, 411, 294, 19907, 322, 48526, 14457, 11, 561, 917, 493, 365, 411, 439, 295, 50686, 50686, 613, 1333, 295, 10980, 6921, 300, 366, 49792, 721, 411, 3219, 13, 407, 436, 434, 884, 257, 9925, 50964, 50964, 295, 411, 436, 434, 767, 32368, 8149, 12475, 11, 291, 458, 11, 436, 434, 767, 411, 51210, 51210, 10205, 8149, 24109, 293, 436, 434, 1333, 295, 22407, 17995, 293, 1455, 19810, 626, 466, 51515, 51515], "temperature": 0.0, "avg_logprob": -0.1127762734135495, "compression_ratio": 1.6543778801843319, "no_caption_prob": 2.3922455511637963e-05}, {"id": 408, "seek": 246012, "start": 2472.12, "end": 2477.04, "text": " of like they're actually executing database requests, you know, they're actually like", "tokens": [50364, 293, 309, 5617, 257, 12578, 307, 411, 294, 19907, 322, 48526, 14457, 11, 561, 917, 493, 365, 411, 439, 295, 50686, 50686, 613, 1333, 295, 10980, 6921, 300, 366, 49792, 721, 411, 3219, 13, 407, 436, 434, 884, 257, 9925, 50964, 50964, 295, 411, 436, 434, 767, 32368, 8149, 12475, 11, 291, 458, 11, 436, 434, 767, 411, 51210, 51210, 10205, 8149, 24109, 293, 436, 434, 1333, 295, 22407, 17995, 293, 1455, 19810, 626, 466, 51515, 51515], "temperature": 0.0, "avg_logprob": -0.1127762734135495, "compression_ratio": 1.6543778801843319, "no_caption_prob": 2.3922455511637963e-05}, {"id": 409, "seek": 246012, "start": 2477.04, "end": 2483.14, "text": " performing database queries and they're sort of rendering HTML and making assertions about", "tokens": [50364, 293, 309, 5617, 257, 12578, 307, 411, 294, 19907, 322, 48526, 14457, 11, 561, 917, 493, 365, 411, 439, 295, 50686, 50686, 613, 1333, 295, 10980, 6921, 300, 366, 49792, 721, 411, 3219, 13, 407, 436, 434, 884, 257, 9925, 50964, 50964, 295, 411, 436, 434, 767, 32368, 8149, 12475, 11, 291, 458, 11, 436, 434, 767, 411, 51210, 51210, 10205, 8149, 24109, 293, 436, 434, 1333, 295, 22407, 17995, 293, 1455, 19810, 626, 466, 51515, 51515], "temperature": 0.0, "avg_logprob": -0.1127762734135495, "compression_ratio": 1.6543778801843319, "no_caption_prob": 2.3922455511637963e-05}, {"id": 410, "seek": 248314, "start": 2483.14, "end": 2490.56, "text": " the HTML and like stubbing out HTTP requests, mocking certain like reaching in and stubbing", "tokens": [50364, 264, 17995, 293, 411, 20266, 4324, 484, 33283, 12475, 11, 49792, 1629, 411, 9906, 294, 293, 20266, 4324, 50735, 50735, 484, 1629, 6828, 13, 407, 436, 2736, 746, 293, 550, 1455, 257, 17362, 281, 19810, 300, 341, 50999, 50999, 3170, 2170, 1219, 322, 341, 472, 551, 13, 407, 291, 500, 380, 458, 437, 311, 957, 293, 437, 311, 7592, 13, 400, 51231, 51231, 281, 385, 11, 300, 733, 295, 1500, 575, 370, 707, 2158, 570, 337, 472, 551, 11, 309, 311, 588, 29482, 281, 51553, 51553, 264, 3539, 11420, 13, 407, 498, 286, 1319, 264, 11420, 11, 291, 393, 917, 493, 365, 2139, 51741, 51741], "temperature": 0.0, "avg_logprob": -0.07786178588867188, "compression_ratio": 1.726923076923077, "no_caption_prob": 3.120079782092944e-05}, {"id": 411, "seek": 248314, "start": 2490.56, "end": 2495.8399999999997, "text": " out certain functions. So they return something and then making a mock to assert that this", "tokens": [50364, 264, 17995, 293, 411, 20266, 4324, 484, 33283, 12475, 11, 49792, 1629, 411, 9906, 294, 293, 20266, 4324, 50735, 50735, 484, 1629, 6828, 13, 407, 436, 2736, 746, 293, 550, 1455, 257, 17362, 281, 19810, 300, 341, 50999, 50999, 3170, 2170, 1219, 322, 341, 472, 551, 13, 407, 291, 500, 380, 458, 437, 311, 957, 293, 437, 311, 7592, 13, 400, 51231, 51231, 281, 385, 11, 300, 733, 295, 1500, 575, 370, 707, 2158, 570, 337, 472, 551, 11, 309, 311, 588, 29482, 281, 51553, 51553, 264, 3539, 11420, 13, 407, 498, 286, 1319, 264, 11420, 11, 291, 393, 917, 493, 365, 2139, 51741, 51741], "temperature": 0.0, "avg_logprob": -0.07786178588867188, "compression_ratio": 1.726923076923077, "no_caption_prob": 3.120079782092944e-05}, {"id": 412, "seek": 248314, "start": 2495.8399999999997, "end": 2500.48, "text": " method gets called on this one thing. So you don't know what's real and what's fake. And", "tokens": [50364, 264, 17995, 293, 411, 20266, 4324, 484, 33283, 12475, 11, 49792, 1629, 411, 9906, 294, 293, 20266, 4324, 50735, 50735, 484, 1629, 6828, 13, 407, 436, 2736, 746, 293, 550, 1455, 257, 17362, 281, 19810, 300, 341, 50999, 50999, 3170, 2170, 1219, 322, 341, 472, 551, 13, 407, 291, 500, 380, 458, 437, 311, 957, 293, 437, 311, 7592, 13, 400, 51231, 51231, 281, 385, 11, 300, 733, 295, 1500, 575, 370, 707, 2158, 570, 337, 472, 551, 11, 309, 311, 588, 29482, 281, 51553, 51553, 264, 3539, 11420, 13, 407, 498, 286, 1319, 264, 11420, 11, 291, 393, 917, 493, 365, 2139, 51741, 51741], "temperature": 0.0, "avg_logprob": -0.07786178588867188, "compression_ratio": 1.726923076923077, "no_caption_prob": 3.120079782092944e-05}, {"id": 413, "seek": 248314, "start": 2500.48, "end": 2506.92, "text": " to me, that kind of test has so little value because for one thing, it's very coupled to", "tokens": [50364, 264, 17995, 293, 411, 20266, 4324, 484, 33283, 12475, 11, 49792, 1629, 411, 9906, 294, 293, 20266, 4324, 50735, 50735, 484, 1629, 6828, 13, 407, 436, 2736, 746, 293, 550, 1455, 257, 17362, 281, 19810, 300, 341, 50999, 50999, 3170, 2170, 1219, 322, 341, 472, 551, 13, 407, 291, 500, 380, 458, 437, 311, 957, 293, 437, 311, 7592, 13, 400, 51231, 51231, 281, 385, 11, 300, 733, 295, 1500, 575, 370, 707, 2158, 570, 337, 472, 551, 11, 309, 311, 588, 29482, 281, 51553, 51553, 264, 3539, 11420, 13, 407, 498, 286, 1319, 264, 11420, 11, 291, 393, 917, 493, 365, 2139, 51741, 51741], "temperature": 0.0, "avg_logprob": -0.07786178588867188, "compression_ratio": 1.726923076923077, "no_caption_prob": 3.120079782092944e-05}, {"id": 414, "seek": 248314, "start": 2506.92, "end": 2510.68, "text": " the actual implementation. So if I change the implementation, you can end up with either", "tokens": [50364, 264, 17995, 293, 411, 20266, 4324, 484, 33283, 12475, 11, 49792, 1629, 411, 9906, 294, 293, 20266, 4324, 50735, 50735, 484, 1629, 6828, 13, 407, 436, 2736, 746, 293, 550, 1455, 257, 17362, 281, 19810, 300, 341, 50999, 50999, 3170, 2170, 1219, 322, 341, 472, 551, 13, 407, 291, 500, 380, 458, 437, 311, 957, 293, 437, 311, 7592, 13, 400, 51231, 51231, 281, 385, 11, 300, 733, 295, 1500, 575, 370, 707, 2158, 570, 337, 472, 551, 11, 309, 311, 588, 29482, 281, 51553, 51553, 264, 3539, 11420, 13, 407, 498, 286, 1319, 264, 11420, 11, 291, 393, 917, 493, 365, 2139, 51741, 51741], "temperature": 0.0, "avg_logprob": -0.07786178588867188, "compression_ratio": 1.726923076923077, "no_caption_prob": 3.120079782092944e-05}, {"id": 415, "seek": 251068, "start": 2510.68, "end": 2515.8799999999997, "text": " false positives or false negatives. So you can have a failing test when everything as", "tokens": [50364, 7908, 35127, 420, 7908, 40019, 13, 407, 291, 393, 362, 257, 18223, 1500, 562, 1203, 382, 50624, 50624, 1400, 382, 264, 4195, 307, 5922, 307, 1364, 6239, 13, 509, 362, 257, 8437, 1500, 562, 1203, 307, 50874, 50874, 2584, 5463, 337, 264, 4195, 13, 400, 370, 439, 286, 393, 584, 307, 286, 478, 588, 2055, 300, 2699, 76, 1177, 380, 51139, 51139, 362, 420, 643, 49792, 13, 51238, 51238, 865, 13, 663, 1669, 385, 519, 295, 1071, 588, 1627, 644, 295, 2699, 76, 365, 3843, 281, 4997, 13, 509, 51594, 51594], "temperature": 0.0, "avg_logprob": -0.11158257146035472, "compression_ratio": 1.663716814159292, "no_caption_prob": 2.8409407605067827e-05}, {"id": 416, "seek": 251068, "start": 2515.8799999999997, "end": 2520.8799999999997, "text": " far as the user is concerned is working perfectly. You have a passing test when everything is", "tokens": [50364, 7908, 35127, 420, 7908, 40019, 13, 407, 291, 393, 362, 257, 18223, 1500, 562, 1203, 382, 50624, 50624, 1400, 382, 264, 4195, 307, 5922, 307, 1364, 6239, 13, 509, 362, 257, 8437, 1500, 562, 1203, 307, 50874, 50874, 2584, 5463, 337, 264, 4195, 13, 400, 370, 439, 286, 393, 584, 307, 286, 478, 588, 2055, 300, 2699, 76, 1177, 380, 51139, 51139, 362, 420, 643, 49792, 13, 51238, 51238, 865, 13, 663, 1669, 385, 519, 295, 1071, 588, 1627, 644, 295, 2699, 76, 365, 3843, 281, 4997, 13, 509, 51594, 51594], "temperature": 0.0, "avg_logprob": -0.11158257146035472, "compression_ratio": 1.663716814159292, "no_caption_prob": 2.8409407605067827e-05}, {"id": 417, "seek": 251068, "start": 2520.8799999999997, "end": 2526.18, "text": " completely broken for the user. And so all I can say is I'm very happy that Elm doesn't", "tokens": [50364, 7908, 35127, 420, 7908, 40019, 13, 407, 291, 393, 362, 257, 18223, 1500, 562, 1203, 382, 50624, 50624, 1400, 382, 264, 4195, 307, 5922, 307, 1364, 6239, 13, 509, 362, 257, 8437, 1500, 562, 1203, 307, 50874, 50874, 2584, 5463, 337, 264, 4195, 13, 400, 370, 439, 286, 393, 584, 307, 286, 478, 588, 2055, 300, 2699, 76, 1177, 380, 51139, 51139, 362, 420, 643, 49792, 13, 51238, 51238, 865, 13, 663, 1669, 385, 519, 295, 1071, 588, 1627, 644, 295, 2699, 76, 365, 3843, 281, 4997, 13, 509, 51594, 51594], "temperature": 0.0, "avg_logprob": -0.11158257146035472, "compression_ratio": 1.663716814159292, "no_caption_prob": 2.8409407605067827e-05}, {"id": 418, "seek": 251068, "start": 2526.18, "end": 2528.16, "text": " have or need mocking.", "tokens": [50364, 7908, 35127, 420, 7908, 40019, 13, 407, 291, 393, 362, 257, 18223, 1500, 562, 1203, 382, 50624, 50624, 1400, 382, 264, 4195, 307, 5922, 307, 1364, 6239, 13, 509, 362, 257, 8437, 1500, 562, 1203, 307, 50874, 50874, 2584, 5463, 337, 264, 4195, 13, 400, 370, 439, 286, 393, 584, 307, 286, 478, 588, 2055, 300, 2699, 76, 1177, 380, 51139, 51139, 362, 420, 643, 49792, 13, 51238, 51238, 865, 13, 663, 1669, 385, 519, 295, 1071, 588, 1627, 644, 295, 2699, 76, 365, 3843, 281, 4997, 13, 509, 51594, 51594], "temperature": 0.0, "avg_logprob": -0.11158257146035472, "compression_ratio": 1.663716814159292, "no_caption_prob": 2.8409407605067827e-05}, {"id": 419, "seek": 251068, "start": 2528.16, "end": 2535.2799999999997, "text": " Yeah. That makes me think of another very cool part of Elm with regard to testing. You", "tokens": [50364, 7908, 35127, 420, 7908, 40019, 13, 407, 291, 393, 362, 257, 18223, 1500, 562, 1203, 382, 50624, 50624, 1400, 382, 264, 4195, 307, 5922, 307, 1364, 6239, 13, 509, 362, 257, 8437, 1500, 562, 1203, 307, 50874, 50874, 2584, 5463, 337, 264, 4195, 13, 400, 370, 439, 286, 393, 584, 307, 286, 478, 588, 2055, 300, 2699, 76, 1177, 380, 51139, 51139, 362, 420, 643, 49792, 13, 51238, 51238, 865, 13, 663, 1669, 385, 519, 295, 1071, 588, 1627, 644, 295, 2699, 76, 365, 3843, 281, 4997, 13, 509, 51594, 51594], "temperature": 0.0, "avg_logprob": -0.11158257146035472, "compression_ratio": 1.663716814159292, "no_caption_prob": 2.8409407605067827e-05}, {"id": 420, "seek": 253528, "start": 2535.28, "end": 2541.5600000000004, "text": " know what one of the worst things with tests are is that when you have tests that depend", "tokens": [50364, 458, 437, 472, 295, 264, 5855, 721, 365, 6921, 366, 307, 300, 562, 291, 362, 6921, 300, 5672, 50678, 50678, 322, 1184, 661, 11, 562, 291, 992, 493, 746, 294, 472, 1500, 293, 264, 1150, 1500, 5946, 322, 264, 51034, 51034, 700, 472, 281, 362, 668, 1190, 13, 400, 300, 307, 370, 11232, 281, 24083, 293, 281, 1190, 13, 583, 309, 1177, 380, 51546, 51546, 589, 562, 257, 6449, 6921, 300, 787, 13, 1743, 437, 30, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.18067843914031984, "compression_ratio": 1.6721311475409837, "no_caption_prob": 6.302382826106623e-05}, {"id": 421, "seek": 253528, "start": 2541.5600000000004, "end": 2548.6800000000003, "text": " on each other, when you set up something in one test and the second test depends on the", "tokens": [50364, 458, 437, 472, 295, 264, 5855, 721, 365, 6921, 366, 307, 300, 562, 291, 362, 6921, 300, 5672, 50678, 50678, 322, 1184, 661, 11, 562, 291, 992, 493, 746, 294, 472, 1500, 293, 264, 1150, 1500, 5946, 322, 264, 51034, 51034, 700, 472, 281, 362, 668, 1190, 13, 400, 300, 307, 370, 11232, 281, 24083, 293, 281, 1190, 13, 583, 309, 1177, 380, 51546, 51546, 589, 562, 257, 6449, 6921, 300, 787, 13, 1743, 437, 30, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.18067843914031984, "compression_ratio": 1.6721311475409837, "no_caption_prob": 6.302382826106623e-05}, {"id": 422, "seek": 253528, "start": 2548.6800000000003, "end": 2558.92, "text": " first one to have been run. And that is so awful to debug and to run. But it doesn't", "tokens": [50364, 458, 437, 472, 295, 264, 5855, 721, 365, 6921, 366, 307, 300, 562, 291, 362, 6921, 300, 5672, 50678, 50678, 322, 1184, 661, 11, 562, 291, 992, 493, 746, 294, 472, 1500, 293, 264, 1150, 1500, 5946, 322, 264, 51034, 51034, 700, 472, 281, 362, 668, 1190, 13, 400, 300, 307, 370, 11232, 281, 24083, 293, 281, 1190, 13, 583, 309, 1177, 380, 51546, 51546, 589, 562, 257, 6449, 6921, 300, 787, 13, 1743, 437, 30, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.18067843914031984, "compression_ratio": 1.6721311475409837, "no_caption_prob": 6.302382826106623e-05}, {"id": 423, "seek": 253528, "start": 2558.92, "end": 2562.28, "text": " work when a dude tests that only. Like what?", "tokens": [50364, 458, 437, 472, 295, 264, 5855, 721, 365, 6921, 366, 307, 300, 562, 291, 362, 6921, 300, 5672, 50678, 50678, 322, 1184, 661, 11, 562, 291, 992, 493, 746, 294, 472, 1500, 293, 264, 1150, 1500, 5946, 322, 264, 51034, 51034, 700, 472, 281, 362, 668, 1190, 13, 400, 300, 307, 370, 11232, 281, 24083, 293, 281, 1190, 13, 583, 309, 1177, 380, 51546, 51546, 589, 562, 257, 6449, 6921, 300, 787, 13, 1743, 437, 30, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.18067843914031984, "compression_ratio": 1.6721311475409837, "no_caption_prob": 6.302382826106623e-05}, {"id": 424, "seek": 256228, "start": 2562.28, "end": 2567.2400000000002, "text": " I'd blocked that out of my memory, but you brought it back. Yeah. I think you don't have", "tokens": [50364, 286, 1116, 15470, 300, 484, 295, 452, 4675, 11, 457, 291, 3038, 309, 646, 13, 865, 13, 286, 519, 291, 500, 380, 362, 50612, 50612, 300, 294, 2699, 76, 570, 1203, 311, 3397, 32148, 13, 50770, 50770, 7587, 13, 400, 15957, 3142, 13, 821, 311, 411, 512, 1500, 36133, 13, 286, 500, 380, 1604, 498, 309, 311, 364, 497, 51098, 51098, 1608, 420, 8382, 1500, 11, 457, 411, 286, 519, 294, 512, 19907, 551, 11, 456, 311, 411, 257, 3170, 300, 291, 51336, 51336, 393, 818, 293, 309, 1669, 309, 370, 264, 1668, 307, 15957, 3142, 13, 407, 264, 1668, 307, 411, 1009, 294, 264, 912, 1668, 51675, 51675], "temperature": 0.0, "avg_logprob": -0.18655512354395412, "compression_ratio": 1.6734693877551021, "no_caption_prob": 5.5620675993850455e-05}, {"id": 425, "seek": 256228, "start": 2567.2400000000002, "end": 2570.4, "text": " that in Elm because everything's immutable.", "tokens": [50364, 286, 1116, 15470, 300, 484, 295, 452, 4675, 11, 457, 291, 3038, 309, 646, 13, 865, 13, 286, 519, 291, 500, 380, 362, 50612, 50612, 300, 294, 2699, 76, 570, 1203, 311, 3397, 32148, 13, 50770, 50770, 7587, 13, 400, 15957, 3142, 13, 821, 311, 411, 512, 1500, 36133, 13, 286, 500, 380, 1604, 498, 309, 311, 364, 497, 51098, 51098, 1608, 420, 8382, 1500, 11, 457, 411, 286, 519, 294, 512, 19907, 551, 11, 456, 311, 411, 257, 3170, 300, 291, 51336, 51336, 393, 818, 293, 309, 1669, 309, 370, 264, 1668, 307, 15957, 3142, 13, 407, 264, 1668, 307, 411, 1009, 294, 264, 912, 1668, 51675, 51675], "temperature": 0.0, "avg_logprob": -0.18655512354395412, "compression_ratio": 1.6734693877551021, "no_caption_prob": 5.5620675993850455e-05}, {"id": 426, "seek": 256228, "start": 2570.4, "end": 2576.96, "text": " Exactly. And deterministic. There's like some test helper. I don't remember if it's an R", "tokens": [50364, 286, 1116, 15470, 300, 484, 295, 452, 4675, 11, 457, 291, 3038, 309, 646, 13, 865, 13, 286, 519, 291, 500, 380, 362, 50612, 50612, 300, 294, 2699, 76, 570, 1203, 311, 3397, 32148, 13, 50770, 50770, 7587, 13, 400, 15957, 3142, 13, 821, 311, 411, 512, 1500, 36133, 13, 286, 500, 380, 1604, 498, 309, 311, 364, 497, 51098, 51098, 1608, 420, 8382, 1500, 11, 457, 411, 286, 519, 294, 512, 19907, 551, 11, 456, 311, 411, 257, 3170, 300, 291, 51336, 51336, 393, 818, 293, 309, 1669, 309, 370, 264, 1668, 307, 15957, 3142, 13, 407, 264, 1668, 307, 411, 1009, 294, 264, 912, 1668, 51675, 51675], "temperature": 0.0, "avg_logprob": -0.18655512354395412, "compression_ratio": 1.6734693877551021, "no_caption_prob": 5.5620675993850455e-05}, {"id": 427, "seek": 256228, "start": 2576.96, "end": 2581.7200000000003, "text": " spec or mini test, but like I think in some Ruby thing, there's like a method that you", "tokens": [50364, 286, 1116, 15470, 300, 484, 295, 452, 4675, 11, 457, 291, 3038, 309, 646, 13, 865, 13, 286, 519, 291, 500, 380, 362, 50612, 50612, 300, 294, 2699, 76, 570, 1203, 311, 3397, 32148, 13, 50770, 50770, 7587, 13, 400, 15957, 3142, 13, 821, 311, 411, 512, 1500, 36133, 13, 286, 500, 380, 1604, 498, 309, 311, 364, 497, 51098, 51098, 1608, 420, 8382, 1500, 11, 457, 411, 286, 519, 294, 512, 19907, 551, 11, 456, 311, 411, 257, 3170, 300, 291, 51336, 51336, 393, 818, 293, 309, 1669, 309, 370, 264, 1668, 307, 15957, 3142, 13, 407, 264, 1668, 307, 411, 1009, 294, 264, 912, 1668, 51675, 51675], "temperature": 0.0, "avg_logprob": -0.18655512354395412, "compression_ratio": 1.6734693877551021, "no_caption_prob": 5.5620675993850455e-05}, {"id": 428, "seek": 256228, "start": 2581.7200000000003, "end": 2588.5, "text": " can call and it makes it so the order is deterministic. So the order is like always in the same order", "tokens": [50364, 286, 1116, 15470, 300, 484, 295, 452, 4675, 11, 457, 291, 3038, 309, 646, 13, 865, 13, 286, 519, 291, 500, 380, 362, 50612, 50612, 300, 294, 2699, 76, 570, 1203, 311, 3397, 32148, 13, 50770, 50770, 7587, 13, 400, 15957, 3142, 13, 821, 311, 411, 512, 1500, 36133, 13, 286, 500, 380, 1604, 498, 309, 311, 364, 497, 51098, 51098, 1608, 420, 8382, 1500, 11, 457, 411, 286, 519, 294, 512, 19907, 551, 11, 456, 311, 411, 257, 3170, 300, 291, 51336, 51336, 393, 818, 293, 309, 1669, 309, 370, 264, 1668, 307, 15957, 3142, 13, 407, 264, 1668, 307, 411, 1009, 294, 264, 912, 1668, 51675, 51675], "temperature": 0.0, "avg_logprob": -0.18655512354395412, "compression_ratio": 1.6734693877551021, "no_caption_prob": 5.5620675993850455e-05}, {"id": 429, "seek": 258850, "start": 2588.5, "end": 2594.32, "text": " rather than randomizing the order of the tests. For exactly the type of thing you're describing,", "tokens": [50364, 2831, 813, 4974, 3319, 264, 1668, 295, 264, 6921, 13, 1171, 2293, 264, 2010, 295, 551, 291, 434, 16141, 11, 50655, 50655, 436, 1190, 264, 6921, 294, 257, 4974, 1668, 11, 457, 456, 311, 512, 3170, 291, 393, 818, 300, 1669, 50911, 50911, 264, 1668, 6806, 13, 400, 264, 3170, 1315, 307, 411, 11, 286, 478, 257, 9263, 954, 293, 286, 500, 380, 458, 11, 286, 51291, 51291, 1961, 33734, 420, 746, 411, 300, 13, 467, 311, 411, 512, 11232, 1315, 13, 467, 311, 411, 498, 291, 534, 51643, 51643], "temperature": 0.0, "avg_logprob": -0.11437447174735692, "compression_ratio": 1.6807511737089202, "no_caption_prob": 3.4806660551112145e-05}, {"id": 430, "seek": 258850, "start": 2594.32, "end": 2599.44, "text": " they run the tests in a random order, but there's some method you can call that makes", "tokens": [50364, 2831, 813, 4974, 3319, 264, 1668, 295, 264, 6921, 13, 1171, 2293, 264, 2010, 295, 551, 291, 434, 16141, 11, 50655, 50655, 436, 1190, 264, 6921, 294, 257, 4974, 1668, 11, 457, 456, 311, 512, 3170, 291, 393, 818, 300, 1669, 50911, 50911, 264, 1668, 6806, 13, 400, 264, 3170, 1315, 307, 411, 11, 286, 478, 257, 9263, 954, 293, 286, 500, 380, 458, 11, 286, 51291, 51291, 1961, 33734, 420, 746, 411, 300, 13, 467, 311, 411, 512, 11232, 1315, 13, 467, 311, 411, 498, 291, 534, 51643, 51643], "temperature": 0.0, "avg_logprob": -0.11437447174735692, "compression_ratio": 1.6807511737089202, "no_caption_prob": 3.4806660551112145e-05}, {"id": 431, "seek": 258850, "start": 2599.44, "end": 2607.04, "text": " the order fixed. And the method name is like, I'm a horrible person and I don't know, I", "tokens": [50364, 2831, 813, 4974, 3319, 264, 1668, 295, 264, 6921, 13, 1171, 2293, 264, 2010, 295, 551, 291, 434, 16141, 11, 50655, 50655, 436, 1190, 264, 6921, 294, 257, 4974, 1668, 11, 457, 456, 311, 512, 3170, 291, 393, 818, 300, 1669, 50911, 50911, 264, 1668, 6806, 13, 400, 264, 3170, 1315, 307, 411, 11, 286, 478, 257, 9263, 954, 293, 286, 500, 380, 458, 11, 286, 51291, 51291, 1961, 33734, 420, 746, 411, 300, 13, 467, 311, 411, 512, 11232, 1315, 13, 467, 311, 411, 498, 291, 534, 51643, 51643], "temperature": 0.0, "avg_logprob": -0.11437447174735692, "compression_ratio": 1.6807511737089202, "no_caption_prob": 3.4806660551112145e-05}, {"id": 432, "seek": 258850, "start": 2607.04, "end": 2614.08, "text": " kill puppies or something like that. It's like some awful name. It's like if you really", "tokens": [50364, 2831, 813, 4974, 3319, 264, 1668, 295, 264, 6921, 13, 1171, 2293, 264, 2010, 295, 551, 291, 434, 16141, 11, 50655, 50655, 436, 1190, 264, 6921, 294, 257, 4974, 1668, 11, 457, 456, 311, 512, 3170, 291, 393, 818, 300, 1669, 50911, 50911, 264, 1668, 6806, 13, 400, 264, 3170, 1315, 307, 411, 11, 286, 478, 257, 9263, 954, 293, 286, 500, 380, 458, 11, 286, 51291, 51291, 1961, 33734, 420, 746, 411, 300, 13, 467, 311, 411, 512, 11232, 1315, 13, 467, 311, 411, 498, 291, 534, 51643, 51643], "temperature": 0.0, "avg_logprob": -0.11437447174735692, "compression_ratio": 1.6807511737089202, "no_caption_prob": 3.4806660551112145e-05}, {"id": 433, "seek": 261408, "start": 2614.08, "end": 2618.68, "text": " want to do it, you at least have to admit that you're a terrible person first.", "tokens": [50364, 528, 281, 360, 309, 11, 291, 412, 1935, 362, 281, 9796, 300, 291, 434, 257, 6237, 954, 700, 13, 50594, 50594, 286, 643, 281, 915, 300, 472, 13, 50826, 50826, 492, 603, 2113, 281, 309, 294, 264, 855, 5570, 445, 337, 1019, 13, 51102, 51102, 663, 311, 1101, 813, 729, 30644, 7633, 6828, 300, 307, 11, 1767, 500, 380, 764, 385, 420, 746, 13, 51492, 51492], "temperature": 0.0, "avg_logprob": -0.23000342705670526, "compression_ratio": 1.463855421686747, "no_caption_prob": 2.885667527152691e-05}, {"id": 434, "seek": 261408, "start": 2618.68, "end": 2623.3199999999997, "text": " I need to find that one.", "tokens": [50364, 528, 281, 360, 309, 11, 291, 412, 1935, 362, 281, 9796, 300, 291, 434, 257, 6237, 954, 700, 13, 50594, 50594, 286, 643, 281, 915, 300, 472, 13, 50826, 50826, 492, 603, 2113, 281, 309, 294, 264, 855, 5570, 445, 337, 1019, 13, 51102, 51102, 663, 311, 1101, 813, 729, 30644, 7633, 6828, 300, 307, 11, 1767, 500, 380, 764, 385, 420, 746, 13, 51492, 51492], "temperature": 0.0, "avg_logprob": -0.23000342705670526, "compression_ratio": 1.463855421686747, "no_caption_prob": 2.885667527152691e-05}, {"id": 435, "seek": 261408, "start": 2623.3199999999997, "end": 2628.84, "text": " We'll link to it in the show notes just for fun.", "tokens": [50364, 528, 281, 360, 309, 11, 291, 412, 1935, 362, 281, 9796, 300, 291, 434, 257, 6237, 954, 700, 13, 50594, 50594, 286, 643, 281, 915, 300, 472, 13, 50826, 50826, 492, 603, 2113, 281, 309, 294, 264, 855, 5570, 445, 337, 1019, 13, 51102, 51102, 663, 311, 1101, 813, 729, 30644, 7633, 6828, 300, 307, 11, 1767, 500, 380, 764, 385, 420, 746, 13, 51492, 51492], "temperature": 0.0, "avg_logprob": -0.23000342705670526, "compression_ratio": 1.463855421686747, "no_caption_prob": 2.885667527152691e-05}, {"id": 436, "seek": 261408, "start": 2628.84, "end": 2636.64, "text": " That's better than those React hidden functions that is, please don't use me or something.", "tokens": [50364, 528, 281, 360, 309, 11, 291, 412, 1935, 362, 281, 9796, 300, 291, 434, 257, 6237, 954, 700, 13, 50594, 50594, 286, 643, 281, 915, 300, 472, 13, 50826, 50826, 492, 603, 2113, 281, 309, 294, 264, 855, 5570, 445, 337, 1019, 13, 51102, 51102, 663, 311, 1101, 813, 729, 30644, 7633, 6828, 300, 307, 11, 1767, 500, 380, 764, 385, 420, 746, 13, 51492, 51492], "temperature": 0.0, "avg_logprob": -0.23000342705670526, "compression_ratio": 1.463855421686747, "no_caption_prob": 2.885667527152691e-05}, {"id": 437, "seek": 263664, "start": 2636.64, "end": 2645.7599999999998, "text": " Oh my goodness. So I was writing a test in Ruby the other week and I actually like shipped", "tokens": [50364, 876, 452, 8387, 13, 407, 286, 390, 3579, 257, 1500, 294, 19907, 264, 661, 1243, 293, 286, 767, 411, 25312, 50820, 50820, 512, 3089, 293, 456, 390, 257, 3170, 5361, 6713, 13, 400, 286, 478, 411, 11, 437, 30, 1012, 322, 4120, 630, 341, 51070, 51070, 1500, 1320, 30, 400, 550, 456, 390, 341, 11183, 294, 4265, 13, 400, 550, 286, 390, 1237, 666, 51406, 51406, 309, 293, 1580, 767, 10932, 309, 484, 13, 814, 434, 411, 11, 876, 1338, 11, 497, 1608, 17847, 26531, 264, 4338, 51720, 51720], "temperature": 0.0, "avg_logprob": -0.12877100640600855, "compression_ratio": 1.5895196506550218, "no_caption_prob": 2.0784264052053913e-05}, {"id": 438, "seek": 263664, "start": 2645.7599999999998, "end": 2650.7599999999998, "text": " some code and there was a method missing error. And I'm like, what? How on earth did this", "tokens": [50364, 876, 452, 8387, 13, 407, 286, 390, 3579, 257, 1500, 294, 19907, 264, 661, 1243, 293, 286, 767, 411, 25312, 50820, 50820, 512, 3089, 293, 456, 390, 257, 3170, 5361, 6713, 13, 400, 286, 478, 411, 11, 437, 30, 1012, 322, 4120, 630, 341, 51070, 51070, 1500, 1320, 30, 400, 550, 456, 390, 341, 11183, 294, 4265, 13, 400, 550, 286, 390, 1237, 666, 51406, 51406, 309, 293, 1580, 767, 10932, 309, 484, 13, 814, 434, 411, 11, 876, 1338, 11, 497, 1608, 17847, 26531, 264, 4338, 51720, 51720], "temperature": 0.0, "avg_logprob": -0.12877100640600855, "compression_ratio": 1.5895196506550218, "no_caption_prob": 2.0784264052053913e-05}, {"id": 439, "seek": 263664, "start": 2650.7599999999998, "end": 2657.48, "text": " test pass? And then there was this exception in production. And then I was looking into", "tokens": [50364, 876, 452, 8387, 13, 407, 286, 390, 3579, 257, 1500, 294, 19907, 264, 661, 1243, 293, 286, 767, 411, 25312, 50820, 50820, 512, 3089, 293, 456, 390, 257, 3170, 5361, 6713, 13, 400, 286, 478, 411, 11, 437, 30, 1012, 322, 4120, 630, 341, 51070, 51070, 1500, 1320, 30, 400, 550, 456, 390, 341, 11183, 294, 4265, 13, 400, 550, 286, 390, 1237, 666, 51406, 51406, 309, 293, 1580, 767, 10932, 309, 484, 13, 814, 434, 411, 11, 876, 1338, 11, 497, 1608, 17847, 26531, 264, 4338, 51720, 51720], "temperature": 0.0, "avg_logprob": -0.12877100640600855, "compression_ratio": 1.5895196506550218, "no_caption_prob": 2.0784264052053913e-05}, {"id": 440, "seek": 263664, "start": 2657.48, "end": 2663.7599999999998, "text": " it and someone actually pointed it out. They're like, Oh yeah, R spec monkey patches the global", "tokens": [50364, 876, 452, 8387, 13, 407, 286, 390, 3579, 257, 1500, 294, 19907, 264, 661, 1243, 293, 286, 767, 411, 25312, 50820, 50820, 512, 3089, 293, 456, 390, 257, 3170, 5361, 6713, 13, 400, 286, 478, 411, 11, 437, 30, 1012, 322, 4120, 630, 341, 51070, 51070, 1500, 1320, 30, 400, 550, 456, 390, 341, 11183, 294, 4265, 13, 400, 550, 286, 390, 1237, 666, 51406, 51406, 309, 293, 1580, 767, 10932, 309, 484, 13, 814, 434, 411, 11, 876, 1338, 11, 497, 1608, 17847, 26531, 264, 4338, 51720, 51720], "temperature": 0.0, "avg_logprob": -0.12877100640600855, "compression_ratio": 1.5895196506550218, "no_caption_prob": 2.0784264052053913e-05}, {"id": 441, "seek": 266376, "start": 2663.76, "end": 2670.34, "text": " variable context. So there was some undefined thing context, but R spec was monkey patching", "tokens": [50364, 7006, 4319, 13, 407, 456, 390, 512, 674, 5666, 2001, 551, 4319, 11, 457, 497, 1608, 390, 17847, 9972, 278, 50693, 50693, 309, 370, 309, 2067, 380, 2902, 257, 3170, 5361, 11183, 13, 407, 300, 390, 257, 1019, 472, 13, 40178, 573, 309, 281, 584, 11, 51054, 51054, 1949, 1803, 588, 6356, 281, 312, 1364, 294, 2699, 76, 293, 4997, 307, 370, 709, 22842, 813, 309, 51316, 51316, 307, 294, 661, 8650, 13, 407, 1767, 2464, 6921, 13, 51444, 51444, 865, 13, 51494, 51494, 508, 2032, 268, 11, 577, 360, 291, 519, 466, 341, 1333, 295, 1168, 295, 437, 360, 291, 1500, 294, 257, 33941, 11745, 51818, 51818], "temperature": 0.0, "avg_logprob": -0.1146192810752175, "compression_ratio": 1.6328125, "no_caption_prob": 1.3419660717772786e-05}, {"id": 442, "seek": 266376, "start": 2670.34, "end": 2677.5600000000004, "text": " it so it wasn't giving a method missing exception. So that was a fun one. Suffice it to say,", "tokens": [50364, 7006, 4319, 13, 407, 456, 390, 512, 674, 5666, 2001, 551, 4319, 11, 457, 497, 1608, 390, 17847, 9972, 278, 50693, 50693, 309, 370, 309, 2067, 380, 2902, 257, 3170, 5361, 11183, 13, 407, 300, 390, 257, 1019, 472, 13, 40178, 573, 309, 281, 584, 11, 51054, 51054, 1949, 1803, 588, 6356, 281, 312, 1364, 294, 2699, 76, 293, 4997, 307, 370, 709, 22842, 813, 309, 51316, 51316, 307, 294, 661, 8650, 13, 407, 1767, 2464, 6921, 13, 51444, 51444, 865, 13, 51494, 51494, 508, 2032, 268, 11, 577, 360, 291, 519, 466, 341, 1333, 295, 1168, 295, 437, 360, 291, 1500, 294, 257, 33941, 11745, 51818, 51818], "temperature": 0.0, "avg_logprob": -0.1146192810752175, "compression_ratio": 1.6328125, "no_caption_prob": 1.3419660717772786e-05}, {"id": 443, "seek": 266376, "start": 2677.5600000000004, "end": 2682.8, "text": " consider yourself very lucky to be working in Elm and testing is so much nicer than it", "tokens": [50364, 7006, 4319, 13, 407, 456, 390, 512, 674, 5666, 2001, 551, 4319, 11, 457, 497, 1608, 390, 17847, 9972, 278, 50693, 50693, 309, 370, 309, 2067, 380, 2902, 257, 3170, 5361, 11183, 13, 407, 300, 390, 257, 1019, 472, 13, 40178, 573, 309, 281, 584, 11, 51054, 51054, 1949, 1803, 588, 6356, 281, 312, 1364, 294, 2699, 76, 293, 4997, 307, 370, 709, 22842, 813, 309, 51316, 51316, 307, 294, 661, 8650, 13, 407, 1767, 2464, 6921, 13, 51444, 51444, 865, 13, 51494, 51494, 508, 2032, 268, 11, 577, 360, 291, 519, 466, 341, 1333, 295, 1168, 295, 437, 360, 291, 1500, 294, 257, 33941, 11745, 51818, 51818], "temperature": 0.0, "avg_logprob": -0.1146192810752175, "compression_ratio": 1.6328125, "no_caption_prob": 1.3419660717772786e-05}, {"id": 444, "seek": 266376, "start": 2682.8, "end": 2685.36, "text": " is in other languages. So please write tests.", "tokens": [50364, 7006, 4319, 13, 407, 456, 390, 512, 674, 5666, 2001, 551, 4319, 11, 457, 497, 1608, 390, 17847, 9972, 278, 50693, 50693, 309, 370, 309, 2067, 380, 2902, 257, 3170, 5361, 11183, 13, 407, 300, 390, 257, 1019, 472, 13, 40178, 573, 309, 281, 584, 11, 51054, 51054, 1949, 1803, 588, 6356, 281, 312, 1364, 294, 2699, 76, 293, 4997, 307, 370, 709, 22842, 813, 309, 51316, 51316, 307, 294, 661, 8650, 13, 407, 1767, 2464, 6921, 13, 51444, 51444, 865, 13, 51494, 51494, 508, 2032, 268, 11, 577, 360, 291, 519, 466, 341, 1333, 295, 1168, 295, 437, 360, 291, 1500, 294, 257, 33941, 11745, 51818, 51818], "temperature": 0.0, "avg_logprob": -0.1146192810752175, "compression_ratio": 1.6328125, "no_caption_prob": 1.3419660717772786e-05}, {"id": 445, "seek": 266376, "start": 2685.36, "end": 2686.36, "text": " Yeah.", "tokens": [50364, 7006, 4319, 13, 407, 456, 390, 512, 674, 5666, 2001, 551, 4319, 11, 457, 497, 1608, 390, 17847, 9972, 278, 50693, 50693, 309, 370, 309, 2067, 380, 2902, 257, 3170, 5361, 11183, 13, 407, 300, 390, 257, 1019, 472, 13, 40178, 573, 309, 281, 584, 11, 51054, 51054, 1949, 1803, 588, 6356, 281, 312, 1364, 294, 2699, 76, 293, 4997, 307, 370, 709, 22842, 813, 309, 51316, 51316, 307, 294, 661, 8650, 13, 407, 1767, 2464, 6921, 13, 51444, 51444, 865, 13, 51494, 51494, 508, 2032, 268, 11, 577, 360, 291, 519, 466, 341, 1333, 295, 1168, 295, 437, 360, 291, 1500, 294, 257, 33941, 11745, 51818, 51818], "temperature": 0.0, "avg_logprob": -0.1146192810752175, "compression_ratio": 1.6328125, "no_caption_prob": 1.3419660717772786e-05}, {"id": 446, "seek": 266376, "start": 2686.36, "end": 2692.84, "text": " Jeroen, how do you think about this sort of question of what do you test in a typed functional", "tokens": [50364, 7006, 4319, 13, 407, 456, 390, 512, 674, 5666, 2001, 551, 4319, 11, 457, 497, 1608, 390, 17847, 9972, 278, 50693, 50693, 309, 370, 309, 2067, 380, 2902, 257, 3170, 5361, 11183, 13, 407, 300, 390, 257, 1019, 472, 13, 40178, 573, 309, 281, 584, 11, 51054, 51054, 1949, 1803, 588, 6356, 281, 312, 1364, 294, 2699, 76, 293, 4997, 307, 370, 709, 22842, 813, 309, 51316, 51316, 307, 294, 661, 8650, 13, 407, 1767, 2464, 6921, 13, 51444, 51444, 865, 13, 51494, 51494, 508, 2032, 268, 11, 577, 360, 291, 519, 466, 341, 1333, 295, 1168, 295, 437, 360, 291, 1500, 294, 257, 33941, 11745, 51818, 51818], "temperature": 0.0, "avg_logprob": -0.1146192810752175, "compression_ratio": 1.6328125, "no_caption_prob": 1.3419660717772786e-05}, {"id": 447, "seek": 269284, "start": 2692.84, "end": 2700.02, "text": " language like Elm and when do you rely on types or perhaps, you know, certain properties", "tokens": [50364, 2856, 411, 2699, 76, 293, 562, 360, 291, 10687, 322, 3467, 420, 4317, 11, 291, 458, 11, 1629, 7221, 50723, 50723, 300, 746, 411, 2699, 76, 3131, 420, 46593, 393, 2893, 291, 30, 50892, 50892, 876, 11, 2673, 286, 853, 281, 652, 6243, 4368, 6243, 13, 286, 1590, 562, 286, 393, 380, 915, 257, 636, 51333, 51333, 281, 652, 746, 6243, 420, 562, 309, 3643, 588, 10054, 712, 13, 286, 853, 281, 4772, 46878, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.14417159251677683, "compression_ratio": 1.6446700507614214, "no_caption_prob": 4.9084970669355243e-05}, {"id": 448, "seek": 269284, "start": 2700.02, "end": 2703.4, "text": " that something like Elm review or tooling can provide you?", "tokens": [50364, 2856, 411, 2699, 76, 293, 562, 360, 291, 10687, 322, 3467, 420, 4317, 11, 291, 458, 11, 1629, 7221, 50723, 50723, 300, 746, 411, 2699, 76, 3131, 420, 46593, 393, 2893, 291, 30, 50892, 50892, 876, 11, 2673, 286, 853, 281, 652, 6243, 4368, 6243, 13, 286, 1590, 562, 286, 393, 380, 915, 257, 636, 51333, 51333, 281, 652, 746, 6243, 420, 562, 309, 3643, 588, 10054, 712, 13, 286, 853, 281, 4772, 46878, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.14417159251677683, "compression_ratio": 1.6446700507614214, "no_caption_prob": 4.9084970669355243e-05}, {"id": 449, "seek": 269284, "start": 2703.4, "end": 2712.2200000000003, "text": " Oh, usually I try to make impossible states impossible. I stop when I can't find a way", "tokens": [50364, 2856, 411, 2699, 76, 293, 562, 360, 291, 10687, 322, 3467, 420, 4317, 11, 291, 458, 11, 1629, 7221, 50723, 50723, 300, 746, 411, 2699, 76, 3131, 420, 46593, 393, 2893, 291, 30, 50892, 50892, 876, 11, 2673, 286, 853, 281, 652, 6243, 4368, 6243, 13, 286, 1590, 562, 286, 393, 380, 915, 257, 636, 51333, 51333, 281, 652, 746, 6243, 420, 562, 309, 3643, 588, 10054, 712, 13, 286, 853, 281, 4772, 46878, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.14417159251677683, "compression_ratio": 1.6446700507614214, "no_caption_prob": 4.9084970669355243e-05}, {"id": 450, "seek": 269284, "start": 2712.2200000000003, "end": 2719.84, "text": " to make something impossible or when it becomes very unusable. I try to balance usability", "tokens": [50364, 2856, 411, 2699, 76, 293, 562, 360, 291, 10687, 322, 3467, 420, 4317, 11, 291, 458, 11, 1629, 7221, 50723, 50723, 300, 746, 411, 2699, 76, 3131, 420, 46593, 393, 2893, 291, 30, 50892, 50892, 876, 11, 2673, 286, 853, 281, 652, 6243, 4368, 6243, 13, 286, 1590, 562, 286, 393, 380, 915, 257, 636, 51333, 51333, 281, 652, 746, 6243, 420, 562, 309, 3643, 588, 10054, 712, 13, 286, 853, 281, 4772, 46878, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.14417159251677683, "compression_ratio": 1.6446700507614214, "no_caption_prob": 4.9084970669355243e-05}, {"id": 451, "seek": 271984, "start": 2719.84, "end": 2726.44, "text": " and correctness. So I still don't know when I would use Elm review for something like", "tokens": [50364, 293, 3006, 1287, 13, 407, 286, 920, 500, 380, 458, 562, 286, 576, 764, 2699, 76, 3131, 337, 746, 411, 50694, 50694, 300, 13, 467, 534, 5946, 322, 264, 1389, 13, 286, 519, 456, 311, 257, 688, 295, 3190, 689, 291, 727, 764, 50884, 50884, 2699, 76, 3131, 733, 295, 382, 257, 1500, 294, 257, 636, 11, 746, 300, 6921, 264, 15768, 295, 428, 3089, 3096, 13, 51232, 51232, 865, 13, 286, 914, 11, 291, 393, 3297, 764, 309, 281, 652, 19810, 626, 466, 20411, 4190, 13, 51498, 51498], "temperature": 0.0, "avg_logprob": -0.1185188712654533, "compression_ratio": 1.6093023255813954, "no_caption_prob": 6.540349659189815e-06}, {"id": 452, "seek": 271984, "start": 2726.44, "end": 2730.2400000000002, "text": " that. It really depends on the case. I think there's a lot of places where you could use", "tokens": [50364, 293, 3006, 1287, 13, 407, 286, 920, 500, 380, 458, 562, 286, 576, 764, 2699, 76, 3131, 337, 746, 411, 50694, 50694, 300, 13, 467, 534, 5946, 322, 264, 1389, 13, 286, 519, 456, 311, 257, 688, 295, 3190, 689, 291, 727, 764, 50884, 50884, 2699, 76, 3131, 733, 295, 382, 257, 1500, 294, 257, 636, 11, 746, 300, 6921, 264, 15768, 295, 428, 3089, 3096, 13, 51232, 51232, 865, 13, 286, 914, 11, 291, 393, 3297, 764, 309, 281, 652, 19810, 626, 466, 20411, 4190, 13, 51498, 51498], "temperature": 0.0, "avg_logprob": -0.1185188712654533, "compression_ratio": 1.6093023255813954, "no_caption_prob": 6.540349659189815e-06}, {"id": 453, "seek": 271984, "start": 2730.2400000000002, "end": 2737.2000000000003, "text": " Elm review kind of as a test in a way, something that tests the contents of your code base.", "tokens": [50364, 293, 3006, 1287, 13, 407, 286, 920, 500, 380, 458, 562, 286, 576, 764, 2699, 76, 3131, 337, 746, 411, 50694, 50694, 300, 13, 467, 534, 5946, 322, 264, 1389, 13, 286, 519, 456, 311, 257, 688, 295, 3190, 689, 291, 727, 764, 50884, 50884, 2699, 76, 3131, 733, 295, 382, 257, 1500, 294, 257, 636, 11, 746, 300, 6921, 264, 15768, 295, 428, 3089, 3096, 13, 51232, 51232, 865, 13, 286, 914, 11, 291, 393, 3297, 764, 309, 281, 652, 19810, 626, 466, 20411, 4190, 13, 51498, 51498], "temperature": 0.0, "avg_logprob": -0.1185188712654533, "compression_ratio": 1.6093023255813954, "no_caption_prob": 6.540349659189815e-06}, {"id": 454, "seek": 271984, "start": 2737.2000000000003, "end": 2742.52, "text": " Yeah. I mean, you can certainly use it to make assertions about literal values.", "tokens": [50364, 293, 3006, 1287, 13, 407, 286, 920, 500, 380, 458, 562, 286, 576, 764, 2699, 76, 3131, 337, 746, 411, 50694, 50694, 300, 13, 467, 534, 5946, 322, 264, 1389, 13, 286, 519, 456, 311, 257, 688, 295, 3190, 689, 291, 727, 764, 50884, 50884, 2699, 76, 3131, 733, 295, 382, 257, 1500, 294, 257, 636, 11, 746, 300, 6921, 264, 15768, 295, 428, 3089, 3096, 13, 51232, 51232, 865, 13, 286, 914, 11, 291, 393, 3297, 764, 309, 281, 652, 19810, 626, 466, 20411, 4190, 13, 51498, 51498], "temperature": 0.0, "avg_logprob": -0.1185188712654533, "compression_ratio": 1.6093023255813954, "no_caption_prob": 6.540349659189815e-06}, {"id": 455, "seek": 274252, "start": 2742.52, "end": 2752.08, "text": " Yeah, exactly. So I made a blog post at one point saying here's a safe way to write regex", "tokens": [50364, 865, 11, 2293, 13, 407, 286, 1027, 257, 6968, 2183, 412, 472, 935, 1566, 510, 311, 257, 3273, 636, 281, 2464, 319, 432, 87, 50842, 50842, 294, 364, 35948, 636, 11, 294, 257, 636, 300, 1542, 35948, 13, 51022, 51022, 1079, 13, 51072, 51072, 400, 300, 2709, 291, 264, 733, 295, 264, 4601, 1500, 337, 291, 1553, 291, 1419, 281, 2464, 309, 13, 51310, 51310, 1779, 13, 1436, 291, 727, 11, 1338, 11, 411, 718, 311, 584, 291, 645, 3579, 11, 411, 456, 311, 257, 2531, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.194430414835612, "compression_ratio": 1.598984771573604, "no_caption_prob": 9.080328709387686e-06}, {"id": 456, "seek": 274252, "start": 2752.08, "end": 2755.68, "text": " in an unsafe way, in a way that looks unsafe.", "tokens": [50364, 865, 11, 2293, 13, 407, 286, 1027, 257, 6968, 2183, 412, 472, 935, 1566, 510, 311, 257, 3273, 636, 281, 2464, 319, 432, 87, 50842, 50842, 294, 364, 35948, 636, 11, 294, 257, 636, 300, 1542, 35948, 13, 51022, 51022, 1079, 13, 51072, 51072, 400, 300, 2709, 291, 264, 733, 295, 264, 4601, 1500, 337, 291, 1553, 291, 1419, 281, 2464, 309, 13, 51310, 51310, 1779, 13, 1436, 291, 727, 11, 1338, 11, 411, 718, 311, 584, 291, 645, 3579, 11, 411, 456, 311, 257, 2531, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.194430414835612, "compression_ratio": 1.598984771573604, "no_caption_prob": 9.080328709387686e-06}, {"id": 457, "seek": 274252, "start": 2755.68, "end": 2756.68, "text": " Yes.", "tokens": [50364, 865, 11, 2293, 13, 407, 286, 1027, 257, 6968, 2183, 412, 472, 935, 1566, 510, 311, 257, 3273, 636, 281, 2464, 319, 432, 87, 50842, 50842, 294, 364, 35948, 636, 11, 294, 257, 636, 300, 1542, 35948, 13, 51022, 51022, 1079, 13, 51072, 51072, 400, 300, 2709, 291, 264, 733, 295, 264, 4601, 1500, 337, 291, 1553, 291, 1419, 281, 2464, 309, 13, 51310, 51310, 1779, 13, 1436, 291, 727, 11, 1338, 11, 411, 718, 311, 584, 291, 645, 3579, 11, 411, 456, 311, 257, 2531, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.194430414835612, "compression_ratio": 1.598984771573604, "no_caption_prob": 9.080328709387686e-06}, {"id": 458, "seek": 274252, "start": 2756.68, "end": 2761.44, "text": " And that gives you the kind of the rights test for you without you having to write it.", "tokens": [50364, 865, 11, 2293, 13, 407, 286, 1027, 257, 6968, 2183, 412, 472, 935, 1566, 510, 311, 257, 3273, 636, 281, 2464, 319, 432, 87, 50842, 50842, 294, 364, 35948, 636, 11, 294, 257, 636, 300, 1542, 35948, 13, 51022, 51022, 1079, 13, 51072, 51072, 400, 300, 2709, 291, 264, 733, 295, 264, 4601, 1500, 337, 291, 1553, 291, 1419, 281, 2464, 309, 13, 51310, 51310, 1779, 13, 1436, 291, 727, 11, 1338, 11, 411, 718, 311, 584, 291, 645, 3579, 11, 411, 456, 311, 257, 2531, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.194430414835612, "compression_ratio": 1.598984771573604, "no_caption_prob": 9.080328709387686e-06}, {"id": 459, "seek": 274252, "start": 2761.44, "end": 2767.52, "text": " Right. Because you could, yeah, like let's say you were writing, like there's a similar", "tokens": [50364, 865, 11, 2293, 13, 407, 286, 1027, 257, 6968, 2183, 412, 472, 935, 1566, 510, 311, 257, 3273, 636, 281, 2464, 319, 432, 87, 50842, 50842, 294, 364, 35948, 636, 11, 294, 257, 636, 300, 1542, 35948, 13, 51022, 51022, 1079, 13, 51072, 51072, 400, 300, 2709, 291, 264, 733, 295, 264, 4601, 1500, 337, 291, 1553, 291, 1419, 281, 2464, 309, 13, 51310, 51310, 1779, 13, 1436, 291, 727, 11, 1338, 11, 411, 718, 311, 584, 291, 645, 3579, 11, 411, 456, 311, 257, 2531, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.194430414835612, "compression_ratio": 1.598984771573604, "no_caption_prob": 9.080328709387686e-06}, {"id": 460, "seek": 276752, "start": 2767.52, "end": 2774.2, "text": " thing that maybe is something a valid username. And so you could write tests that say it returns", "tokens": [50364, 551, 300, 1310, 307, 746, 257, 7363, 30351, 13, 400, 370, 291, 727, 2464, 6921, 300, 584, 309, 11247, 50698, 50698, 1825, 498, 286, 1320, 6707, 6798, 293, 309, 11247, 257, 445, 30351, 2158, 11, 411, 257, 2375, 2010, 51124, 51124, 300, 25019, 300, 309, 311, 257, 7363, 30351, 498, 286, 1320, 309, 341, 661, 2158, 13, 407, 300, 307, 746, 51429, 51429, 291, 393, 1500, 13, 400, 300, 311, 294, 257, 636, 291, 434, 32666, 264, 2010, 1185, 11, 457, 291, 434, 8295, 428, 1500, 51708, 51708], "temperature": 0.0, "avg_logprob": -0.12315957811143663, "compression_ratio": 1.8374384236453203, "no_caption_prob": 4.006210292573087e-05}, {"id": 461, "seek": 276752, "start": 2774.2, "end": 2782.72, "text": " nothing if I pass empty string and it returns a just username value, like a custom type", "tokens": [50364, 551, 300, 1310, 307, 746, 257, 7363, 30351, 13, 400, 370, 291, 727, 2464, 6921, 300, 584, 309, 11247, 50698, 50698, 1825, 498, 286, 1320, 6707, 6798, 293, 309, 11247, 257, 445, 30351, 2158, 11, 411, 257, 2375, 2010, 51124, 51124, 300, 25019, 300, 309, 311, 257, 7363, 30351, 498, 286, 1320, 309, 341, 661, 2158, 13, 407, 300, 307, 746, 51429, 51429, 291, 393, 1500, 13, 400, 300, 311, 294, 257, 636, 291, 434, 32666, 264, 2010, 1185, 11, 457, 291, 434, 8295, 428, 1500, 51708, 51708], "temperature": 0.0, "avg_logprob": -0.12315957811143663, "compression_ratio": 1.8374384236453203, "no_caption_prob": 4.006210292573087e-05}, {"id": 462, "seek": 276752, "start": 2782.72, "end": 2788.82, "text": " that proves that it's a valid username if I pass it this other value. So that is something", "tokens": [50364, 551, 300, 1310, 307, 746, 257, 7363, 30351, 13, 400, 370, 291, 727, 2464, 6921, 300, 584, 309, 11247, 50698, 50698, 1825, 498, 286, 1320, 6707, 6798, 293, 309, 11247, 257, 445, 30351, 2158, 11, 411, 257, 2375, 2010, 51124, 51124, 300, 25019, 300, 309, 311, 257, 7363, 30351, 498, 286, 1320, 309, 341, 661, 2158, 13, 407, 300, 307, 746, 51429, 51429, 291, 393, 1500, 13, 400, 300, 311, 294, 257, 636, 291, 434, 32666, 264, 2010, 1185, 11, 457, 291, 434, 8295, 428, 1500, 51708, 51708], "temperature": 0.0, "avg_logprob": -0.12315957811143663, "compression_ratio": 1.8374384236453203, "no_caption_prob": 4.006210292573087e-05}, {"id": 463, "seek": 276752, "start": 2788.82, "end": 2794.4, "text": " you can test. And that's in a way you're leveraging the type system, but you're letting your test", "tokens": [50364, 551, 300, 1310, 307, 746, 257, 7363, 30351, 13, 400, 370, 291, 727, 2464, 6921, 300, 584, 309, 11247, 50698, 50698, 1825, 498, 286, 1320, 6707, 6798, 293, 309, 11247, 257, 445, 30351, 2158, 11, 411, 257, 2375, 2010, 51124, 51124, 300, 25019, 300, 309, 311, 257, 7363, 30351, 498, 286, 1320, 309, 341, 661, 2158, 13, 407, 300, 307, 746, 51429, 51429, 291, 393, 1500, 13, 400, 300, 311, 294, 257, 636, 291, 434, 32666, 264, 2010, 1185, 11, 457, 291, 434, 8295, 428, 1500, 51708, 51708], "temperature": 0.0, "avg_logprob": -0.12315957811143663, "compression_ratio": 1.8374384236453203, "no_caption_prob": 4.006210292573087e-05}, {"id": 464, "seek": 279440, "start": 2794.4, "end": 2800.32, "text": " suite give it the stamp of approval that this type does indeed represent a valid check.", "tokens": [50364, 14205, 976, 309, 264, 9921, 295, 13317, 300, 341, 2010, 775, 6451, 2906, 257, 7363, 1520, 13, 50660, 50660, 509, 727, 754, 360, 283, 16740, 4997, 322, 300, 11, 558, 30, 50752, 50752, 865, 13, 50802, 50802, 759, 291, 434, 787, 8437, 20411, 4190, 281, 300, 11, 291, 727, 611, 764, 2699, 76, 3131, 281, 854, 291, 50997, 50997, 365, 300, 13, 51047, 51047, 865, 13, 1436, 291, 458, 11, 1128, 294, 264, 3089, 3096, 286, 764, 257, 5754, 300, 307, 264, 6707, 6798, 13, 51356, 51356, 8266, 16478, 13, 286, 914, 11, 6284, 613, 366, 439, 445, 30206, 7150, 11, 291, 458, 11, 1968, 309, 311, 51654, 51654], "temperature": 0.0, "avg_logprob": -0.13691357449368313, "compression_ratio": 1.5827067669172932, "no_caption_prob": 1.4738841855432838e-05}, {"id": 465, "seek": 279440, "start": 2800.32, "end": 2802.1600000000003, "text": " You could even do fuzz testing on that, right?", "tokens": [50364, 14205, 976, 309, 264, 9921, 295, 13317, 300, 341, 2010, 775, 6451, 2906, 257, 7363, 1520, 13, 50660, 50660, 509, 727, 754, 360, 283, 16740, 4997, 322, 300, 11, 558, 30, 50752, 50752, 865, 13, 50802, 50802, 759, 291, 434, 787, 8437, 20411, 4190, 281, 300, 11, 291, 727, 611, 764, 2699, 76, 3131, 281, 854, 291, 50997, 50997, 365, 300, 13, 51047, 51047, 865, 13, 1436, 291, 458, 11, 1128, 294, 264, 3089, 3096, 286, 764, 257, 5754, 300, 307, 264, 6707, 6798, 13, 51356, 51356, 8266, 16478, 13, 286, 914, 11, 6284, 613, 366, 439, 445, 30206, 7150, 11, 291, 458, 11, 1968, 309, 311, 51654, 51654], "temperature": 0.0, "avg_logprob": -0.13691357449368313, "compression_ratio": 1.5827067669172932, "no_caption_prob": 1.4738841855432838e-05}, {"id": 466, "seek": 279440, "start": 2802.1600000000003, "end": 2803.1600000000003, "text": " Yeah.", "tokens": [50364, 14205, 976, 309, 264, 9921, 295, 13317, 300, 341, 2010, 775, 6451, 2906, 257, 7363, 1520, 13, 50660, 50660, 509, 727, 754, 360, 283, 16740, 4997, 322, 300, 11, 558, 30, 50752, 50752, 865, 13, 50802, 50802, 759, 291, 434, 787, 8437, 20411, 4190, 281, 300, 11, 291, 727, 611, 764, 2699, 76, 3131, 281, 854, 291, 50997, 50997, 365, 300, 13, 51047, 51047, 865, 13, 1436, 291, 458, 11, 1128, 294, 264, 3089, 3096, 286, 764, 257, 5754, 300, 307, 264, 6707, 6798, 13, 51356, 51356, 8266, 16478, 13, 286, 914, 11, 6284, 613, 366, 439, 445, 30206, 7150, 11, 291, 458, 11, 1968, 309, 311, 51654, 51654], "temperature": 0.0, "avg_logprob": -0.13691357449368313, "compression_ratio": 1.5827067669172932, "no_caption_prob": 1.4738841855432838e-05}, {"id": 467, "seek": 279440, "start": 2803.1600000000003, "end": 2807.06, "text": " If you're only passing literal values to that, you could also use Elm review to help you", "tokens": [50364, 14205, 976, 309, 264, 9921, 295, 13317, 300, 341, 2010, 775, 6451, 2906, 257, 7363, 1520, 13, 50660, 50660, 509, 727, 754, 360, 283, 16740, 4997, 322, 300, 11, 558, 30, 50752, 50752, 865, 13, 50802, 50802, 759, 291, 434, 787, 8437, 20411, 4190, 281, 300, 11, 291, 727, 611, 764, 2699, 76, 3131, 281, 854, 291, 50997, 50997, 365, 300, 13, 51047, 51047, 865, 13, 1436, 291, 458, 11, 1128, 294, 264, 3089, 3096, 286, 764, 257, 5754, 300, 307, 264, 6707, 6798, 13, 51356, 51356, 8266, 16478, 13, 286, 914, 11, 6284, 613, 366, 439, 445, 30206, 7150, 11, 291, 458, 11, 1968, 309, 311, 51654, 51654], "temperature": 0.0, "avg_logprob": -0.13691357449368313, "compression_ratio": 1.5827067669172932, "no_caption_prob": 1.4738841855432838e-05}, {"id": 468, "seek": 279440, "start": 2807.06, "end": 2808.06, "text": " with that.", "tokens": [50364, 14205, 976, 309, 264, 9921, 295, 13317, 300, 341, 2010, 775, 6451, 2906, 257, 7363, 1520, 13, 50660, 50660, 509, 727, 754, 360, 283, 16740, 4997, 322, 300, 11, 558, 30, 50752, 50752, 865, 13, 50802, 50802, 759, 291, 434, 787, 8437, 20411, 4190, 281, 300, 11, 291, 727, 611, 764, 2699, 76, 3131, 281, 854, 291, 50997, 50997, 365, 300, 13, 51047, 51047, 865, 13, 1436, 291, 458, 11, 1128, 294, 264, 3089, 3096, 286, 764, 257, 5754, 300, 307, 264, 6707, 6798, 13, 51356, 51356, 8266, 16478, 13, 286, 914, 11, 6284, 613, 366, 439, 445, 30206, 7150, 11, 291, 458, 11, 1968, 309, 311, 51654, 51654], "temperature": 0.0, "avg_logprob": -0.13691357449368313, "compression_ratio": 1.5827067669172932, "no_caption_prob": 1.4738841855432838e-05}, {"id": 469, "seek": 279440, "start": 2808.06, "end": 2814.2400000000002, "text": " Yeah. Because you know, never in the code base I use a constant that is the empty string.", "tokens": [50364, 14205, 976, 309, 264, 9921, 295, 13317, 300, 341, 2010, 775, 6451, 2906, 257, 7363, 1520, 13, 50660, 50660, 509, 727, 754, 360, 283, 16740, 4997, 322, 300, 11, 558, 30, 50752, 50752, 865, 13, 50802, 50802, 759, 291, 434, 787, 8437, 20411, 4190, 281, 300, 11, 291, 727, 611, 764, 2699, 76, 3131, 281, 854, 291, 50997, 50997, 365, 300, 13, 51047, 51047, 865, 13, 1436, 291, 458, 11, 1128, 294, 264, 3089, 3096, 286, 764, 257, 5754, 300, 307, 264, 6707, 6798, 13, 51356, 51356, 8266, 16478, 13, 286, 914, 11, 6284, 613, 366, 439, 445, 30206, 7150, 11, 291, 458, 11, 1968, 309, 311, 51654, 51654], "temperature": 0.0, "avg_logprob": -0.13691357449368313, "compression_ratio": 1.5827067669172932, "no_caption_prob": 1.4738841855432838e-05}, {"id": 470, "seek": 279440, "start": 2814.2400000000002, "end": 2820.2000000000003, "text": " Mm hmm. I mean, ultimately these are all just verification methods, you know, whether it's", "tokens": [50364, 14205, 976, 309, 264, 9921, 295, 13317, 300, 341, 2010, 775, 6451, 2906, 257, 7363, 1520, 13, 50660, 50660, 509, 727, 754, 360, 283, 16740, 4997, 322, 300, 11, 558, 30, 50752, 50752, 865, 13, 50802, 50802, 759, 291, 434, 787, 8437, 20411, 4190, 281, 300, 11, 291, 727, 611, 764, 2699, 76, 3131, 281, 854, 291, 50997, 50997, 365, 300, 13, 51047, 51047, 865, 13, 1436, 291, 458, 11, 1128, 294, 264, 3089, 3096, 286, 764, 257, 5754, 300, 307, 264, 6707, 6798, 13, 51356, 51356, 8266, 16478, 13, 286, 914, 11, 6284, 613, 366, 439, 445, 30206, 7150, 11, 291, 458, 11, 1968, 309, 311, 51654, 51654], "temperature": 0.0, "avg_logprob": -0.13691357449368313, "compression_ratio": 1.5827067669172932, "no_caption_prob": 1.4738841855432838e-05}, {"id": 471, "seek": 282020, "start": 2820.2, "end": 2825.16, "text": " static code analysis, which is, you know, essentially Elm reviews a static code analysis", "tokens": [50364, 13437, 3089, 5215, 11, 597, 307, 11, 291, 458, 11, 4476, 2699, 76, 10229, 257, 13437, 3089, 5215, 50612, 50612, 2290, 13, 50662, 50662, 12151, 13, 50712, 50712, 467, 727, 312, 11, 291, 458, 11, 257, 31958, 11, 291, 458, 11, 3467, 13, 467, 727, 312, 257, 4985, 1500, 420, 364, 8446, 51076, 51076, 1500, 13, 814, 434, 439, 445, 3873, 412, 527, 26400, 281, 16888, 527, 3089, 13, 51238, 51238, 865, 13, 407, 437, 576, 286, 764, 6921, 337, 5911, 30, 467, 311, 2673, 1606, 9952, 13, 407, 721, 300, 51650, 51650], "temperature": 0.0, "avg_logprob": -0.13246189920525803, "compression_ratio": 1.6325581395348838, "no_caption_prob": 7.527896286774194e-06}, {"id": 472, "seek": 282020, "start": 2825.16, "end": 2826.16, "text": " tool.", "tokens": [50364, 13437, 3089, 5215, 11, 597, 307, 11, 291, 458, 11, 4476, 2699, 76, 10229, 257, 13437, 3089, 5215, 50612, 50612, 2290, 13, 50662, 50662, 12151, 13, 50712, 50712, 467, 727, 312, 11, 291, 458, 11, 257, 31958, 11, 291, 458, 11, 3467, 13, 467, 727, 312, 257, 4985, 1500, 420, 364, 8446, 51076, 51076, 1500, 13, 814, 434, 439, 445, 3873, 412, 527, 26400, 281, 16888, 527, 3089, 13, 51238, 51238, 865, 13, 407, 437, 576, 286, 764, 6921, 337, 5911, 30, 467, 311, 2673, 1606, 9952, 13, 407, 721, 300, 51650, 51650], "temperature": 0.0, "avg_logprob": -0.13246189920525803, "compression_ratio": 1.6325581395348838, "no_caption_prob": 7.527896286774194e-06}, {"id": 473, "seek": 282020, "start": 2826.16, "end": 2827.16, "text": " Definitely.", "tokens": [50364, 13437, 3089, 5215, 11, 597, 307, 11, 291, 458, 11, 4476, 2699, 76, 10229, 257, 13437, 3089, 5215, 50612, 50612, 2290, 13, 50662, 50662, 12151, 13, 50712, 50712, 467, 727, 312, 11, 291, 458, 11, 257, 31958, 11, 291, 458, 11, 3467, 13, 467, 727, 312, 257, 4985, 1500, 420, 364, 8446, 51076, 51076, 1500, 13, 814, 434, 439, 445, 3873, 412, 527, 26400, 281, 16888, 527, 3089, 13, 51238, 51238, 865, 13, 407, 437, 576, 286, 764, 6921, 337, 5911, 30, 467, 311, 2673, 1606, 9952, 13, 407, 721, 300, 51650, 51650], "temperature": 0.0, "avg_logprob": -0.13246189920525803, "compression_ratio": 1.6325581395348838, "no_caption_prob": 7.527896286774194e-06}, {"id": 474, "seek": 282020, "start": 2827.16, "end": 2834.4399999999996, "text": " It could be, you know, a compiler, you know, types. It could be a unit test or an intent", "tokens": [50364, 13437, 3089, 5215, 11, 597, 307, 11, 291, 458, 11, 4476, 2699, 76, 10229, 257, 13437, 3089, 5215, 50612, 50612, 2290, 13, 50662, 50662, 12151, 13, 50712, 50712, 467, 727, 312, 11, 291, 458, 11, 257, 31958, 11, 291, 458, 11, 3467, 13, 467, 727, 312, 257, 4985, 1500, 420, 364, 8446, 51076, 51076, 1500, 13, 814, 434, 439, 445, 3873, 412, 527, 26400, 281, 16888, 527, 3089, 13, 51238, 51238, 865, 13, 407, 437, 576, 286, 764, 6921, 337, 5911, 30, 467, 311, 2673, 1606, 9952, 13, 407, 721, 300, 51650, 51650], "temperature": 0.0, "avg_logprob": -0.13246189920525803, "compression_ratio": 1.6325581395348838, "no_caption_prob": 7.527896286774194e-06}, {"id": 475, "seek": 282020, "start": 2834.4399999999996, "end": 2837.68, "text": " test. They're all just tools at our disposal to verify our code.", "tokens": [50364, 13437, 3089, 5215, 11, 597, 307, 11, 291, 458, 11, 4476, 2699, 76, 10229, 257, 13437, 3089, 5215, 50612, 50612, 2290, 13, 50662, 50662, 12151, 13, 50712, 50712, 467, 727, 312, 11, 291, 458, 11, 257, 31958, 11, 291, 458, 11, 3467, 13, 467, 727, 312, 257, 4985, 1500, 420, 364, 8446, 51076, 51076, 1500, 13, 814, 434, 439, 445, 3873, 412, 527, 26400, 281, 16888, 527, 3089, 13, 51238, 51238, 865, 13, 407, 437, 576, 286, 764, 6921, 337, 5911, 30, 467, 311, 2673, 1606, 9952, 13, 407, 721, 300, 51650, 51650], "temperature": 0.0, "avg_logprob": -0.13246189920525803, "compression_ratio": 1.6325581395348838, "no_caption_prob": 7.527896286774194e-06}, {"id": 476, "seek": 282020, "start": 2837.68, "end": 2845.9199999999996, "text": " Yeah. So what would I use tests for otherwise? It's usually business logic. So things that", "tokens": [50364, 13437, 3089, 5215, 11, 597, 307, 11, 291, 458, 11, 4476, 2699, 76, 10229, 257, 13437, 3089, 5215, 50612, 50612, 2290, 13, 50662, 50662, 12151, 13, 50712, 50712, 467, 727, 312, 11, 291, 458, 11, 257, 31958, 11, 291, 458, 11, 3467, 13, 467, 727, 312, 257, 4985, 1500, 420, 364, 8446, 51076, 51076, 1500, 13, 814, 434, 439, 445, 3873, 412, 527, 26400, 281, 16888, 527, 3089, 13, 51238, 51238, 865, 13, 407, 437, 576, 286, 764, 6921, 337, 5911, 30, 467, 311, 2673, 1606, 9952, 13, 407, 721, 300, 51650, 51650], "temperature": 0.0, "avg_logprob": -0.13246189920525803, "compression_ratio": 1.6325581395348838, "no_caption_prob": 7.527896286774194e-06}, {"id": 477, "seek": 284592, "start": 2845.92, "end": 2853.48, "text": " I can't represent with types. So if I try to have a function that says if the value", "tokens": [50364, 286, 393, 380, 2906, 365, 3467, 13, 407, 498, 286, 853, 281, 362, 257, 2445, 300, 1619, 498, 264, 2158, 50742, 50742, 307, 1783, 11, 550, 360, 341, 13, 400, 498, 286, 362, 746, 1646, 11, 976, 385, 746, 1646, 300, 307, 746, 51094, 51094, 300, 486, 1009, 312, 7363, 2010, 10829, 13, 400, 300, 311, 689, 286, 576, 2464, 294, 257, 4985, 1500, 281, 652, 51474, 51474, 988, 300, 294, 264, 700, 1389, 291, 1009, 483, 1783, 13, 682, 264, 661, 3331, 291, 1009, 483, 746, 51710, 51710, 1646, 13, 51800, 51800], "temperature": 0.0, "avg_logprob": -0.14094483224969162, "compression_ratio": 1.7609756097560976, "no_caption_prob": 1.4509309039567597e-05}, {"id": 478, "seek": 284592, "start": 2853.48, "end": 2860.52, "text": " is X, then do this. And if I have something else, give me something else that is something", "tokens": [50364, 286, 393, 380, 2906, 365, 3467, 13, 407, 498, 286, 853, 281, 362, 257, 2445, 300, 1619, 498, 264, 2158, 50742, 50742, 307, 1783, 11, 550, 360, 341, 13, 400, 498, 286, 362, 746, 1646, 11, 976, 385, 746, 1646, 300, 307, 746, 51094, 51094, 300, 486, 1009, 312, 7363, 2010, 10829, 13, 400, 300, 311, 689, 286, 576, 2464, 294, 257, 4985, 1500, 281, 652, 51474, 51474, 988, 300, 294, 264, 700, 1389, 291, 1009, 483, 1783, 13, 682, 264, 661, 3331, 291, 1009, 483, 746, 51710, 51710, 1646, 13, 51800, 51800], "temperature": 0.0, "avg_logprob": -0.14094483224969162, "compression_ratio": 1.7609756097560976, "no_caption_prob": 1.4509309039567597e-05}, {"id": 479, "seek": 284592, "start": 2860.52, "end": 2868.12, "text": " that will always be valid type wise. And that's where I would write in a unit test to make", "tokens": [50364, 286, 393, 380, 2906, 365, 3467, 13, 407, 498, 286, 853, 281, 362, 257, 2445, 300, 1619, 498, 264, 2158, 50742, 50742, 307, 1783, 11, 550, 360, 341, 13, 400, 498, 286, 362, 746, 1646, 11, 976, 385, 746, 1646, 300, 307, 746, 51094, 51094, 300, 486, 1009, 312, 7363, 2010, 10829, 13, 400, 300, 311, 689, 286, 576, 2464, 294, 257, 4985, 1500, 281, 652, 51474, 51474, 988, 300, 294, 264, 700, 1389, 291, 1009, 483, 1783, 13, 682, 264, 661, 3331, 291, 1009, 483, 746, 51710, 51710, 1646, 13, 51800, 51800], "temperature": 0.0, "avg_logprob": -0.14094483224969162, "compression_ratio": 1.7609756097560976, "no_caption_prob": 1.4509309039567597e-05}, {"id": 480, "seek": 284592, "start": 2868.12, "end": 2872.84, "text": " sure that in the first case you always get X. In the other cases you always get something", "tokens": [50364, 286, 393, 380, 2906, 365, 3467, 13, 407, 498, 286, 853, 281, 362, 257, 2445, 300, 1619, 498, 264, 2158, 50742, 50742, 307, 1783, 11, 550, 360, 341, 13, 400, 498, 286, 362, 746, 1646, 11, 976, 385, 746, 1646, 300, 307, 746, 51094, 51094, 300, 486, 1009, 312, 7363, 2010, 10829, 13, 400, 300, 311, 689, 286, 576, 2464, 294, 257, 4985, 1500, 281, 652, 51474, 51474, 988, 300, 294, 264, 700, 1389, 291, 1009, 483, 1783, 13, 682, 264, 661, 3331, 291, 1009, 483, 746, 51710, 51710, 1646, 13, 51800, 51800], "temperature": 0.0, "avg_logprob": -0.14094483224969162, "compression_ratio": 1.7609756097560976, "no_caption_prob": 1.4509309039567597e-05}, {"id": 481, "seek": 284592, "start": 2872.84, "end": 2874.64, "text": " else.", "tokens": [50364, 286, 393, 380, 2906, 365, 3467, 13, 407, 498, 286, 853, 281, 362, 257, 2445, 300, 1619, 498, 264, 2158, 50742, 50742, 307, 1783, 11, 550, 360, 341, 13, 400, 498, 286, 362, 746, 1646, 11, 976, 385, 746, 1646, 300, 307, 746, 51094, 51094, 300, 486, 1009, 312, 7363, 2010, 10829, 13, 400, 300, 311, 689, 286, 576, 2464, 294, 257, 4985, 1500, 281, 652, 51474, 51474, 988, 300, 294, 264, 700, 1389, 291, 1009, 483, 1783, 13, 682, 264, 661, 3331, 291, 1009, 483, 746, 51710, 51710, 1646, 13, 51800, 51800], "temperature": 0.0, "avg_logprob": -0.14094483224969162, "compression_ratio": 1.7609756097560976, "no_caption_prob": 1.4509309039567597e-05}, {"id": 482, "seek": 287464, "start": 2874.64, "end": 2880.3599999999997, "text": " You don't have to test the wiring like you do in JavaScript or maybe in Ruby. I don't", "tokens": [50364, 509, 500, 380, 362, 281, 1500, 264, 27520, 411, 291, 360, 294, 15778, 420, 1310, 294, 19907, 13, 286, 500, 380, 50650, 50650, 458, 19907, 300, 709, 13, 407, 456, 311, 257, 688, 1570, 6921, 300, 291, 362, 281, 2464, 13, 50910, 50910, 1779, 13, 7587, 13, 865, 13, 821, 366, 257, 688, 295, 6921, 294, 19907, 466, 11, 286, 914, 11, 411, 257, 688, 295, 11, 257, 688, 51182, 51182, 295, 9362, 311, 294, 19907, 13, 467, 311, 411, 498, 291, 1320, 294, 257, 6798, 11, 550, 291, 818, 309, 411, 341, 13, 759, 291, 51488, 51488, 1320, 294, 257, 1329, 295, 13985, 11, 550, 291, 818, 309, 411, 341, 13, 759, 291, 1320, 294, 257, 319, 432, 87, 11, 550, 309, 311, 51726, 51726], "temperature": 0.0, "avg_logprob": -0.15600529313087463, "compression_ratio": 1.9017857142857142, "no_caption_prob": 1.7778373148757964e-05}, {"id": 483, "seek": 287464, "start": 2880.3599999999997, "end": 2885.56, "text": " know Ruby that much. So there's a lot less tests that you have to write.", "tokens": [50364, 509, 500, 380, 362, 281, 1500, 264, 27520, 411, 291, 360, 294, 15778, 420, 1310, 294, 19907, 13, 286, 500, 380, 50650, 50650, 458, 19907, 300, 709, 13, 407, 456, 311, 257, 688, 1570, 6921, 300, 291, 362, 281, 2464, 13, 50910, 50910, 1779, 13, 7587, 13, 865, 13, 821, 366, 257, 688, 295, 6921, 294, 19907, 466, 11, 286, 914, 11, 411, 257, 688, 295, 11, 257, 688, 51182, 51182, 295, 9362, 311, 294, 19907, 13, 467, 311, 411, 498, 291, 1320, 294, 257, 6798, 11, 550, 291, 818, 309, 411, 341, 13, 759, 291, 51488, 51488, 1320, 294, 257, 1329, 295, 13985, 11, 550, 291, 818, 309, 411, 341, 13, 759, 291, 1320, 294, 257, 319, 432, 87, 11, 550, 309, 311, 51726, 51726], "temperature": 0.0, "avg_logprob": -0.15600529313087463, "compression_ratio": 1.9017857142857142, "no_caption_prob": 1.7778373148757964e-05}, {"id": 484, "seek": 287464, "start": 2885.56, "end": 2891.0, "text": " Right. Exactly. Yeah. There are a lot of tests in Ruby about, I mean, like a lot of, a lot", "tokens": [50364, 509, 500, 380, 362, 281, 1500, 264, 27520, 411, 291, 360, 294, 15778, 420, 1310, 294, 19907, 13, 286, 500, 380, 50650, 50650, 458, 19907, 300, 709, 13, 407, 456, 311, 257, 688, 1570, 6921, 300, 291, 362, 281, 2464, 13, 50910, 50910, 1779, 13, 7587, 13, 865, 13, 821, 366, 257, 688, 295, 6921, 294, 19907, 466, 11, 286, 914, 11, 411, 257, 688, 295, 11, 257, 688, 51182, 51182, 295, 9362, 311, 294, 19907, 13, 467, 311, 411, 498, 291, 1320, 294, 257, 6798, 11, 550, 291, 818, 309, 411, 341, 13, 759, 291, 51488, 51488, 1320, 294, 257, 1329, 295, 13985, 11, 550, 291, 818, 309, 411, 341, 13, 759, 291, 1320, 294, 257, 319, 432, 87, 11, 550, 309, 311, 51726, 51726], "temperature": 0.0, "avg_logprob": -0.15600529313087463, "compression_ratio": 1.9017857142857142, "no_caption_prob": 1.7778373148757964e-05}, {"id": 485, "seek": 287464, "start": 2891.0, "end": 2897.12, "text": " of API's in Ruby. It's like if you pass in a string, then you call it like this. If you", "tokens": [50364, 509, 500, 380, 362, 281, 1500, 264, 27520, 411, 291, 360, 294, 15778, 420, 1310, 294, 19907, 13, 286, 500, 380, 50650, 50650, 458, 19907, 300, 709, 13, 407, 456, 311, 257, 688, 1570, 6921, 300, 291, 362, 281, 2464, 13, 50910, 50910, 1779, 13, 7587, 13, 865, 13, 821, 366, 257, 688, 295, 6921, 294, 19907, 466, 11, 286, 914, 11, 411, 257, 688, 295, 11, 257, 688, 51182, 51182, 295, 9362, 311, 294, 19907, 13, 467, 311, 411, 498, 291, 1320, 294, 257, 6798, 11, 550, 291, 818, 309, 411, 341, 13, 759, 291, 51488, 51488, 1320, 294, 257, 1329, 295, 13985, 11, 550, 291, 818, 309, 411, 341, 13, 759, 291, 1320, 294, 257, 319, 432, 87, 11, 550, 309, 311, 51726, 51726], "temperature": 0.0, "avg_logprob": -0.15600529313087463, "compression_ratio": 1.9017857142857142, "no_caption_prob": 1.7778373148757964e-05}, {"id": 486, "seek": 287464, "start": 2897.12, "end": 2901.8799999999997, "text": " pass in a list of strings, then you call it like this. If you pass in a regex, then it's", "tokens": [50364, 509, 500, 380, 362, 281, 1500, 264, 27520, 411, 291, 360, 294, 15778, 420, 1310, 294, 19907, 13, 286, 500, 380, 50650, 50650, 458, 19907, 300, 709, 13, 407, 456, 311, 257, 688, 1570, 6921, 300, 291, 362, 281, 2464, 13, 50910, 50910, 1779, 13, 7587, 13, 865, 13, 821, 366, 257, 688, 295, 6921, 294, 19907, 466, 11, 286, 914, 11, 411, 257, 688, 295, 11, 257, 688, 51182, 51182, 295, 9362, 311, 294, 19907, 13, 467, 311, 411, 498, 291, 1320, 294, 257, 6798, 11, 550, 291, 818, 309, 411, 341, 13, 759, 291, 51488, 51488, 1320, 294, 257, 1329, 295, 13985, 11, 550, 291, 818, 309, 411, 341, 13, 759, 291, 1320, 294, 257, 319, 432, 87, 11, 550, 309, 311, 51726, 51726], "temperature": 0.0, "avg_logprob": -0.15600529313087463, "compression_ratio": 1.9017857142857142, "no_caption_prob": 1.7778373148757964e-05}, {"id": 487, "seek": 290188, "start": 2901.88, "end": 2909.76, "text": " going to run it like this. If you pass in a hash and it has a key called this, then", "tokens": [50364, 516, 281, 1190, 309, 411, 341, 13, 759, 291, 1320, 294, 257, 22019, 293, 309, 575, 257, 2141, 1219, 341, 11, 550, 50758, 50758, 309, 311, 516, 281, 1190, 309, 411, 341, 13, 400, 411, 11, 293, 295, 1164, 291, 362, 281, 1520, 337, 297, 388, 13, 400, 50958, 50958, 498, 341, 551, 307, 297, 388, 11, 550, 309, 311, 516, 281, 7302, 309, 382, 341, 420, 382, 300, 13, 400, 309, 311, 370, 709, 18587, 51248, 51248, 294, 2699, 76, 445, 1419, 11, 1419, 264, 6687, 300, 729, 721, 366, 516, 281, 312, 27415, 493, 51466, 51466, 8944, 1293, 337, 264, 48324, 293, 291, 458, 11, 428, 11, 428, 1500, 3331, 366, 27272, 439, 264, 51783, 51783], "temperature": 0.0, "avg_logprob": -0.09657352765401205, "compression_ratio": 1.8535564853556485, "no_caption_prob": 5.475813304656185e-05}, {"id": 488, "seek": 290188, "start": 2909.76, "end": 2913.76, "text": " it's going to run it like this. And like, and of course you have to check for nil. And", "tokens": [50364, 516, 281, 1190, 309, 411, 341, 13, 759, 291, 1320, 294, 257, 22019, 293, 309, 575, 257, 2141, 1219, 341, 11, 550, 50758, 50758, 309, 311, 516, 281, 1190, 309, 411, 341, 13, 400, 411, 11, 293, 295, 1164, 291, 362, 281, 1520, 337, 297, 388, 13, 400, 50958, 50958, 498, 341, 551, 307, 297, 388, 11, 550, 309, 311, 516, 281, 7302, 309, 382, 341, 420, 382, 300, 13, 400, 309, 311, 370, 709, 18587, 51248, 51248, 294, 2699, 76, 445, 1419, 11, 1419, 264, 6687, 300, 729, 721, 366, 516, 281, 312, 27415, 493, 51466, 51466, 8944, 1293, 337, 264, 48324, 293, 291, 458, 11, 428, 11, 428, 1500, 3331, 366, 27272, 439, 264, 51783, 51783], "temperature": 0.0, "avg_logprob": -0.09657352765401205, "compression_ratio": 1.8535564853556485, "no_caption_prob": 5.475813304656185e-05}, {"id": 489, "seek": 290188, "start": 2913.76, "end": 2919.56, "text": " if this thing is nil, then it's going to interpret it as this or as that. And it's so much simpler", "tokens": [50364, 516, 281, 1190, 309, 411, 341, 13, 759, 291, 1320, 294, 257, 22019, 293, 309, 575, 257, 2141, 1219, 341, 11, 550, 50758, 50758, 309, 311, 516, 281, 1190, 309, 411, 341, 13, 400, 411, 11, 293, 295, 1164, 291, 362, 281, 1520, 337, 297, 388, 13, 400, 50958, 50958, 498, 341, 551, 307, 297, 388, 11, 550, 309, 311, 516, 281, 7302, 309, 382, 341, 420, 382, 300, 13, 400, 309, 311, 370, 709, 18587, 51248, 51248, 294, 2699, 76, 445, 1419, 11, 1419, 264, 6687, 300, 729, 721, 366, 516, 281, 312, 27415, 493, 51466, 51466, 8944, 1293, 337, 264, 48324, 293, 291, 458, 11, 428, 11, 428, 1500, 3331, 366, 27272, 439, 264, 51783, 51783], "temperature": 0.0, "avg_logprob": -0.09657352765401205, "compression_ratio": 1.8535564853556485, "no_caption_prob": 5.475813304656185e-05}, {"id": 490, "seek": 290188, "start": 2919.56, "end": 2923.92, "text": " in Elm just having, having the confidence that those things are going to be wired up", "tokens": [50364, 516, 281, 1190, 309, 411, 341, 13, 759, 291, 1320, 294, 257, 22019, 293, 309, 575, 257, 2141, 1219, 341, 11, 550, 50758, 50758, 309, 311, 516, 281, 1190, 309, 411, 341, 13, 400, 411, 11, 293, 295, 1164, 291, 362, 281, 1520, 337, 297, 388, 13, 400, 50958, 50958, 498, 341, 551, 307, 297, 388, 11, 550, 309, 311, 516, 281, 7302, 309, 382, 341, 420, 382, 300, 13, 400, 309, 311, 370, 709, 18587, 51248, 51248, 294, 2699, 76, 445, 1419, 11, 1419, 264, 6687, 300, 729, 721, 366, 516, 281, 312, 27415, 493, 51466, 51466, 8944, 1293, 337, 264, 48324, 293, 291, 458, 11, 428, 11, 428, 1500, 3331, 366, 27272, 439, 264, 51783, 51783], "temperature": 0.0, "avg_logprob": -0.09657352765401205, "compression_ratio": 1.8535564853556485, "no_caption_prob": 5.475813304656185e-05}, {"id": 491, "seek": 290188, "start": 2923.92, "end": 2930.26, "text": " correctly both for the caller and you know, your, your test cases are exercising all the", "tokens": [50364, 516, 281, 1190, 309, 411, 341, 13, 759, 291, 1320, 294, 257, 22019, 293, 309, 575, 257, 2141, 1219, 341, 11, 550, 50758, 50758, 309, 311, 516, 281, 1190, 309, 411, 341, 13, 400, 411, 11, 293, 295, 1164, 291, 362, 281, 1520, 337, 297, 388, 13, 400, 50958, 50958, 498, 341, 551, 307, 297, 388, 11, 550, 309, 311, 516, 281, 7302, 309, 382, 341, 420, 382, 300, 13, 400, 309, 311, 370, 709, 18587, 51248, 51248, 294, 2699, 76, 445, 1419, 11, 1419, 264, 6687, 300, 729, 721, 366, 516, 281, 312, 27415, 493, 51466, 51466, 8944, 1293, 337, 264, 48324, 293, 291, 458, 11, 428, 11, 428, 1500, 3331, 366, 27272, 439, 264, 51783, 51783], "temperature": 0.0, "avg_logprob": -0.09657352765401205, "compression_ratio": 1.8535564853556485, "no_caption_prob": 5.475813304656185e-05}, {"id": 492, "seek": 293026, "start": 2930.26, "end": 2935.88, "text": " different paths. And you also just have the simplicity that you can't overload functions", "tokens": [50364, 819, 14518, 13, 400, 291, 611, 445, 362, 264, 25632, 300, 291, 393, 380, 28777, 6828, 50645, 50645, 411, 294, 661, 8650, 13, 400, 294, 512, 3331, 1310, 309, 576, 312, 10851, 11, 457, 309, 534, 11, 50887, 50887, 309, 311, 11, 309, 311, 257, 11, 309, 311, 257, 588, 1481, 3125, 295, 2699, 76, 300, 5965, 721, 588, 1858, 281, 519, 466, 51121, 51121, 293, 1500, 13, 51171, 51171, 865, 13, 682, 264, 4997, 25950, 11, 286, 576, 767, 829, 264, 2699, 76, 31958, 412, 264, 11, 412, 264, 3096, 295, 51499, 51499, 309, 13, 1079, 13, 1743, 257, 4230, 420, 746, 13, 51693, 51693], "temperature": 0.0, "avg_logprob": -0.15379986939606843, "compression_ratio": 1.6104417670682731, "no_caption_prob": 1.7231293895747513e-05}, {"id": 493, "seek": 293026, "start": 2935.88, "end": 2940.7200000000003, "text": " like in other languages. And in some cases maybe it would be convenient, but it really,", "tokens": [50364, 819, 14518, 13, 400, 291, 611, 445, 362, 264, 25632, 300, 291, 393, 380, 28777, 6828, 50645, 50645, 411, 294, 661, 8650, 13, 400, 294, 512, 3331, 1310, 309, 576, 312, 10851, 11, 457, 309, 534, 11, 50887, 50887, 309, 311, 11, 309, 311, 257, 11, 309, 311, 257, 588, 1481, 3125, 295, 2699, 76, 300, 5965, 721, 588, 1858, 281, 519, 466, 51121, 51121, 293, 1500, 13, 51171, 51171, 865, 13, 682, 264, 4997, 25950, 11, 286, 576, 767, 829, 264, 2699, 76, 31958, 412, 264, 11, 412, 264, 3096, 295, 51499, 51499, 309, 13, 1079, 13, 1743, 257, 4230, 420, 746, 13, 51693, 51693], "temperature": 0.0, "avg_logprob": -0.15379986939606843, "compression_ratio": 1.6104417670682731, "no_caption_prob": 1.7231293895747513e-05}, {"id": 494, "seek": 293026, "start": 2940.7200000000003, "end": 2945.4, "text": " it's, it's a, it's a very nice quality of Elm that keeps things very easy to think about", "tokens": [50364, 819, 14518, 13, 400, 291, 611, 445, 362, 264, 25632, 300, 291, 393, 380, 28777, 6828, 50645, 50645, 411, 294, 661, 8650, 13, 400, 294, 512, 3331, 1310, 309, 576, 312, 10851, 11, 457, 309, 534, 11, 50887, 50887, 309, 311, 11, 309, 311, 257, 11, 309, 311, 257, 588, 1481, 3125, 295, 2699, 76, 300, 5965, 721, 588, 1858, 281, 519, 466, 51121, 51121, 293, 1500, 13, 51171, 51171, 865, 13, 682, 264, 4997, 25950, 11, 286, 576, 767, 829, 264, 2699, 76, 31958, 412, 264, 11, 412, 264, 3096, 295, 51499, 51499, 309, 13, 1079, 13, 1743, 257, 4230, 420, 746, 13, 51693, 51693], "temperature": 0.0, "avg_logprob": -0.15379986939606843, "compression_ratio": 1.6104417670682731, "no_caption_prob": 1.7231293895747513e-05}, {"id": 495, "seek": 293026, "start": 2945.4, "end": 2946.4, "text": " and test.", "tokens": [50364, 819, 14518, 13, 400, 291, 611, 445, 362, 264, 25632, 300, 291, 393, 380, 28777, 6828, 50645, 50645, 411, 294, 661, 8650, 13, 400, 294, 512, 3331, 1310, 309, 576, 312, 10851, 11, 457, 309, 534, 11, 50887, 50887, 309, 311, 11, 309, 311, 257, 11, 309, 311, 257, 588, 1481, 3125, 295, 2699, 76, 300, 5965, 721, 588, 1858, 281, 519, 466, 51121, 51121, 293, 1500, 13, 51171, 51171, 865, 13, 682, 264, 4997, 25950, 11, 286, 576, 767, 829, 264, 2699, 76, 31958, 412, 264, 11, 412, 264, 3096, 295, 51499, 51499, 309, 13, 1079, 13, 1743, 257, 4230, 420, 746, 13, 51693, 51693], "temperature": 0.0, "avg_logprob": -0.15379986939606843, "compression_ratio": 1.6104417670682731, "no_caption_prob": 1.7231293895747513e-05}, {"id": 496, "seek": 293026, "start": 2946.4, "end": 2952.96, "text": " Yeah. In the testing pyramid, I would actually put the Elm compiler at the, at the base of", "tokens": [50364, 819, 14518, 13, 400, 291, 611, 445, 362, 264, 25632, 300, 291, 393, 380, 28777, 6828, 50645, 50645, 411, 294, 661, 8650, 13, 400, 294, 512, 3331, 1310, 309, 576, 312, 10851, 11, 457, 309, 534, 11, 50887, 50887, 309, 311, 11, 309, 311, 257, 11, 309, 311, 257, 588, 1481, 3125, 295, 2699, 76, 300, 5965, 721, 588, 1858, 281, 519, 466, 51121, 51121, 293, 1500, 13, 51171, 51171, 865, 13, 682, 264, 4997, 25950, 11, 286, 576, 767, 829, 264, 2699, 76, 31958, 412, 264, 11, 412, 264, 3096, 295, 51499, 51499, 309, 13, 1079, 13, 1743, 257, 4230, 420, 746, 13, 51693, 51693], "temperature": 0.0, "avg_logprob": -0.15379986939606843, "compression_ratio": 1.6104417670682731, "no_caption_prob": 1.7231293895747513e-05}, {"id": 497, "seek": 293026, "start": 2952.96, "end": 2956.84, "text": " it. Yes. Like a tree or something.", "tokens": [50364, 819, 14518, 13, 400, 291, 611, 445, 362, 264, 25632, 300, 291, 393, 380, 28777, 6828, 50645, 50645, 411, 294, 661, 8650, 13, 400, 294, 512, 3331, 1310, 309, 576, 312, 10851, 11, 457, 309, 534, 11, 50887, 50887, 309, 311, 11, 309, 311, 257, 11, 309, 311, 257, 588, 1481, 3125, 295, 2699, 76, 300, 5965, 721, 588, 1858, 281, 519, 466, 51121, 51121, 293, 1500, 13, 51171, 51171, 865, 13, 682, 264, 4997, 25950, 11, 286, 576, 767, 829, 264, 2699, 76, 31958, 412, 264, 11, 412, 264, 3096, 295, 51499, 51499, 309, 13, 1079, 13, 1743, 257, 4230, 420, 746, 13, 51693, 51693], "temperature": 0.0, "avg_logprob": -0.15379986939606843, "compression_ratio": 1.6104417670682731, "no_caption_prob": 1.7231293895747513e-05}, {"id": 498, "seek": 295684, "start": 2956.84, "end": 2960.44, "text": " I like this. I like this. Well, but you want more, you want even more.", "tokens": [50364, 286, 411, 341, 13, 286, 411, 341, 13, 1042, 11, 457, 291, 528, 544, 11, 291, 528, 754, 544, 13, 50544, 50544, 865, 13, 50594, 50594, 1779, 13, 5048, 813, 4985, 6921, 13, 50668, 50668, 865, 13, 286, 576, 611, 829, 2699, 76, 3131, 1296, 604, 2699, 76, 31958, 293, 4985, 6921, 1310, 13, 407, 50946, 50946, 2699, 76, 31958, 11, 2699, 76, 3131, 11, 4985, 6921, 11, 10980, 6921, 11, 917, 281, 917, 6921, 13, 2704, 2699, 76, 3131, 51234, 51234, 727, 312, 934, 11, 309, 727, 312, 4079, 1646, 11, 457, 13, 51350, 51350, 865, 13, 467, 1062, 5672, 322, 264, 4319, 886, 13, 10865, 456, 366, 512, 721, 300, 2699, 76, 3131, 51572, 51572, 393, 652, 534, 869, 19810, 626, 466, 365, 13437, 5215, 13, 400, 456, 366, 512, 721, 51828, 51828], "temperature": 0.0, "avg_logprob": -0.20511570116029168, "compression_ratio": 1.876865671641791, "no_caption_prob": 1.2805360711354297e-05}, {"id": 499, "seek": 295684, "start": 2960.44, "end": 2961.44, "text": " Yeah.", "tokens": [50364, 286, 411, 341, 13, 286, 411, 341, 13, 1042, 11, 457, 291, 528, 544, 11, 291, 528, 754, 544, 13, 50544, 50544, 865, 13, 50594, 50594, 1779, 13, 5048, 813, 4985, 6921, 13, 50668, 50668, 865, 13, 286, 576, 611, 829, 2699, 76, 3131, 1296, 604, 2699, 76, 31958, 293, 4985, 6921, 1310, 13, 407, 50946, 50946, 2699, 76, 31958, 11, 2699, 76, 3131, 11, 4985, 6921, 11, 10980, 6921, 11, 917, 281, 917, 6921, 13, 2704, 2699, 76, 3131, 51234, 51234, 727, 312, 934, 11, 309, 727, 312, 4079, 1646, 11, 457, 13, 51350, 51350, 865, 13, 467, 1062, 5672, 322, 264, 4319, 886, 13, 10865, 456, 366, 512, 721, 300, 2699, 76, 3131, 51572, 51572, 393, 652, 534, 869, 19810, 626, 466, 365, 13437, 5215, 13, 400, 456, 366, 512, 721, 51828, 51828], "temperature": 0.0, "avg_logprob": -0.20511570116029168, "compression_ratio": 1.876865671641791, "no_caption_prob": 1.2805360711354297e-05}, {"id": 500, "seek": 295684, "start": 2961.44, "end": 2962.92, "text": " Right. More than unit tests.", "tokens": [50364, 286, 411, 341, 13, 286, 411, 341, 13, 1042, 11, 457, 291, 528, 544, 11, 291, 528, 754, 544, 13, 50544, 50544, 865, 13, 50594, 50594, 1779, 13, 5048, 813, 4985, 6921, 13, 50668, 50668, 865, 13, 286, 576, 611, 829, 2699, 76, 3131, 1296, 604, 2699, 76, 31958, 293, 4985, 6921, 1310, 13, 407, 50946, 50946, 2699, 76, 31958, 11, 2699, 76, 3131, 11, 4985, 6921, 11, 10980, 6921, 11, 917, 281, 917, 6921, 13, 2704, 2699, 76, 3131, 51234, 51234, 727, 312, 934, 11, 309, 727, 312, 4079, 1646, 11, 457, 13, 51350, 51350, 865, 13, 467, 1062, 5672, 322, 264, 4319, 886, 13, 10865, 456, 366, 512, 721, 300, 2699, 76, 3131, 51572, 51572, 393, 652, 534, 869, 19810, 626, 466, 365, 13437, 5215, 13, 400, 456, 366, 512, 721, 51828, 51828], "temperature": 0.0, "avg_logprob": -0.20511570116029168, "compression_ratio": 1.876865671641791, "no_caption_prob": 1.2805360711354297e-05}, {"id": 501, "seek": 295684, "start": 2962.92, "end": 2968.48, "text": " Yeah. I would also put Elm review between any Elm compiler and unit tests maybe. So", "tokens": [50364, 286, 411, 341, 13, 286, 411, 341, 13, 1042, 11, 457, 291, 528, 544, 11, 291, 528, 754, 544, 13, 50544, 50544, 865, 13, 50594, 50594, 1779, 13, 5048, 813, 4985, 6921, 13, 50668, 50668, 865, 13, 286, 576, 611, 829, 2699, 76, 3131, 1296, 604, 2699, 76, 31958, 293, 4985, 6921, 1310, 13, 407, 50946, 50946, 2699, 76, 31958, 11, 2699, 76, 3131, 11, 4985, 6921, 11, 10980, 6921, 11, 917, 281, 917, 6921, 13, 2704, 2699, 76, 3131, 51234, 51234, 727, 312, 934, 11, 309, 727, 312, 4079, 1646, 11, 457, 13, 51350, 51350, 865, 13, 467, 1062, 5672, 322, 264, 4319, 886, 13, 10865, 456, 366, 512, 721, 300, 2699, 76, 3131, 51572, 51572, 393, 652, 534, 869, 19810, 626, 466, 365, 13437, 5215, 13, 400, 456, 366, 512, 721, 51828, 51828], "temperature": 0.0, "avg_logprob": -0.20511570116029168, "compression_ratio": 1.876865671641791, "no_caption_prob": 1.2805360711354297e-05}, {"id": 502, "seek": 295684, "start": 2968.48, "end": 2974.2400000000002, "text": " Elm compiler, Elm review, unit tests, integration tests, end to end tests. Maybe Elm review", "tokens": [50364, 286, 411, 341, 13, 286, 411, 341, 13, 1042, 11, 457, 291, 528, 544, 11, 291, 528, 754, 544, 13, 50544, 50544, 865, 13, 50594, 50594, 1779, 13, 5048, 813, 4985, 6921, 13, 50668, 50668, 865, 13, 286, 576, 611, 829, 2699, 76, 3131, 1296, 604, 2699, 76, 31958, 293, 4985, 6921, 1310, 13, 407, 50946, 50946, 2699, 76, 31958, 11, 2699, 76, 3131, 11, 4985, 6921, 11, 10980, 6921, 11, 917, 281, 917, 6921, 13, 2704, 2699, 76, 3131, 51234, 51234, 727, 312, 934, 11, 309, 727, 312, 4079, 1646, 11, 457, 13, 51350, 51350, 865, 13, 467, 1062, 5672, 322, 264, 4319, 886, 13, 10865, 456, 366, 512, 721, 300, 2699, 76, 3131, 51572, 51572, 393, 652, 534, 869, 19810, 626, 466, 365, 13437, 5215, 13, 400, 456, 366, 512, 721, 51828, 51828], "temperature": 0.0, "avg_logprob": -0.20511570116029168, "compression_ratio": 1.876865671641791, "no_caption_prob": 1.2805360711354297e-05}, {"id": 503, "seek": 295684, "start": 2974.2400000000002, "end": 2976.56, "text": " could be after, it could be somewhere else, but.", "tokens": [50364, 286, 411, 341, 13, 286, 411, 341, 13, 1042, 11, 457, 291, 528, 544, 11, 291, 528, 754, 544, 13, 50544, 50544, 865, 13, 50594, 50594, 1779, 13, 5048, 813, 4985, 6921, 13, 50668, 50668, 865, 13, 286, 576, 611, 829, 2699, 76, 3131, 1296, 604, 2699, 76, 31958, 293, 4985, 6921, 1310, 13, 407, 50946, 50946, 2699, 76, 31958, 11, 2699, 76, 3131, 11, 4985, 6921, 11, 10980, 6921, 11, 917, 281, 917, 6921, 13, 2704, 2699, 76, 3131, 51234, 51234, 727, 312, 934, 11, 309, 727, 312, 4079, 1646, 11, 457, 13, 51350, 51350, 865, 13, 467, 1062, 5672, 322, 264, 4319, 886, 13, 10865, 456, 366, 512, 721, 300, 2699, 76, 3131, 51572, 51572, 393, 652, 534, 869, 19810, 626, 466, 365, 13437, 5215, 13, 400, 456, 366, 512, 721, 51828, 51828], "temperature": 0.0, "avg_logprob": -0.20511570116029168, "compression_ratio": 1.876865671641791, "no_caption_prob": 1.2805360711354297e-05}, {"id": 504, "seek": 295684, "start": 2976.56, "end": 2981.0, "text": " Yeah. It might depend on the context too. Cause there are some things that Elm review", "tokens": [50364, 286, 411, 341, 13, 286, 411, 341, 13, 1042, 11, 457, 291, 528, 544, 11, 291, 528, 754, 544, 13, 50544, 50544, 865, 13, 50594, 50594, 1779, 13, 5048, 813, 4985, 6921, 13, 50668, 50668, 865, 13, 286, 576, 611, 829, 2699, 76, 3131, 1296, 604, 2699, 76, 31958, 293, 4985, 6921, 1310, 13, 407, 50946, 50946, 2699, 76, 31958, 11, 2699, 76, 3131, 11, 4985, 6921, 11, 10980, 6921, 11, 917, 281, 917, 6921, 13, 2704, 2699, 76, 3131, 51234, 51234, 727, 312, 934, 11, 309, 727, 312, 4079, 1646, 11, 457, 13, 51350, 51350, 865, 13, 467, 1062, 5672, 322, 264, 4319, 886, 13, 10865, 456, 366, 512, 721, 300, 2699, 76, 3131, 51572, 51572, 393, 652, 534, 869, 19810, 626, 466, 365, 13437, 5215, 13, 400, 456, 366, 512, 721, 51828, 51828], "temperature": 0.0, "avg_logprob": -0.20511570116029168, "compression_ratio": 1.876865671641791, "no_caption_prob": 1.2805360711354297e-05}, {"id": 505, "seek": 295684, "start": 2981.0, "end": 2986.1200000000003, "text": " can make really great assertions about with static analysis. And there are some things", "tokens": [50364, 286, 411, 341, 13, 286, 411, 341, 13, 1042, 11, 457, 291, 528, 544, 11, 291, 528, 754, 544, 13, 50544, 50544, 865, 13, 50594, 50594, 1779, 13, 5048, 813, 4985, 6921, 13, 50668, 50668, 865, 13, 286, 576, 611, 829, 2699, 76, 3131, 1296, 604, 2699, 76, 31958, 293, 4985, 6921, 1310, 13, 407, 50946, 50946, 2699, 76, 31958, 11, 2699, 76, 3131, 11, 4985, 6921, 11, 10980, 6921, 11, 917, 281, 917, 6921, 13, 2704, 2699, 76, 3131, 51234, 51234, 727, 312, 934, 11, 309, 727, 312, 4079, 1646, 11, 457, 13, 51350, 51350, 865, 13, 467, 1062, 5672, 322, 264, 4319, 886, 13, 10865, 456, 366, 512, 721, 300, 2699, 76, 3131, 51572, 51572, 393, 652, 534, 869, 19810, 626, 466, 365, 13437, 5215, 13, 400, 456, 366, 512, 721, 51828, 51828], "temperature": 0.0, "avg_logprob": -0.20511570116029168, "compression_ratio": 1.876865671641791, "no_caption_prob": 1.2805360711354297e-05}, {"id": 506, "seek": 298612, "start": 2986.12, "end": 2990.48, "text": " that can't do good stuff, static analysis on. If it's like, if it's looking at literal", "tokens": [50364, 300, 393, 380, 360, 665, 1507, 11, 13437, 5215, 322, 13, 759, 309, 311, 411, 11, 498, 309, 311, 1237, 412, 20411, 50582, 50582, 4190, 11, 550, 309, 393, 360, 257, 688, 13, 759, 309, 311, 1237, 412, 4195, 4846, 4190, 11, 550, 309, 393, 380, 4725, 50856, 50856, 652, 382, 867, 32567, 466, 300, 13, 50952, 50952, 865, 13, 400, 300, 311, 689, 291, 576, 764, 3467, 420, 4985, 6921, 11, 1391, 4985, 6921, 294, 341, 51182, 51182, 1389, 13, 51232, 51232, 1779, 13, 51282, 51282, 1610, 917, 281, 917, 6921, 13, 51414, 51414, 286, 411, 341, 10913, 11, 10913, 25950, 13, 865, 13, 51620, 51620], "temperature": 0.0, "avg_logprob": -0.1725801415399674, "compression_ratio": 1.6754385964912282, "no_caption_prob": 3.647767880465835e-05}, {"id": 507, "seek": 298612, "start": 2990.48, "end": 2995.96, "text": " values, then it can do a lot. If it's looking at user input values, then it can't necessarily", "tokens": [50364, 300, 393, 380, 360, 665, 1507, 11, 13437, 5215, 322, 13, 759, 309, 311, 411, 11, 498, 309, 311, 1237, 412, 20411, 50582, 50582, 4190, 11, 550, 309, 393, 360, 257, 688, 13, 759, 309, 311, 1237, 412, 4195, 4846, 4190, 11, 550, 309, 393, 380, 4725, 50856, 50856, 652, 382, 867, 32567, 466, 300, 13, 50952, 50952, 865, 13, 400, 300, 311, 689, 291, 576, 764, 3467, 420, 4985, 6921, 11, 1391, 4985, 6921, 294, 341, 51182, 51182, 1389, 13, 51232, 51232, 1779, 13, 51282, 51282, 1610, 917, 281, 917, 6921, 13, 51414, 51414, 286, 411, 341, 10913, 11, 10913, 25950, 13, 865, 13, 51620, 51620], "temperature": 0.0, "avg_logprob": -0.1725801415399674, "compression_ratio": 1.6754385964912282, "no_caption_prob": 3.647767880465835e-05}, {"id": 508, "seek": 298612, "start": 2995.96, "end": 2997.88, "text": " make as many guarantees about that.", "tokens": [50364, 300, 393, 380, 360, 665, 1507, 11, 13437, 5215, 322, 13, 759, 309, 311, 411, 11, 498, 309, 311, 1237, 412, 20411, 50582, 50582, 4190, 11, 550, 309, 393, 360, 257, 688, 13, 759, 309, 311, 1237, 412, 4195, 4846, 4190, 11, 550, 309, 393, 380, 4725, 50856, 50856, 652, 382, 867, 32567, 466, 300, 13, 50952, 50952, 865, 13, 400, 300, 311, 689, 291, 576, 764, 3467, 420, 4985, 6921, 11, 1391, 4985, 6921, 294, 341, 51182, 51182, 1389, 13, 51232, 51232, 1779, 13, 51282, 51282, 1610, 917, 281, 917, 6921, 13, 51414, 51414, 286, 411, 341, 10913, 11, 10913, 25950, 13, 865, 13, 51620, 51620], "temperature": 0.0, "avg_logprob": -0.1725801415399674, "compression_ratio": 1.6754385964912282, "no_caption_prob": 3.647767880465835e-05}, {"id": 509, "seek": 298612, "start": 2997.88, "end": 3002.48, "text": " Yeah. And that's where you would use types or unit tests, probably unit tests in this", "tokens": [50364, 300, 393, 380, 360, 665, 1507, 11, 13437, 5215, 322, 13, 759, 309, 311, 411, 11, 498, 309, 311, 1237, 412, 20411, 50582, 50582, 4190, 11, 550, 309, 393, 360, 257, 688, 13, 759, 309, 311, 1237, 412, 4195, 4846, 4190, 11, 550, 309, 393, 380, 4725, 50856, 50856, 652, 382, 867, 32567, 466, 300, 13, 50952, 50952, 865, 13, 400, 300, 311, 689, 291, 576, 764, 3467, 420, 4985, 6921, 11, 1391, 4985, 6921, 294, 341, 51182, 51182, 1389, 13, 51232, 51232, 1779, 13, 51282, 51282, 1610, 917, 281, 917, 6921, 13, 51414, 51414, 286, 411, 341, 10913, 11, 10913, 25950, 13, 865, 13, 51620, 51620], "temperature": 0.0, "avg_logprob": -0.1725801415399674, "compression_ratio": 1.6754385964912282, "no_caption_prob": 3.647767880465835e-05}, {"id": 510, "seek": 298612, "start": 3002.48, "end": 3003.48, "text": " case.", "tokens": [50364, 300, 393, 380, 360, 665, 1507, 11, 13437, 5215, 322, 13, 759, 309, 311, 411, 11, 498, 309, 311, 1237, 412, 20411, 50582, 50582, 4190, 11, 550, 309, 393, 360, 257, 688, 13, 759, 309, 311, 1237, 412, 4195, 4846, 4190, 11, 550, 309, 393, 380, 4725, 50856, 50856, 652, 382, 867, 32567, 466, 300, 13, 50952, 50952, 865, 13, 400, 300, 311, 689, 291, 576, 764, 3467, 420, 4985, 6921, 11, 1391, 4985, 6921, 294, 341, 51182, 51182, 1389, 13, 51232, 51232, 1779, 13, 51282, 51282, 1610, 917, 281, 917, 6921, 13, 51414, 51414, 286, 411, 341, 10913, 11, 10913, 25950, 13, 865, 13, 51620, 51620], "temperature": 0.0, "avg_logprob": -0.1725801415399674, "compression_ratio": 1.6754385964912282, "no_caption_prob": 3.647767880465835e-05}, {"id": 511, "seek": 298612, "start": 3003.48, "end": 3004.48, "text": " Right.", "tokens": [50364, 300, 393, 380, 360, 665, 1507, 11, 13437, 5215, 322, 13, 759, 309, 311, 411, 11, 498, 309, 311, 1237, 412, 20411, 50582, 50582, 4190, 11, 550, 309, 393, 360, 257, 688, 13, 759, 309, 311, 1237, 412, 4195, 4846, 4190, 11, 550, 309, 393, 380, 4725, 50856, 50856, 652, 382, 867, 32567, 466, 300, 13, 50952, 50952, 865, 13, 400, 300, 311, 689, 291, 576, 764, 3467, 420, 4985, 6921, 11, 1391, 4985, 6921, 294, 341, 51182, 51182, 1389, 13, 51232, 51232, 1779, 13, 51282, 51282, 1610, 917, 281, 917, 6921, 13, 51414, 51414, 286, 411, 341, 10913, 11, 10913, 25950, 13, 865, 13, 51620, 51620], "temperature": 0.0, "avg_logprob": -0.1725801415399674, "compression_ratio": 1.6754385964912282, "no_caption_prob": 3.647767880465835e-05}, {"id": 512, "seek": 298612, "start": 3004.48, "end": 3007.12, "text": " Or end to end tests.", "tokens": [50364, 300, 393, 380, 360, 665, 1507, 11, 13437, 5215, 322, 13, 759, 309, 311, 411, 11, 498, 309, 311, 1237, 412, 20411, 50582, 50582, 4190, 11, 550, 309, 393, 360, 257, 688, 13, 759, 309, 311, 1237, 412, 4195, 4846, 4190, 11, 550, 309, 393, 380, 4725, 50856, 50856, 652, 382, 867, 32567, 466, 300, 13, 50952, 50952, 865, 13, 400, 300, 311, 689, 291, 576, 764, 3467, 420, 4985, 6921, 11, 1391, 4985, 6921, 294, 341, 51182, 51182, 1389, 13, 51232, 51232, 1779, 13, 51282, 51282, 1610, 917, 281, 917, 6921, 13, 51414, 51414, 286, 411, 341, 10913, 11, 10913, 25950, 13, 865, 13, 51620, 51620], "temperature": 0.0, "avg_logprob": -0.1725801415399674, "compression_ratio": 1.6754385964912282, "no_caption_prob": 3.647767880465835e-05}, {"id": 513, "seek": 298612, "start": 3007.12, "end": 3011.24, "text": " I like this extended, extended pyramid. Yeah.", "tokens": [50364, 300, 393, 380, 360, 665, 1507, 11, 13437, 5215, 322, 13, 759, 309, 311, 411, 11, 498, 309, 311, 1237, 412, 20411, 50582, 50582, 4190, 11, 550, 309, 393, 360, 257, 688, 13, 759, 309, 311, 1237, 412, 4195, 4846, 4190, 11, 550, 309, 393, 380, 4725, 50856, 50856, 652, 382, 867, 32567, 466, 300, 13, 50952, 50952, 865, 13, 400, 300, 311, 689, 291, 576, 764, 3467, 420, 4985, 6921, 11, 1391, 4985, 6921, 294, 341, 51182, 51182, 1389, 13, 51232, 51232, 1779, 13, 51282, 51282, 1610, 917, 281, 917, 6921, 13, 51414, 51414, 286, 411, 341, 10913, 11, 10913, 25950, 13, 865, 13, 51620, 51620], "temperature": 0.0, "avg_logprob": -0.1725801415399674, "compression_ratio": 1.6754385964912282, "no_caption_prob": 3.647767880465835e-05}, {"id": 514, "seek": 301124, "start": 3011.24, "end": 3016.4799999999996, "text": " Use whatever you can to, to create confidence in your system.", "tokens": [50364, 8278, 2035, 291, 393, 281, 11, 281, 1884, 6687, 294, 428, 1185, 13, 50626, 50626, 7587, 13, 50679, 50679, 407, 321, 483, 439, 613, 3873, 11, 411, 754, 2699, 76, 21884, 13695, 2709, 291, 257, 688, 295, 32567, 13, 286, 500, 380, 458, 50988, 50988, 689, 291, 576, 829, 309, 294, 264, 25950, 11, 457, 309, 2709, 291, 512, 733, 295, 6687, 13, 51170, 51170, 286, 914, 11, 286, 576, 829, 300, 382, 644, 295, 264, 2699, 76, 31958, 11, 291, 458, 11, 309, 311, 445, 24360, 264, 51506, 51506, 1230, 295, 32567, 300, 264, 2699, 76, 31958, 393, 652, 337, 291, 13, 51680, 51680], "temperature": 0.0, "avg_logprob": -0.18507349602529935, "compression_ratio": 1.6443514644351465, "no_caption_prob": 4.985387931810692e-05}, {"id": 515, "seek": 301124, "start": 3016.4799999999996, "end": 3017.54, "text": " Exactly.", "tokens": [50364, 8278, 2035, 291, 393, 281, 11, 281, 1884, 6687, 294, 428, 1185, 13, 50626, 50626, 7587, 13, 50679, 50679, 407, 321, 483, 439, 613, 3873, 11, 411, 754, 2699, 76, 21884, 13695, 2709, 291, 257, 688, 295, 32567, 13, 286, 500, 380, 458, 50988, 50988, 689, 291, 576, 829, 309, 294, 264, 25950, 11, 457, 309, 2709, 291, 512, 733, 295, 6687, 13, 51170, 51170, 286, 914, 11, 286, 576, 829, 300, 382, 644, 295, 264, 2699, 76, 31958, 11, 291, 458, 11, 309, 311, 445, 24360, 264, 51506, 51506, 1230, 295, 32567, 300, 264, 2699, 76, 31958, 393, 652, 337, 291, 13, 51680, 51680], "temperature": 0.0, "avg_logprob": -0.18507349602529935, "compression_ratio": 1.6443514644351465, "no_caption_prob": 4.985387931810692e-05}, {"id": 516, "seek": 301124, "start": 3017.54, "end": 3023.72, "text": " So we get all these tools, like even Elm GraphQL gives you a lot of guarantees. I don't know", "tokens": [50364, 8278, 2035, 291, 393, 281, 11, 281, 1884, 6687, 294, 428, 1185, 13, 50626, 50626, 7587, 13, 50679, 50679, 407, 321, 483, 439, 613, 3873, 11, 411, 754, 2699, 76, 21884, 13695, 2709, 291, 257, 688, 295, 32567, 13, 286, 500, 380, 458, 50988, 50988, 689, 291, 576, 829, 309, 294, 264, 25950, 11, 457, 309, 2709, 291, 512, 733, 295, 6687, 13, 51170, 51170, 286, 914, 11, 286, 576, 829, 300, 382, 644, 295, 264, 2699, 76, 31958, 11, 291, 458, 11, 309, 311, 445, 24360, 264, 51506, 51506, 1230, 295, 32567, 300, 264, 2699, 76, 31958, 393, 652, 337, 291, 13, 51680, 51680], "temperature": 0.0, "avg_logprob": -0.18507349602529935, "compression_ratio": 1.6443514644351465, "no_caption_prob": 4.985387931810692e-05}, {"id": 517, "seek": 301124, "start": 3023.72, "end": 3027.3599999999997, "text": " where you would put it in the pyramid, but it gives you some kind of confidence.", "tokens": [50364, 8278, 2035, 291, 393, 281, 11, 281, 1884, 6687, 294, 428, 1185, 13, 50626, 50626, 7587, 13, 50679, 50679, 407, 321, 483, 439, 613, 3873, 11, 411, 754, 2699, 76, 21884, 13695, 2709, 291, 257, 688, 295, 32567, 13, 286, 500, 380, 458, 50988, 50988, 689, 291, 576, 829, 309, 294, 264, 25950, 11, 457, 309, 2709, 291, 512, 733, 295, 6687, 13, 51170, 51170, 286, 914, 11, 286, 576, 829, 300, 382, 644, 295, 264, 2699, 76, 31958, 11, 291, 458, 11, 309, 311, 445, 24360, 264, 51506, 51506, 1230, 295, 32567, 300, 264, 2699, 76, 31958, 393, 652, 337, 291, 13, 51680, 51680], "temperature": 0.0, "avg_logprob": -0.18507349602529935, "compression_ratio": 1.6443514644351465, "no_caption_prob": 4.985387931810692e-05}, {"id": 518, "seek": 301124, "start": 3027.3599999999997, "end": 3034.08, "text": " I mean, I would put that as part of the Elm compiler, you know, it's just extending the", "tokens": [50364, 8278, 2035, 291, 393, 281, 11, 281, 1884, 6687, 294, 428, 1185, 13, 50626, 50626, 7587, 13, 50679, 50679, 407, 321, 483, 439, 613, 3873, 11, 411, 754, 2699, 76, 21884, 13695, 2709, 291, 257, 688, 295, 32567, 13, 286, 500, 380, 458, 50988, 50988, 689, 291, 576, 829, 309, 294, 264, 25950, 11, 457, 309, 2709, 291, 512, 733, 295, 6687, 13, 51170, 51170, 286, 914, 11, 286, 576, 829, 300, 382, 644, 295, 264, 2699, 76, 31958, 11, 291, 458, 11, 309, 311, 445, 24360, 264, 51506, 51506, 1230, 295, 32567, 300, 264, 2699, 76, 31958, 393, 652, 337, 291, 13, 51680, 51680], "temperature": 0.0, "avg_logprob": -0.18507349602529935, "compression_ratio": 1.6443514644351465, "no_caption_prob": 4.985387931810692e-05}, {"id": 519, "seek": 301124, "start": 3034.08, "end": 3037.56, "text": " number of guarantees that the Elm compiler can make for you.", "tokens": [50364, 8278, 2035, 291, 393, 281, 11, 281, 1884, 6687, 294, 428, 1185, 13, 50626, 50626, 7587, 13, 50679, 50679, 407, 321, 483, 439, 613, 3873, 11, 411, 754, 2699, 76, 21884, 13695, 2709, 291, 257, 688, 295, 32567, 13, 286, 500, 380, 458, 50988, 50988, 689, 291, 576, 829, 309, 294, 264, 25950, 11, 457, 309, 2709, 291, 512, 733, 295, 6687, 13, 51170, 51170, 286, 914, 11, 286, 576, 829, 300, 382, 644, 295, 264, 2699, 76, 31958, 11, 291, 458, 11, 309, 311, 445, 24360, 264, 51506, 51506, 1230, 295, 32567, 300, 264, 2699, 76, 31958, 393, 652, 337, 291, 13, 51680, 51680], "temperature": 0.0, "avg_logprob": -0.18507349602529935, "compression_ratio": 1.6443514644351465, "no_caption_prob": 4.985387931810692e-05}, {"id": 520, "seek": 303756, "start": 3037.56, "end": 3044.48, "text": " Yeah, exactly. So this question came up of how or whether you should test internals of", "tokens": [50364, 865, 11, 2293, 13, 407, 341, 1168, 1361, 493, 295, 577, 420, 1968, 291, 820, 1500, 2154, 1124, 295, 50710, 50710, 428, 2699, 76, 16679, 13, 1144, 291, 362, 4598, 322, 300, 30, 50882, 50882, 865, 13, 407, 2673, 286, 853, 406, 281, 1500, 11420, 4365, 13, 583, 286, 915, 300, 437, 291, 1500, 294, 51310, 51310, 4985, 6921, 366, 733, 295, 411, 11420, 4365, 295, 917, 281, 917, 6921, 13, 51596, 51596, 663, 311, 558, 13, 814, 3879, 366, 13, 51703, 51703], "temperature": 0.0, "avg_logprob": -0.15472547867718864, "compression_ratio": 1.6176470588235294, "no_caption_prob": 3.844917955575511e-06}, {"id": 521, "seek": 303756, "start": 3044.48, "end": 3047.92, "text": " your Elm modules. Do you have thoughts on that?", "tokens": [50364, 865, 11, 2293, 13, 407, 341, 1168, 1361, 493, 295, 577, 420, 1968, 291, 820, 1500, 2154, 1124, 295, 50710, 50710, 428, 2699, 76, 16679, 13, 1144, 291, 362, 4598, 322, 300, 30, 50882, 50882, 865, 13, 407, 2673, 286, 853, 406, 281, 1500, 11420, 4365, 13, 583, 286, 915, 300, 437, 291, 1500, 294, 51310, 51310, 4985, 6921, 366, 733, 295, 411, 11420, 4365, 295, 917, 281, 917, 6921, 13, 51596, 51596, 663, 311, 558, 13, 814, 3879, 366, 13, 51703, 51703], "temperature": 0.0, "avg_logprob": -0.15472547867718864, "compression_ratio": 1.6176470588235294, "no_caption_prob": 3.844917955575511e-06}, {"id": 522, "seek": 303756, "start": 3047.92, "end": 3056.48, "text": " Yeah. So usually I try not to test implementation details. But I find that what you test in", "tokens": [50364, 865, 11, 2293, 13, 407, 341, 1168, 1361, 493, 295, 577, 420, 1968, 291, 820, 1500, 2154, 1124, 295, 50710, 50710, 428, 2699, 76, 16679, 13, 1144, 291, 362, 4598, 322, 300, 30, 50882, 50882, 865, 13, 407, 2673, 286, 853, 406, 281, 1500, 11420, 4365, 13, 583, 286, 915, 300, 437, 291, 1500, 294, 51310, 51310, 4985, 6921, 366, 733, 295, 411, 11420, 4365, 295, 917, 281, 917, 6921, 13, 51596, 51596, 663, 311, 558, 13, 814, 3879, 366, 13, 51703, 51703], "temperature": 0.0, "avg_logprob": -0.15472547867718864, "compression_ratio": 1.6176470588235294, "no_caption_prob": 3.844917955575511e-06}, {"id": 523, "seek": 303756, "start": 3056.48, "end": 3062.2, "text": " unit tests are kind of like implementation details of end to end tests.", "tokens": [50364, 865, 11, 2293, 13, 407, 341, 1168, 1361, 493, 295, 577, 420, 1968, 291, 820, 1500, 2154, 1124, 295, 50710, 50710, 428, 2699, 76, 16679, 13, 1144, 291, 362, 4598, 322, 300, 30, 50882, 50882, 865, 13, 407, 2673, 286, 853, 406, 281, 1500, 11420, 4365, 13, 583, 286, 915, 300, 437, 291, 1500, 294, 51310, 51310, 4985, 6921, 366, 733, 295, 411, 11420, 4365, 295, 917, 281, 917, 6921, 13, 51596, 51596, 663, 311, 558, 13, 814, 3879, 366, 13, 51703, 51703], "temperature": 0.0, "avg_logprob": -0.15472547867718864, "compression_ratio": 1.6176470588235294, "no_caption_prob": 3.844917955575511e-06}, {"id": 524, "seek": 303756, "start": 3062.2, "end": 3064.34, "text": " That's right. They totally are.", "tokens": [50364, 865, 11, 2293, 13, 407, 341, 1168, 1361, 493, 295, 577, 420, 1968, 291, 820, 1500, 2154, 1124, 295, 50710, 50710, 428, 2699, 76, 16679, 13, 1144, 291, 362, 4598, 322, 300, 30, 50882, 50882, 865, 13, 407, 2673, 286, 853, 406, 281, 1500, 11420, 4365, 13, 583, 286, 915, 300, 437, 291, 1500, 294, 51310, 51310, 4985, 6921, 366, 733, 295, 411, 11420, 4365, 295, 917, 281, 917, 6921, 13, 51596, 51596, 663, 311, 558, 13, 814, 3879, 366, 13, 51703, 51703], "temperature": 0.0, "avg_logprob": -0.15472547867718864, "compression_ratio": 1.6176470588235294, "no_caption_prob": 3.844917955575511e-06}, {"id": 525, "seek": 306434, "start": 3064.34, "end": 3069.28, "text": " Everything is an imitation, is an internal of something else.", "tokens": [50364, 5471, 307, 364, 47624, 11, 307, 364, 6920, 295, 746, 1646, 13, 50611, 50611, 7010, 13, 50709, 50709, 407, 286, 519, 309, 311, 1151, 281, 853, 281, 1500, 412, 264, 6343, 1944, 1496, 11, 754, 294, 4985, 6921, 11, 51073, 51073, 562, 291, 393, 13, 583, 498, 746, 2170, 588, 6179, 420, 6243, 281, 1500, 11, 570, 291, 519, 746, 51387, 51387, 1062, 483, 666, 512, 733, 295, 1785, 11, 457, 291, 500, 380, 458, 577, 11, 550, 4997, 264, 11420, 51747, 51747, 727, 312, 4420, 13, 51797, 51797], "temperature": 0.0, "avg_logprob": -0.17761226276774983, "compression_ratio": 1.6666666666666667, "no_caption_prob": 7.527720754296752e-06}, {"id": 526, "seek": 306434, "start": 3069.28, "end": 3071.2400000000002, "text": " Yep.", "tokens": [50364, 5471, 307, 364, 47624, 11, 307, 364, 6920, 295, 746, 1646, 13, 50611, 50611, 7010, 13, 50709, 50709, 407, 286, 519, 309, 311, 1151, 281, 853, 281, 1500, 412, 264, 6343, 1944, 1496, 11, 754, 294, 4985, 6921, 11, 51073, 51073, 562, 291, 393, 13, 583, 498, 746, 2170, 588, 6179, 420, 6243, 281, 1500, 11, 570, 291, 519, 746, 51387, 51387, 1062, 483, 666, 512, 733, 295, 1785, 11, 457, 291, 500, 380, 458, 577, 11, 550, 4997, 264, 11420, 51747, 51747, 727, 312, 4420, 13, 51797, 51797], "temperature": 0.0, "avg_logprob": -0.17761226276774983, "compression_ratio": 1.6666666666666667, "no_caption_prob": 7.527720754296752e-06}, {"id": 527, "seek": 306434, "start": 3071.2400000000002, "end": 3078.52, "text": " So I think it's best to try to test at the highest possible level, even in unit tests,", "tokens": [50364, 5471, 307, 364, 47624, 11, 307, 364, 6920, 295, 746, 1646, 13, 50611, 50611, 7010, 13, 50709, 50709, 407, 286, 519, 309, 311, 1151, 281, 853, 281, 1500, 412, 264, 6343, 1944, 1496, 11, 754, 294, 4985, 6921, 11, 51073, 51073, 562, 291, 393, 13, 583, 498, 746, 2170, 588, 6179, 420, 6243, 281, 1500, 11, 570, 291, 519, 746, 51387, 51387, 1062, 483, 666, 512, 733, 295, 1785, 11, 457, 291, 500, 380, 458, 577, 11, 550, 4997, 264, 11420, 51747, 51747, 727, 312, 4420, 13, 51797, 51797], "temperature": 0.0, "avg_logprob": -0.17761226276774983, "compression_ratio": 1.6666666666666667, "no_caption_prob": 7.527720754296752e-06}, {"id": 528, "seek": 306434, "start": 3078.52, "end": 3084.8, "text": " when you can. But if something gets very complicated or impossible to test, because you think something", "tokens": [50364, 5471, 307, 364, 47624, 11, 307, 364, 6920, 295, 746, 1646, 13, 50611, 50611, 7010, 13, 50709, 50709, 407, 286, 519, 309, 311, 1151, 281, 853, 281, 1500, 412, 264, 6343, 1944, 1496, 11, 754, 294, 4985, 6921, 11, 51073, 51073, 562, 291, 393, 13, 583, 498, 746, 2170, 588, 6179, 420, 6243, 281, 1500, 11, 570, 291, 519, 746, 51387, 51387, 1062, 483, 666, 512, 733, 295, 1785, 11, 457, 291, 500, 380, 458, 577, 11, 550, 4997, 264, 11420, 51747, 51747, 727, 312, 4420, 13, 51797, 51797], "temperature": 0.0, "avg_logprob": -0.17761226276774983, "compression_ratio": 1.6666666666666667, "no_caption_prob": 7.527720754296752e-06}, {"id": 529, "seek": 306434, "start": 3084.8, "end": 3092.0, "text": " might get into some kind of state, but you don't know how, then testing the implementation", "tokens": [50364, 5471, 307, 364, 47624, 11, 307, 364, 6920, 295, 746, 1646, 13, 50611, 50611, 7010, 13, 50709, 50709, 407, 286, 519, 309, 311, 1151, 281, 853, 281, 1500, 412, 264, 6343, 1944, 1496, 11, 754, 294, 4985, 6921, 11, 51073, 51073, 562, 291, 393, 13, 583, 498, 746, 2170, 588, 6179, 420, 6243, 281, 1500, 11, 570, 291, 519, 746, 51387, 51387, 1062, 483, 666, 512, 733, 295, 1785, 11, 457, 291, 500, 380, 458, 577, 11, 550, 4997, 264, 11420, 51747, 51747, 727, 312, 4420, 13, 51797, 51797], "temperature": 0.0, "avg_logprob": -0.17761226276774983, "compression_ratio": 1.6666666666666667, "no_caption_prob": 7.527720754296752e-06}, {"id": 530, "seek": 306434, "start": 3092.0, "end": 3093.0, "text": " could be useful.", "tokens": [50364, 5471, 307, 364, 47624, 11, 307, 364, 6920, 295, 746, 1646, 13, 50611, 50611, 7010, 13, 50709, 50709, 407, 286, 519, 309, 311, 1151, 281, 853, 281, 1500, 412, 264, 6343, 1944, 1496, 11, 754, 294, 4985, 6921, 11, 51073, 51073, 562, 291, 393, 13, 583, 498, 746, 2170, 588, 6179, 420, 6243, 281, 1500, 11, 570, 291, 519, 746, 51387, 51387, 1062, 483, 666, 512, 733, 295, 1785, 11, 457, 291, 500, 380, 458, 577, 11, 550, 4997, 264, 11420, 51747, 51747, 727, 312, 4420, 13, 51797, 51797], "temperature": 0.0, "avg_logprob": -0.17761226276774983, "compression_ratio": 1.6666666666666667, "no_caption_prob": 7.527720754296752e-06}, {"id": 531, "seek": 309300, "start": 3093.0, "end": 3094.88, "text": " Yeah.", "tokens": [50364, 865, 13, 50458, 50458, 467, 311, 406, 746, 286, 360, 2049, 11, 1673, 13, 50606, 50606, 286, 3879, 3986, 365, 291, 300, 4985, 6921, 366, 4997, 264, 11420, 13, 1133, 291, 574, 50906, 50906, 412, 309, 11, 309, 311, 11, 286, 914, 11, 490, 472, 4585, 11, 604, 4985, 1500, 307, 264, 11420, 11, 382, 291, 51182, 51182, 848, 11, 295, 264, 917, 281, 917, 1657, 13, 407, 291, 366, 4997, 11420, 11, 293, 291, 366, 767, 51444, 51444, 37447, 1803, 281, 2685, 11420, 538, 3579, 257, 4985, 1500, 13, 407, 300, 311, 983, 512, 51702, 51702], "temperature": 0.0, "avg_logprob": -0.1261979594375148, "compression_ratio": 1.8027522935779816, "no_caption_prob": 5.1439852541079745e-05}, {"id": 532, "seek": 309300, "start": 3094.88, "end": 3097.84, "text": " It's not something I do often, though.", "tokens": [50364, 865, 13, 50458, 50458, 467, 311, 406, 746, 286, 360, 2049, 11, 1673, 13, 50606, 50606, 286, 3879, 3986, 365, 291, 300, 4985, 6921, 366, 4997, 264, 11420, 13, 1133, 291, 574, 50906, 50906, 412, 309, 11, 309, 311, 11, 286, 914, 11, 490, 472, 4585, 11, 604, 4985, 1500, 307, 264, 11420, 11, 382, 291, 51182, 51182, 848, 11, 295, 264, 917, 281, 917, 1657, 13, 407, 291, 366, 4997, 11420, 11, 293, 291, 366, 767, 51444, 51444, 37447, 1803, 281, 2685, 11420, 538, 3579, 257, 4985, 1500, 13, 407, 300, 311, 983, 512, 51702, 51702], "temperature": 0.0, "avg_logprob": -0.1261979594375148, "compression_ratio": 1.8027522935779816, "no_caption_prob": 5.1439852541079745e-05}, {"id": 533, "seek": 309300, "start": 3097.84, "end": 3103.84, "text": " I totally agree with you that unit tests are testing the implementation. When you look", "tokens": [50364, 865, 13, 50458, 50458, 467, 311, 406, 746, 286, 360, 2049, 11, 1673, 13, 50606, 50606, 286, 3879, 3986, 365, 291, 300, 4985, 6921, 366, 4997, 264, 11420, 13, 1133, 291, 574, 50906, 50906, 412, 309, 11, 309, 311, 11, 286, 914, 11, 490, 472, 4585, 11, 604, 4985, 1500, 307, 264, 11420, 11, 382, 291, 51182, 51182, 848, 11, 295, 264, 917, 281, 917, 1657, 13, 407, 291, 366, 4997, 11420, 11, 293, 291, 366, 767, 51444, 51444, 37447, 1803, 281, 2685, 11420, 538, 3579, 257, 4985, 1500, 13, 407, 300, 311, 983, 512, 51702, 51702], "temperature": 0.0, "avg_logprob": -0.1261979594375148, "compression_ratio": 1.8027522935779816, "no_caption_prob": 5.1439852541079745e-05}, {"id": 534, "seek": 309300, "start": 3103.84, "end": 3109.36, "text": " at it, it's, I mean, from one perspective, any unit test is the implementation, as you", "tokens": [50364, 865, 13, 50458, 50458, 467, 311, 406, 746, 286, 360, 2049, 11, 1673, 13, 50606, 50606, 286, 3879, 3986, 365, 291, 300, 4985, 6921, 366, 4997, 264, 11420, 13, 1133, 291, 574, 50906, 50906, 412, 309, 11, 309, 311, 11, 286, 914, 11, 490, 472, 4585, 11, 604, 4985, 1500, 307, 264, 11420, 11, 382, 291, 51182, 51182, 848, 11, 295, 264, 917, 281, 917, 1657, 13, 407, 291, 366, 4997, 11420, 11, 293, 291, 366, 767, 51444, 51444, 37447, 1803, 281, 2685, 11420, 538, 3579, 257, 4985, 1500, 13, 407, 300, 311, 983, 512, 51702, 51702], "temperature": 0.0, "avg_logprob": -0.1261979594375148, "compression_ratio": 1.8027522935779816, "no_caption_prob": 5.1439852541079745e-05}, {"id": 535, "seek": 309300, "start": 3109.36, "end": 3114.6, "text": " said, of the end to end story. So you are testing implementation, and you are actually", "tokens": [50364, 865, 13, 50458, 50458, 467, 311, 406, 746, 286, 360, 2049, 11, 1673, 13, 50606, 50606, 286, 3879, 3986, 365, 291, 300, 4985, 6921, 366, 4997, 264, 11420, 13, 1133, 291, 574, 50906, 50906, 412, 309, 11, 309, 311, 11, 286, 914, 11, 490, 472, 4585, 11, 604, 4985, 1500, 307, 264, 11420, 11, 382, 291, 51182, 51182, 848, 11, 295, 264, 917, 281, 917, 1657, 13, 407, 291, 366, 4997, 11420, 11, 293, 291, 366, 767, 51444, 51444, 37447, 1803, 281, 2685, 11420, 538, 3579, 257, 4985, 1500, 13, 407, 300, 311, 983, 512, 51702, 51702], "temperature": 0.0, "avg_logprob": -0.1261979594375148, "compression_ratio": 1.8027522935779816, "no_caption_prob": 5.1439852541079745e-05}, {"id": 536, "seek": 309300, "start": 3114.6, "end": 3119.76, "text": " coupling yourself to specific implementation by writing a unit test. So that's why some", "tokens": [50364, 865, 13, 50458, 50458, 467, 311, 406, 746, 286, 360, 2049, 11, 1673, 13, 50606, 50606, 286, 3879, 3986, 365, 291, 300, 4985, 6921, 366, 4997, 264, 11420, 13, 1133, 291, 574, 50906, 50906, 412, 309, 11, 309, 311, 11, 286, 914, 11, 490, 472, 4585, 11, 604, 4985, 1500, 307, 264, 11420, 11, 382, 291, 51182, 51182, 848, 11, 295, 264, 917, 281, 917, 1657, 13, 407, 291, 366, 4997, 11420, 11, 293, 291, 366, 767, 51444, 51444, 37447, 1803, 281, 2685, 11420, 538, 3579, 257, 4985, 1500, 13, 407, 300, 311, 983, 512, 51702, 51702], "temperature": 0.0, "avg_logprob": -0.1261979594375148, "compression_ratio": 1.8027522935779816, "no_caption_prob": 5.1439852541079745e-05}, {"id": 537, "seek": 311976, "start": 3119.76, "end": 3126.32, "text": " people really double down on end to end tests more, because they say, well, now I can change", "tokens": [50364, 561, 534, 3834, 760, 322, 917, 281, 917, 6921, 544, 11, 570, 436, 584, 11, 731, 11, 586, 286, 393, 1319, 50692, 50692, 264, 11420, 11, 293, 452, 6921, 1066, 8437, 13, 50859, 50859, 407, 286, 519, 472, 1168, 281, 1066, 294, 1575, 307, 11, 577, 709, 2857, 8657, 669, 286, 1419, 281, 360, 30, 1012, 51106, 51106, 709, 5658, 307, 456, 294, 264, 1500, 689, 286, 393, 380, 980, 1968, 264, 551, 286, 1127, 466, 294, 341, 51394, 51394, 1500, 307, 885, 4057, 2640, 293, 307, 1364, 420, 406, 30, 51594, 51594, 407, 498, 291, 362, 281, 360, 257, 3840, 295, 8657, 11, 411, 321, 2835, 412, 264, 2863, 11, 498, 291, 362, 51839, 51839], "temperature": 0.0, "avg_logprob": -0.07577312598794193, "compression_ratio": 1.7018867924528303, "no_caption_prob": 2.0145047528785653e-05}, {"id": 538, "seek": 311976, "start": 3126.32, "end": 3129.6600000000003, "text": " the implementation, and my tests keep passing.", "tokens": [50364, 561, 534, 3834, 760, 322, 917, 281, 917, 6921, 544, 11, 570, 436, 584, 11, 731, 11, 586, 286, 393, 1319, 50692, 50692, 264, 11420, 11, 293, 452, 6921, 1066, 8437, 13, 50859, 50859, 407, 286, 519, 472, 1168, 281, 1066, 294, 1575, 307, 11, 577, 709, 2857, 8657, 669, 286, 1419, 281, 360, 30, 1012, 51106, 51106, 709, 5658, 307, 456, 294, 264, 1500, 689, 286, 393, 380, 980, 1968, 264, 551, 286, 1127, 466, 294, 341, 51394, 51394, 1500, 307, 885, 4057, 2640, 293, 307, 1364, 420, 406, 30, 51594, 51594, 407, 498, 291, 362, 281, 360, 257, 3840, 295, 8657, 11, 411, 321, 2835, 412, 264, 2863, 11, 498, 291, 362, 51839, 51839], "temperature": 0.0, "avg_logprob": -0.07577312598794193, "compression_ratio": 1.7018867924528303, "no_caption_prob": 2.0145047528785653e-05}, {"id": 539, "seek": 311976, "start": 3129.6600000000003, "end": 3134.6000000000004, "text": " So I think one question to keep in mind is, how much extra setup am I having to do? How", "tokens": [50364, 561, 534, 3834, 760, 322, 917, 281, 917, 6921, 544, 11, 570, 436, 584, 11, 731, 11, 586, 286, 393, 1319, 50692, 50692, 264, 11420, 11, 293, 452, 6921, 1066, 8437, 13, 50859, 50859, 407, 286, 519, 472, 1168, 281, 1066, 294, 1575, 307, 11, 577, 709, 2857, 8657, 669, 286, 1419, 281, 360, 30, 1012, 51106, 51106, 709, 5658, 307, 456, 294, 264, 1500, 689, 286, 393, 380, 980, 1968, 264, 551, 286, 1127, 466, 294, 341, 51394, 51394, 1500, 307, 885, 4057, 2640, 293, 307, 1364, 420, 406, 30, 51594, 51594, 407, 498, 291, 362, 281, 360, 257, 3840, 295, 8657, 11, 411, 321, 2835, 412, 264, 2863, 11, 498, 291, 362, 51839, 51839], "temperature": 0.0, "avg_logprob": -0.07577312598794193, "compression_ratio": 1.7018867924528303, "no_caption_prob": 2.0145047528785653e-05}, {"id": 540, "seek": 311976, "start": 3134.6000000000004, "end": 3140.36, "text": " much noise is there in the test where I can't tell whether the thing I care about in this", "tokens": [50364, 561, 534, 3834, 760, 322, 917, 281, 917, 6921, 544, 11, 570, 436, 584, 11, 731, 11, 586, 286, 393, 1319, 50692, 50692, 264, 11420, 11, 293, 452, 6921, 1066, 8437, 13, 50859, 50859, 407, 286, 519, 472, 1168, 281, 1066, 294, 1575, 307, 11, 577, 709, 2857, 8657, 669, 286, 1419, 281, 360, 30, 1012, 51106, 51106, 709, 5658, 307, 456, 294, 264, 1500, 689, 286, 393, 380, 980, 1968, 264, 551, 286, 1127, 466, 294, 341, 51394, 51394, 1500, 307, 885, 4057, 2640, 293, 307, 1364, 420, 406, 30, 51594, 51594, 407, 498, 291, 362, 281, 360, 257, 3840, 295, 8657, 11, 411, 321, 2835, 412, 264, 2863, 11, 498, 291, 362, 51839, 51839], "temperature": 0.0, "avg_logprob": -0.07577312598794193, "compression_ratio": 1.7018867924528303, "no_caption_prob": 2.0145047528785653e-05}, {"id": 541, "seek": 311976, "start": 3140.36, "end": 3144.36, "text": " test is being exercised and is working or not?", "tokens": [50364, 561, 534, 3834, 760, 322, 917, 281, 917, 6921, 544, 11, 570, 436, 584, 11, 731, 11, 586, 286, 393, 1319, 50692, 50692, 264, 11420, 11, 293, 452, 6921, 1066, 8437, 13, 50859, 50859, 407, 286, 519, 472, 1168, 281, 1066, 294, 1575, 307, 11, 577, 709, 2857, 8657, 669, 286, 1419, 281, 360, 30, 1012, 51106, 51106, 709, 5658, 307, 456, 294, 264, 1500, 689, 286, 393, 380, 980, 1968, 264, 551, 286, 1127, 466, 294, 341, 51394, 51394, 1500, 307, 885, 4057, 2640, 293, 307, 1364, 420, 406, 30, 51594, 51594, 407, 498, 291, 362, 281, 360, 257, 3840, 295, 8657, 11, 411, 321, 2835, 412, 264, 2863, 11, 498, 291, 362, 51839, 51839], "temperature": 0.0, "avg_logprob": -0.07577312598794193, "compression_ratio": 1.7018867924528303, "no_caption_prob": 2.0145047528785653e-05}, {"id": 542, "seek": 311976, "start": 3144.36, "end": 3149.26, "text": " So if you have to do a bunch of setup, like we mentioned at the beginning, if you have", "tokens": [50364, 561, 534, 3834, 760, 322, 917, 281, 917, 6921, 544, 11, 570, 436, 584, 11, 731, 11, 586, 286, 393, 1319, 50692, 50692, 264, 11420, 11, 293, 452, 6921, 1066, 8437, 13, 50859, 50859, 407, 286, 519, 472, 1168, 281, 1066, 294, 1575, 307, 11, 577, 709, 2857, 8657, 669, 286, 1419, 281, 360, 30, 1012, 51106, 51106, 709, 5658, 307, 456, 294, 264, 1500, 689, 286, 393, 380, 980, 1968, 264, 551, 286, 1127, 466, 294, 341, 51394, 51394, 1500, 307, 885, 4057, 2640, 293, 307, 1364, 420, 406, 30, 51594, 51594, 407, 498, 291, 362, 281, 360, 257, 3840, 295, 8657, 11, 411, 321, 2835, 412, 264, 2863, 11, 498, 291, 362, 51839, 51839], "temperature": 0.0, "avg_logprob": -0.07577312598794193, "compression_ratio": 1.7018867924528303, "no_caption_prob": 2.0145047528785653e-05}, {"id": 543, "seek": 314926, "start": 3149.26, "end": 3152.84, "text": " to log in as this kind of user, that kind of user, that kind of user, and then you test", "tokens": [50364, 281, 3565, 294, 382, 341, 733, 295, 4195, 11, 300, 733, 295, 4195, 11, 300, 733, 295, 4195, 11, 293, 550, 291, 1500, 50543, 50543, 2319, 4691, 3331, 322, 341, 472, 644, 295, 264, 3028, 11, 457, 291, 362, 281, 12350, 294, 1266, 7183, 2452, 50871, 50871, 281, 1500, 300, 13, 2704, 456, 311, 257, 4985, 1500, 689, 291, 393, 534, 17987, 5380, 264, 4691, 51186, 51186, 3331, 295, 498, 309, 311, 257, 8341, 4195, 420, 364, 24236, 4195, 420, 2035, 11, 437, 311, 264, 19883, 30, 708, 51607, 51607, 366, 264, 19883, 32723, 30, 51700, 51700], "temperature": 0.0, "avg_logprob": -0.11750332032791291, "compression_ratio": 1.7695852534562213, "no_caption_prob": 5.064239303465001e-05}, {"id": 544, "seek": 314926, "start": 3152.84, "end": 3159.4, "text": " 100 edge cases on this one part of the page, but you have to navigate in 10 pages deep", "tokens": [50364, 281, 3565, 294, 382, 341, 733, 295, 4195, 11, 300, 733, 295, 4195, 11, 300, 733, 295, 4195, 11, 293, 550, 291, 1500, 50543, 50543, 2319, 4691, 3331, 322, 341, 472, 644, 295, 264, 3028, 11, 457, 291, 362, 281, 12350, 294, 1266, 7183, 2452, 50871, 50871, 281, 1500, 300, 13, 2704, 456, 311, 257, 4985, 1500, 689, 291, 393, 534, 17987, 5380, 264, 4691, 51186, 51186, 3331, 295, 498, 309, 311, 257, 8341, 4195, 420, 364, 24236, 4195, 420, 2035, 11, 437, 311, 264, 19883, 30, 708, 51607, 51607, 366, 264, 19883, 32723, 30, 51700, 51700], "temperature": 0.0, "avg_logprob": -0.11750332032791291, "compression_ratio": 1.7695852534562213, "no_caption_prob": 5.064239303465001e-05}, {"id": 545, "seek": 314926, "start": 3159.4, "end": 3165.7000000000003, "text": " to test that. Maybe there's a unit test where you can really thoroughly exercise the edge", "tokens": [50364, 281, 3565, 294, 382, 341, 733, 295, 4195, 11, 300, 733, 295, 4195, 11, 300, 733, 295, 4195, 11, 293, 550, 291, 1500, 50543, 50543, 2319, 4691, 3331, 322, 341, 472, 644, 295, 264, 3028, 11, 457, 291, 362, 281, 12350, 294, 1266, 7183, 2452, 50871, 50871, 281, 1500, 300, 13, 2704, 456, 311, 257, 4985, 1500, 689, 291, 393, 534, 17987, 5380, 264, 4691, 51186, 51186, 3331, 295, 498, 309, 311, 257, 8341, 4195, 420, 364, 24236, 4195, 420, 2035, 11, 437, 311, 264, 19883, 30, 708, 51607, 51607, 366, 264, 19883, 32723, 30, 51700, 51700], "temperature": 0.0, "avg_logprob": -0.11750332032791291, "compression_ratio": 1.7695852534562213, "no_caption_prob": 5.064239303465001e-05}, {"id": 546, "seek": 314926, "start": 3165.7000000000003, "end": 3174.1200000000003, "text": " cases of if it's a guest user or an admin user or whatever, what's the visibility? What", "tokens": [50364, 281, 3565, 294, 382, 341, 733, 295, 4195, 11, 300, 733, 295, 4195, 11, 300, 733, 295, 4195, 11, 293, 550, 291, 1500, 50543, 50543, 2319, 4691, 3331, 322, 341, 472, 644, 295, 264, 3028, 11, 457, 291, 362, 281, 12350, 294, 1266, 7183, 2452, 50871, 50871, 281, 1500, 300, 13, 2704, 456, 311, 257, 4985, 1500, 689, 291, 393, 534, 17987, 5380, 264, 4691, 51186, 51186, 3331, 295, 498, 309, 311, 257, 8341, 4195, 420, 364, 24236, 4195, 420, 2035, 11, 437, 311, 264, 19883, 30, 708, 51607, 51607, 366, 264, 19883, 32723, 30, 51700, 51700], "temperature": 0.0, "avg_logprob": -0.11750332032791291, "compression_ratio": 1.7695852534562213, "no_caption_prob": 5.064239303465001e-05}, {"id": 547, "seek": 314926, "start": 3174.1200000000003, "end": 3175.98, "text": " are the visibility permissions?", "tokens": [50364, 281, 3565, 294, 382, 341, 733, 295, 4195, 11, 300, 733, 295, 4195, 11, 300, 733, 295, 4195, 11, 293, 550, 291, 1500, 50543, 50543, 2319, 4691, 3331, 322, 341, 472, 644, 295, 264, 3028, 11, 457, 291, 362, 281, 12350, 294, 1266, 7183, 2452, 50871, 50871, 281, 1500, 300, 13, 2704, 456, 311, 257, 4985, 1500, 689, 291, 393, 534, 17987, 5380, 264, 4691, 51186, 51186, 3331, 295, 498, 309, 311, 257, 8341, 4195, 420, 364, 24236, 4195, 420, 2035, 11, 437, 311, 264, 19883, 30, 708, 51607, 51607, 366, 264, 19883, 32723, 30, 51700, 51700], "temperature": 0.0, "avg_logprob": -0.11750332032791291, "compression_ratio": 1.7695852534562213, "no_caption_prob": 5.064239303465001e-05}, {"id": 548, "seek": 317598, "start": 3175.98, "end": 3180.46, "text": " And then you have one end to end test or a couple of end to end tests that exercise that", "tokens": [50364, 400, 550, 291, 362, 472, 917, 281, 917, 1500, 420, 257, 1916, 295, 917, 281, 917, 6921, 300, 5380, 300, 50588, 50588, 293, 652, 988, 291, 6451, 393, 787, 536, 7183, 300, 291, 362, 11226, 281, 1910, 13, 509, 393, 380, 50837, 50837, 536, 264, 24236, 4831, 498, 291, 434, 257, 8341, 420, 257, 3890, 4195, 420, 2035, 11, 457, 291, 528, 281, 51045, 51045, 17987, 5380, 439, 295, 729, 4784, 325, 763, 294, 4985, 6921, 13, 663, 311, 437, 4985, 6921, 366, 51237, 51237, 869, 337, 13, 400, 498, 264, 11420, 2962, 6063, 11, 291, 393, 3507, 729, 6921, 1314, 13, 467, 311, 51553, 51553, 406, 257, 955, 2028, 11, 457, 309, 311, 1481, 281, 362, 512, 6687, 300, 264, 4195, 307, 516, 281, 536, 721, 51841, 51841], "temperature": 0.0, "avg_logprob": -0.07443732341737237, "compression_ratio": 1.824742268041237, "no_caption_prob": 1.1125377568532713e-05}, {"id": 549, "seek": 317598, "start": 3180.46, "end": 3185.44, "text": " and make sure you indeed can only see pages that you have permission to view. You can't", "tokens": [50364, 400, 550, 291, 362, 472, 917, 281, 917, 1500, 420, 257, 1916, 295, 917, 281, 917, 6921, 300, 5380, 300, 50588, 50588, 293, 652, 988, 291, 6451, 393, 787, 536, 7183, 300, 291, 362, 11226, 281, 1910, 13, 509, 393, 380, 50837, 50837, 536, 264, 24236, 4831, 498, 291, 434, 257, 8341, 420, 257, 3890, 4195, 420, 2035, 11, 457, 291, 528, 281, 51045, 51045, 17987, 5380, 439, 295, 729, 4784, 325, 763, 294, 4985, 6921, 13, 663, 311, 437, 4985, 6921, 366, 51237, 51237, 869, 337, 13, 400, 498, 264, 11420, 2962, 6063, 11, 291, 393, 3507, 729, 6921, 1314, 13, 467, 311, 51553, 51553, 406, 257, 955, 2028, 11, 457, 309, 311, 1481, 281, 362, 512, 6687, 300, 264, 4195, 307, 516, 281, 536, 721, 51841, 51841], "temperature": 0.0, "avg_logprob": -0.07443732341737237, "compression_ratio": 1.824742268041237, "no_caption_prob": 1.1125377568532713e-05}, {"id": 550, "seek": 317598, "start": 3185.44, "end": 3189.6, "text": " see the admin panel if you're a guest or a regular user or whatever, but you want to", "tokens": [50364, 400, 550, 291, 362, 472, 917, 281, 917, 1500, 420, 257, 1916, 295, 917, 281, 917, 6921, 300, 5380, 300, 50588, 50588, 293, 652, 988, 291, 6451, 393, 787, 536, 7183, 300, 291, 362, 11226, 281, 1910, 13, 509, 393, 380, 50837, 50837, 536, 264, 24236, 4831, 498, 291, 434, 257, 8341, 420, 257, 3890, 4195, 420, 2035, 11, 457, 291, 528, 281, 51045, 51045, 17987, 5380, 439, 295, 729, 4784, 325, 763, 294, 4985, 6921, 13, 663, 311, 437, 4985, 6921, 366, 51237, 51237, 869, 337, 13, 400, 498, 264, 11420, 2962, 6063, 11, 291, 393, 3507, 729, 6921, 1314, 13, 467, 311, 51553, 51553, 406, 257, 955, 2028, 11, 457, 309, 311, 1481, 281, 362, 512, 6687, 300, 264, 4195, 307, 516, 281, 536, 721, 51841, 51841], "temperature": 0.0, "avg_logprob": -0.07443732341737237, "compression_ratio": 1.824742268041237, "no_caption_prob": 1.1125377568532713e-05}, {"id": 551, "seek": 317598, "start": 3189.6, "end": 3193.44, "text": " thoroughly exercise all of those permutations in unit tests. That's what unit tests are", "tokens": [50364, 400, 550, 291, 362, 472, 917, 281, 917, 1500, 420, 257, 1916, 295, 917, 281, 917, 6921, 300, 5380, 300, 50588, 50588, 293, 652, 988, 291, 6451, 393, 787, 536, 7183, 300, 291, 362, 11226, 281, 1910, 13, 509, 393, 380, 50837, 50837, 536, 264, 24236, 4831, 498, 291, 434, 257, 8341, 420, 257, 3890, 4195, 420, 2035, 11, 457, 291, 528, 281, 51045, 51045, 17987, 5380, 439, 295, 729, 4784, 325, 763, 294, 4985, 6921, 13, 663, 311, 437, 4985, 6921, 366, 51237, 51237, 869, 337, 13, 400, 498, 264, 11420, 2962, 6063, 11, 291, 393, 3507, 729, 6921, 1314, 13, 467, 311, 51553, 51553, 406, 257, 955, 2028, 11, 457, 309, 311, 1481, 281, 362, 512, 6687, 300, 264, 4195, 307, 516, 281, 536, 721, 51841, 51841], "temperature": 0.0, "avg_logprob": -0.07443732341737237, "compression_ratio": 1.824742268041237, "no_caption_prob": 1.1125377568532713e-05}, {"id": 552, "seek": 317598, "start": 3193.44, "end": 3199.76, "text": " great for. And if the implementation changes somehow, you can throw those tests away. It's", "tokens": [50364, 400, 550, 291, 362, 472, 917, 281, 917, 1500, 420, 257, 1916, 295, 917, 281, 917, 6921, 300, 5380, 300, 50588, 50588, 293, 652, 988, 291, 6451, 393, 787, 536, 7183, 300, 291, 362, 11226, 281, 1910, 13, 509, 393, 380, 50837, 50837, 536, 264, 24236, 4831, 498, 291, 434, 257, 8341, 420, 257, 3890, 4195, 420, 2035, 11, 457, 291, 528, 281, 51045, 51045, 17987, 5380, 439, 295, 729, 4784, 325, 763, 294, 4985, 6921, 13, 663, 311, 437, 4985, 6921, 366, 51237, 51237, 869, 337, 13, 400, 498, 264, 11420, 2962, 6063, 11, 291, 393, 3507, 729, 6921, 1314, 13, 467, 311, 51553, 51553, 406, 257, 955, 2028, 11, 457, 309, 311, 1481, 281, 362, 512, 6687, 300, 264, 4195, 307, 516, 281, 536, 721, 51841, 51841], "temperature": 0.0, "avg_logprob": -0.07443732341737237, "compression_ratio": 1.824742268041237, "no_caption_prob": 1.1125377568532713e-05}, {"id": 553, "seek": 317598, "start": 3199.76, "end": 3205.52, "text": " not a big deal, but it's nice to have some confidence that the user is going to see things", "tokens": [50364, 400, 550, 291, 362, 472, 917, 281, 917, 1500, 420, 257, 1916, 295, 917, 281, 917, 6921, 300, 5380, 300, 50588, 50588, 293, 652, 988, 291, 6451, 393, 787, 536, 7183, 300, 291, 362, 11226, 281, 1910, 13, 509, 393, 380, 50837, 50837, 536, 264, 24236, 4831, 498, 291, 434, 257, 8341, 420, 257, 3890, 4195, 420, 2035, 11, 457, 291, 528, 281, 51045, 51045, 17987, 5380, 439, 295, 729, 4784, 325, 763, 294, 4985, 6921, 13, 663, 311, 437, 4985, 6921, 366, 51237, 51237, 869, 337, 13, 400, 498, 264, 11420, 2962, 6063, 11, 291, 393, 3507, 729, 6921, 1314, 13, 467, 311, 51553, 51553, 406, 257, 955, 2028, 11, 457, 309, 311, 1481, 281, 362, 512, 6687, 300, 264, 4195, 307, 516, 281, 536, 721, 51841, 51841], "temperature": 0.0, "avg_logprob": -0.07443732341737237, "compression_ratio": 1.824742268041237, "no_caption_prob": 1.1125377568532713e-05}, {"id": 554, "seek": 320552, "start": 3205.52, "end": 3210.9, "text": " working correctly because it's actually exercising that code that your unit test is testing.", "tokens": [50364, 1364, 8944, 570, 309, 311, 767, 27272, 300, 3089, 300, 428, 4985, 1500, 307, 4997, 13, 50633, 50633, 583, 294, 2115, 295, 820, 291, 1500, 2154, 1124, 295, 2699, 76, 16679, 11, 286, 588, 709, 3986, 300, 286, 519, 50896, 50896, 309, 311, 257, 4111, 300, 291, 393, 380, 2464, 2699, 76, 4985, 6921, 295, 6920, 4551, 721, 13, 286, 500, 380, 51256, 51256, 519, 300, 3109, 1669, 2020, 281, 385, 13, 286, 519, 295, 309, 382, 498, 291, 915, 1803, 7935, 281, 1500, 51516, 51516, 264, 2154, 1124, 295, 472, 10088, 11, 550, 437, 300, 311, 1566, 307, 309, 12953, 382, 1080, 1065, 6357, 13, 51832, 51832], "temperature": 0.0, "avg_logprob": -0.09896736145019532, "compression_ratio": 1.77734375, "no_caption_prob": 1.4285360521171242e-05}, {"id": 555, "seek": 320552, "start": 3210.9, "end": 3216.16, "text": " But in terms of should you test internals of Elm modules, I very much agree that I think", "tokens": [50364, 1364, 8944, 570, 309, 311, 767, 27272, 300, 3089, 300, 428, 4985, 1500, 307, 4997, 13, 50633, 50633, 583, 294, 2115, 295, 820, 291, 1500, 2154, 1124, 295, 2699, 76, 16679, 11, 286, 588, 709, 3986, 300, 286, 519, 50896, 50896, 309, 311, 257, 4111, 300, 291, 393, 380, 2464, 2699, 76, 4985, 6921, 295, 6920, 4551, 721, 13, 286, 500, 380, 51256, 51256, 519, 300, 3109, 1669, 2020, 281, 385, 13, 286, 519, 295, 309, 382, 498, 291, 915, 1803, 7935, 281, 1500, 51516, 51516, 264, 2154, 1124, 295, 472, 10088, 11, 550, 437, 300, 311, 1566, 307, 309, 12953, 382, 1080, 1065, 6357, 13, 51832, 51832], "temperature": 0.0, "avg_logprob": -0.09896736145019532, "compression_ratio": 1.77734375, "no_caption_prob": 1.4285360521171242e-05}, {"id": 556, "seek": 320552, "start": 3216.16, "end": 3223.36, "text": " it's a feature that you can't write Elm unit tests of internal private things. I don't", "tokens": [50364, 1364, 8944, 570, 309, 311, 767, 27272, 300, 3089, 300, 428, 4985, 1500, 307, 4997, 13, 50633, 50633, 583, 294, 2115, 295, 820, 291, 1500, 2154, 1124, 295, 2699, 76, 16679, 11, 286, 588, 709, 3986, 300, 286, 519, 50896, 50896, 309, 311, 257, 4111, 300, 291, 393, 380, 2464, 2699, 76, 4985, 6921, 295, 6920, 4551, 721, 13, 286, 500, 380, 51256, 51256, 519, 300, 3109, 1669, 2020, 281, 385, 13, 286, 519, 295, 309, 382, 498, 291, 915, 1803, 7935, 281, 1500, 51516, 51516, 264, 2154, 1124, 295, 472, 10088, 11, 550, 437, 300, 311, 1566, 307, 309, 12953, 382, 1080, 1065, 6357, 13, 51832, 51832], "temperature": 0.0, "avg_logprob": -0.09896736145019532, "compression_ratio": 1.77734375, "no_caption_prob": 1.4285360521171242e-05}, {"id": 557, "seek": 320552, "start": 3223.36, "end": 3228.56, "text": " think that approach makes sense to me. I think of it as if you find yourself wanting to test", "tokens": [50364, 1364, 8944, 570, 309, 311, 767, 27272, 300, 3089, 300, 428, 4985, 1500, 307, 4997, 13, 50633, 50633, 583, 294, 2115, 295, 820, 291, 1500, 2154, 1124, 295, 2699, 76, 16679, 11, 286, 588, 709, 3986, 300, 286, 519, 50896, 50896, 309, 311, 257, 4111, 300, 291, 393, 380, 2464, 2699, 76, 4985, 6921, 295, 6920, 4551, 721, 13, 286, 500, 380, 51256, 51256, 519, 300, 3109, 1669, 2020, 281, 385, 13, 286, 519, 295, 309, 382, 498, 291, 915, 1803, 7935, 281, 1500, 51516, 51516, 264, 2154, 1124, 295, 472, 10088, 11, 550, 437, 300, 311, 1566, 307, 309, 12953, 382, 1080, 1065, 6357, 13, 51832, 51832], "temperature": 0.0, "avg_logprob": -0.09896736145019532, "compression_ratio": 1.77734375, "no_caption_prob": 1.4285360521171242e-05}, {"id": 558, "seek": 320552, "start": 3228.56, "end": 3234.88, "text": " the internals of one module, then what that's saying is it belongs as its own responsibility.", "tokens": [50364, 1364, 8944, 570, 309, 311, 767, 27272, 300, 3089, 300, 428, 4985, 1500, 307, 4997, 13, 50633, 50633, 583, 294, 2115, 295, 820, 291, 1500, 2154, 1124, 295, 2699, 76, 16679, 11, 286, 588, 709, 3986, 300, 286, 519, 50896, 50896, 309, 311, 257, 4111, 300, 291, 393, 380, 2464, 2699, 76, 4985, 6921, 295, 6920, 4551, 721, 13, 286, 500, 380, 51256, 51256, 519, 300, 3109, 1669, 2020, 281, 385, 13, 286, 519, 295, 309, 382, 498, 291, 915, 1803, 7935, 281, 1500, 51516, 51516, 264, 2154, 1124, 295, 472, 10088, 11, 550, 437, 300, 311, 1566, 307, 309, 12953, 382, 1080, 1065, 6357, 13, 51832, 51832], "temperature": 0.0, "avg_logprob": -0.09896736145019532, "compression_ratio": 1.77734375, "no_caption_prob": 1.4285360521171242e-05}, {"id": 559, "seek": 323488, "start": 3234.88, "end": 3240.88, "text": " I think about code often in terms of responsibility. Should this really be the job of the admin", "tokens": [50364, 286, 519, 466, 3089, 2049, 294, 2115, 295, 6357, 13, 6454, 341, 534, 312, 264, 1691, 295, 264, 24236, 50664, 50664, 32588, 11, 411, 264, 24236, 10088, 281, 458, 1968, 286, 362, 2105, 281, 341, 420, 406, 30, 1610, 820, 50999, 50999, 309, 312, 1080, 1065, 10088, 300, 5112, 437, 291, 362, 2105, 281, 30, 2704, 300, 12953, 382, 1080, 1065, 6357, 13, 51350, 51350, 400, 1310, 264, 1186, 300, 286, 478, 1382, 281, 1500, 341, 2445, 411, 24236, 575, 2105, 281, 300, 311, 51686, 51686], "temperature": 0.0, "avg_logprob": -0.11649624867872758, "compression_ratio": 1.7453703703703705, "no_caption_prob": 7.646428457519505e-06}, {"id": 560, "seek": 323488, "start": 3240.88, "end": 3247.58, "text": " privileges, like the admin module to know whether I have access to this or not? Or should", "tokens": [50364, 286, 519, 466, 3089, 2049, 294, 2115, 295, 6357, 13, 6454, 341, 534, 312, 264, 1691, 295, 264, 24236, 50664, 50664, 32588, 11, 411, 264, 24236, 10088, 281, 458, 1968, 286, 362, 2105, 281, 341, 420, 406, 30, 1610, 820, 50999, 50999, 309, 312, 1080, 1065, 10088, 300, 5112, 437, 291, 362, 2105, 281, 30, 2704, 300, 12953, 382, 1080, 1065, 6357, 13, 51350, 51350, 400, 1310, 264, 1186, 300, 286, 478, 1382, 281, 1500, 341, 2445, 411, 24236, 575, 2105, 281, 300, 311, 51686, 51686], "temperature": 0.0, "avg_logprob": -0.11649624867872758, "compression_ratio": 1.7453703703703705, "no_caption_prob": 7.646428457519505e-06}, {"id": 561, "seek": 323488, "start": 3247.58, "end": 3254.6, "text": " it be its own module that tells what you have access to? Maybe that belongs as its own responsibility.", "tokens": [50364, 286, 519, 466, 3089, 2049, 294, 2115, 295, 6357, 13, 6454, 341, 534, 312, 264, 1691, 295, 264, 24236, 50664, 50664, 32588, 11, 411, 264, 24236, 10088, 281, 458, 1968, 286, 362, 2105, 281, 341, 420, 406, 30, 1610, 820, 50999, 50999, 309, 312, 1080, 1065, 10088, 300, 5112, 437, 291, 362, 2105, 281, 30, 2704, 300, 12953, 382, 1080, 1065, 6357, 13, 51350, 51350, 400, 1310, 264, 1186, 300, 286, 478, 1382, 281, 1500, 341, 2445, 411, 24236, 575, 2105, 281, 300, 311, 51686, 51686], "temperature": 0.0, "avg_logprob": -0.11649624867872758, "compression_ratio": 1.7453703703703705, "no_caption_prob": 7.646428457519505e-06}, {"id": 562, "seek": 323488, "start": 3254.6, "end": 3261.32, "text": " And maybe the fact that I'm trying to test this function like admin has access to that's", "tokens": [50364, 286, 519, 466, 3089, 2049, 294, 2115, 295, 6357, 13, 6454, 341, 534, 312, 264, 1691, 295, 264, 24236, 50664, 50664, 32588, 11, 411, 264, 24236, 10088, 281, 458, 1968, 286, 362, 2105, 281, 341, 420, 406, 30, 1610, 820, 50999, 50999, 309, 312, 1080, 1065, 10088, 300, 5112, 437, 291, 362, 2105, 281, 30, 2704, 300, 12953, 382, 1080, 1065, 6357, 13, 51350, 51350, 400, 1310, 264, 1186, 300, 286, 478, 1382, 281, 1500, 341, 2445, 411, 24236, 575, 2105, 281, 300, 311, 51686, 51686], "temperature": 0.0, "avg_logprob": -0.11649624867872758, "compression_ratio": 1.7453703703703705, "no_caption_prob": 7.646428457519505e-06}, {"id": 563, "seek": 326132, "start": 3261.32, "end": 3266.36, "text": " like a private function in this module means that it wants to be its own responsibility", "tokens": [50364, 411, 257, 4551, 2445, 294, 341, 10088, 1355, 300, 309, 2738, 281, 312, 1080, 1065, 6357, 50616, 50616, 293, 309, 2738, 281, 312, 8246, 14759, 293, 294, 257, 4994, 10088, 13, 286, 519, 257, 688, 295, 1500, 1808, 50884, 50884, 3250, 307, 466, 11, 309, 311, 406, 257, 5585, 11632, 13, 467, 1177, 380, 3191, 428, 1715, 13, 467, 1177, 380, 652, 51181, 51181, 428, 3089, 1481, 420, 652, 428, 3089, 589, 13, 51292, 51292, 8590, 13, 51342, 51342, 8590, 11, 457, 309, 775, 19219, 2663, 293, 550, 291, 362, 281, 1689, 3202, 281, 264, 12354, 51630, 51630], "temperature": 0.0, "avg_logprob": -0.13188111305236816, "compression_ratio": 1.7801724137931034, "no_caption_prob": 1.54458248289302e-05}, {"id": 564, "seek": 326132, "start": 3266.36, "end": 3271.7200000000003, "text": " and it wants to be tested separately and in a separate module. I think a lot of test room", "tokens": [50364, 411, 257, 4551, 2445, 294, 341, 10088, 1355, 300, 309, 2738, 281, 312, 1080, 1065, 6357, 50616, 50616, 293, 309, 2738, 281, 312, 8246, 14759, 293, 294, 257, 4994, 10088, 13, 286, 519, 257, 688, 295, 1500, 1808, 50884, 50884, 3250, 307, 466, 11, 309, 311, 406, 257, 5585, 11632, 13, 467, 1177, 380, 3191, 428, 1715, 13, 467, 1177, 380, 652, 51181, 51181, 428, 3089, 1481, 420, 652, 428, 3089, 589, 13, 51292, 51292, 8590, 13, 51342, 51342, 8590, 11, 457, 309, 775, 19219, 2663, 293, 550, 291, 362, 281, 1689, 3202, 281, 264, 12354, 51630, 51630], "temperature": 0.0, "avg_logprob": -0.13188111305236816, "compression_ratio": 1.7801724137931034, "no_caption_prob": 1.54458248289302e-05}, {"id": 565, "seek": 326132, "start": 3271.7200000000003, "end": 3277.6600000000003, "text": " development is about, it's not a magic bullet. It doesn't fix your design. It doesn't make", "tokens": [50364, 411, 257, 4551, 2445, 294, 341, 10088, 1355, 300, 309, 2738, 281, 312, 1080, 1065, 6357, 50616, 50616, 293, 309, 2738, 281, 312, 8246, 14759, 293, 294, 257, 4994, 10088, 13, 286, 519, 257, 688, 295, 1500, 1808, 50884, 50884, 3250, 307, 466, 11, 309, 311, 406, 257, 5585, 11632, 13, 467, 1177, 380, 3191, 428, 1715, 13, 467, 1177, 380, 652, 51181, 51181, 428, 3089, 1481, 420, 652, 428, 3089, 589, 13, 51292, 51292, 8590, 13, 51342, 51342, 8590, 11, 457, 309, 775, 19219, 2663, 293, 550, 291, 362, 281, 1689, 3202, 281, 264, 12354, 51630, 51630], "temperature": 0.0, "avg_logprob": -0.13188111305236816, "compression_ratio": 1.7801724137931034, "no_caption_prob": 1.54458248289302e-05}, {"id": 566, "seek": 326132, "start": 3277.6600000000003, "end": 3279.88, "text": " your code nice or make your code work.", "tokens": [50364, 411, 257, 4551, 2445, 294, 341, 10088, 1355, 300, 309, 2738, 281, 312, 1080, 1065, 6357, 50616, 50616, 293, 309, 2738, 281, 312, 8246, 14759, 293, 294, 257, 4994, 10088, 13, 286, 519, 257, 688, 295, 1500, 1808, 50884, 50884, 3250, 307, 466, 11, 309, 311, 406, 257, 5585, 11632, 13, 467, 1177, 380, 3191, 428, 1715, 13, 467, 1177, 380, 652, 51181, 51181, 428, 3089, 1481, 420, 652, 428, 3089, 589, 13, 51292, 51292, 8590, 13, 51342, 51342, 8590, 11, 457, 309, 775, 19219, 2663, 293, 550, 291, 362, 281, 1689, 3202, 281, 264, 12354, 51630, 51630], "temperature": 0.0, "avg_logprob": -0.13188111305236816, "compression_ratio": 1.7801724137931034, "no_caption_prob": 1.54458248289302e-05}, {"id": 567, "seek": 326132, "start": 3279.88, "end": 3280.88, "text": " Unfortunately.", "tokens": [50364, 411, 257, 4551, 2445, 294, 341, 10088, 1355, 300, 309, 2738, 281, 312, 1080, 1065, 6357, 50616, 50616, 293, 309, 2738, 281, 312, 8246, 14759, 293, 294, 257, 4994, 10088, 13, 286, 519, 257, 688, 295, 1500, 1808, 50884, 50884, 3250, 307, 466, 11, 309, 311, 406, 257, 5585, 11632, 13, 467, 1177, 380, 3191, 428, 1715, 13, 467, 1177, 380, 652, 51181, 51181, 428, 3089, 1481, 420, 652, 428, 3089, 589, 13, 51292, 51292, 8590, 13, 51342, 51342, 8590, 11, 457, 309, 775, 19219, 2663, 293, 550, 291, 362, 281, 1689, 3202, 281, 264, 12354, 51630, 51630], "temperature": 0.0, "avg_logprob": -0.13188111305236816, "compression_ratio": 1.7801724137931034, "no_caption_prob": 1.54458248289302e-05}, {"id": 568, "seek": 326132, "start": 3280.88, "end": 3286.6400000000003, "text": " Unfortunately, but it does expose issues and then you have to pay attention to the signals", "tokens": [50364, 411, 257, 4551, 2445, 294, 341, 10088, 1355, 300, 309, 2738, 281, 312, 1080, 1065, 6357, 50616, 50616, 293, 309, 2738, 281, 312, 8246, 14759, 293, 294, 257, 4994, 10088, 13, 286, 519, 257, 688, 295, 1500, 1808, 50884, 50884, 3250, 307, 466, 11, 309, 311, 406, 257, 5585, 11632, 13, 467, 1177, 380, 3191, 428, 1715, 13, 467, 1177, 380, 652, 51181, 51181, 428, 3089, 1481, 420, 652, 428, 3089, 589, 13, 51292, 51292, 8590, 13, 51342, 51342, 8590, 11, 457, 309, 775, 19219, 2663, 293, 550, 291, 362, 281, 1689, 3202, 281, 264, 12354, 51630, 51630], "temperature": 0.0, "avg_logprob": -0.13188111305236816, "compression_ratio": 1.7801724137931034, "no_caption_prob": 1.54458248289302e-05}, {"id": 569, "seek": 328664, "start": 3286.64, "end": 3292.56, "text": " it's giving you. So if something is uncomfortable, that might be a design smell. That might mean,", "tokens": [50364, 309, 311, 2902, 291, 13, 407, 498, 746, 307, 10532, 11, 300, 1062, 312, 257, 1715, 4316, 13, 663, 1062, 914, 11, 50660, 50660, 1911, 11, 341, 3089, 307, 1152, 281, 1500, 13, 1042, 11, 437, 311, 300, 3585, 385, 466, 452, 1715, 30, 492, 2825, 50915, 50915, 466, 917, 281, 917, 4997, 11, 457, 321, 994, 380, 534, 751, 466, 577, 291, 576, 360, 300, 294, 2699, 76, 13, 286, 51150, 51150, 519, 2171, 562, 561, 519, 466, 4997, 2699, 76, 11, 411, 321, 434, 370, 1143, 281, 2647, 1951, 264, 51435, 51435, 2699, 76, 11311, 293, 321, 500, 380, 528, 281, 352, 2380, 295, 309, 11, 457, 286, 519, 309, 311, 3163, 445, 26688, 51707, 51707], "temperature": 0.0, "avg_logprob": -0.09133795102437338, "compression_ratio": 1.705223880597015, "no_caption_prob": 9.91417036857456e-05}, {"id": 570, "seek": 328664, "start": 3292.56, "end": 3297.66, "text": " Hey, this code is hard to test. Well, what's that telling me about my design? We talked", "tokens": [50364, 309, 311, 2902, 291, 13, 407, 498, 746, 307, 10532, 11, 300, 1062, 312, 257, 1715, 4316, 13, 663, 1062, 914, 11, 50660, 50660, 1911, 11, 341, 3089, 307, 1152, 281, 1500, 13, 1042, 11, 437, 311, 300, 3585, 385, 466, 452, 1715, 30, 492, 2825, 50915, 50915, 466, 917, 281, 917, 4997, 11, 457, 321, 994, 380, 534, 751, 466, 577, 291, 576, 360, 300, 294, 2699, 76, 13, 286, 51150, 51150, 519, 2171, 562, 561, 519, 466, 4997, 2699, 76, 11, 411, 321, 434, 370, 1143, 281, 2647, 1951, 264, 51435, 51435, 2699, 76, 11311, 293, 321, 500, 380, 528, 281, 352, 2380, 295, 309, 11, 457, 286, 519, 309, 311, 3163, 445, 26688, 51707, 51707], "temperature": 0.0, "avg_logprob": -0.09133795102437338, "compression_ratio": 1.705223880597015, "no_caption_prob": 9.91417036857456e-05}, {"id": 571, "seek": 328664, "start": 3297.66, "end": 3302.3599999999997, "text": " about end to end testing, but we didn't really talk about how you would do that in Elm. I", "tokens": [50364, 309, 311, 2902, 291, 13, 407, 498, 746, 307, 10532, 11, 300, 1062, 312, 257, 1715, 4316, 13, 663, 1062, 914, 11, 50660, 50660, 1911, 11, 341, 3089, 307, 1152, 281, 1500, 13, 1042, 11, 437, 311, 300, 3585, 385, 466, 452, 1715, 30, 492, 2825, 50915, 50915, 466, 917, 281, 917, 4997, 11, 457, 321, 994, 380, 534, 751, 466, 577, 291, 576, 360, 300, 294, 2699, 76, 13, 286, 51150, 51150, 519, 2171, 562, 561, 519, 466, 4997, 2699, 76, 11, 411, 321, 434, 370, 1143, 281, 2647, 1951, 264, 51435, 51435, 2699, 76, 11311, 293, 321, 500, 380, 528, 281, 352, 2380, 295, 309, 11, 457, 286, 519, 309, 311, 3163, 445, 26688, 51707, 51707], "temperature": 0.0, "avg_logprob": -0.09133795102437338, "compression_ratio": 1.705223880597015, "no_caption_prob": 9.91417036857456e-05}, {"id": 572, "seek": 328664, "start": 3302.3599999999997, "end": 3308.06, "text": " think sometimes when people think about testing Elm, like we're so used to living within the", "tokens": [50364, 309, 311, 2902, 291, 13, 407, 498, 746, 307, 10532, 11, 300, 1062, 312, 257, 1715, 4316, 13, 663, 1062, 914, 11, 50660, 50660, 1911, 11, 341, 3089, 307, 1152, 281, 1500, 13, 1042, 11, 437, 311, 300, 3585, 385, 466, 452, 1715, 30, 492, 2825, 50915, 50915, 466, 917, 281, 917, 4997, 11, 457, 321, 994, 380, 534, 751, 466, 577, 291, 576, 360, 300, 294, 2699, 76, 13, 286, 51150, 51150, 519, 2171, 562, 561, 519, 466, 4997, 2699, 76, 11, 411, 321, 434, 370, 1143, 281, 2647, 1951, 264, 51435, 51435, 2699, 76, 11311, 293, 321, 500, 380, 528, 281, 352, 2380, 295, 309, 11, 457, 286, 519, 309, 311, 3163, 445, 26688, 51707, 51707], "temperature": 0.0, "avg_logprob": -0.09133795102437338, "compression_ratio": 1.705223880597015, "no_caption_prob": 9.91417036857456e-05}, {"id": 573, "seek": 328664, "start": 3308.06, "end": 3313.5, "text": " Elm ecosystem and we don't want to go outside of it, but I think it's worth just stating", "tokens": [50364, 309, 311, 2902, 291, 13, 407, 498, 746, 307, 10532, 11, 300, 1062, 312, 257, 1715, 4316, 13, 663, 1062, 914, 11, 50660, 50660, 1911, 11, 341, 3089, 307, 1152, 281, 1500, 13, 1042, 11, 437, 311, 300, 3585, 385, 466, 452, 1715, 30, 492, 2825, 50915, 50915, 466, 917, 281, 917, 4997, 11, 457, 321, 994, 380, 534, 751, 466, 577, 291, 576, 360, 300, 294, 2699, 76, 13, 286, 51150, 51150, 519, 2171, 562, 561, 519, 466, 4997, 2699, 76, 11, 411, 321, 434, 370, 1143, 281, 2647, 1951, 264, 51435, 51435, 2699, 76, 11311, 293, 321, 500, 380, 528, 281, 352, 2380, 295, 309, 11, 457, 286, 519, 309, 311, 3163, 445, 26688, 51707, 51707], "temperature": 0.0, "avg_logprob": -0.09133795102437338, "compression_ratio": 1.705223880597015, "no_caption_prob": 9.91417036857456e-05}, {"id": 574, "seek": 331350, "start": 3313.5, "end": 3321.28, "text": " that it's okay to use non Elm tools to test Elm code. For example, you can use Cypress", "tokens": [50364, 300, 309, 311, 1392, 281, 764, 2107, 2699, 76, 3873, 281, 1500, 2699, 76, 3089, 13, 1171, 1365, 11, 291, 393, 764, 10295, 11637, 50753, 50753, 281, 5380, 11, 291, 458, 11, 281, 2235, 493, 257, 11185, 293, 722, 9697, 926, 293, 291, 458, 11, 291, 51053, 51053, 1062, 362, 281, 2464, 512, 15778, 293, 652, 512, 19810, 626, 456, 11, 457, 309, 311, 1392, 13, 1743, 51339, 51339, 764, 264, 1151, 2290, 337, 264, 1691, 13, 51415, 51415, 865, 13, 286, 959, 10295, 11637, 13, 286, 915, 309, 588, 665, 13, 286, 478, 588, 2597, 300, 286, 600, 1128, 632, 264, 2931, 51699, 51699], "temperature": 0.0, "avg_logprob": -0.14502382724084587, "compression_ratio": 1.5916666666666666, "no_caption_prob": 1.4063890375837218e-05}, {"id": 575, "seek": 331350, "start": 3321.28, "end": 3327.28, "text": " to exercise, you know, to pull up a browser and start clicking around and you know, you", "tokens": [50364, 300, 309, 311, 1392, 281, 764, 2107, 2699, 76, 3873, 281, 1500, 2699, 76, 3089, 13, 1171, 1365, 11, 291, 393, 764, 10295, 11637, 50753, 50753, 281, 5380, 11, 291, 458, 11, 281, 2235, 493, 257, 11185, 293, 722, 9697, 926, 293, 291, 458, 11, 291, 51053, 51053, 1062, 362, 281, 2464, 512, 15778, 293, 652, 512, 19810, 626, 456, 11, 457, 309, 311, 1392, 13, 1743, 51339, 51339, 764, 264, 1151, 2290, 337, 264, 1691, 13, 51415, 51415, 865, 13, 286, 959, 10295, 11637, 13, 286, 915, 309, 588, 665, 13, 286, 478, 588, 2597, 300, 286, 600, 1128, 632, 264, 2931, 51699, 51699], "temperature": 0.0, "avg_logprob": -0.14502382724084587, "compression_ratio": 1.5916666666666666, "no_caption_prob": 1.4063890375837218e-05}, {"id": 576, "seek": 331350, "start": 3327.28, "end": 3333.0, "text": " might have to write some JavaScript and make some assertions there, but it's okay. Like", "tokens": [50364, 300, 309, 311, 1392, 281, 764, 2107, 2699, 76, 3873, 281, 1500, 2699, 76, 3089, 13, 1171, 1365, 11, 291, 393, 764, 10295, 11637, 50753, 50753, 281, 5380, 11, 291, 458, 11, 281, 2235, 493, 257, 11185, 293, 722, 9697, 926, 293, 291, 458, 11, 291, 51053, 51053, 1062, 362, 281, 2464, 512, 15778, 293, 652, 512, 19810, 626, 456, 11, 457, 309, 311, 1392, 13, 1743, 51339, 51339, 764, 264, 1151, 2290, 337, 264, 1691, 13, 51415, 51415, 865, 13, 286, 959, 10295, 11637, 13, 286, 915, 309, 588, 665, 13, 286, 478, 588, 2597, 300, 286, 600, 1128, 632, 264, 2931, 51699, 51699], "temperature": 0.0, "avg_logprob": -0.14502382724084587, "compression_ratio": 1.5916666666666666, "no_caption_prob": 1.4063890375837218e-05}, {"id": 577, "seek": 331350, "start": 3333.0, "end": 3334.52, "text": " use the best tool for the job.", "tokens": [50364, 300, 309, 311, 1392, 281, 764, 2107, 2699, 76, 3873, 281, 1500, 2699, 76, 3089, 13, 1171, 1365, 11, 291, 393, 764, 10295, 11637, 50753, 50753, 281, 5380, 11, 291, 458, 11, 281, 2235, 493, 257, 11185, 293, 722, 9697, 926, 293, 291, 458, 11, 291, 51053, 51053, 1062, 362, 281, 2464, 512, 15778, 293, 652, 512, 19810, 626, 456, 11, 457, 309, 311, 1392, 13, 1743, 51339, 51339, 764, 264, 1151, 2290, 337, 264, 1691, 13, 51415, 51415, 865, 13, 286, 959, 10295, 11637, 13, 286, 915, 309, 588, 665, 13, 286, 478, 588, 2597, 300, 286, 600, 1128, 632, 264, 2931, 51699, 51699], "temperature": 0.0, "avg_logprob": -0.14502382724084587, "compression_ratio": 1.5916666666666666, "no_caption_prob": 1.4063890375837218e-05}, {"id": 578, "seek": 331350, "start": 3334.52, "end": 3340.2, "text": " Yeah. I love Cypress. I find it very good. I'm very sorry that I've never had the chance", "tokens": [50364, 300, 309, 311, 1392, 281, 764, 2107, 2699, 76, 3873, 281, 1500, 2699, 76, 3089, 13, 1171, 1365, 11, 291, 393, 764, 10295, 11637, 50753, 50753, 281, 5380, 11, 291, 458, 11, 281, 2235, 493, 257, 11185, 293, 722, 9697, 926, 293, 291, 458, 11, 291, 51053, 51053, 1062, 362, 281, 2464, 512, 15778, 293, 652, 512, 19810, 626, 456, 11, 457, 309, 311, 1392, 13, 1743, 51339, 51339, 764, 264, 1151, 2290, 337, 264, 1691, 13, 51415, 51415, 865, 13, 286, 959, 10295, 11637, 13, 286, 915, 309, 588, 665, 13, 286, 478, 588, 2597, 300, 286, 600, 1128, 632, 264, 2931, 51699, 51699], "temperature": 0.0, "avg_logprob": -0.14502382724084587, "compression_ratio": 1.5916666666666666, "no_caption_prob": 1.4063890375837218e-05}, {"id": 579, "seek": 334020, "start": 3340.2, "end": 3347.8799999999997, "text": " to use it at work and I have the chance to try it out, set it up and then it got forgotten.", "tokens": [50364, 281, 764, 309, 412, 589, 293, 286, 362, 264, 2931, 281, 853, 309, 484, 11, 992, 309, 493, 293, 550, 309, 658, 11832, 13, 50748, 50748, 583, 300, 311, 437, 2049, 2314, 365, 917, 281, 917, 6921, 13, 682, 452, 1752, 11, 436, 483, 1411, 51136, 51136, 484, 13, 51186, 51186, 876, 11, 457, 436, 393, 312, 370, 4961, 13, 865, 13, 400, 550, 456, 311, 611, 2699, 76, 1461, 6921, 13, 407, 286, 51568, 51568, 576, 38463, 2699, 76, 1461, 1500, 382, 544, 295, 257, 11, 364, 10980, 1500, 813, 364, 917, 281, 917, 51792, 51792], "temperature": 0.0, "avg_logprob": -0.1940628013225517, "compression_ratio": 1.6164383561643836, "no_caption_prob": 4.785053079103818e-06}, {"id": 580, "seek": 334020, "start": 3347.8799999999997, "end": 3355.64, "text": " But that's what often happens with end to end tests. In my experience, they get left", "tokens": [50364, 281, 764, 309, 412, 589, 293, 286, 362, 264, 2931, 281, 853, 309, 484, 11, 992, 309, 493, 293, 550, 309, 658, 11832, 13, 50748, 50748, 583, 300, 311, 437, 2049, 2314, 365, 917, 281, 917, 6921, 13, 682, 452, 1752, 11, 436, 483, 1411, 51136, 51136, 484, 13, 51186, 51186, 876, 11, 457, 436, 393, 312, 370, 4961, 13, 865, 13, 400, 550, 456, 311, 611, 2699, 76, 1461, 6921, 13, 407, 286, 51568, 51568, 576, 38463, 2699, 76, 1461, 1500, 382, 544, 295, 257, 11, 364, 10980, 1500, 813, 364, 917, 281, 917, 51792, 51792], "temperature": 0.0, "avg_logprob": -0.1940628013225517, "compression_ratio": 1.6164383561643836, "no_caption_prob": 4.785053079103818e-06}, {"id": 581, "seek": 334020, "start": 3355.64, "end": 3356.64, "text": " out.", "tokens": [50364, 281, 764, 309, 412, 589, 293, 286, 362, 264, 2931, 281, 853, 309, 484, 11, 992, 309, 493, 293, 550, 309, 658, 11832, 13, 50748, 50748, 583, 300, 311, 437, 2049, 2314, 365, 917, 281, 917, 6921, 13, 682, 452, 1752, 11, 436, 483, 1411, 51136, 51136, 484, 13, 51186, 51186, 876, 11, 457, 436, 393, 312, 370, 4961, 13, 865, 13, 400, 550, 456, 311, 611, 2699, 76, 1461, 6921, 13, 407, 286, 51568, 51568, 576, 38463, 2699, 76, 1461, 1500, 382, 544, 295, 257, 11, 364, 10980, 1500, 813, 364, 917, 281, 917, 51792, 51792], "temperature": 0.0, "avg_logprob": -0.1940628013225517, "compression_ratio": 1.6164383561643836, "no_caption_prob": 4.785053079103818e-06}, {"id": 582, "seek": 334020, "start": 3356.64, "end": 3364.2799999999997, "text": " Oh, but they can be so helpful. Yeah. And then there's also Elm program tests. So I", "tokens": [50364, 281, 764, 309, 412, 589, 293, 286, 362, 264, 2931, 281, 853, 309, 484, 11, 992, 309, 493, 293, 550, 309, 658, 11832, 13, 50748, 50748, 583, 300, 311, 437, 2049, 2314, 365, 917, 281, 917, 6921, 13, 682, 452, 1752, 11, 436, 483, 1411, 51136, 51136, 484, 13, 51186, 51186, 876, 11, 457, 436, 393, 312, 370, 4961, 13, 865, 13, 400, 550, 456, 311, 611, 2699, 76, 1461, 6921, 13, 407, 286, 51568, 51568, 576, 38463, 2699, 76, 1461, 1500, 382, 544, 295, 257, 11, 364, 10980, 1500, 813, 364, 917, 281, 917, 51792, 51792], "temperature": 0.0, "avg_logprob": -0.1940628013225517, "compression_ratio": 1.6164383561643836, "no_caption_prob": 4.785053079103818e-06}, {"id": 583, "seek": 334020, "start": 3364.2799999999997, "end": 3368.7599999999998, "text": " would characterize Elm program test as more of a, an integration test than an end to end", "tokens": [50364, 281, 764, 309, 412, 589, 293, 286, 362, 264, 2931, 281, 853, 309, 484, 11, 992, 309, 493, 293, 550, 309, 658, 11832, 13, 50748, 50748, 583, 300, 311, 437, 2049, 2314, 365, 917, 281, 917, 6921, 13, 682, 452, 1752, 11, 436, 483, 1411, 51136, 51136, 484, 13, 51186, 51186, 876, 11, 457, 436, 393, 312, 370, 4961, 13, 865, 13, 400, 550, 456, 311, 611, 2699, 76, 1461, 6921, 13, 407, 286, 51568, 51568, 576, 38463, 2699, 76, 1461, 1500, 382, 544, 295, 257, 11, 364, 10980, 1500, 813, 364, 917, 281, 917, 51792, 51792], "temperature": 0.0, "avg_logprob": -0.1940628013225517, "compression_ratio": 1.6164383561643836, "no_caption_prob": 4.785053079103818e-06}, {"id": 584, "seek": 336876, "start": 3368.76, "end": 3375.0800000000004, "text": " test because it's not, it's not running end to end, right? It's not running in a browser.", "tokens": [50364, 1500, 570, 309, 311, 406, 11, 309, 311, 406, 2614, 917, 281, 917, 11, 558, 30, 467, 311, 406, 2614, 294, 257, 11185, 13, 50680, 50680, 865, 13, 865, 11, 2293, 13, 467, 311, 11, 309, 311, 1034, 12162, 3372, 3755, 1214, 2831, 813, 767, 50989, 50989, 884, 300, 13, 51039, 51039, 865, 13, 509, 434, 3579, 15077, 411, 286, 362, 341, 3861, 420, 341, 4478, 13, 1133, 309, 51398, 51398, 2170, 16372, 11, 264, 4195, 18521, 322, 746, 293, 550, 341, 3069, 2170, 21710, 420, 341, 51720, 51720], "temperature": 0.0, "avg_logprob": -0.20607684208796576, "compression_ratio": 1.672811059907834, "no_caption_prob": 2.796879198285751e-05}, {"id": 585, "seek": 336876, "start": 3375.0800000000004, "end": 3381.26, "text": " Yeah. Yeah, exactly. It's, it's simulating putting pieces together rather than actually", "tokens": [50364, 1500, 570, 309, 311, 406, 11, 309, 311, 406, 2614, 917, 281, 917, 11, 558, 30, 467, 311, 406, 2614, 294, 257, 11185, 13, 50680, 50680, 865, 13, 865, 11, 2293, 13, 467, 311, 11, 309, 311, 1034, 12162, 3372, 3755, 1214, 2831, 813, 767, 50989, 50989, 884, 300, 13, 51039, 51039, 865, 13, 509, 434, 3579, 15077, 411, 286, 362, 341, 3861, 420, 341, 4478, 13, 1133, 309, 51398, 51398, 2170, 16372, 11, 264, 4195, 18521, 322, 746, 293, 550, 341, 3069, 2170, 21710, 420, 341, 51720, 51720], "temperature": 0.0, "avg_logprob": -0.20607684208796576, "compression_ratio": 1.672811059907834, "no_caption_prob": 2.796879198285751e-05}, {"id": 586, "seek": 336876, "start": 3381.26, "end": 3382.26, "text": " doing that.", "tokens": [50364, 1500, 570, 309, 311, 406, 11, 309, 311, 406, 2614, 917, 281, 917, 11, 558, 30, 467, 311, 406, 2614, 294, 257, 11185, 13, 50680, 50680, 865, 13, 865, 11, 2293, 13, 467, 311, 11, 309, 311, 1034, 12162, 3372, 3755, 1214, 2831, 813, 767, 50989, 50989, 884, 300, 13, 51039, 51039, 865, 13, 509, 434, 3579, 15077, 411, 286, 362, 341, 3861, 420, 341, 4478, 13, 1133, 309, 51398, 51398, 2170, 16372, 11, 264, 4195, 18521, 322, 746, 293, 550, 341, 3069, 2170, 21710, 420, 341, 51720, 51720], "temperature": 0.0, "avg_logprob": -0.20607684208796576, "compression_ratio": 1.672811059907834, "no_caption_prob": 2.796879198285751e-05}, {"id": 587, "seek": 336876, "start": 3382.26, "end": 3389.44, "text": " Yeah. You're writing scenarios like I have this application or this element. When it", "tokens": [50364, 1500, 570, 309, 311, 406, 11, 309, 311, 406, 2614, 917, 281, 917, 11, 558, 30, 467, 311, 406, 2614, 294, 257, 11185, 13, 50680, 50680, 865, 13, 865, 11, 2293, 13, 467, 311, 11, 309, 311, 1034, 12162, 3372, 3755, 1214, 2831, 813, 767, 50989, 50989, 884, 300, 13, 51039, 51039, 865, 13, 509, 434, 3579, 15077, 411, 286, 362, 341, 3861, 420, 341, 4478, 13, 1133, 309, 51398, 51398, 2170, 16372, 11, 264, 4195, 18521, 322, 746, 293, 550, 341, 3069, 2170, 21710, 420, 341, 51720, 51720], "temperature": 0.0, "avg_logprob": -0.20607684208796576, "compression_ratio": 1.672811059907834, "no_caption_prob": 2.796879198285751e-05}, {"id": 588, "seek": 336876, "start": 3389.44, "end": 3395.88, "text": " gets displayed, the user clicks on something and then this action gets triggered or this", "tokens": [50364, 1500, 570, 309, 311, 406, 11, 309, 311, 406, 2614, 917, 281, 917, 11, 558, 30, 467, 311, 406, 2614, 294, 257, 11185, 13, 50680, 50680, 865, 13, 865, 11, 2293, 13, 467, 311, 11, 309, 311, 1034, 12162, 3372, 3755, 1214, 2831, 813, 767, 50989, 50989, 884, 300, 13, 51039, 51039, 865, 13, 509, 434, 3579, 15077, 411, 286, 362, 341, 3861, 420, 341, 4478, 13, 1133, 309, 51398, 51398, 2170, 16372, 11, 264, 4195, 18521, 322, 746, 293, 550, 341, 3069, 2170, 21710, 420, 341, 51720, 51720], "temperature": 0.0, "avg_logprob": -0.20607684208796576, "compression_ratio": 1.672811059907834, "no_caption_prob": 2.796879198285751e-05}, {"id": 589, "seek": 339588, "start": 3395.88, "end": 3402.52, "text": " command gets triggered. This message. Why? What did I say? All of those other things.", "tokens": [50364, 5622, 2170, 21710, 13, 639, 3636, 13, 1545, 30, 708, 630, 286, 584, 30, 1057, 295, 729, 661, 721, 13, 50696, 50696, 400, 550, 291, 6586, 293, 853, 661, 721, 293, 360, 9843, 439, 264, 636, 926, 13, 51062, 51062, 1779, 13, 400, 550, 309, 1034, 26192, 33283, 13019, 1348, 646, 365, 1629, 6558, 279, 293, 7510, 51351, 51351, 293, 1507, 13, 51401, 51401, 583, 286, 519, 300, 727, 312, 264, 4829, 295, 1071, 3500, 13, 51584, 51584, 12151, 727, 312, 264, 4829, 295, 1071, 3500, 13, 51664, 51664, 961, 505, 458, 498, 291, 528, 300, 13, 51788, 51788], "temperature": 0.0, "avg_logprob": -0.17963194138932936, "compression_ratio": 1.684873949579832, "no_caption_prob": 1.130069540522527e-05}, {"id": 590, "seek": 339588, "start": 3402.52, "end": 3409.84, "text": " And then you cycle and try other things and do expectations all the way around.", "tokens": [50364, 5622, 2170, 21710, 13, 639, 3636, 13, 1545, 30, 708, 630, 286, 584, 30, 1057, 295, 729, 661, 721, 13, 50696, 50696, 400, 550, 291, 6586, 293, 853, 661, 721, 293, 360, 9843, 439, 264, 636, 926, 13, 51062, 51062, 1779, 13, 400, 550, 309, 1034, 26192, 33283, 13019, 1348, 646, 365, 1629, 6558, 279, 293, 7510, 51351, 51351, 293, 1507, 13, 51401, 51401, 583, 286, 519, 300, 727, 312, 264, 4829, 295, 1071, 3500, 13, 51584, 51584, 12151, 727, 312, 264, 4829, 295, 1071, 3500, 13, 51664, 51664, 961, 505, 458, 498, 291, 528, 300, 13, 51788, 51788], "temperature": 0.0, "avg_logprob": -0.17963194138932936, "compression_ratio": 1.684873949579832, "no_caption_prob": 1.130069540522527e-05}, {"id": 591, "seek": 339588, "start": 3409.84, "end": 3415.62, "text": " Right. And then it simulates HTTP responses coming back with certain statuses and bodies", "tokens": [50364, 5622, 2170, 21710, 13, 639, 3636, 13, 1545, 30, 708, 630, 286, 584, 30, 1057, 295, 729, 661, 721, 13, 50696, 50696, 400, 550, 291, 6586, 293, 853, 661, 721, 293, 360, 9843, 439, 264, 636, 926, 13, 51062, 51062, 1779, 13, 400, 550, 309, 1034, 26192, 33283, 13019, 1348, 646, 365, 1629, 6558, 279, 293, 7510, 51351, 51351, 293, 1507, 13, 51401, 51401, 583, 286, 519, 300, 727, 312, 264, 4829, 295, 1071, 3500, 13, 51584, 51584, 12151, 727, 312, 264, 4829, 295, 1071, 3500, 13, 51664, 51664, 961, 505, 458, 498, 291, 528, 300, 13, 51788, 51788], "temperature": 0.0, "avg_logprob": -0.17963194138932936, "compression_ratio": 1.684873949579832, "no_caption_prob": 1.130069540522527e-05}, {"id": 592, "seek": 339588, "start": 3415.62, "end": 3416.62, "text": " and stuff.", "tokens": [50364, 5622, 2170, 21710, 13, 639, 3636, 13, 1545, 30, 708, 630, 286, 584, 30, 1057, 295, 729, 661, 721, 13, 50696, 50696, 400, 550, 291, 6586, 293, 853, 661, 721, 293, 360, 9843, 439, 264, 636, 926, 13, 51062, 51062, 1779, 13, 400, 550, 309, 1034, 26192, 33283, 13019, 1348, 646, 365, 1629, 6558, 279, 293, 7510, 51351, 51351, 293, 1507, 13, 51401, 51401, 583, 286, 519, 300, 727, 312, 264, 4829, 295, 1071, 3500, 13, 51584, 51584, 12151, 727, 312, 264, 4829, 295, 1071, 3500, 13, 51664, 51664, 961, 505, 458, 498, 291, 528, 300, 13, 51788, 51788], "temperature": 0.0, "avg_logprob": -0.17963194138932936, "compression_ratio": 1.684873949579832, "no_caption_prob": 1.130069540522527e-05}, {"id": 593, "seek": 339588, "start": 3416.62, "end": 3420.28, "text": " But I think that could be the topic of another episode.", "tokens": [50364, 5622, 2170, 21710, 13, 639, 3636, 13, 1545, 30, 708, 630, 286, 584, 30, 1057, 295, 729, 661, 721, 13, 50696, 50696, 400, 550, 291, 6586, 293, 853, 661, 721, 293, 360, 9843, 439, 264, 636, 926, 13, 51062, 51062, 1779, 13, 400, 550, 309, 1034, 26192, 33283, 13019, 1348, 646, 365, 1629, 6558, 279, 293, 7510, 51351, 51351, 293, 1507, 13, 51401, 51401, 583, 286, 519, 300, 727, 312, 264, 4829, 295, 1071, 3500, 13, 51584, 51584, 12151, 727, 312, 264, 4829, 295, 1071, 3500, 13, 51664, 51664, 961, 505, 458, 498, 291, 528, 300, 13, 51788, 51788], "temperature": 0.0, "avg_logprob": -0.17963194138932936, "compression_ratio": 1.684873949579832, "no_caption_prob": 1.130069540522527e-05}, {"id": 594, "seek": 339588, "start": 3420.28, "end": 3421.88, "text": " Definitely could be the topic of another episode.", "tokens": [50364, 5622, 2170, 21710, 13, 639, 3636, 13, 1545, 30, 708, 630, 286, 584, 30, 1057, 295, 729, 661, 721, 13, 50696, 50696, 400, 550, 291, 6586, 293, 853, 661, 721, 293, 360, 9843, 439, 264, 636, 926, 13, 51062, 51062, 1779, 13, 400, 550, 309, 1034, 26192, 33283, 13019, 1348, 646, 365, 1629, 6558, 279, 293, 7510, 51351, 51351, 293, 1507, 13, 51401, 51401, 583, 286, 519, 300, 727, 312, 264, 4829, 295, 1071, 3500, 13, 51584, 51584, 12151, 727, 312, 264, 4829, 295, 1071, 3500, 13, 51664, 51664, 961, 505, 458, 498, 291, 528, 300, 13, 51788, 51788], "temperature": 0.0, "avg_logprob": -0.17963194138932936, "compression_ratio": 1.684873949579832, "no_caption_prob": 1.130069540522527e-05}, {"id": 595, "seek": 339588, "start": 3421.88, "end": 3424.36, "text": " Let us know if you want that.", "tokens": [50364, 5622, 2170, 21710, 13, 639, 3636, 13, 1545, 30, 708, 630, 286, 584, 30, 1057, 295, 729, 661, 721, 13, 50696, 50696, 400, 550, 291, 6586, 293, 853, 661, 721, 293, 360, 9843, 439, 264, 636, 926, 13, 51062, 51062, 1779, 13, 400, 550, 309, 1034, 26192, 33283, 13019, 1348, 646, 365, 1629, 6558, 279, 293, 7510, 51351, 51351, 293, 1507, 13, 51401, 51401, 583, 286, 519, 300, 727, 312, 264, 4829, 295, 1071, 3500, 13, 51584, 51584, 12151, 727, 312, 264, 4829, 295, 1071, 3500, 13, 51664, 51664, 961, 505, 458, 498, 291, 528, 300, 13, 51788, 51788], "temperature": 0.0, "avg_logprob": -0.17963194138932936, "compression_ratio": 1.684873949579832, "no_caption_prob": 1.130069540522527e-05}, {"id": 596, "seek": 342436, "start": 3424.36, "end": 3427.76, "text": " I think that could be a fun one. I've been getting a lot of value out of Elm program", "tokens": [50364, 286, 519, 300, 727, 312, 257, 1019, 472, 13, 286, 600, 668, 1242, 257, 688, 295, 2158, 484, 295, 2699, 76, 1461, 50534, 50534, 1500, 13, 286, 519, 309, 311, 257, 534, 1627, 2290, 13, 12151, 11, 2138, 1520, 309, 484, 13, 400, 11, 291, 458, 11, 472, 11, 50824, 50824, 472, 935, 281, 2152, 322, 300, 4829, 307, 4997, 5065, 13, 407, 411, 5065, 366, 42687, 294, 2699, 76, 13, 51221, 51221, 509, 393, 380, 15018, 257, 5622, 11, 558, 30, 509, 393, 380, 411, 574, 412, 264, 5622, 300, 311, 885, 8752, 51468, 51468, 293, 652, 19810, 626, 466, 309, 13, 407, 472, 295, 264, 721, 300, 2699, 76, 1461, 1500, 575, 291, 360, 11, 597, 51732, 51732], "temperature": 0.0, "avg_logprob": -0.07083926435376776, "compression_ratio": 1.6814814814814816, "no_caption_prob": 9.66578045336064e-06}, {"id": 597, "seek": 342436, "start": 3427.76, "end": 3433.56, "text": " test. I think it's a really cool tool. Definitely, definitely check it out. And, you know, one,", "tokens": [50364, 286, 519, 300, 727, 312, 257, 1019, 472, 13, 286, 600, 668, 1242, 257, 688, 295, 2158, 484, 295, 2699, 76, 1461, 50534, 50534, 1500, 13, 286, 519, 309, 311, 257, 534, 1627, 2290, 13, 12151, 11, 2138, 1520, 309, 484, 13, 400, 11, 291, 458, 11, 472, 11, 50824, 50824, 472, 935, 281, 2152, 322, 300, 4829, 307, 4997, 5065, 13, 407, 411, 5065, 366, 42687, 294, 2699, 76, 13, 51221, 51221, 509, 393, 380, 15018, 257, 5622, 11, 558, 30, 509, 393, 380, 411, 574, 412, 264, 5622, 300, 311, 885, 8752, 51468, 51468, 293, 652, 19810, 626, 466, 309, 13, 407, 472, 295, 264, 721, 300, 2699, 76, 1461, 1500, 575, 291, 360, 11, 597, 51732, 51732], "temperature": 0.0, "avg_logprob": -0.07083926435376776, "compression_ratio": 1.6814814814814816, "no_caption_prob": 9.66578045336064e-06}, {"id": 598, "seek": 342436, "start": 3433.56, "end": 3441.5, "text": " one point to mention on that topic is testing effects. So like effects are opaque in Elm.", "tokens": [50364, 286, 519, 300, 727, 312, 257, 1019, 472, 13, 286, 600, 668, 1242, 257, 688, 295, 2158, 484, 295, 2699, 76, 1461, 50534, 50534, 1500, 13, 286, 519, 309, 311, 257, 534, 1627, 2290, 13, 12151, 11, 2138, 1520, 309, 484, 13, 400, 11, 291, 458, 11, 472, 11, 50824, 50824, 472, 935, 281, 2152, 322, 300, 4829, 307, 4997, 5065, 13, 407, 411, 5065, 366, 42687, 294, 2699, 76, 13, 51221, 51221, 509, 393, 380, 15018, 257, 5622, 11, 558, 30, 509, 393, 380, 411, 574, 412, 264, 5622, 300, 311, 885, 8752, 51468, 51468, 293, 652, 19810, 626, 466, 309, 13, 407, 472, 295, 264, 721, 300, 2699, 76, 1461, 1500, 575, 291, 360, 11, 597, 51732, 51732], "temperature": 0.0, "avg_logprob": -0.07083926435376776, "compression_ratio": 1.6814814814814816, "no_caption_prob": 9.66578045336064e-06}, {"id": 599, "seek": 342436, "start": 3441.5, "end": 3446.44, "text": " You can't inspect a command, right? You can't like look at the command that's being returned", "tokens": [50364, 286, 519, 300, 727, 312, 257, 1019, 472, 13, 286, 600, 668, 1242, 257, 688, 295, 2158, 484, 295, 2699, 76, 1461, 50534, 50534, 1500, 13, 286, 519, 309, 311, 257, 534, 1627, 2290, 13, 12151, 11, 2138, 1520, 309, 484, 13, 400, 11, 291, 458, 11, 472, 11, 50824, 50824, 472, 935, 281, 2152, 322, 300, 4829, 307, 4997, 5065, 13, 407, 411, 5065, 366, 42687, 294, 2699, 76, 13, 51221, 51221, 509, 393, 380, 15018, 257, 5622, 11, 558, 30, 509, 393, 380, 411, 574, 412, 264, 5622, 300, 311, 885, 8752, 51468, 51468, 293, 652, 19810, 626, 466, 309, 13, 407, 472, 295, 264, 721, 300, 2699, 76, 1461, 1500, 575, 291, 360, 11, 597, 51732, 51732], "temperature": 0.0, "avg_logprob": -0.07083926435376776, "compression_ratio": 1.6814814814814816, "no_caption_prob": 9.66578045336064e-06}, {"id": 600, "seek": 342436, "start": 3446.44, "end": 3451.7200000000003, "text": " and make assertions about it. So one of the things that Elm program test has you do, which", "tokens": [50364, 286, 519, 300, 727, 312, 257, 1019, 472, 13, 286, 600, 668, 1242, 257, 688, 295, 2158, 484, 295, 2699, 76, 1461, 50534, 50534, 1500, 13, 286, 519, 309, 311, 257, 534, 1627, 2290, 13, 12151, 11, 2138, 1520, 309, 484, 13, 400, 11, 291, 458, 11, 472, 11, 50824, 50824, 472, 935, 281, 2152, 322, 300, 4829, 307, 4997, 5065, 13, 407, 411, 5065, 366, 42687, 294, 2699, 76, 13, 51221, 51221, 509, 393, 380, 15018, 257, 5622, 11, 558, 30, 509, 393, 380, 411, 574, 412, 264, 5622, 300, 311, 885, 8752, 51468, 51468, 293, 652, 19810, 626, 466, 309, 13, 407, 472, 295, 264, 721, 300, 2699, 76, 1461, 1500, 575, 291, 360, 11, 597, 51732, 51732], "temperature": 0.0, "avg_logprob": -0.07083926435376776, "compression_ratio": 1.6814814814814816, "no_caption_prob": 9.66578045336064e-06}, {"id": 601, "seek": 345172, "start": 3451.72, "end": 3457.54, "text": " is kind of a pain, but you get a lot of value and it's not the worst design idea. It's a", "tokens": [50364, 307, 733, 295, 257, 1822, 11, 457, 291, 483, 257, 688, 295, 2158, 293, 309, 311, 406, 264, 5855, 1715, 1558, 13, 467, 311, 257, 50655, 50655, 10585, 1715, 13, 509, 362, 281, 1884, 257, 2375, 2010, 300, 311, 257, 1333, 295, 15184, 822, 2158, 300, 50928, 50928, 8855, 439, 264, 1944, 5065, 300, 291, 393, 362, 294, 428, 9274, 13, 400, 550, 291, 362, 51206, 51206, 281, 2464, 257, 2445, 300, 4523, 300, 1802, 2375, 2010, 300, 291, 6964, 666, 364, 2699, 76, 5622, 11, 51564, 51564, 597, 307, 364, 42687, 551, 13, 407, 291, 393, 652, 19810, 626, 466, 264, 16901, 300, 291, 434, 51800, 51800], "temperature": 0.0, "avg_logprob": -0.10291904969648881, "compression_ratio": 1.7588932806324111, "no_caption_prob": 1.8342298062634654e-05}, {"id": 602, "seek": 345172, "start": 3457.54, "end": 3463.0, "text": " reasonable design. You have to create a custom type that's a sort of intermediary value that", "tokens": [50364, 307, 733, 295, 257, 1822, 11, 457, 291, 483, 257, 688, 295, 2158, 293, 309, 311, 406, 264, 5855, 1715, 1558, 13, 467, 311, 257, 50655, 50655, 10585, 1715, 13, 509, 362, 281, 1884, 257, 2375, 2010, 300, 311, 257, 1333, 295, 15184, 822, 2158, 300, 50928, 50928, 8855, 439, 264, 1944, 5065, 300, 291, 393, 362, 294, 428, 9274, 13, 400, 550, 291, 362, 51206, 51206, 281, 2464, 257, 2445, 300, 4523, 300, 1802, 2375, 2010, 300, 291, 6964, 666, 364, 2699, 76, 5622, 11, 51564, 51564, 597, 307, 364, 42687, 551, 13, 407, 291, 393, 652, 19810, 626, 466, 264, 16901, 300, 291, 434, 51800, 51800], "temperature": 0.0, "avg_logprob": -0.10291904969648881, "compression_ratio": 1.7588932806324111, "no_caption_prob": 1.8342298062634654e-05}, {"id": 603, "seek": 345172, "start": 3463.0, "end": 3468.56, "text": " represents all the possible effects that you can have in your domain. And then you have", "tokens": [50364, 307, 733, 295, 257, 1822, 11, 457, 291, 483, 257, 688, 295, 2158, 293, 309, 311, 406, 264, 5855, 1715, 1558, 13, 467, 311, 257, 50655, 50655, 10585, 1715, 13, 509, 362, 281, 1884, 257, 2375, 2010, 300, 311, 257, 1333, 295, 15184, 822, 2158, 300, 50928, 50928, 8855, 439, 264, 1944, 5065, 300, 291, 393, 362, 294, 428, 9274, 13, 400, 550, 291, 362, 51206, 51206, 281, 2464, 257, 2445, 300, 4523, 300, 1802, 2375, 2010, 300, 291, 6964, 666, 364, 2699, 76, 5622, 11, 51564, 51564, 597, 307, 364, 42687, 551, 13, 407, 291, 393, 652, 19810, 626, 466, 264, 16901, 300, 291, 434, 51800, 51800], "temperature": 0.0, "avg_logprob": -0.10291904969648881, "compression_ratio": 1.7588932806324111, "no_caption_prob": 1.8342298062634654e-05}, {"id": 604, "seek": 345172, "start": 3468.56, "end": 3475.72, "text": " to write a function that turns that effect custom type that you define into an Elm command,", "tokens": [50364, 307, 733, 295, 257, 1822, 11, 457, 291, 483, 257, 688, 295, 2158, 293, 309, 311, 406, 264, 5855, 1715, 1558, 13, 467, 311, 257, 50655, 50655, 10585, 1715, 13, 509, 362, 281, 1884, 257, 2375, 2010, 300, 311, 257, 1333, 295, 15184, 822, 2158, 300, 50928, 50928, 8855, 439, 264, 1944, 5065, 300, 291, 393, 362, 294, 428, 9274, 13, 400, 550, 291, 362, 51206, 51206, 281, 2464, 257, 2445, 300, 4523, 300, 1802, 2375, 2010, 300, 291, 6964, 666, 364, 2699, 76, 5622, 11, 51564, 51564, 597, 307, 364, 42687, 551, 13, 407, 291, 393, 652, 19810, 626, 466, 264, 16901, 300, 291, 434, 51800, 51800], "temperature": 0.0, "avg_logprob": -0.10291904969648881, "compression_ratio": 1.7588932806324111, "no_caption_prob": 1.8342298062634654e-05}, {"id": 605, "seek": 345172, "start": 3475.72, "end": 3480.4399999999996, "text": " which is an opaque thing. So you can make assertions about the commands that you're", "tokens": [50364, 307, 733, 295, 257, 1822, 11, 457, 291, 483, 257, 688, 295, 2158, 293, 309, 311, 406, 264, 5855, 1715, 1558, 13, 467, 311, 257, 50655, 50655, 10585, 1715, 13, 509, 362, 281, 1884, 257, 2375, 2010, 300, 311, 257, 1333, 295, 15184, 822, 2158, 300, 50928, 50928, 8855, 439, 264, 1944, 5065, 300, 291, 393, 362, 294, 428, 9274, 13, 400, 550, 291, 362, 51206, 51206, 281, 2464, 257, 2445, 300, 4523, 300, 1802, 2375, 2010, 300, 291, 6964, 666, 364, 2699, 76, 5622, 11, 51564, 51564, 597, 307, 364, 42687, 551, 13, 407, 291, 393, 652, 19810, 626, 466, 264, 16901, 300, 291, 434, 51800, 51800], "temperature": 0.0, "avg_logprob": -0.10291904969648881, "compression_ratio": 1.7588932806324111, "no_caption_prob": 1.8342298062634654e-05}, {"id": 606, "seek": 348044, "start": 3480.44, "end": 3485.58, "text": " receiving. So yeah, I mean, basically Elm program test is it's actually you, you kind", "tokens": [50364, 10040, 13, 407, 1338, 11, 286, 914, 11, 1936, 2699, 76, 1461, 1500, 307, 309, 311, 767, 291, 11, 291, 733, 50621, 50621, 295, 976, 309, 428, 3157, 293, 5623, 293, 1910, 11, 293, 309, 14039, 729, 3755, 1214, 293, 1034, 26192, 50863, 50863, 512, 295, 264, 16901, 293, 1507, 13, 407, 300, 311, 1596, 257, 1627, 6532, 13, 9184, 4956, 617, 74, 632, 51064, 51064, 364, 2699, 76, 3315, 751, 300, 415, 2729, 466, 341, 2290, 415, 3094, 1219, 9482, 1500, 293, 51402, 51402, 9809, 42677, 1601, 3094, 411, 257, 2531, 2290, 337, 1936, 4997, 428, 5623, 2445, 13, 51625, 51625, 407, 300, 311, 1071, 733, 295, 1880, 3410, 13, 286, 2378, 380, 3737, 926, 365, 729, 1729, 51800, 51800], "temperature": 0.0, "avg_logprob": -0.0952216202650613, "compression_ratio": 1.6990291262135921, "no_caption_prob": 3.16920704790391e-05}, {"id": 607, "seek": 348044, "start": 3485.58, "end": 3490.42, "text": " of give it your init and update and view, and it ties those pieces together and simulates", "tokens": [50364, 10040, 13, 407, 1338, 11, 286, 914, 11, 1936, 2699, 76, 1461, 1500, 307, 309, 311, 767, 291, 11, 291, 733, 50621, 50621, 295, 976, 309, 428, 3157, 293, 5623, 293, 1910, 11, 293, 309, 14039, 729, 3755, 1214, 293, 1034, 26192, 50863, 50863, 512, 295, 264, 16901, 293, 1507, 13, 407, 300, 311, 1596, 257, 1627, 6532, 13, 9184, 4956, 617, 74, 632, 51064, 51064, 364, 2699, 76, 3315, 751, 300, 415, 2729, 466, 341, 2290, 415, 3094, 1219, 9482, 1500, 293, 51402, 51402, 9809, 42677, 1601, 3094, 411, 257, 2531, 2290, 337, 1936, 4997, 428, 5623, 2445, 13, 51625, 51625, 407, 300, 311, 1071, 733, 295, 1880, 3410, 13, 286, 2378, 380, 3737, 926, 365, 729, 1729, 51800, 51800], "temperature": 0.0, "avg_logprob": -0.0952216202650613, "compression_ratio": 1.6990291262135921, "no_caption_prob": 3.16920704790391e-05}, {"id": 608, "seek": 348044, "start": 3490.42, "end": 3494.44, "text": " some of the commands and stuff. So that's quite a cool technique. Martin Janacek had", "tokens": [50364, 10040, 13, 407, 1338, 11, 286, 914, 11, 1936, 2699, 76, 1461, 1500, 307, 309, 311, 767, 291, 11, 291, 733, 50621, 50621, 295, 976, 309, 428, 3157, 293, 5623, 293, 1910, 11, 293, 309, 14039, 729, 3755, 1214, 293, 1034, 26192, 50863, 50863, 512, 295, 264, 16901, 293, 1507, 13, 407, 300, 311, 1596, 257, 1627, 6532, 13, 9184, 4956, 617, 74, 632, 51064, 51064, 364, 2699, 76, 3315, 751, 300, 415, 2729, 466, 341, 2290, 415, 3094, 1219, 9482, 1500, 293, 51402, 51402, 9809, 42677, 1601, 3094, 411, 257, 2531, 2290, 337, 1936, 4997, 428, 5623, 2445, 13, 51625, 51625, 407, 300, 311, 1071, 733, 295, 1880, 3410, 13, 286, 2378, 380, 3737, 926, 365, 729, 1729, 51800, 51800], "temperature": 0.0, "avg_logprob": -0.0952216202650613, "compression_ratio": 1.6990291262135921, "no_caption_prob": 3.16920704790391e-05}, {"id": 609, "seek": 348044, "start": 3494.44, "end": 3501.2000000000003, "text": " an Elm Europe talk that he gave about this tool he built called architecture test and", "tokens": [50364, 10040, 13, 407, 1338, 11, 286, 914, 11, 1936, 2699, 76, 1461, 1500, 307, 309, 311, 767, 291, 11, 291, 733, 50621, 50621, 295, 976, 309, 428, 3157, 293, 5623, 293, 1910, 11, 293, 309, 14039, 729, 3755, 1214, 293, 1034, 26192, 50863, 50863, 512, 295, 264, 16901, 293, 1507, 13, 407, 300, 311, 1596, 257, 1627, 6532, 13, 9184, 4956, 617, 74, 632, 51064, 51064, 364, 2699, 76, 3315, 751, 300, 415, 2729, 466, 341, 2290, 415, 3094, 1219, 9482, 1500, 293, 51402, 51402, 9809, 42677, 1601, 3094, 411, 257, 2531, 2290, 337, 1936, 4997, 428, 5623, 2445, 13, 51625, 51625, 407, 300, 311, 1071, 733, 295, 1880, 3410, 13, 286, 2378, 380, 3737, 926, 365, 729, 1729, 51800, 51800], "temperature": 0.0, "avg_logprob": -0.0952216202650613, "compression_ratio": 1.6990291262135921, "no_caption_prob": 3.16920704790391e-05}, {"id": 610, "seek": 348044, "start": 3501.2000000000003, "end": 3505.66, "text": " Richard Feldman built like a similar tool for basically testing your update function.", "tokens": [50364, 10040, 13, 407, 1338, 11, 286, 914, 11, 1936, 2699, 76, 1461, 1500, 307, 309, 311, 767, 291, 11, 291, 733, 50621, 50621, 295, 976, 309, 428, 3157, 293, 5623, 293, 1910, 11, 293, 309, 14039, 729, 3755, 1214, 293, 1034, 26192, 50863, 50863, 512, 295, 264, 16901, 293, 1507, 13, 407, 300, 311, 1596, 257, 1627, 6532, 13, 9184, 4956, 617, 74, 632, 51064, 51064, 364, 2699, 76, 3315, 751, 300, 415, 2729, 466, 341, 2290, 415, 3094, 1219, 9482, 1500, 293, 51402, 51402, 9809, 42677, 1601, 3094, 411, 257, 2531, 2290, 337, 1936, 4997, 428, 5623, 2445, 13, 51625, 51625, 407, 300, 311, 1071, 733, 295, 1880, 3410, 13, 286, 2378, 380, 3737, 926, 365, 729, 1729, 51800, 51800], "temperature": 0.0, "avg_logprob": -0.0952216202650613, "compression_ratio": 1.6990291262135921, "no_caption_prob": 3.16920704790391e-05}, {"id": 611, "seek": 348044, "start": 3505.66, "end": 3509.16, "text": " So that's another kind of interesting concept. I haven't played around with those particular", "tokens": [50364, 10040, 13, 407, 1338, 11, 286, 914, 11, 1936, 2699, 76, 1461, 1500, 307, 309, 311, 767, 291, 11, 291, 733, 50621, 50621, 295, 976, 309, 428, 3157, 293, 5623, 293, 1910, 11, 293, 309, 14039, 729, 3755, 1214, 293, 1034, 26192, 50863, 50863, 512, 295, 264, 16901, 293, 1507, 13, 407, 300, 311, 1596, 257, 1627, 6532, 13, 9184, 4956, 617, 74, 632, 51064, 51064, 364, 2699, 76, 3315, 751, 300, 415, 2729, 466, 341, 2290, 415, 3094, 1219, 9482, 1500, 293, 51402, 51402, 9809, 42677, 1601, 3094, 411, 257, 2531, 2290, 337, 1936, 4997, 428, 5623, 2445, 13, 51625, 51625, 407, 300, 311, 1071, 733, 295, 1880, 3410, 13, 286, 2378, 380, 3737, 926, 365, 729, 1729, 51800, 51800], "temperature": 0.0, "avg_logprob": -0.0952216202650613, "compression_ratio": 1.6990291262135921, "no_caption_prob": 3.16920704790391e-05}, {"id": 612, "seek": 350916, "start": 3509.16, "end": 3514.74, "text": " tools too much, but there's so much you can play around with testing in Elm. It's really", "tokens": [50364, 3873, 886, 709, 11, 457, 456, 311, 370, 709, 291, 393, 862, 926, 365, 4997, 294, 2699, 76, 13, 467, 311, 534, 50643, 50643, 309, 311, 34382, 1669, 309, 534, 1019, 281, 862, 926, 365, 4997, 721, 13, 50790, 50790, 865, 13, 286, 519, 264, 3880, 47423, 307, 1242, 1409, 13, 492, 411, 281, 2464, 3089, 293, 321, 411, 51238, 51238, 281, 1895, 15104, 11, 457, 3579, 6921, 307, 257, 857, 295, 257, 1822, 13, 583, 1564, 291, 483, 666, 264, 3967, 295, 51582, 51582], "temperature": 0.0, "avg_logprob": -0.18096831749225484, "compression_ratio": 1.6237623762376239, "no_caption_prob": 4.469222403713502e-05}, {"id": 613, "seek": 350916, "start": 3514.74, "end": 3517.68, "text": " it's purity makes it really fun to play around with testing things.", "tokens": [50364, 3873, 886, 709, 11, 457, 456, 311, 370, 709, 291, 393, 862, 926, 365, 4997, 294, 2699, 76, 13, 467, 311, 534, 50643, 50643, 309, 311, 34382, 1669, 309, 534, 1019, 281, 862, 926, 365, 4997, 721, 13, 50790, 50790, 865, 13, 286, 519, 264, 3880, 47423, 307, 1242, 1409, 13, 492, 411, 281, 2464, 3089, 293, 321, 411, 51238, 51238, 281, 1895, 15104, 11, 457, 3579, 6921, 307, 257, 857, 295, 257, 1822, 13, 583, 1564, 291, 483, 666, 264, 3967, 295, 51582, 51582], "temperature": 0.0, "avg_logprob": -0.18096831749225484, "compression_ratio": 1.6237623762376239, "no_caption_prob": 4.469222403713502e-05}, {"id": 614, "seek": 350916, "start": 3517.68, "end": 3526.64, "text": " Yeah. I think the biggest hurdle is getting started. We like to write code and we like", "tokens": [50364, 3873, 886, 709, 11, 457, 456, 311, 370, 709, 291, 393, 862, 926, 365, 4997, 294, 2699, 76, 13, 467, 311, 534, 50643, 50643, 309, 311, 34382, 1669, 309, 534, 1019, 281, 862, 926, 365, 4997, 721, 13, 50790, 50790, 865, 13, 286, 519, 264, 3880, 47423, 307, 1242, 1409, 13, 492, 411, 281, 2464, 3089, 293, 321, 411, 51238, 51238, 281, 1895, 15104, 11, 457, 3579, 6921, 307, 257, 857, 295, 257, 1822, 13, 583, 1564, 291, 483, 666, 264, 3967, 295, 51582, 51582], "temperature": 0.0, "avg_logprob": -0.18096831749225484, "compression_ratio": 1.6237623762376239, "no_caption_prob": 4.469222403713502e-05}, {"id": 615, "seek": 350916, "start": 3526.64, "end": 3533.52, "text": " to refactor, but writing tests is a bit of a pain. But once you get into the hang of", "tokens": [50364, 3873, 886, 709, 11, 457, 456, 311, 370, 709, 291, 393, 862, 926, 365, 4997, 294, 2699, 76, 13, 467, 311, 534, 50643, 50643, 309, 311, 34382, 1669, 309, 534, 1019, 281, 862, 926, 365, 4997, 721, 13, 50790, 50790, 865, 13, 286, 519, 264, 3880, 47423, 307, 1242, 1409, 13, 492, 411, 281, 2464, 3089, 293, 321, 411, 51238, 51238, 281, 1895, 15104, 11, 457, 3579, 6921, 307, 257, 857, 295, 257, 1822, 13, 583, 1564, 291, 483, 666, 264, 3967, 295, 51582, 51582], "temperature": 0.0, "avg_logprob": -0.18096831749225484, "compression_ratio": 1.6237623762376239, "no_caption_prob": 4.469222403713502e-05}, {"id": 616, "seek": 353352, "start": 3533.52, "end": 3539.52, "text": " it, and once you have that coverage, then it feels very good.", "tokens": [50364, 309, 11, 293, 1564, 291, 362, 300, 9645, 11, 550, 309, 3417, 588, 665, 13, 50664, 50664, 7587, 13, 865, 13, 865, 13, 400, 309, 307, 13, 865, 13, 286, 914, 11, 286, 534, 519, 300, 309, 311, 257, 869, 636, 281, 13153, 51022, 51022, 493, 257, 2416, 5633, 666, 1359, 24004, 570, 562, 291, 434, 1237, 412, 18114, 746, 11, 51286, 51286, 291, 434, 411, 11, 689, 360, 286, 754, 312, 30, 1743, 11, 437, 360, 286, 754, 528, 309, 281, 574, 411, 562, 286, 818, 51472, 51472, 264, 2445, 30, 708, 360, 286, 754, 528, 264, 9362, 281, 574, 411, 30, 1042, 11, 291, 458, 11, 365, 264, 1500, 11, 51688, 51688], "temperature": 0.0, "avg_logprob": -0.15483422114931303, "compression_ratio": 1.6706827309236947, "no_caption_prob": 3.321290932944976e-05}, {"id": 617, "seek": 353352, "start": 3539.52, "end": 3546.68, "text": " Exactly. Yeah. Yeah. And it is. Yeah. I mean, I really think that it's a great way to slice", "tokens": [50364, 309, 11, 293, 1564, 291, 362, 300, 9645, 11, 550, 309, 3417, 588, 665, 13, 50664, 50664, 7587, 13, 865, 13, 865, 13, 400, 309, 307, 13, 865, 13, 286, 914, 11, 286, 534, 519, 300, 309, 311, 257, 869, 636, 281, 13153, 51022, 51022, 493, 257, 2416, 5633, 666, 1359, 24004, 570, 562, 291, 434, 1237, 412, 18114, 746, 11, 51286, 51286, 291, 434, 411, 11, 689, 360, 286, 754, 312, 30, 1743, 11, 437, 360, 286, 754, 528, 309, 281, 574, 411, 562, 286, 818, 51472, 51472, 264, 2445, 30, 708, 360, 286, 754, 528, 264, 9362, 281, 574, 411, 30, 1042, 11, 291, 458, 11, 365, 264, 1500, 11, 51688, 51688], "temperature": 0.0, "avg_logprob": -0.15483422114931303, "compression_ratio": 1.6706827309236947, "no_caption_prob": 3.321290932944976e-05}, {"id": 618, "seek": 353352, "start": 3546.68, "end": 3551.96, "text": " up a large task into small chunks because when you're looking at implementing something,", "tokens": [50364, 309, 11, 293, 1564, 291, 362, 300, 9645, 11, 550, 309, 3417, 588, 665, 13, 50664, 50664, 7587, 13, 865, 13, 865, 13, 400, 309, 307, 13, 865, 13, 286, 914, 11, 286, 534, 519, 300, 309, 311, 257, 869, 636, 281, 13153, 51022, 51022, 493, 257, 2416, 5633, 666, 1359, 24004, 570, 562, 291, 434, 1237, 412, 18114, 746, 11, 51286, 51286, 291, 434, 411, 11, 689, 360, 286, 754, 312, 30, 1743, 11, 437, 360, 286, 754, 528, 309, 281, 574, 411, 562, 286, 818, 51472, 51472, 264, 2445, 30, 708, 360, 286, 754, 528, 264, 9362, 281, 574, 411, 30, 1042, 11, 291, 458, 11, 365, 264, 1500, 11, 51688, 51688], "temperature": 0.0, "avg_logprob": -0.15483422114931303, "compression_ratio": 1.6706827309236947, "no_caption_prob": 3.321290932944976e-05}, {"id": 619, "seek": 353352, "start": 3551.96, "end": 3555.68, "text": " you're like, where do I even be? Like, what do I even want it to look like when I call", "tokens": [50364, 309, 11, 293, 1564, 291, 362, 300, 9645, 11, 550, 309, 3417, 588, 665, 13, 50664, 50664, 7587, 13, 865, 13, 865, 13, 400, 309, 307, 13, 865, 13, 286, 914, 11, 286, 534, 519, 300, 309, 311, 257, 869, 636, 281, 13153, 51022, 51022, 493, 257, 2416, 5633, 666, 1359, 24004, 570, 562, 291, 434, 1237, 412, 18114, 746, 11, 51286, 51286, 291, 434, 411, 11, 689, 360, 286, 754, 312, 30, 1743, 11, 437, 360, 286, 754, 528, 309, 281, 574, 411, 562, 286, 818, 51472, 51472, 264, 2445, 30, 708, 360, 286, 754, 528, 264, 9362, 281, 574, 411, 30, 1042, 11, 291, 458, 11, 365, 264, 1500, 11, 51688, 51688], "temperature": 0.0, "avg_logprob": -0.15483422114931303, "compression_ratio": 1.6706827309236947, "no_caption_prob": 3.321290932944976e-05}, {"id": 620, "seek": 353352, "start": 3555.68, "end": 3560.0, "text": " the function? What do I even want the API to look like? Well, you know, with the test,", "tokens": [50364, 309, 11, 293, 1564, 291, 362, 300, 9645, 11, 550, 309, 3417, 588, 665, 13, 50664, 50664, 7587, 13, 865, 13, 865, 13, 400, 309, 307, 13, 865, 13, 286, 914, 11, 286, 534, 519, 300, 309, 311, 257, 869, 636, 281, 13153, 51022, 51022, 493, 257, 2416, 5633, 666, 1359, 24004, 570, 562, 291, 434, 1237, 412, 18114, 746, 11, 51286, 51286, 291, 434, 411, 11, 689, 360, 286, 754, 312, 30, 1743, 11, 437, 360, 286, 754, 528, 309, 281, 574, 411, 562, 286, 818, 51472, 51472, 264, 2445, 30, 708, 360, 286, 754, 528, 264, 9362, 281, 574, 411, 30, 1042, 11, 291, 458, 11, 365, 264, 1500, 11, 51688, 51688], "temperature": 0.0, "avg_logprob": -0.15483422114931303, "compression_ratio": 1.6706827309236947, "no_caption_prob": 3.321290932944976e-05}, {"id": 621, "seek": 356000, "start": 3560.0, "end": 3564.2, "text": " that's the first thing you do the red step, you write what, what might it look like? And", "tokens": [50364, 300, 311, 264, 700, 551, 291, 360, 264, 2182, 1823, 11, 291, 2464, 437, 11, 437, 1062, 309, 574, 411, 30, 400, 50574, 50574, 550, 949, 291, 754, 1190, 264, 1500, 11, 291, 434, 411, 11, 307, 341, 534, 437, 286, 528, 309, 281, 574, 50784, 50784, 411, 30, 400, 291, 393, 519, 466, 300, 1553, 18788, 466, 264, 11420, 257, 707, 50954, 50954, 857, 13, 407, 309, 311, 257, 7164, 13, 400, 286, 519, 286, 519, 264, 636, 291, 483, 1409, 11, 382, 365, 604, 7164, 51192, 51192, 307, 853, 309, 484, 11, 293, 550, 853, 309, 484, 512, 544, 293, 550, 853, 309, 484, 512, 544, 5120, 13, 51422, 51422, 17610, 11, 291, 603, 291, 603, 483, 38730, 19371, 293, 291, 603, 1466, 281, 959, 309, 13, 51646, 51646], "temperature": 0.0, "avg_logprob": -0.15083903836128407, "compression_ratio": 1.9018867924528302, "no_caption_prob": 5.738475374528207e-05}, {"id": 622, "seek": 356000, "start": 3564.2, "end": 3568.4, "text": " then before you even run the test, you're like, is this really what I want it to look", "tokens": [50364, 300, 311, 264, 700, 551, 291, 360, 264, 2182, 1823, 11, 291, 2464, 437, 11, 437, 1062, 309, 574, 411, 30, 400, 50574, 50574, 550, 949, 291, 754, 1190, 264, 1500, 11, 291, 434, 411, 11, 307, 341, 534, 437, 286, 528, 309, 281, 574, 50784, 50784, 411, 30, 400, 291, 393, 519, 466, 300, 1553, 18788, 466, 264, 11420, 257, 707, 50954, 50954, 857, 13, 407, 309, 311, 257, 7164, 13, 400, 286, 519, 286, 519, 264, 636, 291, 483, 1409, 11, 382, 365, 604, 7164, 51192, 51192, 307, 853, 309, 484, 11, 293, 550, 853, 309, 484, 512, 544, 293, 550, 853, 309, 484, 512, 544, 5120, 13, 51422, 51422, 17610, 11, 291, 603, 291, 603, 483, 38730, 19371, 293, 291, 603, 1466, 281, 959, 309, 13, 51646, 51646], "temperature": 0.0, "avg_logprob": -0.15083903836128407, "compression_ratio": 1.9018867924528302, "no_caption_prob": 5.738475374528207e-05}, {"id": 623, "seek": 356000, "start": 3568.4, "end": 3571.8, "text": " like? And you can think about that without worrying about the implementation a little", "tokens": [50364, 300, 311, 264, 700, 551, 291, 360, 264, 2182, 1823, 11, 291, 2464, 437, 11, 437, 1062, 309, 574, 411, 30, 400, 50574, 50574, 550, 949, 291, 754, 1190, 264, 1500, 11, 291, 434, 411, 11, 307, 341, 534, 437, 286, 528, 309, 281, 574, 50784, 50784, 411, 30, 400, 291, 393, 519, 466, 300, 1553, 18788, 466, 264, 11420, 257, 707, 50954, 50954, 857, 13, 407, 309, 311, 257, 7164, 13, 400, 286, 519, 286, 519, 264, 636, 291, 483, 1409, 11, 382, 365, 604, 7164, 51192, 51192, 307, 853, 309, 484, 11, 293, 550, 853, 309, 484, 512, 544, 293, 550, 853, 309, 484, 512, 544, 5120, 13, 51422, 51422, 17610, 11, 291, 603, 291, 603, 483, 38730, 19371, 293, 291, 603, 1466, 281, 959, 309, 13, 51646, 51646], "temperature": 0.0, "avg_logprob": -0.15083903836128407, "compression_ratio": 1.9018867924528302, "no_caption_prob": 5.738475374528207e-05}, {"id": 624, "seek": 356000, "start": 3571.8, "end": 3576.56, "text": " bit. So it's a habit. And I think I think the way you get started, as with any habit", "tokens": [50364, 300, 311, 264, 700, 551, 291, 360, 264, 2182, 1823, 11, 291, 2464, 437, 11, 437, 1062, 309, 574, 411, 30, 400, 50574, 50574, 550, 949, 291, 754, 1190, 264, 1500, 11, 291, 434, 411, 11, 307, 341, 534, 437, 286, 528, 309, 281, 574, 50784, 50784, 411, 30, 400, 291, 393, 519, 466, 300, 1553, 18788, 466, 264, 11420, 257, 707, 50954, 50954, 857, 13, 407, 309, 311, 257, 7164, 13, 400, 286, 519, 286, 519, 264, 636, 291, 483, 1409, 11, 382, 365, 604, 7164, 51192, 51192, 307, 853, 309, 484, 11, 293, 550, 853, 309, 484, 512, 544, 293, 550, 853, 309, 484, 512, 544, 5120, 13, 51422, 51422, 17610, 11, 291, 603, 291, 603, 483, 38730, 19371, 293, 291, 603, 1466, 281, 959, 309, 13, 51646, 51646], "temperature": 0.0, "avg_logprob": -0.15083903836128407, "compression_ratio": 1.9018867924528302, "no_caption_prob": 5.738475374528207e-05}, {"id": 625, "seek": 356000, "start": 3576.56, "end": 3581.16, "text": " is try it out, and then try it out some more and then try it out some more experiment.", "tokens": [50364, 300, 311, 264, 700, 551, 291, 360, 264, 2182, 1823, 11, 291, 2464, 437, 11, 437, 1062, 309, 574, 411, 30, 400, 50574, 50574, 550, 949, 291, 754, 1190, 264, 1500, 11, 291, 434, 411, 11, 307, 341, 534, 437, 286, 528, 309, 281, 574, 50784, 50784, 411, 30, 400, 291, 393, 519, 466, 300, 1553, 18788, 466, 264, 11420, 257, 707, 50954, 50954, 857, 13, 407, 309, 311, 257, 7164, 13, 400, 286, 519, 286, 519, 264, 636, 291, 483, 1409, 11, 382, 365, 604, 7164, 51192, 51192, 307, 853, 309, 484, 11, 293, 550, 853, 309, 484, 512, 544, 293, 550, 853, 309, 484, 512, 544, 5120, 13, 51422, 51422, 17610, 11, 291, 603, 291, 603, 483, 38730, 19371, 293, 291, 603, 1466, 281, 959, 309, 13, 51646, 51646], "temperature": 0.0, "avg_logprob": -0.15083903836128407, "compression_ratio": 1.9018867924528302, "no_caption_prob": 5.738475374528207e-05}, {"id": 626, "seek": 356000, "start": 3581.16, "end": 3585.64, "text": " Soon, you'll you'll get Stockholm syndrome and you'll learn to love it.", "tokens": [50364, 300, 311, 264, 700, 551, 291, 360, 264, 2182, 1823, 11, 291, 2464, 437, 11, 437, 1062, 309, 574, 411, 30, 400, 50574, 50574, 550, 949, 291, 754, 1190, 264, 1500, 11, 291, 434, 411, 11, 307, 341, 534, 437, 286, 528, 309, 281, 574, 50784, 50784, 411, 30, 400, 291, 393, 519, 466, 300, 1553, 18788, 466, 264, 11420, 257, 707, 50954, 50954, 857, 13, 407, 309, 311, 257, 7164, 13, 400, 286, 519, 286, 519, 264, 636, 291, 483, 1409, 11, 382, 365, 604, 7164, 51192, 51192, 307, 853, 309, 484, 11, 293, 550, 853, 309, 484, 512, 544, 293, 550, 853, 309, 484, 512, 544, 5120, 13, 51422, 51422, 17610, 11, 291, 603, 291, 603, 483, 38730, 19371, 293, 291, 603, 1466, 281, 959, 309, 13, 51646, 51646], "temperature": 0.0, "avg_logprob": -0.15083903836128407, "compression_ratio": 1.9018867924528302, "no_caption_prob": 5.738475374528207e-05}, {"id": 627, "seek": 358564, "start": 3585.64, "end": 3591.96, "text": " All right. Well, I think that gives people enough to get started. And maybe we'll we'll", "tokens": [50364, 1057, 558, 13, 1042, 11, 286, 519, 300, 2709, 561, 1547, 281, 483, 1409, 13, 400, 1310, 321, 603, 321, 603, 50680, 50680, 6329, 646, 1071, 565, 365, 512, 512, 7731, 274, 1539, 322, 2699, 76, 1461, 1500, 11, 293, 1310, 512, 50981, 50981, 661, 4997, 7512, 11, 512, 1895, 578, 3662, 7512, 13, 583, 4696, 300, 2709, 561, 51202, 51202, 257, 665, 1081, 281, 722, 13, 865, 11, 286, 519, 309, 775, 13, 286, 1454, 309, 775, 13, 961, 505, 458, 498, 309, 775, 13, 961, 51486, 51486, 505, 458, 498, 309, 13961, 428, 9843, 13, 51586, 51586, 1042, 11, 994, 380, 1826, 958, 565, 13, 9088, 958, 565, 13, 4621, 6543, 13, 51816], "temperature": 0.0, "avg_logprob": -0.16831609937879774, "compression_ratio": 1.7991967871485943, "no_caption_prob": 0.00014423843822441995}, {"id": 628, "seek": 358564, "start": 3591.96, "end": 3597.98, "text": " circle back another time with some some deeper dives on Elm program test, and maybe some", "tokens": [50364, 1057, 558, 13, 1042, 11, 286, 519, 300, 2709, 561, 1547, 281, 483, 1409, 13, 400, 1310, 321, 603, 321, 603, 50680, 50680, 6329, 646, 1071, 565, 365, 512, 512, 7731, 274, 1539, 322, 2699, 76, 1461, 1500, 11, 293, 1310, 512, 50981, 50981, 661, 4997, 7512, 11, 512, 1895, 578, 3662, 7512, 13, 583, 4696, 300, 2709, 561, 51202, 51202, 257, 665, 1081, 281, 722, 13, 865, 11, 286, 519, 309, 775, 13, 286, 1454, 309, 775, 13, 961, 505, 458, 498, 309, 775, 13, 961, 51486, 51486, 505, 458, 498, 309, 13961, 428, 9843, 13, 51586, 51586, 1042, 11, 994, 380, 1826, 958, 565, 13, 9088, 958, 565, 13, 4621, 6543, 13, 51816], "temperature": 0.0, "avg_logprob": -0.16831609937879774, "compression_ratio": 1.7991967871485943, "no_caption_prob": 0.00014423843822441995}, {"id": 629, "seek": 358564, "start": 3597.98, "end": 3602.4, "text": " other testing techniques, some refactoring techniques. But hopefully that gives people", "tokens": [50364, 1057, 558, 13, 1042, 11, 286, 519, 300, 2709, 561, 1547, 281, 483, 1409, 13, 400, 1310, 321, 603, 321, 603, 50680, 50680, 6329, 646, 1071, 565, 365, 512, 512, 7731, 274, 1539, 322, 2699, 76, 1461, 1500, 11, 293, 1310, 512, 50981, 50981, 661, 4997, 7512, 11, 512, 1895, 578, 3662, 7512, 13, 583, 4696, 300, 2709, 561, 51202, 51202, 257, 665, 1081, 281, 722, 13, 865, 11, 286, 519, 309, 775, 13, 286, 1454, 309, 775, 13, 961, 505, 458, 498, 309, 775, 13, 961, 51486, 51486, 505, 458, 498, 309, 13961, 428, 9843, 13, 51586, 51586, 1042, 11, 994, 380, 1826, 958, 565, 13, 9088, 958, 565, 13, 4621, 6543, 13, 51816], "temperature": 0.0, "avg_logprob": -0.16831609937879774, "compression_ratio": 1.7991967871485943, "no_caption_prob": 0.00014423843822441995}, {"id": 630, "seek": 358564, "start": 3602.4, "end": 3608.08, "text": " a good place to start. Yeah, I think it does. I hope it does. Let us know if it does. Let", "tokens": [50364, 1057, 558, 13, 1042, 11, 286, 519, 300, 2709, 561, 1547, 281, 483, 1409, 13, 400, 1310, 321, 603, 321, 603, 50680, 50680, 6329, 646, 1071, 565, 365, 512, 512, 7731, 274, 1539, 322, 2699, 76, 1461, 1500, 11, 293, 1310, 512, 50981, 50981, 661, 4997, 7512, 11, 512, 1895, 578, 3662, 7512, 13, 583, 4696, 300, 2709, 561, 51202, 51202, 257, 665, 1081, 281, 722, 13, 865, 11, 286, 519, 309, 775, 13, 286, 1454, 309, 775, 13, 961, 505, 458, 498, 309, 775, 13, 961, 51486, 51486, 505, 458, 498, 309, 13961, 428, 9843, 13, 51586, 51586, 1042, 11, 994, 380, 1826, 958, 565, 13, 9088, 958, 565, 13, 4621, 6543, 13, 51816], "temperature": 0.0, "avg_logprob": -0.16831609937879774, "compression_ratio": 1.7991967871485943, "no_caption_prob": 0.00014423843822441995}, {"id": 631, "seek": 358564, "start": 3608.08, "end": 3610.08, "text": " us know if it meets your expectations.", "tokens": [50364, 1057, 558, 13, 1042, 11, 286, 519, 300, 2709, 561, 1547, 281, 483, 1409, 13, 400, 1310, 321, 603, 321, 603, 50680, 50680, 6329, 646, 1071, 565, 365, 512, 512, 7731, 274, 1539, 322, 2699, 76, 1461, 1500, 11, 293, 1310, 512, 50981, 50981, 661, 4997, 7512, 11, 512, 1895, 578, 3662, 7512, 13, 583, 4696, 300, 2709, 561, 51202, 51202, 257, 665, 1081, 281, 722, 13, 865, 11, 286, 519, 309, 775, 13, 286, 1454, 309, 775, 13, 961, 505, 458, 498, 309, 775, 13, 961, 51486, 51486, 505, 458, 498, 309, 13961, 428, 9843, 13, 51586, 51586, 1042, 11, 994, 380, 1826, 958, 565, 13, 9088, 958, 565, 13, 4621, 6543, 13, 51816], "temperature": 0.0, "avg_logprob": -0.16831609937879774, "compression_ratio": 1.7991967871485943, "no_caption_prob": 0.00014423843822441995}, {"id": 632, "seek": 361008, "start": 3610.08, "end": 3621.7599999999998, "text": " Well, it didn't. Until next time. Until next time. Bye bye.", "tokens": [50364, 1042, 11, 309, 994, 380, 13, 9088, 958, 565, 13, 9088, 958, 565, 13, 4621, 6543, 13, 50948], "temperature": 0.0, "avg_logprob": -0.27014734745025637, "compression_ratio": 1.18, "no_caption_prob": 0.0004708394408226013}], "language": "en"}