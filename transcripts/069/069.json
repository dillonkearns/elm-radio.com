{"text": " Hello, Jeroen. Hello, Dillon. So are you the type of person that likes tests? Because we're going to have a face off between those two. I might be strongly typed. I might be... Why do we have to choose? Why do we have to fight over this? Can't we just all agree that they're both good? We can. And let's do that. So maybe that's the episode already. Episode 10. Yeah. Types versus tests. It's not a competition. Just do both. I have that little girl's face in my head now. And like, yep, yep. That's our episode. That's the episode. Yeah, I mean, I actually do want to like investigate that with you a little bit. Like, why is it? Well, so first of all, we're talking about types versus tests today. If you hadn't gathered that. Why does it have to be a war between these two things? Like, why is there any notion that one would take away from the other or that one would supplant the other? Like, I find that very interesting. Yeah, well, my first instinct to this question is like, in a lot of languages, you only have one, right? You only have tests. For all the languages that are dynamically typed, it doesn't feel like you have types. Or at least they don't help you writing your code in the way that we think about when we talk about types versus tests, at least. So therefore, you have to use tests, right? If you want to make sure that your code is correct. At least I hope they do. God, I hope they do. So if you don't have types, then you're going to go for tests. But at some point, you're going to ask yourself the question, should we add types? Like, should we switch from JavaScript to TypeScript? Should we use MyPy from Python, etc.? Or like, oh, we're using Java or some other type language, but we don't make very good use of our types. Or at least we don't use them to the effect that other languages do like Haskell and obviously Elm. And then I think that's the part where you ask yourself the question, well, types or tests? Right. I think you're right. I think there can be a very strong testing culture in a lot of these communities. I think the Ruby community created a very strong testing culture, which was definitely a big influence on me, the testing culture in the Ruby on Rails community. Although interestingly, which I think is great and is a very strong part of that community. Interestingly enough, DHH, the creator of Rails, has had some very controversial talks now where he says TDD is dead and that it deteriorates your code quality and makes your code worse. I haven't watched those talks. I have heard of that, but I haven't seen the points that were raised. There are some interesting talks where, you know, Martin Fowler and some of these, you know, pioneers of testing practices sit down and do some video calls with DHH and try to explain it to him. Essentially, I believe that the way that DHH is testing things makes things very painful. And I think that's a huge part of it is that not all tests are created equal. I think that not all types are created equal. And I think that that's part of the root of it is so when what you're talking about where maybe people are sprinkling types in, maybe they're adding something that helps add a little bit of types into an untyped language. You know, maybe adding some TypeScript or something through some comments or something like Elixir that has types you can sprinkle in, but it's not really a core part of the language. Yeah, or simply avoiding primitive obsession by re implementing or wrapping some primitives into new types. That's also a good use case, I think. Oh, that's interesting because that's yeah, that's types without a compilation step. And you're right. That's another dimension to it. And I think that there can be a little bit of a sense that when you're using types in this way, when you sprinkle them in, then it's just like maybe it feels like just another test that you're just like, hey, this is another thing that sort of checks something. And it sort of gives us a little boost in confidence. But it fundamentally feels different when you have, like, to me, a sound type system or a sprinkling of types that sort of help you out a little bit more. And it feels more like a test where like you can test like if I pass in a string here, it behaves this way. If I pass in undefined here, then it returns undefined or raises an invalid type exception or whatever. And you say, well, my type system, I can do that through a type. I can do that through a test. And if I've been following a really strong test driven development practice where I am actually doing red green refactor, then I would have built up all these test cases. But the thing is, like, did you test every possible input type? And because tests only cover what you write and types work almost in in the opposite way. Like if you define a union type, then a union type only has something when you add something to it, whereas a test only gives you confidence like working the other way around. Like you you only constrain it by adding to it. Whereas you only allow a possibility when you add something to a union type. So you mentioned TDD, right? To go back to why is this question of types versus tests even there in the first place? There is such a thing as TDD, right? There is test driven development and there's a lot of articles, a lot of videos, a lot of books on it. I think mostly pushed by extreme programming, I think, and agile coaches. Kent Beck sort of created the process and extreme XP was Kent Beck's sort of early agile process that he introduced those techniques. Yeah. So TDD is big. It's really big. But I think mostly originated in languages like C style languages like C, Java, C sharp. On the other side, you've got the academic languages like Haskell, where they are big on like, hey, see what all the things that we can do or at least we can prevent using types. And don't quote me on any of this. This is my my understanding, at least. And there's one side where they go, they make code work through tests. And there's another side where they say, hey, look at all these types that are so useful. And I think like these two have not been melted together quite well. There's also like just there's no words. There's you mentioned type driven development in one of your talks. But like there's nothing as catchy as TDD. And there's no practice that I know of that has that name of like, hey, let's improve our code by changing our types. We call it making impossible states impossible, make legal states and reprisidential, but nothing that is books with that name. Right. Yeah. I also wonder if if the workflow is at odds where some people like to write a type and model out their types. We've talked about this process. We both enjoy this workflow of sketching out a bunch of custom types to wrap our heads around a concept. And that's in a way that sort of an upfront design process in a sense. It can be. Now, with the caveat, it is it is a sketch. So you can you can throw that sketch away. And then test driven development is more of a pull model. You don't do it up front. You pull things in as needed. You use the simplest thing that could possibly work. I tend to think, you know, I've talked in the past about this concept of spikes. And to me, like that's really essential in TDD is being able to do spikes because they remind me what you mean with spikes exactly. Yes. A spike is essentially writing code that you can throw away for the purpose of learning. So the the deliverable of a spike is learning, not production code. And that's important because in TDD, you always write a failing test first and then kind of pull code into existence as needed to satisfy that failing test. But sometimes you want to just explore something. And so a spike gives you a space to explore where you sort of put that discipline to the side for a second. But you're not writing production code. You're writing throwaway code. And so it allows you to just explore without being constrained by that workflow where you're doing things just in time. Yeah. You're thinking of spikes that last like a few minutes, right? Not spikes that last half a day or two days. Right. Absolutely. So to me, sketching out types can be a really nice type of spike. And I do really like that workflow where, you know, I mean, I imagine you do too with not having Elm Review saying this is an unused union type constructor for a long time where it's just sitting there collecting dust because you think you're going to use it at some point in the future. So it is a little bit difficult to piece these two workflows together in a sense because one is just in time and one is a more upfront design process. Yeah. So in TDD, there's this red green refactor cycle. But I don't know of such a popular cycle or routine that you have to do for types. It's just like, well, you write the type and then do something like follow the compiler errors, change the type again if needed, follow the compiler errors again, et cetera, et cetera. There's a lot more process around TDD that has been written down in things that are easy to teach to beginners, but not for type programming. Yeah. Yeah. See, I don't even have a term for this. Right. Right. Exactly. Yeah. It's kind of like domain modeling with types. But yeah, like what are the steps? At what point in your process do you do it? At what point in your process do you update the types? And how do you decide how to update your types? So let's imagine you're doing both. You're doing TDD. So TDD, there's red, you write a thing test, green, you make the code work, and then you refactor. Is refactor the phase where you change your types? Or is it in red? Is it in green? It's definitely not in red. I think it's in refactor. Well, keep in mind in TDD, I think this is a subtle point that's very important to do TDD in a typed context. A compilation error is red, is a red step in TDD. And that's very important. So you would consider changing the type to something that would... Actually, you would just consider changing the types to be another cycle, just like tests, but it's not a test related cycle. It's just for types. Potentially. So like, for example, in an untyped context, if you're writing a unit test in Ruby, you might say like, you expect calling this method to return this value. And then you get a failing test because what does it say? It says that method doesn't exist. Right? And what kind of thing is that? It's a runtime error, which the test runner says, oh, this test failed. Runtime error. And so you fix that. Whereas in Elm, suddenly you have a compilation error. Things aren't working. And you... But it still is red, even though it couldn't actually run your test. So it feels like, well, how is it a red test? It's not even running the tests yet. But the point is that you're pulling along just as much as you need. And so you're ensuring that you're exercising things through tests because they're coming into existence by that process where the test tells you, I need this thing in order to continue or in order to pass. And you're giving it the simplest thing you could to satisfy that, which means you're getting test coverage of everything. Right? That's the elegance of that process. And it allows you to split work where you can work on one small slice at a time. And that's why the process works that way. So if you call a function in Elm, it doesn't exist. It's a compiler error. Now you have to write that function and you can give it a debug.to do or you can give it a fake value or whatever. But so you do have now there are certain things that you have to do. Debug.to do is a little bit different than returning nil or null. And you have to be you have to work within more constraints. It feels a little more formal. And there are certain things about working in a typed context and working in, you know, working in Java versus Elm feels very different than working in TypeScript. But if you're if you're working in Elm, there are certain things that you have to do upfront to just get the compiler happy. And I've been really interested to hear some of the some of the things that Richard has been exploring with Rock here, where he's playing around with the idea, for example, of allowing the compiler to execute code until it gets to a point where there's a compilation issue. With basically like compiling everything it can in the program in a rock program. And then when it hits a dead end where it says there's a compiler error here, essentially that it puts a debug.to do in there for you. So if it executes that in debug mode, then it raises an exception. And that is very interesting for testing workflow, because it lends itself a little bit more to this just in time process where you don't have to do everything upfront. So there's I think there's a little bit of a push and pull with those two different mindsets. There's also like a concept that I've been kind of keenly following in Rock, which is the, you know, Rock's approach to to tags like the I forget the term, but these global tags that you can reference without explicitly defining. And it infers the different tags that are possible given given your usage of these named tags without you having to define upfront. Here's a custom type. Here are all the variants. Yeah. If something returns A in one branch, B or in another branch, then it will be the result will be either A or B. Right. Of none either. Yes. And if you think about that in the context of TDD, it's kind of interesting because now you can write a failing test that says, I expect this to return this variant without defining all of the possibilities for that variant upfront. So it enables a different type of workflow. So, I mean, is that good or bad? I don't know. I definitely it's it's very subtle. And maybe as you say, we do need to more concretely define a process just like TDD has this very clear, easy to teach set of steps for red green refactor. Maybe we need something similar for like TDD in a typed context. So, yeah, as to why people tend to draw these stark dividing lines between tests and TDD or tests and sorry, tests and types. I think somehow like these different mindsets are looking at the problem of gaining confidence in your system in a different way where one is saying, you know, when we're thinking about types, we're thinking about guarantees and proofs. And when we're thinking about tests, we're thinking of specific scenarios, right? Exactly. We're exercising some specific scenarios and gaining confidence through, I don't know, through through a type of automated check. It's less formal. It feels like a less formal process of narrowing down these constraints with proofs. And somehow I feel like people get into one mindset or the other. But to me, it's like, why wouldn't like these these two different things play two different roles? Like if I'm so if if I'm trying to say, you know, I don't know, I have a I have a game that has died that can be a number one through six. Then isn't it nice to model parts of the game through that? And, you know, yes, you want to capture the behavior of the game through through tests because the way that things interact and the behaviors are very subtle. And you can't you can't model that all through your types. And I know we want to as people who love types. We want to make all states impossible through the type system, but you can't. And even if you could, isn't that what a theorem prover is about? Like languages like Coq and Agda, I think, and Idris. Yeah. You write your code and specifically your types in such a way that it proves that your code does exactly what it what it is meant to. That is, follows some kind of specification through types, I think mostly and some implementations, but not necessarily through tests. That said, I don't know how to work. So, right. I've definitely seen walkthroughs of this type of thing where where the types are the proof like. And the fact that you have an executable program that fulfills that is is a proof, which is pretty pretty fascinating and incredible stuff. Yeah. In practice, you know, you want simple, easy to reason about types. And so you want the best tool for the job. Those types are very hard to read. And if you're trying so it certainly I think it does depend on what you're trying to model. And perhaps if you're doing something that's going to be on a Mars rover or something like that, you know, yeah. Perhaps there would be an appropriate place to to use one of these like proof proof tools. And, you know, that that's great. But oftentimes, like if you're writing a game, then what does what's the cost benefit of that? And I think a lot of the time, like the the cost of writing a type to narrow down a few basic constraints about the primitive things you're dealing with. Not primitive as in primitive language values, but the primitives of your domain to sort of clearly define the constraints of those core pieces. And then having some tests that talk about how those pieces interact works very well for a cost benefit. You know, I think that that's what it comes down to at the end of the day is it's like if you can write very simple types and then you can write very simple tests. You don't have to write tests that exercise every possible type you could throw at it and that it fulfills these contracts. And so they do their job very well when you when you just use types in a simple way, getting the sort of 80 20 like, you know, what is it? I think it's also called the Pareto principle, the 80 20 rule, which is 80. Yeah, yeah, you do the the 20 percent of the work that gives you 80 percent of the benefit because it's diminishing returns at a certain point. And I think that's really the case with with types. And I think if you're if you're saying, oh, we don't need types, we have tests. I think you also sort of get to to an 80 20 where you're getting diminishing returns for your tests when types would be the best tool for that. So in languages like Coch and Agda Idris, where you prove something through these types, the types are really hard to read. And I do wonder, like, how do you test that those types are proving the right thing as well? Right. Because if they're complex, then it's some sort of code, right? And you want to test code. So how do you test that? I'm sure they have some techniques or tools for that. But, yeah, yes, right. And I think it's it's easy to get into the headspace of trying to like like, well, if it doesn't give me a 100 percent guarantee or how do I prove this? But but I think getting practical, you say, like, listen, how easy is it to reason about the correctness of this system? How easy is it to spot a failure? How easy is it to fit the behavior of the system into my head with these pieces? And if you have some very simple types, that's a great tool for reasoning about your system. And that's like a tool that really lets you work confidently with with maintaining some code and updating the constraints as they change. Tests are very good for looking at what is the current behavior. And if something goes wrong or if you're adding some new behavior, you you write some tests to exercise that and make sure it does what you expect. And so I think it's it's using the right tool for the right job. Also, I think that so actually I suspect we may have both watched this this talk in preparation for it. Types versus tests. There was one at a scholar conference that I watched. What is the name of the talk? Because I'm not sure. So I watched this talk called Types versus Tests, an epic battle by Amanda Loucher. Yeah, me too. OK, cool. Yeah, I had a feeling that we both watched the one. It was very interesting. Yeah, I wanted to watch a talk that you probably wouldn't watch. And we watched the same one. That one was very good. Yeah. Which surprised me a bit because it was from someone who is from that TDD world, that agile world at a SCADA conference still. They're like, huh, she does a good job joining those two two worlds together. I thought so, too. Somewhat contradicting what I said previously, where I said that those worlds didn't mingle. Well, they do mingle, but not as much as I would like them to be. Right. Absolutely. Which which I think is why it stood out as a really good talk, too, because it doesn't get discussed that often. Usually people are in one space or the other. And unfortunately, you know, a lot of people who are very focused on talking about types don't talk about craftsmanship principles and test driven development as much. And vice versa. But they really pair very nicely together. I have to admit, like whenever I hear about craftsmanship coding, I always hear that in the back of my mind, it means TDD, it means agile practices, tiny steps, refactoring. But it doesn't mean types at all. So. Right. Do you have the same feeling as well? Yeah, I would say I associate it with types not necessarily being a core piece of that, unfortunately. I mean, in the most common practice, it's yeah, I agree. So one thing that makes me think is also like you can do TDD in every language. As soon as you have a test framework, you can do it in any language. You might not have property based testing. You might not have advanced levels testing like end to end testing. But types, you can only do that in some languages. Right. Yes. So, yeah, it makes sense that there's a lot of a lot more writing about TDD than about types, especially since most popular languages are not all that big into defining your own custom types and having opaque types and stuff like that. So I think it makes a lot of sense. And a lot of them. I mean, I learned a ton about test driven development from Kent Beck's excellent book, Test Driven Development by Example. It's a very nice, simple little book. And from what I recall, it used Java for all the examples. And, you know, the thing is, like when you're using Java for the examples, you're not using it as a tool for giving you guarantees. Right. Because you have you still have casting and all these possibilities to to circumvent the type system. So it's not really operating in the same way where you're able to rely on it. And also it doesn't have the features that we love so much, like some types, which they are coming. Yes. Right. But in the time when it was written, that that certainly wasn't a feature. And it certainly wasn't the idiomatic approach to solving problems that would have been used in a book like Test Driven Development by Example. So one thing that this that this types versus tests talk, I felt missed. It did a very good job covering a lot of like a lot of the core things that I wanted to hit upon in our discussion. But one of the things that it didn't talk about that I think is very important is how types and tests fit together and work in tandem, which is our favorite topic, which if you're playing Elm Radio Bingo, you can go ahead and cross off that square. Opaque types. I was going to go for Elm Review. I lost. I'd put that on our Elm Review Bingo card as well. It's a solid, solid choice. So what I mean by by these two things working together is I think that let's say you write a unit test for a function and, you know, I don't know. I mean, you know, one of my go to opaque type examples, you have a function that checks the validity of a username. So now you have, you know, is valid username returns a bool. And, OK, you've used test driven development for that. And it's fully tested code, right? It's fully tested code that takes a string and gives you a boolean. Well, you have a function or a method that says this username is valid. Right. Yep. And it's fully tested, 100 percent done through TDD. But is it used appropriately everywhere in the code base? Every is every string that does truly represent a username invoke that function to to make sure it checks that bool? Of course, we're we are good coders, right? We'll never forget to do that. But to me, this is so, so core to how I think about craftsmanship principles is being able to sort of narrow down my thinking about something into a nice, neat, well tested concept where the knowledge lives in one place. So I'm able to not only organize that logic into a single place, which, you know, don't repeat yourself. It's about knowledge. It's not about not repeating code. It's about not repeating knowledge. There's a single authoritative place where any piece of knowledge lives. Well, in a pick type is a great way to represent that single authoritative place because, well, you can't create it outside of that thing. So it is authoritative because it's the only way you can create a username. And so you use that username type. And, you know, sure, you could still pass strings somewhere, but it gives you more confidence that you're using that well tested unit in the appropriate places. So to me, types and tests work very well together. And in this types versus test talk, they were kind of discussing this in the talk and a little bit in the Q&A as well. They were talking about, you know, how do you like, you know, that you can you can make impossible states impossible through your type system. But certain things you can't represent that in your type system. But then, like you, you have this opaque type. You test that opaque type. And now that gives you more guarantees. So they work together, you know. So we do need more formal write ups about these processes as you as you hinted at. I really I think I think you're spot on with that, that we need some type. What was the name of the Ken Beck's book? Test driven development by example. Right. OK, well, type driven developments by example. That's what we need. Absolutely. Or, you know, test driven development aided by test, test driven development aided by types by example. Maybe, you know. Oh, no, no, no, no. Now it seems like types are less good than tests. Like, come on. Like, tests are not better than types. So I think it's important to understand, like, when are types the good the good abstraction and when are tests the right tool? So the way I tend to see. So maybe first let's talk about usually when people say, well, you don't need. Well, whenever people say that you don't need tests, what they mean is that you don't need to write as many tests when you have type when you have types. Right. So, for instance, the common examples. Well, what if the argument that you pass to is valid user name is undefined or is nil or whatever? Well, you don't need to check for those if your types say that it needs to be a valid, it needs to be a non null string or whatever. And you also don't need to check that this the this function returns anything else than a Boolean. So when you have types, it's very much limits the wiggle room that a function has, like between its inputs and outputs. The inputs say what is available to the function and the output is what is available to return. Like in the this enormous space of potential implementation of potential values to return and to get. What what can you do? So whenever you add types, you constrain what you can write, what you can receive, what you can get, what you can write as the implementation. And I think that's when people who write a lot of a lot of types, but don't know a lot of tests, what they think of. And that's partially my case, because I don't write that many tests in practice, is that because there's so little wiggle room. If you have good types that you don't really need to test those, like, for instance, if you have an enum of four things as an input and you return a Boolean as an output, then you have very few implementation possibilities. I think you have like eight or something or you have a very few. So it's going to be hard for me to make a mistake here. I'm going to make some at some point, probably, and therefore it's still useful to have tests. But the wiggle room is a lot less than if we wrote it in a dynamic language where the inputs and the outputs are any value there. They can be undefined. They can be JSON functions, whatever. So just restricting the wiggle room that you have to something very tiny makes it much more likely that you're going to have the correct implementation or a correct implementation or somewhat correct. Right, right. And people put a lot of thought and effort into those practices of using types very well. And then they focus on that one thing and then, oh, it turns out like, well, do I really need to test for this workflow? And I think, I mean, I don't know, if you take the username example, like testing a valid username, like types are probably not a great tool for that. Like, sure, you could say that like these are the valid characters and this first character can be this and the second character and characters after can be that. But like, it's probably not necessary. But tests are a very good tool for that. And to me, like at the core of this is the habits to to build in these practices and also like not all tests are created equal. So I think if we like dig into it, I think a lot of people view I think a lot of people view types as a hindrance to their productivity. Which they can be depending on the language and tools that you have at your disposal. Right. And depending on how you use them. Right. And a lot of people's experiences with Java where they're not getting strong guarantees, you know, probably from a time when optional wasn't really baked into it. They're getting null exceptions all over the place and array index out of bounds, runtime exceptions, casting exceptions. So not all not all type systems are created equal. But also, if you're just using strings everywhere in your type system and not really leveraging types, then it's going to feel like nothing but a burden. It's going to feel like nothing but this thing that's forcing me to implement an abstract, you know, instance of this factory. And so I have to make like an anonymous class to satisfy this thing. And, OK, great. What safety did that give me? Yeah, it's only going to give you limited benefits because if everything is nullable anyway, then you're still going to end up with the biggest problem is that everything is nullable and you have to check for null everywhere, which I mean, you're going to have to write tests for that. Right. And if you still are using primitive types all over the place and you're not really making impossible states impossible and you're not really, you know, using, you know, union types or don't have that functionality in your language. So I think that's a lot of people's experience with it. So the way that you use your type system matters a lot, as I think a lot of our listeners will, you know, will be preaching to the choir there. But similarly, I think the way that you write tests matters a lot. And I think that, you know, in my opinion, after watching Kent Beck or watching DHH Creative Rails talk about TDD is dead and watching these sort of TDD experts talking him through it and asking, why do you think TDD is dead and how do you practice TDD? And what I gathered from all of that is the way he practices TDD is very focused on doing a lot of integration tests, sort of these in between tests. They're not end to end tests. They're not unit tests that are exercising one small unit of behavior. They're integration tests. And from my experience in my Rails development days, there is a lot of that in testing culture in the Rails community and, you know, these controller tests. So it's not really giving you confidence that your full system works end to end because it's not opening up a browser and running through a user workflow and giving you confidence end to end. It's not thoroughly exercising all of the possible ways to call one method either. So it gets very messy and you're doing a lot of mocking and stubbing, creating a lot of fake values. And that is like very important because you're testing your mocks. You're testing your fake value producers, not your system under test. And so when you change something and nothing breaks, well, oh, I guess I was mocking that. And what happens is your tests become extremely coupled to your code, but don't actually give you confidence about it. So it's the worst of both worlds. And I think that's why DHH had this whole Rails is dead thing besides just being a provocateur and liking to say confidential things. Were you pulling your hair out when you were watching the talk? Yeah, yeah, well, it was just very on brand and it's like, all right, you know, I think people are going to continue to think what they think about testing and if they already thought that testing was a waste of time, then that will reinforce that opinion. And if they thought TDD was great, then that will reinforce that opinion and have them think about why they disagree. But I think it's an interesting conversation. To me, the takeaway is it really matters how you write your tests. And now you can't mock in Elm, particularly, but you can write good, good or bad tests, useful or not useful tests. Yeah, if you write Elm program tests, you have to mock somehow. Right, right. But you're not going to have those spies or in the exact same kind of mocks like you're going to have test data, you're not going to have mocks. And like, I actually, you can't even do white box testing in Elm, right? So black boxes testing is when you check, you give inputs and you make assertions on the output, but can't do white box. I'd say not. You can influence the internals by passing inputs. Well, yeah. I mean, it depends on how like with Elm a lot of the time. I mean, you know, when I was doing technical coaching, you know, in non Elm companies, like I was spending a lot of my time trying to teach people to follow these practices that Elm forces you to do, like dependency inversion and, you know, dependency injection. And, you know, so instead of like mocking things, you can pass in the value. So you have control over instead of like mocking time dot now or whatever, right? You, you pass in the time and in Elm, you have to do that because you can't just go get the side effect. So you don't have to mock the current date because you have to have that as an explicit dependency as, as an argument with, with dependency injection essentially. So Elm does help with a lot of those practices, but nonetheless, like you can write useful tests or not. You can, and you can scope things into meaningful units or not. And I think the way you organize your code and extract things into modules and opaque types is a big part of that. The way I see it, whenever I think of TDD, I mostly think of unit tests because that's what people push towards. That's where you will see the most benefits. And integration tests are always a bit slower and a bit more clunky, especially if you need to do mocks and spies and, and those kinds of things, which we can't do. And now, as you just said, but also integration tests is like about connecting multiple things, right? And that's actually where types shine. So in a unit test, like if you're not going to, you're going to give some input and going to assert something on the output. If the tests are not exactly what is expected, that might not be too much of a problem. I mean, your tests are going to cover that, but types are contracts, right? They say, well, this thing takes this as an input and it will return this type as an output. And then that can only be used in specific ways, just like you said with the username and other non primitive types. And well, whoever's going to use those types as inputs or outputs, they're going to have to do it in a correct way because the type checker will validate that for you. But that's going to be something that is very hard for your unit test to verify, right? You're going to have to write multiple unit tests. You're going to have to write a lot of scenarios and to figure out where, when it fails to do it correctly, which you're going to fix. But basically you're going to do like tests based on, yeah, scrap that, scrap the last part. So yeah, whenever I think about integration tests, I feel like that's where types are better suited or view the whole thing as a unit tests. So unit tests all the way and for big things still considered as unit tests, but the implementation inside, that's where types shine. Right. I totally agree. I think that fitting pieces together wiring, like, and in my Ruby on Rails development days, I thought a lot about wiring and with Elm, you just let the compiler think about it. You know, I mean, you think about designing how the pieces will fit together and then you trust it once you've sort of designed how you want that to work. And, but you have to think about that in your testing process. And as you say, with like writing mocks and things as you're writing integration tests in your Rails applications. And it's very challenging and it takes a lot to gain confidence through test driven development about your wiring, whereas it's trivial in a type system. That's what type systems really shine at. Like they're so good at doing that. And yes, they're good at making impossible states impossible too. And that's great. But the wiring, it's just, you can't go wrong. And if your wiring is just this function takes a string, this function takes an int, you're missing out. You're missing out on what you can do with your type system. But yeah, a lot of these integration tests go away. But I think the way that you organize your code is very important. So just like, I think the cost of change is very important to this types versus tests, because I think a lot of people will feel that, like, they'll feel that tests slow them down, they'll feel the types slow them down, or, you know, one or both, whichever they hate more. Yeah. Possibly they'll feel that both slow them down. But if so, maybe they're not listening to Elm Radio. But I think the way that you write your tests will will affect how it slows you down or not. And if you're, you can write Elm code in a way where things get very tangled up with each other. And it feels like making a change, you have to change all of these tests and throw things away. But if you are kind of organizing things into nice encapsulated, opaque types that have well defined areas of knowledge and responsibility, and you pull out these clean leaf nodes that are responsible for this one area of work, then things aren't coupled in an awkward way, right? So you can't, you can't separate the conversation about how you couple your system with the maintainability of your your types and tests. And so it's essential. So I would, I would encourage people if they are feeling like either types or tests are slowing them down, think about how, like, are you leveraging them to maximum effect? Like, are you actually getting something meaningful and useful out of them? And are you are you coupling them that in a way that makes the cost of change difficult, just like DHH is talking about a lot of tests with tons of mocks that are not really giving a lot of confidence and, and coupling all these things to the internals of the system? Well, you can kind of couple things in a way where your your tests are very hard to maintain and change in your Elm application. So the way you couple and organize your code is essential for that. So maybe let's talk about when you need to test like, so types are going to check for things that are very general, very generic, they're never going to be very detailed, they're never going to provide a lot of detail. So if you say that a function returns an integer, well, the type checker will prove that it will always be an integer, otherwise it wouldn't compile. But it doesn't tell you which one it will be. That's when you want to test, you want to test if you want to assert that in a specific scenario, or if you use property based testing, that it will always have some that either has a specific value or is constrained by a specific rule. So you're going to basically you're going to want to write tests whenever you can't prove anything by type system. So in my mind, there are at least two things for that. One, when you want to verify specific values among the wiggle room that you have, right? And two, whenever you want to prove things, things that can't be proven by the type system, including side effects, when your type system doesn't convey the information of which side effects are returned, then you're going to have to write the test for that. And also, if your type system is unsound, it's giving you some guarantees, but not everything. Like everything is nullable, like in Java, then you will want to have tests that prove that things are never null, things like that. So I think it's mostly for those things. So when you have, you want to test specific values, when you want to test side effects, and when you want to test things that can't be proved by your type system. Right. Yeah, I mean, types, to me are all about constraints. They describe and enforce constraints, and tests are about behavior. And there's an interplay. There are times when you'll want to capture a constraint in a test because it's very hard to express in the type. But yeah, a lot of the time, you describe your constraints and your types, and then you test the behavior in the tests. You just can't test the behavior with types. So yeah, I think to me, it's your business logic. Right. Now, I'm usually not going to be writing view tests because Martin Janacek recently gave an Elm Online talk where he was showcasing how he uses Elm Book to do this sort of storybook driven development style of writing view components in his Elm app. And I thought that was very cool for, like, to me, that's pretty sufficient for testing visual elements, and I don't find much value to writing unit level tests for that. I think it's very valuable to have end to end tests, not integration tests that are faking things out, but end to end tests that are actually running through opening browser Cypress tests, things like that, to give you confidence in the system. Oh, sorry. What if you have view code that has quite a bit of logic that returns HTML? Great point. So in cases like that, I would tend to already want that as a separate testable unit that is invoked by my view logic, but not spread out all over in my view code. Okay, so it's kind of like, wrap early, unwrap late. You unwrap to HTML as late as possible, but whatever logic you have, you want to do it with specific types or maybe even just primitives, but not HTML, which is harder to test. Yeah, and, and like, to me, I want to split out my business logic from my view logic and templating it to me is like if I'm writing a test that's testing my templating, it's just, it's just writing the same thing twice and it and coupling me in a way where I change this thing, this thing breaks, it just feels like brittle tests. It doesn't feel valuable to me. It doesn't feel like it's preventing me from causing bugs. It just feels like it's slowing me down from making changes in the system and making it more frustrating. Yeah, absolutely. I was mostly thinking of like, if you have branching conditionals in your view code. Right, right. So, so like, for example, if there's like, you know, I don't know, you could have like, how do you render, you could have some complex logic for how you you render names based on, you know, if there's a, if it's a guest login, or if there's a last name or if there's a username or you, you know, you pick this display name to use or, you know, you could have complex logic with lots of branching and lots of complexity. That feels like business logic, right? The, the key thing is it feels like business logic, then I'm going to want to encapsulate that and invoke that from my view template. But I want my view template to be kind of dumb. And I don't really want to test that through unit tests. But I do want to unit test my business logic. And I think this is really essential is it's like, it's just a skill and a habit. It's kind of hard to learn without just sitting next to somebody who's done this a lot and probably sat next to somebody else who had done it a lot. You know, you go up the chain enough, and then there's probably somebody that sat next to Kent Beck and did it a lot and Kent Beck came up with this discipline, right? But that's kind of like the easiest way to learn how to decide what to separate out as business logic. Like it's this design sense that you, it's hard to just learn naturally by thinking it through. But, but to me, that's how I think about it. Business logic, I want to encapsulate that out somewhere as a unit and then test that unit. So, so unit testing, figuring out what the units are is very hard. Okay, I'm starting to think we're getting at the point where we need to answer the question. Dillon, types or tests? Tweps. God, goddammit. I actually don't even know. Are we allowed to swear on this radio? No, I don't think we ever have. That elicited a very strong response. Yeah, let's imagine you only had the choice between writing tests or writing types. What would you prefer? All I have to say is, if you had modeled your constraints better in your possible responses, then I wouldn't have been able to respond that way. Yeah, but everything you say is just stringly typed. That's true. Our whole podcast is. I'm working against your interface and you only return strings. Maybe strings? Maybe strings, because you could keep silent. Exactly. It's hard for, I mean, I genuinely can't make up my mind. I really can't. Like, you can't make me choose between my children. I love them both. You don't have any children. And more importantly, you don't need to choose one or the other. Like, what about it takes away from the other thing? They enhance each other. You could write JavaScript and don't have access to types. Right. Well, you could, or you could write Elm. Well, that's a bold choice. So I think, do you have an opinion? There's something I want to mention, but before I do, what would you choose? I would totally choose types. I suspected as much. Why do you think that is? Yeah, because I also said, like, I don't write that many tests because I feel like I constrained that wiggle room enough for me to not mess up too often. But also, like, the experience between writing unit tests and types is so different because for writing unit tests, you need to have a somewhat clear understanding of the API, where if you change it, you're going to have to change to update your unit tests. But also the experience of finding issues is going to be very different for it when you have test failures versus when you have compiler errors. So if you change your code, your types or your tests, no, your production code or your types, then unit tests will just start breaking, right? They will say, hey, you've got to, this is not returning the correct thing or it crashes for some reason. And you're going to have to figure out yourself where the problem lies. But when you change a type, the compiler will tell you, hey, you've got a problem here and you go fix it. You got a problem here, you go fix it and so on and so on. You don't have to figure out where the problem lies. The compiler tells you. And that is just so much more useful, I think. So I know you're going to say, like, oh, you didn't have to think too much about your API. You can change it and that's fine. But it's just like another type error. Right. No, I mean, I think, yeah, these are great points. And I think that in a way, I suspect that some of this types versus tests conversation, again, as I said earlier, I think that often when people are dealing with type systems that aren't sound type systems, they're not working with guarantees from types. They're working with checks from types, which feels a lot like a test. A test checks one thing. You run a test, it checks one thing. You run a, you know, fuzz test and it checks and things for and runs within the constraints you build up for it to check. But it's it's finite, whereas types work the other way, constraining things and giving you guarantees, not checking one thing and saying, yes, that one thing does what you think. One kind of testing we haven't talked about, which is writing assertions in your code. That is something we don't have in Elm and also isn't that big in JavaScript. But I know that some ecosystems are bigger on that. Maybe Rust, maybe C like languages where, oh, you're going to write an assertion checking that some list is non empty, for instance. Invariants. Yeah, invariants, but writing those in your code. And if that ever if that is ever false in a specific behavior, a specific scenario, then it's going to crash, I guess. But again, you need to write unit tests to to find those in your C.I. Right. Right. And yeah, it's interesting, but it feels like something that, you know, impossible states or opaque types or these different techniques should be able to help you help you with. So, yeah. So I think the way a lot of people are used to working with type systems, it feels more like testing because it's just checking one thing rather than giving you guarantees. But when you're working with it as guarantees, it feels qualitatively different. As you're saying, when you have tests with guarantees, tools can help you. The compiler can point you to, hey, here's what's wrong in this specific spot. Here's what you can do to fix that. Also, static analysis tools, maybe Elm review, cross that out your bingo card. Actually, Elm review can infer some things from from your code. Like we don't do much, but we it could potentially. But figure out things from your tests. That would be interesting and a lot harder. Exactly. Because it's just the whole point to me. It's it's the bare metal. Like tests are bare metal. They're this very low level thing. That's the whole point. They are not as expressive as code. And that's why they're useful. It's not arbitrary code. What do you mean they're not as expressive as normal code? They're not an unconstrained thing where you're writing arbitrary code. You're saying, you know, type user equals guest or admin, you know, admin details or regular user details. Like it's you're not saying, oh, and if this if this conditional checking run time conditions, you look at it, you look at it and you can fit it in your head all at once without imperatively running through the code and all the interactions of a complex system. That's what makes them interesting. And that's what makes them useful for tools. So static analysis tools, optimizations as well. Optimizers also. Yeah, absolutely. Optimizations, IDEs, code completion, stuff like that. Yeah, absolutely. So and I just feel like we're barely scratching the surface of what we can do with tools with with constraints, with with very strong guarantees. Right. Like, you know, automatic code solvers. Right. Like GitHub Copilot is, you know, pretty pretty popular these days. Well, what if what if there was something that took a completely different approach to GitHub Copilot and used its understanding of the constraints baked into the language and the types to suggest possible solutions? Right. Like I saw a talk that was showcasing this, like, you know, automatic function generator that takes like all of the values that are in scope and tries to infer like here are 10 possible functions I can create with this. They use these different values because this is a list and this is a function that takes a value and returns this. And then I can list out fold over this. And so here are 10 different things you could do with this. And a lot of the time it auto generates code that you're like, oh, yeah, that was what I wanted to do with these inputs. Tests can't really fulfill those types of possibilities. So tests are very compelling in that regard. But, you know, you can you can you can use tests to do a a worse job at being a type system and checking constraints. So I think tests are tests are just so good. And I wish that like I wish that people in the type community would embrace them a little bit more. But maybe we need to give some really good resources for how to how to do that. Yeah. To make good use of tests, you do need to be a not going to say a good developer, but you need to have some some good habits. Yeah, some good habits, because if you don't have the habits of running a test, then you don't have any guarantees at all. Running a type is a lot less effort, in my opinion. And also, one thing that is interesting to figure out and to notice is that it is actually quite easy to ignore a failing unit test because you can delete the unit tests. Right. Or, you know, you can with big quotes and forget to write the unit tests. Right. But with a type checker, that won't be possible. So type checkers are much more general, also in the sense that they will look at the whole code base. So it's going to be better to find a lot more issues, especially if you don't have good habits. Test development is only as good as the culture and the habits that it's operating within. Yeah. I wrote a blog post a while back called Relentless Tiny Habits. I think that test development is fascinating in the sense that it's not necessarily any particular one difficult skill. It's more just like, yeah, it is that simple, but you just do it all the time and don't not do it. And it's a habit, but it's hard to build that habit. And I think there needs to be like a mindset shift. I think when you have that mindset shift, when you see it as something that you go from thinking that it's something that slows you down to thinking that it's something that speeds you up. I think that's essential. But it's also something that you need to do yourself. You need to get better. Right. But also your whole team needs to do the same thing. Because as soon as someone doesn't adhere to this philosophy of you should write tests first, doing the right TDD the right way. Well, then the whole system will not work as effectively. Whereas one person could just add tests, add types and improve everyone's lives with a lot of work. But yeah, I mean, someone can take that nice opaque type and expose the constructors and then just building it or not use the username opaque type and just start passing strings somewhere, too. Right. So I like to curse again or there are cultural things to both. And it's not a coincidence that extreme programming is heavy on test driven development and pair programming. Right. Because it's cultural and it's about habits and spreading knowledge and spreading cultural ideas. And if you don't if you don't do that, then it's not very useful. I still imagine that if you have a team of 10 developers who are keen on doing TDD except two people, I feel like they will always pair together because they're going to be less annoyed by the other person. Like, oh, yeah, you and me make a good team because we don't say, oh, please write a test first. I think a lot of it comes down to the paradigm, like the lens that we that we look through. And if if if you if you see types as a burden, the way that you use types, if if at all, if you can avoid using them, then maybe not at all. But the way you use types will look very different. If you're writing TypeScript, you're probably going to use a lot of any's or inferred types. Also inference apparently is a big thing. Type inference. And you're probably going to just JSON that parse and get your any type and pass it around without, you know, using something that does something similar to JSON decoding an Elm where it gives you guarantees about the JSON values you're getting. So but if you perceive it as something that gives you value to to check those types and be able to work with those types, giving you confidence and guarantees, it's going to change the way that you leverage types. If you're working in Elm, you're going to be making impossible states impossible and you're going to be using parse, don't validate and all these things that let you get more value out of types instead of saying, oh, this is just a burden. And I think it's the same with tests. Like if you view tests as a burden and a moral responsibility, which I'm I really don't think it's constructive to talk about these things as a moral responsibility or a professional shortcoming or something. If you don't follow these practices, in my opinion, that's just very counterproductive. To me, it's like, hey, this is a tool that allows you to to work in a much more like enjoyable and safe way where you're just like flowing through your code and you don't have to keep manually testing this thing. And is it working now? Is it working now? Is it working now? It's it's very satisfying to be working with this auto test runner that and you want to refactor. Oh, no problem. Let me just go and rip off. Like if you like the feeling of refactoring Elm code without tests, like if you have a well tested code base that is, you know, nicely abstracted to have nice units that have, you know, nicely defined responsibilities that aren't heavily coupled together. That feels really good. So, you know, but but it's a paradigm shift and a lot of people view tests as a burden. And I think that's the hump to get over. And culturally, that's that's the first step is like seeing, seeing that in action. But I think a really good way to to build this up is to do it outside of production code. So, you know, there's this concept of code cadres, which is code that you don't ship to production where the purpose of it is learning. So you take a simple exercise, Roman numerals, fizzbuzz, things like that. And you use all of the techniques that you're trying to learn, you you only do very disciplined red green refactor. And because when you're working in a large production system, then you can build up bad habits. And you can make you can take steps where you're actually like coupling things in a way that makes it harder to work with when you're working on these simple problems, you can experiment and learn and develop these habits. Oh, I always feel like you can play with Elm codes more than other languages. But yeah, absolutely. One thing that just came to my mind is that we we didn't mention compilation times. Because some languages have very long compilation times. So if you want to be if you want the type checker, the compiler to tell you, hey, there's a problem here, there's a problem there, or to make guarantees for you. Well, do this, how fast the compiler runs will impact the experience that you will have. Yes. And if this run a lot faster than the type checker, then yeah, I think it makes a lot of sense that you will write more unit tests. In Elm's case, like both are really fast. I would say well, the type check is much faster than unit tests because the more tests you add, the slower it will run. But yeah, they're both fast in our case. So we're pretty lucky. Units are quite fast. Yeah. Units are quite fast in Elm. Depends on how many you have. If you have 10,000, it's gonna take a few seconds, probably. Depending on what you test, right? Even so, that's not so bad. So what tends to happen a lot in like Ruby on Rails shops is you get a lot of integration tests that are spinning up a database in an integration test, but there's some there's some mocking but there's some spinning up a database, and they get very slow. And that is painful because now you have to run a subset of your tests because it's too slow, the feedback loop, but they're not giving you full confidence. And they're flaky because it's spinning up a database and sometimes gives you non deterministic results. And sometimes it's depending on time and giving you a result based on when you run it. Or worse, depending on other tests being run. Right. Exactly. The order of the tests being run. And so you wonder why DHH says TDD is dead, right? It's not a big surprise. Yeah. I feel like we have done a pretty good round of it. We have done other episodes on testing opaque types. I actually wonder, did we say opaque types enough? Have we hit our quota or should we say it a few more times? I'm not sure. We could always say it a little bit more. But if you haven't listened to our opaque types episode, as we've said, mandatory listening, that should have been episode number one of Elm Radio. That should have been our most listened to episode. It actually isn't. Yeah, that's true. We'll keep pestering people until it becomes our number one listened to episode. If people want to remember to subscribe to our podcast, some people are not subscribed and getting every episode. Subscribe to your podcast feed. Give us a rating on Apple podcasts and follow us on Twitter and Yeroon. Until next time. Until next time.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 2.0, "text": " Hello, Jeroen.", "tokens": [50364, 2425, 11, 508, 2032, 268, 13, 50464, 50464, 2425, 11, 28160, 13, 50514, 50514, 407, 366, 291, 264, 2010, 295, 954, 300, 5902, 6921, 30, 50714, 50714, 1436, 321, 434, 516, 281, 362, 257, 1851, 766, 1296, 729, 732, 13, 50864, 50864, 286, 1062, 312, 10613, 33941, 13, 50964, 50964, 286, 1062, 312, 485, 51064, 51064, 1545, 360, 321, 362, 281, 2826, 30, 51114, 51114, 1545, 360, 321, 362, 281, 2092, 670, 341, 30, 51214, 51214, 1664, 380, 321, 445, 439, 3986, 300, 436, 434, 1293, 665, 30, 51414, 51414, 492, 393, 13, 51464, 51464, 400, 718, 311, 360, 300, 13, 51514, 51514, 407, 1310, 300, 311, 264, 3500, 1217, 13, 51664, 51664, 19882, 1266, 13, 51714, 51714, 865, 13, 51764, 51764, 5569, 5190, 5717, 6921, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.17811350058053285, "compression_ratio": 1.5884773662551441, "no_caption_prob": 0.30651530623435974}, {"id": 1, "seek": 0, "start": 2.0, "end": 3.0, "text": " Hello, Dillon.", "tokens": [50364, 2425, 11, 508, 2032, 268, 13, 50464, 50464, 2425, 11, 28160, 13, 50514, 50514, 407, 366, 291, 264, 2010, 295, 954, 300, 5902, 6921, 30, 50714, 50714, 1436, 321, 434, 516, 281, 362, 257, 1851, 766, 1296, 729, 732, 13, 50864, 50864, 286, 1062, 312, 10613, 33941, 13, 50964, 50964, 286, 1062, 312, 485, 51064, 51064, 1545, 360, 321, 362, 281, 2826, 30, 51114, 51114, 1545, 360, 321, 362, 281, 2092, 670, 341, 30, 51214, 51214, 1664, 380, 321, 445, 439, 3986, 300, 436, 434, 1293, 665, 30, 51414, 51414, 492, 393, 13, 51464, 51464, 400, 718, 311, 360, 300, 13, 51514, 51514, 407, 1310, 300, 311, 264, 3500, 1217, 13, 51664, 51664, 19882, 1266, 13, 51714, 51714, 865, 13, 51764, 51764, 5569, 5190, 5717, 6921, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.17811350058053285, "compression_ratio": 1.5884773662551441, "no_caption_prob": 0.30651530623435974}, {"id": 2, "seek": 0, "start": 3.0, "end": 7.0, "text": " So are you the type of person that likes tests?", "tokens": [50364, 2425, 11, 508, 2032, 268, 13, 50464, 50464, 2425, 11, 28160, 13, 50514, 50514, 407, 366, 291, 264, 2010, 295, 954, 300, 5902, 6921, 30, 50714, 50714, 1436, 321, 434, 516, 281, 362, 257, 1851, 766, 1296, 729, 732, 13, 50864, 50864, 286, 1062, 312, 10613, 33941, 13, 50964, 50964, 286, 1062, 312, 485, 51064, 51064, 1545, 360, 321, 362, 281, 2826, 30, 51114, 51114, 1545, 360, 321, 362, 281, 2092, 670, 341, 30, 51214, 51214, 1664, 380, 321, 445, 439, 3986, 300, 436, 434, 1293, 665, 30, 51414, 51414, 492, 393, 13, 51464, 51464, 400, 718, 311, 360, 300, 13, 51514, 51514, 407, 1310, 300, 311, 264, 3500, 1217, 13, 51664, 51664, 19882, 1266, 13, 51714, 51714, 865, 13, 51764, 51764, 5569, 5190, 5717, 6921, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.17811350058053285, "compression_ratio": 1.5884773662551441, "no_caption_prob": 0.30651530623435974}, {"id": 3, "seek": 0, "start": 7.0, "end": 10.0, "text": " Because we're going to have a face off between those two.", "tokens": [50364, 2425, 11, 508, 2032, 268, 13, 50464, 50464, 2425, 11, 28160, 13, 50514, 50514, 407, 366, 291, 264, 2010, 295, 954, 300, 5902, 6921, 30, 50714, 50714, 1436, 321, 434, 516, 281, 362, 257, 1851, 766, 1296, 729, 732, 13, 50864, 50864, 286, 1062, 312, 10613, 33941, 13, 50964, 50964, 286, 1062, 312, 485, 51064, 51064, 1545, 360, 321, 362, 281, 2826, 30, 51114, 51114, 1545, 360, 321, 362, 281, 2092, 670, 341, 30, 51214, 51214, 1664, 380, 321, 445, 439, 3986, 300, 436, 434, 1293, 665, 30, 51414, 51414, 492, 393, 13, 51464, 51464, 400, 718, 311, 360, 300, 13, 51514, 51514, 407, 1310, 300, 311, 264, 3500, 1217, 13, 51664, 51664, 19882, 1266, 13, 51714, 51714, 865, 13, 51764, 51764, 5569, 5190, 5717, 6921, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.17811350058053285, "compression_ratio": 1.5884773662551441, "no_caption_prob": 0.30651530623435974}, {"id": 4, "seek": 0, "start": 10.0, "end": 12.0, "text": " I might be strongly typed.", "tokens": [50364, 2425, 11, 508, 2032, 268, 13, 50464, 50464, 2425, 11, 28160, 13, 50514, 50514, 407, 366, 291, 264, 2010, 295, 954, 300, 5902, 6921, 30, 50714, 50714, 1436, 321, 434, 516, 281, 362, 257, 1851, 766, 1296, 729, 732, 13, 50864, 50864, 286, 1062, 312, 10613, 33941, 13, 50964, 50964, 286, 1062, 312, 485, 51064, 51064, 1545, 360, 321, 362, 281, 2826, 30, 51114, 51114, 1545, 360, 321, 362, 281, 2092, 670, 341, 30, 51214, 51214, 1664, 380, 321, 445, 439, 3986, 300, 436, 434, 1293, 665, 30, 51414, 51414, 492, 393, 13, 51464, 51464, 400, 718, 311, 360, 300, 13, 51514, 51514, 407, 1310, 300, 311, 264, 3500, 1217, 13, 51664, 51664, 19882, 1266, 13, 51714, 51714, 865, 13, 51764, 51764, 5569, 5190, 5717, 6921, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.17811350058053285, "compression_ratio": 1.5884773662551441, "no_caption_prob": 0.30651530623435974}, {"id": 5, "seek": 0, "start": 12.0, "end": 14.0, "text": " I might be...", "tokens": [50364, 2425, 11, 508, 2032, 268, 13, 50464, 50464, 2425, 11, 28160, 13, 50514, 50514, 407, 366, 291, 264, 2010, 295, 954, 300, 5902, 6921, 30, 50714, 50714, 1436, 321, 434, 516, 281, 362, 257, 1851, 766, 1296, 729, 732, 13, 50864, 50864, 286, 1062, 312, 10613, 33941, 13, 50964, 50964, 286, 1062, 312, 485, 51064, 51064, 1545, 360, 321, 362, 281, 2826, 30, 51114, 51114, 1545, 360, 321, 362, 281, 2092, 670, 341, 30, 51214, 51214, 1664, 380, 321, 445, 439, 3986, 300, 436, 434, 1293, 665, 30, 51414, 51414, 492, 393, 13, 51464, 51464, 400, 718, 311, 360, 300, 13, 51514, 51514, 407, 1310, 300, 311, 264, 3500, 1217, 13, 51664, 51664, 19882, 1266, 13, 51714, 51714, 865, 13, 51764, 51764, 5569, 5190, 5717, 6921, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.17811350058053285, "compression_ratio": 1.5884773662551441, "no_caption_prob": 0.30651530623435974}, {"id": 6, "seek": 0, "start": 14.0, "end": 15.0, "text": " Why do we have to choose?", "tokens": [50364, 2425, 11, 508, 2032, 268, 13, 50464, 50464, 2425, 11, 28160, 13, 50514, 50514, 407, 366, 291, 264, 2010, 295, 954, 300, 5902, 6921, 30, 50714, 50714, 1436, 321, 434, 516, 281, 362, 257, 1851, 766, 1296, 729, 732, 13, 50864, 50864, 286, 1062, 312, 10613, 33941, 13, 50964, 50964, 286, 1062, 312, 485, 51064, 51064, 1545, 360, 321, 362, 281, 2826, 30, 51114, 51114, 1545, 360, 321, 362, 281, 2092, 670, 341, 30, 51214, 51214, 1664, 380, 321, 445, 439, 3986, 300, 436, 434, 1293, 665, 30, 51414, 51414, 492, 393, 13, 51464, 51464, 400, 718, 311, 360, 300, 13, 51514, 51514, 407, 1310, 300, 311, 264, 3500, 1217, 13, 51664, 51664, 19882, 1266, 13, 51714, 51714, 865, 13, 51764, 51764, 5569, 5190, 5717, 6921, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.17811350058053285, "compression_ratio": 1.5884773662551441, "no_caption_prob": 0.30651530623435974}, {"id": 7, "seek": 0, "start": 15.0, "end": 17.0, "text": " Why do we have to fight over this?", "tokens": [50364, 2425, 11, 508, 2032, 268, 13, 50464, 50464, 2425, 11, 28160, 13, 50514, 50514, 407, 366, 291, 264, 2010, 295, 954, 300, 5902, 6921, 30, 50714, 50714, 1436, 321, 434, 516, 281, 362, 257, 1851, 766, 1296, 729, 732, 13, 50864, 50864, 286, 1062, 312, 10613, 33941, 13, 50964, 50964, 286, 1062, 312, 485, 51064, 51064, 1545, 360, 321, 362, 281, 2826, 30, 51114, 51114, 1545, 360, 321, 362, 281, 2092, 670, 341, 30, 51214, 51214, 1664, 380, 321, 445, 439, 3986, 300, 436, 434, 1293, 665, 30, 51414, 51414, 492, 393, 13, 51464, 51464, 400, 718, 311, 360, 300, 13, 51514, 51514, 407, 1310, 300, 311, 264, 3500, 1217, 13, 51664, 51664, 19882, 1266, 13, 51714, 51714, 865, 13, 51764, 51764, 5569, 5190, 5717, 6921, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.17811350058053285, "compression_ratio": 1.5884773662551441, "no_caption_prob": 0.30651530623435974}, {"id": 8, "seek": 0, "start": 17.0, "end": 21.0, "text": " Can't we just all agree that they're both good?", "tokens": [50364, 2425, 11, 508, 2032, 268, 13, 50464, 50464, 2425, 11, 28160, 13, 50514, 50514, 407, 366, 291, 264, 2010, 295, 954, 300, 5902, 6921, 30, 50714, 50714, 1436, 321, 434, 516, 281, 362, 257, 1851, 766, 1296, 729, 732, 13, 50864, 50864, 286, 1062, 312, 10613, 33941, 13, 50964, 50964, 286, 1062, 312, 485, 51064, 51064, 1545, 360, 321, 362, 281, 2826, 30, 51114, 51114, 1545, 360, 321, 362, 281, 2092, 670, 341, 30, 51214, 51214, 1664, 380, 321, 445, 439, 3986, 300, 436, 434, 1293, 665, 30, 51414, 51414, 492, 393, 13, 51464, 51464, 400, 718, 311, 360, 300, 13, 51514, 51514, 407, 1310, 300, 311, 264, 3500, 1217, 13, 51664, 51664, 19882, 1266, 13, 51714, 51714, 865, 13, 51764, 51764, 5569, 5190, 5717, 6921, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.17811350058053285, "compression_ratio": 1.5884773662551441, "no_caption_prob": 0.30651530623435974}, {"id": 9, "seek": 0, "start": 21.0, "end": 22.0, "text": " We can.", "tokens": [50364, 2425, 11, 508, 2032, 268, 13, 50464, 50464, 2425, 11, 28160, 13, 50514, 50514, 407, 366, 291, 264, 2010, 295, 954, 300, 5902, 6921, 30, 50714, 50714, 1436, 321, 434, 516, 281, 362, 257, 1851, 766, 1296, 729, 732, 13, 50864, 50864, 286, 1062, 312, 10613, 33941, 13, 50964, 50964, 286, 1062, 312, 485, 51064, 51064, 1545, 360, 321, 362, 281, 2826, 30, 51114, 51114, 1545, 360, 321, 362, 281, 2092, 670, 341, 30, 51214, 51214, 1664, 380, 321, 445, 439, 3986, 300, 436, 434, 1293, 665, 30, 51414, 51414, 492, 393, 13, 51464, 51464, 400, 718, 311, 360, 300, 13, 51514, 51514, 407, 1310, 300, 311, 264, 3500, 1217, 13, 51664, 51664, 19882, 1266, 13, 51714, 51714, 865, 13, 51764, 51764, 5569, 5190, 5717, 6921, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.17811350058053285, "compression_ratio": 1.5884773662551441, "no_caption_prob": 0.30651530623435974}, {"id": 10, "seek": 0, "start": 22.0, "end": 23.0, "text": " And let's do that.", "tokens": [50364, 2425, 11, 508, 2032, 268, 13, 50464, 50464, 2425, 11, 28160, 13, 50514, 50514, 407, 366, 291, 264, 2010, 295, 954, 300, 5902, 6921, 30, 50714, 50714, 1436, 321, 434, 516, 281, 362, 257, 1851, 766, 1296, 729, 732, 13, 50864, 50864, 286, 1062, 312, 10613, 33941, 13, 50964, 50964, 286, 1062, 312, 485, 51064, 51064, 1545, 360, 321, 362, 281, 2826, 30, 51114, 51114, 1545, 360, 321, 362, 281, 2092, 670, 341, 30, 51214, 51214, 1664, 380, 321, 445, 439, 3986, 300, 436, 434, 1293, 665, 30, 51414, 51414, 492, 393, 13, 51464, 51464, 400, 718, 311, 360, 300, 13, 51514, 51514, 407, 1310, 300, 311, 264, 3500, 1217, 13, 51664, 51664, 19882, 1266, 13, 51714, 51714, 865, 13, 51764, 51764, 5569, 5190, 5717, 6921, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.17811350058053285, "compression_ratio": 1.5884773662551441, "no_caption_prob": 0.30651530623435974}, {"id": 11, "seek": 0, "start": 23.0, "end": 26.0, "text": " So maybe that's the episode already.", "tokens": [50364, 2425, 11, 508, 2032, 268, 13, 50464, 50464, 2425, 11, 28160, 13, 50514, 50514, 407, 366, 291, 264, 2010, 295, 954, 300, 5902, 6921, 30, 50714, 50714, 1436, 321, 434, 516, 281, 362, 257, 1851, 766, 1296, 729, 732, 13, 50864, 50864, 286, 1062, 312, 10613, 33941, 13, 50964, 50964, 286, 1062, 312, 485, 51064, 51064, 1545, 360, 321, 362, 281, 2826, 30, 51114, 51114, 1545, 360, 321, 362, 281, 2092, 670, 341, 30, 51214, 51214, 1664, 380, 321, 445, 439, 3986, 300, 436, 434, 1293, 665, 30, 51414, 51414, 492, 393, 13, 51464, 51464, 400, 718, 311, 360, 300, 13, 51514, 51514, 407, 1310, 300, 311, 264, 3500, 1217, 13, 51664, 51664, 19882, 1266, 13, 51714, 51714, 865, 13, 51764, 51764, 5569, 5190, 5717, 6921, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.17811350058053285, "compression_ratio": 1.5884773662551441, "no_caption_prob": 0.30651530623435974}, {"id": 12, "seek": 0, "start": 26.0, "end": 27.0, "text": " Episode 10.", "tokens": [50364, 2425, 11, 508, 2032, 268, 13, 50464, 50464, 2425, 11, 28160, 13, 50514, 50514, 407, 366, 291, 264, 2010, 295, 954, 300, 5902, 6921, 30, 50714, 50714, 1436, 321, 434, 516, 281, 362, 257, 1851, 766, 1296, 729, 732, 13, 50864, 50864, 286, 1062, 312, 10613, 33941, 13, 50964, 50964, 286, 1062, 312, 485, 51064, 51064, 1545, 360, 321, 362, 281, 2826, 30, 51114, 51114, 1545, 360, 321, 362, 281, 2092, 670, 341, 30, 51214, 51214, 1664, 380, 321, 445, 439, 3986, 300, 436, 434, 1293, 665, 30, 51414, 51414, 492, 393, 13, 51464, 51464, 400, 718, 311, 360, 300, 13, 51514, 51514, 407, 1310, 300, 311, 264, 3500, 1217, 13, 51664, 51664, 19882, 1266, 13, 51714, 51714, 865, 13, 51764, 51764, 5569, 5190, 5717, 6921, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.17811350058053285, "compression_ratio": 1.5884773662551441, "no_caption_prob": 0.30651530623435974}, {"id": 13, "seek": 0, "start": 27.0, "end": 28.0, "text": " Yeah.", "tokens": [50364, 2425, 11, 508, 2032, 268, 13, 50464, 50464, 2425, 11, 28160, 13, 50514, 50514, 407, 366, 291, 264, 2010, 295, 954, 300, 5902, 6921, 30, 50714, 50714, 1436, 321, 434, 516, 281, 362, 257, 1851, 766, 1296, 729, 732, 13, 50864, 50864, 286, 1062, 312, 10613, 33941, 13, 50964, 50964, 286, 1062, 312, 485, 51064, 51064, 1545, 360, 321, 362, 281, 2826, 30, 51114, 51114, 1545, 360, 321, 362, 281, 2092, 670, 341, 30, 51214, 51214, 1664, 380, 321, 445, 439, 3986, 300, 436, 434, 1293, 665, 30, 51414, 51414, 492, 393, 13, 51464, 51464, 400, 718, 311, 360, 300, 13, 51514, 51514, 407, 1310, 300, 311, 264, 3500, 1217, 13, 51664, 51664, 19882, 1266, 13, 51714, 51714, 865, 13, 51764, 51764, 5569, 5190, 5717, 6921, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.17811350058053285, "compression_ratio": 1.5884773662551441, "no_caption_prob": 0.30651530623435974}, {"id": 14, "seek": 0, "start": 28.0, "end": 29.0, "text": " Types versus tests.", "tokens": [50364, 2425, 11, 508, 2032, 268, 13, 50464, 50464, 2425, 11, 28160, 13, 50514, 50514, 407, 366, 291, 264, 2010, 295, 954, 300, 5902, 6921, 30, 50714, 50714, 1436, 321, 434, 516, 281, 362, 257, 1851, 766, 1296, 729, 732, 13, 50864, 50864, 286, 1062, 312, 10613, 33941, 13, 50964, 50964, 286, 1062, 312, 485, 51064, 51064, 1545, 360, 321, 362, 281, 2826, 30, 51114, 51114, 1545, 360, 321, 362, 281, 2092, 670, 341, 30, 51214, 51214, 1664, 380, 321, 445, 439, 3986, 300, 436, 434, 1293, 665, 30, 51414, 51414, 492, 393, 13, 51464, 51464, 400, 718, 311, 360, 300, 13, 51514, 51514, 407, 1310, 300, 311, 264, 3500, 1217, 13, 51664, 51664, 19882, 1266, 13, 51714, 51714, 865, 13, 51764, 51764, 5569, 5190, 5717, 6921, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.17811350058053285, "compression_ratio": 1.5884773662551441, "no_caption_prob": 0.30651530623435974}, {"id": 15, "seek": 2900, "start": 29.0, "end": 30.0, "text": " It's not a competition.", "tokens": [50364, 467, 311, 406, 257, 6211, 13, 50414, 50414, 1449, 360, 1293, 13, 50464, 50464, 286, 362, 300, 707, 2013, 311, 1851, 294, 452, 1378, 586, 13, 50814, 50814, 400, 411, 11, 18633, 11, 18633, 13, 50914, 50914, 663, 311, 527, 3500, 13, 50964, 50964, 663, 311, 264, 3500, 13, 51064, 51064, 865, 11, 286, 914, 11, 286, 767, 360, 528, 281, 411, 15013, 300, 365, 291, 257, 707, 857, 13, 51314, 51314, 1743, 11, 983, 307, 309, 30, 51364, 51364, 1042, 11, 370, 700, 295, 439, 11, 321, 434, 1417, 466, 3467, 5717, 6921, 965, 13, 51564, 51564, 759, 291, 8782, 380, 13032, 300, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.15702331612963194, "compression_ratio": 1.5178571428571428, "no_caption_prob": 0.00033526396146044135}, {"id": 16, "seek": 2900, "start": 30.0, "end": 31.0, "text": " Just do both.", "tokens": [50364, 467, 311, 406, 257, 6211, 13, 50414, 50414, 1449, 360, 1293, 13, 50464, 50464, 286, 362, 300, 707, 2013, 311, 1851, 294, 452, 1378, 586, 13, 50814, 50814, 400, 411, 11, 18633, 11, 18633, 13, 50914, 50914, 663, 311, 527, 3500, 13, 50964, 50964, 663, 311, 264, 3500, 13, 51064, 51064, 865, 11, 286, 914, 11, 286, 767, 360, 528, 281, 411, 15013, 300, 365, 291, 257, 707, 857, 13, 51314, 51314, 1743, 11, 983, 307, 309, 30, 51364, 51364, 1042, 11, 370, 700, 295, 439, 11, 321, 434, 1417, 466, 3467, 5717, 6921, 965, 13, 51564, 51564, 759, 291, 8782, 380, 13032, 300, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.15702331612963194, "compression_ratio": 1.5178571428571428, "no_caption_prob": 0.00033526396146044135}, {"id": 17, "seek": 2900, "start": 31.0, "end": 38.0, "text": " I have that little girl's face in my head now.", "tokens": [50364, 467, 311, 406, 257, 6211, 13, 50414, 50414, 1449, 360, 1293, 13, 50464, 50464, 286, 362, 300, 707, 2013, 311, 1851, 294, 452, 1378, 586, 13, 50814, 50814, 400, 411, 11, 18633, 11, 18633, 13, 50914, 50914, 663, 311, 527, 3500, 13, 50964, 50964, 663, 311, 264, 3500, 13, 51064, 51064, 865, 11, 286, 914, 11, 286, 767, 360, 528, 281, 411, 15013, 300, 365, 291, 257, 707, 857, 13, 51314, 51314, 1743, 11, 983, 307, 309, 30, 51364, 51364, 1042, 11, 370, 700, 295, 439, 11, 321, 434, 1417, 466, 3467, 5717, 6921, 965, 13, 51564, 51564, 759, 291, 8782, 380, 13032, 300, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.15702331612963194, "compression_ratio": 1.5178571428571428, "no_caption_prob": 0.00033526396146044135}, {"id": 18, "seek": 2900, "start": 38.0, "end": 40.0, "text": " And like, yep, yep.", "tokens": [50364, 467, 311, 406, 257, 6211, 13, 50414, 50414, 1449, 360, 1293, 13, 50464, 50464, 286, 362, 300, 707, 2013, 311, 1851, 294, 452, 1378, 586, 13, 50814, 50814, 400, 411, 11, 18633, 11, 18633, 13, 50914, 50914, 663, 311, 527, 3500, 13, 50964, 50964, 663, 311, 264, 3500, 13, 51064, 51064, 865, 11, 286, 914, 11, 286, 767, 360, 528, 281, 411, 15013, 300, 365, 291, 257, 707, 857, 13, 51314, 51314, 1743, 11, 983, 307, 309, 30, 51364, 51364, 1042, 11, 370, 700, 295, 439, 11, 321, 434, 1417, 466, 3467, 5717, 6921, 965, 13, 51564, 51564, 759, 291, 8782, 380, 13032, 300, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.15702331612963194, "compression_ratio": 1.5178571428571428, "no_caption_prob": 0.00033526396146044135}, {"id": 19, "seek": 2900, "start": 40.0, "end": 41.0, "text": " That's our episode.", "tokens": [50364, 467, 311, 406, 257, 6211, 13, 50414, 50414, 1449, 360, 1293, 13, 50464, 50464, 286, 362, 300, 707, 2013, 311, 1851, 294, 452, 1378, 586, 13, 50814, 50814, 400, 411, 11, 18633, 11, 18633, 13, 50914, 50914, 663, 311, 527, 3500, 13, 50964, 50964, 663, 311, 264, 3500, 13, 51064, 51064, 865, 11, 286, 914, 11, 286, 767, 360, 528, 281, 411, 15013, 300, 365, 291, 257, 707, 857, 13, 51314, 51314, 1743, 11, 983, 307, 309, 30, 51364, 51364, 1042, 11, 370, 700, 295, 439, 11, 321, 434, 1417, 466, 3467, 5717, 6921, 965, 13, 51564, 51564, 759, 291, 8782, 380, 13032, 300, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.15702331612963194, "compression_ratio": 1.5178571428571428, "no_caption_prob": 0.00033526396146044135}, {"id": 20, "seek": 2900, "start": 41.0, "end": 43.0, "text": " That's the episode.", "tokens": [50364, 467, 311, 406, 257, 6211, 13, 50414, 50414, 1449, 360, 1293, 13, 50464, 50464, 286, 362, 300, 707, 2013, 311, 1851, 294, 452, 1378, 586, 13, 50814, 50814, 400, 411, 11, 18633, 11, 18633, 13, 50914, 50914, 663, 311, 527, 3500, 13, 50964, 50964, 663, 311, 264, 3500, 13, 51064, 51064, 865, 11, 286, 914, 11, 286, 767, 360, 528, 281, 411, 15013, 300, 365, 291, 257, 707, 857, 13, 51314, 51314, 1743, 11, 983, 307, 309, 30, 51364, 51364, 1042, 11, 370, 700, 295, 439, 11, 321, 434, 1417, 466, 3467, 5717, 6921, 965, 13, 51564, 51564, 759, 291, 8782, 380, 13032, 300, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.15702331612963194, "compression_ratio": 1.5178571428571428, "no_caption_prob": 0.00033526396146044135}, {"id": 21, "seek": 2900, "start": 43.0, "end": 48.0, "text": " Yeah, I mean, I actually do want to like investigate that with you a little bit.", "tokens": [50364, 467, 311, 406, 257, 6211, 13, 50414, 50414, 1449, 360, 1293, 13, 50464, 50464, 286, 362, 300, 707, 2013, 311, 1851, 294, 452, 1378, 586, 13, 50814, 50814, 400, 411, 11, 18633, 11, 18633, 13, 50914, 50914, 663, 311, 527, 3500, 13, 50964, 50964, 663, 311, 264, 3500, 13, 51064, 51064, 865, 11, 286, 914, 11, 286, 767, 360, 528, 281, 411, 15013, 300, 365, 291, 257, 707, 857, 13, 51314, 51314, 1743, 11, 983, 307, 309, 30, 51364, 51364, 1042, 11, 370, 700, 295, 439, 11, 321, 434, 1417, 466, 3467, 5717, 6921, 965, 13, 51564, 51564, 759, 291, 8782, 380, 13032, 300, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.15702331612963194, "compression_ratio": 1.5178571428571428, "no_caption_prob": 0.00033526396146044135}, {"id": 22, "seek": 2900, "start": 48.0, "end": 49.0, "text": " Like, why is it?", "tokens": [50364, 467, 311, 406, 257, 6211, 13, 50414, 50414, 1449, 360, 1293, 13, 50464, 50464, 286, 362, 300, 707, 2013, 311, 1851, 294, 452, 1378, 586, 13, 50814, 50814, 400, 411, 11, 18633, 11, 18633, 13, 50914, 50914, 663, 311, 527, 3500, 13, 50964, 50964, 663, 311, 264, 3500, 13, 51064, 51064, 865, 11, 286, 914, 11, 286, 767, 360, 528, 281, 411, 15013, 300, 365, 291, 257, 707, 857, 13, 51314, 51314, 1743, 11, 983, 307, 309, 30, 51364, 51364, 1042, 11, 370, 700, 295, 439, 11, 321, 434, 1417, 466, 3467, 5717, 6921, 965, 13, 51564, 51564, 759, 291, 8782, 380, 13032, 300, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.15702331612963194, "compression_ratio": 1.5178571428571428, "no_caption_prob": 0.00033526396146044135}, {"id": 23, "seek": 2900, "start": 49.0, "end": 53.0, "text": " Well, so first of all, we're talking about types versus tests today.", "tokens": [50364, 467, 311, 406, 257, 6211, 13, 50414, 50414, 1449, 360, 1293, 13, 50464, 50464, 286, 362, 300, 707, 2013, 311, 1851, 294, 452, 1378, 586, 13, 50814, 50814, 400, 411, 11, 18633, 11, 18633, 13, 50914, 50914, 663, 311, 527, 3500, 13, 50964, 50964, 663, 311, 264, 3500, 13, 51064, 51064, 865, 11, 286, 914, 11, 286, 767, 360, 528, 281, 411, 15013, 300, 365, 291, 257, 707, 857, 13, 51314, 51314, 1743, 11, 983, 307, 309, 30, 51364, 51364, 1042, 11, 370, 700, 295, 439, 11, 321, 434, 1417, 466, 3467, 5717, 6921, 965, 13, 51564, 51564, 759, 291, 8782, 380, 13032, 300, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.15702331612963194, "compression_ratio": 1.5178571428571428, "no_caption_prob": 0.00033526396146044135}, {"id": 24, "seek": 2900, "start": 53.0, "end": 55.0, "text": " If you hadn't gathered that.", "tokens": [50364, 467, 311, 406, 257, 6211, 13, 50414, 50414, 1449, 360, 1293, 13, 50464, 50464, 286, 362, 300, 707, 2013, 311, 1851, 294, 452, 1378, 586, 13, 50814, 50814, 400, 411, 11, 18633, 11, 18633, 13, 50914, 50914, 663, 311, 527, 3500, 13, 50964, 50964, 663, 311, 264, 3500, 13, 51064, 51064, 865, 11, 286, 914, 11, 286, 767, 360, 528, 281, 411, 15013, 300, 365, 291, 257, 707, 857, 13, 51314, 51314, 1743, 11, 983, 307, 309, 30, 51364, 51364, 1042, 11, 370, 700, 295, 439, 11, 321, 434, 1417, 466, 3467, 5717, 6921, 965, 13, 51564, 51564, 759, 291, 8782, 380, 13032, 300, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.15702331612963194, "compression_ratio": 1.5178571428571428, "no_caption_prob": 0.00033526396146044135}, {"id": 25, "seek": 5500, "start": 55.0, "end": 59.0, "text": " Why does it have to be a war between these two things?", "tokens": [50364, 1545, 775, 309, 362, 281, 312, 257, 1516, 1296, 613, 732, 721, 30, 50564, 50564, 1743, 11, 983, 307, 456, 604, 10710, 300, 472, 576, 747, 1314, 490, 264, 661, 420, 300, 472, 576, 9386, 394, 264, 661, 30, 50914, 50914, 1743, 11, 286, 915, 300, 588, 1880, 13, 51014, 51014, 865, 11, 731, 11, 452, 700, 16556, 281, 341, 1168, 307, 411, 11, 294, 257, 688, 295, 8650, 11, 291, 787, 362, 472, 11, 558, 30, 51414, 51414, 509, 787, 362, 6921, 13, 51464, 51464, 1171, 439, 264, 8650, 300, 366, 43492, 33941, 11, 309, 1177, 380, 841, 411, 291, 362, 3467, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.09736920286107946, "compression_ratio": 1.691358024691358, "no_caption_prob": 0.000108887797978241}, {"id": 26, "seek": 5500, "start": 59.0, "end": 66.0, "text": " Like, why is there any notion that one would take away from the other or that one would supplant the other?", "tokens": [50364, 1545, 775, 309, 362, 281, 312, 257, 1516, 1296, 613, 732, 721, 30, 50564, 50564, 1743, 11, 983, 307, 456, 604, 10710, 300, 472, 576, 747, 1314, 490, 264, 661, 420, 300, 472, 576, 9386, 394, 264, 661, 30, 50914, 50914, 1743, 11, 286, 915, 300, 588, 1880, 13, 51014, 51014, 865, 11, 731, 11, 452, 700, 16556, 281, 341, 1168, 307, 411, 11, 294, 257, 688, 295, 8650, 11, 291, 787, 362, 472, 11, 558, 30, 51414, 51414, 509, 787, 362, 6921, 13, 51464, 51464, 1171, 439, 264, 8650, 300, 366, 43492, 33941, 11, 309, 1177, 380, 841, 411, 291, 362, 3467, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.09736920286107946, "compression_ratio": 1.691358024691358, "no_caption_prob": 0.000108887797978241}, {"id": 27, "seek": 5500, "start": 66.0, "end": 68.0, "text": " Like, I find that very interesting.", "tokens": [50364, 1545, 775, 309, 362, 281, 312, 257, 1516, 1296, 613, 732, 721, 30, 50564, 50564, 1743, 11, 983, 307, 456, 604, 10710, 300, 472, 576, 747, 1314, 490, 264, 661, 420, 300, 472, 576, 9386, 394, 264, 661, 30, 50914, 50914, 1743, 11, 286, 915, 300, 588, 1880, 13, 51014, 51014, 865, 11, 731, 11, 452, 700, 16556, 281, 341, 1168, 307, 411, 11, 294, 257, 688, 295, 8650, 11, 291, 787, 362, 472, 11, 558, 30, 51414, 51414, 509, 787, 362, 6921, 13, 51464, 51464, 1171, 439, 264, 8650, 300, 366, 43492, 33941, 11, 309, 1177, 380, 841, 411, 291, 362, 3467, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.09736920286107946, "compression_ratio": 1.691358024691358, "no_caption_prob": 0.000108887797978241}, {"id": 28, "seek": 5500, "start": 68.0, "end": 76.0, "text": " Yeah, well, my first instinct to this question is like, in a lot of languages, you only have one, right?", "tokens": [50364, 1545, 775, 309, 362, 281, 312, 257, 1516, 1296, 613, 732, 721, 30, 50564, 50564, 1743, 11, 983, 307, 456, 604, 10710, 300, 472, 576, 747, 1314, 490, 264, 661, 420, 300, 472, 576, 9386, 394, 264, 661, 30, 50914, 50914, 1743, 11, 286, 915, 300, 588, 1880, 13, 51014, 51014, 865, 11, 731, 11, 452, 700, 16556, 281, 341, 1168, 307, 411, 11, 294, 257, 688, 295, 8650, 11, 291, 787, 362, 472, 11, 558, 30, 51414, 51414, 509, 787, 362, 6921, 13, 51464, 51464, 1171, 439, 264, 8650, 300, 366, 43492, 33941, 11, 309, 1177, 380, 841, 411, 291, 362, 3467, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.09736920286107946, "compression_ratio": 1.691358024691358, "no_caption_prob": 0.000108887797978241}, {"id": 29, "seek": 5500, "start": 76.0, "end": 77.0, "text": " You only have tests.", "tokens": [50364, 1545, 775, 309, 362, 281, 312, 257, 1516, 1296, 613, 732, 721, 30, 50564, 50564, 1743, 11, 983, 307, 456, 604, 10710, 300, 472, 576, 747, 1314, 490, 264, 661, 420, 300, 472, 576, 9386, 394, 264, 661, 30, 50914, 50914, 1743, 11, 286, 915, 300, 588, 1880, 13, 51014, 51014, 865, 11, 731, 11, 452, 700, 16556, 281, 341, 1168, 307, 411, 11, 294, 257, 688, 295, 8650, 11, 291, 787, 362, 472, 11, 558, 30, 51414, 51414, 509, 787, 362, 6921, 13, 51464, 51464, 1171, 439, 264, 8650, 300, 366, 43492, 33941, 11, 309, 1177, 380, 841, 411, 291, 362, 3467, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.09736920286107946, "compression_ratio": 1.691358024691358, "no_caption_prob": 0.000108887797978241}, {"id": 30, "seek": 5500, "start": 77.0, "end": 82.0, "text": " For all the languages that are dynamically typed, it doesn't feel like you have types.", "tokens": [50364, 1545, 775, 309, 362, 281, 312, 257, 1516, 1296, 613, 732, 721, 30, 50564, 50564, 1743, 11, 983, 307, 456, 604, 10710, 300, 472, 576, 747, 1314, 490, 264, 661, 420, 300, 472, 576, 9386, 394, 264, 661, 30, 50914, 50914, 1743, 11, 286, 915, 300, 588, 1880, 13, 51014, 51014, 865, 11, 731, 11, 452, 700, 16556, 281, 341, 1168, 307, 411, 11, 294, 257, 688, 295, 8650, 11, 291, 787, 362, 472, 11, 558, 30, 51414, 51414, 509, 787, 362, 6921, 13, 51464, 51464, 1171, 439, 264, 8650, 300, 366, 43492, 33941, 11, 309, 1177, 380, 841, 411, 291, 362, 3467, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.09736920286107946, "compression_ratio": 1.691358024691358, "no_caption_prob": 0.000108887797978241}, {"id": 31, "seek": 8200, "start": 82.0, "end": 89.0, "text": " Or at least they don't help you writing your code in the way that we think about when we talk about types versus tests, at least.", "tokens": [50364, 1610, 412, 1935, 436, 500, 380, 854, 291, 3579, 428, 3089, 294, 264, 636, 300, 321, 519, 466, 562, 321, 751, 466, 3467, 5717, 6921, 11, 412, 1935, 13, 50714, 50714, 407, 4412, 11, 291, 362, 281, 764, 6921, 11, 558, 30, 50914, 50914, 759, 291, 528, 281, 652, 988, 300, 428, 3089, 307, 3006, 13, 51114, 51114, 1711, 1935, 286, 1454, 436, 360, 13, 51164, 51164, 1265, 11, 286, 1454, 436, 360, 13, 51414, 51414, 407, 498, 291, 500, 380, 362, 3467, 11, 550, 291, 434, 516, 281, 352, 337, 6921, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.08649543880187359, "compression_ratio": 1.7040816326530612, "no_caption_prob": 6.302415567915887e-05}, {"id": 32, "seek": 8200, "start": 89.0, "end": 93.0, "text": " So therefore, you have to use tests, right?", "tokens": [50364, 1610, 412, 1935, 436, 500, 380, 854, 291, 3579, 428, 3089, 294, 264, 636, 300, 321, 519, 466, 562, 321, 751, 466, 3467, 5717, 6921, 11, 412, 1935, 13, 50714, 50714, 407, 4412, 11, 291, 362, 281, 764, 6921, 11, 558, 30, 50914, 50914, 759, 291, 528, 281, 652, 988, 300, 428, 3089, 307, 3006, 13, 51114, 51114, 1711, 1935, 286, 1454, 436, 360, 13, 51164, 51164, 1265, 11, 286, 1454, 436, 360, 13, 51414, 51414, 407, 498, 291, 500, 380, 362, 3467, 11, 550, 291, 434, 516, 281, 352, 337, 6921, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.08649543880187359, "compression_ratio": 1.7040816326530612, "no_caption_prob": 6.302415567915887e-05}, {"id": 33, "seek": 8200, "start": 93.0, "end": 97.0, "text": " If you want to make sure that your code is correct.", "tokens": [50364, 1610, 412, 1935, 436, 500, 380, 854, 291, 3579, 428, 3089, 294, 264, 636, 300, 321, 519, 466, 562, 321, 751, 466, 3467, 5717, 6921, 11, 412, 1935, 13, 50714, 50714, 407, 4412, 11, 291, 362, 281, 764, 6921, 11, 558, 30, 50914, 50914, 759, 291, 528, 281, 652, 988, 300, 428, 3089, 307, 3006, 13, 51114, 51114, 1711, 1935, 286, 1454, 436, 360, 13, 51164, 51164, 1265, 11, 286, 1454, 436, 360, 13, 51414, 51414, 407, 498, 291, 500, 380, 362, 3467, 11, 550, 291, 434, 516, 281, 352, 337, 6921, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.08649543880187359, "compression_ratio": 1.7040816326530612, "no_caption_prob": 6.302415567915887e-05}, {"id": 34, "seek": 8200, "start": 97.0, "end": 98.0, "text": " At least I hope they do.", "tokens": [50364, 1610, 412, 1935, 436, 500, 380, 854, 291, 3579, 428, 3089, 294, 264, 636, 300, 321, 519, 466, 562, 321, 751, 466, 3467, 5717, 6921, 11, 412, 1935, 13, 50714, 50714, 407, 4412, 11, 291, 362, 281, 764, 6921, 11, 558, 30, 50914, 50914, 759, 291, 528, 281, 652, 988, 300, 428, 3089, 307, 3006, 13, 51114, 51114, 1711, 1935, 286, 1454, 436, 360, 13, 51164, 51164, 1265, 11, 286, 1454, 436, 360, 13, 51414, 51414, 407, 498, 291, 500, 380, 362, 3467, 11, 550, 291, 434, 516, 281, 352, 337, 6921, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.08649543880187359, "compression_ratio": 1.7040816326530612, "no_caption_prob": 6.302415567915887e-05}, {"id": 35, "seek": 8200, "start": 98.0, "end": 103.0, "text": " God, I hope they do.", "tokens": [50364, 1610, 412, 1935, 436, 500, 380, 854, 291, 3579, 428, 3089, 294, 264, 636, 300, 321, 519, 466, 562, 321, 751, 466, 3467, 5717, 6921, 11, 412, 1935, 13, 50714, 50714, 407, 4412, 11, 291, 362, 281, 764, 6921, 11, 558, 30, 50914, 50914, 759, 291, 528, 281, 652, 988, 300, 428, 3089, 307, 3006, 13, 51114, 51114, 1711, 1935, 286, 1454, 436, 360, 13, 51164, 51164, 1265, 11, 286, 1454, 436, 360, 13, 51414, 51414, 407, 498, 291, 500, 380, 362, 3467, 11, 550, 291, 434, 516, 281, 352, 337, 6921, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.08649543880187359, "compression_ratio": 1.7040816326530612, "no_caption_prob": 6.302415567915887e-05}, {"id": 36, "seek": 8200, "start": 103.0, "end": 108.0, "text": " So if you don't have types, then you're going to go for tests.", "tokens": [50364, 1610, 412, 1935, 436, 500, 380, 854, 291, 3579, 428, 3089, 294, 264, 636, 300, 321, 519, 466, 562, 321, 751, 466, 3467, 5717, 6921, 11, 412, 1935, 13, 50714, 50714, 407, 4412, 11, 291, 362, 281, 764, 6921, 11, 558, 30, 50914, 50914, 759, 291, 528, 281, 652, 988, 300, 428, 3089, 307, 3006, 13, 51114, 51114, 1711, 1935, 286, 1454, 436, 360, 13, 51164, 51164, 1265, 11, 286, 1454, 436, 360, 13, 51414, 51414, 407, 498, 291, 500, 380, 362, 3467, 11, 550, 291, 434, 516, 281, 352, 337, 6921, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.08649543880187359, "compression_ratio": 1.7040816326530612, "no_caption_prob": 6.302415567915887e-05}, {"id": 37, "seek": 10800, "start": 108.0, "end": 112.0, "text": " But at some point, you're going to ask yourself the question, should we add types?", "tokens": [50364, 583, 412, 512, 935, 11, 291, 434, 516, 281, 1029, 1803, 264, 1168, 11, 820, 321, 909, 3467, 30, 50564, 50564, 1743, 11, 820, 321, 3679, 490, 15778, 281, 15576, 14237, 30, 50714, 50714, 6454, 321, 764, 1222, 47, 88, 490, 15329, 11, 5183, 41401, 50914, 50914, 1610, 411, 11, 1954, 11, 321, 434, 1228, 10745, 420, 512, 661, 2010, 2856, 11, 457, 321, 500, 380, 652, 588, 665, 764, 295, 527, 3467, 13, 51414, 51414, 1610, 412, 1935, 321, 500, 380, 764, 552, 281, 264, 1802, 300, 661, 8650, 360, 411, 8646, 43723, 293, 2745, 2699, 76, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.08376528915849704, "compression_ratio": 1.6059322033898304, "no_caption_prob": 0.00014424063556361943}, {"id": 38, "seek": 10800, "start": 112.0, "end": 115.0, "text": " Like, should we switch from JavaScript to TypeScript?", "tokens": [50364, 583, 412, 512, 935, 11, 291, 434, 516, 281, 1029, 1803, 264, 1168, 11, 820, 321, 909, 3467, 30, 50564, 50564, 1743, 11, 820, 321, 3679, 490, 15778, 281, 15576, 14237, 30, 50714, 50714, 6454, 321, 764, 1222, 47, 88, 490, 15329, 11, 5183, 41401, 50914, 50914, 1610, 411, 11, 1954, 11, 321, 434, 1228, 10745, 420, 512, 661, 2010, 2856, 11, 457, 321, 500, 380, 652, 588, 665, 764, 295, 527, 3467, 13, 51414, 51414, 1610, 412, 1935, 321, 500, 380, 764, 552, 281, 264, 1802, 300, 661, 8650, 360, 411, 8646, 43723, 293, 2745, 2699, 76, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.08376528915849704, "compression_ratio": 1.6059322033898304, "no_caption_prob": 0.00014424063556361943}, {"id": 39, "seek": 10800, "start": 115.0, "end": 119.0, "text": " Should we use MyPy from Python, etc.?", "tokens": [50364, 583, 412, 512, 935, 11, 291, 434, 516, 281, 1029, 1803, 264, 1168, 11, 820, 321, 909, 3467, 30, 50564, 50564, 1743, 11, 820, 321, 3679, 490, 15778, 281, 15576, 14237, 30, 50714, 50714, 6454, 321, 764, 1222, 47, 88, 490, 15329, 11, 5183, 41401, 50914, 50914, 1610, 411, 11, 1954, 11, 321, 434, 1228, 10745, 420, 512, 661, 2010, 2856, 11, 457, 321, 500, 380, 652, 588, 665, 764, 295, 527, 3467, 13, 51414, 51414, 1610, 412, 1935, 321, 500, 380, 764, 552, 281, 264, 1802, 300, 661, 8650, 360, 411, 8646, 43723, 293, 2745, 2699, 76, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.08376528915849704, "compression_ratio": 1.6059322033898304, "no_caption_prob": 0.00014424063556361943}, {"id": 40, "seek": 10800, "start": 119.0, "end": 129.0, "text": " Or like, oh, we're using Java or some other type language, but we don't make very good use of our types.", "tokens": [50364, 583, 412, 512, 935, 11, 291, 434, 516, 281, 1029, 1803, 264, 1168, 11, 820, 321, 909, 3467, 30, 50564, 50564, 1743, 11, 820, 321, 3679, 490, 15778, 281, 15576, 14237, 30, 50714, 50714, 6454, 321, 764, 1222, 47, 88, 490, 15329, 11, 5183, 41401, 50914, 50914, 1610, 411, 11, 1954, 11, 321, 434, 1228, 10745, 420, 512, 661, 2010, 2856, 11, 457, 321, 500, 380, 652, 588, 665, 764, 295, 527, 3467, 13, 51414, 51414, 1610, 412, 1935, 321, 500, 380, 764, 552, 281, 264, 1802, 300, 661, 8650, 360, 411, 8646, 43723, 293, 2745, 2699, 76, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.08376528915849704, "compression_ratio": 1.6059322033898304, "no_caption_prob": 0.00014424063556361943}, {"id": 41, "seek": 10800, "start": 129.0, "end": 135.0, "text": " Or at least we don't use them to the effect that other languages do like Haskell and obviously Elm.", "tokens": [50364, 583, 412, 512, 935, 11, 291, 434, 516, 281, 1029, 1803, 264, 1168, 11, 820, 321, 909, 3467, 30, 50564, 50564, 1743, 11, 820, 321, 3679, 490, 15778, 281, 15576, 14237, 30, 50714, 50714, 6454, 321, 764, 1222, 47, 88, 490, 15329, 11, 5183, 41401, 50914, 50914, 1610, 411, 11, 1954, 11, 321, 434, 1228, 10745, 420, 512, 661, 2010, 2856, 11, 457, 321, 500, 380, 652, 588, 665, 764, 295, 527, 3467, 13, 51414, 51414, 1610, 412, 1935, 321, 500, 380, 764, 552, 281, 264, 1802, 300, 661, 8650, 360, 411, 8646, 43723, 293, 2745, 2699, 76, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.08376528915849704, "compression_ratio": 1.6059322033898304, "no_caption_prob": 0.00014424063556361943}, {"id": 42, "seek": 13500, "start": 135.0, "end": 141.0, "text": " And then I think that's the part where you ask yourself the question, well, types or tests?", "tokens": [50364, 400, 550, 286, 519, 300, 311, 264, 644, 689, 291, 1029, 1803, 264, 1168, 11, 731, 11, 3467, 420, 6921, 30, 50664, 50664, 1779, 13, 286, 519, 291, 434, 558, 13, 50764, 50764, 286, 519, 456, 393, 312, 257, 588, 2068, 4997, 3713, 294, 257, 688, 295, 613, 4456, 13, 51014, 51014, 286, 519, 264, 19907, 1768, 2942, 257, 588, 2068, 4997, 3713, 11, 597, 390, 2138, 257, 955, 6503, 322, 385, 11, 51364, 51364, 264, 4997, 3713, 294, 264, 19907, 322, 48526, 1768, 13, 51514, 51514, 5780, 25873, 11, 597, 286, 519, 307, 869, 293, 307, 257, 588, 2068, 644, 295, 300, 1768, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.09121587735797287, "compression_ratio": 1.9655172413793103, "no_caption_prob": 0.00010889035183936357}, {"id": 43, "seek": 13500, "start": 141.0, "end": 143.0, "text": " Right. I think you're right.", "tokens": [50364, 400, 550, 286, 519, 300, 311, 264, 644, 689, 291, 1029, 1803, 264, 1168, 11, 731, 11, 3467, 420, 6921, 30, 50664, 50664, 1779, 13, 286, 519, 291, 434, 558, 13, 50764, 50764, 286, 519, 456, 393, 312, 257, 588, 2068, 4997, 3713, 294, 257, 688, 295, 613, 4456, 13, 51014, 51014, 286, 519, 264, 19907, 1768, 2942, 257, 588, 2068, 4997, 3713, 11, 597, 390, 2138, 257, 955, 6503, 322, 385, 11, 51364, 51364, 264, 4997, 3713, 294, 264, 19907, 322, 48526, 1768, 13, 51514, 51514, 5780, 25873, 11, 597, 286, 519, 307, 869, 293, 307, 257, 588, 2068, 644, 295, 300, 1768, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.09121587735797287, "compression_ratio": 1.9655172413793103, "no_caption_prob": 0.00010889035183936357}, {"id": 44, "seek": 13500, "start": 143.0, "end": 148.0, "text": " I think there can be a very strong testing culture in a lot of these communities.", "tokens": [50364, 400, 550, 286, 519, 300, 311, 264, 644, 689, 291, 1029, 1803, 264, 1168, 11, 731, 11, 3467, 420, 6921, 30, 50664, 50664, 1779, 13, 286, 519, 291, 434, 558, 13, 50764, 50764, 286, 519, 456, 393, 312, 257, 588, 2068, 4997, 3713, 294, 257, 688, 295, 613, 4456, 13, 51014, 51014, 286, 519, 264, 19907, 1768, 2942, 257, 588, 2068, 4997, 3713, 11, 597, 390, 2138, 257, 955, 6503, 322, 385, 11, 51364, 51364, 264, 4997, 3713, 294, 264, 19907, 322, 48526, 1768, 13, 51514, 51514, 5780, 25873, 11, 597, 286, 519, 307, 869, 293, 307, 257, 588, 2068, 644, 295, 300, 1768, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.09121587735797287, "compression_ratio": 1.9655172413793103, "no_caption_prob": 0.00010889035183936357}, {"id": 45, "seek": 13500, "start": 148.0, "end": 155.0, "text": " I think the Ruby community created a very strong testing culture, which was definitely a big influence on me,", "tokens": [50364, 400, 550, 286, 519, 300, 311, 264, 644, 689, 291, 1029, 1803, 264, 1168, 11, 731, 11, 3467, 420, 6921, 30, 50664, 50664, 1779, 13, 286, 519, 291, 434, 558, 13, 50764, 50764, 286, 519, 456, 393, 312, 257, 588, 2068, 4997, 3713, 294, 257, 688, 295, 613, 4456, 13, 51014, 51014, 286, 519, 264, 19907, 1768, 2942, 257, 588, 2068, 4997, 3713, 11, 597, 390, 2138, 257, 955, 6503, 322, 385, 11, 51364, 51364, 264, 4997, 3713, 294, 264, 19907, 322, 48526, 1768, 13, 51514, 51514, 5780, 25873, 11, 597, 286, 519, 307, 869, 293, 307, 257, 588, 2068, 644, 295, 300, 1768, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.09121587735797287, "compression_ratio": 1.9655172413793103, "no_caption_prob": 0.00010889035183936357}, {"id": 46, "seek": 13500, "start": 155.0, "end": 158.0, "text": " the testing culture in the Ruby on Rails community.", "tokens": [50364, 400, 550, 286, 519, 300, 311, 264, 644, 689, 291, 1029, 1803, 264, 1168, 11, 731, 11, 3467, 420, 6921, 30, 50664, 50664, 1779, 13, 286, 519, 291, 434, 558, 13, 50764, 50764, 286, 519, 456, 393, 312, 257, 588, 2068, 4997, 3713, 294, 257, 688, 295, 613, 4456, 13, 51014, 51014, 286, 519, 264, 19907, 1768, 2942, 257, 588, 2068, 4997, 3713, 11, 597, 390, 2138, 257, 955, 6503, 322, 385, 11, 51364, 51364, 264, 4997, 3713, 294, 264, 19907, 322, 48526, 1768, 13, 51514, 51514, 5780, 25873, 11, 597, 286, 519, 307, 869, 293, 307, 257, 588, 2068, 644, 295, 300, 1768, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.09121587735797287, "compression_ratio": 1.9655172413793103, "no_caption_prob": 0.00010889035183936357}, {"id": 47, "seek": 13500, "start": 158.0, "end": 164.0, "text": " Although interestingly, which I think is great and is a very strong part of that community.", "tokens": [50364, 400, 550, 286, 519, 300, 311, 264, 644, 689, 291, 1029, 1803, 264, 1168, 11, 731, 11, 3467, 420, 6921, 30, 50664, 50664, 1779, 13, 286, 519, 291, 434, 558, 13, 50764, 50764, 286, 519, 456, 393, 312, 257, 588, 2068, 4997, 3713, 294, 257, 688, 295, 613, 4456, 13, 51014, 51014, 286, 519, 264, 19907, 1768, 2942, 257, 588, 2068, 4997, 3713, 11, 597, 390, 2138, 257, 955, 6503, 322, 385, 11, 51364, 51364, 264, 4997, 3713, 294, 264, 19907, 322, 48526, 1768, 13, 51514, 51514, 5780, 25873, 11, 597, 286, 519, 307, 869, 293, 307, 257, 588, 2068, 644, 295, 300, 1768, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.09121587735797287, "compression_ratio": 1.9655172413793103, "no_caption_prob": 0.00010889035183936357}, {"id": 48, "seek": 16400, "start": 164.0, "end": 172.0, "text": " Interestingly enough, DHH, the creator of Rails, has had some very controversial talks now where he says TDD is dead", "tokens": [50364, 30564, 1547, 11, 413, 7499, 11, 264, 14181, 295, 48526, 11, 575, 632, 512, 588, 17323, 6686, 586, 689, 415, 1619, 314, 20818, 307, 3116, 50764, 50764, 293, 300, 309, 26431, 1024, 428, 3089, 3125, 293, 1669, 428, 3089, 5324, 13, 50964, 50964, 286, 2378, 380, 6337, 729, 6686, 13, 286, 362, 2198, 295, 300, 11, 457, 286, 2378, 380, 1612, 264, 2793, 300, 645, 6005, 13, 51314, 51314, 821, 366, 512, 1880, 6686, 689, 11, 291, 458, 11, 9184, 479, 305, 1918, 293, 512, 295, 613, 11, 291, 458, 11, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.0699414704975329, "compression_ratio": 1.6593886462882097, "no_caption_prob": 4.133295806241222e-05}, {"id": 49, "seek": 16400, "start": 172.0, "end": 176.0, "text": " and that it deteriorates your code quality and makes your code worse.", "tokens": [50364, 30564, 1547, 11, 413, 7499, 11, 264, 14181, 295, 48526, 11, 575, 632, 512, 588, 17323, 6686, 586, 689, 415, 1619, 314, 20818, 307, 3116, 50764, 50764, 293, 300, 309, 26431, 1024, 428, 3089, 3125, 293, 1669, 428, 3089, 5324, 13, 50964, 50964, 286, 2378, 380, 6337, 729, 6686, 13, 286, 362, 2198, 295, 300, 11, 457, 286, 2378, 380, 1612, 264, 2793, 300, 645, 6005, 13, 51314, 51314, 821, 366, 512, 1880, 6686, 689, 11, 291, 458, 11, 9184, 479, 305, 1918, 293, 512, 295, 613, 11, 291, 458, 11, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.0699414704975329, "compression_ratio": 1.6593886462882097, "no_caption_prob": 4.133295806241222e-05}, {"id": 50, "seek": 16400, "start": 176.0, "end": 183.0, "text": " I haven't watched those talks. I have heard of that, but I haven't seen the points that were raised.", "tokens": [50364, 30564, 1547, 11, 413, 7499, 11, 264, 14181, 295, 48526, 11, 575, 632, 512, 588, 17323, 6686, 586, 689, 415, 1619, 314, 20818, 307, 3116, 50764, 50764, 293, 300, 309, 26431, 1024, 428, 3089, 3125, 293, 1669, 428, 3089, 5324, 13, 50964, 50964, 286, 2378, 380, 6337, 729, 6686, 13, 286, 362, 2198, 295, 300, 11, 457, 286, 2378, 380, 1612, 264, 2793, 300, 645, 6005, 13, 51314, 51314, 821, 366, 512, 1880, 6686, 689, 11, 291, 458, 11, 9184, 479, 305, 1918, 293, 512, 295, 613, 11, 291, 458, 11, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.0699414704975329, "compression_ratio": 1.6593886462882097, "no_caption_prob": 4.133295806241222e-05}, {"id": 51, "seek": 16400, "start": 183.0, "end": 188.0, "text": " There are some interesting talks where, you know, Martin Fowler and some of these, you know,", "tokens": [50364, 30564, 1547, 11, 413, 7499, 11, 264, 14181, 295, 48526, 11, 575, 632, 512, 588, 17323, 6686, 586, 689, 415, 1619, 314, 20818, 307, 3116, 50764, 50764, 293, 300, 309, 26431, 1024, 428, 3089, 3125, 293, 1669, 428, 3089, 5324, 13, 50964, 50964, 286, 2378, 380, 6337, 729, 6686, 13, 286, 362, 2198, 295, 300, 11, 457, 286, 2378, 380, 1612, 264, 2793, 300, 645, 6005, 13, 51314, 51314, 821, 366, 512, 1880, 6686, 689, 11, 291, 458, 11, 9184, 479, 305, 1918, 293, 512, 295, 613, 11, 291, 458, 11, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.0699414704975329, "compression_ratio": 1.6593886462882097, "no_caption_prob": 4.133295806241222e-05}, {"id": 52, "seek": 18800, "start": 188.0, "end": 195.0, "text": " pioneers of testing practices sit down and do some video calls with DHH and try to explain it to him.", "tokens": [50364, 47381, 295, 4997, 7525, 1394, 760, 293, 360, 512, 960, 5498, 365, 413, 7499, 293, 853, 281, 2903, 309, 281, 796, 13, 50714, 50714, 23596, 11, 286, 1697, 300, 264, 636, 300, 413, 7499, 307, 4997, 721, 1669, 721, 588, 11697, 13, 51064, 51064, 400, 286, 519, 300, 311, 257, 2603, 644, 295, 309, 307, 300, 406, 439, 6921, 366, 2942, 2681, 13, 51264, 51264, 286, 519, 300, 406, 439, 3467, 366, 2942, 2681, 13, 51414, 51414, 400, 286, 519, 300, 300, 311, 644, 295, 264, 5593, 295, 309, 307, 370, 562, 437, 291, 434, 1417, 466, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.05643513651177435, "compression_ratio": 1.78125, "no_caption_prob": 0.0006359814433380961}, {"id": 53, "seek": 18800, "start": 195.0, "end": 202.0, "text": " Essentially, I believe that the way that DHH is testing things makes things very painful.", "tokens": [50364, 47381, 295, 4997, 7525, 1394, 760, 293, 360, 512, 960, 5498, 365, 413, 7499, 293, 853, 281, 2903, 309, 281, 796, 13, 50714, 50714, 23596, 11, 286, 1697, 300, 264, 636, 300, 413, 7499, 307, 4997, 721, 1669, 721, 588, 11697, 13, 51064, 51064, 400, 286, 519, 300, 311, 257, 2603, 644, 295, 309, 307, 300, 406, 439, 6921, 366, 2942, 2681, 13, 51264, 51264, 286, 519, 300, 406, 439, 3467, 366, 2942, 2681, 13, 51414, 51414, 400, 286, 519, 300, 300, 311, 644, 295, 264, 5593, 295, 309, 307, 370, 562, 437, 291, 434, 1417, 466, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.05643513651177435, "compression_ratio": 1.78125, "no_caption_prob": 0.0006359814433380961}, {"id": 54, "seek": 18800, "start": 202.0, "end": 206.0, "text": " And I think that's a huge part of it is that not all tests are created equal.", "tokens": [50364, 47381, 295, 4997, 7525, 1394, 760, 293, 360, 512, 960, 5498, 365, 413, 7499, 293, 853, 281, 2903, 309, 281, 796, 13, 50714, 50714, 23596, 11, 286, 1697, 300, 264, 636, 300, 413, 7499, 307, 4997, 721, 1669, 721, 588, 11697, 13, 51064, 51064, 400, 286, 519, 300, 311, 257, 2603, 644, 295, 309, 307, 300, 406, 439, 6921, 366, 2942, 2681, 13, 51264, 51264, 286, 519, 300, 406, 439, 3467, 366, 2942, 2681, 13, 51414, 51414, 400, 286, 519, 300, 300, 311, 644, 295, 264, 5593, 295, 309, 307, 370, 562, 437, 291, 434, 1417, 466, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.05643513651177435, "compression_ratio": 1.78125, "no_caption_prob": 0.0006359814433380961}, {"id": 55, "seek": 18800, "start": 206.0, "end": 209.0, "text": " I think that not all types are created equal.", "tokens": [50364, 47381, 295, 4997, 7525, 1394, 760, 293, 360, 512, 960, 5498, 365, 413, 7499, 293, 853, 281, 2903, 309, 281, 796, 13, 50714, 50714, 23596, 11, 286, 1697, 300, 264, 636, 300, 413, 7499, 307, 4997, 721, 1669, 721, 588, 11697, 13, 51064, 51064, 400, 286, 519, 300, 311, 257, 2603, 644, 295, 309, 307, 300, 406, 439, 6921, 366, 2942, 2681, 13, 51264, 51264, 286, 519, 300, 406, 439, 3467, 366, 2942, 2681, 13, 51414, 51414, 400, 286, 519, 300, 300, 311, 644, 295, 264, 5593, 295, 309, 307, 370, 562, 437, 291, 434, 1417, 466, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.05643513651177435, "compression_ratio": 1.78125, "no_caption_prob": 0.0006359814433380961}, {"id": 56, "seek": 18800, "start": 209.0, "end": 214.0, "text": " And I think that that's part of the root of it is so when what you're talking about", "tokens": [50364, 47381, 295, 4997, 7525, 1394, 760, 293, 360, 512, 960, 5498, 365, 413, 7499, 293, 853, 281, 2903, 309, 281, 796, 13, 50714, 50714, 23596, 11, 286, 1697, 300, 264, 636, 300, 413, 7499, 307, 4997, 721, 1669, 721, 588, 11697, 13, 51064, 51064, 400, 286, 519, 300, 311, 257, 2603, 644, 295, 309, 307, 300, 406, 439, 6921, 366, 2942, 2681, 13, 51264, 51264, 286, 519, 300, 406, 439, 3467, 366, 2942, 2681, 13, 51414, 51414, 400, 286, 519, 300, 300, 311, 644, 295, 264, 5593, 295, 309, 307, 370, 562, 437, 291, 434, 1417, 466, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.05643513651177435, "compression_ratio": 1.78125, "no_caption_prob": 0.0006359814433380961}, {"id": 57, "seek": 21400, "start": 214.0, "end": 225.0, "text": " where maybe people are sprinkling types in, maybe they're adding something that helps add a little bit of types into an untyped language.", "tokens": [50364, 689, 1310, 561, 366, 30885, 1688, 3467, 294, 11, 1310, 436, 434, 5127, 746, 300, 3665, 909, 257, 707, 857, 295, 3467, 666, 364, 517, 874, 3452, 2856, 13, 50914, 50914, 509, 458, 11, 1310, 5127, 512, 15576, 14237, 420, 746, 807, 512, 3053, 420, 746, 411, 2699, 970, 347, 300, 575, 3467, 291, 393, 24745, 294, 11, 51464, 51464, 457, 309, 311, 406, 534, 257, 4965, 644, 295, 264, 2856, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.09981476005754973, "compression_ratio": 1.7074468085106382, "no_caption_prob": 0.0004441245400812477}, {"id": 58, "seek": 21400, "start": 225.0, "end": 236.0, "text": " You know, maybe adding some TypeScript or something through some comments or something like Elixir that has types you can sprinkle in,", "tokens": [50364, 689, 1310, 561, 366, 30885, 1688, 3467, 294, 11, 1310, 436, 434, 5127, 746, 300, 3665, 909, 257, 707, 857, 295, 3467, 666, 364, 517, 874, 3452, 2856, 13, 50914, 50914, 509, 458, 11, 1310, 5127, 512, 15576, 14237, 420, 746, 807, 512, 3053, 420, 746, 411, 2699, 970, 347, 300, 575, 3467, 291, 393, 24745, 294, 11, 51464, 51464, 457, 309, 311, 406, 534, 257, 4965, 644, 295, 264, 2856, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.09981476005754973, "compression_ratio": 1.7074468085106382, "no_caption_prob": 0.0004441245400812477}, {"id": 59, "seek": 21400, "start": 236.0, "end": 238.0, "text": " but it's not really a core part of the language.", "tokens": [50364, 689, 1310, 561, 366, 30885, 1688, 3467, 294, 11, 1310, 436, 434, 5127, 746, 300, 3665, 909, 257, 707, 857, 295, 3467, 666, 364, 517, 874, 3452, 2856, 13, 50914, 50914, 509, 458, 11, 1310, 5127, 512, 15576, 14237, 420, 746, 807, 512, 3053, 420, 746, 411, 2699, 970, 347, 300, 575, 3467, 291, 393, 24745, 294, 11, 51464, 51464, 457, 309, 311, 406, 534, 257, 4965, 644, 295, 264, 2856, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.09981476005754973, "compression_ratio": 1.7074468085106382, "no_caption_prob": 0.0004441245400812477}, {"id": 60, "seek": 23800, "start": 238.0, "end": 246.0, "text": " Yeah, or simply avoiding primitive obsession by re implementing or wrapping some primitives into new types.", "tokens": [50364, 865, 11, 420, 2935, 20220, 28540, 30521, 538, 319, 18114, 420, 21993, 512, 2886, 38970, 666, 777, 3467, 13, 50764, 50764, 663, 311, 611, 257, 665, 764, 1389, 11, 286, 519, 13, 50914, 50914, 876, 11, 300, 311, 1880, 570, 300, 311, 1338, 11, 300, 311, 3467, 1553, 257, 40261, 1823, 13, 51164, 51164, 400, 291, 434, 558, 13, 663, 311, 1071, 10139, 281, 309, 13, 51264, 51264, 400, 286, 519, 300, 456, 393, 312, 257, 707, 857, 295, 257, 2020, 300, 562, 291, 434, 1228, 3467, 294, 341, 636, 11, 562, 291, 24745, 552, 294, 11, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.07940308410342377, "compression_ratio": 1.7004219409282701, "no_caption_prob": 7.140988600440323e-05}, {"id": 61, "seek": 23800, "start": 246.0, "end": 249.0, "text": " That's also a good use case, I think.", "tokens": [50364, 865, 11, 420, 2935, 20220, 28540, 30521, 538, 319, 18114, 420, 21993, 512, 2886, 38970, 666, 777, 3467, 13, 50764, 50764, 663, 311, 611, 257, 665, 764, 1389, 11, 286, 519, 13, 50914, 50914, 876, 11, 300, 311, 1880, 570, 300, 311, 1338, 11, 300, 311, 3467, 1553, 257, 40261, 1823, 13, 51164, 51164, 400, 291, 434, 558, 13, 663, 311, 1071, 10139, 281, 309, 13, 51264, 51264, 400, 286, 519, 300, 456, 393, 312, 257, 707, 857, 295, 257, 2020, 300, 562, 291, 434, 1228, 3467, 294, 341, 636, 11, 562, 291, 24745, 552, 294, 11, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.07940308410342377, "compression_ratio": 1.7004219409282701, "no_caption_prob": 7.140988600440323e-05}, {"id": 62, "seek": 23800, "start": 249.0, "end": 254.0, "text": " Oh, that's interesting because that's yeah, that's types without a compilation step.", "tokens": [50364, 865, 11, 420, 2935, 20220, 28540, 30521, 538, 319, 18114, 420, 21993, 512, 2886, 38970, 666, 777, 3467, 13, 50764, 50764, 663, 311, 611, 257, 665, 764, 1389, 11, 286, 519, 13, 50914, 50914, 876, 11, 300, 311, 1880, 570, 300, 311, 1338, 11, 300, 311, 3467, 1553, 257, 40261, 1823, 13, 51164, 51164, 400, 291, 434, 558, 13, 663, 311, 1071, 10139, 281, 309, 13, 51264, 51264, 400, 286, 519, 300, 456, 393, 312, 257, 707, 857, 295, 257, 2020, 300, 562, 291, 434, 1228, 3467, 294, 341, 636, 11, 562, 291, 24745, 552, 294, 11, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.07940308410342377, "compression_ratio": 1.7004219409282701, "no_caption_prob": 7.140988600440323e-05}, {"id": 63, "seek": 23800, "start": 254.0, "end": 256.0, "text": " And you're right. That's another dimension to it.", "tokens": [50364, 865, 11, 420, 2935, 20220, 28540, 30521, 538, 319, 18114, 420, 21993, 512, 2886, 38970, 666, 777, 3467, 13, 50764, 50764, 663, 311, 611, 257, 665, 764, 1389, 11, 286, 519, 13, 50914, 50914, 876, 11, 300, 311, 1880, 570, 300, 311, 1338, 11, 300, 311, 3467, 1553, 257, 40261, 1823, 13, 51164, 51164, 400, 291, 434, 558, 13, 663, 311, 1071, 10139, 281, 309, 13, 51264, 51264, 400, 286, 519, 300, 456, 393, 312, 257, 707, 857, 295, 257, 2020, 300, 562, 291, 434, 1228, 3467, 294, 341, 636, 11, 562, 291, 24745, 552, 294, 11, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.07940308410342377, "compression_ratio": 1.7004219409282701, "no_caption_prob": 7.140988600440323e-05}, {"id": 64, "seek": 23800, "start": 256.0, "end": 264.0, "text": " And I think that there can be a little bit of a sense that when you're using types in this way, when you sprinkle them in,", "tokens": [50364, 865, 11, 420, 2935, 20220, 28540, 30521, 538, 319, 18114, 420, 21993, 512, 2886, 38970, 666, 777, 3467, 13, 50764, 50764, 663, 311, 611, 257, 665, 764, 1389, 11, 286, 519, 13, 50914, 50914, 876, 11, 300, 311, 1880, 570, 300, 311, 1338, 11, 300, 311, 3467, 1553, 257, 40261, 1823, 13, 51164, 51164, 400, 291, 434, 558, 13, 663, 311, 1071, 10139, 281, 309, 13, 51264, 51264, 400, 286, 519, 300, 456, 393, 312, 257, 707, 857, 295, 257, 2020, 300, 562, 291, 434, 1228, 3467, 294, 341, 636, 11, 562, 291, 24745, 552, 294, 11, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.07940308410342377, "compression_ratio": 1.7004219409282701, "no_caption_prob": 7.140988600440323e-05}, {"id": 65, "seek": 26400, "start": 264.0, "end": 272.0, "text": " then it's just like maybe it feels like just another test that you're just like, hey, this is another thing that sort of checks something.", "tokens": [50364, 550, 309, 311, 445, 411, 1310, 309, 3417, 411, 445, 1071, 1500, 300, 291, 434, 445, 411, 11, 4177, 11, 341, 307, 1071, 551, 300, 1333, 295, 13834, 746, 13, 50764, 50764, 400, 309, 1333, 295, 2709, 505, 257, 707, 9194, 294, 6687, 13, 50964, 50964, 583, 309, 17879, 3417, 819, 562, 291, 362, 11, 411, 11, 281, 385, 11, 257, 1626, 2010, 1185, 420, 257, 30885, 1688, 295, 3467, 300, 1333, 295, 854, 291, 484, 257, 707, 857, 544, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.07464698342715993, "compression_ratio": 1.6926829268292682, "no_caption_prob": 2.796215812850278e-05}, {"id": 66, "seek": 26400, "start": 272.0, "end": 276.0, "text": " And it sort of gives us a little boost in confidence.", "tokens": [50364, 550, 309, 311, 445, 411, 1310, 309, 3417, 411, 445, 1071, 1500, 300, 291, 434, 445, 411, 11, 4177, 11, 341, 307, 1071, 551, 300, 1333, 295, 13834, 746, 13, 50764, 50764, 400, 309, 1333, 295, 2709, 505, 257, 707, 9194, 294, 6687, 13, 50964, 50964, 583, 309, 17879, 3417, 819, 562, 291, 362, 11, 411, 11, 281, 385, 11, 257, 1626, 2010, 1185, 420, 257, 30885, 1688, 295, 3467, 300, 1333, 295, 854, 291, 484, 257, 707, 857, 544, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.07464698342715993, "compression_ratio": 1.6926829268292682, "no_caption_prob": 2.796215812850278e-05}, {"id": 67, "seek": 26400, "start": 276.0, "end": 288.0, "text": " But it fundamentally feels different when you have, like, to me, a sound type system or a sprinkling of types that sort of help you out a little bit more.", "tokens": [50364, 550, 309, 311, 445, 411, 1310, 309, 3417, 411, 445, 1071, 1500, 300, 291, 434, 445, 411, 11, 4177, 11, 341, 307, 1071, 551, 300, 1333, 295, 13834, 746, 13, 50764, 50764, 400, 309, 1333, 295, 2709, 505, 257, 707, 9194, 294, 6687, 13, 50964, 50964, 583, 309, 17879, 3417, 819, 562, 291, 362, 11, 411, 11, 281, 385, 11, 257, 1626, 2010, 1185, 420, 257, 30885, 1688, 295, 3467, 300, 1333, 295, 854, 291, 484, 257, 707, 857, 544, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.07464698342715993, "compression_ratio": 1.6926829268292682, "no_caption_prob": 2.796215812850278e-05}, {"id": 68, "seek": 28800, "start": 288.0, "end": 295.0, "text": " And it feels more like a test where like you can test like if I pass in a string here, it behaves this way.", "tokens": [50364, 400, 309, 3417, 544, 411, 257, 1500, 689, 411, 291, 393, 1500, 411, 498, 286, 1320, 294, 257, 6798, 510, 11, 309, 36896, 341, 636, 13, 50714, 50714, 759, 286, 1320, 294, 674, 5666, 2001, 510, 11, 550, 309, 11247, 674, 5666, 2001, 420, 19658, 364, 34702, 2010, 11183, 420, 2035, 13, 51064, 51064, 400, 291, 584, 11, 731, 11, 452, 2010, 1185, 11, 286, 393, 360, 300, 807, 257, 2010, 13, 286, 393, 360, 300, 807, 257, 1500, 13, 51314, 51314, 400, 498, 286, 600, 668, 3480, 257, 534, 2068, 1500, 9555, 3250, 3124, 689, 286, 669, 767, 884, 2182, 3092, 1895, 15104, 11, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.06734312564954845, "compression_ratio": 1.7398373983739837, "no_caption_prob": 8.887465810403228e-05}, {"id": 69, "seek": 28800, "start": 295.0, "end": 302.0, "text": " If I pass in undefined here, then it returns undefined or raises an invalid type exception or whatever.", "tokens": [50364, 400, 309, 3417, 544, 411, 257, 1500, 689, 411, 291, 393, 1500, 411, 498, 286, 1320, 294, 257, 6798, 510, 11, 309, 36896, 341, 636, 13, 50714, 50714, 759, 286, 1320, 294, 674, 5666, 2001, 510, 11, 550, 309, 11247, 674, 5666, 2001, 420, 19658, 364, 34702, 2010, 11183, 420, 2035, 13, 51064, 51064, 400, 291, 584, 11, 731, 11, 452, 2010, 1185, 11, 286, 393, 360, 300, 807, 257, 2010, 13, 286, 393, 360, 300, 807, 257, 1500, 13, 51314, 51314, 400, 498, 286, 600, 668, 3480, 257, 534, 2068, 1500, 9555, 3250, 3124, 689, 286, 669, 767, 884, 2182, 3092, 1895, 15104, 11, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.06734312564954845, "compression_ratio": 1.7398373983739837, "no_caption_prob": 8.887465810403228e-05}, {"id": 70, "seek": 28800, "start": 302.0, "end": 307.0, "text": " And you say, well, my type system, I can do that through a type. I can do that through a test.", "tokens": [50364, 400, 309, 3417, 544, 411, 257, 1500, 689, 411, 291, 393, 1500, 411, 498, 286, 1320, 294, 257, 6798, 510, 11, 309, 36896, 341, 636, 13, 50714, 50714, 759, 286, 1320, 294, 674, 5666, 2001, 510, 11, 550, 309, 11247, 674, 5666, 2001, 420, 19658, 364, 34702, 2010, 11183, 420, 2035, 13, 51064, 51064, 400, 291, 584, 11, 731, 11, 452, 2010, 1185, 11, 286, 393, 360, 300, 807, 257, 2010, 13, 286, 393, 360, 300, 807, 257, 1500, 13, 51314, 51314, 400, 498, 286, 600, 668, 3480, 257, 534, 2068, 1500, 9555, 3250, 3124, 689, 286, 669, 767, 884, 2182, 3092, 1895, 15104, 11, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.06734312564954845, "compression_ratio": 1.7398373983739837, "no_caption_prob": 8.887465810403228e-05}, {"id": 71, "seek": 28800, "start": 307.0, "end": 316.0, "text": " And if I've been following a really strong test driven development practice where I am actually doing red green refactor,", "tokens": [50364, 400, 309, 3417, 544, 411, 257, 1500, 689, 411, 291, 393, 1500, 411, 498, 286, 1320, 294, 257, 6798, 510, 11, 309, 36896, 341, 636, 13, 50714, 50714, 759, 286, 1320, 294, 674, 5666, 2001, 510, 11, 550, 309, 11247, 674, 5666, 2001, 420, 19658, 364, 34702, 2010, 11183, 420, 2035, 13, 51064, 51064, 400, 291, 584, 11, 731, 11, 452, 2010, 1185, 11, 286, 393, 360, 300, 807, 257, 2010, 13, 286, 393, 360, 300, 807, 257, 1500, 13, 51314, 51314, 400, 498, 286, 600, 668, 3480, 257, 534, 2068, 1500, 9555, 3250, 3124, 689, 286, 669, 767, 884, 2182, 3092, 1895, 15104, 11, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.06734312564954845, "compression_ratio": 1.7398373983739837, "no_caption_prob": 8.887465810403228e-05}, {"id": 72, "seek": 31600, "start": 316.0, "end": 323.0, "text": " then I would have built up all these test cases. But the thing is, like, did you test every possible input type?", "tokens": [50364, 550, 286, 576, 362, 3094, 493, 439, 613, 1500, 3331, 13, 583, 264, 551, 307, 11, 411, 11, 630, 291, 1500, 633, 1944, 4846, 2010, 30, 50714, 50714, 400, 570, 6921, 787, 2060, 437, 291, 2464, 293, 3467, 589, 1920, 294, 294, 264, 6182, 636, 13, 51114, 51114, 1743, 498, 291, 6964, 257, 11671, 2010, 11, 550, 257, 11671, 2010, 787, 575, 746, 562, 291, 909, 746, 281, 309, 11, 51464, 51464, 9735, 257, 1500, 787, 2709, 291, 6687, 411, 1364, 264, 661, 636, 926, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.07021956443786621, "compression_ratio": 1.6725663716814159, "no_caption_prob": 0.0001355121930828318}, {"id": 73, "seek": 31600, "start": 323.0, "end": 331.0, "text": " And because tests only cover what you write and types work almost in in the opposite way.", "tokens": [50364, 550, 286, 576, 362, 3094, 493, 439, 613, 1500, 3331, 13, 583, 264, 551, 307, 11, 411, 11, 630, 291, 1500, 633, 1944, 4846, 2010, 30, 50714, 50714, 400, 570, 6921, 787, 2060, 437, 291, 2464, 293, 3467, 589, 1920, 294, 294, 264, 6182, 636, 13, 51114, 51114, 1743, 498, 291, 6964, 257, 11671, 2010, 11, 550, 257, 11671, 2010, 787, 575, 746, 562, 291, 909, 746, 281, 309, 11, 51464, 51464, 9735, 257, 1500, 787, 2709, 291, 6687, 411, 1364, 264, 661, 636, 926, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.07021956443786621, "compression_ratio": 1.6725663716814159, "no_caption_prob": 0.0001355121930828318}, {"id": 74, "seek": 31600, "start": 331.0, "end": 338.0, "text": " Like if you define a union type, then a union type only has something when you add something to it,", "tokens": [50364, 550, 286, 576, 362, 3094, 493, 439, 613, 1500, 3331, 13, 583, 264, 551, 307, 11, 411, 11, 630, 291, 1500, 633, 1944, 4846, 2010, 30, 50714, 50714, 400, 570, 6921, 787, 2060, 437, 291, 2464, 293, 3467, 589, 1920, 294, 294, 264, 6182, 636, 13, 51114, 51114, 1743, 498, 291, 6964, 257, 11671, 2010, 11, 550, 257, 11671, 2010, 787, 575, 746, 562, 291, 909, 746, 281, 309, 11, 51464, 51464, 9735, 257, 1500, 787, 2709, 291, 6687, 411, 1364, 264, 661, 636, 926, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.07021956443786621, "compression_ratio": 1.6725663716814159, "no_caption_prob": 0.0001355121930828318}, {"id": 75, "seek": 31600, "start": 338.0, "end": 344.0, "text": " whereas a test only gives you confidence like working the other way around.", "tokens": [50364, 550, 286, 576, 362, 3094, 493, 439, 613, 1500, 3331, 13, 583, 264, 551, 307, 11, 411, 11, 630, 291, 1500, 633, 1944, 4846, 2010, 30, 50714, 50714, 400, 570, 6921, 787, 2060, 437, 291, 2464, 293, 3467, 589, 1920, 294, 294, 264, 6182, 636, 13, 51114, 51114, 1743, 498, 291, 6964, 257, 11671, 2010, 11, 550, 257, 11671, 2010, 787, 575, 746, 562, 291, 909, 746, 281, 309, 11, 51464, 51464, 9735, 257, 1500, 787, 2709, 291, 6687, 411, 1364, 264, 661, 636, 926, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.07021956443786621, "compression_ratio": 1.6725663716814159, "no_caption_prob": 0.0001355121930828318}, {"id": 76, "seek": 34400, "start": 344.0, "end": 349.0, "text": " Like you you only constrain it by adding to it.", "tokens": [50364, 1743, 291, 291, 787, 1817, 7146, 309, 538, 5127, 281, 309, 13, 50614, 50614, 13813, 291, 787, 2089, 257, 7959, 562, 291, 909, 746, 281, 257, 11671, 2010, 13, 50864, 50864, 407, 291, 2835, 314, 20818, 11, 558, 30, 1407, 352, 646, 281, 983, 307, 341, 1168, 295, 3467, 5717, 6921, 754, 456, 294, 264, 700, 1081, 30, 51314, 51314, 821, 307, 1270, 257, 551, 382, 314, 20818, 11, 558, 30, 821, 307, 1500, 9555, 3250, 293, 456, 311, 257, 688, 295, 11290, 11, 257, 688, 295, 2145, 11, 257, 688, 295, 3642, 322, 309, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.09391447067260743, "compression_ratio": 1.6710526315789473, "no_caption_prob": 1.5292506532205152e-06}, {"id": 77, "seek": 34400, "start": 349.0, "end": 354.0, "text": " Whereas you only allow a possibility when you add something to a union type.", "tokens": [50364, 1743, 291, 291, 787, 1817, 7146, 309, 538, 5127, 281, 309, 13, 50614, 50614, 13813, 291, 787, 2089, 257, 7959, 562, 291, 909, 746, 281, 257, 11671, 2010, 13, 50864, 50864, 407, 291, 2835, 314, 20818, 11, 558, 30, 1407, 352, 646, 281, 983, 307, 341, 1168, 295, 3467, 5717, 6921, 754, 456, 294, 264, 700, 1081, 30, 51314, 51314, 821, 307, 1270, 257, 551, 382, 314, 20818, 11, 558, 30, 821, 307, 1500, 9555, 3250, 293, 456, 311, 257, 688, 295, 11290, 11, 257, 688, 295, 2145, 11, 257, 688, 295, 3642, 322, 309, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.09391447067260743, "compression_ratio": 1.6710526315789473, "no_caption_prob": 1.5292506532205152e-06}, {"id": 78, "seek": 34400, "start": 354.0, "end": 363.0, "text": " So you mentioned TDD, right? To go back to why is this question of types versus tests even there in the first place?", "tokens": [50364, 1743, 291, 291, 787, 1817, 7146, 309, 538, 5127, 281, 309, 13, 50614, 50614, 13813, 291, 787, 2089, 257, 7959, 562, 291, 909, 746, 281, 257, 11671, 2010, 13, 50864, 50864, 407, 291, 2835, 314, 20818, 11, 558, 30, 1407, 352, 646, 281, 983, 307, 341, 1168, 295, 3467, 5717, 6921, 754, 456, 294, 264, 700, 1081, 30, 51314, 51314, 821, 307, 1270, 257, 551, 382, 314, 20818, 11, 558, 30, 821, 307, 1500, 9555, 3250, 293, 456, 311, 257, 688, 295, 11290, 11, 257, 688, 295, 2145, 11, 257, 688, 295, 3642, 322, 309, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.09391447067260743, "compression_ratio": 1.6710526315789473, "no_caption_prob": 1.5292506532205152e-06}, {"id": 79, "seek": 34400, "start": 363.0, "end": 372.0, "text": " There is such a thing as TDD, right? There is test driven development and there's a lot of articles, a lot of videos, a lot of books on it.", "tokens": [50364, 1743, 291, 291, 787, 1817, 7146, 309, 538, 5127, 281, 309, 13, 50614, 50614, 13813, 291, 787, 2089, 257, 7959, 562, 291, 909, 746, 281, 257, 11671, 2010, 13, 50864, 50864, 407, 291, 2835, 314, 20818, 11, 558, 30, 1407, 352, 646, 281, 983, 307, 341, 1168, 295, 3467, 5717, 6921, 754, 456, 294, 264, 700, 1081, 30, 51314, 51314, 821, 307, 1270, 257, 551, 382, 314, 20818, 11, 558, 30, 821, 307, 1500, 9555, 3250, 293, 456, 311, 257, 688, 295, 11290, 11, 257, 688, 295, 2145, 11, 257, 688, 295, 3642, 322, 309, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.09391447067260743, "compression_ratio": 1.6710526315789473, "no_caption_prob": 1.5292506532205152e-06}, {"id": 80, "seek": 37200, "start": 372.0, "end": 380.0, "text": " I think mostly pushed by extreme programming, I think, and agile coaches.", "tokens": [50364, 286, 519, 5240, 9152, 538, 8084, 9410, 11, 286, 519, 11, 293, 30072, 17503, 13, 50764, 50764, 15843, 19184, 1333, 295, 2942, 264, 1399, 293, 8084, 33984, 390, 15843, 19184, 311, 1333, 295, 2440, 30072, 1399, 300, 415, 7268, 729, 7512, 13, 51214, 51214, 865, 13, 407, 314, 20818, 307, 955, 13, 467, 311, 534, 955, 13, 51414, 51414, 583, 286, 519, 5240, 31129, 294, 8650, 411, 383, 3758, 8650, 411, 383, 11, 10745, 11, 383, 8199, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.14397524624336056, "compression_ratio": 1.6057692307692308, "no_caption_prob": 6.401087739504874e-05}, {"id": 81, "seek": 37200, "start": 380.0, "end": 389.0, "text": " Kent Beck sort of created the process and extreme XP was Kent Beck's sort of early agile process that he introduced those techniques.", "tokens": [50364, 286, 519, 5240, 9152, 538, 8084, 9410, 11, 286, 519, 11, 293, 30072, 17503, 13, 50764, 50764, 15843, 19184, 1333, 295, 2942, 264, 1399, 293, 8084, 33984, 390, 15843, 19184, 311, 1333, 295, 2440, 30072, 1399, 300, 415, 7268, 729, 7512, 13, 51214, 51214, 865, 13, 407, 314, 20818, 307, 955, 13, 467, 311, 534, 955, 13, 51414, 51414, 583, 286, 519, 5240, 31129, 294, 8650, 411, 383, 3758, 8650, 411, 383, 11, 10745, 11, 383, 8199, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.14397524624336056, "compression_ratio": 1.6057692307692308, "no_caption_prob": 6.401087739504874e-05}, {"id": 82, "seek": 37200, "start": 389.0, "end": 393.0, "text": " Yeah. So TDD is big. It's really big.", "tokens": [50364, 286, 519, 5240, 9152, 538, 8084, 9410, 11, 286, 519, 11, 293, 30072, 17503, 13, 50764, 50764, 15843, 19184, 1333, 295, 2942, 264, 1399, 293, 8084, 33984, 390, 15843, 19184, 311, 1333, 295, 2440, 30072, 1399, 300, 415, 7268, 729, 7512, 13, 51214, 51214, 865, 13, 407, 314, 20818, 307, 955, 13, 467, 311, 534, 955, 13, 51414, 51414, 583, 286, 519, 5240, 31129, 294, 8650, 411, 383, 3758, 8650, 411, 383, 11, 10745, 11, 383, 8199, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.14397524624336056, "compression_ratio": 1.6057692307692308, "no_caption_prob": 6.401087739504874e-05}, {"id": 83, "seek": 37200, "start": 393.0, "end": 400.0, "text": " But I think mostly originated in languages like C style languages like C, Java, C sharp.", "tokens": [50364, 286, 519, 5240, 9152, 538, 8084, 9410, 11, 286, 519, 11, 293, 30072, 17503, 13, 50764, 50764, 15843, 19184, 1333, 295, 2942, 264, 1399, 293, 8084, 33984, 390, 15843, 19184, 311, 1333, 295, 2440, 30072, 1399, 300, 415, 7268, 729, 7512, 13, 51214, 51214, 865, 13, 407, 314, 20818, 307, 955, 13, 467, 311, 534, 955, 13, 51414, 51414, 583, 286, 519, 5240, 31129, 294, 8650, 411, 383, 3758, 8650, 411, 383, 11, 10745, 11, 383, 8199, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.14397524624336056, "compression_ratio": 1.6057692307692308, "no_caption_prob": 6.401087739504874e-05}, {"id": 84, "seek": 40000, "start": 400.0, "end": 412.0, "text": " On the other side, you've got the academic languages like Haskell, where they are big on like, hey, see what all the things that we can do or at least we can prevent using types.", "tokens": [50364, 1282, 264, 661, 1252, 11, 291, 600, 658, 264, 7778, 8650, 411, 8646, 43723, 11, 689, 436, 366, 955, 322, 411, 11, 4177, 11, 536, 437, 439, 264, 721, 300, 321, 393, 360, 420, 412, 1935, 321, 393, 4871, 1228, 3467, 13, 50964, 50964, 400, 500, 380, 6513, 385, 322, 604, 295, 341, 13, 639, 307, 452, 452, 3701, 11, 412, 1935, 13, 51164, 51164, 400, 456, 311, 472, 1252, 689, 436, 352, 11, 436, 652, 3089, 589, 807, 6921, 13, 51464, 51464, 400, 456, 311, 1071, 1252, 689, 436, 584, 11, 4177, 11, 574, 412, 439, 613, 3467, 300, 366, 370, 4420, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.09204951922098796, "compression_ratio": 1.7725321888412018, "no_caption_prob": 0.00012532413529697806}, {"id": 85, "seek": 40000, "start": 412.0, "end": 416.0, "text": " And don't quote me on any of this. This is my my understanding, at least.", "tokens": [50364, 1282, 264, 661, 1252, 11, 291, 600, 658, 264, 7778, 8650, 411, 8646, 43723, 11, 689, 436, 366, 955, 322, 411, 11, 4177, 11, 536, 437, 439, 264, 721, 300, 321, 393, 360, 420, 412, 1935, 321, 393, 4871, 1228, 3467, 13, 50964, 50964, 400, 500, 380, 6513, 385, 322, 604, 295, 341, 13, 639, 307, 452, 452, 3701, 11, 412, 1935, 13, 51164, 51164, 400, 456, 311, 472, 1252, 689, 436, 352, 11, 436, 652, 3089, 589, 807, 6921, 13, 51464, 51464, 400, 456, 311, 1071, 1252, 689, 436, 584, 11, 4177, 11, 574, 412, 439, 613, 3467, 300, 366, 370, 4420, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.09204951922098796, "compression_ratio": 1.7725321888412018, "no_caption_prob": 0.00012532413529697806}, {"id": 86, "seek": 40000, "start": 416.0, "end": 422.0, "text": " And there's one side where they go, they make code work through tests.", "tokens": [50364, 1282, 264, 661, 1252, 11, 291, 600, 658, 264, 7778, 8650, 411, 8646, 43723, 11, 689, 436, 366, 955, 322, 411, 11, 4177, 11, 536, 437, 439, 264, 721, 300, 321, 393, 360, 420, 412, 1935, 321, 393, 4871, 1228, 3467, 13, 50964, 50964, 400, 500, 380, 6513, 385, 322, 604, 295, 341, 13, 639, 307, 452, 452, 3701, 11, 412, 1935, 13, 51164, 51164, 400, 456, 311, 472, 1252, 689, 436, 352, 11, 436, 652, 3089, 589, 807, 6921, 13, 51464, 51464, 400, 456, 311, 1071, 1252, 689, 436, 584, 11, 4177, 11, 574, 412, 439, 613, 3467, 300, 366, 370, 4420, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.09204951922098796, "compression_ratio": 1.7725321888412018, "no_caption_prob": 0.00012532413529697806}, {"id": 87, "seek": 40000, "start": 422.0, "end": 427.0, "text": " And there's another side where they say, hey, look at all these types that are so useful.", "tokens": [50364, 1282, 264, 661, 1252, 11, 291, 600, 658, 264, 7778, 8650, 411, 8646, 43723, 11, 689, 436, 366, 955, 322, 411, 11, 4177, 11, 536, 437, 439, 264, 721, 300, 321, 393, 360, 420, 412, 1935, 321, 393, 4871, 1228, 3467, 13, 50964, 50964, 400, 500, 380, 6513, 385, 322, 604, 295, 341, 13, 639, 307, 452, 452, 3701, 11, 412, 1935, 13, 51164, 51164, 400, 456, 311, 472, 1252, 689, 436, 352, 11, 436, 652, 3089, 589, 807, 6921, 13, 51464, 51464, 400, 456, 311, 1071, 1252, 689, 436, 584, 11, 4177, 11, 574, 412, 439, 613, 3467, 300, 366, 370, 4420, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.09204951922098796, "compression_ratio": 1.7725321888412018, "no_caption_prob": 0.00012532413529697806}, {"id": 88, "seek": 42700, "start": 427.0, "end": 434.0, "text": " And I think like these two have not been melted together quite well.", "tokens": [50364, 400, 286, 519, 411, 613, 732, 362, 406, 668, 19057, 1214, 1596, 731, 13, 50714, 50714, 821, 311, 611, 411, 445, 456, 311, 572, 2283, 13, 821, 311, 291, 2835, 2010, 9555, 3250, 294, 472, 295, 428, 6686, 13, 51064, 51064, 583, 411, 456, 311, 1825, 382, 47168, 382, 314, 20818, 13, 51264, 51264, 400, 456, 311, 572, 3124, 300, 286, 458, 295, 300, 575, 300, 1315, 295, 411, 11, 4177, 11, 718, 311, 3470, 527, 3089, 538, 4473, 527, 3467, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.08808262958083042, "compression_ratio": 1.5794392523364487, "no_caption_prob": 1.777779652911704e-05}, {"id": 89, "seek": 42700, "start": 434.0, "end": 441.0, "text": " There's also like just there's no words. There's you mentioned type driven development in one of your talks.", "tokens": [50364, 400, 286, 519, 411, 613, 732, 362, 406, 668, 19057, 1214, 1596, 731, 13, 50714, 50714, 821, 311, 611, 411, 445, 456, 311, 572, 2283, 13, 821, 311, 291, 2835, 2010, 9555, 3250, 294, 472, 295, 428, 6686, 13, 51064, 51064, 583, 411, 456, 311, 1825, 382, 47168, 382, 314, 20818, 13, 51264, 51264, 400, 456, 311, 572, 3124, 300, 286, 458, 295, 300, 575, 300, 1315, 295, 411, 11, 4177, 11, 718, 311, 3470, 527, 3089, 538, 4473, 527, 3467, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.08808262958083042, "compression_ratio": 1.5794392523364487, "no_caption_prob": 1.777779652911704e-05}, {"id": 90, "seek": 42700, "start": 441.0, "end": 445.0, "text": " But like there's nothing as catchy as TDD.", "tokens": [50364, 400, 286, 519, 411, 613, 732, 362, 406, 668, 19057, 1214, 1596, 731, 13, 50714, 50714, 821, 311, 611, 411, 445, 456, 311, 572, 2283, 13, 821, 311, 291, 2835, 2010, 9555, 3250, 294, 472, 295, 428, 6686, 13, 51064, 51064, 583, 411, 456, 311, 1825, 382, 47168, 382, 314, 20818, 13, 51264, 51264, 400, 456, 311, 572, 3124, 300, 286, 458, 295, 300, 575, 300, 1315, 295, 411, 11, 4177, 11, 718, 311, 3470, 527, 3089, 538, 4473, 527, 3467, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.08808262958083042, "compression_ratio": 1.5794392523364487, "no_caption_prob": 1.777779652911704e-05}, {"id": 91, "seek": 42700, "start": 445.0, "end": 452.0, "text": " And there's no practice that I know of that has that name of like, hey, let's improve our code by changing our types.", "tokens": [50364, 400, 286, 519, 411, 613, 732, 362, 406, 668, 19057, 1214, 1596, 731, 13, 50714, 50714, 821, 311, 611, 411, 445, 456, 311, 572, 2283, 13, 821, 311, 291, 2835, 2010, 9555, 3250, 294, 472, 295, 428, 6686, 13, 51064, 51064, 583, 411, 456, 311, 1825, 382, 47168, 382, 314, 20818, 13, 51264, 51264, 400, 456, 311, 572, 3124, 300, 286, 458, 295, 300, 575, 300, 1315, 295, 411, 11, 4177, 11, 718, 311, 3470, 527, 3089, 538, 4473, 527, 3467, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.08808262958083042, "compression_ratio": 1.5794392523364487, "no_caption_prob": 1.777779652911704e-05}, {"id": 92, "seek": 45200, "start": 452.0, "end": 461.0, "text": " We call it making impossible states impossible, make legal states and reprisidential, but nothing that is books with that name.", "tokens": [50364, 492, 818, 309, 1455, 6243, 4368, 6243, 11, 652, 5089, 4368, 293, 1085, 5714, 1078, 831, 11, 457, 1825, 300, 307, 3642, 365, 300, 1315, 13, 50814, 50814, 1779, 13, 865, 13, 286, 611, 2441, 498, 498, 264, 20993, 307, 412, 17439, 689, 512, 561, 411, 281, 2464, 257, 2010, 293, 2316, 484, 641, 3467, 13, 51414, 51414, 492, 600, 2825, 466, 341, 1399, 13, 492, 1293, 2103, 341, 20993, 295, 12325, 278, 484, 257, 3840, 295, 2375, 3467, 281, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.14051964169456846, "compression_ratio": 1.6063348416289593, "no_caption_prob": 5.647118086926639e-05}, {"id": 93, "seek": 45200, "start": 461.0, "end": 473.0, "text": " Right. Yeah. I also wonder if if the workflow is at odds where some people like to write a type and model out their types.", "tokens": [50364, 492, 818, 309, 1455, 6243, 4368, 6243, 11, 652, 5089, 4368, 293, 1085, 5714, 1078, 831, 11, 457, 1825, 300, 307, 3642, 365, 300, 1315, 13, 50814, 50814, 1779, 13, 865, 13, 286, 611, 2441, 498, 498, 264, 20993, 307, 412, 17439, 689, 512, 561, 411, 281, 2464, 257, 2010, 293, 2316, 484, 641, 3467, 13, 51414, 51414, 492, 600, 2825, 466, 341, 1399, 13, 492, 1293, 2103, 341, 20993, 295, 12325, 278, 484, 257, 3840, 295, 2375, 3467, 281, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.14051964169456846, "compression_ratio": 1.6063348416289593, "no_caption_prob": 5.647118086926639e-05}, {"id": 94, "seek": 45200, "start": 473.0, "end": 481.0, "text": " We've talked about this process. We both enjoy this workflow of sketching out a bunch of custom types to", "tokens": [50364, 492, 818, 309, 1455, 6243, 4368, 6243, 11, 652, 5089, 4368, 293, 1085, 5714, 1078, 831, 11, 457, 1825, 300, 307, 3642, 365, 300, 1315, 13, 50814, 50814, 1779, 13, 865, 13, 286, 611, 2441, 498, 498, 264, 20993, 307, 412, 17439, 689, 512, 561, 411, 281, 2464, 257, 2010, 293, 2316, 484, 641, 3467, 13, 51414, 51414, 492, 600, 2825, 466, 341, 1399, 13, 492, 1293, 2103, 341, 20993, 295, 12325, 278, 484, 257, 3840, 295, 2375, 3467, 281, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.14051964169456846, "compression_ratio": 1.6063348416289593, "no_caption_prob": 5.647118086926639e-05}, {"id": 95, "seek": 48100, "start": 481.0, "end": 490.0, "text": " wrap our heads around a concept. And that's in a way that sort of an upfront design process in a sense.", "tokens": [50364, 7019, 527, 8050, 926, 257, 3410, 13, 400, 300, 311, 294, 257, 636, 300, 1333, 295, 364, 30264, 1715, 1399, 294, 257, 2020, 13, 50814, 50814, 467, 393, 312, 13, 823, 11, 365, 264, 43012, 11, 309, 307, 309, 307, 257, 12325, 13, 407, 291, 393, 291, 393, 3507, 300, 12325, 1314, 13, 51214, 51214, 400, 550, 1500, 9555, 3250, 307, 544, 295, 257, 2235, 2316, 13, 509, 500, 380, 360, 309, 493, 1868, 13, 51464, 51464, 509, 2235, 721, 294, 382, 2978, 13, 509, 764, 264, 22811, 551, 300, 727, 6264, 589, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.09250894857912648, "compression_ratio": 1.6502242152466369, "no_caption_prob": 4.068866837769747e-05}, {"id": 96, "seek": 48100, "start": 490.0, "end": 498.0, "text": " It can be. Now, with the caveat, it is it is a sketch. So you can you can throw that sketch away.", "tokens": [50364, 7019, 527, 8050, 926, 257, 3410, 13, 400, 300, 311, 294, 257, 636, 300, 1333, 295, 364, 30264, 1715, 1399, 294, 257, 2020, 13, 50814, 50814, 467, 393, 312, 13, 823, 11, 365, 264, 43012, 11, 309, 307, 309, 307, 257, 12325, 13, 407, 291, 393, 291, 393, 3507, 300, 12325, 1314, 13, 51214, 51214, 400, 550, 1500, 9555, 3250, 307, 544, 295, 257, 2235, 2316, 13, 509, 500, 380, 360, 309, 493, 1868, 13, 51464, 51464, 509, 2235, 721, 294, 382, 2978, 13, 509, 764, 264, 22811, 551, 300, 727, 6264, 589, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.09250894857912648, "compression_ratio": 1.6502242152466369, "no_caption_prob": 4.068866837769747e-05}, {"id": 97, "seek": 48100, "start": 498.0, "end": 503.0, "text": " And then test driven development is more of a pull model. You don't do it up front.", "tokens": [50364, 7019, 527, 8050, 926, 257, 3410, 13, 400, 300, 311, 294, 257, 636, 300, 1333, 295, 364, 30264, 1715, 1399, 294, 257, 2020, 13, 50814, 50814, 467, 393, 312, 13, 823, 11, 365, 264, 43012, 11, 309, 307, 309, 307, 257, 12325, 13, 407, 291, 393, 291, 393, 3507, 300, 12325, 1314, 13, 51214, 51214, 400, 550, 1500, 9555, 3250, 307, 544, 295, 257, 2235, 2316, 13, 509, 500, 380, 360, 309, 493, 1868, 13, 51464, 51464, 509, 2235, 721, 294, 382, 2978, 13, 509, 764, 264, 22811, 551, 300, 727, 6264, 589, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.09250894857912648, "compression_ratio": 1.6502242152466369, "no_caption_prob": 4.068866837769747e-05}, {"id": 98, "seek": 48100, "start": 503.0, "end": 508.0, "text": " You pull things in as needed. You use the simplest thing that could possibly work.", "tokens": [50364, 7019, 527, 8050, 926, 257, 3410, 13, 400, 300, 311, 294, 257, 636, 300, 1333, 295, 364, 30264, 1715, 1399, 294, 257, 2020, 13, 50814, 50814, 467, 393, 312, 13, 823, 11, 365, 264, 43012, 11, 309, 307, 309, 307, 257, 12325, 13, 407, 291, 393, 291, 393, 3507, 300, 12325, 1314, 13, 51214, 51214, 400, 550, 1500, 9555, 3250, 307, 544, 295, 257, 2235, 2316, 13, 509, 500, 380, 360, 309, 493, 1868, 13, 51464, 51464, 509, 2235, 721, 294, 382, 2978, 13, 509, 764, 264, 22811, 551, 300, 727, 6264, 589, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.09250894857912648, "compression_ratio": 1.6502242152466369, "no_caption_prob": 4.068866837769747e-05}, {"id": 99, "seek": 50800, "start": 508.0, "end": 514.0, "text": " I tend to think, you know, I've talked in the past about this concept of spikes.", "tokens": [50364, 286, 3928, 281, 519, 11, 291, 458, 11, 286, 600, 2825, 294, 264, 1791, 466, 341, 3410, 295, 28997, 13, 50664, 50664, 400, 281, 385, 11, 411, 300, 311, 534, 7115, 294, 314, 20818, 307, 885, 1075, 281, 360, 28997, 570, 436, 4160, 385, 437, 291, 914, 365, 28997, 2293, 13, 51114, 51114, 1079, 13, 316, 21053, 307, 4476, 3579, 3089, 300, 291, 393, 3507, 1314, 337, 264, 4334, 295, 2539, 13, 51414, 51414, 407, 264, 264, 4239, 712, 295, 257, 21053, 307, 2539, 11, 406, 4265, 3089, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.06183043859338248, "compression_ratio": 1.6331877729257642, "no_caption_prob": 0.0001106026757042855}, {"id": 100, "seek": 50800, "start": 514.0, "end": 523.0, "text": " And to me, like that's really essential in TDD is being able to do spikes because they remind me what you mean with spikes exactly.", "tokens": [50364, 286, 3928, 281, 519, 11, 291, 458, 11, 286, 600, 2825, 294, 264, 1791, 466, 341, 3410, 295, 28997, 13, 50664, 50664, 400, 281, 385, 11, 411, 300, 311, 534, 7115, 294, 314, 20818, 307, 885, 1075, 281, 360, 28997, 570, 436, 4160, 385, 437, 291, 914, 365, 28997, 2293, 13, 51114, 51114, 1079, 13, 316, 21053, 307, 4476, 3579, 3089, 300, 291, 393, 3507, 1314, 337, 264, 4334, 295, 2539, 13, 51414, 51414, 407, 264, 264, 4239, 712, 295, 257, 21053, 307, 2539, 11, 406, 4265, 3089, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.06183043859338248, "compression_ratio": 1.6331877729257642, "no_caption_prob": 0.0001106026757042855}, {"id": 101, "seek": 50800, "start": 523.0, "end": 529.0, "text": " Yes. A spike is essentially writing code that you can throw away for the purpose of learning.", "tokens": [50364, 286, 3928, 281, 519, 11, 291, 458, 11, 286, 600, 2825, 294, 264, 1791, 466, 341, 3410, 295, 28997, 13, 50664, 50664, 400, 281, 385, 11, 411, 300, 311, 534, 7115, 294, 314, 20818, 307, 885, 1075, 281, 360, 28997, 570, 436, 4160, 385, 437, 291, 914, 365, 28997, 2293, 13, 51114, 51114, 1079, 13, 316, 21053, 307, 4476, 3579, 3089, 300, 291, 393, 3507, 1314, 337, 264, 4334, 295, 2539, 13, 51414, 51414, 407, 264, 264, 4239, 712, 295, 257, 21053, 307, 2539, 11, 406, 4265, 3089, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.06183043859338248, "compression_ratio": 1.6331877729257642, "no_caption_prob": 0.0001106026757042855}, {"id": 102, "seek": 50800, "start": 529.0, "end": 534.0, "text": " So the the deliverable of a spike is learning, not production code.", "tokens": [50364, 286, 3928, 281, 519, 11, 291, 458, 11, 286, 600, 2825, 294, 264, 1791, 466, 341, 3410, 295, 28997, 13, 50664, 50664, 400, 281, 385, 11, 411, 300, 311, 534, 7115, 294, 314, 20818, 307, 885, 1075, 281, 360, 28997, 570, 436, 4160, 385, 437, 291, 914, 365, 28997, 2293, 13, 51114, 51114, 1079, 13, 316, 21053, 307, 4476, 3579, 3089, 300, 291, 393, 3507, 1314, 337, 264, 4334, 295, 2539, 13, 51414, 51414, 407, 264, 264, 4239, 712, 295, 257, 21053, 307, 2539, 11, 406, 4265, 3089, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.06183043859338248, "compression_ratio": 1.6331877729257642, "no_caption_prob": 0.0001106026757042855}, {"id": 103, "seek": 53400, "start": 534.0, "end": 547.0, "text": " And that's important because in TDD, you always write a failing test first and then kind of pull code into existence as needed to satisfy that failing test.", "tokens": [50364, 400, 300, 311, 1021, 570, 294, 314, 20818, 11, 291, 1009, 2464, 257, 18223, 1500, 700, 293, 550, 733, 295, 2235, 3089, 666, 9123, 382, 2978, 281, 19319, 300, 18223, 1500, 13, 51014, 51014, 583, 2171, 291, 528, 281, 445, 6839, 746, 13, 400, 370, 257, 21053, 2709, 291, 257, 1901, 281, 6839, 689, 291, 1333, 295, 829, 300, 13635, 281, 264, 1252, 337, 257, 1150, 13, 51464, 51464, 583, 291, 434, 406, 3579, 4265, 3089, 13, 509, 434, 3579, 3507, 10318, 3089, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.04925945672121915, "compression_ratio": 1.6523605150214593, "no_caption_prob": 1.363093815598404e-05}, {"id": 104, "seek": 53400, "start": 547.0, "end": 556.0, "text": " But sometimes you want to just explore something. And so a spike gives you a space to explore where you sort of put that discipline to the side for a second.", "tokens": [50364, 400, 300, 311, 1021, 570, 294, 314, 20818, 11, 291, 1009, 2464, 257, 18223, 1500, 700, 293, 550, 733, 295, 2235, 3089, 666, 9123, 382, 2978, 281, 19319, 300, 18223, 1500, 13, 51014, 51014, 583, 2171, 291, 528, 281, 445, 6839, 746, 13, 400, 370, 257, 21053, 2709, 291, 257, 1901, 281, 6839, 689, 291, 1333, 295, 829, 300, 13635, 281, 264, 1252, 337, 257, 1150, 13, 51464, 51464, 583, 291, 434, 406, 3579, 4265, 3089, 13, 509, 434, 3579, 3507, 10318, 3089, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.04925945672121915, "compression_ratio": 1.6523605150214593, "no_caption_prob": 1.363093815598404e-05}, {"id": 105, "seek": 53400, "start": 556.0, "end": 559.0, "text": " But you're not writing production code. You're writing throwaway code.", "tokens": [50364, 400, 300, 311, 1021, 570, 294, 314, 20818, 11, 291, 1009, 2464, 257, 18223, 1500, 700, 293, 550, 733, 295, 2235, 3089, 666, 9123, 382, 2978, 281, 19319, 300, 18223, 1500, 13, 51014, 51014, 583, 2171, 291, 528, 281, 445, 6839, 746, 13, 400, 370, 257, 21053, 2709, 291, 257, 1901, 281, 6839, 689, 291, 1333, 295, 829, 300, 13635, 281, 264, 1252, 337, 257, 1150, 13, 51464, 51464, 583, 291, 434, 406, 3579, 4265, 3089, 13, 509, 434, 3579, 3507, 10318, 3089, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.04925945672121915, "compression_ratio": 1.6523605150214593, "no_caption_prob": 1.363093815598404e-05}, {"id": 106, "seek": 55900, "start": 559.0, "end": 566.0, "text": " And so it allows you to just explore without being constrained by that workflow where you're doing things just in time.", "tokens": [50364, 400, 370, 309, 4045, 291, 281, 445, 6839, 1553, 885, 38901, 538, 300, 20993, 689, 291, 434, 884, 721, 445, 294, 565, 13, 50714, 50714, 865, 13, 509, 434, 1953, 295, 28997, 300, 1036, 411, 257, 1326, 2077, 11, 558, 30, 1726, 28997, 300, 1036, 1922, 257, 786, 420, 732, 1708, 13, 51064, 51064, 1779, 13, 7021, 13, 407, 281, 385, 11, 12325, 278, 484, 3467, 393, 312, 257, 534, 1481, 2010, 295, 21053, 13, 51414, 51414], "temperature": 0.0, "avg_logprob": -0.054198705697361425, "compression_ratio": 1.5436893203883495, "no_caption_prob": 5.475707075675018e-05}, {"id": 107, "seek": 55900, "start": 566.0, "end": 573.0, "text": " Yeah. You're thinking of spikes that last like a few minutes, right? Not spikes that last half a day or two days.", "tokens": [50364, 400, 370, 309, 4045, 291, 281, 445, 6839, 1553, 885, 38901, 538, 300, 20993, 689, 291, 434, 884, 721, 445, 294, 565, 13, 50714, 50714, 865, 13, 509, 434, 1953, 295, 28997, 300, 1036, 411, 257, 1326, 2077, 11, 558, 30, 1726, 28997, 300, 1036, 1922, 257, 786, 420, 732, 1708, 13, 51064, 51064, 1779, 13, 7021, 13, 407, 281, 385, 11, 12325, 278, 484, 3467, 393, 312, 257, 534, 1481, 2010, 295, 21053, 13, 51414, 51414], "temperature": 0.0, "avg_logprob": -0.054198705697361425, "compression_ratio": 1.5436893203883495, "no_caption_prob": 5.475707075675018e-05}, {"id": 108, "seek": 55900, "start": 573.0, "end": 580.0, "text": " Right. Absolutely. So to me, sketching out types can be a really nice type of spike.", "tokens": [50364, 400, 370, 309, 4045, 291, 281, 445, 6839, 1553, 885, 38901, 538, 300, 20993, 689, 291, 434, 884, 721, 445, 294, 565, 13, 50714, 50714, 865, 13, 509, 434, 1953, 295, 28997, 300, 1036, 411, 257, 1326, 2077, 11, 558, 30, 1726, 28997, 300, 1036, 1922, 257, 786, 420, 732, 1708, 13, 51064, 51064, 1779, 13, 7021, 13, 407, 281, 385, 11, 12325, 278, 484, 3467, 393, 312, 257, 534, 1481, 2010, 295, 21053, 13, 51414, 51414], "temperature": 0.0, "avg_logprob": -0.054198705697361425, "compression_ratio": 1.5436893203883495, "no_caption_prob": 5.475707075675018e-05}, {"id": 109, "seek": 58000, "start": 580.0, "end": 598.0, "text": " And I do really like that workflow where, you know, I mean, I imagine you do too with not having Elm Review saying this is an unused union type constructor for a long time where it's just sitting there collecting dust because you think you're going to use it at some point in the future.", "tokens": [50364, 400, 286, 360, 534, 411, 300, 20993, 689, 11, 291, 458, 11, 286, 914, 11, 286, 3811, 291, 360, 886, 365, 406, 1419, 2699, 76, 19954, 1566, 341, 307, 364, 44383, 11671, 2010, 47479, 337, 257, 938, 565, 689, 309, 311, 445, 3798, 456, 12510, 8634, 570, 291, 519, 291, 434, 516, 281, 764, 309, 412, 512, 935, 294, 264, 2027, 13, 51264, 51264], "temperature": 0.0, "avg_logprob": -0.12096040176622795, "compression_ratio": 1.4947916666666667, "no_caption_prob": 8.348942355951294e-05}, {"id": 110, "seek": 59800, "start": 598.0, "end": 610.0, "text": " So it is a little bit difficult to piece these two workflows together in a sense because one is just in time and one is a more upfront design process.", "tokens": [50364, 407, 309, 307, 257, 707, 857, 2252, 281, 2522, 613, 732, 43461, 1214, 294, 257, 2020, 570, 472, 307, 445, 294, 565, 293, 472, 307, 257, 544, 30264, 1715, 1399, 13, 50964, 50964, 865, 13, 407, 294, 314, 20818, 11, 456, 311, 341, 2182, 3092, 1895, 15104, 6586, 13, 51264, 51264, 583, 286, 500, 380, 458, 295, 1270, 257, 3743, 6586, 420, 9927, 300, 291, 362, 281, 360, 337, 3467, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.07771120707194011, "compression_ratio": 1.4522613065326633, "no_caption_prob": 3.321353142382577e-05}, {"id": 111, "seek": 59800, "start": 610.0, "end": 616.0, "text": " Yeah. So in TDD, there's this red green refactor cycle.", "tokens": [50364, 407, 309, 307, 257, 707, 857, 2252, 281, 2522, 613, 732, 43461, 1214, 294, 257, 2020, 570, 472, 307, 445, 294, 565, 293, 472, 307, 257, 544, 30264, 1715, 1399, 13, 50964, 50964, 865, 13, 407, 294, 314, 20818, 11, 456, 311, 341, 2182, 3092, 1895, 15104, 6586, 13, 51264, 51264, 583, 286, 500, 380, 458, 295, 1270, 257, 3743, 6586, 420, 9927, 300, 291, 362, 281, 360, 337, 3467, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.07771120707194011, "compression_ratio": 1.4522613065326633, "no_caption_prob": 3.321353142382577e-05}, {"id": 112, "seek": 59800, "start": 616.0, "end": 623.0, "text": " But I don't know of such a popular cycle or routine that you have to do for types.", "tokens": [50364, 407, 309, 307, 257, 707, 857, 2252, 281, 2522, 613, 732, 43461, 1214, 294, 257, 2020, 570, 472, 307, 445, 294, 565, 293, 472, 307, 257, 544, 30264, 1715, 1399, 13, 50964, 50964, 865, 13, 407, 294, 314, 20818, 11, 456, 311, 341, 2182, 3092, 1895, 15104, 6586, 13, 51264, 51264, 583, 286, 500, 380, 458, 295, 1270, 257, 3743, 6586, 420, 9927, 300, 291, 362, 281, 360, 337, 3467, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.07771120707194011, "compression_ratio": 1.4522613065326633, "no_caption_prob": 3.321353142382577e-05}, {"id": 113, "seek": 62300, "start": 623.0, "end": 637.0, "text": " It's just like, well, you write the type and then do something like follow the compiler errors, change the type again if needed, follow the compiler errors again, et cetera, et cetera.", "tokens": [50364, 467, 311, 445, 411, 11, 731, 11, 291, 2464, 264, 2010, 293, 550, 360, 746, 411, 1524, 264, 31958, 13603, 11, 1319, 264, 2010, 797, 498, 2978, 11, 1524, 264, 31958, 13603, 797, 11, 1030, 11458, 11, 1030, 11458, 13, 51064, 51064, 821, 311, 257, 688, 544, 1399, 926, 314, 20818, 300, 575, 668, 3720, 760, 294, 721, 300, 366, 1858, 281, 2924, 281, 26992, 11, 457, 406, 337, 2010, 9410, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.11621637093393426, "compression_ratio": 1.663265306122449, "no_caption_prob": 0.00017396976181771606}, {"id": 114, "seek": 62300, "start": 637.0, "end": 649.0, "text": " There's a lot more process around TDD that has been written down in things that are easy to teach to beginners, but not for type programming.", "tokens": [50364, 467, 311, 445, 411, 11, 731, 11, 291, 2464, 264, 2010, 293, 550, 360, 746, 411, 1524, 264, 31958, 13603, 11, 1319, 264, 2010, 797, 498, 2978, 11, 1524, 264, 31958, 13603, 797, 11, 1030, 11458, 11, 1030, 11458, 13, 51064, 51064, 821, 311, 257, 688, 544, 1399, 926, 314, 20818, 300, 575, 668, 3720, 760, 294, 721, 300, 366, 1858, 281, 2924, 281, 26992, 11, 457, 406, 337, 2010, 9410, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.11621637093393426, "compression_ratio": 1.663265306122449, "no_caption_prob": 0.00017396976181771606}, {"id": 115, "seek": 64900, "start": 649.0, "end": 653.0, "text": " Yeah. Yeah. See, I don't even have a term for this.", "tokens": [50364, 865, 13, 865, 13, 3008, 11, 286, 500, 380, 754, 362, 257, 1433, 337, 341, 13, 50564, 50564, 1779, 13, 1779, 13, 7587, 13, 865, 13, 467, 311, 733, 295, 411, 9274, 15983, 365, 3467, 13, 50764, 50764, 583, 1338, 11, 411, 437, 366, 264, 4439, 30, 1711, 437, 935, 294, 428, 1399, 360, 291, 360, 309, 30, 1711, 437, 935, 294, 428, 1399, 360, 291, 5623, 264, 3467, 30, 400, 577, 360, 291, 4536, 577, 281, 5623, 428, 3467, 30, 51214, 51214, 407, 718, 311, 3811, 291, 434, 884, 1293, 13, 509, 434, 884, 314, 20818, 13, 51364, 51364], "temperature": 0.0, "avg_logprob": -0.117797758065018, "compression_ratio": 1.7320574162679425, "no_caption_prob": 9.818096259550657e-06}, {"id": 116, "seek": 64900, "start": 653.0, "end": 657.0, "text": " Right. Right. Exactly. Yeah. It's kind of like domain modeling with types.", "tokens": [50364, 865, 13, 865, 13, 3008, 11, 286, 500, 380, 754, 362, 257, 1433, 337, 341, 13, 50564, 50564, 1779, 13, 1779, 13, 7587, 13, 865, 13, 467, 311, 733, 295, 411, 9274, 15983, 365, 3467, 13, 50764, 50764, 583, 1338, 11, 411, 437, 366, 264, 4439, 30, 1711, 437, 935, 294, 428, 1399, 360, 291, 360, 309, 30, 1711, 437, 935, 294, 428, 1399, 360, 291, 5623, 264, 3467, 30, 400, 577, 360, 291, 4536, 577, 281, 5623, 428, 3467, 30, 51214, 51214, 407, 718, 311, 3811, 291, 434, 884, 1293, 13, 509, 434, 884, 314, 20818, 13, 51364, 51364], "temperature": 0.0, "avg_logprob": -0.117797758065018, "compression_ratio": 1.7320574162679425, "no_caption_prob": 9.818096259550657e-06}, {"id": 117, "seek": 64900, "start": 657.0, "end": 666.0, "text": " But yeah, like what are the steps? At what point in your process do you do it? At what point in your process do you update the types? And how do you decide how to update your types?", "tokens": [50364, 865, 13, 865, 13, 3008, 11, 286, 500, 380, 754, 362, 257, 1433, 337, 341, 13, 50564, 50564, 1779, 13, 1779, 13, 7587, 13, 865, 13, 467, 311, 733, 295, 411, 9274, 15983, 365, 3467, 13, 50764, 50764, 583, 1338, 11, 411, 437, 366, 264, 4439, 30, 1711, 437, 935, 294, 428, 1399, 360, 291, 360, 309, 30, 1711, 437, 935, 294, 428, 1399, 360, 291, 5623, 264, 3467, 30, 400, 577, 360, 291, 4536, 577, 281, 5623, 428, 3467, 30, 51214, 51214, 407, 718, 311, 3811, 291, 434, 884, 1293, 13, 509, 434, 884, 314, 20818, 13, 51364, 51364], "temperature": 0.0, "avg_logprob": -0.117797758065018, "compression_ratio": 1.7320574162679425, "no_caption_prob": 9.818096259550657e-06}, {"id": 118, "seek": 64900, "start": 666.0, "end": 669.0, "text": " So let's imagine you're doing both. You're doing TDD.", "tokens": [50364, 865, 13, 865, 13, 3008, 11, 286, 500, 380, 754, 362, 257, 1433, 337, 341, 13, 50564, 50564, 1779, 13, 1779, 13, 7587, 13, 865, 13, 467, 311, 733, 295, 411, 9274, 15983, 365, 3467, 13, 50764, 50764, 583, 1338, 11, 411, 437, 366, 264, 4439, 30, 1711, 437, 935, 294, 428, 1399, 360, 291, 360, 309, 30, 1711, 437, 935, 294, 428, 1399, 360, 291, 5623, 264, 3467, 30, 400, 577, 360, 291, 4536, 577, 281, 5623, 428, 3467, 30, 51214, 51214, 407, 718, 311, 3811, 291, 434, 884, 1293, 13, 509, 434, 884, 314, 20818, 13, 51364, 51364], "temperature": 0.0, "avg_logprob": -0.117797758065018, "compression_ratio": 1.7320574162679425, "no_caption_prob": 9.818096259550657e-06}, {"id": 119, "seek": 66900, "start": 669.0, "end": 683.0, "text": " So TDD, there's red, you write a thing test, green, you make the code work, and then you refactor. Is refactor the phase where you change your types? Or is it in red? Is it in green?", "tokens": [50364, 407, 314, 20818, 11, 456, 311, 2182, 11, 291, 2464, 257, 551, 1500, 11, 3092, 11, 291, 652, 264, 3089, 589, 11, 293, 550, 291, 1895, 15104, 13, 1119, 1895, 15104, 264, 5574, 689, 291, 1319, 428, 3467, 30, 1610, 307, 309, 294, 2182, 30, 1119, 309, 294, 3092, 30, 51064, 51064, 467, 311, 2138, 406, 294, 2182, 13, 286, 519, 309, 311, 294, 1895, 15104, 13, 51214, 51214, 1042, 11, 1066, 294, 1575, 294, 314, 20818, 11, 286, 519, 341, 307, 257, 13743, 935, 300, 311, 588, 1021, 281, 360, 314, 20818, 294, 257, 33941, 4319, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.09977658589680989, "compression_ratio": 1.624413145539906, "no_caption_prob": 0.00015597329183947295}, {"id": 120, "seek": 66900, "start": 683.0, "end": 686.0, "text": " It's definitely not in red. I think it's in refactor.", "tokens": [50364, 407, 314, 20818, 11, 456, 311, 2182, 11, 291, 2464, 257, 551, 1500, 11, 3092, 11, 291, 652, 264, 3089, 589, 11, 293, 550, 291, 1895, 15104, 13, 1119, 1895, 15104, 264, 5574, 689, 291, 1319, 428, 3467, 30, 1610, 307, 309, 294, 2182, 30, 1119, 309, 294, 3092, 30, 51064, 51064, 467, 311, 2138, 406, 294, 2182, 13, 286, 519, 309, 311, 294, 1895, 15104, 13, 51214, 51214, 1042, 11, 1066, 294, 1575, 294, 314, 20818, 11, 286, 519, 341, 307, 257, 13743, 935, 300, 311, 588, 1021, 281, 360, 314, 20818, 294, 257, 33941, 4319, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.09977658589680989, "compression_ratio": 1.624413145539906, "no_caption_prob": 0.00015597329183947295}, {"id": 121, "seek": 66900, "start": 686.0, "end": 695.0, "text": " Well, keep in mind in TDD, I think this is a subtle point that's very important to do TDD in a typed context.", "tokens": [50364, 407, 314, 20818, 11, 456, 311, 2182, 11, 291, 2464, 257, 551, 1500, 11, 3092, 11, 291, 652, 264, 3089, 589, 11, 293, 550, 291, 1895, 15104, 13, 1119, 1895, 15104, 264, 5574, 689, 291, 1319, 428, 3467, 30, 1610, 307, 309, 294, 2182, 30, 1119, 309, 294, 3092, 30, 51064, 51064, 467, 311, 2138, 406, 294, 2182, 13, 286, 519, 309, 311, 294, 1895, 15104, 13, 51214, 51214, 1042, 11, 1066, 294, 1575, 294, 314, 20818, 11, 286, 519, 341, 307, 257, 13743, 935, 300, 311, 588, 1021, 281, 360, 314, 20818, 294, 257, 33941, 4319, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.09977658589680989, "compression_ratio": 1.624413145539906, "no_caption_prob": 0.00015597329183947295}, {"id": 122, "seek": 69500, "start": 695.0, "end": 701.0, "text": " A compilation error is red, is a red step in TDD. And that's very important.", "tokens": [50364, 316, 40261, 6713, 307, 2182, 11, 307, 257, 2182, 1823, 294, 314, 20818, 13, 400, 300, 311, 588, 1021, 13, 50664, 50664, 407, 291, 576, 1949, 4473, 264, 2010, 281, 746, 300, 576, 485, 5135, 11, 291, 576, 445, 1949, 4473, 264, 3467, 281, 312, 1071, 6586, 11, 445, 411, 6921, 11, 457, 309, 311, 406, 257, 1500, 4077, 6586, 13, 467, 311, 445, 337, 3467, 13, 51364, 51364], "temperature": 0.0, "avg_logprob": -0.09419750159894916, "compression_ratio": 1.5934065934065933, "no_caption_prob": 9.60963370744139e-05}, {"id": 123, "seek": 69500, "start": 701.0, "end": 715.0, "text": " So you would consider changing the type to something that would... Actually, you would just consider changing the types to be another cycle, just like tests, but it's not a test related cycle. It's just for types.", "tokens": [50364, 316, 40261, 6713, 307, 2182, 11, 307, 257, 2182, 1823, 294, 314, 20818, 13, 400, 300, 311, 588, 1021, 13, 50664, 50664, 407, 291, 576, 1949, 4473, 264, 2010, 281, 746, 300, 576, 485, 5135, 11, 291, 576, 445, 1949, 4473, 264, 3467, 281, 312, 1071, 6586, 11, 445, 411, 6921, 11, 457, 309, 311, 406, 257, 1500, 4077, 6586, 13, 467, 311, 445, 337, 3467, 13, 51364, 51364], "temperature": 0.0, "avg_logprob": -0.09419750159894916, "compression_ratio": 1.5934065934065933, "no_caption_prob": 9.60963370744139e-05}, {"id": 124, "seek": 71500, "start": 715.0, "end": 731.0, "text": " Potentially. So like, for example, in an untyped context, if you're writing a unit test in Ruby, you might say like, you expect calling this method to return this value.", "tokens": [50364, 9145, 3137, 13, 407, 411, 11, 337, 1365, 11, 294, 364, 517, 874, 3452, 4319, 11, 498, 291, 434, 3579, 257, 4985, 1500, 294, 19907, 11, 291, 1062, 584, 411, 11, 291, 2066, 5141, 341, 3170, 281, 2736, 341, 2158, 13, 51164, 51164, 400, 550, 291, 483, 257, 18223, 1500, 570, 437, 775, 309, 584, 30, 467, 1619, 300, 3170, 1177, 380, 2514, 13, 1779, 30, 51464, 51464, 400, 437, 733, 295, 551, 307, 300, 30, 467, 311, 257, 34474, 6713, 11, 597, 264, 1500, 24376, 1619, 11, 1954, 11, 341, 1500, 7612, 13, 497, 2760, 1312, 6713, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.1024081776443037, "compression_ratio": 1.6440677966101696, "no_caption_prob": 2.9772269044769928e-05}, {"id": 125, "seek": 71500, "start": 731.0, "end": 737.0, "text": " And then you get a failing test because what does it say? It says that method doesn't exist. Right?", "tokens": [50364, 9145, 3137, 13, 407, 411, 11, 337, 1365, 11, 294, 364, 517, 874, 3452, 4319, 11, 498, 291, 434, 3579, 257, 4985, 1500, 294, 19907, 11, 291, 1062, 584, 411, 11, 291, 2066, 5141, 341, 3170, 281, 2736, 341, 2158, 13, 51164, 51164, 400, 550, 291, 483, 257, 18223, 1500, 570, 437, 775, 309, 584, 30, 467, 1619, 300, 3170, 1177, 380, 2514, 13, 1779, 30, 51464, 51464, 400, 437, 733, 295, 551, 307, 300, 30, 467, 311, 257, 34474, 6713, 11, 597, 264, 1500, 24376, 1619, 11, 1954, 11, 341, 1500, 7612, 13, 497, 2760, 1312, 6713, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.1024081776443037, "compression_ratio": 1.6440677966101696, "no_caption_prob": 2.9772269044769928e-05}, {"id": 126, "seek": 71500, "start": 737.0, "end": 744.0, "text": " And what kind of thing is that? It's a runtime error, which the test runner says, oh, this test failed. Runtime error.", "tokens": [50364, 9145, 3137, 13, 407, 411, 11, 337, 1365, 11, 294, 364, 517, 874, 3452, 4319, 11, 498, 291, 434, 3579, 257, 4985, 1500, 294, 19907, 11, 291, 1062, 584, 411, 11, 291, 2066, 5141, 341, 3170, 281, 2736, 341, 2158, 13, 51164, 51164, 400, 550, 291, 483, 257, 18223, 1500, 570, 437, 775, 309, 584, 30, 467, 1619, 300, 3170, 1177, 380, 2514, 13, 1779, 30, 51464, 51464, 400, 437, 733, 295, 551, 307, 300, 30, 467, 311, 257, 34474, 6713, 11, 597, 264, 1500, 24376, 1619, 11, 1954, 11, 341, 1500, 7612, 13, 497, 2760, 1312, 6713, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.1024081776443037, "compression_ratio": 1.6440677966101696, "no_caption_prob": 2.9772269044769928e-05}, {"id": 127, "seek": 74400, "start": 744.0, "end": 750.0, "text": " And so you fix that. Whereas in Elm, suddenly you have a compilation error. Things aren't working.", "tokens": [50364, 400, 370, 291, 3191, 300, 13, 13813, 294, 2699, 76, 11, 5800, 291, 362, 257, 40261, 6713, 13, 9514, 3212, 380, 1364, 13, 50664, 50664, 400, 291, 485, 583, 309, 920, 307, 2182, 11, 754, 1673, 309, 2809, 380, 767, 1190, 428, 1500, 13, 50964, 50964, 407, 309, 3417, 411, 11, 731, 11, 577, 307, 309, 257, 2182, 1500, 30, 467, 311, 406, 754, 2614, 264, 6921, 1939, 13, 51164, 51164], "temperature": 0.0, "avg_logprob": -0.12840506148664918, "compression_ratio": 1.4108108108108108, "no_caption_prob": 0.00016863513155840337}, {"id": 128, "seek": 74400, "start": 750.0, "end": 756.0, "text": " And you... But it still is red, even though it couldn't actually run your test.", "tokens": [50364, 400, 370, 291, 3191, 300, 13, 13813, 294, 2699, 76, 11, 5800, 291, 362, 257, 40261, 6713, 13, 9514, 3212, 380, 1364, 13, 50664, 50664, 400, 291, 485, 583, 309, 920, 307, 2182, 11, 754, 1673, 309, 2809, 380, 767, 1190, 428, 1500, 13, 50964, 50964, 407, 309, 3417, 411, 11, 731, 11, 577, 307, 309, 257, 2182, 1500, 30, 467, 311, 406, 754, 2614, 264, 6921, 1939, 13, 51164, 51164], "temperature": 0.0, "avg_logprob": -0.12840506148664918, "compression_ratio": 1.4108108108108108, "no_caption_prob": 0.00016863513155840337}, {"id": 129, "seek": 74400, "start": 756.0, "end": 760.0, "text": " So it feels like, well, how is it a red test? It's not even running the tests yet.", "tokens": [50364, 400, 370, 291, 3191, 300, 13, 13813, 294, 2699, 76, 11, 5800, 291, 362, 257, 40261, 6713, 13, 9514, 3212, 380, 1364, 13, 50664, 50664, 400, 291, 485, 583, 309, 920, 307, 2182, 11, 754, 1673, 309, 2809, 380, 767, 1190, 428, 1500, 13, 50964, 50964, 407, 309, 3417, 411, 11, 731, 11, 577, 307, 309, 257, 2182, 1500, 30, 467, 311, 406, 754, 2614, 264, 6921, 1939, 13, 51164, 51164], "temperature": 0.0, "avg_logprob": -0.12840506148664918, "compression_ratio": 1.4108108108108108, "no_caption_prob": 0.00016863513155840337}, {"id": 130, "seek": 76000, "start": 760.0, "end": 780.0, "text": " But the point is that you're pulling along just as much as you need. And so you're ensuring that you're exercising things through tests because they're coming into existence by that process where the test tells you, I need this thing in order to continue or in order to pass.", "tokens": [50364, 583, 264, 935, 307, 300, 291, 434, 8407, 2051, 445, 382, 709, 382, 291, 643, 13, 400, 370, 291, 434, 16882, 300, 291, 434, 27272, 721, 807, 6921, 570, 436, 434, 1348, 666, 9123, 538, 300, 1399, 689, 264, 1500, 5112, 291, 11, 286, 643, 341, 551, 294, 1668, 281, 2354, 420, 294, 1668, 281, 1320, 13, 51364, 51364, 400, 291, 434, 2902, 309, 264, 22811, 551, 291, 727, 281, 19319, 300, 11, 597, 1355, 291, 434, 1242, 1500, 9645, 295, 1203, 13, 1779, 30, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.05959267562694764, "compression_ratio": 1.738197424892704, "no_caption_prob": 7.141496462281793e-05}, {"id": 131, "seek": 76000, "start": 780.0, "end": 785.0, "text": " And you're giving it the simplest thing you could to satisfy that, which means you're getting test coverage of everything. Right?", "tokens": [50364, 583, 264, 935, 307, 300, 291, 434, 8407, 2051, 445, 382, 709, 382, 291, 643, 13, 400, 370, 291, 434, 16882, 300, 291, 434, 27272, 721, 807, 6921, 570, 436, 434, 1348, 666, 9123, 538, 300, 1399, 689, 264, 1500, 5112, 291, 11, 286, 643, 341, 551, 294, 1668, 281, 2354, 420, 294, 1668, 281, 1320, 13, 51364, 51364, 400, 291, 434, 2902, 309, 264, 22811, 551, 291, 727, 281, 19319, 300, 11, 597, 1355, 291, 434, 1242, 1500, 9645, 295, 1203, 13, 1779, 30, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.05959267562694764, "compression_ratio": 1.738197424892704, "no_caption_prob": 7.141496462281793e-05}, {"id": 132, "seek": 78500, "start": 785.0, "end": 793.0, "text": " That's the elegance of that process. And it allows you to split work where you can work on one small slice at a time.", "tokens": [50364, 663, 311, 264, 14459, 719, 295, 300, 1399, 13, 400, 309, 4045, 291, 281, 7472, 589, 689, 291, 393, 589, 322, 472, 1359, 13153, 412, 257, 565, 13, 50764, 50764, 400, 300, 311, 983, 264, 1399, 1985, 300, 636, 13, 407, 498, 291, 818, 257, 2445, 294, 2699, 76, 11, 309, 1177, 380, 2514, 13, 467, 311, 257, 31958, 6713, 13, 51064, 51064, 823, 291, 362, 281, 2464, 300, 2445, 293, 291, 393, 976, 309, 257, 24083, 13, 1353, 360, 420, 291, 393, 976, 309, 257, 7592, 2158, 420, 2035, 13, 51414, 51414], "temperature": 0.0, "avg_logprob": -0.07426094757883173, "compression_ratio": 1.6355140186915889, "no_caption_prob": 0.0001535449700895697}, {"id": 133, "seek": 78500, "start": 793.0, "end": 799.0, "text": " And that's why the process works that way. So if you call a function in Elm, it doesn't exist. It's a compiler error.", "tokens": [50364, 663, 311, 264, 14459, 719, 295, 300, 1399, 13, 400, 309, 4045, 291, 281, 7472, 589, 689, 291, 393, 589, 322, 472, 1359, 13153, 412, 257, 565, 13, 50764, 50764, 400, 300, 311, 983, 264, 1399, 1985, 300, 636, 13, 407, 498, 291, 818, 257, 2445, 294, 2699, 76, 11, 309, 1177, 380, 2514, 13, 467, 311, 257, 31958, 6713, 13, 51064, 51064, 823, 291, 362, 281, 2464, 300, 2445, 293, 291, 393, 976, 309, 257, 24083, 13, 1353, 360, 420, 291, 393, 976, 309, 257, 7592, 2158, 420, 2035, 13, 51414, 51414], "temperature": 0.0, "avg_logprob": -0.07426094757883173, "compression_ratio": 1.6355140186915889, "no_caption_prob": 0.0001535449700895697}, {"id": 134, "seek": 78500, "start": 799.0, "end": 806.0, "text": " Now you have to write that function and you can give it a debug.to do or you can give it a fake value or whatever.", "tokens": [50364, 663, 311, 264, 14459, 719, 295, 300, 1399, 13, 400, 309, 4045, 291, 281, 7472, 589, 689, 291, 393, 589, 322, 472, 1359, 13153, 412, 257, 565, 13, 50764, 50764, 400, 300, 311, 983, 264, 1399, 1985, 300, 636, 13, 407, 498, 291, 818, 257, 2445, 294, 2699, 76, 11, 309, 1177, 380, 2514, 13, 467, 311, 257, 31958, 6713, 13, 51064, 51064, 823, 291, 362, 281, 2464, 300, 2445, 293, 291, 393, 976, 309, 257, 24083, 13, 1353, 360, 420, 291, 393, 976, 309, 257, 7592, 2158, 420, 2035, 13, 51414, 51414], "temperature": 0.0, "avg_logprob": -0.07426094757883173, "compression_ratio": 1.6355140186915889, "no_caption_prob": 0.0001535449700895697}, {"id": 135, "seek": 80600, "start": 806.0, "end": 818.0, "text": " But so you do have now there are certain things that you have to do. Debug.to do is a little bit different than returning nil or null.", "tokens": [50364, 583, 370, 291, 360, 362, 586, 456, 366, 1629, 721, 300, 291, 362, 281, 360, 13, 27347, 697, 13, 1353, 360, 307, 257, 707, 857, 819, 813, 12678, 297, 388, 420, 18184, 13, 50964, 50964, 400, 291, 362, 281, 312, 291, 362, 281, 589, 1951, 544, 18491, 13, 51164, 51164, 467, 3417, 257, 707, 544, 9860, 13, 400, 456, 366, 1629, 721, 466, 1364, 294, 257, 33941, 4319, 293, 1364, 294, 11, 291, 458, 11, 1364, 294, 10745, 5717, 2699, 76, 3417, 588, 819, 813, 1364, 294, 15576, 14237, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.09178860644076733, "compression_ratio": 1.8483412322274881, "no_caption_prob": 3.6476074456004426e-05}, {"id": 136, "seek": 80600, "start": 818.0, "end": 822.0, "text": " And you have to be you have to work within more constraints.", "tokens": [50364, 583, 370, 291, 360, 362, 586, 456, 366, 1629, 721, 300, 291, 362, 281, 360, 13, 27347, 697, 13, 1353, 360, 307, 257, 707, 857, 819, 813, 12678, 297, 388, 420, 18184, 13, 50964, 50964, 400, 291, 362, 281, 312, 291, 362, 281, 589, 1951, 544, 18491, 13, 51164, 51164, 467, 3417, 257, 707, 544, 9860, 13, 400, 456, 366, 1629, 721, 466, 1364, 294, 257, 33941, 4319, 293, 1364, 294, 11, 291, 458, 11, 1364, 294, 10745, 5717, 2699, 76, 3417, 588, 819, 813, 1364, 294, 15576, 14237, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.09178860644076733, "compression_ratio": 1.8483412322274881, "no_caption_prob": 3.6476074456004426e-05}, {"id": 137, "seek": 80600, "start": 822.0, "end": 833.0, "text": " It feels a little more formal. And there are certain things about working in a typed context and working in, you know, working in Java versus Elm feels very different than working in TypeScript.", "tokens": [50364, 583, 370, 291, 360, 362, 586, 456, 366, 1629, 721, 300, 291, 362, 281, 360, 13, 27347, 697, 13, 1353, 360, 307, 257, 707, 857, 819, 813, 12678, 297, 388, 420, 18184, 13, 50964, 50964, 400, 291, 362, 281, 312, 291, 362, 281, 589, 1951, 544, 18491, 13, 51164, 51164, 467, 3417, 257, 707, 544, 9860, 13, 400, 456, 366, 1629, 721, 466, 1364, 294, 257, 33941, 4319, 293, 1364, 294, 11, 291, 458, 11, 1364, 294, 10745, 5717, 2699, 76, 3417, 588, 819, 813, 1364, 294, 15576, 14237, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.09178860644076733, "compression_ratio": 1.8483412322274881, "no_caption_prob": 3.6476074456004426e-05}, {"id": 138, "seek": 83300, "start": 833.0, "end": 841.0, "text": " But if you're if you're working in Elm, there are certain things that you have to do upfront to just get the compiler happy.", "tokens": [50364, 583, 498, 291, 434, 498, 291, 434, 1364, 294, 2699, 76, 11, 456, 366, 1629, 721, 300, 291, 362, 281, 360, 30264, 281, 445, 483, 264, 31958, 2055, 13, 50764, 50764, 400, 286, 600, 668, 534, 3102, 281, 1568, 512, 295, 264, 512, 295, 264, 721, 300, 9809, 575, 668, 12736, 365, 6922, 510, 11, 689, 415, 311, 2433, 926, 365, 264, 1558, 11, 337, 1365, 11, 295, 8293, 264, 31958, 281, 14483, 3089, 1826, 309, 2170, 281, 257, 935, 689, 456, 311, 257, 40261, 2734, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.0706853394979959, "compression_ratio": 1.6864406779661016, "no_caption_prob": 1.9832452380796894e-05}, {"id": 139, "seek": 83300, "start": 841.0, "end": 861.0, "text": " And I've been really interested to hear some of the some of the things that Richard has been exploring with Rock here, where he's playing around with the idea, for example, of allowing the compiler to execute code until it gets to a point where there's a compilation issue.", "tokens": [50364, 583, 498, 291, 434, 498, 291, 434, 1364, 294, 2699, 76, 11, 456, 366, 1629, 721, 300, 291, 362, 281, 360, 30264, 281, 445, 483, 264, 31958, 2055, 13, 50764, 50764, 400, 286, 600, 668, 534, 3102, 281, 1568, 512, 295, 264, 512, 295, 264, 721, 300, 9809, 575, 668, 12736, 365, 6922, 510, 11, 689, 415, 311, 2433, 926, 365, 264, 1558, 11, 337, 1365, 11, 295, 8293, 264, 31958, 281, 14483, 3089, 1826, 309, 2170, 281, 257, 935, 689, 456, 311, 257, 40261, 2734, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.0706853394979959, "compression_ratio": 1.6864406779661016, "no_caption_prob": 1.9832452380796894e-05}, {"id": 140, "seek": 86100, "start": 861.0, "end": 866.0, "text": " With basically like compiling everything it can in the program in a rock program.", "tokens": [50364, 2022, 1936, 411, 715, 4883, 1203, 309, 393, 294, 264, 1461, 294, 257, 3727, 1461, 13, 50614, 50614, 400, 550, 562, 309, 8664, 257, 3116, 917, 689, 309, 1619, 456, 311, 257, 31958, 6713, 510, 11, 4476, 300, 309, 8137, 257, 24083, 13, 1353, 360, 294, 456, 337, 291, 13, 51014, 51014, 407, 498, 309, 4454, 1819, 300, 294, 24083, 4391, 11, 550, 309, 19658, 364, 11183, 13, 51264, 51264, 400, 300, 307, 588, 1880, 337, 4997, 20993, 11, 570, 309, 287, 2581, 2564, 257, 707, 857, 544, 281, 341, 445, 294, 565, 1399, 689, 291, 500, 380, 362, 281, 360, 1203, 30264, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.046038402451409235, "compression_ratio": 1.7186311787072244, "no_caption_prob": 0.0001971488818526268}, {"id": 141, "seek": 86100, "start": 866.0, "end": 874.0, "text": " And then when it hits a dead end where it says there's a compiler error here, essentially that it puts a debug.to do in there for you.", "tokens": [50364, 2022, 1936, 411, 715, 4883, 1203, 309, 393, 294, 264, 1461, 294, 257, 3727, 1461, 13, 50614, 50614, 400, 550, 562, 309, 8664, 257, 3116, 917, 689, 309, 1619, 456, 311, 257, 31958, 6713, 510, 11, 4476, 300, 309, 8137, 257, 24083, 13, 1353, 360, 294, 456, 337, 291, 13, 51014, 51014, 407, 498, 309, 4454, 1819, 300, 294, 24083, 4391, 11, 550, 309, 19658, 364, 11183, 13, 51264, 51264, 400, 300, 307, 588, 1880, 337, 4997, 20993, 11, 570, 309, 287, 2581, 2564, 257, 707, 857, 544, 281, 341, 445, 294, 565, 1399, 689, 291, 500, 380, 362, 281, 360, 1203, 30264, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.046038402451409235, "compression_ratio": 1.7186311787072244, "no_caption_prob": 0.0001971488818526268}, {"id": 142, "seek": 86100, "start": 874.0, "end": 879.0, "text": " So if it executes that in debug mode, then it raises an exception.", "tokens": [50364, 2022, 1936, 411, 715, 4883, 1203, 309, 393, 294, 264, 1461, 294, 257, 3727, 1461, 13, 50614, 50614, 400, 550, 562, 309, 8664, 257, 3116, 917, 689, 309, 1619, 456, 311, 257, 31958, 6713, 510, 11, 4476, 300, 309, 8137, 257, 24083, 13, 1353, 360, 294, 456, 337, 291, 13, 51014, 51014, 407, 498, 309, 4454, 1819, 300, 294, 24083, 4391, 11, 550, 309, 19658, 364, 11183, 13, 51264, 51264, 400, 300, 307, 588, 1880, 337, 4997, 20993, 11, 570, 309, 287, 2581, 2564, 257, 707, 857, 544, 281, 341, 445, 294, 565, 1399, 689, 291, 500, 380, 362, 281, 360, 1203, 30264, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.046038402451409235, "compression_ratio": 1.7186311787072244, "no_caption_prob": 0.0001971488818526268}, {"id": 143, "seek": 86100, "start": 879.0, "end": 888.0, "text": " And that is very interesting for testing workflow, because it lends itself a little bit more to this just in time process where you don't have to do everything upfront.", "tokens": [50364, 2022, 1936, 411, 715, 4883, 1203, 309, 393, 294, 264, 1461, 294, 257, 3727, 1461, 13, 50614, 50614, 400, 550, 562, 309, 8664, 257, 3116, 917, 689, 309, 1619, 456, 311, 257, 31958, 6713, 510, 11, 4476, 300, 309, 8137, 257, 24083, 13, 1353, 360, 294, 456, 337, 291, 13, 51014, 51014, 407, 498, 309, 4454, 1819, 300, 294, 24083, 4391, 11, 550, 309, 19658, 364, 11183, 13, 51264, 51264, 400, 300, 307, 588, 1880, 337, 4997, 20993, 11, 570, 309, 287, 2581, 2564, 257, 707, 857, 544, 281, 341, 445, 294, 565, 1399, 689, 291, 500, 380, 362, 281, 360, 1203, 30264, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.046038402451409235, "compression_ratio": 1.7186311787072244, "no_caption_prob": 0.0001971488818526268}, {"id": 144, "seek": 88800, "start": 888.0, "end": 893.0, "text": " So there's I think there's a little bit of a push and pull with those two different mindsets.", "tokens": [50364, 407, 456, 311, 286, 519, 456, 311, 257, 707, 857, 295, 257, 2944, 293, 2235, 365, 729, 732, 819, 9634, 1385, 13, 50614, 50614, 821, 311, 611, 411, 257, 3410, 300, 286, 600, 668, 733, 295, 20297, 356, 3480, 294, 6922, 11, 597, 307, 264, 11, 291, 458, 11, 6922, 311, 3109, 281, 281, 18632, 411, 264, 286, 2870, 264, 1433, 11, 457, 613, 4338, 18632, 300, 291, 393, 6408, 1553, 20803, 17827, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.0759583619924692, "compression_ratio": 1.575609756097561, "no_caption_prob": 7.029968401184306e-05}, {"id": 145, "seek": 88800, "start": 893.0, "end": 910.0, "text": " There's also like a concept that I've been kind of keenly following in Rock, which is the, you know, Rock's approach to to tags like the I forget the term, but these global tags that you can reference without explicitly defining.", "tokens": [50364, 407, 456, 311, 286, 519, 456, 311, 257, 707, 857, 295, 257, 2944, 293, 2235, 365, 729, 732, 819, 9634, 1385, 13, 50614, 50614, 821, 311, 611, 411, 257, 3410, 300, 286, 600, 668, 733, 295, 20297, 356, 3480, 294, 6922, 11, 597, 307, 264, 11, 291, 458, 11, 6922, 311, 3109, 281, 281, 18632, 411, 264, 286, 2870, 264, 1433, 11, 457, 613, 4338, 18632, 300, 291, 393, 6408, 1553, 20803, 17827, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.0759583619924692, "compression_ratio": 1.575609756097561, "no_caption_prob": 7.029968401184306e-05}, {"id": 146, "seek": 91000, "start": 910.0, "end": 921.0, "text": " And it infers the different tags that are possible given given your usage of these named tags without you having to define upfront.", "tokens": [50364, 400, 309, 1536, 433, 264, 819, 18632, 300, 366, 1944, 2212, 2212, 428, 14924, 295, 613, 4926, 18632, 1553, 291, 1419, 281, 6964, 30264, 13, 50914, 50914, 1692, 311, 257, 2375, 2010, 13, 1692, 366, 439, 264, 21669, 13, 51014, 51014, 865, 13, 759, 746, 11247, 316, 294, 472, 9819, 11, 363, 420, 294, 1071, 9819, 11, 550, 309, 486, 312, 264, 1874, 486, 312, 2139, 316, 420, 363, 13, 51414, 51414, 1779, 13, 2720, 6022, 2139, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.14281041447709247, "compression_ratio": 1.558252427184466, "no_caption_prob": 4.289317985239904e-06}, {"id": 147, "seek": 91000, "start": 921.0, "end": 923.0, "text": " Here's a custom type. Here are all the variants.", "tokens": [50364, 400, 309, 1536, 433, 264, 819, 18632, 300, 366, 1944, 2212, 2212, 428, 14924, 295, 613, 4926, 18632, 1553, 291, 1419, 281, 6964, 30264, 13, 50914, 50914, 1692, 311, 257, 2375, 2010, 13, 1692, 366, 439, 264, 21669, 13, 51014, 51014, 865, 13, 759, 746, 11247, 316, 294, 472, 9819, 11, 363, 420, 294, 1071, 9819, 11, 550, 309, 486, 312, 264, 1874, 486, 312, 2139, 316, 420, 363, 13, 51414, 51414, 1779, 13, 2720, 6022, 2139, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.14281041447709247, "compression_ratio": 1.558252427184466, "no_caption_prob": 4.289317985239904e-06}, {"id": 148, "seek": 91000, "start": 923.0, "end": 931.0, "text": " Yeah. If something returns A in one branch, B or in another branch, then it will be the result will be either A or B.", "tokens": [50364, 400, 309, 1536, 433, 264, 819, 18632, 300, 366, 1944, 2212, 2212, 428, 14924, 295, 613, 4926, 18632, 1553, 291, 1419, 281, 6964, 30264, 13, 50914, 50914, 1692, 311, 257, 2375, 2010, 13, 1692, 366, 439, 264, 21669, 13, 51014, 51014, 865, 13, 759, 746, 11247, 316, 294, 472, 9819, 11, 363, 420, 294, 1071, 9819, 11, 550, 309, 486, 312, 264, 1874, 486, 312, 2139, 316, 420, 363, 13, 51414, 51414, 1779, 13, 2720, 6022, 2139, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.14281041447709247, "compression_ratio": 1.558252427184466, "no_caption_prob": 4.289317985239904e-06}, {"id": 149, "seek": 91000, "start": 931.0, "end": 934.0, "text": " Right. Of none either.", "tokens": [50364, 400, 309, 1536, 433, 264, 819, 18632, 300, 366, 1944, 2212, 2212, 428, 14924, 295, 613, 4926, 18632, 1553, 291, 1419, 281, 6964, 30264, 13, 50914, 50914, 1692, 311, 257, 2375, 2010, 13, 1692, 366, 439, 264, 21669, 13, 51014, 51014, 865, 13, 759, 746, 11247, 316, 294, 472, 9819, 11, 363, 420, 294, 1071, 9819, 11, 550, 309, 486, 312, 264, 1874, 486, 312, 2139, 316, 420, 363, 13, 51414, 51414, 1779, 13, 2720, 6022, 2139, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.14281041447709247, "compression_ratio": 1.558252427184466, "no_caption_prob": 4.289317985239904e-06}, {"id": 150, "seek": 93400, "start": 934.0, "end": 951.0, "text": " Yes. And if you think about that in the context of TDD, it's kind of interesting because now you can write a failing test that says, I expect this to return this variant without defining all of the possibilities for that variant upfront.", "tokens": [50364, 1079, 13, 400, 498, 291, 519, 466, 300, 294, 264, 4319, 295, 314, 20818, 11, 309, 311, 733, 295, 1880, 570, 586, 291, 393, 2464, 257, 18223, 1500, 300, 1619, 11, 286, 2066, 341, 281, 2736, 341, 17501, 1553, 17827, 439, 295, 264, 12178, 337, 300, 17501, 30264, 13, 51214, 51214, 407, 309, 17077, 257, 819, 2010, 295, 20993, 13, 51364, 51364, 407, 11, 286, 914, 11, 307, 300, 665, 420, 1578, 30, 286, 500, 380, 458, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.05378691743059856, "compression_ratio": 1.5115207373271888, "no_caption_prob": 2.8856067729066126e-05}, {"id": 151, "seek": 93400, "start": 951.0, "end": 954.0, "text": " So it enables a different type of workflow.", "tokens": [50364, 1079, 13, 400, 498, 291, 519, 466, 300, 294, 264, 4319, 295, 314, 20818, 11, 309, 311, 733, 295, 1880, 570, 586, 291, 393, 2464, 257, 18223, 1500, 300, 1619, 11, 286, 2066, 341, 281, 2736, 341, 17501, 1553, 17827, 439, 295, 264, 12178, 337, 300, 17501, 30264, 13, 51214, 51214, 407, 309, 17077, 257, 819, 2010, 295, 20993, 13, 51364, 51364, 407, 11, 286, 914, 11, 307, 300, 665, 420, 1578, 30, 286, 500, 380, 458, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.05378691743059856, "compression_ratio": 1.5115207373271888, "no_caption_prob": 2.8856067729066126e-05}, {"id": 152, "seek": 93400, "start": 954.0, "end": 957.0, "text": " So, I mean, is that good or bad? I don't know.", "tokens": [50364, 1079, 13, 400, 498, 291, 519, 466, 300, 294, 264, 4319, 295, 314, 20818, 11, 309, 311, 733, 295, 1880, 570, 586, 291, 393, 2464, 257, 18223, 1500, 300, 1619, 11, 286, 2066, 341, 281, 2736, 341, 17501, 1553, 17827, 439, 295, 264, 12178, 337, 300, 17501, 30264, 13, 51214, 51214, 407, 309, 17077, 257, 819, 2010, 295, 20993, 13, 51364, 51364, 407, 11, 286, 914, 11, 307, 300, 665, 420, 1578, 30, 286, 500, 380, 458, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.05378691743059856, "compression_ratio": 1.5115207373271888, "no_caption_prob": 2.8856067729066126e-05}, {"id": 153, "seek": 95700, "start": 957.0, "end": 971.0, "text": " I definitely it's it's very subtle. And maybe as you say, we do need to more concretely define a process just like TDD has this very clear, easy to teach set of steps for red green refactor.", "tokens": [50364, 286, 2138, 309, 311, 309, 311, 588, 13743, 13, 400, 1310, 382, 291, 584, 11, 321, 360, 643, 281, 544, 39481, 736, 6964, 257, 1399, 445, 411, 314, 20818, 575, 341, 588, 1850, 11, 1858, 281, 2924, 992, 295, 4439, 337, 2182, 3092, 1895, 15104, 13, 51064, 51064, 2704, 321, 643, 746, 2531, 337, 411, 314, 20818, 294, 257, 33941, 4319, 13, 51314, 51314], "temperature": 0.0, "avg_logprob": -0.09657167665886157, "compression_ratio": 1.4406779661016949, "no_caption_prob": 1.644204166950658e-05}, {"id": 154, "seek": 95700, "start": 971.0, "end": 976.0, "text": " Maybe we need something similar for like TDD in a typed context.", "tokens": [50364, 286, 2138, 309, 311, 309, 311, 588, 13743, 13, 400, 1310, 382, 291, 584, 11, 321, 360, 643, 281, 544, 39481, 736, 6964, 257, 1399, 445, 411, 314, 20818, 575, 341, 588, 1850, 11, 1858, 281, 2924, 992, 295, 4439, 337, 2182, 3092, 1895, 15104, 13, 51064, 51064, 2704, 321, 643, 746, 2531, 337, 411, 314, 20818, 294, 257, 33941, 4319, 13, 51314, 51314], "temperature": 0.0, "avg_logprob": -0.09657167665886157, "compression_ratio": 1.4406779661016949, "no_caption_prob": 1.644204166950658e-05}, {"id": 155, "seek": 97600, "start": 976.0, "end": 988.0, "text": " So, yeah, as to why people tend to draw these stark dividing lines between tests and TDD or tests and sorry, tests and types.", "tokens": [50364, 407, 11, 1338, 11, 382, 281, 983, 561, 3928, 281, 2642, 613, 17417, 26764, 3876, 1296, 6921, 293, 314, 20818, 420, 6921, 293, 2597, 11, 6921, 293, 3467, 13, 50964, 50964], "temperature": 0.0, "avg_logprob": -0.12128152269305605, "compression_ratio": 1.288659793814433, "no_caption_prob": 6.302180554484949e-05}, {"id": 156, "seek": 98800, "start": 988.0, "end": 1006.0, "text": " I think somehow like these different mindsets are looking at the problem of gaining confidence in your system in a different way where one is saying, you know, when we're thinking about types, we're thinking about guarantees and proofs.", "tokens": [50364, 286, 519, 6063, 411, 613, 819, 9634, 1385, 366, 1237, 412, 264, 1154, 295, 19752, 6687, 294, 428, 1185, 294, 257, 819, 636, 689, 472, 307, 1566, 11, 291, 458, 11, 562, 321, 434, 1953, 466, 3467, 11, 321, 434, 1953, 466, 32567, 293, 8177, 82, 13, 51264, 51264, 400, 562, 321, 434, 1953, 466, 6921, 11, 321, 434, 1953, 295, 2685, 15077, 11, 558, 30, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.06784227234976632, "compression_ratio": 1.7569060773480663, "no_caption_prob": 0.00033005766454152763}, {"id": 157, "seek": 98800, "start": 1006.0, "end": 1013.0, "text": " And when we're thinking about tests, we're thinking of specific scenarios, right?", "tokens": [50364, 286, 519, 6063, 411, 613, 819, 9634, 1385, 366, 1237, 412, 264, 1154, 295, 19752, 6687, 294, 428, 1185, 294, 257, 819, 636, 689, 472, 307, 1566, 11, 291, 458, 11, 562, 321, 434, 1953, 466, 3467, 11, 321, 434, 1953, 466, 32567, 293, 8177, 82, 13, 51264, 51264, 400, 562, 321, 434, 1953, 466, 6921, 11, 321, 434, 1953, 295, 2685, 15077, 11, 558, 30, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.06784227234976632, "compression_ratio": 1.7569060773480663, "no_caption_prob": 0.00033005766454152763}, {"id": 158, "seek": 101300, "start": 1013.0, "end": 1021.0, "text": " Exactly. We're exercising some specific scenarios and gaining confidence through, I don't know, through through a type of automated check.", "tokens": [50364, 7587, 13, 492, 434, 27272, 512, 2685, 15077, 293, 19752, 6687, 807, 11, 286, 500, 380, 458, 11, 807, 807, 257, 2010, 295, 18473, 1520, 13, 50764, 50764, 467, 311, 1570, 9860, 13, 467, 3417, 411, 257, 1570, 9860, 1399, 295, 9432, 278, 760, 613, 18491, 365, 8177, 82, 13, 51114, 51114, 400, 6063, 286, 841, 411, 561, 483, 666, 472, 12543, 420, 264, 661, 13, 51264, 51264, 583, 281, 385, 11, 309, 311, 411, 11, 983, 2759, 380, 411, 613, 613, 732, 819, 721, 862, 732, 819, 9604, 30, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.06341354897681703, "compression_ratio": 1.6305220883534137, "no_caption_prob": 9.760066313901916e-05}, {"id": 159, "seek": 101300, "start": 1021.0, "end": 1028.0, "text": " It's less formal. It feels like a less formal process of narrowing down these constraints with proofs.", "tokens": [50364, 7587, 13, 492, 434, 27272, 512, 2685, 15077, 293, 19752, 6687, 807, 11, 286, 500, 380, 458, 11, 807, 807, 257, 2010, 295, 18473, 1520, 13, 50764, 50764, 467, 311, 1570, 9860, 13, 467, 3417, 411, 257, 1570, 9860, 1399, 295, 9432, 278, 760, 613, 18491, 365, 8177, 82, 13, 51114, 51114, 400, 6063, 286, 841, 411, 561, 483, 666, 472, 12543, 420, 264, 661, 13, 51264, 51264, 583, 281, 385, 11, 309, 311, 411, 11, 983, 2759, 380, 411, 613, 613, 732, 819, 721, 862, 732, 819, 9604, 30, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.06341354897681703, "compression_ratio": 1.6305220883534137, "no_caption_prob": 9.760066313901916e-05}, {"id": 160, "seek": 101300, "start": 1028.0, "end": 1031.0, "text": " And somehow I feel like people get into one mindset or the other.", "tokens": [50364, 7587, 13, 492, 434, 27272, 512, 2685, 15077, 293, 19752, 6687, 807, 11, 286, 500, 380, 458, 11, 807, 807, 257, 2010, 295, 18473, 1520, 13, 50764, 50764, 467, 311, 1570, 9860, 13, 467, 3417, 411, 257, 1570, 9860, 1399, 295, 9432, 278, 760, 613, 18491, 365, 8177, 82, 13, 51114, 51114, 400, 6063, 286, 841, 411, 561, 483, 666, 472, 12543, 420, 264, 661, 13, 51264, 51264, 583, 281, 385, 11, 309, 311, 411, 11, 983, 2759, 380, 411, 613, 613, 732, 819, 721, 862, 732, 819, 9604, 30, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.06341354897681703, "compression_ratio": 1.6305220883534137, "no_caption_prob": 9.760066313901916e-05}, {"id": 161, "seek": 101300, "start": 1031.0, "end": 1037.0, "text": " But to me, it's like, why wouldn't like these these two different things play two different roles?", "tokens": [50364, 7587, 13, 492, 434, 27272, 512, 2685, 15077, 293, 19752, 6687, 807, 11, 286, 500, 380, 458, 11, 807, 807, 257, 2010, 295, 18473, 1520, 13, 50764, 50764, 467, 311, 1570, 9860, 13, 467, 3417, 411, 257, 1570, 9860, 1399, 295, 9432, 278, 760, 613, 18491, 365, 8177, 82, 13, 51114, 51114, 400, 6063, 286, 841, 411, 561, 483, 666, 472, 12543, 420, 264, 661, 13, 51264, 51264, 583, 281, 385, 11, 309, 311, 411, 11, 983, 2759, 380, 411, 613, 613, 732, 819, 721, 862, 732, 819, 9604, 30, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.06341354897681703, "compression_ratio": 1.6305220883534137, "no_caption_prob": 9.760066313901916e-05}, {"id": 162, "seek": 103700, "start": 1037.0, "end": 1048.0, "text": " Like if I'm so if if I'm trying to say, you know, I don't know, I have a I have a game that has died that can be a number one through six.", "tokens": [50364, 1743, 498, 286, 478, 370, 498, 498, 286, 478, 1382, 281, 584, 11, 291, 458, 11, 286, 500, 380, 458, 11, 286, 362, 257, 286, 362, 257, 1216, 300, 575, 4539, 300, 393, 312, 257, 1230, 472, 807, 2309, 13, 50914, 50914, 1396, 1943, 380, 309, 1481, 281, 2316, 3166, 295, 264, 1216, 807, 300, 30, 51164, 51164, 400, 11, 291, 458, 11, 2086, 11, 291, 528, 281, 7983, 264, 5223, 295, 264, 1216, 807, 807, 6921, 570, 264, 636, 300, 721, 4648, 293, 264, 15501, 366, 588, 13743, 13, 51614, 51614, 400, 291, 393, 380, 291, 393, 380, 2316, 300, 439, 807, 428, 3467, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.07527392994273793, "compression_ratio": 1.8325991189427313, "no_caption_prob": 9.313465852756053e-05}, {"id": 163, "seek": 103700, "start": 1048.0, "end": 1053.0, "text": " Then isn't it nice to model parts of the game through that?", "tokens": [50364, 1743, 498, 286, 478, 370, 498, 498, 286, 478, 1382, 281, 584, 11, 291, 458, 11, 286, 500, 380, 458, 11, 286, 362, 257, 286, 362, 257, 1216, 300, 575, 4539, 300, 393, 312, 257, 1230, 472, 807, 2309, 13, 50914, 50914, 1396, 1943, 380, 309, 1481, 281, 2316, 3166, 295, 264, 1216, 807, 300, 30, 51164, 51164, 400, 11, 291, 458, 11, 2086, 11, 291, 528, 281, 7983, 264, 5223, 295, 264, 1216, 807, 807, 6921, 570, 264, 636, 300, 721, 4648, 293, 264, 15501, 366, 588, 13743, 13, 51614, 51614, 400, 291, 393, 380, 291, 393, 380, 2316, 300, 439, 807, 428, 3467, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.07527392994273793, "compression_ratio": 1.8325991189427313, "no_caption_prob": 9.313465852756053e-05}, {"id": 164, "seek": 103700, "start": 1053.0, "end": 1062.0, "text": " And, you know, yes, you want to capture the behavior of the game through through tests because the way that things interact and the behaviors are very subtle.", "tokens": [50364, 1743, 498, 286, 478, 370, 498, 498, 286, 478, 1382, 281, 584, 11, 291, 458, 11, 286, 500, 380, 458, 11, 286, 362, 257, 286, 362, 257, 1216, 300, 575, 4539, 300, 393, 312, 257, 1230, 472, 807, 2309, 13, 50914, 50914, 1396, 1943, 380, 309, 1481, 281, 2316, 3166, 295, 264, 1216, 807, 300, 30, 51164, 51164, 400, 11, 291, 458, 11, 2086, 11, 291, 528, 281, 7983, 264, 5223, 295, 264, 1216, 807, 807, 6921, 570, 264, 636, 300, 721, 4648, 293, 264, 15501, 366, 588, 13743, 13, 51614, 51614, 400, 291, 393, 380, 291, 393, 380, 2316, 300, 439, 807, 428, 3467, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.07527392994273793, "compression_ratio": 1.8325991189427313, "no_caption_prob": 9.313465852756053e-05}, {"id": 165, "seek": 103700, "start": 1062.0, "end": 1066.0, "text": " And you can't you can't model that all through your types.", "tokens": [50364, 1743, 498, 286, 478, 370, 498, 498, 286, 478, 1382, 281, 584, 11, 291, 458, 11, 286, 500, 380, 458, 11, 286, 362, 257, 286, 362, 257, 1216, 300, 575, 4539, 300, 393, 312, 257, 1230, 472, 807, 2309, 13, 50914, 50914, 1396, 1943, 380, 309, 1481, 281, 2316, 3166, 295, 264, 1216, 807, 300, 30, 51164, 51164, 400, 11, 291, 458, 11, 2086, 11, 291, 528, 281, 7983, 264, 5223, 295, 264, 1216, 807, 807, 6921, 570, 264, 636, 300, 721, 4648, 293, 264, 15501, 366, 588, 13743, 13, 51614, 51614, 400, 291, 393, 380, 291, 393, 380, 2316, 300, 439, 807, 428, 3467, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.07527392994273793, "compression_ratio": 1.8325991189427313, "no_caption_prob": 9.313465852756053e-05}, {"id": 166, "seek": 106600, "start": 1066.0, "end": 1069.0, "text": " And I know we want to as people who love types.", "tokens": [50364, 400, 286, 458, 321, 528, 281, 382, 561, 567, 959, 3467, 13, 50514, 50514, 492, 528, 281, 652, 439, 4368, 6243, 807, 264, 2010, 1185, 11, 457, 291, 393, 380, 13, 50714, 50714, 400, 754, 498, 291, 727, 11, 1943, 380, 300, 437, 257, 20904, 447, 331, 307, 466, 30, 50964, 50964, 1743, 8650, 411, 3066, 80, 293, 2725, 2675, 11, 286, 519, 11, 293, 11506, 5714, 13, 51214, 51214, 865, 13, 509, 2464, 428, 3089, 293, 4682, 428, 3467, 294, 1270, 257, 636, 300, 309, 25019, 300, 428, 3089, 775, 2293, 437, 309, 437, 309, 307, 4140, 281, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.17086570079510027, "compression_ratio": 1.610878661087866, "no_caption_prob": 2.1782261683256365e-05}, {"id": 167, "seek": 106600, "start": 1069.0, "end": 1073.0, "text": " We want to make all states impossible through the type system, but you can't.", "tokens": [50364, 400, 286, 458, 321, 528, 281, 382, 561, 567, 959, 3467, 13, 50514, 50514, 492, 528, 281, 652, 439, 4368, 6243, 807, 264, 2010, 1185, 11, 457, 291, 393, 380, 13, 50714, 50714, 400, 754, 498, 291, 727, 11, 1943, 380, 300, 437, 257, 20904, 447, 331, 307, 466, 30, 50964, 50964, 1743, 8650, 411, 3066, 80, 293, 2725, 2675, 11, 286, 519, 11, 293, 11506, 5714, 13, 51214, 51214, 865, 13, 509, 2464, 428, 3089, 293, 4682, 428, 3467, 294, 1270, 257, 636, 300, 309, 25019, 300, 428, 3089, 775, 2293, 437, 309, 437, 309, 307, 4140, 281, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.17086570079510027, "compression_ratio": 1.610878661087866, "no_caption_prob": 2.1782261683256365e-05}, {"id": 168, "seek": 106600, "start": 1073.0, "end": 1078.0, "text": " And even if you could, isn't that what a theorem prover is about?", "tokens": [50364, 400, 286, 458, 321, 528, 281, 382, 561, 567, 959, 3467, 13, 50514, 50514, 492, 528, 281, 652, 439, 4368, 6243, 807, 264, 2010, 1185, 11, 457, 291, 393, 380, 13, 50714, 50714, 400, 754, 498, 291, 727, 11, 1943, 380, 300, 437, 257, 20904, 447, 331, 307, 466, 30, 50964, 50964, 1743, 8650, 411, 3066, 80, 293, 2725, 2675, 11, 286, 519, 11, 293, 11506, 5714, 13, 51214, 51214, 865, 13, 509, 2464, 428, 3089, 293, 4682, 428, 3467, 294, 1270, 257, 636, 300, 309, 25019, 300, 428, 3089, 775, 2293, 437, 309, 437, 309, 307, 4140, 281, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.17086570079510027, "compression_ratio": 1.610878661087866, "no_caption_prob": 2.1782261683256365e-05}, {"id": 169, "seek": 106600, "start": 1078.0, "end": 1083.0, "text": " Like languages like Coq and Agda, I think, and Idris.", "tokens": [50364, 400, 286, 458, 321, 528, 281, 382, 561, 567, 959, 3467, 13, 50514, 50514, 492, 528, 281, 652, 439, 4368, 6243, 807, 264, 2010, 1185, 11, 457, 291, 393, 380, 13, 50714, 50714, 400, 754, 498, 291, 727, 11, 1943, 380, 300, 437, 257, 20904, 447, 331, 307, 466, 30, 50964, 50964, 1743, 8650, 411, 3066, 80, 293, 2725, 2675, 11, 286, 519, 11, 293, 11506, 5714, 13, 51214, 51214, 865, 13, 509, 2464, 428, 3089, 293, 4682, 428, 3467, 294, 1270, 257, 636, 300, 309, 25019, 300, 428, 3089, 775, 2293, 437, 309, 437, 309, 307, 4140, 281, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.17086570079510027, "compression_ratio": 1.610878661087866, "no_caption_prob": 2.1782261683256365e-05}, {"id": 170, "seek": 106600, "start": 1083.0, "end": 1092.0, "text": " Yeah. You write your code and specifically your types in such a way that it proves that your code does exactly what it what it is meant to.", "tokens": [50364, 400, 286, 458, 321, 528, 281, 382, 561, 567, 959, 3467, 13, 50514, 50514, 492, 528, 281, 652, 439, 4368, 6243, 807, 264, 2010, 1185, 11, 457, 291, 393, 380, 13, 50714, 50714, 400, 754, 498, 291, 727, 11, 1943, 380, 300, 437, 257, 20904, 447, 331, 307, 466, 30, 50964, 50964, 1743, 8650, 411, 3066, 80, 293, 2725, 2675, 11, 286, 519, 11, 293, 11506, 5714, 13, 51214, 51214, 865, 13, 509, 2464, 428, 3089, 293, 4682, 428, 3467, 294, 1270, 257, 636, 300, 309, 25019, 300, 428, 3089, 775, 2293, 437, 309, 437, 309, 307, 4140, 281, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.17086570079510027, "compression_ratio": 1.610878661087866, "no_caption_prob": 2.1782261683256365e-05}, {"id": 171, "seek": 109200, "start": 1092.0, "end": 1101.0, "text": " That is, follows some kind of specification through types, I think mostly and some implementations, but not necessarily through tests.", "tokens": [50364, 663, 307, 11, 10002, 512, 733, 295, 31256, 807, 3467, 11, 286, 519, 5240, 293, 512, 4445, 763, 11, 457, 406, 4725, 807, 6921, 13, 50814, 50814, 663, 848, 11, 286, 500, 380, 458, 577, 281, 589, 13, 407, 11, 558, 13, 50964, 50964, 286, 600, 2138, 1612, 1792, 11529, 82, 295, 341, 2010, 295, 551, 689, 689, 264, 3467, 366, 264, 8177, 411, 13, 51314, 51314, 400, 264, 1186, 300, 291, 362, 364, 7568, 712, 1461, 300, 8081, 2565, 300, 307, 307, 257, 8177, 11, 597, 307, 1238, 1238, 10343, 293, 4651, 1507, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.0948399052475438, "compression_ratio": 1.6535433070866141, "no_caption_prob": 6.013563688611612e-05}, {"id": 172, "seek": 109200, "start": 1101.0, "end": 1104.0, "text": " That said, I don't know how to work. So, right.", "tokens": [50364, 663, 307, 11, 10002, 512, 733, 295, 31256, 807, 3467, 11, 286, 519, 5240, 293, 512, 4445, 763, 11, 457, 406, 4725, 807, 6921, 13, 50814, 50814, 663, 848, 11, 286, 500, 380, 458, 577, 281, 589, 13, 407, 11, 558, 13, 50964, 50964, 286, 600, 2138, 1612, 1792, 11529, 82, 295, 341, 2010, 295, 551, 689, 689, 264, 3467, 366, 264, 8177, 411, 13, 51314, 51314, 400, 264, 1186, 300, 291, 362, 364, 7568, 712, 1461, 300, 8081, 2565, 300, 307, 307, 257, 8177, 11, 597, 307, 1238, 1238, 10343, 293, 4651, 1507, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.0948399052475438, "compression_ratio": 1.6535433070866141, "no_caption_prob": 6.013563688611612e-05}, {"id": 173, "seek": 109200, "start": 1104.0, "end": 1111.0, "text": " I've definitely seen walkthroughs of this type of thing where where the types are the proof like.", "tokens": [50364, 663, 307, 11, 10002, 512, 733, 295, 31256, 807, 3467, 11, 286, 519, 5240, 293, 512, 4445, 763, 11, 457, 406, 4725, 807, 6921, 13, 50814, 50814, 663, 848, 11, 286, 500, 380, 458, 577, 281, 589, 13, 407, 11, 558, 13, 50964, 50964, 286, 600, 2138, 1612, 1792, 11529, 82, 295, 341, 2010, 295, 551, 689, 689, 264, 3467, 366, 264, 8177, 411, 13, 51314, 51314, 400, 264, 1186, 300, 291, 362, 364, 7568, 712, 1461, 300, 8081, 2565, 300, 307, 307, 257, 8177, 11, 597, 307, 1238, 1238, 10343, 293, 4651, 1507, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.0948399052475438, "compression_ratio": 1.6535433070866141, "no_caption_prob": 6.013563688611612e-05}, {"id": 174, "seek": 109200, "start": 1111.0, "end": 1120.0, "text": " And the fact that you have an executable program that fulfills that is is a proof, which is pretty pretty fascinating and incredible stuff.", "tokens": [50364, 663, 307, 11, 10002, 512, 733, 295, 31256, 807, 3467, 11, 286, 519, 5240, 293, 512, 4445, 763, 11, 457, 406, 4725, 807, 6921, 13, 50814, 50814, 663, 848, 11, 286, 500, 380, 458, 577, 281, 589, 13, 407, 11, 558, 13, 50964, 50964, 286, 600, 2138, 1612, 1792, 11529, 82, 295, 341, 2010, 295, 551, 689, 689, 264, 3467, 366, 264, 8177, 411, 13, 51314, 51314, 400, 264, 1186, 300, 291, 362, 364, 7568, 712, 1461, 300, 8081, 2565, 300, 307, 307, 257, 8177, 11, 597, 307, 1238, 1238, 10343, 293, 4651, 1507, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.0948399052475438, "compression_ratio": 1.6535433070866141, "no_caption_prob": 6.013563688611612e-05}, {"id": 175, "seek": 112000, "start": 1120.0, "end": 1126.0, "text": " Yeah. In practice, you know, you want simple, easy to reason about types.", "tokens": [50364, 865, 13, 682, 3124, 11, 291, 458, 11, 291, 528, 2199, 11, 1858, 281, 1778, 466, 3467, 13, 50664, 50664, 400, 370, 291, 528, 264, 1151, 2290, 337, 264, 1691, 13, 3950, 3467, 366, 588, 1152, 281, 1401, 13, 50914, 50914, 400, 498, 291, 434, 1382, 370, 309, 3297, 286, 519, 309, 775, 5672, 322, 437, 291, 434, 1382, 281, 2316, 13, 51314, 51314, 400, 4317, 498, 291, 434, 884, 746, 300, 311, 516, 281, 312, 322, 257, 9692, 45767, 420, 746, 411, 300, 11, 291, 458, 11, 1338, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.06368727886930425, "compression_ratio": 1.7115384615384615, "no_caption_prob": 0.00017397636838722974}, {"id": 176, "seek": 112000, "start": 1126.0, "end": 1131.0, "text": " And so you want the best tool for the job. Those types are very hard to read.", "tokens": [50364, 865, 13, 682, 3124, 11, 291, 458, 11, 291, 528, 2199, 11, 1858, 281, 1778, 466, 3467, 13, 50664, 50664, 400, 370, 291, 528, 264, 1151, 2290, 337, 264, 1691, 13, 3950, 3467, 366, 588, 1152, 281, 1401, 13, 50914, 50914, 400, 498, 291, 434, 1382, 370, 309, 3297, 286, 519, 309, 775, 5672, 322, 437, 291, 434, 1382, 281, 2316, 13, 51314, 51314, 400, 4317, 498, 291, 434, 884, 746, 300, 311, 516, 281, 312, 322, 257, 9692, 45767, 420, 746, 411, 300, 11, 291, 458, 11, 1338, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.06368727886930425, "compression_ratio": 1.7115384615384615, "no_caption_prob": 0.00017397636838722974}, {"id": 177, "seek": 112000, "start": 1131.0, "end": 1139.0, "text": " And if you're trying so it certainly I think it does depend on what you're trying to model.", "tokens": [50364, 865, 13, 682, 3124, 11, 291, 458, 11, 291, 528, 2199, 11, 1858, 281, 1778, 466, 3467, 13, 50664, 50664, 400, 370, 291, 528, 264, 1151, 2290, 337, 264, 1691, 13, 3950, 3467, 366, 588, 1152, 281, 1401, 13, 50914, 50914, 400, 498, 291, 434, 1382, 370, 309, 3297, 286, 519, 309, 775, 5672, 322, 437, 291, 434, 1382, 281, 2316, 13, 51314, 51314, 400, 4317, 498, 291, 434, 884, 746, 300, 311, 516, 281, 312, 322, 257, 9692, 45767, 420, 746, 411, 300, 11, 291, 458, 11, 1338, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.06368727886930425, "compression_ratio": 1.7115384615384615, "no_caption_prob": 0.00017397636838722974}, {"id": 178, "seek": 112000, "start": 1139.0, "end": 1147.0, "text": " And perhaps if you're doing something that's going to be on a Mars rover or something like that, you know, yeah.", "tokens": [50364, 865, 13, 682, 3124, 11, 291, 458, 11, 291, 528, 2199, 11, 1858, 281, 1778, 466, 3467, 13, 50664, 50664, 400, 370, 291, 528, 264, 1151, 2290, 337, 264, 1691, 13, 3950, 3467, 366, 588, 1152, 281, 1401, 13, 50914, 50914, 400, 498, 291, 434, 1382, 370, 309, 3297, 286, 519, 309, 775, 5672, 322, 437, 291, 434, 1382, 281, 2316, 13, 51314, 51314, 400, 4317, 498, 291, 434, 884, 746, 300, 311, 516, 281, 312, 322, 257, 9692, 45767, 420, 746, 411, 300, 11, 291, 458, 11, 1338, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.06368727886930425, "compression_ratio": 1.7115384615384615, "no_caption_prob": 0.00017397636838722974}, {"id": 179, "seek": 114700, "start": 1147.0, "end": 1154.0, "text": " Perhaps there would be an appropriate place to to use one of these like proof proof tools.", "tokens": [50364, 10517, 456, 576, 312, 364, 6854, 1081, 281, 281, 764, 472, 295, 613, 411, 8177, 8177, 3873, 13, 50714, 50714, 400, 11, 291, 458, 11, 300, 300, 311, 869, 13, 583, 18349, 11, 411, 498, 291, 434, 3579, 257, 1216, 11, 550, 437, 775, 437, 311, 264, 2063, 5121, 295, 300, 30, 51214, 51214, 400, 286, 519, 257, 688, 295, 264, 565, 11, 411, 264, 264, 2063, 295, 3579, 257, 2010, 281, 9432, 760, 257, 1326, 3875, 18491, 466, 264, 28540, 721, 291, 434, 6260, 365, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.07216510667905703, "compression_ratio": 1.6431718061674008, "no_caption_prob": 9.026769839692861e-05}, {"id": 180, "seek": 114700, "start": 1154.0, "end": 1164.0, "text": " And, you know, that that's great. But oftentimes, like if you're writing a game, then what does what's the cost benefit of that?", "tokens": [50364, 10517, 456, 576, 312, 364, 6854, 1081, 281, 281, 764, 472, 295, 613, 411, 8177, 8177, 3873, 13, 50714, 50714, 400, 11, 291, 458, 11, 300, 300, 311, 869, 13, 583, 18349, 11, 411, 498, 291, 434, 3579, 257, 1216, 11, 550, 437, 775, 437, 311, 264, 2063, 5121, 295, 300, 30, 51214, 51214, 400, 286, 519, 257, 688, 295, 264, 565, 11, 411, 264, 264, 2063, 295, 3579, 257, 2010, 281, 9432, 760, 257, 1326, 3875, 18491, 466, 264, 28540, 721, 291, 434, 6260, 365, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.07216510667905703, "compression_ratio": 1.6431718061674008, "no_caption_prob": 9.026769839692861e-05}, {"id": 181, "seek": 114700, "start": 1164.0, "end": 1174.0, "text": " And I think a lot of the time, like the the cost of writing a type to narrow down a few basic constraints about the primitive things you're dealing with.", "tokens": [50364, 10517, 456, 576, 312, 364, 6854, 1081, 281, 281, 764, 472, 295, 613, 411, 8177, 8177, 3873, 13, 50714, 50714, 400, 11, 291, 458, 11, 300, 300, 311, 869, 13, 583, 18349, 11, 411, 498, 291, 434, 3579, 257, 1216, 11, 550, 437, 775, 437, 311, 264, 2063, 5121, 295, 300, 30, 51214, 51214, 400, 286, 519, 257, 688, 295, 264, 565, 11, 411, 264, 264, 2063, 295, 3579, 257, 2010, 281, 9432, 760, 257, 1326, 3875, 18491, 466, 264, 28540, 721, 291, 434, 6260, 365, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.07216510667905703, "compression_ratio": 1.6431718061674008, "no_caption_prob": 9.026769839692861e-05}, {"id": 182, "seek": 117400, "start": 1174.0, "end": 1183.0, "text": " Not primitive as in primitive language values, but the primitives of your domain to sort of clearly define the constraints of those core pieces.", "tokens": [50364, 1726, 28540, 382, 294, 28540, 2856, 4190, 11, 457, 264, 2886, 38970, 295, 428, 9274, 281, 1333, 295, 4448, 6964, 264, 18491, 295, 729, 4965, 3755, 13, 50814, 50814, 400, 550, 1419, 512, 6921, 300, 751, 466, 577, 729, 3755, 4648, 1985, 588, 731, 337, 257, 2063, 5121, 13, 51164, 51164, 509, 458, 11, 286, 519, 300, 300, 311, 437, 309, 1487, 760, 281, 412, 264, 917, 295, 264, 786, 307, 309, 311, 411, 498, 291, 393, 2464, 588, 2199, 3467, 293, 550, 291, 393, 2464, 588, 2199, 6921, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.05163192241749865, "compression_ratio": 1.7280334728033473, "no_caption_prob": 9.665784091339447e-06}, {"id": 183, "seek": 117400, "start": 1183.0, "end": 1190.0, "text": " And then having some tests that talk about how those pieces interact works very well for a cost benefit.", "tokens": [50364, 1726, 28540, 382, 294, 28540, 2856, 4190, 11, 457, 264, 2886, 38970, 295, 428, 9274, 281, 1333, 295, 4448, 6964, 264, 18491, 295, 729, 4965, 3755, 13, 50814, 50814, 400, 550, 1419, 512, 6921, 300, 751, 466, 577, 729, 3755, 4648, 1985, 588, 731, 337, 257, 2063, 5121, 13, 51164, 51164, 509, 458, 11, 286, 519, 300, 300, 311, 437, 309, 1487, 760, 281, 412, 264, 917, 295, 264, 786, 307, 309, 311, 411, 498, 291, 393, 2464, 588, 2199, 3467, 293, 550, 291, 393, 2464, 588, 2199, 6921, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.05163192241749865, "compression_ratio": 1.7280334728033473, "no_caption_prob": 9.665784091339447e-06}, {"id": 184, "seek": 117400, "start": 1190.0, "end": 1200.0, "text": " You know, I think that that's what it comes down to at the end of the day is it's like if you can write very simple types and then you can write very simple tests.", "tokens": [50364, 1726, 28540, 382, 294, 28540, 2856, 4190, 11, 457, 264, 2886, 38970, 295, 428, 9274, 281, 1333, 295, 4448, 6964, 264, 18491, 295, 729, 4965, 3755, 13, 50814, 50814, 400, 550, 1419, 512, 6921, 300, 751, 466, 577, 729, 3755, 4648, 1985, 588, 731, 337, 257, 2063, 5121, 13, 51164, 51164, 509, 458, 11, 286, 519, 300, 300, 311, 437, 309, 1487, 760, 281, 412, 264, 917, 295, 264, 786, 307, 309, 311, 411, 498, 291, 393, 2464, 588, 2199, 3467, 293, 550, 291, 393, 2464, 588, 2199, 6921, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.05163192241749865, "compression_ratio": 1.7280334728033473, "no_caption_prob": 9.665784091339447e-06}, {"id": 185, "seek": 120000, "start": 1200.0, "end": 1208.0, "text": " You don't have to write tests that exercise every possible type you could throw at it and that it fulfills these contracts.", "tokens": [50364, 509, 500, 380, 362, 281, 2464, 6921, 300, 5380, 633, 1944, 2010, 291, 727, 3507, 412, 309, 293, 300, 309, 8081, 2565, 613, 13952, 13, 50764, 50764, 400, 370, 436, 360, 641, 1691, 588, 731, 562, 291, 562, 291, 445, 764, 3467, 294, 257, 2199, 636, 11, 1242, 264, 1333, 295, 4688, 945, 411, 11, 291, 458, 11, 437, 307, 309, 30, 51364, 51364, 286, 519, 309, 311, 611, 1219, 264, 31189, 1353, 8665, 11, 264, 4688, 945, 4978, 11, 597, 307, 4688, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.09853936325420033, "compression_ratio": 1.515695067264574, "no_caption_prob": 3.8828082324471325e-05}, {"id": 186, "seek": 120000, "start": 1208.0, "end": 1220.0, "text": " And so they do their job very well when you when you just use types in a simple way, getting the sort of 80 20 like, you know, what is it?", "tokens": [50364, 509, 500, 380, 362, 281, 2464, 6921, 300, 5380, 633, 1944, 2010, 291, 727, 3507, 412, 309, 293, 300, 309, 8081, 2565, 613, 13952, 13, 50764, 50764, 400, 370, 436, 360, 641, 1691, 588, 731, 562, 291, 562, 291, 445, 764, 3467, 294, 257, 2199, 636, 11, 1242, 264, 1333, 295, 4688, 945, 411, 11, 291, 458, 11, 437, 307, 309, 30, 51364, 51364, 286, 519, 309, 311, 611, 1219, 264, 31189, 1353, 8665, 11, 264, 4688, 945, 4978, 11, 597, 307, 4688, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.09853936325420033, "compression_ratio": 1.515695067264574, "no_caption_prob": 3.8828082324471325e-05}, {"id": 187, "seek": 120000, "start": 1220.0, "end": 1225.0, "text": " I think it's also called the Pareto principle, the 80 20 rule, which is 80.", "tokens": [50364, 509, 500, 380, 362, 281, 2464, 6921, 300, 5380, 633, 1944, 2010, 291, 727, 3507, 412, 309, 293, 300, 309, 8081, 2565, 613, 13952, 13, 50764, 50764, 400, 370, 436, 360, 641, 1691, 588, 731, 562, 291, 562, 291, 445, 764, 3467, 294, 257, 2199, 636, 11, 1242, 264, 1333, 295, 4688, 945, 411, 11, 291, 458, 11, 437, 307, 309, 30, 51364, 51364, 286, 519, 309, 311, 611, 1219, 264, 31189, 1353, 8665, 11, 264, 4688, 945, 4978, 11, 597, 307, 4688, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.09853936325420033, "compression_ratio": 1.515695067264574, "no_caption_prob": 3.8828082324471325e-05}, {"id": 188, "seek": 122500, "start": 1225.0, "end": 1233.0, "text": " Yeah, yeah, you do the the 20 percent of the work that gives you 80 percent of the benefit because it's diminishing returns at a certain point.", "tokens": [50364, 865, 11, 1338, 11, 291, 360, 264, 264, 945, 3043, 295, 264, 589, 300, 2709, 291, 4688, 3043, 295, 264, 5121, 570, 309, 311, 15739, 3807, 11247, 412, 257, 1629, 935, 13, 50764, 50764, 400, 286, 519, 300, 311, 534, 264, 1389, 365, 365, 3467, 13, 400, 286, 519, 498, 291, 434, 498, 291, 434, 1566, 11, 1954, 11, 321, 500, 380, 643, 3467, 11, 321, 362, 6921, 13, 51164, 51164, 286, 519, 291, 611, 1333, 295, 483, 281, 281, 364, 4688, 945, 689, 291, 434, 1242, 15739, 3807, 11247, 337, 428, 6921, 562, 3467, 576, 312, 264, 1151, 2290, 337, 300, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.051155005660012506, "compression_ratio": 1.8138528138528138, "no_caption_prob": 7.483892113668844e-05}, {"id": 189, "seek": 122500, "start": 1233.0, "end": 1241.0, "text": " And I think that's really the case with with types. And I think if you're if you're saying, oh, we don't need types, we have tests.", "tokens": [50364, 865, 11, 1338, 11, 291, 360, 264, 264, 945, 3043, 295, 264, 589, 300, 2709, 291, 4688, 3043, 295, 264, 5121, 570, 309, 311, 15739, 3807, 11247, 412, 257, 1629, 935, 13, 50764, 50764, 400, 286, 519, 300, 311, 534, 264, 1389, 365, 365, 3467, 13, 400, 286, 519, 498, 291, 434, 498, 291, 434, 1566, 11, 1954, 11, 321, 500, 380, 643, 3467, 11, 321, 362, 6921, 13, 51164, 51164, 286, 519, 291, 611, 1333, 295, 483, 281, 281, 364, 4688, 945, 689, 291, 434, 1242, 15739, 3807, 11247, 337, 428, 6921, 562, 3467, 576, 312, 264, 1151, 2290, 337, 300, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.051155005660012506, "compression_ratio": 1.8138528138528138, "no_caption_prob": 7.483892113668844e-05}, {"id": 190, "seek": 122500, "start": 1241.0, "end": 1250.0, "text": " I think you also sort of get to to an 80 20 where you're getting diminishing returns for your tests when types would be the best tool for that.", "tokens": [50364, 865, 11, 1338, 11, 291, 360, 264, 264, 945, 3043, 295, 264, 589, 300, 2709, 291, 4688, 3043, 295, 264, 5121, 570, 309, 311, 15739, 3807, 11247, 412, 257, 1629, 935, 13, 50764, 50764, 400, 286, 519, 300, 311, 534, 264, 1389, 365, 365, 3467, 13, 400, 286, 519, 498, 291, 434, 498, 291, 434, 1566, 11, 1954, 11, 321, 500, 380, 643, 3467, 11, 321, 362, 6921, 13, 51164, 51164, 286, 519, 291, 611, 1333, 295, 483, 281, 281, 364, 4688, 945, 689, 291, 434, 1242, 15739, 3807, 11247, 337, 428, 6921, 562, 3467, 576, 312, 264, 1151, 2290, 337, 300, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.051155005660012506, "compression_ratio": 1.8138528138528138, "no_caption_prob": 7.483892113668844e-05}, {"id": 191, "seek": 125000, "start": 1250.0, "end": 1258.0, "text": " So in languages like Coch and Agda Idris, where you prove something through these types, the types are really hard to read.", "tokens": [50364, 407, 294, 8650, 411, 3066, 339, 293, 2725, 2675, 11506, 5714, 11, 689, 291, 7081, 746, 807, 613, 3467, 11, 264, 3467, 366, 534, 1152, 281, 1401, 13, 50764, 50764, 400, 286, 360, 2441, 11, 411, 11, 577, 360, 291, 1500, 300, 729, 3467, 366, 27221, 264, 558, 551, 382, 731, 30, 51114, 51114, 1779, 13, 1436, 498, 436, 434, 3997, 11, 550, 309, 311, 512, 1333, 295, 3089, 11, 558, 30, 400, 291, 528, 281, 1500, 3089, 13, 51514, 51514, 407, 577, 360, 291, 1500, 300, 30, 286, 478, 988, 436, 362, 512, 7512, 420, 3873, 337, 300, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.15838428644033578, "compression_ratio": 1.6652542372881356, "no_caption_prob": 5.173805675440235e-06}, {"id": 192, "seek": 125000, "start": 1258.0, "end": 1265.0, "text": " And I do wonder, like, how do you test that those types are proving the right thing as well?", "tokens": [50364, 407, 294, 8650, 411, 3066, 339, 293, 2725, 2675, 11506, 5714, 11, 689, 291, 7081, 746, 807, 613, 3467, 11, 264, 3467, 366, 534, 1152, 281, 1401, 13, 50764, 50764, 400, 286, 360, 2441, 11, 411, 11, 577, 360, 291, 1500, 300, 729, 3467, 366, 27221, 264, 558, 551, 382, 731, 30, 51114, 51114, 1779, 13, 1436, 498, 436, 434, 3997, 11, 550, 309, 311, 512, 1333, 295, 3089, 11, 558, 30, 400, 291, 528, 281, 1500, 3089, 13, 51514, 51514, 407, 577, 360, 291, 1500, 300, 30, 286, 478, 988, 436, 362, 512, 7512, 420, 3873, 337, 300, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.15838428644033578, "compression_ratio": 1.6652542372881356, "no_caption_prob": 5.173805675440235e-06}, {"id": 193, "seek": 125000, "start": 1265.0, "end": 1273.0, "text": " Right. Because if they're complex, then it's some sort of code, right? And you want to test code.", "tokens": [50364, 407, 294, 8650, 411, 3066, 339, 293, 2725, 2675, 11506, 5714, 11, 689, 291, 7081, 746, 807, 613, 3467, 11, 264, 3467, 366, 534, 1152, 281, 1401, 13, 50764, 50764, 400, 286, 360, 2441, 11, 411, 11, 577, 360, 291, 1500, 300, 729, 3467, 366, 27221, 264, 558, 551, 382, 731, 30, 51114, 51114, 1779, 13, 1436, 498, 436, 434, 3997, 11, 550, 309, 311, 512, 1333, 295, 3089, 11, 558, 30, 400, 291, 528, 281, 1500, 3089, 13, 51514, 51514, 407, 577, 360, 291, 1500, 300, 30, 286, 478, 988, 436, 362, 512, 7512, 420, 3873, 337, 300, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.15838428644033578, "compression_ratio": 1.6652542372881356, "no_caption_prob": 5.173805675440235e-06}, {"id": 194, "seek": 125000, "start": 1273.0, "end": 1278.0, "text": " So how do you test that? I'm sure they have some techniques or tools for that.", "tokens": [50364, 407, 294, 8650, 411, 3066, 339, 293, 2725, 2675, 11506, 5714, 11, 689, 291, 7081, 746, 807, 613, 3467, 11, 264, 3467, 366, 534, 1152, 281, 1401, 13, 50764, 50764, 400, 286, 360, 2441, 11, 411, 11, 577, 360, 291, 1500, 300, 729, 3467, 366, 27221, 264, 558, 551, 382, 731, 30, 51114, 51114, 1779, 13, 1436, 498, 436, 434, 3997, 11, 550, 309, 311, 512, 1333, 295, 3089, 11, 558, 30, 400, 291, 528, 281, 1500, 3089, 13, 51514, 51514, 407, 577, 360, 291, 1500, 300, 30, 286, 478, 988, 436, 362, 512, 7512, 420, 3873, 337, 300, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.15838428644033578, "compression_ratio": 1.6652542372881356, "no_caption_prob": 5.173805675440235e-06}, {"id": 195, "seek": 127800, "start": 1278.0, "end": 1289.0, "text": " But, yeah, yes, right. And I think it's it's easy to get into the headspace of trying to like like, well, if it doesn't give me a 100 percent guarantee or how do I prove this?", "tokens": [50364, 583, 11, 1338, 11, 2086, 11, 558, 13, 400, 286, 519, 309, 311, 309, 311, 1858, 281, 483, 666, 264, 1378, 24824, 295, 1382, 281, 411, 411, 11, 731, 11, 498, 309, 1177, 380, 976, 385, 257, 2319, 3043, 10815, 420, 577, 360, 286, 7081, 341, 30, 50914, 50914, 583, 457, 286, 519, 1242, 8496, 11, 291, 584, 11, 411, 11, 2140, 11, 577, 1858, 307, 309, 281, 1778, 466, 264, 3006, 1287, 295, 341, 1185, 30, 51414, 51414], "temperature": 0.0, "avg_logprob": -0.12330880577181592, "compression_ratio": 1.50253807106599, "no_caption_prob": 0.0005701963673345745}, {"id": 196, "seek": 127800, "start": 1289.0, "end": 1299.0, "text": " But but I think getting practical, you say, like, listen, how easy is it to reason about the correctness of this system?", "tokens": [50364, 583, 11, 1338, 11, 2086, 11, 558, 13, 400, 286, 519, 309, 311, 309, 311, 1858, 281, 483, 666, 264, 1378, 24824, 295, 1382, 281, 411, 411, 11, 731, 11, 498, 309, 1177, 380, 976, 385, 257, 2319, 3043, 10815, 420, 577, 360, 286, 7081, 341, 30, 50914, 50914, 583, 457, 286, 519, 1242, 8496, 11, 291, 584, 11, 411, 11, 2140, 11, 577, 1858, 307, 309, 281, 1778, 466, 264, 3006, 1287, 295, 341, 1185, 30, 51414, 51414], "temperature": 0.0, "avg_logprob": -0.12330880577181592, "compression_ratio": 1.50253807106599, "no_caption_prob": 0.0005701963673345745}, {"id": 197, "seek": 129900, "start": 1299.0, "end": 1308.0, "text": " How easy is it to spot a failure? How easy is it to fit the behavior of the system into my head with these pieces?", "tokens": [50364, 1012, 1858, 307, 309, 281, 4008, 257, 7763, 30, 1012, 1858, 307, 309, 281, 3318, 264, 5223, 295, 264, 1185, 666, 452, 1378, 365, 613, 3755, 30, 50814, 50814, 400, 498, 291, 362, 512, 588, 2199, 3467, 11, 300, 311, 257, 869, 2290, 337, 21577, 466, 428, 1185, 13, 51114, 51114, 400, 300, 311, 411, 257, 2290, 300, 534, 6653, 291, 589, 41956, 365, 365, 14916, 512, 3089, 293, 25113, 264, 18491, 382, 436, 1319, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.012529738247394562, "compression_ratio": 1.6350710900473933, "no_caption_prob": 3.763443237403408e-05}, {"id": 198, "seek": 129900, "start": 1308.0, "end": 1314.0, "text": " And if you have some very simple types, that's a great tool for reasoning about your system.", "tokens": [50364, 1012, 1858, 307, 309, 281, 4008, 257, 7763, 30, 1012, 1858, 307, 309, 281, 3318, 264, 5223, 295, 264, 1185, 666, 452, 1378, 365, 613, 3755, 30, 50814, 50814, 400, 498, 291, 362, 512, 588, 2199, 3467, 11, 300, 311, 257, 869, 2290, 337, 21577, 466, 428, 1185, 13, 51114, 51114, 400, 300, 311, 411, 257, 2290, 300, 534, 6653, 291, 589, 41956, 365, 365, 14916, 512, 3089, 293, 25113, 264, 18491, 382, 436, 1319, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.012529738247394562, "compression_ratio": 1.6350710900473933, "no_caption_prob": 3.763443237403408e-05}, {"id": 199, "seek": 129900, "start": 1314.0, "end": 1323.0, "text": " And that's like a tool that really lets you work confidently with with maintaining some code and updating the constraints as they change.", "tokens": [50364, 1012, 1858, 307, 309, 281, 4008, 257, 7763, 30, 1012, 1858, 307, 309, 281, 3318, 264, 5223, 295, 264, 1185, 666, 452, 1378, 365, 613, 3755, 30, 50814, 50814, 400, 498, 291, 362, 512, 588, 2199, 3467, 11, 300, 311, 257, 869, 2290, 337, 21577, 466, 428, 1185, 13, 51114, 51114, 400, 300, 311, 411, 257, 2290, 300, 534, 6653, 291, 589, 41956, 365, 365, 14916, 512, 3089, 293, 25113, 264, 18491, 382, 436, 1319, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.012529738247394562, "compression_ratio": 1.6350710900473933, "no_caption_prob": 3.763443237403408e-05}, {"id": 200, "seek": 132300, "start": 1323.0, "end": 1335.0, "text": " Tests are very good for looking at what is the current behavior. And if something goes wrong or if you're adding some new behavior, you you write some tests to exercise that and make sure it does what you expect.", "tokens": [50364, 314, 4409, 366, 588, 665, 337, 1237, 412, 437, 307, 264, 2190, 5223, 13, 400, 498, 746, 1709, 2085, 420, 498, 291, 434, 5127, 512, 777, 5223, 11, 291, 291, 2464, 512, 6921, 281, 5380, 300, 293, 652, 988, 309, 775, 437, 291, 2066, 13, 50964, 50964, 400, 370, 286, 519, 309, 311, 309, 311, 1228, 264, 558, 2290, 337, 264, 558, 1691, 13, 2743, 11, 286, 519, 300, 370, 767, 286, 9091, 321, 815, 362, 1293, 6337, 341, 341, 751, 294, 13081, 337, 309, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.06932966974046495, "compression_ratio": 1.6710526315789473, "no_caption_prob": 8.219340816140175e-05}, {"id": 201, "seek": 132300, "start": 1335.0, "end": 1346.0, "text": " And so I think it's it's using the right tool for the right job. Also, I think that so actually I suspect we may have both watched this this talk in preparation for it.", "tokens": [50364, 314, 4409, 366, 588, 665, 337, 1237, 412, 437, 307, 264, 2190, 5223, 13, 400, 498, 746, 1709, 2085, 420, 498, 291, 434, 5127, 512, 777, 5223, 11, 291, 291, 2464, 512, 6921, 281, 5380, 300, 293, 652, 988, 309, 775, 437, 291, 2066, 13, 50964, 50964, 400, 370, 286, 519, 309, 311, 309, 311, 1228, 264, 558, 2290, 337, 264, 558, 1691, 13, 2743, 11, 286, 519, 300, 370, 767, 286, 9091, 321, 815, 362, 1293, 6337, 341, 341, 751, 294, 13081, 337, 309, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.06932966974046495, "compression_ratio": 1.6710526315789473, "no_caption_prob": 8.219340816140175e-05}, {"id": 202, "seek": 134600, "start": 1346.0, "end": 1353.0, "text": " Types versus tests. There was one at a scholar conference that I watched. What is the name of the talk?", "tokens": [50364, 5569, 5190, 5717, 6921, 13, 821, 390, 472, 412, 257, 17912, 7586, 300, 286, 6337, 13, 708, 307, 264, 1315, 295, 264, 751, 30, 50714, 50714, 1436, 286, 478, 406, 988, 13, 407, 286, 6337, 341, 751, 1219, 5569, 5190, 5717, 314, 4409, 11, 364, 13581, 4635, 538, 20431, 441, 2220, 260, 13, 51114, 51114, 865, 11, 385, 886, 13, 2264, 11, 1627, 13, 865, 11, 286, 632, 257, 2633, 300, 321, 1293, 6337, 264, 472, 13, 467, 390, 588, 1880, 13, 51414, 51414], "temperature": 0.0, "avg_logprob": -0.15092539232830668, "compression_ratio": 1.5048543689320388, "no_caption_prob": 5.224744381848723e-05}, {"id": 203, "seek": 134600, "start": 1353.0, "end": 1361.0, "text": " Because I'm not sure. So I watched this talk called Types versus Tests, an epic battle by Amanda Loucher.", "tokens": [50364, 5569, 5190, 5717, 6921, 13, 821, 390, 472, 412, 257, 17912, 7586, 300, 286, 6337, 13, 708, 307, 264, 1315, 295, 264, 751, 30, 50714, 50714, 1436, 286, 478, 406, 988, 13, 407, 286, 6337, 341, 751, 1219, 5569, 5190, 5717, 314, 4409, 11, 364, 13581, 4635, 538, 20431, 441, 2220, 260, 13, 51114, 51114, 865, 11, 385, 886, 13, 2264, 11, 1627, 13, 865, 11, 286, 632, 257, 2633, 300, 321, 1293, 6337, 264, 472, 13, 467, 390, 588, 1880, 13, 51414, 51414], "temperature": 0.0, "avg_logprob": -0.15092539232830668, "compression_ratio": 1.5048543689320388, "no_caption_prob": 5.224744381848723e-05}, {"id": 204, "seek": 134600, "start": 1361.0, "end": 1367.0, "text": " Yeah, me too. OK, cool. Yeah, I had a feeling that we both watched the one. It was very interesting.", "tokens": [50364, 5569, 5190, 5717, 6921, 13, 821, 390, 472, 412, 257, 17912, 7586, 300, 286, 6337, 13, 708, 307, 264, 1315, 295, 264, 751, 30, 50714, 50714, 1436, 286, 478, 406, 988, 13, 407, 286, 6337, 341, 751, 1219, 5569, 5190, 5717, 314, 4409, 11, 364, 13581, 4635, 538, 20431, 441, 2220, 260, 13, 51114, 51114, 865, 11, 385, 886, 13, 2264, 11, 1627, 13, 865, 11, 286, 632, 257, 2633, 300, 321, 1293, 6337, 264, 472, 13, 467, 390, 588, 1880, 13, 51414, 51414], "temperature": 0.0, "avg_logprob": -0.15092539232830668, "compression_ratio": 1.5048543689320388, "no_caption_prob": 5.224744381848723e-05}, {"id": 205, "seek": 136700, "start": 1367.0, "end": 1376.0, "text": " Yeah, I wanted to watch a talk that you probably wouldn't watch. And we watched the same one. That one was very good. Yeah.", "tokens": [50364, 865, 11, 286, 1415, 281, 1159, 257, 751, 300, 291, 1391, 2759, 380, 1159, 13, 400, 321, 6337, 264, 912, 472, 13, 663, 472, 390, 588, 665, 13, 865, 13, 50814, 50814, 3013, 6100, 385, 257, 857, 570, 309, 390, 490, 1580, 567, 307, 490, 300, 314, 20818, 1002, 11, 300, 30072, 1002, 412, 257, 9028, 45852, 7586, 920, 13, 51214, 51214, 814, 434, 411, 11, 7020, 11, 750, 775, 257, 665, 1691, 5549, 729, 732, 732, 13401, 1214, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.18680994851248606, "compression_ratio": 1.4977168949771689, "no_caption_prob": 5.3066611144458875e-05}, {"id": 206, "seek": 136700, "start": 1376.0, "end": 1384.0, "text": " Which surprised me a bit because it was from someone who is from that TDD world, that agile world at a SCADA conference still.", "tokens": [50364, 865, 11, 286, 1415, 281, 1159, 257, 751, 300, 291, 1391, 2759, 380, 1159, 13, 400, 321, 6337, 264, 912, 472, 13, 663, 472, 390, 588, 665, 13, 865, 13, 50814, 50814, 3013, 6100, 385, 257, 857, 570, 309, 390, 490, 1580, 567, 307, 490, 300, 314, 20818, 1002, 11, 300, 30072, 1002, 412, 257, 9028, 45852, 7586, 920, 13, 51214, 51214, 814, 434, 411, 11, 7020, 11, 750, 775, 257, 665, 1691, 5549, 729, 732, 732, 13401, 1214, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.18680994851248606, "compression_ratio": 1.4977168949771689, "no_caption_prob": 5.3066611144458875e-05}, {"id": 207, "seek": 136700, "start": 1384.0, "end": 1390.0, "text": " They're like, huh, she does a good job joining those two two worlds together.", "tokens": [50364, 865, 11, 286, 1415, 281, 1159, 257, 751, 300, 291, 1391, 2759, 380, 1159, 13, 400, 321, 6337, 264, 912, 472, 13, 663, 472, 390, 588, 665, 13, 865, 13, 50814, 50814, 3013, 6100, 385, 257, 857, 570, 309, 390, 490, 1580, 567, 307, 490, 300, 314, 20818, 1002, 11, 300, 30072, 1002, 412, 257, 9028, 45852, 7586, 920, 13, 51214, 51214, 814, 434, 411, 11, 7020, 11, 750, 775, 257, 665, 1691, 5549, 729, 732, 732, 13401, 1214, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.18680994851248606, "compression_ratio": 1.4977168949771689, "no_caption_prob": 5.3066611144458875e-05}, {"id": 208, "seek": 139000, "start": 1390.0, "end": 1397.0, "text": " I thought so, too. Somewhat contradicting what I said previously, where I said that those worlds didn't mingle.", "tokens": [50364, 286, 1194, 370, 11, 886, 13, 2188, 5479, 15858, 21490, 437, 286, 848, 8046, 11, 689, 286, 848, 300, 729, 13401, 994, 380, 275, 26209, 13, 50714, 50714, 1042, 11, 436, 360, 275, 26209, 11, 457, 406, 382, 709, 382, 286, 576, 411, 552, 281, 312, 13, 1779, 13, 50914, 50914, 7021, 13, 3013, 597, 286, 519, 307, 983, 309, 9371, 484, 382, 257, 534, 665, 751, 11, 886, 11, 570, 309, 1177, 380, 483, 7152, 300, 2049, 13, 51264, 51264, 11419, 561, 366, 294, 472, 1901, 420, 264, 661, 13, 400, 7015, 11, 291, 458, 11, 257, 688, 295, 561, 567, 366, 588, 5178, 322, 1417, 466, 3467, 500, 380, 751, 466, 8448, 10817, 27140, 9156, 293, 1500, 9555, 3250, 382, 709, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.08623144030570984, "compression_ratio": 1.6498422712933754, "no_caption_prob": 0.00016601178504060954}, {"id": 209, "seek": 139000, "start": 1397.0, "end": 1401.0, "text": " Well, they do mingle, but not as much as I would like them to be. Right.", "tokens": [50364, 286, 1194, 370, 11, 886, 13, 2188, 5479, 15858, 21490, 437, 286, 848, 8046, 11, 689, 286, 848, 300, 729, 13401, 994, 380, 275, 26209, 13, 50714, 50714, 1042, 11, 436, 360, 275, 26209, 11, 457, 406, 382, 709, 382, 286, 576, 411, 552, 281, 312, 13, 1779, 13, 50914, 50914, 7021, 13, 3013, 597, 286, 519, 307, 983, 309, 9371, 484, 382, 257, 534, 665, 751, 11, 886, 11, 570, 309, 1177, 380, 483, 7152, 300, 2049, 13, 51264, 51264, 11419, 561, 366, 294, 472, 1901, 420, 264, 661, 13, 400, 7015, 11, 291, 458, 11, 257, 688, 295, 561, 567, 366, 588, 5178, 322, 1417, 466, 3467, 500, 380, 751, 466, 8448, 10817, 27140, 9156, 293, 1500, 9555, 3250, 382, 709, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.08623144030570984, "compression_ratio": 1.6498422712933754, "no_caption_prob": 0.00016601178504060954}, {"id": 210, "seek": 139000, "start": 1401.0, "end": 1408.0, "text": " Absolutely. Which which I think is why it stood out as a really good talk, too, because it doesn't get discussed that often.", "tokens": [50364, 286, 1194, 370, 11, 886, 13, 2188, 5479, 15858, 21490, 437, 286, 848, 8046, 11, 689, 286, 848, 300, 729, 13401, 994, 380, 275, 26209, 13, 50714, 50714, 1042, 11, 436, 360, 275, 26209, 11, 457, 406, 382, 709, 382, 286, 576, 411, 552, 281, 312, 13, 1779, 13, 50914, 50914, 7021, 13, 3013, 597, 286, 519, 307, 983, 309, 9371, 484, 382, 257, 534, 665, 751, 11, 886, 11, 570, 309, 1177, 380, 483, 7152, 300, 2049, 13, 51264, 51264, 11419, 561, 366, 294, 472, 1901, 420, 264, 661, 13, 400, 7015, 11, 291, 458, 11, 257, 688, 295, 561, 567, 366, 588, 5178, 322, 1417, 466, 3467, 500, 380, 751, 466, 8448, 10817, 27140, 9156, 293, 1500, 9555, 3250, 382, 709, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.08623144030570984, "compression_ratio": 1.6498422712933754, "no_caption_prob": 0.00016601178504060954}, {"id": 211, "seek": 139000, "start": 1408.0, "end": 1419.0, "text": " Usually people are in one space or the other. And unfortunately, you know, a lot of people who are very focused on talking about types don't talk about craftsmanship principles and test driven development as much.", "tokens": [50364, 286, 1194, 370, 11, 886, 13, 2188, 5479, 15858, 21490, 437, 286, 848, 8046, 11, 689, 286, 848, 300, 729, 13401, 994, 380, 275, 26209, 13, 50714, 50714, 1042, 11, 436, 360, 275, 26209, 11, 457, 406, 382, 709, 382, 286, 576, 411, 552, 281, 312, 13, 1779, 13, 50914, 50914, 7021, 13, 3013, 597, 286, 519, 307, 983, 309, 9371, 484, 382, 257, 534, 665, 751, 11, 886, 11, 570, 309, 1177, 380, 483, 7152, 300, 2049, 13, 51264, 51264, 11419, 561, 366, 294, 472, 1901, 420, 264, 661, 13, 400, 7015, 11, 291, 458, 11, 257, 688, 295, 561, 567, 366, 588, 5178, 322, 1417, 466, 3467, 500, 380, 751, 466, 8448, 10817, 27140, 9156, 293, 1500, 9555, 3250, 382, 709, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.08623144030570984, "compression_ratio": 1.6498422712933754, "no_caption_prob": 0.00016601178504060954}, {"id": 212, "seek": 141900, "start": 1419.0, "end": 1422.0, "text": " And vice versa. But they really pair very nicely together.", "tokens": [50364, 400, 11964, 25650, 13, 583, 436, 534, 6119, 588, 9594, 1214, 13, 50514, 50514, 286, 362, 281, 9796, 11, 411, 5699, 286, 1568, 466, 8448, 10817, 27140, 17720, 11, 286, 1009, 1568, 300, 294, 264, 646, 295, 452, 1575, 11, 309, 1355, 314, 20818, 11, 309, 1355, 30072, 7525, 11, 5870, 4439, 11, 1895, 578, 3662, 13, 51264, 51264, 583, 309, 1177, 380, 914, 3467, 412, 439, 13, 407, 13, 1779, 13, 1144, 291, 362, 264, 912, 2633, 382, 731, 30, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.13783341576071345, "compression_ratio": 1.4928909952606635, "no_caption_prob": 0.0001609191094757989}, {"id": 213, "seek": 141900, "start": 1422.0, "end": 1437.0, "text": " I have to admit, like whenever I hear about craftsmanship coding, I always hear that in the back of my mind, it means TDD, it means agile practices, tiny steps, refactoring.", "tokens": [50364, 400, 11964, 25650, 13, 583, 436, 534, 6119, 588, 9594, 1214, 13, 50514, 50514, 286, 362, 281, 9796, 11, 411, 5699, 286, 1568, 466, 8448, 10817, 27140, 17720, 11, 286, 1009, 1568, 300, 294, 264, 646, 295, 452, 1575, 11, 309, 1355, 314, 20818, 11, 309, 1355, 30072, 7525, 11, 5870, 4439, 11, 1895, 578, 3662, 13, 51264, 51264, 583, 309, 1177, 380, 914, 3467, 412, 439, 13, 407, 13, 1779, 13, 1144, 291, 362, 264, 912, 2633, 382, 731, 30, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.13783341576071345, "compression_ratio": 1.4928909952606635, "no_caption_prob": 0.0001609191094757989}, {"id": 214, "seek": 141900, "start": 1437.0, "end": 1442.0, "text": " But it doesn't mean types at all. So. Right. Do you have the same feeling as well?", "tokens": [50364, 400, 11964, 25650, 13, 583, 436, 534, 6119, 588, 9594, 1214, 13, 50514, 50514, 286, 362, 281, 9796, 11, 411, 5699, 286, 1568, 466, 8448, 10817, 27140, 17720, 11, 286, 1009, 1568, 300, 294, 264, 646, 295, 452, 1575, 11, 309, 1355, 314, 20818, 11, 309, 1355, 30072, 7525, 11, 5870, 4439, 11, 1895, 578, 3662, 13, 51264, 51264, 583, 309, 1177, 380, 914, 3467, 412, 439, 13, 407, 13, 1779, 13, 1144, 291, 362, 264, 912, 2633, 382, 731, 30, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.13783341576071345, "compression_ratio": 1.4928909952606635, "no_caption_prob": 0.0001609191094757989}, {"id": 215, "seek": 144200, "start": 1442.0, "end": 1454.0, "text": " Yeah, I would say I associate it with types not necessarily being a core piece of that, unfortunately. I mean, in the most common practice, it's yeah, I agree.", "tokens": [50364, 865, 11, 286, 576, 584, 286, 14644, 309, 365, 3467, 406, 4725, 885, 257, 4965, 2522, 295, 300, 11, 7015, 13, 286, 914, 11, 294, 264, 881, 2689, 3124, 11, 309, 311, 1338, 11, 286, 3986, 13, 50964, 50964, 407, 472, 551, 300, 1669, 385, 519, 307, 611, 411, 291, 393, 360, 314, 20818, 294, 633, 2856, 13, 1018, 2321, 382, 291, 362, 257, 1500, 8388, 11, 291, 393, 360, 309, 294, 604, 2856, 13, 51414, 51414, 509, 1062, 406, 362, 4707, 2361, 4997, 13, 509, 1062, 406, 362, 7339, 4358, 4997, 411, 917, 281, 917, 4997, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.11312266892077875, "compression_ratio": 1.6827309236947792, "no_caption_prob": 4.26464612246491e-05}, {"id": 216, "seek": 144200, "start": 1454.0, "end": 1463.0, "text": " So one thing that makes me think is also like you can do TDD in every language. As soon as you have a test framework, you can do it in any language.", "tokens": [50364, 865, 11, 286, 576, 584, 286, 14644, 309, 365, 3467, 406, 4725, 885, 257, 4965, 2522, 295, 300, 11, 7015, 13, 286, 914, 11, 294, 264, 881, 2689, 3124, 11, 309, 311, 1338, 11, 286, 3986, 13, 50964, 50964, 407, 472, 551, 300, 1669, 385, 519, 307, 611, 411, 291, 393, 360, 314, 20818, 294, 633, 2856, 13, 1018, 2321, 382, 291, 362, 257, 1500, 8388, 11, 291, 393, 360, 309, 294, 604, 2856, 13, 51414, 51414, 509, 1062, 406, 362, 4707, 2361, 4997, 13, 509, 1062, 406, 362, 7339, 4358, 4997, 411, 917, 281, 917, 4997, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.11312266892077875, "compression_ratio": 1.6827309236947792, "no_caption_prob": 4.26464612246491e-05}, {"id": 217, "seek": 144200, "start": 1463.0, "end": 1470.0, "text": " You might not have property based testing. You might not have advanced levels testing like end to end testing.", "tokens": [50364, 865, 11, 286, 576, 584, 286, 14644, 309, 365, 3467, 406, 4725, 885, 257, 4965, 2522, 295, 300, 11, 7015, 13, 286, 914, 11, 294, 264, 881, 2689, 3124, 11, 309, 311, 1338, 11, 286, 3986, 13, 50964, 50964, 407, 472, 551, 300, 1669, 385, 519, 307, 611, 411, 291, 393, 360, 314, 20818, 294, 633, 2856, 13, 1018, 2321, 382, 291, 362, 257, 1500, 8388, 11, 291, 393, 360, 309, 294, 604, 2856, 13, 51414, 51414, 509, 1062, 406, 362, 4707, 2361, 4997, 13, 509, 1062, 406, 362, 7339, 4358, 4997, 411, 917, 281, 917, 4997, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.11312266892077875, "compression_ratio": 1.6827309236947792, "no_caption_prob": 4.26464612246491e-05}, {"id": 218, "seek": 147000, "start": 1470.0, "end": 1493.0, "text": " But types, you can only do that in some languages. Right. Yes. So, yeah, it makes sense that there's a lot of a lot more writing about TDD than about types, especially since most popular languages are not all that big into defining your own custom types and having opaque types and stuff like that.", "tokens": [50364, 583, 3467, 11, 291, 393, 787, 360, 300, 294, 512, 8650, 13, 1779, 13, 1079, 13, 407, 11, 1338, 11, 309, 1669, 2020, 300, 456, 311, 257, 688, 295, 257, 688, 544, 3579, 466, 314, 20818, 813, 466, 3467, 11, 2318, 1670, 881, 3743, 8650, 366, 406, 439, 300, 955, 666, 17827, 428, 1065, 2375, 3467, 293, 1419, 42687, 3467, 293, 1507, 411, 300, 13, 51514, 51514, 407, 286, 519, 309, 1669, 257, 688, 295, 2020, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.11401718045458381, "compression_ratio": 1.6213592233009708, "no_caption_prob": 2.7967967980657704e-05}, {"id": 219, "seek": 147000, "start": 1493.0, "end": 1495.0, "text": " So I think it makes a lot of sense.", "tokens": [50364, 583, 3467, 11, 291, 393, 787, 360, 300, 294, 512, 8650, 13, 1779, 13, 1079, 13, 407, 11, 1338, 11, 309, 1669, 2020, 300, 456, 311, 257, 688, 295, 257, 688, 544, 3579, 466, 314, 20818, 813, 466, 3467, 11, 2318, 1670, 881, 3743, 8650, 366, 406, 439, 300, 955, 666, 17827, 428, 1065, 2375, 3467, 293, 1419, 42687, 3467, 293, 1507, 411, 300, 13, 51514, 51514, 407, 286, 519, 309, 1669, 257, 688, 295, 2020, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.11401718045458381, "compression_ratio": 1.6213592233009708, "no_caption_prob": 2.7967967980657704e-05}, {"id": 220, "seek": 149500, "start": 1495.0, "end": 1505.0, "text": " And a lot of them. I mean, I learned a ton about test driven development from Kent Beck's excellent book, Test Driven Development by Example.", "tokens": [50364, 400, 257, 688, 295, 552, 13, 286, 914, 11, 286, 3264, 257, 2952, 466, 1500, 9555, 3250, 490, 15843, 19184, 311, 7103, 1446, 11, 9279, 19150, 553, 15041, 538, 24755, 781, 13, 50864, 50864, 467, 311, 257, 588, 1481, 11, 2199, 707, 1446, 13, 400, 490, 437, 286, 9901, 11, 309, 1143, 10745, 337, 439, 264, 5110, 13, 51114, 51114, 400, 11, 291, 458, 11, 264, 551, 307, 11, 411, 562, 291, 434, 1228, 10745, 337, 264, 5110, 11, 291, 434, 406, 1228, 309, 382, 257, 2290, 337, 2902, 291, 32567, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.08784847458203633, "compression_ratio": 1.6371681415929205, "no_caption_prob": 0.0007911247084848583}, {"id": 221, "seek": 149500, "start": 1505.0, "end": 1510.0, "text": " It's a very nice, simple little book. And from what I recall, it used Java for all the examples.", "tokens": [50364, 400, 257, 688, 295, 552, 13, 286, 914, 11, 286, 3264, 257, 2952, 466, 1500, 9555, 3250, 490, 15843, 19184, 311, 7103, 1446, 11, 9279, 19150, 553, 15041, 538, 24755, 781, 13, 50864, 50864, 467, 311, 257, 588, 1481, 11, 2199, 707, 1446, 13, 400, 490, 437, 286, 9901, 11, 309, 1143, 10745, 337, 439, 264, 5110, 13, 51114, 51114, 400, 11, 291, 458, 11, 264, 551, 307, 11, 411, 562, 291, 434, 1228, 10745, 337, 264, 5110, 11, 291, 434, 406, 1228, 309, 382, 257, 2290, 337, 2902, 291, 32567, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.08784847458203633, "compression_ratio": 1.6371681415929205, "no_caption_prob": 0.0007911247084848583}, {"id": 222, "seek": 149500, "start": 1510.0, "end": 1520.0, "text": " And, you know, the thing is, like when you're using Java for the examples, you're not using it as a tool for giving you guarantees.", "tokens": [50364, 400, 257, 688, 295, 552, 13, 286, 914, 11, 286, 3264, 257, 2952, 466, 1500, 9555, 3250, 490, 15843, 19184, 311, 7103, 1446, 11, 9279, 19150, 553, 15041, 538, 24755, 781, 13, 50864, 50864, 467, 311, 257, 588, 1481, 11, 2199, 707, 1446, 13, 400, 490, 437, 286, 9901, 11, 309, 1143, 10745, 337, 439, 264, 5110, 13, 51114, 51114, 400, 11, 291, 458, 11, 264, 551, 307, 11, 411, 562, 291, 434, 1228, 10745, 337, 264, 5110, 11, 291, 434, 406, 1228, 309, 382, 257, 2290, 337, 2902, 291, 32567, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.08784847458203633, "compression_ratio": 1.6371681415929205, "no_caption_prob": 0.0007911247084848583}, {"id": 223, "seek": 152000, "start": 1520.0, "end": 1528.0, "text": " Right. Because you have you still have casting and all these possibilities to to circumvent the type system.", "tokens": [50364, 1779, 13, 1436, 291, 362, 291, 920, 362, 17301, 293, 439, 613, 12178, 281, 281, 7125, 2475, 264, 2010, 1185, 13, 50764, 50764, 407, 309, 311, 406, 534, 7447, 294, 264, 912, 636, 689, 291, 434, 1075, 281, 10687, 322, 309, 13, 50964, 50964, 400, 611, 309, 1177, 380, 362, 264, 4122, 300, 321, 959, 370, 709, 11, 411, 512, 3467, 11, 597, 436, 366, 1348, 13, 51314, 51314, 1079, 13, 1779, 13, 583, 294, 264, 565, 562, 309, 390, 3720, 11, 300, 300, 3297, 2067, 380, 257, 4111, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.08634734661021132, "compression_ratio": 1.6359649122807018, "no_caption_prob": 0.00018810121400747448}, {"id": 224, "seek": 152000, "start": 1528.0, "end": 1532.0, "text": " So it's not really operating in the same way where you're able to rely on it.", "tokens": [50364, 1779, 13, 1436, 291, 362, 291, 920, 362, 17301, 293, 439, 613, 12178, 281, 281, 7125, 2475, 264, 2010, 1185, 13, 50764, 50764, 407, 309, 311, 406, 534, 7447, 294, 264, 912, 636, 689, 291, 434, 1075, 281, 10687, 322, 309, 13, 50964, 50964, 400, 611, 309, 1177, 380, 362, 264, 4122, 300, 321, 959, 370, 709, 11, 411, 512, 3467, 11, 597, 436, 366, 1348, 13, 51314, 51314, 1079, 13, 1779, 13, 583, 294, 264, 565, 562, 309, 390, 3720, 11, 300, 300, 3297, 2067, 380, 257, 4111, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.08634734661021132, "compression_ratio": 1.6359649122807018, "no_caption_prob": 0.00018810121400747448}, {"id": 225, "seek": 152000, "start": 1532.0, "end": 1539.0, "text": " And also it doesn't have the features that we love so much, like some types, which they are coming.", "tokens": [50364, 1779, 13, 1436, 291, 362, 291, 920, 362, 17301, 293, 439, 613, 12178, 281, 281, 7125, 2475, 264, 2010, 1185, 13, 50764, 50764, 407, 309, 311, 406, 534, 7447, 294, 264, 912, 636, 689, 291, 434, 1075, 281, 10687, 322, 309, 13, 50964, 50964, 400, 611, 309, 1177, 380, 362, 264, 4122, 300, 321, 959, 370, 709, 11, 411, 512, 3467, 11, 597, 436, 366, 1348, 13, 51314, 51314, 1079, 13, 1779, 13, 583, 294, 264, 565, 562, 309, 390, 3720, 11, 300, 300, 3297, 2067, 380, 257, 4111, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.08634734661021132, "compression_ratio": 1.6359649122807018, "no_caption_prob": 0.00018810121400747448}, {"id": 226, "seek": 152000, "start": 1539.0, "end": 1545.0, "text": " Yes. Right. But in the time when it was written, that that certainly wasn't a feature.", "tokens": [50364, 1779, 13, 1436, 291, 362, 291, 920, 362, 17301, 293, 439, 613, 12178, 281, 281, 7125, 2475, 264, 2010, 1185, 13, 50764, 50764, 407, 309, 311, 406, 534, 7447, 294, 264, 912, 636, 689, 291, 434, 1075, 281, 10687, 322, 309, 13, 50964, 50964, 400, 611, 309, 1177, 380, 362, 264, 4122, 300, 321, 959, 370, 709, 11, 411, 512, 3467, 11, 597, 436, 366, 1348, 13, 51314, 51314, 1079, 13, 1779, 13, 583, 294, 264, 565, 562, 309, 390, 3720, 11, 300, 300, 3297, 2067, 380, 257, 4111, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.08634734661021132, "compression_ratio": 1.6359649122807018, "no_caption_prob": 0.00018810121400747448}, {"id": 227, "seek": 154500, "start": 1545.0, "end": 1554.0, "text": " And it certainly wasn't the idiomatic approach to solving problems that would have been used in a book like Test Driven Development by Example.", "tokens": [50364, 400, 309, 3297, 2067, 380, 264, 18014, 13143, 3109, 281, 12606, 2740, 300, 576, 362, 668, 1143, 294, 257, 1446, 411, 9279, 19150, 553, 15041, 538, 24755, 781, 13, 50814, 50814, 407, 472, 551, 300, 341, 300, 341, 3467, 5717, 6921, 751, 11, 286, 2762, 6721, 13, 51114, 51114, 467, 630, 257, 588, 665, 1691, 10322, 257, 688, 295, 411, 257, 688, 295, 264, 4965, 721, 300, 286, 1415, 281, 2045, 3564, 294, 527, 5017, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.05964338779449463, "compression_ratio": 1.509090909090909, "no_caption_prob": 1.9524541130522266e-05}, {"id": 228, "seek": 154500, "start": 1554.0, "end": 1560.0, "text": " So one thing that this that this types versus tests talk, I felt missed.", "tokens": [50364, 400, 309, 3297, 2067, 380, 264, 18014, 13143, 3109, 281, 12606, 2740, 300, 576, 362, 668, 1143, 294, 257, 1446, 411, 9279, 19150, 553, 15041, 538, 24755, 781, 13, 50814, 50814, 407, 472, 551, 300, 341, 300, 341, 3467, 5717, 6921, 751, 11, 286, 2762, 6721, 13, 51114, 51114, 467, 630, 257, 588, 665, 1691, 10322, 257, 688, 295, 411, 257, 688, 295, 264, 4965, 721, 300, 286, 1415, 281, 2045, 3564, 294, 527, 5017, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.05964338779449463, "compression_ratio": 1.509090909090909, "no_caption_prob": 1.9524541130522266e-05}, {"id": 229, "seek": 154500, "start": 1560.0, "end": 1567.0, "text": " It did a very good job covering a lot of like a lot of the core things that I wanted to hit upon in our discussion.", "tokens": [50364, 400, 309, 3297, 2067, 380, 264, 18014, 13143, 3109, 281, 12606, 2740, 300, 576, 362, 668, 1143, 294, 257, 1446, 411, 9279, 19150, 553, 15041, 538, 24755, 781, 13, 50814, 50814, 407, 472, 551, 300, 341, 300, 341, 3467, 5717, 6921, 751, 11, 286, 2762, 6721, 13, 51114, 51114, 467, 630, 257, 588, 665, 1691, 10322, 257, 688, 295, 411, 257, 688, 295, 264, 4965, 721, 300, 286, 1415, 281, 2045, 3564, 294, 527, 5017, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.05964338779449463, "compression_ratio": 1.509090909090909, "no_caption_prob": 1.9524541130522266e-05}, {"id": 230, "seek": 156700, "start": 1567.0, "end": 1576.0, "text": " But one of the things that it didn't talk about that I think is very important is how types and tests fit together and work in tandem,", "tokens": [50364, 583, 472, 295, 264, 721, 300, 309, 994, 380, 751, 466, 300, 286, 519, 307, 588, 1021, 307, 577, 3467, 293, 6921, 3318, 1214, 293, 589, 294, 48120, 11, 50814, 50814, 597, 307, 527, 2954, 4829, 11, 597, 498, 291, 434, 2433, 2699, 76, 17296, 363, 18459, 11, 291, 393, 352, 2286, 293, 3278, 766, 300, 3732, 13, 51264, 51264, 422, 4306, 1077, 3467, 13, 286, 390, 516, 281, 352, 337, 2699, 76, 19954, 13, 286, 2731, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.09047149448859983, "compression_ratio": 1.504950495049505, "no_caption_prob": 6.708394357701764e-05}, {"id": 231, "seek": 156700, "start": 1576.0, "end": 1585.0, "text": " which is our favorite topic, which if you're playing Elm Radio Bingo, you can go ahead and cross off that square.", "tokens": [50364, 583, 472, 295, 264, 721, 300, 309, 994, 380, 751, 466, 300, 286, 519, 307, 588, 1021, 307, 577, 3467, 293, 6921, 3318, 1214, 293, 589, 294, 48120, 11, 50814, 50814, 597, 307, 527, 2954, 4829, 11, 597, 498, 291, 434, 2433, 2699, 76, 17296, 363, 18459, 11, 291, 393, 352, 2286, 293, 3278, 766, 300, 3732, 13, 51264, 51264, 422, 4306, 1077, 3467, 13, 286, 390, 516, 281, 352, 337, 2699, 76, 19954, 13, 286, 2731, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.09047149448859983, "compression_ratio": 1.504950495049505, "no_caption_prob": 6.708394357701764e-05}, {"id": 232, "seek": 156700, "start": 1585.0, "end": 1592.0, "text": " Opaque types. I was going to go for Elm Review. I lost.", "tokens": [50364, 583, 472, 295, 264, 721, 300, 309, 994, 380, 751, 466, 300, 286, 519, 307, 588, 1021, 307, 577, 3467, 293, 6921, 3318, 1214, 293, 589, 294, 48120, 11, 50814, 50814, 597, 307, 527, 2954, 4829, 11, 597, 498, 291, 434, 2433, 2699, 76, 17296, 363, 18459, 11, 291, 393, 352, 2286, 293, 3278, 766, 300, 3732, 13, 51264, 51264, 422, 4306, 1077, 3467, 13, 286, 390, 516, 281, 352, 337, 2699, 76, 19954, 13, 286, 2731, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.09047149448859983, "compression_ratio": 1.504950495049505, "no_caption_prob": 6.708394357701764e-05}, {"id": 233, "seek": 159200, "start": 1592.0, "end": 1597.0, "text": " I'd put that on our Elm Review Bingo card as well. It's a solid, solid choice.", "tokens": [50364, 286, 1116, 829, 300, 322, 527, 2699, 76, 19954, 363, 18459, 2920, 382, 731, 13, 467, 311, 257, 5100, 11, 5100, 3922, 13, 50614, 50614, 407, 437, 286, 914, 538, 538, 613, 732, 721, 1364, 1214, 307, 286, 519, 300, 718, 311, 584, 291, 2464, 257, 4985, 1500, 337, 257, 2445, 293, 11, 291, 458, 11, 286, 500, 380, 458, 13, 51164, 51164, 286, 914, 11, 291, 458, 11, 472, 295, 452, 352, 281, 42687, 2010, 5110, 11, 291, 362, 257, 2445, 300, 13834, 264, 40943, 295, 257, 30351, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.09473876750215571, "compression_ratio": 1.5570776255707763, "no_caption_prob": 0.00015594942669849843}, {"id": 234, "seek": 159200, "start": 1597.0, "end": 1608.0, "text": " So what I mean by by these two things working together is I think that let's say you write a unit test for a function and, you know, I don't know.", "tokens": [50364, 286, 1116, 829, 300, 322, 527, 2699, 76, 19954, 363, 18459, 2920, 382, 731, 13, 467, 311, 257, 5100, 11, 5100, 3922, 13, 50614, 50614, 407, 437, 286, 914, 538, 538, 613, 732, 721, 1364, 1214, 307, 286, 519, 300, 718, 311, 584, 291, 2464, 257, 4985, 1500, 337, 257, 2445, 293, 11, 291, 458, 11, 286, 500, 380, 458, 13, 51164, 51164, 286, 914, 11, 291, 458, 11, 472, 295, 452, 352, 281, 42687, 2010, 5110, 11, 291, 362, 257, 2445, 300, 13834, 264, 40943, 295, 257, 30351, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.09473876750215571, "compression_ratio": 1.5570776255707763, "no_caption_prob": 0.00015594942669849843}, {"id": 235, "seek": 159200, "start": 1608.0, "end": 1617.0, "text": " I mean, you know, one of my go to opaque type examples, you have a function that checks the validity of a username.", "tokens": [50364, 286, 1116, 829, 300, 322, 527, 2699, 76, 19954, 363, 18459, 2920, 382, 731, 13, 467, 311, 257, 5100, 11, 5100, 3922, 13, 50614, 50614, 407, 437, 286, 914, 538, 538, 613, 732, 721, 1364, 1214, 307, 286, 519, 300, 718, 311, 584, 291, 2464, 257, 4985, 1500, 337, 257, 2445, 293, 11, 291, 458, 11, 286, 500, 380, 458, 13, 51164, 51164, 286, 914, 11, 291, 458, 11, 472, 295, 452, 352, 281, 42687, 2010, 5110, 11, 291, 362, 257, 2445, 300, 13834, 264, 40943, 295, 257, 30351, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.09473876750215571, "compression_ratio": 1.5570776255707763, "no_caption_prob": 0.00015594942669849843}, {"id": 236, "seek": 161700, "start": 1617.0, "end": 1625.0, "text": " So now you have, you know, is valid username returns a bool. And, OK, you've used test driven development for that.", "tokens": [50364, 407, 586, 291, 362, 11, 291, 458, 11, 307, 7363, 30351, 11247, 257, 748, 401, 13, 400, 11, 2264, 11, 291, 600, 1143, 1500, 9555, 3250, 337, 300, 13, 50764, 50764, 400, 309, 311, 4498, 8246, 3089, 11, 558, 30, 467, 311, 4498, 8246, 3089, 300, 2516, 257, 6798, 293, 2709, 291, 257, 748, 4812, 282, 13, 51114, 51114, 1042, 11, 291, 362, 257, 2445, 420, 257, 3170, 300, 1619, 341, 30351, 307, 7363, 13, 51414, 51414], "temperature": 0.0, "avg_logprob": -0.15242446223391762, "compression_ratio": 1.576086956521739, "no_caption_prob": 5.307256287778728e-05}, {"id": 237, "seek": 161700, "start": 1625.0, "end": 1632.0, "text": " And it's fully tested code, right? It's fully tested code that takes a string and gives you a boolean.", "tokens": [50364, 407, 586, 291, 362, 11, 291, 458, 11, 307, 7363, 30351, 11247, 257, 748, 401, 13, 400, 11, 2264, 11, 291, 600, 1143, 1500, 9555, 3250, 337, 300, 13, 50764, 50764, 400, 309, 311, 4498, 8246, 3089, 11, 558, 30, 467, 311, 4498, 8246, 3089, 300, 2516, 257, 6798, 293, 2709, 291, 257, 748, 4812, 282, 13, 51114, 51114, 1042, 11, 291, 362, 257, 2445, 420, 257, 3170, 300, 1619, 341, 30351, 307, 7363, 13, 51414, 51414], "temperature": 0.0, "avg_logprob": -0.15242446223391762, "compression_ratio": 1.576086956521739, "no_caption_prob": 5.307256287778728e-05}, {"id": 238, "seek": 161700, "start": 1632.0, "end": 1638.0, "text": " Well, you have a function or a method that says this username is valid.", "tokens": [50364, 407, 586, 291, 362, 11, 291, 458, 11, 307, 7363, 30351, 11247, 257, 748, 401, 13, 400, 11, 2264, 11, 291, 600, 1143, 1500, 9555, 3250, 337, 300, 13, 50764, 50764, 400, 309, 311, 4498, 8246, 3089, 11, 558, 30, 467, 311, 4498, 8246, 3089, 300, 2516, 257, 6798, 293, 2709, 291, 257, 748, 4812, 282, 13, 51114, 51114, 1042, 11, 291, 362, 257, 2445, 420, 257, 3170, 300, 1619, 341, 30351, 307, 7363, 13, 51414, 51414], "temperature": 0.0, "avg_logprob": -0.15242446223391762, "compression_ratio": 1.576086956521739, "no_caption_prob": 5.307256287778728e-05}, {"id": 239, "seek": 163800, "start": 1638.0, "end": 1647.0, "text": " Right. Yep. And it's fully tested, 100 percent done through TDD. But is it used appropriately everywhere in the code base?", "tokens": [50364, 1779, 13, 7010, 13, 400, 309, 311, 4498, 8246, 11, 2319, 3043, 1096, 807, 314, 20818, 13, 583, 307, 309, 1143, 23505, 5315, 294, 264, 3089, 3096, 30, 50814, 50814, 2048, 307, 633, 6798, 300, 775, 4908, 2906, 257, 30351, 41117, 300, 2445, 281, 281, 652, 988, 309, 13834, 300, 748, 401, 30, 51214, 51214, 2720, 1164, 11, 321, 434, 321, 366, 665, 17656, 433, 11, 558, 30, 492, 603, 1128, 2870, 281, 360, 300, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.1406869888305664, "compression_ratio": 1.4403669724770642, "no_caption_prob": 8.092208008747548e-05}, {"id": 240, "seek": 163800, "start": 1647.0, "end": 1655.0, "text": " Every is every string that does truly represent a username invoke that function to to make sure it checks that bool?", "tokens": [50364, 1779, 13, 7010, 13, 400, 309, 311, 4498, 8246, 11, 2319, 3043, 1096, 807, 314, 20818, 13, 583, 307, 309, 1143, 23505, 5315, 294, 264, 3089, 3096, 30, 50814, 50814, 2048, 307, 633, 6798, 300, 775, 4908, 2906, 257, 30351, 41117, 300, 2445, 281, 281, 652, 988, 309, 13834, 300, 748, 401, 30, 51214, 51214, 2720, 1164, 11, 321, 434, 321, 366, 665, 17656, 433, 11, 558, 30, 492, 603, 1128, 2870, 281, 360, 300, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.1406869888305664, "compression_ratio": 1.4403669724770642, "no_caption_prob": 8.092208008747548e-05}, {"id": 241, "seek": 163800, "start": 1655.0, "end": 1660.0, "text": " Of course, we're we are good coders, right? We'll never forget to do that.", "tokens": [50364, 1779, 13, 7010, 13, 400, 309, 311, 4498, 8246, 11, 2319, 3043, 1096, 807, 314, 20818, 13, 583, 307, 309, 1143, 23505, 5315, 294, 264, 3089, 3096, 30, 50814, 50814, 2048, 307, 633, 6798, 300, 775, 4908, 2906, 257, 30351, 41117, 300, 2445, 281, 281, 652, 988, 309, 13834, 300, 748, 401, 30, 51214, 51214, 2720, 1164, 11, 321, 434, 321, 366, 665, 17656, 433, 11, 558, 30, 492, 603, 1128, 2870, 281, 360, 300, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.1406869888305664, "compression_ratio": 1.4403669724770642, "no_caption_prob": 8.092208008747548e-05}, {"id": 242, "seek": 166000, "start": 1660.0, "end": 1679.0, "text": " But to me, this is so, so core to how I think about craftsmanship principles is being able to sort of narrow down my thinking about something into a nice, neat, well tested concept where the knowledge lives in one place.", "tokens": [50364, 583, 281, 385, 11, 341, 307, 370, 11, 370, 4965, 281, 577, 286, 519, 466, 8448, 10817, 27140, 9156, 307, 885, 1075, 281, 1333, 295, 9432, 760, 452, 1953, 466, 746, 666, 257, 1481, 11, 10654, 11, 731, 8246, 3410, 689, 264, 3601, 2909, 294, 472, 1081, 13, 51314, 51314, 407, 286, 478, 1075, 281, 406, 787, 13859, 300, 9952, 666, 257, 2167, 1081, 11, 597, 11, 291, 458, 11, 500, 380, 7149, 1803, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.06814232355431665, "compression_ratio": 1.555023923444976, "no_caption_prob": 4.425450697453925e-06}, {"id": 243, "seek": 166000, "start": 1679.0, "end": 1686.0, "text": " So I'm able to not only organize that logic into a single place, which, you know, don't repeat yourself.", "tokens": [50364, 583, 281, 385, 11, 341, 307, 370, 11, 370, 4965, 281, 577, 286, 519, 466, 8448, 10817, 27140, 9156, 307, 885, 1075, 281, 1333, 295, 9432, 760, 452, 1953, 466, 746, 666, 257, 1481, 11, 10654, 11, 731, 8246, 3410, 689, 264, 3601, 2909, 294, 472, 1081, 13, 51314, 51314, 407, 286, 478, 1075, 281, 406, 787, 13859, 300, 9952, 666, 257, 2167, 1081, 11, 597, 11, 291, 458, 11, 500, 380, 7149, 1803, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.06814232355431665, "compression_ratio": 1.555023923444976, "no_caption_prob": 4.425450697453925e-06}, {"id": 244, "seek": 168600, "start": 1686.0, "end": 1695.0, "text": " It's about knowledge. It's not about not repeating code. It's about not repeating knowledge. There's a single authoritative place where any piece of knowledge lives.", "tokens": [50364, 467, 311, 466, 3601, 13, 467, 311, 406, 466, 406, 18617, 3089, 13, 467, 311, 466, 406, 18617, 3601, 13, 821, 311, 257, 2167, 3793, 14275, 1081, 689, 604, 2522, 295, 3601, 2909, 13, 50814, 50814, 1042, 11, 294, 257, 1888, 2010, 307, 257, 869, 636, 281, 2906, 300, 2167, 3793, 14275, 1081, 570, 11, 731, 11, 291, 393, 380, 1884, 309, 2380, 295, 300, 551, 13, 51214, 51214, 407, 309, 307, 3793, 14275, 570, 309, 311, 264, 787, 636, 291, 393, 1884, 257, 30351, 13, 400, 370, 291, 764, 300, 30351, 2010, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.07357865450333576, "compression_ratio": 1.9036697247706422, "no_caption_prob": 4.860402441408951e-06}, {"id": 245, "seek": 168600, "start": 1695.0, "end": 1703.0, "text": " Well, in a pick type is a great way to represent that single authoritative place because, well, you can't create it outside of that thing.", "tokens": [50364, 467, 311, 466, 3601, 13, 467, 311, 406, 466, 406, 18617, 3089, 13, 467, 311, 466, 406, 18617, 3601, 13, 821, 311, 257, 2167, 3793, 14275, 1081, 689, 604, 2522, 295, 3601, 2909, 13, 50814, 50814, 1042, 11, 294, 257, 1888, 2010, 307, 257, 869, 636, 281, 2906, 300, 2167, 3793, 14275, 1081, 570, 11, 731, 11, 291, 393, 380, 1884, 309, 2380, 295, 300, 551, 13, 51214, 51214, 407, 309, 307, 3793, 14275, 570, 309, 311, 264, 787, 636, 291, 393, 1884, 257, 30351, 13, 400, 370, 291, 764, 300, 30351, 2010, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.07357865450333576, "compression_ratio": 1.9036697247706422, "no_caption_prob": 4.860402441408951e-06}, {"id": 246, "seek": 168600, "start": 1703.0, "end": 1709.0, "text": " So it is authoritative because it's the only way you can create a username. And so you use that username type.", "tokens": [50364, 467, 311, 466, 3601, 13, 467, 311, 406, 466, 406, 18617, 3089, 13, 467, 311, 466, 406, 18617, 3601, 13, 821, 311, 257, 2167, 3793, 14275, 1081, 689, 604, 2522, 295, 3601, 2909, 13, 50814, 50814, 1042, 11, 294, 257, 1888, 2010, 307, 257, 869, 636, 281, 2906, 300, 2167, 3793, 14275, 1081, 570, 11, 731, 11, 291, 393, 380, 1884, 309, 2380, 295, 300, 551, 13, 51214, 51214, 407, 309, 307, 3793, 14275, 570, 309, 311, 264, 787, 636, 291, 393, 1884, 257, 30351, 13, 400, 370, 291, 764, 300, 30351, 2010, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.07357865450333576, "compression_ratio": 1.9036697247706422, "no_caption_prob": 4.860402441408951e-06}, {"id": 247, "seek": 170900, "start": 1709.0, "end": 1719.0, "text": " And, you know, sure, you could still pass strings somewhere, but it gives you more confidence that you're using that well tested unit in the appropriate places.", "tokens": [50364, 400, 11, 291, 458, 11, 988, 11, 291, 727, 920, 1320, 13985, 4079, 11, 457, 309, 2709, 291, 544, 6687, 300, 291, 434, 1228, 300, 731, 8246, 4985, 294, 264, 6854, 3190, 13, 50864, 50864, 407, 281, 385, 11, 3467, 293, 6921, 589, 588, 731, 1214, 13, 400, 294, 341, 3467, 5717, 1500, 751, 11, 436, 645, 733, 295, 10850, 341, 294, 264, 751, 293, 257, 707, 857, 294, 264, 1249, 5, 32, 382, 731, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.033434757590293886, "compression_ratio": 1.6176470588235294, "no_caption_prob": 7.966671546455473e-05}, {"id": 248, "seek": 170900, "start": 1719.0, "end": 1731.0, "text": " So to me, types and tests work very well together. And in this types versus test talk, they were kind of discussing this in the talk and a little bit in the Q&A as well.", "tokens": [50364, 400, 11, 291, 458, 11, 988, 11, 291, 727, 920, 1320, 13985, 4079, 11, 457, 309, 2709, 291, 544, 6687, 300, 291, 434, 1228, 300, 731, 8246, 4985, 294, 264, 6854, 3190, 13, 50864, 50864, 407, 281, 385, 11, 3467, 293, 6921, 589, 588, 731, 1214, 13, 400, 294, 341, 3467, 5717, 1500, 751, 11, 436, 645, 733, 295, 10850, 341, 294, 264, 751, 293, 257, 707, 857, 294, 264, 1249, 5, 32, 382, 731, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.033434757590293886, "compression_ratio": 1.6176470588235294, "no_caption_prob": 7.966671546455473e-05}, {"id": 249, "seek": 173100, "start": 1731.0, "end": 1739.0, "text": " They were talking about, you know, how do you like, you know, that you can you can make impossible states impossible through your type system.", "tokens": [50364, 814, 645, 1417, 466, 11, 291, 458, 11, 577, 360, 291, 411, 11, 291, 458, 11, 300, 291, 393, 291, 393, 652, 6243, 4368, 6243, 807, 428, 2010, 1185, 13, 50764, 50764, 583, 1629, 721, 291, 393, 380, 2906, 300, 294, 428, 2010, 1185, 13, 583, 550, 11, 411, 291, 11, 291, 362, 341, 42687, 2010, 13, 51114, 51114, 509, 1500, 300, 42687, 2010, 13, 400, 586, 300, 2709, 291, 544, 32567, 13, 407, 436, 589, 1214, 11, 291, 458, 13, 51414, 51414], "temperature": 0.0, "avg_logprob": -0.11478595733642578, "compression_ratio": 1.77, "no_caption_prob": 0.00013549390132538974}, {"id": 250, "seek": 173100, "start": 1739.0, "end": 1746.0, "text": " But certain things you can't represent that in your type system. But then, like you, you have this opaque type.", "tokens": [50364, 814, 645, 1417, 466, 11, 291, 458, 11, 577, 360, 291, 411, 11, 291, 458, 11, 300, 291, 393, 291, 393, 652, 6243, 4368, 6243, 807, 428, 2010, 1185, 13, 50764, 50764, 583, 1629, 721, 291, 393, 380, 2906, 300, 294, 428, 2010, 1185, 13, 583, 550, 11, 411, 291, 11, 291, 362, 341, 42687, 2010, 13, 51114, 51114, 509, 1500, 300, 42687, 2010, 13, 400, 586, 300, 2709, 291, 544, 32567, 13, 407, 436, 589, 1214, 11, 291, 458, 13, 51414, 51414], "temperature": 0.0, "avg_logprob": -0.11478595733642578, "compression_ratio": 1.77, "no_caption_prob": 0.00013549390132538974}, {"id": 251, "seek": 173100, "start": 1746.0, "end": 1752.0, "text": " You test that opaque type. And now that gives you more guarantees. So they work together, you know.", "tokens": [50364, 814, 645, 1417, 466, 11, 291, 458, 11, 577, 360, 291, 411, 11, 291, 458, 11, 300, 291, 393, 291, 393, 652, 6243, 4368, 6243, 807, 428, 2010, 1185, 13, 50764, 50764, 583, 1629, 721, 291, 393, 380, 2906, 300, 294, 428, 2010, 1185, 13, 583, 550, 11, 411, 291, 11, 291, 362, 341, 42687, 2010, 13, 51114, 51114, 509, 1500, 300, 42687, 2010, 13, 400, 586, 300, 2709, 291, 544, 32567, 13, 407, 436, 589, 1214, 11, 291, 458, 13, 51414, 51414], "temperature": 0.0, "avg_logprob": -0.11478595733642578, "compression_ratio": 1.77, "no_caption_prob": 0.00013549390132538974}, {"id": 252, "seek": 175200, "start": 1752.0, "end": 1764.0, "text": " So we do need more formal write ups about these processes as you as you hinted at. I really I think I think you're spot on with that, that we need some type.", "tokens": [50364, 407, 321, 360, 643, 544, 9860, 2464, 15497, 466, 613, 7555, 382, 291, 382, 291, 12075, 292, 412, 13, 286, 534, 286, 519, 286, 519, 291, 434, 4008, 322, 365, 300, 11, 300, 321, 643, 512, 2010, 13, 50964, 50964, 708, 390, 264, 1315, 295, 264, 8273, 19184, 311, 1446, 30, 9279, 9555, 3250, 538, 1365, 13, 1779, 13, 51264, 51264, 2264, 11, 731, 11, 2010, 9555, 20862, 538, 1365, 13, 663, 311, 437, 321, 643, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.20814165656949268, "compression_ratio": 1.5816326530612246, "no_caption_prob": 8.614122634753585e-05}, {"id": 253, "seek": 175200, "start": 1764.0, "end": 1770.0, "text": " What was the name of the Ken Beck's book? Test driven development by example. Right.", "tokens": [50364, 407, 321, 360, 643, 544, 9860, 2464, 15497, 466, 613, 7555, 382, 291, 382, 291, 12075, 292, 412, 13, 286, 534, 286, 519, 286, 519, 291, 434, 4008, 322, 365, 300, 11, 300, 321, 643, 512, 2010, 13, 50964, 50964, 708, 390, 264, 1315, 295, 264, 8273, 19184, 311, 1446, 30, 9279, 9555, 3250, 538, 1365, 13, 1779, 13, 51264, 51264, 2264, 11, 731, 11, 2010, 9555, 20862, 538, 1365, 13, 663, 311, 437, 321, 643, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.20814165656949268, "compression_ratio": 1.5816326530612246, "no_caption_prob": 8.614122634753585e-05}, {"id": 254, "seek": 175200, "start": 1770.0, "end": 1774.0, "text": " OK, well, type driven developments by example. That's what we need.", "tokens": [50364, 407, 321, 360, 643, 544, 9860, 2464, 15497, 466, 613, 7555, 382, 291, 382, 291, 12075, 292, 412, 13, 286, 534, 286, 519, 286, 519, 291, 434, 4008, 322, 365, 300, 11, 300, 321, 643, 512, 2010, 13, 50964, 50964, 708, 390, 264, 1315, 295, 264, 8273, 19184, 311, 1446, 30, 9279, 9555, 3250, 538, 1365, 13, 1779, 13, 51264, 51264, 2264, 11, 731, 11, 2010, 9555, 20862, 538, 1365, 13, 663, 311, 437, 321, 643, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.20814165656949268, "compression_ratio": 1.5816326530612246, "no_caption_prob": 8.614122634753585e-05}, {"id": 255, "seek": 177400, "start": 1774.0, "end": 1783.0, "text": " Absolutely. Or, you know, test driven development aided by test, test driven development aided by types by example.", "tokens": [50364, 7021, 13, 1610, 11, 291, 458, 11, 1500, 9555, 3250, 257, 2112, 538, 1500, 11, 1500, 9555, 3250, 257, 2112, 538, 3467, 538, 1365, 13, 50814, 50814, 2704, 11, 291, 458, 13, 876, 11, 572, 11, 572, 11, 572, 11, 572, 13, 823, 309, 2544, 411, 3467, 366, 1570, 665, 813, 6921, 13, 51114, 51114, 1743, 11, 808, 322, 13, 1743, 11, 6921, 366, 406, 1101, 813, 3467, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.1714802572171982, "compression_ratio": 1.7181208053691275, "no_caption_prob": 5.3073203162057325e-05}, {"id": 256, "seek": 177400, "start": 1783.0, "end": 1789.0, "text": " Maybe, you know. Oh, no, no, no, no. Now it seems like types are less good than tests.", "tokens": [50364, 7021, 13, 1610, 11, 291, 458, 11, 1500, 9555, 3250, 257, 2112, 538, 1500, 11, 1500, 9555, 3250, 257, 2112, 538, 3467, 538, 1365, 13, 50814, 50814, 2704, 11, 291, 458, 13, 876, 11, 572, 11, 572, 11, 572, 11, 572, 13, 823, 309, 2544, 411, 3467, 366, 1570, 665, 813, 6921, 13, 51114, 51114, 1743, 11, 808, 322, 13, 1743, 11, 6921, 366, 406, 1101, 813, 3467, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.1714802572171982, "compression_ratio": 1.7181208053691275, "no_caption_prob": 5.3073203162057325e-05}, {"id": 257, "seek": 177400, "start": 1789.0, "end": 1797.0, "text": " Like, come on. Like, tests are not better than types.", "tokens": [50364, 7021, 13, 1610, 11, 291, 458, 11, 1500, 9555, 3250, 257, 2112, 538, 1500, 11, 1500, 9555, 3250, 257, 2112, 538, 3467, 538, 1365, 13, 50814, 50814, 2704, 11, 291, 458, 13, 876, 11, 572, 11, 572, 11, 572, 11, 572, 13, 823, 309, 2544, 411, 3467, 366, 1570, 665, 813, 6921, 13, 51114, 51114, 1743, 11, 808, 322, 13, 1743, 11, 6921, 366, 406, 1101, 813, 3467, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.1714802572171982, "compression_ratio": 1.7181208053691275, "no_caption_prob": 5.3073203162057325e-05}, {"id": 258, "seek": 179700, "start": 1797.0, "end": 1808.0, "text": " So I think it's important to understand, like, when are types the good the good abstraction and when are tests the right tool?", "tokens": [50364, 407, 286, 519, 309, 311, 1021, 281, 1223, 11, 411, 11, 562, 366, 3467, 264, 665, 264, 665, 37765, 293, 562, 366, 6921, 264, 558, 2290, 30, 50914, 50914, 407, 264, 636, 286, 3928, 281, 536, 13, 407, 1310, 700, 718, 311, 751, 466, 2673, 562, 561, 584, 11, 731, 11, 291, 500, 380, 643, 13, 51264, 51264, 1042, 11, 5699, 561, 584, 300, 291, 500, 380, 643, 6921, 11, 437, 436, 914, 307, 300, 291, 500, 380, 643, 281, 2464, 382, 867, 6921, 562, 291, 362, 2010, 562, 291, 362, 3467, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.09222073899101965, "compression_ratio": 1.8246445497630333, "no_caption_prob": 7.14102789061144e-05}, {"id": 259, "seek": 179700, "start": 1808.0, "end": 1815.0, "text": " So the way I tend to see. So maybe first let's talk about usually when people say, well, you don't need.", "tokens": [50364, 407, 286, 519, 309, 311, 1021, 281, 1223, 11, 411, 11, 562, 366, 3467, 264, 665, 264, 665, 37765, 293, 562, 366, 6921, 264, 558, 2290, 30, 50914, 50914, 407, 264, 636, 286, 3928, 281, 536, 13, 407, 1310, 700, 718, 311, 751, 466, 2673, 562, 561, 584, 11, 731, 11, 291, 500, 380, 643, 13, 51264, 51264, 1042, 11, 5699, 561, 584, 300, 291, 500, 380, 643, 6921, 11, 437, 436, 914, 307, 300, 291, 500, 380, 643, 281, 2464, 382, 867, 6921, 562, 291, 362, 2010, 562, 291, 362, 3467, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.09222073899101965, "compression_ratio": 1.8246445497630333, "no_caption_prob": 7.14102789061144e-05}, {"id": 260, "seek": 179700, "start": 1815.0, "end": 1826.0, "text": " Well, whenever people say that you don't need tests, what they mean is that you don't need to write as many tests when you have type when you have types.", "tokens": [50364, 407, 286, 519, 309, 311, 1021, 281, 1223, 11, 411, 11, 562, 366, 3467, 264, 665, 264, 665, 37765, 293, 562, 366, 6921, 264, 558, 2290, 30, 50914, 50914, 407, 264, 636, 286, 3928, 281, 536, 13, 407, 1310, 700, 718, 311, 751, 466, 2673, 562, 561, 584, 11, 731, 11, 291, 500, 380, 643, 13, 51264, 51264, 1042, 11, 5699, 561, 584, 300, 291, 500, 380, 643, 6921, 11, 437, 436, 914, 307, 300, 291, 500, 380, 643, 281, 2464, 382, 867, 6921, 562, 291, 362, 2010, 562, 291, 362, 3467, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.09222073899101965, "compression_ratio": 1.8246445497630333, "no_caption_prob": 7.14102789061144e-05}, {"id": 261, "seek": 182600, "start": 1826.0, "end": 1836.0, "text": " Right. So, for instance, the common examples. Well, what if the argument that you pass to is valid user name is undefined or is nil or whatever?", "tokens": [50364, 1779, 13, 407, 11, 337, 5197, 11, 264, 2689, 5110, 13, 1042, 11, 437, 498, 264, 6770, 300, 291, 1320, 281, 307, 7363, 4195, 1315, 307, 674, 5666, 2001, 420, 307, 297, 388, 420, 2035, 30, 50864, 50864, 1042, 11, 291, 500, 380, 643, 281, 1520, 337, 729, 498, 428, 3467, 584, 300, 309, 2203, 281, 312, 257, 7363, 11, 309, 2203, 281, 312, 257, 2107, 18184, 6798, 420, 2035, 13, 51364, 51364, 400, 291, 611, 500, 380, 643, 281, 1520, 300, 341, 264, 341, 2445, 11247, 1340, 1646, 813, 257, 23351, 28499, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.11255093010104432, "compression_ratio": 1.709090909090909, "no_caption_prob": 5.561917714658193e-05}, {"id": 262, "seek": 182600, "start": 1836.0, "end": 1846.0, "text": " Well, you don't need to check for those if your types say that it needs to be a valid, it needs to be a non null string or whatever.", "tokens": [50364, 1779, 13, 407, 11, 337, 5197, 11, 264, 2689, 5110, 13, 1042, 11, 437, 498, 264, 6770, 300, 291, 1320, 281, 307, 7363, 4195, 1315, 307, 674, 5666, 2001, 420, 307, 297, 388, 420, 2035, 30, 50864, 50864, 1042, 11, 291, 500, 380, 643, 281, 1520, 337, 729, 498, 428, 3467, 584, 300, 309, 2203, 281, 312, 257, 7363, 11, 309, 2203, 281, 312, 257, 2107, 18184, 6798, 420, 2035, 13, 51364, 51364, 400, 291, 611, 500, 380, 643, 281, 1520, 300, 341, 264, 341, 2445, 11247, 1340, 1646, 813, 257, 23351, 28499, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.11255093010104432, "compression_ratio": 1.709090909090909, "no_caption_prob": 5.561917714658193e-05}, {"id": 263, "seek": 182600, "start": 1846.0, "end": 1851.0, "text": " And you also don't need to check that this the this function returns anything else than a Boolean.", "tokens": [50364, 1779, 13, 407, 11, 337, 5197, 11, 264, 2689, 5110, 13, 1042, 11, 437, 498, 264, 6770, 300, 291, 1320, 281, 307, 7363, 4195, 1315, 307, 674, 5666, 2001, 420, 307, 297, 388, 420, 2035, 30, 50864, 50864, 1042, 11, 291, 500, 380, 643, 281, 1520, 337, 729, 498, 428, 3467, 584, 300, 309, 2203, 281, 312, 257, 7363, 11, 309, 2203, 281, 312, 257, 2107, 18184, 6798, 420, 2035, 13, 51364, 51364, 400, 291, 611, 500, 380, 643, 281, 1520, 300, 341, 264, 341, 2445, 11247, 1340, 1646, 813, 257, 23351, 28499, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.11255093010104432, "compression_ratio": 1.709090909090909, "no_caption_prob": 5.561917714658193e-05}, {"id": 264, "seek": 185100, "start": 1851.0, "end": 1863.0, "text": " So when you have types, it's very much limits the wiggle room that a function has, like between its inputs and outputs.", "tokens": [50364, 407, 562, 291, 362, 3467, 11, 309, 311, 588, 709, 10406, 264, 33377, 1808, 300, 257, 2445, 575, 11, 411, 1296, 1080, 15743, 293, 23930, 13, 50964, 50964, 440, 15743, 584, 437, 307, 2435, 281, 264, 2445, 293, 264, 5598, 307, 437, 307, 2435, 281, 2736, 13, 51314, 51314, 1743, 294, 264, 341, 11322, 1901, 295, 3995, 11420, 295, 3995, 4190, 281, 2736, 293, 281, 483, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.13891040103536256, "compression_ratio": 1.6861702127659575, "no_caption_prob": 2.392096575931646e-05}, {"id": 265, "seek": 185100, "start": 1863.0, "end": 1870.0, "text": " The inputs say what is available to the function and the output is what is available to return.", "tokens": [50364, 407, 562, 291, 362, 3467, 11, 309, 311, 588, 709, 10406, 264, 33377, 1808, 300, 257, 2445, 575, 11, 411, 1296, 1080, 15743, 293, 23930, 13, 50964, 50964, 440, 15743, 584, 437, 307, 2435, 281, 264, 2445, 293, 264, 5598, 307, 437, 307, 2435, 281, 2736, 13, 51314, 51314, 1743, 294, 264, 341, 11322, 1901, 295, 3995, 11420, 295, 3995, 4190, 281, 2736, 293, 281, 483, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.13891040103536256, "compression_ratio": 1.6861702127659575, "no_caption_prob": 2.392096575931646e-05}, {"id": 266, "seek": 185100, "start": 1870.0, "end": 1878.0, "text": " Like in the this enormous space of potential implementation of potential values to return and to get.", "tokens": [50364, 407, 562, 291, 362, 3467, 11, 309, 311, 588, 709, 10406, 264, 33377, 1808, 300, 257, 2445, 575, 11, 411, 1296, 1080, 15743, 293, 23930, 13, 50964, 50964, 440, 15743, 584, 437, 307, 2435, 281, 264, 2445, 293, 264, 5598, 307, 437, 307, 2435, 281, 2736, 13, 51314, 51314, 1743, 294, 264, 341, 11322, 1901, 295, 3995, 11420, 295, 3995, 4190, 281, 2736, 293, 281, 483, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.13891040103536256, "compression_ratio": 1.6861702127659575, "no_caption_prob": 2.392096575931646e-05}, {"id": 267, "seek": 187800, "start": 1878.0, "end": 1888.0, "text": " What what can you do? So whenever you add types, you constrain what you can write, what you can receive, what you can get, what you can write as the implementation.", "tokens": [50364, 708, 437, 393, 291, 360, 30, 407, 5699, 291, 909, 3467, 11, 291, 1817, 7146, 437, 291, 393, 2464, 11, 437, 291, 393, 4774, 11, 437, 291, 393, 483, 11, 437, 291, 393, 2464, 382, 264, 11420, 13, 50864, 50864, 400, 286, 519, 300, 311, 562, 561, 567, 2464, 257, 688, 295, 257, 688, 295, 3467, 11, 457, 500, 380, 458, 257, 688, 295, 6921, 11, 437, 436, 519, 295, 13, 51264, 51264, 400, 300, 311, 18886, 452, 1389, 11, 570, 286, 500, 380, 2464, 300, 867, 6921, 294, 3124, 11, 307, 300, 570, 456, 311, 370, 707, 33377, 1808, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.1095259530203683, "compression_ratio": 1.8590909090909091, "no_caption_prob": 2.1781554096378386e-05}, {"id": 268, "seek": 187800, "start": 1888.0, "end": 1896.0, "text": " And I think that's when people who write a lot of a lot of types, but don't know a lot of tests, what they think of.", "tokens": [50364, 708, 437, 393, 291, 360, 30, 407, 5699, 291, 909, 3467, 11, 291, 1817, 7146, 437, 291, 393, 2464, 11, 437, 291, 393, 4774, 11, 437, 291, 393, 483, 11, 437, 291, 393, 2464, 382, 264, 11420, 13, 50864, 50864, 400, 286, 519, 300, 311, 562, 561, 567, 2464, 257, 688, 295, 257, 688, 295, 3467, 11, 457, 500, 380, 458, 257, 688, 295, 6921, 11, 437, 436, 519, 295, 13, 51264, 51264, 400, 300, 311, 18886, 452, 1389, 11, 570, 286, 500, 380, 2464, 300, 867, 6921, 294, 3124, 11, 307, 300, 570, 456, 311, 370, 707, 33377, 1808, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.1095259530203683, "compression_ratio": 1.8590909090909091, "no_caption_prob": 2.1781554096378386e-05}, {"id": 269, "seek": 187800, "start": 1896.0, "end": 1905.0, "text": " And that's partially my case, because I don't write that many tests in practice, is that because there's so little wiggle room.", "tokens": [50364, 708, 437, 393, 291, 360, 30, 407, 5699, 291, 909, 3467, 11, 291, 1817, 7146, 437, 291, 393, 2464, 11, 437, 291, 393, 4774, 11, 437, 291, 393, 483, 11, 437, 291, 393, 2464, 382, 264, 11420, 13, 50864, 50864, 400, 286, 519, 300, 311, 562, 561, 567, 2464, 257, 688, 295, 257, 688, 295, 3467, 11, 457, 500, 380, 458, 257, 688, 295, 6921, 11, 437, 436, 519, 295, 13, 51264, 51264, 400, 300, 311, 18886, 452, 1389, 11, 570, 286, 500, 380, 2464, 300, 867, 6921, 294, 3124, 11, 307, 300, 570, 456, 311, 370, 707, 33377, 1808, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.1095259530203683, "compression_ratio": 1.8590909090909091, "no_caption_prob": 2.1781554096378386e-05}, {"id": 270, "seek": 190500, "start": 1905.0, "end": 1919.0, "text": " If you have good types that you don't really need to test those, like, for instance, if you have an enum of four things as an input and you return a Boolean as an output, then you have very few implementation possibilities.", "tokens": [50364, 759, 291, 362, 665, 3467, 300, 291, 500, 380, 534, 643, 281, 1500, 729, 11, 411, 11, 337, 5197, 11, 498, 291, 362, 364, 465, 449, 295, 1451, 721, 382, 364, 4846, 293, 291, 2736, 257, 23351, 28499, 382, 364, 5598, 11, 550, 291, 362, 588, 1326, 11420, 12178, 13, 51064, 51064, 286, 519, 291, 362, 411, 3180, 420, 746, 420, 291, 362, 257, 588, 1326, 13, 407, 309, 311, 516, 281, 312, 1152, 337, 385, 281, 652, 257, 6146, 510, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.07787631833276083, "compression_ratio": 1.6538461538461537, "no_caption_prob": 2.546568248362746e-05}, {"id": 271, "seek": 190500, "start": 1919.0, "end": 1927.0, "text": " I think you have like eight or something or you have a very few. So it's going to be hard for me to make a mistake here.", "tokens": [50364, 759, 291, 362, 665, 3467, 300, 291, 500, 380, 534, 643, 281, 1500, 729, 11, 411, 11, 337, 5197, 11, 498, 291, 362, 364, 465, 449, 295, 1451, 721, 382, 364, 4846, 293, 291, 2736, 257, 23351, 28499, 382, 364, 5598, 11, 550, 291, 362, 588, 1326, 11420, 12178, 13, 51064, 51064, 286, 519, 291, 362, 411, 3180, 420, 746, 420, 291, 362, 257, 588, 1326, 13, 407, 309, 311, 516, 281, 312, 1152, 337, 385, 281, 652, 257, 6146, 510, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.07787631833276083, "compression_ratio": 1.6538461538461537, "no_caption_prob": 2.546568248362746e-05}, {"id": 272, "seek": 192700, "start": 1927.0, "end": 1943.0, "text": " I'm going to make some at some point, probably, and therefore it's still useful to have tests. But the wiggle room is a lot less than if we wrote it in a dynamic language where the inputs and the outputs are any value there.", "tokens": [50364, 286, 478, 516, 281, 652, 512, 412, 512, 935, 11, 1391, 11, 293, 4412, 309, 311, 920, 4420, 281, 362, 6921, 13, 583, 264, 33377, 1808, 307, 257, 688, 1570, 813, 498, 321, 4114, 309, 294, 257, 8546, 2856, 689, 264, 15743, 293, 264, 23930, 366, 604, 2158, 456, 13, 51164, 51164, 814, 393, 312, 674, 5666, 2001, 13, 814, 393, 312, 31828, 6828, 11, 2035, 13, 51364, 51364], "temperature": 0.0, "avg_logprob": -0.10934278326974788, "compression_ratio": 1.4921465968586387, "no_caption_prob": 4.133420225116424e-05}, {"id": 273, "seek": 192700, "start": 1943.0, "end": 1947.0, "text": " They can be undefined. They can be JSON functions, whatever.", "tokens": [50364, 286, 478, 516, 281, 652, 512, 412, 512, 935, 11, 1391, 11, 293, 4412, 309, 311, 920, 4420, 281, 362, 6921, 13, 583, 264, 33377, 1808, 307, 257, 688, 1570, 813, 498, 321, 4114, 309, 294, 257, 8546, 2856, 689, 264, 15743, 293, 264, 23930, 366, 604, 2158, 456, 13, 51164, 51164, 814, 393, 312, 674, 5666, 2001, 13, 814, 393, 312, 31828, 6828, 11, 2035, 13, 51364, 51364], "temperature": 0.0, "avg_logprob": -0.10934278326974788, "compression_ratio": 1.4921465968586387, "no_caption_prob": 4.133420225116424e-05}, {"id": 274, "seek": 194700, "start": 1947.0, "end": 1961.0, "text": " So just restricting the wiggle room that you have to something very tiny makes it much more likely that you're going to have the correct implementation or a correct implementation or somewhat correct.", "tokens": [50364, 407, 445, 1472, 37714, 264, 33377, 1808, 300, 291, 362, 281, 746, 588, 5870, 1669, 309, 709, 544, 3700, 300, 291, 434, 516, 281, 362, 264, 3006, 11420, 420, 257, 3006, 11420, 420, 8344, 3006, 13, 51064, 51064, 1779, 11, 558, 13, 400, 561, 829, 257, 688, 295, 1194, 293, 4630, 666, 729, 7525, 295, 1228, 3467, 588, 731, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.10096721351146698, "compression_ratio": 1.6344086021505377, "no_caption_prob": 9.665997822594363e-06}, {"id": 275, "seek": 194700, "start": 1961.0, "end": 1970.0, "text": " Right, right. And people put a lot of thought and effort into those practices of using types very well.", "tokens": [50364, 407, 445, 1472, 37714, 264, 33377, 1808, 300, 291, 362, 281, 746, 588, 5870, 1669, 309, 709, 544, 3700, 300, 291, 434, 516, 281, 362, 264, 3006, 11420, 420, 257, 3006, 11420, 420, 8344, 3006, 13, 51064, 51064, 1779, 11, 558, 13, 400, 561, 829, 257, 688, 295, 1194, 293, 4630, 666, 729, 7525, 295, 1228, 3467, 588, 731, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.10096721351146698, "compression_ratio": 1.6344086021505377, "no_caption_prob": 9.665997822594363e-06}, {"id": 276, "seek": 197000, "start": 1970.0, "end": 1978.0, "text": " And then they focus on that one thing and then, oh, it turns out like, well, do I really need to test for this workflow?", "tokens": [50364, 400, 550, 436, 1879, 322, 300, 472, 551, 293, 550, 11, 1954, 11, 309, 4523, 484, 411, 11, 731, 11, 360, 286, 534, 643, 281, 1500, 337, 341, 20993, 30, 50764, 50764, 400, 286, 519, 11, 286, 914, 11, 286, 500, 380, 458, 11, 498, 291, 747, 264, 30351, 1365, 11, 411, 4997, 257, 7363, 30351, 11, 411, 3467, 366, 1391, 406, 257, 869, 2290, 337, 300, 13, 51364, 51364], "temperature": 0.0, "avg_logprob": -0.1023220486111111, "compression_ratio": 1.5397727272727273, "no_caption_prob": 7.253491639858112e-05}, {"id": 277, "seek": 197000, "start": 1978.0, "end": 1990.0, "text": " And I think, I mean, I don't know, if you take the username example, like testing a valid username, like types are probably not a great tool for that.", "tokens": [50364, 400, 550, 436, 1879, 322, 300, 472, 551, 293, 550, 11, 1954, 11, 309, 4523, 484, 411, 11, 731, 11, 360, 286, 534, 643, 281, 1500, 337, 341, 20993, 30, 50764, 50764, 400, 286, 519, 11, 286, 914, 11, 286, 500, 380, 458, 11, 498, 291, 747, 264, 30351, 1365, 11, 411, 4997, 257, 7363, 30351, 11, 411, 3467, 366, 1391, 406, 257, 869, 2290, 337, 300, 13, 51364, 51364], "temperature": 0.0, "avg_logprob": -0.1023220486111111, "compression_ratio": 1.5397727272727273, "no_caption_prob": 7.253491639858112e-05}, {"id": 278, "seek": 199000, "start": 1990.0, "end": 2000.0, "text": " Like, sure, you could say that like these are the valid characters and this first character can be this and the second character and characters after can be that.", "tokens": [50364, 1743, 11, 988, 11, 291, 727, 584, 300, 411, 613, 366, 264, 7363, 4342, 293, 341, 700, 2517, 393, 312, 341, 293, 264, 1150, 2517, 293, 4342, 934, 393, 312, 300, 13, 50864, 50864, 583, 411, 11, 309, 311, 1391, 406, 4818, 13, 583, 6921, 366, 257, 588, 665, 2290, 337, 300, 13, 51114, 51114, 400, 281, 385, 11, 411, 412, 264, 4965, 295, 341, 307, 264, 14100, 281, 281, 1322, 294, 613, 7525, 293, 611, 411, 406, 439, 6921, 366, 2942, 2681, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.07956782254305753, "compression_ratio": 1.78743961352657, "no_caption_prob": 0.00018810605979524553}, {"id": 279, "seek": 199000, "start": 2000.0, "end": 2005.0, "text": " But like, it's probably not necessary. But tests are a very good tool for that.", "tokens": [50364, 1743, 11, 988, 11, 291, 727, 584, 300, 411, 613, 366, 264, 7363, 4342, 293, 341, 700, 2517, 393, 312, 341, 293, 264, 1150, 2517, 293, 4342, 934, 393, 312, 300, 13, 50864, 50864, 583, 411, 11, 309, 311, 1391, 406, 4818, 13, 583, 6921, 366, 257, 588, 665, 2290, 337, 300, 13, 51114, 51114, 400, 281, 385, 11, 411, 412, 264, 4965, 295, 341, 307, 264, 14100, 281, 281, 1322, 294, 613, 7525, 293, 611, 411, 406, 439, 6921, 366, 2942, 2681, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.07956782254305753, "compression_ratio": 1.78743961352657, "no_caption_prob": 0.00018810605979524553}, {"id": 280, "seek": 199000, "start": 2005.0, "end": 2016.0, "text": " And to me, like at the core of this is the habits to to build in these practices and also like not all tests are created equal.", "tokens": [50364, 1743, 11, 988, 11, 291, 727, 584, 300, 411, 613, 366, 264, 7363, 4342, 293, 341, 700, 2517, 393, 312, 341, 293, 264, 1150, 2517, 293, 4342, 934, 393, 312, 300, 13, 50864, 50864, 583, 411, 11, 309, 311, 1391, 406, 4818, 13, 583, 6921, 366, 257, 588, 665, 2290, 337, 300, 13, 51114, 51114, 400, 281, 385, 11, 411, 412, 264, 4965, 295, 341, 307, 264, 14100, 281, 281, 1322, 294, 613, 7525, 293, 611, 411, 406, 439, 6921, 366, 2942, 2681, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.07956782254305753, "compression_ratio": 1.78743961352657, "no_caption_prob": 0.00018810605979524553}, {"id": 281, "seek": 201600, "start": 2016.0, "end": 2026.0, "text": " So I think if we like dig into it, I think a lot of people view I think a lot of people view types as a hindrance to their productivity.", "tokens": [50364, 407, 286, 519, 498, 321, 411, 2528, 666, 309, 11, 286, 519, 257, 688, 295, 561, 1910, 286, 519, 257, 688, 295, 561, 1910, 3467, 382, 257, 20138, 32493, 281, 641, 15604, 13, 50864, 50864, 3013, 436, 393, 312, 5413, 322, 264, 2856, 293, 3873, 300, 291, 362, 412, 428, 26400, 13, 51114, 51114, 1779, 13, 400, 5413, 322, 577, 291, 764, 552, 13, 1779, 13, 400, 257, 688, 295, 561, 311, 5235, 365, 10745, 689, 436, 434, 406, 1242, 2068, 32567, 11, 291, 458, 11, 1391, 490, 257, 565, 562, 17312, 2067, 380, 534, 19453, 666, 309, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.08104141013136187, "compression_ratio": 1.736, "no_caption_prob": 2.8407863283064216e-05}, {"id": 282, "seek": 201600, "start": 2026.0, "end": 2031.0, "text": " Which they can be depending on the language and tools that you have at your disposal.", "tokens": [50364, 407, 286, 519, 498, 321, 411, 2528, 666, 309, 11, 286, 519, 257, 688, 295, 561, 1910, 286, 519, 257, 688, 295, 561, 1910, 3467, 382, 257, 20138, 32493, 281, 641, 15604, 13, 50864, 50864, 3013, 436, 393, 312, 5413, 322, 264, 2856, 293, 3873, 300, 291, 362, 412, 428, 26400, 13, 51114, 51114, 1779, 13, 400, 5413, 322, 577, 291, 764, 552, 13, 1779, 13, 400, 257, 688, 295, 561, 311, 5235, 365, 10745, 689, 436, 434, 406, 1242, 2068, 32567, 11, 291, 458, 11, 1391, 490, 257, 565, 562, 17312, 2067, 380, 534, 19453, 666, 309, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.08104141013136187, "compression_ratio": 1.736, "no_caption_prob": 2.8407863283064216e-05}, {"id": 283, "seek": 201600, "start": 2031.0, "end": 2044.0, "text": " Right. And depending on how you use them. Right. And a lot of people's experiences with Java where they're not getting strong guarantees, you know, probably from a time when optional wasn't really baked into it.", "tokens": [50364, 407, 286, 519, 498, 321, 411, 2528, 666, 309, 11, 286, 519, 257, 688, 295, 561, 1910, 286, 519, 257, 688, 295, 561, 1910, 3467, 382, 257, 20138, 32493, 281, 641, 15604, 13, 50864, 50864, 3013, 436, 393, 312, 5413, 322, 264, 2856, 293, 3873, 300, 291, 362, 412, 428, 26400, 13, 51114, 51114, 1779, 13, 400, 5413, 322, 577, 291, 764, 552, 13, 1779, 13, 400, 257, 688, 295, 561, 311, 5235, 365, 10745, 689, 436, 434, 406, 1242, 2068, 32567, 11, 291, 458, 11, 1391, 490, 257, 565, 562, 17312, 2067, 380, 534, 19453, 666, 309, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.08104141013136187, "compression_ratio": 1.736, "no_caption_prob": 2.8407863283064216e-05}, {"id": 284, "seek": 204400, "start": 2044.0, "end": 2050.0, "text": " They're getting null exceptions all over the place and array index out of bounds, runtime exceptions, casting exceptions.", "tokens": [50364, 814, 434, 1242, 18184, 22847, 439, 670, 264, 1081, 293, 10225, 8186, 484, 295, 29905, 11, 34474, 22847, 11, 17301, 22847, 13, 50664, 50664, 407, 406, 439, 406, 439, 2010, 3652, 366, 2942, 2681, 13, 583, 611, 11, 498, 291, 434, 445, 1228, 13985, 5315, 294, 428, 2010, 1185, 293, 406, 534, 32666, 3467, 11, 550, 309, 311, 516, 281, 841, 411, 1825, 457, 257, 12578, 13, 51264, 51264, 467, 311, 516, 281, 841, 411, 1825, 457, 341, 551, 300, 311, 19030, 385, 281, 4445, 364, 12649, 11, 291, 458, 11, 5197, 295, 341, 9265, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.06355654239654542, "compression_ratio": 1.7626459143968871, "no_caption_prob": 3.4265220165252686e-05}, {"id": 285, "seek": 204400, "start": 2050.0, "end": 2062.0, "text": " So not all not all type systems are created equal. But also, if you're just using strings everywhere in your type system and not really leveraging types, then it's going to feel like nothing but a burden.", "tokens": [50364, 814, 434, 1242, 18184, 22847, 439, 670, 264, 1081, 293, 10225, 8186, 484, 295, 29905, 11, 34474, 22847, 11, 17301, 22847, 13, 50664, 50664, 407, 406, 439, 406, 439, 2010, 3652, 366, 2942, 2681, 13, 583, 611, 11, 498, 291, 434, 445, 1228, 13985, 5315, 294, 428, 2010, 1185, 293, 406, 534, 32666, 3467, 11, 550, 309, 311, 516, 281, 841, 411, 1825, 457, 257, 12578, 13, 51264, 51264, 467, 311, 516, 281, 841, 411, 1825, 457, 341, 551, 300, 311, 19030, 385, 281, 4445, 364, 12649, 11, 291, 458, 11, 5197, 295, 341, 9265, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.06355654239654542, "compression_ratio": 1.7626459143968871, "no_caption_prob": 3.4265220165252686e-05}, {"id": 286, "seek": 204400, "start": 2062.0, "end": 2071.0, "text": " It's going to feel like nothing but this thing that's forcing me to implement an abstract, you know, instance of this factory.", "tokens": [50364, 814, 434, 1242, 18184, 22847, 439, 670, 264, 1081, 293, 10225, 8186, 484, 295, 29905, 11, 34474, 22847, 11, 17301, 22847, 13, 50664, 50664, 407, 406, 439, 406, 439, 2010, 3652, 366, 2942, 2681, 13, 583, 611, 11, 498, 291, 434, 445, 1228, 13985, 5315, 294, 428, 2010, 1185, 293, 406, 534, 32666, 3467, 11, 550, 309, 311, 516, 281, 841, 411, 1825, 457, 257, 12578, 13, 51264, 51264, 467, 311, 516, 281, 841, 411, 1825, 457, 341, 551, 300, 311, 19030, 385, 281, 4445, 364, 12649, 11, 291, 458, 11, 5197, 295, 341, 9265, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.06355654239654542, "compression_ratio": 1.7626459143968871, "no_caption_prob": 3.4265220165252686e-05}, {"id": 287, "seek": 207100, "start": 2071.0, "end": 2079.0, "text": " And so I have to make like an anonymous class to satisfy this thing. And, OK, great. What safety did that give me?", "tokens": [50364, 400, 370, 286, 362, 281, 652, 411, 364, 24932, 1508, 281, 19319, 341, 551, 13, 400, 11, 2264, 11, 869, 13, 708, 4514, 630, 300, 976, 385, 30, 50764, 50764, 865, 11, 309, 311, 787, 516, 281, 976, 291, 5567, 5311, 570, 498, 1203, 307, 18184, 712, 4033, 11, 550, 291, 434, 920, 516, 281, 917, 493, 365, 264, 3880, 1154, 307, 300, 1203, 307, 18184, 712, 293, 291, 362, 281, 1520, 337, 18184, 5315, 11, 597, 286, 914, 11, 291, 434, 516, 281, 362, 281, 2464, 6921, 337, 300, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.08822650909423828, "compression_ratio": 1.6528925619834711, "no_caption_prob": 7.602133700856939e-05}, {"id": 288, "seek": 207100, "start": 2079.0, "end": 2095.0, "text": " Yeah, it's only going to give you limited benefits because if everything is nullable anyway, then you're still going to end up with the biggest problem is that everything is nullable and you have to check for null everywhere, which I mean, you're going to have to write tests for that.", "tokens": [50364, 400, 370, 286, 362, 281, 652, 411, 364, 24932, 1508, 281, 19319, 341, 551, 13, 400, 11, 2264, 11, 869, 13, 708, 4514, 630, 300, 976, 385, 30, 50764, 50764, 865, 11, 309, 311, 787, 516, 281, 976, 291, 5567, 5311, 570, 498, 1203, 307, 18184, 712, 4033, 11, 550, 291, 434, 920, 516, 281, 917, 493, 365, 264, 3880, 1154, 307, 300, 1203, 307, 18184, 712, 293, 291, 362, 281, 1520, 337, 18184, 5315, 11, 597, 286, 914, 11, 291, 434, 516, 281, 362, 281, 2464, 6921, 337, 300, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.08822650909423828, "compression_ratio": 1.6528925619834711, "no_caption_prob": 7.602133700856939e-05}, {"id": 289, "seek": 209500, "start": 2095.0, "end": 2109.0, "text": " Right. And if you still are using primitive types all over the place and you're not really making impossible states impossible and you're not really, you know, using, you know, union types or don't have that functionality in your language.", "tokens": [50364, 1779, 13, 400, 498, 291, 920, 366, 1228, 28540, 3467, 439, 670, 264, 1081, 293, 291, 434, 406, 534, 1455, 6243, 4368, 6243, 293, 291, 434, 406, 534, 11, 291, 458, 11, 1228, 11, 291, 458, 11, 11671, 3467, 420, 500, 380, 362, 300, 14980, 294, 428, 2856, 13, 51064, 51064, 407, 286, 519, 300, 311, 257, 688, 295, 561, 311, 1752, 365, 309, 13, 407, 264, 636, 300, 291, 764, 428, 2010, 1185, 7001, 257, 688, 11, 382, 286, 519, 257, 688, 295, 527, 23274, 486, 11, 291, 458, 11, 486, 312, 25381, 281, 264, 31244, 456, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.026997288453926162, "compression_ratio": 1.8140495867768596, "no_caption_prob": 7.602034747833386e-05}, {"id": 290, "seek": 209500, "start": 2109.0, "end": 2120.0, "text": " So I think that's a lot of people's experience with it. So the way that you use your type system matters a lot, as I think a lot of our listeners will, you know, will be preaching to the choir there.", "tokens": [50364, 1779, 13, 400, 498, 291, 920, 366, 1228, 28540, 3467, 439, 670, 264, 1081, 293, 291, 434, 406, 534, 1455, 6243, 4368, 6243, 293, 291, 434, 406, 534, 11, 291, 458, 11, 1228, 11, 291, 458, 11, 11671, 3467, 420, 500, 380, 362, 300, 14980, 294, 428, 2856, 13, 51064, 51064, 407, 286, 519, 300, 311, 257, 688, 295, 561, 311, 1752, 365, 309, 13, 407, 264, 636, 300, 291, 764, 428, 2010, 1185, 7001, 257, 688, 11, 382, 286, 519, 257, 688, 295, 527, 23274, 486, 11, 291, 458, 11, 486, 312, 25381, 281, 264, 31244, 456, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.026997288453926162, "compression_ratio": 1.8140495867768596, "no_caption_prob": 7.602034747833386e-05}, {"id": 291, "seek": 212000, "start": 2120.0, "end": 2145.0, "text": " But similarly, I think the way that you write tests matters a lot. And I think that, you know, in my opinion, after watching Kent Beck or watching DHH Creative Rails talk about TDD is dead and watching these sort of TDD experts talking him through it and asking, why do you think TDD is dead and how do you practice TDD?", "tokens": [50364, 583, 14138, 11, 286, 519, 264, 636, 300, 291, 2464, 6921, 7001, 257, 688, 13, 400, 286, 519, 300, 11, 291, 458, 11, 294, 452, 4800, 11, 934, 1976, 15843, 19184, 420, 1976, 413, 7499, 26598, 48526, 751, 466, 314, 20818, 307, 3116, 293, 1976, 613, 1333, 295, 314, 20818, 8572, 1417, 796, 807, 309, 293, 3365, 11, 983, 360, 291, 519, 314, 20818, 307, 3116, 293, 577, 360, 291, 3124, 314, 20818, 30, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.08145699745569474, "compression_ratio": 1.592039800995025, "no_caption_prob": 6.0135113017167896e-05}, {"id": 292, "seek": 214500, "start": 2145.0, "end": 2163.0, "text": " And what I gathered from all of that is the way he practices TDD is very focused on doing a lot of integration tests, sort of these in between tests. They're not end to end tests. They're not unit tests that are exercising one small unit of behavior.", "tokens": [50364, 400, 437, 286, 13032, 490, 439, 295, 300, 307, 264, 636, 415, 7525, 314, 20818, 307, 588, 5178, 322, 884, 257, 688, 295, 10980, 6921, 11, 1333, 295, 613, 294, 1296, 6921, 13, 814, 434, 406, 917, 281, 917, 6921, 13, 814, 434, 406, 4985, 6921, 300, 366, 27272, 472, 1359, 4985, 295, 5223, 13, 51264, 51264], "temperature": 0.0, "avg_logprob": -0.09675755743253028, "compression_ratio": 1.5527950310559007, "no_caption_prob": 3.2695475965738297e-05}, {"id": 293, "seek": 216300, "start": 2163.0, "end": 2185.0, "text": " They're integration tests. And from my experience in my Rails development days, there is a lot of that in testing culture in the Rails community and, you know, these controller tests. So it's not really giving you confidence that your full system works end to end because it's not opening up a browser and running through a user workflow and giving you confidence end to end.", "tokens": [50364, 814, 434, 10980, 6921, 13, 400, 490, 452, 1752, 294, 452, 48526, 3250, 1708, 11, 456, 307, 257, 688, 295, 300, 294, 4997, 3713, 294, 264, 48526, 1768, 293, 11, 291, 458, 11, 613, 10561, 6921, 13, 407, 309, 311, 406, 534, 2902, 291, 6687, 300, 428, 1577, 1185, 1985, 917, 281, 917, 570, 309, 311, 406, 5193, 493, 257, 11185, 293, 2614, 807, 257, 4195, 20993, 293, 2902, 291, 6687, 917, 281, 917, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.06052112579345703, "compression_ratio": 1.6816143497757847, "no_caption_prob": 3.9054475564626046e-06}, {"id": 294, "seek": 218500, "start": 2185.0, "end": 2198.0, "text": " It's not thoroughly exercising all of the possible ways to call one method either. So it gets very messy and you're doing a lot of mocking and stubbing, creating a lot of fake values.", "tokens": [50364, 467, 311, 406, 17987, 27272, 439, 295, 264, 1944, 2098, 281, 818, 472, 3170, 2139, 13, 407, 309, 2170, 588, 16191, 293, 291, 434, 884, 257, 688, 295, 49792, 293, 20266, 4324, 11, 4084, 257, 688, 295, 7592, 4190, 13, 51014, 51014], "temperature": 0.0, "avg_logprob": -0.08254023573615334, "compression_ratio": 1.3863636363636365, "no_caption_prob": 1.4510001165035646e-05}, {"id": 295, "seek": 219800, "start": 2198.0, "end": 2218.0, "text": " And that is like very important because you're testing your mocks. You're testing your fake value producers, not your system under test. And so when you change something and nothing breaks, well, oh, I guess I was mocking that.", "tokens": [50364, 400, 300, 307, 411, 588, 1021, 570, 291, 434, 4997, 428, 705, 2761, 13, 509, 434, 4997, 428, 7592, 2158, 16080, 11, 406, 428, 1185, 833, 1500, 13, 400, 370, 562, 291, 1319, 746, 293, 1825, 9857, 11, 731, 11, 1954, 11, 286, 2041, 286, 390, 49792, 300, 13, 51364, 51364], "temperature": 0.0, "avg_logprob": -0.08694463405969008, "compression_ratio": 1.474025974025974, "no_caption_prob": 6.502345786429942e-05}, {"id": 296, "seek": 221800, "start": 2218.0, "end": 2237.0, "text": " And what happens is your tests become extremely coupled to your code, but don't actually give you confidence about it. So it's the worst of both worlds. And I think that's why DHH had this whole Rails is dead thing besides just being a provocateur and liking to say confidential things.", "tokens": [50364, 400, 437, 2314, 307, 428, 6921, 1813, 4664, 29482, 281, 428, 3089, 11, 457, 500, 380, 767, 976, 291, 6687, 466, 309, 13, 407, 309, 311, 264, 5855, 295, 1293, 13401, 13, 400, 286, 519, 300, 311, 983, 413, 7499, 632, 341, 1379, 48526, 307, 3116, 551, 11868, 445, 885, 257, 24568, 15540, 293, 16933, 281, 584, 27054, 721, 13, 51314, 51314, 12448, 291, 8407, 428, 2578, 484, 562, 291, 645, 1976, 264, 751, 30, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.08361958853806122, "compression_ratio": 1.5418502202643172, "no_caption_prob": 4.133339461986907e-05}, {"id": 297, "seek": 221800, "start": 2237.0, "end": 2240.0, "text": " Were you pulling your hair out when you were watching the talk?", "tokens": [50364, 400, 437, 2314, 307, 428, 6921, 1813, 4664, 29482, 281, 428, 3089, 11, 457, 500, 380, 767, 976, 291, 6687, 466, 309, 13, 407, 309, 311, 264, 5855, 295, 1293, 13401, 13, 400, 286, 519, 300, 311, 983, 413, 7499, 632, 341, 1379, 48526, 307, 3116, 551, 11868, 445, 885, 257, 24568, 15540, 293, 16933, 281, 584, 27054, 721, 13, 51314, 51314, 12448, 291, 8407, 428, 2578, 484, 562, 291, 645, 1976, 264, 751, 30, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.08361958853806122, "compression_ratio": 1.5418502202643172, "no_caption_prob": 4.133339461986907e-05}, {"id": 298, "seek": 224000, "start": 2240.0, "end": 2254.0, "text": " Yeah, yeah, well, it was just very on brand and it's like, all right, you know, I think people are going to continue to think what they think about testing and if they already thought that testing was a waste of time, then that will reinforce that opinion.", "tokens": [50364, 865, 11, 1338, 11, 731, 11, 309, 390, 445, 588, 322, 3360, 293, 309, 311, 411, 11, 439, 558, 11, 291, 458, 11, 286, 519, 561, 366, 516, 281, 2354, 281, 519, 437, 436, 519, 466, 4997, 293, 498, 436, 1217, 1194, 300, 4997, 390, 257, 5964, 295, 565, 11, 550, 300, 486, 22634, 300, 4800, 13, 51064, 51064, 400, 498, 436, 1194, 314, 20818, 390, 869, 11, 550, 300, 486, 22634, 300, 4800, 293, 362, 552, 519, 466, 983, 436, 14091, 13, 583, 286, 519, 309, 311, 364, 1880, 3761, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.10418762763341267, "compression_ratio": 1.8502202643171806, "no_caption_prob": 0.0002033907367149368}, {"id": 299, "seek": 224000, "start": 2254.0, "end": 2263.0, "text": " And if they thought TDD was great, then that will reinforce that opinion and have them think about why they disagree. But I think it's an interesting conversation.", "tokens": [50364, 865, 11, 1338, 11, 731, 11, 309, 390, 445, 588, 322, 3360, 293, 309, 311, 411, 11, 439, 558, 11, 291, 458, 11, 286, 519, 561, 366, 516, 281, 2354, 281, 519, 437, 436, 519, 466, 4997, 293, 498, 436, 1217, 1194, 300, 4997, 390, 257, 5964, 295, 565, 11, 550, 300, 486, 22634, 300, 4800, 13, 51064, 51064, 400, 498, 436, 1194, 314, 20818, 390, 869, 11, 550, 300, 486, 22634, 300, 4800, 293, 362, 552, 519, 466, 983, 436, 14091, 13, 583, 286, 519, 309, 311, 364, 1880, 3761, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.10418762763341267, "compression_ratio": 1.8502202643171806, "no_caption_prob": 0.0002033907367149368}, {"id": 300, "seek": 226300, "start": 2263.0, "end": 2277.0, "text": " To me, the takeaway is it really matters how you write your tests. And now you can't mock in Elm, particularly, but you can write good, good or bad tests, useful or not useful tests.", "tokens": [50364, 1407, 385, 11, 264, 30681, 307, 309, 534, 7001, 577, 291, 2464, 428, 6921, 13, 400, 586, 291, 393, 380, 17362, 294, 2699, 76, 11, 4098, 11, 457, 291, 393, 2464, 665, 11, 665, 420, 1578, 6921, 11, 4420, 420, 406, 4420, 6921, 13, 51064, 51064, 865, 11, 498, 291, 2464, 2699, 76, 1461, 6921, 11, 291, 362, 281, 17362, 6063, 13, 51264, 51264, 1779, 11, 558, 13, 51364, 51364], "temperature": 0.0, "avg_logprob": -0.14746606349945068, "compression_ratio": 1.5662650602409638, "no_caption_prob": 4.0294362406712025e-06}, {"id": 301, "seek": 226300, "start": 2277.0, "end": 2281.0, "text": " Yeah, if you write Elm program tests, you have to mock somehow.", "tokens": [50364, 1407, 385, 11, 264, 30681, 307, 309, 534, 7001, 577, 291, 2464, 428, 6921, 13, 400, 586, 291, 393, 380, 17362, 294, 2699, 76, 11, 4098, 11, 457, 291, 393, 2464, 665, 11, 665, 420, 1578, 6921, 11, 4420, 420, 406, 4420, 6921, 13, 51064, 51064, 865, 11, 498, 291, 2464, 2699, 76, 1461, 6921, 11, 291, 362, 281, 17362, 6063, 13, 51264, 51264, 1779, 11, 558, 13, 51364, 51364], "temperature": 0.0, "avg_logprob": -0.14746606349945068, "compression_ratio": 1.5662650602409638, "no_caption_prob": 4.0294362406712025e-06}, {"id": 302, "seek": 226300, "start": 2281.0, "end": 2283.0, "text": " Right, right.", "tokens": [50364, 1407, 385, 11, 264, 30681, 307, 309, 534, 7001, 577, 291, 2464, 428, 6921, 13, 400, 586, 291, 393, 380, 17362, 294, 2699, 76, 11, 4098, 11, 457, 291, 393, 2464, 665, 11, 665, 420, 1578, 6921, 11, 4420, 420, 406, 4420, 6921, 13, 51064, 51064, 865, 11, 498, 291, 2464, 2699, 76, 1461, 6921, 11, 291, 362, 281, 17362, 6063, 13, 51264, 51264, 1779, 11, 558, 13, 51364, 51364], "temperature": 0.0, "avg_logprob": -0.14746606349945068, "compression_ratio": 1.5662650602409638, "no_caption_prob": 4.0294362406712025e-06}, {"id": 303, "seek": 228300, "start": 2283.0, "end": 2297.0, "text": " But you're not going to have those spies or in the exact same kind of mocks like you're going to have test data, you're not going to have mocks. And like, I actually, you can't even do white box testing in Elm, right?", "tokens": [50364, 583, 291, 434, 406, 516, 281, 362, 729, 45858, 420, 294, 264, 1900, 912, 733, 295, 705, 2761, 411, 291, 434, 516, 281, 362, 1500, 1412, 11, 291, 434, 406, 516, 281, 362, 705, 2761, 13, 400, 411, 11, 286, 767, 11, 291, 393, 380, 754, 360, 2418, 2424, 4997, 294, 2699, 76, 11, 558, 30, 51064, 51064], "temperature": 0.0, "avg_logprob": -0.18170790672302245, "compression_ratio": 1.5390070921985815, "no_caption_prob": 3.70514826499857e-05}, {"id": 304, "seek": 229700, "start": 2297.0, "end": 2313.0, "text": " So black boxes testing is when you check, you give inputs and you make assertions on the output, but can't do white box. I'd say not. You can influence the internals by passing inputs. Well, yeah.", "tokens": [50364, 407, 2211, 9002, 4997, 307, 562, 291, 1520, 11, 291, 976, 15743, 293, 291, 652, 19810, 626, 322, 264, 5598, 11, 457, 393, 380, 360, 2418, 2424, 13, 286, 1116, 584, 406, 13, 509, 393, 6503, 264, 2154, 1124, 538, 8437, 15743, 13, 1042, 11, 1338, 13, 51164, 51164], "temperature": 0.0, "avg_logprob": -0.1577878839829389, "compression_ratio": 1.3611111111111112, "no_caption_prob": 1.4063498383620754e-05}, {"id": 305, "seek": 231300, "start": 2313.0, "end": 2337.0, "text": " I mean, it depends on how like with Elm a lot of the time. I mean, you know, when I was doing technical coaching, you know, in non Elm companies, like I was spending a lot of my time trying to teach people to follow these practices that Elm forces you to do, like dependency inversion and, you know, dependency injection.", "tokens": [50364, 286, 914, 11, 309, 5946, 322, 577, 411, 365, 2699, 76, 257, 688, 295, 264, 565, 13, 286, 914, 11, 291, 458, 11, 562, 286, 390, 884, 6191, 15818, 11, 291, 458, 11, 294, 2107, 2699, 76, 3431, 11, 411, 286, 390, 6434, 257, 688, 295, 452, 565, 1382, 281, 2924, 561, 281, 1524, 613, 7525, 300, 2699, 76, 5874, 291, 281, 360, 11, 411, 33621, 43576, 293, 11, 291, 458, 11, 33621, 22873, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.11933302577537826, "compression_ratio": 1.7165775401069518, "no_caption_prob": 0.00010719625424826518}, {"id": 306, "seek": 233700, "start": 2337.0, "end": 2355.0, "text": " And, you know, so instead of like mocking things, you can pass in the value. So you have control over instead of like mocking time dot now or whatever, right? You, you pass in the time and in Elm, you have to do that because you can't just go get the side effect.", "tokens": [50364, 400, 11, 291, 458, 11, 370, 2602, 295, 411, 49792, 721, 11, 291, 393, 1320, 294, 264, 2158, 13, 407, 291, 362, 1969, 670, 2602, 295, 411, 49792, 565, 5893, 586, 420, 2035, 11, 558, 30, 509, 11, 291, 1320, 294, 264, 565, 293, 294, 2699, 76, 11, 291, 362, 281, 360, 300, 570, 291, 393, 380, 445, 352, 483, 264, 1252, 1802, 13, 51264, 51264], "temperature": 0.0, "avg_logprob": -0.11128505538491641, "compression_ratio": 1.603658536585366, "no_caption_prob": 3.705136987264268e-05}, {"id": 307, "seek": 235500, "start": 2355.0, "end": 2372.0, "text": " So you don't have to mock the current date because you have to have that as an explicit dependency as, as an argument with, with dependency injection essentially. So Elm does help with a lot of those practices, but nonetheless, like you can write useful tests or not.", "tokens": [50364, 407, 291, 500, 380, 362, 281, 17362, 264, 2190, 4002, 570, 291, 362, 281, 362, 300, 382, 364, 13691, 33621, 382, 11, 382, 364, 6770, 365, 11, 365, 33621, 22873, 4476, 13, 407, 2699, 76, 775, 854, 365, 257, 688, 295, 729, 7525, 11, 457, 26756, 11, 411, 291, 393, 2464, 4420, 6921, 420, 406, 13, 51214, 51214, 509, 393, 11, 293, 291, 393, 11923, 721, 666, 10995, 6815, 420, 406, 13, 400, 286, 519, 264, 636, 291, 13859, 428, 3089, 293, 8947, 721, 666, 16679, 293, 42687, 3467, 307, 257, 955, 644, 295, 300, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.06007103443145752, "compression_ratio": 1.7153846153846153, "no_caption_prob": 2.11118531296961e-05}, {"id": 308, "seek": 235500, "start": 2372.0, "end": 2382.0, "text": " You can, and you can scope things into meaningful units or not. And I think the way you organize your code and extract things into modules and opaque types is a big part of that.", "tokens": [50364, 407, 291, 500, 380, 362, 281, 17362, 264, 2190, 4002, 570, 291, 362, 281, 362, 300, 382, 364, 13691, 33621, 382, 11, 382, 364, 6770, 365, 11, 365, 33621, 22873, 4476, 13, 407, 2699, 76, 775, 854, 365, 257, 688, 295, 729, 7525, 11, 457, 26756, 11, 411, 291, 393, 2464, 4420, 6921, 420, 406, 13, 51214, 51214, 509, 393, 11, 293, 291, 393, 11923, 721, 666, 10995, 6815, 420, 406, 13, 400, 286, 519, 264, 636, 291, 13859, 428, 3089, 293, 8947, 721, 666, 16679, 293, 42687, 3467, 307, 257, 955, 644, 295, 300, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.06007103443145752, "compression_ratio": 1.7153846153846153, "no_caption_prob": 2.11118531296961e-05}, {"id": 309, "seek": 238200, "start": 2382.0, "end": 2403.0, "text": " The way I see it, whenever I think of TDD, I mostly think of unit tests because that's what people push towards. That's where you will see the most benefits. And integration tests are always a bit slower and a bit more clunky, especially if you need to do mocks and spies and, and those kinds of things, which we can't do.", "tokens": [50364, 440, 636, 286, 536, 309, 11, 5699, 286, 519, 295, 314, 20818, 11, 286, 5240, 519, 295, 4985, 6921, 570, 300, 311, 437, 561, 2944, 3030, 13, 663, 311, 689, 291, 486, 536, 264, 881, 5311, 13, 400, 10980, 6921, 366, 1009, 257, 857, 14009, 293, 257, 857, 544, 596, 25837, 11, 2318, 498, 291, 643, 281, 360, 705, 2761, 293, 45858, 293, 11, 293, 729, 3685, 295, 721, 11, 597, 321, 393, 380, 360, 13, 51414, 51414], "temperature": 0.0, "avg_logprob": -0.11885634660720826, "compression_ratio": 1.5406698564593302, "no_caption_prob": 1.1125303899461869e-05}, {"id": 310, "seek": 240300, "start": 2403.0, "end": 2419.0, "text": " And now, as you just said, but also integration tests is like about connecting multiple things, right? And that's actually where types shine. So in a unit test, like if you're not going to, you're going to give some input and going to assert something on the output.", "tokens": [50364, 400, 586, 11, 382, 291, 445, 848, 11, 457, 611, 10980, 6921, 307, 411, 466, 11015, 3866, 721, 11, 558, 30, 400, 300, 311, 767, 689, 3467, 12207, 13, 407, 294, 257, 4985, 1500, 11, 411, 498, 291, 434, 406, 516, 281, 11, 291, 434, 516, 281, 976, 512, 4846, 293, 516, 281, 19810, 746, 322, 264, 5598, 13, 51164, 51164], "temperature": 0.0, "avg_logprob": -0.14254373217385913, "compression_ratio": 1.52, "no_caption_prob": 1.2411303032422438e-05}, {"id": 311, "seek": 241900, "start": 2419.0, "end": 2435.0, "text": " If the tests are not exactly what is expected, that might not be too much of a problem. I mean, your tests are going to cover that, but types are contracts, right? They say, well, this thing takes this as an input and it will return this type as an output.", "tokens": [50364, 759, 264, 6921, 366, 406, 2293, 437, 307, 5176, 11, 300, 1062, 406, 312, 886, 709, 295, 257, 1154, 13, 286, 914, 11, 428, 6921, 366, 516, 281, 2060, 300, 11, 457, 3467, 366, 13952, 11, 558, 30, 814, 584, 11, 731, 11, 341, 551, 2516, 341, 382, 364, 4846, 293, 309, 486, 2736, 341, 2010, 382, 364, 5598, 13, 51164, 51164], "temperature": 0.0, "avg_logprob": -0.06389111280441284, "compression_ratio": 1.4970760233918128, "no_caption_prob": 1.0451499292685185e-05}, {"id": 312, "seek": 243500, "start": 2435.0, "end": 2453.0, "text": " And then that can only be used in specific ways, just like you said with the username and other non primitive types. And well, whoever's going to use those types as inputs or outputs, they're going to have to do it in a correct way because the type checker will validate that for you.", "tokens": [50364, 400, 550, 300, 393, 787, 312, 1143, 294, 2685, 2098, 11, 445, 411, 291, 848, 365, 264, 30351, 293, 661, 2107, 28540, 3467, 13, 400, 731, 11, 11387, 311, 516, 281, 764, 729, 3467, 382, 15743, 420, 23930, 11, 436, 434, 516, 281, 362, 281, 360, 309, 294, 257, 3006, 636, 570, 264, 2010, 1520, 260, 486, 29562, 300, 337, 291, 13, 51264, 51264], "temperature": 0.0, "avg_logprob": -0.0747690200805664, "compression_ratio": 1.518716577540107, "no_caption_prob": 2.0145309463259764e-05}, {"id": 313, "seek": 245300, "start": 2453.0, "end": 2470.0, "text": " But that's going to be something that is very hard for your unit test to verify, right? You're going to have to write multiple unit tests. You're going to have to write a lot of scenarios and to figure out where, when it fails to do it correctly, which you're going to fix.", "tokens": [50364, 583, 300, 311, 516, 281, 312, 746, 300, 307, 588, 1152, 337, 428, 4985, 1500, 281, 16888, 11, 558, 30, 509, 434, 516, 281, 362, 281, 2464, 3866, 4985, 6921, 13, 509, 434, 516, 281, 362, 281, 2464, 257, 688, 295, 15077, 293, 281, 2573, 484, 689, 11, 562, 309, 18199, 281, 360, 309, 8944, 11, 597, 291, 434, 516, 281, 3191, 13, 51214, 51214, 583, 1936, 291, 434, 516, 281, 360, 411, 6921, 2361, 322, 11, 1338, 11, 23138, 300, 11, 23138, 264, 1036, 644, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.12951883378919665, "compression_ratio": 1.7681159420289856, "no_caption_prob": 1.3419886272458825e-05}, {"id": 314, "seek": 245300, "start": 2470.0, "end": 2476.0, "text": " But basically you're going to do like tests based on, yeah, scrap that, scrap the last part.", "tokens": [50364, 583, 300, 311, 516, 281, 312, 746, 300, 307, 588, 1152, 337, 428, 4985, 1500, 281, 16888, 11, 558, 30, 509, 434, 516, 281, 362, 281, 2464, 3866, 4985, 6921, 13, 509, 434, 516, 281, 362, 281, 2464, 257, 688, 295, 15077, 293, 281, 2573, 484, 689, 11, 562, 309, 18199, 281, 360, 309, 8944, 11, 597, 291, 434, 516, 281, 3191, 13, 51214, 51214, 583, 1936, 291, 434, 516, 281, 360, 411, 6921, 2361, 322, 11, 1338, 11, 23138, 300, 11, 23138, 264, 1036, 644, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.12951883378919665, "compression_ratio": 1.7681159420289856, "no_caption_prob": 1.3419886272458825e-05}, {"id": 315, "seek": 247600, "start": 2476.0, "end": 2496.0, "text": " So yeah, whenever I think about integration tests, I feel like that's where types are better suited or view the whole thing as a unit tests. So unit tests all the way and for big things still considered as unit tests, but the implementation inside, that's where types shine.", "tokens": [50364, 407, 1338, 11, 5699, 286, 519, 466, 10980, 6921, 11, 286, 841, 411, 300, 311, 689, 3467, 366, 1101, 24736, 420, 1910, 264, 1379, 551, 382, 257, 4985, 6921, 13, 407, 4985, 6921, 439, 264, 636, 293, 337, 955, 721, 920, 4888, 382, 4985, 6921, 11, 457, 264, 11420, 1854, 11, 300, 311, 689, 3467, 12207, 13, 51364, 51364], "temperature": 0.0, "avg_logprob": -0.1327438979852395, "compression_ratio": 1.6506024096385543, "no_caption_prob": 3.169263800373301e-05}, {"id": 316, "seek": 249600, "start": 2496.0, "end": 2513.0, "text": " Right. I totally agree. I think that fitting pieces together wiring, like, and in my Ruby on Rails development days, I thought a lot about wiring and with Elm, you just let the compiler think about it.", "tokens": [50364, 1779, 13, 286, 3879, 3986, 13, 286, 519, 300, 15669, 3755, 1214, 27520, 11, 411, 11, 293, 294, 452, 19907, 322, 48526, 3250, 1708, 11, 286, 1194, 257, 688, 466, 27520, 293, 365, 2699, 76, 11, 291, 445, 718, 264, 31958, 519, 466, 309, 13, 51214, 51214], "temperature": 0.0, "avg_logprob": -0.14045855463767537, "compression_ratio": 1.3862068965517242, "no_caption_prob": 9.314101043855771e-05}, {"id": 317, "seek": 251300, "start": 2513.0, "end": 2531.0, "text": " You know, I mean, you think about designing how the pieces will fit together and then you trust it once you've sort of designed how you want that to work. And, but you have to think about that in your testing process. And as you say, with like writing mocks and things as you're writing integration tests in your Rails applications.", "tokens": [50364, 509, 458, 11, 286, 914, 11, 291, 519, 466, 14685, 577, 264, 3755, 486, 3318, 1214, 293, 550, 291, 3361, 309, 1564, 291, 600, 1333, 295, 4761, 577, 291, 528, 300, 281, 589, 13, 400, 11, 457, 291, 362, 281, 519, 466, 300, 294, 428, 4997, 1399, 13, 400, 382, 291, 584, 11, 365, 411, 3579, 705, 2761, 293, 721, 382, 291, 434, 3579, 10980, 6921, 294, 428, 48526, 5821, 13, 51264, 51264], "temperature": 0.0, "avg_logprob": -0.09439076741536458, "compression_ratio": 1.6683417085427135, "no_caption_prob": 3.8226549804676324e-05}, {"id": 318, "seek": 253100, "start": 2531.0, "end": 2546.0, "text": " And it's very challenging and it takes a lot to gain confidence through test driven development about your wiring, whereas it's trivial in a type system. That's what type systems really shine at. Like they're so good at doing that.", "tokens": [50364, 400, 309, 311, 588, 7595, 293, 309, 2516, 257, 688, 281, 6052, 6687, 807, 1500, 9555, 3250, 466, 428, 27520, 11, 9735, 309, 311, 26703, 294, 257, 2010, 1185, 13, 663, 311, 437, 2010, 3652, 534, 12207, 412, 13, 1743, 436, 434, 370, 665, 412, 884, 300, 13, 51114, 51114, 400, 2086, 11, 436, 434, 665, 412, 1455, 6243, 4368, 6243, 886, 13, 400, 300, 311, 869, 13, 583, 264, 27520, 11, 309, 311, 445, 11, 291, 393, 380, 352, 2085, 13, 400, 498, 428, 27520, 307, 445, 341, 2445, 2516, 257, 6798, 11, 341, 2445, 2516, 364, 560, 11, 291, 434, 5361, 484, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.11726878979884156, "compression_ratio": 1.803088803088803, "no_caption_prob": 1.2606682503246702e-05}, {"id": 319, "seek": 253100, "start": 2546.0, "end": 2560.0, "text": " And yes, they're good at making impossible states impossible too. And that's great. But the wiring, it's just, you can't go wrong. And if your wiring is just this function takes a string, this function takes an int, you're missing out.", "tokens": [50364, 400, 309, 311, 588, 7595, 293, 309, 2516, 257, 688, 281, 6052, 6687, 807, 1500, 9555, 3250, 466, 428, 27520, 11, 9735, 309, 311, 26703, 294, 257, 2010, 1185, 13, 663, 311, 437, 2010, 3652, 534, 12207, 412, 13, 1743, 436, 434, 370, 665, 412, 884, 300, 13, 51114, 51114, 400, 2086, 11, 436, 434, 665, 412, 1455, 6243, 4368, 6243, 886, 13, 400, 300, 311, 869, 13, 583, 264, 27520, 11, 309, 311, 445, 11, 291, 393, 380, 352, 2085, 13, 400, 498, 428, 27520, 307, 445, 341, 2445, 2516, 257, 6798, 11, 341, 2445, 2516, 364, 560, 11, 291, 434, 5361, 484, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.11726878979884156, "compression_ratio": 1.803088803088803, "no_caption_prob": 1.2606682503246702e-05}, {"id": 320, "seek": 256000, "start": 2560.0, "end": 2586.0, "text": " You're missing out on what you can do with your type system. But yeah, a lot of these integration tests go away. But I think the way that you organize your code is very important. So just like, I think the cost of change is very important to this types versus tests, because I think a lot of people will feel that, like, they'll feel that tests slow them down, they'll feel the types slow them down, or, you know, one or both, whichever they hate more.", "tokens": [50364, 509, 434, 5361, 484, 322, 437, 291, 393, 360, 365, 428, 2010, 1185, 13, 583, 1338, 11, 257, 688, 295, 613, 10980, 6921, 352, 1314, 13, 583, 286, 519, 264, 636, 300, 291, 13859, 428, 3089, 307, 588, 1021, 13, 407, 445, 411, 11, 286, 519, 264, 2063, 295, 1319, 307, 588, 1021, 281, 341, 3467, 5717, 6921, 11, 570, 286, 519, 257, 688, 295, 561, 486, 841, 300, 11, 411, 11, 436, 603, 841, 300, 6921, 2964, 552, 760, 11, 436, 603, 841, 264, 3467, 2964, 552, 760, 11, 420, 11, 291, 458, 11, 472, 420, 1293, 11, 24123, 436, 4700, 544, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.10619633286087601, "compression_ratio": 1.8448979591836734, "no_caption_prob": 4.8322606744477525e-05}, {"id": 321, "seek": 258600, "start": 2586.0, "end": 2610.0, "text": " Yeah. Possibly they'll feel that both slow them down. But if so, maybe they're not listening to Elm Radio. But I think the way that you write your tests will will affect how it slows you down or not. And if you're, you can write Elm code in a way where things get very tangled up with each other.", "tokens": [50364, 865, 13, 33112, 3545, 436, 603, 841, 300, 1293, 2964, 552, 760, 13, 583, 498, 370, 11, 1310, 436, 434, 406, 4764, 281, 2699, 76, 17296, 13, 583, 286, 519, 264, 636, 300, 291, 2464, 428, 6921, 486, 486, 3345, 577, 309, 35789, 291, 760, 420, 406, 13, 400, 498, 291, 434, 11, 291, 393, 2464, 2699, 76, 3089, 294, 257, 636, 689, 721, 483, 588, 47192, 493, 365, 1184, 661, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.0949884339382774, "compression_ratio": 1.510204081632653, "no_caption_prob": 6.108309025876224e-05}, {"id": 322, "seek": 261000, "start": 2610.0, "end": 2636.0, "text": " And it feels like making a change, you have to change all of these tests and throw things away. But if you are kind of organizing things into nice encapsulated, opaque types that have well defined areas of knowledge and responsibility, and you pull out these clean leaf nodes that are responsible for this one area of work, then things aren't coupled in an awkward way, right?", "tokens": [50364, 400, 309, 3417, 411, 1455, 257, 1319, 11, 291, 362, 281, 1319, 439, 295, 613, 6921, 293, 3507, 721, 1314, 13, 583, 498, 291, 366, 733, 295, 17608, 721, 666, 1481, 38745, 6987, 11, 42687, 3467, 300, 362, 731, 7642, 3179, 295, 3601, 293, 6357, 11, 293, 291, 2235, 484, 613, 2541, 10871, 13891, 300, 366, 6250, 337, 341, 472, 1859, 295, 589, 11, 550, 721, 3212, 380, 29482, 294, 364, 11411, 636, 11, 558, 30, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.05146901607513428, "compression_ratio": 1.6347826086956523, "no_caption_prob": 4.3999381887260824e-05}, {"id": 323, "seek": 263600, "start": 2636.0, "end": 2660.0, "text": " So you can't, you can't separate the conversation about how you couple your system with the maintainability of your your types and tests. And so it's essential. So I would, I would encourage people if they are feeling like either types or tests are slowing them down, think about how, like, are you leveraging them to maximum effect?", "tokens": [50364, 407, 291, 393, 380, 11, 291, 393, 380, 4994, 264, 3761, 466, 577, 291, 1916, 428, 1185, 365, 264, 6909, 2310, 295, 428, 428, 3467, 293, 6921, 13, 400, 370, 309, 311, 7115, 13, 407, 286, 576, 11, 286, 576, 5373, 561, 498, 436, 366, 2633, 411, 2139, 3467, 420, 6921, 366, 26958, 552, 760, 11, 519, 466, 577, 11, 411, 11, 366, 291, 32666, 552, 281, 6674, 1802, 30, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.049726031922005316, "compression_ratio": 1.6243902439024391, "no_caption_prob": 4.610880932887085e-05}, {"id": 324, "seek": 266000, "start": 2660.0, "end": 2680.0, "text": " Like, are you actually getting something meaningful and useful out of them? And are you are you coupling them that in a way that makes the cost of change difficult, just like DHH is talking about a lot of tests with tons of mocks that are not really giving a lot of confidence and, and coupling all these things to the internals of the system?", "tokens": [50364, 1743, 11, 366, 291, 767, 1242, 746, 10995, 293, 4420, 484, 295, 552, 30, 400, 366, 291, 366, 291, 37447, 552, 300, 294, 257, 636, 300, 1669, 264, 2063, 295, 1319, 2252, 11, 445, 411, 413, 7499, 307, 1417, 466, 257, 688, 295, 6921, 365, 9131, 295, 705, 2761, 300, 366, 406, 534, 2902, 257, 688, 295, 6687, 293, 11, 293, 37447, 439, 613, 721, 281, 264, 2154, 1124, 295, 264, 1185, 30, 51364, 51364], "temperature": 0.0, "avg_logprob": -0.05408212736055448, "compression_ratio": 1.6490384615384615, "no_caption_prob": 4.9084243073593825e-05}, {"id": 325, "seek": 268000, "start": 2680.0, "end": 2692.0, "text": " Well, you can kind of couple things in a way where your your tests are very hard to maintain and change in your Elm application. So the way you couple and organize your code is essential for that.", "tokens": [50364, 1042, 11, 291, 393, 733, 295, 1916, 721, 294, 257, 636, 689, 428, 428, 6921, 366, 588, 1152, 281, 6909, 293, 1319, 294, 428, 2699, 76, 3861, 13, 407, 264, 636, 291, 1916, 293, 13859, 428, 3089, 307, 7115, 337, 300, 13, 50964, 50964, 407, 1310, 718, 311, 751, 466, 562, 291, 643, 281, 1500, 411, 11, 370, 3467, 366, 516, 281, 1520, 337, 721, 300, 366, 588, 2674, 11, 588, 19577, 11, 436, 434, 1128, 516, 281, 312, 588, 9942, 11, 436, 434, 1128, 516, 281, 2893, 257, 688, 295, 2607, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.0951093496735563, "compression_ratio": 1.7887931034482758, "no_caption_prob": 3.944160198443569e-05}, {"id": 326, "seek": 268000, "start": 2692.0, "end": 2707.0, "text": " So maybe let's talk about when you need to test like, so types are going to check for things that are very general, very generic, they're never going to be very detailed, they're never going to provide a lot of detail.", "tokens": [50364, 1042, 11, 291, 393, 733, 295, 1916, 721, 294, 257, 636, 689, 428, 428, 6921, 366, 588, 1152, 281, 6909, 293, 1319, 294, 428, 2699, 76, 3861, 13, 407, 264, 636, 291, 1916, 293, 13859, 428, 3089, 307, 7115, 337, 300, 13, 50964, 50964, 407, 1310, 718, 311, 751, 466, 562, 291, 643, 281, 1500, 411, 11, 370, 3467, 366, 516, 281, 1520, 337, 721, 300, 366, 588, 2674, 11, 588, 19577, 11, 436, 434, 1128, 516, 281, 312, 588, 9942, 11, 436, 434, 1128, 516, 281, 2893, 257, 688, 295, 2607, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.0951093496735563, "compression_ratio": 1.7887931034482758, "no_caption_prob": 3.944160198443569e-05}, {"id": 327, "seek": 270700, "start": 2707.0, "end": 2717.0, "text": " So if you say that a function returns an integer, well, the type checker will prove that it will always be an integer, otherwise it wouldn't compile. But it doesn't tell you which one it will be.", "tokens": [50364, 407, 498, 291, 584, 300, 257, 2445, 11247, 364, 24922, 11, 731, 11, 264, 2010, 1520, 260, 486, 7081, 300, 309, 486, 1009, 312, 364, 24922, 11, 5911, 309, 2759, 380, 31413, 13, 583, 309, 1177, 380, 980, 291, 597, 472, 309, 486, 312, 13, 50864, 50864], "temperature": 0.0, "avg_logprob": -0.11167289772812201, "compression_ratio": 1.4338235294117647, "no_caption_prob": 9.169593249680474e-05}, {"id": 328, "seek": 271700, "start": 2717.0, "end": 2737.0, "text": " That's when you want to test, you want to test if you want to assert that in a specific scenario, or if you use property based testing, that it will always have some that either has a specific value or is constrained by a specific rule.", "tokens": [50364, 663, 311, 562, 291, 528, 281, 1500, 11, 291, 528, 281, 1500, 498, 291, 528, 281, 19810, 300, 294, 257, 2685, 9005, 11, 420, 498, 291, 764, 4707, 2361, 4997, 11, 300, 309, 486, 1009, 362, 512, 300, 2139, 575, 257, 2685, 2158, 420, 307, 38901, 538, 257, 2685, 4978, 13, 51364, 51364], "temperature": 0.0, "avg_logprob": -0.11406206651167436, "compression_ratio": 1.6857142857142857, "no_caption_prob": 4.611096665030345e-05}, {"id": 329, "seek": 273700, "start": 2737.0, "end": 2752.0, "text": " So you're going to basically you're going to want to write tests whenever you can't prove anything by type system. So in my mind, there are at least two things for that. One, when you want to verify specific values among the wiggle room that you have, right?", "tokens": [50364, 407, 291, 434, 516, 281, 1936, 291, 434, 516, 281, 528, 281, 2464, 6921, 5699, 291, 393, 380, 7081, 1340, 538, 2010, 1185, 13, 407, 294, 452, 1575, 11, 456, 366, 412, 1935, 732, 721, 337, 300, 13, 1485, 11, 562, 291, 528, 281, 16888, 2685, 4190, 3654, 264, 33377, 1808, 300, 291, 362, 11, 558, 30, 51114, 51114], "temperature": 0.0, "avg_logprob": -0.13726970797679464, "compression_ratio": 1.5176470588235293, "no_caption_prob": 3.2887096494960133e-06}, {"id": 330, "seek": 275200, "start": 2752.0, "end": 2768.0, "text": " And two, whenever you want to prove things, things that can't be proven by the type system, including side effects, when your type system doesn't convey the information of which side effects are returned, then you're going to have to write the test for that.", "tokens": [50364, 400, 732, 11, 5699, 291, 528, 281, 7081, 721, 11, 721, 300, 393, 380, 312, 12785, 538, 264, 2010, 1185, 11, 3009, 1252, 5065, 11, 562, 428, 2010, 1185, 1177, 380, 16965, 264, 1589, 295, 597, 1252, 5065, 366, 8752, 11, 550, 291, 434, 516, 281, 362, 281, 2464, 264, 1500, 337, 300, 13, 51164, 51164], "temperature": 0.0, "avg_logprob": -0.04872473354997306, "compression_ratio": 1.6125, "no_caption_prob": 1.9525474272086285e-05}, {"id": 331, "seek": 276800, "start": 2768.0, "end": 2784.0, "text": " And also, if your type system is unsound, it's giving you some guarantees, but not everything. Like everything is nullable, like in Java, then you will want to have tests that prove that things are never null, things like that.", "tokens": [50364, 400, 611, 11, 498, 428, 2010, 1185, 307, 2693, 554, 11, 309, 311, 2902, 291, 512, 32567, 11, 457, 406, 1203, 13, 1743, 1203, 307, 18184, 712, 11, 411, 294, 10745, 11, 550, 291, 486, 528, 281, 362, 6921, 300, 7081, 300, 721, 366, 1128, 18184, 11, 721, 411, 300, 13, 51164, 51164, 407, 286, 519, 309, 311, 5240, 337, 729, 721, 13, 407, 562, 291, 362, 11, 291, 528, 281, 1500, 2685, 4190, 11, 562, 291, 528, 281, 1500, 1252, 5065, 11, 293, 562, 291, 528, 281, 1500, 721, 300, 393, 380, 312, 14617, 538, 428, 2010, 1185, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.07896889173067533, "compression_ratio": 1.8418803418803418, "no_caption_prob": 1.384579900332028e-05}, {"id": 332, "seek": 276800, "start": 2784.0, "end": 2797.0, "text": " So I think it's mostly for those things. So when you have, you want to test specific values, when you want to test side effects, and when you want to test things that can't be proved by your type system.", "tokens": [50364, 400, 611, 11, 498, 428, 2010, 1185, 307, 2693, 554, 11, 309, 311, 2902, 291, 512, 32567, 11, 457, 406, 1203, 13, 1743, 1203, 307, 18184, 712, 11, 411, 294, 10745, 11, 550, 291, 486, 528, 281, 362, 6921, 300, 7081, 300, 721, 366, 1128, 18184, 11, 721, 411, 300, 13, 51164, 51164, 407, 286, 519, 309, 311, 5240, 337, 729, 721, 13, 407, 562, 291, 362, 11, 291, 528, 281, 1500, 2685, 4190, 11, 562, 291, 528, 281, 1500, 1252, 5065, 11, 293, 562, 291, 528, 281, 1500, 721, 300, 393, 380, 312, 14617, 538, 428, 2010, 1185, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.07896889173067533, "compression_ratio": 1.8418803418803418, "no_caption_prob": 1.384579900332028e-05}, {"id": 333, "seek": 279700, "start": 2797.0, "end": 2818.0, "text": " Right. Yeah, I mean, types, to me are all about constraints. They describe and enforce constraints, and tests are about behavior. And there's an interplay. There are times when you'll want to capture a constraint in a test because it's very hard to express in the type.", "tokens": [50364, 1779, 13, 865, 11, 286, 914, 11, 3467, 11, 281, 385, 366, 439, 466, 18491, 13, 814, 6786, 293, 24825, 18491, 11, 293, 6921, 366, 466, 5223, 13, 400, 456, 311, 364, 728, 2858, 13, 821, 366, 1413, 562, 291, 603, 528, 281, 7983, 257, 25534, 294, 257, 1500, 570, 309, 311, 588, 1152, 281, 5109, 294, 264, 2010, 13, 51414, 51414], "temperature": 0.0, "avg_logprob": -0.11000263690948486, "compression_ratio": 1.5284090909090908, "no_caption_prob": 0.00043036870192736387}, {"id": 334, "seek": 281800, "start": 2818.0, "end": 2835.0, "text": " But yeah, a lot of the time, you describe your constraints and your types, and then you test the behavior in the tests. You just can't test the behavior with types. So yeah, I think to me, it's your business logic.", "tokens": [50364, 583, 1338, 11, 257, 688, 295, 264, 565, 11, 291, 6786, 428, 18491, 293, 428, 3467, 11, 293, 550, 291, 1500, 264, 5223, 294, 264, 6921, 13, 509, 445, 393, 380, 1500, 264, 5223, 365, 3467, 13, 407, 1338, 11, 286, 519, 281, 385, 11, 309, 311, 428, 1606, 9952, 13, 51214, 51214], "temperature": 0.0, "avg_logprob": -0.13806221701882102, "compression_ratio": 1.5070422535211268, "no_caption_prob": 0.00014198938151821494}, {"id": 335, "seek": 283500, "start": 2835.0, "end": 2854.0, "text": " Right. Now, I'm usually not going to be writing view tests because Martin Janacek recently gave an Elm Online talk where he was showcasing how he uses Elm Book to do this sort of storybook driven development style of writing view components in his Elm app.", "tokens": [50364, 1779, 13, 823, 11, 286, 478, 2673, 406, 516, 281, 312, 3579, 1910, 6921, 570, 9184, 4956, 617, 74, 3938, 2729, 364, 2699, 76, 16930, 751, 689, 415, 390, 29794, 3349, 577, 415, 4960, 2699, 76, 9476, 281, 360, 341, 1333, 295, 1657, 2939, 9555, 3250, 3758, 295, 3579, 1910, 6677, 294, 702, 2699, 76, 724, 13, 51314, 51314], "temperature": 0.0, "avg_logprob": -0.12288571185752993, "compression_ratio": 1.4222222222222223, "no_caption_prob": 0.00026114453794434667}, {"id": 336, "seek": 285400, "start": 2854.0, "end": 2881.0, "text": " And I thought that was very cool for, like, to me, that's pretty sufficient for testing visual elements, and I don't find much value to writing unit level tests for that. I think it's very valuable to have end to end tests, not integration tests that are faking things out, but end to end tests that are actually running through opening browser Cypress tests, things like that, to give you confidence in the system.", "tokens": [50364, 400, 286, 1194, 300, 390, 588, 1627, 337, 11, 411, 11, 281, 385, 11, 300, 311, 1238, 11563, 337, 4997, 5056, 4959, 11, 293, 286, 500, 380, 915, 709, 2158, 281, 3579, 4985, 1496, 6921, 337, 300, 13, 286, 519, 309, 311, 588, 8263, 281, 362, 917, 281, 917, 6921, 11, 406, 10980, 6921, 300, 366, 283, 2456, 721, 484, 11, 457, 917, 281, 917, 6921, 300, 366, 767, 2614, 807, 5193, 11185, 10295, 11637, 6921, 11, 721, 411, 300, 11, 281, 976, 291, 6687, 294, 264, 1185, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.11715957682619813, "compression_ratio": 1.7148760330578512, "no_caption_prob": 0.00011234299745410681}, {"id": 337, "seek": 288100, "start": 2881.0, "end": 2886.0, "text": " Oh, sorry. What if you have view code that has quite a bit of logic that returns HTML?", "tokens": [50364, 876, 11, 2597, 13, 708, 498, 291, 362, 1910, 3089, 300, 575, 1596, 257, 857, 295, 9952, 300, 11247, 17995, 30, 50614, 50614, 3769, 935, 13, 407, 294, 3331, 411, 300, 11, 286, 576, 3928, 281, 1217, 528, 300, 382, 257, 4994, 1500, 712, 4985, 300, 307, 1048, 9511, 538, 452, 1910, 9952, 11, 457, 406, 3974, 484, 439, 670, 294, 452, 1910, 3089, 13, 51364, 51364], "temperature": 0.0, "avg_logprob": -0.09475201454715453, "compression_ratio": 1.445054945054945, "no_caption_prob": 4.399954923428595e-05}, {"id": 338, "seek": 288100, "start": 2886.0, "end": 2901.0, "text": " Great point. So in cases like that, I would tend to already want that as a separate testable unit that is invoked by my view logic, but not spread out all over in my view code.", "tokens": [50364, 876, 11, 2597, 13, 708, 498, 291, 362, 1910, 3089, 300, 575, 1596, 257, 857, 295, 9952, 300, 11247, 17995, 30, 50614, 50614, 3769, 935, 13, 407, 294, 3331, 411, 300, 11, 286, 576, 3928, 281, 1217, 528, 300, 382, 257, 4994, 1500, 712, 4985, 300, 307, 1048, 9511, 538, 452, 1910, 9952, 11, 457, 406, 3974, 484, 439, 670, 294, 452, 1910, 3089, 13, 51364, 51364], "temperature": 0.0, "avg_logprob": -0.09475201454715453, "compression_ratio": 1.445054945054945, "no_caption_prob": 4.399954923428595e-05}, {"id": 339, "seek": 290100, "start": 2901.0, "end": 2919.0, "text": " Okay, so it's kind of like, wrap early, unwrap late. You unwrap to HTML as late as possible, but whatever logic you have, you want to do it with specific types or maybe even just primitives, but not HTML, which is harder to test.", "tokens": [50364, 1033, 11, 370, 309, 311, 733, 295, 411, 11, 7019, 2440, 11, 14853, 4007, 3469, 13, 509, 14853, 4007, 281, 17995, 382, 3469, 382, 1944, 11, 457, 2035, 9952, 291, 362, 11, 291, 528, 281, 360, 309, 365, 2685, 3467, 420, 1310, 754, 445, 2886, 38970, 11, 457, 406, 17995, 11, 597, 307, 6081, 281, 1500, 13, 51264, 51264], "temperature": 0.0, "avg_logprob": -0.07839288867887903, "compression_ratio": 1.4049079754601228, "no_caption_prob": 0.00010552873573033139}, {"id": 340, "seek": 291900, "start": 2919.0, "end": 2945.0, "text": " Yeah, and, and like, to me, I want to split out my business logic from my view logic and templating it to me is like if I'm writing a test that's testing my templating, it's just, it's just writing the same thing twice and it and coupling me in a way where I change this thing, this thing breaks, it just feels like brittle tests.", "tokens": [50364, 865, 11, 293, 11, 293, 411, 11, 281, 385, 11, 286, 528, 281, 7472, 484, 452, 1606, 9952, 490, 452, 1910, 9952, 293, 9100, 990, 309, 281, 385, 307, 411, 498, 286, 478, 3579, 257, 1500, 300, 311, 4997, 452, 9100, 990, 11, 309, 311, 445, 11, 309, 311, 445, 3579, 264, 912, 551, 6091, 293, 309, 293, 37447, 385, 294, 257, 636, 689, 286, 1319, 341, 551, 11, 341, 551, 9857, 11, 309, 445, 3417, 411, 49325, 6921, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.15670673052469888, "compression_ratio": 1.7553191489361701, "no_caption_prob": 0.00013133070024196059}, {"id": 341, "seek": 294500, "start": 2945.0, "end": 2954.0, "text": " It doesn't feel valuable to me. It doesn't feel like it's preventing me from causing bugs. It just feels like it's slowing me down from making changes in the system and making it more frustrating.", "tokens": [50364, 467, 1177, 380, 841, 8263, 281, 385, 13, 467, 1177, 380, 841, 411, 309, 311, 19965, 385, 490, 9853, 15120, 13, 467, 445, 3417, 411, 309, 311, 26958, 385, 760, 490, 1455, 2962, 294, 264, 1185, 293, 1455, 309, 544, 16522, 13, 50814, 50814, 865, 11, 3122, 13, 286, 390, 5240, 1953, 295, 411, 11, 498, 291, 362, 9819, 278, 4188, 1124, 294, 428, 1910, 3089, 13, 51114, 51114], "temperature": 0.0, "avg_logprob": -0.06326866149902344, "compression_ratio": 1.5989304812834224, "no_caption_prob": 2.753480657702312e-05}, {"id": 342, "seek": 294500, "start": 2954.0, "end": 2960.0, "text": " Yeah, absolutely. I was mostly thinking of like, if you have branching conditionals in your view code.", "tokens": [50364, 467, 1177, 380, 841, 8263, 281, 385, 13, 467, 1177, 380, 841, 411, 309, 311, 19965, 385, 490, 9853, 15120, 13, 467, 445, 3417, 411, 309, 311, 26958, 385, 760, 490, 1455, 2962, 294, 264, 1185, 293, 1455, 309, 544, 16522, 13, 50814, 50814, 865, 11, 3122, 13, 286, 390, 5240, 1953, 295, 411, 11, 498, 291, 362, 9819, 278, 4188, 1124, 294, 428, 1910, 3089, 13, 51114, 51114], "temperature": 0.0, "avg_logprob": -0.06326866149902344, "compression_ratio": 1.5989304812834224, "no_caption_prob": 2.753480657702312e-05}, {"id": 343, "seek": 296000, "start": 2960.0, "end": 2989.0, "text": " Right, right. So, so like, for example, if there's like, you know, I don't know, you could have like, how do you render, you could have some complex logic for how you you render names based on, you know, if there's a, if it's a guest login, or if there's a last name or if there's a username or you, you know, you pick this display name to use or, you know, you could have complex logic with lots of branching and lots of complexity.", "tokens": [50364, 1779, 11, 558, 13, 407, 11, 370, 411, 11, 337, 1365, 11, 498, 456, 311, 411, 11, 291, 458, 11, 286, 500, 380, 458, 11, 291, 727, 362, 411, 11, 577, 360, 291, 15529, 11, 291, 727, 362, 512, 3997, 9952, 337, 577, 291, 291, 15529, 5288, 2361, 322, 11, 291, 458, 11, 498, 456, 311, 257, 11, 498, 309, 311, 257, 8341, 24276, 11, 420, 498, 456, 311, 257, 1036, 1315, 420, 498, 456, 311, 257, 30351, 420, 291, 11, 291, 458, 11, 291, 1888, 341, 4674, 1315, 281, 764, 420, 11, 291, 458, 11, 291, 727, 362, 3997, 9952, 365, 3195, 295, 9819, 278, 293, 3195, 295, 14024, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.09901690275772758, "compression_ratio": 2.0917874396135265, "no_caption_prob": 0.00012338232772890478}, {"id": 344, "seek": 298900, "start": 2989.0, "end": 3000.0, "text": " That feels like business logic, right? The, the key thing is it feels like business logic, then I'm going to want to encapsulate that and invoke that from my view template.", "tokens": [50364, 663, 3417, 411, 1606, 9952, 11, 558, 30, 440, 11, 264, 2141, 551, 307, 309, 3417, 411, 1606, 9952, 11, 550, 286, 478, 516, 281, 528, 281, 38745, 5256, 300, 293, 41117, 300, 490, 452, 1910, 12379, 13, 50914, 50914, 583, 286, 528, 452, 1910, 12379, 281, 312, 733, 295, 10316, 13, 400, 286, 500, 380, 534, 528, 281, 1500, 300, 807, 4985, 6921, 13, 583, 286, 360, 528, 281, 4985, 1500, 452, 1606, 9952, 13, 400, 286, 519, 341, 307, 534, 7115, 307, 309, 311, 411, 11, 309, 311, 445, 257, 5389, 293, 257, 7164, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.08677372129836886, "compression_ratio": 1.8409090909090908, "no_caption_prob": 1.406374303769553e-05}, {"id": 345, "seek": 298900, "start": 3000.0, "end": 3015.0, "text": " But I want my view template to be kind of dumb. And I don't really want to test that through unit tests. But I do want to unit test my business logic. And I think this is really essential is it's like, it's just a skill and a habit.", "tokens": [50364, 663, 3417, 411, 1606, 9952, 11, 558, 30, 440, 11, 264, 2141, 551, 307, 309, 3417, 411, 1606, 9952, 11, 550, 286, 478, 516, 281, 528, 281, 38745, 5256, 300, 293, 41117, 300, 490, 452, 1910, 12379, 13, 50914, 50914, 583, 286, 528, 452, 1910, 12379, 281, 312, 733, 295, 10316, 13, 400, 286, 500, 380, 534, 528, 281, 1500, 300, 807, 4985, 6921, 13, 583, 286, 360, 528, 281, 4985, 1500, 452, 1606, 9952, 13, 400, 286, 519, 341, 307, 534, 7115, 307, 309, 311, 411, 11, 309, 311, 445, 257, 5389, 293, 257, 7164, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.08677372129836886, "compression_ratio": 1.8409090909090908, "no_caption_prob": 1.406374303769553e-05}, {"id": 346, "seek": 301500, "start": 3015.0, "end": 3034.0, "text": " It's kind of hard to learn without just sitting next to somebody who's done this a lot and probably sat next to somebody else who had done it a lot. You know, you go up the chain enough, and then there's probably somebody that sat next to Kent Beck and did it a lot and Kent Beck came up with this discipline, right?", "tokens": [50364, 467, 311, 733, 295, 1152, 281, 1466, 1553, 445, 3798, 958, 281, 2618, 567, 311, 1096, 341, 257, 688, 293, 1391, 3227, 958, 281, 2618, 1646, 567, 632, 1096, 309, 257, 688, 13, 509, 458, 11, 291, 352, 493, 264, 5021, 1547, 11, 293, 550, 456, 311, 1391, 2618, 300, 3227, 958, 281, 15843, 19184, 293, 630, 309, 257, 688, 293, 15843, 19184, 1361, 493, 365, 341, 13635, 11, 558, 30, 51314, 51314], "temperature": 0.0, "avg_logprob": -0.09196504592895507, "compression_ratio": 1.6544502617801047, "no_caption_prob": 1.9222599803470075e-05}, {"id": 347, "seek": 303400, "start": 3034.0, "end": 3050.0, "text": " But that's kind of like the easiest way to learn how to decide what to separate out as business logic. Like it's this design sense that you, it's hard to just learn naturally by thinking it through. But, but to me, that's how I think about it.", "tokens": [50364, 583, 300, 311, 733, 295, 411, 264, 12889, 636, 281, 1466, 577, 281, 4536, 437, 281, 4994, 484, 382, 1606, 9952, 13, 1743, 309, 311, 341, 1715, 2020, 300, 291, 11, 309, 311, 1152, 281, 445, 1466, 8195, 538, 1953, 309, 807, 13, 583, 11, 457, 281, 385, 11, 300, 311, 577, 286, 519, 466, 309, 13, 51164, 51164, 10715, 9952, 11, 286, 528, 281, 38745, 5256, 300, 484, 4079, 382, 257, 4985, 293, 550, 1500, 300, 4985, 13, 407, 11, 370, 4985, 4997, 11, 15213, 484, 437, 264, 6815, 366, 307, 588, 1152, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.07747560558897076, "compression_ratio": 1.675, "no_caption_prob": 6.339177616609959e-06}, {"id": 348, "seek": 303400, "start": 3050.0, "end": 3059.0, "text": " Business logic, I want to encapsulate that out somewhere as a unit and then test that unit. So, so unit testing, figuring out what the units are is very hard.", "tokens": [50364, 583, 300, 311, 733, 295, 411, 264, 12889, 636, 281, 1466, 577, 281, 4536, 437, 281, 4994, 484, 382, 1606, 9952, 13, 1743, 309, 311, 341, 1715, 2020, 300, 291, 11, 309, 311, 1152, 281, 445, 1466, 8195, 538, 1953, 309, 807, 13, 583, 11, 457, 281, 385, 11, 300, 311, 577, 286, 519, 466, 309, 13, 51164, 51164, 10715, 9952, 11, 286, 528, 281, 38745, 5256, 300, 484, 4079, 382, 257, 4985, 293, 550, 1500, 300, 4985, 13, 407, 11, 370, 4985, 4997, 11, 15213, 484, 437, 264, 6815, 366, 307, 588, 1152, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.07747560558897076, "compression_ratio": 1.675, "no_caption_prob": 6.339177616609959e-06}, {"id": 349, "seek": 305900, "start": 3059.0, "end": 3069.0, "text": " Okay, I'm starting to think we're getting at the point where we need to answer the question. Dillon, types or tests?", "tokens": [50364, 1033, 11, 286, 478, 2891, 281, 519, 321, 434, 1242, 412, 264, 935, 689, 321, 643, 281, 1867, 264, 1168, 13, 28160, 11, 3467, 420, 6921, 30, 50864, 50864, 2574, 10653, 13, 50914, 50914, 1265, 11, 3044, 10170, 3508, 13, 51064, 51064, 286, 767, 500, 380, 754, 458, 13, 2014, 321, 4350, 281, 11902, 322, 341, 6477, 30, 51264, 51264, 883, 11, 286, 500, 380, 519, 321, 1562, 362, 13, 51414, 51414, 663, 806, 299, 1226, 257, 588, 2068, 4134, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.17809918347526998, "compression_ratio": 1.4322916666666667, "no_caption_prob": 0.00011059551616199315}, {"id": 350, "seek": 305900, "start": 3069.0, "end": 3070.0, "text": " Tweps.", "tokens": [50364, 1033, 11, 286, 478, 2891, 281, 519, 321, 434, 1242, 412, 264, 935, 689, 321, 643, 281, 1867, 264, 1168, 13, 28160, 11, 3467, 420, 6921, 30, 50864, 50864, 2574, 10653, 13, 50914, 50914, 1265, 11, 3044, 10170, 3508, 13, 51064, 51064, 286, 767, 500, 380, 754, 458, 13, 2014, 321, 4350, 281, 11902, 322, 341, 6477, 30, 51264, 51264, 883, 11, 286, 500, 380, 519, 321, 1562, 362, 13, 51414, 51414, 663, 806, 299, 1226, 257, 588, 2068, 4134, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.17809918347526998, "compression_ratio": 1.4322916666666667, "no_caption_prob": 0.00011059551616199315}, {"id": 351, "seek": 305900, "start": 3070.0, "end": 3073.0, "text": " God, goddammit.", "tokens": [50364, 1033, 11, 286, 478, 2891, 281, 519, 321, 434, 1242, 412, 264, 935, 689, 321, 643, 281, 1867, 264, 1168, 13, 28160, 11, 3467, 420, 6921, 30, 50864, 50864, 2574, 10653, 13, 50914, 50914, 1265, 11, 3044, 10170, 3508, 13, 51064, 51064, 286, 767, 500, 380, 754, 458, 13, 2014, 321, 4350, 281, 11902, 322, 341, 6477, 30, 51264, 51264, 883, 11, 286, 500, 380, 519, 321, 1562, 362, 13, 51414, 51414, 663, 806, 299, 1226, 257, 588, 2068, 4134, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.17809918347526998, "compression_ratio": 1.4322916666666667, "no_caption_prob": 0.00011059551616199315}, {"id": 352, "seek": 305900, "start": 3073.0, "end": 3077.0, "text": " I actually don't even know. Are we allowed to swear on this radio?", "tokens": [50364, 1033, 11, 286, 478, 2891, 281, 519, 321, 434, 1242, 412, 264, 935, 689, 321, 643, 281, 1867, 264, 1168, 13, 28160, 11, 3467, 420, 6921, 30, 50864, 50864, 2574, 10653, 13, 50914, 50914, 1265, 11, 3044, 10170, 3508, 13, 51064, 51064, 286, 767, 500, 380, 754, 458, 13, 2014, 321, 4350, 281, 11902, 322, 341, 6477, 30, 51264, 51264, 883, 11, 286, 500, 380, 519, 321, 1562, 362, 13, 51414, 51414, 663, 806, 299, 1226, 257, 588, 2068, 4134, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.17809918347526998, "compression_ratio": 1.4322916666666667, "no_caption_prob": 0.00011059551616199315}, {"id": 353, "seek": 305900, "start": 3077.0, "end": 3080.0, "text": " No, I don't think we ever have.", "tokens": [50364, 1033, 11, 286, 478, 2891, 281, 519, 321, 434, 1242, 412, 264, 935, 689, 321, 643, 281, 1867, 264, 1168, 13, 28160, 11, 3467, 420, 6921, 30, 50864, 50864, 2574, 10653, 13, 50914, 50914, 1265, 11, 3044, 10170, 3508, 13, 51064, 51064, 286, 767, 500, 380, 754, 458, 13, 2014, 321, 4350, 281, 11902, 322, 341, 6477, 30, 51264, 51264, 883, 11, 286, 500, 380, 519, 321, 1562, 362, 13, 51414, 51414, 663, 806, 299, 1226, 257, 588, 2068, 4134, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.17809918347526998, "compression_ratio": 1.4322916666666667, "no_caption_prob": 0.00011059551616199315}, {"id": 354, "seek": 305900, "start": 3080.0, "end": 3088.0, "text": " That elicited a very strong response.", "tokens": [50364, 1033, 11, 286, 478, 2891, 281, 519, 321, 434, 1242, 412, 264, 935, 689, 321, 643, 281, 1867, 264, 1168, 13, 28160, 11, 3467, 420, 6921, 30, 50864, 50864, 2574, 10653, 13, 50914, 50914, 1265, 11, 3044, 10170, 3508, 13, 51064, 51064, 286, 767, 500, 380, 754, 458, 13, 2014, 321, 4350, 281, 11902, 322, 341, 6477, 30, 51264, 51264, 883, 11, 286, 500, 380, 519, 321, 1562, 362, 13, 51414, 51414, 663, 806, 299, 1226, 257, 588, 2068, 4134, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.17809918347526998, "compression_ratio": 1.4322916666666667, "no_caption_prob": 0.00011059551616199315}, {"id": 355, "seek": 308800, "start": 3088.0, "end": 3095.0, "text": " Yeah, let's imagine you only had the choice between writing tests or writing types. What would you prefer?", "tokens": [50364, 865, 11, 718, 311, 3811, 291, 787, 632, 264, 3922, 1296, 3579, 6921, 420, 3579, 3467, 13, 708, 576, 291, 4382, 30, 50714, 50714, 1057, 286, 362, 281, 584, 307, 11, 498, 291, 632, 37140, 428, 18491, 1101, 294, 428, 1944, 13019, 11, 550, 286, 2759, 380, 362, 668, 1075, 281, 4196, 300, 636, 13, 51214, 51214, 865, 11, 457, 1203, 291, 584, 307, 445, 6798, 356, 33941, 13, 51464, 51464, 663, 311, 2074, 13, 2621, 1379, 7367, 307, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.11093814032418388, "compression_ratio": 1.540909090909091, "no_caption_prob": 5.828898792969994e-05}, {"id": 356, "seek": 308800, "start": 3095.0, "end": 3105.0, "text": " All I have to say is, if you had modeled your constraints better in your possible responses, then I wouldn't have been able to respond that way.", "tokens": [50364, 865, 11, 718, 311, 3811, 291, 787, 632, 264, 3922, 1296, 3579, 6921, 420, 3579, 3467, 13, 708, 576, 291, 4382, 30, 50714, 50714, 1057, 286, 362, 281, 584, 307, 11, 498, 291, 632, 37140, 428, 18491, 1101, 294, 428, 1944, 13019, 11, 550, 286, 2759, 380, 362, 668, 1075, 281, 4196, 300, 636, 13, 51214, 51214, 865, 11, 457, 1203, 291, 584, 307, 445, 6798, 356, 33941, 13, 51464, 51464, 663, 311, 2074, 13, 2621, 1379, 7367, 307, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.11093814032418388, "compression_ratio": 1.540909090909091, "no_caption_prob": 5.828898792969994e-05}, {"id": 357, "seek": 308800, "start": 3105.0, "end": 3110.0, "text": " Yeah, but everything you say is just stringly typed.", "tokens": [50364, 865, 11, 718, 311, 3811, 291, 787, 632, 264, 3922, 1296, 3579, 6921, 420, 3579, 3467, 13, 708, 576, 291, 4382, 30, 50714, 50714, 1057, 286, 362, 281, 584, 307, 11, 498, 291, 632, 37140, 428, 18491, 1101, 294, 428, 1944, 13019, 11, 550, 286, 2759, 380, 362, 668, 1075, 281, 4196, 300, 636, 13, 51214, 51214, 865, 11, 457, 1203, 291, 584, 307, 445, 6798, 356, 33941, 13, 51464, 51464, 663, 311, 2074, 13, 2621, 1379, 7367, 307, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.11093814032418388, "compression_ratio": 1.540909090909091, "no_caption_prob": 5.828898792969994e-05}, {"id": 358, "seek": 308800, "start": 3110.0, "end": 3112.0, "text": " That's true. Our whole podcast is.", "tokens": [50364, 865, 11, 718, 311, 3811, 291, 787, 632, 264, 3922, 1296, 3579, 6921, 420, 3579, 3467, 13, 708, 576, 291, 4382, 30, 50714, 50714, 1057, 286, 362, 281, 584, 307, 11, 498, 291, 632, 37140, 428, 18491, 1101, 294, 428, 1944, 13019, 11, 550, 286, 2759, 380, 362, 668, 1075, 281, 4196, 300, 636, 13, 51214, 51214, 865, 11, 457, 1203, 291, 584, 307, 445, 6798, 356, 33941, 13, 51464, 51464, 663, 311, 2074, 13, 2621, 1379, 7367, 307, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.11093814032418388, "compression_ratio": 1.540909090909091, "no_caption_prob": 5.828898792969994e-05}, {"id": 359, "seek": 311200, "start": 3112.0, "end": 3118.0, "text": " I'm working against your interface and you only return strings.", "tokens": [50364, 286, 478, 1364, 1970, 428, 9226, 293, 291, 787, 2736, 13985, 13, 50664, 50664, 2704, 13985, 30, 50764, 50764, 2704, 13985, 11, 570, 291, 727, 1066, 12784, 13, 50914, 50914, 7587, 13, 467, 311, 1152, 337, 11, 286, 914, 11, 286, 17839, 393, 380, 652, 493, 452, 1575, 13, 286, 534, 393, 380, 13, 1743, 11, 291, 393, 380, 652, 385, 2826, 1296, 452, 2227, 13, 286, 959, 552, 1293, 13, 51614, 51614, 509, 500, 380, 362, 604, 2227, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.11432751019795735, "compression_ratio": 1.5376884422110553, "no_caption_prob": 7.030829146970063e-05}, {"id": 360, "seek": 311200, "start": 3118.0, "end": 3120.0, "text": " Maybe strings?", "tokens": [50364, 286, 478, 1364, 1970, 428, 9226, 293, 291, 787, 2736, 13985, 13, 50664, 50664, 2704, 13985, 30, 50764, 50764, 2704, 13985, 11, 570, 291, 727, 1066, 12784, 13, 50914, 50914, 7587, 13, 467, 311, 1152, 337, 11, 286, 914, 11, 286, 17839, 393, 380, 652, 493, 452, 1575, 13, 286, 534, 393, 380, 13, 1743, 11, 291, 393, 380, 652, 385, 2826, 1296, 452, 2227, 13, 286, 959, 552, 1293, 13, 51614, 51614, 509, 500, 380, 362, 604, 2227, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.11432751019795735, "compression_ratio": 1.5376884422110553, "no_caption_prob": 7.030829146970063e-05}, {"id": 361, "seek": 311200, "start": 3120.0, "end": 3123.0, "text": " Maybe strings, because you could keep silent.", "tokens": [50364, 286, 478, 1364, 1970, 428, 9226, 293, 291, 787, 2736, 13985, 13, 50664, 50664, 2704, 13985, 30, 50764, 50764, 2704, 13985, 11, 570, 291, 727, 1066, 12784, 13, 50914, 50914, 7587, 13, 467, 311, 1152, 337, 11, 286, 914, 11, 286, 17839, 393, 380, 652, 493, 452, 1575, 13, 286, 534, 393, 380, 13, 1743, 11, 291, 393, 380, 652, 385, 2826, 1296, 452, 2227, 13, 286, 959, 552, 1293, 13, 51614, 51614, 509, 500, 380, 362, 604, 2227, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.11432751019795735, "compression_ratio": 1.5376884422110553, "no_caption_prob": 7.030829146970063e-05}, {"id": 362, "seek": 311200, "start": 3123.0, "end": 3137.0, "text": " Exactly. It's hard for, I mean, I genuinely can't make up my mind. I really can't. Like, you can't make me choose between my children. I love them both.", "tokens": [50364, 286, 478, 1364, 1970, 428, 9226, 293, 291, 787, 2736, 13985, 13, 50664, 50664, 2704, 13985, 30, 50764, 50764, 2704, 13985, 11, 570, 291, 727, 1066, 12784, 13, 50914, 50914, 7587, 13, 467, 311, 1152, 337, 11, 286, 914, 11, 286, 17839, 393, 380, 652, 493, 452, 1575, 13, 286, 534, 393, 380, 13, 1743, 11, 291, 393, 380, 652, 385, 2826, 1296, 452, 2227, 13, 286, 959, 552, 1293, 13, 51614, 51614, 509, 500, 380, 362, 604, 2227, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.11432751019795735, "compression_ratio": 1.5376884422110553, "no_caption_prob": 7.030829146970063e-05}, {"id": 363, "seek": 311200, "start": 3137.0, "end": 3140.0, "text": " You don't have any children.", "tokens": [50364, 286, 478, 1364, 1970, 428, 9226, 293, 291, 787, 2736, 13985, 13, 50664, 50664, 2704, 13985, 30, 50764, 50764, 2704, 13985, 11, 570, 291, 727, 1066, 12784, 13, 50914, 50914, 7587, 13, 467, 311, 1152, 337, 11, 286, 914, 11, 286, 17839, 393, 380, 652, 493, 452, 1575, 13, 286, 534, 393, 380, 13, 1743, 11, 291, 393, 380, 652, 385, 2826, 1296, 452, 2227, 13, 286, 959, 552, 1293, 13, 51614, 51614, 509, 500, 380, 362, 604, 2227, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.11432751019795735, "compression_ratio": 1.5376884422110553, "no_caption_prob": 7.030829146970063e-05}, {"id": 364, "seek": 314000, "start": 3140.0, "end": 3152.0, "text": " And more importantly, you don't need to choose one or the other. Like, what about it takes away from the other thing? They enhance each other.", "tokens": [50364, 400, 544, 8906, 11, 291, 500, 380, 643, 281, 2826, 472, 420, 264, 661, 13, 1743, 11, 437, 466, 309, 2516, 1314, 490, 264, 661, 551, 30, 814, 11985, 1184, 661, 13, 50964, 50964, 509, 727, 2464, 15778, 293, 500, 380, 362, 2105, 281, 3467, 13, 51164, 51164, 1779, 13, 1042, 11, 291, 727, 11, 420, 291, 727, 2464, 2699, 76, 13, 51314, 51314, 1042, 11, 300, 311, 257, 11928, 3922, 13, 51464, 51464, 407, 286, 519, 11, 360, 291, 362, 364, 4800, 30, 821, 311, 746, 286, 528, 281, 2152, 11, 457, 949, 286, 360, 11, 437, 576, 291, 2826, 30, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.10908479510613207, "compression_ratio": 1.5853658536585367, "no_caption_prob": 6.920150917721912e-05}, {"id": 365, "seek": 314000, "start": 3152.0, "end": 3156.0, "text": " You could write JavaScript and don't have access to types.", "tokens": [50364, 400, 544, 8906, 11, 291, 500, 380, 643, 281, 2826, 472, 420, 264, 661, 13, 1743, 11, 437, 466, 309, 2516, 1314, 490, 264, 661, 551, 30, 814, 11985, 1184, 661, 13, 50964, 50964, 509, 727, 2464, 15778, 293, 500, 380, 362, 2105, 281, 3467, 13, 51164, 51164, 1779, 13, 1042, 11, 291, 727, 11, 420, 291, 727, 2464, 2699, 76, 13, 51314, 51314, 1042, 11, 300, 311, 257, 11928, 3922, 13, 51464, 51464, 407, 286, 519, 11, 360, 291, 362, 364, 4800, 30, 821, 311, 746, 286, 528, 281, 2152, 11, 457, 949, 286, 360, 11, 437, 576, 291, 2826, 30, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.10908479510613207, "compression_ratio": 1.5853658536585367, "no_caption_prob": 6.920150917721912e-05}, {"id": 366, "seek": 314000, "start": 3156.0, "end": 3159.0, "text": " Right. Well, you could, or you could write Elm.", "tokens": [50364, 400, 544, 8906, 11, 291, 500, 380, 643, 281, 2826, 472, 420, 264, 661, 13, 1743, 11, 437, 466, 309, 2516, 1314, 490, 264, 661, 551, 30, 814, 11985, 1184, 661, 13, 50964, 50964, 509, 727, 2464, 15778, 293, 500, 380, 362, 2105, 281, 3467, 13, 51164, 51164, 1779, 13, 1042, 11, 291, 727, 11, 420, 291, 727, 2464, 2699, 76, 13, 51314, 51314, 1042, 11, 300, 311, 257, 11928, 3922, 13, 51464, 51464, 407, 286, 519, 11, 360, 291, 362, 364, 4800, 30, 821, 311, 746, 286, 528, 281, 2152, 11, 457, 949, 286, 360, 11, 437, 576, 291, 2826, 30, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.10908479510613207, "compression_ratio": 1.5853658536585367, "no_caption_prob": 6.920150917721912e-05}, {"id": 367, "seek": 314000, "start": 3159.0, "end": 3162.0, "text": " Well, that's a bold choice.", "tokens": [50364, 400, 544, 8906, 11, 291, 500, 380, 643, 281, 2826, 472, 420, 264, 661, 13, 1743, 11, 437, 466, 309, 2516, 1314, 490, 264, 661, 551, 30, 814, 11985, 1184, 661, 13, 50964, 50964, 509, 727, 2464, 15778, 293, 500, 380, 362, 2105, 281, 3467, 13, 51164, 51164, 1779, 13, 1042, 11, 291, 727, 11, 420, 291, 727, 2464, 2699, 76, 13, 51314, 51314, 1042, 11, 300, 311, 257, 11928, 3922, 13, 51464, 51464, 407, 286, 519, 11, 360, 291, 362, 364, 4800, 30, 821, 311, 746, 286, 528, 281, 2152, 11, 457, 949, 286, 360, 11, 437, 576, 291, 2826, 30, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.10908479510613207, "compression_ratio": 1.5853658536585367, "no_caption_prob": 6.920150917721912e-05}, {"id": 368, "seek": 314000, "start": 3162.0, "end": 3168.0, "text": " So I think, do you have an opinion? There's something I want to mention, but before I do, what would you choose?", "tokens": [50364, 400, 544, 8906, 11, 291, 500, 380, 643, 281, 2826, 472, 420, 264, 661, 13, 1743, 11, 437, 466, 309, 2516, 1314, 490, 264, 661, 551, 30, 814, 11985, 1184, 661, 13, 50964, 50964, 509, 727, 2464, 15778, 293, 500, 380, 362, 2105, 281, 3467, 13, 51164, 51164, 1779, 13, 1042, 11, 291, 727, 11, 420, 291, 727, 2464, 2699, 76, 13, 51314, 51314, 1042, 11, 300, 311, 257, 11928, 3922, 13, 51464, 51464, 407, 286, 519, 11, 360, 291, 362, 364, 4800, 30, 821, 311, 746, 286, 528, 281, 2152, 11, 457, 949, 286, 360, 11, 437, 576, 291, 2826, 30, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.10908479510613207, "compression_ratio": 1.5853658536585367, "no_caption_prob": 6.920150917721912e-05}, {"id": 369, "seek": 316800, "start": 3168.0, "end": 3170.0, "text": " I would totally choose types.", "tokens": [50364, 286, 576, 3879, 2826, 3467, 13, 50464, 50464, 286, 26439, 382, 709, 13, 1545, 360, 291, 519, 300, 307, 30, 50614, 50614, 865, 11, 570, 286, 611, 848, 11, 411, 11, 286, 500, 380, 2464, 300, 867, 6921, 570, 286, 841, 411, 286, 38901, 300, 33377, 1808, 1547, 337, 385, 281, 406, 2082, 493, 886, 2049, 13, 51214, 51214], "temperature": 0.0, "avg_logprob": -0.1019360432859327, "compression_ratio": 1.4110429447852761, "no_caption_prob": 0.00011410228034947067}, {"id": 370, "seek": 316800, "start": 3170.0, "end": 3173.0, "text": " I suspected as much. Why do you think that is?", "tokens": [50364, 286, 576, 3879, 2826, 3467, 13, 50464, 50464, 286, 26439, 382, 709, 13, 1545, 360, 291, 519, 300, 307, 30, 50614, 50614, 865, 11, 570, 286, 611, 848, 11, 411, 11, 286, 500, 380, 2464, 300, 867, 6921, 570, 286, 841, 411, 286, 38901, 300, 33377, 1808, 1547, 337, 385, 281, 406, 2082, 493, 886, 2049, 13, 51214, 51214], "temperature": 0.0, "avg_logprob": -0.1019360432859327, "compression_ratio": 1.4110429447852761, "no_caption_prob": 0.00011410228034947067}, {"id": 371, "seek": 316800, "start": 3173.0, "end": 3185.0, "text": " Yeah, because I also said, like, I don't write that many tests because I feel like I constrained that wiggle room enough for me to not mess up too often.", "tokens": [50364, 286, 576, 3879, 2826, 3467, 13, 50464, 50464, 286, 26439, 382, 709, 13, 1545, 360, 291, 519, 300, 307, 30, 50614, 50614, 865, 11, 570, 286, 611, 848, 11, 411, 11, 286, 500, 380, 2464, 300, 867, 6921, 570, 286, 841, 411, 286, 38901, 300, 33377, 1808, 1547, 337, 385, 281, 406, 2082, 493, 886, 2049, 13, 51214, 51214], "temperature": 0.0, "avg_logprob": -0.1019360432859327, "compression_ratio": 1.4110429447852761, "no_caption_prob": 0.00011410228034947067}, {"id": 372, "seek": 318500, "start": 3185.0, "end": 3205.0, "text": " But also, like, the experience between writing unit tests and types is so different because for writing unit tests, you need to have a somewhat clear understanding of the API, where if you change it, you're going to have to change to update your unit tests.", "tokens": [50364, 583, 611, 11, 411, 11, 264, 1752, 1296, 3579, 4985, 6921, 293, 3467, 307, 370, 819, 570, 337, 3579, 4985, 6921, 11, 291, 643, 281, 362, 257, 8344, 1850, 3701, 295, 264, 9362, 11, 689, 498, 291, 1319, 309, 11, 291, 434, 516, 281, 362, 281, 1319, 281, 5623, 428, 4985, 6921, 13, 51364, 51364, 583, 611, 264, 1752, 295, 5006, 2663, 307, 516, 281, 312, 588, 819, 337, 309, 562, 291, 362, 1500, 20774, 5717, 562, 291, 362, 31958, 13603, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.12396760319554528, "compression_ratio": 1.8026905829596414, "no_caption_prob": 7.183135494415183e-06}, {"id": 373, "seek": 318500, "start": 3205.0, "end": 3213.0, "text": " But also the experience of finding issues is going to be very different for it when you have test failures versus when you have compiler errors.", "tokens": [50364, 583, 611, 11, 411, 11, 264, 1752, 1296, 3579, 4985, 6921, 293, 3467, 307, 370, 819, 570, 337, 3579, 4985, 6921, 11, 291, 643, 281, 362, 257, 8344, 1850, 3701, 295, 264, 9362, 11, 689, 498, 291, 1319, 309, 11, 291, 434, 516, 281, 362, 281, 1319, 281, 5623, 428, 4985, 6921, 13, 51364, 51364, 583, 611, 264, 1752, 295, 5006, 2663, 307, 516, 281, 312, 588, 819, 337, 309, 562, 291, 362, 1500, 20774, 5717, 562, 291, 362, 31958, 13603, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.12396760319554528, "compression_ratio": 1.8026905829596414, "no_caption_prob": 7.183135494415183e-06}, {"id": 374, "seek": 321300, "start": 3213.0, "end": 3225.0, "text": " So if you change your code, your types or your tests, no, your production code or your types, then unit tests will just start breaking, right?", "tokens": [50364, 407, 498, 291, 1319, 428, 3089, 11, 428, 3467, 420, 428, 6921, 11, 572, 11, 428, 4265, 3089, 420, 428, 3467, 11, 550, 4985, 6921, 486, 445, 722, 7697, 11, 558, 30, 50964, 50964, 814, 486, 584, 11, 4177, 11, 291, 600, 658, 281, 11, 341, 307, 406, 12678, 264, 3006, 551, 420, 309, 28642, 337, 512, 1778, 13, 51264, 51264, 400, 291, 434, 516, 281, 362, 281, 2573, 484, 1803, 689, 264, 1154, 9134, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.1110766053199768, "compression_ratio": 1.592039800995025, "no_caption_prob": 1.2606305062945466e-05}, {"id": 375, "seek": 321300, "start": 3225.0, "end": 3231.0, "text": " They will say, hey, you've got to, this is not returning the correct thing or it crashes for some reason.", "tokens": [50364, 407, 498, 291, 1319, 428, 3089, 11, 428, 3467, 420, 428, 6921, 11, 572, 11, 428, 4265, 3089, 420, 428, 3467, 11, 550, 4985, 6921, 486, 445, 722, 7697, 11, 558, 30, 50964, 50964, 814, 486, 584, 11, 4177, 11, 291, 600, 658, 281, 11, 341, 307, 406, 12678, 264, 3006, 551, 420, 309, 28642, 337, 512, 1778, 13, 51264, 51264, 400, 291, 434, 516, 281, 362, 281, 2573, 484, 1803, 689, 264, 1154, 9134, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.1110766053199768, "compression_ratio": 1.592039800995025, "no_caption_prob": 1.2606305062945466e-05}, {"id": 376, "seek": 321300, "start": 3231.0, "end": 3235.0, "text": " And you're going to have to figure out yourself where the problem lies.", "tokens": [50364, 407, 498, 291, 1319, 428, 3089, 11, 428, 3467, 420, 428, 6921, 11, 572, 11, 428, 4265, 3089, 420, 428, 3467, 11, 550, 4985, 6921, 486, 445, 722, 7697, 11, 558, 30, 50964, 50964, 814, 486, 584, 11, 4177, 11, 291, 600, 658, 281, 11, 341, 307, 406, 12678, 264, 3006, 551, 420, 309, 28642, 337, 512, 1778, 13, 51264, 51264, 400, 291, 434, 516, 281, 362, 281, 2573, 484, 1803, 689, 264, 1154, 9134, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.1110766053199768, "compression_ratio": 1.592039800995025, "no_caption_prob": 1.2606305062945466e-05}, {"id": 377, "seek": 323500, "start": 3235.0, "end": 3244.0, "text": " But when you change a type, the compiler will tell you, hey, you've got a problem here and you go fix it. You got a problem here, you go fix it and so on and so on.", "tokens": [50364, 583, 562, 291, 1319, 257, 2010, 11, 264, 31958, 486, 980, 291, 11, 4177, 11, 291, 600, 658, 257, 1154, 510, 293, 291, 352, 3191, 309, 13, 509, 658, 257, 1154, 510, 11, 291, 352, 3191, 309, 293, 370, 322, 293, 370, 322, 13, 50814, 50814, 509, 500, 380, 362, 281, 2573, 484, 689, 264, 1154, 9134, 13, 440, 31958, 5112, 291, 13, 400, 300, 307, 445, 370, 709, 544, 4420, 11, 286, 519, 13, 51214, 51214, 407, 286, 458, 291, 434, 516, 281, 584, 11, 411, 11, 1954, 11, 291, 994, 380, 362, 281, 519, 886, 709, 466, 428, 9362, 13, 51514, 51514, 509, 393, 1319, 309, 293, 300, 311, 2489, 13, 583, 309, 311, 445, 411, 1071, 2010, 6713, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.09115997193351624, "compression_ratio": 1.790513833992095, "no_caption_prob": 4.0692098991712555e-05}, {"id": 378, "seek": 323500, "start": 3244.0, "end": 3252.0, "text": " You don't have to figure out where the problem lies. The compiler tells you. And that is just so much more useful, I think.", "tokens": [50364, 583, 562, 291, 1319, 257, 2010, 11, 264, 31958, 486, 980, 291, 11, 4177, 11, 291, 600, 658, 257, 1154, 510, 293, 291, 352, 3191, 309, 13, 509, 658, 257, 1154, 510, 11, 291, 352, 3191, 309, 293, 370, 322, 293, 370, 322, 13, 50814, 50814, 509, 500, 380, 362, 281, 2573, 484, 689, 264, 1154, 9134, 13, 440, 31958, 5112, 291, 13, 400, 300, 307, 445, 370, 709, 544, 4420, 11, 286, 519, 13, 51214, 51214, 407, 286, 458, 291, 434, 516, 281, 584, 11, 411, 11, 1954, 11, 291, 994, 380, 362, 281, 519, 886, 709, 466, 428, 9362, 13, 51514, 51514, 509, 393, 1319, 309, 293, 300, 311, 2489, 13, 583, 309, 311, 445, 411, 1071, 2010, 6713, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.09115997193351624, "compression_ratio": 1.790513833992095, "no_caption_prob": 4.0692098991712555e-05}, {"id": 379, "seek": 323500, "start": 3252.0, "end": 3258.0, "text": " So I know you're going to say, like, oh, you didn't have to think too much about your API.", "tokens": [50364, 583, 562, 291, 1319, 257, 2010, 11, 264, 31958, 486, 980, 291, 11, 4177, 11, 291, 600, 658, 257, 1154, 510, 293, 291, 352, 3191, 309, 13, 509, 658, 257, 1154, 510, 11, 291, 352, 3191, 309, 293, 370, 322, 293, 370, 322, 13, 50814, 50814, 509, 500, 380, 362, 281, 2573, 484, 689, 264, 1154, 9134, 13, 440, 31958, 5112, 291, 13, 400, 300, 307, 445, 370, 709, 544, 4420, 11, 286, 519, 13, 51214, 51214, 407, 286, 458, 291, 434, 516, 281, 584, 11, 411, 11, 1954, 11, 291, 994, 380, 362, 281, 519, 886, 709, 466, 428, 9362, 13, 51514, 51514, 509, 393, 1319, 309, 293, 300, 311, 2489, 13, 583, 309, 311, 445, 411, 1071, 2010, 6713, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.09115997193351624, "compression_ratio": 1.790513833992095, "no_caption_prob": 4.0692098991712555e-05}, {"id": 380, "seek": 323500, "start": 3258.0, "end": 3262.0, "text": " You can change it and that's fine. But it's just like another type error.", "tokens": [50364, 583, 562, 291, 1319, 257, 2010, 11, 264, 31958, 486, 980, 291, 11, 4177, 11, 291, 600, 658, 257, 1154, 510, 293, 291, 352, 3191, 309, 13, 509, 658, 257, 1154, 510, 11, 291, 352, 3191, 309, 293, 370, 322, 293, 370, 322, 13, 50814, 50814, 509, 500, 380, 362, 281, 2573, 484, 689, 264, 1154, 9134, 13, 440, 31958, 5112, 291, 13, 400, 300, 307, 445, 370, 709, 544, 4420, 11, 286, 519, 13, 51214, 51214, 407, 286, 458, 291, 434, 516, 281, 584, 11, 411, 11, 1954, 11, 291, 994, 380, 362, 281, 519, 886, 709, 466, 428, 9362, 13, 51514, 51514, 509, 393, 1319, 309, 293, 300, 311, 2489, 13, 583, 309, 311, 445, 411, 1071, 2010, 6713, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.09115997193351624, "compression_ratio": 1.790513833992095, "no_caption_prob": 4.0692098991712555e-05}, {"id": 381, "seek": 326200, "start": 3262.0, "end": 3282.0, "text": " Right. No, I mean, I think, yeah, these are great points. And I think that in a way, I suspect that some of this types versus tests conversation, again, as I said earlier, I think that often when people are dealing with type systems that aren't sound type systems,", "tokens": [50364, 1779, 13, 883, 11, 286, 914, 11, 286, 519, 11, 1338, 11, 613, 366, 869, 2793, 13, 400, 286, 519, 300, 294, 257, 636, 11, 286, 9091, 300, 512, 295, 341, 3467, 5717, 6921, 3761, 11, 797, 11, 382, 286, 848, 3071, 11, 286, 519, 300, 2049, 562, 561, 366, 6260, 365, 2010, 3652, 300, 3212, 380, 1626, 2010, 3652, 11, 51364, 51364, 436, 434, 406, 1364, 365, 32567, 490, 3467, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.10344795176857396, "compression_ratio": 1.625, "no_caption_prob": 7.368151273112744e-05}, {"id": 382, "seek": 326200, "start": 3282.0, "end": 3285.0, "text": " they're not working with guarantees from types.", "tokens": [50364, 1779, 13, 883, 11, 286, 914, 11, 286, 519, 11, 1338, 11, 613, 366, 869, 2793, 13, 400, 286, 519, 300, 294, 257, 636, 11, 286, 9091, 300, 512, 295, 341, 3467, 5717, 6921, 3761, 11, 797, 11, 382, 286, 848, 3071, 11, 286, 519, 300, 2049, 562, 561, 366, 6260, 365, 2010, 3652, 300, 3212, 380, 1626, 2010, 3652, 11, 51364, 51364, 436, 434, 406, 1364, 365, 32567, 490, 3467, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.10344795176857396, "compression_ratio": 1.625, "no_caption_prob": 7.368151273112744e-05}, {"id": 383, "seek": 328500, "start": 3285.0, "end": 3293.0, "text": " They're working with checks from types, which feels a lot like a test. A test checks one thing. You run a test, it checks one thing.", "tokens": [50364, 814, 434, 1364, 365, 13834, 490, 3467, 11, 597, 3417, 257, 688, 411, 257, 1500, 13, 316, 1500, 13834, 472, 551, 13, 509, 1190, 257, 1500, 11, 309, 13834, 472, 551, 13, 50764, 50764, 509, 1190, 257, 11, 291, 458, 11, 283, 16740, 1500, 293, 309, 13834, 293, 721, 337, 293, 6676, 1951, 264, 18491, 291, 1322, 493, 337, 309, 281, 1520, 13, 51164, 51164, 583, 309, 311, 309, 311, 19362, 11, 9735, 3467, 589, 264, 661, 636, 11, 11525, 1760, 721, 293, 2902, 291, 32567, 11, 406, 8568, 472, 551, 293, 1566, 11, 2086, 11, 300, 472, 551, 775, 437, 291, 519, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.08292657357675058, "compression_ratio": 1.882608695652174, "no_caption_prob": 9.818240869208239e-06}, {"id": 384, "seek": 328500, "start": 3293.0, "end": 3301.0, "text": " You run a, you know, fuzz test and it checks and things for and runs within the constraints you build up for it to check.", "tokens": [50364, 814, 434, 1364, 365, 13834, 490, 3467, 11, 597, 3417, 257, 688, 411, 257, 1500, 13, 316, 1500, 13834, 472, 551, 13, 509, 1190, 257, 1500, 11, 309, 13834, 472, 551, 13, 50764, 50764, 509, 1190, 257, 11, 291, 458, 11, 283, 16740, 1500, 293, 309, 13834, 293, 721, 337, 293, 6676, 1951, 264, 18491, 291, 1322, 493, 337, 309, 281, 1520, 13, 51164, 51164, 583, 309, 311, 309, 311, 19362, 11, 9735, 3467, 589, 264, 661, 636, 11, 11525, 1760, 721, 293, 2902, 291, 32567, 11, 406, 8568, 472, 551, 293, 1566, 11, 2086, 11, 300, 472, 551, 775, 437, 291, 519, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.08292657357675058, "compression_ratio": 1.882608695652174, "no_caption_prob": 9.818240869208239e-06}, {"id": 385, "seek": 328500, "start": 3301.0, "end": 3312.0, "text": " But it's it's finite, whereas types work the other way, constraining things and giving you guarantees, not checking one thing and saying, yes, that one thing does what you think.", "tokens": [50364, 814, 434, 1364, 365, 13834, 490, 3467, 11, 597, 3417, 257, 688, 411, 257, 1500, 13, 316, 1500, 13834, 472, 551, 13, 509, 1190, 257, 1500, 11, 309, 13834, 472, 551, 13, 50764, 50764, 509, 1190, 257, 11, 291, 458, 11, 283, 16740, 1500, 293, 309, 13834, 293, 721, 337, 293, 6676, 1951, 264, 18491, 291, 1322, 493, 337, 309, 281, 1520, 13, 51164, 51164, 583, 309, 311, 309, 311, 19362, 11, 9735, 3467, 589, 264, 661, 636, 11, 11525, 1760, 721, 293, 2902, 291, 32567, 11, 406, 8568, 472, 551, 293, 1566, 11, 2086, 11, 300, 472, 551, 775, 437, 291, 519, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.08292657357675058, "compression_ratio": 1.882608695652174, "no_caption_prob": 9.818240869208239e-06}, {"id": 386, "seek": 331200, "start": 3312.0, "end": 3319.0, "text": " One kind of testing we haven't talked about, which is writing assertions in your code.", "tokens": [50364, 1485, 733, 295, 4997, 321, 2378, 380, 2825, 466, 11, 597, 307, 3579, 19810, 626, 294, 428, 3089, 13, 50714, 50714, 663, 307, 746, 321, 500, 380, 362, 294, 2699, 76, 293, 611, 1943, 380, 300, 955, 294, 15778, 13, 51014, 51014, 583, 286, 458, 300, 512, 32647, 366, 3801, 322, 300, 13, 2704, 34952, 11, 1310, 383, 411, 8650, 689, 11, 1954, 11, 291, 434, 516, 281, 2464, 364, 19810, 313, 8568, 300, 512, 1329, 307, 2107, 6707, 11, 337, 5197, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.0992251100211308, "compression_ratio": 1.5442477876106195, "no_caption_prob": 2.4682109142304398e-05}, {"id": 387, "seek": 331200, "start": 3319.0, "end": 3325.0, "text": " That is something we don't have in Elm and also isn't that big in JavaScript.", "tokens": [50364, 1485, 733, 295, 4997, 321, 2378, 380, 2825, 466, 11, 597, 307, 3579, 19810, 626, 294, 428, 3089, 13, 50714, 50714, 663, 307, 746, 321, 500, 380, 362, 294, 2699, 76, 293, 611, 1943, 380, 300, 955, 294, 15778, 13, 51014, 51014, 583, 286, 458, 300, 512, 32647, 366, 3801, 322, 300, 13, 2704, 34952, 11, 1310, 383, 411, 8650, 689, 11, 1954, 11, 291, 434, 516, 281, 2464, 364, 19810, 313, 8568, 300, 512, 1329, 307, 2107, 6707, 11, 337, 5197, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.0992251100211308, "compression_ratio": 1.5442477876106195, "no_caption_prob": 2.4682109142304398e-05}, {"id": 388, "seek": 331200, "start": 3325.0, "end": 3339.0, "text": " But I know that some ecosystems are bigger on that. Maybe Rust, maybe C like languages where, oh, you're going to write an assertion checking that some list is non empty, for instance.", "tokens": [50364, 1485, 733, 295, 4997, 321, 2378, 380, 2825, 466, 11, 597, 307, 3579, 19810, 626, 294, 428, 3089, 13, 50714, 50714, 663, 307, 746, 321, 500, 380, 362, 294, 2699, 76, 293, 611, 1943, 380, 300, 955, 294, 15778, 13, 51014, 51014, 583, 286, 458, 300, 512, 32647, 366, 3801, 322, 300, 13, 2704, 34952, 11, 1310, 383, 411, 8650, 689, 11, 1954, 11, 291, 434, 516, 281, 2464, 364, 19810, 313, 8568, 300, 512, 1329, 307, 2107, 6707, 11, 337, 5197, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.0992251100211308, "compression_ratio": 1.5442477876106195, "no_caption_prob": 2.4682109142304398e-05}, {"id": 389, "seek": 333900, "start": 3339.0, "end": 3351.0, "text": " Invariants. Yeah, invariants, but writing those in your code. And if that ever if that is ever false in a specific behavior, a specific scenario, then it's going to crash, I guess.", "tokens": [50364, 31124, 3504, 1719, 13, 865, 11, 33270, 1719, 11, 457, 3579, 729, 294, 428, 3089, 13, 400, 498, 300, 1562, 498, 300, 307, 1562, 7908, 294, 257, 2685, 5223, 11, 257, 2685, 9005, 11, 550, 309, 311, 516, 281, 8252, 11, 286, 2041, 13, 50964, 50964, 583, 797, 11, 291, 643, 281, 2464, 4985, 6921, 281, 281, 915, 729, 294, 428, 383, 13, 40, 13, 1779, 13, 51264, 51264, 1779, 13, 400, 1338, 11, 309, 311, 1880, 11, 457, 309, 3417, 411, 746, 300, 11, 291, 458, 11, 6243, 4368, 420, 42687, 3467, 420, 613, 819, 7512, 820, 312, 1075, 281, 854, 291, 854, 291, 365, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.15079585925952807, "compression_ratio": 1.7065637065637065, "no_caption_prob": 0.00010720161662902683}, {"id": 390, "seek": 333900, "start": 3351.0, "end": 3357.0, "text": " But again, you need to write unit tests to to find those in your C.I. Right.", "tokens": [50364, 31124, 3504, 1719, 13, 865, 11, 33270, 1719, 11, 457, 3579, 729, 294, 428, 3089, 13, 400, 498, 300, 1562, 498, 300, 307, 1562, 7908, 294, 257, 2685, 5223, 11, 257, 2685, 9005, 11, 550, 309, 311, 516, 281, 8252, 11, 286, 2041, 13, 50964, 50964, 583, 797, 11, 291, 643, 281, 2464, 4985, 6921, 281, 281, 915, 729, 294, 428, 383, 13, 40, 13, 1779, 13, 51264, 51264, 1779, 13, 400, 1338, 11, 309, 311, 1880, 11, 457, 309, 3417, 411, 746, 300, 11, 291, 458, 11, 6243, 4368, 420, 42687, 3467, 420, 613, 819, 7512, 820, 312, 1075, 281, 854, 291, 854, 291, 365, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.15079585925952807, "compression_ratio": 1.7065637065637065, "no_caption_prob": 0.00010720161662902683}, {"id": 391, "seek": 333900, "start": 3357.0, "end": 3368.0, "text": " Right. And yeah, it's interesting, but it feels like something that, you know, impossible states or opaque types or these different techniques should be able to help you help you with.", "tokens": [50364, 31124, 3504, 1719, 13, 865, 11, 33270, 1719, 11, 457, 3579, 729, 294, 428, 3089, 13, 400, 498, 300, 1562, 498, 300, 307, 1562, 7908, 294, 257, 2685, 5223, 11, 257, 2685, 9005, 11, 550, 309, 311, 516, 281, 8252, 11, 286, 2041, 13, 50964, 50964, 583, 797, 11, 291, 643, 281, 2464, 4985, 6921, 281, 281, 915, 729, 294, 428, 383, 13, 40, 13, 1779, 13, 51264, 51264, 1779, 13, 400, 1338, 11, 309, 311, 1880, 11, 457, 309, 3417, 411, 746, 300, 11, 291, 458, 11, 6243, 4368, 420, 42687, 3467, 420, 613, 819, 7512, 820, 312, 1075, 281, 854, 291, 854, 291, 365, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.15079585925952807, "compression_ratio": 1.7065637065637065, "no_caption_prob": 0.00010720161662902683}, {"id": 392, "seek": 336800, "start": 3368.0, "end": 3381.0, "text": " So, yeah. So I think the way a lot of people are used to working with type systems, it feels more like testing because it's just checking one thing rather than giving you guarantees.", "tokens": [50364, 407, 11, 1338, 13, 407, 286, 519, 264, 636, 257, 688, 295, 561, 366, 1143, 281, 1364, 365, 2010, 3652, 11, 309, 3417, 544, 411, 4997, 570, 309, 311, 445, 8568, 472, 551, 2831, 813, 2902, 291, 32567, 13, 51014, 51014, 583, 562, 291, 434, 1364, 365, 309, 382, 32567, 11, 309, 3417, 31312, 356, 819, 13, 51264, 51264], "temperature": 0.0, "avg_logprob": -0.0630612138841973, "compression_ratio": 1.502857142857143, "no_caption_prob": 5.255350515653845e-06}, {"id": 393, "seek": 336800, "start": 3381.0, "end": 3386.0, "text": " But when you're working with it as guarantees, it feels qualitatively different.", "tokens": [50364, 407, 11, 1338, 13, 407, 286, 519, 264, 636, 257, 688, 295, 561, 366, 1143, 281, 1364, 365, 2010, 3652, 11, 309, 3417, 544, 411, 4997, 570, 309, 311, 445, 8568, 472, 551, 2831, 813, 2902, 291, 32567, 13, 51014, 51014, 583, 562, 291, 434, 1364, 365, 309, 382, 32567, 11, 309, 3417, 31312, 356, 819, 13, 51264, 51264], "temperature": 0.0, "avg_logprob": -0.0630612138841973, "compression_ratio": 1.502857142857143, "no_caption_prob": 5.255350515653845e-06}, {"id": 394, "seek": 338600, "start": 3386.0, "end": 3400.0, "text": " As you're saying, when you have tests with guarantees, tools can help you. The compiler can point you to, hey, here's what's wrong in this specific spot. Here's what you can do to fix that.", "tokens": [50364, 1018, 291, 434, 1566, 11, 562, 291, 362, 6921, 365, 32567, 11, 3873, 393, 854, 291, 13, 440, 31958, 393, 935, 291, 281, 11, 4177, 11, 510, 311, 437, 311, 2085, 294, 341, 2685, 4008, 13, 1692, 311, 437, 291, 393, 360, 281, 3191, 300, 13, 51064, 51064, 2743, 11, 13437, 5215, 3873, 11, 1310, 2699, 76, 3131, 11, 3278, 300, 484, 428, 272, 18459, 2920, 13, 51314, 51314], "temperature": 0.0, "avg_logprob": -0.09905597525583186, "compression_ratio": 1.4725274725274726, "no_caption_prob": 1.6701083950465545e-05}, {"id": 395, "seek": 338600, "start": 3400.0, "end": 3405.0, "text": " Also, static analysis tools, maybe Elm review, cross that out your bingo card.", "tokens": [50364, 1018, 291, 434, 1566, 11, 562, 291, 362, 6921, 365, 32567, 11, 3873, 393, 854, 291, 13, 440, 31958, 393, 935, 291, 281, 11, 4177, 11, 510, 311, 437, 311, 2085, 294, 341, 2685, 4008, 13, 1692, 311, 437, 291, 393, 360, 281, 3191, 300, 13, 51064, 51064, 2743, 11, 13437, 5215, 3873, 11, 1310, 2699, 76, 3131, 11, 3278, 300, 484, 428, 272, 18459, 2920, 13, 51314, 51314], "temperature": 0.0, "avg_logprob": -0.09905597525583186, "compression_ratio": 1.4725274725274726, "no_caption_prob": 1.6701083950465545e-05}, {"id": 396, "seek": 340500, "start": 3405.0, "end": 3418.0, "text": " Actually, Elm review can infer some things from from your code. Like we don't do much, but we it could potentially. But figure out things from your tests. That would be interesting and a lot harder.", "tokens": [50364, 5135, 11, 2699, 76, 3131, 393, 13596, 512, 721, 490, 490, 428, 3089, 13, 1743, 321, 500, 380, 360, 709, 11, 457, 321, 309, 727, 7263, 13, 583, 2573, 484, 721, 490, 428, 6921, 13, 663, 576, 312, 1880, 293, 257, 688, 6081, 13, 51014, 51014, 7587, 13, 1436, 309, 311, 445, 264, 1379, 935, 281, 385, 13, 467, 311, 309, 311, 264, 6949, 5760, 13, 1743, 6921, 366, 6949, 5760, 13, 814, 434, 341, 588, 2295, 1496, 551, 13, 663, 311, 264, 1379, 935, 13, 51464, 51464, 814, 366, 406, 382, 40189, 382, 3089, 13, 400, 300, 311, 983, 436, 434, 4420, 13, 467, 311, 406, 23211, 3089, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.12869376466985336, "compression_ratio": 1.7318007662835249, "no_caption_prob": 7.254181400639936e-05}, {"id": 397, "seek": 340500, "start": 3418.0, "end": 3427.0, "text": " Exactly. Because it's just the whole point to me. It's it's the bare metal. Like tests are bare metal. They're this very low level thing. That's the whole point.", "tokens": [50364, 5135, 11, 2699, 76, 3131, 393, 13596, 512, 721, 490, 490, 428, 3089, 13, 1743, 321, 500, 380, 360, 709, 11, 457, 321, 309, 727, 7263, 13, 583, 2573, 484, 721, 490, 428, 6921, 13, 663, 576, 312, 1880, 293, 257, 688, 6081, 13, 51014, 51014, 7587, 13, 1436, 309, 311, 445, 264, 1379, 935, 281, 385, 13, 467, 311, 309, 311, 264, 6949, 5760, 13, 1743, 6921, 366, 6949, 5760, 13, 814, 434, 341, 588, 2295, 1496, 551, 13, 663, 311, 264, 1379, 935, 13, 51464, 51464, 814, 366, 406, 382, 40189, 382, 3089, 13, 400, 300, 311, 983, 436, 434, 4420, 13, 467, 311, 406, 23211, 3089, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.12869376466985336, "compression_ratio": 1.7318007662835249, "no_caption_prob": 7.254181400639936e-05}, {"id": 398, "seek": 340500, "start": 3427.0, "end": 3434.0, "text": " They are not as expressive as code. And that's why they're useful. It's not arbitrary code.", "tokens": [50364, 5135, 11, 2699, 76, 3131, 393, 13596, 512, 721, 490, 490, 428, 3089, 13, 1743, 321, 500, 380, 360, 709, 11, 457, 321, 309, 727, 7263, 13, 583, 2573, 484, 721, 490, 428, 6921, 13, 663, 576, 312, 1880, 293, 257, 688, 6081, 13, 51014, 51014, 7587, 13, 1436, 309, 311, 445, 264, 1379, 935, 281, 385, 13, 467, 311, 309, 311, 264, 6949, 5760, 13, 1743, 6921, 366, 6949, 5760, 13, 814, 434, 341, 588, 2295, 1496, 551, 13, 663, 311, 264, 1379, 935, 13, 51464, 51464, 814, 366, 406, 382, 40189, 382, 3089, 13, 400, 300, 311, 983, 436, 434, 4420, 13, 467, 311, 406, 23211, 3089, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.12869376466985336, "compression_ratio": 1.7318007662835249, "no_caption_prob": 7.254181400639936e-05}, {"id": 399, "seek": 343400, "start": 3434.0, "end": 3437.0, "text": " What do you mean they're not as expressive as normal code?", "tokens": [50364, 708, 360, 291, 914, 436, 434, 406, 382, 40189, 382, 2710, 3089, 30, 50514, 50514, 814, 434, 406, 364, 35847, 19639, 2001, 551, 689, 291, 434, 3579, 23211, 3089, 13, 509, 434, 1566, 11, 291, 458, 11, 2010, 4195, 6915, 8341, 420, 24236, 11, 291, 458, 11, 24236, 4365, 420, 3890, 4195, 4365, 13, 51264, 51264], "temperature": 0.0, "avg_logprob": -0.09964271249442265, "compression_ratio": 1.5290322580645161, "no_caption_prob": 3.705184644786641e-05}, {"id": 400, "seek": 343400, "start": 3437.0, "end": 3452.0, "text": " They're not an unconstrained thing where you're writing arbitrary code. You're saying, you know, type user equals guest or admin, you know, admin details or regular user details.", "tokens": [50364, 708, 360, 291, 914, 436, 434, 406, 382, 40189, 382, 2710, 3089, 30, 50514, 50514, 814, 434, 406, 364, 35847, 19639, 2001, 551, 689, 291, 434, 3579, 23211, 3089, 13, 509, 434, 1566, 11, 291, 458, 11, 2010, 4195, 6915, 8341, 420, 24236, 11, 291, 458, 11, 24236, 4365, 420, 3890, 4195, 4365, 13, 51264, 51264], "temperature": 0.0, "avg_logprob": -0.09964271249442265, "compression_ratio": 1.5290322580645161, "no_caption_prob": 3.705184644786641e-05}, {"id": 401, "seek": 345200, "start": 3452.0, "end": 3470.0, "text": " Like it's you're not saying, oh, and if this if this conditional checking run time conditions, you look at it, you look at it and you can fit it in your head all at once without imperatively running through the code and all the interactions of a complex system.", "tokens": [50364, 1743, 309, 311, 291, 434, 406, 1566, 11, 1954, 11, 293, 498, 341, 498, 341, 27708, 8568, 1190, 565, 4487, 11, 291, 574, 412, 309, 11, 291, 574, 412, 309, 293, 291, 393, 3318, 309, 294, 428, 1378, 439, 412, 1564, 1553, 10100, 19020, 2614, 807, 264, 3089, 293, 439, 264, 13280, 295, 257, 3997, 1185, 13, 51264, 51264, 663, 311, 437, 1669, 552, 1880, 13, 400, 300, 311, 437, 1669, 552, 4420, 337, 3873, 13, 407, 13437, 5215, 3873, 11, 5028, 14455, 382, 731, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.07113305197821723, "compression_ratio": 1.722466960352423, "no_caption_prob": 4.2646021029213443e-05}, {"id": 402, "seek": 345200, "start": 3470.0, "end": 3479.0, "text": " That's what makes them interesting. And that's what makes them useful for tools. So static analysis tools, optimizations as well.", "tokens": [50364, 1743, 309, 311, 291, 434, 406, 1566, 11, 1954, 11, 293, 498, 341, 498, 341, 27708, 8568, 1190, 565, 4487, 11, 291, 574, 412, 309, 11, 291, 574, 412, 309, 293, 291, 393, 3318, 309, 294, 428, 1378, 439, 412, 1564, 1553, 10100, 19020, 2614, 807, 264, 3089, 293, 439, 264, 13280, 295, 257, 3997, 1185, 13, 51264, 51264, 663, 311, 437, 1669, 552, 1880, 13, 400, 300, 311, 437, 1669, 552, 4420, 337, 3873, 13, 407, 13437, 5215, 3873, 11, 5028, 14455, 382, 731, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.07113305197821723, "compression_ratio": 1.722466960352423, "no_caption_prob": 4.2646021029213443e-05}, {"id": 403, "seek": 347900, "start": 3479.0, "end": 3489.0, "text": " Optimizers also. Yeah, absolutely. Optimizations, IDEs, code completion, stuff like that. Yeah, absolutely.", "tokens": [50364, 35013, 22525, 611, 13, 865, 11, 3122, 13, 35013, 14455, 11, 7348, 20442, 11, 3089, 19372, 11, 1507, 411, 300, 13, 865, 11, 3122, 13, 50864, 50864, 407, 293, 286, 445, 841, 411, 321, 434, 10268, 29699, 264, 3753, 295, 437, 321, 393, 360, 365, 3873, 365, 365, 18491, 11, 365, 365, 588, 2068, 32567, 13, 51264, 51264, 1779, 13, 1743, 11, 291, 458, 11, 12509, 3089, 1404, 840, 13, 1779, 13, 1743, 23331, 11579, 31516, 307, 11, 291, 458, 11, 1238, 1238, 3743, 613, 1708, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.14037938170380646, "compression_ratio": 1.6233766233766234, "no_caption_prob": 4.539638030109927e-05}, {"id": 404, "seek": 347900, "start": 3489.0, "end": 3497.0, "text": " So and I just feel like we're barely scratching the surface of what we can do with tools with with constraints, with with very strong guarantees.", "tokens": [50364, 35013, 22525, 611, 13, 865, 11, 3122, 13, 35013, 14455, 11, 7348, 20442, 11, 3089, 19372, 11, 1507, 411, 300, 13, 865, 11, 3122, 13, 50864, 50864, 407, 293, 286, 445, 841, 411, 321, 434, 10268, 29699, 264, 3753, 295, 437, 321, 393, 360, 365, 3873, 365, 365, 18491, 11, 365, 365, 588, 2068, 32567, 13, 51264, 51264, 1779, 13, 1743, 11, 291, 458, 11, 12509, 3089, 1404, 840, 13, 1779, 13, 1743, 23331, 11579, 31516, 307, 11, 291, 458, 11, 1238, 1238, 3743, 613, 1708, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.14037938170380646, "compression_ratio": 1.6233766233766234, "no_caption_prob": 4.539638030109927e-05}, {"id": 405, "seek": 347900, "start": 3497.0, "end": 3505.0, "text": " Right. Like, you know, automatic code solvers. Right. Like GitHub Copilot is, you know, pretty pretty popular these days.", "tokens": [50364, 35013, 22525, 611, 13, 865, 11, 3122, 13, 35013, 14455, 11, 7348, 20442, 11, 3089, 19372, 11, 1507, 411, 300, 13, 865, 11, 3122, 13, 50864, 50864, 407, 293, 286, 445, 841, 411, 321, 434, 10268, 29699, 264, 3753, 295, 437, 321, 393, 360, 365, 3873, 365, 365, 18491, 11, 365, 365, 588, 2068, 32567, 13, 51264, 51264, 1779, 13, 1743, 11, 291, 458, 11, 12509, 3089, 1404, 840, 13, 1779, 13, 1743, 23331, 11579, 31516, 307, 11, 291, 458, 11, 1238, 1238, 3743, 613, 1708, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.14037938170380646, "compression_ratio": 1.6233766233766234, "no_caption_prob": 4.539638030109927e-05}, {"id": 406, "seek": 350500, "start": 3505.0, "end": 3518.0, "text": " Well, what if what if there was something that took a completely different approach to GitHub Copilot and used its understanding of the constraints baked into the language and the types to suggest possible solutions?", "tokens": [50364, 1042, 11, 437, 498, 437, 498, 456, 390, 746, 300, 1890, 257, 2584, 819, 3109, 281, 23331, 11579, 31516, 293, 1143, 1080, 3701, 295, 264, 18491, 19453, 666, 264, 2856, 293, 264, 3467, 281, 3402, 1944, 6547, 30, 51014, 51014, 1779, 13, 1743, 286, 1866, 257, 751, 300, 390, 29794, 3349, 341, 11, 411, 11, 291, 458, 11, 12509, 2445, 19265, 300, 2516, 411, 439, 295, 264, 4190, 300, 366, 294, 11923, 293, 9898, 281, 13596, 411, 510, 366, 1266, 1944, 6828, 286, 393, 1884, 365, 341, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.0768982690313588, "compression_ratio": 1.6407407407407408, "no_caption_prob": 2.247311749670189e-05}, {"id": 407, "seek": 350500, "start": 3518.0, "end": 3534.0, "text": " Right. Like I saw a talk that was showcasing this, like, you know, automatic function generator that takes like all of the values that are in scope and tries to infer like here are 10 possible functions I can create with this.", "tokens": [50364, 1042, 11, 437, 498, 437, 498, 456, 390, 746, 300, 1890, 257, 2584, 819, 3109, 281, 23331, 11579, 31516, 293, 1143, 1080, 3701, 295, 264, 18491, 19453, 666, 264, 2856, 293, 264, 3467, 281, 3402, 1944, 6547, 30, 51014, 51014, 1779, 13, 1743, 286, 1866, 257, 751, 300, 390, 29794, 3349, 341, 11, 411, 11, 291, 458, 11, 12509, 2445, 19265, 300, 2516, 411, 439, 295, 264, 4190, 300, 366, 294, 11923, 293, 9898, 281, 13596, 411, 510, 366, 1266, 1944, 6828, 286, 393, 1884, 365, 341, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.0768982690313588, "compression_ratio": 1.6407407407407408, "no_caption_prob": 2.247311749670189e-05}, {"id": 408, "seek": 353400, "start": 3534.0, "end": 3540.0, "text": " They use these different values because this is a list and this is a function that takes a value and returns this.", "tokens": [50364, 814, 764, 613, 819, 4190, 570, 341, 307, 257, 1329, 293, 341, 307, 257, 2445, 300, 2516, 257, 2158, 293, 11247, 341, 13, 50664, 50664, 400, 550, 286, 393, 1329, 484, 4860, 670, 341, 13, 400, 370, 510, 366, 1266, 819, 721, 291, 727, 360, 365, 341, 13, 50914, 50914, 400, 257, 688, 295, 264, 565, 309, 8399, 23815, 3089, 300, 291, 434, 411, 11, 1954, 11, 1338, 11, 300, 390, 437, 286, 1415, 281, 360, 365, 613, 15743, 13, 51214, 51214, 314, 4409, 393, 380, 534, 13875, 729, 3467, 295, 12178, 13, 407, 6921, 366, 588, 20050, 294, 300, 3843, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.04503639689031637, "compression_ratio": 1.7137254901960783, "no_caption_prob": 1.9222763512516394e-05}, {"id": 409, "seek": 353400, "start": 3540.0, "end": 3545.0, "text": " And then I can list out fold over this. And so here are 10 different things you could do with this.", "tokens": [50364, 814, 764, 613, 819, 4190, 570, 341, 307, 257, 1329, 293, 341, 307, 257, 2445, 300, 2516, 257, 2158, 293, 11247, 341, 13, 50664, 50664, 400, 550, 286, 393, 1329, 484, 4860, 670, 341, 13, 400, 370, 510, 366, 1266, 819, 721, 291, 727, 360, 365, 341, 13, 50914, 50914, 400, 257, 688, 295, 264, 565, 309, 8399, 23815, 3089, 300, 291, 434, 411, 11, 1954, 11, 1338, 11, 300, 390, 437, 286, 1415, 281, 360, 365, 613, 15743, 13, 51214, 51214, 314, 4409, 393, 380, 534, 13875, 729, 3467, 295, 12178, 13, 407, 6921, 366, 588, 20050, 294, 300, 3843, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.04503639689031637, "compression_ratio": 1.7137254901960783, "no_caption_prob": 1.9222763512516394e-05}, {"id": 410, "seek": 353400, "start": 3545.0, "end": 3551.0, "text": " And a lot of the time it auto generates code that you're like, oh, yeah, that was what I wanted to do with these inputs.", "tokens": [50364, 814, 764, 613, 819, 4190, 570, 341, 307, 257, 1329, 293, 341, 307, 257, 2445, 300, 2516, 257, 2158, 293, 11247, 341, 13, 50664, 50664, 400, 550, 286, 393, 1329, 484, 4860, 670, 341, 13, 400, 370, 510, 366, 1266, 819, 721, 291, 727, 360, 365, 341, 13, 50914, 50914, 400, 257, 688, 295, 264, 565, 309, 8399, 23815, 3089, 300, 291, 434, 411, 11, 1954, 11, 1338, 11, 300, 390, 437, 286, 1415, 281, 360, 365, 613, 15743, 13, 51214, 51214, 314, 4409, 393, 380, 534, 13875, 729, 3467, 295, 12178, 13, 407, 6921, 366, 588, 20050, 294, 300, 3843, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.04503639689031637, "compression_ratio": 1.7137254901960783, "no_caption_prob": 1.9222763512516394e-05}, {"id": 411, "seek": 353400, "start": 3551.0, "end": 3558.0, "text": " Tests can't really fulfill those types of possibilities. So tests are very compelling in that regard.", "tokens": [50364, 814, 764, 613, 819, 4190, 570, 341, 307, 257, 1329, 293, 341, 307, 257, 2445, 300, 2516, 257, 2158, 293, 11247, 341, 13, 50664, 50664, 400, 550, 286, 393, 1329, 484, 4860, 670, 341, 13, 400, 370, 510, 366, 1266, 819, 721, 291, 727, 360, 365, 341, 13, 50914, 50914, 400, 257, 688, 295, 264, 565, 309, 8399, 23815, 3089, 300, 291, 434, 411, 11, 1954, 11, 1338, 11, 300, 390, 437, 286, 1415, 281, 360, 365, 613, 15743, 13, 51214, 51214, 314, 4409, 393, 380, 534, 13875, 729, 3467, 295, 12178, 13, 407, 6921, 366, 588, 20050, 294, 300, 3843, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.04503639689031637, "compression_ratio": 1.7137254901960783, "no_caption_prob": 1.9222763512516394e-05}, {"id": 412, "seek": 355800, "start": 3558.0, "end": 3570.0, "text": " But, you know, you can you can you can use tests to do a a worse job at being a type system and checking constraints.", "tokens": [50364, 583, 11, 291, 458, 11, 291, 393, 291, 393, 291, 393, 764, 6921, 281, 360, 257, 257, 5324, 1691, 412, 885, 257, 2010, 1185, 293, 8568, 18491, 13, 50964, 50964, 407, 286, 519, 6921, 366, 6921, 366, 445, 370, 665, 13, 400, 286, 3172, 300, 411, 286, 3172, 300, 561, 294, 264, 2010, 1768, 576, 14038, 552, 257, 707, 857, 544, 13, 51414, 51414, 583, 1310, 321, 643, 281, 976, 512, 534, 665, 3593, 337, 577, 281, 577, 281, 360, 300, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.047670109327449355, "compression_ratio": 1.6285714285714286, "no_caption_prob": 2.840922024915926e-05}, {"id": 413, "seek": 355800, "start": 3570.0, "end": 3579.0, "text": " So I think tests are tests are just so good. And I wish that like I wish that people in the type community would embrace them a little bit more.", "tokens": [50364, 583, 11, 291, 458, 11, 291, 393, 291, 393, 291, 393, 764, 6921, 281, 360, 257, 257, 5324, 1691, 412, 885, 257, 2010, 1185, 293, 8568, 18491, 13, 50964, 50964, 407, 286, 519, 6921, 366, 6921, 366, 445, 370, 665, 13, 400, 286, 3172, 300, 411, 286, 3172, 300, 561, 294, 264, 2010, 1768, 576, 14038, 552, 257, 707, 857, 544, 13, 51414, 51414, 583, 1310, 321, 643, 281, 976, 512, 534, 665, 3593, 337, 577, 281, 577, 281, 360, 300, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.047670109327449355, "compression_ratio": 1.6285714285714286, "no_caption_prob": 2.840922024915926e-05}, {"id": 414, "seek": 355800, "start": 3579.0, "end": 3583.0, "text": " But maybe we need to give some really good resources for how to how to do that.", "tokens": [50364, 583, 11, 291, 458, 11, 291, 393, 291, 393, 291, 393, 764, 6921, 281, 360, 257, 257, 5324, 1691, 412, 885, 257, 2010, 1185, 293, 8568, 18491, 13, 50964, 50964, 407, 286, 519, 6921, 366, 6921, 366, 445, 370, 665, 13, 400, 286, 3172, 300, 411, 286, 3172, 300, 561, 294, 264, 2010, 1768, 576, 14038, 552, 257, 707, 857, 544, 13, 51414, 51414, 583, 1310, 321, 643, 281, 976, 512, 534, 665, 3593, 337, 577, 281, 577, 281, 360, 300, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.047670109327449355, "compression_ratio": 1.6285714285714286, "no_caption_prob": 2.840922024915926e-05}, {"id": 415, "seek": 358300, "start": 3583.0, "end": 3590.0, "text": " Yeah. To make good use of tests, you do need to be a not going to say a good developer, but you need to have some some good habits.", "tokens": [50364, 865, 13, 1407, 652, 665, 764, 295, 6921, 11, 291, 360, 643, 281, 312, 257, 406, 516, 281, 584, 257, 665, 10754, 11, 457, 291, 643, 281, 362, 512, 512, 665, 14100, 13, 50714, 50714, 865, 11, 512, 665, 14100, 11, 570, 498, 291, 500, 380, 362, 264, 14100, 295, 2614, 257, 1500, 11, 550, 291, 500, 380, 362, 604, 32567, 412, 439, 13, 51164, 51164, 28136, 257, 2010, 307, 257, 688, 1570, 4630, 11, 294, 452, 4800, 13, 51414, 51414], "temperature": 0.0, "avg_logprob": -0.11458679566900414, "compression_ratio": 1.7, "no_caption_prob": 5.738497929996811e-05}, {"id": 416, "seek": 358300, "start": 3590.0, "end": 3599.0, "text": " Yeah, some good habits, because if you don't have the habits of running a test, then you don't have any guarantees at all.", "tokens": [50364, 865, 13, 1407, 652, 665, 764, 295, 6921, 11, 291, 360, 643, 281, 312, 257, 406, 516, 281, 584, 257, 665, 10754, 11, 457, 291, 643, 281, 362, 512, 512, 665, 14100, 13, 50714, 50714, 865, 11, 512, 665, 14100, 11, 570, 498, 291, 500, 380, 362, 264, 14100, 295, 2614, 257, 1500, 11, 550, 291, 500, 380, 362, 604, 32567, 412, 439, 13, 51164, 51164, 28136, 257, 2010, 307, 257, 688, 1570, 4630, 11, 294, 452, 4800, 13, 51414, 51414], "temperature": 0.0, "avg_logprob": -0.11458679566900414, "compression_ratio": 1.7, "no_caption_prob": 5.738497929996811e-05}, {"id": 417, "seek": 358300, "start": 3599.0, "end": 3604.0, "text": " Running a type is a lot less effort, in my opinion.", "tokens": [50364, 865, 13, 1407, 652, 665, 764, 295, 6921, 11, 291, 360, 643, 281, 312, 257, 406, 516, 281, 584, 257, 665, 10754, 11, 457, 291, 643, 281, 362, 512, 512, 665, 14100, 13, 50714, 50714, 865, 11, 512, 665, 14100, 11, 570, 498, 291, 500, 380, 362, 264, 14100, 295, 2614, 257, 1500, 11, 550, 291, 500, 380, 362, 604, 32567, 412, 439, 13, 51164, 51164, 28136, 257, 2010, 307, 257, 688, 1570, 4630, 11, 294, 452, 4800, 13, 51414, 51414], "temperature": 0.0, "avg_logprob": -0.11458679566900414, "compression_ratio": 1.7, "no_caption_prob": 5.738497929996811e-05}, {"id": 418, "seek": 360400, "start": 3604.0, "end": 3616.0, "text": " And also, one thing that is interesting to figure out and to notice is that it is actually quite easy to ignore a failing unit test because you can delete the unit tests.", "tokens": [50364, 400, 611, 11, 472, 551, 300, 307, 1880, 281, 2573, 484, 293, 281, 3449, 307, 300, 309, 307, 767, 1596, 1858, 281, 11200, 257, 18223, 4985, 1500, 570, 291, 393, 12097, 264, 4985, 6921, 13, 50964, 50964, 1779, 13, 1610, 11, 291, 458, 11, 291, 393, 365, 955, 19963, 293, 2870, 281, 2464, 264, 4985, 6921, 13, 51314, 51314, 1779, 13, 583, 365, 257, 2010, 1520, 260, 11, 300, 1582, 380, 312, 1944, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.1069173568334335, "compression_ratio": 1.641711229946524, "no_caption_prob": 2.3922906621010043e-05}, {"id": 419, "seek": 360400, "start": 3616.0, "end": 3623.0, "text": " Right. Or, you know, you can with big quotes and forget to write the unit tests.", "tokens": [50364, 400, 611, 11, 472, 551, 300, 307, 1880, 281, 2573, 484, 293, 281, 3449, 307, 300, 309, 307, 767, 1596, 1858, 281, 11200, 257, 18223, 4985, 1500, 570, 291, 393, 12097, 264, 4985, 6921, 13, 50964, 50964, 1779, 13, 1610, 11, 291, 458, 11, 291, 393, 365, 955, 19963, 293, 2870, 281, 2464, 264, 4985, 6921, 13, 51314, 51314, 1779, 13, 583, 365, 257, 2010, 1520, 260, 11, 300, 1582, 380, 312, 1944, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.1069173568334335, "compression_ratio": 1.641711229946524, "no_caption_prob": 2.3922906621010043e-05}, {"id": 420, "seek": 360400, "start": 3623.0, "end": 3626.0, "text": " Right. But with a type checker, that won't be possible.", "tokens": [50364, 400, 611, 11, 472, 551, 300, 307, 1880, 281, 2573, 484, 293, 281, 3449, 307, 300, 309, 307, 767, 1596, 1858, 281, 11200, 257, 18223, 4985, 1500, 570, 291, 393, 12097, 264, 4985, 6921, 13, 50964, 50964, 1779, 13, 1610, 11, 291, 458, 11, 291, 393, 365, 955, 19963, 293, 2870, 281, 2464, 264, 4985, 6921, 13, 51314, 51314, 1779, 13, 583, 365, 257, 2010, 1520, 260, 11, 300, 1582, 380, 312, 1944, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.1069173568334335, "compression_ratio": 1.641711229946524, "no_caption_prob": 2.3922906621010043e-05}, {"id": 421, "seek": 362600, "start": 3626.0, "end": 3635.0, "text": " So type checkers are much more general, also in the sense that they will look at the whole code base.", "tokens": [50364, 407, 2010, 1520, 433, 366, 709, 544, 2674, 11, 611, 294, 264, 2020, 300, 436, 486, 574, 412, 264, 1379, 3089, 3096, 13, 50814, 50814, 407, 309, 311, 516, 281, 312, 1101, 281, 915, 257, 688, 544, 2663, 11, 2318, 498, 291, 500, 380, 362, 665, 14100, 13, 51114, 51114, 9279, 3250, 307, 787, 382, 665, 382, 264, 3713, 293, 264, 14100, 300, 309, 311, 7447, 1951, 13, 51414, 51414, 865, 13, 286, 4114, 257, 6968, 2183, 257, 1339, 646, 1219, 8738, 317, 1832, 39992, 14225, 1208, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.07093438894852348, "compression_ratio": 1.5701754385964912, "no_caption_prob": 1.952557431650348e-05}, {"id": 422, "seek": 362600, "start": 3635.0, "end": 3641.0, "text": " So it's going to be better to find a lot more issues, especially if you don't have good habits.", "tokens": [50364, 407, 2010, 1520, 433, 366, 709, 544, 2674, 11, 611, 294, 264, 2020, 300, 436, 486, 574, 412, 264, 1379, 3089, 3096, 13, 50814, 50814, 407, 309, 311, 516, 281, 312, 1101, 281, 915, 257, 688, 544, 2663, 11, 2318, 498, 291, 500, 380, 362, 665, 14100, 13, 51114, 51114, 9279, 3250, 307, 787, 382, 665, 382, 264, 3713, 293, 264, 14100, 300, 309, 311, 7447, 1951, 13, 51414, 51414, 865, 13, 286, 4114, 257, 6968, 2183, 257, 1339, 646, 1219, 8738, 317, 1832, 39992, 14225, 1208, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.07093438894852348, "compression_ratio": 1.5701754385964912, "no_caption_prob": 1.952557431650348e-05}, {"id": 423, "seek": 362600, "start": 3641.0, "end": 3647.0, "text": " Test development is only as good as the culture and the habits that it's operating within.", "tokens": [50364, 407, 2010, 1520, 433, 366, 709, 544, 2674, 11, 611, 294, 264, 2020, 300, 436, 486, 574, 412, 264, 1379, 3089, 3096, 13, 50814, 50814, 407, 309, 311, 516, 281, 312, 1101, 281, 915, 257, 688, 544, 2663, 11, 2318, 498, 291, 500, 380, 362, 665, 14100, 13, 51114, 51114, 9279, 3250, 307, 787, 382, 665, 382, 264, 3713, 293, 264, 14100, 300, 309, 311, 7447, 1951, 13, 51414, 51414, 865, 13, 286, 4114, 257, 6968, 2183, 257, 1339, 646, 1219, 8738, 317, 1832, 39992, 14225, 1208, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.07093438894852348, "compression_ratio": 1.5701754385964912, "no_caption_prob": 1.952557431650348e-05}, {"id": 424, "seek": 362600, "start": 3647.0, "end": 3651.0, "text": " Yeah. I wrote a blog post a while back called Relentless Tiny Habits.", "tokens": [50364, 407, 2010, 1520, 433, 366, 709, 544, 2674, 11, 611, 294, 264, 2020, 300, 436, 486, 574, 412, 264, 1379, 3089, 3096, 13, 50814, 50814, 407, 309, 311, 516, 281, 312, 1101, 281, 915, 257, 688, 544, 2663, 11, 2318, 498, 291, 500, 380, 362, 665, 14100, 13, 51114, 51114, 9279, 3250, 307, 787, 382, 665, 382, 264, 3713, 293, 264, 14100, 300, 309, 311, 7447, 1951, 13, 51414, 51414, 865, 13, 286, 4114, 257, 6968, 2183, 257, 1339, 646, 1219, 8738, 317, 1832, 39992, 14225, 1208, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.07093438894852348, "compression_ratio": 1.5701754385964912, "no_caption_prob": 1.952557431650348e-05}, {"id": 425, "seek": 365100, "start": 3651.0, "end": 3662.0, "text": " I think that test development is fascinating in the sense that it's not necessarily any particular one difficult skill.", "tokens": [50364, 286, 519, 300, 1500, 3250, 307, 10343, 294, 264, 2020, 300, 309, 311, 406, 4725, 604, 1729, 472, 2252, 5389, 13, 50914, 50914, 467, 311, 544, 445, 411, 11, 1338, 11, 309, 307, 300, 2199, 11, 457, 291, 445, 360, 309, 439, 264, 565, 293, 500, 380, 406, 360, 309, 13, 51264, 51264, 400, 309, 311, 257, 7164, 11, 457, 309, 311, 1152, 281, 1322, 300, 7164, 13, 51414, 51414, 400, 286, 519, 456, 2203, 281, 312, 411, 257, 12543, 5513, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.06189179974933003, "compression_ratio": 1.6231155778894473, "no_caption_prob": 0.0001659703702898696}, {"id": 426, "seek": 365100, "start": 3662.0, "end": 3669.0, "text": " It's more just like, yeah, it is that simple, but you just do it all the time and don't not do it.", "tokens": [50364, 286, 519, 300, 1500, 3250, 307, 10343, 294, 264, 2020, 300, 309, 311, 406, 4725, 604, 1729, 472, 2252, 5389, 13, 50914, 50914, 467, 311, 544, 445, 411, 11, 1338, 11, 309, 307, 300, 2199, 11, 457, 291, 445, 360, 309, 439, 264, 565, 293, 500, 380, 406, 360, 309, 13, 51264, 51264, 400, 309, 311, 257, 7164, 11, 457, 309, 311, 1152, 281, 1322, 300, 7164, 13, 51414, 51414, 400, 286, 519, 456, 2203, 281, 312, 411, 257, 12543, 5513, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.06189179974933003, "compression_ratio": 1.6231155778894473, "no_caption_prob": 0.0001659703702898696}, {"id": 427, "seek": 365100, "start": 3669.0, "end": 3672.0, "text": " And it's a habit, but it's hard to build that habit.", "tokens": [50364, 286, 519, 300, 1500, 3250, 307, 10343, 294, 264, 2020, 300, 309, 311, 406, 4725, 604, 1729, 472, 2252, 5389, 13, 50914, 50914, 467, 311, 544, 445, 411, 11, 1338, 11, 309, 307, 300, 2199, 11, 457, 291, 445, 360, 309, 439, 264, 565, 293, 500, 380, 406, 360, 309, 13, 51264, 51264, 400, 309, 311, 257, 7164, 11, 457, 309, 311, 1152, 281, 1322, 300, 7164, 13, 51414, 51414, 400, 286, 519, 456, 2203, 281, 312, 411, 257, 12543, 5513, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.06189179974933003, "compression_ratio": 1.6231155778894473, "no_caption_prob": 0.0001659703702898696}, {"id": 428, "seek": 365100, "start": 3672.0, "end": 3675.0, "text": " And I think there needs to be like a mindset shift.", "tokens": [50364, 286, 519, 300, 1500, 3250, 307, 10343, 294, 264, 2020, 300, 309, 311, 406, 4725, 604, 1729, 472, 2252, 5389, 13, 50914, 50914, 467, 311, 544, 445, 411, 11, 1338, 11, 309, 307, 300, 2199, 11, 457, 291, 445, 360, 309, 439, 264, 565, 293, 500, 380, 406, 360, 309, 13, 51264, 51264, 400, 309, 311, 257, 7164, 11, 457, 309, 311, 1152, 281, 1322, 300, 7164, 13, 51414, 51414, 400, 286, 519, 456, 2203, 281, 312, 411, 257, 12543, 5513, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.06189179974933003, "compression_ratio": 1.6231155778894473, "no_caption_prob": 0.0001659703702898696}, {"id": 429, "seek": 367500, "start": 3675.0, "end": 3686.0, "text": " I think when you have that mindset shift, when you see it as something that you go from thinking that it's something that slows you down to thinking that it's something that speeds you up.", "tokens": [50364, 286, 519, 562, 291, 362, 300, 12543, 5513, 11, 562, 291, 536, 309, 382, 746, 300, 291, 352, 490, 1953, 300, 309, 311, 746, 300, 35789, 291, 760, 281, 1953, 300, 309, 311, 746, 300, 16411, 291, 493, 13, 50914, 50914, 286, 519, 300, 311, 7115, 13, 50964, 50964, 583, 309, 311, 611, 746, 300, 291, 643, 281, 360, 1803, 13, 51214, 51214, 509, 643, 281, 483, 1101, 13, 1779, 13, 583, 611, 428, 1379, 1469, 2203, 281, 360, 264, 912, 551, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.09469394026131465, "compression_ratio": 1.9775280898876404, "no_caption_prob": 0.0002164949255529791}, {"id": 430, "seek": 367500, "start": 3686.0, "end": 3687.0, "text": " I think that's essential.", "tokens": [50364, 286, 519, 562, 291, 362, 300, 12543, 5513, 11, 562, 291, 536, 309, 382, 746, 300, 291, 352, 490, 1953, 300, 309, 311, 746, 300, 35789, 291, 760, 281, 1953, 300, 309, 311, 746, 300, 16411, 291, 493, 13, 50914, 50914, 286, 519, 300, 311, 7115, 13, 50964, 50964, 583, 309, 311, 611, 746, 300, 291, 643, 281, 360, 1803, 13, 51214, 51214, 509, 643, 281, 483, 1101, 13, 1779, 13, 583, 611, 428, 1379, 1469, 2203, 281, 360, 264, 912, 551, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.09469394026131465, "compression_ratio": 1.9775280898876404, "no_caption_prob": 0.0002164949255529791}, {"id": 431, "seek": 367500, "start": 3687.0, "end": 3692.0, "text": " But it's also something that you need to do yourself.", "tokens": [50364, 286, 519, 562, 291, 362, 300, 12543, 5513, 11, 562, 291, 536, 309, 382, 746, 300, 291, 352, 490, 1953, 300, 309, 311, 746, 300, 35789, 291, 760, 281, 1953, 300, 309, 311, 746, 300, 16411, 291, 493, 13, 50914, 50914, 286, 519, 300, 311, 7115, 13, 50964, 50964, 583, 309, 311, 611, 746, 300, 291, 643, 281, 360, 1803, 13, 51214, 51214, 509, 643, 281, 483, 1101, 13, 1779, 13, 583, 611, 428, 1379, 1469, 2203, 281, 360, 264, 912, 551, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.09469394026131465, "compression_ratio": 1.9775280898876404, "no_caption_prob": 0.0002164949255529791}, {"id": 432, "seek": 367500, "start": 3692.0, "end": 3698.0, "text": " You need to get better. Right. But also your whole team needs to do the same thing.", "tokens": [50364, 286, 519, 562, 291, 362, 300, 12543, 5513, 11, 562, 291, 536, 309, 382, 746, 300, 291, 352, 490, 1953, 300, 309, 311, 746, 300, 35789, 291, 760, 281, 1953, 300, 309, 311, 746, 300, 16411, 291, 493, 13, 50914, 50914, 286, 519, 300, 311, 7115, 13, 50964, 50964, 583, 309, 311, 611, 746, 300, 291, 643, 281, 360, 1803, 13, 51214, 51214, 509, 643, 281, 483, 1101, 13, 1779, 13, 583, 611, 428, 1379, 1469, 2203, 281, 360, 264, 912, 551, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.09469394026131465, "compression_ratio": 1.9775280898876404, "no_caption_prob": 0.0002164949255529791}, {"id": 433, "seek": 369800, "start": 3698.0, "end": 3708.0, "text": " Because as soon as someone doesn't adhere to this philosophy of you should write tests first, doing the right TDD the right way.", "tokens": [50364, 1436, 382, 2321, 382, 1580, 1177, 380, 33584, 281, 341, 10675, 295, 291, 820, 2464, 6921, 700, 11, 884, 264, 558, 314, 20818, 264, 558, 636, 13, 50864, 50864, 1042, 11, 550, 264, 1379, 1185, 486, 406, 589, 382, 8659, 13, 51114, 51114, 13813, 472, 954, 727, 445, 909, 6921, 11, 909, 3467, 293, 3470, 1518, 311, 2909, 365, 257, 688, 295, 589, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.142897788216086, "compression_ratio": 1.5052631578947369, "no_caption_prob": 4.683585575548932e-05}, {"id": 434, "seek": 369800, "start": 3708.0, "end": 3713.0, "text": " Well, then the whole system will not work as effectively.", "tokens": [50364, 1436, 382, 2321, 382, 1580, 1177, 380, 33584, 281, 341, 10675, 295, 291, 820, 2464, 6921, 700, 11, 884, 264, 558, 314, 20818, 264, 558, 636, 13, 50864, 50864, 1042, 11, 550, 264, 1379, 1185, 486, 406, 589, 382, 8659, 13, 51114, 51114, 13813, 472, 954, 727, 445, 909, 6921, 11, 909, 3467, 293, 3470, 1518, 311, 2909, 365, 257, 688, 295, 589, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.142897788216086, "compression_ratio": 1.5052631578947369, "no_caption_prob": 4.683585575548932e-05}, {"id": 435, "seek": 369800, "start": 3713.0, "end": 3721.0, "text": " Whereas one person could just add tests, add types and improve everyone's lives with a lot of work.", "tokens": [50364, 1436, 382, 2321, 382, 1580, 1177, 380, 33584, 281, 341, 10675, 295, 291, 820, 2464, 6921, 700, 11, 884, 264, 558, 314, 20818, 264, 558, 636, 13, 50864, 50864, 1042, 11, 550, 264, 1379, 1185, 486, 406, 589, 382, 8659, 13, 51114, 51114, 13813, 472, 954, 727, 445, 909, 6921, 11, 909, 3467, 293, 3470, 1518, 311, 2909, 365, 257, 688, 295, 589, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.142897788216086, "compression_ratio": 1.5052631578947369, "no_caption_prob": 4.683585575548932e-05}, {"id": 436, "seek": 372100, "start": 3721.0, "end": 3734.0, "text": " But yeah, I mean, someone can take that nice opaque type and expose the constructors and then just building it or not use the username opaque type and just start passing strings somewhere, too.", "tokens": [50364, 583, 1338, 11, 286, 914, 11, 1580, 393, 747, 300, 1481, 42687, 2010, 293, 19219, 264, 7690, 830, 293, 550, 445, 2390, 309, 420, 406, 764, 264, 30351, 42687, 2010, 293, 445, 722, 8437, 13985, 4079, 11, 886, 13, 51014, 51014, 1779, 13, 407, 286, 411, 281, 17139, 797, 420, 456, 366, 6988, 721, 281, 1293, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.16881215767782243, "compression_ratio": 1.5380116959064327, "no_caption_prob": 0.00010886682866839692}, {"id": 437, "seek": 372100, "start": 3734.0, "end": 3743.0, "text": " Right. So I like to curse again or there are cultural things to both.", "tokens": [50364, 583, 1338, 11, 286, 914, 11, 1580, 393, 747, 300, 1481, 42687, 2010, 293, 19219, 264, 7690, 830, 293, 550, 445, 2390, 309, 420, 406, 764, 264, 30351, 42687, 2010, 293, 445, 722, 8437, 13985, 4079, 11, 886, 13, 51014, 51014, 1779, 13, 407, 286, 411, 281, 17139, 797, 420, 456, 366, 6988, 721, 281, 1293, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.16881215767782243, "compression_ratio": 1.5380116959064327, "no_caption_prob": 0.00010886682866839692}, {"id": 438, "seek": 374300, "start": 3743.0, "end": 3753.0, "text": " And it's not a coincidence that extreme programming is heavy on test driven development and pair programming.", "tokens": [50364, 400, 309, 311, 406, 257, 22137, 300, 8084, 9410, 307, 4676, 322, 1500, 9555, 3250, 293, 6119, 9410, 13, 50864, 50864, 1779, 13, 1436, 309, 311, 6988, 293, 309, 311, 466, 14100, 293, 15232, 3601, 293, 15232, 6988, 3487, 13, 51164, 51164, 400, 498, 291, 500, 380, 498, 291, 500, 380, 360, 300, 11, 550, 309, 311, 406, 588, 4420, 13, 51414, 51414], "temperature": 0.0, "avg_logprob": -0.08355010106013372, "compression_ratio": 1.5909090909090908, "no_caption_prob": 2.0784733351320028e-05}, {"id": 439, "seek": 374300, "start": 3753.0, "end": 3759.0, "text": " Right. Because it's cultural and it's about habits and spreading knowledge and spreading cultural ideas.", "tokens": [50364, 400, 309, 311, 406, 257, 22137, 300, 8084, 9410, 307, 4676, 322, 1500, 9555, 3250, 293, 6119, 9410, 13, 50864, 50864, 1779, 13, 1436, 309, 311, 6988, 293, 309, 311, 466, 14100, 293, 15232, 3601, 293, 15232, 6988, 3487, 13, 51164, 51164, 400, 498, 291, 500, 380, 498, 291, 500, 380, 360, 300, 11, 550, 309, 311, 406, 588, 4420, 13, 51414, 51414], "temperature": 0.0, "avg_logprob": -0.08355010106013372, "compression_ratio": 1.5909090909090908, "no_caption_prob": 2.0784733351320028e-05}, {"id": 440, "seek": 374300, "start": 3759.0, "end": 3764.0, "text": " And if you don't if you don't do that, then it's not very useful.", "tokens": [50364, 400, 309, 311, 406, 257, 22137, 300, 8084, 9410, 307, 4676, 322, 1500, 9555, 3250, 293, 6119, 9410, 13, 50864, 50864, 1779, 13, 1436, 309, 311, 6988, 293, 309, 311, 466, 14100, 293, 15232, 3601, 293, 15232, 6988, 3487, 13, 51164, 51164, 400, 498, 291, 500, 380, 498, 291, 500, 380, 360, 300, 11, 550, 309, 311, 406, 588, 4420, 13, 51414, 51414], "temperature": 0.0, "avg_logprob": -0.08355010106013372, "compression_ratio": 1.5909090909090908, "no_caption_prob": 2.0784733351320028e-05}, {"id": 441, "seek": 376400, "start": 3764.0, "end": 3778.0, "text": " I still imagine that if you have a team of 10 developers who are keen on doing TDD except two people, I feel like they will always pair together because they're going to be less annoyed by the other person.", "tokens": [50364, 286, 920, 3811, 300, 498, 291, 362, 257, 1469, 295, 1266, 8849, 567, 366, 20297, 322, 884, 314, 20818, 3993, 732, 561, 11, 286, 841, 411, 436, 486, 1009, 6119, 1214, 570, 436, 434, 516, 281, 312, 1570, 25921, 538, 264, 661, 954, 13, 51064, 51064, 1743, 11, 1954, 11, 1338, 11, 291, 293, 385, 652, 257, 665, 1469, 570, 321, 500, 380, 584, 11, 1954, 11, 1767, 2464, 257, 1500, 700, 13, 51414, 51414, 286, 519, 257, 688, 295, 309, 1487, 760, 281, 264, 24709, 11, 411, 264, 6765, 300, 321, 300, 321, 574, 807, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.10971479132623956, "compression_ratio": 1.5991902834008098, "no_caption_prob": 0.0002611500967759639}, {"id": 442, "seek": 376400, "start": 3778.0, "end": 3785.0, "text": " Like, oh, yeah, you and me make a good team because we don't say, oh, please write a test first.", "tokens": [50364, 286, 920, 3811, 300, 498, 291, 362, 257, 1469, 295, 1266, 8849, 567, 366, 20297, 322, 884, 314, 20818, 3993, 732, 561, 11, 286, 841, 411, 436, 486, 1009, 6119, 1214, 570, 436, 434, 516, 281, 312, 1570, 25921, 538, 264, 661, 954, 13, 51064, 51064, 1743, 11, 1954, 11, 1338, 11, 291, 293, 385, 652, 257, 665, 1469, 570, 321, 500, 380, 584, 11, 1954, 11, 1767, 2464, 257, 1500, 700, 13, 51414, 51414, 286, 519, 257, 688, 295, 309, 1487, 760, 281, 264, 24709, 11, 411, 264, 6765, 300, 321, 300, 321, 574, 807, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.10971479132623956, "compression_ratio": 1.5991902834008098, "no_caption_prob": 0.0002611500967759639}, {"id": 443, "seek": 376400, "start": 3785.0, "end": 3792.0, "text": " I think a lot of it comes down to the paradigm, like the lens that we that we look through.", "tokens": [50364, 286, 920, 3811, 300, 498, 291, 362, 257, 1469, 295, 1266, 8849, 567, 366, 20297, 322, 884, 314, 20818, 3993, 732, 561, 11, 286, 841, 411, 436, 486, 1009, 6119, 1214, 570, 436, 434, 516, 281, 312, 1570, 25921, 538, 264, 661, 954, 13, 51064, 51064, 1743, 11, 1954, 11, 1338, 11, 291, 293, 385, 652, 257, 665, 1469, 570, 321, 500, 380, 584, 11, 1954, 11, 1767, 2464, 257, 1500, 700, 13, 51414, 51414, 286, 519, 257, 688, 295, 309, 1487, 760, 281, 264, 24709, 11, 411, 264, 6765, 300, 321, 300, 321, 574, 807, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.10971479132623956, "compression_ratio": 1.5991902834008098, "no_caption_prob": 0.0002611500967759639}, {"id": 444, "seek": 379200, "start": 3792.0, "end": 3802.0, "text": " And if if if you if you see types as a burden, the way that you use types, if if at all, if you can avoid using them, then maybe not at all.", "tokens": [50364, 400, 498, 498, 498, 291, 498, 291, 536, 3467, 382, 257, 12578, 11, 264, 636, 300, 291, 764, 3467, 11, 498, 498, 412, 439, 11, 498, 291, 393, 5042, 1228, 552, 11, 550, 1310, 406, 412, 439, 13, 50864, 50864, 583, 264, 636, 291, 764, 3467, 486, 574, 588, 819, 13, 759, 291, 434, 3579, 15576, 14237, 11, 291, 434, 1391, 516, 281, 764, 257, 688, 295, 604, 311, 420, 13596, 986, 3467, 13, 51214, 51214, 2743, 38253, 7970, 307, 257, 955, 551, 13, 51364, 51364], "temperature": 0.0, "avg_logprob": -0.07895765521309593, "compression_ratio": 1.6683673469387754, "no_caption_prob": 3.9440434193238616e-05}, {"id": 445, "seek": 379200, "start": 3802.0, "end": 3809.0, "text": " But the way you use types will look very different. If you're writing TypeScript, you're probably going to use a lot of any's or inferred types.", "tokens": [50364, 400, 498, 498, 498, 291, 498, 291, 536, 3467, 382, 257, 12578, 11, 264, 636, 300, 291, 764, 3467, 11, 498, 498, 412, 439, 11, 498, 291, 393, 5042, 1228, 552, 11, 550, 1310, 406, 412, 439, 13, 50864, 50864, 583, 264, 636, 291, 764, 3467, 486, 574, 588, 819, 13, 759, 291, 434, 3579, 15576, 14237, 11, 291, 434, 1391, 516, 281, 764, 257, 688, 295, 604, 311, 420, 13596, 986, 3467, 13, 51214, 51214, 2743, 38253, 7970, 307, 257, 955, 551, 13, 51364, 51364], "temperature": 0.0, "avg_logprob": -0.07895765521309593, "compression_ratio": 1.6683673469387754, "no_caption_prob": 3.9440434193238616e-05}, {"id": 446, "seek": 379200, "start": 3809.0, "end": 3812.0, "text": " Also inference apparently is a big thing.", "tokens": [50364, 400, 498, 498, 498, 291, 498, 291, 536, 3467, 382, 257, 12578, 11, 264, 636, 300, 291, 764, 3467, 11, 498, 498, 412, 439, 11, 498, 291, 393, 5042, 1228, 552, 11, 550, 1310, 406, 412, 439, 13, 50864, 50864, 583, 264, 636, 291, 764, 3467, 486, 574, 588, 819, 13, 759, 291, 434, 3579, 15576, 14237, 11, 291, 434, 1391, 516, 281, 764, 257, 688, 295, 604, 311, 420, 13596, 986, 3467, 13, 51214, 51214, 2743, 38253, 7970, 307, 257, 955, 551, 13, 51364, 51364], "temperature": 0.0, "avg_logprob": -0.07895765521309593, "compression_ratio": 1.6683673469387754, "no_caption_prob": 3.9440434193238616e-05}, {"id": 447, "seek": 381200, "start": 3812.0, "end": 3827.0, "text": " Type inference. And you're probably going to just JSON that parse and get your any type and pass it around without, you know, using something that does something similar to JSON decoding an Elm where it gives you guarantees about the JSON values you're getting.", "tokens": [50364, 15576, 38253, 13, 400, 291, 434, 1391, 516, 281, 445, 31828, 300, 48377, 293, 483, 428, 604, 2010, 293, 1320, 309, 926, 1553, 11, 291, 458, 11, 1228, 746, 300, 775, 746, 2531, 281, 31828, 979, 8616, 364, 2699, 76, 689, 309, 2709, 291, 32567, 466, 264, 31828, 4190, 291, 434, 1242, 13, 51114, 51114, 407, 457, 498, 291, 20281, 309, 382, 746, 300, 2709, 291, 2158, 281, 281, 1520, 729, 3467, 293, 312, 1075, 281, 589, 365, 729, 3467, 11, 2902, 291, 6687, 293, 32567, 11, 309, 311, 516, 281, 1319, 264, 636, 300, 291, 13982, 3467, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.10362764932576893, "compression_ratio": 1.7592592592592593, "no_caption_prob": 0.0002491919440217316}, {"id": 448, "seek": 381200, "start": 3827.0, "end": 3839.0, "text": " So but if you perceive it as something that gives you value to to check those types and be able to work with those types, giving you confidence and guarantees, it's going to change the way that you leverage types.", "tokens": [50364, 15576, 38253, 13, 400, 291, 434, 1391, 516, 281, 445, 31828, 300, 48377, 293, 483, 428, 604, 2010, 293, 1320, 309, 926, 1553, 11, 291, 458, 11, 1228, 746, 300, 775, 746, 2531, 281, 31828, 979, 8616, 364, 2699, 76, 689, 309, 2709, 291, 32567, 466, 264, 31828, 4190, 291, 434, 1242, 13, 51114, 51114, 407, 457, 498, 291, 20281, 309, 382, 746, 300, 2709, 291, 2158, 281, 281, 1520, 729, 3467, 293, 312, 1075, 281, 589, 365, 729, 3467, 11, 2902, 291, 6687, 293, 32567, 11, 309, 311, 516, 281, 1319, 264, 636, 300, 291, 13982, 3467, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.10362764932576893, "compression_ratio": 1.7592592592592593, "no_caption_prob": 0.0002491919440217316}, {"id": 449, "seek": 383900, "start": 3839.0, "end": 3851.0, "text": " If you're working in Elm, you're going to be making impossible states impossible and you're going to be using parse, don't validate and all these things that let you get more value out of types instead of saying, oh, this is just a burden.", "tokens": [50364, 759, 291, 434, 1364, 294, 2699, 76, 11, 291, 434, 516, 281, 312, 1455, 6243, 4368, 6243, 293, 291, 434, 516, 281, 312, 1228, 48377, 11, 500, 380, 29562, 293, 439, 613, 721, 300, 718, 291, 483, 544, 2158, 484, 295, 3467, 2602, 295, 1566, 11, 1954, 11, 341, 307, 445, 257, 12578, 13, 50964, 50964, 400, 286, 519, 309, 311, 264, 912, 365, 6921, 13, 1743, 498, 291, 1910, 6921, 382, 257, 12578, 293, 257, 9723, 6357, 11, 597, 286, 478, 286, 534, 500, 380, 519, 309, 311, 30223, 281, 751, 466, 613, 721, 382, 257, 9723, 6357, 420, 257, 4843, 2099, 6590, 420, 746, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.04330905708106789, "compression_ratio": 1.8202247191011236, "no_caption_prob": 6.204544479260221e-05}, {"id": 450, "seek": 383900, "start": 3851.0, "end": 3866.0, "text": " And I think it's the same with tests. Like if you view tests as a burden and a moral responsibility, which I'm I really don't think it's constructive to talk about these things as a moral responsibility or a professional shortcoming or something.", "tokens": [50364, 759, 291, 434, 1364, 294, 2699, 76, 11, 291, 434, 516, 281, 312, 1455, 6243, 4368, 6243, 293, 291, 434, 516, 281, 312, 1228, 48377, 11, 500, 380, 29562, 293, 439, 613, 721, 300, 718, 291, 483, 544, 2158, 484, 295, 3467, 2602, 295, 1566, 11, 1954, 11, 341, 307, 445, 257, 12578, 13, 50964, 50964, 400, 286, 519, 309, 311, 264, 912, 365, 6921, 13, 1743, 498, 291, 1910, 6921, 382, 257, 12578, 293, 257, 9723, 6357, 11, 597, 286, 478, 286, 534, 500, 380, 519, 309, 311, 30223, 281, 751, 466, 613, 721, 382, 257, 9723, 6357, 420, 257, 4843, 2099, 6590, 420, 746, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.04330905708106789, "compression_ratio": 1.8202247191011236, "no_caption_prob": 6.204544479260221e-05}, {"id": 451, "seek": 386600, "start": 3866.0, "end": 3888.0, "text": " If you don't follow these practices, in my opinion, that's just very counterproductive. To me, it's like, hey, this is a tool that allows you to to work in a much more like enjoyable and safe way where you're just like flowing through your code and you don't have to keep manually testing this thing.", "tokens": [50364, 759, 291, 500, 380, 1524, 613, 7525, 11, 294, 452, 4800, 11, 300, 311, 445, 588, 5682, 14314, 20221, 13, 1407, 385, 11, 309, 311, 411, 11, 4177, 11, 341, 307, 257, 2290, 300, 4045, 291, 281, 281, 589, 294, 257, 709, 544, 411, 20305, 293, 3273, 636, 689, 291, 434, 445, 411, 13974, 807, 428, 3089, 293, 291, 500, 380, 362, 281, 1066, 16945, 4997, 341, 551, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.07325182875541791, "compression_ratio": 1.5384615384615385, "no_caption_prob": 4.133150650886819e-05}, {"id": 452, "seek": 388800, "start": 3888.0, "end": 3901.0, "text": " And is it working now? Is it working now? Is it working now? It's it's very satisfying to be working with this auto test runner that and you want to refactor. Oh, no problem. Let me just go and rip off.", "tokens": [50364, 400, 307, 309, 1364, 586, 30, 1119, 309, 1364, 586, 30, 1119, 309, 1364, 586, 30, 467, 311, 309, 311, 588, 18348, 281, 312, 1364, 365, 341, 8399, 1500, 24376, 300, 293, 291, 528, 281, 1895, 15104, 13, 876, 11, 572, 1154, 13, 961, 385, 445, 352, 293, 12782, 766, 13, 51014, 51014], "temperature": 0.0, "avg_logprob": -0.09871207150545987, "compression_ratio": 1.518796992481203, "no_caption_prob": 1.2411286661517806e-05}, {"id": 453, "seek": 390100, "start": 3901.0, "end": 3920.0, "text": " Like if you like the feeling of refactoring Elm code without tests, like if you have a well tested code base that is, you know, nicely abstracted to have nice units that have, you know, nicely defined responsibilities that aren't heavily coupled together.", "tokens": [50364, 1743, 498, 291, 411, 264, 2633, 295, 1895, 578, 3662, 2699, 76, 3089, 1553, 6921, 11, 411, 498, 291, 362, 257, 731, 8246, 3089, 3096, 300, 307, 11, 291, 458, 11, 9594, 12649, 292, 281, 362, 1481, 6815, 300, 362, 11, 291, 458, 11, 9594, 7642, 16190, 300, 3212, 380, 10950, 29482, 1214, 13, 51314, 51314], "temperature": 0.0, "avg_logprob": -0.07859632064556253, "compression_ratio": 1.6037735849056605, "no_caption_prob": 6.013892561895773e-05}, {"id": 454, "seek": 392000, "start": 3920.0, "end": 3935.0, "text": " That feels really good. So, you know, but but it's a paradigm shift and a lot of people view tests as a burden. And I think that's the hump to get over. And culturally, that's that's the first step is like seeing, seeing that in action.", "tokens": [50364, 663, 3417, 534, 665, 13, 407, 11, 291, 458, 11, 457, 457, 309, 311, 257, 24709, 5513, 293, 257, 688, 295, 561, 1910, 6921, 382, 257, 12578, 13, 400, 286, 519, 300, 311, 264, 47093, 281, 483, 670, 13, 400, 28879, 11, 300, 311, 300, 311, 264, 700, 1823, 307, 411, 2577, 11, 2577, 300, 294, 3069, 13, 51114, 51114], "temperature": 0.0, "avg_logprob": -0.08090023071535173, "compression_ratio": 1.4567901234567902, "no_caption_prob": 1.130044438468758e-05}, {"id": 455, "seek": 393500, "start": 3935.0, "end": 3953.0, "text": " But I think a really good way to to build this up is to do it outside of production code. So, you know, there's this concept of code cadres, which is code that you don't ship to production where the purpose of it is learning. So you take a simple exercise, Roman numerals, fizzbuzz, things like that.", "tokens": [50364, 583, 286, 519, 257, 534, 665, 636, 281, 281, 1322, 341, 493, 307, 281, 360, 309, 2380, 295, 4265, 3089, 13, 407, 11, 291, 458, 11, 456, 311, 341, 3410, 295, 3089, 12209, 495, 11, 597, 307, 3089, 300, 291, 500, 380, 5374, 281, 4265, 689, 264, 4334, 295, 309, 307, 2539, 13, 407, 291, 747, 257, 2199, 5380, 11, 8566, 7866, 1124, 11, 283, 8072, 65, 16740, 11, 721, 411, 300, 13, 51264, 51264], "temperature": 0.0, "avg_logprob": -0.10952421906706575, "compression_ratio": 1.5075376884422111, "no_caption_prob": 8.88746726559475e-05}, {"id": 456, "seek": 395300, "start": 3953.0, "end": 3981.0, "text": " And you use all of the techniques that you're trying to learn, you you only do very disciplined red green refactor. And because when you're working in a large production system, then you can build up bad habits. And you can make you can take steps where you're actually like coupling things in a way that makes it harder to work with when you're working on these simple problems, you can experiment and learn and develop these habits.", "tokens": [50364, 400, 291, 764, 439, 295, 264, 7512, 300, 291, 434, 1382, 281, 1466, 11, 291, 291, 787, 360, 588, 40061, 2182, 3092, 1895, 15104, 13, 400, 570, 562, 291, 434, 1364, 294, 257, 2416, 4265, 1185, 11, 550, 291, 393, 1322, 493, 1578, 14100, 13, 400, 291, 393, 652, 291, 393, 747, 4439, 689, 291, 434, 767, 411, 37447, 721, 294, 257, 636, 300, 1669, 309, 6081, 281, 589, 365, 562, 291, 434, 1364, 322, 613, 2199, 2740, 11, 291, 393, 5120, 293, 1466, 293, 1499, 613, 14100, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.08131201036514775, "compression_ratio": 1.7714285714285714, "no_caption_prob": 4.468848783290014e-05}, {"id": 457, "seek": 398100, "start": 3981.0, "end": 3999.0, "text": " Oh, I always feel like you can play with Elm codes more than other languages. But yeah, absolutely. One thing that just came to my mind is that we we didn't mention compilation times. Because some languages have very long compilation times.", "tokens": [50364, 876, 11, 286, 1009, 841, 411, 291, 393, 862, 365, 2699, 76, 14211, 544, 813, 661, 8650, 13, 583, 1338, 11, 3122, 13, 1485, 551, 300, 445, 1361, 281, 452, 1575, 307, 300, 321, 321, 994, 380, 2152, 40261, 1413, 13, 1436, 512, 8650, 362, 588, 938, 40261, 1413, 13, 51264, 51264], "temperature": 0.0, "avg_logprob": -0.12274583180745442, "compression_ratio": 1.4634146341463414, "no_caption_prob": 7.141401874832809e-05}, {"id": 458, "seek": 399900, "start": 3999.0, "end": 4017.0, "text": " So if you want to be if you want the type checker, the compiler to tell you, hey, there's a problem here, there's a problem there, or to make guarantees for you. Well, do this, how fast the compiler runs will impact the experience that you will have.", "tokens": [50364, 407, 498, 291, 528, 281, 312, 498, 291, 528, 264, 2010, 1520, 260, 11, 264, 31958, 281, 980, 291, 11, 4177, 11, 456, 311, 257, 1154, 510, 11, 456, 311, 257, 1154, 456, 11, 420, 281, 652, 32567, 337, 291, 13, 1042, 11, 360, 341, 11, 577, 2370, 264, 31958, 6676, 486, 2712, 264, 1752, 300, 291, 486, 362, 13, 51264, 51264, 1079, 13, 51314, 51314, 400, 498, 341, 1190, 257, 688, 4663, 813, 264, 2010, 1520, 260, 11, 550, 1338, 11, 286, 519, 309, 1669, 257, 688, 295, 2020, 300, 291, 486, 2464, 544, 4985, 6921, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.11170612596998028, "compression_ratio": 1.8516746411483254, "no_caption_prob": 0.00011410919978516176}, {"id": 459, "seek": 399900, "start": 4017.0, "end": 4018.0, "text": " Yes.", "tokens": [50364, 407, 498, 291, 528, 281, 312, 498, 291, 528, 264, 2010, 1520, 260, 11, 264, 31958, 281, 980, 291, 11, 4177, 11, 456, 311, 257, 1154, 510, 11, 456, 311, 257, 1154, 456, 11, 420, 281, 652, 32567, 337, 291, 13, 1042, 11, 360, 341, 11, 577, 2370, 264, 31958, 6676, 486, 2712, 264, 1752, 300, 291, 486, 362, 13, 51264, 51264, 1079, 13, 51314, 51314, 400, 498, 341, 1190, 257, 688, 4663, 813, 264, 2010, 1520, 260, 11, 550, 1338, 11, 286, 519, 309, 1669, 257, 688, 295, 2020, 300, 291, 486, 2464, 544, 4985, 6921, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.11170612596998028, "compression_ratio": 1.8516746411483254, "no_caption_prob": 0.00011410919978516176}, {"id": 460, "seek": 399900, "start": 4018.0, "end": 4026.0, "text": " And if this run a lot faster than the type checker, then yeah, I think it makes a lot of sense that you will write more unit tests.", "tokens": [50364, 407, 498, 291, 528, 281, 312, 498, 291, 528, 264, 2010, 1520, 260, 11, 264, 31958, 281, 980, 291, 11, 4177, 11, 456, 311, 257, 1154, 510, 11, 456, 311, 257, 1154, 456, 11, 420, 281, 652, 32567, 337, 291, 13, 1042, 11, 360, 341, 11, 577, 2370, 264, 31958, 6676, 486, 2712, 264, 1752, 300, 291, 486, 362, 13, 51264, 51264, 1079, 13, 51314, 51314, 400, 498, 341, 1190, 257, 688, 4663, 813, 264, 2010, 1520, 260, 11, 550, 1338, 11, 286, 519, 309, 1669, 257, 688, 295, 2020, 300, 291, 486, 2464, 544, 4985, 6921, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.11170612596998028, "compression_ratio": 1.8516746411483254, "no_caption_prob": 0.00011410919978516176}, {"id": 461, "seek": 402600, "start": 4026.0, "end": 4039.0, "text": " In Elm's case, like both are really fast. I would say well, the type check is much faster than unit tests because the more tests you add, the slower it will run. But yeah, they're both fast in our case. So we're pretty lucky.", "tokens": [50364, 682, 2699, 76, 311, 1389, 11, 411, 1293, 366, 534, 2370, 13, 286, 576, 584, 731, 11, 264, 2010, 1520, 307, 709, 4663, 813, 4985, 6921, 570, 264, 544, 6921, 291, 909, 11, 264, 14009, 309, 486, 1190, 13, 583, 1338, 11, 436, 434, 1293, 2370, 294, 527, 1389, 13, 407, 321, 434, 1238, 6356, 13, 51014, 51014, 1156, 1208, 366, 1596, 2370, 13, 865, 13, 51114, 51114, 1156, 1208, 366, 1596, 2370, 294, 2699, 76, 13, 51214, 51214, 4056, 2581, 322, 577, 867, 291, 362, 13, 759, 291, 362, 1266, 11, 1360, 11, 309, 311, 799, 747, 257, 1326, 3949, 11, 1391, 13, 51464, 51464, 22539, 322, 437, 291, 1500, 11, 558, 30, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.17872306047859837, "compression_ratio": 1.6062992125984252, "no_caption_prob": 4.611019539879635e-05}, {"id": 462, "seek": 402600, "start": 4039.0, "end": 4041.0, "text": " Units are quite fast. Yeah.", "tokens": [50364, 682, 2699, 76, 311, 1389, 11, 411, 1293, 366, 534, 2370, 13, 286, 576, 584, 731, 11, 264, 2010, 1520, 307, 709, 4663, 813, 4985, 6921, 570, 264, 544, 6921, 291, 909, 11, 264, 14009, 309, 486, 1190, 13, 583, 1338, 11, 436, 434, 1293, 2370, 294, 527, 1389, 13, 407, 321, 434, 1238, 6356, 13, 51014, 51014, 1156, 1208, 366, 1596, 2370, 13, 865, 13, 51114, 51114, 1156, 1208, 366, 1596, 2370, 294, 2699, 76, 13, 51214, 51214, 4056, 2581, 322, 577, 867, 291, 362, 13, 759, 291, 362, 1266, 11, 1360, 11, 309, 311, 799, 747, 257, 1326, 3949, 11, 1391, 13, 51464, 51464, 22539, 322, 437, 291, 1500, 11, 558, 30, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.17872306047859837, "compression_ratio": 1.6062992125984252, "no_caption_prob": 4.611019539879635e-05}, {"id": 463, "seek": 402600, "start": 4041.0, "end": 4043.0, "text": " Units are quite fast in Elm.", "tokens": [50364, 682, 2699, 76, 311, 1389, 11, 411, 1293, 366, 534, 2370, 13, 286, 576, 584, 731, 11, 264, 2010, 1520, 307, 709, 4663, 813, 4985, 6921, 570, 264, 544, 6921, 291, 909, 11, 264, 14009, 309, 486, 1190, 13, 583, 1338, 11, 436, 434, 1293, 2370, 294, 527, 1389, 13, 407, 321, 434, 1238, 6356, 13, 51014, 51014, 1156, 1208, 366, 1596, 2370, 13, 865, 13, 51114, 51114, 1156, 1208, 366, 1596, 2370, 294, 2699, 76, 13, 51214, 51214, 4056, 2581, 322, 577, 867, 291, 362, 13, 759, 291, 362, 1266, 11, 1360, 11, 309, 311, 799, 747, 257, 1326, 3949, 11, 1391, 13, 51464, 51464, 22539, 322, 437, 291, 1500, 11, 558, 30, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.17872306047859837, "compression_ratio": 1.6062992125984252, "no_caption_prob": 4.611019539879635e-05}, {"id": 464, "seek": 402600, "start": 4043.0, "end": 4048.0, "text": " Depends on how many you have. If you have 10,000, it's gonna take a few seconds, probably.", "tokens": [50364, 682, 2699, 76, 311, 1389, 11, 411, 1293, 366, 534, 2370, 13, 286, 576, 584, 731, 11, 264, 2010, 1520, 307, 709, 4663, 813, 4985, 6921, 570, 264, 544, 6921, 291, 909, 11, 264, 14009, 309, 486, 1190, 13, 583, 1338, 11, 436, 434, 1293, 2370, 294, 527, 1389, 13, 407, 321, 434, 1238, 6356, 13, 51014, 51014, 1156, 1208, 366, 1596, 2370, 13, 865, 13, 51114, 51114, 1156, 1208, 366, 1596, 2370, 294, 2699, 76, 13, 51214, 51214, 4056, 2581, 322, 577, 867, 291, 362, 13, 759, 291, 362, 1266, 11, 1360, 11, 309, 311, 799, 747, 257, 1326, 3949, 11, 1391, 13, 51464, 51464, 22539, 322, 437, 291, 1500, 11, 558, 30, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.17872306047859837, "compression_ratio": 1.6062992125984252, "no_caption_prob": 4.611019539879635e-05}, {"id": 465, "seek": 402600, "start": 4048.0, "end": 4050.0, "text": " Depending on what you test, right?", "tokens": [50364, 682, 2699, 76, 311, 1389, 11, 411, 1293, 366, 534, 2370, 13, 286, 576, 584, 731, 11, 264, 2010, 1520, 307, 709, 4663, 813, 4985, 6921, 570, 264, 544, 6921, 291, 909, 11, 264, 14009, 309, 486, 1190, 13, 583, 1338, 11, 436, 434, 1293, 2370, 294, 527, 1389, 13, 407, 321, 434, 1238, 6356, 13, 51014, 51014, 1156, 1208, 366, 1596, 2370, 13, 865, 13, 51114, 51114, 1156, 1208, 366, 1596, 2370, 294, 2699, 76, 13, 51214, 51214, 4056, 2581, 322, 577, 867, 291, 362, 13, 759, 291, 362, 1266, 11, 1360, 11, 309, 311, 799, 747, 257, 1326, 3949, 11, 1391, 13, 51464, 51464, 22539, 322, 437, 291, 1500, 11, 558, 30, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.17872306047859837, "compression_ratio": 1.6062992125984252, "no_caption_prob": 4.611019539879635e-05}, {"id": 466, "seek": 405000, "start": 4050.0, "end": 4069.0, "text": " Even so, that's not so bad. So what tends to happen a lot in like Ruby on Rails shops is you get a lot of integration tests that are spinning up a database in an integration test, but there's some there's some mocking but there's some spinning up a database, and they get very slow.", "tokens": [50364, 2754, 370, 11, 300, 311, 406, 370, 1578, 13, 407, 437, 12258, 281, 1051, 257, 688, 294, 411, 19907, 322, 48526, 14457, 307, 291, 483, 257, 688, 295, 10980, 6921, 300, 366, 15640, 493, 257, 8149, 294, 364, 10980, 1500, 11, 457, 456, 311, 512, 456, 311, 512, 49792, 457, 456, 311, 512, 15640, 493, 257, 8149, 11, 293, 436, 483, 588, 2964, 13, 51314, 51314], "temperature": 0.0, "avg_logprob": -0.10606164090773638, "compression_ratio": 1.7407407407407407, "no_caption_prob": 0.0002131519722752273}, {"id": 467, "seek": 406900, "start": 4069.0, "end": 4082.0, "text": " And that is painful because now you have to run a subset of your tests because it's too slow, the feedback loop, but they're not giving you full confidence.", "tokens": [50364, 400, 300, 307, 11697, 570, 586, 291, 362, 281, 1190, 257, 25993, 295, 428, 6921, 570, 309, 311, 886, 2964, 11, 264, 5824, 6367, 11, 457, 436, 434, 406, 2902, 291, 1577, 6687, 13, 51014, 51014, 400, 436, 434, 932, 15681, 570, 309, 311, 15640, 493, 257, 8149, 293, 2171, 2709, 291, 2107, 15957, 3142, 3542, 13, 400, 2171, 309, 311, 5413, 322, 565, 293, 2902, 291, 257, 1874, 2361, 322, 562, 291, 1190, 309, 13, 51464, 51464, 1610, 5324, 11, 5413, 322, 661, 6921, 885, 1190, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.08163399281709091, "compression_ratio": 1.7668161434977578, "no_caption_prob": 9.368587598146405e-06}, {"id": 468, "seek": 406900, "start": 4082.0, "end": 4091.0, "text": " And they're flaky because it's spinning up a database and sometimes gives you non deterministic results. And sometimes it's depending on time and giving you a result based on when you run it.", "tokens": [50364, 400, 300, 307, 11697, 570, 586, 291, 362, 281, 1190, 257, 25993, 295, 428, 6921, 570, 309, 311, 886, 2964, 11, 264, 5824, 6367, 11, 457, 436, 434, 406, 2902, 291, 1577, 6687, 13, 51014, 51014, 400, 436, 434, 932, 15681, 570, 309, 311, 15640, 493, 257, 8149, 293, 2171, 2709, 291, 2107, 15957, 3142, 3542, 13, 400, 2171, 309, 311, 5413, 322, 565, 293, 2902, 291, 257, 1874, 2361, 322, 562, 291, 1190, 309, 13, 51464, 51464, 1610, 5324, 11, 5413, 322, 661, 6921, 885, 1190, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.08163399281709091, "compression_ratio": 1.7668161434977578, "no_caption_prob": 9.368587598146405e-06}, {"id": 469, "seek": 406900, "start": 4091.0, "end": 4095.0, "text": " Or worse, depending on other tests being run.", "tokens": [50364, 400, 300, 307, 11697, 570, 586, 291, 362, 281, 1190, 257, 25993, 295, 428, 6921, 570, 309, 311, 886, 2964, 11, 264, 5824, 6367, 11, 457, 436, 434, 406, 2902, 291, 1577, 6687, 13, 51014, 51014, 400, 436, 434, 932, 15681, 570, 309, 311, 15640, 493, 257, 8149, 293, 2171, 2709, 291, 2107, 15957, 3142, 3542, 13, 400, 2171, 309, 311, 5413, 322, 565, 293, 2902, 291, 257, 1874, 2361, 322, 562, 291, 1190, 309, 13, 51464, 51464, 1610, 5324, 11, 5413, 322, 661, 6921, 885, 1190, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.08163399281709091, "compression_ratio": 1.7668161434977578, "no_caption_prob": 9.368587598146405e-06}, {"id": 470, "seek": 409500, "start": 4095.0, "end": 4104.0, "text": " Right. Exactly. The order of the tests being run. And so you wonder why DHH says TDD is dead, right? It's not a big surprise.", "tokens": [50364, 1779, 13, 7587, 13, 440, 1668, 295, 264, 6921, 885, 1190, 13, 400, 370, 291, 2441, 983, 413, 7499, 1619, 314, 20818, 307, 3116, 11, 558, 30, 467, 311, 406, 257, 955, 6365, 13, 50814, 50814, 865, 13, 50914, 50914, 286, 841, 411, 321, 362, 1096, 257, 1238, 665, 3098, 295, 309, 13, 492, 362, 1096, 661, 9313, 322, 4997, 42687, 3467, 13, 51314, 51314, 286, 767, 2441, 11, 630, 321, 584, 42687, 3467, 1547, 30, 3560, 321, 2045, 527, 45171, 420, 820, 321, 584, 309, 257, 1326, 544, 1413, 30, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.14481225264699835, "compression_ratio": 1.51528384279476, "no_caption_prob": 3.480580198811367e-05}, {"id": 471, "seek": 409500, "start": 4104.0, "end": 4106.0, "text": " Yeah.", "tokens": [50364, 1779, 13, 7587, 13, 440, 1668, 295, 264, 6921, 885, 1190, 13, 400, 370, 291, 2441, 983, 413, 7499, 1619, 314, 20818, 307, 3116, 11, 558, 30, 467, 311, 406, 257, 955, 6365, 13, 50814, 50814, 865, 13, 50914, 50914, 286, 841, 411, 321, 362, 1096, 257, 1238, 665, 3098, 295, 309, 13, 492, 362, 1096, 661, 9313, 322, 4997, 42687, 3467, 13, 51314, 51314, 286, 767, 2441, 11, 630, 321, 584, 42687, 3467, 1547, 30, 3560, 321, 2045, 527, 45171, 420, 820, 321, 584, 309, 257, 1326, 544, 1413, 30, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.14481225264699835, "compression_ratio": 1.51528384279476, "no_caption_prob": 3.480580198811367e-05}, {"id": 472, "seek": 409500, "start": 4106.0, "end": 4114.0, "text": " I feel like we have done a pretty good round of it. We have done other episodes on testing opaque types.", "tokens": [50364, 1779, 13, 7587, 13, 440, 1668, 295, 264, 6921, 885, 1190, 13, 400, 370, 291, 2441, 983, 413, 7499, 1619, 314, 20818, 307, 3116, 11, 558, 30, 467, 311, 406, 257, 955, 6365, 13, 50814, 50814, 865, 13, 50914, 50914, 286, 841, 411, 321, 362, 1096, 257, 1238, 665, 3098, 295, 309, 13, 492, 362, 1096, 661, 9313, 322, 4997, 42687, 3467, 13, 51314, 51314, 286, 767, 2441, 11, 630, 321, 584, 42687, 3467, 1547, 30, 3560, 321, 2045, 527, 45171, 420, 820, 321, 584, 309, 257, 1326, 544, 1413, 30, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.14481225264699835, "compression_ratio": 1.51528384279476, "no_caption_prob": 3.480580198811367e-05}, {"id": 473, "seek": 409500, "start": 4114.0, "end": 4121.0, "text": " I actually wonder, did we say opaque types enough? Have we hit our quota or should we say it a few more times?", "tokens": [50364, 1779, 13, 7587, 13, 440, 1668, 295, 264, 6921, 885, 1190, 13, 400, 370, 291, 2441, 983, 413, 7499, 1619, 314, 20818, 307, 3116, 11, 558, 30, 467, 311, 406, 257, 955, 6365, 13, 50814, 50814, 865, 13, 50914, 50914, 286, 841, 411, 321, 362, 1096, 257, 1238, 665, 3098, 295, 309, 13, 492, 362, 1096, 661, 9313, 322, 4997, 42687, 3467, 13, 51314, 51314, 286, 767, 2441, 11, 630, 321, 584, 42687, 3467, 1547, 30, 3560, 321, 2045, 527, 45171, 420, 820, 321, 584, 309, 257, 1326, 544, 1413, 30, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.14481225264699835, "compression_ratio": 1.51528384279476, "no_caption_prob": 3.480580198811367e-05}, {"id": 474, "seek": 412100, "start": 4121.0, "end": 4131.0, "text": " I'm not sure. We could always say it a little bit more. But if you haven't listened to our opaque types episode, as we've said, mandatory listening, that should have been episode number one of Elm Radio.", "tokens": [50364, 286, 478, 406, 988, 13, 492, 727, 1009, 584, 309, 257, 707, 857, 544, 13, 583, 498, 291, 2378, 380, 13207, 281, 527, 42687, 3467, 3500, 11, 382, 321, 600, 848, 11, 22173, 4764, 11, 300, 820, 362, 668, 3500, 1230, 472, 295, 2699, 76, 17296, 13, 50864, 50864, 663, 820, 362, 668, 527, 881, 13207, 281, 3500, 13, 467, 767, 1943, 380, 13, 51164, 51164], "temperature": 0.0, "avg_logprob": -0.10575301506940056, "compression_ratio": 1.5568181818181819, "no_caption_prob": 7.253585499711335e-05}, {"id": 475, "seek": 412100, "start": 4131.0, "end": 4137.0, "text": " That should have been our most listened to episode. It actually isn't.", "tokens": [50364, 286, 478, 406, 988, 13, 492, 727, 1009, 584, 309, 257, 707, 857, 544, 13, 583, 498, 291, 2378, 380, 13207, 281, 527, 42687, 3467, 3500, 11, 382, 321, 600, 848, 11, 22173, 4764, 11, 300, 820, 362, 668, 3500, 1230, 472, 295, 2699, 76, 17296, 13, 50864, 50864, 663, 820, 362, 668, 527, 881, 13207, 281, 3500, 13, 467, 767, 1943, 380, 13, 51164, 51164], "temperature": 0.0, "avg_logprob": -0.10575301506940056, "compression_ratio": 1.5568181818181819, "no_caption_prob": 7.253585499711335e-05}, {"id": 476, "seek": 413700, "start": 4137.0, "end": 4151.0, "text": " Yeah, that's true. We'll keep pestering people until it becomes our number one listened to episode. If people want to remember to subscribe to our podcast, some people are not subscribed and getting every episode.", "tokens": [50364, 865, 11, 300, 311, 2074, 13, 492, 603, 1066, 31068, 1794, 561, 1826, 309, 3643, 527, 1230, 472, 13207, 281, 3500, 13, 759, 561, 528, 281, 1604, 281, 3022, 281, 527, 7367, 11, 512, 561, 366, 406, 16665, 293, 1242, 633, 3500, 13, 51064, 51064, 10611, 281, 428, 7367, 3154, 13, 5303, 505, 257, 10990, 322, 6373, 24045, 293, 1524, 505, 322, 5794, 293, 398, 2032, 266, 13, 9088, 958, 565, 13, 51464, 51464, 9088, 958, 565, 13, 51514], "temperature": 0.0, "avg_logprob": -0.1520091869212963, "compression_ratio": 1.6956521739130435, "no_caption_prob": 0.00039806097629480064}, {"id": 477, "seek": 413700, "start": 4151.0, "end": 4159.0, "text": " Subscribe to your podcast feed. Give us a rating on Apple podcasts and follow us on Twitter and Yeroon. Until next time.", "tokens": [50364, 865, 11, 300, 311, 2074, 13, 492, 603, 1066, 31068, 1794, 561, 1826, 309, 3643, 527, 1230, 472, 13207, 281, 3500, 13, 759, 561, 528, 281, 1604, 281, 3022, 281, 527, 7367, 11, 512, 561, 366, 406, 16665, 293, 1242, 633, 3500, 13, 51064, 51064, 10611, 281, 428, 7367, 3154, 13, 5303, 505, 257, 10990, 322, 6373, 24045, 293, 1524, 505, 322, 5794, 293, 398, 2032, 266, 13, 9088, 958, 565, 13, 51464, 51464, 9088, 958, 565, 13, 51514], "temperature": 0.0, "avg_logprob": -0.1520091869212963, "compression_ratio": 1.6956521739130435, "no_caption_prob": 0.00039806097629480064}, {"id": 478, "seek": 415900, "start": 4159.0, "end": 4180.0, "text": " Until next time.", "tokens": [50364, 9088, 958, 565, 13, 51414], "temperature": 0.0, "avg_logprob": -0.2887020451681955, "compression_ratio": 0.6666666666666666, "no_caption_prob": 3.564633152564056e-05}], "language": "en"}