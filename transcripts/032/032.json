{"text": " Hello, Jeroen. Hello, Dylan. And today, once again, we've got another guest joining us, Jo\u00ebl. Welcome. Thanks for joining. Hi, everyone. Thanks for having me on the show. It's a pleasure. I've been hoping to have you for some topic. And finally, we got a nice topic to discuss with you that popped up. And yeah, you're sort of, I think of you as somebody who explains things in a way that a beginner hears your explanation and a light bulb goes off and an expert and an Elm veteran hears your explanation and they say, oh, I never thought of it that way. You're sort of got a great philosophical way of breaking down fundamentals, which I really appreciate. Well, thank you. That's really the goal of mine when I speak or write or teach. I usually like to be right on that boundary of something that's practical and teaching how to do a task and solve a problem, but also venture a little bit in the philosophical world of like, why is this a useful solution? And is there a bigger concept at work? Right. So speaking of bigger concepts at work, what is that concept today? You want to introduce it for us, Jo\u00ebl? Elm's universal pattern. What does that mean? So I think I'll just open this by saying that I think my favorite function in Elm is probably map2. There's a bunch of different modules that implement this as a maybe map2, a JSON decode map2, random map2, and all of those, they're probably my favorite. If you were in a desert island and you could only bring one function, would it be map2? It probably would be map2. Technically, I should probably say and then because you can use it to implement map2 and then you'd get like, it's like wishing for more wishes. It's kind of cheating. But yeah, if I'm only allowed to take one, it would be map2. Nice. Yeah. I guess you would also want to bring some data with you because map2 without any data doesn't have any value. That's true. There's some bad pun here that can be made about date palms or something like that, but I can't make it. If it was another language, you'd bring rescue or something like that. I don't know. Okay. So Elm's universal pattern. So what exactly are we talking about here when we're talking about a universal pattern? A universal pattern for what? What do you use this pattern to do? Yes. I think the universal part of it is just the idea that map2 exists for multiple different types. It's actually very common to see different types both in core and in third party libraries implemented because it's such a useful function. And at its most basic level, I think of it as a way to combine two things of the same type. So to be more concrete, if we talk about, say, maybe, I have two maybe values that I would like to combine, and I have a two argument function I would like to combine them with, map2 would be the way to do that. So I think of it as a way to say two argument function, two maybes, how can I combine all those things together? And then there's more functions as a map3, a map4, map5, et cetera, if you want to scale that pattern up to a three argument function with three maybes, or a four argument function and four maybes, and so on. Yeah. It's really interesting because in the Elm community, we don't tend to talk about these things with these category theory terms because it can be confusing. And often, you hear this like, all right, chapter 10 of this book on Haskell is when you finally have gotten past the introductions of category theory concepts, and then you write your hello world or something. And in Elm, we go the opposite direction where if you get to these concepts at all, it's after chapter 10. So sometimes we go to the point that we don't want to put terms on these different categories and concepts, but it is helpful to have some way to think about them somehow. So sometimes I know people in that category theory world talk about things in boxes, that it's going between these different worlds of you have a value that you can do something with and then something that's you can't reach, like a random value. If you have a random generator of type int, you can't go and touch that int and add a number to it and multiply it. So you need to apply something to it in the box. And that's kind of what mapping is conceptually. It's like reaching into the box with a function that so you have this operator that can multiply or some function that can take the absolute value of a number. And you want to apply that function to the value that's in that box, that random generator. Yeah, I guess there's a few different mental models you could use to think about what mapping functions do. I'd mentioned one earlier, the idea of combining. Another one that's particularly helpful with say types like maybe a result is the idea of abstracting over this really common pattern that you might have, which might be unwrap a value, apply a function and then rewrap. So like a maybe if you want to do an operation on it, you might say, well, unwrap it if it's present, do my operation, but because it might not be present, we need to return nothing. Therefore, we also need to rewrap at the end. And really the unwrap rewrap part is just a boilerplate. We have to do this all the time. And so a map function allows us to abstract over that pattern. I think there's also maybe a sense where you can think of mapping functions as a way to sort of translate functions into ones that operate on your sort of wrapper type. So I have a two argument function and I want to turn it from a function that works on integers to a function that works on maybe integers. I can use map two to convert it. I think the fancy functional programming term there would be lifting where you say I have this two argument function. I will sort of lift it into the world of maybes. So yeah, those are sort of three different ways of looking at the same concept. And I think sometimes it can be really hard to get a good grasp on what this concept is. And so having multiple mental models can be really helpful. Particularly because some of them don't work quite as well for some types. So you mentioned the idea of a box earlier. And I think that's very concrete when looking at something like maybe because it's like, yes, I have a number and it's wrapped inside of it maybe and I can unwrap it. That feels like a box. Something like random isn't quite a box in that it's a future value that you might get. Like a decoder is kind of similar. It's mailbox in a way. Something will be delivered to it in the future and when it's delivered, you wrap it in something. I found that maybe it's probably one of the easier types to use to understand some of these concepts because it's really concrete. Most Elm developers are familiar with how that type works. And you can deconstruct it and you can pattern match on it, do a case expression and see what's inside at any point. And you can reimplement your own map, map two, map three, et cetera, pretty easily in a way that you couldn't for say the random generator. That's a good point. Yeah, because the actual internals under the hood of the thing you're mapping can get a lot more abstract than with a maybe. As you say, it's to the point where it's tempting to just do a case statement all over the place with maybes. I find that one thing that I look out for sometimes is if a case statement is happening too often and if functions are dealing with these wrapped types or these, you know, if you have a function that's dealing with random generator types or maybe types rather than ints or whatever underlying data type, would you say that that's generally a smell? Like I often think if I have a lot of case statements around maybes or if I'm passing these wrapped values, things tend to work really nicely when you have like functions that deal with sort of vanilla values and then you apply these map functions to combine them. I would agree, yes. In general, the way I tend to write code and Elm code in particular, I like to separate what I might call branching code or deciding code from doing code. So if I were to say case on a maybe, I would have one function that cases and branches and then it would just call another function that's that sort of doing function. And so even if I had the case expression, I would have a separate function that acts on the inner integer or whatever it is, which is just generally, I think, easier to read and understand. That also makes it nice to refactor later if you realize, wait, this case expression could be a map. I don't have to separate the business logic inside. Yeah, I find that like with if you have a remote data value, for example, often code starts out wanting to do too much and doing like a case statement on the remote data type that if it's successfully loaded or loading or you kind of render these different views in line. But it turns out to be a lot to wrap your head around to parse out the logic of the rendering logic for the successful view and the error view and all these pieces in one place. And it's really this general concept, which actually you have a nice blog post on this, I think, about staying at one level of abstraction. And in a way, when you're kind of unwrapping and then dealing with the unwrapped thing, by definition, you're dealing with two different levels of abstraction right there. Yes. And I think that separation of sort of deciding code versus doing code, those are sort of two abstractions that you want to keep separated. Well, let's talk about some examples of this universal pattern. With these different examples, you were describing how different analogies might be more intuitive for different ones. It's also interesting, like in a way, there are almost different semantics for these. Like for maybe, if you're combining maybes, the semantics are almost like and semantics, where it almost like short circuits. If any of the maybe values are nothing, then it just short circuits through and the whole thing is nothing. But if like, for example, with a JSON decode value, I guess it's a similar concept that it almost short circuits with a JSON decoding error if there's an error anywhere. But that error carries information, so it could carry information from any given decoder. Right. Similarly, I think you could say that with something like result, where the error has more context about where it failed, why it failed, rather than maybe it's just we don't have a value. It's kind of interesting that it's not like, I guess it's not a very common pattern to just take multiple errors and group them together. But I suppose it could just as well be. But I guess you can't really proceed because it assumes that it has the needed information in order to proceed in certain contexts. But like with a decoder, it's not going to attempt the other decoders, the first one that succeeds, the first one that fails at short circuits. Right. There's no reason you couldn't accumulate errors. I think later if we talk about parsers, that might be something that comes up. Interesting. Okay, so let's talk about where some places this pattern occurs. So we've touched on maybe Elm JSON, random generators. It might be worth talking a little bit more about Elm JSON because I think that's maybe one of the places where it's particularly useful. Sounds great. I think for me, the metaphor or the mental model that works best here is the idea of combining. So when we're parsing JSON, typically we're pointing to a particular path in the JSON tree. We're saying in this field, decode this value as a string or integer or something like that. But usually we want to read more than one value out of the JSON. So we want to say at this field, read this integer. At this other field, read this string. At this third field, read a Boolean. And then give me all three values back and let me combine them into some custom Elm value. And so we can write individual decoders for each of the pieces of data, but then we need a way to combine all three together. And that's where the mapping functions come in. If we're combining three pieces, it would be a map three. And yeah, for me, this mental model thinking of them as combining functions, I think is most apt when thinking about decoders. Scott Welch and has this concept of like railway oriented development, I think he calls it. And he talks about this pattern for like a decoder or mapping things together that you have these sort of split tracks. If you picture a fork in the railroad where you can split off between these two different directions and one of the directions is sort of an error direction and the other one is like a green success direction. So you map together a JSON decoder that picks off five different fields from a user and it expects them to be non null and of these specific types. And as it picks them off, it's going along the green railroad. And if any of those is null unexpectedly, now it can take that other track and go to the red track. And suddenly, and you can imagine each time you apply a map, it's branching off and there's another sort of a new green track for it to branch off of. But it can always go down that red track. And the red track, it's just following along a continual path. So instead of applying more data and combining it together, you just get that error straight through that short circuited error data. I love the visual metaphor that he uses. You should definitely link to the talk because it's worth looking at it with the slides. Yes, I agree. It takes a concept that's a little bit arcane and sort of pulls in a lot of different ideas from functional programming, not just this mapping idea and strips away the really sort of academic language and really puts it in a metaphor that's easy to follow. And so I think we're sort of so entrenched in this Elm world here that it's easy to forget. It's easy to take these things for granted. But if we sort of step back from it and talk about how would we deal with these things otherwise, dealing with throwing exceptions. And it's actually really wonderful dealing with data in this sort of composable way because you can think about something as a unit and you can combine these things. And so I mean, I'm not sure if it's just a reminder to appreciate what we've got or if there are implications for how we design our code there. But I think that's a good thing to keep in mind. Yeah, how would you do that? Would you go with plenty of case expressions? There's a sense maybe where in say a more dynamic language, a bunch of maps in Elm might be more or less equivalent to some kind of optional chaining. So like Ruby has what they call the lonely operator. JavaScript has the question mark where you do this sort of optional chaining. Knowledge coalescence, something like that. I think that's a separate concept. Possible. Yeah. Right, right. Yeah. This new JavaScript question mark dot operator and you see this in different languages. Yeah. And I noticed this, this is and the sort of I guess before that operator in JavaScript, it would be, you know, user double and user dot. Right, which gets really clunky if you have a long chain because then you have to check every step along the way. Right. And so one of the things about that pattern that I've noticed is people say like, wow, this like question mark dot operator in JavaScript makes code so much nicer, which it certainly cleans things up. But then what if you're not dealing with something that may be null? What if you're dealing with something that may represent some kind of error or how do you change different types of things? So, you know, Elm doesn't Elm doesn't have, you know, these sort of type classes for these different types of things where you use a single operator to do it. But it is so baked into the core libraries and the ecosystem and the ethos of Elm that you sort of apply these patterns and also the language itself because it doesn't have sort of exceptions that can just bubble up somewhere and be caught. And so you've got to sort of flow data through and you've got to prove to the compiler before you can just unwrap values and that sort of thing. So it's it's sort of baked into the language in a way. And things do compose together so nicely because this is not just taking five maybes and mapping them together, but, you know, then chaining that along and turning that maybe value that you drive into a result type because you need to combine it with another result type from another place. And then you combine those to build some value. And that at that point, things really compose together in a way that it feels totally different than just using question mark dot operators in JavaScript. Things really compose with all these other libraries and chains. There's also, I think, the really key distinction is that in a language like JavaScript, things are nullable by default unless you check them. And then you can have confidence that they're not null, whereas Elm values are guaranteed present unless they're explicitly wrapped in maybe. So we can sort of trust by default and then we sort of mark the areas that are untrustworthy and the compiler will force a check. That's a great point. And this pattern in a way, it's like intimately tied to this quality of the Elm compiler and the Elm language that you're sort of deriving data of different types as you apply functions to it. So, you know, if you have a pipeline and you do, you know, you pipe it to list dot singleton. Now you take a thing that was not a list and you make it a list. And then you, you know, combine that together with something else. So this is one of the things with this sort of applicative pattern. We haven't used that term yet, but you know, you have a pipeline and you're applying these functions and it's sort of modifying the type as you go. So with list based APIs, which you also find in Elm, like, you know, Elm HTML, you create a div and you give attributes and children. You're not changing the type as you add HTML attributes to that list in the div. You add a class, you add an ID, but when you're doing a, you know, json.decode.succeed user, and then you're piping that to end map or some, you know, pipeline operator, you're, you're modifying that value from, from the starting point. And you start with this constructor that takes five arguments, and then you pipe it through with applying five different times. And it goes from a function that takes five arguments to a function that takes four arguments to a function that takes three arguments. And in that way, the applicative pattern is really nice with Elm libraries, but because it allows you to sort of transform the types based on what you're applying. If you pass in a decoder that takes an int, a decoder that takes a maybe string, it's going to expect that to be matching up with the constructor you started with and applying those. Well, and one of the things that you're saying here that I think you're hinting at is the idea that in functional programming, the entire way we structure programs is as a series of data transformations. So we start with one or more input values, and we slowly convert them into it could be the same type, it could be a different type, but we're slowly converting them until we eventually get the output that we want. And that's how we structure programs in functional programming. Right? Yeah. And it's just like when you're writing code, it's like this little puzzle that you're like, I know I need a value of this type, and how do I build it? I mean, we just talked about this recently in our debugging episode, Jeroen, of this process of debugging types when the types aren't quite fitting together and how you figure out what type to put in the type hole. Sometimes it's really helpful to just break out these little puzzles and say, oh, this, I know I need a value of this type. Let me pull this out into a let and break it out into a sub puzzle, give it a type annotation. The type annotation proves that that type would solve the puzzle in that chain of applications. And you don't yet have a type of that value that you promised with your annotation. So now that's your next puzzle to solve. Yeah, there's this, you know, not only is functional programming about transforming data, but another key concept in at least structuring functional programs is breaking down larger transformations into smaller steps. You might call that decomposition, each of which are smaller transforms, some of which might be reusable. And that's where we get into all the fun deeper functional programming concepts are generally just patterns that we can use to do that, to break down a larger transformation into smaller pieces. Right. Yeah, I wrote this blog post, combinators, inverting top down transforms, where I kind of talked about, like, the difference of thinking about a problem as these sort of composable sub problems or decomposable, I don't know. These little breaking down into sub problems where you say, like, I know how to decode a user, but I mean, where am I going to decode the user from? What data is it going to be hanging off of? Is it going to be nested under a bunch of fields? Is it going to be continuing off of something? Or am I going to be decoding it based on if the role is admin or whatever it may be, but you can think about these sort of parts of it independently, and then compose them together. Whereas that's like this sort of bottom up way of thinking about things, whereas this top down way is just sort of reaching in and grabbing data from a JSON blob, which in my experience is what tends to happen when I've worked in JavaScript code bases is it's so easy to just pull in data from a big JSON blob that and then you've got this big JSON blob, you pass it through a transformation function that changes a bunch of data, but you're dealing with this like monolithic object, and it's really difficult to think about. But with these sort of combinators, it's just you can think about this one piece, but then you can take that piece and this other piece and build them up into one thing. So this sort of like universal pattern, I'm not sure if it's like inseparable from this concept of a combinator, but it seems like there's a link there. So we've been using the term universal pattern because I use that in a as a title of a blog post. In that blog post, I was talking about map two, map three, map four, and so on functions. Those functions are combinators because as we sort of talked earlier, one of the mental models for what those functions do is they give us a way to combine values together. And so it might allow us to combine three maybes or I mentioned also earlier that it was a really helpful mental model for myself for thinking about JSON decoding. Say I can decode three different pieces of valid three different pieces of data and I want to combine them all into one more complex piece. And so now I need a combinator. And that's really when we look at a library like the JSON decode library. At its most basic level, it really only provides us with two types of things, some sort of primitive decoders like int and string, and then a few combining functions. And that's basically it. And we can use those building blocks then to decode anything we want into any Elm structure that we want. Because a really key thing about JSON decoding in Elm that I think is not obvious to people who are new to the language is that your Elm structure and your JSON structure don't need to be mirrors of each other. And in fact, you probably don't want your Elm structure to mirror the JSON. So I typically will design my Elm structure first to match my needs for my program to eliminate impossible states and all that good stuff. And then say, OK, given this Elm type and given this JSON that I have, how do I bridge the gap? And that's where I will then pull out all the JSON decoder tricks to say, how can I translate between the JSON I have and the Elm structure I want? I'm curious about one thing. What do you think of the names, map, map2, map3? Like for me, map is about transforming one thing to another. And map2 is, as you say, combining. So would it make more sense to call it combine2, combine3? Or is that even what you have in your mind every time you talk about map2, map3? That's a good question. There's a sense of the base map. There's a sense in which you could call it map1. It's just sort of continuation of that pattern where you can take a one argument function and one maybe, and I guess you're only combining one. You're combining one maybe and just applying a function to it. I do notice that I often start as the first tiny step if I'm doing a refactoring to a different data type. Let's say I've got a value that I'm just decoding a user from some HTTP response, and that's stored in my model. But now I actually want it to be a bunch of metadata, and user is one of those pieces of metadata. And I've got some other bits of metadata in there. And so the first thing I'll do is I'll wrap it in a JSON.decode.map metadata, which has a single field user of type user. So now I've done this map1. I've done JSON.decode.map with a record. Now I'm wrapping it in a record. And that's a preparatory step for the next step, which is it's going to be JSON.decode.map2, and I'm going to add another field to that metadata field. So in a way, it does feel like map1, even though you can use it for just sort of transforming things. There is an elegance to the fact that you can change a map to a map2. Yeah, it really feels like a continuation of this pattern. And there's also the sense in which it is a transformation, it's just a transformation with two inputs. So you might have, say, two integers coming in, but a string coming out. So it is still a transformation, but it's less of a transform one item into another, because now you have multiple inputs. Yeah, if you think about it with maybe, maybe.map is a very natural, like, imagine when maybe is created and we have this maybe type and we're doing case statements all over the place and we say, case just, take that value, I want to apply some function to it. And we're like, this is really inconvenient. Wouldn't it be nice if I could just pass in the function I wanted to apply when I wanted to turn this string to uppercase, I could just pass in a string to upper function. And so we create a map function. And then we say, well, I actually, I want to combine two maybe values. And then we say, okay, well, I mean, how would I combine two maybe values? Well, if either of them are nothing, then I can't combine it into a single maybe value. So let's just, you know, turn it into nothing if any of them are nothing. And otherwise, we'll pass in those two just values that we have to the function that takes two values. Specifically, if you're trying to combine them with a two argument function. Yes. Because it's a two argument function, you need both values to be present. Yes. So if they're present, apply the two argument function to the two values. Otherwise just return nothing. I think your question, Jeroen, is really interesting. If we look at what Haskell has done, they've chosen to not name this function map2, map3, map4. They've called it liftA2, liftA3, liftA4. And they've sort of gone with this other metaphor that I talked about, this idea of lifting. You could think of it as translating functions into the world of some other type. So you could transform the add function to one that works on integers to one that works on maybe integers. So liftA2 would be map2. Correct. Okay. Is there a liftB2? So liftA, the A here stands for applicative, which is a term I think that we've sort of been dancing around a little bit. It's sort of the fancy functional term, but we haven't really gotten into it and defined it. All right. Let's do it. Maybe we should do that. At its core, really, what you need for something to be considered applicative is you need some kind of constructor. And then you need one of two things. You either need map2 or you need what in Elm we often call andMap, which is sort of a pipelineable version of map2. And then? AndMap. It doesn't ship in the core libraries. That would be similar to the JSON decode pipeline required function, right? Yes. Yes. So the JSON decode pipeline required function is a combination of what you might call andMap and then also allowing you to plug in the field name for convenience. So given either of those, you can describe a type as being applicative. So because maybe has a constructor, which is just, and it has a map2, we can describe it as applicative. And the interesting thing with map2 and andMap is there are sort of two different ways of expressing the same thing. And so given either of those, we can implement the other. I feel like this is like MacGyver skills for functional programming. All right. I need a stick of gum, a twig, or if you don't have that, I need... But if you're missing one of those, you have nothing. So yeah, I find that the map2 is much more concrete, more easy to understand as someone who's exploring these ideas. And from my own personal journey into some of these more philosophical concepts, it is much easier to understand with something like map2. Partly because you can deconstruct it more easily. You can implement it yourself with a type like maybe and grasp pretty easily what it does. We mentioned earlier, right? A map2 for maybe is just checking are both values present? If so, apply this function, else return maybe, or else return nothing. And map is a little bit more mind bending because it plays with sort of partial application and some pipelines. And there are more concepts you need to understand in order to work with it. Yeah, it's the kind of thing that you sort of copy paste from the docs for a library to build up a pipeline. But you don't always fully think about exactly what it's doing under the hood because it would hurt your brain a little bit too much. So you have to like... I think that's why to a certain extent it's helpful to have some high level concepts of how to think about these things because you don't always have to think about the low level things. The high level is, well, I want to sort of apply a high level combination of these things. And so you sort of associate and map with that concept and you don't need to understand all the internals. I think one thing that maybe we should mention too, something that can trip people up is the record constructors feel like this magical thing. So to sort of, I like to demystify that by just explaining exactly what it is. So if you do maybe.map2, let's say you've got like a first name and a last name and you expect them to both be there, but you've got some user input fields. So you've got maybe values. So you could pass in, you could have type alias user equals first string, last string, and you could pass in that user constructor, capital U user to maybe.map2 user and then your maybe first, maybe last. And so what is that doing? Well, it would be equivalent to doing a function that takes a maybe, a function that takes a first and last, which are both string, and then builds a record with a field called first and a field called last. But what happens is this is just a part of the Elm language that when you define a type alias of type record specifically, it doesn't happen if you define a type alias of type int, it doesn't happen if you define a type alias of a custom type, only for specifically type alias record type. It will give you a constructor function that takes the arguments of the type of each of the fields in that exact order and returns a record with exactly those fields and types. So that's an important thing to understand. And so I think it's a good exercise to like just write that maybe.map with an anonymous function or a named function, doesn't matter which you prefer, but write maybe.map anonymous function that takes first and last as arguments and then returns first equals first, last equals last and convince yourself, oh, that's exactly what doing type alias user equals first string last string is doing when I pass that constructor instead of that anonymous function is exactly equivalent. So that's I think that's a really good thing to demystify because it feels like magic otherwise. I think this this confusion is maybe the fault of a lot of the tutorials that are out there. And if you read Elm codes or in the wild, you will see people will use that constructor because that's kind of what it's there for. But if you're just learning, say, JSON decoders and you see something that says decode map two and then capital U user and you see that type alias defined above a very reasonable assumption that might be is like, oh, I'm giving that user type and map two is doing some sort of reflection or metaprogramming or something like that based off of that type and knows to just magically construct a user out of the fields that I give it. And really map two doesn't want to be given a type. It wants to be given a function. So when I what I've started doing in my own writing, even when giving examples on the Elm Slack is trying to always show the anonymous function. It's a little bit more verbose. And it's often it's not necessarily the concept I'm trying to teach. But I think it's useful to show it there just to avoid that misconception. So that it's very clear. Oh, map two, map three, whatever takes a function, not a type as its first argument. Right. And that avoids some misconceptions. Right. And then you say, by the way, there's a shorthand for this function. Yes. Did you know that when you define a type alias for a record, you get a constructor function that has the same name as your type and you could then clean up your or make your decoder a little bit terser by using that. I think one reason why it feels like something weird is because we never use that function elsewhere than in the name of an applicative. You never or you rarely see like user your own angles. You always see a record with first and last specified. Or I've asked around and people really don't like using the record alias name as a function outside of an applicative. Right. Because you can get the names of the fields mixed up. Because if you change the name, if you have type alias user equals first string, last string now, and then you create a user by saying user equals capital U user, and then as first name string and then a last name string. Now if you, you know, you probably wouldn't, but if you were to change the order of first and last in the record alias, now you're passing strings, you don't get a compiler error. And basically you've created a layer of indirection between what the field name is and the value that's being passed to it. Whereas if you just said user equals literal record first equals string, last equals string, there's no getting it mixed up. And so you can avoid that confusion. For myself, I think it's less the being afraid of changing the field names because they're pretty much never changed the order. But it's more just the readability. If you see the user constructor and then two strings, it's not immediately obvious which one is the first, which one is the last. And so it's really nice for readability to have the field names as labels. That's usually less important if you're say doing a decoder, because when you look at the, all the decoder, the little individual field decoders below it, you'll see the JSON field names. And generally you can tell from the JSON field names what they are. Yeah. Or of the decoders. Right. So it's pretty obvious looking at the decoder, what's the first name, what's the last name, because we're going to be referring to the names might not be exactly the same in the JSON. And that's one of the really nice things about decoders. The JSON doesn't need to match, but I could probably tell what they are. And so it feels a little bit redundant to copy that into an anonymous function. And it also gets really long and verbose for larger records. You have 10, 20 keys in the record, then that can get really verbose, which I guess that maybe leads us really nicely into and map a version of the sort of applicative pattern. We've talked a lot about a map two, map three, and so on, but those are going to be finite. Every own library you use is going to have, you know, map up to map eight or however they want to do. And eventually it's going to stop. I've yet to run into that limit for something like maybe. I don't think I'm combining that many optional values, but I do run into this all the time on JSON decode because it's not uncommon to say, I want to read 20 fields out of a JSON and combine them into some Elm object. And so that's where this sort of pipeline approach becomes really helpful because now you don't rely just on something finite because the beauty of the and map, which is sort of the, I don't know if you'd want to say the, it's not the inverse of map two, it's the corollary to map two. There's a fancy term that we can use for this, but it's another formulation of what map two does, but you can sort of chain it infinitely. So if you want the equivalent of map 100, you could do, start with a hundred argument function and then just 100 pipes to and map. Yeah, right. And so to a certain extent it's like a matter of personal taste, but why don't we talk about some of the more objective pros and cons between map N functions, map two, map three, map four versus end map. So I think the big one is one that we've talked about already is you will run out of map N at some point. Although you can always, if you need a map 17, you can always implement it in terms of and map because it's equivalent. So if you find it easier to read your code, you could just implement your own map 17 using and map and then use the map 17 in your code. If that's a style that you prefer, you could use some code generation to create map all the way up to a hundred. That would actually be pretty easy. Yeah, it would. Would it be a good idea? Who can say? Could you generate a map 17 from map two also or map three? Well, you can generate all of these from map two. Yeah. Map two is the one. If you have map two, then you can build all of these things. I've like, I've built so many libraries that have this at this point. Basically like I started by like going to the no red ink, Jason decode pipeline library and looking at the source code and being like, how do they implement these things? And like, how did the types line up? And then you see like, there's a, you know, it's like a decoder of A to something. The signature is mind bending. It still hurts my brain to think about it. And I've implemented it in libraries so many times now. You get decoders of functions, right? Something like that? Yes. Yeah. And it's like applying one of the values as you go through in the pipeline. You have a function wrapped in a decoder. You have a, like a concrete value wrapped in a decoder and you're saying apply that value as an argument to that function. Yeah. Like the function might be a 10 argument function. So you only apply one argument to it. And then you get back a new decoder that's another, that's now a nine argument function decoder, which you can then apply to another concrete value decoder to apply argument nine. And now you get back an eight argument decoder and so on. Yeah. And a decoder of a function really doesn't make any sense on its own. It really makes sense in this context of an applicative. Yes. Yes. And that's where it's incredibly helpful. Right. So the error messages could be confusing. And that's one of the challenging things is like the map and error messages when you get something wrong are very clear and precise. The compiler isn't able to give information as precisely if you're doing end map because it doesn't know exactly how many things you plan to apply. So it can't give you the precision. So that's one of the trade offs. So if you've got an error in a say a map two or a map three because it's unwrapping all of them first and then saying, here's a three argument function, apply all three of these arguments, it can immediately tell you, oh, argument two of three is incorrect. Whereas with end map, because you're slowly applying arguments one at a time and you've got your, the process of applying them one at a time is convert a 10 argument function into a nine argument function, then convert it into an eight argument function, then a seven argument function and so on. The error that you're going to get is something like, oh, on step five, I expected a function with this signature, but the signature here is not quite right. And it can be really a head scratcher if you don't understand under the hood what's going on, if you're not familiar with the concept of partial application. So that's definitely the downside. It takes some deciphering, even if you're very familiar with it. But it gives you enough of a clue that you're like, something's off with my chain. And at that point, sometimes it's helpful to just, sometimes I'll just put in my pipeline of end maps. I'll just put like a debug.to do as one of the things in the pipeline be like, all right, let's just pretend that this one is whatever you want it to be to satisfy the compiler here is the problem there or somewhere else. And then it'll tell you if it's still giving you an error, the problem wasn't where you put the debug.to do. If it's not giving you an error, if it's not giving you an error, then you know exactly where to look. One advantage of the sort of end map pipeline approach is that you can then combine that with other functions to create almost like a domain specific variation. And we've mentioned a few times the no red ink JSON to code pipeline. And what they've done is they've taken this end map function and combined it with a few of the helpers from the JSON to code library for finding fields at a particular location. And so you can say I have this required field or have this required nested path. And those can all just be piped one to another. And it becomes very nice to read. I think someone who doesn't understand what the pattern does under the hood could still understand what the code does. Because you could say, oh, construct a user using a required first name and a required last name nested under these sets of keys. Right. So one reason I feel like people may sometimes just reach for these sort of end map or pipeline functions to start with is just the workflow of changing from map to map two to map three back to map two as you sort of adjust things is a little bit clunky. I tend I find myself using control a and control x and vim, which is increment number and decrement number all the time for this. Because what happens is you go up to the line where there's a map to you can be anywhere in the line at the beginning of the line anywhere before the two in the map to you do control a and it increments that to map three. So that's that's a little trick that I use. And I actually personally tend to use the map and functions when I'm dealing with lots of small composable bits. But I think it's it's a matter of personal preference. And there's good reason to just say, you know what, I don't want to deal with this workflow of changing the end in the map and every time I add something, I just want to deal with end map every time. Yeah, but now that you know that shortcuts like no, you don't have any excuse anymore. So I'm very curious about one thing, because we've seen this pattern happen in a lot of the core libraries or core concepts that have been spread out spread out all over like parsers, JSON. But when would you reach for this pattern? Like you're building something new? In what cases? What situations would you say it would be nice to have a combinator for this API? I think that need often arises organically. You'll sort of start working with your type and realize, oh, actually, I need a way to combine. And that's when this sort of thing will arise. More generally, this sort of thing is usually only needed for types that have a type variable in them. So if you have a concrete type, that's some kind of enum style value or something like that, you're not going to need a map to because there's no sort of there is no sort of inner value to transform. Yeah, but you could still want to combine two elements to be a single element, like a list of two things turned into a list of one thing. Well, now it's the combinators on the list, not the item itself. There are some we've been talking a lot about, you know, all you need is a map to function for this to count as applicative and also a constructor. Technically, there's also a set of rules for that the map to function needs to follow in order to be considered a legitimate map to for this purposes. You can't just invent some function that's like, oh, this is a string concatenation. I'm going to call it map to and hey, I'm applicative. What's the term for it? Lawful? Lawful, right? I think so. Yes. I like that. It makes it sound like an outlaw. It almost is like, sounds like it would be cool to like not follow those rules. Be an outlaw. I just think of a D&D alignment chart now. Yeah, right. That is the only definition I have in mind for lawful. So if you can explain, please do. So there's a few properties that have to be, and I don't know them off the top of my head, but basically it's like, oh, if you map the identity function, then the output must be the same or there's a few rules like that. They're called the applicative laws. So if you look that up, that's what we'll show. But more generally, the signature for map to is going to have variables in it. So it's going to be a two argument function, A to B to C, and then your type with a variable A, your type with variable B, and then it will in the end create your type with variable C. And so if your type doesn't have a type variable, then it's probably not needing these functions. That's interesting. Like what if you have an opaque type, like some sort of money type? And I mean, I'm just trying to think of a concrete use case. In that case, there is like a thing in this box. Like you can't directly do anything with money types. You need to expose an interface to deal with those. But that said, do you want to expose some money dot map where you can then multiply it by a million or something? Maybe what you really want to do is expose money dot some or some sort of domain specific functions for dealing with the money. That's exactly the path. Actually, I've been down this path. I think that was actually probably one of the areas I first really understood mapping functions. I was creating a money type and it was not parameterized. It was just a wrapper around probably an integer or a float. And then I realized, wait, but like it's annoying to always wrap and unwrap these things. This kind of looks like mapping. What if I created a map too? And then I can say anytime I want to say add to dollar amounts, I can just map to the plus function that just works. Or map to the times function. Yeah. What does that mean? Yeah. Which like, I think as programmers, we play very fast and loose with math. And if you were in a more, say, if you're working with physics, you know that if you multiply two numbers that have a unit, then you also have to multiply the unit. And so if you're multiplying dollars times dollars, what you get back is dollars squared. That sounds great to me. Sign me up. Which in most applications is probably a nonsensical unit type. So you probably don't want to allow arbitrary operations on the value. Another really interesting thing is that normally a map to function, you pass a to argument function to it to say, hey, combine these two using this function. And that function you give it can have any two inputs and any output type because you can combine any values together. With something like, say, a dollar wrapper, you can't do that because the value inside is always an integer. And so the two inputs for your two argument functions must be an integer. And because you're creating a new dollar value as the output, the output value also must be an integer. So rather than having a generic function being passed into your map to that's a, b, c, it's actually going to be int, int, int, which is possibly OK. There's the concept of distinguishing between, I'm going to throw some fancy terms out here, polymorphic versus monomorphic versions of these functions. Monomorphic meaning many shapes, monomorphic meaning single shape. So if it's just always an integer, then that's a monomorphic version of map or map to. And those can be lawful under certain circumstances. But in general, when people are talking about things like applicative, they, you mean the polymorphic version. So how would you call the monomorphic version then? You have to make one. We actually decided not to give it a name like map to and instead give it a domain specific name. As Dylan mentioned, for something a dollar type, you might want to just create some domain specific functions like add rather than something generic. I think where this comes up maybe a little bit more frequently is if you have some opaque type that has a string in it or maybe it's even a record or something and you say, oh, I want to map over this user's name, but you can't reach into the name directly. You have to, because it's opaque, so you have to have some sort of function that does that for you. And you might be tempted to call it map or map name or something like that. But because it is more monomorphic and it doesn't really work in the same way, I found it's useful to just go all in on the domain specific idea and just give it a name that describes what it does. So call it update name and that better describes what it's going to do and doesn't confuse people with a more general concept of mapping. So it's a better experience for the users of your code, probably just easier to read it in general. I think one exception to this is actually in the Elm core library and that is string.map because Elm allows you to map over strings. They don't have a map to, but there is a string map and it is monomorphic because when you map the function you pass in has to be character to character. Good trivia. But I think people are so used to mapping as this idea of traversing a collection and transforming the values along the way that that one probably doesn't confuse people. People probably even just use it and be like, oh, of course it's character to character and never thought of like, oh, what if I wanted to do character to int? Why doesn't that work? So you may have used string.map and never realized it was different from all the other maps in the Elm world. So one other pattern I noticed emerging when I'm dealing with building up pipelines of things, I mean, it happens all the time. It's not necessarily just like building a JSON decoder or a random number generator. I'm often doing these pipelines and sometimes there are these pipelines where rather than just dealing with one specific thing, and we talked about this idea of dealing with one level of abstraction at a time. So often you're dealing with one level of abstraction where it's just decoding a bunch of stuff, just building up a JSON decoder. But sometimes you're running a decoder and then that gives you a result and then you're turning that into a particular type of error that you're combining with another thing, for example. So these sort of higher level pipelines where you're deciding you're sort of processing something rather than doing all the detailed processing. Often I want to build something up into a particular type of value. If I need to take one type of error and turn it into, combine it with, maybe there's an HTTP error that may have happened in one result and another type of error that might have happened in another result. And then I need to combine those and pull in some other data. So those types of pipelines, I tend to see a few different types of patterns emerging. One is I tend to see, sometimes I need to coerce something into the same type of thing. So maybe I have a maybe value and I have a result of an HTTP error and I have a result of another error type. So I might need to do result.mapError to get the two result types to have the same error. And then I might need to take the maybe type and do result.fromMaybe and give it an error type if it's nothing. So those are sort of like some higher level patterns for combining things that I find come up a lot. And another one that I see coming up a lot in code that I write is I'll want to sort of compose together ways of mapping things. So I'll have like a maybe list or a JSON decoder of a list. And I want to map the inner list inside of that. And in those cases, I'll do like maybe.map, list.map, and then apply something in there. So those are sort of two higher level patterns that I've noticed emerging a lot. Yes. I think those are probably a little bit separate from this applicative concept and that they're just tips for working with pipelines in general. I would typically not combine those with a say and map pipeline. If I'm say doing some JSON decoding and then I want to combine the errors with some other result, I would probably have a separate function that handles the JSON decoder and just find this is how you decode the JSON and then call that from a different pipeline that's managing the results. Again, back to that idea of a single level of abstraction. I have a function that defines here's how we interact with JSON and the other one that says here's how we then like read the JSON and handle the errors. You get to some really interesting patterns with sort of deriving these things too. So another thing I've noticed is that a lot of these sort of mappable APIs will... I mean, if you have map2, what can you derive from it? You mentioned that you can... That is magical. The moment you introduce map2, so many things become possible. Yeah. It's pretty neat. One of the things that I've been doing, I've got this LMarkdown parsing library and I've had a lot of fun building up transformations because it's really fun in a typed language to deal with any sort of abstract syntax tree, whether it's Markdown or something else. So I'm finding myself doing operations where you want to count the number of headings or you want to take all of the level two headings and capture those. So that's like, you might want to do like a fold left over them and that's just derived from map2 or you might want to... Well, the fold is not derived from map2. It is its own thing, but there's a combination of fold and map2 that becomes really, really powerful. I think that's what you're pointing towards. So this goes typically under the name of a sequence or combined in various libraries. But if you have say a list of maybes and you don't want to check each of them individually, you say, give me back just one single maybe that's either nothing if any of the items were missing or just the list of all the present values if they were all present. And that's where you would fold map2. I've used it using the remote data pattern. It's really useful to know if all of the... If you have a list of remote data values, it's useful to see are they all successful or are any of them pending or failed. So it gives you like an aggregate status of all these independent remote datas. And if they're all successful, then you get a list of all the successful values. So it's super, super convenient. Yeah. Combine is an awesome helper. And I imagine you're using it in your markdown parser where you say, oh, I have a list of parsers. Can you sort of turn that into a parser that gives me a list of things? You know, I don't think I expose a combined function for... But maybe I should. But I am in Elm pages. I have this data source API, used to be static HTTP, which is sort of like a declarative description of like getting HTTP data. So it's not a command. It's something that you can sort of just have when you load a page. And anyway, combine is super helpful there because you'll have all these different data sources that you want to combine into a list. And that's a super handy function. So I'm confused. Is this combine or is it sequence? That is usual. I think he's saying it's a synonym. Yeah. The two names are used in Elm. So for example, in the core library, there's a task dot sequence, which takes a list of tasks and just sort of squashes it down into a single task that will succeed if all the child tasks succeed. But you might see and say the remote data I think uses... Actually remote data I think uses from list and then like the result extra maybe extra use combine. Yeah. I think that's maybe one of the disadvantages of not having type classes is that it allows the same function to have different names, which sometimes is nice because a more domain specific name might make more sense in the context of one library, but it makes it maybe a little bit harder to see some of these patterns across multiple modules. Well having type classes wouldn't prevent you from adding a new function that does the same thing anyway. But it would enforce that if something is applicative, it must have this function with this name. And so I think it would be really interesting to explore like having a sort of community resource of an Elm review rule where you can sort of have some little at directive in a doc comment in a module and say this is applicative or whatever term we want to use. But just to sort of have it remind you, oh, but you don't expose a function name to this. Maybe you meant to do that. So another thing that the map to allows and we already touched a little bit on it with pipeline APIs and combining, but it can just be a really powerful way of cleaning up code. And I had this magical experience a while back. I was helping somebody else on a JavaScript project where they needed to parse sort of like Excel style formulas, which are more or less just like prefix functions that can be nested arbitrarily. And we came up with something that's a little bit clunky. I think it might've been some kind of recursive function that would consume a string and try to build a tree out of it. And I wondered if I could do something in Elm that would be nicer. And I started with just re implementing the same approach that we had in JavaScript in Elm, where I'm parsing a string. But I also had introduced the end of a result type just because Elm has that and JavaScript doesn't. So each sort of step I would try to parse a chunk of the string and then return a result if it was bad and otherwise keep going. And it was this giant nested case expression, which my second step was saying, okay, well, there's a bunch of steps where I can say it can either be a function name, like add or subtract. It can be an open parenthesis. It can be an inner expression. It can be a closed parenthesis. And those were all nested case expressions. What if I broke them out into functions? And so I broke them all out into functions with this really tedious signature where it's like string to tuple of remaining string and result of like the type we've parsed so far. It was just really tortuous. But at least it flattened my case expressions a little bit because now all of the bodies were broken out into functions, which is that rule of abstraction I talked about earlier, separate doing code from branching code. And then I started realizing, wait a minute, this signature of like string to this awful tuple shows up all the time. And if we think about it, that's effectively what a parser is. It's turning a string into some less structured value, in this case a string, into a more structured value and possibly an error, which is why I had that result. And in this case, I had to keep track of the remaining string because you don't parse everything all at once. And so I took that and aliased it to parser and just cleaned up all the signatures. And it looked a lot nicer, but I was still having to do all this casing to sort of combine the things together. This is where the light bulb starts going off. I'm like, wait a minute, I'm doing all this casing on the results, all on this like tuple result thing to see, can I combine these different pieces together? Wouldn't it be nice if I had a way to just, now that they're called parsers, just combine two parsers together? Hmm, could I define a map2 function? And it's a little bit mind bending to define a map2 function over like functions of tuples of results. But because I had aliased it to just parser A, I knew, oh, I know how to define a map2 over parser A. I defined that, and that's when the magic happened. Because all of a sudden, I could eliminate all those case expressions and just very cleanly combine all those extracted functions that I had together in a fairly flat way. And then of course, knowing that I can use map2 to implement and map, I did that to give myself a parsing pipeline API, which turned out to be really, really nice. And then sort of in the vein of what the JSON decode pipeline does, where you can sort of layer on a little bit of extra behavior or meaning on top of that. When you're parsing, sometimes you want to parse a value and then like actually create a value out of it. And sometimes you just want to make sure that something is there in the string, but you want to move on. So you might want to consume a value or you might want to actually like parse something out of it. I don't know if you might call that keep and consume or something like that. So that's effectively what I did. I had like domain specific variations on and map. And I think I called them keep and consume that allowed me to have a very flat pipeline that was just like, oh, start by attempting to parse a function name, then just consume an open parenthesis, then sort of recursively attempt to parse another expression, and then try to consume a closing parenthesis. And just it all fell into place from this really tangled nested mess of case expressions and nested functions into this beautiful API. It's all because of map two. And that was a very iterative approach that I took. I was aware of some of these concepts because I've used a lot of JSON decoders before, but I wasn't really comfortable with parsing strings. But that experience of sort of stumbling into what I guess you might call parser combinators, which I guess really all of a sudden that term made so much sense for me because I had these parses already. This is little functions I had already extracted for parse the string into a function name or a parenthesis. And then I implemented map two and a couple other functions that allowed me to combine parsers together and boom, all of a sudden I had in, I don't know, probably less than 100 lines of Elm built a parsing library. That was really magical and mind blowing. And then just for fun, I checked the Elm parser library, which it actually has a pipeline syntax. It uses special operators, but it's effectively nmap. That's like pipe dot and pipe equals, which are equivalent to my specialized operators for like parse and consume. And it was basically the same code. So I sort of stumbled into something that was very similar to the official Elm parse library. So it was a really fun exercise for me. I learned a lot. I feel like I learned how parsing works. I got way more comfortable with some new facets of map two, the idea of combinators in general. I think I gained a new level of understanding the combination of parsers and combinators as like two pieces that really play well together. Yeah, it was a really magical experience. I stayed up late into the night and it was just like, oh, another light bulb moment. I think I created probably four or five Elis that I created like for each step in that process. And it was amazing. Yeah. I'm now very curious, did you backport that to the JavaScript version? I didn't directly, but I was helping somebody else on their project and I shared the Elm equivalents, which got the other person interested in looking up at JavaScript parsing or parser combinator libraries, which they were then able to refactor our original solution into something using the JavaScript parser combinator library that was very similar to what I ended up with in Elm. That's cool. Yeah. I think like combinator is such an intimidating word, but really the concept is something that like, I mean, if you've spent a lot of time using some of the basic tools that Elm gives us like decoders, it's a very familiar concept of breaking down a problem into small sub problems and then building it up into something more complex by using these sort of combining functions. That's all it is. And it's a very, it's funny because when you start to like think about the internals and definitions, it seems so complicated, but when you do it, it's so natural and it's so easy to do it well. Cause it basically like the conclusion I've come to is that it's basically the difference between like imperative transformations and declarative transformations. That's basically what a combinator is, is it's like a declarative way of describing a transformation, which can then be built out of like basically they're the primitive transformation building blocks and these compound ones where you can combine them together. That's all it is. And it's a very natural pattern. Anytime you want, you have like two pieces of data that you'd want to work with and you're wondering, Oh, I need to combine them. It might be, I have two maybes. I want both of, I want to do some operation on both of those to get a new maybe back. That might be one way to do it. That would be a combinator. I think that the two types of combinator that I needed to implement for this parsing library, one was a way to combine two pieces together and say, I want to do parse this piece of data and also this other piece of data. But also sometimes you want to say, attempt to parse it this way, or if that fails, also attempt to parse it this other way. If you've done JSON decoding, you'll be familiar with like the one of where you give it a list of decoders and it will try all of them and whichever succeeds first is the ones that's fused. And I implemented one of those for my little parser and that's also a form of combinator. Yeah. We talked about this on our Elm parser episode, but there is a really interesting thing that when you're coming from experience using JSON decode and then you go use the Elm parser library, it's kind of counterintuitive because you use one of and you're like, wait a minute, the one of just failed on the first thing in my one of that had three different options. And so it's interesting because the semantics are different between one of in JSON decode and one of in Elm parser. Right. Because you have the idea of committing versus backtracking. Exactly. Which is like another layer to learn. Yes. And I don't think that's necessarily a law of a particular pattern, but it just goes to show that you can sort of perhaps like follow these same patterns, but have slightly different semantics. Well, I think we've we've covered applicatives pretty well. I'm sure there's more we could say. But Joelle, thanks again for joining us. And if people want to get some more of your good knowledge, where can they follow you and where can they learn more? So they can follow me on Twitter, Joelle Ken, J O E L Q U E N. They can also go to the Thoughtbot blog. That's a place I work at. I have a lot of articles there talking about Elm and also other things. So that would be Thoughtbot.com slash blog slash authors slash Joelle dash Kenville. That's probably easier to link than to try to spell it. If you click around to some tags or search, you'll find it too. Yeah. There are a lot of great Elm blog posts. There's definitely worth checking out. A lot of them probably connect to the topic we talked to today because there's so many sort of foundational aspects that overlap into this topic of applicatives. And so there's a lot of articles I've written over time that connect to this. Yeah. Yeah. You also gave a really great talk about random generators that might be relevant here for people curious to learn more. Yeah. Yeah. There's also talk about random generators and map two and how that works there. I've given talk with maybe and how map two works there. So yeah, maybe this whole time I was just trying to get everyone to be excited about map two. It was the best function. Well, it worked for me. I'm amped up. Well, thank you so much again. And Jeroen, have a good one. Have a good one.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 1.0, "text": " Hello, Jeroen.", "tokens": [50364, 2425, 11, 508, 2032, 268, 13, 50414, 50414, 2425, 11, 28160, 13, 50464, 50464, 400, 965, 11, 1564, 797, 11, 321, 600, 658, 1071, 8341, 5549, 505, 11, 3139, 36343, 13, 50714, 50714, 4027, 13, 50764, 50764, 2561, 337, 5549, 13, 50814, 50814, 2421, 11, 1518, 13, 50864, 50864, 2561, 337, 1419, 385, 322, 264, 855, 13, 50914, 50914, 467, 311, 257, 6834, 13, 50964, 50964, 286, 600, 668, 7159, 281, 362, 291, 337, 512, 4829, 13, 51130, 51130, 400, 2721, 11, 321, 658, 257, 1481, 4829, 281, 2248, 365, 291, 300, 21545, 493, 13, 51323, 51323, 400, 1338, 11, 291, 434, 1333, 295, 11, 286, 519, 295, 291, 382, 2618, 567, 13948, 721, 294, 257, 636, 300, 51623, 51623], "temperature": 0.0, "avg_logprob": -0.17722043834748816, "compression_ratio": 1.552, "no_caption_prob": 0.06944721937179565}, {"id": 1, "seek": 0, "start": 1.0, "end": 2.0, "text": " Hello, Dylan.", "tokens": [50364, 2425, 11, 508, 2032, 268, 13, 50414, 50414, 2425, 11, 28160, 13, 50464, 50464, 400, 965, 11, 1564, 797, 11, 321, 600, 658, 1071, 8341, 5549, 505, 11, 3139, 36343, 13, 50714, 50714, 4027, 13, 50764, 50764, 2561, 337, 5549, 13, 50814, 50814, 2421, 11, 1518, 13, 50864, 50864, 2561, 337, 1419, 385, 322, 264, 855, 13, 50914, 50914, 467, 311, 257, 6834, 13, 50964, 50964, 286, 600, 668, 7159, 281, 362, 291, 337, 512, 4829, 13, 51130, 51130, 400, 2721, 11, 321, 658, 257, 1481, 4829, 281, 2248, 365, 291, 300, 21545, 493, 13, 51323, 51323, 400, 1338, 11, 291, 434, 1333, 295, 11, 286, 519, 295, 291, 382, 2618, 567, 13948, 721, 294, 257, 636, 300, 51623, 51623], "temperature": 0.0, "avg_logprob": -0.17722043834748816, "compression_ratio": 1.552, "no_caption_prob": 0.06944721937179565}, {"id": 2, "seek": 0, "start": 2.0, "end": 7.0, "text": " And today, once again, we've got another guest joining us, Jo\u00ebl.", "tokens": [50364, 2425, 11, 508, 2032, 268, 13, 50414, 50414, 2425, 11, 28160, 13, 50464, 50464, 400, 965, 11, 1564, 797, 11, 321, 600, 658, 1071, 8341, 5549, 505, 11, 3139, 36343, 13, 50714, 50714, 4027, 13, 50764, 50764, 2561, 337, 5549, 13, 50814, 50814, 2421, 11, 1518, 13, 50864, 50864, 2561, 337, 1419, 385, 322, 264, 855, 13, 50914, 50914, 467, 311, 257, 6834, 13, 50964, 50964, 286, 600, 668, 7159, 281, 362, 291, 337, 512, 4829, 13, 51130, 51130, 400, 2721, 11, 321, 658, 257, 1481, 4829, 281, 2248, 365, 291, 300, 21545, 493, 13, 51323, 51323, 400, 1338, 11, 291, 434, 1333, 295, 11, 286, 519, 295, 291, 382, 2618, 567, 13948, 721, 294, 257, 636, 300, 51623, 51623], "temperature": 0.0, "avg_logprob": -0.17722043834748816, "compression_ratio": 1.552, "no_caption_prob": 0.06944721937179565}, {"id": 3, "seek": 0, "start": 7.0, "end": 8.0, "text": " Welcome.", "tokens": [50364, 2425, 11, 508, 2032, 268, 13, 50414, 50414, 2425, 11, 28160, 13, 50464, 50464, 400, 965, 11, 1564, 797, 11, 321, 600, 658, 1071, 8341, 5549, 505, 11, 3139, 36343, 13, 50714, 50714, 4027, 13, 50764, 50764, 2561, 337, 5549, 13, 50814, 50814, 2421, 11, 1518, 13, 50864, 50864, 2561, 337, 1419, 385, 322, 264, 855, 13, 50914, 50914, 467, 311, 257, 6834, 13, 50964, 50964, 286, 600, 668, 7159, 281, 362, 291, 337, 512, 4829, 13, 51130, 51130, 400, 2721, 11, 321, 658, 257, 1481, 4829, 281, 2248, 365, 291, 300, 21545, 493, 13, 51323, 51323, 400, 1338, 11, 291, 434, 1333, 295, 11, 286, 519, 295, 291, 382, 2618, 567, 13948, 721, 294, 257, 636, 300, 51623, 51623], "temperature": 0.0, "avg_logprob": -0.17722043834748816, "compression_ratio": 1.552, "no_caption_prob": 0.06944721937179565}, {"id": 4, "seek": 0, "start": 8.0, "end": 9.0, "text": " Thanks for joining.", "tokens": [50364, 2425, 11, 508, 2032, 268, 13, 50414, 50414, 2425, 11, 28160, 13, 50464, 50464, 400, 965, 11, 1564, 797, 11, 321, 600, 658, 1071, 8341, 5549, 505, 11, 3139, 36343, 13, 50714, 50714, 4027, 13, 50764, 50764, 2561, 337, 5549, 13, 50814, 50814, 2421, 11, 1518, 13, 50864, 50864, 2561, 337, 1419, 385, 322, 264, 855, 13, 50914, 50914, 467, 311, 257, 6834, 13, 50964, 50964, 286, 600, 668, 7159, 281, 362, 291, 337, 512, 4829, 13, 51130, 51130, 400, 2721, 11, 321, 658, 257, 1481, 4829, 281, 2248, 365, 291, 300, 21545, 493, 13, 51323, 51323, 400, 1338, 11, 291, 434, 1333, 295, 11, 286, 519, 295, 291, 382, 2618, 567, 13948, 721, 294, 257, 636, 300, 51623, 51623], "temperature": 0.0, "avg_logprob": -0.17722043834748816, "compression_ratio": 1.552, "no_caption_prob": 0.06944721937179565}, {"id": 5, "seek": 0, "start": 9.0, "end": 10.0, "text": " Hi, everyone.", "tokens": [50364, 2425, 11, 508, 2032, 268, 13, 50414, 50414, 2425, 11, 28160, 13, 50464, 50464, 400, 965, 11, 1564, 797, 11, 321, 600, 658, 1071, 8341, 5549, 505, 11, 3139, 36343, 13, 50714, 50714, 4027, 13, 50764, 50764, 2561, 337, 5549, 13, 50814, 50814, 2421, 11, 1518, 13, 50864, 50864, 2561, 337, 1419, 385, 322, 264, 855, 13, 50914, 50914, 467, 311, 257, 6834, 13, 50964, 50964, 286, 600, 668, 7159, 281, 362, 291, 337, 512, 4829, 13, 51130, 51130, 400, 2721, 11, 321, 658, 257, 1481, 4829, 281, 2248, 365, 291, 300, 21545, 493, 13, 51323, 51323, 400, 1338, 11, 291, 434, 1333, 295, 11, 286, 519, 295, 291, 382, 2618, 567, 13948, 721, 294, 257, 636, 300, 51623, 51623], "temperature": 0.0, "avg_logprob": -0.17722043834748816, "compression_ratio": 1.552, "no_caption_prob": 0.06944721937179565}, {"id": 6, "seek": 0, "start": 10.0, "end": 11.0, "text": " Thanks for having me on the show.", "tokens": [50364, 2425, 11, 508, 2032, 268, 13, 50414, 50414, 2425, 11, 28160, 13, 50464, 50464, 400, 965, 11, 1564, 797, 11, 321, 600, 658, 1071, 8341, 5549, 505, 11, 3139, 36343, 13, 50714, 50714, 4027, 13, 50764, 50764, 2561, 337, 5549, 13, 50814, 50814, 2421, 11, 1518, 13, 50864, 50864, 2561, 337, 1419, 385, 322, 264, 855, 13, 50914, 50914, 467, 311, 257, 6834, 13, 50964, 50964, 286, 600, 668, 7159, 281, 362, 291, 337, 512, 4829, 13, 51130, 51130, 400, 2721, 11, 321, 658, 257, 1481, 4829, 281, 2248, 365, 291, 300, 21545, 493, 13, 51323, 51323, 400, 1338, 11, 291, 434, 1333, 295, 11, 286, 519, 295, 291, 382, 2618, 567, 13948, 721, 294, 257, 636, 300, 51623, 51623], "temperature": 0.0, "avg_logprob": -0.17722043834748816, "compression_ratio": 1.552, "no_caption_prob": 0.06944721937179565}, {"id": 7, "seek": 0, "start": 11.0, "end": 12.0, "text": " It's a pleasure.", "tokens": [50364, 2425, 11, 508, 2032, 268, 13, 50414, 50414, 2425, 11, 28160, 13, 50464, 50464, 400, 965, 11, 1564, 797, 11, 321, 600, 658, 1071, 8341, 5549, 505, 11, 3139, 36343, 13, 50714, 50714, 4027, 13, 50764, 50764, 2561, 337, 5549, 13, 50814, 50814, 2421, 11, 1518, 13, 50864, 50864, 2561, 337, 1419, 385, 322, 264, 855, 13, 50914, 50914, 467, 311, 257, 6834, 13, 50964, 50964, 286, 600, 668, 7159, 281, 362, 291, 337, 512, 4829, 13, 51130, 51130, 400, 2721, 11, 321, 658, 257, 1481, 4829, 281, 2248, 365, 291, 300, 21545, 493, 13, 51323, 51323, 400, 1338, 11, 291, 434, 1333, 295, 11, 286, 519, 295, 291, 382, 2618, 567, 13948, 721, 294, 257, 636, 300, 51623, 51623], "temperature": 0.0, "avg_logprob": -0.17722043834748816, "compression_ratio": 1.552, "no_caption_prob": 0.06944721937179565}, {"id": 8, "seek": 0, "start": 12.0, "end": 15.32, "text": " I've been hoping to have you for some topic.", "tokens": [50364, 2425, 11, 508, 2032, 268, 13, 50414, 50414, 2425, 11, 28160, 13, 50464, 50464, 400, 965, 11, 1564, 797, 11, 321, 600, 658, 1071, 8341, 5549, 505, 11, 3139, 36343, 13, 50714, 50714, 4027, 13, 50764, 50764, 2561, 337, 5549, 13, 50814, 50814, 2421, 11, 1518, 13, 50864, 50864, 2561, 337, 1419, 385, 322, 264, 855, 13, 50914, 50914, 467, 311, 257, 6834, 13, 50964, 50964, 286, 600, 668, 7159, 281, 362, 291, 337, 512, 4829, 13, 51130, 51130, 400, 2721, 11, 321, 658, 257, 1481, 4829, 281, 2248, 365, 291, 300, 21545, 493, 13, 51323, 51323, 400, 1338, 11, 291, 434, 1333, 295, 11, 286, 519, 295, 291, 382, 2618, 567, 13948, 721, 294, 257, 636, 300, 51623, 51623], "temperature": 0.0, "avg_logprob": -0.17722043834748816, "compression_ratio": 1.552, "no_caption_prob": 0.06944721937179565}, {"id": 9, "seek": 0, "start": 15.32, "end": 19.18, "text": " And finally, we got a nice topic to discuss with you that popped up.", "tokens": [50364, 2425, 11, 508, 2032, 268, 13, 50414, 50414, 2425, 11, 28160, 13, 50464, 50464, 400, 965, 11, 1564, 797, 11, 321, 600, 658, 1071, 8341, 5549, 505, 11, 3139, 36343, 13, 50714, 50714, 4027, 13, 50764, 50764, 2561, 337, 5549, 13, 50814, 50814, 2421, 11, 1518, 13, 50864, 50864, 2561, 337, 1419, 385, 322, 264, 855, 13, 50914, 50914, 467, 311, 257, 6834, 13, 50964, 50964, 286, 600, 668, 7159, 281, 362, 291, 337, 512, 4829, 13, 51130, 51130, 400, 2721, 11, 321, 658, 257, 1481, 4829, 281, 2248, 365, 291, 300, 21545, 493, 13, 51323, 51323, 400, 1338, 11, 291, 434, 1333, 295, 11, 286, 519, 295, 291, 382, 2618, 567, 13948, 721, 294, 257, 636, 300, 51623, 51623], "temperature": 0.0, "avg_logprob": -0.17722043834748816, "compression_ratio": 1.552, "no_caption_prob": 0.06944721937179565}, {"id": 10, "seek": 0, "start": 19.18, "end": 25.18, "text": " And yeah, you're sort of, I think of you as somebody who explains things in a way that", "tokens": [50364, 2425, 11, 508, 2032, 268, 13, 50414, 50414, 2425, 11, 28160, 13, 50464, 50464, 400, 965, 11, 1564, 797, 11, 321, 600, 658, 1071, 8341, 5549, 505, 11, 3139, 36343, 13, 50714, 50714, 4027, 13, 50764, 50764, 2561, 337, 5549, 13, 50814, 50814, 2421, 11, 1518, 13, 50864, 50864, 2561, 337, 1419, 385, 322, 264, 855, 13, 50914, 50914, 467, 311, 257, 6834, 13, 50964, 50964, 286, 600, 668, 7159, 281, 362, 291, 337, 512, 4829, 13, 51130, 51130, 400, 2721, 11, 321, 658, 257, 1481, 4829, 281, 2248, 365, 291, 300, 21545, 493, 13, 51323, 51323, 400, 1338, 11, 291, 434, 1333, 295, 11, 286, 519, 295, 291, 382, 2618, 567, 13948, 721, 294, 257, 636, 300, 51623, 51623], "temperature": 0.0, "avg_logprob": -0.17722043834748816, "compression_ratio": 1.552, "no_caption_prob": 0.06944721937179565}, {"id": 11, "seek": 2518, "start": 25.18, "end": 31.64, "text": " a beginner hears your explanation and a light bulb goes off and an expert and an Elm veteran", "tokens": [50364, 257, 22080, 25688, 428, 10835, 293, 257, 1442, 21122, 1709, 766, 293, 364, 5844, 293, 364, 2699, 76, 18324, 50687, 50687, 25688, 428, 10835, 293, 436, 584, 11, 1954, 11, 286, 1128, 1194, 295, 309, 300, 636, 13, 50871, 50871, 509, 434, 1333, 295, 658, 257, 869, 25066, 636, 295, 7697, 760, 29505, 11, 597, 286, 534, 51073, 51073, 4449, 13, 51123, 51123, 1042, 11, 1309, 291, 13, 51173, 51173, 663, 311, 534, 264, 3387, 295, 3892, 562, 286, 1710, 420, 2464, 420, 2924, 13, 51499, 51499, 286, 2673, 411, 281, 312, 558, 322, 300, 12866, 295, 746, 300, 311, 8496, 293, 4571, 51781, 51781], "temperature": 0.0, "avg_logprob": -0.13853837842139127, "compression_ratio": 1.686046511627907, "no_caption_prob": 0.00017670553643256426}, {"id": 12, "seek": 2518, "start": 31.64, "end": 35.32, "text": " hears your explanation and they say, oh, I never thought of it that way.", "tokens": [50364, 257, 22080, 25688, 428, 10835, 293, 257, 1442, 21122, 1709, 766, 293, 364, 5844, 293, 364, 2699, 76, 18324, 50687, 50687, 25688, 428, 10835, 293, 436, 584, 11, 1954, 11, 286, 1128, 1194, 295, 309, 300, 636, 13, 50871, 50871, 509, 434, 1333, 295, 658, 257, 869, 25066, 636, 295, 7697, 760, 29505, 11, 597, 286, 534, 51073, 51073, 4449, 13, 51123, 51123, 1042, 11, 1309, 291, 13, 51173, 51173, 663, 311, 534, 264, 3387, 295, 3892, 562, 286, 1710, 420, 2464, 420, 2924, 13, 51499, 51499, 286, 2673, 411, 281, 312, 558, 322, 300, 12866, 295, 746, 300, 311, 8496, 293, 4571, 51781, 51781], "temperature": 0.0, "avg_logprob": -0.13853837842139127, "compression_ratio": 1.686046511627907, "no_caption_prob": 0.00017670553643256426}, {"id": 13, "seek": 2518, "start": 35.32, "end": 39.36, "text": " You're sort of got a great philosophical way of breaking down fundamentals, which I really", "tokens": [50364, 257, 22080, 25688, 428, 10835, 293, 257, 1442, 21122, 1709, 766, 293, 364, 5844, 293, 364, 2699, 76, 18324, 50687, 50687, 25688, 428, 10835, 293, 436, 584, 11, 1954, 11, 286, 1128, 1194, 295, 309, 300, 636, 13, 50871, 50871, 509, 434, 1333, 295, 658, 257, 869, 25066, 636, 295, 7697, 760, 29505, 11, 597, 286, 534, 51073, 51073, 4449, 13, 51123, 51123, 1042, 11, 1309, 291, 13, 51173, 51173, 663, 311, 534, 264, 3387, 295, 3892, 562, 286, 1710, 420, 2464, 420, 2924, 13, 51499, 51499, 286, 2673, 411, 281, 312, 558, 322, 300, 12866, 295, 746, 300, 311, 8496, 293, 4571, 51781, 51781], "temperature": 0.0, "avg_logprob": -0.13853837842139127, "compression_ratio": 1.686046511627907, "no_caption_prob": 0.00017670553643256426}, {"id": 14, "seek": 2518, "start": 39.36, "end": 40.36, "text": " appreciate.", "tokens": [50364, 257, 22080, 25688, 428, 10835, 293, 257, 1442, 21122, 1709, 766, 293, 364, 5844, 293, 364, 2699, 76, 18324, 50687, 50687, 25688, 428, 10835, 293, 436, 584, 11, 1954, 11, 286, 1128, 1194, 295, 309, 300, 636, 13, 50871, 50871, 509, 434, 1333, 295, 658, 257, 869, 25066, 636, 295, 7697, 760, 29505, 11, 597, 286, 534, 51073, 51073, 4449, 13, 51123, 51123, 1042, 11, 1309, 291, 13, 51173, 51173, 663, 311, 534, 264, 3387, 295, 3892, 562, 286, 1710, 420, 2464, 420, 2924, 13, 51499, 51499, 286, 2673, 411, 281, 312, 558, 322, 300, 12866, 295, 746, 300, 311, 8496, 293, 4571, 51781, 51781], "temperature": 0.0, "avg_logprob": -0.13853837842139127, "compression_ratio": 1.686046511627907, "no_caption_prob": 0.00017670553643256426}, {"id": 15, "seek": 2518, "start": 40.36, "end": 41.36, "text": " Well, thank you.", "tokens": [50364, 257, 22080, 25688, 428, 10835, 293, 257, 1442, 21122, 1709, 766, 293, 364, 5844, 293, 364, 2699, 76, 18324, 50687, 50687, 25688, 428, 10835, 293, 436, 584, 11, 1954, 11, 286, 1128, 1194, 295, 309, 300, 636, 13, 50871, 50871, 509, 434, 1333, 295, 658, 257, 869, 25066, 636, 295, 7697, 760, 29505, 11, 597, 286, 534, 51073, 51073, 4449, 13, 51123, 51123, 1042, 11, 1309, 291, 13, 51173, 51173, 663, 311, 534, 264, 3387, 295, 3892, 562, 286, 1710, 420, 2464, 420, 2924, 13, 51499, 51499, 286, 2673, 411, 281, 312, 558, 322, 300, 12866, 295, 746, 300, 311, 8496, 293, 4571, 51781, 51781], "temperature": 0.0, "avg_logprob": -0.13853837842139127, "compression_ratio": 1.686046511627907, "no_caption_prob": 0.00017670553643256426}, {"id": 16, "seek": 2518, "start": 41.36, "end": 47.879999999999995, "text": " That's really the goal of mine when I speak or write or teach.", "tokens": [50364, 257, 22080, 25688, 428, 10835, 293, 257, 1442, 21122, 1709, 766, 293, 364, 5844, 293, 364, 2699, 76, 18324, 50687, 50687, 25688, 428, 10835, 293, 436, 584, 11, 1954, 11, 286, 1128, 1194, 295, 309, 300, 636, 13, 50871, 50871, 509, 434, 1333, 295, 658, 257, 869, 25066, 636, 295, 7697, 760, 29505, 11, 597, 286, 534, 51073, 51073, 4449, 13, 51123, 51123, 1042, 11, 1309, 291, 13, 51173, 51173, 663, 311, 534, 264, 3387, 295, 3892, 562, 286, 1710, 420, 2464, 420, 2924, 13, 51499, 51499, 286, 2673, 411, 281, 312, 558, 322, 300, 12866, 295, 746, 300, 311, 8496, 293, 4571, 51781, 51781], "temperature": 0.0, "avg_logprob": -0.13853837842139127, "compression_ratio": 1.686046511627907, "no_caption_prob": 0.00017670553643256426}, {"id": 17, "seek": 2518, "start": 47.879999999999995, "end": 53.519999999999996, "text": " I usually like to be right on that boundary of something that's practical and teaching", "tokens": [50364, 257, 22080, 25688, 428, 10835, 293, 257, 1442, 21122, 1709, 766, 293, 364, 5844, 293, 364, 2699, 76, 18324, 50687, 50687, 25688, 428, 10835, 293, 436, 584, 11, 1954, 11, 286, 1128, 1194, 295, 309, 300, 636, 13, 50871, 50871, 509, 434, 1333, 295, 658, 257, 869, 25066, 636, 295, 7697, 760, 29505, 11, 597, 286, 534, 51073, 51073, 4449, 13, 51123, 51123, 1042, 11, 1309, 291, 13, 51173, 51173, 663, 311, 534, 264, 3387, 295, 3892, 562, 286, 1710, 420, 2464, 420, 2924, 13, 51499, 51499, 286, 2673, 411, 281, 312, 558, 322, 300, 12866, 295, 746, 300, 311, 8496, 293, 4571, 51781, 51781], "temperature": 0.0, "avg_logprob": -0.13853837842139127, "compression_ratio": 1.686046511627907, "no_caption_prob": 0.00017670553643256426}, {"id": 18, "seek": 5352, "start": 53.52, "end": 58.28, "text": " how to do a task and solve a problem, but also venture a little bit in the philosophical", "tokens": [50364, 577, 281, 360, 257, 5633, 293, 5039, 257, 1154, 11, 457, 611, 18474, 257, 707, 857, 294, 264, 25066, 50602, 50602, 1002, 295, 411, 11, 983, 307, 341, 257, 4420, 3827, 30, 50789, 50789, 400, 307, 456, 257, 3801, 3410, 412, 589, 30, 50936, 50936, 1779, 13, 50986, 50986, 407, 4124, 295, 3801, 10392, 412, 589, 11, 437, 307, 300, 3410, 965, 30, 51206, 51206, 509, 528, 281, 5366, 309, 337, 505, 11, 3139, 36343, 30, 51308, 51308, 2699, 76, 311, 11455, 5102, 13, 51380, 51380, 708, 775, 300, 914, 30, 51430, 51430, 407, 286, 519, 286, 603, 445, 1269, 341, 538, 1566, 300, 286, 519, 452, 2954, 2445, 294, 2699, 76, 307, 1391, 51704, 51704, 4471, 17, 13, 51762, 51762], "temperature": 0.0, "avg_logprob": -0.15086129041222052, "compression_ratio": 1.5575539568345325, "no_caption_prob": 4.0060131141217425e-05}, {"id": 19, "seek": 5352, "start": 58.28, "end": 62.02, "text": " world of like, why is this a useful solution?", "tokens": [50364, 577, 281, 360, 257, 5633, 293, 5039, 257, 1154, 11, 457, 611, 18474, 257, 707, 857, 294, 264, 25066, 50602, 50602, 1002, 295, 411, 11, 983, 307, 341, 257, 4420, 3827, 30, 50789, 50789, 400, 307, 456, 257, 3801, 3410, 412, 589, 30, 50936, 50936, 1779, 13, 50986, 50986, 407, 4124, 295, 3801, 10392, 412, 589, 11, 437, 307, 300, 3410, 965, 30, 51206, 51206, 509, 528, 281, 5366, 309, 337, 505, 11, 3139, 36343, 30, 51308, 51308, 2699, 76, 311, 11455, 5102, 13, 51380, 51380, 708, 775, 300, 914, 30, 51430, 51430, 407, 286, 519, 286, 603, 445, 1269, 341, 538, 1566, 300, 286, 519, 452, 2954, 2445, 294, 2699, 76, 307, 1391, 51704, 51704, 4471, 17, 13, 51762, 51762], "temperature": 0.0, "avg_logprob": -0.15086129041222052, "compression_ratio": 1.5575539568345325, "no_caption_prob": 4.0060131141217425e-05}, {"id": 20, "seek": 5352, "start": 62.02, "end": 64.96000000000001, "text": " And is there a bigger concept at work?", "tokens": [50364, 577, 281, 360, 257, 5633, 293, 5039, 257, 1154, 11, 457, 611, 18474, 257, 707, 857, 294, 264, 25066, 50602, 50602, 1002, 295, 411, 11, 983, 307, 341, 257, 4420, 3827, 30, 50789, 50789, 400, 307, 456, 257, 3801, 3410, 412, 589, 30, 50936, 50936, 1779, 13, 50986, 50986, 407, 4124, 295, 3801, 10392, 412, 589, 11, 437, 307, 300, 3410, 965, 30, 51206, 51206, 509, 528, 281, 5366, 309, 337, 505, 11, 3139, 36343, 30, 51308, 51308, 2699, 76, 311, 11455, 5102, 13, 51380, 51380, 708, 775, 300, 914, 30, 51430, 51430, 407, 286, 519, 286, 603, 445, 1269, 341, 538, 1566, 300, 286, 519, 452, 2954, 2445, 294, 2699, 76, 307, 1391, 51704, 51704, 4471, 17, 13, 51762, 51762], "temperature": 0.0, "avg_logprob": -0.15086129041222052, "compression_ratio": 1.5575539568345325, "no_caption_prob": 4.0060131141217425e-05}, {"id": 21, "seek": 5352, "start": 64.96000000000001, "end": 65.96000000000001, "text": " Right.", "tokens": [50364, 577, 281, 360, 257, 5633, 293, 5039, 257, 1154, 11, 457, 611, 18474, 257, 707, 857, 294, 264, 25066, 50602, 50602, 1002, 295, 411, 11, 983, 307, 341, 257, 4420, 3827, 30, 50789, 50789, 400, 307, 456, 257, 3801, 3410, 412, 589, 30, 50936, 50936, 1779, 13, 50986, 50986, 407, 4124, 295, 3801, 10392, 412, 589, 11, 437, 307, 300, 3410, 965, 30, 51206, 51206, 509, 528, 281, 5366, 309, 337, 505, 11, 3139, 36343, 30, 51308, 51308, 2699, 76, 311, 11455, 5102, 13, 51380, 51380, 708, 775, 300, 914, 30, 51430, 51430, 407, 286, 519, 286, 603, 445, 1269, 341, 538, 1566, 300, 286, 519, 452, 2954, 2445, 294, 2699, 76, 307, 1391, 51704, 51704, 4471, 17, 13, 51762, 51762], "temperature": 0.0, "avg_logprob": -0.15086129041222052, "compression_ratio": 1.5575539568345325, "no_caption_prob": 4.0060131141217425e-05}, {"id": 22, "seek": 5352, "start": 65.96000000000001, "end": 70.36, "text": " So speaking of bigger concepts at work, what is that concept today?", "tokens": [50364, 577, 281, 360, 257, 5633, 293, 5039, 257, 1154, 11, 457, 611, 18474, 257, 707, 857, 294, 264, 25066, 50602, 50602, 1002, 295, 411, 11, 983, 307, 341, 257, 4420, 3827, 30, 50789, 50789, 400, 307, 456, 257, 3801, 3410, 412, 589, 30, 50936, 50936, 1779, 13, 50986, 50986, 407, 4124, 295, 3801, 10392, 412, 589, 11, 437, 307, 300, 3410, 965, 30, 51206, 51206, 509, 528, 281, 5366, 309, 337, 505, 11, 3139, 36343, 30, 51308, 51308, 2699, 76, 311, 11455, 5102, 13, 51380, 51380, 708, 775, 300, 914, 30, 51430, 51430, 407, 286, 519, 286, 603, 445, 1269, 341, 538, 1566, 300, 286, 519, 452, 2954, 2445, 294, 2699, 76, 307, 1391, 51704, 51704, 4471, 17, 13, 51762, 51762], "temperature": 0.0, "avg_logprob": -0.15086129041222052, "compression_ratio": 1.5575539568345325, "no_caption_prob": 4.0060131141217425e-05}, {"id": 23, "seek": 5352, "start": 70.36, "end": 72.4, "text": " You want to introduce it for us, Jo\u00ebl?", "tokens": [50364, 577, 281, 360, 257, 5633, 293, 5039, 257, 1154, 11, 457, 611, 18474, 257, 707, 857, 294, 264, 25066, 50602, 50602, 1002, 295, 411, 11, 983, 307, 341, 257, 4420, 3827, 30, 50789, 50789, 400, 307, 456, 257, 3801, 3410, 412, 589, 30, 50936, 50936, 1779, 13, 50986, 50986, 407, 4124, 295, 3801, 10392, 412, 589, 11, 437, 307, 300, 3410, 965, 30, 51206, 51206, 509, 528, 281, 5366, 309, 337, 505, 11, 3139, 36343, 30, 51308, 51308, 2699, 76, 311, 11455, 5102, 13, 51380, 51380, 708, 775, 300, 914, 30, 51430, 51430, 407, 286, 519, 286, 603, 445, 1269, 341, 538, 1566, 300, 286, 519, 452, 2954, 2445, 294, 2699, 76, 307, 1391, 51704, 51704, 4471, 17, 13, 51762, 51762], "temperature": 0.0, "avg_logprob": -0.15086129041222052, "compression_ratio": 1.5575539568345325, "no_caption_prob": 4.0060131141217425e-05}, {"id": 24, "seek": 5352, "start": 72.4, "end": 73.84, "text": " Elm's universal pattern.", "tokens": [50364, 577, 281, 360, 257, 5633, 293, 5039, 257, 1154, 11, 457, 611, 18474, 257, 707, 857, 294, 264, 25066, 50602, 50602, 1002, 295, 411, 11, 983, 307, 341, 257, 4420, 3827, 30, 50789, 50789, 400, 307, 456, 257, 3801, 3410, 412, 589, 30, 50936, 50936, 1779, 13, 50986, 50986, 407, 4124, 295, 3801, 10392, 412, 589, 11, 437, 307, 300, 3410, 965, 30, 51206, 51206, 509, 528, 281, 5366, 309, 337, 505, 11, 3139, 36343, 30, 51308, 51308, 2699, 76, 311, 11455, 5102, 13, 51380, 51380, 708, 775, 300, 914, 30, 51430, 51430, 407, 286, 519, 286, 603, 445, 1269, 341, 538, 1566, 300, 286, 519, 452, 2954, 2445, 294, 2699, 76, 307, 1391, 51704, 51704, 4471, 17, 13, 51762, 51762], "temperature": 0.0, "avg_logprob": -0.15086129041222052, "compression_ratio": 1.5575539568345325, "no_caption_prob": 4.0060131141217425e-05}, {"id": 25, "seek": 5352, "start": 73.84, "end": 74.84, "text": " What does that mean?", "tokens": [50364, 577, 281, 360, 257, 5633, 293, 5039, 257, 1154, 11, 457, 611, 18474, 257, 707, 857, 294, 264, 25066, 50602, 50602, 1002, 295, 411, 11, 983, 307, 341, 257, 4420, 3827, 30, 50789, 50789, 400, 307, 456, 257, 3801, 3410, 412, 589, 30, 50936, 50936, 1779, 13, 50986, 50986, 407, 4124, 295, 3801, 10392, 412, 589, 11, 437, 307, 300, 3410, 965, 30, 51206, 51206, 509, 528, 281, 5366, 309, 337, 505, 11, 3139, 36343, 30, 51308, 51308, 2699, 76, 311, 11455, 5102, 13, 51380, 51380, 708, 775, 300, 914, 30, 51430, 51430, 407, 286, 519, 286, 603, 445, 1269, 341, 538, 1566, 300, 286, 519, 452, 2954, 2445, 294, 2699, 76, 307, 1391, 51704, 51704, 4471, 17, 13, 51762, 51762], "temperature": 0.0, "avg_logprob": -0.15086129041222052, "compression_ratio": 1.5575539568345325, "no_caption_prob": 4.0060131141217425e-05}, {"id": 26, "seek": 5352, "start": 74.84, "end": 80.32000000000001, "text": " So I think I'll just open this by saying that I think my favorite function in Elm is probably", "tokens": [50364, 577, 281, 360, 257, 5633, 293, 5039, 257, 1154, 11, 457, 611, 18474, 257, 707, 857, 294, 264, 25066, 50602, 50602, 1002, 295, 411, 11, 983, 307, 341, 257, 4420, 3827, 30, 50789, 50789, 400, 307, 456, 257, 3801, 3410, 412, 589, 30, 50936, 50936, 1779, 13, 50986, 50986, 407, 4124, 295, 3801, 10392, 412, 589, 11, 437, 307, 300, 3410, 965, 30, 51206, 51206, 509, 528, 281, 5366, 309, 337, 505, 11, 3139, 36343, 30, 51308, 51308, 2699, 76, 311, 11455, 5102, 13, 51380, 51380, 708, 775, 300, 914, 30, 51430, 51430, 407, 286, 519, 286, 603, 445, 1269, 341, 538, 1566, 300, 286, 519, 452, 2954, 2445, 294, 2699, 76, 307, 1391, 51704, 51704, 4471, 17, 13, 51762, 51762], "temperature": 0.0, "avg_logprob": -0.15086129041222052, "compression_ratio": 1.5575539568345325, "no_caption_prob": 4.0060131141217425e-05}, {"id": 27, "seek": 5352, "start": 80.32000000000001, "end": 81.48, "text": " map2.", "tokens": [50364, 577, 281, 360, 257, 5633, 293, 5039, 257, 1154, 11, 457, 611, 18474, 257, 707, 857, 294, 264, 25066, 50602, 50602, 1002, 295, 411, 11, 983, 307, 341, 257, 4420, 3827, 30, 50789, 50789, 400, 307, 456, 257, 3801, 3410, 412, 589, 30, 50936, 50936, 1779, 13, 50986, 50986, 407, 4124, 295, 3801, 10392, 412, 589, 11, 437, 307, 300, 3410, 965, 30, 51206, 51206, 509, 528, 281, 5366, 309, 337, 505, 11, 3139, 36343, 30, 51308, 51308, 2699, 76, 311, 11455, 5102, 13, 51380, 51380, 708, 775, 300, 914, 30, 51430, 51430, 407, 286, 519, 286, 603, 445, 1269, 341, 538, 1566, 300, 286, 519, 452, 2954, 2445, 294, 2699, 76, 307, 1391, 51704, 51704, 4471, 17, 13, 51762, 51762], "temperature": 0.0, "avg_logprob": -0.15086129041222052, "compression_ratio": 1.5575539568345325, "no_caption_prob": 4.0060131141217425e-05}, {"id": 28, "seek": 8148, "start": 81.48, "end": 86.68, "text": " There's a bunch of different modules that implement this as a maybe map2, a JSON decode", "tokens": [50364, 821, 311, 257, 3840, 295, 819, 16679, 300, 4445, 341, 382, 257, 1310, 4471, 17, 11, 257, 31828, 979, 1429, 50624, 50624, 4471, 17, 11, 4974, 4471, 17, 11, 293, 439, 295, 729, 11, 436, 434, 1391, 452, 2954, 13, 50866, 50866, 759, 291, 645, 294, 257, 11029, 6077, 293, 291, 727, 787, 1565, 472, 2445, 11, 576, 309, 312, 4471, 17, 30, 51130, 51130, 467, 1391, 576, 312, 4471, 17, 13, 51212, 51212, 42494, 11, 286, 820, 1391, 584, 293, 550, 570, 291, 393, 764, 309, 281, 4445, 4471, 17, 293, 51508, 51508, 550, 291, 1116, 483, 411, 11, 309, 311, 411, 30049, 337, 544, 15065, 13, 51684, 51684, 467, 311, 733, 295, 18309, 13, 51798, 51798], "temperature": 0.0, "avg_logprob": -0.20134765307108562, "compression_ratio": 1.6743295019157087, "no_caption_prob": 5.507493824552512e-06}, {"id": 29, "seek": 8148, "start": 86.68, "end": 91.52000000000001, "text": " map2, random map2, and all of those, they're probably my favorite.", "tokens": [50364, 821, 311, 257, 3840, 295, 819, 16679, 300, 4445, 341, 382, 257, 1310, 4471, 17, 11, 257, 31828, 979, 1429, 50624, 50624, 4471, 17, 11, 4974, 4471, 17, 11, 293, 439, 295, 729, 11, 436, 434, 1391, 452, 2954, 13, 50866, 50866, 759, 291, 645, 294, 257, 11029, 6077, 293, 291, 727, 787, 1565, 472, 2445, 11, 576, 309, 312, 4471, 17, 30, 51130, 51130, 467, 1391, 576, 312, 4471, 17, 13, 51212, 51212, 42494, 11, 286, 820, 1391, 584, 293, 550, 570, 291, 393, 764, 309, 281, 4445, 4471, 17, 293, 51508, 51508, 550, 291, 1116, 483, 411, 11, 309, 311, 411, 30049, 337, 544, 15065, 13, 51684, 51684, 467, 311, 733, 295, 18309, 13, 51798, 51798], "temperature": 0.0, "avg_logprob": -0.20134765307108562, "compression_ratio": 1.6743295019157087, "no_caption_prob": 5.507493824552512e-06}, {"id": 30, "seek": 8148, "start": 91.52000000000001, "end": 96.80000000000001, "text": " If you were in a desert island and you could only bring one function, would it be map2?", "tokens": [50364, 821, 311, 257, 3840, 295, 819, 16679, 300, 4445, 341, 382, 257, 1310, 4471, 17, 11, 257, 31828, 979, 1429, 50624, 50624, 4471, 17, 11, 4974, 4471, 17, 11, 293, 439, 295, 729, 11, 436, 434, 1391, 452, 2954, 13, 50866, 50866, 759, 291, 645, 294, 257, 11029, 6077, 293, 291, 727, 787, 1565, 472, 2445, 11, 576, 309, 312, 4471, 17, 30, 51130, 51130, 467, 1391, 576, 312, 4471, 17, 13, 51212, 51212, 42494, 11, 286, 820, 1391, 584, 293, 550, 570, 291, 393, 764, 309, 281, 4445, 4471, 17, 293, 51508, 51508, 550, 291, 1116, 483, 411, 11, 309, 311, 411, 30049, 337, 544, 15065, 13, 51684, 51684, 467, 311, 733, 295, 18309, 13, 51798, 51798], "temperature": 0.0, "avg_logprob": -0.20134765307108562, "compression_ratio": 1.6743295019157087, "no_caption_prob": 5.507493824552512e-06}, {"id": 31, "seek": 8148, "start": 96.80000000000001, "end": 98.44, "text": " It probably would be map2.", "tokens": [50364, 821, 311, 257, 3840, 295, 819, 16679, 300, 4445, 341, 382, 257, 1310, 4471, 17, 11, 257, 31828, 979, 1429, 50624, 50624, 4471, 17, 11, 4974, 4471, 17, 11, 293, 439, 295, 729, 11, 436, 434, 1391, 452, 2954, 13, 50866, 50866, 759, 291, 645, 294, 257, 11029, 6077, 293, 291, 727, 787, 1565, 472, 2445, 11, 576, 309, 312, 4471, 17, 30, 51130, 51130, 467, 1391, 576, 312, 4471, 17, 13, 51212, 51212, 42494, 11, 286, 820, 1391, 584, 293, 550, 570, 291, 393, 764, 309, 281, 4445, 4471, 17, 293, 51508, 51508, 550, 291, 1116, 483, 411, 11, 309, 311, 411, 30049, 337, 544, 15065, 13, 51684, 51684, 467, 311, 733, 295, 18309, 13, 51798, 51798], "temperature": 0.0, "avg_logprob": -0.20134765307108562, "compression_ratio": 1.6743295019157087, "no_caption_prob": 5.507493824552512e-06}, {"id": 32, "seek": 8148, "start": 98.44, "end": 104.36, "text": " Technically, I should probably say and then because you can use it to implement map2 and", "tokens": [50364, 821, 311, 257, 3840, 295, 819, 16679, 300, 4445, 341, 382, 257, 1310, 4471, 17, 11, 257, 31828, 979, 1429, 50624, 50624, 4471, 17, 11, 4974, 4471, 17, 11, 293, 439, 295, 729, 11, 436, 434, 1391, 452, 2954, 13, 50866, 50866, 759, 291, 645, 294, 257, 11029, 6077, 293, 291, 727, 787, 1565, 472, 2445, 11, 576, 309, 312, 4471, 17, 30, 51130, 51130, 467, 1391, 576, 312, 4471, 17, 13, 51212, 51212, 42494, 11, 286, 820, 1391, 584, 293, 550, 570, 291, 393, 764, 309, 281, 4445, 4471, 17, 293, 51508, 51508, 550, 291, 1116, 483, 411, 11, 309, 311, 411, 30049, 337, 544, 15065, 13, 51684, 51684, 467, 311, 733, 295, 18309, 13, 51798, 51798], "temperature": 0.0, "avg_logprob": -0.20134765307108562, "compression_ratio": 1.6743295019157087, "no_caption_prob": 5.507493824552512e-06}, {"id": 33, "seek": 8148, "start": 104.36, "end": 107.88000000000001, "text": " then you'd get like, it's like wishing for more wishes.", "tokens": [50364, 821, 311, 257, 3840, 295, 819, 16679, 300, 4445, 341, 382, 257, 1310, 4471, 17, 11, 257, 31828, 979, 1429, 50624, 50624, 4471, 17, 11, 4974, 4471, 17, 11, 293, 439, 295, 729, 11, 436, 434, 1391, 452, 2954, 13, 50866, 50866, 759, 291, 645, 294, 257, 11029, 6077, 293, 291, 727, 787, 1565, 472, 2445, 11, 576, 309, 312, 4471, 17, 30, 51130, 51130, 467, 1391, 576, 312, 4471, 17, 13, 51212, 51212, 42494, 11, 286, 820, 1391, 584, 293, 550, 570, 291, 393, 764, 309, 281, 4445, 4471, 17, 293, 51508, 51508, 550, 291, 1116, 483, 411, 11, 309, 311, 411, 30049, 337, 544, 15065, 13, 51684, 51684, 467, 311, 733, 295, 18309, 13, 51798, 51798], "temperature": 0.0, "avg_logprob": -0.20134765307108562, "compression_ratio": 1.6743295019157087, "no_caption_prob": 5.507493824552512e-06}, {"id": 34, "seek": 8148, "start": 107.88000000000001, "end": 110.16, "text": " It's kind of cheating.", "tokens": [50364, 821, 311, 257, 3840, 295, 819, 16679, 300, 4445, 341, 382, 257, 1310, 4471, 17, 11, 257, 31828, 979, 1429, 50624, 50624, 4471, 17, 11, 4974, 4471, 17, 11, 293, 439, 295, 729, 11, 436, 434, 1391, 452, 2954, 13, 50866, 50866, 759, 291, 645, 294, 257, 11029, 6077, 293, 291, 727, 787, 1565, 472, 2445, 11, 576, 309, 312, 4471, 17, 30, 51130, 51130, 467, 1391, 576, 312, 4471, 17, 13, 51212, 51212, 42494, 11, 286, 820, 1391, 584, 293, 550, 570, 291, 393, 764, 309, 281, 4445, 4471, 17, 293, 51508, 51508, 550, 291, 1116, 483, 411, 11, 309, 311, 411, 30049, 337, 544, 15065, 13, 51684, 51684, 467, 311, 733, 295, 18309, 13, 51798, 51798], "temperature": 0.0, "avg_logprob": -0.20134765307108562, "compression_ratio": 1.6743295019157087, "no_caption_prob": 5.507493824552512e-06}, {"id": 35, "seek": 11016, "start": 110.16, "end": 113.96, "text": " But yeah, if I'm only allowed to take one, it would be map2.", "tokens": [50364, 583, 1338, 11, 498, 286, 478, 787, 4350, 281, 747, 472, 11, 309, 576, 312, 4471, 17, 13, 50554, 50554, 5490, 13, 50604, 50604, 865, 13, 50654, 50654, 286, 2041, 291, 576, 611, 528, 281, 1565, 512, 1412, 365, 291, 570, 4471, 17, 1553, 604, 1412, 50844, 50844, 1177, 380, 362, 604, 2158, 13, 51016, 51016, 663, 311, 2074, 13, 51066, 51066, 821, 311, 512, 1578, 4468, 510, 300, 393, 312, 1027, 466, 4002, 30819, 420, 746, 411, 300, 11, 457, 51258, 51258, 286, 393, 380, 652, 309, 13, 51400, 51400, 759, 309, 390, 1071, 2856, 11, 291, 1116, 1565, 13283, 420, 746, 411, 300, 13, 51554, 51554, 286, 500, 380, 458, 13, 51604, 51604, 1033, 13, 51654, 51654, 407, 2699, 76, 311, 11455, 5102, 13, 51802, 51802], "temperature": 0.0, "avg_logprob": -0.17785616654616135, "compression_ratio": 1.6431372549019607, "no_caption_prob": 4.029438514407957e-06}, {"id": 36, "seek": 11016, "start": 113.96, "end": 114.96, "text": " Nice.", "tokens": [50364, 583, 1338, 11, 498, 286, 478, 787, 4350, 281, 747, 472, 11, 309, 576, 312, 4471, 17, 13, 50554, 50554, 5490, 13, 50604, 50604, 865, 13, 50654, 50654, 286, 2041, 291, 576, 611, 528, 281, 1565, 512, 1412, 365, 291, 570, 4471, 17, 1553, 604, 1412, 50844, 50844, 1177, 380, 362, 604, 2158, 13, 51016, 51016, 663, 311, 2074, 13, 51066, 51066, 821, 311, 512, 1578, 4468, 510, 300, 393, 312, 1027, 466, 4002, 30819, 420, 746, 411, 300, 11, 457, 51258, 51258, 286, 393, 380, 652, 309, 13, 51400, 51400, 759, 309, 390, 1071, 2856, 11, 291, 1116, 1565, 13283, 420, 746, 411, 300, 13, 51554, 51554, 286, 500, 380, 458, 13, 51604, 51604, 1033, 13, 51654, 51654, 407, 2699, 76, 311, 11455, 5102, 13, 51802, 51802], "temperature": 0.0, "avg_logprob": -0.17785616654616135, "compression_ratio": 1.6431372549019607, "no_caption_prob": 4.029438514407957e-06}, {"id": 37, "seek": 11016, "start": 114.96, "end": 115.96, "text": " Yeah.", "tokens": [50364, 583, 1338, 11, 498, 286, 478, 787, 4350, 281, 747, 472, 11, 309, 576, 312, 4471, 17, 13, 50554, 50554, 5490, 13, 50604, 50604, 865, 13, 50654, 50654, 286, 2041, 291, 576, 611, 528, 281, 1565, 512, 1412, 365, 291, 570, 4471, 17, 1553, 604, 1412, 50844, 50844, 1177, 380, 362, 604, 2158, 13, 51016, 51016, 663, 311, 2074, 13, 51066, 51066, 821, 311, 512, 1578, 4468, 510, 300, 393, 312, 1027, 466, 4002, 30819, 420, 746, 411, 300, 11, 457, 51258, 51258, 286, 393, 380, 652, 309, 13, 51400, 51400, 759, 309, 390, 1071, 2856, 11, 291, 1116, 1565, 13283, 420, 746, 411, 300, 13, 51554, 51554, 286, 500, 380, 458, 13, 51604, 51604, 1033, 13, 51654, 51654, 407, 2699, 76, 311, 11455, 5102, 13, 51802, 51802], "temperature": 0.0, "avg_logprob": -0.17785616654616135, "compression_ratio": 1.6431372549019607, "no_caption_prob": 4.029438514407957e-06}, {"id": 38, "seek": 11016, "start": 115.96, "end": 119.75999999999999, "text": " I guess you would also want to bring some data with you because map2 without any data", "tokens": [50364, 583, 1338, 11, 498, 286, 478, 787, 4350, 281, 747, 472, 11, 309, 576, 312, 4471, 17, 13, 50554, 50554, 5490, 13, 50604, 50604, 865, 13, 50654, 50654, 286, 2041, 291, 576, 611, 528, 281, 1565, 512, 1412, 365, 291, 570, 4471, 17, 1553, 604, 1412, 50844, 50844, 1177, 380, 362, 604, 2158, 13, 51016, 51016, 663, 311, 2074, 13, 51066, 51066, 821, 311, 512, 1578, 4468, 510, 300, 393, 312, 1027, 466, 4002, 30819, 420, 746, 411, 300, 11, 457, 51258, 51258, 286, 393, 380, 652, 309, 13, 51400, 51400, 759, 309, 390, 1071, 2856, 11, 291, 1116, 1565, 13283, 420, 746, 411, 300, 13, 51554, 51554, 286, 500, 380, 458, 13, 51604, 51604, 1033, 13, 51654, 51654, 407, 2699, 76, 311, 11455, 5102, 13, 51802, 51802], "temperature": 0.0, "avg_logprob": -0.17785616654616135, "compression_ratio": 1.6431372549019607, "no_caption_prob": 4.029438514407957e-06}, {"id": 39, "seek": 11016, "start": 119.75999999999999, "end": 123.2, "text": " doesn't have any value.", "tokens": [50364, 583, 1338, 11, 498, 286, 478, 787, 4350, 281, 747, 472, 11, 309, 576, 312, 4471, 17, 13, 50554, 50554, 5490, 13, 50604, 50604, 865, 13, 50654, 50654, 286, 2041, 291, 576, 611, 528, 281, 1565, 512, 1412, 365, 291, 570, 4471, 17, 1553, 604, 1412, 50844, 50844, 1177, 380, 362, 604, 2158, 13, 51016, 51016, 663, 311, 2074, 13, 51066, 51066, 821, 311, 512, 1578, 4468, 510, 300, 393, 312, 1027, 466, 4002, 30819, 420, 746, 411, 300, 11, 457, 51258, 51258, 286, 393, 380, 652, 309, 13, 51400, 51400, 759, 309, 390, 1071, 2856, 11, 291, 1116, 1565, 13283, 420, 746, 411, 300, 13, 51554, 51554, 286, 500, 380, 458, 13, 51604, 51604, 1033, 13, 51654, 51654, 407, 2699, 76, 311, 11455, 5102, 13, 51802, 51802], "temperature": 0.0, "avg_logprob": -0.17785616654616135, "compression_ratio": 1.6431372549019607, "no_caption_prob": 4.029438514407957e-06}, {"id": 40, "seek": 11016, "start": 123.2, "end": 124.2, "text": " That's true.", "tokens": [50364, 583, 1338, 11, 498, 286, 478, 787, 4350, 281, 747, 472, 11, 309, 576, 312, 4471, 17, 13, 50554, 50554, 5490, 13, 50604, 50604, 865, 13, 50654, 50654, 286, 2041, 291, 576, 611, 528, 281, 1565, 512, 1412, 365, 291, 570, 4471, 17, 1553, 604, 1412, 50844, 50844, 1177, 380, 362, 604, 2158, 13, 51016, 51016, 663, 311, 2074, 13, 51066, 51066, 821, 311, 512, 1578, 4468, 510, 300, 393, 312, 1027, 466, 4002, 30819, 420, 746, 411, 300, 11, 457, 51258, 51258, 286, 393, 380, 652, 309, 13, 51400, 51400, 759, 309, 390, 1071, 2856, 11, 291, 1116, 1565, 13283, 420, 746, 411, 300, 13, 51554, 51554, 286, 500, 380, 458, 13, 51604, 51604, 1033, 13, 51654, 51654, 407, 2699, 76, 311, 11455, 5102, 13, 51802, 51802], "temperature": 0.0, "avg_logprob": -0.17785616654616135, "compression_ratio": 1.6431372549019607, "no_caption_prob": 4.029438514407957e-06}, {"id": 41, "seek": 11016, "start": 124.2, "end": 128.04, "text": " There's some bad pun here that can be made about date palms or something like that, but", "tokens": [50364, 583, 1338, 11, 498, 286, 478, 787, 4350, 281, 747, 472, 11, 309, 576, 312, 4471, 17, 13, 50554, 50554, 5490, 13, 50604, 50604, 865, 13, 50654, 50654, 286, 2041, 291, 576, 611, 528, 281, 1565, 512, 1412, 365, 291, 570, 4471, 17, 1553, 604, 1412, 50844, 50844, 1177, 380, 362, 604, 2158, 13, 51016, 51016, 663, 311, 2074, 13, 51066, 51066, 821, 311, 512, 1578, 4468, 510, 300, 393, 312, 1027, 466, 4002, 30819, 420, 746, 411, 300, 11, 457, 51258, 51258, 286, 393, 380, 652, 309, 13, 51400, 51400, 759, 309, 390, 1071, 2856, 11, 291, 1116, 1565, 13283, 420, 746, 411, 300, 13, 51554, 51554, 286, 500, 380, 458, 13, 51604, 51604, 1033, 13, 51654, 51654, 407, 2699, 76, 311, 11455, 5102, 13, 51802, 51802], "temperature": 0.0, "avg_logprob": -0.17785616654616135, "compression_ratio": 1.6431372549019607, "no_caption_prob": 4.029438514407957e-06}, {"id": 42, "seek": 11016, "start": 128.04, "end": 130.88, "text": " I can't make it.", "tokens": [50364, 583, 1338, 11, 498, 286, 478, 787, 4350, 281, 747, 472, 11, 309, 576, 312, 4471, 17, 13, 50554, 50554, 5490, 13, 50604, 50604, 865, 13, 50654, 50654, 286, 2041, 291, 576, 611, 528, 281, 1565, 512, 1412, 365, 291, 570, 4471, 17, 1553, 604, 1412, 50844, 50844, 1177, 380, 362, 604, 2158, 13, 51016, 51016, 663, 311, 2074, 13, 51066, 51066, 821, 311, 512, 1578, 4468, 510, 300, 393, 312, 1027, 466, 4002, 30819, 420, 746, 411, 300, 11, 457, 51258, 51258, 286, 393, 380, 652, 309, 13, 51400, 51400, 759, 309, 390, 1071, 2856, 11, 291, 1116, 1565, 13283, 420, 746, 411, 300, 13, 51554, 51554, 286, 500, 380, 458, 13, 51604, 51604, 1033, 13, 51654, 51654, 407, 2699, 76, 311, 11455, 5102, 13, 51802, 51802], "temperature": 0.0, "avg_logprob": -0.17785616654616135, "compression_ratio": 1.6431372549019607, "no_caption_prob": 4.029438514407957e-06}, {"id": 43, "seek": 11016, "start": 130.88, "end": 133.96, "text": " If it was another language, you'd bring rescue or something like that.", "tokens": [50364, 583, 1338, 11, 498, 286, 478, 787, 4350, 281, 747, 472, 11, 309, 576, 312, 4471, 17, 13, 50554, 50554, 5490, 13, 50604, 50604, 865, 13, 50654, 50654, 286, 2041, 291, 576, 611, 528, 281, 1565, 512, 1412, 365, 291, 570, 4471, 17, 1553, 604, 1412, 50844, 50844, 1177, 380, 362, 604, 2158, 13, 51016, 51016, 663, 311, 2074, 13, 51066, 51066, 821, 311, 512, 1578, 4468, 510, 300, 393, 312, 1027, 466, 4002, 30819, 420, 746, 411, 300, 11, 457, 51258, 51258, 286, 393, 380, 652, 309, 13, 51400, 51400, 759, 309, 390, 1071, 2856, 11, 291, 1116, 1565, 13283, 420, 746, 411, 300, 13, 51554, 51554, 286, 500, 380, 458, 13, 51604, 51604, 1033, 13, 51654, 51654, 407, 2699, 76, 311, 11455, 5102, 13, 51802, 51802], "temperature": 0.0, "avg_logprob": -0.17785616654616135, "compression_ratio": 1.6431372549019607, "no_caption_prob": 4.029438514407957e-06}, {"id": 44, "seek": 11016, "start": 133.96, "end": 134.96, "text": " I don't know.", "tokens": [50364, 583, 1338, 11, 498, 286, 478, 787, 4350, 281, 747, 472, 11, 309, 576, 312, 4471, 17, 13, 50554, 50554, 5490, 13, 50604, 50604, 865, 13, 50654, 50654, 286, 2041, 291, 576, 611, 528, 281, 1565, 512, 1412, 365, 291, 570, 4471, 17, 1553, 604, 1412, 50844, 50844, 1177, 380, 362, 604, 2158, 13, 51016, 51016, 663, 311, 2074, 13, 51066, 51066, 821, 311, 512, 1578, 4468, 510, 300, 393, 312, 1027, 466, 4002, 30819, 420, 746, 411, 300, 11, 457, 51258, 51258, 286, 393, 380, 652, 309, 13, 51400, 51400, 759, 309, 390, 1071, 2856, 11, 291, 1116, 1565, 13283, 420, 746, 411, 300, 13, 51554, 51554, 286, 500, 380, 458, 13, 51604, 51604, 1033, 13, 51654, 51654, 407, 2699, 76, 311, 11455, 5102, 13, 51802, 51802], "temperature": 0.0, "avg_logprob": -0.17785616654616135, "compression_ratio": 1.6431372549019607, "no_caption_prob": 4.029438514407957e-06}, {"id": 45, "seek": 11016, "start": 134.96, "end": 135.96, "text": " Okay.", "tokens": [50364, 583, 1338, 11, 498, 286, 478, 787, 4350, 281, 747, 472, 11, 309, 576, 312, 4471, 17, 13, 50554, 50554, 5490, 13, 50604, 50604, 865, 13, 50654, 50654, 286, 2041, 291, 576, 611, 528, 281, 1565, 512, 1412, 365, 291, 570, 4471, 17, 1553, 604, 1412, 50844, 50844, 1177, 380, 362, 604, 2158, 13, 51016, 51016, 663, 311, 2074, 13, 51066, 51066, 821, 311, 512, 1578, 4468, 510, 300, 393, 312, 1027, 466, 4002, 30819, 420, 746, 411, 300, 11, 457, 51258, 51258, 286, 393, 380, 652, 309, 13, 51400, 51400, 759, 309, 390, 1071, 2856, 11, 291, 1116, 1565, 13283, 420, 746, 411, 300, 13, 51554, 51554, 286, 500, 380, 458, 13, 51604, 51604, 1033, 13, 51654, 51654, 407, 2699, 76, 311, 11455, 5102, 13, 51802, 51802], "temperature": 0.0, "avg_logprob": -0.17785616654616135, "compression_ratio": 1.6431372549019607, "no_caption_prob": 4.029438514407957e-06}, {"id": 46, "seek": 11016, "start": 135.96, "end": 138.92, "text": " So Elm's universal pattern.", "tokens": [50364, 583, 1338, 11, 498, 286, 478, 787, 4350, 281, 747, 472, 11, 309, 576, 312, 4471, 17, 13, 50554, 50554, 5490, 13, 50604, 50604, 865, 13, 50654, 50654, 286, 2041, 291, 576, 611, 528, 281, 1565, 512, 1412, 365, 291, 570, 4471, 17, 1553, 604, 1412, 50844, 50844, 1177, 380, 362, 604, 2158, 13, 51016, 51016, 663, 311, 2074, 13, 51066, 51066, 821, 311, 512, 1578, 4468, 510, 300, 393, 312, 1027, 466, 4002, 30819, 420, 746, 411, 300, 11, 457, 51258, 51258, 286, 393, 380, 652, 309, 13, 51400, 51400, 759, 309, 390, 1071, 2856, 11, 291, 1116, 1565, 13283, 420, 746, 411, 300, 13, 51554, 51554, 286, 500, 380, 458, 13, 51604, 51604, 1033, 13, 51654, 51654, 407, 2699, 76, 311, 11455, 5102, 13, 51802, 51802], "temperature": 0.0, "avg_logprob": -0.17785616654616135, "compression_ratio": 1.6431372549019607, "no_caption_prob": 4.029438514407957e-06}, {"id": 47, "seek": 13892, "start": 138.92, "end": 144.92, "text": " So what exactly are we talking about here when we're talking about a universal pattern?", "tokens": [50364, 407, 437, 2293, 366, 321, 1417, 466, 510, 562, 321, 434, 1417, 466, 257, 11455, 5102, 30, 50664, 50664, 316, 11455, 5102, 337, 437, 30, 50782, 50782, 708, 360, 291, 764, 341, 5102, 281, 360, 30, 50888, 50888, 1079, 13, 50938, 50938, 286, 519, 264, 11455, 644, 295, 309, 307, 445, 264, 1558, 300, 4471, 17, 8198, 337, 3866, 819, 51272, 51272, 3467, 13, 51322, 51322, 467, 311, 767, 588, 2689, 281, 536, 819, 3467, 1293, 294, 4965, 293, 294, 2636, 3595, 15148, 51644, 51644, 12270, 570, 309, 311, 1270, 257, 4420, 2445, 13, 51762, 51762], "temperature": 0.0, "avg_logprob": -0.15553769286797972, "compression_ratio": 1.7173913043478262, "no_caption_prob": 2.684190576474066e-06}, {"id": 48, "seek": 13892, "start": 144.92, "end": 147.27999999999997, "text": " A universal pattern for what?", "tokens": [50364, 407, 437, 2293, 366, 321, 1417, 466, 510, 562, 321, 434, 1417, 466, 257, 11455, 5102, 30, 50664, 50664, 316, 11455, 5102, 337, 437, 30, 50782, 50782, 708, 360, 291, 764, 341, 5102, 281, 360, 30, 50888, 50888, 1079, 13, 50938, 50938, 286, 519, 264, 11455, 644, 295, 309, 307, 445, 264, 1558, 300, 4471, 17, 8198, 337, 3866, 819, 51272, 51272, 3467, 13, 51322, 51322, 467, 311, 767, 588, 2689, 281, 536, 819, 3467, 1293, 294, 4965, 293, 294, 2636, 3595, 15148, 51644, 51644, 12270, 570, 309, 311, 1270, 257, 4420, 2445, 13, 51762, 51762], "temperature": 0.0, "avg_logprob": -0.15553769286797972, "compression_ratio": 1.7173913043478262, "no_caption_prob": 2.684190576474066e-06}, {"id": 49, "seek": 13892, "start": 147.27999999999997, "end": 149.39999999999998, "text": " What do you use this pattern to do?", "tokens": [50364, 407, 437, 2293, 366, 321, 1417, 466, 510, 562, 321, 434, 1417, 466, 257, 11455, 5102, 30, 50664, 50664, 316, 11455, 5102, 337, 437, 30, 50782, 50782, 708, 360, 291, 764, 341, 5102, 281, 360, 30, 50888, 50888, 1079, 13, 50938, 50938, 286, 519, 264, 11455, 644, 295, 309, 307, 445, 264, 1558, 300, 4471, 17, 8198, 337, 3866, 819, 51272, 51272, 3467, 13, 51322, 51322, 467, 311, 767, 588, 2689, 281, 536, 819, 3467, 1293, 294, 4965, 293, 294, 2636, 3595, 15148, 51644, 51644, 12270, 570, 309, 311, 1270, 257, 4420, 2445, 13, 51762, 51762], "temperature": 0.0, "avg_logprob": -0.15553769286797972, "compression_ratio": 1.7173913043478262, "no_caption_prob": 2.684190576474066e-06}, {"id": 50, "seek": 13892, "start": 149.39999999999998, "end": 150.39999999999998, "text": " Yes.", "tokens": [50364, 407, 437, 2293, 366, 321, 1417, 466, 510, 562, 321, 434, 1417, 466, 257, 11455, 5102, 30, 50664, 50664, 316, 11455, 5102, 337, 437, 30, 50782, 50782, 708, 360, 291, 764, 341, 5102, 281, 360, 30, 50888, 50888, 1079, 13, 50938, 50938, 286, 519, 264, 11455, 644, 295, 309, 307, 445, 264, 1558, 300, 4471, 17, 8198, 337, 3866, 819, 51272, 51272, 3467, 13, 51322, 51322, 467, 311, 767, 588, 2689, 281, 536, 819, 3467, 1293, 294, 4965, 293, 294, 2636, 3595, 15148, 51644, 51644, 12270, 570, 309, 311, 1270, 257, 4420, 2445, 13, 51762, 51762], "temperature": 0.0, "avg_logprob": -0.15553769286797972, "compression_ratio": 1.7173913043478262, "no_caption_prob": 2.684190576474066e-06}, {"id": 51, "seek": 13892, "start": 150.39999999999998, "end": 157.07999999999998, "text": " I think the universal part of it is just the idea that map2 exists for multiple different", "tokens": [50364, 407, 437, 2293, 366, 321, 1417, 466, 510, 562, 321, 434, 1417, 466, 257, 11455, 5102, 30, 50664, 50664, 316, 11455, 5102, 337, 437, 30, 50782, 50782, 708, 360, 291, 764, 341, 5102, 281, 360, 30, 50888, 50888, 1079, 13, 50938, 50938, 286, 519, 264, 11455, 644, 295, 309, 307, 445, 264, 1558, 300, 4471, 17, 8198, 337, 3866, 819, 51272, 51272, 3467, 13, 51322, 51322, 467, 311, 767, 588, 2689, 281, 536, 819, 3467, 1293, 294, 4965, 293, 294, 2636, 3595, 15148, 51644, 51644, 12270, 570, 309, 311, 1270, 257, 4420, 2445, 13, 51762, 51762], "temperature": 0.0, "avg_logprob": -0.15553769286797972, "compression_ratio": 1.7173913043478262, "no_caption_prob": 2.684190576474066e-06}, {"id": 52, "seek": 13892, "start": 157.07999999999998, "end": 158.07999999999998, "text": " types.", "tokens": [50364, 407, 437, 2293, 366, 321, 1417, 466, 510, 562, 321, 434, 1417, 466, 257, 11455, 5102, 30, 50664, 50664, 316, 11455, 5102, 337, 437, 30, 50782, 50782, 708, 360, 291, 764, 341, 5102, 281, 360, 30, 50888, 50888, 1079, 13, 50938, 50938, 286, 519, 264, 11455, 644, 295, 309, 307, 445, 264, 1558, 300, 4471, 17, 8198, 337, 3866, 819, 51272, 51272, 3467, 13, 51322, 51322, 467, 311, 767, 588, 2689, 281, 536, 819, 3467, 1293, 294, 4965, 293, 294, 2636, 3595, 15148, 51644, 51644, 12270, 570, 309, 311, 1270, 257, 4420, 2445, 13, 51762, 51762], "temperature": 0.0, "avg_logprob": -0.15553769286797972, "compression_ratio": 1.7173913043478262, "no_caption_prob": 2.684190576474066e-06}, {"id": 53, "seek": 13892, "start": 158.07999999999998, "end": 164.51999999999998, "text": " It's actually very common to see different types both in core and in third party libraries", "tokens": [50364, 407, 437, 2293, 366, 321, 1417, 466, 510, 562, 321, 434, 1417, 466, 257, 11455, 5102, 30, 50664, 50664, 316, 11455, 5102, 337, 437, 30, 50782, 50782, 708, 360, 291, 764, 341, 5102, 281, 360, 30, 50888, 50888, 1079, 13, 50938, 50938, 286, 519, 264, 11455, 644, 295, 309, 307, 445, 264, 1558, 300, 4471, 17, 8198, 337, 3866, 819, 51272, 51272, 3467, 13, 51322, 51322, 467, 311, 767, 588, 2689, 281, 536, 819, 3467, 1293, 294, 4965, 293, 294, 2636, 3595, 15148, 51644, 51644, 12270, 570, 309, 311, 1270, 257, 4420, 2445, 13, 51762, 51762], "temperature": 0.0, "avg_logprob": -0.15553769286797972, "compression_ratio": 1.7173913043478262, "no_caption_prob": 2.684190576474066e-06}, {"id": 54, "seek": 13892, "start": 164.51999999999998, "end": 166.88, "text": " implemented because it's such a useful function.", "tokens": [50364, 407, 437, 2293, 366, 321, 1417, 466, 510, 562, 321, 434, 1417, 466, 257, 11455, 5102, 30, 50664, 50664, 316, 11455, 5102, 337, 437, 30, 50782, 50782, 708, 360, 291, 764, 341, 5102, 281, 360, 30, 50888, 50888, 1079, 13, 50938, 50938, 286, 519, 264, 11455, 644, 295, 309, 307, 445, 264, 1558, 300, 4471, 17, 8198, 337, 3866, 819, 51272, 51272, 3467, 13, 51322, 51322, 467, 311, 767, 588, 2689, 281, 536, 819, 3467, 1293, 294, 4965, 293, 294, 2636, 3595, 15148, 51644, 51644, 12270, 570, 309, 311, 1270, 257, 4420, 2445, 13, 51762, 51762], "temperature": 0.0, "avg_logprob": -0.15553769286797972, "compression_ratio": 1.7173913043478262, "no_caption_prob": 2.684190576474066e-06}, {"id": 55, "seek": 16688, "start": 166.88, "end": 174.0, "text": " And at its most basic level, I think of it as a way to combine two things of the same", "tokens": [50364, 400, 412, 1080, 881, 3875, 1496, 11, 286, 519, 295, 309, 382, 257, 636, 281, 10432, 732, 721, 295, 264, 912, 50720, 50720, 2010, 13, 50770, 50770, 407, 281, 312, 544, 9859, 11, 498, 321, 751, 466, 11, 584, 11, 1310, 11, 286, 362, 732, 1310, 4190, 300, 286, 50950, 50950, 576, 411, 281, 10432, 11, 293, 286, 362, 257, 732, 6770, 2445, 286, 576, 411, 281, 10432, 552, 365, 11, 51222, 51222, 4471, 17, 576, 312, 264, 636, 281, 360, 300, 13, 51315, 51315, 407, 286, 519, 295, 309, 382, 257, 636, 281, 584, 732, 6770, 2445, 11, 732, 815, 6446, 11, 577, 393, 286, 10432, 439, 51548, 51548, 729, 721, 1214, 30, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.1213356115050235, "compression_ratio": 1.908256880733945, "no_caption_prob": 3.0415762921620626e-06}, {"id": 56, "seek": 16688, "start": 174.0, "end": 175.0, "text": " type.", "tokens": [50364, 400, 412, 1080, 881, 3875, 1496, 11, 286, 519, 295, 309, 382, 257, 636, 281, 10432, 732, 721, 295, 264, 912, 50720, 50720, 2010, 13, 50770, 50770, 407, 281, 312, 544, 9859, 11, 498, 321, 751, 466, 11, 584, 11, 1310, 11, 286, 362, 732, 1310, 4190, 300, 286, 50950, 50950, 576, 411, 281, 10432, 11, 293, 286, 362, 257, 732, 6770, 2445, 286, 576, 411, 281, 10432, 552, 365, 11, 51222, 51222, 4471, 17, 576, 312, 264, 636, 281, 360, 300, 13, 51315, 51315, 407, 286, 519, 295, 309, 382, 257, 636, 281, 584, 732, 6770, 2445, 11, 732, 815, 6446, 11, 577, 393, 286, 10432, 439, 51548, 51548, 729, 721, 1214, 30, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.1213356115050235, "compression_ratio": 1.908256880733945, "no_caption_prob": 3.0415762921620626e-06}, {"id": 57, "seek": 16688, "start": 175.0, "end": 178.6, "text": " So to be more concrete, if we talk about, say, maybe, I have two maybe values that I", "tokens": [50364, 400, 412, 1080, 881, 3875, 1496, 11, 286, 519, 295, 309, 382, 257, 636, 281, 10432, 732, 721, 295, 264, 912, 50720, 50720, 2010, 13, 50770, 50770, 407, 281, 312, 544, 9859, 11, 498, 321, 751, 466, 11, 584, 11, 1310, 11, 286, 362, 732, 1310, 4190, 300, 286, 50950, 50950, 576, 411, 281, 10432, 11, 293, 286, 362, 257, 732, 6770, 2445, 286, 576, 411, 281, 10432, 552, 365, 11, 51222, 51222, 4471, 17, 576, 312, 264, 636, 281, 360, 300, 13, 51315, 51315, 407, 286, 519, 295, 309, 382, 257, 636, 281, 584, 732, 6770, 2445, 11, 732, 815, 6446, 11, 577, 393, 286, 10432, 439, 51548, 51548, 729, 721, 1214, 30, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.1213356115050235, "compression_ratio": 1.908256880733945, "no_caption_prob": 3.0415762921620626e-06}, {"id": 58, "seek": 16688, "start": 178.6, "end": 184.04, "text": " would like to combine, and I have a two argument function I would like to combine them with,", "tokens": [50364, 400, 412, 1080, 881, 3875, 1496, 11, 286, 519, 295, 309, 382, 257, 636, 281, 10432, 732, 721, 295, 264, 912, 50720, 50720, 2010, 13, 50770, 50770, 407, 281, 312, 544, 9859, 11, 498, 321, 751, 466, 11, 584, 11, 1310, 11, 286, 362, 732, 1310, 4190, 300, 286, 50950, 50950, 576, 411, 281, 10432, 11, 293, 286, 362, 257, 732, 6770, 2445, 286, 576, 411, 281, 10432, 552, 365, 11, 51222, 51222, 4471, 17, 576, 312, 264, 636, 281, 360, 300, 13, 51315, 51315, 407, 286, 519, 295, 309, 382, 257, 636, 281, 584, 732, 6770, 2445, 11, 732, 815, 6446, 11, 577, 393, 286, 10432, 439, 51548, 51548, 729, 721, 1214, 30, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.1213356115050235, "compression_ratio": 1.908256880733945, "no_caption_prob": 3.0415762921620626e-06}, {"id": 59, "seek": 16688, "start": 184.04, "end": 185.9, "text": " map2 would be the way to do that.", "tokens": [50364, 400, 412, 1080, 881, 3875, 1496, 11, 286, 519, 295, 309, 382, 257, 636, 281, 10432, 732, 721, 295, 264, 912, 50720, 50720, 2010, 13, 50770, 50770, 407, 281, 312, 544, 9859, 11, 498, 321, 751, 466, 11, 584, 11, 1310, 11, 286, 362, 732, 1310, 4190, 300, 286, 50950, 50950, 576, 411, 281, 10432, 11, 293, 286, 362, 257, 732, 6770, 2445, 286, 576, 411, 281, 10432, 552, 365, 11, 51222, 51222, 4471, 17, 576, 312, 264, 636, 281, 360, 300, 13, 51315, 51315, 407, 286, 519, 295, 309, 382, 257, 636, 281, 584, 732, 6770, 2445, 11, 732, 815, 6446, 11, 577, 393, 286, 10432, 439, 51548, 51548, 729, 721, 1214, 30, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.1213356115050235, "compression_ratio": 1.908256880733945, "no_caption_prob": 3.0415762921620626e-06}, {"id": 60, "seek": 16688, "start": 185.9, "end": 190.56, "text": " So I think of it as a way to say two argument function, two maybes, how can I combine all", "tokens": [50364, 400, 412, 1080, 881, 3875, 1496, 11, 286, 519, 295, 309, 382, 257, 636, 281, 10432, 732, 721, 295, 264, 912, 50720, 50720, 2010, 13, 50770, 50770, 407, 281, 312, 544, 9859, 11, 498, 321, 751, 466, 11, 584, 11, 1310, 11, 286, 362, 732, 1310, 4190, 300, 286, 50950, 50950, 576, 411, 281, 10432, 11, 293, 286, 362, 257, 732, 6770, 2445, 286, 576, 411, 281, 10432, 552, 365, 11, 51222, 51222, 4471, 17, 576, 312, 264, 636, 281, 360, 300, 13, 51315, 51315, 407, 286, 519, 295, 309, 382, 257, 636, 281, 584, 732, 6770, 2445, 11, 732, 815, 6446, 11, 577, 393, 286, 10432, 439, 51548, 51548, 729, 721, 1214, 30, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.1213356115050235, "compression_ratio": 1.908256880733945, "no_caption_prob": 3.0415762921620626e-06}, {"id": 61, "seek": 16688, "start": 190.56, "end": 191.88, "text": " those things together?", "tokens": [50364, 400, 412, 1080, 881, 3875, 1496, 11, 286, 519, 295, 309, 382, 257, 636, 281, 10432, 732, 721, 295, 264, 912, 50720, 50720, 2010, 13, 50770, 50770, 407, 281, 312, 544, 9859, 11, 498, 321, 751, 466, 11, 584, 11, 1310, 11, 286, 362, 732, 1310, 4190, 300, 286, 50950, 50950, 576, 411, 281, 10432, 11, 293, 286, 362, 257, 732, 6770, 2445, 286, 576, 411, 281, 10432, 552, 365, 11, 51222, 51222, 4471, 17, 576, 312, 264, 636, 281, 360, 300, 13, 51315, 51315, 407, 286, 519, 295, 309, 382, 257, 636, 281, 584, 732, 6770, 2445, 11, 732, 815, 6446, 11, 577, 393, 286, 10432, 439, 51548, 51548, 729, 721, 1214, 30, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.1213356115050235, "compression_ratio": 1.908256880733945, "no_caption_prob": 3.0415762921620626e-06}, {"id": 62, "seek": 19188, "start": 191.88, "end": 198.0, "text": " And then there's more functions as a map3, a map4, map5, et cetera, if you want to scale", "tokens": [50364, 400, 550, 456, 311, 544, 6828, 382, 257, 4471, 18, 11, 257, 4471, 19, 11, 4471, 20, 11, 1030, 11458, 11, 498, 291, 528, 281, 4373, 50670, 50670, 300, 5102, 493, 281, 257, 1045, 6770, 2445, 365, 1045, 815, 6446, 11, 420, 257, 1451, 6770, 2445, 50928, 50928, 293, 1451, 815, 6446, 11, 293, 370, 322, 13, 51016, 51016, 865, 13, 51066, 51066, 467, 311, 534, 1880, 570, 294, 264, 2699, 76, 1768, 11, 321, 500, 380, 3928, 281, 751, 466, 613, 51304, 51304, 721, 365, 613, 7719, 5261, 2115, 570, 309, 393, 312, 13181, 13, 51650, 51650], "temperature": 0.0, "avg_logprob": -0.1105387020111084, "compression_ratio": 1.6488888888888888, "no_caption_prob": 2.7968331778538413e-05}, {"id": 63, "seek": 19188, "start": 198.0, "end": 203.16, "text": " that pattern up to a three argument function with three maybes, or a four argument function", "tokens": [50364, 400, 550, 456, 311, 544, 6828, 382, 257, 4471, 18, 11, 257, 4471, 19, 11, 4471, 20, 11, 1030, 11458, 11, 498, 291, 528, 281, 4373, 50670, 50670, 300, 5102, 493, 281, 257, 1045, 6770, 2445, 365, 1045, 815, 6446, 11, 420, 257, 1451, 6770, 2445, 50928, 50928, 293, 1451, 815, 6446, 11, 293, 370, 322, 13, 51016, 51016, 865, 13, 51066, 51066, 467, 311, 534, 1880, 570, 294, 264, 2699, 76, 1768, 11, 321, 500, 380, 3928, 281, 751, 466, 613, 51304, 51304, 721, 365, 613, 7719, 5261, 2115, 570, 309, 393, 312, 13181, 13, 51650, 51650], "temperature": 0.0, "avg_logprob": -0.1105387020111084, "compression_ratio": 1.6488888888888888, "no_caption_prob": 2.7968331778538413e-05}, {"id": 64, "seek": 19188, "start": 203.16, "end": 204.92, "text": " and four maybes, and so on.", "tokens": [50364, 400, 550, 456, 311, 544, 6828, 382, 257, 4471, 18, 11, 257, 4471, 19, 11, 4471, 20, 11, 1030, 11458, 11, 498, 291, 528, 281, 4373, 50670, 50670, 300, 5102, 493, 281, 257, 1045, 6770, 2445, 365, 1045, 815, 6446, 11, 420, 257, 1451, 6770, 2445, 50928, 50928, 293, 1451, 815, 6446, 11, 293, 370, 322, 13, 51016, 51016, 865, 13, 51066, 51066, 467, 311, 534, 1880, 570, 294, 264, 2699, 76, 1768, 11, 321, 500, 380, 3928, 281, 751, 466, 613, 51304, 51304, 721, 365, 613, 7719, 5261, 2115, 570, 309, 393, 312, 13181, 13, 51650, 51650], "temperature": 0.0, "avg_logprob": -0.1105387020111084, "compression_ratio": 1.6488888888888888, "no_caption_prob": 2.7968331778538413e-05}, {"id": 65, "seek": 19188, "start": 204.92, "end": 205.92, "text": " Yeah.", "tokens": [50364, 400, 550, 456, 311, 544, 6828, 382, 257, 4471, 18, 11, 257, 4471, 19, 11, 4471, 20, 11, 1030, 11458, 11, 498, 291, 528, 281, 4373, 50670, 50670, 300, 5102, 493, 281, 257, 1045, 6770, 2445, 365, 1045, 815, 6446, 11, 420, 257, 1451, 6770, 2445, 50928, 50928, 293, 1451, 815, 6446, 11, 293, 370, 322, 13, 51016, 51016, 865, 13, 51066, 51066, 467, 311, 534, 1880, 570, 294, 264, 2699, 76, 1768, 11, 321, 500, 380, 3928, 281, 751, 466, 613, 51304, 51304, 721, 365, 613, 7719, 5261, 2115, 570, 309, 393, 312, 13181, 13, 51650, 51650], "temperature": 0.0, "avg_logprob": -0.1105387020111084, "compression_ratio": 1.6488888888888888, "no_caption_prob": 2.7968331778538413e-05}, {"id": 66, "seek": 19188, "start": 205.92, "end": 210.68, "text": " It's really interesting because in the Elm community, we don't tend to talk about these", "tokens": [50364, 400, 550, 456, 311, 544, 6828, 382, 257, 4471, 18, 11, 257, 4471, 19, 11, 4471, 20, 11, 1030, 11458, 11, 498, 291, 528, 281, 4373, 50670, 50670, 300, 5102, 493, 281, 257, 1045, 6770, 2445, 365, 1045, 815, 6446, 11, 420, 257, 1451, 6770, 2445, 50928, 50928, 293, 1451, 815, 6446, 11, 293, 370, 322, 13, 51016, 51016, 865, 13, 51066, 51066, 467, 311, 534, 1880, 570, 294, 264, 2699, 76, 1768, 11, 321, 500, 380, 3928, 281, 751, 466, 613, 51304, 51304, 721, 365, 613, 7719, 5261, 2115, 570, 309, 393, 312, 13181, 13, 51650, 51650], "temperature": 0.0, "avg_logprob": -0.1105387020111084, "compression_ratio": 1.6488888888888888, "no_caption_prob": 2.7968331778538413e-05}, {"id": 67, "seek": 19188, "start": 210.68, "end": 217.6, "text": " things with these category theory terms because it can be confusing.", "tokens": [50364, 400, 550, 456, 311, 544, 6828, 382, 257, 4471, 18, 11, 257, 4471, 19, 11, 4471, 20, 11, 1030, 11458, 11, 498, 291, 528, 281, 4373, 50670, 50670, 300, 5102, 493, 281, 257, 1045, 6770, 2445, 365, 1045, 815, 6446, 11, 420, 257, 1451, 6770, 2445, 50928, 50928, 293, 1451, 815, 6446, 11, 293, 370, 322, 13, 51016, 51016, 865, 13, 51066, 51066, 467, 311, 534, 1880, 570, 294, 264, 2699, 76, 1768, 11, 321, 500, 380, 3928, 281, 751, 466, 613, 51304, 51304, 721, 365, 613, 7719, 5261, 2115, 570, 309, 393, 312, 13181, 13, 51650, 51650], "temperature": 0.0, "avg_logprob": -0.1105387020111084, "compression_ratio": 1.6488888888888888, "no_caption_prob": 2.7968331778538413e-05}, {"id": 68, "seek": 21760, "start": 217.6, "end": 223.84, "text": " And often, you hear this like, all right, chapter 10 of this book on Haskell is when", "tokens": [50364, 400, 2049, 11, 291, 1568, 341, 411, 11, 439, 558, 11, 7187, 1266, 295, 341, 1446, 322, 8646, 43723, 307, 562, 50676, 50676, 291, 2721, 362, 5768, 1791, 264, 48032, 295, 7719, 5261, 10392, 11, 293, 550, 291, 50896, 50896, 2464, 428, 7751, 1002, 420, 746, 13, 51002, 51002, 400, 294, 2699, 76, 11, 321, 352, 264, 6182, 3513, 689, 498, 291, 483, 281, 613, 10392, 412, 439, 11, 309, 311, 51316, 51316, 934, 7187, 1266, 13, 51415, 51415, 407, 2171, 321, 352, 281, 264, 935, 300, 321, 500, 380, 528, 281, 829, 2115, 322, 613, 819, 10479, 51722, 51722], "temperature": 0.0, "avg_logprob": -0.1280340774386537, "compression_ratio": 1.657258064516129, "no_caption_prob": 1.2606687960214913e-05}, {"id": 69, "seek": 21760, "start": 223.84, "end": 228.24, "text": " you finally have gotten past the introductions of category theory concepts, and then you", "tokens": [50364, 400, 2049, 11, 291, 1568, 341, 411, 11, 439, 558, 11, 7187, 1266, 295, 341, 1446, 322, 8646, 43723, 307, 562, 50676, 50676, 291, 2721, 362, 5768, 1791, 264, 48032, 295, 7719, 5261, 10392, 11, 293, 550, 291, 50896, 50896, 2464, 428, 7751, 1002, 420, 746, 13, 51002, 51002, 400, 294, 2699, 76, 11, 321, 352, 264, 6182, 3513, 689, 498, 291, 483, 281, 613, 10392, 412, 439, 11, 309, 311, 51316, 51316, 934, 7187, 1266, 13, 51415, 51415, 407, 2171, 321, 352, 281, 264, 935, 300, 321, 500, 380, 528, 281, 829, 2115, 322, 613, 819, 10479, 51722, 51722], "temperature": 0.0, "avg_logprob": -0.1280340774386537, "compression_ratio": 1.657258064516129, "no_caption_prob": 1.2606687960214913e-05}, {"id": 70, "seek": 21760, "start": 228.24, "end": 230.35999999999999, "text": " write your hello world or something.", "tokens": [50364, 400, 2049, 11, 291, 1568, 341, 411, 11, 439, 558, 11, 7187, 1266, 295, 341, 1446, 322, 8646, 43723, 307, 562, 50676, 50676, 291, 2721, 362, 5768, 1791, 264, 48032, 295, 7719, 5261, 10392, 11, 293, 550, 291, 50896, 50896, 2464, 428, 7751, 1002, 420, 746, 13, 51002, 51002, 400, 294, 2699, 76, 11, 321, 352, 264, 6182, 3513, 689, 498, 291, 483, 281, 613, 10392, 412, 439, 11, 309, 311, 51316, 51316, 934, 7187, 1266, 13, 51415, 51415, 407, 2171, 321, 352, 281, 264, 935, 300, 321, 500, 380, 528, 281, 829, 2115, 322, 613, 819, 10479, 51722, 51722], "temperature": 0.0, "avg_logprob": -0.1280340774386537, "compression_ratio": 1.657258064516129, "no_caption_prob": 1.2606687960214913e-05}, {"id": 71, "seek": 21760, "start": 230.35999999999999, "end": 236.64, "text": " And in Elm, we go the opposite direction where if you get to these concepts at all, it's", "tokens": [50364, 400, 2049, 11, 291, 1568, 341, 411, 11, 439, 558, 11, 7187, 1266, 295, 341, 1446, 322, 8646, 43723, 307, 562, 50676, 50676, 291, 2721, 362, 5768, 1791, 264, 48032, 295, 7719, 5261, 10392, 11, 293, 550, 291, 50896, 50896, 2464, 428, 7751, 1002, 420, 746, 13, 51002, 51002, 400, 294, 2699, 76, 11, 321, 352, 264, 6182, 3513, 689, 498, 291, 483, 281, 613, 10392, 412, 439, 11, 309, 311, 51316, 51316, 934, 7187, 1266, 13, 51415, 51415, 407, 2171, 321, 352, 281, 264, 935, 300, 321, 500, 380, 528, 281, 829, 2115, 322, 613, 819, 10479, 51722, 51722], "temperature": 0.0, "avg_logprob": -0.1280340774386537, "compression_ratio": 1.657258064516129, "no_caption_prob": 1.2606687960214913e-05}, {"id": 72, "seek": 21760, "start": 236.64, "end": 238.62, "text": " after chapter 10.", "tokens": [50364, 400, 2049, 11, 291, 1568, 341, 411, 11, 439, 558, 11, 7187, 1266, 295, 341, 1446, 322, 8646, 43723, 307, 562, 50676, 50676, 291, 2721, 362, 5768, 1791, 264, 48032, 295, 7719, 5261, 10392, 11, 293, 550, 291, 50896, 50896, 2464, 428, 7751, 1002, 420, 746, 13, 51002, 51002, 400, 294, 2699, 76, 11, 321, 352, 264, 6182, 3513, 689, 498, 291, 483, 281, 613, 10392, 412, 439, 11, 309, 311, 51316, 51316, 934, 7187, 1266, 13, 51415, 51415, 407, 2171, 321, 352, 281, 264, 935, 300, 321, 500, 380, 528, 281, 829, 2115, 322, 613, 819, 10479, 51722, 51722], "temperature": 0.0, "avg_logprob": -0.1280340774386537, "compression_ratio": 1.657258064516129, "no_caption_prob": 1.2606687960214913e-05}, {"id": 73, "seek": 21760, "start": 238.62, "end": 244.76, "text": " So sometimes we go to the point that we don't want to put terms on these different categories", "tokens": [50364, 400, 2049, 11, 291, 1568, 341, 411, 11, 439, 558, 11, 7187, 1266, 295, 341, 1446, 322, 8646, 43723, 307, 562, 50676, 50676, 291, 2721, 362, 5768, 1791, 264, 48032, 295, 7719, 5261, 10392, 11, 293, 550, 291, 50896, 50896, 2464, 428, 7751, 1002, 420, 746, 13, 51002, 51002, 400, 294, 2699, 76, 11, 321, 352, 264, 6182, 3513, 689, 498, 291, 483, 281, 613, 10392, 412, 439, 11, 309, 311, 51316, 51316, 934, 7187, 1266, 13, 51415, 51415, 407, 2171, 321, 352, 281, 264, 935, 300, 321, 500, 380, 528, 281, 829, 2115, 322, 613, 819, 10479, 51722, 51722], "temperature": 0.0, "avg_logprob": -0.1280340774386537, "compression_ratio": 1.657258064516129, "no_caption_prob": 1.2606687960214913e-05}, {"id": 74, "seek": 24476, "start": 244.76, "end": 249.76, "text": " and concepts, but it is helpful to have some way to think about them somehow.", "tokens": [50364, 293, 10392, 11, 457, 309, 307, 4961, 281, 362, 512, 636, 281, 519, 466, 552, 6063, 13, 50614, 50614, 407, 2171, 286, 458, 561, 294, 300, 7719, 5261, 1002, 751, 466, 721, 294, 9002, 11, 300, 50946, 50946, 309, 311, 516, 1296, 613, 819, 13401, 295, 291, 362, 257, 2158, 300, 291, 393, 360, 746, 51219, 51219, 365, 293, 550, 746, 300, 311, 291, 393, 380, 2524, 11, 411, 257, 4974, 2158, 13, 51505, 51505, 759, 291, 362, 257, 4974, 19265, 295, 2010, 560, 11, 291, 393, 380, 352, 293, 2557, 300, 560, 293, 909, 257, 51830, 51830], "temperature": 0.0, "avg_logprob": -0.11387509346008301, "compression_ratio": 1.7672413793103448, "no_caption_prob": 9.51605943555478e-06}, {"id": 75, "seek": 24476, "start": 249.76, "end": 256.4, "text": " So sometimes I know people in that category theory world talk about things in boxes, that", "tokens": [50364, 293, 10392, 11, 457, 309, 307, 4961, 281, 362, 512, 636, 281, 519, 466, 552, 6063, 13, 50614, 50614, 407, 2171, 286, 458, 561, 294, 300, 7719, 5261, 1002, 751, 466, 721, 294, 9002, 11, 300, 50946, 50946, 309, 311, 516, 1296, 613, 819, 13401, 295, 291, 362, 257, 2158, 300, 291, 393, 360, 746, 51219, 51219, 365, 293, 550, 746, 300, 311, 291, 393, 380, 2524, 11, 411, 257, 4974, 2158, 13, 51505, 51505, 759, 291, 362, 257, 4974, 19265, 295, 2010, 560, 11, 291, 393, 380, 352, 293, 2557, 300, 560, 293, 909, 257, 51830, 51830], "temperature": 0.0, "avg_logprob": -0.11387509346008301, "compression_ratio": 1.7672413793103448, "no_caption_prob": 9.51605943555478e-06}, {"id": 76, "seek": 24476, "start": 256.4, "end": 261.86, "text": " it's going between these different worlds of you have a value that you can do something", "tokens": [50364, 293, 10392, 11, 457, 309, 307, 4961, 281, 362, 512, 636, 281, 519, 466, 552, 6063, 13, 50614, 50614, 407, 2171, 286, 458, 561, 294, 300, 7719, 5261, 1002, 751, 466, 721, 294, 9002, 11, 300, 50946, 50946, 309, 311, 516, 1296, 613, 819, 13401, 295, 291, 362, 257, 2158, 300, 291, 393, 360, 746, 51219, 51219, 365, 293, 550, 746, 300, 311, 291, 393, 380, 2524, 11, 411, 257, 4974, 2158, 13, 51505, 51505, 759, 291, 362, 257, 4974, 19265, 295, 2010, 560, 11, 291, 393, 380, 352, 293, 2557, 300, 560, 293, 909, 257, 51830, 51830], "temperature": 0.0, "avg_logprob": -0.11387509346008301, "compression_ratio": 1.7672413793103448, "no_caption_prob": 9.51605943555478e-06}, {"id": 77, "seek": 24476, "start": 261.86, "end": 267.58, "text": " with and then something that's you can't reach, like a random value.", "tokens": [50364, 293, 10392, 11, 457, 309, 307, 4961, 281, 362, 512, 636, 281, 519, 466, 552, 6063, 13, 50614, 50614, 407, 2171, 286, 458, 561, 294, 300, 7719, 5261, 1002, 751, 466, 721, 294, 9002, 11, 300, 50946, 50946, 309, 311, 516, 1296, 613, 819, 13401, 295, 291, 362, 257, 2158, 300, 291, 393, 360, 746, 51219, 51219, 365, 293, 550, 746, 300, 311, 291, 393, 380, 2524, 11, 411, 257, 4974, 2158, 13, 51505, 51505, 759, 291, 362, 257, 4974, 19265, 295, 2010, 560, 11, 291, 393, 380, 352, 293, 2557, 300, 560, 293, 909, 257, 51830, 51830], "temperature": 0.0, "avg_logprob": -0.11387509346008301, "compression_ratio": 1.7672413793103448, "no_caption_prob": 9.51605943555478e-06}, {"id": 78, "seek": 24476, "start": 267.58, "end": 274.08, "text": " If you have a random generator of type int, you can't go and touch that int and add a", "tokens": [50364, 293, 10392, 11, 457, 309, 307, 4961, 281, 362, 512, 636, 281, 519, 466, 552, 6063, 13, 50614, 50614, 407, 2171, 286, 458, 561, 294, 300, 7719, 5261, 1002, 751, 466, 721, 294, 9002, 11, 300, 50946, 50946, 309, 311, 516, 1296, 613, 819, 13401, 295, 291, 362, 257, 2158, 300, 291, 393, 360, 746, 51219, 51219, 365, 293, 550, 746, 300, 311, 291, 393, 380, 2524, 11, 411, 257, 4974, 2158, 13, 51505, 51505, 759, 291, 362, 257, 4974, 19265, 295, 2010, 560, 11, 291, 393, 380, 352, 293, 2557, 300, 560, 293, 909, 257, 51830, 51830], "temperature": 0.0, "avg_logprob": -0.11387509346008301, "compression_ratio": 1.7672413793103448, "no_caption_prob": 9.51605943555478e-06}, {"id": 79, "seek": 27408, "start": 274.08, "end": 276.24, "text": " number to it and multiply it.", "tokens": [50364, 1230, 281, 309, 293, 12972, 309, 13, 50472, 50472, 407, 291, 643, 281, 3079, 746, 281, 309, 294, 264, 2424, 13, 50718, 50718, 400, 300, 311, 733, 295, 437, 18350, 307, 3410, 671, 13, 50840, 50840, 467, 311, 411, 9906, 666, 264, 2424, 365, 257, 2445, 300, 370, 291, 362, 341, 12973, 300, 393, 12972, 51158, 51158, 420, 512, 2445, 300, 393, 747, 264, 8236, 2158, 295, 257, 1230, 13, 51347, 51347, 400, 291, 528, 281, 3079, 300, 2445, 281, 264, 2158, 300, 311, 294, 300, 2424, 11, 300, 4974, 19265, 13, 51562, 51562, 865, 11, 286, 2041, 456, 311, 257, 1326, 819, 4973, 5245, 291, 727, 764, 281, 519, 466, 437, 18350, 51843, 51843], "temperature": 0.0, "avg_logprob": -0.1059367432553544, "compression_ratio": 1.8122605363984674, "no_caption_prob": 4.495145276450785e-06}, {"id": 80, "seek": 27408, "start": 276.24, "end": 281.15999999999997, "text": " So you need to apply something to it in the box.", "tokens": [50364, 1230, 281, 309, 293, 12972, 309, 13, 50472, 50472, 407, 291, 643, 281, 3079, 746, 281, 309, 294, 264, 2424, 13, 50718, 50718, 400, 300, 311, 733, 295, 437, 18350, 307, 3410, 671, 13, 50840, 50840, 467, 311, 411, 9906, 666, 264, 2424, 365, 257, 2445, 300, 370, 291, 362, 341, 12973, 300, 393, 12972, 51158, 51158, 420, 512, 2445, 300, 393, 747, 264, 8236, 2158, 295, 257, 1230, 13, 51347, 51347, 400, 291, 528, 281, 3079, 300, 2445, 281, 264, 2158, 300, 311, 294, 300, 2424, 11, 300, 4974, 19265, 13, 51562, 51562, 865, 11, 286, 2041, 456, 311, 257, 1326, 819, 4973, 5245, 291, 727, 764, 281, 519, 466, 437, 18350, 51843, 51843], "temperature": 0.0, "avg_logprob": -0.1059367432553544, "compression_ratio": 1.8122605363984674, "no_caption_prob": 4.495145276450785e-06}, {"id": 81, "seek": 27408, "start": 281.15999999999997, "end": 283.59999999999997, "text": " And that's kind of what mapping is conceptually.", "tokens": [50364, 1230, 281, 309, 293, 12972, 309, 13, 50472, 50472, 407, 291, 643, 281, 3079, 746, 281, 309, 294, 264, 2424, 13, 50718, 50718, 400, 300, 311, 733, 295, 437, 18350, 307, 3410, 671, 13, 50840, 50840, 467, 311, 411, 9906, 666, 264, 2424, 365, 257, 2445, 300, 370, 291, 362, 341, 12973, 300, 393, 12972, 51158, 51158, 420, 512, 2445, 300, 393, 747, 264, 8236, 2158, 295, 257, 1230, 13, 51347, 51347, 400, 291, 528, 281, 3079, 300, 2445, 281, 264, 2158, 300, 311, 294, 300, 2424, 11, 300, 4974, 19265, 13, 51562, 51562, 865, 11, 286, 2041, 456, 311, 257, 1326, 819, 4973, 5245, 291, 727, 764, 281, 519, 466, 437, 18350, 51843, 51843], "temperature": 0.0, "avg_logprob": -0.1059367432553544, "compression_ratio": 1.8122605363984674, "no_caption_prob": 4.495145276450785e-06}, {"id": 82, "seek": 27408, "start": 283.59999999999997, "end": 289.96, "text": " It's like reaching into the box with a function that so you have this operator that can multiply", "tokens": [50364, 1230, 281, 309, 293, 12972, 309, 13, 50472, 50472, 407, 291, 643, 281, 3079, 746, 281, 309, 294, 264, 2424, 13, 50718, 50718, 400, 300, 311, 733, 295, 437, 18350, 307, 3410, 671, 13, 50840, 50840, 467, 311, 411, 9906, 666, 264, 2424, 365, 257, 2445, 300, 370, 291, 362, 341, 12973, 300, 393, 12972, 51158, 51158, 420, 512, 2445, 300, 393, 747, 264, 8236, 2158, 295, 257, 1230, 13, 51347, 51347, 400, 291, 528, 281, 3079, 300, 2445, 281, 264, 2158, 300, 311, 294, 300, 2424, 11, 300, 4974, 19265, 13, 51562, 51562, 865, 11, 286, 2041, 456, 311, 257, 1326, 819, 4973, 5245, 291, 727, 764, 281, 519, 466, 437, 18350, 51843, 51843], "temperature": 0.0, "avg_logprob": -0.1059367432553544, "compression_ratio": 1.8122605363984674, "no_caption_prob": 4.495145276450785e-06}, {"id": 83, "seek": 27408, "start": 289.96, "end": 293.74, "text": " or some function that can take the absolute value of a number.", "tokens": [50364, 1230, 281, 309, 293, 12972, 309, 13, 50472, 50472, 407, 291, 643, 281, 3079, 746, 281, 309, 294, 264, 2424, 13, 50718, 50718, 400, 300, 311, 733, 295, 437, 18350, 307, 3410, 671, 13, 50840, 50840, 467, 311, 411, 9906, 666, 264, 2424, 365, 257, 2445, 300, 370, 291, 362, 341, 12973, 300, 393, 12972, 51158, 51158, 420, 512, 2445, 300, 393, 747, 264, 8236, 2158, 295, 257, 1230, 13, 51347, 51347, 400, 291, 528, 281, 3079, 300, 2445, 281, 264, 2158, 300, 311, 294, 300, 2424, 11, 300, 4974, 19265, 13, 51562, 51562, 865, 11, 286, 2041, 456, 311, 257, 1326, 819, 4973, 5245, 291, 727, 764, 281, 519, 466, 437, 18350, 51843, 51843], "temperature": 0.0, "avg_logprob": -0.1059367432553544, "compression_ratio": 1.8122605363984674, "no_caption_prob": 4.495145276450785e-06}, {"id": 84, "seek": 27408, "start": 293.74, "end": 298.03999999999996, "text": " And you want to apply that function to the value that's in that box, that random generator.", "tokens": [50364, 1230, 281, 309, 293, 12972, 309, 13, 50472, 50472, 407, 291, 643, 281, 3079, 746, 281, 309, 294, 264, 2424, 13, 50718, 50718, 400, 300, 311, 733, 295, 437, 18350, 307, 3410, 671, 13, 50840, 50840, 467, 311, 411, 9906, 666, 264, 2424, 365, 257, 2445, 300, 370, 291, 362, 341, 12973, 300, 393, 12972, 51158, 51158, 420, 512, 2445, 300, 393, 747, 264, 8236, 2158, 295, 257, 1230, 13, 51347, 51347, 400, 291, 528, 281, 3079, 300, 2445, 281, 264, 2158, 300, 311, 294, 300, 2424, 11, 300, 4974, 19265, 13, 51562, 51562, 865, 11, 286, 2041, 456, 311, 257, 1326, 819, 4973, 5245, 291, 727, 764, 281, 519, 466, 437, 18350, 51843, 51843], "temperature": 0.0, "avg_logprob": -0.1059367432553544, "compression_ratio": 1.8122605363984674, "no_caption_prob": 4.495145276450785e-06}, {"id": 85, "seek": 27408, "start": 298.03999999999996, "end": 303.65999999999997, "text": " Yeah, I guess there's a few different mental models you could use to think about what mapping", "tokens": [50364, 1230, 281, 309, 293, 12972, 309, 13, 50472, 50472, 407, 291, 643, 281, 3079, 746, 281, 309, 294, 264, 2424, 13, 50718, 50718, 400, 300, 311, 733, 295, 437, 18350, 307, 3410, 671, 13, 50840, 50840, 467, 311, 411, 9906, 666, 264, 2424, 365, 257, 2445, 300, 370, 291, 362, 341, 12973, 300, 393, 12972, 51158, 51158, 420, 512, 2445, 300, 393, 747, 264, 8236, 2158, 295, 257, 1230, 13, 51347, 51347, 400, 291, 528, 281, 3079, 300, 2445, 281, 264, 2158, 300, 311, 294, 300, 2424, 11, 300, 4974, 19265, 13, 51562, 51562, 865, 11, 286, 2041, 456, 311, 257, 1326, 819, 4973, 5245, 291, 727, 764, 281, 519, 466, 437, 18350, 51843, 51843], "temperature": 0.0, "avg_logprob": -0.1059367432553544, "compression_ratio": 1.8122605363984674, "no_caption_prob": 4.495145276450785e-06}, {"id": 86, "seek": 30366, "start": 303.66, "end": 305.0, "text": " functions do.", "tokens": [50364, 6828, 360, 13, 50431, 50431, 286, 1116, 2835, 472, 3071, 11, 264, 1558, 295, 21928, 13, 50575, 50575, 3996, 472, 300, 311, 4098, 4961, 365, 584, 3467, 411, 1310, 257, 1874, 307, 264, 1558, 50859, 50859, 295, 12649, 278, 670, 341, 534, 2689, 5102, 300, 291, 1062, 362, 11, 597, 1062, 312, 14853, 4007, 51103, 51103, 257, 2158, 11, 3079, 257, 2445, 293, 550, 319, 86, 4007, 13, 51271, 51271, 407, 411, 257, 1310, 498, 291, 528, 281, 360, 364, 6916, 322, 309, 11, 291, 1062, 584, 11, 731, 11, 14853, 4007, 309, 498, 309, 311, 51501, 51501, 1974, 11, 360, 452, 6916, 11, 457, 570, 309, 1062, 406, 312, 1974, 11, 321, 643, 281, 2736, 1825, 13, 51739, 51739], "temperature": 0.0, "avg_logprob": -0.16118584304559427, "compression_ratio": 1.7195571955719557, "no_caption_prob": 1.2218980373290833e-05}, {"id": 87, "seek": 30366, "start": 305.0, "end": 307.88000000000005, "text": " I'd mentioned one earlier, the idea of combining.", "tokens": [50364, 6828, 360, 13, 50431, 50431, 286, 1116, 2835, 472, 3071, 11, 264, 1558, 295, 21928, 13, 50575, 50575, 3996, 472, 300, 311, 4098, 4961, 365, 584, 3467, 411, 1310, 257, 1874, 307, 264, 1558, 50859, 50859, 295, 12649, 278, 670, 341, 534, 2689, 5102, 300, 291, 1062, 362, 11, 597, 1062, 312, 14853, 4007, 51103, 51103, 257, 2158, 11, 3079, 257, 2445, 293, 550, 319, 86, 4007, 13, 51271, 51271, 407, 411, 257, 1310, 498, 291, 528, 281, 360, 364, 6916, 322, 309, 11, 291, 1062, 584, 11, 731, 11, 14853, 4007, 309, 498, 309, 311, 51501, 51501, 1974, 11, 360, 452, 6916, 11, 457, 570, 309, 1062, 406, 312, 1974, 11, 321, 643, 281, 2736, 1825, 13, 51739, 51739], "temperature": 0.0, "avg_logprob": -0.16118584304559427, "compression_ratio": 1.7195571955719557, "no_caption_prob": 1.2218980373290833e-05}, {"id": 88, "seek": 30366, "start": 307.88000000000005, "end": 313.56, "text": " Another one that's particularly helpful with say types like maybe a result is the idea", "tokens": [50364, 6828, 360, 13, 50431, 50431, 286, 1116, 2835, 472, 3071, 11, 264, 1558, 295, 21928, 13, 50575, 50575, 3996, 472, 300, 311, 4098, 4961, 365, 584, 3467, 411, 1310, 257, 1874, 307, 264, 1558, 50859, 50859, 295, 12649, 278, 670, 341, 534, 2689, 5102, 300, 291, 1062, 362, 11, 597, 1062, 312, 14853, 4007, 51103, 51103, 257, 2158, 11, 3079, 257, 2445, 293, 550, 319, 86, 4007, 13, 51271, 51271, 407, 411, 257, 1310, 498, 291, 528, 281, 360, 364, 6916, 322, 309, 11, 291, 1062, 584, 11, 731, 11, 14853, 4007, 309, 498, 309, 311, 51501, 51501, 1974, 11, 360, 452, 6916, 11, 457, 570, 309, 1062, 406, 312, 1974, 11, 321, 643, 281, 2736, 1825, 13, 51739, 51739], "temperature": 0.0, "avg_logprob": -0.16118584304559427, "compression_ratio": 1.7195571955719557, "no_caption_prob": 1.2218980373290833e-05}, {"id": 89, "seek": 30366, "start": 313.56, "end": 318.44000000000005, "text": " of abstracting over this really common pattern that you might have, which might be unwrap", "tokens": [50364, 6828, 360, 13, 50431, 50431, 286, 1116, 2835, 472, 3071, 11, 264, 1558, 295, 21928, 13, 50575, 50575, 3996, 472, 300, 311, 4098, 4961, 365, 584, 3467, 411, 1310, 257, 1874, 307, 264, 1558, 50859, 50859, 295, 12649, 278, 670, 341, 534, 2689, 5102, 300, 291, 1062, 362, 11, 597, 1062, 312, 14853, 4007, 51103, 51103, 257, 2158, 11, 3079, 257, 2445, 293, 550, 319, 86, 4007, 13, 51271, 51271, 407, 411, 257, 1310, 498, 291, 528, 281, 360, 364, 6916, 322, 309, 11, 291, 1062, 584, 11, 731, 11, 14853, 4007, 309, 498, 309, 311, 51501, 51501, 1974, 11, 360, 452, 6916, 11, 457, 570, 309, 1062, 406, 312, 1974, 11, 321, 643, 281, 2736, 1825, 13, 51739, 51739], "temperature": 0.0, "avg_logprob": -0.16118584304559427, "compression_ratio": 1.7195571955719557, "no_caption_prob": 1.2218980373290833e-05}, {"id": 90, "seek": 30366, "start": 318.44000000000005, "end": 321.8, "text": " a value, apply a function and then rewrap.", "tokens": [50364, 6828, 360, 13, 50431, 50431, 286, 1116, 2835, 472, 3071, 11, 264, 1558, 295, 21928, 13, 50575, 50575, 3996, 472, 300, 311, 4098, 4961, 365, 584, 3467, 411, 1310, 257, 1874, 307, 264, 1558, 50859, 50859, 295, 12649, 278, 670, 341, 534, 2689, 5102, 300, 291, 1062, 362, 11, 597, 1062, 312, 14853, 4007, 51103, 51103, 257, 2158, 11, 3079, 257, 2445, 293, 550, 319, 86, 4007, 13, 51271, 51271, 407, 411, 257, 1310, 498, 291, 528, 281, 360, 364, 6916, 322, 309, 11, 291, 1062, 584, 11, 731, 11, 14853, 4007, 309, 498, 309, 311, 51501, 51501, 1974, 11, 360, 452, 6916, 11, 457, 570, 309, 1062, 406, 312, 1974, 11, 321, 643, 281, 2736, 1825, 13, 51739, 51739], "temperature": 0.0, "avg_logprob": -0.16118584304559427, "compression_ratio": 1.7195571955719557, "no_caption_prob": 1.2218980373290833e-05}, {"id": 91, "seek": 30366, "start": 321.8, "end": 326.40000000000003, "text": " So like a maybe if you want to do an operation on it, you might say, well, unwrap it if it's", "tokens": [50364, 6828, 360, 13, 50431, 50431, 286, 1116, 2835, 472, 3071, 11, 264, 1558, 295, 21928, 13, 50575, 50575, 3996, 472, 300, 311, 4098, 4961, 365, 584, 3467, 411, 1310, 257, 1874, 307, 264, 1558, 50859, 50859, 295, 12649, 278, 670, 341, 534, 2689, 5102, 300, 291, 1062, 362, 11, 597, 1062, 312, 14853, 4007, 51103, 51103, 257, 2158, 11, 3079, 257, 2445, 293, 550, 319, 86, 4007, 13, 51271, 51271, 407, 411, 257, 1310, 498, 291, 528, 281, 360, 364, 6916, 322, 309, 11, 291, 1062, 584, 11, 731, 11, 14853, 4007, 309, 498, 309, 311, 51501, 51501, 1974, 11, 360, 452, 6916, 11, 457, 570, 309, 1062, 406, 312, 1974, 11, 321, 643, 281, 2736, 1825, 13, 51739, 51739], "temperature": 0.0, "avg_logprob": -0.16118584304559427, "compression_ratio": 1.7195571955719557, "no_caption_prob": 1.2218980373290833e-05}, {"id": 92, "seek": 30366, "start": 326.40000000000003, "end": 331.16, "text": " present, do my operation, but because it might not be present, we need to return nothing.", "tokens": [50364, 6828, 360, 13, 50431, 50431, 286, 1116, 2835, 472, 3071, 11, 264, 1558, 295, 21928, 13, 50575, 50575, 3996, 472, 300, 311, 4098, 4961, 365, 584, 3467, 411, 1310, 257, 1874, 307, 264, 1558, 50859, 50859, 295, 12649, 278, 670, 341, 534, 2689, 5102, 300, 291, 1062, 362, 11, 597, 1062, 312, 14853, 4007, 51103, 51103, 257, 2158, 11, 3079, 257, 2445, 293, 550, 319, 86, 4007, 13, 51271, 51271, 407, 411, 257, 1310, 498, 291, 528, 281, 360, 364, 6916, 322, 309, 11, 291, 1062, 584, 11, 731, 11, 14853, 4007, 309, 498, 309, 311, 51501, 51501, 1974, 11, 360, 452, 6916, 11, 457, 570, 309, 1062, 406, 312, 1974, 11, 321, 643, 281, 2736, 1825, 13, 51739, 51739], "temperature": 0.0, "avg_logprob": -0.16118584304559427, "compression_ratio": 1.7195571955719557, "no_caption_prob": 1.2218980373290833e-05}, {"id": 93, "seek": 33116, "start": 331.16, "end": 334.08000000000004, "text": " Therefore, we also need to rewrap at the end.", "tokens": [50364, 7504, 11, 321, 611, 643, 281, 319, 86, 4007, 412, 264, 917, 13, 50510, 50510, 400, 534, 264, 14853, 4007, 319, 86, 4007, 644, 307, 445, 257, 39228, 37008, 13, 50716, 50716, 492, 362, 281, 360, 341, 439, 264, 565, 13, 50789, 50789, 400, 370, 257, 4471, 2445, 4045, 505, 281, 12649, 670, 300, 5102, 13, 51051, 51051, 286, 519, 456, 311, 611, 1310, 257, 2020, 689, 291, 393, 519, 295, 18350, 6828, 382, 257, 636, 281, 51362, 51362, 1333, 295, 13799, 6828, 666, 2306, 300, 9651, 322, 428, 1333, 295, 46906, 2010, 13, 51694, 51694], "temperature": 0.0, "avg_logprob": -0.09356413082200654, "compression_ratio": 1.6681818181818182, "no_caption_prob": 2.4824694264680147e-06}, {"id": 94, "seek": 33116, "start": 334.08000000000004, "end": 338.20000000000005, "text": " And really the unwrap rewrap part is just a boilerplate.", "tokens": [50364, 7504, 11, 321, 611, 643, 281, 319, 86, 4007, 412, 264, 917, 13, 50510, 50510, 400, 534, 264, 14853, 4007, 319, 86, 4007, 644, 307, 445, 257, 39228, 37008, 13, 50716, 50716, 492, 362, 281, 360, 341, 439, 264, 565, 13, 50789, 50789, 400, 370, 257, 4471, 2445, 4045, 505, 281, 12649, 670, 300, 5102, 13, 51051, 51051, 286, 519, 456, 311, 611, 1310, 257, 2020, 689, 291, 393, 519, 295, 18350, 6828, 382, 257, 636, 281, 51362, 51362, 1333, 295, 13799, 6828, 666, 2306, 300, 9651, 322, 428, 1333, 295, 46906, 2010, 13, 51694, 51694], "temperature": 0.0, "avg_logprob": -0.09356413082200654, "compression_ratio": 1.6681818181818182, "no_caption_prob": 2.4824694264680147e-06}, {"id": 95, "seek": 33116, "start": 338.20000000000005, "end": 339.66, "text": " We have to do this all the time.", "tokens": [50364, 7504, 11, 321, 611, 643, 281, 319, 86, 4007, 412, 264, 917, 13, 50510, 50510, 400, 534, 264, 14853, 4007, 319, 86, 4007, 644, 307, 445, 257, 39228, 37008, 13, 50716, 50716, 492, 362, 281, 360, 341, 439, 264, 565, 13, 50789, 50789, 400, 370, 257, 4471, 2445, 4045, 505, 281, 12649, 670, 300, 5102, 13, 51051, 51051, 286, 519, 456, 311, 611, 1310, 257, 2020, 689, 291, 393, 519, 295, 18350, 6828, 382, 257, 636, 281, 51362, 51362, 1333, 295, 13799, 6828, 666, 2306, 300, 9651, 322, 428, 1333, 295, 46906, 2010, 13, 51694, 51694], "temperature": 0.0, "avg_logprob": -0.09356413082200654, "compression_ratio": 1.6681818181818182, "no_caption_prob": 2.4824694264680147e-06}, {"id": 96, "seek": 33116, "start": 339.66, "end": 344.90000000000003, "text": " And so a map function allows us to abstract over that pattern.", "tokens": [50364, 7504, 11, 321, 611, 643, 281, 319, 86, 4007, 412, 264, 917, 13, 50510, 50510, 400, 534, 264, 14853, 4007, 319, 86, 4007, 644, 307, 445, 257, 39228, 37008, 13, 50716, 50716, 492, 362, 281, 360, 341, 439, 264, 565, 13, 50789, 50789, 400, 370, 257, 4471, 2445, 4045, 505, 281, 12649, 670, 300, 5102, 13, 51051, 51051, 286, 519, 456, 311, 611, 1310, 257, 2020, 689, 291, 393, 519, 295, 18350, 6828, 382, 257, 636, 281, 51362, 51362, 1333, 295, 13799, 6828, 666, 2306, 300, 9651, 322, 428, 1333, 295, 46906, 2010, 13, 51694, 51694], "temperature": 0.0, "avg_logprob": -0.09356413082200654, "compression_ratio": 1.6681818181818182, "no_caption_prob": 2.4824694264680147e-06}, {"id": 97, "seek": 33116, "start": 344.90000000000003, "end": 351.12, "text": " I think there's also maybe a sense where you can think of mapping functions as a way to", "tokens": [50364, 7504, 11, 321, 611, 643, 281, 319, 86, 4007, 412, 264, 917, 13, 50510, 50510, 400, 534, 264, 14853, 4007, 319, 86, 4007, 644, 307, 445, 257, 39228, 37008, 13, 50716, 50716, 492, 362, 281, 360, 341, 439, 264, 565, 13, 50789, 50789, 400, 370, 257, 4471, 2445, 4045, 505, 281, 12649, 670, 300, 5102, 13, 51051, 51051, 286, 519, 456, 311, 611, 1310, 257, 2020, 689, 291, 393, 519, 295, 18350, 6828, 382, 257, 636, 281, 51362, 51362, 1333, 295, 13799, 6828, 666, 2306, 300, 9651, 322, 428, 1333, 295, 46906, 2010, 13, 51694, 51694], "temperature": 0.0, "avg_logprob": -0.09356413082200654, "compression_ratio": 1.6681818181818182, "no_caption_prob": 2.4824694264680147e-06}, {"id": 98, "seek": 33116, "start": 351.12, "end": 357.76000000000005, "text": " sort of translate functions into ones that operate on your sort of wrapper type.", "tokens": [50364, 7504, 11, 321, 611, 643, 281, 319, 86, 4007, 412, 264, 917, 13, 50510, 50510, 400, 534, 264, 14853, 4007, 319, 86, 4007, 644, 307, 445, 257, 39228, 37008, 13, 50716, 50716, 492, 362, 281, 360, 341, 439, 264, 565, 13, 50789, 50789, 400, 370, 257, 4471, 2445, 4045, 505, 281, 12649, 670, 300, 5102, 13, 51051, 51051, 286, 519, 456, 311, 611, 1310, 257, 2020, 689, 291, 393, 519, 295, 18350, 6828, 382, 257, 636, 281, 51362, 51362, 1333, 295, 13799, 6828, 666, 2306, 300, 9651, 322, 428, 1333, 295, 46906, 2010, 13, 51694, 51694], "temperature": 0.0, "avg_logprob": -0.09356413082200654, "compression_ratio": 1.6681818181818182, "no_caption_prob": 2.4824694264680147e-06}, {"id": 99, "seek": 35776, "start": 357.76, "end": 363.24, "text": " So I have a two argument function and I want to turn it from a function that works on integers", "tokens": [50364, 407, 286, 362, 257, 732, 6770, 2445, 293, 286, 528, 281, 1261, 309, 490, 257, 2445, 300, 1985, 322, 41674, 50638, 50638, 281, 257, 2445, 300, 1985, 322, 1310, 41674, 13, 50759, 50759, 286, 393, 764, 4471, 732, 281, 7620, 309, 13, 50898, 50898, 286, 519, 264, 10247, 11745, 9410, 1433, 456, 576, 312, 15798, 689, 291, 584, 286, 362, 51160, 51160, 341, 732, 6770, 2445, 13, 51234, 51234, 286, 486, 1333, 295, 5533, 309, 666, 264, 1002, 295, 815, 6446, 13, 51445, 51445, 407, 1338, 11, 729, 366, 1333, 295, 1045, 819, 2098, 295, 1237, 412, 264, 912, 3410, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.1270905721755255, "compression_ratio": 1.841409691629956, "no_caption_prob": 2.058034397123265e-06}, {"id": 100, "seek": 35776, "start": 363.24, "end": 365.65999999999997, "text": " to a function that works on maybe integers.", "tokens": [50364, 407, 286, 362, 257, 732, 6770, 2445, 293, 286, 528, 281, 1261, 309, 490, 257, 2445, 300, 1985, 322, 41674, 50638, 50638, 281, 257, 2445, 300, 1985, 322, 1310, 41674, 13, 50759, 50759, 286, 393, 764, 4471, 732, 281, 7620, 309, 13, 50898, 50898, 286, 519, 264, 10247, 11745, 9410, 1433, 456, 576, 312, 15798, 689, 291, 584, 286, 362, 51160, 51160, 341, 732, 6770, 2445, 13, 51234, 51234, 286, 486, 1333, 295, 5533, 309, 666, 264, 1002, 295, 815, 6446, 13, 51445, 51445, 407, 1338, 11, 729, 366, 1333, 295, 1045, 819, 2098, 295, 1237, 412, 264, 912, 3410, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.1270905721755255, "compression_ratio": 1.841409691629956, "no_caption_prob": 2.058034397123265e-06}, {"id": 101, "seek": 35776, "start": 365.65999999999997, "end": 368.44, "text": " I can use map two to convert it.", "tokens": [50364, 407, 286, 362, 257, 732, 6770, 2445, 293, 286, 528, 281, 1261, 309, 490, 257, 2445, 300, 1985, 322, 41674, 50638, 50638, 281, 257, 2445, 300, 1985, 322, 1310, 41674, 13, 50759, 50759, 286, 393, 764, 4471, 732, 281, 7620, 309, 13, 50898, 50898, 286, 519, 264, 10247, 11745, 9410, 1433, 456, 576, 312, 15798, 689, 291, 584, 286, 362, 51160, 51160, 341, 732, 6770, 2445, 13, 51234, 51234, 286, 486, 1333, 295, 5533, 309, 666, 264, 1002, 295, 815, 6446, 13, 51445, 51445, 407, 1338, 11, 729, 366, 1333, 295, 1045, 819, 2098, 295, 1237, 412, 264, 912, 3410, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.1270905721755255, "compression_ratio": 1.841409691629956, "no_caption_prob": 2.058034397123265e-06}, {"id": 102, "seek": 35776, "start": 368.44, "end": 373.68, "text": " I think the fancy functional programming term there would be lifting where you say I have", "tokens": [50364, 407, 286, 362, 257, 732, 6770, 2445, 293, 286, 528, 281, 1261, 309, 490, 257, 2445, 300, 1985, 322, 41674, 50638, 50638, 281, 257, 2445, 300, 1985, 322, 1310, 41674, 13, 50759, 50759, 286, 393, 764, 4471, 732, 281, 7620, 309, 13, 50898, 50898, 286, 519, 264, 10247, 11745, 9410, 1433, 456, 576, 312, 15798, 689, 291, 584, 286, 362, 51160, 51160, 341, 732, 6770, 2445, 13, 51234, 51234, 286, 486, 1333, 295, 5533, 309, 666, 264, 1002, 295, 815, 6446, 13, 51445, 51445, 407, 1338, 11, 729, 366, 1333, 295, 1045, 819, 2098, 295, 1237, 412, 264, 912, 3410, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.1270905721755255, "compression_ratio": 1.841409691629956, "no_caption_prob": 2.058034397123265e-06}, {"id": 103, "seek": 35776, "start": 373.68, "end": 375.15999999999997, "text": " this two argument function.", "tokens": [50364, 407, 286, 362, 257, 732, 6770, 2445, 293, 286, 528, 281, 1261, 309, 490, 257, 2445, 300, 1985, 322, 41674, 50638, 50638, 281, 257, 2445, 300, 1985, 322, 1310, 41674, 13, 50759, 50759, 286, 393, 764, 4471, 732, 281, 7620, 309, 13, 50898, 50898, 286, 519, 264, 10247, 11745, 9410, 1433, 456, 576, 312, 15798, 689, 291, 584, 286, 362, 51160, 51160, 341, 732, 6770, 2445, 13, 51234, 51234, 286, 486, 1333, 295, 5533, 309, 666, 264, 1002, 295, 815, 6446, 13, 51445, 51445, 407, 1338, 11, 729, 366, 1333, 295, 1045, 819, 2098, 295, 1237, 412, 264, 912, 3410, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.1270905721755255, "compression_ratio": 1.841409691629956, "no_caption_prob": 2.058034397123265e-06}, {"id": 104, "seek": 35776, "start": 375.15999999999997, "end": 379.38, "text": " I will sort of lift it into the world of maybes.", "tokens": [50364, 407, 286, 362, 257, 732, 6770, 2445, 293, 286, 528, 281, 1261, 309, 490, 257, 2445, 300, 1985, 322, 41674, 50638, 50638, 281, 257, 2445, 300, 1985, 322, 1310, 41674, 13, 50759, 50759, 286, 393, 764, 4471, 732, 281, 7620, 309, 13, 50898, 50898, 286, 519, 264, 10247, 11745, 9410, 1433, 456, 576, 312, 15798, 689, 291, 584, 286, 362, 51160, 51160, 341, 732, 6770, 2445, 13, 51234, 51234, 286, 486, 1333, 295, 5533, 309, 666, 264, 1002, 295, 815, 6446, 13, 51445, 51445, 407, 1338, 11, 729, 366, 1333, 295, 1045, 819, 2098, 295, 1237, 412, 264, 912, 3410, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.1270905721755255, "compression_ratio": 1.841409691629956, "no_caption_prob": 2.058034397123265e-06}, {"id": 105, "seek": 35776, "start": 379.38, "end": 382.76, "text": " So yeah, those are sort of three different ways of looking at the same concept.", "tokens": [50364, 407, 286, 362, 257, 732, 6770, 2445, 293, 286, 528, 281, 1261, 309, 490, 257, 2445, 300, 1985, 322, 41674, 50638, 50638, 281, 257, 2445, 300, 1985, 322, 1310, 41674, 13, 50759, 50759, 286, 393, 764, 4471, 732, 281, 7620, 309, 13, 50898, 50898, 286, 519, 264, 10247, 11745, 9410, 1433, 456, 576, 312, 15798, 689, 291, 584, 286, 362, 51160, 51160, 341, 732, 6770, 2445, 13, 51234, 51234, 286, 486, 1333, 295, 5533, 309, 666, 264, 1002, 295, 815, 6446, 13, 51445, 51445, 407, 1338, 11, 729, 366, 1333, 295, 1045, 819, 2098, 295, 1237, 412, 264, 912, 3410, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.1270905721755255, "compression_ratio": 1.841409691629956, "no_caption_prob": 2.058034397123265e-06}, {"id": 106, "seek": 38276, "start": 382.76, "end": 388.15999999999997, "text": " And I think sometimes it can be really hard to get a good grasp on what this concept is.", "tokens": [50364, 400, 286, 519, 2171, 309, 393, 312, 534, 1152, 281, 483, 257, 665, 21743, 322, 437, 341, 3410, 307, 13, 50634, 50634, 400, 370, 1419, 3866, 4973, 5245, 393, 312, 534, 4961, 13, 50866, 50866, 32281, 570, 512, 295, 552, 500, 380, 589, 1596, 382, 731, 337, 512, 3467, 13, 51104, 51104, 407, 291, 2835, 264, 1558, 295, 257, 2424, 3071, 13, 51228, 51228, 400, 286, 519, 300, 311, 588, 9859, 562, 1237, 412, 746, 411, 1310, 570, 309, 311, 411, 11, 51428, 51428, 2086, 11, 286, 362, 257, 1230, 293, 309, 311, 14226, 1854, 295, 309, 1310, 293, 286, 393, 14853, 4007, 309, 13, 51673, 51673, 663, 3417, 411, 257, 2424, 13, 51768, 51768], "temperature": 0.0, "avg_logprob": -0.12184395749344785, "compression_ratio": 1.6557971014492754, "no_caption_prob": 7.601997640449554e-05}, {"id": 107, "seek": 38276, "start": 388.15999999999997, "end": 392.8, "text": " And so having multiple mental models can be really helpful.", "tokens": [50364, 400, 286, 519, 2171, 309, 393, 312, 534, 1152, 281, 483, 257, 665, 21743, 322, 437, 341, 3410, 307, 13, 50634, 50634, 400, 370, 1419, 3866, 4973, 5245, 393, 312, 534, 4961, 13, 50866, 50866, 32281, 570, 512, 295, 552, 500, 380, 589, 1596, 382, 731, 337, 512, 3467, 13, 51104, 51104, 407, 291, 2835, 264, 1558, 295, 257, 2424, 3071, 13, 51228, 51228, 400, 286, 519, 300, 311, 588, 9859, 562, 1237, 412, 746, 411, 1310, 570, 309, 311, 411, 11, 51428, 51428, 2086, 11, 286, 362, 257, 1230, 293, 309, 311, 14226, 1854, 295, 309, 1310, 293, 286, 393, 14853, 4007, 309, 13, 51673, 51673, 663, 3417, 411, 257, 2424, 13, 51768, 51768], "temperature": 0.0, "avg_logprob": -0.12184395749344785, "compression_ratio": 1.6557971014492754, "no_caption_prob": 7.601997640449554e-05}, {"id": 108, "seek": 38276, "start": 392.8, "end": 397.56, "text": " Particularly because some of them don't work quite as well for some types.", "tokens": [50364, 400, 286, 519, 2171, 309, 393, 312, 534, 1152, 281, 483, 257, 665, 21743, 322, 437, 341, 3410, 307, 13, 50634, 50634, 400, 370, 1419, 3866, 4973, 5245, 393, 312, 534, 4961, 13, 50866, 50866, 32281, 570, 512, 295, 552, 500, 380, 589, 1596, 382, 731, 337, 512, 3467, 13, 51104, 51104, 407, 291, 2835, 264, 1558, 295, 257, 2424, 3071, 13, 51228, 51228, 400, 286, 519, 300, 311, 588, 9859, 562, 1237, 412, 746, 411, 1310, 570, 309, 311, 411, 11, 51428, 51428, 2086, 11, 286, 362, 257, 1230, 293, 309, 311, 14226, 1854, 295, 309, 1310, 293, 286, 393, 14853, 4007, 309, 13, 51673, 51673, 663, 3417, 411, 257, 2424, 13, 51768, 51768], "temperature": 0.0, "avg_logprob": -0.12184395749344785, "compression_ratio": 1.6557971014492754, "no_caption_prob": 7.601997640449554e-05}, {"id": 109, "seek": 38276, "start": 397.56, "end": 400.03999999999996, "text": " So you mentioned the idea of a box earlier.", "tokens": [50364, 400, 286, 519, 2171, 309, 393, 312, 534, 1152, 281, 483, 257, 665, 21743, 322, 437, 341, 3410, 307, 13, 50634, 50634, 400, 370, 1419, 3866, 4973, 5245, 393, 312, 534, 4961, 13, 50866, 50866, 32281, 570, 512, 295, 552, 500, 380, 589, 1596, 382, 731, 337, 512, 3467, 13, 51104, 51104, 407, 291, 2835, 264, 1558, 295, 257, 2424, 3071, 13, 51228, 51228, 400, 286, 519, 300, 311, 588, 9859, 562, 1237, 412, 746, 411, 1310, 570, 309, 311, 411, 11, 51428, 51428, 2086, 11, 286, 362, 257, 1230, 293, 309, 311, 14226, 1854, 295, 309, 1310, 293, 286, 393, 14853, 4007, 309, 13, 51673, 51673, 663, 3417, 411, 257, 2424, 13, 51768, 51768], "temperature": 0.0, "avg_logprob": -0.12184395749344785, "compression_ratio": 1.6557971014492754, "no_caption_prob": 7.601997640449554e-05}, {"id": 110, "seek": 38276, "start": 400.03999999999996, "end": 404.03999999999996, "text": " And I think that's very concrete when looking at something like maybe because it's like,", "tokens": [50364, 400, 286, 519, 2171, 309, 393, 312, 534, 1152, 281, 483, 257, 665, 21743, 322, 437, 341, 3410, 307, 13, 50634, 50634, 400, 370, 1419, 3866, 4973, 5245, 393, 312, 534, 4961, 13, 50866, 50866, 32281, 570, 512, 295, 552, 500, 380, 589, 1596, 382, 731, 337, 512, 3467, 13, 51104, 51104, 407, 291, 2835, 264, 1558, 295, 257, 2424, 3071, 13, 51228, 51228, 400, 286, 519, 300, 311, 588, 9859, 562, 1237, 412, 746, 411, 1310, 570, 309, 311, 411, 11, 51428, 51428, 2086, 11, 286, 362, 257, 1230, 293, 309, 311, 14226, 1854, 295, 309, 1310, 293, 286, 393, 14853, 4007, 309, 13, 51673, 51673, 663, 3417, 411, 257, 2424, 13, 51768, 51768], "temperature": 0.0, "avg_logprob": -0.12184395749344785, "compression_ratio": 1.6557971014492754, "no_caption_prob": 7.601997640449554e-05}, {"id": 111, "seek": 38276, "start": 404.03999999999996, "end": 408.94, "text": " yes, I have a number and it's wrapped inside of it maybe and I can unwrap it.", "tokens": [50364, 400, 286, 519, 2171, 309, 393, 312, 534, 1152, 281, 483, 257, 665, 21743, 322, 437, 341, 3410, 307, 13, 50634, 50634, 400, 370, 1419, 3866, 4973, 5245, 393, 312, 534, 4961, 13, 50866, 50866, 32281, 570, 512, 295, 552, 500, 380, 589, 1596, 382, 731, 337, 512, 3467, 13, 51104, 51104, 407, 291, 2835, 264, 1558, 295, 257, 2424, 3071, 13, 51228, 51228, 400, 286, 519, 300, 311, 588, 9859, 562, 1237, 412, 746, 411, 1310, 570, 309, 311, 411, 11, 51428, 51428, 2086, 11, 286, 362, 257, 1230, 293, 309, 311, 14226, 1854, 295, 309, 1310, 293, 286, 393, 14853, 4007, 309, 13, 51673, 51673, 663, 3417, 411, 257, 2424, 13, 51768, 51768], "temperature": 0.0, "avg_logprob": -0.12184395749344785, "compression_ratio": 1.6557971014492754, "no_caption_prob": 7.601997640449554e-05}, {"id": 112, "seek": 38276, "start": 408.94, "end": 410.84, "text": " That feels like a box.", "tokens": [50364, 400, 286, 519, 2171, 309, 393, 312, 534, 1152, 281, 483, 257, 665, 21743, 322, 437, 341, 3410, 307, 13, 50634, 50634, 400, 370, 1419, 3866, 4973, 5245, 393, 312, 534, 4961, 13, 50866, 50866, 32281, 570, 512, 295, 552, 500, 380, 589, 1596, 382, 731, 337, 512, 3467, 13, 51104, 51104, 407, 291, 2835, 264, 1558, 295, 257, 2424, 3071, 13, 51228, 51228, 400, 286, 519, 300, 311, 588, 9859, 562, 1237, 412, 746, 411, 1310, 570, 309, 311, 411, 11, 51428, 51428, 2086, 11, 286, 362, 257, 1230, 293, 309, 311, 14226, 1854, 295, 309, 1310, 293, 286, 393, 14853, 4007, 309, 13, 51673, 51673, 663, 3417, 411, 257, 2424, 13, 51768, 51768], "temperature": 0.0, "avg_logprob": -0.12184395749344785, "compression_ratio": 1.6557971014492754, "no_caption_prob": 7.601997640449554e-05}, {"id": 113, "seek": 41084, "start": 410.84, "end": 419.32, "text": " Something like random isn't quite a box in that it's a future value that you might get.", "tokens": [50364, 6595, 411, 4974, 1943, 380, 1596, 257, 2424, 294, 300, 309, 311, 257, 2027, 2158, 300, 291, 1062, 483, 13, 50788, 50788, 1743, 257, 979, 19866, 307, 733, 295, 2531, 13, 50940, 50940, 467, 311, 43602, 294, 257, 636, 13, 51138, 51138, 6595, 486, 312, 10144, 281, 309, 294, 264, 2027, 293, 562, 309, 311, 10144, 11, 291, 7019, 309, 294, 746, 13, 51386, 51386, 286, 1352, 300, 1310, 309, 311, 1391, 472, 295, 264, 3571, 3467, 281, 764, 281, 1223, 512, 295, 51708, 51708], "temperature": 0.0, "avg_logprob": -0.14323778262083559, "compression_ratio": 1.625615763546798, "no_caption_prob": 7.18321098247543e-06}, {"id": 114, "seek": 41084, "start": 419.32, "end": 422.35999999999996, "text": " Like a decoder is kind of similar.", "tokens": [50364, 6595, 411, 4974, 1943, 380, 1596, 257, 2424, 294, 300, 309, 311, 257, 2027, 2158, 300, 291, 1062, 483, 13, 50788, 50788, 1743, 257, 979, 19866, 307, 733, 295, 2531, 13, 50940, 50940, 467, 311, 43602, 294, 257, 636, 13, 51138, 51138, 6595, 486, 312, 10144, 281, 309, 294, 264, 2027, 293, 562, 309, 311, 10144, 11, 291, 7019, 309, 294, 746, 13, 51386, 51386, 286, 1352, 300, 1310, 309, 311, 1391, 472, 295, 264, 3571, 3467, 281, 764, 281, 1223, 512, 295, 51708, 51708], "temperature": 0.0, "avg_logprob": -0.14323778262083559, "compression_ratio": 1.625615763546798, "no_caption_prob": 7.18321098247543e-06}, {"id": 115, "seek": 41084, "start": 422.35999999999996, "end": 426.32, "text": " It's mailbox in a way.", "tokens": [50364, 6595, 411, 4974, 1943, 380, 1596, 257, 2424, 294, 300, 309, 311, 257, 2027, 2158, 300, 291, 1062, 483, 13, 50788, 50788, 1743, 257, 979, 19866, 307, 733, 295, 2531, 13, 50940, 50940, 467, 311, 43602, 294, 257, 636, 13, 51138, 51138, 6595, 486, 312, 10144, 281, 309, 294, 264, 2027, 293, 562, 309, 311, 10144, 11, 291, 7019, 309, 294, 746, 13, 51386, 51386, 286, 1352, 300, 1310, 309, 311, 1391, 472, 295, 264, 3571, 3467, 281, 764, 281, 1223, 512, 295, 51708, 51708], "temperature": 0.0, "avg_logprob": -0.14323778262083559, "compression_ratio": 1.625615763546798, "no_caption_prob": 7.18321098247543e-06}, {"id": 116, "seek": 41084, "start": 426.32, "end": 431.28, "text": " Something will be delivered to it in the future and when it's delivered, you wrap it in something.", "tokens": [50364, 6595, 411, 4974, 1943, 380, 1596, 257, 2424, 294, 300, 309, 311, 257, 2027, 2158, 300, 291, 1062, 483, 13, 50788, 50788, 1743, 257, 979, 19866, 307, 733, 295, 2531, 13, 50940, 50940, 467, 311, 43602, 294, 257, 636, 13, 51138, 51138, 6595, 486, 312, 10144, 281, 309, 294, 264, 2027, 293, 562, 309, 311, 10144, 11, 291, 7019, 309, 294, 746, 13, 51386, 51386, 286, 1352, 300, 1310, 309, 311, 1391, 472, 295, 264, 3571, 3467, 281, 764, 281, 1223, 512, 295, 51708, 51708], "temperature": 0.0, "avg_logprob": -0.14323778262083559, "compression_ratio": 1.625615763546798, "no_caption_prob": 7.18321098247543e-06}, {"id": 117, "seek": 41084, "start": 431.28, "end": 437.71999999999997, "text": " I found that maybe it's probably one of the easier types to use to understand some of", "tokens": [50364, 6595, 411, 4974, 1943, 380, 1596, 257, 2424, 294, 300, 309, 311, 257, 2027, 2158, 300, 291, 1062, 483, 13, 50788, 50788, 1743, 257, 979, 19866, 307, 733, 295, 2531, 13, 50940, 50940, 467, 311, 43602, 294, 257, 636, 13, 51138, 51138, 6595, 486, 312, 10144, 281, 309, 294, 264, 2027, 293, 562, 309, 311, 10144, 11, 291, 7019, 309, 294, 746, 13, 51386, 51386, 286, 1352, 300, 1310, 309, 311, 1391, 472, 295, 264, 3571, 3467, 281, 764, 281, 1223, 512, 295, 51708, 51708], "temperature": 0.0, "avg_logprob": -0.14323778262083559, "compression_ratio": 1.625615763546798, "no_caption_prob": 7.18321098247543e-06}, {"id": 118, "seek": 43772, "start": 437.72, "end": 442.52000000000004, "text": " these concepts because it's really concrete.", "tokens": [50364, 613, 10392, 570, 309, 311, 534, 9859, 13, 50604, 50604, 4534, 2699, 76, 8849, 366, 4963, 365, 577, 300, 2010, 1985, 13, 50766, 50766, 400, 291, 393, 49473, 1757, 309, 293, 291, 393, 5102, 2995, 322, 309, 11, 360, 257, 1389, 6114, 293, 536, 51025, 51025, 437, 311, 1854, 412, 604, 935, 13, 51135, 51135, 400, 291, 393, 33433, 43704, 428, 1065, 4471, 11, 4471, 732, 11, 4471, 1045, 11, 1030, 11458, 11, 1238, 3612, 294, 257, 636, 51430, 51430, 300, 291, 2809, 380, 337, 584, 264, 4974, 19265, 13, 51629, 51629, 663, 311, 257, 665, 935, 13, 51692, 51692], "temperature": 0.0, "avg_logprob": -0.16858549679026885, "compression_ratio": 1.6212765957446809, "no_caption_prob": 1.98323014046764e-05}, {"id": 119, "seek": 43772, "start": 442.52000000000004, "end": 445.76000000000005, "text": " Most Elm developers are familiar with how that type works.", "tokens": [50364, 613, 10392, 570, 309, 311, 534, 9859, 13, 50604, 50604, 4534, 2699, 76, 8849, 366, 4963, 365, 577, 300, 2010, 1985, 13, 50766, 50766, 400, 291, 393, 49473, 1757, 309, 293, 291, 393, 5102, 2995, 322, 309, 11, 360, 257, 1389, 6114, 293, 536, 51025, 51025, 437, 311, 1854, 412, 604, 935, 13, 51135, 51135, 400, 291, 393, 33433, 43704, 428, 1065, 4471, 11, 4471, 732, 11, 4471, 1045, 11, 1030, 11458, 11, 1238, 3612, 294, 257, 636, 51430, 51430, 300, 291, 2809, 380, 337, 584, 264, 4974, 19265, 13, 51629, 51629, 663, 311, 257, 665, 935, 13, 51692, 51692], "temperature": 0.0, "avg_logprob": -0.16858549679026885, "compression_ratio": 1.6212765957446809, "no_caption_prob": 1.98323014046764e-05}, {"id": 120, "seek": 43772, "start": 445.76000000000005, "end": 450.94000000000005, "text": " And you can deconstruct it and you can pattern match on it, do a case expression and see", "tokens": [50364, 613, 10392, 570, 309, 311, 534, 9859, 13, 50604, 50604, 4534, 2699, 76, 8849, 366, 4963, 365, 577, 300, 2010, 1985, 13, 50766, 50766, 400, 291, 393, 49473, 1757, 309, 293, 291, 393, 5102, 2995, 322, 309, 11, 360, 257, 1389, 6114, 293, 536, 51025, 51025, 437, 311, 1854, 412, 604, 935, 13, 51135, 51135, 400, 291, 393, 33433, 43704, 428, 1065, 4471, 11, 4471, 732, 11, 4471, 1045, 11, 1030, 11458, 11, 1238, 3612, 294, 257, 636, 51430, 51430, 300, 291, 2809, 380, 337, 584, 264, 4974, 19265, 13, 51629, 51629, 663, 311, 257, 665, 935, 13, 51692, 51692], "temperature": 0.0, "avg_logprob": -0.16858549679026885, "compression_ratio": 1.6212765957446809, "no_caption_prob": 1.98323014046764e-05}, {"id": 121, "seek": 43772, "start": 450.94000000000005, "end": 453.14000000000004, "text": " what's inside at any point.", "tokens": [50364, 613, 10392, 570, 309, 311, 534, 9859, 13, 50604, 50604, 4534, 2699, 76, 8849, 366, 4963, 365, 577, 300, 2010, 1985, 13, 50766, 50766, 400, 291, 393, 49473, 1757, 309, 293, 291, 393, 5102, 2995, 322, 309, 11, 360, 257, 1389, 6114, 293, 536, 51025, 51025, 437, 311, 1854, 412, 604, 935, 13, 51135, 51135, 400, 291, 393, 33433, 43704, 428, 1065, 4471, 11, 4471, 732, 11, 4471, 1045, 11, 1030, 11458, 11, 1238, 3612, 294, 257, 636, 51430, 51430, 300, 291, 2809, 380, 337, 584, 264, 4974, 19265, 13, 51629, 51629, 663, 311, 257, 665, 935, 13, 51692, 51692], "temperature": 0.0, "avg_logprob": -0.16858549679026885, "compression_ratio": 1.6212765957446809, "no_caption_prob": 1.98323014046764e-05}, {"id": 122, "seek": 43772, "start": 453.14000000000004, "end": 459.04, "text": " And you can reimplement your own map, map two, map three, et cetera, pretty easily in a way", "tokens": [50364, 613, 10392, 570, 309, 311, 534, 9859, 13, 50604, 50604, 4534, 2699, 76, 8849, 366, 4963, 365, 577, 300, 2010, 1985, 13, 50766, 50766, 400, 291, 393, 49473, 1757, 309, 293, 291, 393, 5102, 2995, 322, 309, 11, 360, 257, 1389, 6114, 293, 536, 51025, 51025, 437, 311, 1854, 412, 604, 935, 13, 51135, 51135, 400, 291, 393, 33433, 43704, 428, 1065, 4471, 11, 4471, 732, 11, 4471, 1045, 11, 1030, 11458, 11, 1238, 3612, 294, 257, 636, 51430, 51430, 300, 291, 2809, 380, 337, 584, 264, 4974, 19265, 13, 51629, 51629, 663, 311, 257, 665, 935, 13, 51692, 51692], "temperature": 0.0, "avg_logprob": -0.16858549679026885, "compression_ratio": 1.6212765957446809, "no_caption_prob": 1.98323014046764e-05}, {"id": 123, "seek": 43772, "start": 459.04, "end": 463.02000000000004, "text": " that you couldn't for say the random generator.", "tokens": [50364, 613, 10392, 570, 309, 311, 534, 9859, 13, 50604, 50604, 4534, 2699, 76, 8849, 366, 4963, 365, 577, 300, 2010, 1985, 13, 50766, 50766, 400, 291, 393, 49473, 1757, 309, 293, 291, 393, 5102, 2995, 322, 309, 11, 360, 257, 1389, 6114, 293, 536, 51025, 51025, 437, 311, 1854, 412, 604, 935, 13, 51135, 51135, 400, 291, 393, 33433, 43704, 428, 1065, 4471, 11, 4471, 732, 11, 4471, 1045, 11, 1030, 11458, 11, 1238, 3612, 294, 257, 636, 51430, 51430, 300, 291, 2809, 380, 337, 584, 264, 4974, 19265, 13, 51629, 51629, 663, 311, 257, 665, 935, 13, 51692, 51692], "temperature": 0.0, "avg_logprob": -0.16858549679026885, "compression_ratio": 1.6212765957446809, "no_caption_prob": 1.98323014046764e-05}, {"id": 124, "seek": 43772, "start": 463.02000000000004, "end": 464.28000000000003, "text": " That's a good point.", "tokens": [50364, 613, 10392, 570, 309, 311, 534, 9859, 13, 50604, 50604, 4534, 2699, 76, 8849, 366, 4963, 365, 577, 300, 2010, 1985, 13, 50766, 50766, 400, 291, 393, 49473, 1757, 309, 293, 291, 393, 5102, 2995, 322, 309, 11, 360, 257, 1389, 6114, 293, 536, 51025, 51025, 437, 311, 1854, 412, 604, 935, 13, 51135, 51135, 400, 291, 393, 33433, 43704, 428, 1065, 4471, 11, 4471, 732, 11, 4471, 1045, 11, 1030, 11458, 11, 1238, 3612, 294, 257, 636, 51430, 51430, 300, 291, 2809, 380, 337, 584, 264, 4974, 19265, 13, 51629, 51629, 663, 311, 257, 665, 935, 13, 51692, 51692], "temperature": 0.0, "avg_logprob": -0.16858549679026885, "compression_ratio": 1.6212765957446809, "no_caption_prob": 1.98323014046764e-05}, {"id": 125, "seek": 46428, "start": 464.28, "end": 470.71999999999997, "text": " Yeah, because the actual internals under the hood of the thing you're mapping can get a", "tokens": [50364, 865, 11, 570, 264, 3539, 2154, 1124, 833, 264, 13376, 295, 264, 551, 291, 434, 18350, 393, 483, 257, 50686, 50686, 688, 544, 12649, 813, 365, 257, 1310, 13, 50839, 50839, 1018, 291, 584, 11, 309, 311, 281, 264, 935, 689, 309, 311, 37900, 281, 445, 360, 257, 1389, 5629, 439, 670, 264, 1081, 51156, 51156, 365, 815, 6446, 13, 51250, 51250, 286, 915, 300, 472, 551, 300, 286, 574, 484, 337, 2171, 307, 498, 257, 1389, 5629, 307, 2737, 51553, 51553], "temperature": 0.0, "avg_logprob": -0.09375851494925362, "compression_ratio": 1.6019900497512438, "no_caption_prob": 7.253885269165039e-05}, {"id": 126, "seek": 46428, "start": 470.71999999999997, "end": 473.78, "text": " lot more abstract than with a maybe.", "tokens": [50364, 865, 11, 570, 264, 3539, 2154, 1124, 833, 264, 13376, 295, 264, 551, 291, 434, 18350, 393, 483, 257, 50686, 50686, 688, 544, 12649, 813, 365, 257, 1310, 13, 50839, 50839, 1018, 291, 584, 11, 309, 311, 281, 264, 935, 689, 309, 311, 37900, 281, 445, 360, 257, 1389, 5629, 439, 670, 264, 1081, 51156, 51156, 365, 815, 6446, 13, 51250, 51250, 286, 915, 300, 472, 551, 300, 286, 574, 484, 337, 2171, 307, 498, 257, 1389, 5629, 307, 2737, 51553, 51553], "temperature": 0.0, "avg_logprob": -0.09375851494925362, "compression_ratio": 1.6019900497512438, "no_caption_prob": 7.253885269165039e-05}, {"id": 127, "seek": 46428, "start": 473.78, "end": 480.11999999999995, "text": " As you say, it's to the point where it's tempting to just do a case statement all over the place", "tokens": [50364, 865, 11, 570, 264, 3539, 2154, 1124, 833, 264, 13376, 295, 264, 551, 291, 434, 18350, 393, 483, 257, 50686, 50686, 688, 544, 12649, 813, 365, 257, 1310, 13, 50839, 50839, 1018, 291, 584, 11, 309, 311, 281, 264, 935, 689, 309, 311, 37900, 281, 445, 360, 257, 1389, 5629, 439, 670, 264, 1081, 51156, 51156, 365, 815, 6446, 13, 51250, 51250, 286, 915, 300, 472, 551, 300, 286, 574, 484, 337, 2171, 307, 498, 257, 1389, 5629, 307, 2737, 51553, 51553], "temperature": 0.0, "avg_logprob": -0.09375851494925362, "compression_ratio": 1.6019900497512438, "no_caption_prob": 7.253885269165039e-05}, {"id": 128, "seek": 46428, "start": 480.11999999999995, "end": 482.0, "text": " with maybes.", "tokens": [50364, 865, 11, 570, 264, 3539, 2154, 1124, 833, 264, 13376, 295, 264, 551, 291, 434, 18350, 393, 483, 257, 50686, 50686, 688, 544, 12649, 813, 365, 257, 1310, 13, 50839, 50839, 1018, 291, 584, 11, 309, 311, 281, 264, 935, 689, 309, 311, 37900, 281, 445, 360, 257, 1389, 5629, 439, 670, 264, 1081, 51156, 51156, 365, 815, 6446, 13, 51250, 51250, 286, 915, 300, 472, 551, 300, 286, 574, 484, 337, 2171, 307, 498, 257, 1389, 5629, 307, 2737, 51553, 51553], "temperature": 0.0, "avg_logprob": -0.09375851494925362, "compression_ratio": 1.6019900497512438, "no_caption_prob": 7.253885269165039e-05}, {"id": 129, "seek": 46428, "start": 482.0, "end": 488.05999999999995, "text": " I find that one thing that I look out for sometimes is if a case statement is happening", "tokens": [50364, 865, 11, 570, 264, 3539, 2154, 1124, 833, 264, 13376, 295, 264, 551, 291, 434, 18350, 393, 483, 257, 50686, 50686, 688, 544, 12649, 813, 365, 257, 1310, 13, 50839, 50839, 1018, 291, 584, 11, 309, 311, 281, 264, 935, 689, 309, 311, 37900, 281, 445, 360, 257, 1389, 5629, 439, 670, 264, 1081, 51156, 51156, 365, 815, 6446, 13, 51250, 51250, 286, 915, 300, 472, 551, 300, 286, 574, 484, 337, 2171, 307, 498, 257, 1389, 5629, 307, 2737, 51553, 51553], "temperature": 0.0, "avg_logprob": -0.09375851494925362, "compression_ratio": 1.6019900497512438, "no_caption_prob": 7.253885269165039e-05}, {"id": 130, "seek": 48806, "start": 488.06, "end": 494.8, "text": " too often and if functions are dealing with these wrapped types or these, you know, if", "tokens": [50364, 886, 2049, 293, 498, 6828, 366, 6260, 365, 613, 14226, 3467, 420, 613, 11, 291, 458, 11, 498, 50701, 50701, 291, 362, 257, 2445, 300, 311, 6260, 365, 4974, 19265, 3467, 420, 1310, 3467, 2831, 813, 51011, 51011, 560, 82, 420, 2035, 14217, 1412, 2010, 11, 576, 291, 584, 300, 300, 311, 5101, 257, 4316, 30, 51269, 51269, 1743, 286, 2049, 519, 498, 286, 362, 257, 688, 295, 1389, 12363, 926, 815, 6446, 420, 498, 286, 478, 8437, 51569, 51569, 613, 14226, 4190, 11, 721, 3928, 281, 589, 534, 9594, 562, 291, 362, 411, 6828, 51818, 51818], "temperature": 0.0, "avg_logprob": -0.11017274374913688, "compression_ratio": 1.8033472803347281, "no_caption_prob": 2.014500933000818e-05}, {"id": 131, "seek": 48806, "start": 494.8, "end": 501.0, "text": " you have a function that's dealing with random generator types or maybe types rather than", "tokens": [50364, 886, 2049, 293, 498, 6828, 366, 6260, 365, 613, 14226, 3467, 420, 613, 11, 291, 458, 11, 498, 50701, 50701, 291, 362, 257, 2445, 300, 311, 6260, 365, 4974, 19265, 3467, 420, 1310, 3467, 2831, 813, 51011, 51011, 560, 82, 420, 2035, 14217, 1412, 2010, 11, 576, 291, 584, 300, 300, 311, 5101, 257, 4316, 30, 51269, 51269, 1743, 286, 2049, 519, 498, 286, 362, 257, 688, 295, 1389, 12363, 926, 815, 6446, 420, 498, 286, 478, 8437, 51569, 51569, 613, 14226, 4190, 11, 721, 3928, 281, 589, 534, 9594, 562, 291, 362, 411, 6828, 51818, 51818], "temperature": 0.0, "avg_logprob": -0.11017274374913688, "compression_ratio": 1.8033472803347281, "no_caption_prob": 2.014500933000818e-05}, {"id": 132, "seek": 48806, "start": 501.0, "end": 506.16, "text": " ints or whatever underlying data type, would you say that that's generally a smell?", "tokens": [50364, 886, 2049, 293, 498, 6828, 366, 6260, 365, 613, 14226, 3467, 420, 613, 11, 291, 458, 11, 498, 50701, 50701, 291, 362, 257, 2445, 300, 311, 6260, 365, 4974, 19265, 3467, 420, 1310, 3467, 2831, 813, 51011, 51011, 560, 82, 420, 2035, 14217, 1412, 2010, 11, 576, 291, 584, 300, 300, 311, 5101, 257, 4316, 30, 51269, 51269, 1743, 286, 2049, 519, 498, 286, 362, 257, 688, 295, 1389, 12363, 926, 815, 6446, 420, 498, 286, 478, 8437, 51569, 51569, 613, 14226, 4190, 11, 721, 3928, 281, 589, 534, 9594, 562, 291, 362, 411, 6828, 51818, 51818], "temperature": 0.0, "avg_logprob": -0.11017274374913688, "compression_ratio": 1.8033472803347281, "no_caption_prob": 2.014500933000818e-05}, {"id": 133, "seek": 48806, "start": 506.16, "end": 512.16, "text": " Like I often think if I have a lot of case statements around maybes or if I'm passing", "tokens": [50364, 886, 2049, 293, 498, 6828, 366, 6260, 365, 613, 14226, 3467, 420, 613, 11, 291, 458, 11, 498, 50701, 50701, 291, 362, 257, 2445, 300, 311, 6260, 365, 4974, 19265, 3467, 420, 1310, 3467, 2831, 813, 51011, 51011, 560, 82, 420, 2035, 14217, 1412, 2010, 11, 576, 291, 584, 300, 300, 311, 5101, 257, 4316, 30, 51269, 51269, 1743, 286, 2049, 519, 498, 286, 362, 257, 688, 295, 1389, 12363, 926, 815, 6446, 420, 498, 286, 478, 8437, 51569, 51569, 613, 14226, 4190, 11, 721, 3928, 281, 589, 534, 9594, 562, 291, 362, 411, 6828, 51818, 51818], "temperature": 0.0, "avg_logprob": -0.11017274374913688, "compression_ratio": 1.8033472803347281, "no_caption_prob": 2.014500933000818e-05}, {"id": 134, "seek": 48806, "start": 512.16, "end": 517.14, "text": " these wrapped values, things tend to work really nicely when you have like functions", "tokens": [50364, 886, 2049, 293, 498, 6828, 366, 6260, 365, 613, 14226, 3467, 420, 613, 11, 291, 458, 11, 498, 50701, 50701, 291, 362, 257, 2445, 300, 311, 6260, 365, 4974, 19265, 3467, 420, 1310, 3467, 2831, 813, 51011, 51011, 560, 82, 420, 2035, 14217, 1412, 2010, 11, 576, 291, 584, 300, 300, 311, 5101, 257, 4316, 30, 51269, 51269, 1743, 286, 2049, 519, 498, 286, 362, 257, 688, 295, 1389, 12363, 926, 815, 6446, 420, 498, 286, 478, 8437, 51569, 51569, 613, 14226, 4190, 11, 721, 3928, 281, 589, 534, 9594, 562, 291, 362, 411, 6828, 51818, 51818], "temperature": 0.0, "avg_logprob": -0.11017274374913688, "compression_ratio": 1.8033472803347281, "no_caption_prob": 2.014500933000818e-05}, {"id": 135, "seek": 51714, "start": 517.14, "end": 523.24, "text": " that deal with sort of vanilla values and then you apply these map functions to combine", "tokens": [50364, 300, 2028, 365, 1333, 295, 17528, 4190, 293, 550, 291, 3079, 613, 4471, 6828, 281, 10432, 50669, 50669, 552, 13, 50719, 50719, 286, 576, 3986, 11, 2086, 13, 50769, 50769, 682, 2674, 11, 264, 636, 286, 3928, 281, 2464, 3089, 293, 2699, 76, 3089, 294, 1729, 11, 286, 411, 281, 4994, 51115, 51115, 437, 286, 1062, 818, 9819, 278, 3089, 420, 17990, 3089, 490, 884, 3089, 13, 51325, 51325, 407, 498, 286, 645, 281, 584, 1389, 322, 257, 1310, 11, 286, 576, 362, 472, 2445, 300, 3331, 293, 14770, 51661, 51661], "temperature": 0.0, "avg_logprob": -0.0932351081602035, "compression_ratio": 1.6359447004608294, "no_caption_prob": 2.8573044801305514e-06}, {"id": 136, "seek": 51714, "start": 523.24, "end": 524.24, "text": " them.", "tokens": [50364, 300, 2028, 365, 1333, 295, 17528, 4190, 293, 550, 291, 3079, 613, 4471, 6828, 281, 10432, 50669, 50669, 552, 13, 50719, 50719, 286, 576, 3986, 11, 2086, 13, 50769, 50769, 682, 2674, 11, 264, 636, 286, 3928, 281, 2464, 3089, 293, 2699, 76, 3089, 294, 1729, 11, 286, 411, 281, 4994, 51115, 51115, 437, 286, 1062, 818, 9819, 278, 3089, 420, 17990, 3089, 490, 884, 3089, 13, 51325, 51325, 407, 498, 286, 645, 281, 584, 1389, 322, 257, 1310, 11, 286, 576, 362, 472, 2445, 300, 3331, 293, 14770, 51661, 51661], "temperature": 0.0, "avg_logprob": -0.0932351081602035, "compression_ratio": 1.6359447004608294, "no_caption_prob": 2.8573044801305514e-06}, {"id": 137, "seek": 51714, "start": 524.24, "end": 525.24, "text": " I would agree, yes.", "tokens": [50364, 300, 2028, 365, 1333, 295, 17528, 4190, 293, 550, 291, 3079, 613, 4471, 6828, 281, 10432, 50669, 50669, 552, 13, 50719, 50719, 286, 576, 3986, 11, 2086, 13, 50769, 50769, 682, 2674, 11, 264, 636, 286, 3928, 281, 2464, 3089, 293, 2699, 76, 3089, 294, 1729, 11, 286, 411, 281, 4994, 51115, 51115, 437, 286, 1062, 818, 9819, 278, 3089, 420, 17990, 3089, 490, 884, 3089, 13, 51325, 51325, 407, 498, 286, 645, 281, 584, 1389, 322, 257, 1310, 11, 286, 576, 362, 472, 2445, 300, 3331, 293, 14770, 51661, 51661], "temperature": 0.0, "avg_logprob": -0.0932351081602035, "compression_ratio": 1.6359447004608294, "no_caption_prob": 2.8573044801305514e-06}, {"id": 138, "seek": 51714, "start": 525.24, "end": 532.16, "text": " In general, the way I tend to write code and Elm code in particular, I like to separate", "tokens": [50364, 300, 2028, 365, 1333, 295, 17528, 4190, 293, 550, 291, 3079, 613, 4471, 6828, 281, 10432, 50669, 50669, 552, 13, 50719, 50719, 286, 576, 3986, 11, 2086, 13, 50769, 50769, 682, 2674, 11, 264, 636, 286, 3928, 281, 2464, 3089, 293, 2699, 76, 3089, 294, 1729, 11, 286, 411, 281, 4994, 51115, 51115, 437, 286, 1062, 818, 9819, 278, 3089, 420, 17990, 3089, 490, 884, 3089, 13, 51325, 51325, 407, 498, 286, 645, 281, 584, 1389, 322, 257, 1310, 11, 286, 576, 362, 472, 2445, 300, 3331, 293, 14770, 51661, 51661], "temperature": 0.0, "avg_logprob": -0.0932351081602035, "compression_ratio": 1.6359447004608294, "no_caption_prob": 2.8573044801305514e-06}, {"id": 139, "seek": 51714, "start": 532.16, "end": 536.36, "text": " what I might call branching code or deciding code from doing code.", "tokens": [50364, 300, 2028, 365, 1333, 295, 17528, 4190, 293, 550, 291, 3079, 613, 4471, 6828, 281, 10432, 50669, 50669, 552, 13, 50719, 50719, 286, 576, 3986, 11, 2086, 13, 50769, 50769, 682, 2674, 11, 264, 636, 286, 3928, 281, 2464, 3089, 293, 2699, 76, 3089, 294, 1729, 11, 286, 411, 281, 4994, 51115, 51115, 437, 286, 1062, 818, 9819, 278, 3089, 420, 17990, 3089, 490, 884, 3089, 13, 51325, 51325, 407, 498, 286, 645, 281, 584, 1389, 322, 257, 1310, 11, 286, 576, 362, 472, 2445, 300, 3331, 293, 14770, 51661, 51661], "temperature": 0.0, "avg_logprob": -0.0932351081602035, "compression_ratio": 1.6359447004608294, "no_caption_prob": 2.8573044801305514e-06}, {"id": 140, "seek": 51714, "start": 536.36, "end": 543.08, "text": " So if I were to say case on a maybe, I would have one function that cases and branches", "tokens": [50364, 300, 2028, 365, 1333, 295, 17528, 4190, 293, 550, 291, 3079, 613, 4471, 6828, 281, 10432, 50669, 50669, 552, 13, 50719, 50719, 286, 576, 3986, 11, 2086, 13, 50769, 50769, 682, 2674, 11, 264, 636, 286, 3928, 281, 2464, 3089, 293, 2699, 76, 3089, 294, 1729, 11, 286, 411, 281, 4994, 51115, 51115, 437, 286, 1062, 818, 9819, 278, 3089, 420, 17990, 3089, 490, 884, 3089, 13, 51325, 51325, 407, 498, 286, 645, 281, 584, 1389, 322, 257, 1310, 11, 286, 576, 362, 472, 2445, 300, 3331, 293, 14770, 51661, 51661], "temperature": 0.0, "avg_logprob": -0.0932351081602035, "compression_ratio": 1.6359447004608294, "no_caption_prob": 2.8573044801305514e-06}, {"id": 141, "seek": 54308, "start": 543.08, "end": 547.5600000000001, "text": " and then it would just call another function that's that sort of doing function.", "tokens": [50364, 293, 550, 309, 576, 445, 818, 1071, 2445, 300, 311, 300, 1333, 295, 884, 2445, 13, 50588, 50588, 400, 370, 754, 498, 286, 632, 264, 1389, 6114, 11, 286, 576, 362, 257, 4994, 2445, 300, 10672, 50940, 50940, 322, 264, 7284, 24922, 420, 2035, 309, 307, 11, 597, 307, 445, 5101, 11, 286, 519, 11, 3571, 281, 1401, 51220, 51220, 293, 1223, 13, 51270, 51270, 663, 611, 1669, 309, 1481, 281, 1895, 15104, 1780, 498, 291, 4325, 11, 1699, 11, 341, 1389, 6114, 51476, 51476, 727, 312, 257, 4471, 13, 51526, 51526, 286, 500, 380, 362, 281, 4994, 264, 1606, 9952, 1854, 13, 51674, 51674], "temperature": 0.0, "avg_logprob": -0.10774881594648986, "compression_ratio": 1.7195121951219512, "no_caption_prob": 1.994722651943448e-06}, {"id": 142, "seek": 54308, "start": 547.5600000000001, "end": 554.6, "text": " And so even if I had the case expression, I would have a separate function that acts", "tokens": [50364, 293, 550, 309, 576, 445, 818, 1071, 2445, 300, 311, 300, 1333, 295, 884, 2445, 13, 50588, 50588, 400, 370, 754, 498, 286, 632, 264, 1389, 6114, 11, 286, 576, 362, 257, 4994, 2445, 300, 10672, 50940, 50940, 322, 264, 7284, 24922, 420, 2035, 309, 307, 11, 597, 307, 445, 5101, 11, 286, 519, 11, 3571, 281, 1401, 51220, 51220, 293, 1223, 13, 51270, 51270, 663, 611, 1669, 309, 1481, 281, 1895, 15104, 1780, 498, 291, 4325, 11, 1699, 11, 341, 1389, 6114, 51476, 51476, 727, 312, 257, 4471, 13, 51526, 51526, 286, 500, 380, 362, 281, 4994, 264, 1606, 9952, 1854, 13, 51674, 51674], "temperature": 0.0, "avg_logprob": -0.10774881594648986, "compression_ratio": 1.7195121951219512, "no_caption_prob": 1.994722651943448e-06}, {"id": 143, "seek": 54308, "start": 554.6, "end": 560.2, "text": " on the inner integer or whatever it is, which is just generally, I think, easier to read", "tokens": [50364, 293, 550, 309, 576, 445, 818, 1071, 2445, 300, 311, 300, 1333, 295, 884, 2445, 13, 50588, 50588, 400, 370, 754, 498, 286, 632, 264, 1389, 6114, 11, 286, 576, 362, 257, 4994, 2445, 300, 10672, 50940, 50940, 322, 264, 7284, 24922, 420, 2035, 309, 307, 11, 597, 307, 445, 5101, 11, 286, 519, 11, 3571, 281, 1401, 51220, 51220, 293, 1223, 13, 51270, 51270, 663, 611, 1669, 309, 1481, 281, 1895, 15104, 1780, 498, 291, 4325, 11, 1699, 11, 341, 1389, 6114, 51476, 51476, 727, 312, 257, 4471, 13, 51526, 51526, 286, 500, 380, 362, 281, 4994, 264, 1606, 9952, 1854, 13, 51674, 51674], "temperature": 0.0, "avg_logprob": -0.10774881594648986, "compression_ratio": 1.7195121951219512, "no_caption_prob": 1.994722651943448e-06}, {"id": 144, "seek": 54308, "start": 560.2, "end": 561.2, "text": " and understand.", "tokens": [50364, 293, 550, 309, 576, 445, 818, 1071, 2445, 300, 311, 300, 1333, 295, 884, 2445, 13, 50588, 50588, 400, 370, 754, 498, 286, 632, 264, 1389, 6114, 11, 286, 576, 362, 257, 4994, 2445, 300, 10672, 50940, 50940, 322, 264, 7284, 24922, 420, 2035, 309, 307, 11, 597, 307, 445, 5101, 11, 286, 519, 11, 3571, 281, 1401, 51220, 51220, 293, 1223, 13, 51270, 51270, 663, 611, 1669, 309, 1481, 281, 1895, 15104, 1780, 498, 291, 4325, 11, 1699, 11, 341, 1389, 6114, 51476, 51476, 727, 312, 257, 4471, 13, 51526, 51526, 286, 500, 380, 362, 281, 4994, 264, 1606, 9952, 1854, 13, 51674, 51674], "temperature": 0.0, "avg_logprob": -0.10774881594648986, "compression_ratio": 1.7195121951219512, "no_caption_prob": 1.994722651943448e-06}, {"id": 145, "seek": 54308, "start": 561.2, "end": 565.32, "text": " That also makes it nice to refactor later if you realize, wait, this case expression", "tokens": [50364, 293, 550, 309, 576, 445, 818, 1071, 2445, 300, 311, 300, 1333, 295, 884, 2445, 13, 50588, 50588, 400, 370, 754, 498, 286, 632, 264, 1389, 6114, 11, 286, 576, 362, 257, 4994, 2445, 300, 10672, 50940, 50940, 322, 264, 7284, 24922, 420, 2035, 309, 307, 11, 597, 307, 445, 5101, 11, 286, 519, 11, 3571, 281, 1401, 51220, 51220, 293, 1223, 13, 51270, 51270, 663, 611, 1669, 309, 1481, 281, 1895, 15104, 1780, 498, 291, 4325, 11, 1699, 11, 341, 1389, 6114, 51476, 51476, 727, 312, 257, 4471, 13, 51526, 51526, 286, 500, 380, 362, 281, 4994, 264, 1606, 9952, 1854, 13, 51674, 51674], "temperature": 0.0, "avg_logprob": -0.10774881594648986, "compression_ratio": 1.7195121951219512, "no_caption_prob": 1.994722651943448e-06}, {"id": 146, "seek": 54308, "start": 565.32, "end": 566.32, "text": " could be a map.", "tokens": [50364, 293, 550, 309, 576, 445, 818, 1071, 2445, 300, 311, 300, 1333, 295, 884, 2445, 13, 50588, 50588, 400, 370, 754, 498, 286, 632, 264, 1389, 6114, 11, 286, 576, 362, 257, 4994, 2445, 300, 10672, 50940, 50940, 322, 264, 7284, 24922, 420, 2035, 309, 307, 11, 597, 307, 445, 5101, 11, 286, 519, 11, 3571, 281, 1401, 51220, 51220, 293, 1223, 13, 51270, 51270, 663, 611, 1669, 309, 1481, 281, 1895, 15104, 1780, 498, 291, 4325, 11, 1699, 11, 341, 1389, 6114, 51476, 51476, 727, 312, 257, 4471, 13, 51526, 51526, 286, 500, 380, 362, 281, 4994, 264, 1606, 9952, 1854, 13, 51674, 51674], "temperature": 0.0, "avg_logprob": -0.10774881594648986, "compression_ratio": 1.7195121951219512, "no_caption_prob": 1.994722651943448e-06}, {"id": 147, "seek": 54308, "start": 566.32, "end": 569.2800000000001, "text": " I don't have to separate the business logic inside.", "tokens": [50364, 293, 550, 309, 576, 445, 818, 1071, 2445, 300, 311, 300, 1333, 295, 884, 2445, 13, 50588, 50588, 400, 370, 754, 498, 286, 632, 264, 1389, 6114, 11, 286, 576, 362, 257, 4994, 2445, 300, 10672, 50940, 50940, 322, 264, 7284, 24922, 420, 2035, 309, 307, 11, 597, 307, 445, 5101, 11, 286, 519, 11, 3571, 281, 1401, 51220, 51220, 293, 1223, 13, 51270, 51270, 663, 611, 1669, 309, 1481, 281, 1895, 15104, 1780, 498, 291, 4325, 11, 1699, 11, 341, 1389, 6114, 51476, 51476, 727, 312, 257, 4471, 13, 51526, 51526, 286, 500, 380, 362, 281, 4994, 264, 1606, 9952, 1854, 13, 51674, 51674], "temperature": 0.0, "avg_logprob": -0.10774881594648986, "compression_ratio": 1.7195121951219512, "no_caption_prob": 1.994722651943448e-06}, {"id": 148, "seek": 56928, "start": 569.28, "end": 575.52, "text": " Yeah, I find that like with if you have a remote data value, for example, often code", "tokens": [50364, 865, 11, 286, 915, 300, 411, 365, 498, 291, 362, 257, 8607, 1412, 2158, 11, 337, 1365, 11, 2049, 3089, 50676, 50676, 3719, 484, 7935, 281, 360, 886, 709, 293, 884, 411, 257, 1389, 5629, 322, 264, 8607, 1412, 2010, 51002, 51002, 300, 498, 309, 311, 10727, 13210, 420, 15114, 420, 291, 733, 295, 15529, 613, 819, 6809, 51312, 51312, 294, 1622, 13, 51362, 51362, 583, 309, 4523, 484, 281, 312, 257, 688, 281, 7019, 428, 1378, 926, 281, 48377, 484, 264, 9952, 295, 264, 51718, 51718], "temperature": 0.0, "avg_logprob": -0.10793199432030152, "compression_ratio": 1.5919282511210762, "no_caption_prob": 2.0145242160651833e-05}, {"id": 149, "seek": 56928, "start": 575.52, "end": 582.04, "text": " starts out wanting to do too much and doing like a case statement on the remote data type", "tokens": [50364, 865, 11, 286, 915, 300, 411, 365, 498, 291, 362, 257, 8607, 1412, 2158, 11, 337, 1365, 11, 2049, 3089, 50676, 50676, 3719, 484, 7935, 281, 360, 886, 709, 293, 884, 411, 257, 1389, 5629, 322, 264, 8607, 1412, 2010, 51002, 51002, 300, 498, 309, 311, 10727, 13210, 420, 15114, 420, 291, 733, 295, 15529, 613, 819, 6809, 51312, 51312, 294, 1622, 13, 51362, 51362, 583, 309, 4523, 484, 281, 312, 257, 688, 281, 7019, 428, 1378, 926, 281, 48377, 484, 264, 9952, 295, 264, 51718, 51718], "temperature": 0.0, "avg_logprob": -0.10793199432030152, "compression_ratio": 1.5919282511210762, "no_caption_prob": 2.0145242160651833e-05}, {"id": 150, "seek": 56928, "start": 582.04, "end": 588.24, "text": " that if it's successfully loaded or loading or you kind of render these different views", "tokens": [50364, 865, 11, 286, 915, 300, 411, 365, 498, 291, 362, 257, 8607, 1412, 2158, 11, 337, 1365, 11, 2049, 3089, 50676, 50676, 3719, 484, 7935, 281, 360, 886, 709, 293, 884, 411, 257, 1389, 5629, 322, 264, 8607, 1412, 2010, 51002, 51002, 300, 498, 309, 311, 10727, 13210, 420, 15114, 420, 291, 733, 295, 15529, 613, 819, 6809, 51312, 51312, 294, 1622, 13, 51362, 51362, 583, 309, 4523, 484, 281, 312, 257, 688, 281, 7019, 428, 1378, 926, 281, 48377, 484, 264, 9952, 295, 264, 51718, 51718], "temperature": 0.0, "avg_logprob": -0.10793199432030152, "compression_ratio": 1.5919282511210762, "no_caption_prob": 2.0145242160651833e-05}, {"id": 151, "seek": 56928, "start": 588.24, "end": 589.24, "text": " in line.", "tokens": [50364, 865, 11, 286, 915, 300, 411, 365, 498, 291, 362, 257, 8607, 1412, 2158, 11, 337, 1365, 11, 2049, 3089, 50676, 50676, 3719, 484, 7935, 281, 360, 886, 709, 293, 884, 411, 257, 1389, 5629, 322, 264, 8607, 1412, 2010, 51002, 51002, 300, 498, 309, 311, 10727, 13210, 420, 15114, 420, 291, 733, 295, 15529, 613, 819, 6809, 51312, 51312, 294, 1622, 13, 51362, 51362, 583, 309, 4523, 484, 281, 312, 257, 688, 281, 7019, 428, 1378, 926, 281, 48377, 484, 264, 9952, 295, 264, 51718, 51718], "temperature": 0.0, "avg_logprob": -0.10793199432030152, "compression_ratio": 1.5919282511210762, "no_caption_prob": 2.0145242160651833e-05}, {"id": 152, "seek": 56928, "start": 589.24, "end": 596.36, "text": " But it turns out to be a lot to wrap your head around to parse out the logic of the", "tokens": [50364, 865, 11, 286, 915, 300, 411, 365, 498, 291, 362, 257, 8607, 1412, 2158, 11, 337, 1365, 11, 2049, 3089, 50676, 50676, 3719, 484, 7935, 281, 360, 886, 709, 293, 884, 411, 257, 1389, 5629, 322, 264, 8607, 1412, 2010, 51002, 51002, 300, 498, 309, 311, 10727, 13210, 420, 15114, 420, 291, 733, 295, 15529, 613, 819, 6809, 51312, 51312, 294, 1622, 13, 51362, 51362, 583, 309, 4523, 484, 281, 312, 257, 688, 281, 7019, 428, 1378, 926, 281, 48377, 484, 264, 9952, 295, 264, 51718, 51718], "temperature": 0.0, "avg_logprob": -0.10793199432030152, "compression_ratio": 1.5919282511210762, "no_caption_prob": 2.0145242160651833e-05}, {"id": 153, "seek": 59636, "start": 596.36, "end": 600.88, "text": " rendering logic for the successful view and the error view and all these pieces in one", "tokens": [50364, 22407, 9952, 337, 264, 4406, 1910, 293, 264, 6713, 1910, 293, 439, 613, 3755, 294, 472, 50590, 50590, 1081, 13, 50640, 50640, 400, 309, 311, 534, 341, 2674, 3410, 11, 597, 767, 291, 362, 257, 1481, 6968, 2183, 322, 341, 11, 50852, 50852, 286, 519, 11, 466, 7939, 412, 472, 1496, 295, 37765, 13, 51059, 51059, 400, 294, 257, 636, 11, 562, 291, 434, 733, 295, 14853, 424, 3759, 293, 550, 6260, 365, 264, 14853, 424, 3320, 551, 11, 51364, 51364, 538, 7123, 11, 291, 434, 6260, 365, 732, 819, 4358, 295, 37765, 558, 456, 13, 51570, 51570, 1079, 13, 51620, 51620], "temperature": 0.0, "avg_logprob": -0.12524736844576323, "compression_ratio": 1.7083333333333333, "no_caption_prob": 1.2411356692609843e-05}, {"id": 154, "seek": 59636, "start": 600.88, "end": 601.88, "text": " place.", "tokens": [50364, 22407, 9952, 337, 264, 4406, 1910, 293, 264, 6713, 1910, 293, 439, 613, 3755, 294, 472, 50590, 50590, 1081, 13, 50640, 50640, 400, 309, 311, 534, 341, 2674, 3410, 11, 597, 767, 291, 362, 257, 1481, 6968, 2183, 322, 341, 11, 50852, 50852, 286, 519, 11, 466, 7939, 412, 472, 1496, 295, 37765, 13, 51059, 51059, 400, 294, 257, 636, 11, 562, 291, 434, 733, 295, 14853, 424, 3759, 293, 550, 6260, 365, 264, 14853, 424, 3320, 551, 11, 51364, 51364, 538, 7123, 11, 291, 434, 6260, 365, 732, 819, 4358, 295, 37765, 558, 456, 13, 51570, 51570, 1079, 13, 51620, 51620], "temperature": 0.0, "avg_logprob": -0.12524736844576323, "compression_ratio": 1.7083333333333333, "no_caption_prob": 1.2411356692609843e-05}, {"id": 155, "seek": 59636, "start": 601.88, "end": 606.12, "text": " And it's really this general concept, which actually you have a nice blog post on this,", "tokens": [50364, 22407, 9952, 337, 264, 4406, 1910, 293, 264, 6713, 1910, 293, 439, 613, 3755, 294, 472, 50590, 50590, 1081, 13, 50640, 50640, 400, 309, 311, 534, 341, 2674, 3410, 11, 597, 767, 291, 362, 257, 1481, 6968, 2183, 322, 341, 11, 50852, 50852, 286, 519, 11, 466, 7939, 412, 472, 1496, 295, 37765, 13, 51059, 51059, 400, 294, 257, 636, 11, 562, 291, 434, 733, 295, 14853, 424, 3759, 293, 550, 6260, 365, 264, 14853, 424, 3320, 551, 11, 51364, 51364, 538, 7123, 11, 291, 434, 6260, 365, 732, 819, 4358, 295, 37765, 558, 456, 13, 51570, 51570, 1079, 13, 51620, 51620], "temperature": 0.0, "avg_logprob": -0.12524736844576323, "compression_ratio": 1.7083333333333333, "no_caption_prob": 1.2411356692609843e-05}, {"id": 156, "seek": 59636, "start": 606.12, "end": 610.26, "text": " I think, about staying at one level of abstraction.", "tokens": [50364, 22407, 9952, 337, 264, 4406, 1910, 293, 264, 6713, 1910, 293, 439, 613, 3755, 294, 472, 50590, 50590, 1081, 13, 50640, 50640, 400, 309, 311, 534, 341, 2674, 3410, 11, 597, 767, 291, 362, 257, 1481, 6968, 2183, 322, 341, 11, 50852, 50852, 286, 519, 11, 466, 7939, 412, 472, 1496, 295, 37765, 13, 51059, 51059, 400, 294, 257, 636, 11, 562, 291, 434, 733, 295, 14853, 424, 3759, 293, 550, 6260, 365, 264, 14853, 424, 3320, 551, 11, 51364, 51364, 538, 7123, 11, 291, 434, 6260, 365, 732, 819, 4358, 295, 37765, 558, 456, 13, 51570, 51570, 1079, 13, 51620, 51620], "temperature": 0.0, "avg_logprob": -0.12524736844576323, "compression_ratio": 1.7083333333333333, "no_caption_prob": 1.2411356692609843e-05}, {"id": 157, "seek": 59636, "start": 610.26, "end": 616.36, "text": " And in a way, when you're kind of unwrapping and then dealing with the unwrapped thing,", "tokens": [50364, 22407, 9952, 337, 264, 4406, 1910, 293, 264, 6713, 1910, 293, 439, 613, 3755, 294, 472, 50590, 50590, 1081, 13, 50640, 50640, 400, 309, 311, 534, 341, 2674, 3410, 11, 597, 767, 291, 362, 257, 1481, 6968, 2183, 322, 341, 11, 50852, 50852, 286, 519, 11, 466, 7939, 412, 472, 1496, 295, 37765, 13, 51059, 51059, 400, 294, 257, 636, 11, 562, 291, 434, 733, 295, 14853, 424, 3759, 293, 550, 6260, 365, 264, 14853, 424, 3320, 551, 11, 51364, 51364, 538, 7123, 11, 291, 434, 6260, 365, 732, 819, 4358, 295, 37765, 558, 456, 13, 51570, 51570, 1079, 13, 51620, 51620], "temperature": 0.0, "avg_logprob": -0.12524736844576323, "compression_ratio": 1.7083333333333333, "no_caption_prob": 1.2411356692609843e-05}, {"id": 158, "seek": 59636, "start": 616.36, "end": 620.48, "text": " by definition, you're dealing with two different levels of abstraction right there.", "tokens": [50364, 22407, 9952, 337, 264, 4406, 1910, 293, 264, 6713, 1910, 293, 439, 613, 3755, 294, 472, 50590, 50590, 1081, 13, 50640, 50640, 400, 309, 311, 534, 341, 2674, 3410, 11, 597, 767, 291, 362, 257, 1481, 6968, 2183, 322, 341, 11, 50852, 50852, 286, 519, 11, 466, 7939, 412, 472, 1496, 295, 37765, 13, 51059, 51059, 400, 294, 257, 636, 11, 562, 291, 434, 733, 295, 14853, 424, 3759, 293, 550, 6260, 365, 264, 14853, 424, 3320, 551, 11, 51364, 51364, 538, 7123, 11, 291, 434, 6260, 365, 732, 819, 4358, 295, 37765, 558, 456, 13, 51570, 51570, 1079, 13, 51620, 51620], "temperature": 0.0, "avg_logprob": -0.12524736844576323, "compression_ratio": 1.7083333333333333, "no_caption_prob": 1.2411356692609843e-05}, {"id": 159, "seek": 59636, "start": 620.48, "end": 621.48, "text": " Yes.", "tokens": [50364, 22407, 9952, 337, 264, 4406, 1910, 293, 264, 6713, 1910, 293, 439, 613, 3755, 294, 472, 50590, 50590, 1081, 13, 50640, 50640, 400, 309, 311, 534, 341, 2674, 3410, 11, 597, 767, 291, 362, 257, 1481, 6968, 2183, 322, 341, 11, 50852, 50852, 286, 519, 11, 466, 7939, 412, 472, 1496, 295, 37765, 13, 51059, 51059, 400, 294, 257, 636, 11, 562, 291, 434, 733, 295, 14853, 424, 3759, 293, 550, 6260, 365, 264, 14853, 424, 3320, 551, 11, 51364, 51364, 538, 7123, 11, 291, 434, 6260, 365, 732, 819, 4358, 295, 37765, 558, 456, 13, 51570, 51570, 1079, 13, 51620, 51620], "temperature": 0.0, "avg_logprob": -0.12524736844576323, "compression_ratio": 1.7083333333333333, "no_caption_prob": 1.2411356692609843e-05}, {"id": 160, "seek": 62148, "start": 621.48, "end": 627.52, "text": " And I think that separation of sort of deciding code versus doing code, those are sort of", "tokens": [50364, 400, 286, 519, 300, 14634, 295, 1333, 295, 17990, 3089, 5717, 884, 3089, 11, 729, 366, 1333, 295, 50666, 50666, 732, 12649, 626, 300, 291, 528, 281, 1066, 12005, 13, 50806, 50806, 1042, 11, 718, 311, 751, 466, 512, 5110, 295, 341, 11455, 5102, 13, 51050, 51050, 2022, 613, 819, 5110, 11, 291, 645, 16141, 577, 819, 16660, 530, 1062, 312, 544, 21769, 51324, 51324, 337, 819, 2306, 13, 51388, 51388, 467, 311, 611, 1880, 11, 411, 294, 257, 636, 11, 456, 366, 1920, 819, 4361, 45298, 337, 613, 13, 51637, 51637], "temperature": 0.0, "avg_logprob": -0.1586770605533681, "compression_ratio": 1.7215189873417722, "no_caption_prob": 3.1692205084254965e-05}, {"id": 161, "seek": 62148, "start": 627.52, "end": 630.32, "text": " two abstractions that you want to keep separated.", "tokens": [50364, 400, 286, 519, 300, 14634, 295, 1333, 295, 17990, 3089, 5717, 884, 3089, 11, 729, 366, 1333, 295, 50666, 50666, 732, 12649, 626, 300, 291, 528, 281, 1066, 12005, 13, 50806, 50806, 1042, 11, 718, 311, 751, 466, 512, 5110, 295, 341, 11455, 5102, 13, 51050, 51050, 2022, 613, 819, 5110, 11, 291, 645, 16141, 577, 819, 16660, 530, 1062, 312, 544, 21769, 51324, 51324, 337, 819, 2306, 13, 51388, 51388, 467, 311, 611, 1880, 11, 411, 294, 257, 636, 11, 456, 366, 1920, 819, 4361, 45298, 337, 613, 13, 51637, 51637], "temperature": 0.0, "avg_logprob": -0.1586770605533681, "compression_ratio": 1.7215189873417722, "no_caption_prob": 3.1692205084254965e-05}, {"id": 162, "seek": 62148, "start": 630.32, "end": 635.2, "text": " Well, let's talk about some examples of this universal pattern.", "tokens": [50364, 400, 286, 519, 300, 14634, 295, 1333, 295, 17990, 3089, 5717, 884, 3089, 11, 729, 366, 1333, 295, 50666, 50666, 732, 12649, 626, 300, 291, 528, 281, 1066, 12005, 13, 50806, 50806, 1042, 11, 718, 311, 751, 466, 512, 5110, 295, 341, 11455, 5102, 13, 51050, 51050, 2022, 613, 819, 5110, 11, 291, 645, 16141, 577, 819, 16660, 530, 1062, 312, 544, 21769, 51324, 51324, 337, 819, 2306, 13, 51388, 51388, 467, 311, 611, 1880, 11, 411, 294, 257, 636, 11, 456, 366, 1920, 819, 4361, 45298, 337, 613, 13, 51637, 51637], "temperature": 0.0, "avg_logprob": -0.1586770605533681, "compression_ratio": 1.7215189873417722, "no_caption_prob": 3.1692205084254965e-05}, {"id": 163, "seek": 62148, "start": 635.2, "end": 640.6800000000001, "text": " With these different examples, you were describing how different analogies might be more intuitive", "tokens": [50364, 400, 286, 519, 300, 14634, 295, 1333, 295, 17990, 3089, 5717, 884, 3089, 11, 729, 366, 1333, 295, 50666, 50666, 732, 12649, 626, 300, 291, 528, 281, 1066, 12005, 13, 50806, 50806, 1042, 11, 718, 311, 751, 466, 512, 5110, 295, 341, 11455, 5102, 13, 51050, 51050, 2022, 613, 819, 5110, 11, 291, 645, 16141, 577, 819, 16660, 530, 1062, 312, 544, 21769, 51324, 51324, 337, 819, 2306, 13, 51388, 51388, 467, 311, 611, 1880, 11, 411, 294, 257, 636, 11, 456, 366, 1920, 819, 4361, 45298, 337, 613, 13, 51637, 51637], "temperature": 0.0, "avg_logprob": -0.1586770605533681, "compression_ratio": 1.7215189873417722, "no_caption_prob": 3.1692205084254965e-05}, {"id": 164, "seek": 62148, "start": 640.6800000000001, "end": 641.96, "text": " for different ones.", "tokens": [50364, 400, 286, 519, 300, 14634, 295, 1333, 295, 17990, 3089, 5717, 884, 3089, 11, 729, 366, 1333, 295, 50666, 50666, 732, 12649, 626, 300, 291, 528, 281, 1066, 12005, 13, 50806, 50806, 1042, 11, 718, 311, 751, 466, 512, 5110, 295, 341, 11455, 5102, 13, 51050, 51050, 2022, 613, 819, 5110, 11, 291, 645, 16141, 577, 819, 16660, 530, 1062, 312, 544, 21769, 51324, 51324, 337, 819, 2306, 13, 51388, 51388, 467, 311, 611, 1880, 11, 411, 294, 257, 636, 11, 456, 366, 1920, 819, 4361, 45298, 337, 613, 13, 51637, 51637], "temperature": 0.0, "avg_logprob": -0.1586770605533681, "compression_ratio": 1.7215189873417722, "no_caption_prob": 3.1692205084254965e-05}, {"id": 165, "seek": 62148, "start": 641.96, "end": 646.94, "text": " It's also interesting, like in a way, there are almost different semantics for these.", "tokens": [50364, 400, 286, 519, 300, 14634, 295, 1333, 295, 17990, 3089, 5717, 884, 3089, 11, 729, 366, 1333, 295, 50666, 50666, 732, 12649, 626, 300, 291, 528, 281, 1066, 12005, 13, 50806, 50806, 1042, 11, 718, 311, 751, 466, 512, 5110, 295, 341, 11455, 5102, 13, 51050, 51050, 2022, 613, 819, 5110, 11, 291, 645, 16141, 577, 819, 16660, 530, 1062, 312, 544, 21769, 51324, 51324, 337, 819, 2306, 13, 51388, 51388, 467, 311, 611, 1880, 11, 411, 294, 257, 636, 11, 456, 366, 1920, 819, 4361, 45298, 337, 613, 13, 51637, 51637], "temperature": 0.0, "avg_logprob": -0.1586770605533681, "compression_ratio": 1.7215189873417722, "no_caption_prob": 3.1692205084254965e-05}, {"id": 166, "seek": 64694, "start": 646.94, "end": 653.08, "text": " Like for maybe, if you're combining maybes, the semantics are almost like and semantics,", "tokens": [50364, 1743, 337, 1310, 11, 498, 291, 434, 21928, 815, 6446, 11, 264, 4361, 45298, 366, 1920, 411, 293, 4361, 45298, 11, 50671, 50671, 689, 309, 1920, 411, 2099, 26354, 13, 50791, 50791, 759, 604, 295, 264, 1310, 4190, 366, 1825, 11, 550, 309, 445, 2099, 26354, 807, 293, 264, 1379, 51051, 51051, 551, 307, 1825, 13, 51110, 51110, 583, 498, 411, 11, 337, 1365, 11, 365, 257, 31828, 979, 1429, 2158, 11, 286, 2041, 309, 311, 257, 2531, 3410, 300, 51414, 51414, 309, 1920, 2099, 26354, 365, 257, 31828, 979, 8616, 6713, 498, 456, 311, 364, 6713, 4992, 13, 51687, 51687], "temperature": 0.0, "avg_logprob": -0.11396541410279505, "compression_ratio": 1.7831858407079646, "no_caption_prob": 3.0240944397519343e-05}, {"id": 167, "seek": 64694, "start": 653.08, "end": 655.48, "text": " where it almost like short circuits.", "tokens": [50364, 1743, 337, 1310, 11, 498, 291, 434, 21928, 815, 6446, 11, 264, 4361, 45298, 366, 1920, 411, 293, 4361, 45298, 11, 50671, 50671, 689, 309, 1920, 411, 2099, 26354, 13, 50791, 50791, 759, 604, 295, 264, 1310, 4190, 366, 1825, 11, 550, 309, 445, 2099, 26354, 807, 293, 264, 1379, 51051, 51051, 551, 307, 1825, 13, 51110, 51110, 583, 498, 411, 11, 337, 1365, 11, 365, 257, 31828, 979, 1429, 2158, 11, 286, 2041, 309, 311, 257, 2531, 3410, 300, 51414, 51414, 309, 1920, 2099, 26354, 365, 257, 31828, 979, 8616, 6713, 498, 456, 311, 364, 6713, 4992, 13, 51687, 51687], "temperature": 0.0, "avg_logprob": -0.11396541410279505, "compression_ratio": 1.7831858407079646, "no_caption_prob": 3.0240944397519343e-05}, {"id": 168, "seek": 64694, "start": 655.48, "end": 660.6800000000001, "text": " If any of the maybe values are nothing, then it just short circuits through and the whole", "tokens": [50364, 1743, 337, 1310, 11, 498, 291, 434, 21928, 815, 6446, 11, 264, 4361, 45298, 366, 1920, 411, 293, 4361, 45298, 11, 50671, 50671, 689, 309, 1920, 411, 2099, 26354, 13, 50791, 50791, 759, 604, 295, 264, 1310, 4190, 366, 1825, 11, 550, 309, 445, 2099, 26354, 807, 293, 264, 1379, 51051, 51051, 551, 307, 1825, 13, 51110, 51110, 583, 498, 411, 11, 337, 1365, 11, 365, 257, 31828, 979, 1429, 2158, 11, 286, 2041, 309, 311, 257, 2531, 3410, 300, 51414, 51414, 309, 1920, 2099, 26354, 365, 257, 31828, 979, 8616, 6713, 498, 456, 311, 364, 6713, 4992, 13, 51687, 51687], "temperature": 0.0, "avg_logprob": -0.11396541410279505, "compression_ratio": 1.7831858407079646, "no_caption_prob": 3.0240944397519343e-05}, {"id": 169, "seek": 64694, "start": 660.6800000000001, "end": 661.86, "text": " thing is nothing.", "tokens": [50364, 1743, 337, 1310, 11, 498, 291, 434, 21928, 815, 6446, 11, 264, 4361, 45298, 366, 1920, 411, 293, 4361, 45298, 11, 50671, 50671, 689, 309, 1920, 411, 2099, 26354, 13, 50791, 50791, 759, 604, 295, 264, 1310, 4190, 366, 1825, 11, 550, 309, 445, 2099, 26354, 807, 293, 264, 1379, 51051, 51051, 551, 307, 1825, 13, 51110, 51110, 583, 498, 411, 11, 337, 1365, 11, 365, 257, 31828, 979, 1429, 2158, 11, 286, 2041, 309, 311, 257, 2531, 3410, 300, 51414, 51414, 309, 1920, 2099, 26354, 365, 257, 31828, 979, 8616, 6713, 498, 456, 311, 364, 6713, 4992, 13, 51687, 51687], "temperature": 0.0, "avg_logprob": -0.11396541410279505, "compression_ratio": 1.7831858407079646, "no_caption_prob": 3.0240944397519343e-05}, {"id": 170, "seek": 64694, "start": 661.86, "end": 667.94, "text": " But if like, for example, with a JSON decode value, I guess it's a similar concept that", "tokens": [50364, 1743, 337, 1310, 11, 498, 291, 434, 21928, 815, 6446, 11, 264, 4361, 45298, 366, 1920, 411, 293, 4361, 45298, 11, 50671, 50671, 689, 309, 1920, 411, 2099, 26354, 13, 50791, 50791, 759, 604, 295, 264, 1310, 4190, 366, 1825, 11, 550, 309, 445, 2099, 26354, 807, 293, 264, 1379, 51051, 51051, 551, 307, 1825, 13, 51110, 51110, 583, 498, 411, 11, 337, 1365, 11, 365, 257, 31828, 979, 1429, 2158, 11, 286, 2041, 309, 311, 257, 2531, 3410, 300, 51414, 51414, 309, 1920, 2099, 26354, 365, 257, 31828, 979, 8616, 6713, 498, 456, 311, 364, 6713, 4992, 13, 51687, 51687], "temperature": 0.0, "avg_logprob": -0.11396541410279505, "compression_ratio": 1.7831858407079646, "no_caption_prob": 3.0240944397519343e-05}, {"id": 171, "seek": 64694, "start": 667.94, "end": 673.4000000000001, "text": " it almost short circuits with a JSON decoding error if there's an error anywhere.", "tokens": [50364, 1743, 337, 1310, 11, 498, 291, 434, 21928, 815, 6446, 11, 264, 4361, 45298, 366, 1920, 411, 293, 4361, 45298, 11, 50671, 50671, 689, 309, 1920, 411, 2099, 26354, 13, 50791, 50791, 759, 604, 295, 264, 1310, 4190, 366, 1825, 11, 550, 309, 445, 2099, 26354, 807, 293, 264, 1379, 51051, 51051, 551, 307, 1825, 13, 51110, 51110, 583, 498, 411, 11, 337, 1365, 11, 365, 257, 31828, 979, 1429, 2158, 11, 286, 2041, 309, 311, 257, 2531, 3410, 300, 51414, 51414, 309, 1920, 2099, 26354, 365, 257, 31828, 979, 8616, 6713, 498, 456, 311, 364, 6713, 4992, 13, 51687, 51687], "temperature": 0.0, "avg_logprob": -0.11396541410279505, "compression_ratio": 1.7831858407079646, "no_caption_prob": 3.0240944397519343e-05}, {"id": 172, "seek": 67340, "start": 673.4, "end": 679.72, "text": " But that error carries information, so it could carry information from any given decoder.", "tokens": [50364, 583, 300, 6713, 16402, 1589, 11, 370, 309, 727, 3985, 1589, 490, 604, 2212, 979, 19866, 13, 50680, 50680, 1779, 13, 50730, 50730, 13157, 11, 286, 519, 291, 727, 584, 300, 365, 746, 411, 1874, 11, 689, 264, 6713, 575, 50962, 50962, 544, 4319, 466, 689, 309, 7612, 11, 983, 309, 7612, 11, 2831, 813, 1310, 309, 311, 445, 321, 500, 380, 51198, 51198, 362, 257, 2158, 13, 51300, 51300, 467, 311, 733, 295, 1880, 300, 309, 311, 406, 411, 11, 286, 2041, 309, 311, 406, 257, 588, 2689, 5102, 281, 51516, 51516, 445, 747, 3866, 13603, 293, 1594, 552, 1214, 13, 51712, 51712], "temperature": 0.0, "avg_logprob": -0.100451667353792, "compression_ratio": 1.6812749003984064, "no_caption_prob": 1.5534940303041367e-06}, {"id": 173, "seek": 67340, "start": 679.72, "end": 680.72, "text": " Right.", "tokens": [50364, 583, 300, 6713, 16402, 1589, 11, 370, 309, 727, 3985, 1589, 490, 604, 2212, 979, 19866, 13, 50680, 50680, 1779, 13, 50730, 50730, 13157, 11, 286, 519, 291, 727, 584, 300, 365, 746, 411, 1874, 11, 689, 264, 6713, 575, 50962, 50962, 544, 4319, 466, 689, 309, 7612, 11, 983, 309, 7612, 11, 2831, 813, 1310, 309, 311, 445, 321, 500, 380, 51198, 51198, 362, 257, 2158, 13, 51300, 51300, 467, 311, 733, 295, 1880, 300, 309, 311, 406, 411, 11, 286, 2041, 309, 311, 406, 257, 588, 2689, 5102, 281, 51516, 51516, 445, 747, 3866, 13603, 293, 1594, 552, 1214, 13, 51712, 51712], "temperature": 0.0, "avg_logprob": -0.100451667353792, "compression_ratio": 1.6812749003984064, "no_caption_prob": 1.5534940303041367e-06}, {"id": 174, "seek": 67340, "start": 680.72, "end": 685.36, "text": " Similarly, I think you could say that with something like result, where the error has", "tokens": [50364, 583, 300, 6713, 16402, 1589, 11, 370, 309, 727, 3985, 1589, 490, 604, 2212, 979, 19866, 13, 50680, 50680, 1779, 13, 50730, 50730, 13157, 11, 286, 519, 291, 727, 584, 300, 365, 746, 411, 1874, 11, 689, 264, 6713, 575, 50962, 50962, 544, 4319, 466, 689, 309, 7612, 11, 983, 309, 7612, 11, 2831, 813, 1310, 309, 311, 445, 321, 500, 380, 51198, 51198, 362, 257, 2158, 13, 51300, 51300, 467, 311, 733, 295, 1880, 300, 309, 311, 406, 411, 11, 286, 2041, 309, 311, 406, 257, 588, 2689, 5102, 281, 51516, 51516, 445, 747, 3866, 13603, 293, 1594, 552, 1214, 13, 51712, 51712], "temperature": 0.0, "avg_logprob": -0.100451667353792, "compression_ratio": 1.6812749003984064, "no_caption_prob": 1.5534940303041367e-06}, {"id": 175, "seek": 67340, "start": 685.36, "end": 690.0799999999999, "text": " more context about where it failed, why it failed, rather than maybe it's just we don't", "tokens": [50364, 583, 300, 6713, 16402, 1589, 11, 370, 309, 727, 3985, 1589, 490, 604, 2212, 979, 19866, 13, 50680, 50680, 1779, 13, 50730, 50730, 13157, 11, 286, 519, 291, 727, 584, 300, 365, 746, 411, 1874, 11, 689, 264, 6713, 575, 50962, 50962, 544, 4319, 466, 689, 309, 7612, 11, 983, 309, 7612, 11, 2831, 813, 1310, 309, 311, 445, 321, 500, 380, 51198, 51198, 362, 257, 2158, 13, 51300, 51300, 467, 311, 733, 295, 1880, 300, 309, 311, 406, 411, 11, 286, 2041, 309, 311, 406, 257, 588, 2689, 5102, 281, 51516, 51516, 445, 747, 3866, 13603, 293, 1594, 552, 1214, 13, 51712, 51712], "temperature": 0.0, "avg_logprob": -0.100451667353792, "compression_ratio": 1.6812749003984064, "no_caption_prob": 1.5534940303041367e-06}, {"id": 176, "seek": 67340, "start": 690.0799999999999, "end": 692.12, "text": " have a value.", "tokens": [50364, 583, 300, 6713, 16402, 1589, 11, 370, 309, 727, 3985, 1589, 490, 604, 2212, 979, 19866, 13, 50680, 50680, 1779, 13, 50730, 50730, 13157, 11, 286, 519, 291, 727, 584, 300, 365, 746, 411, 1874, 11, 689, 264, 6713, 575, 50962, 50962, 544, 4319, 466, 689, 309, 7612, 11, 983, 309, 7612, 11, 2831, 813, 1310, 309, 311, 445, 321, 500, 380, 51198, 51198, 362, 257, 2158, 13, 51300, 51300, 467, 311, 733, 295, 1880, 300, 309, 311, 406, 411, 11, 286, 2041, 309, 311, 406, 257, 588, 2689, 5102, 281, 51516, 51516, 445, 747, 3866, 13603, 293, 1594, 552, 1214, 13, 51712, 51712], "temperature": 0.0, "avg_logprob": -0.100451667353792, "compression_ratio": 1.6812749003984064, "no_caption_prob": 1.5534940303041367e-06}, {"id": 177, "seek": 67340, "start": 692.12, "end": 696.4399999999999, "text": " It's kind of interesting that it's not like, I guess it's not a very common pattern to", "tokens": [50364, 583, 300, 6713, 16402, 1589, 11, 370, 309, 727, 3985, 1589, 490, 604, 2212, 979, 19866, 13, 50680, 50680, 1779, 13, 50730, 50730, 13157, 11, 286, 519, 291, 727, 584, 300, 365, 746, 411, 1874, 11, 689, 264, 6713, 575, 50962, 50962, 544, 4319, 466, 689, 309, 7612, 11, 983, 309, 7612, 11, 2831, 813, 1310, 309, 311, 445, 321, 500, 380, 51198, 51198, 362, 257, 2158, 13, 51300, 51300, 467, 311, 733, 295, 1880, 300, 309, 311, 406, 411, 11, 286, 2041, 309, 311, 406, 257, 588, 2689, 5102, 281, 51516, 51516, 445, 747, 3866, 13603, 293, 1594, 552, 1214, 13, 51712, 51712], "temperature": 0.0, "avg_logprob": -0.100451667353792, "compression_ratio": 1.6812749003984064, "no_caption_prob": 1.5534940303041367e-06}, {"id": 178, "seek": 67340, "start": 696.4399999999999, "end": 700.36, "text": " just take multiple errors and group them together.", "tokens": [50364, 583, 300, 6713, 16402, 1589, 11, 370, 309, 727, 3985, 1589, 490, 604, 2212, 979, 19866, 13, 50680, 50680, 1779, 13, 50730, 50730, 13157, 11, 286, 519, 291, 727, 584, 300, 365, 746, 411, 1874, 11, 689, 264, 6713, 575, 50962, 50962, 544, 4319, 466, 689, 309, 7612, 11, 983, 309, 7612, 11, 2831, 813, 1310, 309, 311, 445, 321, 500, 380, 51198, 51198, 362, 257, 2158, 13, 51300, 51300, 467, 311, 733, 295, 1880, 300, 309, 311, 406, 411, 11, 286, 2041, 309, 311, 406, 257, 588, 2689, 5102, 281, 51516, 51516, 445, 747, 3866, 13603, 293, 1594, 552, 1214, 13, 51712, 51712], "temperature": 0.0, "avg_logprob": -0.100451667353792, "compression_ratio": 1.6812749003984064, "no_caption_prob": 1.5534940303041367e-06}, {"id": 179, "seek": 70036, "start": 700.36, "end": 703.64, "text": " But I suppose it could just as well be.", "tokens": [50364, 583, 286, 7297, 309, 727, 445, 382, 731, 312, 13, 50528, 50528, 583, 286, 2041, 291, 393, 380, 534, 8991, 570, 309, 37808, 300, 309, 575, 264, 2978, 1589, 50800, 50800, 294, 1668, 281, 8991, 294, 1629, 30628, 13, 50898, 50898, 583, 411, 365, 257, 979, 19866, 11, 309, 311, 406, 516, 281, 5217, 264, 661, 979, 378, 433, 11, 264, 700, 472, 51193, 51193, 300, 49263, 11, 264, 700, 472, 300, 18199, 412, 2099, 26354, 13, 51346, 51346, 1779, 13, 51396, 51396, 821, 311, 572, 1778, 291, 2809, 380, 33384, 13603, 13, 51510, 51510, 286, 519, 1780, 498, 321, 751, 466, 21156, 433, 11, 300, 1062, 312, 746, 300, 1487, 493, 13, 51802, 51802], "temperature": 0.0, "avg_logprob": -0.1612913343641493, "compression_ratio": 1.7083333333333333, "no_caption_prob": 1.4285321412899066e-05}, {"id": 180, "seek": 70036, "start": 703.64, "end": 709.08, "text": " But I guess you can't really proceed because it assumes that it has the needed information", "tokens": [50364, 583, 286, 7297, 309, 727, 445, 382, 731, 312, 13, 50528, 50528, 583, 286, 2041, 291, 393, 380, 534, 8991, 570, 309, 37808, 300, 309, 575, 264, 2978, 1589, 50800, 50800, 294, 1668, 281, 8991, 294, 1629, 30628, 13, 50898, 50898, 583, 411, 365, 257, 979, 19866, 11, 309, 311, 406, 516, 281, 5217, 264, 661, 979, 378, 433, 11, 264, 700, 472, 51193, 51193, 300, 49263, 11, 264, 700, 472, 300, 18199, 412, 2099, 26354, 13, 51346, 51346, 1779, 13, 51396, 51396, 821, 311, 572, 1778, 291, 2809, 380, 33384, 13603, 13, 51510, 51510, 286, 519, 1780, 498, 321, 751, 466, 21156, 433, 11, 300, 1062, 312, 746, 300, 1487, 493, 13, 51802, 51802], "temperature": 0.0, "avg_logprob": -0.1612913343641493, "compression_ratio": 1.7083333333333333, "no_caption_prob": 1.4285321412899066e-05}, {"id": 181, "seek": 70036, "start": 709.08, "end": 711.04, "text": " in order to proceed in certain contexts.", "tokens": [50364, 583, 286, 7297, 309, 727, 445, 382, 731, 312, 13, 50528, 50528, 583, 286, 2041, 291, 393, 380, 534, 8991, 570, 309, 37808, 300, 309, 575, 264, 2978, 1589, 50800, 50800, 294, 1668, 281, 8991, 294, 1629, 30628, 13, 50898, 50898, 583, 411, 365, 257, 979, 19866, 11, 309, 311, 406, 516, 281, 5217, 264, 661, 979, 378, 433, 11, 264, 700, 472, 51193, 51193, 300, 49263, 11, 264, 700, 472, 300, 18199, 412, 2099, 26354, 13, 51346, 51346, 1779, 13, 51396, 51396, 821, 311, 572, 1778, 291, 2809, 380, 33384, 13603, 13, 51510, 51510, 286, 519, 1780, 498, 321, 751, 466, 21156, 433, 11, 300, 1062, 312, 746, 300, 1487, 493, 13, 51802, 51802], "temperature": 0.0, "avg_logprob": -0.1612913343641493, "compression_ratio": 1.7083333333333333, "no_caption_prob": 1.4285321412899066e-05}, {"id": 182, "seek": 70036, "start": 711.04, "end": 716.94, "text": " But like with a decoder, it's not going to attempt the other decoders, the first one", "tokens": [50364, 583, 286, 7297, 309, 727, 445, 382, 731, 312, 13, 50528, 50528, 583, 286, 2041, 291, 393, 380, 534, 8991, 570, 309, 37808, 300, 309, 575, 264, 2978, 1589, 50800, 50800, 294, 1668, 281, 8991, 294, 1629, 30628, 13, 50898, 50898, 583, 411, 365, 257, 979, 19866, 11, 309, 311, 406, 516, 281, 5217, 264, 661, 979, 378, 433, 11, 264, 700, 472, 51193, 51193, 300, 49263, 11, 264, 700, 472, 300, 18199, 412, 2099, 26354, 13, 51346, 51346, 1779, 13, 51396, 51396, 821, 311, 572, 1778, 291, 2809, 380, 33384, 13603, 13, 51510, 51510, 286, 519, 1780, 498, 321, 751, 466, 21156, 433, 11, 300, 1062, 312, 746, 300, 1487, 493, 13, 51802, 51802], "temperature": 0.0, "avg_logprob": -0.1612913343641493, "compression_ratio": 1.7083333333333333, "no_caption_prob": 1.4285321412899066e-05}, {"id": 183, "seek": 70036, "start": 716.94, "end": 720.0, "text": " that succeeds, the first one that fails at short circuits.", "tokens": [50364, 583, 286, 7297, 309, 727, 445, 382, 731, 312, 13, 50528, 50528, 583, 286, 2041, 291, 393, 380, 534, 8991, 570, 309, 37808, 300, 309, 575, 264, 2978, 1589, 50800, 50800, 294, 1668, 281, 8991, 294, 1629, 30628, 13, 50898, 50898, 583, 411, 365, 257, 979, 19866, 11, 309, 311, 406, 516, 281, 5217, 264, 661, 979, 378, 433, 11, 264, 700, 472, 51193, 51193, 300, 49263, 11, 264, 700, 472, 300, 18199, 412, 2099, 26354, 13, 51346, 51346, 1779, 13, 51396, 51396, 821, 311, 572, 1778, 291, 2809, 380, 33384, 13603, 13, 51510, 51510, 286, 519, 1780, 498, 321, 751, 466, 21156, 433, 11, 300, 1062, 312, 746, 300, 1487, 493, 13, 51802, 51802], "temperature": 0.0, "avg_logprob": -0.1612913343641493, "compression_ratio": 1.7083333333333333, "no_caption_prob": 1.4285321412899066e-05}, {"id": 184, "seek": 70036, "start": 720.0, "end": 721.0, "text": " Right.", "tokens": [50364, 583, 286, 7297, 309, 727, 445, 382, 731, 312, 13, 50528, 50528, 583, 286, 2041, 291, 393, 380, 534, 8991, 570, 309, 37808, 300, 309, 575, 264, 2978, 1589, 50800, 50800, 294, 1668, 281, 8991, 294, 1629, 30628, 13, 50898, 50898, 583, 411, 365, 257, 979, 19866, 11, 309, 311, 406, 516, 281, 5217, 264, 661, 979, 378, 433, 11, 264, 700, 472, 51193, 51193, 300, 49263, 11, 264, 700, 472, 300, 18199, 412, 2099, 26354, 13, 51346, 51346, 1779, 13, 51396, 51396, 821, 311, 572, 1778, 291, 2809, 380, 33384, 13603, 13, 51510, 51510, 286, 519, 1780, 498, 321, 751, 466, 21156, 433, 11, 300, 1062, 312, 746, 300, 1487, 493, 13, 51802, 51802], "temperature": 0.0, "avg_logprob": -0.1612913343641493, "compression_ratio": 1.7083333333333333, "no_caption_prob": 1.4285321412899066e-05}, {"id": 185, "seek": 70036, "start": 721.0, "end": 723.28, "text": " There's no reason you couldn't accumulate errors.", "tokens": [50364, 583, 286, 7297, 309, 727, 445, 382, 731, 312, 13, 50528, 50528, 583, 286, 2041, 291, 393, 380, 534, 8991, 570, 309, 37808, 300, 309, 575, 264, 2978, 1589, 50800, 50800, 294, 1668, 281, 8991, 294, 1629, 30628, 13, 50898, 50898, 583, 411, 365, 257, 979, 19866, 11, 309, 311, 406, 516, 281, 5217, 264, 661, 979, 378, 433, 11, 264, 700, 472, 51193, 51193, 300, 49263, 11, 264, 700, 472, 300, 18199, 412, 2099, 26354, 13, 51346, 51346, 1779, 13, 51396, 51396, 821, 311, 572, 1778, 291, 2809, 380, 33384, 13603, 13, 51510, 51510, 286, 519, 1780, 498, 321, 751, 466, 21156, 433, 11, 300, 1062, 312, 746, 300, 1487, 493, 13, 51802, 51802], "temperature": 0.0, "avg_logprob": -0.1612913343641493, "compression_ratio": 1.7083333333333333, "no_caption_prob": 1.4285321412899066e-05}, {"id": 186, "seek": 70036, "start": 723.28, "end": 729.12, "text": " I think later if we talk about parsers, that might be something that comes up.", "tokens": [50364, 583, 286, 7297, 309, 727, 445, 382, 731, 312, 13, 50528, 50528, 583, 286, 2041, 291, 393, 380, 534, 8991, 570, 309, 37808, 300, 309, 575, 264, 2978, 1589, 50800, 50800, 294, 1668, 281, 8991, 294, 1629, 30628, 13, 50898, 50898, 583, 411, 365, 257, 979, 19866, 11, 309, 311, 406, 516, 281, 5217, 264, 661, 979, 378, 433, 11, 264, 700, 472, 51193, 51193, 300, 49263, 11, 264, 700, 472, 300, 18199, 412, 2099, 26354, 13, 51346, 51346, 1779, 13, 51396, 51396, 821, 311, 572, 1778, 291, 2809, 380, 33384, 13603, 13, 51510, 51510, 286, 519, 1780, 498, 321, 751, 466, 21156, 433, 11, 300, 1062, 312, 746, 300, 1487, 493, 13, 51802, 51802], "temperature": 0.0, "avg_logprob": -0.1612913343641493, "compression_ratio": 1.7083333333333333, "no_caption_prob": 1.4285321412899066e-05}, {"id": 187, "seek": 72912, "start": 729.12, "end": 730.6, "text": " Interesting.", "tokens": [50364, 14711, 13, 50438, 50438, 1033, 11, 370, 718, 311, 751, 466, 689, 512, 3190, 341, 5102, 11843, 13, 50654, 50654, 407, 321, 600, 9828, 322, 1310, 2699, 76, 31828, 11, 4974, 38662, 13, 50832, 50832, 467, 1062, 312, 3163, 1417, 257, 707, 857, 544, 466, 2699, 76, 31828, 570, 286, 519, 300, 311, 1310, 51012, 51012, 472, 295, 264, 3190, 689, 309, 311, 4098, 4420, 13, 51186, 51186, 14576, 869, 13, 51236, 51236, 286, 519, 337, 385, 11, 264, 19157, 420, 264, 4973, 2316, 300, 1985, 1151, 510, 307, 264, 1558, 295, 51580, 51580, 21928, 13, 51630, 51630], "temperature": 0.0, "avg_logprob": -0.20981149673461913, "compression_ratio": 1.596638655462185, "no_caption_prob": 2.7108597350888886e-05}, {"id": 188, "seek": 72912, "start": 730.6, "end": 734.92, "text": " Okay, so let's talk about where some places this pattern occurs.", "tokens": [50364, 14711, 13, 50438, 50438, 1033, 11, 370, 718, 311, 751, 466, 689, 512, 3190, 341, 5102, 11843, 13, 50654, 50654, 407, 321, 600, 9828, 322, 1310, 2699, 76, 31828, 11, 4974, 38662, 13, 50832, 50832, 467, 1062, 312, 3163, 1417, 257, 707, 857, 544, 466, 2699, 76, 31828, 570, 286, 519, 300, 311, 1310, 51012, 51012, 472, 295, 264, 3190, 689, 309, 311, 4098, 4420, 13, 51186, 51186, 14576, 869, 13, 51236, 51236, 286, 519, 337, 385, 11, 264, 19157, 420, 264, 4973, 2316, 300, 1985, 1151, 510, 307, 264, 1558, 295, 51580, 51580, 21928, 13, 51630, 51630], "temperature": 0.0, "avg_logprob": -0.20981149673461913, "compression_ratio": 1.596638655462185, "no_caption_prob": 2.7108597350888886e-05}, {"id": 189, "seek": 72912, "start": 734.92, "end": 738.48, "text": " So we've touched on maybe Elm JSON, random generators.", "tokens": [50364, 14711, 13, 50438, 50438, 1033, 11, 370, 718, 311, 751, 466, 689, 512, 3190, 341, 5102, 11843, 13, 50654, 50654, 407, 321, 600, 9828, 322, 1310, 2699, 76, 31828, 11, 4974, 38662, 13, 50832, 50832, 467, 1062, 312, 3163, 1417, 257, 707, 857, 544, 466, 2699, 76, 31828, 570, 286, 519, 300, 311, 1310, 51012, 51012, 472, 295, 264, 3190, 689, 309, 311, 4098, 4420, 13, 51186, 51186, 14576, 869, 13, 51236, 51236, 286, 519, 337, 385, 11, 264, 19157, 420, 264, 4973, 2316, 300, 1985, 1151, 510, 307, 264, 1558, 295, 51580, 51580, 21928, 13, 51630, 51630], "temperature": 0.0, "avg_logprob": -0.20981149673461913, "compression_ratio": 1.596638655462185, "no_caption_prob": 2.7108597350888886e-05}, {"id": 190, "seek": 72912, "start": 738.48, "end": 742.08, "text": " It might be worth talking a little bit more about Elm JSON because I think that's maybe", "tokens": [50364, 14711, 13, 50438, 50438, 1033, 11, 370, 718, 311, 751, 466, 689, 512, 3190, 341, 5102, 11843, 13, 50654, 50654, 407, 321, 600, 9828, 322, 1310, 2699, 76, 31828, 11, 4974, 38662, 13, 50832, 50832, 467, 1062, 312, 3163, 1417, 257, 707, 857, 544, 466, 2699, 76, 31828, 570, 286, 519, 300, 311, 1310, 51012, 51012, 472, 295, 264, 3190, 689, 309, 311, 4098, 4420, 13, 51186, 51186, 14576, 869, 13, 51236, 51236, 286, 519, 337, 385, 11, 264, 19157, 420, 264, 4973, 2316, 300, 1985, 1151, 510, 307, 264, 1558, 295, 51580, 51580, 21928, 13, 51630, 51630], "temperature": 0.0, "avg_logprob": -0.20981149673461913, "compression_ratio": 1.596638655462185, "no_caption_prob": 2.7108597350888886e-05}, {"id": 191, "seek": 72912, "start": 742.08, "end": 745.5600000000001, "text": " one of the places where it's particularly useful.", "tokens": [50364, 14711, 13, 50438, 50438, 1033, 11, 370, 718, 311, 751, 466, 689, 512, 3190, 341, 5102, 11843, 13, 50654, 50654, 407, 321, 600, 9828, 322, 1310, 2699, 76, 31828, 11, 4974, 38662, 13, 50832, 50832, 467, 1062, 312, 3163, 1417, 257, 707, 857, 544, 466, 2699, 76, 31828, 570, 286, 519, 300, 311, 1310, 51012, 51012, 472, 295, 264, 3190, 689, 309, 311, 4098, 4420, 13, 51186, 51186, 14576, 869, 13, 51236, 51236, 286, 519, 337, 385, 11, 264, 19157, 420, 264, 4973, 2316, 300, 1985, 1151, 510, 307, 264, 1558, 295, 51580, 51580, 21928, 13, 51630, 51630], "temperature": 0.0, "avg_logprob": -0.20981149673461913, "compression_ratio": 1.596638655462185, "no_caption_prob": 2.7108597350888886e-05}, {"id": 192, "seek": 72912, "start": 745.5600000000001, "end": 746.5600000000001, "text": " Sounds great.", "tokens": [50364, 14711, 13, 50438, 50438, 1033, 11, 370, 718, 311, 751, 466, 689, 512, 3190, 341, 5102, 11843, 13, 50654, 50654, 407, 321, 600, 9828, 322, 1310, 2699, 76, 31828, 11, 4974, 38662, 13, 50832, 50832, 467, 1062, 312, 3163, 1417, 257, 707, 857, 544, 466, 2699, 76, 31828, 570, 286, 519, 300, 311, 1310, 51012, 51012, 472, 295, 264, 3190, 689, 309, 311, 4098, 4420, 13, 51186, 51186, 14576, 869, 13, 51236, 51236, 286, 519, 337, 385, 11, 264, 19157, 420, 264, 4973, 2316, 300, 1985, 1151, 510, 307, 264, 1558, 295, 51580, 51580, 21928, 13, 51630, 51630], "temperature": 0.0, "avg_logprob": -0.20981149673461913, "compression_ratio": 1.596638655462185, "no_caption_prob": 2.7108597350888886e-05}, {"id": 193, "seek": 72912, "start": 746.5600000000001, "end": 753.44, "text": " I think for me, the metaphor or the mental model that works best here is the idea of", "tokens": [50364, 14711, 13, 50438, 50438, 1033, 11, 370, 718, 311, 751, 466, 689, 512, 3190, 341, 5102, 11843, 13, 50654, 50654, 407, 321, 600, 9828, 322, 1310, 2699, 76, 31828, 11, 4974, 38662, 13, 50832, 50832, 467, 1062, 312, 3163, 1417, 257, 707, 857, 544, 466, 2699, 76, 31828, 570, 286, 519, 300, 311, 1310, 51012, 51012, 472, 295, 264, 3190, 689, 309, 311, 4098, 4420, 13, 51186, 51186, 14576, 869, 13, 51236, 51236, 286, 519, 337, 385, 11, 264, 19157, 420, 264, 4973, 2316, 300, 1985, 1151, 510, 307, 264, 1558, 295, 51580, 51580, 21928, 13, 51630, 51630], "temperature": 0.0, "avg_logprob": -0.20981149673461913, "compression_ratio": 1.596638655462185, "no_caption_prob": 2.7108597350888886e-05}, {"id": 194, "seek": 72912, "start": 753.44, "end": 754.44, "text": " combining.", "tokens": [50364, 14711, 13, 50438, 50438, 1033, 11, 370, 718, 311, 751, 466, 689, 512, 3190, 341, 5102, 11843, 13, 50654, 50654, 407, 321, 600, 9828, 322, 1310, 2699, 76, 31828, 11, 4974, 38662, 13, 50832, 50832, 467, 1062, 312, 3163, 1417, 257, 707, 857, 544, 466, 2699, 76, 31828, 570, 286, 519, 300, 311, 1310, 51012, 51012, 472, 295, 264, 3190, 689, 309, 311, 4098, 4420, 13, 51186, 51186, 14576, 869, 13, 51236, 51236, 286, 519, 337, 385, 11, 264, 19157, 420, 264, 4973, 2316, 300, 1985, 1151, 510, 307, 264, 1558, 295, 51580, 51580, 21928, 13, 51630, 51630], "temperature": 0.0, "avg_logprob": -0.20981149673461913, "compression_ratio": 1.596638655462185, "no_caption_prob": 2.7108597350888886e-05}, {"id": 195, "seek": 75444, "start": 754.44, "end": 761.8800000000001, "text": " So when we're parsing JSON, typically we're pointing to a particular path in the JSON", "tokens": [50364, 407, 562, 321, 434, 21156, 278, 31828, 11, 5850, 321, 434, 12166, 281, 257, 1729, 3100, 294, 264, 31828, 50736, 50736, 4230, 13, 50786, 50786, 492, 434, 1566, 294, 341, 2519, 11, 979, 1429, 341, 2158, 382, 257, 6798, 420, 24922, 420, 746, 411, 300, 13, 51090, 51090, 583, 2673, 321, 528, 281, 1401, 544, 813, 472, 2158, 484, 295, 264, 31828, 13, 51274, 51274, 407, 321, 528, 281, 584, 412, 341, 2519, 11, 1401, 341, 24922, 13, 51384, 51384, 1711, 341, 661, 2519, 11, 1401, 341, 6798, 13, 51507, 51507, 1711, 341, 2636, 2519, 11, 1401, 257, 23351, 28499, 13, 51640, 51640], "temperature": 0.0, "avg_logprob": -0.1467837651570638, "compression_ratio": 1.8480392156862746, "no_caption_prob": 8.397887540922966e-06}, {"id": 196, "seek": 75444, "start": 761.8800000000001, "end": 762.8800000000001, "text": " tree.", "tokens": [50364, 407, 562, 321, 434, 21156, 278, 31828, 11, 5850, 321, 434, 12166, 281, 257, 1729, 3100, 294, 264, 31828, 50736, 50736, 4230, 13, 50786, 50786, 492, 434, 1566, 294, 341, 2519, 11, 979, 1429, 341, 2158, 382, 257, 6798, 420, 24922, 420, 746, 411, 300, 13, 51090, 51090, 583, 2673, 321, 528, 281, 1401, 544, 813, 472, 2158, 484, 295, 264, 31828, 13, 51274, 51274, 407, 321, 528, 281, 584, 412, 341, 2519, 11, 1401, 341, 24922, 13, 51384, 51384, 1711, 341, 661, 2519, 11, 1401, 341, 6798, 13, 51507, 51507, 1711, 341, 2636, 2519, 11, 1401, 257, 23351, 28499, 13, 51640, 51640], "temperature": 0.0, "avg_logprob": -0.1467837651570638, "compression_ratio": 1.8480392156862746, "no_caption_prob": 8.397887540922966e-06}, {"id": 197, "seek": 75444, "start": 762.8800000000001, "end": 768.96, "text": " We're saying in this field, decode this value as a string or integer or something like that.", "tokens": [50364, 407, 562, 321, 434, 21156, 278, 31828, 11, 5850, 321, 434, 12166, 281, 257, 1729, 3100, 294, 264, 31828, 50736, 50736, 4230, 13, 50786, 50786, 492, 434, 1566, 294, 341, 2519, 11, 979, 1429, 341, 2158, 382, 257, 6798, 420, 24922, 420, 746, 411, 300, 13, 51090, 51090, 583, 2673, 321, 528, 281, 1401, 544, 813, 472, 2158, 484, 295, 264, 31828, 13, 51274, 51274, 407, 321, 528, 281, 584, 412, 341, 2519, 11, 1401, 341, 24922, 13, 51384, 51384, 1711, 341, 661, 2519, 11, 1401, 341, 6798, 13, 51507, 51507, 1711, 341, 2636, 2519, 11, 1401, 257, 23351, 28499, 13, 51640, 51640], "temperature": 0.0, "avg_logprob": -0.1467837651570638, "compression_ratio": 1.8480392156862746, "no_caption_prob": 8.397887540922966e-06}, {"id": 198, "seek": 75444, "start": 768.96, "end": 772.6400000000001, "text": " But usually we want to read more than one value out of the JSON.", "tokens": [50364, 407, 562, 321, 434, 21156, 278, 31828, 11, 5850, 321, 434, 12166, 281, 257, 1729, 3100, 294, 264, 31828, 50736, 50736, 4230, 13, 50786, 50786, 492, 434, 1566, 294, 341, 2519, 11, 979, 1429, 341, 2158, 382, 257, 6798, 420, 24922, 420, 746, 411, 300, 13, 51090, 51090, 583, 2673, 321, 528, 281, 1401, 544, 813, 472, 2158, 484, 295, 264, 31828, 13, 51274, 51274, 407, 321, 528, 281, 584, 412, 341, 2519, 11, 1401, 341, 24922, 13, 51384, 51384, 1711, 341, 661, 2519, 11, 1401, 341, 6798, 13, 51507, 51507, 1711, 341, 2636, 2519, 11, 1401, 257, 23351, 28499, 13, 51640, 51640], "temperature": 0.0, "avg_logprob": -0.1467837651570638, "compression_ratio": 1.8480392156862746, "no_caption_prob": 8.397887540922966e-06}, {"id": 199, "seek": 75444, "start": 772.6400000000001, "end": 774.84, "text": " So we want to say at this field, read this integer.", "tokens": [50364, 407, 562, 321, 434, 21156, 278, 31828, 11, 5850, 321, 434, 12166, 281, 257, 1729, 3100, 294, 264, 31828, 50736, 50736, 4230, 13, 50786, 50786, 492, 434, 1566, 294, 341, 2519, 11, 979, 1429, 341, 2158, 382, 257, 6798, 420, 24922, 420, 746, 411, 300, 13, 51090, 51090, 583, 2673, 321, 528, 281, 1401, 544, 813, 472, 2158, 484, 295, 264, 31828, 13, 51274, 51274, 407, 321, 528, 281, 584, 412, 341, 2519, 11, 1401, 341, 24922, 13, 51384, 51384, 1711, 341, 661, 2519, 11, 1401, 341, 6798, 13, 51507, 51507, 1711, 341, 2636, 2519, 11, 1401, 257, 23351, 28499, 13, 51640, 51640], "temperature": 0.0, "avg_logprob": -0.1467837651570638, "compression_ratio": 1.8480392156862746, "no_caption_prob": 8.397887540922966e-06}, {"id": 200, "seek": 75444, "start": 774.84, "end": 777.3000000000001, "text": " At this other field, read this string.", "tokens": [50364, 407, 562, 321, 434, 21156, 278, 31828, 11, 5850, 321, 434, 12166, 281, 257, 1729, 3100, 294, 264, 31828, 50736, 50736, 4230, 13, 50786, 50786, 492, 434, 1566, 294, 341, 2519, 11, 979, 1429, 341, 2158, 382, 257, 6798, 420, 24922, 420, 746, 411, 300, 13, 51090, 51090, 583, 2673, 321, 528, 281, 1401, 544, 813, 472, 2158, 484, 295, 264, 31828, 13, 51274, 51274, 407, 321, 528, 281, 584, 412, 341, 2519, 11, 1401, 341, 24922, 13, 51384, 51384, 1711, 341, 661, 2519, 11, 1401, 341, 6798, 13, 51507, 51507, 1711, 341, 2636, 2519, 11, 1401, 257, 23351, 28499, 13, 51640, 51640], "temperature": 0.0, "avg_logprob": -0.1467837651570638, "compression_ratio": 1.8480392156862746, "no_caption_prob": 8.397887540922966e-06}, {"id": 201, "seek": 75444, "start": 777.3000000000001, "end": 779.96, "text": " At this third field, read a Boolean.", "tokens": [50364, 407, 562, 321, 434, 21156, 278, 31828, 11, 5850, 321, 434, 12166, 281, 257, 1729, 3100, 294, 264, 31828, 50736, 50736, 4230, 13, 50786, 50786, 492, 434, 1566, 294, 341, 2519, 11, 979, 1429, 341, 2158, 382, 257, 6798, 420, 24922, 420, 746, 411, 300, 13, 51090, 51090, 583, 2673, 321, 528, 281, 1401, 544, 813, 472, 2158, 484, 295, 264, 31828, 13, 51274, 51274, 407, 321, 528, 281, 584, 412, 341, 2519, 11, 1401, 341, 24922, 13, 51384, 51384, 1711, 341, 661, 2519, 11, 1401, 341, 6798, 13, 51507, 51507, 1711, 341, 2636, 2519, 11, 1401, 257, 23351, 28499, 13, 51640, 51640], "temperature": 0.0, "avg_logprob": -0.1467837651570638, "compression_ratio": 1.8480392156862746, "no_caption_prob": 8.397887540922966e-06}, {"id": 202, "seek": 77996, "start": 779.96, "end": 785.84, "text": " And then give me all three values back and let me combine them into some custom Elm value.", "tokens": [50364, 400, 550, 976, 385, 439, 1045, 4190, 646, 293, 718, 385, 10432, 552, 666, 512, 2375, 2699, 76, 2158, 13, 50658, 50658, 400, 370, 321, 393, 2464, 2609, 979, 378, 433, 337, 1184, 295, 264, 3755, 295, 1412, 11, 457, 550, 321, 643, 50902, 50902, 257, 636, 281, 10432, 439, 1045, 1214, 13, 51082, 51082, 400, 300, 311, 689, 264, 18350, 6828, 808, 294, 13, 51214, 51214, 759, 321, 434, 21928, 1045, 3755, 11, 309, 576, 312, 257, 4471, 1045, 13, 51376, 51376, 400, 1338, 11, 337, 385, 11, 341, 4973, 2316, 1953, 295, 552, 382, 21928, 6828, 11, 286, 519, 307, 51718, 51718], "temperature": 0.0, "avg_logprob": -0.12652095758690024, "compression_ratio": 1.7372881355932204, "no_caption_prob": 1.9525496099959128e-05}, {"id": 203, "seek": 77996, "start": 785.84, "end": 790.72, "text": " And so we can write individual decoders for each of the pieces of data, but then we need", "tokens": [50364, 400, 550, 976, 385, 439, 1045, 4190, 646, 293, 718, 385, 10432, 552, 666, 512, 2375, 2699, 76, 2158, 13, 50658, 50658, 400, 370, 321, 393, 2464, 2609, 979, 378, 433, 337, 1184, 295, 264, 3755, 295, 1412, 11, 457, 550, 321, 643, 50902, 50902, 257, 636, 281, 10432, 439, 1045, 1214, 13, 51082, 51082, 400, 300, 311, 689, 264, 18350, 6828, 808, 294, 13, 51214, 51214, 759, 321, 434, 21928, 1045, 3755, 11, 309, 576, 312, 257, 4471, 1045, 13, 51376, 51376, 400, 1338, 11, 337, 385, 11, 341, 4973, 2316, 1953, 295, 552, 382, 21928, 6828, 11, 286, 519, 307, 51718, 51718], "temperature": 0.0, "avg_logprob": -0.12652095758690024, "compression_ratio": 1.7372881355932204, "no_caption_prob": 1.9525496099959128e-05}, {"id": 204, "seek": 77996, "start": 790.72, "end": 794.32, "text": " a way to combine all three together.", "tokens": [50364, 400, 550, 976, 385, 439, 1045, 4190, 646, 293, 718, 385, 10432, 552, 666, 512, 2375, 2699, 76, 2158, 13, 50658, 50658, 400, 370, 321, 393, 2464, 2609, 979, 378, 433, 337, 1184, 295, 264, 3755, 295, 1412, 11, 457, 550, 321, 643, 50902, 50902, 257, 636, 281, 10432, 439, 1045, 1214, 13, 51082, 51082, 400, 300, 311, 689, 264, 18350, 6828, 808, 294, 13, 51214, 51214, 759, 321, 434, 21928, 1045, 3755, 11, 309, 576, 312, 257, 4471, 1045, 13, 51376, 51376, 400, 1338, 11, 337, 385, 11, 341, 4973, 2316, 1953, 295, 552, 382, 21928, 6828, 11, 286, 519, 307, 51718, 51718], "temperature": 0.0, "avg_logprob": -0.12652095758690024, "compression_ratio": 1.7372881355932204, "no_caption_prob": 1.9525496099959128e-05}, {"id": 205, "seek": 77996, "start": 794.32, "end": 796.96, "text": " And that's where the mapping functions come in.", "tokens": [50364, 400, 550, 976, 385, 439, 1045, 4190, 646, 293, 718, 385, 10432, 552, 666, 512, 2375, 2699, 76, 2158, 13, 50658, 50658, 400, 370, 321, 393, 2464, 2609, 979, 378, 433, 337, 1184, 295, 264, 3755, 295, 1412, 11, 457, 550, 321, 643, 50902, 50902, 257, 636, 281, 10432, 439, 1045, 1214, 13, 51082, 51082, 400, 300, 311, 689, 264, 18350, 6828, 808, 294, 13, 51214, 51214, 759, 321, 434, 21928, 1045, 3755, 11, 309, 576, 312, 257, 4471, 1045, 13, 51376, 51376, 400, 1338, 11, 337, 385, 11, 341, 4973, 2316, 1953, 295, 552, 382, 21928, 6828, 11, 286, 519, 307, 51718, 51718], "temperature": 0.0, "avg_logprob": -0.12652095758690024, "compression_ratio": 1.7372881355932204, "no_caption_prob": 1.9525496099959128e-05}, {"id": 206, "seek": 77996, "start": 796.96, "end": 800.2, "text": " If we're combining three pieces, it would be a map three.", "tokens": [50364, 400, 550, 976, 385, 439, 1045, 4190, 646, 293, 718, 385, 10432, 552, 666, 512, 2375, 2699, 76, 2158, 13, 50658, 50658, 400, 370, 321, 393, 2464, 2609, 979, 378, 433, 337, 1184, 295, 264, 3755, 295, 1412, 11, 457, 550, 321, 643, 50902, 50902, 257, 636, 281, 10432, 439, 1045, 1214, 13, 51082, 51082, 400, 300, 311, 689, 264, 18350, 6828, 808, 294, 13, 51214, 51214, 759, 321, 434, 21928, 1045, 3755, 11, 309, 576, 312, 257, 4471, 1045, 13, 51376, 51376, 400, 1338, 11, 337, 385, 11, 341, 4973, 2316, 1953, 295, 552, 382, 21928, 6828, 11, 286, 519, 307, 51718, 51718], "temperature": 0.0, "avg_logprob": -0.12652095758690024, "compression_ratio": 1.7372881355932204, "no_caption_prob": 1.9525496099959128e-05}, {"id": 207, "seek": 77996, "start": 800.2, "end": 807.0400000000001, "text": " And yeah, for me, this mental model thinking of them as combining functions, I think is", "tokens": [50364, 400, 550, 976, 385, 439, 1045, 4190, 646, 293, 718, 385, 10432, 552, 666, 512, 2375, 2699, 76, 2158, 13, 50658, 50658, 400, 370, 321, 393, 2464, 2609, 979, 378, 433, 337, 1184, 295, 264, 3755, 295, 1412, 11, 457, 550, 321, 643, 50902, 50902, 257, 636, 281, 10432, 439, 1045, 1214, 13, 51082, 51082, 400, 300, 311, 689, 264, 18350, 6828, 808, 294, 13, 51214, 51214, 759, 321, 434, 21928, 1045, 3755, 11, 309, 576, 312, 257, 4471, 1045, 13, 51376, 51376, 400, 1338, 11, 337, 385, 11, 341, 4973, 2316, 1953, 295, 552, 382, 21928, 6828, 11, 286, 519, 307, 51718, 51718], "temperature": 0.0, "avg_logprob": -0.12652095758690024, "compression_ratio": 1.7372881355932204, "no_caption_prob": 1.9525496099959128e-05}, {"id": 208, "seek": 80704, "start": 807.04, "end": 810.4, "text": " most apt when thinking about decoders.", "tokens": [50364, 881, 29427, 562, 1953, 466, 979, 378, 433, 13, 50532, 50532, 6659, 3778, 339, 293, 575, 341, 3410, 295, 411, 25812, 21841, 3250, 11, 286, 519, 415, 5498, 309, 13, 50822, 50822, 400, 415, 6686, 466, 341, 5102, 337, 411, 257, 979, 19866, 420, 18350, 721, 1214, 300, 291, 51126, 51126, 362, 613, 1333, 295, 7472, 10218, 13, 51228, 51228, 759, 291, 3036, 257, 17716, 294, 264, 30073, 689, 291, 393, 7472, 766, 1296, 613, 732, 819, 51514, 51514, 11095, 293, 472, 295, 264, 11095, 307, 1333, 295, 364, 6713, 3513, 293, 264, 661, 472, 307, 51790, 51790], "temperature": 0.0, "avg_logprob": -0.14016663551330566, "compression_ratio": 1.7188755020080322, "no_caption_prob": 1.0289067176927347e-05}, {"id": 209, "seek": 80704, "start": 810.4, "end": 816.1999999999999, "text": " Scott Welch and has this concept of like railway oriented development, I think he calls it.", "tokens": [50364, 881, 29427, 562, 1953, 466, 979, 378, 433, 13, 50532, 50532, 6659, 3778, 339, 293, 575, 341, 3410, 295, 411, 25812, 21841, 3250, 11, 286, 519, 415, 5498, 309, 13, 50822, 50822, 400, 415, 6686, 466, 341, 5102, 337, 411, 257, 979, 19866, 420, 18350, 721, 1214, 300, 291, 51126, 51126, 362, 613, 1333, 295, 7472, 10218, 13, 51228, 51228, 759, 291, 3036, 257, 17716, 294, 264, 30073, 689, 291, 393, 7472, 766, 1296, 613, 732, 819, 51514, 51514, 11095, 293, 472, 295, 264, 11095, 307, 1333, 295, 364, 6713, 3513, 293, 264, 661, 472, 307, 51790, 51790], "temperature": 0.0, "avg_logprob": -0.14016663551330566, "compression_ratio": 1.7188755020080322, "no_caption_prob": 1.0289067176927347e-05}, {"id": 210, "seek": 80704, "start": 816.1999999999999, "end": 822.28, "text": " And he talks about this pattern for like a decoder or mapping things together that you", "tokens": [50364, 881, 29427, 562, 1953, 466, 979, 378, 433, 13, 50532, 50532, 6659, 3778, 339, 293, 575, 341, 3410, 295, 411, 25812, 21841, 3250, 11, 286, 519, 415, 5498, 309, 13, 50822, 50822, 400, 415, 6686, 466, 341, 5102, 337, 411, 257, 979, 19866, 420, 18350, 721, 1214, 300, 291, 51126, 51126, 362, 613, 1333, 295, 7472, 10218, 13, 51228, 51228, 759, 291, 3036, 257, 17716, 294, 264, 30073, 689, 291, 393, 7472, 766, 1296, 613, 732, 819, 51514, 51514, 11095, 293, 472, 295, 264, 11095, 307, 1333, 295, 364, 6713, 3513, 293, 264, 661, 472, 307, 51790, 51790], "temperature": 0.0, "avg_logprob": -0.14016663551330566, "compression_ratio": 1.7188755020080322, "no_caption_prob": 1.0289067176927347e-05}, {"id": 211, "seek": 80704, "start": 822.28, "end": 824.3199999999999, "text": " have these sort of split tracks.", "tokens": [50364, 881, 29427, 562, 1953, 466, 979, 378, 433, 13, 50532, 50532, 6659, 3778, 339, 293, 575, 341, 3410, 295, 411, 25812, 21841, 3250, 11, 286, 519, 415, 5498, 309, 13, 50822, 50822, 400, 415, 6686, 466, 341, 5102, 337, 411, 257, 979, 19866, 420, 18350, 721, 1214, 300, 291, 51126, 51126, 362, 613, 1333, 295, 7472, 10218, 13, 51228, 51228, 759, 291, 3036, 257, 17716, 294, 264, 30073, 689, 291, 393, 7472, 766, 1296, 613, 732, 819, 51514, 51514, 11095, 293, 472, 295, 264, 11095, 307, 1333, 295, 364, 6713, 3513, 293, 264, 661, 472, 307, 51790, 51790], "temperature": 0.0, "avg_logprob": -0.14016663551330566, "compression_ratio": 1.7188755020080322, "no_caption_prob": 1.0289067176927347e-05}, {"id": 212, "seek": 80704, "start": 824.3199999999999, "end": 830.04, "text": " If you picture a fork in the railroad where you can split off between these two different", "tokens": [50364, 881, 29427, 562, 1953, 466, 979, 378, 433, 13, 50532, 50532, 6659, 3778, 339, 293, 575, 341, 3410, 295, 411, 25812, 21841, 3250, 11, 286, 519, 415, 5498, 309, 13, 50822, 50822, 400, 415, 6686, 466, 341, 5102, 337, 411, 257, 979, 19866, 420, 18350, 721, 1214, 300, 291, 51126, 51126, 362, 613, 1333, 295, 7472, 10218, 13, 51228, 51228, 759, 291, 3036, 257, 17716, 294, 264, 30073, 689, 291, 393, 7472, 766, 1296, 613, 732, 819, 51514, 51514, 11095, 293, 472, 295, 264, 11095, 307, 1333, 295, 364, 6713, 3513, 293, 264, 661, 472, 307, 51790, 51790], "temperature": 0.0, "avg_logprob": -0.14016663551330566, "compression_ratio": 1.7188755020080322, "no_caption_prob": 1.0289067176927347e-05}, {"id": 213, "seek": 80704, "start": 830.04, "end": 835.56, "text": " directions and one of the directions is sort of an error direction and the other one is", "tokens": [50364, 881, 29427, 562, 1953, 466, 979, 378, 433, 13, 50532, 50532, 6659, 3778, 339, 293, 575, 341, 3410, 295, 411, 25812, 21841, 3250, 11, 286, 519, 415, 5498, 309, 13, 50822, 50822, 400, 415, 6686, 466, 341, 5102, 337, 411, 257, 979, 19866, 420, 18350, 721, 1214, 300, 291, 51126, 51126, 362, 613, 1333, 295, 7472, 10218, 13, 51228, 51228, 759, 291, 3036, 257, 17716, 294, 264, 30073, 689, 291, 393, 7472, 766, 1296, 613, 732, 819, 51514, 51514, 11095, 293, 472, 295, 264, 11095, 307, 1333, 295, 364, 6713, 3513, 293, 264, 661, 472, 307, 51790, 51790], "temperature": 0.0, "avg_logprob": -0.14016663551330566, "compression_ratio": 1.7188755020080322, "no_caption_prob": 1.0289067176927347e-05}, {"id": 214, "seek": 83556, "start": 835.56, "end": 838.0, "text": " like a green success direction.", "tokens": [50364, 411, 257, 3092, 2245, 3513, 13, 50486, 50486, 407, 291, 4471, 1214, 257, 31828, 979, 19866, 300, 16137, 766, 1732, 819, 7909, 490, 257, 4195, 293, 50883, 50883, 309, 33280, 552, 281, 312, 2107, 18184, 293, 295, 613, 2685, 3467, 13, 51080, 51080, 400, 382, 309, 16137, 552, 766, 11, 309, 311, 516, 2051, 264, 3092, 30073, 13, 51262, 51262, 400, 498, 604, 295, 729, 307, 18184, 40452, 11, 586, 309, 393, 747, 300, 661, 2837, 293, 352, 281, 51504, 51504, 264, 2182, 2837, 13, 51554, 51554], "temperature": 0.0, "avg_logprob": -0.07639979244617934, "compression_ratio": 1.5688073394495412, "no_caption_prob": 1.248268404197006e-06}, {"id": 215, "seek": 83556, "start": 838.0, "end": 845.9399999999999, "text": " So you map together a JSON decoder that picks off five different fields from a user and", "tokens": [50364, 411, 257, 3092, 2245, 3513, 13, 50486, 50486, 407, 291, 4471, 1214, 257, 31828, 979, 19866, 300, 16137, 766, 1732, 819, 7909, 490, 257, 4195, 293, 50883, 50883, 309, 33280, 552, 281, 312, 2107, 18184, 293, 295, 613, 2685, 3467, 13, 51080, 51080, 400, 382, 309, 16137, 552, 766, 11, 309, 311, 516, 2051, 264, 3092, 30073, 13, 51262, 51262, 400, 498, 604, 295, 729, 307, 18184, 40452, 11, 586, 309, 393, 747, 300, 661, 2837, 293, 352, 281, 51504, 51504, 264, 2182, 2837, 13, 51554, 51554], "temperature": 0.0, "avg_logprob": -0.07639979244617934, "compression_ratio": 1.5688073394495412, "no_caption_prob": 1.248268404197006e-06}, {"id": 216, "seek": 83556, "start": 845.9399999999999, "end": 849.88, "text": " it expects them to be non null and of these specific types.", "tokens": [50364, 411, 257, 3092, 2245, 3513, 13, 50486, 50486, 407, 291, 4471, 1214, 257, 31828, 979, 19866, 300, 16137, 766, 1732, 819, 7909, 490, 257, 4195, 293, 50883, 50883, 309, 33280, 552, 281, 312, 2107, 18184, 293, 295, 613, 2685, 3467, 13, 51080, 51080, 400, 382, 309, 16137, 552, 766, 11, 309, 311, 516, 2051, 264, 3092, 30073, 13, 51262, 51262, 400, 498, 604, 295, 729, 307, 18184, 40452, 11, 586, 309, 393, 747, 300, 661, 2837, 293, 352, 281, 51504, 51504, 264, 2182, 2837, 13, 51554, 51554], "temperature": 0.0, "avg_logprob": -0.07639979244617934, "compression_ratio": 1.5688073394495412, "no_caption_prob": 1.248268404197006e-06}, {"id": 217, "seek": 83556, "start": 849.88, "end": 853.52, "text": " And as it picks them off, it's going along the green railroad.", "tokens": [50364, 411, 257, 3092, 2245, 3513, 13, 50486, 50486, 407, 291, 4471, 1214, 257, 31828, 979, 19866, 300, 16137, 766, 1732, 819, 7909, 490, 257, 4195, 293, 50883, 50883, 309, 33280, 552, 281, 312, 2107, 18184, 293, 295, 613, 2685, 3467, 13, 51080, 51080, 400, 382, 309, 16137, 552, 766, 11, 309, 311, 516, 2051, 264, 3092, 30073, 13, 51262, 51262, 400, 498, 604, 295, 729, 307, 18184, 40452, 11, 586, 309, 393, 747, 300, 661, 2837, 293, 352, 281, 51504, 51504, 264, 2182, 2837, 13, 51554, 51554], "temperature": 0.0, "avg_logprob": -0.07639979244617934, "compression_ratio": 1.5688073394495412, "no_caption_prob": 1.248268404197006e-06}, {"id": 218, "seek": 83556, "start": 853.52, "end": 858.3599999999999, "text": " And if any of those is null unexpectedly, now it can take that other track and go to", "tokens": [50364, 411, 257, 3092, 2245, 3513, 13, 50486, 50486, 407, 291, 4471, 1214, 257, 31828, 979, 19866, 300, 16137, 766, 1732, 819, 7909, 490, 257, 4195, 293, 50883, 50883, 309, 33280, 552, 281, 312, 2107, 18184, 293, 295, 613, 2685, 3467, 13, 51080, 51080, 400, 382, 309, 16137, 552, 766, 11, 309, 311, 516, 2051, 264, 3092, 30073, 13, 51262, 51262, 400, 498, 604, 295, 729, 307, 18184, 40452, 11, 586, 309, 393, 747, 300, 661, 2837, 293, 352, 281, 51504, 51504, 264, 2182, 2837, 13, 51554, 51554], "temperature": 0.0, "avg_logprob": -0.07639979244617934, "compression_ratio": 1.5688073394495412, "no_caption_prob": 1.248268404197006e-06}, {"id": 219, "seek": 83556, "start": 858.3599999999999, "end": 859.3599999999999, "text": " the red track.", "tokens": [50364, 411, 257, 3092, 2245, 3513, 13, 50486, 50486, 407, 291, 4471, 1214, 257, 31828, 979, 19866, 300, 16137, 766, 1732, 819, 7909, 490, 257, 4195, 293, 50883, 50883, 309, 33280, 552, 281, 312, 2107, 18184, 293, 295, 613, 2685, 3467, 13, 51080, 51080, 400, 382, 309, 16137, 552, 766, 11, 309, 311, 516, 2051, 264, 3092, 30073, 13, 51262, 51262, 400, 498, 604, 295, 729, 307, 18184, 40452, 11, 586, 309, 393, 747, 300, 661, 2837, 293, 352, 281, 51504, 51504, 264, 2182, 2837, 13, 51554, 51554], "temperature": 0.0, "avg_logprob": -0.07639979244617934, "compression_ratio": 1.5688073394495412, "no_caption_prob": 1.248268404197006e-06}, {"id": 220, "seek": 85936, "start": 859.36, "end": 866.72, "text": " And suddenly, and you can imagine each time you apply a map, it's branching off and there's", "tokens": [50364, 400, 5800, 11, 293, 291, 393, 3811, 1184, 565, 291, 3079, 257, 4471, 11, 309, 311, 9819, 278, 766, 293, 456, 311, 50732, 50732, 1071, 1333, 295, 257, 777, 3092, 2837, 337, 309, 281, 9819, 766, 295, 13, 50960, 50960, 583, 309, 393, 1009, 352, 760, 300, 2182, 2837, 13, 51098, 51098, 400, 264, 2182, 2837, 11, 309, 311, 445, 3480, 2051, 257, 1421, 901, 3100, 13, 51261, 51261, 407, 2602, 295, 9275, 544, 1412, 293, 21928, 309, 1214, 11, 291, 445, 483, 300, 6713, 2997, 51562, 51562, 807, 300, 2099, 3510, 84, 1226, 6713, 1412, 13, 51676, 51676, 286, 959, 264, 5056, 19157, 300, 415, 4960, 13, 51858, 51858], "temperature": 0.0, "avg_logprob": -0.14520623002733504, "compression_ratio": 1.6796875, "no_caption_prob": 6.204828241607174e-05}, {"id": 221, "seek": 85936, "start": 866.72, "end": 871.28, "text": " another sort of a new green track for it to branch off of.", "tokens": [50364, 400, 5800, 11, 293, 291, 393, 3811, 1184, 565, 291, 3079, 257, 4471, 11, 309, 311, 9819, 278, 766, 293, 456, 311, 50732, 50732, 1071, 1333, 295, 257, 777, 3092, 2837, 337, 309, 281, 9819, 766, 295, 13, 50960, 50960, 583, 309, 393, 1009, 352, 760, 300, 2182, 2837, 13, 51098, 51098, 400, 264, 2182, 2837, 11, 309, 311, 445, 3480, 2051, 257, 1421, 901, 3100, 13, 51261, 51261, 407, 2602, 295, 9275, 544, 1412, 293, 21928, 309, 1214, 11, 291, 445, 483, 300, 6713, 2997, 51562, 51562, 807, 300, 2099, 3510, 84, 1226, 6713, 1412, 13, 51676, 51676, 286, 959, 264, 5056, 19157, 300, 415, 4960, 13, 51858, 51858], "temperature": 0.0, "avg_logprob": -0.14520623002733504, "compression_ratio": 1.6796875, "no_caption_prob": 6.204828241607174e-05}, {"id": 222, "seek": 85936, "start": 871.28, "end": 874.04, "text": " But it can always go down that red track.", "tokens": [50364, 400, 5800, 11, 293, 291, 393, 3811, 1184, 565, 291, 3079, 257, 4471, 11, 309, 311, 9819, 278, 766, 293, 456, 311, 50732, 50732, 1071, 1333, 295, 257, 777, 3092, 2837, 337, 309, 281, 9819, 766, 295, 13, 50960, 50960, 583, 309, 393, 1009, 352, 760, 300, 2182, 2837, 13, 51098, 51098, 400, 264, 2182, 2837, 11, 309, 311, 445, 3480, 2051, 257, 1421, 901, 3100, 13, 51261, 51261, 407, 2602, 295, 9275, 544, 1412, 293, 21928, 309, 1214, 11, 291, 445, 483, 300, 6713, 2997, 51562, 51562, 807, 300, 2099, 3510, 84, 1226, 6713, 1412, 13, 51676, 51676, 286, 959, 264, 5056, 19157, 300, 415, 4960, 13, 51858, 51858], "temperature": 0.0, "avg_logprob": -0.14520623002733504, "compression_ratio": 1.6796875, "no_caption_prob": 6.204828241607174e-05}, {"id": 223, "seek": 85936, "start": 874.04, "end": 877.3000000000001, "text": " And the red track, it's just following along a continual path.", "tokens": [50364, 400, 5800, 11, 293, 291, 393, 3811, 1184, 565, 291, 3079, 257, 4471, 11, 309, 311, 9819, 278, 766, 293, 456, 311, 50732, 50732, 1071, 1333, 295, 257, 777, 3092, 2837, 337, 309, 281, 9819, 766, 295, 13, 50960, 50960, 583, 309, 393, 1009, 352, 760, 300, 2182, 2837, 13, 51098, 51098, 400, 264, 2182, 2837, 11, 309, 311, 445, 3480, 2051, 257, 1421, 901, 3100, 13, 51261, 51261, 407, 2602, 295, 9275, 544, 1412, 293, 21928, 309, 1214, 11, 291, 445, 483, 300, 6713, 2997, 51562, 51562, 807, 300, 2099, 3510, 84, 1226, 6713, 1412, 13, 51676, 51676, 286, 959, 264, 5056, 19157, 300, 415, 4960, 13, 51858, 51858], "temperature": 0.0, "avg_logprob": -0.14520623002733504, "compression_ratio": 1.6796875, "no_caption_prob": 6.204828241607174e-05}, {"id": 224, "seek": 85936, "start": 877.3000000000001, "end": 883.32, "text": " So instead of applying more data and combining it together, you just get that error straight", "tokens": [50364, 400, 5800, 11, 293, 291, 393, 3811, 1184, 565, 291, 3079, 257, 4471, 11, 309, 311, 9819, 278, 766, 293, 456, 311, 50732, 50732, 1071, 1333, 295, 257, 777, 3092, 2837, 337, 309, 281, 9819, 766, 295, 13, 50960, 50960, 583, 309, 393, 1009, 352, 760, 300, 2182, 2837, 13, 51098, 51098, 400, 264, 2182, 2837, 11, 309, 311, 445, 3480, 2051, 257, 1421, 901, 3100, 13, 51261, 51261, 407, 2602, 295, 9275, 544, 1412, 293, 21928, 309, 1214, 11, 291, 445, 483, 300, 6713, 2997, 51562, 51562, 807, 300, 2099, 3510, 84, 1226, 6713, 1412, 13, 51676, 51676, 286, 959, 264, 5056, 19157, 300, 415, 4960, 13, 51858, 51858], "temperature": 0.0, "avg_logprob": -0.14520623002733504, "compression_ratio": 1.6796875, "no_caption_prob": 6.204828241607174e-05}, {"id": 225, "seek": 85936, "start": 883.32, "end": 885.6, "text": " through that short circuited error data.", "tokens": [50364, 400, 5800, 11, 293, 291, 393, 3811, 1184, 565, 291, 3079, 257, 4471, 11, 309, 311, 9819, 278, 766, 293, 456, 311, 50732, 50732, 1071, 1333, 295, 257, 777, 3092, 2837, 337, 309, 281, 9819, 766, 295, 13, 50960, 50960, 583, 309, 393, 1009, 352, 760, 300, 2182, 2837, 13, 51098, 51098, 400, 264, 2182, 2837, 11, 309, 311, 445, 3480, 2051, 257, 1421, 901, 3100, 13, 51261, 51261, 407, 2602, 295, 9275, 544, 1412, 293, 21928, 309, 1214, 11, 291, 445, 483, 300, 6713, 2997, 51562, 51562, 807, 300, 2099, 3510, 84, 1226, 6713, 1412, 13, 51676, 51676, 286, 959, 264, 5056, 19157, 300, 415, 4960, 13, 51858, 51858], "temperature": 0.0, "avg_logprob": -0.14520623002733504, "compression_ratio": 1.6796875, "no_caption_prob": 6.204828241607174e-05}, {"id": 226, "seek": 85936, "start": 885.6, "end": 889.24, "text": " I love the visual metaphor that he uses.", "tokens": [50364, 400, 5800, 11, 293, 291, 393, 3811, 1184, 565, 291, 3079, 257, 4471, 11, 309, 311, 9819, 278, 766, 293, 456, 311, 50732, 50732, 1071, 1333, 295, 257, 777, 3092, 2837, 337, 309, 281, 9819, 766, 295, 13, 50960, 50960, 583, 309, 393, 1009, 352, 760, 300, 2182, 2837, 13, 51098, 51098, 400, 264, 2182, 2837, 11, 309, 311, 445, 3480, 2051, 257, 1421, 901, 3100, 13, 51261, 51261, 407, 2602, 295, 9275, 544, 1412, 293, 21928, 309, 1214, 11, 291, 445, 483, 300, 6713, 2997, 51562, 51562, 807, 300, 2099, 3510, 84, 1226, 6713, 1412, 13, 51676, 51676, 286, 959, 264, 5056, 19157, 300, 415, 4960, 13, 51858, 51858], "temperature": 0.0, "avg_logprob": -0.14520623002733504, "compression_ratio": 1.6796875, "no_caption_prob": 6.204828241607174e-05}, {"id": 227, "seek": 88924, "start": 889.24, "end": 894.16, "text": " You should definitely link to the talk because it's worth looking at it with the slides.", "tokens": [50364, 509, 820, 2138, 2113, 281, 264, 751, 570, 309, 311, 3163, 1237, 412, 309, 365, 264, 9788, 13, 50610, 50610, 1079, 11, 286, 3986, 13, 50718, 50718, 467, 2516, 257, 3410, 300, 311, 257, 707, 857, 10346, 1929, 293, 1333, 295, 16982, 294, 257, 688, 295, 819, 3487, 50980, 50980, 490, 11745, 9410, 11, 406, 445, 341, 18350, 1558, 293, 19842, 1314, 264, 534, 1333, 51285, 51285, 295, 7778, 2856, 293, 534, 8137, 309, 294, 257, 19157, 300, 311, 1858, 281, 1524, 13, 51596, 51596], "temperature": 0.0, "avg_logprob": -0.14515050252278647, "compression_ratio": 1.5745614035087718, "no_caption_prob": 7.527830803155666e-06}, {"id": 228, "seek": 88924, "start": 894.16, "end": 896.32, "text": " Yes, I agree.", "tokens": [50364, 509, 820, 2138, 2113, 281, 264, 751, 570, 309, 311, 3163, 1237, 412, 309, 365, 264, 9788, 13, 50610, 50610, 1079, 11, 286, 3986, 13, 50718, 50718, 467, 2516, 257, 3410, 300, 311, 257, 707, 857, 10346, 1929, 293, 1333, 295, 16982, 294, 257, 688, 295, 819, 3487, 50980, 50980, 490, 11745, 9410, 11, 406, 445, 341, 18350, 1558, 293, 19842, 1314, 264, 534, 1333, 51285, 51285, 295, 7778, 2856, 293, 534, 8137, 309, 294, 257, 19157, 300, 311, 1858, 281, 1524, 13, 51596, 51596], "temperature": 0.0, "avg_logprob": -0.14515050252278647, "compression_ratio": 1.5745614035087718, "no_caption_prob": 7.527830803155666e-06}, {"id": 229, "seek": 88924, "start": 896.32, "end": 901.5600000000001, "text": " It takes a concept that's a little bit arcane and sort of pulls in a lot of different ideas", "tokens": [50364, 509, 820, 2138, 2113, 281, 264, 751, 570, 309, 311, 3163, 1237, 412, 309, 365, 264, 9788, 13, 50610, 50610, 1079, 11, 286, 3986, 13, 50718, 50718, 467, 2516, 257, 3410, 300, 311, 257, 707, 857, 10346, 1929, 293, 1333, 295, 16982, 294, 257, 688, 295, 819, 3487, 50980, 50980, 490, 11745, 9410, 11, 406, 445, 341, 18350, 1558, 293, 19842, 1314, 264, 534, 1333, 51285, 51285, 295, 7778, 2856, 293, 534, 8137, 309, 294, 257, 19157, 300, 311, 1858, 281, 1524, 13, 51596, 51596], "temperature": 0.0, "avg_logprob": -0.14515050252278647, "compression_ratio": 1.5745614035087718, "no_caption_prob": 7.527830803155666e-06}, {"id": 230, "seek": 88924, "start": 901.5600000000001, "end": 907.66, "text": " from functional programming, not just this mapping idea and strips away the really sort", "tokens": [50364, 509, 820, 2138, 2113, 281, 264, 751, 570, 309, 311, 3163, 1237, 412, 309, 365, 264, 9788, 13, 50610, 50610, 1079, 11, 286, 3986, 13, 50718, 50718, 467, 2516, 257, 3410, 300, 311, 257, 707, 857, 10346, 1929, 293, 1333, 295, 16982, 294, 257, 688, 295, 819, 3487, 50980, 50980, 490, 11745, 9410, 11, 406, 445, 341, 18350, 1558, 293, 19842, 1314, 264, 534, 1333, 51285, 51285, 295, 7778, 2856, 293, 534, 8137, 309, 294, 257, 19157, 300, 311, 1858, 281, 1524, 13, 51596, 51596], "temperature": 0.0, "avg_logprob": -0.14515050252278647, "compression_ratio": 1.5745614035087718, "no_caption_prob": 7.527830803155666e-06}, {"id": 231, "seek": 88924, "start": 907.66, "end": 913.88, "text": " of academic language and really puts it in a metaphor that's easy to follow.", "tokens": [50364, 509, 820, 2138, 2113, 281, 264, 751, 570, 309, 311, 3163, 1237, 412, 309, 365, 264, 9788, 13, 50610, 50610, 1079, 11, 286, 3986, 13, 50718, 50718, 467, 2516, 257, 3410, 300, 311, 257, 707, 857, 10346, 1929, 293, 1333, 295, 16982, 294, 257, 688, 295, 819, 3487, 50980, 50980, 490, 11745, 9410, 11, 406, 445, 341, 18350, 1558, 293, 19842, 1314, 264, 534, 1333, 51285, 51285, 295, 7778, 2856, 293, 534, 8137, 309, 294, 257, 19157, 300, 311, 1858, 281, 1524, 13, 51596, 51596], "temperature": 0.0, "avg_logprob": -0.14515050252278647, "compression_ratio": 1.5745614035087718, "no_caption_prob": 7.527830803155666e-06}, {"id": 232, "seek": 91388, "start": 913.88, "end": 922.48, "text": " And so I think we're sort of so entrenched in this Elm world here that it's easy to forget.", "tokens": [50364, 400, 370, 286, 519, 321, 434, 1333, 295, 370, 948, 42388, 294, 341, 2699, 76, 1002, 510, 300, 309, 311, 1858, 281, 2870, 13, 50794, 50794, 467, 311, 1858, 281, 747, 613, 721, 337, 12344, 13, 50904, 50904, 583, 498, 321, 1333, 295, 1823, 646, 490, 309, 293, 751, 466, 577, 576, 321, 2028, 365, 613, 721, 51120, 51120, 5911, 11, 6260, 365, 10238, 22847, 13, 51308, 51308, 400, 309, 311, 767, 534, 3715, 6260, 365, 1412, 294, 341, 1333, 295, 10199, 712, 636, 570, 51636, 51636], "temperature": 0.0, "avg_logprob": -0.13503795795226364, "compression_ratio": 1.6775700934579438, "no_caption_prob": 5.862721991434228e-06}, {"id": 233, "seek": 91388, "start": 922.48, "end": 924.68, "text": " It's easy to take these things for granted.", "tokens": [50364, 400, 370, 286, 519, 321, 434, 1333, 295, 370, 948, 42388, 294, 341, 2699, 76, 1002, 510, 300, 309, 311, 1858, 281, 2870, 13, 50794, 50794, 467, 311, 1858, 281, 747, 613, 721, 337, 12344, 13, 50904, 50904, 583, 498, 321, 1333, 295, 1823, 646, 490, 309, 293, 751, 466, 577, 576, 321, 2028, 365, 613, 721, 51120, 51120, 5911, 11, 6260, 365, 10238, 22847, 13, 51308, 51308, 400, 309, 311, 767, 534, 3715, 6260, 365, 1412, 294, 341, 1333, 295, 10199, 712, 636, 570, 51636, 51636], "temperature": 0.0, "avg_logprob": -0.13503795795226364, "compression_ratio": 1.6775700934579438, "no_caption_prob": 5.862721991434228e-06}, {"id": 234, "seek": 91388, "start": 924.68, "end": 929.0, "text": " But if we sort of step back from it and talk about how would we deal with these things", "tokens": [50364, 400, 370, 286, 519, 321, 434, 1333, 295, 370, 948, 42388, 294, 341, 2699, 76, 1002, 510, 300, 309, 311, 1858, 281, 2870, 13, 50794, 50794, 467, 311, 1858, 281, 747, 613, 721, 337, 12344, 13, 50904, 50904, 583, 498, 321, 1333, 295, 1823, 646, 490, 309, 293, 751, 466, 577, 576, 321, 2028, 365, 613, 721, 51120, 51120, 5911, 11, 6260, 365, 10238, 22847, 13, 51308, 51308, 400, 309, 311, 767, 534, 3715, 6260, 365, 1412, 294, 341, 1333, 295, 10199, 712, 636, 570, 51636, 51636], "temperature": 0.0, "avg_logprob": -0.13503795795226364, "compression_ratio": 1.6775700934579438, "no_caption_prob": 5.862721991434228e-06}, {"id": 235, "seek": 91388, "start": 929.0, "end": 932.76, "text": " otherwise, dealing with throwing exceptions.", "tokens": [50364, 400, 370, 286, 519, 321, 434, 1333, 295, 370, 948, 42388, 294, 341, 2699, 76, 1002, 510, 300, 309, 311, 1858, 281, 2870, 13, 50794, 50794, 467, 311, 1858, 281, 747, 613, 721, 337, 12344, 13, 50904, 50904, 583, 498, 321, 1333, 295, 1823, 646, 490, 309, 293, 751, 466, 577, 576, 321, 2028, 365, 613, 721, 51120, 51120, 5911, 11, 6260, 365, 10238, 22847, 13, 51308, 51308, 400, 309, 311, 767, 534, 3715, 6260, 365, 1412, 294, 341, 1333, 295, 10199, 712, 636, 570, 51636, 51636], "temperature": 0.0, "avg_logprob": -0.13503795795226364, "compression_ratio": 1.6775700934579438, "no_caption_prob": 5.862721991434228e-06}, {"id": 236, "seek": 91388, "start": 932.76, "end": 939.32, "text": " And it's actually really wonderful dealing with data in this sort of composable way because", "tokens": [50364, 400, 370, 286, 519, 321, 434, 1333, 295, 370, 948, 42388, 294, 341, 2699, 76, 1002, 510, 300, 309, 311, 1858, 281, 2870, 13, 50794, 50794, 467, 311, 1858, 281, 747, 613, 721, 337, 12344, 13, 50904, 50904, 583, 498, 321, 1333, 295, 1823, 646, 490, 309, 293, 751, 466, 577, 576, 321, 2028, 365, 613, 721, 51120, 51120, 5911, 11, 6260, 365, 10238, 22847, 13, 51308, 51308, 400, 309, 311, 767, 534, 3715, 6260, 365, 1412, 294, 341, 1333, 295, 10199, 712, 636, 570, 51636, 51636], "temperature": 0.0, "avg_logprob": -0.13503795795226364, "compression_ratio": 1.6775700934579438, "no_caption_prob": 5.862721991434228e-06}, {"id": 237, "seek": 93932, "start": 939.32, "end": 944.1800000000001, "text": " you can think about something as a unit and you can combine these things.", "tokens": [50364, 291, 393, 519, 466, 746, 382, 257, 4985, 293, 291, 393, 10432, 613, 721, 13, 50607, 50607, 400, 370, 286, 914, 11, 286, 478, 406, 988, 498, 309, 311, 445, 257, 13548, 281, 4449, 437, 321, 600, 658, 420, 498, 50882, 50882, 456, 366, 16602, 337, 577, 321, 1715, 527, 3089, 456, 13, 51026, 51026, 583, 286, 519, 300, 311, 257, 665, 551, 281, 1066, 294, 1575, 13, 51112, 51112, 865, 11, 577, 576, 291, 360, 300, 30, 51202, 51202, 6068, 291, 352, 365, 7140, 295, 1389, 15277, 30, 51336, 51336, 821, 311, 257, 2020, 1310, 689, 294, 584, 257, 544, 8546, 2856, 11, 257, 3840, 295, 11317, 294, 2699, 76, 51654, 51654], "temperature": 0.0, "avg_logprob": -0.1514590719471807, "compression_ratio": 1.6, "no_caption_prob": 6.854229923192179e-06}, {"id": 238, "seek": 93932, "start": 944.1800000000001, "end": 949.6800000000001, "text": " And so I mean, I'm not sure if it's just a reminder to appreciate what we've got or if", "tokens": [50364, 291, 393, 519, 466, 746, 382, 257, 4985, 293, 291, 393, 10432, 613, 721, 13, 50607, 50607, 400, 370, 286, 914, 11, 286, 478, 406, 988, 498, 309, 311, 445, 257, 13548, 281, 4449, 437, 321, 600, 658, 420, 498, 50882, 50882, 456, 366, 16602, 337, 577, 321, 1715, 527, 3089, 456, 13, 51026, 51026, 583, 286, 519, 300, 311, 257, 665, 551, 281, 1066, 294, 1575, 13, 51112, 51112, 865, 11, 577, 576, 291, 360, 300, 30, 51202, 51202, 6068, 291, 352, 365, 7140, 295, 1389, 15277, 30, 51336, 51336, 821, 311, 257, 2020, 1310, 689, 294, 584, 257, 544, 8546, 2856, 11, 257, 3840, 295, 11317, 294, 2699, 76, 51654, 51654], "temperature": 0.0, "avg_logprob": -0.1514590719471807, "compression_ratio": 1.6, "no_caption_prob": 6.854229923192179e-06}, {"id": 239, "seek": 93932, "start": 949.6800000000001, "end": 952.5600000000001, "text": " there are implications for how we design our code there.", "tokens": [50364, 291, 393, 519, 466, 746, 382, 257, 4985, 293, 291, 393, 10432, 613, 721, 13, 50607, 50607, 400, 370, 286, 914, 11, 286, 478, 406, 988, 498, 309, 311, 445, 257, 13548, 281, 4449, 437, 321, 600, 658, 420, 498, 50882, 50882, 456, 366, 16602, 337, 577, 321, 1715, 527, 3089, 456, 13, 51026, 51026, 583, 286, 519, 300, 311, 257, 665, 551, 281, 1066, 294, 1575, 13, 51112, 51112, 865, 11, 577, 576, 291, 360, 300, 30, 51202, 51202, 6068, 291, 352, 365, 7140, 295, 1389, 15277, 30, 51336, 51336, 821, 311, 257, 2020, 1310, 689, 294, 584, 257, 544, 8546, 2856, 11, 257, 3840, 295, 11317, 294, 2699, 76, 51654, 51654], "temperature": 0.0, "avg_logprob": -0.1514590719471807, "compression_ratio": 1.6, "no_caption_prob": 6.854229923192179e-06}, {"id": 240, "seek": 93932, "start": 952.5600000000001, "end": 954.2800000000001, "text": " But I think that's a good thing to keep in mind.", "tokens": [50364, 291, 393, 519, 466, 746, 382, 257, 4985, 293, 291, 393, 10432, 613, 721, 13, 50607, 50607, 400, 370, 286, 914, 11, 286, 478, 406, 988, 498, 309, 311, 445, 257, 13548, 281, 4449, 437, 321, 600, 658, 420, 498, 50882, 50882, 456, 366, 16602, 337, 577, 321, 1715, 527, 3089, 456, 13, 51026, 51026, 583, 286, 519, 300, 311, 257, 665, 551, 281, 1066, 294, 1575, 13, 51112, 51112, 865, 11, 577, 576, 291, 360, 300, 30, 51202, 51202, 6068, 291, 352, 365, 7140, 295, 1389, 15277, 30, 51336, 51336, 821, 311, 257, 2020, 1310, 689, 294, 584, 257, 544, 8546, 2856, 11, 257, 3840, 295, 11317, 294, 2699, 76, 51654, 51654], "temperature": 0.0, "avg_logprob": -0.1514590719471807, "compression_ratio": 1.6, "no_caption_prob": 6.854229923192179e-06}, {"id": 241, "seek": 93932, "start": 954.2800000000001, "end": 956.08, "text": " Yeah, how would you do that?", "tokens": [50364, 291, 393, 519, 466, 746, 382, 257, 4985, 293, 291, 393, 10432, 613, 721, 13, 50607, 50607, 400, 370, 286, 914, 11, 286, 478, 406, 988, 498, 309, 311, 445, 257, 13548, 281, 4449, 437, 321, 600, 658, 420, 498, 50882, 50882, 456, 366, 16602, 337, 577, 321, 1715, 527, 3089, 456, 13, 51026, 51026, 583, 286, 519, 300, 311, 257, 665, 551, 281, 1066, 294, 1575, 13, 51112, 51112, 865, 11, 577, 576, 291, 360, 300, 30, 51202, 51202, 6068, 291, 352, 365, 7140, 295, 1389, 15277, 30, 51336, 51336, 821, 311, 257, 2020, 1310, 689, 294, 584, 257, 544, 8546, 2856, 11, 257, 3840, 295, 11317, 294, 2699, 76, 51654, 51654], "temperature": 0.0, "avg_logprob": -0.1514590719471807, "compression_ratio": 1.6, "no_caption_prob": 6.854229923192179e-06}, {"id": 242, "seek": 93932, "start": 956.08, "end": 958.7600000000001, "text": " Would you go with plenty of case expressions?", "tokens": [50364, 291, 393, 519, 466, 746, 382, 257, 4985, 293, 291, 393, 10432, 613, 721, 13, 50607, 50607, 400, 370, 286, 914, 11, 286, 478, 406, 988, 498, 309, 311, 445, 257, 13548, 281, 4449, 437, 321, 600, 658, 420, 498, 50882, 50882, 456, 366, 16602, 337, 577, 321, 1715, 527, 3089, 456, 13, 51026, 51026, 583, 286, 519, 300, 311, 257, 665, 551, 281, 1066, 294, 1575, 13, 51112, 51112, 865, 11, 577, 576, 291, 360, 300, 30, 51202, 51202, 6068, 291, 352, 365, 7140, 295, 1389, 15277, 30, 51336, 51336, 821, 311, 257, 2020, 1310, 689, 294, 584, 257, 544, 8546, 2856, 11, 257, 3840, 295, 11317, 294, 2699, 76, 51654, 51654], "temperature": 0.0, "avg_logprob": -0.1514590719471807, "compression_ratio": 1.6, "no_caption_prob": 6.854229923192179e-06}, {"id": 243, "seek": 93932, "start": 958.7600000000001, "end": 965.12, "text": " There's a sense maybe where in say a more dynamic language, a bunch of maps in Elm", "tokens": [50364, 291, 393, 519, 466, 746, 382, 257, 4985, 293, 291, 393, 10432, 613, 721, 13, 50607, 50607, 400, 370, 286, 914, 11, 286, 478, 406, 988, 498, 309, 311, 445, 257, 13548, 281, 4449, 437, 321, 600, 658, 420, 498, 50882, 50882, 456, 366, 16602, 337, 577, 321, 1715, 527, 3089, 456, 13, 51026, 51026, 583, 286, 519, 300, 311, 257, 665, 551, 281, 1066, 294, 1575, 13, 51112, 51112, 865, 11, 577, 576, 291, 360, 300, 30, 51202, 51202, 6068, 291, 352, 365, 7140, 295, 1389, 15277, 30, 51336, 51336, 821, 311, 257, 2020, 1310, 689, 294, 584, 257, 544, 8546, 2856, 11, 257, 3840, 295, 11317, 294, 2699, 76, 51654, 51654], "temperature": 0.0, "avg_logprob": -0.1514590719471807, "compression_ratio": 1.6, "no_caption_prob": 6.854229923192179e-06}, {"id": 244, "seek": 96512, "start": 965.12, "end": 969.32, "text": " might be more or less equivalent to some kind of optional chaining.", "tokens": [50364, 1062, 312, 544, 420, 1570, 10344, 281, 512, 733, 295, 17312, 417, 3686, 13, 50574, 50574, 407, 411, 19907, 575, 437, 436, 818, 264, 14236, 12973, 13, 50704, 50704, 15778, 575, 264, 1168, 1491, 689, 291, 360, 341, 1333, 295, 17312, 417, 3686, 13, 50909, 50909, 32906, 598, 4229, 25434, 11, 746, 411, 300, 13, 51028, 51028, 286, 519, 300, 311, 257, 4994, 3410, 13, 51170, 51170, 430, 5785, 13, 51220, 51220, 865, 13, 51270, 51270, 1779, 11, 558, 13, 51320, 51320, 865, 13, 51370, 51370, 639, 777, 15778, 1168, 1491, 5893, 12973, 293, 291, 536, 341, 294, 819, 8650, 13, 51584, 51584, 865, 13, 51634, 51634], "temperature": 0.0, "avg_logprob": -0.19726352516664278, "compression_ratio": 1.6748971193415638, "no_caption_prob": 4.069337956025265e-05}, {"id": 245, "seek": 96512, "start": 969.32, "end": 971.92, "text": " So like Ruby has what they call the lonely operator.", "tokens": [50364, 1062, 312, 544, 420, 1570, 10344, 281, 512, 733, 295, 17312, 417, 3686, 13, 50574, 50574, 407, 411, 19907, 575, 437, 436, 818, 264, 14236, 12973, 13, 50704, 50704, 15778, 575, 264, 1168, 1491, 689, 291, 360, 341, 1333, 295, 17312, 417, 3686, 13, 50909, 50909, 32906, 598, 4229, 25434, 11, 746, 411, 300, 13, 51028, 51028, 286, 519, 300, 311, 257, 4994, 3410, 13, 51170, 51170, 430, 5785, 13, 51220, 51220, 865, 13, 51270, 51270, 1779, 11, 558, 13, 51320, 51320, 865, 13, 51370, 51370, 639, 777, 15778, 1168, 1491, 5893, 12973, 293, 291, 536, 341, 294, 819, 8650, 13, 51584, 51584, 865, 13, 51634, 51634], "temperature": 0.0, "avg_logprob": -0.19726352516664278, "compression_ratio": 1.6748971193415638, "no_caption_prob": 4.069337956025265e-05}, {"id": 246, "seek": 96512, "start": 971.92, "end": 976.02, "text": " JavaScript has the question mark where you do this sort of optional chaining.", "tokens": [50364, 1062, 312, 544, 420, 1570, 10344, 281, 512, 733, 295, 17312, 417, 3686, 13, 50574, 50574, 407, 411, 19907, 575, 437, 436, 818, 264, 14236, 12973, 13, 50704, 50704, 15778, 575, 264, 1168, 1491, 689, 291, 360, 341, 1333, 295, 17312, 417, 3686, 13, 50909, 50909, 32906, 598, 4229, 25434, 11, 746, 411, 300, 13, 51028, 51028, 286, 519, 300, 311, 257, 4994, 3410, 13, 51170, 51170, 430, 5785, 13, 51220, 51220, 865, 13, 51270, 51270, 1779, 11, 558, 13, 51320, 51320, 865, 13, 51370, 51370, 639, 777, 15778, 1168, 1491, 5893, 12973, 293, 291, 536, 341, 294, 819, 8650, 13, 51584, 51584, 865, 13, 51634, 51634], "temperature": 0.0, "avg_logprob": -0.19726352516664278, "compression_ratio": 1.6748971193415638, "no_caption_prob": 4.069337956025265e-05}, {"id": 247, "seek": 96512, "start": 976.02, "end": 978.4, "text": " Knowledge coalescence, something like that.", "tokens": [50364, 1062, 312, 544, 420, 1570, 10344, 281, 512, 733, 295, 17312, 417, 3686, 13, 50574, 50574, 407, 411, 19907, 575, 437, 436, 818, 264, 14236, 12973, 13, 50704, 50704, 15778, 575, 264, 1168, 1491, 689, 291, 360, 341, 1333, 295, 17312, 417, 3686, 13, 50909, 50909, 32906, 598, 4229, 25434, 11, 746, 411, 300, 13, 51028, 51028, 286, 519, 300, 311, 257, 4994, 3410, 13, 51170, 51170, 430, 5785, 13, 51220, 51220, 865, 13, 51270, 51270, 1779, 11, 558, 13, 51320, 51320, 865, 13, 51370, 51370, 639, 777, 15778, 1168, 1491, 5893, 12973, 293, 291, 536, 341, 294, 819, 8650, 13, 51584, 51584, 865, 13, 51634, 51634], "temperature": 0.0, "avg_logprob": -0.19726352516664278, "compression_ratio": 1.6748971193415638, "no_caption_prob": 4.069337956025265e-05}, {"id": 248, "seek": 96512, "start": 978.4, "end": 981.24, "text": " I think that's a separate concept.", "tokens": [50364, 1062, 312, 544, 420, 1570, 10344, 281, 512, 733, 295, 17312, 417, 3686, 13, 50574, 50574, 407, 411, 19907, 575, 437, 436, 818, 264, 14236, 12973, 13, 50704, 50704, 15778, 575, 264, 1168, 1491, 689, 291, 360, 341, 1333, 295, 17312, 417, 3686, 13, 50909, 50909, 32906, 598, 4229, 25434, 11, 746, 411, 300, 13, 51028, 51028, 286, 519, 300, 311, 257, 4994, 3410, 13, 51170, 51170, 430, 5785, 13, 51220, 51220, 865, 13, 51270, 51270, 1779, 11, 558, 13, 51320, 51320, 865, 13, 51370, 51370, 639, 777, 15778, 1168, 1491, 5893, 12973, 293, 291, 536, 341, 294, 819, 8650, 13, 51584, 51584, 865, 13, 51634, 51634], "temperature": 0.0, "avg_logprob": -0.19726352516664278, "compression_ratio": 1.6748971193415638, "no_caption_prob": 4.069337956025265e-05}, {"id": 249, "seek": 96512, "start": 981.24, "end": 982.24, "text": " Possible.", "tokens": [50364, 1062, 312, 544, 420, 1570, 10344, 281, 512, 733, 295, 17312, 417, 3686, 13, 50574, 50574, 407, 411, 19907, 575, 437, 436, 818, 264, 14236, 12973, 13, 50704, 50704, 15778, 575, 264, 1168, 1491, 689, 291, 360, 341, 1333, 295, 17312, 417, 3686, 13, 50909, 50909, 32906, 598, 4229, 25434, 11, 746, 411, 300, 13, 51028, 51028, 286, 519, 300, 311, 257, 4994, 3410, 13, 51170, 51170, 430, 5785, 13, 51220, 51220, 865, 13, 51270, 51270, 1779, 11, 558, 13, 51320, 51320, 865, 13, 51370, 51370, 639, 777, 15778, 1168, 1491, 5893, 12973, 293, 291, 536, 341, 294, 819, 8650, 13, 51584, 51584, 865, 13, 51634, 51634], "temperature": 0.0, "avg_logprob": -0.19726352516664278, "compression_ratio": 1.6748971193415638, "no_caption_prob": 4.069337956025265e-05}, {"id": 250, "seek": 96512, "start": 982.24, "end": 983.24, "text": " Yeah.", "tokens": [50364, 1062, 312, 544, 420, 1570, 10344, 281, 512, 733, 295, 17312, 417, 3686, 13, 50574, 50574, 407, 411, 19907, 575, 437, 436, 818, 264, 14236, 12973, 13, 50704, 50704, 15778, 575, 264, 1168, 1491, 689, 291, 360, 341, 1333, 295, 17312, 417, 3686, 13, 50909, 50909, 32906, 598, 4229, 25434, 11, 746, 411, 300, 13, 51028, 51028, 286, 519, 300, 311, 257, 4994, 3410, 13, 51170, 51170, 430, 5785, 13, 51220, 51220, 865, 13, 51270, 51270, 1779, 11, 558, 13, 51320, 51320, 865, 13, 51370, 51370, 639, 777, 15778, 1168, 1491, 5893, 12973, 293, 291, 536, 341, 294, 819, 8650, 13, 51584, 51584, 865, 13, 51634, 51634], "temperature": 0.0, "avg_logprob": -0.19726352516664278, "compression_ratio": 1.6748971193415638, "no_caption_prob": 4.069337956025265e-05}, {"id": 251, "seek": 96512, "start": 983.24, "end": 984.24, "text": " Right, right.", "tokens": [50364, 1062, 312, 544, 420, 1570, 10344, 281, 512, 733, 295, 17312, 417, 3686, 13, 50574, 50574, 407, 411, 19907, 575, 437, 436, 818, 264, 14236, 12973, 13, 50704, 50704, 15778, 575, 264, 1168, 1491, 689, 291, 360, 341, 1333, 295, 17312, 417, 3686, 13, 50909, 50909, 32906, 598, 4229, 25434, 11, 746, 411, 300, 13, 51028, 51028, 286, 519, 300, 311, 257, 4994, 3410, 13, 51170, 51170, 430, 5785, 13, 51220, 51220, 865, 13, 51270, 51270, 1779, 11, 558, 13, 51320, 51320, 865, 13, 51370, 51370, 639, 777, 15778, 1168, 1491, 5893, 12973, 293, 291, 536, 341, 294, 819, 8650, 13, 51584, 51584, 865, 13, 51634, 51634], "temperature": 0.0, "avg_logprob": -0.19726352516664278, "compression_ratio": 1.6748971193415638, "no_caption_prob": 4.069337956025265e-05}, {"id": 252, "seek": 96512, "start": 984.24, "end": 985.24, "text": " Yeah.", "tokens": [50364, 1062, 312, 544, 420, 1570, 10344, 281, 512, 733, 295, 17312, 417, 3686, 13, 50574, 50574, 407, 411, 19907, 575, 437, 436, 818, 264, 14236, 12973, 13, 50704, 50704, 15778, 575, 264, 1168, 1491, 689, 291, 360, 341, 1333, 295, 17312, 417, 3686, 13, 50909, 50909, 32906, 598, 4229, 25434, 11, 746, 411, 300, 13, 51028, 51028, 286, 519, 300, 311, 257, 4994, 3410, 13, 51170, 51170, 430, 5785, 13, 51220, 51220, 865, 13, 51270, 51270, 1779, 11, 558, 13, 51320, 51320, 865, 13, 51370, 51370, 639, 777, 15778, 1168, 1491, 5893, 12973, 293, 291, 536, 341, 294, 819, 8650, 13, 51584, 51584, 865, 13, 51634, 51634], "temperature": 0.0, "avg_logprob": -0.19726352516664278, "compression_ratio": 1.6748971193415638, "no_caption_prob": 4.069337956025265e-05}, {"id": 253, "seek": 96512, "start": 985.24, "end": 989.52, "text": " This new JavaScript question mark dot operator and you see this in different languages.", "tokens": [50364, 1062, 312, 544, 420, 1570, 10344, 281, 512, 733, 295, 17312, 417, 3686, 13, 50574, 50574, 407, 411, 19907, 575, 437, 436, 818, 264, 14236, 12973, 13, 50704, 50704, 15778, 575, 264, 1168, 1491, 689, 291, 360, 341, 1333, 295, 17312, 417, 3686, 13, 50909, 50909, 32906, 598, 4229, 25434, 11, 746, 411, 300, 13, 51028, 51028, 286, 519, 300, 311, 257, 4994, 3410, 13, 51170, 51170, 430, 5785, 13, 51220, 51220, 865, 13, 51270, 51270, 1779, 11, 558, 13, 51320, 51320, 865, 13, 51370, 51370, 639, 777, 15778, 1168, 1491, 5893, 12973, 293, 291, 536, 341, 294, 819, 8650, 13, 51584, 51584, 865, 13, 51634, 51634], "temperature": 0.0, "avg_logprob": -0.19726352516664278, "compression_ratio": 1.6748971193415638, "no_caption_prob": 4.069337956025265e-05}, {"id": 254, "seek": 96512, "start": 989.52, "end": 990.52, "text": " Yeah.", "tokens": [50364, 1062, 312, 544, 420, 1570, 10344, 281, 512, 733, 295, 17312, 417, 3686, 13, 50574, 50574, 407, 411, 19907, 575, 437, 436, 818, 264, 14236, 12973, 13, 50704, 50704, 15778, 575, 264, 1168, 1491, 689, 291, 360, 341, 1333, 295, 17312, 417, 3686, 13, 50909, 50909, 32906, 598, 4229, 25434, 11, 746, 411, 300, 13, 51028, 51028, 286, 519, 300, 311, 257, 4994, 3410, 13, 51170, 51170, 430, 5785, 13, 51220, 51220, 865, 13, 51270, 51270, 1779, 11, 558, 13, 51320, 51320, 865, 13, 51370, 51370, 639, 777, 15778, 1168, 1491, 5893, 12973, 293, 291, 536, 341, 294, 819, 8650, 13, 51584, 51584, 865, 13, 51634, 51634], "temperature": 0.0, "avg_logprob": -0.19726352516664278, "compression_ratio": 1.6748971193415638, "no_caption_prob": 4.069337956025265e-05}, {"id": 255, "seek": 99052, "start": 990.52, "end": 996.4, "text": " And I noticed this, this is and the sort of I guess before that operator in JavaScript,", "tokens": [50364, 400, 286, 5694, 341, 11, 341, 307, 293, 264, 1333, 295, 286, 2041, 949, 300, 12973, 294, 15778, 11, 50658, 50658, 309, 576, 312, 11, 291, 458, 11, 4195, 3834, 293, 4195, 5893, 13, 50866, 50866, 1779, 11, 597, 2170, 534, 596, 25837, 498, 291, 362, 257, 938, 5021, 570, 550, 291, 362, 281, 1520, 51182, 51182, 633, 1823, 2051, 264, 636, 13, 51264, 51264, 1779, 13, 51314, 51314, 400, 370, 472, 295, 264, 721, 466, 300, 5102, 300, 286, 600, 5694, 307, 561, 584, 411, 11, 6076, 11, 51556, 51556, 341, 411, 1168, 1491, 5893, 12973, 294, 15778, 1669, 3089, 370, 709, 22842, 11, 597, 309, 3297, 51850, 51850], "temperature": 0.0, "avg_logprob": -0.20902294772011892, "compression_ratio": 1.685823754789272, "no_caption_prob": 2.2827030988992192e-05}, {"id": 256, "seek": 99052, "start": 996.4, "end": 1000.56, "text": " it would be, you know, user double and user dot.", "tokens": [50364, 400, 286, 5694, 341, 11, 341, 307, 293, 264, 1333, 295, 286, 2041, 949, 300, 12973, 294, 15778, 11, 50658, 50658, 309, 576, 312, 11, 291, 458, 11, 4195, 3834, 293, 4195, 5893, 13, 50866, 50866, 1779, 11, 597, 2170, 534, 596, 25837, 498, 291, 362, 257, 938, 5021, 570, 550, 291, 362, 281, 1520, 51182, 51182, 633, 1823, 2051, 264, 636, 13, 51264, 51264, 1779, 13, 51314, 51314, 400, 370, 472, 295, 264, 721, 466, 300, 5102, 300, 286, 600, 5694, 307, 561, 584, 411, 11, 6076, 11, 51556, 51556, 341, 411, 1168, 1491, 5893, 12973, 294, 15778, 1669, 3089, 370, 709, 22842, 11, 597, 309, 3297, 51850, 51850], "temperature": 0.0, "avg_logprob": -0.20902294772011892, "compression_ratio": 1.685823754789272, "no_caption_prob": 2.2827030988992192e-05}, {"id": 257, "seek": 99052, "start": 1000.56, "end": 1006.88, "text": " Right, which gets really clunky if you have a long chain because then you have to check", "tokens": [50364, 400, 286, 5694, 341, 11, 341, 307, 293, 264, 1333, 295, 286, 2041, 949, 300, 12973, 294, 15778, 11, 50658, 50658, 309, 576, 312, 11, 291, 458, 11, 4195, 3834, 293, 4195, 5893, 13, 50866, 50866, 1779, 11, 597, 2170, 534, 596, 25837, 498, 291, 362, 257, 938, 5021, 570, 550, 291, 362, 281, 1520, 51182, 51182, 633, 1823, 2051, 264, 636, 13, 51264, 51264, 1779, 13, 51314, 51314, 400, 370, 472, 295, 264, 721, 466, 300, 5102, 300, 286, 600, 5694, 307, 561, 584, 411, 11, 6076, 11, 51556, 51556, 341, 411, 1168, 1491, 5893, 12973, 294, 15778, 1669, 3089, 370, 709, 22842, 11, 597, 309, 3297, 51850, 51850], "temperature": 0.0, "avg_logprob": -0.20902294772011892, "compression_ratio": 1.685823754789272, "no_caption_prob": 2.2827030988992192e-05}, {"id": 258, "seek": 99052, "start": 1006.88, "end": 1008.52, "text": " every step along the way.", "tokens": [50364, 400, 286, 5694, 341, 11, 341, 307, 293, 264, 1333, 295, 286, 2041, 949, 300, 12973, 294, 15778, 11, 50658, 50658, 309, 576, 312, 11, 291, 458, 11, 4195, 3834, 293, 4195, 5893, 13, 50866, 50866, 1779, 11, 597, 2170, 534, 596, 25837, 498, 291, 362, 257, 938, 5021, 570, 550, 291, 362, 281, 1520, 51182, 51182, 633, 1823, 2051, 264, 636, 13, 51264, 51264, 1779, 13, 51314, 51314, 400, 370, 472, 295, 264, 721, 466, 300, 5102, 300, 286, 600, 5694, 307, 561, 584, 411, 11, 6076, 11, 51556, 51556, 341, 411, 1168, 1491, 5893, 12973, 294, 15778, 1669, 3089, 370, 709, 22842, 11, 597, 309, 3297, 51850, 51850], "temperature": 0.0, "avg_logprob": -0.20902294772011892, "compression_ratio": 1.685823754789272, "no_caption_prob": 2.2827030988992192e-05}, {"id": 259, "seek": 99052, "start": 1008.52, "end": 1009.52, "text": " Right.", "tokens": [50364, 400, 286, 5694, 341, 11, 341, 307, 293, 264, 1333, 295, 286, 2041, 949, 300, 12973, 294, 15778, 11, 50658, 50658, 309, 576, 312, 11, 291, 458, 11, 4195, 3834, 293, 4195, 5893, 13, 50866, 50866, 1779, 11, 597, 2170, 534, 596, 25837, 498, 291, 362, 257, 938, 5021, 570, 550, 291, 362, 281, 1520, 51182, 51182, 633, 1823, 2051, 264, 636, 13, 51264, 51264, 1779, 13, 51314, 51314, 400, 370, 472, 295, 264, 721, 466, 300, 5102, 300, 286, 600, 5694, 307, 561, 584, 411, 11, 6076, 11, 51556, 51556, 341, 411, 1168, 1491, 5893, 12973, 294, 15778, 1669, 3089, 370, 709, 22842, 11, 597, 309, 3297, 51850, 51850], "temperature": 0.0, "avg_logprob": -0.20902294772011892, "compression_ratio": 1.685823754789272, "no_caption_prob": 2.2827030988992192e-05}, {"id": 260, "seek": 99052, "start": 1009.52, "end": 1014.36, "text": " And so one of the things about that pattern that I've noticed is people say like, wow,", "tokens": [50364, 400, 286, 5694, 341, 11, 341, 307, 293, 264, 1333, 295, 286, 2041, 949, 300, 12973, 294, 15778, 11, 50658, 50658, 309, 576, 312, 11, 291, 458, 11, 4195, 3834, 293, 4195, 5893, 13, 50866, 50866, 1779, 11, 597, 2170, 534, 596, 25837, 498, 291, 362, 257, 938, 5021, 570, 550, 291, 362, 281, 1520, 51182, 51182, 633, 1823, 2051, 264, 636, 13, 51264, 51264, 1779, 13, 51314, 51314, 400, 370, 472, 295, 264, 721, 466, 300, 5102, 300, 286, 600, 5694, 307, 561, 584, 411, 11, 6076, 11, 51556, 51556, 341, 411, 1168, 1491, 5893, 12973, 294, 15778, 1669, 3089, 370, 709, 22842, 11, 597, 309, 3297, 51850, 51850], "temperature": 0.0, "avg_logprob": -0.20902294772011892, "compression_ratio": 1.685823754789272, "no_caption_prob": 2.2827030988992192e-05}, {"id": 261, "seek": 99052, "start": 1014.36, "end": 1020.24, "text": " this like question mark dot operator in JavaScript makes code so much nicer, which it certainly", "tokens": [50364, 400, 286, 5694, 341, 11, 341, 307, 293, 264, 1333, 295, 286, 2041, 949, 300, 12973, 294, 15778, 11, 50658, 50658, 309, 576, 312, 11, 291, 458, 11, 4195, 3834, 293, 4195, 5893, 13, 50866, 50866, 1779, 11, 597, 2170, 534, 596, 25837, 498, 291, 362, 257, 938, 5021, 570, 550, 291, 362, 281, 1520, 51182, 51182, 633, 1823, 2051, 264, 636, 13, 51264, 51264, 1779, 13, 51314, 51314, 400, 370, 472, 295, 264, 721, 466, 300, 5102, 300, 286, 600, 5694, 307, 561, 584, 411, 11, 6076, 11, 51556, 51556, 341, 411, 1168, 1491, 5893, 12973, 294, 15778, 1669, 3089, 370, 709, 22842, 11, 597, 309, 3297, 51850, 51850], "temperature": 0.0, "avg_logprob": -0.20902294772011892, "compression_ratio": 1.685823754789272, "no_caption_prob": 2.2827030988992192e-05}, {"id": 262, "seek": 102024, "start": 1020.24, "end": 1021.92, "text": " cleans things up.", "tokens": [50364, 16912, 721, 493, 13, 50448, 50448, 583, 550, 437, 498, 291, 434, 406, 6260, 365, 746, 300, 815, 312, 18184, 30, 50662, 50662, 708, 498, 291, 434, 6260, 365, 746, 300, 815, 2906, 512, 733, 295, 6713, 420, 577, 360, 50888, 50888, 291, 1319, 819, 3467, 295, 721, 30, 50990, 50990, 407, 11, 291, 458, 11, 2699, 76, 1177, 380, 2699, 76, 1177, 380, 362, 11, 291, 458, 11, 613, 1333, 295, 2010, 5359, 337, 613, 51338, 51338, 819, 3467, 295, 721, 689, 291, 764, 257, 2167, 12973, 281, 360, 309, 13, 51498, 51498, 583, 309, 307, 370, 19453, 666, 264, 4965, 15148, 293, 264, 11311, 293, 264, 6468, 329, 295, 2699, 76, 300, 51840, 51840], "temperature": 0.0, "avg_logprob": -0.1103775703300864, "compression_ratio": 1.884297520661157, "no_caption_prob": 3.071765604545362e-05}, {"id": 263, "seek": 102024, "start": 1021.92, "end": 1026.2, "text": " But then what if you're not dealing with something that may be null?", "tokens": [50364, 16912, 721, 493, 13, 50448, 50448, 583, 550, 437, 498, 291, 434, 406, 6260, 365, 746, 300, 815, 312, 18184, 30, 50662, 50662, 708, 498, 291, 434, 6260, 365, 746, 300, 815, 2906, 512, 733, 295, 6713, 420, 577, 360, 50888, 50888, 291, 1319, 819, 3467, 295, 721, 30, 50990, 50990, 407, 11, 291, 458, 11, 2699, 76, 1177, 380, 2699, 76, 1177, 380, 362, 11, 291, 458, 11, 613, 1333, 295, 2010, 5359, 337, 613, 51338, 51338, 819, 3467, 295, 721, 689, 291, 764, 257, 2167, 12973, 281, 360, 309, 13, 51498, 51498, 583, 309, 307, 370, 19453, 666, 264, 4965, 15148, 293, 264, 11311, 293, 264, 6468, 329, 295, 2699, 76, 300, 51840, 51840], "temperature": 0.0, "avg_logprob": -0.1103775703300864, "compression_ratio": 1.884297520661157, "no_caption_prob": 3.071765604545362e-05}, {"id": 264, "seek": 102024, "start": 1026.2, "end": 1030.72, "text": " What if you're dealing with something that may represent some kind of error or how do", "tokens": [50364, 16912, 721, 493, 13, 50448, 50448, 583, 550, 437, 498, 291, 434, 406, 6260, 365, 746, 300, 815, 312, 18184, 30, 50662, 50662, 708, 498, 291, 434, 6260, 365, 746, 300, 815, 2906, 512, 733, 295, 6713, 420, 577, 360, 50888, 50888, 291, 1319, 819, 3467, 295, 721, 30, 50990, 50990, 407, 11, 291, 458, 11, 2699, 76, 1177, 380, 2699, 76, 1177, 380, 362, 11, 291, 458, 11, 613, 1333, 295, 2010, 5359, 337, 613, 51338, 51338, 819, 3467, 295, 721, 689, 291, 764, 257, 2167, 12973, 281, 360, 309, 13, 51498, 51498, 583, 309, 307, 370, 19453, 666, 264, 4965, 15148, 293, 264, 11311, 293, 264, 6468, 329, 295, 2699, 76, 300, 51840, 51840], "temperature": 0.0, "avg_logprob": -0.1103775703300864, "compression_ratio": 1.884297520661157, "no_caption_prob": 3.071765604545362e-05}, {"id": 265, "seek": 102024, "start": 1030.72, "end": 1032.76, "text": " you change different types of things?", "tokens": [50364, 16912, 721, 493, 13, 50448, 50448, 583, 550, 437, 498, 291, 434, 406, 6260, 365, 746, 300, 815, 312, 18184, 30, 50662, 50662, 708, 498, 291, 434, 6260, 365, 746, 300, 815, 2906, 512, 733, 295, 6713, 420, 577, 360, 50888, 50888, 291, 1319, 819, 3467, 295, 721, 30, 50990, 50990, 407, 11, 291, 458, 11, 2699, 76, 1177, 380, 2699, 76, 1177, 380, 362, 11, 291, 458, 11, 613, 1333, 295, 2010, 5359, 337, 613, 51338, 51338, 819, 3467, 295, 721, 689, 291, 764, 257, 2167, 12973, 281, 360, 309, 13, 51498, 51498, 583, 309, 307, 370, 19453, 666, 264, 4965, 15148, 293, 264, 11311, 293, 264, 6468, 329, 295, 2699, 76, 300, 51840, 51840], "temperature": 0.0, "avg_logprob": -0.1103775703300864, "compression_ratio": 1.884297520661157, "no_caption_prob": 3.071765604545362e-05}, {"id": 266, "seek": 102024, "start": 1032.76, "end": 1039.72, "text": " So, you know, Elm doesn't Elm doesn't have, you know, these sort of type classes for these", "tokens": [50364, 16912, 721, 493, 13, 50448, 50448, 583, 550, 437, 498, 291, 434, 406, 6260, 365, 746, 300, 815, 312, 18184, 30, 50662, 50662, 708, 498, 291, 434, 6260, 365, 746, 300, 815, 2906, 512, 733, 295, 6713, 420, 577, 360, 50888, 50888, 291, 1319, 819, 3467, 295, 721, 30, 50990, 50990, 407, 11, 291, 458, 11, 2699, 76, 1177, 380, 2699, 76, 1177, 380, 362, 11, 291, 458, 11, 613, 1333, 295, 2010, 5359, 337, 613, 51338, 51338, 819, 3467, 295, 721, 689, 291, 764, 257, 2167, 12973, 281, 360, 309, 13, 51498, 51498, 583, 309, 307, 370, 19453, 666, 264, 4965, 15148, 293, 264, 11311, 293, 264, 6468, 329, 295, 2699, 76, 300, 51840, 51840], "temperature": 0.0, "avg_logprob": -0.1103775703300864, "compression_ratio": 1.884297520661157, "no_caption_prob": 3.071765604545362e-05}, {"id": 267, "seek": 102024, "start": 1039.72, "end": 1042.92, "text": " different types of things where you use a single operator to do it.", "tokens": [50364, 16912, 721, 493, 13, 50448, 50448, 583, 550, 437, 498, 291, 434, 406, 6260, 365, 746, 300, 815, 312, 18184, 30, 50662, 50662, 708, 498, 291, 434, 6260, 365, 746, 300, 815, 2906, 512, 733, 295, 6713, 420, 577, 360, 50888, 50888, 291, 1319, 819, 3467, 295, 721, 30, 50990, 50990, 407, 11, 291, 458, 11, 2699, 76, 1177, 380, 2699, 76, 1177, 380, 362, 11, 291, 458, 11, 613, 1333, 295, 2010, 5359, 337, 613, 51338, 51338, 819, 3467, 295, 721, 689, 291, 764, 257, 2167, 12973, 281, 360, 309, 13, 51498, 51498, 583, 309, 307, 370, 19453, 666, 264, 4965, 15148, 293, 264, 11311, 293, 264, 6468, 329, 295, 2699, 76, 300, 51840, 51840], "temperature": 0.0, "avg_logprob": -0.1103775703300864, "compression_ratio": 1.884297520661157, "no_caption_prob": 3.071765604545362e-05}, {"id": 268, "seek": 102024, "start": 1042.92, "end": 1049.76, "text": " But it is so baked into the core libraries and the ecosystem and the ethos of Elm that", "tokens": [50364, 16912, 721, 493, 13, 50448, 50448, 583, 550, 437, 498, 291, 434, 406, 6260, 365, 746, 300, 815, 312, 18184, 30, 50662, 50662, 708, 498, 291, 434, 6260, 365, 746, 300, 815, 2906, 512, 733, 295, 6713, 420, 577, 360, 50888, 50888, 291, 1319, 819, 3467, 295, 721, 30, 50990, 50990, 407, 11, 291, 458, 11, 2699, 76, 1177, 380, 2699, 76, 1177, 380, 362, 11, 291, 458, 11, 613, 1333, 295, 2010, 5359, 337, 613, 51338, 51338, 819, 3467, 295, 721, 689, 291, 764, 257, 2167, 12973, 281, 360, 309, 13, 51498, 51498, 583, 309, 307, 370, 19453, 666, 264, 4965, 15148, 293, 264, 11311, 293, 264, 6468, 329, 295, 2699, 76, 300, 51840, 51840], "temperature": 0.0, "avg_logprob": -0.1103775703300864, "compression_ratio": 1.884297520661157, "no_caption_prob": 3.071765604545362e-05}, {"id": 269, "seek": 104976, "start": 1049.76, "end": 1053.96, "text": " you sort of apply these patterns and also the language itself because it doesn't have", "tokens": [50364, 291, 1333, 295, 3079, 613, 8294, 293, 611, 264, 2856, 2564, 570, 309, 1177, 380, 362, 50574, 50574, 1333, 295, 22847, 300, 393, 445, 12212, 493, 4079, 293, 312, 5415, 13, 50802, 50802, 400, 370, 291, 600, 658, 281, 1333, 295, 3095, 1412, 807, 293, 291, 600, 658, 281, 7081, 281, 264, 31958, 949, 51102, 51102, 291, 393, 445, 14853, 4007, 4190, 293, 300, 1333, 295, 551, 13, 51215, 51215, 407, 309, 311, 309, 311, 1333, 295, 19453, 666, 264, 2856, 294, 257, 636, 13, 51384, 51384, 400, 721, 360, 35925, 1214, 370, 9594, 570, 341, 307, 406, 445, 1940, 1732, 815, 6446, 293, 18350, 51710, 51710], "temperature": 0.0, "avg_logprob": -0.08038967902507257, "compression_ratio": 1.792828685258964, "no_caption_prob": 4.26464102929458e-05}, {"id": 270, "seek": 104976, "start": 1053.96, "end": 1058.52, "text": " sort of exceptions that can just bubble up somewhere and be caught.", "tokens": [50364, 291, 1333, 295, 3079, 613, 8294, 293, 611, 264, 2856, 2564, 570, 309, 1177, 380, 362, 50574, 50574, 1333, 295, 22847, 300, 393, 445, 12212, 493, 4079, 293, 312, 5415, 13, 50802, 50802, 400, 370, 291, 600, 658, 281, 1333, 295, 3095, 1412, 807, 293, 291, 600, 658, 281, 7081, 281, 264, 31958, 949, 51102, 51102, 291, 393, 445, 14853, 4007, 4190, 293, 300, 1333, 295, 551, 13, 51215, 51215, 407, 309, 311, 309, 311, 1333, 295, 19453, 666, 264, 2856, 294, 257, 636, 13, 51384, 51384, 400, 721, 360, 35925, 1214, 370, 9594, 570, 341, 307, 406, 445, 1940, 1732, 815, 6446, 293, 18350, 51710, 51710], "temperature": 0.0, "avg_logprob": -0.08038967902507257, "compression_ratio": 1.792828685258964, "no_caption_prob": 4.26464102929458e-05}, {"id": 271, "seek": 104976, "start": 1058.52, "end": 1064.52, "text": " And so you've got to sort of flow data through and you've got to prove to the compiler before", "tokens": [50364, 291, 1333, 295, 3079, 613, 8294, 293, 611, 264, 2856, 2564, 570, 309, 1177, 380, 362, 50574, 50574, 1333, 295, 22847, 300, 393, 445, 12212, 493, 4079, 293, 312, 5415, 13, 50802, 50802, 400, 370, 291, 600, 658, 281, 1333, 295, 3095, 1412, 807, 293, 291, 600, 658, 281, 7081, 281, 264, 31958, 949, 51102, 51102, 291, 393, 445, 14853, 4007, 4190, 293, 300, 1333, 295, 551, 13, 51215, 51215, 407, 309, 311, 309, 311, 1333, 295, 19453, 666, 264, 2856, 294, 257, 636, 13, 51384, 51384, 400, 721, 360, 35925, 1214, 370, 9594, 570, 341, 307, 406, 445, 1940, 1732, 815, 6446, 293, 18350, 51710, 51710], "temperature": 0.0, "avg_logprob": -0.08038967902507257, "compression_ratio": 1.792828685258964, "no_caption_prob": 4.26464102929458e-05}, {"id": 272, "seek": 104976, "start": 1064.52, "end": 1066.78, "text": " you can just unwrap values and that sort of thing.", "tokens": [50364, 291, 1333, 295, 3079, 613, 8294, 293, 611, 264, 2856, 2564, 570, 309, 1177, 380, 362, 50574, 50574, 1333, 295, 22847, 300, 393, 445, 12212, 493, 4079, 293, 312, 5415, 13, 50802, 50802, 400, 370, 291, 600, 658, 281, 1333, 295, 3095, 1412, 807, 293, 291, 600, 658, 281, 7081, 281, 264, 31958, 949, 51102, 51102, 291, 393, 445, 14853, 4007, 4190, 293, 300, 1333, 295, 551, 13, 51215, 51215, 407, 309, 311, 309, 311, 1333, 295, 19453, 666, 264, 2856, 294, 257, 636, 13, 51384, 51384, 400, 721, 360, 35925, 1214, 370, 9594, 570, 341, 307, 406, 445, 1940, 1732, 815, 6446, 293, 18350, 51710, 51710], "temperature": 0.0, "avg_logprob": -0.08038967902507257, "compression_ratio": 1.792828685258964, "no_caption_prob": 4.26464102929458e-05}, {"id": 273, "seek": 104976, "start": 1066.78, "end": 1070.16, "text": " So it's it's sort of baked into the language in a way.", "tokens": [50364, 291, 1333, 295, 3079, 613, 8294, 293, 611, 264, 2856, 2564, 570, 309, 1177, 380, 362, 50574, 50574, 1333, 295, 22847, 300, 393, 445, 12212, 493, 4079, 293, 312, 5415, 13, 50802, 50802, 400, 370, 291, 600, 658, 281, 1333, 295, 3095, 1412, 807, 293, 291, 600, 658, 281, 7081, 281, 264, 31958, 949, 51102, 51102, 291, 393, 445, 14853, 4007, 4190, 293, 300, 1333, 295, 551, 13, 51215, 51215, 407, 309, 311, 309, 311, 1333, 295, 19453, 666, 264, 2856, 294, 257, 636, 13, 51384, 51384, 400, 721, 360, 35925, 1214, 370, 9594, 570, 341, 307, 406, 445, 1940, 1732, 815, 6446, 293, 18350, 51710, 51710], "temperature": 0.0, "avg_logprob": -0.08038967902507257, "compression_ratio": 1.792828685258964, "no_caption_prob": 4.26464102929458e-05}, {"id": 274, "seek": 104976, "start": 1070.16, "end": 1076.68, "text": " And things do compose together so nicely because this is not just taking five maybes and mapping", "tokens": [50364, 291, 1333, 295, 3079, 613, 8294, 293, 611, 264, 2856, 2564, 570, 309, 1177, 380, 362, 50574, 50574, 1333, 295, 22847, 300, 393, 445, 12212, 493, 4079, 293, 312, 5415, 13, 50802, 50802, 400, 370, 291, 600, 658, 281, 1333, 295, 3095, 1412, 807, 293, 291, 600, 658, 281, 7081, 281, 264, 31958, 949, 51102, 51102, 291, 393, 445, 14853, 4007, 4190, 293, 300, 1333, 295, 551, 13, 51215, 51215, 407, 309, 311, 309, 311, 1333, 295, 19453, 666, 264, 2856, 294, 257, 636, 13, 51384, 51384, 400, 721, 360, 35925, 1214, 370, 9594, 570, 341, 307, 406, 445, 1940, 1732, 815, 6446, 293, 18350, 51710, 51710], "temperature": 0.0, "avg_logprob": -0.08038967902507257, "compression_ratio": 1.792828685258964, "no_caption_prob": 4.26464102929458e-05}, {"id": 275, "seek": 107668, "start": 1076.68, "end": 1083.16, "text": " them together, but, you know, then chaining that along and turning that maybe value that", "tokens": [50364, 552, 1214, 11, 457, 11, 291, 458, 11, 550, 417, 3686, 300, 2051, 293, 6246, 300, 1310, 2158, 300, 50688, 50688, 291, 3332, 666, 257, 1874, 2010, 570, 291, 643, 281, 10432, 309, 365, 1071, 1874, 2010, 490, 50934, 50934, 1071, 1081, 13, 50986, 50986, 400, 550, 291, 10432, 729, 281, 1322, 512, 2158, 13, 51148, 51148, 400, 300, 412, 300, 935, 11, 721, 534, 35925, 1214, 294, 257, 636, 300, 309, 3417, 3879, 819, 51517, 51517, 813, 445, 1228, 1168, 1491, 5893, 19077, 294, 15778, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.10009734185187372, "compression_ratio": 1.6923076923076923, "no_caption_prob": 2.7968255380983464e-05}, {"id": 276, "seek": 107668, "start": 1083.16, "end": 1088.0800000000002, "text": " you drive into a result type because you need to combine it with another result type from", "tokens": [50364, 552, 1214, 11, 457, 11, 291, 458, 11, 550, 417, 3686, 300, 2051, 293, 6246, 300, 1310, 2158, 300, 50688, 50688, 291, 3332, 666, 257, 1874, 2010, 570, 291, 643, 281, 10432, 309, 365, 1071, 1874, 2010, 490, 50934, 50934, 1071, 1081, 13, 50986, 50986, 400, 550, 291, 10432, 729, 281, 1322, 512, 2158, 13, 51148, 51148, 400, 300, 412, 300, 935, 11, 721, 534, 35925, 1214, 294, 257, 636, 300, 309, 3417, 3879, 819, 51517, 51517, 813, 445, 1228, 1168, 1491, 5893, 19077, 294, 15778, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.10009734185187372, "compression_ratio": 1.6923076923076923, "no_caption_prob": 2.7968255380983464e-05}, {"id": 277, "seek": 107668, "start": 1088.0800000000002, "end": 1089.1200000000001, "text": " another place.", "tokens": [50364, 552, 1214, 11, 457, 11, 291, 458, 11, 550, 417, 3686, 300, 2051, 293, 6246, 300, 1310, 2158, 300, 50688, 50688, 291, 3332, 666, 257, 1874, 2010, 570, 291, 643, 281, 10432, 309, 365, 1071, 1874, 2010, 490, 50934, 50934, 1071, 1081, 13, 50986, 50986, 400, 550, 291, 10432, 729, 281, 1322, 512, 2158, 13, 51148, 51148, 400, 300, 412, 300, 935, 11, 721, 534, 35925, 1214, 294, 257, 636, 300, 309, 3417, 3879, 819, 51517, 51517, 813, 445, 1228, 1168, 1491, 5893, 19077, 294, 15778, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.10009734185187372, "compression_ratio": 1.6923076923076923, "no_caption_prob": 2.7968255380983464e-05}, {"id": 278, "seek": 107668, "start": 1089.1200000000001, "end": 1092.3600000000001, "text": " And then you combine those to build some value.", "tokens": [50364, 552, 1214, 11, 457, 11, 291, 458, 11, 550, 417, 3686, 300, 2051, 293, 6246, 300, 1310, 2158, 300, 50688, 50688, 291, 3332, 666, 257, 1874, 2010, 570, 291, 643, 281, 10432, 309, 365, 1071, 1874, 2010, 490, 50934, 50934, 1071, 1081, 13, 50986, 50986, 400, 550, 291, 10432, 729, 281, 1322, 512, 2158, 13, 51148, 51148, 400, 300, 412, 300, 935, 11, 721, 534, 35925, 1214, 294, 257, 636, 300, 309, 3417, 3879, 819, 51517, 51517, 813, 445, 1228, 1168, 1491, 5893, 19077, 294, 15778, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.10009734185187372, "compression_ratio": 1.6923076923076923, "no_caption_prob": 2.7968255380983464e-05}, {"id": 279, "seek": 107668, "start": 1092.3600000000001, "end": 1099.74, "text": " And that at that point, things really compose together in a way that it feels totally different", "tokens": [50364, 552, 1214, 11, 457, 11, 291, 458, 11, 550, 417, 3686, 300, 2051, 293, 6246, 300, 1310, 2158, 300, 50688, 50688, 291, 3332, 666, 257, 1874, 2010, 570, 291, 643, 281, 10432, 309, 365, 1071, 1874, 2010, 490, 50934, 50934, 1071, 1081, 13, 50986, 50986, 400, 550, 291, 10432, 729, 281, 1322, 512, 2158, 13, 51148, 51148, 400, 300, 412, 300, 935, 11, 721, 534, 35925, 1214, 294, 257, 636, 300, 309, 3417, 3879, 819, 51517, 51517, 813, 445, 1228, 1168, 1491, 5893, 19077, 294, 15778, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.10009734185187372, "compression_ratio": 1.6923076923076923, "no_caption_prob": 2.7968255380983464e-05}, {"id": 280, "seek": 107668, "start": 1099.74, "end": 1103.68, "text": " than just using question mark dot operators in JavaScript.", "tokens": [50364, 552, 1214, 11, 457, 11, 291, 458, 11, 550, 417, 3686, 300, 2051, 293, 6246, 300, 1310, 2158, 300, 50688, 50688, 291, 3332, 666, 257, 1874, 2010, 570, 291, 643, 281, 10432, 309, 365, 1071, 1874, 2010, 490, 50934, 50934, 1071, 1081, 13, 50986, 50986, 400, 550, 291, 10432, 729, 281, 1322, 512, 2158, 13, 51148, 51148, 400, 300, 412, 300, 935, 11, 721, 534, 35925, 1214, 294, 257, 636, 300, 309, 3417, 3879, 819, 51517, 51517, 813, 445, 1228, 1168, 1491, 5893, 19077, 294, 15778, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.10009734185187372, "compression_ratio": 1.6923076923076923, "no_caption_prob": 2.7968255380983464e-05}, {"id": 281, "seek": 110368, "start": 1103.68, "end": 1107.8, "text": " Things really compose with all these other libraries and chains.", "tokens": [50364, 9514, 534, 35925, 365, 439, 613, 661, 15148, 293, 12626, 13, 50570, 50570, 821, 311, 611, 11, 286, 519, 11, 264, 534, 2141, 16844, 307, 300, 294, 257, 2856, 411, 15778, 11, 721, 50934, 50934, 366, 18184, 712, 538, 7576, 5969, 291, 1520, 552, 13, 51079, 51079, 400, 550, 291, 393, 362, 6687, 300, 436, 434, 406, 18184, 11, 9735, 2699, 76, 4190, 366, 18031, 51300, 51300, 1974, 5969, 436, 434, 20803, 14226, 294, 1310, 13, 51508, 51508, 407, 321, 393, 1333, 295, 3361, 538, 7576, 293, 550, 321, 1333, 295, 1491, 264, 3179, 300, 366, 1701, 22326, 23727, 51731, 51731, 293, 264, 31958, 486, 3464, 257, 1520, 13, 51830, 51830], "temperature": 0.0, "avg_logprob": -0.11846358375211732, "compression_ratio": 1.698581560283688, "no_caption_prob": 3.041571972062229e-06}, {"id": 282, "seek": 110368, "start": 1107.8, "end": 1115.0800000000002, "text": " There's also, I think, the really key distinction is that in a language like JavaScript, things", "tokens": [50364, 9514, 534, 35925, 365, 439, 613, 661, 15148, 293, 12626, 13, 50570, 50570, 821, 311, 611, 11, 286, 519, 11, 264, 534, 2141, 16844, 307, 300, 294, 257, 2856, 411, 15778, 11, 721, 50934, 50934, 366, 18184, 712, 538, 7576, 5969, 291, 1520, 552, 13, 51079, 51079, 400, 550, 291, 393, 362, 6687, 300, 436, 434, 406, 18184, 11, 9735, 2699, 76, 4190, 366, 18031, 51300, 51300, 1974, 5969, 436, 434, 20803, 14226, 294, 1310, 13, 51508, 51508, 407, 321, 393, 1333, 295, 3361, 538, 7576, 293, 550, 321, 1333, 295, 1491, 264, 3179, 300, 366, 1701, 22326, 23727, 51731, 51731, 293, 264, 31958, 486, 3464, 257, 1520, 13, 51830, 51830], "temperature": 0.0, "avg_logprob": -0.11846358375211732, "compression_ratio": 1.698581560283688, "no_caption_prob": 3.041571972062229e-06}, {"id": 283, "seek": 110368, "start": 1115.0800000000002, "end": 1117.98, "text": " are nullable by default unless you check them.", "tokens": [50364, 9514, 534, 35925, 365, 439, 613, 661, 15148, 293, 12626, 13, 50570, 50570, 821, 311, 611, 11, 286, 519, 11, 264, 534, 2141, 16844, 307, 300, 294, 257, 2856, 411, 15778, 11, 721, 50934, 50934, 366, 18184, 712, 538, 7576, 5969, 291, 1520, 552, 13, 51079, 51079, 400, 550, 291, 393, 362, 6687, 300, 436, 434, 406, 18184, 11, 9735, 2699, 76, 4190, 366, 18031, 51300, 51300, 1974, 5969, 436, 434, 20803, 14226, 294, 1310, 13, 51508, 51508, 407, 321, 393, 1333, 295, 3361, 538, 7576, 293, 550, 321, 1333, 295, 1491, 264, 3179, 300, 366, 1701, 22326, 23727, 51731, 51731, 293, 264, 31958, 486, 3464, 257, 1520, 13, 51830, 51830], "temperature": 0.0, "avg_logprob": -0.11846358375211732, "compression_ratio": 1.698581560283688, "no_caption_prob": 3.041571972062229e-06}, {"id": 284, "seek": 110368, "start": 1117.98, "end": 1122.4, "text": " And then you can have confidence that they're not null, whereas Elm values are guaranteed", "tokens": [50364, 9514, 534, 35925, 365, 439, 613, 661, 15148, 293, 12626, 13, 50570, 50570, 821, 311, 611, 11, 286, 519, 11, 264, 534, 2141, 16844, 307, 300, 294, 257, 2856, 411, 15778, 11, 721, 50934, 50934, 366, 18184, 712, 538, 7576, 5969, 291, 1520, 552, 13, 51079, 51079, 400, 550, 291, 393, 362, 6687, 300, 436, 434, 406, 18184, 11, 9735, 2699, 76, 4190, 366, 18031, 51300, 51300, 1974, 5969, 436, 434, 20803, 14226, 294, 1310, 13, 51508, 51508, 407, 321, 393, 1333, 295, 3361, 538, 7576, 293, 550, 321, 1333, 295, 1491, 264, 3179, 300, 366, 1701, 22326, 23727, 51731, 51731, 293, 264, 31958, 486, 3464, 257, 1520, 13, 51830, 51830], "temperature": 0.0, "avg_logprob": -0.11846358375211732, "compression_ratio": 1.698581560283688, "no_caption_prob": 3.041571972062229e-06}, {"id": 285, "seek": 110368, "start": 1122.4, "end": 1126.5600000000002, "text": " present unless they're explicitly wrapped in maybe.", "tokens": [50364, 9514, 534, 35925, 365, 439, 613, 661, 15148, 293, 12626, 13, 50570, 50570, 821, 311, 611, 11, 286, 519, 11, 264, 534, 2141, 16844, 307, 300, 294, 257, 2856, 411, 15778, 11, 721, 50934, 50934, 366, 18184, 712, 538, 7576, 5969, 291, 1520, 552, 13, 51079, 51079, 400, 550, 291, 393, 362, 6687, 300, 436, 434, 406, 18184, 11, 9735, 2699, 76, 4190, 366, 18031, 51300, 51300, 1974, 5969, 436, 434, 20803, 14226, 294, 1310, 13, 51508, 51508, 407, 321, 393, 1333, 295, 3361, 538, 7576, 293, 550, 321, 1333, 295, 1491, 264, 3179, 300, 366, 1701, 22326, 23727, 51731, 51731, 293, 264, 31958, 486, 3464, 257, 1520, 13, 51830, 51830], "temperature": 0.0, "avg_logprob": -0.11846358375211732, "compression_ratio": 1.698581560283688, "no_caption_prob": 3.041571972062229e-06}, {"id": 286, "seek": 110368, "start": 1126.5600000000002, "end": 1131.02, "text": " So we can sort of trust by default and then we sort of mark the areas that are untrustworthy", "tokens": [50364, 9514, 534, 35925, 365, 439, 613, 661, 15148, 293, 12626, 13, 50570, 50570, 821, 311, 611, 11, 286, 519, 11, 264, 534, 2141, 16844, 307, 300, 294, 257, 2856, 411, 15778, 11, 721, 50934, 50934, 366, 18184, 712, 538, 7576, 5969, 291, 1520, 552, 13, 51079, 51079, 400, 550, 291, 393, 362, 6687, 300, 436, 434, 406, 18184, 11, 9735, 2699, 76, 4190, 366, 18031, 51300, 51300, 1974, 5969, 436, 434, 20803, 14226, 294, 1310, 13, 51508, 51508, 407, 321, 393, 1333, 295, 3361, 538, 7576, 293, 550, 321, 1333, 295, 1491, 264, 3179, 300, 366, 1701, 22326, 23727, 51731, 51731, 293, 264, 31958, 486, 3464, 257, 1520, 13, 51830, 51830], "temperature": 0.0, "avg_logprob": -0.11846358375211732, "compression_ratio": 1.698581560283688, "no_caption_prob": 3.041571972062229e-06}, {"id": 287, "seek": 110368, "start": 1131.02, "end": 1133.0, "text": " and the compiler will force a check.", "tokens": [50364, 9514, 534, 35925, 365, 439, 613, 661, 15148, 293, 12626, 13, 50570, 50570, 821, 311, 611, 11, 286, 519, 11, 264, 534, 2141, 16844, 307, 300, 294, 257, 2856, 411, 15778, 11, 721, 50934, 50934, 366, 18184, 712, 538, 7576, 5969, 291, 1520, 552, 13, 51079, 51079, 400, 550, 291, 393, 362, 6687, 300, 436, 434, 406, 18184, 11, 9735, 2699, 76, 4190, 366, 18031, 51300, 51300, 1974, 5969, 436, 434, 20803, 14226, 294, 1310, 13, 51508, 51508, 407, 321, 393, 1333, 295, 3361, 538, 7576, 293, 550, 321, 1333, 295, 1491, 264, 3179, 300, 366, 1701, 22326, 23727, 51731, 51731, 293, 264, 31958, 486, 3464, 257, 1520, 13, 51830, 51830], "temperature": 0.0, "avg_logprob": -0.11846358375211732, "compression_ratio": 1.698581560283688, "no_caption_prob": 3.041571972062229e-06}, {"id": 288, "seek": 113300, "start": 1133.0, "end": 1134.0, "text": " That's a great point.", "tokens": [50364, 663, 311, 257, 869, 935, 13, 50414, 50414, 400, 341, 5102, 294, 257, 636, 11, 309, 311, 411, 560, 5401, 9601, 281, 341, 3125, 295, 264, 2699, 76, 31958, 293, 50732, 50732, 264, 2699, 76, 2856, 300, 291, 434, 1333, 295, 1163, 2123, 1412, 295, 819, 3467, 382, 291, 3079, 6828, 51058, 51058, 281, 309, 13, 51108, 51108, 407, 11, 291, 458, 11, 498, 291, 362, 257, 15517, 293, 291, 360, 11, 291, 458, 11, 291, 11240, 309, 281, 1329, 5893, 1522, 14806, 13, 51487, 51487, 823, 291, 747, 257, 551, 300, 390, 406, 257, 1329, 293, 291, 652, 309, 257, 1329, 13, 51624, 51624, 400, 550, 291, 11, 291, 458, 11, 10432, 300, 1214, 365, 746, 1646, 13, 51856, 51856], "temperature": 0.0, "avg_logprob": -0.09773582365454697, "compression_ratio": 1.7391304347826086, "no_caption_prob": 1.4063876733416691e-05}, {"id": 289, "seek": 113300, "start": 1134.0, "end": 1140.36, "text": " And this pattern in a way, it's like intimately tied to this quality of the Elm compiler and", "tokens": [50364, 663, 311, 257, 869, 935, 13, 50414, 50414, 400, 341, 5102, 294, 257, 636, 11, 309, 311, 411, 560, 5401, 9601, 281, 341, 3125, 295, 264, 2699, 76, 31958, 293, 50732, 50732, 264, 2699, 76, 2856, 300, 291, 434, 1333, 295, 1163, 2123, 1412, 295, 819, 3467, 382, 291, 3079, 6828, 51058, 51058, 281, 309, 13, 51108, 51108, 407, 11, 291, 458, 11, 498, 291, 362, 257, 15517, 293, 291, 360, 11, 291, 458, 11, 291, 11240, 309, 281, 1329, 5893, 1522, 14806, 13, 51487, 51487, 823, 291, 747, 257, 551, 300, 390, 406, 257, 1329, 293, 291, 652, 309, 257, 1329, 13, 51624, 51624, 400, 550, 291, 11, 291, 458, 11, 10432, 300, 1214, 365, 746, 1646, 13, 51856, 51856], "temperature": 0.0, "avg_logprob": -0.09773582365454697, "compression_ratio": 1.7391304347826086, "no_caption_prob": 1.4063876733416691e-05}, {"id": 290, "seek": 113300, "start": 1140.36, "end": 1146.88, "text": " the Elm language that you're sort of deriving data of different types as you apply functions", "tokens": [50364, 663, 311, 257, 869, 935, 13, 50414, 50414, 400, 341, 5102, 294, 257, 636, 11, 309, 311, 411, 560, 5401, 9601, 281, 341, 3125, 295, 264, 2699, 76, 31958, 293, 50732, 50732, 264, 2699, 76, 2856, 300, 291, 434, 1333, 295, 1163, 2123, 1412, 295, 819, 3467, 382, 291, 3079, 6828, 51058, 51058, 281, 309, 13, 51108, 51108, 407, 11, 291, 458, 11, 498, 291, 362, 257, 15517, 293, 291, 360, 11, 291, 458, 11, 291, 11240, 309, 281, 1329, 5893, 1522, 14806, 13, 51487, 51487, 823, 291, 747, 257, 551, 300, 390, 406, 257, 1329, 293, 291, 652, 309, 257, 1329, 13, 51624, 51624, 400, 550, 291, 11, 291, 458, 11, 10432, 300, 1214, 365, 746, 1646, 13, 51856, 51856], "temperature": 0.0, "avg_logprob": -0.09773582365454697, "compression_ratio": 1.7391304347826086, "no_caption_prob": 1.4063876733416691e-05}, {"id": 291, "seek": 113300, "start": 1146.88, "end": 1147.88, "text": " to it.", "tokens": [50364, 663, 311, 257, 869, 935, 13, 50414, 50414, 400, 341, 5102, 294, 257, 636, 11, 309, 311, 411, 560, 5401, 9601, 281, 341, 3125, 295, 264, 2699, 76, 31958, 293, 50732, 50732, 264, 2699, 76, 2856, 300, 291, 434, 1333, 295, 1163, 2123, 1412, 295, 819, 3467, 382, 291, 3079, 6828, 51058, 51058, 281, 309, 13, 51108, 51108, 407, 11, 291, 458, 11, 498, 291, 362, 257, 15517, 293, 291, 360, 11, 291, 458, 11, 291, 11240, 309, 281, 1329, 5893, 1522, 14806, 13, 51487, 51487, 823, 291, 747, 257, 551, 300, 390, 406, 257, 1329, 293, 291, 652, 309, 257, 1329, 13, 51624, 51624, 400, 550, 291, 11, 291, 458, 11, 10432, 300, 1214, 365, 746, 1646, 13, 51856, 51856], "temperature": 0.0, "avg_logprob": -0.09773582365454697, "compression_ratio": 1.7391304347826086, "no_caption_prob": 1.4063876733416691e-05}, {"id": 292, "seek": 113300, "start": 1147.88, "end": 1155.46, "text": " So, you know, if you have a pipeline and you do, you know, you pipe it to list dot singleton.", "tokens": [50364, 663, 311, 257, 869, 935, 13, 50414, 50414, 400, 341, 5102, 294, 257, 636, 11, 309, 311, 411, 560, 5401, 9601, 281, 341, 3125, 295, 264, 2699, 76, 31958, 293, 50732, 50732, 264, 2699, 76, 2856, 300, 291, 434, 1333, 295, 1163, 2123, 1412, 295, 819, 3467, 382, 291, 3079, 6828, 51058, 51058, 281, 309, 13, 51108, 51108, 407, 11, 291, 458, 11, 498, 291, 362, 257, 15517, 293, 291, 360, 11, 291, 458, 11, 291, 11240, 309, 281, 1329, 5893, 1522, 14806, 13, 51487, 51487, 823, 291, 747, 257, 551, 300, 390, 406, 257, 1329, 293, 291, 652, 309, 257, 1329, 13, 51624, 51624, 400, 550, 291, 11, 291, 458, 11, 10432, 300, 1214, 365, 746, 1646, 13, 51856, 51856], "temperature": 0.0, "avg_logprob": -0.09773582365454697, "compression_ratio": 1.7391304347826086, "no_caption_prob": 1.4063876733416691e-05}, {"id": 293, "seek": 113300, "start": 1155.46, "end": 1158.2, "text": " Now you take a thing that was not a list and you make it a list.", "tokens": [50364, 663, 311, 257, 869, 935, 13, 50414, 50414, 400, 341, 5102, 294, 257, 636, 11, 309, 311, 411, 560, 5401, 9601, 281, 341, 3125, 295, 264, 2699, 76, 31958, 293, 50732, 50732, 264, 2699, 76, 2856, 300, 291, 434, 1333, 295, 1163, 2123, 1412, 295, 819, 3467, 382, 291, 3079, 6828, 51058, 51058, 281, 309, 13, 51108, 51108, 407, 11, 291, 458, 11, 498, 291, 362, 257, 15517, 293, 291, 360, 11, 291, 458, 11, 291, 11240, 309, 281, 1329, 5893, 1522, 14806, 13, 51487, 51487, 823, 291, 747, 257, 551, 300, 390, 406, 257, 1329, 293, 291, 652, 309, 257, 1329, 13, 51624, 51624, 400, 550, 291, 11, 291, 458, 11, 10432, 300, 1214, 365, 746, 1646, 13, 51856, 51856], "temperature": 0.0, "avg_logprob": -0.09773582365454697, "compression_ratio": 1.7391304347826086, "no_caption_prob": 1.4063876733416691e-05}, {"id": 294, "seek": 113300, "start": 1158.2, "end": 1162.84, "text": " And then you, you know, combine that together with something else.", "tokens": [50364, 663, 311, 257, 869, 935, 13, 50414, 50414, 400, 341, 5102, 294, 257, 636, 11, 309, 311, 411, 560, 5401, 9601, 281, 341, 3125, 295, 264, 2699, 76, 31958, 293, 50732, 50732, 264, 2699, 76, 2856, 300, 291, 434, 1333, 295, 1163, 2123, 1412, 295, 819, 3467, 382, 291, 3079, 6828, 51058, 51058, 281, 309, 13, 51108, 51108, 407, 11, 291, 458, 11, 498, 291, 362, 257, 15517, 293, 291, 360, 11, 291, 458, 11, 291, 11240, 309, 281, 1329, 5893, 1522, 14806, 13, 51487, 51487, 823, 291, 747, 257, 551, 300, 390, 406, 257, 1329, 293, 291, 652, 309, 257, 1329, 13, 51624, 51624, 400, 550, 291, 11, 291, 458, 11, 10432, 300, 1214, 365, 746, 1646, 13, 51856, 51856], "temperature": 0.0, "avg_logprob": -0.09773582365454697, "compression_ratio": 1.7391304347826086, "no_caption_prob": 1.4063876733416691e-05}, {"id": 295, "seek": 116284, "start": 1162.84, "end": 1167.1599999999999, "text": " So this is one of the things with this sort of applicative pattern.", "tokens": [50364, 407, 341, 307, 472, 295, 264, 721, 365, 341, 1333, 295, 2580, 1166, 5102, 13, 50580, 50580, 492, 2378, 380, 1143, 300, 1433, 1939, 11, 457, 291, 458, 11, 291, 362, 257, 15517, 293, 291, 434, 9275, 613, 50815, 50815, 6828, 293, 309, 311, 1333, 295, 42626, 264, 2010, 382, 291, 352, 13, 51016, 51016, 407, 365, 1329, 2361, 21445, 11, 597, 291, 611, 915, 294, 2699, 76, 11, 411, 11, 291, 458, 11, 2699, 76, 17995, 11, 291, 1884, 51326, 51326, 257, 3414, 293, 291, 976, 17212, 293, 2227, 13, 51514, 51514, 509, 434, 406, 4473, 264, 2010, 382, 291, 909, 17995, 17212, 281, 300, 1329, 294, 264, 3414, 13, 51824, 51824], "temperature": 0.0, "avg_logprob": -0.08394242162289826, "compression_ratio": 1.7063492063492063, "no_caption_prob": 5.255323230812792e-06}, {"id": 296, "seek": 116284, "start": 1167.1599999999999, "end": 1171.86, "text": " We haven't used that term yet, but you know, you have a pipeline and you're applying these", "tokens": [50364, 407, 341, 307, 472, 295, 264, 721, 365, 341, 1333, 295, 2580, 1166, 5102, 13, 50580, 50580, 492, 2378, 380, 1143, 300, 1433, 1939, 11, 457, 291, 458, 11, 291, 362, 257, 15517, 293, 291, 434, 9275, 613, 50815, 50815, 6828, 293, 309, 311, 1333, 295, 42626, 264, 2010, 382, 291, 352, 13, 51016, 51016, 407, 365, 1329, 2361, 21445, 11, 597, 291, 611, 915, 294, 2699, 76, 11, 411, 11, 291, 458, 11, 2699, 76, 17995, 11, 291, 1884, 51326, 51326, 257, 3414, 293, 291, 976, 17212, 293, 2227, 13, 51514, 51514, 509, 434, 406, 4473, 264, 2010, 382, 291, 909, 17995, 17212, 281, 300, 1329, 294, 264, 3414, 13, 51824, 51824], "temperature": 0.0, "avg_logprob": -0.08394242162289826, "compression_ratio": 1.7063492063492063, "no_caption_prob": 5.255323230812792e-06}, {"id": 297, "seek": 116284, "start": 1171.86, "end": 1175.8799999999999, "text": " functions and it's sort of modifying the type as you go.", "tokens": [50364, 407, 341, 307, 472, 295, 264, 721, 365, 341, 1333, 295, 2580, 1166, 5102, 13, 50580, 50580, 492, 2378, 380, 1143, 300, 1433, 1939, 11, 457, 291, 458, 11, 291, 362, 257, 15517, 293, 291, 434, 9275, 613, 50815, 50815, 6828, 293, 309, 311, 1333, 295, 42626, 264, 2010, 382, 291, 352, 13, 51016, 51016, 407, 365, 1329, 2361, 21445, 11, 597, 291, 611, 915, 294, 2699, 76, 11, 411, 11, 291, 458, 11, 2699, 76, 17995, 11, 291, 1884, 51326, 51326, 257, 3414, 293, 291, 976, 17212, 293, 2227, 13, 51514, 51514, 509, 434, 406, 4473, 264, 2010, 382, 291, 909, 17995, 17212, 281, 300, 1329, 294, 264, 3414, 13, 51824, 51824], "temperature": 0.0, "avg_logprob": -0.08394242162289826, "compression_ratio": 1.7063492063492063, "no_caption_prob": 5.255323230812792e-06}, {"id": 298, "seek": 116284, "start": 1175.8799999999999, "end": 1182.08, "text": " So with list based APIs, which you also find in Elm, like, you know, Elm HTML, you create", "tokens": [50364, 407, 341, 307, 472, 295, 264, 721, 365, 341, 1333, 295, 2580, 1166, 5102, 13, 50580, 50580, 492, 2378, 380, 1143, 300, 1433, 1939, 11, 457, 291, 458, 11, 291, 362, 257, 15517, 293, 291, 434, 9275, 613, 50815, 50815, 6828, 293, 309, 311, 1333, 295, 42626, 264, 2010, 382, 291, 352, 13, 51016, 51016, 407, 365, 1329, 2361, 21445, 11, 597, 291, 611, 915, 294, 2699, 76, 11, 411, 11, 291, 458, 11, 2699, 76, 17995, 11, 291, 1884, 51326, 51326, 257, 3414, 293, 291, 976, 17212, 293, 2227, 13, 51514, 51514, 509, 434, 406, 4473, 264, 2010, 382, 291, 909, 17995, 17212, 281, 300, 1329, 294, 264, 3414, 13, 51824, 51824], "temperature": 0.0, "avg_logprob": -0.08394242162289826, "compression_ratio": 1.7063492063492063, "no_caption_prob": 5.255323230812792e-06}, {"id": 299, "seek": 116284, "start": 1182.08, "end": 1185.84, "text": " a div and you give attributes and children.", "tokens": [50364, 407, 341, 307, 472, 295, 264, 721, 365, 341, 1333, 295, 2580, 1166, 5102, 13, 50580, 50580, 492, 2378, 380, 1143, 300, 1433, 1939, 11, 457, 291, 458, 11, 291, 362, 257, 15517, 293, 291, 434, 9275, 613, 50815, 50815, 6828, 293, 309, 311, 1333, 295, 42626, 264, 2010, 382, 291, 352, 13, 51016, 51016, 407, 365, 1329, 2361, 21445, 11, 597, 291, 611, 915, 294, 2699, 76, 11, 411, 11, 291, 458, 11, 2699, 76, 17995, 11, 291, 1884, 51326, 51326, 257, 3414, 293, 291, 976, 17212, 293, 2227, 13, 51514, 51514, 509, 434, 406, 4473, 264, 2010, 382, 291, 909, 17995, 17212, 281, 300, 1329, 294, 264, 3414, 13, 51824, 51824], "temperature": 0.0, "avg_logprob": -0.08394242162289826, "compression_ratio": 1.7063492063492063, "no_caption_prob": 5.255323230812792e-06}, {"id": 300, "seek": 116284, "start": 1185.84, "end": 1192.04, "text": " You're not changing the type as you add HTML attributes to that list in the div.", "tokens": [50364, 407, 341, 307, 472, 295, 264, 721, 365, 341, 1333, 295, 2580, 1166, 5102, 13, 50580, 50580, 492, 2378, 380, 1143, 300, 1433, 1939, 11, 457, 291, 458, 11, 291, 362, 257, 15517, 293, 291, 434, 9275, 613, 50815, 50815, 6828, 293, 309, 311, 1333, 295, 42626, 264, 2010, 382, 291, 352, 13, 51016, 51016, 407, 365, 1329, 2361, 21445, 11, 597, 291, 611, 915, 294, 2699, 76, 11, 411, 11, 291, 458, 11, 2699, 76, 17995, 11, 291, 1884, 51326, 51326, 257, 3414, 293, 291, 976, 17212, 293, 2227, 13, 51514, 51514, 509, 434, 406, 4473, 264, 2010, 382, 291, 909, 17995, 17212, 281, 300, 1329, 294, 264, 3414, 13, 51824, 51824], "temperature": 0.0, "avg_logprob": -0.08394242162289826, "compression_ratio": 1.7063492063492063, "no_caption_prob": 5.255323230812792e-06}, {"id": 301, "seek": 119204, "start": 1192.04, "end": 1202.0, "text": " You add a class, you add an ID, but when you're doing a, you know, json.decode.succeed user,", "tokens": [50364, 509, 909, 257, 1508, 11, 291, 909, 364, 7348, 11, 457, 562, 291, 434, 884, 257, 11, 291, 458, 11, 361, 3015, 13, 1479, 22332, 13, 82, 1311, 4357, 4195, 11, 50862, 50862, 293, 550, 291, 434, 35204, 300, 281, 917, 4471, 420, 512, 11, 291, 458, 11, 15517, 12973, 11, 291, 434, 11, 51176, 51176, 291, 434, 42626, 300, 2158, 490, 11, 490, 264, 2891, 935, 13, 51332, 51332, 400, 291, 722, 365, 341, 47479, 300, 2516, 1732, 12869, 11, 293, 550, 291, 11240, 309, 807, 51606, 51606, 365, 9275, 1732, 819, 1413, 13, 51717, 51717], "temperature": 0.0, "avg_logprob": -0.12148095140553485, "compression_ratio": 1.6930232558139535, "no_caption_prob": 8.267719749710523e-06}, {"id": 302, "seek": 119204, "start": 1202.0, "end": 1208.28, "text": " and then you're piping that to end map or some, you know, pipeline operator, you're,", "tokens": [50364, 509, 909, 257, 1508, 11, 291, 909, 364, 7348, 11, 457, 562, 291, 434, 884, 257, 11, 291, 458, 11, 361, 3015, 13, 1479, 22332, 13, 82, 1311, 4357, 4195, 11, 50862, 50862, 293, 550, 291, 434, 35204, 300, 281, 917, 4471, 420, 512, 11, 291, 458, 11, 15517, 12973, 11, 291, 434, 11, 51176, 51176, 291, 434, 42626, 300, 2158, 490, 11, 490, 264, 2891, 935, 13, 51332, 51332, 400, 291, 722, 365, 341, 47479, 300, 2516, 1732, 12869, 11, 293, 550, 291, 11240, 309, 807, 51606, 51606, 365, 9275, 1732, 819, 1413, 13, 51717, 51717], "temperature": 0.0, "avg_logprob": -0.12148095140553485, "compression_ratio": 1.6930232558139535, "no_caption_prob": 8.267719749710523e-06}, {"id": 303, "seek": 119204, "start": 1208.28, "end": 1211.3999999999999, "text": " you're modifying that value from, from the starting point.", "tokens": [50364, 509, 909, 257, 1508, 11, 291, 909, 364, 7348, 11, 457, 562, 291, 434, 884, 257, 11, 291, 458, 11, 361, 3015, 13, 1479, 22332, 13, 82, 1311, 4357, 4195, 11, 50862, 50862, 293, 550, 291, 434, 35204, 300, 281, 917, 4471, 420, 512, 11, 291, 458, 11, 15517, 12973, 11, 291, 434, 11, 51176, 51176, 291, 434, 42626, 300, 2158, 490, 11, 490, 264, 2891, 935, 13, 51332, 51332, 400, 291, 722, 365, 341, 47479, 300, 2516, 1732, 12869, 11, 293, 550, 291, 11240, 309, 807, 51606, 51606, 365, 9275, 1732, 819, 1413, 13, 51717, 51717], "temperature": 0.0, "avg_logprob": -0.12148095140553485, "compression_ratio": 1.6930232558139535, "no_caption_prob": 8.267719749710523e-06}, {"id": 304, "seek": 119204, "start": 1211.3999999999999, "end": 1216.8799999999999, "text": " And you start with this constructor that takes five arguments, and then you pipe it through", "tokens": [50364, 509, 909, 257, 1508, 11, 291, 909, 364, 7348, 11, 457, 562, 291, 434, 884, 257, 11, 291, 458, 11, 361, 3015, 13, 1479, 22332, 13, 82, 1311, 4357, 4195, 11, 50862, 50862, 293, 550, 291, 434, 35204, 300, 281, 917, 4471, 420, 512, 11, 291, 458, 11, 15517, 12973, 11, 291, 434, 11, 51176, 51176, 291, 434, 42626, 300, 2158, 490, 11, 490, 264, 2891, 935, 13, 51332, 51332, 400, 291, 722, 365, 341, 47479, 300, 2516, 1732, 12869, 11, 293, 550, 291, 11240, 309, 807, 51606, 51606, 365, 9275, 1732, 819, 1413, 13, 51717, 51717], "temperature": 0.0, "avg_logprob": -0.12148095140553485, "compression_ratio": 1.6930232558139535, "no_caption_prob": 8.267719749710523e-06}, {"id": 305, "seek": 119204, "start": 1216.8799999999999, "end": 1219.1, "text": " with applying five different times.", "tokens": [50364, 509, 909, 257, 1508, 11, 291, 909, 364, 7348, 11, 457, 562, 291, 434, 884, 257, 11, 291, 458, 11, 361, 3015, 13, 1479, 22332, 13, 82, 1311, 4357, 4195, 11, 50862, 50862, 293, 550, 291, 434, 35204, 300, 281, 917, 4471, 420, 512, 11, 291, 458, 11, 15517, 12973, 11, 291, 434, 11, 51176, 51176, 291, 434, 42626, 300, 2158, 490, 11, 490, 264, 2891, 935, 13, 51332, 51332, 400, 291, 722, 365, 341, 47479, 300, 2516, 1732, 12869, 11, 293, 550, 291, 11240, 309, 807, 51606, 51606, 365, 9275, 1732, 819, 1413, 13, 51717, 51717], "temperature": 0.0, "avg_logprob": -0.12148095140553485, "compression_ratio": 1.6930232558139535, "no_caption_prob": 8.267719749710523e-06}, {"id": 306, "seek": 121910, "start": 1219.1, "end": 1223.0, "text": " And it goes from a function that takes five arguments to a function that takes four arguments", "tokens": [50364, 400, 309, 1709, 490, 257, 2445, 300, 2516, 1732, 12869, 281, 257, 2445, 300, 2516, 1451, 12869, 50559, 50559, 281, 257, 2445, 300, 2516, 1045, 12869, 13, 50639, 50639, 400, 294, 300, 636, 11, 264, 2580, 1166, 5102, 307, 534, 1481, 365, 2699, 76, 15148, 11, 457, 570, 50887, 50887, 309, 4045, 291, 281, 1333, 295, 4088, 264, 3467, 2361, 322, 437, 291, 434, 9275, 13, 51195, 51195, 759, 291, 1320, 294, 257, 979, 19866, 300, 2516, 364, 560, 11, 257, 979, 19866, 300, 2516, 257, 1310, 6798, 11, 309, 311, 51433, 51433, 516, 281, 2066, 300, 281, 312, 14324, 493, 365, 264, 47479, 291, 1409, 365, 293, 9275, 51685, 51685, 729, 13, 51735, 51735], "temperature": 0.0, "avg_logprob": -0.09097753019414397, "compression_ratio": 1.928, "no_caption_prob": 1.4593679225072265e-06}, {"id": 307, "seek": 121910, "start": 1223.0, "end": 1224.6, "text": " to a function that takes three arguments.", "tokens": [50364, 400, 309, 1709, 490, 257, 2445, 300, 2516, 1732, 12869, 281, 257, 2445, 300, 2516, 1451, 12869, 50559, 50559, 281, 257, 2445, 300, 2516, 1045, 12869, 13, 50639, 50639, 400, 294, 300, 636, 11, 264, 2580, 1166, 5102, 307, 534, 1481, 365, 2699, 76, 15148, 11, 457, 570, 50887, 50887, 309, 4045, 291, 281, 1333, 295, 4088, 264, 3467, 2361, 322, 437, 291, 434, 9275, 13, 51195, 51195, 759, 291, 1320, 294, 257, 979, 19866, 300, 2516, 364, 560, 11, 257, 979, 19866, 300, 2516, 257, 1310, 6798, 11, 309, 311, 51433, 51433, 516, 281, 2066, 300, 281, 312, 14324, 493, 365, 264, 47479, 291, 1409, 365, 293, 9275, 51685, 51685, 729, 13, 51735, 51735], "temperature": 0.0, "avg_logprob": -0.09097753019414397, "compression_ratio": 1.928, "no_caption_prob": 1.4593679225072265e-06}, {"id": 308, "seek": 121910, "start": 1224.6, "end": 1229.56, "text": " And in that way, the applicative pattern is really nice with Elm libraries, but because", "tokens": [50364, 400, 309, 1709, 490, 257, 2445, 300, 2516, 1732, 12869, 281, 257, 2445, 300, 2516, 1451, 12869, 50559, 50559, 281, 257, 2445, 300, 2516, 1045, 12869, 13, 50639, 50639, 400, 294, 300, 636, 11, 264, 2580, 1166, 5102, 307, 534, 1481, 365, 2699, 76, 15148, 11, 457, 570, 50887, 50887, 309, 4045, 291, 281, 1333, 295, 4088, 264, 3467, 2361, 322, 437, 291, 434, 9275, 13, 51195, 51195, 759, 291, 1320, 294, 257, 979, 19866, 300, 2516, 364, 560, 11, 257, 979, 19866, 300, 2516, 257, 1310, 6798, 11, 309, 311, 51433, 51433, 516, 281, 2066, 300, 281, 312, 14324, 493, 365, 264, 47479, 291, 1409, 365, 293, 9275, 51685, 51685, 729, 13, 51735, 51735], "temperature": 0.0, "avg_logprob": -0.09097753019414397, "compression_ratio": 1.928, "no_caption_prob": 1.4593679225072265e-06}, {"id": 309, "seek": 121910, "start": 1229.56, "end": 1235.7199999999998, "text": " it allows you to sort of transform the types based on what you're applying.", "tokens": [50364, 400, 309, 1709, 490, 257, 2445, 300, 2516, 1732, 12869, 281, 257, 2445, 300, 2516, 1451, 12869, 50559, 50559, 281, 257, 2445, 300, 2516, 1045, 12869, 13, 50639, 50639, 400, 294, 300, 636, 11, 264, 2580, 1166, 5102, 307, 534, 1481, 365, 2699, 76, 15148, 11, 457, 570, 50887, 50887, 309, 4045, 291, 281, 1333, 295, 4088, 264, 3467, 2361, 322, 437, 291, 434, 9275, 13, 51195, 51195, 759, 291, 1320, 294, 257, 979, 19866, 300, 2516, 364, 560, 11, 257, 979, 19866, 300, 2516, 257, 1310, 6798, 11, 309, 311, 51433, 51433, 516, 281, 2066, 300, 281, 312, 14324, 493, 365, 264, 47479, 291, 1409, 365, 293, 9275, 51685, 51685, 729, 13, 51735, 51735], "temperature": 0.0, "avg_logprob": -0.09097753019414397, "compression_ratio": 1.928, "no_caption_prob": 1.4593679225072265e-06}, {"id": 310, "seek": 121910, "start": 1235.7199999999998, "end": 1240.48, "text": " If you pass in a decoder that takes an int, a decoder that takes a maybe string, it's", "tokens": [50364, 400, 309, 1709, 490, 257, 2445, 300, 2516, 1732, 12869, 281, 257, 2445, 300, 2516, 1451, 12869, 50559, 50559, 281, 257, 2445, 300, 2516, 1045, 12869, 13, 50639, 50639, 400, 294, 300, 636, 11, 264, 2580, 1166, 5102, 307, 534, 1481, 365, 2699, 76, 15148, 11, 457, 570, 50887, 50887, 309, 4045, 291, 281, 1333, 295, 4088, 264, 3467, 2361, 322, 437, 291, 434, 9275, 13, 51195, 51195, 759, 291, 1320, 294, 257, 979, 19866, 300, 2516, 364, 560, 11, 257, 979, 19866, 300, 2516, 257, 1310, 6798, 11, 309, 311, 51433, 51433, 516, 281, 2066, 300, 281, 312, 14324, 493, 365, 264, 47479, 291, 1409, 365, 293, 9275, 51685, 51685, 729, 13, 51735, 51735], "temperature": 0.0, "avg_logprob": -0.09097753019414397, "compression_ratio": 1.928, "no_caption_prob": 1.4593679225072265e-06}, {"id": 311, "seek": 121910, "start": 1240.48, "end": 1245.52, "text": " going to expect that to be matching up with the constructor you started with and applying", "tokens": [50364, 400, 309, 1709, 490, 257, 2445, 300, 2516, 1732, 12869, 281, 257, 2445, 300, 2516, 1451, 12869, 50559, 50559, 281, 257, 2445, 300, 2516, 1045, 12869, 13, 50639, 50639, 400, 294, 300, 636, 11, 264, 2580, 1166, 5102, 307, 534, 1481, 365, 2699, 76, 15148, 11, 457, 570, 50887, 50887, 309, 4045, 291, 281, 1333, 295, 4088, 264, 3467, 2361, 322, 437, 291, 434, 9275, 13, 51195, 51195, 759, 291, 1320, 294, 257, 979, 19866, 300, 2516, 364, 560, 11, 257, 979, 19866, 300, 2516, 257, 1310, 6798, 11, 309, 311, 51433, 51433, 516, 281, 2066, 300, 281, 312, 14324, 493, 365, 264, 47479, 291, 1409, 365, 293, 9275, 51685, 51685, 729, 13, 51735, 51735], "temperature": 0.0, "avg_logprob": -0.09097753019414397, "compression_ratio": 1.928, "no_caption_prob": 1.4593679225072265e-06}, {"id": 312, "seek": 121910, "start": 1245.52, "end": 1246.52, "text": " those.", "tokens": [50364, 400, 309, 1709, 490, 257, 2445, 300, 2516, 1732, 12869, 281, 257, 2445, 300, 2516, 1451, 12869, 50559, 50559, 281, 257, 2445, 300, 2516, 1045, 12869, 13, 50639, 50639, 400, 294, 300, 636, 11, 264, 2580, 1166, 5102, 307, 534, 1481, 365, 2699, 76, 15148, 11, 457, 570, 50887, 50887, 309, 4045, 291, 281, 1333, 295, 4088, 264, 3467, 2361, 322, 437, 291, 434, 9275, 13, 51195, 51195, 759, 291, 1320, 294, 257, 979, 19866, 300, 2516, 364, 560, 11, 257, 979, 19866, 300, 2516, 257, 1310, 6798, 11, 309, 311, 51433, 51433, 516, 281, 2066, 300, 281, 312, 14324, 493, 365, 264, 47479, 291, 1409, 365, 293, 9275, 51685, 51685, 729, 13, 51735, 51735], "temperature": 0.0, "avg_logprob": -0.09097753019414397, "compression_ratio": 1.928, "no_caption_prob": 1.4593679225072265e-06}, {"id": 313, "seek": 124652, "start": 1246.52, "end": 1250.52, "text": " Well, and one of the things that you're saying here that I think you're hinting at is the", "tokens": [50364, 1042, 11, 293, 472, 295, 264, 721, 300, 291, 434, 1566, 510, 300, 286, 519, 291, 434, 12075, 278, 412, 307, 264, 50564, 50564, 1558, 300, 294, 11745, 9410, 11, 264, 2302, 636, 321, 3877, 4268, 307, 382, 257, 2638, 295, 50849, 50849, 1412, 34852, 13, 50922, 50922, 407, 321, 722, 365, 472, 420, 544, 4846, 4190, 11, 293, 321, 5692, 7620, 552, 666, 309, 727, 312, 51248, 51248, 264, 912, 2010, 11, 309, 727, 312, 257, 819, 2010, 11, 457, 321, 434, 5692, 29942, 552, 1826, 321, 51466, 51466, 4728, 483, 264, 5598, 300, 321, 528, 13, 51574, 51574, 400, 300, 311, 577, 321, 3877, 4268, 294, 11745, 9410, 13, 51738, 51738, 1779, 30, 51788, 51788, 865, 13, 51838, 51838], "temperature": 0.0, "avg_logprob": -0.12811462278288555, "compression_ratio": 1.8432835820895523, "no_caption_prob": 3.2698280847398564e-05}, {"id": 314, "seek": 124652, "start": 1250.52, "end": 1256.22, "text": " idea that in functional programming, the entire way we structure programs is as a series of", "tokens": [50364, 1042, 11, 293, 472, 295, 264, 721, 300, 291, 434, 1566, 510, 300, 286, 519, 291, 434, 12075, 278, 412, 307, 264, 50564, 50564, 1558, 300, 294, 11745, 9410, 11, 264, 2302, 636, 321, 3877, 4268, 307, 382, 257, 2638, 295, 50849, 50849, 1412, 34852, 13, 50922, 50922, 407, 321, 722, 365, 472, 420, 544, 4846, 4190, 11, 293, 321, 5692, 7620, 552, 666, 309, 727, 312, 51248, 51248, 264, 912, 2010, 11, 309, 727, 312, 257, 819, 2010, 11, 457, 321, 434, 5692, 29942, 552, 1826, 321, 51466, 51466, 4728, 483, 264, 5598, 300, 321, 528, 13, 51574, 51574, 400, 300, 311, 577, 321, 3877, 4268, 294, 11745, 9410, 13, 51738, 51738, 1779, 30, 51788, 51788, 865, 13, 51838, 51838], "temperature": 0.0, "avg_logprob": -0.12811462278288555, "compression_ratio": 1.8432835820895523, "no_caption_prob": 3.2698280847398564e-05}, {"id": 315, "seek": 124652, "start": 1256.22, "end": 1257.68, "text": " data transformations.", "tokens": [50364, 1042, 11, 293, 472, 295, 264, 721, 300, 291, 434, 1566, 510, 300, 286, 519, 291, 434, 12075, 278, 412, 307, 264, 50564, 50564, 1558, 300, 294, 11745, 9410, 11, 264, 2302, 636, 321, 3877, 4268, 307, 382, 257, 2638, 295, 50849, 50849, 1412, 34852, 13, 50922, 50922, 407, 321, 722, 365, 472, 420, 544, 4846, 4190, 11, 293, 321, 5692, 7620, 552, 666, 309, 727, 312, 51248, 51248, 264, 912, 2010, 11, 309, 727, 312, 257, 819, 2010, 11, 457, 321, 434, 5692, 29942, 552, 1826, 321, 51466, 51466, 4728, 483, 264, 5598, 300, 321, 528, 13, 51574, 51574, 400, 300, 311, 577, 321, 3877, 4268, 294, 11745, 9410, 13, 51738, 51738, 1779, 30, 51788, 51788, 865, 13, 51838, 51838], "temperature": 0.0, "avg_logprob": -0.12811462278288555, "compression_ratio": 1.8432835820895523, "no_caption_prob": 3.2698280847398564e-05}, {"id": 316, "seek": 124652, "start": 1257.68, "end": 1264.2, "text": " So we start with one or more input values, and we slowly convert them into it could be", "tokens": [50364, 1042, 11, 293, 472, 295, 264, 721, 300, 291, 434, 1566, 510, 300, 286, 519, 291, 434, 12075, 278, 412, 307, 264, 50564, 50564, 1558, 300, 294, 11745, 9410, 11, 264, 2302, 636, 321, 3877, 4268, 307, 382, 257, 2638, 295, 50849, 50849, 1412, 34852, 13, 50922, 50922, 407, 321, 722, 365, 472, 420, 544, 4846, 4190, 11, 293, 321, 5692, 7620, 552, 666, 309, 727, 312, 51248, 51248, 264, 912, 2010, 11, 309, 727, 312, 257, 819, 2010, 11, 457, 321, 434, 5692, 29942, 552, 1826, 321, 51466, 51466, 4728, 483, 264, 5598, 300, 321, 528, 13, 51574, 51574, 400, 300, 311, 577, 321, 3877, 4268, 294, 11745, 9410, 13, 51738, 51738, 1779, 30, 51788, 51788, 865, 13, 51838, 51838], "temperature": 0.0, "avg_logprob": -0.12811462278288555, "compression_ratio": 1.8432835820895523, "no_caption_prob": 3.2698280847398564e-05}, {"id": 317, "seek": 124652, "start": 1264.2, "end": 1268.56, "text": " the same type, it could be a different type, but we're slowly converting them until we", "tokens": [50364, 1042, 11, 293, 472, 295, 264, 721, 300, 291, 434, 1566, 510, 300, 286, 519, 291, 434, 12075, 278, 412, 307, 264, 50564, 50564, 1558, 300, 294, 11745, 9410, 11, 264, 2302, 636, 321, 3877, 4268, 307, 382, 257, 2638, 295, 50849, 50849, 1412, 34852, 13, 50922, 50922, 407, 321, 722, 365, 472, 420, 544, 4846, 4190, 11, 293, 321, 5692, 7620, 552, 666, 309, 727, 312, 51248, 51248, 264, 912, 2010, 11, 309, 727, 312, 257, 819, 2010, 11, 457, 321, 434, 5692, 29942, 552, 1826, 321, 51466, 51466, 4728, 483, 264, 5598, 300, 321, 528, 13, 51574, 51574, 400, 300, 311, 577, 321, 3877, 4268, 294, 11745, 9410, 13, 51738, 51738, 1779, 30, 51788, 51788, 865, 13, 51838, 51838], "temperature": 0.0, "avg_logprob": -0.12811462278288555, "compression_ratio": 1.8432835820895523, "no_caption_prob": 3.2698280847398564e-05}, {"id": 318, "seek": 124652, "start": 1268.56, "end": 1270.72, "text": " eventually get the output that we want.", "tokens": [50364, 1042, 11, 293, 472, 295, 264, 721, 300, 291, 434, 1566, 510, 300, 286, 519, 291, 434, 12075, 278, 412, 307, 264, 50564, 50564, 1558, 300, 294, 11745, 9410, 11, 264, 2302, 636, 321, 3877, 4268, 307, 382, 257, 2638, 295, 50849, 50849, 1412, 34852, 13, 50922, 50922, 407, 321, 722, 365, 472, 420, 544, 4846, 4190, 11, 293, 321, 5692, 7620, 552, 666, 309, 727, 312, 51248, 51248, 264, 912, 2010, 11, 309, 727, 312, 257, 819, 2010, 11, 457, 321, 434, 5692, 29942, 552, 1826, 321, 51466, 51466, 4728, 483, 264, 5598, 300, 321, 528, 13, 51574, 51574, 400, 300, 311, 577, 321, 3877, 4268, 294, 11745, 9410, 13, 51738, 51738, 1779, 30, 51788, 51788, 865, 13, 51838, 51838], "temperature": 0.0, "avg_logprob": -0.12811462278288555, "compression_ratio": 1.8432835820895523, "no_caption_prob": 3.2698280847398564e-05}, {"id": 319, "seek": 124652, "start": 1270.72, "end": 1274.0, "text": " And that's how we structure programs in functional programming.", "tokens": [50364, 1042, 11, 293, 472, 295, 264, 721, 300, 291, 434, 1566, 510, 300, 286, 519, 291, 434, 12075, 278, 412, 307, 264, 50564, 50564, 1558, 300, 294, 11745, 9410, 11, 264, 2302, 636, 321, 3877, 4268, 307, 382, 257, 2638, 295, 50849, 50849, 1412, 34852, 13, 50922, 50922, 407, 321, 722, 365, 472, 420, 544, 4846, 4190, 11, 293, 321, 5692, 7620, 552, 666, 309, 727, 312, 51248, 51248, 264, 912, 2010, 11, 309, 727, 312, 257, 819, 2010, 11, 457, 321, 434, 5692, 29942, 552, 1826, 321, 51466, 51466, 4728, 483, 264, 5598, 300, 321, 528, 13, 51574, 51574, 400, 300, 311, 577, 321, 3877, 4268, 294, 11745, 9410, 13, 51738, 51738, 1779, 30, 51788, 51788, 865, 13, 51838, 51838], "temperature": 0.0, "avg_logprob": -0.12811462278288555, "compression_ratio": 1.8432835820895523, "no_caption_prob": 3.2698280847398564e-05}, {"id": 320, "seek": 124652, "start": 1274.0, "end": 1275.0, "text": " Right?", "tokens": [50364, 1042, 11, 293, 472, 295, 264, 721, 300, 291, 434, 1566, 510, 300, 286, 519, 291, 434, 12075, 278, 412, 307, 264, 50564, 50564, 1558, 300, 294, 11745, 9410, 11, 264, 2302, 636, 321, 3877, 4268, 307, 382, 257, 2638, 295, 50849, 50849, 1412, 34852, 13, 50922, 50922, 407, 321, 722, 365, 472, 420, 544, 4846, 4190, 11, 293, 321, 5692, 7620, 552, 666, 309, 727, 312, 51248, 51248, 264, 912, 2010, 11, 309, 727, 312, 257, 819, 2010, 11, 457, 321, 434, 5692, 29942, 552, 1826, 321, 51466, 51466, 4728, 483, 264, 5598, 300, 321, 528, 13, 51574, 51574, 400, 300, 311, 577, 321, 3877, 4268, 294, 11745, 9410, 13, 51738, 51738, 1779, 30, 51788, 51788, 865, 13, 51838, 51838], "temperature": 0.0, "avg_logprob": -0.12811462278288555, "compression_ratio": 1.8432835820895523, "no_caption_prob": 3.2698280847398564e-05}, {"id": 321, "seek": 124652, "start": 1275.0, "end": 1276.0, "text": " Yeah.", "tokens": [50364, 1042, 11, 293, 472, 295, 264, 721, 300, 291, 434, 1566, 510, 300, 286, 519, 291, 434, 12075, 278, 412, 307, 264, 50564, 50564, 1558, 300, 294, 11745, 9410, 11, 264, 2302, 636, 321, 3877, 4268, 307, 382, 257, 2638, 295, 50849, 50849, 1412, 34852, 13, 50922, 50922, 407, 321, 722, 365, 472, 420, 544, 4846, 4190, 11, 293, 321, 5692, 7620, 552, 666, 309, 727, 312, 51248, 51248, 264, 912, 2010, 11, 309, 727, 312, 257, 819, 2010, 11, 457, 321, 434, 5692, 29942, 552, 1826, 321, 51466, 51466, 4728, 483, 264, 5598, 300, 321, 528, 13, 51574, 51574, 400, 300, 311, 577, 321, 3877, 4268, 294, 11745, 9410, 13, 51738, 51738, 1779, 30, 51788, 51788, 865, 13, 51838, 51838], "temperature": 0.0, "avg_logprob": -0.12811462278288555, "compression_ratio": 1.8432835820895523, "no_caption_prob": 3.2698280847398564e-05}, {"id": 322, "seek": 127600, "start": 1276.0, "end": 1279.4, "text": " And it's just like when you're writing code, it's like this little puzzle that you're like,", "tokens": [50364, 400, 309, 311, 445, 411, 562, 291, 434, 3579, 3089, 11, 309, 311, 411, 341, 707, 12805, 300, 291, 434, 411, 11, 50534, 50534, 286, 458, 286, 643, 257, 2158, 295, 341, 2010, 11, 293, 577, 360, 286, 1322, 309, 30, 50772, 50772, 286, 914, 11, 321, 445, 2825, 466, 341, 3938, 294, 527, 45592, 3500, 11, 508, 2032, 268, 11, 295, 341, 51000, 51000, 1399, 295, 45592, 3467, 562, 264, 3467, 3212, 380, 1596, 15669, 1214, 293, 577, 291, 51328, 51328, 2573, 484, 437, 2010, 281, 829, 294, 264, 2010, 5458, 13, 51487, 51487, 4803, 309, 311, 534, 4961, 281, 445, 1821, 484, 613, 707, 24138, 293, 584, 11, 1954, 11, 341, 11, 51683, 51683, 286, 458, 286, 643, 257, 2158, 295, 341, 2010, 13, 51783, 51783], "temperature": 0.0, "avg_logprob": -0.1575050060565655, "compression_ratio": 1.8593155893536122, "no_caption_prob": 4.539586734608747e-05}, {"id": 323, "seek": 127600, "start": 1279.4, "end": 1284.16, "text": " I know I need a value of this type, and how do I build it?", "tokens": [50364, 400, 309, 311, 445, 411, 562, 291, 434, 3579, 3089, 11, 309, 311, 411, 341, 707, 12805, 300, 291, 434, 411, 11, 50534, 50534, 286, 458, 286, 643, 257, 2158, 295, 341, 2010, 11, 293, 577, 360, 286, 1322, 309, 30, 50772, 50772, 286, 914, 11, 321, 445, 2825, 466, 341, 3938, 294, 527, 45592, 3500, 11, 508, 2032, 268, 11, 295, 341, 51000, 51000, 1399, 295, 45592, 3467, 562, 264, 3467, 3212, 380, 1596, 15669, 1214, 293, 577, 291, 51328, 51328, 2573, 484, 437, 2010, 281, 829, 294, 264, 2010, 5458, 13, 51487, 51487, 4803, 309, 311, 534, 4961, 281, 445, 1821, 484, 613, 707, 24138, 293, 584, 11, 1954, 11, 341, 11, 51683, 51683, 286, 458, 286, 643, 257, 2158, 295, 341, 2010, 13, 51783, 51783], "temperature": 0.0, "avg_logprob": -0.1575050060565655, "compression_ratio": 1.8593155893536122, "no_caption_prob": 4.539586734608747e-05}, {"id": 324, "seek": 127600, "start": 1284.16, "end": 1288.72, "text": " I mean, we just talked about this recently in our debugging episode, Jeroen, of this", "tokens": [50364, 400, 309, 311, 445, 411, 562, 291, 434, 3579, 3089, 11, 309, 311, 411, 341, 707, 12805, 300, 291, 434, 411, 11, 50534, 50534, 286, 458, 286, 643, 257, 2158, 295, 341, 2010, 11, 293, 577, 360, 286, 1322, 309, 30, 50772, 50772, 286, 914, 11, 321, 445, 2825, 466, 341, 3938, 294, 527, 45592, 3500, 11, 508, 2032, 268, 11, 295, 341, 51000, 51000, 1399, 295, 45592, 3467, 562, 264, 3467, 3212, 380, 1596, 15669, 1214, 293, 577, 291, 51328, 51328, 2573, 484, 437, 2010, 281, 829, 294, 264, 2010, 5458, 13, 51487, 51487, 4803, 309, 311, 534, 4961, 281, 445, 1821, 484, 613, 707, 24138, 293, 584, 11, 1954, 11, 341, 11, 51683, 51683, 286, 458, 286, 643, 257, 2158, 295, 341, 2010, 13, 51783, 51783], "temperature": 0.0, "avg_logprob": -0.1575050060565655, "compression_ratio": 1.8593155893536122, "no_caption_prob": 4.539586734608747e-05}, {"id": 325, "seek": 127600, "start": 1288.72, "end": 1295.28, "text": " process of debugging types when the types aren't quite fitting together and how you", "tokens": [50364, 400, 309, 311, 445, 411, 562, 291, 434, 3579, 3089, 11, 309, 311, 411, 341, 707, 12805, 300, 291, 434, 411, 11, 50534, 50534, 286, 458, 286, 643, 257, 2158, 295, 341, 2010, 11, 293, 577, 360, 286, 1322, 309, 30, 50772, 50772, 286, 914, 11, 321, 445, 2825, 466, 341, 3938, 294, 527, 45592, 3500, 11, 508, 2032, 268, 11, 295, 341, 51000, 51000, 1399, 295, 45592, 3467, 562, 264, 3467, 3212, 380, 1596, 15669, 1214, 293, 577, 291, 51328, 51328, 2573, 484, 437, 2010, 281, 829, 294, 264, 2010, 5458, 13, 51487, 51487, 4803, 309, 311, 534, 4961, 281, 445, 1821, 484, 613, 707, 24138, 293, 584, 11, 1954, 11, 341, 11, 51683, 51683, 286, 458, 286, 643, 257, 2158, 295, 341, 2010, 13, 51783, 51783], "temperature": 0.0, "avg_logprob": -0.1575050060565655, "compression_ratio": 1.8593155893536122, "no_caption_prob": 4.539586734608747e-05}, {"id": 326, "seek": 127600, "start": 1295.28, "end": 1298.46, "text": " figure out what type to put in the type hole.", "tokens": [50364, 400, 309, 311, 445, 411, 562, 291, 434, 3579, 3089, 11, 309, 311, 411, 341, 707, 12805, 300, 291, 434, 411, 11, 50534, 50534, 286, 458, 286, 643, 257, 2158, 295, 341, 2010, 11, 293, 577, 360, 286, 1322, 309, 30, 50772, 50772, 286, 914, 11, 321, 445, 2825, 466, 341, 3938, 294, 527, 45592, 3500, 11, 508, 2032, 268, 11, 295, 341, 51000, 51000, 1399, 295, 45592, 3467, 562, 264, 3467, 3212, 380, 1596, 15669, 1214, 293, 577, 291, 51328, 51328, 2573, 484, 437, 2010, 281, 829, 294, 264, 2010, 5458, 13, 51487, 51487, 4803, 309, 311, 534, 4961, 281, 445, 1821, 484, 613, 707, 24138, 293, 584, 11, 1954, 11, 341, 11, 51683, 51683, 286, 458, 286, 643, 257, 2158, 295, 341, 2010, 13, 51783, 51783], "temperature": 0.0, "avg_logprob": -0.1575050060565655, "compression_ratio": 1.8593155893536122, "no_caption_prob": 4.539586734608747e-05}, {"id": 327, "seek": 127600, "start": 1298.46, "end": 1302.38, "text": " Sometimes it's really helpful to just break out these little puzzles and say, oh, this,", "tokens": [50364, 400, 309, 311, 445, 411, 562, 291, 434, 3579, 3089, 11, 309, 311, 411, 341, 707, 12805, 300, 291, 434, 411, 11, 50534, 50534, 286, 458, 286, 643, 257, 2158, 295, 341, 2010, 11, 293, 577, 360, 286, 1322, 309, 30, 50772, 50772, 286, 914, 11, 321, 445, 2825, 466, 341, 3938, 294, 527, 45592, 3500, 11, 508, 2032, 268, 11, 295, 341, 51000, 51000, 1399, 295, 45592, 3467, 562, 264, 3467, 3212, 380, 1596, 15669, 1214, 293, 577, 291, 51328, 51328, 2573, 484, 437, 2010, 281, 829, 294, 264, 2010, 5458, 13, 51487, 51487, 4803, 309, 311, 534, 4961, 281, 445, 1821, 484, 613, 707, 24138, 293, 584, 11, 1954, 11, 341, 11, 51683, 51683, 286, 458, 286, 643, 257, 2158, 295, 341, 2010, 13, 51783, 51783], "temperature": 0.0, "avg_logprob": -0.1575050060565655, "compression_ratio": 1.8593155893536122, "no_caption_prob": 4.539586734608747e-05}, {"id": 328, "seek": 127600, "start": 1302.38, "end": 1304.38, "text": " I know I need a value of this type.", "tokens": [50364, 400, 309, 311, 445, 411, 562, 291, 434, 3579, 3089, 11, 309, 311, 411, 341, 707, 12805, 300, 291, 434, 411, 11, 50534, 50534, 286, 458, 286, 643, 257, 2158, 295, 341, 2010, 11, 293, 577, 360, 286, 1322, 309, 30, 50772, 50772, 286, 914, 11, 321, 445, 2825, 466, 341, 3938, 294, 527, 45592, 3500, 11, 508, 2032, 268, 11, 295, 341, 51000, 51000, 1399, 295, 45592, 3467, 562, 264, 3467, 3212, 380, 1596, 15669, 1214, 293, 577, 291, 51328, 51328, 2573, 484, 437, 2010, 281, 829, 294, 264, 2010, 5458, 13, 51487, 51487, 4803, 309, 311, 534, 4961, 281, 445, 1821, 484, 613, 707, 24138, 293, 584, 11, 1954, 11, 341, 11, 51683, 51683, 286, 458, 286, 643, 257, 2158, 295, 341, 2010, 13, 51783, 51783], "temperature": 0.0, "avg_logprob": -0.1575050060565655, "compression_ratio": 1.8593155893536122, "no_caption_prob": 4.539586734608747e-05}, {"id": 329, "seek": 130438, "start": 1304.38, "end": 1309.9, "text": " Let me pull this out into a let and break it out into a sub puzzle, give it a type annotation.", "tokens": [50364, 961, 385, 2235, 341, 484, 666, 257, 718, 293, 1821, 309, 484, 666, 257, 1422, 12805, 11, 976, 309, 257, 2010, 48654, 13, 50640, 50640, 440, 2010, 48654, 25019, 300, 300, 2010, 576, 5039, 264, 12805, 294, 300, 5021, 295, 5821, 13, 50989, 50989, 400, 291, 500, 380, 1939, 362, 257, 2010, 295, 300, 2158, 300, 291, 10768, 365, 428, 48654, 13, 51211, 51211, 407, 586, 300, 311, 428, 958, 12805, 281, 5039, 13, 51311, 51311, 865, 11, 456, 311, 341, 11, 291, 458, 11, 406, 787, 307, 11745, 9410, 466, 27210, 1412, 11, 51631, 51631], "temperature": 0.0, "avg_logprob": -0.1119821022967903, "compression_ratio": 1.7088607594936709, "no_caption_prob": 1.0615887731546536e-05}, {"id": 330, "seek": 130438, "start": 1309.9, "end": 1316.88, "text": " The type annotation proves that that type would solve the puzzle in that chain of applications.", "tokens": [50364, 961, 385, 2235, 341, 484, 666, 257, 718, 293, 1821, 309, 484, 666, 257, 1422, 12805, 11, 976, 309, 257, 2010, 48654, 13, 50640, 50640, 440, 2010, 48654, 25019, 300, 300, 2010, 576, 5039, 264, 12805, 294, 300, 5021, 295, 5821, 13, 50989, 50989, 400, 291, 500, 380, 1939, 362, 257, 2010, 295, 300, 2158, 300, 291, 10768, 365, 428, 48654, 13, 51211, 51211, 407, 586, 300, 311, 428, 958, 12805, 281, 5039, 13, 51311, 51311, 865, 11, 456, 311, 341, 11, 291, 458, 11, 406, 787, 307, 11745, 9410, 466, 27210, 1412, 11, 51631, 51631], "temperature": 0.0, "avg_logprob": -0.1119821022967903, "compression_ratio": 1.7088607594936709, "no_caption_prob": 1.0615887731546536e-05}, {"id": 331, "seek": 130438, "start": 1316.88, "end": 1321.3200000000002, "text": " And you don't yet have a type of that value that you promised with your annotation.", "tokens": [50364, 961, 385, 2235, 341, 484, 666, 257, 718, 293, 1821, 309, 484, 666, 257, 1422, 12805, 11, 976, 309, 257, 2010, 48654, 13, 50640, 50640, 440, 2010, 48654, 25019, 300, 300, 2010, 576, 5039, 264, 12805, 294, 300, 5021, 295, 5821, 13, 50989, 50989, 400, 291, 500, 380, 1939, 362, 257, 2010, 295, 300, 2158, 300, 291, 10768, 365, 428, 48654, 13, 51211, 51211, 407, 586, 300, 311, 428, 958, 12805, 281, 5039, 13, 51311, 51311, 865, 11, 456, 311, 341, 11, 291, 458, 11, 406, 787, 307, 11745, 9410, 466, 27210, 1412, 11, 51631, 51631], "temperature": 0.0, "avg_logprob": -0.1119821022967903, "compression_ratio": 1.7088607594936709, "no_caption_prob": 1.0615887731546536e-05}, {"id": 332, "seek": 130438, "start": 1321.3200000000002, "end": 1323.3200000000002, "text": " So now that's your next puzzle to solve.", "tokens": [50364, 961, 385, 2235, 341, 484, 666, 257, 718, 293, 1821, 309, 484, 666, 257, 1422, 12805, 11, 976, 309, 257, 2010, 48654, 13, 50640, 50640, 440, 2010, 48654, 25019, 300, 300, 2010, 576, 5039, 264, 12805, 294, 300, 5021, 295, 5821, 13, 50989, 50989, 400, 291, 500, 380, 1939, 362, 257, 2010, 295, 300, 2158, 300, 291, 10768, 365, 428, 48654, 13, 51211, 51211, 407, 586, 300, 311, 428, 958, 12805, 281, 5039, 13, 51311, 51311, 865, 11, 456, 311, 341, 11, 291, 458, 11, 406, 787, 307, 11745, 9410, 466, 27210, 1412, 11, 51631, 51631], "temperature": 0.0, "avg_logprob": -0.1119821022967903, "compression_ratio": 1.7088607594936709, "no_caption_prob": 1.0615887731546536e-05}, {"id": 333, "seek": 130438, "start": 1323.3200000000002, "end": 1329.72, "text": " Yeah, there's this, you know, not only is functional programming about transforming data,", "tokens": [50364, 961, 385, 2235, 341, 484, 666, 257, 718, 293, 1821, 309, 484, 666, 257, 1422, 12805, 11, 976, 309, 257, 2010, 48654, 13, 50640, 50640, 440, 2010, 48654, 25019, 300, 300, 2010, 576, 5039, 264, 12805, 294, 300, 5021, 295, 5821, 13, 50989, 50989, 400, 291, 500, 380, 1939, 362, 257, 2010, 295, 300, 2158, 300, 291, 10768, 365, 428, 48654, 13, 51211, 51211, 407, 586, 300, 311, 428, 958, 12805, 281, 5039, 13, 51311, 51311, 865, 11, 456, 311, 341, 11, 291, 458, 11, 406, 787, 307, 11745, 9410, 466, 27210, 1412, 11, 51631, 51631], "temperature": 0.0, "avg_logprob": -0.1119821022967903, "compression_ratio": 1.7088607594936709, "no_caption_prob": 1.0615887731546536e-05}, {"id": 334, "seek": 132972, "start": 1329.72, "end": 1335.32, "text": " but another key concept in at least structuring functional programs is breaking down larger", "tokens": [50364, 457, 1071, 2141, 3410, 294, 412, 1935, 6594, 1345, 11745, 4268, 307, 7697, 760, 4833, 50644, 50644, 34852, 666, 4356, 4439, 13, 50797, 50797, 509, 1062, 818, 300, 48356, 11, 1184, 295, 597, 366, 4356, 35592, 11, 512, 295, 597, 51083, 51083, 1062, 312, 41807, 13, 51155, 51155, 400, 300, 311, 689, 321, 483, 666, 439, 264, 1019, 7731, 11745, 9410, 10392, 366, 5101, 51418, 51418, 445, 8294, 300, 321, 393, 764, 281, 360, 300, 11, 281, 1821, 760, 257, 4833, 9887, 666, 51733, 51733, 4356, 3755, 13, 51783, 51783, 1779, 13, 51833, 51833], "temperature": 0.0, "avg_logprob": -0.10085848967234294, "compression_ratio": 1.7975206611570247, "no_caption_prob": 7.411201750073815e-06}, {"id": 335, "seek": 132972, "start": 1335.32, "end": 1338.38, "text": " transformations into smaller steps.", "tokens": [50364, 457, 1071, 2141, 3410, 294, 412, 1935, 6594, 1345, 11745, 4268, 307, 7697, 760, 4833, 50644, 50644, 34852, 666, 4356, 4439, 13, 50797, 50797, 509, 1062, 818, 300, 48356, 11, 1184, 295, 597, 366, 4356, 35592, 11, 512, 295, 597, 51083, 51083, 1062, 312, 41807, 13, 51155, 51155, 400, 300, 311, 689, 321, 483, 666, 439, 264, 1019, 7731, 11745, 9410, 10392, 366, 5101, 51418, 51418, 445, 8294, 300, 321, 393, 764, 281, 360, 300, 11, 281, 1821, 760, 257, 4833, 9887, 666, 51733, 51733, 4356, 3755, 13, 51783, 51783, 1779, 13, 51833, 51833], "temperature": 0.0, "avg_logprob": -0.10085848967234294, "compression_ratio": 1.7975206611570247, "no_caption_prob": 7.411201750073815e-06}, {"id": 336, "seek": 132972, "start": 1338.38, "end": 1344.1000000000001, "text": " You might call that decomposition, each of which are smaller transforms, some of which", "tokens": [50364, 457, 1071, 2141, 3410, 294, 412, 1935, 6594, 1345, 11745, 4268, 307, 7697, 760, 4833, 50644, 50644, 34852, 666, 4356, 4439, 13, 50797, 50797, 509, 1062, 818, 300, 48356, 11, 1184, 295, 597, 366, 4356, 35592, 11, 512, 295, 597, 51083, 51083, 1062, 312, 41807, 13, 51155, 51155, 400, 300, 311, 689, 321, 483, 666, 439, 264, 1019, 7731, 11745, 9410, 10392, 366, 5101, 51418, 51418, 445, 8294, 300, 321, 393, 764, 281, 360, 300, 11, 281, 1821, 760, 257, 4833, 9887, 666, 51733, 51733, 4356, 3755, 13, 51783, 51783, 1779, 13, 51833, 51833], "temperature": 0.0, "avg_logprob": -0.10085848967234294, "compression_ratio": 1.7975206611570247, "no_caption_prob": 7.411201750073815e-06}, {"id": 337, "seek": 132972, "start": 1344.1000000000001, "end": 1345.54, "text": " might be reusable.", "tokens": [50364, 457, 1071, 2141, 3410, 294, 412, 1935, 6594, 1345, 11745, 4268, 307, 7697, 760, 4833, 50644, 50644, 34852, 666, 4356, 4439, 13, 50797, 50797, 509, 1062, 818, 300, 48356, 11, 1184, 295, 597, 366, 4356, 35592, 11, 512, 295, 597, 51083, 51083, 1062, 312, 41807, 13, 51155, 51155, 400, 300, 311, 689, 321, 483, 666, 439, 264, 1019, 7731, 11745, 9410, 10392, 366, 5101, 51418, 51418, 445, 8294, 300, 321, 393, 764, 281, 360, 300, 11, 281, 1821, 760, 257, 4833, 9887, 666, 51733, 51733, 4356, 3755, 13, 51783, 51783, 1779, 13, 51833, 51833], "temperature": 0.0, "avg_logprob": -0.10085848967234294, "compression_ratio": 1.7975206611570247, "no_caption_prob": 7.411201750073815e-06}, {"id": 338, "seek": 132972, "start": 1345.54, "end": 1350.8, "text": " And that's where we get into all the fun deeper functional programming concepts are generally", "tokens": [50364, 457, 1071, 2141, 3410, 294, 412, 1935, 6594, 1345, 11745, 4268, 307, 7697, 760, 4833, 50644, 50644, 34852, 666, 4356, 4439, 13, 50797, 50797, 509, 1062, 818, 300, 48356, 11, 1184, 295, 597, 366, 4356, 35592, 11, 512, 295, 597, 51083, 51083, 1062, 312, 41807, 13, 51155, 51155, 400, 300, 311, 689, 321, 483, 666, 439, 264, 1019, 7731, 11745, 9410, 10392, 366, 5101, 51418, 51418, 445, 8294, 300, 321, 393, 764, 281, 360, 300, 11, 281, 1821, 760, 257, 4833, 9887, 666, 51733, 51733, 4356, 3755, 13, 51783, 51783, 1779, 13, 51833, 51833], "temperature": 0.0, "avg_logprob": -0.10085848967234294, "compression_ratio": 1.7975206611570247, "no_caption_prob": 7.411201750073815e-06}, {"id": 339, "seek": 132972, "start": 1350.8, "end": 1357.1000000000001, "text": " just patterns that we can use to do that, to break down a larger transformation into", "tokens": [50364, 457, 1071, 2141, 3410, 294, 412, 1935, 6594, 1345, 11745, 4268, 307, 7697, 760, 4833, 50644, 50644, 34852, 666, 4356, 4439, 13, 50797, 50797, 509, 1062, 818, 300, 48356, 11, 1184, 295, 597, 366, 4356, 35592, 11, 512, 295, 597, 51083, 51083, 1062, 312, 41807, 13, 51155, 51155, 400, 300, 311, 689, 321, 483, 666, 439, 264, 1019, 7731, 11745, 9410, 10392, 366, 5101, 51418, 51418, 445, 8294, 300, 321, 393, 764, 281, 360, 300, 11, 281, 1821, 760, 257, 4833, 9887, 666, 51733, 51733, 4356, 3755, 13, 51783, 51783, 1779, 13, 51833, 51833], "temperature": 0.0, "avg_logprob": -0.10085848967234294, "compression_ratio": 1.7975206611570247, "no_caption_prob": 7.411201750073815e-06}, {"id": 340, "seek": 132972, "start": 1357.1000000000001, "end": 1358.1000000000001, "text": " smaller pieces.", "tokens": [50364, 457, 1071, 2141, 3410, 294, 412, 1935, 6594, 1345, 11745, 4268, 307, 7697, 760, 4833, 50644, 50644, 34852, 666, 4356, 4439, 13, 50797, 50797, 509, 1062, 818, 300, 48356, 11, 1184, 295, 597, 366, 4356, 35592, 11, 512, 295, 597, 51083, 51083, 1062, 312, 41807, 13, 51155, 51155, 400, 300, 311, 689, 321, 483, 666, 439, 264, 1019, 7731, 11745, 9410, 10392, 366, 5101, 51418, 51418, 445, 8294, 300, 321, 393, 764, 281, 360, 300, 11, 281, 1821, 760, 257, 4833, 9887, 666, 51733, 51733, 4356, 3755, 13, 51783, 51783, 1779, 13, 51833, 51833], "temperature": 0.0, "avg_logprob": -0.10085848967234294, "compression_ratio": 1.7975206611570247, "no_caption_prob": 7.411201750073815e-06}, {"id": 341, "seek": 132972, "start": 1358.1000000000001, "end": 1359.1000000000001, "text": " Right.", "tokens": [50364, 457, 1071, 2141, 3410, 294, 412, 1935, 6594, 1345, 11745, 4268, 307, 7697, 760, 4833, 50644, 50644, 34852, 666, 4356, 4439, 13, 50797, 50797, 509, 1062, 818, 300, 48356, 11, 1184, 295, 597, 366, 4356, 35592, 11, 512, 295, 597, 51083, 51083, 1062, 312, 41807, 13, 51155, 51155, 400, 300, 311, 689, 321, 483, 666, 439, 264, 1019, 7731, 11745, 9410, 10392, 366, 5101, 51418, 51418, 445, 8294, 300, 321, 393, 764, 281, 360, 300, 11, 281, 1821, 760, 257, 4833, 9887, 666, 51733, 51733, 4356, 3755, 13, 51783, 51783, 1779, 13, 51833, 51833], "temperature": 0.0, "avg_logprob": -0.10085848967234294, "compression_ratio": 1.7975206611570247, "no_caption_prob": 7.411201750073815e-06}, {"id": 342, "seek": 135910, "start": 1359.1, "end": 1363.8999999999999, "text": " Yeah, I wrote this blog post, combinators, inverting top down transforms, where I kind", "tokens": [50364, 865, 11, 286, 4114, 341, 6968, 2183, 11, 38514, 3391, 11, 28653, 783, 1192, 760, 35592, 11, 689, 286, 733, 50604, 50604, 295, 2825, 466, 11, 411, 11, 264, 2649, 295, 1953, 466, 257, 1154, 382, 613, 1333, 295, 10199, 712, 50990, 50990, 1422, 2740, 420, 22867, 329, 712, 11, 286, 500, 380, 458, 13, 51202, 51202, 1981, 707, 7697, 760, 666, 1422, 2740, 689, 291, 584, 11, 411, 11, 286, 458, 577, 281, 979, 1429, 51448, 51448, 257, 4195, 11, 457, 286, 914, 11, 689, 669, 286, 516, 281, 979, 1429, 264, 4195, 490, 30, 51625, 51625, 708, 1412, 307, 309, 516, 281, 312, 8345, 766, 295, 30, 51721, 51721, 1119, 309, 516, 281, 312, 15646, 292, 833, 257, 3840, 295, 7909, 30, 51835, 51835], "temperature": 0.0, "avg_logprob": -0.13351650536060333, "compression_ratio": 1.755639097744361, "no_caption_prob": 1.0451367415953428e-05}, {"id": 343, "seek": 135910, "start": 1363.8999999999999, "end": 1371.62, "text": " of talked about, like, the difference of thinking about a problem as these sort of composable", "tokens": [50364, 865, 11, 286, 4114, 341, 6968, 2183, 11, 38514, 3391, 11, 28653, 783, 1192, 760, 35592, 11, 689, 286, 733, 50604, 50604, 295, 2825, 466, 11, 411, 11, 264, 2649, 295, 1953, 466, 257, 1154, 382, 613, 1333, 295, 10199, 712, 50990, 50990, 1422, 2740, 420, 22867, 329, 712, 11, 286, 500, 380, 458, 13, 51202, 51202, 1981, 707, 7697, 760, 666, 1422, 2740, 689, 291, 584, 11, 411, 11, 286, 458, 577, 281, 979, 1429, 51448, 51448, 257, 4195, 11, 457, 286, 914, 11, 689, 669, 286, 516, 281, 979, 1429, 264, 4195, 490, 30, 51625, 51625, 708, 1412, 307, 309, 516, 281, 312, 8345, 766, 295, 30, 51721, 51721, 1119, 309, 516, 281, 312, 15646, 292, 833, 257, 3840, 295, 7909, 30, 51835, 51835], "temperature": 0.0, "avg_logprob": -0.13351650536060333, "compression_ratio": 1.755639097744361, "no_caption_prob": 1.0451367415953428e-05}, {"id": 344, "seek": 135910, "start": 1371.62, "end": 1375.86, "text": " sub problems or decomposable, I don't know.", "tokens": [50364, 865, 11, 286, 4114, 341, 6968, 2183, 11, 38514, 3391, 11, 28653, 783, 1192, 760, 35592, 11, 689, 286, 733, 50604, 50604, 295, 2825, 466, 11, 411, 11, 264, 2649, 295, 1953, 466, 257, 1154, 382, 613, 1333, 295, 10199, 712, 50990, 50990, 1422, 2740, 420, 22867, 329, 712, 11, 286, 500, 380, 458, 13, 51202, 51202, 1981, 707, 7697, 760, 666, 1422, 2740, 689, 291, 584, 11, 411, 11, 286, 458, 577, 281, 979, 1429, 51448, 51448, 257, 4195, 11, 457, 286, 914, 11, 689, 669, 286, 516, 281, 979, 1429, 264, 4195, 490, 30, 51625, 51625, 708, 1412, 307, 309, 516, 281, 312, 8345, 766, 295, 30, 51721, 51721, 1119, 309, 516, 281, 312, 15646, 292, 833, 257, 3840, 295, 7909, 30, 51835, 51835], "temperature": 0.0, "avg_logprob": -0.13351650536060333, "compression_ratio": 1.755639097744361, "no_caption_prob": 1.0451367415953428e-05}, {"id": 345, "seek": 135910, "start": 1375.86, "end": 1380.78, "text": " These little breaking down into sub problems where you say, like, I know how to decode", "tokens": [50364, 865, 11, 286, 4114, 341, 6968, 2183, 11, 38514, 3391, 11, 28653, 783, 1192, 760, 35592, 11, 689, 286, 733, 50604, 50604, 295, 2825, 466, 11, 411, 11, 264, 2649, 295, 1953, 466, 257, 1154, 382, 613, 1333, 295, 10199, 712, 50990, 50990, 1422, 2740, 420, 22867, 329, 712, 11, 286, 500, 380, 458, 13, 51202, 51202, 1981, 707, 7697, 760, 666, 1422, 2740, 689, 291, 584, 11, 411, 11, 286, 458, 577, 281, 979, 1429, 51448, 51448, 257, 4195, 11, 457, 286, 914, 11, 689, 669, 286, 516, 281, 979, 1429, 264, 4195, 490, 30, 51625, 51625, 708, 1412, 307, 309, 516, 281, 312, 8345, 766, 295, 30, 51721, 51721, 1119, 309, 516, 281, 312, 15646, 292, 833, 257, 3840, 295, 7909, 30, 51835, 51835], "temperature": 0.0, "avg_logprob": -0.13351650536060333, "compression_ratio": 1.755639097744361, "no_caption_prob": 1.0451367415953428e-05}, {"id": 346, "seek": 135910, "start": 1380.78, "end": 1384.32, "text": " a user, but I mean, where am I going to decode the user from?", "tokens": [50364, 865, 11, 286, 4114, 341, 6968, 2183, 11, 38514, 3391, 11, 28653, 783, 1192, 760, 35592, 11, 689, 286, 733, 50604, 50604, 295, 2825, 466, 11, 411, 11, 264, 2649, 295, 1953, 466, 257, 1154, 382, 613, 1333, 295, 10199, 712, 50990, 50990, 1422, 2740, 420, 22867, 329, 712, 11, 286, 500, 380, 458, 13, 51202, 51202, 1981, 707, 7697, 760, 666, 1422, 2740, 689, 291, 584, 11, 411, 11, 286, 458, 577, 281, 979, 1429, 51448, 51448, 257, 4195, 11, 457, 286, 914, 11, 689, 669, 286, 516, 281, 979, 1429, 264, 4195, 490, 30, 51625, 51625, 708, 1412, 307, 309, 516, 281, 312, 8345, 766, 295, 30, 51721, 51721, 1119, 309, 516, 281, 312, 15646, 292, 833, 257, 3840, 295, 7909, 30, 51835, 51835], "temperature": 0.0, "avg_logprob": -0.13351650536060333, "compression_ratio": 1.755639097744361, "no_caption_prob": 1.0451367415953428e-05}, {"id": 347, "seek": 135910, "start": 1384.32, "end": 1386.24, "text": " What data is it going to be hanging off of?", "tokens": [50364, 865, 11, 286, 4114, 341, 6968, 2183, 11, 38514, 3391, 11, 28653, 783, 1192, 760, 35592, 11, 689, 286, 733, 50604, 50604, 295, 2825, 466, 11, 411, 11, 264, 2649, 295, 1953, 466, 257, 1154, 382, 613, 1333, 295, 10199, 712, 50990, 50990, 1422, 2740, 420, 22867, 329, 712, 11, 286, 500, 380, 458, 13, 51202, 51202, 1981, 707, 7697, 760, 666, 1422, 2740, 689, 291, 584, 11, 411, 11, 286, 458, 577, 281, 979, 1429, 51448, 51448, 257, 4195, 11, 457, 286, 914, 11, 689, 669, 286, 516, 281, 979, 1429, 264, 4195, 490, 30, 51625, 51625, 708, 1412, 307, 309, 516, 281, 312, 8345, 766, 295, 30, 51721, 51721, 1119, 309, 516, 281, 312, 15646, 292, 833, 257, 3840, 295, 7909, 30, 51835, 51835], "temperature": 0.0, "avg_logprob": -0.13351650536060333, "compression_ratio": 1.755639097744361, "no_caption_prob": 1.0451367415953428e-05}, {"id": 348, "seek": 135910, "start": 1386.24, "end": 1388.52, "text": " Is it going to be nested under a bunch of fields?", "tokens": [50364, 865, 11, 286, 4114, 341, 6968, 2183, 11, 38514, 3391, 11, 28653, 783, 1192, 760, 35592, 11, 689, 286, 733, 50604, 50604, 295, 2825, 466, 11, 411, 11, 264, 2649, 295, 1953, 466, 257, 1154, 382, 613, 1333, 295, 10199, 712, 50990, 50990, 1422, 2740, 420, 22867, 329, 712, 11, 286, 500, 380, 458, 13, 51202, 51202, 1981, 707, 7697, 760, 666, 1422, 2740, 689, 291, 584, 11, 411, 11, 286, 458, 577, 281, 979, 1429, 51448, 51448, 257, 4195, 11, 457, 286, 914, 11, 689, 669, 286, 516, 281, 979, 1429, 264, 4195, 490, 30, 51625, 51625, 708, 1412, 307, 309, 516, 281, 312, 8345, 766, 295, 30, 51721, 51721, 1119, 309, 516, 281, 312, 15646, 292, 833, 257, 3840, 295, 7909, 30, 51835, 51835], "temperature": 0.0, "avg_logprob": -0.13351650536060333, "compression_ratio": 1.755639097744361, "no_caption_prob": 1.0451367415953428e-05}, {"id": 349, "seek": 138852, "start": 1388.52, "end": 1392.22, "text": " Is it going to be continuing off of something?", "tokens": [50364, 1119, 309, 516, 281, 312, 9289, 766, 295, 746, 30, 50549, 50549, 1610, 669, 286, 516, 281, 312, 979, 8616, 309, 2361, 322, 498, 264, 3090, 307, 24236, 420, 2035, 309, 815, 312, 11, 457, 50893, 50893, 291, 393, 519, 466, 613, 1333, 295, 3166, 295, 309, 21761, 11, 293, 550, 35925, 552, 1214, 13, 51207, 51207, 13813, 300, 311, 411, 341, 1333, 295, 2767, 493, 636, 295, 1953, 466, 721, 11, 9735, 341, 51430, 51430, 1192, 760, 636, 307, 445, 1333, 295, 9906, 294, 293, 23771, 1412, 490, 257, 31828, 46115, 11, 597, 294, 452, 51729, 51729], "temperature": 0.0, "avg_logprob": -0.1093766975402832, "compression_ratio": 1.631578947368421, "no_caption_prob": 1.7061704511434073e-06}, {"id": 350, "seek": 138852, "start": 1392.22, "end": 1399.1, "text": " Or am I going to be decoding it based on if the role is admin or whatever it may be, but", "tokens": [50364, 1119, 309, 516, 281, 312, 9289, 766, 295, 746, 30, 50549, 50549, 1610, 669, 286, 516, 281, 312, 979, 8616, 309, 2361, 322, 498, 264, 3090, 307, 24236, 420, 2035, 309, 815, 312, 11, 457, 50893, 50893, 291, 393, 519, 466, 613, 1333, 295, 3166, 295, 309, 21761, 11, 293, 550, 35925, 552, 1214, 13, 51207, 51207, 13813, 300, 311, 411, 341, 1333, 295, 2767, 493, 636, 295, 1953, 466, 721, 11, 9735, 341, 51430, 51430, 1192, 760, 636, 307, 445, 1333, 295, 9906, 294, 293, 23771, 1412, 490, 257, 31828, 46115, 11, 597, 294, 452, 51729, 51729], "temperature": 0.0, "avg_logprob": -0.1093766975402832, "compression_ratio": 1.631578947368421, "no_caption_prob": 1.7061704511434073e-06}, {"id": 351, "seek": 138852, "start": 1399.1, "end": 1405.3799999999999, "text": " you can think about these sort of parts of it independently, and then compose them together.", "tokens": [50364, 1119, 309, 516, 281, 312, 9289, 766, 295, 746, 30, 50549, 50549, 1610, 669, 286, 516, 281, 312, 979, 8616, 309, 2361, 322, 498, 264, 3090, 307, 24236, 420, 2035, 309, 815, 312, 11, 457, 50893, 50893, 291, 393, 519, 466, 613, 1333, 295, 3166, 295, 309, 21761, 11, 293, 550, 35925, 552, 1214, 13, 51207, 51207, 13813, 300, 311, 411, 341, 1333, 295, 2767, 493, 636, 295, 1953, 466, 721, 11, 9735, 341, 51430, 51430, 1192, 760, 636, 307, 445, 1333, 295, 9906, 294, 293, 23771, 1412, 490, 257, 31828, 46115, 11, 597, 294, 452, 51729, 51729], "temperature": 0.0, "avg_logprob": -0.1093766975402832, "compression_ratio": 1.631578947368421, "no_caption_prob": 1.7061704511434073e-06}, {"id": 352, "seek": 138852, "start": 1405.3799999999999, "end": 1409.84, "text": " Whereas that's like this sort of bottom up way of thinking about things, whereas this", "tokens": [50364, 1119, 309, 516, 281, 312, 9289, 766, 295, 746, 30, 50549, 50549, 1610, 669, 286, 516, 281, 312, 979, 8616, 309, 2361, 322, 498, 264, 3090, 307, 24236, 420, 2035, 309, 815, 312, 11, 457, 50893, 50893, 291, 393, 519, 466, 613, 1333, 295, 3166, 295, 309, 21761, 11, 293, 550, 35925, 552, 1214, 13, 51207, 51207, 13813, 300, 311, 411, 341, 1333, 295, 2767, 493, 636, 295, 1953, 466, 721, 11, 9735, 341, 51430, 51430, 1192, 760, 636, 307, 445, 1333, 295, 9906, 294, 293, 23771, 1412, 490, 257, 31828, 46115, 11, 597, 294, 452, 51729, 51729], "temperature": 0.0, "avg_logprob": -0.1093766975402832, "compression_ratio": 1.631578947368421, "no_caption_prob": 1.7061704511434073e-06}, {"id": 353, "seek": 138852, "start": 1409.84, "end": 1415.82, "text": " top down way is just sort of reaching in and grabbing data from a JSON blob, which in my", "tokens": [50364, 1119, 309, 516, 281, 312, 9289, 766, 295, 746, 30, 50549, 50549, 1610, 669, 286, 516, 281, 312, 979, 8616, 309, 2361, 322, 498, 264, 3090, 307, 24236, 420, 2035, 309, 815, 312, 11, 457, 50893, 50893, 291, 393, 519, 466, 613, 1333, 295, 3166, 295, 309, 21761, 11, 293, 550, 35925, 552, 1214, 13, 51207, 51207, 13813, 300, 311, 411, 341, 1333, 295, 2767, 493, 636, 295, 1953, 466, 721, 11, 9735, 341, 51430, 51430, 1192, 760, 636, 307, 445, 1333, 295, 9906, 294, 293, 23771, 1412, 490, 257, 31828, 46115, 11, 597, 294, 452, 51729, 51729], "temperature": 0.0, "avg_logprob": -0.1093766975402832, "compression_ratio": 1.631578947368421, "no_caption_prob": 1.7061704511434073e-06}, {"id": 354, "seek": 141582, "start": 1415.82, "end": 1421.8999999999999, "text": " experience is what tends to happen when I've worked in JavaScript code bases is it's so", "tokens": [50364, 1752, 307, 437, 12258, 281, 1051, 562, 286, 600, 2732, 294, 15778, 3089, 17949, 307, 309, 311, 370, 50668, 50668, 1858, 281, 445, 2235, 294, 1412, 490, 257, 955, 31828, 46115, 300, 293, 550, 291, 600, 658, 341, 955, 31828, 51050, 51050, 46115, 11, 291, 1320, 309, 807, 257, 9887, 2445, 300, 2962, 257, 3840, 295, 1412, 11, 457, 51306, 51306, 291, 434, 6260, 365, 341, 411, 1108, 42878, 2657, 11, 293, 309, 311, 534, 2252, 281, 519, 466, 13, 51521, 51521, 583, 365, 613, 1333, 295, 38514, 3391, 11, 309, 311, 445, 291, 393, 519, 466, 341, 472, 2522, 11, 457, 550, 51786, 51786], "temperature": 0.0, "avg_logprob": -0.13669452488979447, "compression_ratio": 1.6333333333333333, "no_caption_prob": 7.646417543583084e-06}, {"id": 355, "seek": 141582, "start": 1421.8999999999999, "end": 1429.54, "text": " easy to just pull in data from a big JSON blob that and then you've got this big JSON", "tokens": [50364, 1752, 307, 437, 12258, 281, 1051, 562, 286, 600, 2732, 294, 15778, 3089, 17949, 307, 309, 311, 370, 50668, 50668, 1858, 281, 445, 2235, 294, 1412, 490, 257, 955, 31828, 46115, 300, 293, 550, 291, 600, 658, 341, 955, 31828, 51050, 51050, 46115, 11, 291, 1320, 309, 807, 257, 9887, 2445, 300, 2962, 257, 3840, 295, 1412, 11, 457, 51306, 51306, 291, 434, 6260, 365, 341, 411, 1108, 42878, 2657, 11, 293, 309, 311, 534, 2252, 281, 519, 466, 13, 51521, 51521, 583, 365, 613, 1333, 295, 38514, 3391, 11, 309, 311, 445, 291, 393, 519, 466, 341, 472, 2522, 11, 457, 550, 51786, 51786], "temperature": 0.0, "avg_logprob": -0.13669452488979447, "compression_ratio": 1.6333333333333333, "no_caption_prob": 7.646417543583084e-06}, {"id": 356, "seek": 141582, "start": 1429.54, "end": 1434.6599999999999, "text": " blob, you pass it through a transformation function that changes a bunch of data, but", "tokens": [50364, 1752, 307, 437, 12258, 281, 1051, 562, 286, 600, 2732, 294, 15778, 3089, 17949, 307, 309, 311, 370, 50668, 50668, 1858, 281, 445, 2235, 294, 1412, 490, 257, 955, 31828, 46115, 300, 293, 550, 291, 600, 658, 341, 955, 31828, 51050, 51050, 46115, 11, 291, 1320, 309, 807, 257, 9887, 2445, 300, 2962, 257, 3840, 295, 1412, 11, 457, 51306, 51306, 291, 434, 6260, 365, 341, 411, 1108, 42878, 2657, 11, 293, 309, 311, 534, 2252, 281, 519, 466, 13, 51521, 51521, 583, 365, 613, 1333, 295, 38514, 3391, 11, 309, 311, 445, 291, 393, 519, 466, 341, 472, 2522, 11, 457, 550, 51786, 51786], "temperature": 0.0, "avg_logprob": -0.13669452488979447, "compression_ratio": 1.6333333333333333, "no_caption_prob": 7.646417543583084e-06}, {"id": 357, "seek": 141582, "start": 1434.6599999999999, "end": 1438.96, "text": " you're dealing with this like monolithic object, and it's really difficult to think about.", "tokens": [50364, 1752, 307, 437, 12258, 281, 1051, 562, 286, 600, 2732, 294, 15778, 3089, 17949, 307, 309, 311, 370, 50668, 50668, 1858, 281, 445, 2235, 294, 1412, 490, 257, 955, 31828, 46115, 300, 293, 550, 291, 600, 658, 341, 955, 31828, 51050, 51050, 46115, 11, 291, 1320, 309, 807, 257, 9887, 2445, 300, 2962, 257, 3840, 295, 1412, 11, 457, 51306, 51306, 291, 434, 6260, 365, 341, 411, 1108, 42878, 2657, 11, 293, 309, 311, 534, 2252, 281, 519, 466, 13, 51521, 51521, 583, 365, 613, 1333, 295, 38514, 3391, 11, 309, 311, 445, 291, 393, 519, 466, 341, 472, 2522, 11, 457, 550, 51786, 51786], "temperature": 0.0, "avg_logprob": -0.13669452488979447, "compression_ratio": 1.6333333333333333, "no_caption_prob": 7.646417543583084e-06}, {"id": 358, "seek": 141582, "start": 1438.96, "end": 1444.26, "text": " But with these sort of combinators, it's just you can think about this one piece, but then", "tokens": [50364, 1752, 307, 437, 12258, 281, 1051, 562, 286, 600, 2732, 294, 15778, 3089, 17949, 307, 309, 311, 370, 50668, 50668, 1858, 281, 445, 2235, 294, 1412, 490, 257, 955, 31828, 46115, 300, 293, 550, 291, 600, 658, 341, 955, 31828, 51050, 51050, 46115, 11, 291, 1320, 309, 807, 257, 9887, 2445, 300, 2962, 257, 3840, 295, 1412, 11, 457, 51306, 51306, 291, 434, 6260, 365, 341, 411, 1108, 42878, 2657, 11, 293, 309, 311, 534, 2252, 281, 519, 466, 13, 51521, 51521, 583, 365, 613, 1333, 295, 38514, 3391, 11, 309, 311, 445, 291, 393, 519, 466, 341, 472, 2522, 11, 457, 550, 51786, 51786], "temperature": 0.0, "avg_logprob": -0.13669452488979447, "compression_ratio": 1.6333333333333333, "no_caption_prob": 7.646417543583084e-06}, {"id": 359, "seek": 144426, "start": 1444.26, "end": 1447.44, "text": " you can take that piece and this other piece and build them up into one thing.", "tokens": [50364, 291, 393, 747, 300, 2522, 293, 341, 661, 2522, 293, 1322, 552, 493, 666, 472, 551, 13, 50523, 50523, 407, 341, 1333, 295, 411, 11455, 5102, 11, 286, 478, 406, 988, 498, 309, 311, 411, 33874, 42012, 490, 341, 50860, 50860, 3410, 295, 257, 2512, 31927, 11, 457, 309, 2544, 411, 456, 311, 257, 2113, 456, 13, 51040, 51040, 407, 321, 600, 668, 1228, 264, 1433, 11455, 5102, 570, 286, 764, 300, 294, 257, 382, 257, 4876, 295, 257, 6968, 51286, 51286, 2183, 13, 51336, 51336, 682, 300, 6968, 2183, 11, 286, 390, 1417, 466, 4471, 732, 11, 4471, 1045, 11, 4471, 1451, 11, 293, 370, 322, 6828, 13, 51610, 51610], "temperature": 0.0, "avg_logprob": -0.11179884345130583, "compression_ratio": 1.7314049586776858, "no_caption_prob": 4.356845238362439e-06}, {"id": 360, "seek": 144426, "start": 1447.44, "end": 1454.18, "text": " So this sort of like universal pattern, I'm not sure if it's like inseparable from this", "tokens": [50364, 291, 393, 747, 300, 2522, 293, 341, 661, 2522, 293, 1322, 552, 493, 666, 472, 551, 13, 50523, 50523, 407, 341, 1333, 295, 411, 11455, 5102, 11, 286, 478, 406, 988, 498, 309, 311, 411, 33874, 42012, 490, 341, 50860, 50860, 3410, 295, 257, 2512, 31927, 11, 457, 309, 2544, 411, 456, 311, 257, 2113, 456, 13, 51040, 51040, 407, 321, 600, 668, 1228, 264, 1433, 11455, 5102, 570, 286, 764, 300, 294, 257, 382, 257, 4876, 295, 257, 6968, 51286, 51286, 2183, 13, 51336, 51336, 682, 300, 6968, 2183, 11, 286, 390, 1417, 466, 4471, 732, 11, 4471, 1045, 11, 4471, 1451, 11, 293, 370, 322, 6828, 13, 51610, 51610], "temperature": 0.0, "avg_logprob": -0.11179884345130583, "compression_ratio": 1.7314049586776858, "no_caption_prob": 4.356845238362439e-06}, {"id": 361, "seek": 144426, "start": 1454.18, "end": 1457.78, "text": " concept of a combinator, but it seems like there's a link there.", "tokens": [50364, 291, 393, 747, 300, 2522, 293, 341, 661, 2522, 293, 1322, 552, 493, 666, 472, 551, 13, 50523, 50523, 407, 341, 1333, 295, 411, 11455, 5102, 11, 286, 478, 406, 988, 498, 309, 311, 411, 33874, 42012, 490, 341, 50860, 50860, 3410, 295, 257, 2512, 31927, 11, 457, 309, 2544, 411, 456, 311, 257, 2113, 456, 13, 51040, 51040, 407, 321, 600, 668, 1228, 264, 1433, 11455, 5102, 570, 286, 764, 300, 294, 257, 382, 257, 4876, 295, 257, 6968, 51286, 51286, 2183, 13, 51336, 51336, 682, 300, 6968, 2183, 11, 286, 390, 1417, 466, 4471, 732, 11, 4471, 1045, 11, 4471, 1451, 11, 293, 370, 322, 6828, 13, 51610, 51610], "temperature": 0.0, "avg_logprob": -0.11179884345130583, "compression_ratio": 1.7314049586776858, "no_caption_prob": 4.356845238362439e-06}, {"id": 362, "seek": 144426, "start": 1457.78, "end": 1462.7, "text": " So we've been using the term universal pattern because I use that in a as a title of a blog", "tokens": [50364, 291, 393, 747, 300, 2522, 293, 341, 661, 2522, 293, 1322, 552, 493, 666, 472, 551, 13, 50523, 50523, 407, 341, 1333, 295, 411, 11455, 5102, 11, 286, 478, 406, 988, 498, 309, 311, 411, 33874, 42012, 490, 341, 50860, 50860, 3410, 295, 257, 2512, 31927, 11, 457, 309, 2544, 411, 456, 311, 257, 2113, 456, 13, 51040, 51040, 407, 321, 600, 668, 1228, 264, 1433, 11455, 5102, 570, 286, 764, 300, 294, 257, 382, 257, 4876, 295, 257, 6968, 51286, 51286, 2183, 13, 51336, 51336, 682, 300, 6968, 2183, 11, 286, 390, 1417, 466, 4471, 732, 11, 4471, 1045, 11, 4471, 1451, 11, 293, 370, 322, 6828, 13, 51610, 51610], "temperature": 0.0, "avg_logprob": -0.11179884345130583, "compression_ratio": 1.7314049586776858, "no_caption_prob": 4.356845238362439e-06}, {"id": 363, "seek": 144426, "start": 1462.7, "end": 1463.7, "text": " post.", "tokens": [50364, 291, 393, 747, 300, 2522, 293, 341, 661, 2522, 293, 1322, 552, 493, 666, 472, 551, 13, 50523, 50523, 407, 341, 1333, 295, 411, 11455, 5102, 11, 286, 478, 406, 988, 498, 309, 311, 411, 33874, 42012, 490, 341, 50860, 50860, 3410, 295, 257, 2512, 31927, 11, 457, 309, 2544, 411, 456, 311, 257, 2113, 456, 13, 51040, 51040, 407, 321, 600, 668, 1228, 264, 1433, 11455, 5102, 570, 286, 764, 300, 294, 257, 382, 257, 4876, 295, 257, 6968, 51286, 51286, 2183, 13, 51336, 51336, 682, 300, 6968, 2183, 11, 286, 390, 1417, 466, 4471, 732, 11, 4471, 1045, 11, 4471, 1451, 11, 293, 370, 322, 6828, 13, 51610, 51610], "temperature": 0.0, "avg_logprob": -0.11179884345130583, "compression_ratio": 1.7314049586776858, "no_caption_prob": 4.356845238362439e-06}, {"id": 364, "seek": 144426, "start": 1463.7, "end": 1469.18, "text": " In that blog post, I was talking about map two, map three, map four, and so on functions.", "tokens": [50364, 291, 393, 747, 300, 2522, 293, 341, 661, 2522, 293, 1322, 552, 493, 666, 472, 551, 13, 50523, 50523, 407, 341, 1333, 295, 411, 11455, 5102, 11, 286, 478, 406, 988, 498, 309, 311, 411, 33874, 42012, 490, 341, 50860, 50860, 3410, 295, 257, 2512, 31927, 11, 457, 309, 2544, 411, 456, 311, 257, 2113, 456, 13, 51040, 51040, 407, 321, 600, 668, 1228, 264, 1433, 11455, 5102, 570, 286, 764, 300, 294, 257, 382, 257, 4876, 295, 257, 6968, 51286, 51286, 2183, 13, 51336, 51336, 682, 300, 6968, 2183, 11, 286, 390, 1417, 466, 4471, 732, 11, 4471, 1045, 11, 4471, 1451, 11, 293, 370, 322, 6828, 13, 51610, 51610], "temperature": 0.0, "avg_logprob": -0.11179884345130583, "compression_ratio": 1.7314049586776858, "no_caption_prob": 4.356845238362439e-06}, {"id": 365, "seek": 146918, "start": 1469.18, "end": 1474.98, "text": " Those functions are combinators because as we sort of talked earlier, one of the mental", "tokens": [50364, 3950, 6828, 366, 38514, 3391, 570, 382, 321, 1333, 295, 2825, 3071, 11, 472, 295, 264, 4973, 50654, 50654, 5245, 337, 437, 729, 6828, 360, 307, 436, 976, 505, 257, 636, 281, 10432, 4190, 1214, 13, 50984, 50984, 400, 370, 309, 1062, 2089, 505, 281, 10432, 1045, 815, 6446, 420, 286, 2835, 611, 3071, 300, 309, 51264, 51264, 390, 257, 534, 4961, 4973, 2316, 337, 2059, 337, 1953, 466, 31828, 979, 8616, 13, 51458, 51458, 6463, 286, 393, 979, 1429, 1045, 819, 3755, 295, 7363, 1045, 819, 3755, 295, 1412, 293, 286, 51692, 51692], "temperature": 0.0, "avg_logprob": -0.14471993843714395, "compression_ratio": 1.7366255144032923, "no_caption_prob": 3.2377354273194214e-06}, {"id": 366, "seek": 146918, "start": 1474.98, "end": 1481.5800000000002, "text": " models for what those functions do is they give us a way to combine values together.", "tokens": [50364, 3950, 6828, 366, 38514, 3391, 570, 382, 321, 1333, 295, 2825, 3071, 11, 472, 295, 264, 4973, 50654, 50654, 5245, 337, 437, 729, 6828, 360, 307, 436, 976, 505, 257, 636, 281, 10432, 4190, 1214, 13, 50984, 50984, 400, 370, 309, 1062, 2089, 505, 281, 10432, 1045, 815, 6446, 420, 286, 2835, 611, 3071, 300, 309, 51264, 51264, 390, 257, 534, 4961, 4973, 2316, 337, 2059, 337, 1953, 466, 31828, 979, 8616, 13, 51458, 51458, 6463, 286, 393, 979, 1429, 1045, 819, 3755, 295, 7363, 1045, 819, 3755, 295, 1412, 293, 286, 51692, 51692], "temperature": 0.0, "avg_logprob": -0.14471993843714395, "compression_ratio": 1.7366255144032923, "no_caption_prob": 3.2377354273194214e-06}, {"id": 367, "seek": 146918, "start": 1481.5800000000002, "end": 1487.18, "text": " And so it might allow us to combine three maybes or I mentioned also earlier that it", "tokens": [50364, 3950, 6828, 366, 38514, 3391, 570, 382, 321, 1333, 295, 2825, 3071, 11, 472, 295, 264, 4973, 50654, 50654, 5245, 337, 437, 729, 6828, 360, 307, 436, 976, 505, 257, 636, 281, 10432, 4190, 1214, 13, 50984, 50984, 400, 370, 309, 1062, 2089, 505, 281, 10432, 1045, 815, 6446, 420, 286, 2835, 611, 3071, 300, 309, 51264, 51264, 390, 257, 534, 4961, 4973, 2316, 337, 2059, 337, 1953, 466, 31828, 979, 8616, 13, 51458, 51458, 6463, 286, 393, 979, 1429, 1045, 819, 3755, 295, 7363, 1045, 819, 3755, 295, 1412, 293, 286, 51692, 51692], "temperature": 0.0, "avg_logprob": -0.14471993843714395, "compression_ratio": 1.7366255144032923, "no_caption_prob": 3.2377354273194214e-06}, {"id": 368, "seek": 146918, "start": 1487.18, "end": 1491.0600000000002, "text": " was a really helpful mental model for myself for thinking about JSON decoding.", "tokens": [50364, 3950, 6828, 366, 38514, 3391, 570, 382, 321, 1333, 295, 2825, 3071, 11, 472, 295, 264, 4973, 50654, 50654, 5245, 337, 437, 729, 6828, 360, 307, 436, 976, 505, 257, 636, 281, 10432, 4190, 1214, 13, 50984, 50984, 400, 370, 309, 1062, 2089, 505, 281, 10432, 1045, 815, 6446, 420, 286, 2835, 611, 3071, 300, 309, 51264, 51264, 390, 257, 534, 4961, 4973, 2316, 337, 2059, 337, 1953, 466, 31828, 979, 8616, 13, 51458, 51458, 6463, 286, 393, 979, 1429, 1045, 819, 3755, 295, 7363, 1045, 819, 3755, 295, 1412, 293, 286, 51692, 51692], "temperature": 0.0, "avg_logprob": -0.14471993843714395, "compression_ratio": 1.7366255144032923, "no_caption_prob": 3.2377354273194214e-06}, {"id": 369, "seek": 146918, "start": 1491.0600000000002, "end": 1495.74, "text": " Say I can decode three different pieces of valid three different pieces of data and I", "tokens": [50364, 3950, 6828, 366, 38514, 3391, 570, 382, 321, 1333, 295, 2825, 3071, 11, 472, 295, 264, 4973, 50654, 50654, 5245, 337, 437, 729, 6828, 360, 307, 436, 976, 505, 257, 636, 281, 10432, 4190, 1214, 13, 50984, 50984, 400, 370, 309, 1062, 2089, 505, 281, 10432, 1045, 815, 6446, 420, 286, 2835, 611, 3071, 300, 309, 51264, 51264, 390, 257, 534, 4961, 4973, 2316, 337, 2059, 337, 1953, 466, 31828, 979, 8616, 13, 51458, 51458, 6463, 286, 393, 979, 1429, 1045, 819, 3755, 295, 7363, 1045, 819, 3755, 295, 1412, 293, 286, 51692, 51692], "temperature": 0.0, "avg_logprob": -0.14471993843714395, "compression_ratio": 1.7366255144032923, "no_caption_prob": 3.2377354273194214e-06}, {"id": 370, "seek": 149574, "start": 1495.74, "end": 1500.22, "text": " want to combine them all into one more complex piece.", "tokens": [50364, 528, 281, 10432, 552, 439, 666, 472, 544, 3997, 2522, 13, 50588, 50588, 400, 370, 586, 286, 643, 257, 2512, 31927, 13, 50689, 50689, 400, 300, 311, 534, 562, 321, 574, 412, 257, 6405, 411, 264, 31828, 979, 1429, 6405, 13, 50906, 50906, 1711, 1080, 881, 3875, 1496, 11, 309, 534, 787, 6417, 505, 365, 732, 3467, 295, 721, 11, 512, 1333, 295, 51194, 51194, 28540, 979, 378, 433, 411, 560, 293, 6798, 11, 293, 550, 257, 1326, 21928, 6828, 13, 51530, 51530, 400, 300, 311, 1936, 309, 13, 51644, 51644], "temperature": 0.0, "avg_logprob": -0.12659578425909884, "compression_ratio": 1.610091743119266, "no_caption_prob": 2.368787363593583e-06}, {"id": 371, "seek": 149574, "start": 1500.22, "end": 1502.24, "text": " And so now I need a combinator.", "tokens": [50364, 528, 281, 10432, 552, 439, 666, 472, 544, 3997, 2522, 13, 50588, 50588, 400, 370, 586, 286, 643, 257, 2512, 31927, 13, 50689, 50689, 400, 300, 311, 534, 562, 321, 574, 412, 257, 6405, 411, 264, 31828, 979, 1429, 6405, 13, 50906, 50906, 1711, 1080, 881, 3875, 1496, 11, 309, 534, 787, 6417, 505, 365, 732, 3467, 295, 721, 11, 512, 1333, 295, 51194, 51194, 28540, 979, 378, 433, 411, 560, 293, 6798, 11, 293, 550, 257, 1326, 21928, 6828, 13, 51530, 51530, 400, 300, 311, 1936, 309, 13, 51644, 51644], "temperature": 0.0, "avg_logprob": -0.12659578425909884, "compression_ratio": 1.610091743119266, "no_caption_prob": 2.368787363593583e-06}, {"id": 372, "seek": 149574, "start": 1502.24, "end": 1506.58, "text": " And that's really when we look at a library like the JSON decode library.", "tokens": [50364, 528, 281, 10432, 552, 439, 666, 472, 544, 3997, 2522, 13, 50588, 50588, 400, 370, 586, 286, 643, 257, 2512, 31927, 13, 50689, 50689, 400, 300, 311, 534, 562, 321, 574, 412, 257, 6405, 411, 264, 31828, 979, 1429, 6405, 13, 50906, 50906, 1711, 1080, 881, 3875, 1496, 11, 309, 534, 787, 6417, 505, 365, 732, 3467, 295, 721, 11, 512, 1333, 295, 51194, 51194, 28540, 979, 378, 433, 411, 560, 293, 6798, 11, 293, 550, 257, 1326, 21928, 6828, 13, 51530, 51530, 400, 300, 311, 1936, 309, 13, 51644, 51644], "temperature": 0.0, "avg_logprob": -0.12659578425909884, "compression_ratio": 1.610091743119266, "no_caption_prob": 2.368787363593583e-06}, {"id": 373, "seek": 149574, "start": 1506.58, "end": 1512.34, "text": " At its most basic level, it really only provides us with two types of things, some sort of", "tokens": [50364, 528, 281, 10432, 552, 439, 666, 472, 544, 3997, 2522, 13, 50588, 50588, 400, 370, 586, 286, 643, 257, 2512, 31927, 13, 50689, 50689, 400, 300, 311, 534, 562, 321, 574, 412, 257, 6405, 411, 264, 31828, 979, 1429, 6405, 13, 50906, 50906, 1711, 1080, 881, 3875, 1496, 11, 309, 534, 787, 6417, 505, 365, 732, 3467, 295, 721, 11, 512, 1333, 295, 51194, 51194, 28540, 979, 378, 433, 411, 560, 293, 6798, 11, 293, 550, 257, 1326, 21928, 6828, 13, 51530, 51530, 400, 300, 311, 1936, 309, 13, 51644, 51644], "temperature": 0.0, "avg_logprob": -0.12659578425909884, "compression_ratio": 1.610091743119266, "no_caption_prob": 2.368787363593583e-06}, {"id": 374, "seek": 149574, "start": 1512.34, "end": 1519.06, "text": " primitive decoders like int and string, and then a few combining functions.", "tokens": [50364, 528, 281, 10432, 552, 439, 666, 472, 544, 3997, 2522, 13, 50588, 50588, 400, 370, 586, 286, 643, 257, 2512, 31927, 13, 50689, 50689, 400, 300, 311, 534, 562, 321, 574, 412, 257, 6405, 411, 264, 31828, 979, 1429, 6405, 13, 50906, 50906, 1711, 1080, 881, 3875, 1496, 11, 309, 534, 787, 6417, 505, 365, 732, 3467, 295, 721, 11, 512, 1333, 295, 51194, 51194, 28540, 979, 378, 433, 411, 560, 293, 6798, 11, 293, 550, 257, 1326, 21928, 6828, 13, 51530, 51530, 400, 300, 311, 1936, 309, 13, 51644, 51644], "temperature": 0.0, "avg_logprob": -0.12659578425909884, "compression_ratio": 1.610091743119266, "no_caption_prob": 2.368787363593583e-06}, {"id": 375, "seek": 149574, "start": 1519.06, "end": 1521.34, "text": " And that's basically it.", "tokens": [50364, 528, 281, 10432, 552, 439, 666, 472, 544, 3997, 2522, 13, 50588, 50588, 400, 370, 586, 286, 643, 257, 2512, 31927, 13, 50689, 50689, 400, 300, 311, 534, 562, 321, 574, 412, 257, 6405, 411, 264, 31828, 979, 1429, 6405, 13, 50906, 50906, 1711, 1080, 881, 3875, 1496, 11, 309, 534, 787, 6417, 505, 365, 732, 3467, 295, 721, 11, 512, 1333, 295, 51194, 51194, 28540, 979, 378, 433, 411, 560, 293, 6798, 11, 293, 550, 257, 1326, 21928, 6828, 13, 51530, 51530, 400, 300, 311, 1936, 309, 13, 51644, 51644], "temperature": 0.0, "avg_logprob": -0.12659578425909884, "compression_ratio": 1.610091743119266, "no_caption_prob": 2.368787363593583e-06}, {"id": 376, "seek": 152134, "start": 1521.34, "end": 1527.72, "text": " And we can use those building blocks then to decode anything we want into any Elm structure", "tokens": [50364, 400, 321, 393, 764, 729, 2390, 8474, 550, 281, 979, 1429, 1340, 321, 528, 666, 604, 2699, 76, 3877, 50683, 50683, 300, 321, 528, 13, 50733, 50733, 1436, 257, 534, 2141, 551, 466, 31828, 979, 8616, 294, 2699, 76, 300, 286, 519, 307, 406, 6322, 281, 561, 50991, 50991, 567, 366, 777, 281, 264, 2856, 307, 300, 428, 2699, 76, 3877, 293, 428, 31828, 3877, 500, 380, 643, 51286, 51286, 281, 312, 24238, 295, 1184, 661, 13, 51336, 51336, 400, 294, 1186, 11, 291, 1391, 500, 380, 528, 428, 2699, 76, 3877, 281, 8013, 264, 31828, 13, 51558, 51558], "temperature": 0.0, "avg_logprob": -0.0851219101707534, "compression_ratio": 1.7043478260869565, "no_caption_prob": 1.6187048458959907e-05}, {"id": 377, "seek": 152134, "start": 1527.72, "end": 1528.72, "text": " that we want.", "tokens": [50364, 400, 321, 393, 764, 729, 2390, 8474, 550, 281, 979, 1429, 1340, 321, 528, 666, 604, 2699, 76, 3877, 50683, 50683, 300, 321, 528, 13, 50733, 50733, 1436, 257, 534, 2141, 551, 466, 31828, 979, 8616, 294, 2699, 76, 300, 286, 519, 307, 406, 6322, 281, 561, 50991, 50991, 567, 366, 777, 281, 264, 2856, 307, 300, 428, 2699, 76, 3877, 293, 428, 31828, 3877, 500, 380, 643, 51286, 51286, 281, 312, 24238, 295, 1184, 661, 13, 51336, 51336, 400, 294, 1186, 11, 291, 1391, 500, 380, 528, 428, 2699, 76, 3877, 281, 8013, 264, 31828, 13, 51558, 51558], "temperature": 0.0, "avg_logprob": -0.0851219101707534, "compression_ratio": 1.7043478260869565, "no_caption_prob": 1.6187048458959907e-05}, {"id": 378, "seek": 152134, "start": 1528.72, "end": 1533.8799999999999, "text": " Because a really key thing about JSON decoding in Elm that I think is not obvious to people", "tokens": [50364, 400, 321, 393, 764, 729, 2390, 8474, 550, 281, 979, 1429, 1340, 321, 528, 666, 604, 2699, 76, 3877, 50683, 50683, 300, 321, 528, 13, 50733, 50733, 1436, 257, 534, 2141, 551, 466, 31828, 979, 8616, 294, 2699, 76, 300, 286, 519, 307, 406, 6322, 281, 561, 50991, 50991, 567, 366, 777, 281, 264, 2856, 307, 300, 428, 2699, 76, 3877, 293, 428, 31828, 3877, 500, 380, 643, 51286, 51286, 281, 312, 24238, 295, 1184, 661, 13, 51336, 51336, 400, 294, 1186, 11, 291, 1391, 500, 380, 528, 428, 2699, 76, 3877, 281, 8013, 264, 31828, 13, 51558, 51558], "temperature": 0.0, "avg_logprob": -0.0851219101707534, "compression_ratio": 1.7043478260869565, "no_caption_prob": 1.6187048458959907e-05}, {"id": 379, "seek": 152134, "start": 1533.8799999999999, "end": 1539.78, "text": " who are new to the language is that your Elm structure and your JSON structure don't need", "tokens": [50364, 400, 321, 393, 764, 729, 2390, 8474, 550, 281, 979, 1429, 1340, 321, 528, 666, 604, 2699, 76, 3877, 50683, 50683, 300, 321, 528, 13, 50733, 50733, 1436, 257, 534, 2141, 551, 466, 31828, 979, 8616, 294, 2699, 76, 300, 286, 519, 307, 406, 6322, 281, 561, 50991, 50991, 567, 366, 777, 281, 264, 2856, 307, 300, 428, 2699, 76, 3877, 293, 428, 31828, 3877, 500, 380, 643, 51286, 51286, 281, 312, 24238, 295, 1184, 661, 13, 51336, 51336, 400, 294, 1186, 11, 291, 1391, 500, 380, 528, 428, 2699, 76, 3877, 281, 8013, 264, 31828, 13, 51558, 51558], "temperature": 0.0, "avg_logprob": -0.0851219101707534, "compression_ratio": 1.7043478260869565, "no_caption_prob": 1.6187048458959907e-05}, {"id": 380, "seek": 152134, "start": 1539.78, "end": 1540.78, "text": " to be mirrors of each other.", "tokens": [50364, 400, 321, 393, 764, 729, 2390, 8474, 550, 281, 979, 1429, 1340, 321, 528, 666, 604, 2699, 76, 3877, 50683, 50683, 300, 321, 528, 13, 50733, 50733, 1436, 257, 534, 2141, 551, 466, 31828, 979, 8616, 294, 2699, 76, 300, 286, 519, 307, 406, 6322, 281, 561, 50991, 50991, 567, 366, 777, 281, 264, 2856, 307, 300, 428, 2699, 76, 3877, 293, 428, 31828, 3877, 500, 380, 643, 51286, 51286, 281, 312, 24238, 295, 1184, 661, 13, 51336, 51336, 400, 294, 1186, 11, 291, 1391, 500, 380, 528, 428, 2699, 76, 3877, 281, 8013, 264, 31828, 13, 51558, 51558], "temperature": 0.0, "avg_logprob": -0.0851219101707534, "compression_ratio": 1.7043478260869565, "no_caption_prob": 1.6187048458959907e-05}, {"id": 381, "seek": 152134, "start": 1540.78, "end": 1545.22, "text": " And in fact, you probably don't want your Elm structure to mirror the JSON.", "tokens": [50364, 400, 321, 393, 764, 729, 2390, 8474, 550, 281, 979, 1429, 1340, 321, 528, 666, 604, 2699, 76, 3877, 50683, 50683, 300, 321, 528, 13, 50733, 50733, 1436, 257, 534, 2141, 551, 466, 31828, 979, 8616, 294, 2699, 76, 300, 286, 519, 307, 406, 6322, 281, 561, 50991, 50991, 567, 366, 777, 281, 264, 2856, 307, 300, 428, 2699, 76, 3877, 293, 428, 31828, 3877, 500, 380, 643, 51286, 51286, 281, 312, 24238, 295, 1184, 661, 13, 51336, 51336, 400, 294, 1186, 11, 291, 1391, 500, 380, 528, 428, 2699, 76, 3877, 281, 8013, 264, 31828, 13, 51558, 51558], "temperature": 0.0, "avg_logprob": -0.0851219101707534, "compression_ratio": 1.7043478260869565, "no_caption_prob": 1.6187048458959907e-05}, {"id": 382, "seek": 154522, "start": 1545.22, "end": 1552.38, "text": " So I typically will design my Elm structure first to match my needs for my program to", "tokens": [50364, 407, 286, 5850, 486, 1715, 452, 2699, 76, 3877, 700, 281, 2995, 452, 2203, 337, 452, 1461, 281, 50722, 50722, 13819, 6243, 4368, 293, 439, 300, 665, 1507, 13, 50860, 50860, 400, 550, 584, 11, 2264, 11, 2212, 341, 2699, 76, 2010, 293, 2212, 341, 31828, 300, 286, 362, 11, 577, 360, 286, 7283, 51107, 51107, 264, 7417, 30, 51157, 51157, 400, 300, 311, 689, 286, 486, 550, 2235, 484, 439, 264, 31828, 979, 19866, 11733, 281, 584, 11, 577, 393, 286, 51388, 51388, 13799, 1296, 264, 31828, 286, 362, 293, 264, 2699, 76, 3877, 286, 528, 30, 51600, 51600, 286, 478, 6369, 466, 472, 551, 13, 51670, 51670, 708, 360, 291, 519, 295, 264, 5288, 11, 4471, 11, 4471, 17, 11, 4471, 18, 30, 51862, 51862], "temperature": 0.0, "avg_logprob": -0.13934910204983497, "compression_ratio": 1.6312056737588652, "no_caption_prob": 1.3630960893351585e-05}, {"id": 383, "seek": 154522, "start": 1552.38, "end": 1555.14, "text": " eliminate impossible states and all that good stuff.", "tokens": [50364, 407, 286, 5850, 486, 1715, 452, 2699, 76, 3877, 700, 281, 2995, 452, 2203, 337, 452, 1461, 281, 50722, 50722, 13819, 6243, 4368, 293, 439, 300, 665, 1507, 13, 50860, 50860, 400, 550, 584, 11, 2264, 11, 2212, 341, 2699, 76, 2010, 293, 2212, 341, 31828, 300, 286, 362, 11, 577, 360, 286, 7283, 51107, 51107, 264, 7417, 30, 51157, 51157, 400, 300, 311, 689, 286, 486, 550, 2235, 484, 439, 264, 31828, 979, 19866, 11733, 281, 584, 11, 577, 393, 286, 51388, 51388, 13799, 1296, 264, 31828, 286, 362, 293, 264, 2699, 76, 3877, 286, 528, 30, 51600, 51600, 286, 478, 6369, 466, 472, 551, 13, 51670, 51670, 708, 360, 291, 519, 295, 264, 5288, 11, 4471, 11, 4471, 17, 11, 4471, 18, 30, 51862, 51862], "temperature": 0.0, "avg_logprob": -0.13934910204983497, "compression_ratio": 1.6312056737588652, "no_caption_prob": 1.3630960893351585e-05}, {"id": 384, "seek": 154522, "start": 1555.14, "end": 1560.08, "text": " And then say, OK, given this Elm type and given this JSON that I have, how do I bridge", "tokens": [50364, 407, 286, 5850, 486, 1715, 452, 2699, 76, 3877, 700, 281, 2995, 452, 2203, 337, 452, 1461, 281, 50722, 50722, 13819, 6243, 4368, 293, 439, 300, 665, 1507, 13, 50860, 50860, 400, 550, 584, 11, 2264, 11, 2212, 341, 2699, 76, 2010, 293, 2212, 341, 31828, 300, 286, 362, 11, 577, 360, 286, 7283, 51107, 51107, 264, 7417, 30, 51157, 51157, 400, 300, 311, 689, 286, 486, 550, 2235, 484, 439, 264, 31828, 979, 19866, 11733, 281, 584, 11, 577, 393, 286, 51388, 51388, 13799, 1296, 264, 31828, 286, 362, 293, 264, 2699, 76, 3877, 286, 528, 30, 51600, 51600, 286, 478, 6369, 466, 472, 551, 13, 51670, 51670, 708, 360, 291, 519, 295, 264, 5288, 11, 4471, 11, 4471, 17, 11, 4471, 18, 30, 51862, 51862], "temperature": 0.0, "avg_logprob": -0.13934910204983497, "compression_ratio": 1.6312056737588652, "no_caption_prob": 1.3630960893351585e-05}, {"id": 385, "seek": 154522, "start": 1560.08, "end": 1561.08, "text": " the gap?", "tokens": [50364, 407, 286, 5850, 486, 1715, 452, 2699, 76, 3877, 700, 281, 2995, 452, 2203, 337, 452, 1461, 281, 50722, 50722, 13819, 6243, 4368, 293, 439, 300, 665, 1507, 13, 50860, 50860, 400, 550, 584, 11, 2264, 11, 2212, 341, 2699, 76, 2010, 293, 2212, 341, 31828, 300, 286, 362, 11, 577, 360, 286, 7283, 51107, 51107, 264, 7417, 30, 51157, 51157, 400, 300, 311, 689, 286, 486, 550, 2235, 484, 439, 264, 31828, 979, 19866, 11733, 281, 584, 11, 577, 393, 286, 51388, 51388, 13799, 1296, 264, 31828, 286, 362, 293, 264, 2699, 76, 3877, 286, 528, 30, 51600, 51600, 286, 478, 6369, 466, 472, 551, 13, 51670, 51670, 708, 360, 291, 519, 295, 264, 5288, 11, 4471, 11, 4471, 17, 11, 4471, 18, 30, 51862, 51862], "temperature": 0.0, "avg_logprob": -0.13934910204983497, "compression_ratio": 1.6312056737588652, "no_caption_prob": 1.3630960893351585e-05}, {"id": 386, "seek": 154522, "start": 1561.08, "end": 1565.7, "text": " And that's where I will then pull out all the JSON decoder tricks to say, how can I", "tokens": [50364, 407, 286, 5850, 486, 1715, 452, 2699, 76, 3877, 700, 281, 2995, 452, 2203, 337, 452, 1461, 281, 50722, 50722, 13819, 6243, 4368, 293, 439, 300, 665, 1507, 13, 50860, 50860, 400, 550, 584, 11, 2264, 11, 2212, 341, 2699, 76, 2010, 293, 2212, 341, 31828, 300, 286, 362, 11, 577, 360, 286, 7283, 51107, 51107, 264, 7417, 30, 51157, 51157, 400, 300, 311, 689, 286, 486, 550, 2235, 484, 439, 264, 31828, 979, 19866, 11733, 281, 584, 11, 577, 393, 286, 51388, 51388, 13799, 1296, 264, 31828, 286, 362, 293, 264, 2699, 76, 3877, 286, 528, 30, 51600, 51600, 286, 478, 6369, 466, 472, 551, 13, 51670, 51670, 708, 360, 291, 519, 295, 264, 5288, 11, 4471, 11, 4471, 17, 11, 4471, 18, 30, 51862, 51862], "temperature": 0.0, "avg_logprob": -0.13934910204983497, "compression_ratio": 1.6312056737588652, "no_caption_prob": 1.3630960893351585e-05}, {"id": 387, "seek": 154522, "start": 1565.7, "end": 1569.94, "text": " translate between the JSON I have and the Elm structure I want?", "tokens": [50364, 407, 286, 5850, 486, 1715, 452, 2699, 76, 3877, 700, 281, 2995, 452, 2203, 337, 452, 1461, 281, 50722, 50722, 13819, 6243, 4368, 293, 439, 300, 665, 1507, 13, 50860, 50860, 400, 550, 584, 11, 2264, 11, 2212, 341, 2699, 76, 2010, 293, 2212, 341, 31828, 300, 286, 362, 11, 577, 360, 286, 7283, 51107, 51107, 264, 7417, 30, 51157, 51157, 400, 300, 311, 689, 286, 486, 550, 2235, 484, 439, 264, 31828, 979, 19866, 11733, 281, 584, 11, 577, 393, 286, 51388, 51388, 13799, 1296, 264, 31828, 286, 362, 293, 264, 2699, 76, 3877, 286, 528, 30, 51600, 51600, 286, 478, 6369, 466, 472, 551, 13, 51670, 51670, 708, 360, 291, 519, 295, 264, 5288, 11, 4471, 11, 4471, 17, 11, 4471, 18, 30, 51862, 51862], "temperature": 0.0, "avg_logprob": -0.13934910204983497, "compression_ratio": 1.6312056737588652, "no_caption_prob": 1.3630960893351585e-05}, {"id": 388, "seek": 154522, "start": 1569.94, "end": 1571.34, "text": " I'm curious about one thing.", "tokens": [50364, 407, 286, 5850, 486, 1715, 452, 2699, 76, 3877, 700, 281, 2995, 452, 2203, 337, 452, 1461, 281, 50722, 50722, 13819, 6243, 4368, 293, 439, 300, 665, 1507, 13, 50860, 50860, 400, 550, 584, 11, 2264, 11, 2212, 341, 2699, 76, 2010, 293, 2212, 341, 31828, 300, 286, 362, 11, 577, 360, 286, 7283, 51107, 51107, 264, 7417, 30, 51157, 51157, 400, 300, 311, 689, 286, 486, 550, 2235, 484, 439, 264, 31828, 979, 19866, 11733, 281, 584, 11, 577, 393, 286, 51388, 51388, 13799, 1296, 264, 31828, 286, 362, 293, 264, 2699, 76, 3877, 286, 528, 30, 51600, 51600, 286, 478, 6369, 466, 472, 551, 13, 51670, 51670, 708, 360, 291, 519, 295, 264, 5288, 11, 4471, 11, 4471, 17, 11, 4471, 18, 30, 51862, 51862], "temperature": 0.0, "avg_logprob": -0.13934910204983497, "compression_ratio": 1.6312056737588652, "no_caption_prob": 1.3630960893351585e-05}, {"id": 389, "seek": 154522, "start": 1571.34, "end": 1575.18, "text": " What do you think of the names, map, map2, map3?", "tokens": [50364, 407, 286, 5850, 486, 1715, 452, 2699, 76, 3877, 700, 281, 2995, 452, 2203, 337, 452, 1461, 281, 50722, 50722, 13819, 6243, 4368, 293, 439, 300, 665, 1507, 13, 50860, 50860, 400, 550, 584, 11, 2264, 11, 2212, 341, 2699, 76, 2010, 293, 2212, 341, 31828, 300, 286, 362, 11, 577, 360, 286, 7283, 51107, 51107, 264, 7417, 30, 51157, 51157, 400, 300, 311, 689, 286, 486, 550, 2235, 484, 439, 264, 31828, 979, 19866, 11733, 281, 584, 11, 577, 393, 286, 51388, 51388, 13799, 1296, 264, 31828, 286, 362, 293, 264, 2699, 76, 3877, 286, 528, 30, 51600, 51600, 286, 478, 6369, 466, 472, 551, 13, 51670, 51670, 708, 360, 291, 519, 295, 264, 5288, 11, 4471, 11, 4471, 17, 11, 4471, 18, 30, 51862, 51862], "temperature": 0.0, "avg_logprob": -0.13934910204983497, "compression_ratio": 1.6312056737588652, "no_caption_prob": 1.3630960893351585e-05}, {"id": 390, "seek": 157518, "start": 1575.18, "end": 1579.22, "text": " Like for me, map is about transforming one thing to another.", "tokens": [50364, 1743, 337, 385, 11, 4471, 307, 466, 27210, 472, 551, 281, 1071, 13, 50566, 50566, 400, 4471, 17, 307, 11, 382, 291, 584, 11, 21928, 13, 50710, 50710, 407, 576, 309, 652, 544, 2020, 281, 818, 309, 10432, 17, 11, 10432, 18, 30, 50946, 50946, 1610, 307, 300, 754, 437, 291, 362, 294, 428, 1575, 633, 565, 291, 751, 466, 4471, 17, 11, 4471, 18, 30, 51162, 51162, 663, 311, 257, 665, 1168, 13, 51260, 51260, 821, 311, 257, 2020, 295, 264, 3096, 4471, 13, 51402, 51402, 821, 311, 257, 2020, 294, 597, 291, 727, 818, 309, 4471, 16, 13, 51532, 51532, 467, 311, 445, 1333, 295, 29357, 295, 300, 5102, 689, 291, 393, 747, 257, 472, 6770, 2445, 51738, 51738], "temperature": 0.0, "avg_logprob": -0.1435518342305005, "compression_ratio": 1.6809338521400778, "no_caption_prob": 1.1478664418973494e-05}, {"id": 391, "seek": 157518, "start": 1579.22, "end": 1582.1000000000001, "text": " And map2 is, as you say, combining.", "tokens": [50364, 1743, 337, 385, 11, 4471, 307, 466, 27210, 472, 551, 281, 1071, 13, 50566, 50566, 400, 4471, 17, 307, 11, 382, 291, 584, 11, 21928, 13, 50710, 50710, 407, 576, 309, 652, 544, 2020, 281, 818, 309, 10432, 17, 11, 10432, 18, 30, 50946, 50946, 1610, 307, 300, 754, 437, 291, 362, 294, 428, 1575, 633, 565, 291, 751, 466, 4471, 17, 11, 4471, 18, 30, 51162, 51162, 663, 311, 257, 665, 1168, 13, 51260, 51260, 821, 311, 257, 2020, 295, 264, 3096, 4471, 13, 51402, 51402, 821, 311, 257, 2020, 294, 597, 291, 727, 818, 309, 4471, 16, 13, 51532, 51532, 467, 311, 445, 1333, 295, 29357, 295, 300, 5102, 689, 291, 393, 747, 257, 472, 6770, 2445, 51738, 51738], "temperature": 0.0, "avg_logprob": -0.1435518342305005, "compression_ratio": 1.6809338521400778, "no_caption_prob": 1.1478664418973494e-05}, {"id": 392, "seek": 157518, "start": 1582.1000000000001, "end": 1586.8200000000002, "text": " So would it make more sense to call it combine2, combine3?", "tokens": [50364, 1743, 337, 385, 11, 4471, 307, 466, 27210, 472, 551, 281, 1071, 13, 50566, 50566, 400, 4471, 17, 307, 11, 382, 291, 584, 11, 21928, 13, 50710, 50710, 407, 576, 309, 652, 544, 2020, 281, 818, 309, 10432, 17, 11, 10432, 18, 30, 50946, 50946, 1610, 307, 300, 754, 437, 291, 362, 294, 428, 1575, 633, 565, 291, 751, 466, 4471, 17, 11, 4471, 18, 30, 51162, 51162, 663, 311, 257, 665, 1168, 13, 51260, 51260, 821, 311, 257, 2020, 295, 264, 3096, 4471, 13, 51402, 51402, 821, 311, 257, 2020, 294, 597, 291, 727, 818, 309, 4471, 16, 13, 51532, 51532, 467, 311, 445, 1333, 295, 29357, 295, 300, 5102, 689, 291, 393, 747, 257, 472, 6770, 2445, 51738, 51738], "temperature": 0.0, "avg_logprob": -0.1435518342305005, "compression_ratio": 1.6809338521400778, "no_caption_prob": 1.1478664418973494e-05}, {"id": 393, "seek": 157518, "start": 1586.8200000000002, "end": 1591.14, "text": " Or is that even what you have in your mind every time you talk about map2, map3?", "tokens": [50364, 1743, 337, 385, 11, 4471, 307, 466, 27210, 472, 551, 281, 1071, 13, 50566, 50566, 400, 4471, 17, 307, 11, 382, 291, 584, 11, 21928, 13, 50710, 50710, 407, 576, 309, 652, 544, 2020, 281, 818, 309, 10432, 17, 11, 10432, 18, 30, 50946, 50946, 1610, 307, 300, 754, 437, 291, 362, 294, 428, 1575, 633, 565, 291, 751, 466, 4471, 17, 11, 4471, 18, 30, 51162, 51162, 663, 311, 257, 665, 1168, 13, 51260, 51260, 821, 311, 257, 2020, 295, 264, 3096, 4471, 13, 51402, 51402, 821, 311, 257, 2020, 294, 597, 291, 727, 818, 309, 4471, 16, 13, 51532, 51532, 467, 311, 445, 1333, 295, 29357, 295, 300, 5102, 689, 291, 393, 747, 257, 472, 6770, 2445, 51738, 51738], "temperature": 0.0, "avg_logprob": -0.1435518342305005, "compression_ratio": 1.6809338521400778, "no_caption_prob": 1.1478664418973494e-05}, {"id": 394, "seek": 157518, "start": 1591.14, "end": 1593.1000000000001, "text": " That's a good question.", "tokens": [50364, 1743, 337, 385, 11, 4471, 307, 466, 27210, 472, 551, 281, 1071, 13, 50566, 50566, 400, 4471, 17, 307, 11, 382, 291, 584, 11, 21928, 13, 50710, 50710, 407, 576, 309, 652, 544, 2020, 281, 818, 309, 10432, 17, 11, 10432, 18, 30, 50946, 50946, 1610, 307, 300, 754, 437, 291, 362, 294, 428, 1575, 633, 565, 291, 751, 466, 4471, 17, 11, 4471, 18, 30, 51162, 51162, 663, 311, 257, 665, 1168, 13, 51260, 51260, 821, 311, 257, 2020, 295, 264, 3096, 4471, 13, 51402, 51402, 821, 311, 257, 2020, 294, 597, 291, 727, 818, 309, 4471, 16, 13, 51532, 51532, 467, 311, 445, 1333, 295, 29357, 295, 300, 5102, 689, 291, 393, 747, 257, 472, 6770, 2445, 51738, 51738], "temperature": 0.0, "avg_logprob": -0.1435518342305005, "compression_ratio": 1.6809338521400778, "no_caption_prob": 1.1478664418973494e-05}, {"id": 395, "seek": 157518, "start": 1593.1000000000001, "end": 1595.94, "text": " There's a sense of the base map.", "tokens": [50364, 1743, 337, 385, 11, 4471, 307, 466, 27210, 472, 551, 281, 1071, 13, 50566, 50566, 400, 4471, 17, 307, 11, 382, 291, 584, 11, 21928, 13, 50710, 50710, 407, 576, 309, 652, 544, 2020, 281, 818, 309, 10432, 17, 11, 10432, 18, 30, 50946, 50946, 1610, 307, 300, 754, 437, 291, 362, 294, 428, 1575, 633, 565, 291, 751, 466, 4471, 17, 11, 4471, 18, 30, 51162, 51162, 663, 311, 257, 665, 1168, 13, 51260, 51260, 821, 311, 257, 2020, 295, 264, 3096, 4471, 13, 51402, 51402, 821, 311, 257, 2020, 294, 597, 291, 727, 818, 309, 4471, 16, 13, 51532, 51532, 467, 311, 445, 1333, 295, 29357, 295, 300, 5102, 689, 291, 393, 747, 257, 472, 6770, 2445, 51738, 51738], "temperature": 0.0, "avg_logprob": -0.1435518342305005, "compression_ratio": 1.6809338521400778, "no_caption_prob": 1.1478664418973494e-05}, {"id": 396, "seek": 157518, "start": 1595.94, "end": 1598.54, "text": " There's a sense in which you could call it map1.", "tokens": [50364, 1743, 337, 385, 11, 4471, 307, 466, 27210, 472, 551, 281, 1071, 13, 50566, 50566, 400, 4471, 17, 307, 11, 382, 291, 584, 11, 21928, 13, 50710, 50710, 407, 576, 309, 652, 544, 2020, 281, 818, 309, 10432, 17, 11, 10432, 18, 30, 50946, 50946, 1610, 307, 300, 754, 437, 291, 362, 294, 428, 1575, 633, 565, 291, 751, 466, 4471, 17, 11, 4471, 18, 30, 51162, 51162, 663, 311, 257, 665, 1168, 13, 51260, 51260, 821, 311, 257, 2020, 295, 264, 3096, 4471, 13, 51402, 51402, 821, 311, 257, 2020, 294, 597, 291, 727, 818, 309, 4471, 16, 13, 51532, 51532, 467, 311, 445, 1333, 295, 29357, 295, 300, 5102, 689, 291, 393, 747, 257, 472, 6770, 2445, 51738, 51738], "temperature": 0.0, "avg_logprob": -0.1435518342305005, "compression_ratio": 1.6809338521400778, "no_caption_prob": 1.1478664418973494e-05}, {"id": 397, "seek": 157518, "start": 1598.54, "end": 1602.66, "text": " It's just sort of continuation of that pattern where you can take a one argument function", "tokens": [50364, 1743, 337, 385, 11, 4471, 307, 466, 27210, 472, 551, 281, 1071, 13, 50566, 50566, 400, 4471, 17, 307, 11, 382, 291, 584, 11, 21928, 13, 50710, 50710, 407, 576, 309, 652, 544, 2020, 281, 818, 309, 10432, 17, 11, 10432, 18, 30, 50946, 50946, 1610, 307, 300, 754, 437, 291, 362, 294, 428, 1575, 633, 565, 291, 751, 466, 4471, 17, 11, 4471, 18, 30, 51162, 51162, 663, 311, 257, 665, 1168, 13, 51260, 51260, 821, 311, 257, 2020, 295, 264, 3096, 4471, 13, 51402, 51402, 821, 311, 257, 2020, 294, 597, 291, 727, 818, 309, 4471, 16, 13, 51532, 51532, 467, 311, 445, 1333, 295, 29357, 295, 300, 5102, 689, 291, 393, 747, 257, 472, 6770, 2445, 51738, 51738], "temperature": 0.0, "avg_logprob": -0.1435518342305005, "compression_ratio": 1.6809338521400778, "no_caption_prob": 1.1478664418973494e-05}, {"id": 398, "seek": 160266, "start": 1602.66, "end": 1607.94, "text": " and one maybe, and I guess you're only combining one.", "tokens": [50364, 293, 472, 1310, 11, 293, 286, 2041, 291, 434, 787, 21928, 472, 13, 50628, 50628, 509, 434, 21928, 472, 1310, 293, 445, 9275, 257, 2445, 281, 309, 13, 50776, 50776, 286, 360, 3449, 300, 286, 2049, 722, 382, 264, 700, 5870, 1823, 498, 286, 478, 884, 257, 1895, 578, 3662, 281, 257, 51104, 51104, 819, 1412, 2010, 13, 51154, 51154, 961, 311, 584, 286, 600, 658, 257, 2158, 300, 286, 478, 445, 979, 8616, 257, 4195, 490, 512, 33283, 4134, 11, 293, 300, 311, 51592, 51592, 12187, 294, 452, 2316, 13, 51642, 51642], "temperature": 0.0, "avg_logprob": -0.09693504132722554, "compression_ratio": 1.5774647887323943, "no_caption_prob": 1.8924800315289758e-05}, {"id": 399, "seek": 160266, "start": 1607.94, "end": 1610.9, "text": " You're combining one maybe and just applying a function to it.", "tokens": [50364, 293, 472, 1310, 11, 293, 286, 2041, 291, 434, 787, 21928, 472, 13, 50628, 50628, 509, 434, 21928, 472, 1310, 293, 445, 9275, 257, 2445, 281, 309, 13, 50776, 50776, 286, 360, 3449, 300, 286, 2049, 722, 382, 264, 700, 5870, 1823, 498, 286, 478, 884, 257, 1895, 578, 3662, 281, 257, 51104, 51104, 819, 1412, 2010, 13, 51154, 51154, 961, 311, 584, 286, 600, 658, 257, 2158, 300, 286, 478, 445, 979, 8616, 257, 4195, 490, 512, 33283, 4134, 11, 293, 300, 311, 51592, 51592, 12187, 294, 452, 2316, 13, 51642, 51642], "temperature": 0.0, "avg_logprob": -0.09693504132722554, "compression_ratio": 1.5774647887323943, "no_caption_prob": 1.8924800315289758e-05}, {"id": 400, "seek": 160266, "start": 1610.9, "end": 1617.46, "text": " I do notice that I often start as the first tiny step if I'm doing a refactoring to a", "tokens": [50364, 293, 472, 1310, 11, 293, 286, 2041, 291, 434, 787, 21928, 472, 13, 50628, 50628, 509, 434, 21928, 472, 1310, 293, 445, 9275, 257, 2445, 281, 309, 13, 50776, 50776, 286, 360, 3449, 300, 286, 2049, 722, 382, 264, 700, 5870, 1823, 498, 286, 478, 884, 257, 1895, 578, 3662, 281, 257, 51104, 51104, 819, 1412, 2010, 13, 51154, 51154, 961, 311, 584, 286, 600, 658, 257, 2158, 300, 286, 478, 445, 979, 8616, 257, 4195, 490, 512, 33283, 4134, 11, 293, 300, 311, 51592, 51592, 12187, 294, 452, 2316, 13, 51642, 51642], "temperature": 0.0, "avg_logprob": -0.09693504132722554, "compression_ratio": 1.5774647887323943, "no_caption_prob": 1.8924800315289758e-05}, {"id": 401, "seek": 160266, "start": 1617.46, "end": 1618.46, "text": " different data type.", "tokens": [50364, 293, 472, 1310, 11, 293, 286, 2041, 291, 434, 787, 21928, 472, 13, 50628, 50628, 509, 434, 21928, 472, 1310, 293, 445, 9275, 257, 2445, 281, 309, 13, 50776, 50776, 286, 360, 3449, 300, 286, 2049, 722, 382, 264, 700, 5870, 1823, 498, 286, 478, 884, 257, 1895, 578, 3662, 281, 257, 51104, 51104, 819, 1412, 2010, 13, 51154, 51154, 961, 311, 584, 286, 600, 658, 257, 2158, 300, 286, 478, 445, 979, 8616, 257, 4195, 490, 512, 33283, 4134, 11, 293, 300, 311, 51592, 51592, 12187, 294, 452, 2316, 13, 51642, 51642], "temperature": 0.0, "avg_logprob": -0.09693504132722554, "compression_ratio": 1.5774647887323943, "no_caption_prob": 1.8924800315289758e-05}, {"id": 402, "seek": 160266, "start": 1618.46, "end": 1627.22, "text": " Let's say I've got a value that I'm just decoding a user from some HTTP response, and that's", "tokens": [50364, 293, 472, 1310, 11, 293, 286, 2041, 291, 434, 787, 21928, 472, 13, 50628, 50628, 509, 434, 21928, 472, 1310, 293, 445, 9275, 257, 2445, 281, 309, 13, 50776, 50776, 286, 360, 3449, 300, 286, 2049, 722, 382, 264, 700, 5870, 1823, 498, 286, 478, 884, 257, 1895, 578, 3662, 281, 257, 51104, 51104, 819, 1412, 2010, 13, 51154, 51154, 961, 311, 584, 286, 600, 658, 257, 2158, 300, 286, 478, 445, 979, 8616, 257, 4195, 490, 512, 33283, 4134, 11, 293, 300, 311, 51592, 51592, 12187, 294, 452, 2316, 13, 51642, 51642], "temperature": 0.0, "avg_logprob": -0.09693504132722554, "compression_ratio": 1.5774647887323943, "no_caption_prob": 1.8924800315289758e-05}, {"id": 403, "seek": 160266, "start": 1627.22, "end": 1628.22, "text": " stored in my model.", "tokens": [50364, 293, 472, 1310, 11, 293, 286, 2041, 291, 434, 787, 21928, 472, 13, 50628, 50628, 509, 434, 21928, 472, 1310, 293, 445, 9275, 257, 2445, 281, 309, 13, 50776, 50776, 286, 360, 3449, 300, 286, 2049, 722, 382, 264, 700, 5870, 1823, 498, 286, 478, 884, 257, 1895, 578, 3662, 281, 257, 51104, 51104, 819, 1412, 2010, 13, 51154, 51154, 961, 311, 584, 286, 600, 658, 257, 2158, 300, 286, 478, 445, 979, 8616, 257, 4195, 490, 512, 33283, 4134, 11, 293, 300, 311, 51592, 51592, 12187, 294, 452, 2316, 13, 51642, 51642], "temperature": 0.0, "avg_logprob": -0.09693504132722554, "compression_ratio": 1.5774647887323943, "no_caption_prob": 1.8924800315289758e-05}, {"id": 404, "seek": 162822, "start": 1628.22, "end": 1633.3, "text": " But now I actually want it to be a bunch of metadata, and user is one of those pieces", "tokens": [50364, 583, 586, 286, 767, 528, 309, 281, 312, 257, 3840, 295, 26603, 11, 293, 4195, 307, 472, 295, 729, 3755, 50618, 50618, 295, 26603, 13, 50694, 50694, 400, 286, 600, 658, 512, 661, 9239, 295, 26603, 294, 456, 13, 50830, 50830, 400, 370, 264, 700, 551, 286, 603, 360, 307, 286, 603, 7019, 309, 294, 257, 31828, 13, 1479, 22332, 13, 24223, 26603, 11, 597, 575, 51242, 51242, 257, 2167, 2519, 4195, 295, 2010, 4195, 13, 51410, 51410, 407, 586, 286, 600, 1096, 341, 4471, 16, 13, 51478, 51478, 286, 600, 1096, 31828, 13, 1479, 22332, 13, 24223, 365, 257, 2136, 13, 51630, 51630, 823, 286, 478, 21993, 309, 294, 257, 2136, 13, 51724, 51724], "temperature": 0.0, "avg_logprob": -0.11324836861374032, "compression_ratio": 1.7188940092165899, "no_caption_prob": 2.710820990614593e-05}, {"id": 405, "seek": 162822, "start": 1633.3, "end": 1634.82, "text": " of metadata.", "tokens": [50364, 583, 586, 286, 767, 528, 309, 281, 312, 257, 3840, 295, 26603, 11, 293, 4195, 307, 472, 295, 729, 3755, 50618, 50618, 295, 26603, 13, 50694, 50694, 400, 286, 600, 658, 512, 661, 9239, 295, 26603, 294, 456, 13, 50830, 50830, 400, 370, 264, 700, 551, 286, 603, 360, 307, 286, 603, 7019, 309, 294, 257, 31828, 13, 1479, 22332, 13, 24223, 26603, 11, 597, 575, 51242, 51242, 257, 2167, 2519, 4195, 295, 2010, 4195, 13, 51410, 51410, 407, 586, 286, 600, 1096, 341, 4471, 16, 13, 51478, 51478, 286, 600, 1096, 31828, 13, 1479, 22332, 13, 24223, 365, 257, 2136, 13, 51630, 51630, 823, 286, 478, 21993, 309, 294, 257, 2136, 13, 51724, 51724], "temperature": 0.0, "avg_logprob": -0.11324836861374032, "compression_ratio": 1.7188940092165899, "no_caption_prob": 2.710820990614593e-05}, {"id": 406, "seek": 162822, "start": 1634.82, "end": 1637.54, "text": " And I've got some other bits of metadata in there.", "tokens": [50364, 583, 586, 286, 767, 528, 309, 281, 312, 257, 3840, 295, 26603, 11, 293, 4195, 307, 472, 295, 729, 3755, 50618, 50618, 295, 26603, 13, 50694, 50694, 400, 286, 600, 658, 512, 661, 9239, 295, 26603, 294, 456, 13, 50830, 50830, 400, 370, 264, 700, 551, 286, 603, 360, 307, 286, 603, 7019, 309, 294, 257, 31828, 13, 1479, 22332, 13, 24223, 26603, 11, 597, 575, 51242, 51242, 257, 2167, 2519, 4195, 295, 2010, 4195, 13, 51410, 51410, 407, 586, 286, 600, 1096, 341, 4471, 16, 13, 51478, 51478, 286, 600, 1096, 31828, 13, 1479, 22332, 13, 24223, 365, 257, 2136, 13, 51630, 51630, 823, 286, 478, 21993, 309, 294, 257, 2136, 13, 51724, 51724], "temperature": 0.0, "avg_logprob": -0.11324836861374032, "compression_ratio": 1.7188940092165899, "no_caption_prob": 2.710820990614593e-05}, {"id": 407, "seek": 162822, "start": 1637.54, "end": 1645.78, "text": " And so the first thing I'll do is I'll wrap it in a JSON.decode.map metadata, which has", "tokens": [50364, 583, 586, 286, 767, 528, 309, 281, 312, 257, 3840, 295, 26603, 11, 293, 4195, 307, 472, 295, 729, 3755, 50618, 50618, 295, 26603, 13, 50694, 50694, 400, 286, 600, 658, 512, 661, 9239, 295, 26603, 294, 456, 13, 50830, 50830, 400, 370, 264, 700, 551, 286, 603, 360, 307, 286, 603, 7019, 309, 294, 257, 31828, 13, 1479, 22332, 13, 24223, 26603, 11, 597, 575, 51242, 51242, 257, 2167, 2519, 4195, 295, 2010, 4195, 13, 51410, 51410, 407, 586, 286, 600, 1096, 341, 4471, 16, 13, 51478, 51478, 286, 600, 1096, 31828, 13, 1479, 22332, 13, 24223, 365, 257, 2136, 13, 51630, 51630, 823, 286, 478, 21993, 309, 294, 257, 2136, 13, 51724, 51724], "temperature": 0.0, "avg_logprob": -0.11324836861374032, "compression_ratio": 1.7188940092165899, "no_caption_prob": 2.710820990614593e-05}, {"id": 408, "seek": 162822, "start": 1645.78, "end": 1649.14, "text": " a single field user of type user.", "tokens": [50364, 583, 586, 286, 767, 528, 309, 281, 312, 257, 3840, 295, 26603, 11, 293, 4195, 307, 472, 295, 729, 3755, 50618, 50618, 295, 26603, 13, 50694, 50694, 400, 286, 600, 658, 512, 661, 9239, 295, 26603, 294, 456, 13, 50830, 50830, 400, 370, 264, 700, 551, 286, 603, 360, 307, 286, 603, 7019, 309, 294, 257, 31828, 13, 1479, 22332, 13, 24223, 26603, 11, 597, 575, 51242, 51242, 257, 2167, 2519, 4195, 295, 2010, 4195, 13, 51410, 51410, 407, 586, 286, 600, 1096, 341, 4471, 16, 13, 51478, 51478, 286, 600, 1096, 31828, 13, 1479, 22332, 13, 24223, 365, 257, 2136, 13, 51630, 51630, 823, 286, 478, 21993, 309, 294, 257, 2136, 13, 51724, 51724], "temperature": 0.0, "avg_logprob": -0.11324836861374032, "compression_ratio": 1.7188940092165899, "no_caption_prob": 2.710820990614593e-05}, {"id": 409, "seek": 162822, "start": 1649.14, "end": 1650.5, "text": " So now I've done this map1.", "tokens": [50364, 583, 586, 286, 767, 528, 309, 281, 312, 257, 3840, 295, 26603, 11, 293, 4195, 307, 472, 295, 729, 3755, 50618, 50618, 295, 26603, 13, 50694, 50694, 400, 286, 600, 658, 512, 661, 9239, 295, 26603, 294, 456, 13, 50830, 50830, 400, 370, 264, 700, 551, 286, 603, 360, 307, 286, 603, 7019, 309, 294, 257, 31828, 13, 1479, 22332, 13, 24223, 26603, 11, 597, 575, 51242, 51242, 257, 2167, 2519, 4195, 295, 2010, 4195, 13, 51410, 51410, 407, 586, 286, 600, 1096, 341, 4471, 16, 13, 51478, 51478, 286, 600, 1096, 31828, 13, 1479, 22332, 13, 24223, 365, 257, 2136, 13, 51630, 51630, 823, 286, 478, 21993, 309, 294, 257, 2136, 13, 51724, 51724], "temperature": 0.0, "avg_logprob": -0.11324836861374032, "compression_ratio": 1.7188940092165899, "no_caption_prob": 2.710820990614593e-05}, {"id": 410, "seek": 162822, "start": 1650.5, "end": 1653.54, "text": " I've done JSON.decode.map with a record.", "tokens": [50364, 583, 586, 286, 767, 528, 309, 281, 312, 257, 3840, 295, 26603, 11, 293, 4195, 307, 472, 295, 729, 3755, 50618, 50618, 295, 26603, 13, 50694, 50694, 400, 286, 600, 658, 512, 661, 9239, 295, 26603, 294, 456, 13, 50830, 50830, 400, 370, 264, 700, 551, 286, 603, 360, 307, 286, 603, 7019, 309, 294, 257, 31828, 13, 1479, 22332, 13, 24223, 26603, 11, 597, 575, 51242, 51242, 257, 2167, 2519, 4195, 295, 2010, 4195, 13, 51410, 51410, 407, 586, 286, 600, 1096, 341, 4471, 16, 13, 51478, 51478, 286, 600, 1096, 31828, 13, 1479, 22332, 13, 24223, 365, 257, 2136, 13, 51630, 51630, 823, 286, 478, 21993, 309, 294, 257, 2136, 13, 51724, 51724], "temperature": 0.0, "avg_logprob": -0.11324836861374032, "compression_ratio": 1.7188940092165899, "no_caption_prob": 2.710820990614593e-05}, {"id": 411, "seek": 162822, "start": 1653.54, "end": 1655.42, "text": " Now I'm wrapping it in a record.", "tokens": [50364, 583, 586, 286, 767, 528, 309, 281, 312, 257, 3840, 295, 26603, 11, 293, 4195, 307, 472, 295, 729, 3755, 50618, 50618, 295, 26603, 13, 50694, 50694, 400, 286, 600, 658, 512, 661, 9239, 295, 26603, 294, 456, 13, 50830, 50830, 400, 370, 264, 700, 551, 286, 603, 360, 307, 286, 603, 7019, 309, 294, 257, 31828, 13, 1479, 22332, 13, 24223, 26603, 11, 597, 575, 51242, 51242, 257, 2167, 2519, 4195, 295, 2010, 4195, 13, 51410, 51410, 407, 586, 286, 600, 1096, 341, 4471, 16, 13, 51478, 51478, 286, 600, 1096, 31828, 13, 1479, 22332, 13, 24223, 365, 257, 2136, 13, 51630, 51630, 823, 286, 478, 21993, 309, 294, 257, 2136, 13, 51724, 51724], "temperature": 0.0, "avg_logprob": -0.11324836861374032, "compression_ratio": 1.7188940092165899, "no_caption_prob": 2.710820990614593e-05}, {"id": 412, "seek": 165542, "start": 1655.42, "end": 1661.66, "text": " And that's a preparatory step for the next step, which is it's going to be JSON.decode.map2,", "tokens": [50364, 400, 300, 311, 257, 8231, 4745, 1823, 337, 264, 958, 1823, 11, 597, 307, 309, 311, 516, 281, 312, 31828, 13, 1479, 22332, 13, 24223, 17, 11, 50676, 50676, 293, 286, 478, 516, 281, 909, 1071, 2519, 281, 300, 26603, 2519, 13, 50852, 50852, 407, 294, 257, 636, 11, 309, 775, 841, 411, 4471, 16, 11, 754, 1673, 291, 393, 764, 309, 337, 445, 1333, 295, 27210, 51176, 51176, 721, 13, 51226, 51226, 821, 307, 364, 14459, 719, 281, 264, 1186, 300, 291, 393, 1319, 257, 4471, 281, 257, 4471, 17, 13, 51444, 51444, 865, 11, 309, 534, 3417, 411, 257, 29357, 295, 341, 5102, 13, 51632, 51632], "temperature": 0.0, "avg_logprob": -0.13775976354425604, "compression_ratio": 1.5655737704918034, "no_caption_prob": 6.048900104360655e-06}, {"id": 413, "seek": 165542, "start": 1661.66, "end": 1665.18, "text": " and I'm going to add another field to that metadata field.", "tokens": [50364, 400, 300, 311, 257, 8231, 4745, 1823, 337, 264, 958, 1823, 11, 597, 307, 309, 311, 516, 281, 312, 31828, 13, 1479, 22332, 13, 24223, 17, 11, 50676, 50676, 293, 286, 478, 516, 281, 909, 1071, 2519, 281, 300, 26603, 2519, 13, 50852, 50852, 407, 294, 257, 636, 11, 309, 775, 841, 411, 4471, 16, 11, 754, 1673, 291, 393, 764, 309, 337, 445, 1333, 295, 27210, 51176, 51176, 721, 13, 51226, 51226, 821, 307, 364, 14459, 719, 281, 264, 1186, 300, 291, 393, 1319, 257, 4471, 281, 257, 4471, 17, 13, 51444, 51444, 865, 11, 309, 534, 3417, 411, 257, 29357, 295, 341, 5102, 13, 51632, 51632], "temperature": 0.0, "avg_logprob": -0.13775976354425604, "compression_ratio": 1.5655737704918034, "no_caption_prob": 6.048900104360655e-06}, {"id": 414, "seek": 165542, "start": 1665.18, "end": 1671.66, "text": " So in a way, it does feel like map1, even though you can use it for just sort of transforming", "tokens": [50364, 400, 300, 311, 257, 8231, 4745, 1823, 337, 264, 958, 1823, 11, 597, 307, 309, 311, 516, 281, 312, 31828, 13, 1479, 22332, 13, 24223, 17, 11, 50676, 50676, 293, 286, 478, 516, 281, 909, 1071, 2519, 281, 300, 26603, 2519, 13, 50852, 50852, 407, 294, 257, 636, 11, 309, 775, 841, 411, 4471, 16, 11, 754, 1673, 291, 393, 764, 309, 337, 445, 1333, 295, 27210, 51176, 51176, 721, 13, 51226, 51226, 821, 307, 364, 14459, 719, 281, 264, 1186, 300, 291, 393, 1319, 257, 4471, 281, 257, 4471, 17, 13, 51444, 51444, 865, 11, 309, 534, 3417, 411, 257, 29357, 295, 341, 5102, 13, 51632, 51632], "temperature": 0.0, "avg_logprob": -0.13775976354425604, "compression_ratio": 1.5655737704918034, "no_caption_prob": 6.048900104360655e-06}, {"id": 415, "seek": 165542, "start": 1671.66, "end": 1672.66, "text": " things.", "tokens": [50364, 400, 300, 311, 257, 8231, 4745, 1823, 337, 264, 958, 1823, 11, 597, 307, 309, 311, 516, 281, 312, 31828, 13, 1479, 22332, 13, 24223, 17, 11, 50676, 50676, 293, 286, 478, 516, 281, 909, 1071, 2519, 281, 300, 26603, 2519, 13, 50852, 50852, 407, 294, 257, 636, 11, 309, 775, 841, 411, 4471, 16, 11, 754, 1673, 291, 393, 764, 309, 337, 445, 1333, 295, 27210, 51176, 51176, 721, 13, 51226, 51226, 821, 307, 364, 14459, 719, 281, 264, 1186, 300, 291, 393, 1319, 257, 4471, 281, 257, 4471, 17, 13, 51444, 51444, 865, 11, 309, 534, 3417, 411, 257, 29357, 295, 341, 5102, 13, 51632, 51632], "temperature": 0.0, "avg_logprob": -0.13775976354425604, "compression_ratio": 1.5655737704918034, "no_caption_prob": 6.048900104360655e-06}, {"id": 416, "seek": 165542, "start": 1672.66, "end": 1677.02, "text": " There is an elegance to the fact that you can change a map to a map2.", "tokens": [50364, 400, 300, 311, 257, 8231, 4745, 1823, 337, 264, 958, 1823, 11, 597, 307, 309, 311, 516, 281, 312, 31828, 13, 1479, 22332, 13, 24223, 17, 11, 50676, 50676, 293, 286, 478, 516, 281, 909, 1071, 2519, 281, 300, 26603, 2519, 13, 50852, 50852, 407, 294, 257, 636, 11, 309, 775, 841, 411, 4471, 16, 11, 754, 1673, 291, 393, 764, 309, 337, 445, 1333, 295, 27210, 51176, 51176, 721, 13, 51226, 51226, 821, 307, 364, 14459, 719, 281, 264, 1186, 300, 291, 393, 1319, 257, 4471, 281, 257, 4471, 17, 13, 51444, 51444, 865, 11, 309, 534, 3417, 411, 257, 29357, 295, 341, 5102, 13, 51632, 51632], "temperature": 0.0, "avg_logprob": -0.13775976354425604, "compression_ratio": 1.5655737704918034, "no_caption_prob": 6.048900104360655e-06}, {"id": 417, "seek": 165542, "start": 1677.02, "end": 1680.78, "text": " Yeah, it really feels like a continuation of this pattern.", "tokens": [50364, 400, 300, 311, 257, 8231, 4745, 1823, 337, 264, 958, 1823, 11, 597, 307, 309, 311, 516, 281, 312, 31828, 13, 1479, 22332, 13, 24223, 17, 11, 50676, 50676, 293, 286, 478, 516, 281, 909, 1071, 2519, 281, 300, 26603, 2519, 13, 50852, 50852, 407, 294, 257, 636, 11, 309, 775, 841, 411, 4471, 16, 11, 754, 1673, 291, 393, 764, 309, 337, 445, 1333, 295, 27210, 51176, 51176, 721, 13, 51226, 51226, 821, 307, 364, 14459, 719, 281, 264, 1186, 300, 291, 393, 1319, 257, 4471, 281, 257, 4471, 17, 13, 51444, 51444, 865, 11, 309, 534, 3417, 411, 257, 29357, 295, 341, 5102, 13, 51632, 51632], "temperature": 0.0, "avg_logprob": -0.13775976354425604, "compression_ratio": 1.5655737704918034, "no_caption_prob": 6.048900104360655e-06}, {"id": 418, "seek": 168078, "start": 1680.78, "end": 1686.66, "text": " And there's also the sense in which it is a transformation, it's just a transformation with two inputs.", "tokens": [50364, 400, 456, 311, 611, 264, 2020, 294, 597, 309, 307, 257, 9887, 11, 309, 311, 445, 257, 9887, 365, 732, 15743, 13, 50658, 50658, 407, 291, 1062, 362, 11, 584, 11, 732, 41674, 1348, 294, 11, 457, 257, 6798, 1348, 484, 13, 50904, 50904, 407, 309, 307, 920, 257, 9887, 11, 457, 309, 311, 1570, 295, 257, 4088, 472, 3174, 666, 1071, 11, 51156, 51156, 570, 586, 291, 362, 3866, 15743, 13, 51220, 51220, 865, 11, 498, 291, 519, 466, 309, 365, 1310, 11, 1310, 13, 24223, 307, 257, 588, 3303, 11, 411, 11, 3811, 562, 1310, 51601, 51601, 307, 2942, 293, 321, 362, 341, 1310, 2010, 293, 321, 434, 884, 1389, 12363, 439, 670, 264, 1081, 51808, 51808], "temperature": 0.0, "avg_logprob": -0.1499948107506618, "compression_ratio": 1.8022388059701493, "no_caption_prob": 4.539612200460397e-05}, {"id": 419, "seek": 168078, "start": 1686.66, "end": 1691.58, "text": " So you might have, say, two integers coming in, but a string coming out.", "tokens": [50364, 400, 456, 311, 611, 264, 2020, 294, 597, 309, 307, 257, 9887, 11, 309, 311, 445, 257, 9887, 365, 732, 15743, 13, 50658, 50658, 407, 291, 1062, 362, 11, 584, 11, 732, 41674, 1348, 294, 11, 457, 257, 6798, 1348, 484, 13, 50904, 50904, 407, 309, 307, 920, 257, 9887, 11, 457, 309, 311, 1570, 295, 257, 4088, 472, 3174, 666, 1071, 11, 51156, 51156, 570, 586, 291, 362, 3866, 15743, 13, 51220, 51220, 865, 11, 498, 291, 519, 466, 309, 365, 1310, 11, 1310, 13, 24223, 307, 257, 588, 3303, 11, 411, 11, 3811, 562, 1310, 51601, 51601, 307, 2942, 293, 321, 362, 341, 1310, 2010, 293, 321, 434, 884, 1389, 12363, 439, 670, 264, 1081, 51808, 51808], "temperature": 0.0, "avg_logprob": -0.1499948107506618, "compression_ratio": 1.8022388059701493, "no_caption_prob": 4.539612200460397e-05}, {"id": 420, "seek": 168078, "start": 1691.58, "end": 1696.62, "text": " So it is still a transformation, but it's less of a transform one item into another,", "tokens": [50364, 400, 456, 311, 611, 264, 2020, 294, 597, 309, 307, 257, 9887, 11, 309, 311, 445, 257, 9887, 365, 732, 15743, 13, 50658, 50658, 407, 291, 1062, 362, 11, 584, 11, 732, 41674, 1348, 294, 11, 457, 257, 6798, 1348, 484, 13, 50904, 50904, 407, 309, 307, 920, 257, 9887, 11, 457, 309, 311, 1570, 295, 257, 4088, 472, 3174, 666, 1071, 11, 51156, 51156, 570, 586, 291, 362, 3866, 15743, 13, 51220, 51220, 865, 11, 498, 291, 519, 466, 309, 365, 1310, 11, 1310, 13, 24223, 307, 257, 588, 3303, 11, 411, 11, 3811, 562, 1310, 51601, 51601, 307, 2942, 293, 321, 362, 341, 1310, 2010, 293, 321, 434, 884, 1389, 12363, 439, 670, 264, 1081, 51808, 51808], "temperature": 0.0, "avg_logprob": -0.1499948107506618, "compression_ratio": 1.8022388059701493, "no_caption_prob": 4.539612200460397e-05}, {"id": 421, "seek": 168078, "start": 1696.62, "end": 1697.8999999999999, "text": " because now you have multiple inputs.", "tokens": [50364, 400, 456, 311, 611, 264, 2020, 294, 597, 309, 307, 257, 9887, 11, 309, 311, 445, 257, 9887, 365, 732, 15743, 13, 50658, 50658, 407, 291, 1062, 362, 11, 584, 11, 732, 41674, 1348, 294, 11, 457, 257, 6798, 1348, 484, 13, 50904, 50904, 407, 309, 307, 920, 257, 9887, 11, 457, 309, 311, 1570, 295, 257, 4088, 472, 3174, 666, 1071, 11, 51156, 51156, 570, 586, 291, 362, 3866, 15743, 13, 51220, 51220, 865, 11, 498, 291, 519, 466, 309, 365, 1310, 11, 1310, 13, 24223, 307, 257, 588, 3303, 11, 411, 11, 3811, 562, 1310, 51601, 51601, 307, 2942, 293, 321, 362, 341, 1310, 2010, 293, 321, 434, 884, 1389, 12363, 439, 670, 264, 1081, 51808, 51808], "temperature": 0.0, "avg_logprob": -0.1499948107506618, "compression_ratio": 1.8022388059701493, "no_caption_prob": 4.539612200460397e-05}, {"id": 422, "seek": 168078, "start": 1697.8999999999999, "end": 1705.52, "text": " Yeah, if you think about it with maybe, maybe.map is a very natural, like, imagine when maybe", "tokens": [50364, 400, 456, 311, 611, 264, 2020, 294, 597, 309, 307, 257, 9887, 11, 309, 311, 445, 257, 9887, 365, 732, 15743, 13, 50658, 50658, 407, 291, 1062, 362, 11, 584, 11, 732, 41674, 1348, 294, 11, 457, 257, 6798, 1348, 484, 13, 50904, 50904, 407, 309, 307, 920, 257, 9887, 11, 457, 309, 311, 1570, 295, 257, 4088, 472, 3174, 666, 1071, 11, 51156, 51156, 570, 586, 291, 362, 3866, 15743, 13, 51220, 51220, 865, 11, 498, 291, 519, 466, 309, 365, 1310, 11, 1310, 13, 24223, 307, 257, 588, 3303, 11, 411, 11, 3811, 562, 1310, 51601, 51601, 307, 2942, 293, 321, 362, 341, 1310, 2010, 293, 321, 434, 884, 1389, 12363, 439, 670, 264, 1081, 51808, 51808], "temperature": 0.0, "avg_logprob": -0.1499948107506618, "compression_ratio": 1.8022388059701493, "no_caption_prob": 4.539612200460397e-05}, {"id": 423, "seek": 168078, "start": 1705.52, "end": 1709.66, "text": " is created and we have this maybe type and we're doing case statements all over the place", "tokens": [50364, 400, 456, 311, 611, 264, 2020, 294, 597, 309, 307, 257, 9887, 11, 309, 311, 445, 257, 9887, 365, 732, 15743, 13, 50658, 50658, 407, 291, 1062, 362, 11, 584, 11, 732, 41674, 1348, 294, 11, 457, 257, 6798, 1348, 484, 13, 50904, 50904, 407, 309, 307, 920, 257, 9887, 11, 457, 309, 311, 1570, 295, 257, 4088, 472, 3174, 666, 1071, 11, 51156, 51156, 570, 586, 291, 362, 3866, 15743, 13, 51220, 51220, 865, 11, 498, 291, 519, 466, 309, 365, 1310, 11, 1310, 13, 24223, 307, 257, 588, 3303, 11, 411, 11, 3811, 562, 1310, 51601, 51601, 307, 2942, 293, 321, 362, 341, 1310, 2010, 293, 321, 434, 884, 1389, 12363, 439, 670, 264, 1081, 51808, 51808], "temperature": 0.0, "avg_logprob": -0.1499948107506618, "compression_ratio": 1.8022388059701493, "no_caption_prob": 4.539612200460397e-05}, {"id": 424, "seek": 170966, "start": 1709.66, "end": 1714.3000000000002, "text": " and we say, case just, take that value, I want to apply some function to it.", "tokens": [50364, 293, 321, 584, 11, 1389, 445, 11, 747, 300, 2158, 11, 286, 528, 281, 3079, 512, 2445, 281, 309, 13, 50596, 50596, 400, 321, 434, 411, 11, 341, 307, 534, 46196, 13, 50676, 50676, 26291, 380, 309, 312, 1481, 498, 286, 727, 445, 1320, 294, 264, 2445, 286, 1415, 281, 3079, 562, 286, 1415, 50895, 50895, 281, 1261, 341, 6798, 281, 11775, 2869, 651, 11, 286, 727, 445, 1320, 294, 257, 6798, 281, 6597, 2445, 13, 51267, 51267, 400, 370, 321, 1884, 257, 4471, 2445, 13, 51354, 51354, 400, 550, 321, 584, 11, 731, 11, 286, 767, 11, 286, 528, 281, 10432, 732, 1310, 4190, 13, 51602, 51602, 400, 550, 321, 584, 11, 1392, 11, 731, 11, 286, 914, 11, 577, 576, 286, 10432, 732, 1310, 4190, 30, 51788, 51788], "temperature": 0.0, "avg_logprob": -0.13375993208451706, "compression_ratio": 2.061135371179039, "no_caption_prob": 8.267807970696595e-06}, {"id": 425, "seek": 170966, "start": 1714.3000000000002, "end": 1715.9, "text": " And we're like, this is really inconvenient.", "tokens": [50364, 293, 321, 584, 11, 1389, 445, 11, 747, 300, 2158, 11, 286, 528, 281, 3079, 512, 2445, 281, 309, 13, 50596, 50596, 400, 321, 434, 411, 11, 341, 307, 534, 46196, 13, 50676, 50676, 26291, 380, 309, 312, 1481, 498, 286, 727, 445, 1320, 294, 264, 2445, 286, 1415, 281, 3079, 562, 286, 1415, 50895, 50895, 281, 1261, 341, 6798, 281, 11775, 2869, 651, 11, 286, 727, 445, 1320, 294, 257, 6798, 281, 6597, 2445, 13, 51267, 51267, 400, 370, 321, 1884, 257, 4471, 2445, 13, 51354, 51354, 400, 550, 321, 584, 11, 731, 11, 286, 767, 11, 286, 528, 281, 10432, 732, 1310, 4190, 13, 51602, 51602, 400, 550, 321, 584, 11, 1392, 11, 731, 11, 286, 914, 11, 577, 576, 286, 10432, 732, 1310, 4190, 30, 51788, 51788], "temperature": 0.0, "avg_logprob": -0.13375993208451706, "compression_ratio": 2.061135371179039, "no_caption_prob": 8.267807970696595e-06}, {"id": 426, "seek": 170966, "start": 1715.9, "end": 1720.28, "text": " Wouldn't it be nice if I could just pass in the function I wanted to apply when I wanted", "tokens": [50364, 293, 321, 584, 11, 1389, 445, 11, 747, 300, 2158, 11, 286, 528, 281, 3079, 512, 2445, 281, 309, 13, 50596, 50596, 400, 321, 434, 411, 11, 341, 307, 534, 46196, 13, 50676, 50676, 26291, 380, 309, 312, 1481, 498, 286, 727, 445, 1320, 294, 264, 2445, 286, 1415, 281, 3079, 562, 286, 1415, 50895, 50895, 281, 1261, 341, 6798, 281, 11775, 2869, 651, 11, 286, 727, 445, 1320, 294, 257, 6798, 281, 6597, 2445, 13, 51267, 51267, 400, 370, 321, 1884, 257, 4471, 2445, 13, 51354, 51354, 400, 550, 321, 584, 11, 731, 11, 286, 767, 11, 286, 528, 281, 10432, 732, 1310, 4190, 13, 51602, 51602, 400, 550, 321, 584, 11, 1392, 11, 731, 11, 286, 914, 11, 577, 576, 286, 10432, 732, 1310, 4190, 30, 51788, 51788], "temperature": 0.0, "avg_logprob": -0.13375993208451706, "compression_ratio": 2.061135371179039, "no_caption_prob": 8.267807970696595e-06}, {"id": 427, "seek": 170966, "start": 1720.28, "end": 1727.72, "text": " to turn this string to uppercase, I could just pass in a string to upper function.", "tokens": [50364, 293, 321, 584, 11, 1389, 445, 11, 747, 300, 2158, 11, 286, 528, 281, 3079, 512, 2445, 281, 309, 13, 50596, 50596, 400, 321, 434, 411, 11, 341, 307, 534, 46196, 13, 50676, 50676, 26291, 380, 309, 312, 1481, 498, 286, 727, 445, 1320, 294, 264, 2445, 286, 1415, 281, 3079, 562, 286, 1415, 50895, 50895, 281, 1261, 341, 6798, 281, 11775, 2869, 651, 11, 286, 727, 445, 1320, 294, 257, 6798, 281, 6597, 2445, 13, 51267, 51267, 400, 370, 321, 1884, 257, 4471, 2445, 13, 51354, 51354, 400, 550, 321, 584, 11, 731, 11, 286, 767, 11, 286, 528, 281, 10432, 732, 1310, 4190, 13, 51602, 51602, 400, 550, 321, 584, 11, 1392, 11, 731, 11, 286, 914, 11, 577, 576, 286, 10432, 732, 1310, 4190, 30, 51788, 51788], "temperature": 0.0, "avg_logprob": -0.13375993208451706, "compression_ratio": 2.061135371179039, "no_caption_prob": 8.267807970696595e-06}, {"id": 428, "seek": 170966, "start": 1727.72, "end": 1729.46, "text": " And so we create a map function.", "tokens": [50364, 293, 321, 584, 11, 1389, 445, 11, 747, 300, 2158, 11, 286, 528, 281, 3079, 512, 2445, 281, 309, 13, 50596, 50596, 400, 321, 434, 411, 11, 341, 307, 534, 46196, 13, 50676, 50676, 26291, 380, 309, 312, 1481, 498, 286, 727, 445, 1320, 294, 264, 2445, 286, 1415, 281, 3079, 562, 286, 1415, 50895, 50895, 281, 1261, 341, 6798, 281, 11775, 2869, 651, 11, 286, 727, 445, 1320, 294, 257, 6798, 281, 6597, 2445, 13, 51267, 51267, 400, 370, 321, 1884, 257, 4471, 2445, 13, 51354, 51354, 400, 550, 321, 584, 11, 731, 11, 286, 767, 11, 286, 528, 281, 10432, 732, 1310, 4190, 13, 51602, 51602, 400, 550, 321, 584, 11, 1392, 11, 731, 11, 286, 914, 11, 577, 576, 286, 10432, 732, 1310, 4190, 30, 51788, 51788], "temperature": 0.0, "avg_logprob": -0.13375993208451706, "compression_ratio": 2.061135371179039, "no_caption_prob": 8.267807970696595e-06}, {"id": 429, "seek": 170966, "start": 1729.46, "end": 1734.42, "text": " And then we say, well, I actually, I want to combine two maybe values.", "tokens": [50364, 293, 321, 584, 11, 1389, 445, 11, 747, 300, 2158, 11, 286, 528, 281, 3079, 512, 2445, 281, 309, 13, 50596, 50596, 400, 321, 434, 411, 11, 341, 307, 534, 46196, 13, 50676, 50676, 26291, 380, 309, 312, 1481, 498, 286, 727, 445, 1320, 294, 264, 2445, 286, 1415, 281, 3079, 562, 286, 1415, 50895, 50895, 281, 1261, 341, 6798, 281, 11775, 2869, 651, 11, 286, 727, 445, 1320, 294, 257, 6798, 281, 6597, 2445, 13, 51267, 51267, 400, 370, 321, 1884, 257, 4471, 2445, 13, 51354, 51354, 400, 550, 321, 584, 11, 731, 11, 286, 767, 11, 286, 528, 281, 10432, 732, 1310, 4190, 13, 51602, 51602, 400, 550, 321, 584, 11, 1392, 11, 731, 11, 286, 914, 11, 577, 576, 286, 10432, 732, 1310, 4190, 30, 51788, 51788], "temperature": 0.0, "avg_logprob": -0.13375993208451706, "compression_ratio": 2.061135371179039, "no_caption_prob": 8.267807970696595e-06}, {"id": 430, "seek": 170966, "start": 1734.42, "end": 1738.14, "text": " And then we say, okay, well, I mean, how would I combine two maybe values?", "tokens": [50364, 293, 321, 584, 11, 1389, 445, 11, 747, 300, 2158, 11, 286, 528, 281, 3079, 512, 2445, 281, 309, 13, 50596, 50596, 400, 321, 434, 411, 11, 341, 307, 534, 46196, 13, 50676, 50676, 26291, 380, 309, 312, 1481, 498, 286, 727, 445, 1320, 294, 264, 2445, 286, 1415, 281, 3079, 562, 286, 1415, 50895, 50895, 281, 1261, 341, 6798, 281, 11775, 2869, 651, 11, 286, 727, 445, 1320, 294, 257, 6798, 281, 6597, 2445, 13, 51267, 51267, 400, 370, 321, 1884, 257, 4471, 2445, 13, 51354, 51354, 400, 550, 321, 584, 11, 731, 11, 286, 767, 11, 286, 528, 281, 10432, 732, 1310, 4190, 13, 51602, 51602, 400, 550, 321, 584, 11, 1392, 11, 731, 11, 286, 914, 11, 577, 576, 286, 10432, 732, 1310, 4190, 30, 51788, 51788], "temperature": 0.0, "avg_logprob": -0.13375993208451706, "compression_ratio": 2.061135371179039, "no_caption_prob": 8.267807970696595e-06}, {"id": 431, "seek": 173814, "start": 1738.14, "end": 1743.66, "text": " Well, if either of them are nothing, then I can't combine it into a single maybe value.", "tokens": [50364, 1042, 11, 498, 2139, 295, 552, 366, 1825, 11, 550, 286, 393, 380, 10432, 309, 666, 257, 2167, 1310, 2158, 13, 50640, 50640, 407, 718, 311, 445, 11, 291, 458, 11, 1261, 309, 666, 1825, 498, 604, 295, 552, 366, 1825, 13, 50920, 50920, 400, 5911, 11, 321, 603, 1320, 294, 729, 732, 445, 4190, 300, 321, 362, 281, 264, 2445, 300, 2516, 51256, 51256, 732, 4190, 13, 51306, 51306, 26058, 11, 498, 291, 434, 1382, 281, 10432, 552, 365, 257, 732, 6770, 2445, 13, 51476, 51476, 1079, 13, 51526, 51526, 1436, 309, 311, 257, 732, 6770, 2445, 11, 291, 643, 1293, 4190, 281, 312, 1974, 13, 51716, 51716, 1079, 13, 51766, 51766], "temperature": 0.0, "avg_logprob": -0.1383555785469387, "compression_ratio": 1.7857142857142858, "no_caption_prob": 6.048876002751058e-06}, {"id": 432, "seek": 173814, "start": 1743.66, "end": 1749.26, "text": " So let's just, you know, turn it into nothing if any of them are nothing.", "tokens": [50364, 1042, 11, 498, 2139, 295, 552, 366, 1825, 11, 550, 286, 393, 380, 10432, 309, 666, 257, 2167, 1310, 2158, 13, 50640, 50640, 407, 718, 311, 445, 11, 291, 458, 11, 1261, 309, 666, 1825, 498, 604, 295, 552, 366, 1825, 13, 50920, 50920, 400, 5911, 11, 321, 603, 1320, 294, 729, 732, 445, 4190, 300, 321, 362, 281, 264, 2445, 300, 2516, 51256, 51256, 732, 4190, 13, 51306, 51306, 26058, 11, 498, 291, 434, 1382, 281, 10432, 552, 365, 257, 732, 6770, 2445, 13, 51476, 51476, 1079, 13, 51526, 51526, 1436, 309, 311, 257, 732, 6770, 2445, 11, 291, 643, 1293, 4190, 281, 312, 1974, 13, 51716, 51716, 1079, 13, 51766, 51766], "temperature": 0.0, "avg_logprob": -0.1383555785469387, "compression_ratio": 1.7857142857142858, "no_caption_prob": 6.048876002751058e-06}, {"id": 433, "seek": 173814, "start": 1749.26, "end": 1755.98, "text": " And otherwise, we'll pass in those two just values that we have to the function that takes", "tokens": [50364, 1042, 11, 498, 2139, 295, 552, 366, 1825, 11, 550, 286, 393, 380, 10432, 309, 666, 257, 2167, 1310, 2158, 13, 50640, 50640, 407, 718, 311, 445, 11, 291, 458, 11, 1261, 309, 666, 1825, 498, 604, 295, 552, 366, 1825, 13, 50920, 50920, 400, 5911, 11, 321, 603, 1320, 294, 729, 732, 445, 4190, 300, 321, 362, 281, 264, 2445, 300, 2516, 51256, 51256, 732, 4190, 13, 51306, 51306, 26058, 11, 498, 291, 434, 1382, 281, 10432, 552, 365, 257, 732, 6770, 2445, 13, 51476, 51476, 1079, 13, 51526, 51526, 1436, 309, 311, 257, 732, 6770, 2445, 11, 291, 643, 1293, 4190, 281, 312, 1974, 13, 51716, 51716, 1079, 13, 51766, 51766], "temperature": 0.0, "avg_logprob": -0.1383555785469387, "compression_ratio": 1.7857142857142858, "no_caption_prob": 6.048876002751058e-06}, {"id": 434, "seek": 173814, "start": 1755.98, "end": 1756.98, "text": " two values.", "tokens": [50364, 1042, 11, 498, 2139, 295, 552, 366, 1825, 11, 550, 286, 393, 380, 10432, 309, 666, 257, 2167, 1310, 2158, 13, 50640, 50640, 407, 718, 311, 445, 11, 291, 458, 11, 1261, 309, 666, 1825, 498, 604, 295, 552, 366, 1825, 13, 50920, 50920, 400, 5911, 11, 321, 603, 1320, 294, 729, 732, 445, 4190, 300, 321, 362, 281, 264, 2445, 300, 2516, 51256, 51256, 732, 4190, 13, 51306, 51306, 26058, 11, 498, 291, 434, 1382, 281, 10432, 552, 365, 257, 732, 6770, 2445, 13, 51476, 51476, 1079, 13, 51526, 51526, 1436, 309, 311, 257, 732, 6770, 2445, 11, 291, 643, 1293, 4190, 281, 312, 1974, 13, 51716, 51716, 1079, 13, 51766, 51766], "temperature": 0.0, "avg_logprob": -0.1383555785469387, "compression_ratio": 1.7857142857142858, "no_caption_prob": 6.048876002751058e-06}, {"id": 435, "seek": 173814, "start": 1756.98, "end": 1760.38, "text": " Specifically, if you're trying to combine them with a two argument function.", "tokens": [50364, 1042, 11, 498, 2139, 295, 552, 366, 1825, 11, 550, 286, 393, 380, 10432, 309, 666, 257, 2167, 1310, 2158, 13, 50640, 50640, 407, 718, 311, 445, 11, 291, 458, 11, 1261, 309, 666, 1825, 498, 604, 295, 552, 366, 1825, 13, 50920, 50920, 400, 5911, 11, 321, 603, 1320, 294, 729, 732, 445, 4190, 300, 321, 362, 281, 264, 2445, 300, 2516, 51256, 51256, 732, 4190, 13, 51306, 51306, 26058, 11, 498, 291, 434, 1382, 281, 10432, 552, 365, 257, 732, 6770, 2445, 13, 51476, 51476, 1079, 13, 51526, 51526, 1436, 309, 311, 257, 732, 6770, 2445, 11, 291, 643, 1293, 4190, 281, 312, 1974, 13, 51716, 51716, 1079, 13, 51766, 51766], "temperature": 0.0, "avg_logprob": -0.1383555785469387, "compression_ratio": 1.7857142857142858, "no_caption_prob": 6.048876002751058e-06}, {"id": 436, "seek": 173814, "start": 1760.38, "end": 1761.38, "text": " Yes.", "tokens": [50364, 1042, 11, 498, 2139, 295, 552, 366, 1825, 11, 550, 286, 393, 380, 10432, 309, 666, 257, 2167, 1310, 2158, 13, 50640, 50640, 407, 718, 311, 445, 11, 291, 458, 11, 1261, 309, 666, 1825, 498, 604, 295, 552, 366, 1825, 13, 50920, 50920, 400, 5911, 11, 321, 603, 1320, 294, 729, 732, 445, 4190, 300, 321, 362, 281, 264, 2445, 300, 2516, 51256, 51256, 732, 4190, 13, 51306, 51306, 26058, 11, 498, 291, 434, 1382, 281, 10432, 552, 365, 257, 732, 6770, 2445, 13, 51476, 51476, 1079, 13, 51526, 51526, 1436, 309, 311, 257, 732, 6770, 2445, 11, 291, 643, 1293, 4190, 281, 312, 1974, 13, 51716, 51716, 1079, 13, 51766, 51766], "temperature": 0.0, "avg_logprob": -0.1383555785469387, "compression_ratio": 1.7857142857142858, "no_caption_prob": 6.048876002751058e-06}, {"id": 437, "seek": 173814, "start": 1761.38, "end": 1765.18, "text": " Because it's a two argument function, you need both values to be present.", "tokens": [50364, 1042, 11, 498, 2139, 295, 552, 366, 1825, 11, 550, 286, 393, 380, 10432, 309, 666, 257, 2167, 1310, 2158, 13, 50640, 50640, 407, 718, 311, 445, 11, 291, 458, 11, 1261, 309, 666, 1825, 498, 604, 295, 552, 366, 1825, 13, 50920, 50920, 400, 5911, 11, 321, 603, 1320, 294, 729, 732, 445, 4190, 300, 321, 362, 281, 264, 2445, 300, 2516, 51256, 51256, 732, 4190, 13, 51306, 51306, 26058, 11, 498, 291, 434, 1382, 281, 10432, 552, 365, 257, 732, 6770, 2445, 13, 51476, 51476, 1079, 13, 51526, 51526, 1436, 309, 311, 257, 732, 6770, 2445, 11, 291, 643, 1293, 4190, 281, 312, 1974, 13, 51716, 51716, 1079, 13, 51766, 51766], "temperature": 0.0, "avg_logprob": -0.1383555785469387, "compression_ratio": 1.7857142857142858, "no_caption_prob": 6.048876002751058e-06}, {"id": 438, "seek": 173814, "start": 1765.18, "end": 1766.18, "text": " Yes.", "tokens": [50364, 1042, 11, 498, 2139, 295, 552, 366, 1825, 11, 550, 286, 393, 380, 10432, 309, 666, 257, 2167, 1310, 2158, 13, 50640, 50640, 407, 718, 311, 445, 11, 291, 458, 11, 1261, 309, 666, 1825, 498, 604, 295, 552, 366, 1825, 13, 50920, 50920, 400, 5911, 11, 321, 603, 1320, 294, 729, 732, 445, 4190, 300, 321, 362, 281, 264, 2445, 300, 2516, 51256, 51256, 732, 4190, 13, 51306, 51306, 26058, 11, 498, 291, 434, 1382, 281, 10432, 552, 365, 257, 732, 6770, 2445, 13, 51476, 51476, 1079, 13, 51526, 51526, 1436, 309, 311, 257, 732, 6770, 2445, 11, 291, 643, 1293, 4190, 281, 312, 1974, 13, 51716, 51716, 1079, 13, 51766, 51766], "temperature": 0.0, "avg_logprob": -0.1383555785469387, "compression_ratio": 1.7857142857142858, "no_caption_prob": 6.048876002751058e-06}, {"id": 439, "seek": 176618, "start": 1766.18, "end": 1769.38, "text": " So if they're present, apply the two argument function to the two values.", "tokens": [50364, 407, 498, 436, 434, 1974, 11, 3079, 264, 732, 6770, 2445, 281, 264, 732, 4190, 13, 50524, 50524, 10328, 445, 2736, 1825, 13, 50624, 50624, 286, 519, 428, 1168, 11, 508, 2032, 268, 11, 307, 534, 1880, 13, 50836, 50836, 759, 321, 574, 412, 437, 8646, 43723, 575, 1096, 11, 436, 600, 8614, 281, 406, 1315, 341, 2445, 4471, 17, 11, 4471, 18, 11, 51182, 51182, 4471, 19, 13, 51232, 51232, 814, 600, 1219, 309, 5533, 32, 17, 11, 5533, 32, 18, 11, 5533, 32, 19, 13, 51494, 51494, 400, 436, 600, 1333, 295, 2780, 365, 341, 661, 19157, 300, 286, 2825, 466, 11, 341, 1558, 295, 15798, 13, 51778, 51778], "temperature": 0.0, "avg_logprob": -0.21788813160584036, "compression_ratio": 1.6208333333333333, "no_caption_prob": 1.028941278491402e-05}, {"id": 440, "seek": 176618, "start": 1769.38, "end": 1771.38, "text": " Otherwise just return nothing.", "tokens": [50364, 407, 498, 436, 434, 1974, 11, 3079, 264, 732, 6770, 2445, 281, 264, 732, 4190, 13, 50524, 50524, 10328, 445, 2736, 1825, 13, 50624, 50624, 286, 519, 428, 1168, 11, 508, 2032, 268, 11, 307, 534, 1880, 13, 50836, 50836, 759, 321, 574, 412, 437, 8646, 43723, 575, 1096, 11, 436, 600, 8614, 281, 406, 1315, 341, 2445, 4471, 17, 11, 4471, 18, 11, 51182, 51182, 4471, 19, 13, 51232, 51232, 814, 600, 1219, 309, 5533, 32, 17, 11, 5533, 32, 18, 11, 5533, 32, 19, 13, 51494, 51494, 400, 436, 600, 1333, 295, 2780, 365, 341, 661, 19157, 300, 286, 2825, 466, 11, 341, 1558, 295, 15798, 13, 51778, 51778], "temperature": 0.0, "avg_logprob": -0.21788813160584036, "compression_ratio": 1.6208333333333333, "no_caption_prob": 1.028941278491402e-05}, {"id": 441, "seek": 176618, "start": 1771.38, "end": 1775.6200000000001, "text": " I think your question, Jeroen, is really interesting.", "tokens": [50364, 407, 498, 436, 434, 1974, 11, 3079, 264, 732, 6770, 2445, 281, 264, 732, 4190, 13, 50524, 50524, 10328, 445, 2736, 1825, 13, 50624, 50624, 286, 519, 428, 1168, 11, 508, 2032, 268, 11, 307, 534, 1880, 13, 50836, 50836, 759, 321, 574, 412, 437, 8646, 43723, 575, 1096, 11, 436, 600, 8614, 281, 406, 1315, 341, 2445, 4471, 17, 11, 4471, 18, 11, 51182, 51182, 4471, 19, 13, 51232, 51232, 814, 600, 1219, 309, 5533, 32, 17, 11, 5533, 32, 18, 11, 5533, 32, 19, 13, 51494, 51494, 400, 436, 600, 1333, 295, 2780, 365, 341, 661, 19157, 300, 286, 2825, 466, 11, 341, 1558, 295, 15798, 13, 51778, 51778], "temperature": 0.0, "avg_logprob": -0.21788813160584036, "compression_ratio": 1.6208333333333333, "no_caption_prob": 1.028941278491402e-05}, {"id": 442, "seek": 176618, "start": 1775.6200000000001, "end": 1782.54, "text": " If we look at what Haskell has done, they've chosen to not name this function map2, map3,", "tokens": [50364, 407, 498, 436, 434, 1974, 11, 3079, 264, 732, 6770, 2445, 281, 264, 732, 4190, 13, 50524, 50524, 10328, 445, 2736, 1825, 13, 50624, 50624, 286, 519, 428, 1168, 11, 508, 2032, 268, 11, 307, 534, 1880, 13, 50836, 50836, 759, 321, 574, 412, 437, 8646, 43723, 575, 1096, 11, 436, 600, 8614, 281, 406, 1315, 341, 2445, 4471, 17, 11, 4471, 18, 11, 51182, 51182, 4471, 19, 13, 51232, 51232, 814, 600, 1219, 309, 5533, 32, 17, 11, 5533, 32, 18, 11, 5533, 32, 19, 13, 51494, 51494, 400, 436, 600, 1333, 295, 2780, 365, 341, 661, 19157, 300, 286, 2825, 466, 11, 341, 1558, 295, 15798, 13, 51778, 51778], "temperature": 0.0, "avg_logprob": -0.21788813160584036, "compression_ratio": 1.6208333333333333, "no_caption_prob": 1.028941278491402e-05}, {"id": 443, "seek": 176618, "start": 1782.54, "end": 1783.54, "text": " map4.", "tokens": [50364, 407, 498, 436, 434, 1974, 11, 3079, 264, 732, 6770, 2445, 281, 264, 732, 4190, 13, 50524, 50524, 10328, 445, 2736, 1825, 13, 50624, 50624, 286, 519, 428, 1168, 11, 508, 2032, 268, 11, 307, 534, 1880, 13, 50836, 50836, 759, 321, 574, 412, 437, 8646, 43723, 575, 1096, 11, 436, 600, 8614, 281, 406, 1315, 341, 2445, 4471, 17, 11, 4471, 18, 11, 51182, 51182, 4471, 19, 13, 51232, 51232, 814, 600, 1219, 309, 5533, 32, 17, 11, 5533, 32, 18, 11, 5533, 32, 19, 13, 51494, 51494, 400, 436, 600, 1333, 295, 2780, 365, 341, 661, 19157, 300, 286, 2825, 466, 11, 341, 1558, 295, 15798, 13, 51778, 51778], "temperature": 0.0, "avg_logprob": -0.21788813160584036, "compression_ratio": 1.6208333333333333, "no_caption_prob": 1.028941278491402e-05}, {"id": 444, "seek": 176618, "start": 1783.54, "end": 1788.78, "text": " They've called it liftA2, liftA3, liftA4.", "tokens": [50364, 407, 498, 436, 434, 1974, 11, 3079, 264, 732, 6770, 2445, 281, 264, 732, 4190, 13, 50524, 50524, 10328, 445, 2736, 1825, 13, 50624, 50624, 286, 519, 428, 1168, 11, 508, 2032, 268, 11, 307, 534, 1880, 13, 50836, 50836, 759, 321, 574, 412, 437, 8646, 43723, 575, 1096, 11, 436, 600, 8614, 281, 406, 1315, 341, 2445, 4471, 17, 11, 4471, 18, 11, 51182, 51182, 4471, 19, 13, 51232, 51232, 814, 600, 1219, 309, 5533, 32, 17, 11, 5533, 32, 18, 11, 5533, 32, 19, 13, 51494, 51494, 400, 436, 600, 1333, 295, 2780, 365, 341, 661, 19157, 300, 286, 2825, 466, 11, 341, 1558, 295, 15798, 13, 51778, 51778], "temperature": 0.0, "avg_logprob": -0.21788813160584036, "compression_ratio": 1.6208333333333333, "no_caption_prob": 1.028941278491402e-05}, {"id": 445, "seek": 176618, "start": 1788.78, "end": 1794.46, "text": " And they've sort of gone with this other metaphor that I talked about, this idea of lifting.", "tokens": [50364, 407, 498, 436, 434, 1974, 11, 3079, 264, 732, 6770, 2445, 281, 264, 732, 4190, 13, 50524, 50524, 10328, 445, 2736, 1825, 13, 50624, 50624, 286, 519, 428, 1168, 11, 508, 2032, 268, 11, 307, 534, 1880, 13, 50836, 50836, 759, 321, 574, 412, 437, 8646, 43723, 575, 1096, 11, 436, 600, 8614, 281, 406, 1315, 341, 2445, 4471, 17, 11, 4471, 18, 11, 51182, 51182, 4471, 19, 13, 51232, 51232, 814, 600, 1219, 309, 5533, 32, 17, 11, 5533, 32, 18, 11, 5533, 32, 19, 13, 51494, 51494, 400, 436, 600, 1333, 295, 2780, 365, 341, 661, 19157, 300, 286, 2825, 466, 11, 341, 1558, 295, 15798, 13, 51778, 51778], "temperature": 0.0, "avg_logprob": -0.21788813160584036, "compression_ratio": 1.6208333333333333, "no_caption_prob": 1.028941278491402e-05}, {"id": 446, "seek": 179446, "start": 1794.46, "end": 1801.3400000000001, "text": " You could think of it as translating functions into the world of some other type.", "tokens": [50364, 509, 727, 519, 295, 309, 382, 35030, 6828, 666, 264, 1002, 295, 512, 661, 2010, 13, 50708, 50708, 407, 291, 727, 4088, 264, 909, 2445, 281, 472, 300, 1985, 322, 41674, 281, 472, 300, 1985, 51028, 51028, 322, 1310, 41674, 13, 51130, 51130, 407, 5533, 32, 17, 576, 312, 4471, 17, 13, 51244, 51244, 12753, 13, 51294, 51294, 1033, 13, 51344, 51344, 1119, 456, 257, 5533, 33, 17, 30, 51394, 51394, 407, 5533, 32, 11, 264, 316, 510, 7382, 337, 2580, 1166, 11, 597, 307, 257, 1433, 286, 519, 300, 321, 600, 1333, 295, 51732, 51732], "temperature": 0.0, "avg_logprob": -0.1264997501762546, "compression_ratio": 1.6341463414634145, "no_caption_prob": 5.6823832892405335e-06}, {"id": 447, "seek": 179446, "start": 1801.3400000000001, "end": 1807.74, "text": " So you could transform the add function to one that works on integers to one that works", "tokens": [50364, 509, 727, 519, 295, 309, 382, 35030, 6828, 666, 264, 1002, 295, 512, 661, 2010, 13, 50708, 50708, 407, 291, 727, 4088, 264, 909, 2445, 281, 472, 300, 1985, 322, 41674, 281, 472, 300, 1985, 51028, 51028, 322, 1310, 41674, 13, 51130, 51130, 407, 5533, 32, 17, 576, 312, 4471, 17, 13, 51244, 51244, 12753, 13, 51294, 51294, 1033, 13, 51344, 51344, 1119, 456, 257, 5533, 33, 17, 30, 51394, 51394, 407, 5533, 32, 11, 264, 316, 510, 7382, 337, 2580, 1166, 11, 597, 307, 257, 1433, 286, 519, 300, 321, 600, 1333, 295, 51732, 51732], "temperature": 0.0, "avg_logprob": -0.1264997501762546, "compression_ratio": 1.6341463414634145, "no_caption_prob": 5.6823832892405335e-06}, {"id": 448, "seek": 179446, "start": 1807.74, "end": 1809.78, "text": " on maybe integers.", "tokens": [50364, 509, 727, 519, 295, 309, 382, 35030, 6828, 666, 264, 1002, 295, 512, 661, 2010, 13, 50708, 50708, 407, 291, 727, 4088, 264, 909, 2445, 281, 472, 300, 1985, 322, 41674, 281, 472, 300, 1985, 51028, 51028, 322, 1310, 41674, 13, 51130, 51130, 407, 5533, 32, 17, 576, 312, 4471, 17, 13, 51244, 51244, 12753, 13, 51294, 51294, 1033, 13, 51344, 51344, 1119, 456, 257, 5533, 33, 17, 30, 51394, 51394, 407, 5533, 32, 11, 264, 316, 510, 7382, 337, 2580, 1166, 11, 597, 307, 257, 1433, 286, 519, 300, 321, 600, 1333, 295, 51732, 51732], "temperature": 0.0, "avg_logprob": -0.1264997501762546, "compression_ratio": 1.6341463414634145, "no_caption_prob": 5.6823832892405335e-06}, {"id": 449, "seek": 179446, "start": 1809.78, "end": 1812.06, "text": " So liftA2 would be map2.", "tokens": [50364, 509, 727, 519, 295, 309, 382, 35030, 6828, 666, 264, 1002, 295, 512, 661, 2010, 13, 50708, 50708, 407, 291, 727, 4088, 264, 909, 2445, 281, 472, 300, 1985, 322, 41674, 281, 472, 300, 1985, 51028, 51028, 322, 1310, 41674, 13, 51130, 51130, 407, 5533, 32, 17, 576, 312, 4471, 17, 13, 51244, 51244, 12753, 13, 51294, 51294, 1033, 13, 51344, 51344, 1119, 456, 257, 5533, 33, 17, 30, 51394, 51394, 407, 5533, 32, 11, 264, 316, 510, 7382, 337, 2580, 1166, 11, 597, 307, 257, 1433, 286, 519, 300, 321, 600, 1333, 295, 51732, 51732], "temperature": 0.0, "avg_logprob": -0.1264997501762546, "compression_ratio": 1.6341463414634145, "no_caption_prob": 5.6823832892405335e-06}, {"id": 450, "seek": 179446, "start": 1812.06, "end": 1813.06, "text": " Correct.", "tokens": [50364, 509, 727, 519, 295, 309, 382, 35030, 6828, 666, 264, 1002, 295, 512, 661, 2010, 13, 50708, 50708, 407, 291, 727, 4088, 264, 909, 2445, 281, 472, 300, 1985, 322, 41674, 281, 472, 300, 1985, 51028, 51028, 322, 1310, 41674, 13, 51130, 51130, 407, 5533, 32, 17, 576, 312, 4471, 17, 13, 51244, 51244, 12753, 13, 51294, 51294, 1033, 13, 51344, 51344, 1119, 456, 257, 5533, 33, 17, 30, 51394, 51394, 407, 5533, 32, 11, 264, 316, 510, 7382, 337, 2580, 1166, 11, 597, 307, 257, 1433, 286, 519, 300, 321, 600, 1333, 295, 51732, 51732], "temperature": 0.0, "avg_logprob": -0.1264997501762546, "compression_ratio": 1.6341463414634145, "no_caption_prob": 5.6823832892405335e-06}, {"id": 451, "seek": 179446, "start": 1813.06, "end": 1814.06, "text": " Okay.", "tokens": [50364, 509, 727, 519, 295, 309, 382, 35030, 6828, 666, 264, 1002, 295, 512, 661, 2010, 13, 50708, 50708, 407, 291, 727, 4088, 264, 909, 2445, 281, 472, 300, 1985, 322, 41674, 281, 472, 300, 1985, 51028, 51028, 322, 1310, 41674, 13, 51130, 51130, 407, 5533, 32, 17, 576, 312, 4471, 17, 13, 51244, 51244, 12753, 13, 51294, 51294, 1033, 13, 51344, 51344, 1119, 456, 257, 5533, 33, 17, 30, 51394, 51394, 407, 5533, 32, 11, 264, 316, 510, 7382, 337, 2580, 1166, 11, 597, 307, 257, 1433, 286, 519, 300, 321, 600, 1333, 295, 51732, 51732], "temperature": 0.0, "avg_logprob": -0.1264997501762546, "compression_ratio": 1.6341463414634145, "no_caption_prob": 5.6823832892405335e-06}, {"id": 452, "seek": 179446, "start": 1814.06, "end": 1815.06, "text": " Is there a liftB2?", "tokens": [50364, 509, 727, 519, 295, 309, 382, 35030, 6828, 666, 264, 1002, 295, 512, 661, 2010, 13, 50708, 50708, 407, 291, 727, 4088, 264, 909, 2445, 281, 472, 300, 1985, 322, 41674, 281, 472, 300, 1985, 51028, 51028, 322, 1310, 41674, 13, 51130, 51130, 407, 5533, 32, 17, 576, 312, 4471, 17, 13, 51244, 51244, 12753, 13, 51294, 51294, 1033, 13, 51344, 51344, 1119, 456, 257, 5533, 33, 17, 30, 51394, 51394, 407, 5533, 32, 11, 264, 316, 510, 7382, 337, 2580, 1166, 11, 597, 307, 257, 1433, 286, 519, 300, 321, 600, 1333, 295, 51732, 51732], "temperature": 0.0, "avg_logprob": -0.1264997501762546, "compression_ratio": 1.6341463414634145, "no_caption_prob": 5.6823832892405335e-06}, {"id": 453, "seek": 179446, "start": 1815.06, "end": 1821.82, "text": " So liftA, the A here stands for applicative, which is a term I think that we've sort of", "tokens": [50364, 509, 727, 519, 295, 309, 382, 35030, 6828, 666, 264, 1002, 295, 512, 661, 2010, 13, 50708, 50708, 407, 291, 727, 4088, 264, 909, 2445, 281, 472, 300, 1985, 322, 41674, 281, 472, 300, 1985, 51028, 51028, 322, 1310, 41674, 13, 51130, 51130, 407, 5533, 32, 17, 576, 312, 4471, 17, 13, 51244, 51244, 12753, 13, 51294, 51294, 1033, 13, 51344, 51344, 1119, 456, 257, 5533, 33, 17, 30, 51394, 51394, 407, 5533, 32, 11, 264, 316, 510, 7382, 337, 2580, 1166, 11, 597, 307, 257, 1433, 286, 519, 300, 321, 600, 1333, 295, 51732, 51732], "temperature": 0.0, "avg_logprob": -0.1264997501762546, "compression_ratio": 1.6341463414634145, "no_caption_prob": 5.6823832892405335e-06}, {"id": 454, "seek": 182182, "start": 1821.82, "end": 1825.02, "text": " been dancing around a little bit.", "tokens": [50364, 668, 8898, 926, 257, 707, 857, 13, 50524, 50524, 467, 311, 1333, 295, 264, 10247, 11745, 1433, 11, 457, 321, 2378, 380, 534, 5768, 666, 309, 293, 7642, 50748, 50748, 309, 13, 50798, 50798, 1057, 558, 13, 50848, 50848, 961, 311, 360, 309, 13, 50898, 50898, 2704, 321, 820, 360, 300, 13, 50948, 50948, 1711, 1080, 4965, 11, 534, 11, 437, 291, 643, 337, 746, 281, 312, 4888, 2580, 1166, 307, 291, 643, 512, 51194, 51194, 733, 295, 47479, 13, 51264, 51264, 400, 550, 291, 643, 472, 295, 732, 721, 13, 51368, 51368, 509, 2139, 643, 4471, 17, 420, 291, 643, 437, 294, 2699, 76, 321, 2049, 818, 293, 44, 569, 11, 597, 307, 1333, 295, 257, 15517, 712, 51718, 51718, 3037, 295, 4471, 17, 13, 51823, 51823], "temperature": 0.0, "avg_logprob": -0.09955474413358248, "compression_ratio": 1.6383763837638377, "no_caption_prob": 5.01466820423957e-06}, {"id": 455, "seek": 182182, "start": 1825.02, "end": 1829.5, "text": " It's sort of the fancy functional term, but we haven't really gotten into it and defined", "tokens": [50364, 668, 8898, 926, 257, 707, 857, 13, 50524, 50524, 467, 311, 1333, 295, 264, 10247, 11745, 1433, 11, 457, 321, 2378, 380, 534, 5768, 666, 309, 293, 7642, 50748, 50748, 309, 13, 50798, 50798, 1057, 558, 13, 50848, 50848, 961, 311, 360, 309, 13, 50898, 50898, 2704, 321, 820, 360, 300, 13, 50948, 50948, 1711, 1080, 4965, 11, 534, 11, 437, 291, 643, 337, 746, 281, 312, 4888, 2580, 1166, 307, 291, 643, 512, 51194, 51194, 733, 295, 47479, 13, 51264, 51264, 400, 550, 291, 643, 472, 295, 732, 721, 13, 51368, 51368, 509, 2139, 643, 4471, 17, 420, 291, 643, 437, 294, 2699, 76, 321, 2049, 818, 293, 44, 569, 11, 597, 307, 1333, 295, 257, 15517, 712, 51718, 51718, 3037, 295, 4471, 17, 13, 51823, 51823], "temperature": 0.0, "avg_logprob": -0.09955474413358248, "compression_ratio": 1.6383763837638377, "no_caption_prob": 5.01466820423957e-06}, {"id": 456, "seek": 182182, "start": 1829.5, "end": 1830.5, "text": " it.", "tokens": [50364, 668, 8898, 926, 257, 707, 857, 13, 50524, 50524, 467, 311, 1333, 295, 264, 10247, 11745, 1433, 11, 457, 321, 2378, 380, 534, 5768, 666, 309, 293, 7642, 50748, 50748, 309, 13, 50798, 50798, 1057, 558, 13, 50848, 50848, 961, 311, 360, 309, 13, 50898, 50898, 2704, 321, 820, 360, 300, 13, 50948, 50948, 1711, 1080, 4965, 11, 534, 11, 437, 291, 643, 337, 746, 281, 312, 4888, 2580, 1166, 307, 291, 643, 512, 51194, 51194, 733, 295, 47479, 13, 51264, 51264, 400, 550, 291, 643, 472, 295, 732, 721, 13, 51368, 51368, 509, 2139, 643, 4471, 17, 420, 291, 643, 437, 294, 2699, 76, 321, 2049, 818, 293, 44, 569, 11, 597, 307, 1333, 295, 257, 15517, 712, 51718, 51718, 3037, 295, 4471, 17, 13, 51823, 51823], "temperature": 0.0, "avg_logprob": -0.09955474413358248, "compression_ratio": 1.6383763837638377, "no_caption_prob": 5.01466820423957e-06}, {"id": 457, "seek": 182182, "start": 1830.5, "end": 1831.5, "text": " All right.", "tokens": [50364, 668, 8898, 926, 257, 707, 857, 13, 50524, 50524, 467, 311, 1333, 295, 264, 10247, 11745, 1433, 11, 457, 321, 2378, 380, 534, 5768, 666, 309, 293, 7642, 50748, 50748, 309, 13, 50798, 50798, 1057, 558, 13, 50848, 50848, 961, 311, 360, 309, 13, 50898, 50898, 2704, 321, 820, 360, 300, 13, 50948, 50948, 1711, 1080, 4965, 11, 534, 11, 437, 291, 643, 337, 746, 281, 312, 4888, 2580, 1166, 307, 291, 643, 512, 51194, 51194, 733, 295, 47479, 13, 51264, 51264, 400, 550, 291, 643, 472, 295, 732, 721, 13, 51368, 51368, 509, 2139, 643, 4471, 17, 420, 291, 643, 437, 294, 2699, 76, 321, 2049, 818, 293, 44, 569, 11, 597, 307, 1333, 295, 257, 15517, 712, 51718, 51718, 3037, 295, 4471, 17, 13, 51823, 51823], "temperature": 0.0, "avg_logprob": -0.09955474413358248, "compression_ratio": 1.6383763837638377, "no_caption_prob": 5.01466820423957e-06}, {"id": 458, "seek": 182182, "start": 1831.5, "end": 1832.5, "text": " Let's do it.", "tokens": [50364, 668, 8898, 926, 257, 707, 857, 13, 50524, 50524, 467, 311, 1333, 295, 264, 10247, 11745, 1433, 11, 457, 321, 2378, 380, 534, 5768, 666, 309, 293, 7642, 50748, 50748, 309, 13, 50798, 50798, 1057, 558, 13, 50848, 50848, 961, 311, 360, 309, 13, 50898, 50898, 2704, 321, 820, 360, 300, 13, 50948, 50948, 1711, 1080, 4965, 11, 534, 11, 437, 291, 643, 337, 746, 281, 312, 4888, 2580, 1166, 307, 291, 643, 512, 51194, 51194, 733, 295, 47479, 13, 51264, 51264, 400, 550, 291, 643, 472, 295, 732, 721, 13, 51368, 51368, 509, 2139, 643, 4471, 17, 420, 291, 643, 437, 294, 2699, 76, 321, 2049, 818, 293, 44, 569, 11, 597, 307, 1333, 295, 257, 15517, 712, 51718, 51718, 3037, 295, 4471, 17, 13, 51823, 51823], "temperature": 0.0, "avg_logprob": -0.09955474413358248, "compression_ratio": 1.6383763837638377, "no_caption_prob": 5.01466820423957e-06}, {"id": 459, "seek": 182182, "start": 1832.5, "end": 1833.5, "text": " Maybe we should do that.", "tokens": [50364, 668, 8898, 926, 257, 707, 857, 13, 50524, 50524, 467, 311, 1333, 295, 264, 10247, 11745, 1433, 11, 457, 321, 2378, 380, 534, 5768, 666, 309, 293, 7642, 50748, 50748, 309, 13, 50798, 50798, 1057, 558, 13, 50848, 50848, 961, 311, 360, 309, 13, 50898, 50898, 2704, 321, 820, 360, 300, 13, 50948, 50948, 1711, 1080, 4965, 11, 534, 11, 437, 291, 643, 337, 746, 281, 312, 4888, 2580, 1166, 307, 291, 643, 512, 51194, 51194, 733, 295, 47479, 13, 51264, 51264, 400, 550, 291, 643, 472, 295, 732, 721, 13, 51368, 51368, 509, 2139, 643, 4471, 17, 420, 291, 643, 437, 294, 2699, 76, 321, 2049, 818, 293, 44, 569, 11, 597, 307, 1333, 295, 257, 15517, 712, 51718, 51718, 3037, 295, 4471, 17, 13, 51823, 51823], "temperature": 0.0, "avg_logprob": -0.09955474413358248, "compression_ratio": 1.6383763837638377, "no_caption_prob": 5.01466820423957e-06}, {"id": 460, "seek": 182182, "start": 1833.5, "end": 1838.4199999999998, "text": " At its core, really, what you need for something to be considered applicative is you need some", "tokens": [50364, 668, 8898, 926, 257, 707, 857, 13, 50524, 50524, 467, 311, 1333, 295, 264, 10247, 11745, 1433, 11, 457, 321, 2378, 380, 534, 5768, 666, 309, 293, 7642, 50748, 50748, 309, 13, 50798, 50798, 1057, 558, 13, 50848, 50848, 961, 311, 360, 309, 13, 50898, 50898, 2704, 321, 820, 360, 300, 13, 50948, 50948, 1711, 1080, 4965, 11, 534, 11, 437, 291, 643, 337, 746, 281, 312, 4888, 2580, 1166, 307, 291, 643, 512, 51194, 51194, 733, 295, 47479, 13, 51264, 51264, 400, 550, 291, 643, 472, 295, 732, 721, 13, 51368, 51368, 509, 2139, 643, 4471, 17, 420, 291, 643, 437, 294, 2699, 76, 321, 2049, 818, 293, 44, 569, 11, 597, 307, 1333, 295, 257, 15517, 712, 51718, 51718, 3037, 295, 4471, 17, 13, 51823, 51823], "temperature": 0.0, "avg_logprob": -0.09955474413358248, "compression_ratio": 1.6383763837638377, "no_caption_prob": 5.01466820423957e-06}, {"id": 461, "seek": 182182, "start": 1838.4199999999998, "end": 1839.82, "text": " kind of constructor.", "tokens": [50364, 668, 8898, 926, 257, 707, 857, 13, 50524, 50524, 467, 311, 1333, 295, 264, 10247, 11745, 1433, 11, 457, 321, 2378, 380, 534, 5768, 666, 309, 293, 7642, 50748, 50748, 309, 13, 50798, 50798, 1057, 558, 13, 50848, 50848, 961, 311, 360, 309, 13, 50898, 50898, 2704, 321, 820, 360, 300, 13, 50948, 50948, 1711, 1080, 4965, 11, 534, 11, 437, 291, 643, 337, 746, 281, 312, 4888, 2580, 1166, 307, 291, 643, 512, 51194, 51194, 733, 295, 47479, 13, 51264, 51264, 400, 550, 291, 643, 472, 295, 732, 721, 13, 51368, 51368, 509, 2139, 643, 4471, 17, 420, 291, 643, 437, 294, 2699, 76, 321, 2049, 818, 293, 44, 569, 11, 597, 307, 1333, 295, 257, 15517, 712, 51718, 51718, 3037, 295, 4471, 17, 13, 51823, 51823], "temperature": 0.0, "avg_logprob": -0.09955474413358248, "compression_ratio": 1.6383763837638377, "no_caption_prob": 5.01466820423957e-06}, {"id": 462, "seek": 182182, "start": 1839.82, "end": 1841.8999999999999, "text": " And then you need one of two things.", "tokens": [50364, 668, 8898, 926, 257, 707, 857, 13, 50524, 50524, 467, 311, 1333, 295, 264, 10247, 11745, 1433, 11, 457, 321, 2378, 380, 534, 5768, 666, 309, 293, 7642, 50748, 50748, 309, 13, 50798, 50798, 1057, 558, 13, 50848, 50848, 961, 311, 360, 309, 13, 50898, 50898, 2704, 321, 820, 360, 300, 13, 50948, 50948, 1711, 1080, 4965, 11, 534, 11, 437, 291, 643, 337, 746, 281, 312, 4888, 2580, 1166, 307, 291, 643, 512, 51194, 51194, 733, 295, 47479, 13, 51264, 51264, 400, 550, 291, 643, 472, 295, 732, 721, 13, 51368, 51368, 509, 2139, 643, 4471, 17, 420, 291, 643, 437, 294, 2699, 76, 321, 2049, 818, 293, 44, 569, 11, 597, 307, 1333, 295, 257, 15517, 712, 51718, 51718, 3037, 295, 4471, 17, 13, 51823, 51823], "temperature": 0.0, "avg_logprob": -0.09955474413358248, "compression_ratio": 1.6383763837638377, "no_caption_prob": 5.01466820423957e-06}, {"id": 463, "seek": 182182, "start": 1841.8999999999999, "end": 1848.8999999999999, "text": " You either need map2 or you need what in Elm we often call andMap, which is sort of a pipelineable", "tokens": [50364, 668, 8898, 926, 257, 707, 857, 13, 50524, 50524, 467, 311, 1333, 295, 264, 10247, 11745, 1433, 11, 457, 321, 2378, 380, 534, 5768, 666, 309, 293, 7642, 50748, 50748, 309, 13, 50798, 50798, 1057, 558, 13, 50848, 50848, 961, 311, 360, 309, 13, 50898, 50898, 2704, 321, 820, 360, 300, 13, 50948, 50948, 1711, 1080, 4965, 11, 534, 11, 437, 291, 643, 337, 746, 281, 312, 4888, 2580, 1166, 307, 291, 643, 512, 51194, 51194, 733, 295, 47479, 13, 51264, 51264, 400, 550, 291, 643, 472, 295, 732, 721, 13, 51368, 51368, 509, 2139, 643, 4471, 17, 420, 291, 643, 437, 294, 2699, 76, 321, 2049, 818, 293, 44, 569, 11, 597, 307, 1333, 295, 257, 15517, 712, 51718, 51718, 3037, 295, 4471, 17, 13, 51823, 51823], "temperature": 0.0, "avg_logprob": -0.09955474413358248, "compression_ratio": 1.6383763837638377, "no_caption_prob": 5.01466820423957e-06}, {"id": 464, "seek": 182182, "start": 1848.8999999999999, "end": 1851.0, "text": " version of map2.", "tokens": [50364, 668, 8898, 926, 257, 707, 857, 13, 50524, 50524, 467, 311, 1333, 295, 264, 10247, 11745, 1433, 11, 457, 321, 2378, 380, 534, 5768, 666, 309, 293, 7642, 50748, 50748, 309, 13, 50798, 50798, 1057, 558, 13, 50848, 50848, 961, 311, 360, 309, 13, 50898, 50898, 2704, 321, 820, 360, 300, 13, 50948, 50948, 1711, 1080, 4965, 11, 534, 11, 437, 291, 643, 337, 746, 281, 312, 4888, 2580, 1166, 307, 291, 643, 512, 51194, 51194, 733, 295, 47479, 13, 51264, 51264, 400, 550, 291, 643, 472, 295, 732, 721, 13, 51368, 51368, 509, 2139, 643, 4471, 17, 420, 291, 643, 437, 294, 2699, 76, 321, 2049, 818, 293, 44, 569, 11, 597, 307, 1333, 295, 257, 15517, 712, 51718, 51718, 3037, 295, 4471, 17, 13, 51823, 51823], "temperature": 0.0, "avg_logprob": -0.09955474413358248, "compression_ratio": 1.6383763837638377, "no_caption_prob": 5.01466820423957e-06}, {"id": 465, "seek": 185100, "start": 1851.0, "end": 1852.0, "text": " And then?", "tokens": [50364, 400, 550, 30, 50414, 50414, 400, 44, 569, 13, 50464, 50464, 467, 1177, 380, 5374, 294, 264, 4965, 15148, 13, 50587, 50587, 663, 576, 312, 2531, 281, 264, 31828, 979, 1429, 15517, 4739, 2445, 11, 558, 30, 50879, 50879, 1079, 13, 50929, 50929, 1079, 13, 50979, 50979, 407, 264, 31828, 979, 1429, 15517, 4739, 2445, 307, 257, 6562, 295, 437, 291, 1062, 818, 293, 44, 569, 51205, 51205, 293, 550, 611, 8293, 291, 281, 5452, 294, 264, 2519, 1315, 337, 19283, 13, 51483, 51483, 407, 2212, 2139, 295, 729, 11, 291, 393, 6786, 257, 2010, 382, 885, 2580, 1166, 13, 51745, 51745], "temperature": 0.0, "avg_logprob": -0.14833782269404486, "compression_ratio": 1.6462882096069869, "no_caption_prob": 2.295913418493001e-06}, {"id": 466, "seek": 185100, "start": 1852.0, "end": 1853.0, "text": " AndMap.", "tokens": [50364, 400, 550, 30, 50414, 50414, 400, 44, 569, 13, 50464, 50464, 467, 1177, 380, 5374, 294, 264, 4965, 15148, 13, 50587, 50587, 663, 576, 312, 2531, 281, 264, 31828, 979, 1429, 15517, 4739, 2445, 11, 558, 30, 50879, 50879, 1079, 13, 50929, 50929, 1079, 13, 50979, 50979, 407, 264, 31828, 979, 1429, 15517, 4739, 2445, 307, 257, 6562, 295, 437, 291, 1062, 818, 293, 44, 569, 51205, 51205, 293, 550, 611, 8293, 291, 281, 5452, 294, 264, 2519, 1315, 337, 19283, 13, 51483, 51483, 407, 2212, 2139, 295, 729, 11, 291, 393, 6786, 257, 2010, 382, 885, 2580, 1166, 13, 51745, 51745], "temperature": 0.0, "avg_logprob": -0.14833782269404486, "compression_ratio": 1.6462882096069869, "no_caption_prob": 2.295913418493001e-06}, {"id": 467, "seek": 185100, "start": 1853.0, "end": 1855.46, "text": " It doesn't ship in the core libraries.", "tokens": [50364, 400, 550, 30, 50414, 50414, 400, 44, 569, 13, 50464, 50464, 467, 1177, 380, 5374, 294, 264, 4965, 15148, 13, 50587, 50587, 663, 576, 312, 2531, 281, 264, 31828, 979, 1429, 15517, 4739, 2445, 11, 558, 30, 50879, 50879, 1079, 13, 50929, 50929, 1079, 13, 50979, 50979, 407, 264, 31828, 979, 1429, 15517, 4739, 2445, 307, 257, 6562, 295, 437, 291, 1062, 818, 293, 44, 569, 51205, 51205, 293, 550, 611, 8293, 291, 281, 5452, 294, 264, 2519, 1315, 337, 19283, 13, 51483, 51483, 407, 2212, 2139, 295, 729, 11, 291, 393, 6786, 257, 2010, 382, 885, 2580, 1166, 13, 51745, 51745], "temperature": 0.0, "avg_logprob": -0.14833782269404486, "compression_ratio": 1.6462882096069869, "no_caption_prob": 2.295913418493001e-06}, {"id": 468, "seek": 185100, "start": 1855.46, "end": 1861.3, "text": " That would be similar to the JSON decode pipeline required function, right?", "tokens": [50364, 400, 550, 30, 50414, 50414, 400, 44, 569, 13, 50464, 50464, 467, 1177, 380, 5374, 294, 264, 4965, 15148, 13, 50587, 50587, 663, 576, 312, 2531, 281, 264, 31828, 979, 1429, 15517, 4739, 2445, 11, 558, 30, 50879, 50879, 1079, 13, 50929, 50929, 1079, 13, 50979, 50979, 407, 264, 31828, 979, 1429, 15517, 4739, 2445, 307, 257, 6562, 295, 437, 291, 1062, 818, 293, 44, 569, 51205, 51205, 293, 550, 611, 8293, 291, 281, 5452, 294, 264, 2519, 1315, 337, 19283, 13, 51483, 51483, 407, 2212, 2139, 295, 729, 11, 291, 393, 6786, 257, 2010, 382, 885, 2580, 1166, 13, 51745, 51745], "temperature": 0.0, "avg_logprob": -0.14833782269404486, "compression_ratio": 1.6462882096069869, "no_caption_prob": 2.295913418493001e-06}, {"id": 469, "seek": 185100, "start": 1861.3, "end": 1862.3, "text": " Yes.", "tokens": [50364, 400, 550, 30, 50414, 50414, 400, 44, 569, 13, 50464, 50464, 467, 1177, 380, 5374, 294, 264, 4965, 15148, 13, 50587, 50587, 663, 576, 312, 2531, 281, 264, 31828, 979, 1429, 15517, 4739, 2445, 11, 558, 30, 50879, 50879, 1079, 13, 50929, 50929, 1079, 13, 50979, 50979, 407, 264, 31828, 979, 1429, 15517, 4739, 2445, 307, 257, 6562, 295, 437, 291, 1062, 818, 293, 44, 569, 51205, 51205, 293, 550, 611, 8293, 291, 281, 5452, 294, 264, 2519, 1315, 337, 19283, 13, 51483, 51483, 407, 2212, 2139, 295, 729, 11, 291, 393, 6786, 257, 2010, 382, 885, 2580, 1166, 13, 51745, 51745], "temperature": 0.0, "avg_logprob": -0.14833782269404486, "compression_ratio": 1.6462882096069869, "no_caption_prob": 2.295913418493001e-06}, {"id": 470, "seek": 185100, "start": 1862.3, "end": 1863.3, "text": " Yes.", "tokens": [50364, 400, 550, 30, 50414, 50414, 400, 44, 569, 13, 50464, 50464, 467, 1177, 380, 5374, 294, 264, 4965, 15148, 13, 50587, 50587, 663, 576, 312, 2531, 281, 264, 31828, 979, 1429, 15517, 4739, 2445, 11, 558, 30, 50879, 50879, 1079, 13, 50929, 50929, 1079, 13, 50979, 50979, 407, 264, 31828, 979, 1429, 15517, 4739, 2445, 307, 257, 6562, 295, 437, 291, 1062, 818, 293, 44, 569, 51205, 51205, 293, 550, 611, 8293, 291, 281, 5452, 294, 264, 2519, 1315, 337, 19283, 13, 51483, 51483, 407, 2212, 2139, 295, 729, 11, 291, 393, 6786, 257, 2010, 382, 885, 2580, 1166, 13, 51745, 51745], "temperature": 0.0, "avg_logprob": -0.14833782269404486, "compression_ratio": 1.6462882096069869, "no_caption_prob": 2.295913418493001e-06}, {"id": 471, "seek": 185100, "start": 1863.3, "end": 1867.82, "text": " So the JSON decode pipeline required function is a combination of what you might call andMap", "tokens": [50364, 400, 550, 30, 50414, 50414, 400, 44, 569, 13, 50464, 50464, 467, 1177, 380, 5374, 294, 264, 4965, 15148, 13, 50587, 50587, 663, 576, 312, 2531, 281, 264, 31828, 979, 1429, 15517, 4739, 2445, 11, 558, 30, 50879, 50879, 1079, 13, 50929, 50929, 1079, 13, 50979, 50979, 407, 264, 31828, 979, 1429, 15517, 4739, 2445, 307, 257, 6562, 295, 437, 291, 1062, 818, 293, 44, 569, 51205, 51205, 293, 550, 611, 8293, 291, 281, 5452, 294, 264, 2519, 1315, 337, 19283, 13, 51483, 51483, 407, 2212, 2139, 295, 729, 11, 291, 393, 6786, 257, 2010, 382, 885, 2580, 1166, 13, 51745, 51745], "temperature": 0.0, "avg_logprob": -0.14833782269404486, "compression_ratio": 1.6462882096069869, "no_caption_prob": 2.295913418493001e-06}, {"id": 472, "seek": 185100, "start": 1867.82, "end": 1873.38, "text": " and then also allowing you to plug in the field name for convenience.", "tokens": [50364, 400, 550, 30, 50414, 50414, 400, 44, 569, 13, 50464, 50464, 467, 1177, 380, 5374, 294, 264, 4965, 15148, 13, 50587, 50587, 663, 576, 312, 2531, 281, 264, 31828, 979, 1429, 15517, 4739, 2445, 11, 558, 30, 50879, 50879, 1079, 13, 50929, 50929, 1079, 13, 50979, 50979, 407, 264, 31828, 979, 1429, 15517, 4739, 2445, 307, 257, 6562, 295, 437, 291, 1062, 818, 293, 44, 569, 51205, 51205, 293, 550, 611, 8293, 291, 281, 5452, 294, 264, 2519, 1315, 337, 19283, 13, 51483, 51483, 407, 2212, 2139, 295, 729, 11, 291, 393, 6786, 257, 2010, 382, 885, 2580, 1166, 13, 51745, 51745], "temperature": 0.0, "avg_logprob": -0.14833782269404486, "compression_ratio": 1.6462882096069869, "no_caption_prob": 2.295913418493001e-06}, {"id": 473, "seek": 185100, "start": 1873.38, "end": 1878.62, "text": " So given either of those, you can describe a type as being applicative.", "tokens": [50364, 400, 550, 30, 50414, 50414, 400, 44, 569, 13, 50464, 50464, 467, 1177, 380, 5374, 294, 264, 4965, 15148, 13, 50587, 50587, 663, 576, 312, 2531, 281, 264, 31828, 979, 1429, 15517, 4739, 2445, 11, 558, 30, 50879, 50879, 1079, 13, 50929, 50929, 1079, 13, 50979, 50979, 407, 264, 31828, 979, 1429, 15517, 4739, 2445, 307, 257, 6562, 295, 437, 291, 1062, 818, 293, 44, 569, 51205, 51205, 293, 550, 611, 8293, 291, 281, 5452, 294, 264, 2519, 1315, 337, 19283, 13, 51483, 51483, 407, 2212, 2139, 295, 729, 11, 291, 393, 6786, 257, 2010, 382, 885, 2580, 1166, 13, 51745, 51745], "temperature": 0.0, "avg_logprob": -0.14833782269404486, "compression_ratio": 1.6462882096069869, "no_caption_prob": 2.295913418493001e-06}, {"id": 474, "seek": 187862, "start": 1878.62, "end": 1884.2199999999998, "text": " So because maybe has a constructor, which is just, and it has a map2, we can describe", "tokens": [50364, 407, 570, 1310, 575, 257, 47479, 11, 597, 307, 445, 11, 293, 309, 575, 257, 4471, 17, 11, 321, 393, 6786, 50644, 50644, 309, 382, 2580, 1166, 13, 50738, 50738, 400, 264, 1880, 551, 365, 4471, 17, 293, 293, 44, 569, 307, 456, 366, 1333, 295, 732, 819, 2098, 295, 50918, 50918, 22171, 264, 912, 551, 13, 50989, 50989, 400, 370, 2212, 2139, 295, 729, 11, 321, 393, 4445, 264, 661, 13, 51112, 51112, 286, 841, 411, 341, 307, 411, 5707, 38, 88, 331, 3942, 337, 11745, 9410, 13, 51362, 51362, 1057, 558, 13, 51474, 51474, 286, 643, 257, 2897, 295, 19973, 11, 257, 683, 328, 11, 420, 498, 291, 500, 380, 362, 300, 11, 286, 643, 485, 51778, 51778], "temperature": 0.0, "avg_logprob": -0.13905073384769628, "compression_ratio": 1.605263157894737, "no_caption_prob": 1.3287717592902482e-06}, {"id": 475, "seek": 187862, "start": 1884.2199999999998, "end": 1886.1, "text": " it as applicative.", "tokens": [50364, 407, 570, 1310, 575, 257, 47479, 11, 597, 307, 445, 11, 293, 309, 575, 257, 4471, 17, 11, 321, 393, 6786, 50644, 50644, 309, 382, 2580, 1166, 13, 50738, 50738, 400, 264, 1880, 551, 365, 4471, 17, 293, 293, 44, 569, 307, 456, 366, 1333, 295, 732, 819, 2098, 295, 50918, 50918, 22171, 264, 912, 551, 13, 50989, 50989, 400, 370, 2212, 2139, 295, 729, 11, 321, 393, 4445, 264, 661, 13, 51112, 51112, 286, 841, 411, 341, 307, 411, 5707, 38, 88, 331, 3942, 337, 11745, 9410, 13, 51362, 51362, 1057, 558, 13, 51474, 51474, 286, 643, 257, 2897, 295, 19973, 11, 257, 683, 328, 11, 420, 498, 291, 500, 380, 362, 300, 11, 286, 643, 485, 51778, 51778], "temperature": 0.0, "avg_logprob": -0.13905073384769628, "compression_ratio": 1.605263157894737, "no_caption_prob": 1.3287717592902482e-06}, {"id": 476, "seek": 187862, "start": 1886.1, "end": 1889.6999999999998, "text": " And the interesting thing with map2 and andMap is there are sort of two different ways of", "tokens": [50364, 407, 570, 1310, 575, 257, 47479, 11, 597, 307, 445, 11, 293, 309, 575, 257, 4471, 17, 11, 321, 393, 6786, 50644, 50644, 309, 382, 2580, 1166, 13, 50738, 50738, 400, 264, 1880, 551, 365, 4471, 17, 293, 293, 44, 569, 307, 456, 366, 1333, 295, 732, 819, 2098, 295, 50918, 50918, 22171, 264, 912, 551, 13, 50989, 50989, 400, 370, 2212, 2139, 295, 729, 11, 321, 393, 4445, 264, 661, 13, 51112, 51112, 286, 841, 411, 341, 307, 411, 5707, 38, 88, 331, 3942, 337, 11745, 9410, 13, 51362, 51362, 1057, 558, 13, 51474, 51474, 286, 643, 257, 2897, 295, 19973, 11, 257, 683, 328, 11, 420, 498, 291, 500, 380, 362, 300, 11, 286, 643, 485, 51778, 51778], "temperature": 0.0, "avg_logprob": -0.13905073384769628, "compression_ratio": 1.605263157894737, "no_caption_prob": 1.3287717592902482e-06}, {"id": 477, "seek": 187862, "start": 1889.6999999999998, "end": 1891.12, "text": " expressing the same thing.", "tokens": [50364, 407, 570, 1310, 575, 257, 47479, 11, 597, 307, 445, 11, 293, 309, 575, 257, 4471, 17, 11, 321, 393, 6786, 50644, 50644, 309, 382, 2580, 1166, 13, 50738, 50738, 400, 264, 1880, 551, 365, 4471, 17, 293, 293, 44, 569, 307, 456, 366, 1333, 295, 732, 819, 2098, 295, 50918, 50918, 22171, 264, 912, 551, 13, 50989, 50989, 400, 370, 2212, 2139, 295, 729, 11, 321, 393, 4445, 264, 661, 13, 51112, 51112, 286, 841, 411, 341, 307, 411, 5707, 38, 88, 331, 3942, 337, 11745, 9410, 13, 51362, 51362, 1057, 558, 13, 51474, 51474, 286, 643, 257, 2897, 295, 19973, 11, 257, 683, 328, 11, 420, 498, 291, 500, 380, 362, 300, 11, 286, 643, 485, 51778, 51778], "temperature": 0.0, "avg_logprob": -0.13905073384769628, "compression_ratio": 1.605263157894737, "no_caption_prob": 1.3287717592902482e-06}, {"id": 478, "seek": 187862, "start": 1891.12, "end": 1893.58, "text": " And so given either of those, we can implement the other.", "tokens": [50364, 407, 570, 1310, 575, 257, 47479, 11, 597, 307, 445, 11, 293, 309, 575, 257, 4471, 17, 11, 321, 393, 6786, 50644, 50644, 309, 382, 2580, 1166, 13, 50738, 50738, 400, 264, 1880, 551, 365, 4471, 17, 293, 293, 44, 569, 307, 456, 366, 1333, 295, 732, 819, 2098, 295, 50918, 50918, 22171, 264, 912, 551, 13, 50989, 50989, 400, 370, 2212, 2139, 295, 729, 11, 321, 393, 4445, 264, 661, 13, 51112, 51112, 286, 841, 411, 341, 307, 411, 5707, 38, 88, 331, 3942, 337, 11745, 9410, 13, 51362, 51362, 1057, 558, 13, 51474, 51474, 286, 643, 257, 2897, 295, 19973, 11, 257, 683, 328, 11, 420, 498, 291, 500, 380, 362, 300, 11, 286, 643, 485, 51778, 51778], "temperature": 0.0, "avg_logprob": -0.13905073384769628, "compression_ratio": 1.605263157894737, "no_caption_prob": 1.3287717592902482e-06}, {"id": 479, "seek": 187862, "start": 1893.58, "end": 1898.58, "text": " I feel like this is like MacGyver skills for functional programming.", "tokens": [50364, 407, 570, 1310, 575, 257, 47479, 11, 597, 307, 445, 11, 293, 309, 575, 257, 4471, 17, 11, 321, 393, 6786, 50644, 50644, 309, 382, 2580, 1166, 13, 50738, 50738, 400, 264, 1880, 551, 365, 4471, 17, 293, 293, 44, 569, 307, 456, 366, 1333, 295, 732, 819, 2098, 295, 50918, 50918, 22171, 264, 912, 551, 13, 50989, 50989, 400, 370, 2212, 2139, 295, 729, 11, 321, 393, 4445, 264, 661, 13, 51112, 51112, 286, 841, 411, 341, 307, 411, 5707, 38, 88, 331, 3942, 337, 11745, 9410, 13, 51362, 51362, 1057, 558, 13, 51474, 51474, 286, 643, 257, 2897, 295, 19973, 11, 257, 683, 328, 11, 420, 498, 291, 500, 380, 362, 300, 11, 286, 643, 485, 51778, 51778], "temperature": 0.0, "avg_logprob": -0.13905073384769628, "compression_ratio": 1.605263157894737, "no_caption_prob": 1.3287717592902482e-06}, {"id": 480, "seek": 187862, "start": 1898.58, "end": 1900.82, "text": " All right.", "tokens": [50364, 407, 570, 1310, 575, 257, 47479, 11, 597, 307, 445, 11, 293, 309, 575, 257, 4471, 17, 11, 321, 393, 6786, 50644, 50644, 309, 382, 2580, 1166, 13, 50738, 50738, 400, 264, 1880, 551, 365, 4471, 17, 293, 293, 44, 569, 307, 456, 366, 1333, 295, 732, 819, 2098, 295, 50918, 50918, 22171, 264, 912, 551, 13, 50989, 50989, 400, 370, 2212, 2139, 295, 729, 11, 321, 393, 4445, 264, 661, 13, 51112, 51112, 286, 841, 411, 341, 307, 411, 5707, 38, 88, 331, 3942, 337, 11745, 9410, 13, 51362, 51362, 1057, 558, 13, 51474, 51474, 286, 643, 257, 2897, 295, 19973, 11, 257, 683, 328, 11, 420, 498, 291, 500, 380, 362, 300, 11, 286, 643, 485, 51778, 51778], "temperature": 0.0, "avg_logprob": -0.13905073384769628, "compression_ratio": 1.605263157894737, "no_caption_prob": 1.3287717592902482e-06}, {"id": 481, "seek": 187862, "start": 1900.82, "end": 1906.8999999999999, "text": " I need a stick of gum, a twig, or if you don't have that, I need...", "tokens": [50364, 407, 570, 1310, 575, 257, 47479, 11, 597, 307, 445, 11, 293, 309, 575, 257, 4471, 17, 11, 321, 393, 6786, 50644, 50644, 309, 382, 2580, 1166, 13, 50738, 50738, 400, 264, 1880, 551, 365, 4471, 17, 293, 293, 44, 569, 307, 456, 366, 1333, 295, 732, 819, 2098, 295, 50918, 50918, 22171, 264, 912, 551, 13, 50989, 50989, 400, 370, 2212, 2139, 295, 729, 11, 321, 393, 4445, 264, 661, 13, 51112, 51112, 286, 841, 411, 341, 307, 411, 5707, 38, 88, 331, 3942, 337, 11745, 9410, 13, 51362, 51362, 1057, 558, 13, 51474, 51474, 286, 643, 257, 2897, 295, 19973, 11, 257, 683, 328, 11, 420, 498, 291, 500, 380, 362, 300, 11, 286, 643, 485, 51778, 51778], "temperature": 0.0, "avg_logprob": -0.13905073384769628, "compression_ratio": 1.605263157894737, "no_caption_prob": 1.3287717592902482e-06}, {"id": 482, "seek": 190690, "start": 1906.9, "end": 1913.94, "text": " But if you're missing one of those, you have nothing.", "tokens": [50364, 583, 498, 291, 434, 5361, 472, 295, 729, 11, 291, 362, 1825, 13, 50716, 50716, 407, 1338, 11, 286, 915, 300, 264, 4471, 17, 307, 709, 544, 9859, 11, 544, 1858, 281, 1223, 382, 1580, 51040, 51040, 567, 311, 12736, 613, 3487, 13, 51189, 51189, 400, 490, 452, 1065, 2973, 4671, 666, 512, 295, 613, 544, 25066, 10392, 11, 309, 307, 51400, 51400, 709, 3571, 281, 1223, 365, 746, 411, 4471, 17, 13, 51550, 51550, 4100, 356, 570, 291, 393, 49473, 1757, 309, 544, 3612, 13, 51691, 51691], "temperature": 0.0, "avg_logprob": -0.10694120195176866, "compression_ratio": 1.5789473684210527, "no_caption_prob": 1.0616020517772995e-05}, {"id": 483, "seek": 190690, "start": 1913.94, "end": 1920.42, "text": " So yeah, I find that the map2 is much more concrete, more easy to understand as someone", "tokens": [50364, 583, 498, 291, 434, 5361, 472, 295, 729, 11, 291, 362, 1825, 13, 50716, 50716, 407, 1338, 11, 286, 915, 300, 264, 4471, 17, 307, 709, 544, 9859, 11, 544, 1858, 281, 1223, 382, 1580, 51040, 51040, 567, 311, 12736, 613, 3487, 13, 51189, 51189, 400, 490, 452, 1065, 2973, 4671, 666, 512, 295, 613, 544, 25066, 10392, 11, 309, 307, 51400, 51400, 709, 3571, 281, 1223, 365, 746, 411, 4471, 17, 13, 51550, 51550, 4100, 356, 570, 291, 393, 49473, 1757, 309, 544, 3612, 13, 51691, 51691], "temperature": 0.0, "avg_logprob": -0.10694120195176866, "compression_ratio": 1.5789473684210527, "no_caption_prob": 1.0616020517772995e-05}, {"id": 484, "seek": 190690, "start": 1920.42, "end": 1923.4, "text": " who's exploring these ideas.", "tokens": [50364, 583, 498, 291, 434, 5361, 472, 295, 729, 11, 291, 362, 1825, 13, 50716, 50716, 407, 1338, 11, 286, 915, 300, 264, 4471, 17, 307, 709, 544, 9859, 11, 544, 1858, 281, 1223, 382, 1580, 51040, 51040, 567, 311, 12736, 613, 3487, 13, 51189, 51189, 400, 490, 452, 1065, 2973, 4671, 666, 512, 295, 613, 544, 25066, 10392, 11, 309, 307, 51400, 51400, 709, 3571, 281, 1223, 365, 746, 411, 4471, 17, 13, 51550, 51550, 4100, 356, 570, 291, 393, 49473, 1757, 309, 544, 3612, 13, 51691, 51691], "temperature": 0.0, "avg_logprob": -0.10694120195176866, "compression_ratio": 1.5789473684210527, "no_caption_prob": 1.0616020517772995e-05}, {"id": 485, "seek": 190690, "start": 1923.4, "end": 1927.6200000000001, "text": " And from my own personal journey into some of these more philosophical concepts, it is", "tokens": [50364, 583, 498, 291, 434, 5361, 472, 295, 729, 11, 291, 362, 1825, 13, 50716, 50716, 407, 1338, 11, 286, 915, 300, 264, 4471, 17, 307, 709, 544, 9859, 11, 544, 1858, 281, 1223, 382, 1580, 51040, 51040, 567, 311, 12736, 613, 3487, 13, 51189, 51189, 400, 490, 452, 1065, 2973, 4671, 666, 512, 295, 613, 544, 25066, 10392, 11, 309, 307, 51400, 51400, 709, 3571, 281, 1223, 365, 746, 411, 4471, 17, 13, 51550, 51550, 4100, 356, 570, 291, 393, 49473, 1757, 309, 544, 3612, 13, 51691, 51691], "temperature": 0.0, "avg_logprob": -0.10694120195176866, "compression_ratio": 1.5789473684210527, "no_caption_prob": 1.0616020517772995e-05}, {"id": 486, "seek": 190690, "start": 1927.6200000000001, "end": 1930.6200000000001, "text": " much easier to understand with something like map2.", "tokens": [50364, 583, 498, 291, 434, 5361, 472, 295, 729, 11, 291, 362, 1825, 13, 50716, 50716, 407, 1338, 11, 286, 915, 300, 264, 4471, 17, 307, 709, 544, 9859, 11, 544, 1858, 281, 1223, 382, 1580, 51040, 51040, 567, 311, 12736, 613, 3487, 13, 51189, 51189, 400, 490, 452, 1065, 2973, 4671, 666, 512, 295, 613, 544, 25066, 10392, 11, 309, 307, 51400, 51400, 709, 3571, 281, 1223, 365, 746, 411, 4471, 17, 13, 51550, 51550, 4100, 356, 570, 291, 393, 49473, 1757, 309, 544, 3612, 13, 51691, 51691], "temperature": 0.0, "avg_logprob": -0.10694120195176866, "compression_ratio": 1.5789473684210527, "no_caption_prob": 1.0616020517772995e-05}, {"id": 487, "seek": 190690, "start": 1930.6200000000001, "end": 1933.44, "text": " Partly because you can deconstruct it more easily.", "tokens": [50364, 583, 498, 291, 434, 5361, 472, 295, 729, 11, 291, 362, 1825, 13, 50716, 50716, 407, 1338, 11, 286, 915, 300, 264, 4471, 17, 307, 709, 544, 9859, 11, 544, 1858, 281, 1223, 382, 1580, 51040, 51040, 567, 311, 12736, 613, 3487, 13, 51189, 51189, 400, 490, 452, 1065, 2973, 4671, 666, 512, 295, 613, 544, 25066, 10392, 11, 309, 307, 51400, 51400, 709, 3571, 281, 1223, 365, 746, 411, 4471, 17, 13, 51550, 51550, 4100, 356, 570, 291, 393, 49473, 1757, 309, 544, 3612, 13, 51691, 51691], "temperature": 0.0, "avg_logprob": -0.10694120195176866, "compression_ratio": 1.5789473684210527, "no_caption_prob": 1.0616020517772995e-05}, {"id": 488, "seek": 193344, "start": 1933.44, "end": 1937.06, "text": " You can implement it yourself with a type like maybe and grasp pretty easily what it", "tokens": [50364, 509, 393, 4445, 309, 1803, 365, 257, 2010, 411, 1310, 293, 21743, 1238, 3612, 437, 309, 50545, 50545, 775, 13, 50609, 50609, 492, 2835, 3071, 11, 558, 30, 50659, 50659, 316, 4471, 17, 337, 1310, 307, 445, 8568, 366, 1293, 4190, 1974, 30, 50841, 50841, 759, 370, 11, 3079, 341, 2445, 11, 1646, 2736, 1310, 11, 420, 1646, 2736, 1825, 13, 51027, 51027, 400, 4471, 307, 257, 707, 857, 544, 1575, 22487, 570, 309, 5749, 365, 1333, 295, 14641, 3861, 51285, 51285, 293, 512, 40168, 13, 51407, 51407, 400, 456, 366, 544, 10392, 291, 643, 281, 1223, 294, 1668, 281, 589, 365, 309, 13, 51685, 51685], "temperature": 0.0, "avg_logprob": -0.18403003833912038, "compression_ratio": 1.6043956043956045, "no_caption_prob": 3.089470737904776e-06}, {"id": 489, "seek": 193344, "start": 1937.06, "end": 1938.3400000000001, "text": " does.", "tokens": [50364, 509, 393, 4445, 309, 1803, 365, 257, 2010, 411, 1310, 293, 21743, 1238, 3612, 437, 309, 50545, 50545, 775, 13, 50609, 50609, 492, 2835, 3071, 11, 558, 30, 50659, 50659, 316, 4471, 17, 337, 1310, 307, 445, 8568, 366, 1293, 4190, 1974, 30, 50841, 50841, 759, 370, 11, 3079, 341, 2445, 11, 1646, 2736, 1310, 11, 420, 1646, 2736, 1825, 13, 51027, 51027, 400, 4471, 307, 257, 707, 857, 544, 1575, 22487, 570, 309, 5749, 365, 1333, 295, 14641, 3861, 51285, 51285, 293, 512, 40168, 13, 51407, 51407, 400, 456, 366, 544, 10392, 291, 643, 281, 1223, 294, 1668, 281, 589, 365, 309, 13, 51685, 51685], "temperature": 0.0, "avg_logprob": -0.18403003833912038, "compression_ratio": 1.6043956043956045, "no_caption_prob": 3.089470737904776e-06}, {"id": 490, "seek": 193344, "start": 1938.3400000000001, "end": 1939.3400000000001, "text": " We mentioned earlier, right?", "tokens": [50364, 509, 393, 4445, 309, 1803, 365, 257, 2010, 411, 1310, 293, 21743, 1238, 3612, 437, 309, 50545, 50545, 775, 13, 50609, 50609, 492, 2835, 3071, 11, 558, 30, 50659, 50659, 316, 4471, 17, 337, 1310, 307, 445, 8568, 366, 1293, 4190, 1974, 30, 50841, 50841, 759, 370, 11, 3079, 341, 2445, 11, 1646, 2736, 1310, 11, 420, 1646, 2736, 1825, 13, 51027, 51027, 400, 4471, 307, 257, 707, 857, 544, 1575, 22487, 570, 309, 5749, 365, 1333, 295, 14641, 3861, 51285, 51285, 293, 512, 40168, 13, 51407, 51407, 400, 456, 366, 544, 10392, 291, 643, 281, 1223, 294, 1668, 281, 589, 365, 309, 13, 51685, 51685], "temperature": 0.0, "avg_logprob": -0.18403003833912038, "compression_ratio": 1.6043956043956045, "no_caption_prob": 3.089470737904776e-06}, {"id": 491, "seek": 193344, "start": 1939.3400000000001, "end": 1942.98, "text": " A map2 for maybe is just checking are both values present?", "tokens": [50364, 509, 393, 4445, 309, 1803, 365, 257, 2010, 411, 1310, 293, 21743, 1238, 3612, 437, 309, 50545, 50545, 775, 13, 50609, 50609, 492, 2835, 3071, 11, 558, 30, 50659, 50659, 316, 4471, 17, 337, 1310, 307, 445, 8568, 366, 1293, 4190, 1974, 30, 50841, 50841, 759, 370, 11, 3079, 341, 2445, 11, 1646, 2736, 1310, 11, 420, 1646, 2736, 1825, 13, 51027, 51027, 400, 4471, 307, 257, 707, 857, 544, 1575, 22487, 570, 309, 5749, 365, 1333, 295, 14641, 3861, 51285, 51285, 293, 512, 40168, 13, 51407, 51407, 400, 456, 366, 544, 10392, 291, 643, 281, 1223, 294, 1668, 281, 589, 365, 309, 13, 51685, 51685], "temperature": 0.0, "avg_logprob": -0.18403003833912038, "compression_ratio": 1.6043956043956045, "no_caption_prob": 3.089470737904776e-06}, {"id": 492, "seek": 193344, "start": 1942.98, "end": 1946.7, "text": " If so, apply this function, else return maybe, or else return nothing.", "tokens": [50364, 509, 393, 4445, 309, 1803, 365, 257, 2010, 411, 1310, 293, 21743, 1238, 3612, 437, 309, 50545, 50545, 775, 13, 50609, 50609, 492, 2835, 3071, 11, 558, 30, 50659, 50659, 316, 4471, 17, 337, 1310, 307, 445, 8568, 366, 1293, 4190, 1974, 30, 50841, 50841, 759, 370, 11, 3079, 341, 2445, 11, 1646, 2736, 1310, 11, 420, 1646, 2736, 1825, 13, 51027, 51027, 400, 4471, 307, 257, 707, 857, 544, 1575, 22487, 570, 309, 5749, 365, 1333, 295, 14641, 3861, 51285, 51285, 293, 512, 40168, 13, 51407, 51407, 400, 456, 366, 544, 10392, 291, 643, 281, 1223, 294, 1668, 281, 589, 365, 309, 13, 51685, 51685], "temperature": 0.0, "avg_logprob": -0.18403003833912038, "compression_ratio": 1.6043956043956045, "no_caption_prob": 3.089470737904776e-06}, {"id": 493, "seek": 193344, "start": 1946.7, "end": 1951.8600000000001, "text": " And map is a little bit more mind bending because it plays with sort of partial application", "tokens": [50364, 509, 393, 4445, 309, 1803, 365, 257, 2010, 411, 1310, 293, 21743, 1238, 3612, 437, 309, 50545, 50545, 775, 13, 50609, 50609, 492, 2835, 3071, 11, 558, 30, 50659, 50659, 316, 4471, 17, 337, 1310, 307, 445, 8568, 366, 1293, 4190, 1974, 30, 50841, 50841, 759, 370, 11, 3079, 341, 2445, 11, 1646, 2736, 1310, 11, 420, 1646, 2736, 1825, 13, 51027, 51027, 400, 4471, 307, 257, 707, 857, 544, 1575, 22487, 570, 309, 5749, 365, 1333, 295, 14641, 3861, 51285, 51285, 293, 512, 40168, 13, 51407, 51407, 400, 456, 366, 544, 10392, 291, 643, 281, 1223, 294, 1668, 281, 589, 365, 309, 13, 51685, 51685], "temperature": 0.0, "avg_logprob": -0.18403003833912038, "compression_ratio": 1.6043956043956045, "no_caption_prob": 3.089470737904776e-06}, {"id": 494, "seek": 193344, "start": 1951.8600000000001, "end": 1954.3, "text": " and some pipelines.", "tokens": [50364, 509, 393, 4445, 309, 1803, 365, 257, 2010, 411, 1310, 293, 21743, 1238, 3612, 437, 309, 50545, 50545, 775, 13, 50609, 50609, 492, 2835, 3071, 11, 558, 30, 50659, 50659, 316, 4471, 17, 337, 1310, 307, 445, 8568, 366, 1293, 4190, 1974, 30, 50841, 50841, 759, 370, 11, 3079, 341, 2445, 11, 1646, 2736, 1310, 11, 420, 1646, 2736, 1825, 13, 51027, 51027, 400, 4471, 307, 257, 707, 857, 544, 1575, 22487, 570, 309, 5749, 365, 1333, 295, 14641, 3861, 51285, 51285, 293, 512, 40168, 13, 51407, 51407, 400, 456, 366, 544, 10392, 291, 643, 281, 1223, 294, 1668, 281, 589, 365, 309, 13, 51685, 51685], "temperature": 0.0, "avg_logprob": -0.18403003833912038, "compression_ratio": 1.6043956043956045, "no_caption_prob": 3.089470737904776e-06}, {"id": 495, "seek": 193344, "start": 1954.3, "end": 1959.8600000000001, "text": " And there are more concepts you need to understand in order to work with it.", "tokens": [50364, 509, 393, 4445, 309, 1803, 365, 257, 2010, 411, 1310, 293, 21743, 1238, 3612, 437, 309, 50545, 50545, 775, 13, 50609, 50609, 492, 2835, 3071, 11, 558, 30, 50659, 50659, 316, 4471, 17, 337, 1310, 307, 445, 8568, 366, 1293, 4190, 1974, 30, 50841, 50841, 759, 370, 11, 3079, 341, 2445, 11, 1646, 2736, 1310, 11, 420, 1646, 2736, 1825, 13, 51027, 51027, 400, 4471, 307, 257, 707, 857, 544, 1575, 22487, 570, 309, 5749, 365, 1333, 295, 14641, 3861, 51285, 51285, 293, 512, 40168, 13, 51407, 51407, 400, 456, 366, 544, 10392, 291, 643, 281, 1223, 294, 1668, 281, 589, 365, 309, 13, 51685, 51685], "temperature": 0.0, "avg_logprob": -0.18403003833912038, "compression_ratio": 1.6043956043956045, "no_caption_prob": 3.089470737904776e-06}, {"id": 496, "seek": 195986, "start": 1959.86, "end": 1966.6999999999998, "text": " Yeah, it's the kind of thing that you sort of copy paste from the docs for a library", "tokens": [50364, 865, 11, 309, 311, 264, 733, 295, 551, 300, 291, 1333, 295, 5055, 9163, 490, 264, 45623, 337, 257, 6405, 50706, 50706, 281, 1322, 493, 257, 15517, 13, 50830, 50830, 583, 291, 500, 380, 1009, 4498, 519, 466, 2293, 437, 309, 311, 884, 833, 264, 13376, 570, 309, 51096, 51096, 576, 4607, 428, 3567, 257, 707, 857, 886, 709, 13, 51196, 51196, 407, 291, 362, 281, 411, 485, 51256, 51256, 286, 519, 300, 311, 983, 281, 257, 1629, 8396, 309, 311, 4961, 281, 362, 512, 1090, 1496, 10392, 295, 51476, 51476, 577, 281, 519, 466, 613, 721, 570, 291, 500, 380, 1009, 362, 281, 519, 466, 264, 2295, 1496, 51698, 51698, 721, 13, 51748, 51748], "temperature": 0.0, "avg_logprob": -0.1109174337142553, "compression_ratio": 1.7587548638132295, "no_caption_prob": 1.3211502846388612e-05}, {"id": 497, "seek": 195986, "start": 1966.6999999999998, "end": 1969.1799999999998, "text": " to build up a pipeline.", "tokens": [50364, 865, 11, 309, 311, 264, 733, 295, 551, 300, 291, 1333, 295, 5055, 9163, 490, 264, 45623, 337, 257, 6405, 50706, 50706, 281, 1322, 493, 257, 15517, 13, 50830, 50830, 583, 291, 500, 380, 1009, 4498, 519, 466, 2293, 437, 309, 311, 884, 833, 264, 13376, 570, 309, 51096, 51096, 576, 4607, 428, 3567, 257, 707, 857, 886, 709, 13, 51196, 51196, 407, 291, 362, 281, 411, 485, 51256, 51256, 286, 519, 300, 311, 983, 281, 257, 1629, 8396, 309, 311, 4961, 281, 362, 512, 1090, 1496, 10392, 295, 51476, 51476, 577, 281, 519, 466, 613, 721, 570, 291, 500, 380, 1009, 362, 281, 519, 466, 264, 2295, 1496, 51698, 51698, 721, 13, 51748, 51748], "temperature": 0.0, "avg_logprob": -0.1109174337142553, "compression_ratio": 1.7587548638132295, "no_caption_prob": 1.3211502846388612e-05}, {"id": 498, "seek": 195986, "start": 1969.1799999999998, "end": 1974.5, "text": " But you don't always fully think about exactly what it's doing under the hood because it", "tokens": [50364, 865, 11, 309, 311, 264, 733, 295, 551, 300, 291, 1333, 295, 5055, 9163, 490, 264, 45623, 337, 257, 6405, 50706, 50706, 281, 1322, 493, 257, 15517, 13, 50830, 50830, 583, 291, 500, 380, 1009, 4498, 519, 466, 2293, 437, 309, 311, 884, 833, 264, 13376, 570, 309, 51096, 51096, 576, 4607, 428, 3567, 257, 707, 857, 886, 709, 13, 51196, 51196, 407, 291, 362, 281, 411, 485, 51256, 51256, 286, 519, 300, 311, 983, 281, 257, 1629, 8396, 309, 311, 4961, 281, 362, 512, 1090, 1496, 10392, 295, 51476, 51476, 577, 281, 519, 466, 613, 721, 570, 291, 500, 380, 1009, 362, 281, 519, 466, 264, 2295, 1496, 51698, 51698, 721, 13, 51748, 51748], "temperature": 0.0, "avg_logprob": -0.1109174337142553, "compression_ratio": 1.7587548638132295, "no_caption_prob": 1.3211502846388612e-05}, {"id": 499, "seek": 195986, "start": 1974.5, "end": 1976.5, "text": " would hurt your brain a little bit too much.", "tokens": [50364, 865, 11, 309, 311, 264, 733, 295, 551, 300, 291, 1333, 295, 5055, 9163, 490, 264, 45623, 337, 257, 6405, 50706, 50706, 281, 1322, 493, 257, 15517, 13, 50830, 50830, 583, 291, 500, 380, 1009, 4498, 519, 466, 2293, 437, 309, 311, 884, 833, 264, 13376, 570, 309, 51096, 51096, 576, 4607, 428, 3567, 257, 707, 857, 886, 709, 13, 51196, 51196, 407, 291, 362, 281, 411, 485, 51256, 51256, 286, 519, 300, 311, 983, 281, 257, 1629, 8396, 309, 311, 4961, 281, 362, 512, 1090, 1496, 10392, 295, 51476, 51476, 577, 281, 519, 466, 613, 721, 570, 291, 500, 380, 1009, 362, 281, 519, 466, 264, 2295, 1496, 51698, 51698, 721, 13, 51748, 51748], "temperature": 0.0, "avg_logprob": -0.1109174337142553, "compression_ratio": 1.7587548638132295, "no_caption_prob": 1.3211502846388612e-05}, {"id": 500, "seek": 195986, "start": 1976.5, "end": 1977.6999999999998, "text": " So you have to like...", "tokens": [50364, 865, 11, 309, 311, 264, 733, 295, 551, 300, 291, 1333, 295, 5055, 9163, 490, 264, 45623, 337, 257, 6405, 50706, 50706, 281, 1322, 493, 257, 15517, 13, 50830, 50830, 583, 291, 500, 380, 1009, 4498, 519, 466, 2293, 437, 309, 311, 884, 833, 264, 13376, 570, 309, 51096, 51096, 576, 4607, 428, 3567, 257, 707, 857, 886, 709, 13, 51196, 51196, 407, 291, 362, 281, 411, 485, 51256, 51256, 286, 519, 300, 311, 983, 281, 257, 1629, 8396, 309, 311, 4961, 281, 362, 512, 1090, 1496, 10392, 295, 51476, 51476, 577, 281, 519, 466, 613, 721, 570, 291, 500, 380, 1009, 362, 281, 519, 466, 264, 2295, 1496, 51698, 51698, 721, 13, 51748, 51748], "temperature": 0.0, "avg_logprob": -0.1109174337142553, "compression_ratio": 1.7587548638132295, "no_caption_prob": 1.3211502846388612e-05}, {"id": 501, "seek": 195986, "start": 1977.6999999999998, "end": 1982.1, "text": " I think that's why to a certain extent it's helpful to have some high level concepts of", "tokens": [50364, 865, 11, 309, 311, 264, 733, 295, 551, 300, 291, 1333, 295, 5055, 9163, 490, 264, 45623, 337, 257, 6405, 50706, 50706, 281, 1322, 493, 257, 15517, 13, 50830, 50830, 583, 291, 500, 380, 1009, 4498, 519, 466, 2293, 437, 309, 311, 884, 833, 264, 13376, 570, 309, 51096, 51096, 576, 4607, 428, 3567, 257, 707, 857, 886, 709, 13, 51196, 51196, 407, 291, 362, 281, 411, 485, 51256, 51256, 286, 519, 300, 311, 983, 281, 257, 1629, 8396, 309, 311, 4961, 281, 362, 512, 1090, 1496, 10392, 295, 51476, 51476, 577, 281, 519, 466, 613, 721, 570, 291, 500, 380, 1009, 362, 281, 519, 466, 264, 2295, 1496, 51698, 51698, 721, 13, 51748, 51748], "temperature": 0.0, "avg_logprob": -0.1109174337142553, "compression_ratio": 1.7587548638132295, "no_caption_prob": 1.3211502846388612e-05}, {"id": 502, "seek": 195986, "start": 1982.1, "end": 1986.54, "text": " how to think about these things because you don't always have to think about the low level", "tokens": [50364, 865, 11, 309, 311, 264, 733, 295, 551, 300, 291, 1333, 295, 5055, 9163, 490, 264, 45623, 337, 257, 6405, 50706, 50706, 281, 1322, 493, 257, 15517, 13, 50830, 50830, 583, 291, 500, 380, 1009, 4498, 519, 466, 2293, 437, 309, 311, 884, 833, 264, 13376, 570, 309, 51096, 51096, 576, 4607, 428, 3567, 257, 707, 857, 886, 709, 13, 51196, 51196, 407, 291, 362, 281, 411, 485, 51256, 51256, 286, 519, 300, 311, 983, 281, 257, 1629, 8396, 309, 311, 4961, 281, 362, 512, 1090, 1496, 10392, 295, 51476, 51476, 577, 281, 519, 466, 613, 721, 570, 291, 500, 380, 1009, 362, 281, 519, 466, 264, 2295, 1496, 51698, 51698, 721, 13, 51748, 51748], "temperature": 0.0, "avg_logprob": -0.1109174337142553, "compression_ratio": 1.7587548638132295, "no_caption_prob": 1.3211502846388612e-05}, {"id": 503, "seek": 195986, "start": 1986.54, "end": 1987.54, "text": " things.", "tokens": [50364, 865, 11, 309, 311, 264, 733, 295, 551, 300, 291, 1333, 295, 5055, 9163, 490, 264, 45623, 337, 257, 6405, 50706, 50706, 281, 1322, 493, 257, 15517, 13, 50830, 50830, 583, 291, 500, 380, 1009, 4498, 519, 466, 2293, 437, 309, 311, 884, 833, 264, 13376, 570, 309, 51096, 51096, 576, 4607, 428, 3567, 257, 707, 857, 886, 709, 13, 51196, 51196, 407, 291, 362, 281, 411, 485, 51256, 51256, 286, 519, 300, 311, 983, 281, 257, 1629, 8396, 309, 311, 4961, 281, 362, 512, 1090, 1496, 10392, 295, 51476, 51476, 577, 281, 519, 466, 613, 721, 570, 291, 500, 380, 1009, 362, 281, 519, 466, 264, 2295, 1496, 51698, 51698, 721, 13, 51748, 51748], "temperature": 0.0, "avg_logprob": -0.1109174337142553, "compression_ratio": 1.7587548638132295, "no_caption_prob": 1.3211502846388612e-05}, {"id": 504, "seek": 198754, "start": 1987.54, "end": 1994.42, "text": " The high level is, well, I want to sort of apply a high level combination of these things.", "tokens": [50364, 440, 1090, 1496, 307, 11, 731, 11, 286, 528, 281, 1333, 295, 3079, 257, 1090, 1496, 6562, 295, 613, 721, 13, 50708, 50708, 400, 370, 291, 1333, 295, 14644, 293, 4471, 365, 300, 3410, 293, 291, 500, 380, 643, 281, 1223, 51038, 51038, 439, 264, 2154, 1124, 13, 51088, 51088, 286, 519, 472, 551, 300, 1310, 321, 820, 2152, 886, 11, 746, 300, 393, 4931, 561, 493, 307, 51376, 51376, 264, 2136, 7690, 830, 841, 411, 341, 12066, 551, 13, 51624, 51624], "temperature": 0.0, "avg_logprob": -0.13596989994957334, "compression_ratio": 1.619047619047619, "no_caption_prob": 3.500809953038697e-06}, {"id": 505, "seek": 198754, "start": 1994.42, "end": 2001.02, "text": " And so you sort of associate and map with that concept and you don't need to understand", "tokens": [50364, 440, 1090, 1496, 307, 11, 731, 11, 286, 528, 281, 1333, 295, 3079, 257, 1090, 1496, 6562, 295, 613, 721, 13, 50708, 50708, 400, 370, 291, 1333, 295, 14644, 293, 4471, 365, 300, 3410, 293, 291, 500, 380, 643, 281, 1223, 51038, 51038, 439, 264, 2154, 1124, 13, 51088, 51088, 286, 519, 472, 551, 300, 1310, 321, 820, 2152, 886, 11, 746, 300, 393, 4931, 561, 493, 307, 51376, 51376, 264, 2136, 7690, 830, 841, 411, 341, 12066, 551, 13, 51624, 51624], "temperature": 0.0, "avg_logprob": -0.13596989994957334, "compression_ratio": 1.619047619047619, "no_caption_prob": 3.500809953038697e-06}, {"id": 506, "seek": 198754, "start": 2001.02, "end": 2002.02, "text": " all the internals.", "tokens": [50364, 440, 1090, 1496, 307, 11, 731, 11, 286, 528, 281, 1333, 295, 3079, 257, 1090, 1496, 6562, 295, 613, 721, 13, 50708, 50708, 400, 370, 291, 1333, 295, 14644, 293, 4471, 365, 300, 3410, 293, 291, 500, 380, 643, 281, 1223, 51038, 51038, 439, 264, 2154, 1124, 13, 51088, 51088, 286, 519, 472, 551, 300, 1310, 321, 820, 2152, 886, 11, 746, 300, 393, 4931, 561, 493, 307, 51376, 51376, 264, 2136, 7690, 830, 841, 411, 341, 12066, 551, 13, 51624, 51624], "temperature": 0.0, "avg_logprob": -0.13596989994957334, "compression_ratio": 1.619047619047619, "no_caption_prob": 3.500809953038697e-06}, {"id": 507, "seek": 198754, "start": 2002.02, "end": 2007.78, "text": " I think one thing that maybe we should mention too, something that can trip people up is", "tokens": [50364, 440, 1090, 1496, 307, 11, 731, 11, 286, 528, 281, 1333, 295, 3079, 257, 1090, 1496, 6562, 295, 613, 721, 13, 50708, 50708, 400, 370, 291, 1333, 295, 14644, 293, 4471, 365, 300, 3410, 293, 291, 500, 380, 643, 281, 1223, 51038, 51038, 439, 264, 2154, 1124, 13, 51088, 51088, 286, 519, 472, 551, 300, 1310, 321, 820, 2152, 886, 11, 746, 300, 393, 4931, 561, 493, 307, 51376, 51376, 264, 2136, 7690, 830, 841, 411, 341, 12066, 551, 13, 51624, 51624], "temperature": 0.0, "avg_logprob": -0.13596989994957334, "compression_ratio": 1.619047619047619, "no_caption_prob": 3.500809953038697e-06}, {"id": 508, "seek": 198754, "start": 2007.78, "end": 2012.74, "text": " the record constructors feel like this magical thing.", "tokens": [50364, 440, 1090, 1496, 307, 11, 731, 11, 286, 528, 281, 1333, 295, 3079, 257, 1090, 1496, 6562, 295, 613, 721, 13, 50708, 50708, 400, 370, 291, 1333, 295, 14644, 293, 4471, 365, 300, 3410, 293, 291, 500, 380, 643, 281, 1223, 51038, 51038, 439, 264, 2154, 1124, 13, 51088, 51088, 286, 519, 472, 551, 300, 1310, 321, 820, 2152, 886, 11, 746, 300, 393, 4931, 561, 493, 307, 51376, 51376, 264, 2136, 7690, 830, 841, 411, 341, 12066, 551, 13, 51624, 51624], "temperature": 0.0, "avg_logprob": -0.13596989994957334, "compression_ratio": 1.619047619047619, "no_caption_prob": 3.500809953038697e-06}, {"id": 509, "seek": 201274, "start": 2012.74, "end": 2018.54, "text": " So to sort of, I like to demystify that by just explaining exactly what it is.", "tokens": [50364, 407, 281, 1333, 295, 11, 286, 411, 281, 1371, 38593, 2505, 300, 538, 445, 13468, 2293, 437, 309, 307, 13, 50654, 50654, 407, 498, 291, 360, 1310, 13, 24223, 17, 11, 718, 311, 584, 291, 600, 658, 411, 257, 700, 1315, 293, 257, 1036, 1315, 293, 50991, 50991, 291, 2066, 552, 281, 1293, 312, 456, 11, 457, 291, 600, 658, 512, 4195, 4846, 7909, 13, 51188, 51188, 407, 291, 600, 658, 1310, 4190, 13, 51263, 51263, 407, 291, 727, 1320, 294, 11, 291, 727, 362, 2010, 419, 4609, 4195, 6915, 700, 6798, 11, 1036, 6798, 11, 51606, 51606], "temperature": 0.0, "avg_logprob": -0.1114414405822754, "compression_ratio": 1.6826923076923077, "no_caption_prob": 1.3419651622825768e-05}, {"id": 510, "seek": 201274, "start": 2018.54, "end": 2025.28, "text": " So if you do maybe.map2, let's say you've got like a first name and a last name and", "tokens": [50364, 407, 281, 1333, 295, 11, 286, 411, 281, 1371, 38593, 2505, 300, 538, 445, 13468, 2293, 437, 309, 307, 13, 50654, 50654, 407, 498, 291, 360, 1310, 13, 24223, 17, 11, 718, 311, 584, 291, 600, 658, 411, 257, 700, 1315, 293, 257, 1036, 1315, 293, 50991, 50991, 291, 2066, 552, 281, 1293, 312, 456, 11, 457, 291, 600, 658, 512, 4195, 4846, 7909, 13, 51188, 51188, 407, 291, 600, 658, 1310, 4190, 13, 51263, 51263, 407, 291, 727, 1320, 294, 11, 291, 727, 362, 2010, 419, 4609, 4195, 6915, 700, 6798, 11, 1036, 6798, 11, 51606, 51606], "temperature": 0.0, "avg_logprob": -0.1114414405822754, "compression_ratio": 1.6826923076923077, "no_caption_prob": 1.3419651622825768e-05}, {"id": 511, "seek": 201274, "start": 2025.28, "end": 2029.22, "text": " you expect them to both be there, but you've got some user input fields.", "tokens": [50364, 407, 281, 1333, 295, 11, 286, 411, 281, 1371, 38593, 2505, 300, 538, 445, 13468, 2293, 437, 309, 307, 13, 50654, 50654, 407, 498, 291, 360, 1310, 13, 24223, 17, 11, 718, 311, 584, 291, 600, 658, 411, 257, 700, 1315, 293, 257, 1036, 1315, 293, 50991, 50991, 291, 2066, 552, 281, 1293, 312, 456, 11, 457, 291, 600, 658, 512, 4195, 4846, 7909, 13, 51188, 51188, 407, 291, 600, 658, 1310, 4190, 13, 51263, 51263, 407, 291, 727, 1320, 294, 11, 291, 727, 362, 2010, 419, 4609, 4195, 6915, 700, 6798, 11, 1036, 6798, 11, 51606, 51606], "temperature": 0.0, "avg_logprob": -0.1114414405822754, "compression_ratio": 1.6826923076923077, "no_caption_prob": 1.3419651622825768e-05}, {"id": 512, "seek": 201274, "start": 2029.22, "end": 2030.72, "text": " So you've got maybe values.", "tokens": [50364, 407, 281, 1333, 295, 11, 286, 411, 281, 1371, 38593, 2505, 300, 538, 445, 13468, 2293, 437, 309, 307, 13, 50654, 50654, 407, 498, 291, 360, 1310, 13, 24223, 17, 11, 718, 311, 584, 291, 600, 658, 411, 257, 700, 1315, 293, 257, 1036, 1315, 293, 50991, 50991, 291, 2066, 552, 281, 1293, 312, 456, 11, 457, 291, 600, 658, 512, 4195, 4846, 7909, 13, 51188, 51188, 407, 291, 600, 658, 1310, 4190, 13, 51263, 51263, 407, 291, 727, 1320, 294, 11, 291, 727, 362, 2010, 419, 4609, 4195, 6915, 700, 6798, 11, 1036, 6798, 11, 51606, 51606], "temperature": 0.0, "avg_logprob": -0.1114414405822754, "compression_ratio": 1.6826923076923077, "no_caption_prob": 1.3419651622825768e-05}, {"id": 513, "seek": 201274, "start": 2030.72, "end": 2037.58, "text": " So you could pass in, you could have type alias user equals first string, last string,", "tokens": [50364, 407, 281, 1333, 295, 11, 286, 411, 281, 1371, 38593, 2505, 300, 538, 445, 13468, 2293, 437, 309, 307, 13, 50654, 50654, 407, 498, 291, 360, 1310, 13, 24223, 17, 11, 718, 311, 584, 291, 600, 658, 411, 257, 700, 1315, 293, 257, 1036, 1315, 293, 50991, 50991, 291, 2066, 552, 281, 1293, 312, 456, 11, 457, 291, 600, 658, 512, 4195, 4846, 7909, 13, 51188, 51188, 407, 291, 600, 658, 1310, 4190, 13, 51263, 51263, 407, 291, 727, 1320, 294, 11, 291, 727, 362, 2010, 419, 4609, 4195, 6915, 700, 6798, 11, 1036, 6798, 11, 51606, 51606], "temperature": 0.0, "avg_logprob": -0.1114414405822754, "compression_ratio": 1.6826923076923077, "no_caption_prob": 1.3419651622825768e-05}, {"id": 514, "seek": 203758, "start": 2037.58, "end": 2043.86, "text": " and you could pass in that user constructor, capital U user to maybe.map2 user and then", "tokens": [50364, 293, 291, 727, 1320, 294, 300, 4195, 47479, 11, 4238, 624, 4195, 281, 1310, 13, 24223, 17, 4195, 293, 550, 50678, 50678, 428, 1310, 700, 11, 1310, 1036, 13, 50807, 50807, 400, 370, 437, 307, 300, 884, 30, 50870, 50870, 1042, 11, 309, 576, 312, 10344, 281, 884, 257, 2445, 300, 2516, 257, 1310, 11, 257, 2445, 300, 2516, 51193, 51193, 257, 700, 293, 1036, 11, 597, 366, 1293, 6798, 11, 293, 550, 15182, 257, 2136, 365, 257, 2519, 1219, 700, 51510, 51510, 293, 257, 2519, 1219, 1036, 13, 51584, 51584, 583, 437, 2314, 307, 341, 307, 445, 257, 644, 295, 264, 2699, 76, 2856, 300, 562, 291, 6964, 257, 2010, 51842, 51842], "temperature": 0.0, "avg_logprob": -0.13256043973176376, "compression_ratio": 1.8032786885245902, "no_caption_prob": 1.2218919437145814e-05}, {"id": 515, "seek": 203758, "start": 2043.86, "end": 2046.4399999999998, "text": " your maybe first, maybe last.", "tokens": [50364, 293, 291, 727, 1320, 294, 300, 4195, 47479, 11, 4238, 624, 4195, 281, 1310, 13, 24223, 17, 4195, 293, 550, 50678, 50678, 428, 1310, 700, 11, 1310, 1036, 13, 50807, 50807, 400, 370, 437, 307, 300, 884, 30, 50870, 50870, 1042, 11, 309, 576, 312, 10344, 281, 884, 257, 2445, 300, 2516, 257, 1310, 11, 257, 2445, 300, 2516, 51193, 51193, 257, 700, 293, 1036, 11, 597, 366, 1293, 6798, 11, 293, 550, 15182, 257, 2136, 365, 257, 2519, 1219, 700, 51510, 51510, 293, 257, 2519, 1219, 1036, 13, 51584, 51584, 583, 437, 2314, 307, 341, 307, 445, 257, 644, 295, 264, 2699, 76, 2856, 300, 562, 291, 6964, 257, 2010, 51842, 51842], "temperature": 0.0, "avg_logprob": -0.13256043973176376, "compression_ratio": 1.8032786885245902, "no_caption_prob": 1.2218919437145814e-05}, {"id": 516, "seek": 203758, "start": 2046.4399999999998, "end": 2047.6999999999998, "text": " And so what is that doing?", "tokens": [50364, 293, 291, 727, 1320, 294, 300, 4195, 47479, 11, 4238, 624, 4195, 281, 1310, 13, 24223, 17, 4195, 293, 550, 50678, 50678, 428, 1310, 700, 11, 1310, 1036, 13, 50807, 50807, 400, 370, 437, 307, 300, 884, 30, 50870, 50870, 1042, 11, 309, 576, 312, 10344, 281, 884, 257, 2445, 300, 2516, 257, 1310, 11, 257, 2445, 300, 2516, 51193, 51193, 257, 700, 293, 1036, 11, 597, 366, 1293, 6798, 11, 293, 550, 15182, 257, 2136, 365, 257, 2519, 1219, 700, 51510, 51510, 293, 257, 2519, 1219, 1036, 13, 51584, 51584, 583, 437, 2314, 307, 341, 307, 445, 257, 644, 295, 264, 2699, 76, 2856, 300, 562, 291, 6964, 257, 2010, 51842, 51842], "temperature": 0.0, "avg_logprob": -0.13256043973176376, "compression_ratio": 1.8032786885245902, "no_caption_prob": 1.2218919437145814e-05}, {"id": 517, "seek": 203758, "start": 2047.6999999999998, "end": 2054.16, "text": " Well, it would be equivalent to doing a function that takes a maybe, a function that takes", "tokens": [50364, 293, 291, 727, 1320, 294, 300, 4195, 47479, 11, 4238, 624, 4195, 281, 1310, 13, 24223, 17, 4195, 293, 550, 50678, 50678, 428, 1310, 700, 11, 1310, 1036, 13, 50807, 50807, 400, 370, 437, 307, 300, 884, 30, 50870, 50870, 1042, 11, 309, 576, 312, 10344, 281, 884, 257, 2445, 300, 2516, 257, 1310, 11, 257, 2445, 300, 2516, 51193, 51193, 257, 700, 293, 1036, 11, 597, 366, 1293, 6798, 11, 293, 550, 15182, 257, 2136, 365, 257, 2519, 1219, 700, 51510, 51510, 293, 257, 2519, 1219, 1036, 13, 51584, 51584, 583, 437, 2314, 307, 341, 307, 445, 257, 644, 295, 264, 2699, 76, 2856, 300, 562, 291, 6964, 257, 2010, 51842, 51842], "temperature": 0.0, "avg_logprob": -0.13256043973176376, "compression_ratio": 1.8032786885245902, "no_caption_prob": 1.2218919437145814e-05}, {"id": 518, "seek": 203758, "start": 2054.16, "end": 2060.5, "text": " a first and last, which are both string, and then builds a record with a field called first", "tokens": [50364, 293, 291, 727, 1320, 294, 300, 4195, 47479, 11, 4238, 624, 4195, 281, 1310, 13, 24223, 17, 4195, 293, 550, 50678, 50678, 428, 1310, 700, 11, 1310, 1036, 13, 50807, 50807, 400, 370, 437, 307, 300, 884, 30, 50870, 50870, 1042, 11, 309, 576, 312, 10344, 281, 884, 257, 2445, 300, 2516, 257, 1310, 11, 257, 2445, 300, 2516, 51193, 51193, 257, 700, 293, 1036, 11, 597, 366, 1293, 6798, 11, 293, 550, 15182, 257, 2136, 365, 257, 2519, 1219, 700, 51510, 51510, 293, 257, 2519, 1219, 1036, 13, 51584, 51584, 583, 437, 2314, 307, 341, 307, 445, 257, 644, 295, 264, 2699, 76, 2856, 300, 562, 291, 6964, 257, 2010, 51842, 51842], "temperature": 0.0, "avg_logprob": -0.13256043973176376, "compression_ratio": 1.8032786885245902, "no_caption_prob": 1.2218919437145814e-05}, {"id": 519, "seek": 203758, "start": 2060.5, "end": 2061.98, "text": " and a field called last.", "tokens": [50364, 293, 291, 727, 1320, 294, 300, 4195, 47479, 11, 4238, 624, 4195, 281, 1310, 13, 24223, 17, 4195, 293, 550, 50678, 50678, 428, 1310, 700, 11, 1310, 1036, 13, 50807, 50807, 400, 370, 437, 307, 300, 884, 30, 50870, 50870, 1042, 11, 309, 576, 312, 10344, 281, 884, 257, 2445, 300, 2516, 257, 1310, 11, 257, 2445, 300, 2516, 51193, 51193, 257, 700, 293, 1036, 11, 597, 366, 1293, 6798, 11, 293, 550, 15182, 257, 2136, 365, 257, 2519, 1219, 700, 51510, 51510, 293, 257, 2519, 1219, 1036, 13, 51584, 51584, 583, 437, 2314, 307, 341, 307, 445, 257, 644, 295, 264, 2699, 76, 2856, 300, 562, 291, 6964, 257, 2010, 51842, 51842], "temperature": 0.0, "avg_logprob": -0.13256043973176376, "compression_ratio": 1.8032786885245902, "no_caption_prob": 1.2218919437145814e-05}, {"id": 520, "seek": 203758, "start": 2061.98, "end": 2067.14, "text": " But what happens is this is just a part of the Elm language that when you define a type", "tokens": [50364, 293, 291, 727, 1320, 294, 300, 4195, 47479, 11, 4238, 624, 4195, 281, 1310, 13, 24223, 17, 4195, 293, 550, 50678, 50678, 428, 1310, 700, 11, 1310, 1036, 13, 50807, 50807, 400, 370, 437, 307, 300, 884, 30, 50870, 50870, 1042, 11, 309, 576, 312, 10344, 281, 884, 257, 2445, 300, 2516, 257, 1310, 11, 257, 2445, 300, 2516, 51193, 51193, 257, 700, 293, 1036, 11, 597, 366, 1293, 6798, 11, 293, 550, 15182, 257, 2136, 365, 257, 2519, 1219, 700, 51510, 51510, 293, 257, 2519, 1219, 1036, 13, 51584, 51584, 583, 437, 2314, 307, 341, 307, 445, 257, 644, 295, 264, 2699, 76, 2856, 300, 562, 291, 6964, 257, 2010, 51842, 51842], "temperature": 0.0, "avg_logprob": -0.13256043973176376, "compression_ratio": 1.8032786885245902, "no_caption_prob": 1.2218919437145814e-05}, {"id": 521, "seek": 206714, "start": 2067.14, "end": 2072.44, "text": " alias of type record specifically, it doesn't happen if you define a type alias of type", "tokens": [50364, 419, 4609, 295, 2010, 2136, 4682, 11, 309, 1177, 380, 1051, 498, 291, 6964, 257, 2010, 419, 4609, 295, 2010, 50629, 50629, 560, 11, 309, 1177, 380, 1051, 498, 291, 6964, 257, 2010, 419, 4609, 295, 257, 2375, 2010, 11, 787, 337, 4682, 50885, 50885, 2010, 419, 4609, 2136, 2010, 13, 50990, 50990, 467, 486, 976, 291, 257, 47479, 2445, 300, 2516, 264, 12869, 295, 264, 2010, 295, 1184, 295, 51234, 51234, 264, 7909, 294, 300, 1900, 1668, 293, 11247, 257, 2136, 365, 2293, 729, 7909, 293, 3467, 13, 51520, 51520, 407, 300, 311, 364, 1021, 551, 281, 1223, 13, 51636, 51636], "temperature": 0.0, "avg_logprob": -0.09214525039379413, "compression_ratio": 1.9537037037037037, "no_caption_prob": 4.539734800346196e-05}, {"id": 522, "seek": 206714, "start": 2072.44, "end": 2077.56, "text": " int, it doesn't happen if you define a type alias of a custom type, only for specifically", "tokens": [50364, 419, 4609, 295, 2010, 2136, 4682, 11, 309, 1177, 380, 1051, 498, 291, 6964, 257, 2010, 419, 4609, 295, 2010, 50629, 50629, 560, 11, 309, 1177, 380, 1051, 498, 291, 6964, 257, 2010, 419, 4609, 295, 257, 2375, 2010, 11, 787, 337, 4682, 50885, 50885, 2010, 419, 4609, 2136, 2010, 13, 50990, 50990, 467, 486, 976, 291, 257, 47479, 2445, 300, 2516, 264, 12869, 295, 264, 2010, 295, 1184, 295, 51234, 51234, 264, 7909, 294, 300, 1900, 1668, 293, 11247, 257, 2136, 365, 2293, 729, 7909, 293, 3467, 13, 51520, 51520, 407, 300, 311, 364, 1021, 551, 281, 1223, 13, 51636, 51636], "temperature": 0.0, "avg_logprob": -0.09214525039379413, "compression_ratio": 1.9537037037037037, "no_caption_prob": 4.539734800346196e-05}, {"id": 523, "seek": 206714, "start": 2077.56, "end": 2079.66, "text": " type alias record type.", "tokens": [50364, 419, 4609, 295, 2010, 2136, 4682, 11, 309, 1177, 380, 1051, 498, 291, 6964, 257, 2010, 419, 4609, 295, 2010, 50629, 50629, 560, 11, 309, 1177, 380, 1051, 498, 291, 6964, 257, 2010, 419, 4609, 295, 257, 2375, 2010, 11, 787, 337, 4682, 50885, 50885, 2010, 419, 4609, 2136, 2010, 13, 50990, 50990, 467, 486, 976, 291, 257, 47479, 2445, 300, 2516, 264, 12869, 295, 264, 2010, 295, 1184, 295, 51234, 51234, 264, 7909, 294, 300, 1900, 1668, 293, 11247, 257, 2136, 365, 2293, 729, 7909, 293, 3467, 13, 51520, 51520, 407, 300, 311, 364, 1021, 551, 281, 1223, 13, 51636, 51636], "temperature": 0.0, "avg_logprob": -0.09214525039379413, "compression_ratio": 1.9537037037037037, "no_caption_prob": 4.539734800346196e-05}, {"id": 524, "seek": 206714, "start": 2079.66, "end": 2084.54, "text": " It will give you a constructor function that takes the arguments of the type of each of", "tokens": [50364, 419, 4609, 295, 2010, 2136, 4682, 11, 309, 1177, 380, 1051, 498, 291, 6964, 257, 2010, 419, 4609, 295, 2010, 50629, 50629, 560, 11, 309, 1177, 380, 1051, 498, 291, 6964, 257, 2010, 419, 4609, 295, 257, 2375, 2010, 11, 787, 337, 4682, 50885, 50885, 2010, 419, 4609, 2136, 2010, 13, 50990, 50990, 467, 486, 976, 291, 257, 47479, 2445, 300, 2516, 264, 12869, 295, 264, 2010, 295, 1184, 295, 51234, 51234, 264, 7909, 294, 300, 1900, 1668, 293, 11247, 257, 2136, 365, 2293, 729, 7909, 293, 3467, 13, 51520, 51520, 407, 300, 311, 364, 1021, 551, 281, 1223, 13, 51636, 51636], "temperature": 0.0, "avg_logprob": -0.09214525039379413, "compression_ratio": 1.9537037037037037, "no_caption_prob": 4.539734800346196e-05}, {"id": 525, "seek": 206714, "start": 2084.54, "end": 2090.2599999999998, "text": " the fields in that exact order and returns a record with exactly those fields and types.", "tokens": [50364, 419, 4609, 295, 2010, 2136, 4682, 11, 309, 1177, 380, 1051, 498, 291, 6964, 257, 2010, 419, 4609, 295, 2010, 50629, 50629, 560, 11, 309, 1177, 380, 1051, 498, 291, 6964, 257, 2010, 419, 4609, 295, 257, 2375, 2010, 11, 787, 337, 4682, 50885, 50885, 2010, 419, 4609, 2136, 2010, 13, 50990, 50990, 467, 486, 976, 291, 257, 47479, 2445, 300, 2516, 264, 12869, 295, 264, 2010, 295, 1184, 295, 51234, 51234, 264, 7909, 294, 300, 1900, 1668, 293, 11247, 257, 2136, 365, 2293, 729, 7909, 293, 3467, 13, 51520, 51520, 407, 300, 311, 364, 1021, 551, 281, 1223, 13, 51636, 51636], "temperature": 0.0, "avg_logprob": -0.09214525039379413, "compression_ratio": 1.9537037037037037, "no_caption_prob": 4.539734800346196e-05}, {"id": 526, "seek": 206714, "start": 2090.2599999999998, "end": 2092.58, "text": " So that's an important thing to understand.", "tokens": [50364, 419, 4609, 295, 2010, 2136, 4682, 11, 309, 1177, 380, 1051, 498, 291, 6964, 257, 2010, 419, 4609, 295, 2010, 50629, 50629, 560, 11, 309, 1177, 380, 1051, 498, 291, 6964, 257, 2010, 419, 4609, 295, 257, 2375, 2010, 11, 787, 337, 4682, 50885, 50885, 2010, 419, 4609, 2136, 2010, 13, 50990, 50990, 467, 486, 976, 291, 257, 47479, 2445, 300, 2516, 264, 12869, 295, 264, 2010, 295, 1184, 295, 51234, 51234, 264, 7909, 294, 300, 1900, 1668, 293, 11247, 257, 2136, 365, 2293, 729, 7909, 293, 3467, 13, 51520, 51520, 407, 300, 311, 364, 1021, 551, 281, 1223, 13, 51636, 51636], "temperature": 0.0, "avg_logprob": -0.09214525039379413, "compression_ratio": 1.9537037037037037, "no_caption_prob": 4.539734800346196e-05}, {"id": 527, "seek": 209258, "start": 2092.58, "end": 2098.34, "text": " And so I think it's a good exercise to like just write that maybe.map with an anonymous", "tokens": [50364, 400, 370, 286, 519, 309, 311, 257, 665, 5380, 281, 411, 445, 2464, 300, 1310, 13, 24223, 365, 364, 24932, 50652, 50652, 2445, 420, 257, 4926, 2445, 11, 1177, 380, 1871, 597, 291, 4382, 11, 457, 2464, 1310, 13, 24223, 24932, 50962, 50962, 2445, 300, 2516, 700, 293, 1036, 382, 12869, 293, 550, 11247, 700, 6915, 700, 11, 1036, 51292, 51292, 6915, 1036, 293, 13447, 1803, 11, 1954, 11, 300, 311, 2293, 437, 884, 2010, 419, 4609, 4195, 6915, 51606, 51606], "temperature": 0.0, "avg_logprob": -0.09989420189914933, "compression_ratio": 1.6651162790697673, "no_caption_prob": 6.643357210123213e-06}, {"id": 528, "seek": 209258, "start": 2098.34, "end": 2104.54, "text": " function or a named function, doesn't matter which you prefer, but write maybe.map anonymous", "tokens": [50364, 400, 370, 286, 519, 309, 311, 257, 665, 5380, 281, 411, 445, 2464, 300, 1310, 13, 24223, 365, 364, 24932, 50652, 50652, 2445, 420, 257, 4926, 2445, 11, 1177, 380, 1871, 597, 291, 4382, 11, 457, 2464, 1310, 13, 24223, 24932, 50962, 50962, 2445, 300, 2516, 700, 293, 1036, 382, 12869, 293, 550, 11247, 700, 6915, 700, 11, 1036, 51292, 51292, 6915, 1036, 293, 13447, 1803, 11, 1954, 11, 300, 311, 2293, 437, 884, 2010, 419, 4609, 4195, 6915, 51606, 51606], "temperature": 0.0, "avg_logprob": -0.09989420189914933, "compression_ratio": 1.6651162790697673, "no_caption_prob": 6.643357210123213e-06}, {"id": 529, "seek": 209258, "start": 2104.54, "end": 2111.14, "text": " function that takes first and last as arguments and then returns first equals first, last", "tokens": [50364, 400, 370, 286, 519, 309, 311, 257, 665, 5380, 281, 411, 445, 2464, 300, 1310, 13, 24223, 365, 364, 24932, 50652, 50652, 2445, 420, 257, 4926, 2445, 11, 1177, 380, 1871, 597, 291, 4382, 11, 457, 2464, 1310, 13, 24223, 24932, 50962, 50962, 2445, 300, 2516, 700, 293, 1036, 382, 12869, 293, 550, 11247, 700, 6915, 700, 11, 1036, 51292, 51292, 6915, 1036, 293, 13447, 1803, 11, 1954, 11, 300, 311, 2293, 437, 884, 2010, 419, 4609, 4195, 6915, 51606, 51606], "temperature": 0.0, "avg_logprob": -0.09989420189914933, "compression_ratio": 1.6651162790697673, "no_caption_prob": 6.643357210123213e-06}, {"id": 530, "seek": 209258, "start": 2111.14, "end": 2117.42, "text": " equals last and convince yourself, oh, that's exactly what doing type alias user equals", "tokens": [50364, 400, 370, 286, 519, 309, 311, 257, 665, 5380, 281, 411, 445, 2464, 300, 1310, 13, 24223, 365, 364, 24932, 50652, 50652, 2445, 420, 257, 4926, 2445, 11, 1177, 380, 1871, 597, 291, 4382, 11, 457, 2464, 1310, 13, 24223, 24932, 50962, 50962, 2445, 300, 2516, 700, 293, 1036, 382, 12869, 293, 550, 11247, 700, 6915, 700, 11, 1036, 51292, 51292, 6915, 1036, 293, 13447, 1803, 11, 1954, 11, 300, 311, 2293, 437, 884, 2010, 419, 4609, 4195, 6915, 51606, 51606], "temperature": 0.0, "avg_logprob": -0.09989420189914933, "compression_ratio": 1.6651162790697673, "no_caption_prob": 6.643357210123213e-06}, {"id": 531, "seek": 211742, "start": 2117.42, "end": 2123.38, "text": " first string last string is doing when I pass that constructor instead of that anonymous", "tokens": [50364, 700, 6798, 1036, 6798, 307, 884, 562, 286, 1320, 300, 47479, 2602, 295, 300, 24932, 50662, 50662, 2445, 307, 2293, 10344, 13, 50753, 50753, 407, 300, 311, 286, 519, 300, 311, 257, 534, 665, 551, 281, 1371, 38593, 2505, 570, 309, 3417, 411, 5585, 5911, 13, 51030, 51030, 286, 519, 341, 341, 15075, 307, 1310, 264, 7441, 295, 257, 688, 295, 264, 17616, 300, 366, 484, 456, 13, 51278, 51278, 400, 498, 291, 1401, 2699, 76, 14211, 420, 294, 264, 4868, 11, 291, 486, 536, 561, 486, 764, 300, 47479, 51530, 51530, 570, 300, 311, 733, 295, 437, 309, 311, 456, 337, 13, 51630, 51630], "temperature": 0.0, "avg_logprob": -0.10232263190724025, "compression_ratio": 1.753968253968254, "no_caption_prob": 1.4970885786169674e-05}, {"id": 532, "seek": 211742, "start": 2123.38, "end": 2125.2000000000003, "text": " function is exactly equivalent.", "tokens": [50364, 700, 6798, 1036, 6798, 307, 884, 562, 286, 1320, 300, 47479, 2602, 295, 300, 24932, 50662, 50662, 2445, 307, 2293, 10344, 13, 50753, 50753, 407, 300, 311, 286, 519, 300, 311, 257, 534, 665, 551, 281, 1371, 38593, 2505, 570, 309, 3417, 411, 5585, 5911, 13, 51030, 51030, 286, 519, 341, 341, 15075, 307, 1310, 264, 7441, 295, 257, 688, 295, 264, 17616, 300, 366, 484, 456, 13, 51278, 51278, 400, 498, 291, 1401, 2699, 76, 14211, 420, 294, 264, 4868, 11, 291, 486, 536, 561, 486, 764, 300, 47479, 51530, 51530, 570, 300, 311, 733, 295, 437, 309, 311, 456, 337, 13, 51630, 51630], "temperature": 0.0, "avg_logprob": -0.10232263190724025, "compression_ratio": 1.753968253968254, "no_caption_prob": 1.4970885786169674e-05}, {"id": 533, "seek": 211742, "start": 2125.2000000000003, "end": 2130.7400000000002, "text": " So that's I think that's a really good thing to demystify because it feels like magic otherwise.", "tokens": [50364, 700, 6798, 1036, 6798, 307, 884, 562, 286, 1320, 300, 47479, 2602, 295, 300, 24932, 50662, 50662, 2445, 307, 2293, 10344, 13, 50753, 50753, 407, 300, 311, 286, 519, 300, 311, 257, 534, 665, 551, 281, 1371, 38593, 2505, 570, 309, 3417, 411, 5585, 5911, 13, 51030, 51030, 286, 519, 341, 341, 15075, 307, 1310, 264, 7441, 295, 257, 688, 295, 264, 17616, 300, 366, 484, 456, 13, 51278, 51278, 400, 498, 291, 1401, 2699, 76, 14211, 420, 294, 264, 4868, 11, 291, 486, 536, 561, 486, 764, 300, 47479, 51530, 51530, 570, 300, 311, 733, 295, 437, 309, 311, 456, 337, 13, 51630, 51630], "temperature": 0.0, "avg_logprob": -0.10232263190724025, "compression_ratio": 1.753968253968254, "no_caption_prob": 1.4970885786169674e-05}, {"id": 534, "seek": 211742, "start": 2130.7400000000002, "end": 2135.7000000000003, "text": " I think this this confusion is maybe the fault of a lot of the tutorials that are out there.", "tokens": [50364, 700, 6798, 1036, 6798, 307, 884, 562, 286, 1320, 300, 47479, 2602, 295, 300, 24932, 50662, 50662, 2445, 307, 2293, 10344, 13, 50753, 50753, 407, 300, 311, 286, 519, 300, 311, 257, 534, 665, 551, 281, 1371, 38593, 2505, 570, 309, 3417, 411, 5585, 5911, 13, 51030, 51030, 286, 519, 341, 341, 15075, 307, 1310, 264, 7441, 295, 257, 688, 295, 264, 17616, 300, 366, 484, 456, 13, 51278, 51278, 400, 498, 291, 1401, 2699, 76, 14211, 420, 294, 264, 4868, 11, 291, 486, 536, 561, 486, 764, 300, 47479, 51530, 51530, 570, 300, 311, 733, 295, 437, 309, 311, 456, 337, 13, 51630, 51630], "temperature": 0.0, "avg_logprob": -0.10232263190724025, "compression_ratio": 1.753968253968254, "no_caption_prob": 1.4970885786169674e-05}, {"id": 535, "seek": 211742, "start": 2135.7000000000003, "end": 2140.7400000000002, "text": " And if you read Elm codes or in the wild, you will see people will use that constructor", "tokens": [50364, 700, 6798, 1036, 6798, 307, 884, 562, 286, 1320, 300, 47479, 2602, 295, 300, 24932, 50662, 50662, 2445, 307, 2293, 10344, 13, 50753, 50753, 407, 300, 311, 286, 519, 300, 311, 257, 534, 665, 551, 281, 1371, 38593, 2505, 570, 309, 3417, 411, 5585, 5911, 13, 51030, 51030, 286, 519, 341, 341, 15075, 307, 1310, 264, 7441, 295, 257, 688, 295, 264, 17616, 300, 366, 484, 456, 13, 51278, 51278, 400, 498, 291, 1401, 2699, 76, 14211, 420, 294, 264, 4868, 11, 291, 486, 536, 561, 486, 764, 300, 47479, 51530, 51530, 570, 300, 311, 733, 295, 437, 309, 311, 456, 337, 13, 51630, 51630], "temperature": 0.0, "avg_logprob": -0.10232263190724025, "compression_ratio": 1.753968253968254, "no_caption_prob": 1.4970885786169674e-05}, {"id": 536, "seek": 211742, "start": 2140.7400000000002, "end": 2142.7400000000002, "text": " because that's kind of what it's there for.", "tokens": [50364, 700, 6798, 1036, 6798, 307, 884, 562, 286, 1320, 300, 47479, 2602, 295, 300, 24932, 50662, 50662, 2445, 307, 2293, 10344, 13, 50753, 50753, 407, 300, 311, 286, 519, 300, 311, 257, 534, 665, 551, 281, 1371, 38593, 2505, 570, 309, 3417, 411, 5585, 5911, 13, 51030, 51030, 286, 519, 341, 341, 15075, 307, 1310, 264, 7441, 295, 257, 688, 295, 264, 17616, 300, 366, 484, 456, 13, 51278, 51278, 400, 498, 291, 1401, 2699, 76, 14211, 420, 294, 264, 4868, 11, 291, 486, 536, 561, 486, 764, 300, 47479, 51530, 51530, 570, 300, 311, 733, 295, 437, 309, 311, 456, 337, 13, 51630, 51630], "temperature": 0.0, "avg_logprob": -0.10232263190724025, "compression_ratio": 1.753968253968254, "no_caption_prob": 1.4970885786169674e-05}, {"id": 537, "seek": 214274, "start": 2142.74, "end": 2148.2999999999997, "text": " But if you're just learning, say, JSON decoders and you see something that says decode map", "tokens": [50364, 583, 498, 291, 434, 445, 2539, 11, 584, 11, 31828, 979, 378, 433, 293, 291, 536, 746, 300, 1619, 979, 1429, 4471, 50642, 50642, 732, 293, 550, 4238, 624, 4195, 293, 291, 536, 300, 2010, 419, 4609, 7642, 3673, 257, 588, 10585, 50932, 50932, 15302, 300, 1062, 312, 307, 411, 11, 1954, 11, 286, 478, 2902, 300, 4195, 2010, 293, 4471, 732, 307, 884, 51246, 51246, 512, 1333, 295, 12914, 420, 1131, 569, 340, 1342, 2810, 420, 746, 411, 300, 2361, 766, 295, 300, 2010, 51558, 51558, 293, 3255, 281, 445, 39763, 7690, 257, 4195, 484, 295, 264, 7909, 300, 286, 976, 309, 13, 51812, 51812], "temperature": 0.0, "avg_logprob": -0.11764705622637714, "compression_ratio": 1.6968503937007875, "no_caption_prob": 1.7777947505237535e-05}, {"id": 538, "seek": 214274, "start": 2148.2999999999997, "end": 2154.1, "text": " two and then capital U user and you see that type alias defined above a very reasonable", "tokens": [50364, 583, 498, 291, 434, 445, 2539, 11, 584, 11, 31828, 979, 378, 433, 293, 291, 536, 746, 300, 1619, 979, 1429, 4471, 50642, 50642, 732, 293, 550, 4238, 624, 4195, 293, 291, 536, 300, 2010, 419, 4609, 7642, 3673, 257, 588, 10585, 50932, 50932, 15302, 300, 1062, 312, 307, 411, 11, 1954, 11, 286, 478, 2902, 300, 4195, 2010, 293, 4471, 732, 307, 884, 51246, 51246, 512, 1333, 295, 12914, 420, 1131, 569, 340, 1342, 2810, 420, 746, 411, 300, 2361, 766, 295, 300, 2010, 51558, 51558, 293, 3255, 281, 445, 39763, 7690, 257, 4195, 484, 295, 264, 7909, 300, 286, 976, 309, 13, 51812, 51812], "temperature": 0.0, "avg_logprob": -0.11764705622637714, "compression_ratio": 1.6968503937007875, "no_caption_prob": 1.7777947505237535e-05}, {"id": 539, "seek": 214274, "start": 2154.1, "end": 2160.3799999999997, "text": " assumption that might be is like, oh, I'm giving that user type and map two is doing", "tokens": [50364, 583, 498, 291, 434, 445, 2539, 11, 584, 11, 31828, 979, 378, 433, 293, 291, 536, 746, 300, 1619, 979, 1429, 4471, 50642, 50642, 732, 293, 550, 4238, 624, 4195, 293, 291, 536, 300, 2010, 419, 4609, 7642, 3673, 257, 588, 10585, 50932, 50932, 15302, 300, 1062, 312, 307, 411, 11, 1954, 11, 286, 478, 2902, 300, 4195, 2010, 293, 4471, 732, 307, 884, 51246, 51246, 512, 1333, 295, 12914, 420, 1131, 569, 340, 1342, 2810, 420, 746, 411, 300, 2361, 766, 295, 300, 2010, 51558, 51558, 293, 3255, 281, 445, 39763, 7690, 257, 4195, 484, 295, 264, 7909, 300, 286, 976, 309, 13, 51812, 51812], "temperature": 0.0, "avg_logprob": -0.11764705622637714, "compression_ratio": 1.6968503937007875, "no_caption_prob": 1.7777947505237535e-05}, {"id": 540, "seek": 214274, "start": 2160.3799999999997, "end": 2166.62, "text": " some sort of reflection or metaprogramming or something like that based off of that type", "tokens": [50364, 583, 498, 291, 434, 445, 2539, 11, 584, 11, 31828, 979, 378, 433, 293, 291, 536, 746, 300, 1619, 979, 1429, 4471, 50642, 50642, 732, 293, 550, 4238, 624, 4195, 293, 291, 536, 300, 2010, 419, 4609, 7642, 3673, 257, 588, 10585, 50932, 50932, 15302, 300, 1062, 312, 307, 411, 11, 1954, 11, 286, 478, 2902, 300, 4195, 2010, 293, 4471, 732, 307, 884, 51246, 51246, 512, 1333, 295, 12914, 420, 1131, 569, 340, 1342, 2810, 420, 746, 411, 300, 2361, 766, 295, 300, 2010, 51558, 51558, 293, 3255, 281, 445, 39763, 7690, 257, 4195, 484, 295, 264, 7909, 300, 286, 976, 309, 13, 51812, 51812], "temperature": 0.0, "avg_logprob": -0.11764705622637714, "compression_ratio": 1.6968503937007875, "no_caption_prob": 1.7777947505237535e-05}, {"id": 541, "seek": 214274, "start": 2166.62, "end": 2171.7, "text": " and knows to just magically construct a user out of the fields that I give it.", "tokens": [50364, 583, 498, 291, 434, 445, 2539, 11, 584, 11, 31828, 979, 378, 433, 293, 291, 536, 746, 300, 1619, 979, 1429, 4471, 50642, 50642, 732, 293, 550, 4238, 624, 4195, 293, 291, 536, 300, 2010, 419, 4609, 7642, 3673, 257, 588, 10585, 50932, 50932, 15302, 300, 1062, 312, 307, 411, 11, 1954, 11, 286, 478, 2902, 300, 4195, 2010, 293, 4471, 732, 307, 884, 51246, 51246, 512, 1333, 295, 12914, 420, 1131, 569, 340, 1342, 2810, 420, 746, 411, 300, 2361, 766, 295, 300, 2010, 51558, 51558, 293, 3255, 281, 445, 39763, 7690, 257, 4195, 484, 295, 264, 7909, 300, 286, 976, 309, 13, 51812, 51812], "temperature": 0.0, "avg_logprob": -0.11764705622637714, "compression_ratio": 1.6968503937007875, "no_caption_prob": 1.7777947505237535e-05}, {"id": 542, "seek": 217170, "start": 2171.7, "end": 2174.9399999999996, "text": " And really map two doesn't want to be given a type.", "tokens": [50364, 400, 534, 4471, 732, 1177, 380, 528, 281, 312, 2212, 257, 2010, 13, 50526, 50526, 467, 2738, 281, 312, 2212, 257, 2445, 13, 50652, 50652, 407, 562, 286, 437, 286, 600, 1409, 884, 294, 452, 1065, 3579, 11, 754, 562, 2902, 5110, 322, 264, 50900, 50900, 2699, 76, 37211, 307, 1382, 281, 1009, 855, 264, 24932, 2445, 13, 51146, 51146, 467, 311, 257, 707, 857, 544, 9595, 541, 13, 51238, 51238, 400, 309, 311, 2049, 309, 311, 406, 4725, 264, 3410, 286, 478, 1382, 281, 2924, 13, 51378, 51378, 583, 286, 519, 309, 311, 4420, 281, 855, 309, 456, 445, 281, 5042, 300, 41350, 13, 51538, 51538, 407, 300, 309, 311, 588, 1850, 13, 51588, 51588], "temperature": 0.0, "avg_logprob": -0.1760905637579449, "compression_ratio": 1.6538461538461537, "no_caption_prob": 3.024111720151268e-05}, {"id": 543, "seek": 217170, "start": 2174.9399999999996, "end": 2177.46, "text": " It wants to be given a function.", "tokens": [50364, 400, 534, 4471, 732, 1177, 380, 528, 281, 312, 2212, 257, 2010, 13, 50526, 50526, 467, 2738, 281, 312, 2212, 257, 2445, 13, 50652, 50652, 407, 562, 286, 437, 286, 600, 1409, 884, 294, 452, 1065, 3579, 11, 754, 562, 2902, 5110, 322, 264, 50900, 50900, 2699, 76, 37211, 307, 1382, 281, 1009, 855, 264, 24932, 2445, 13, 51146, 51146, 467, 311, 257, 707, 857, 544, 9595, 541, 13, 51238, 51238, 400, 309, 311, 2049, 309, 311, 406, 4725, 264, 3410, 286, 478, 1382, 281, 2924, 13, 51378, 51378, 583, 286, 519, 309, 311, 4420, 281, 855, 309, 456, 445, 281, 5042, 300, 41350, 13, 51538, 51538, 407, 300, 309, 311, 588, 1850, 13, 51588, 51588], "temperature": 0.0, "avg_logprob": -0.1760905637579449, "compression_ratio": 1.6538461538461537, "no_caption_prob": 3.024111720151268e-05}, {"id": 544, "seek": 217170, "start": 2177.46, "end": 2182.4199999999996, "text": " So when I what I've started doing in my own writing, even when giving examples on the", "tokens": [50364, 400, 534, 4471, 732, 1177, 380, 528, 281, 312, 2212, 257, 2010, 13, 50526, 50526, 467, 2738, 281, 312, 2212, 257, 2445, 13, 50652, 50652, 407, 562, 286, 437, 286, 600, 1409, 884, 294, 452, 1065, 3579, 11, 754, 562, 2902, 5110, 322, 264, 50900, 50900, 2699, 76, 37211, 307, 1382, 281, 1009, 855, 264, 24932, 2445, 13, 51146, 51146, 467, 311, 257, 707, 857, 544, 9595, 541, 13, 51238, 51238, 400, 309, 311, 2049, 309, 311, 406, 4725, 264, 3410, 286, 478, 1382, 281, 2924, 13, 51378, 51378, 583, 286, 519, 309, 311, 4420, 281, 855, 309, 456, 445, 281, 5042, 300, 41350, 13, 51538, 51538, 407, 300, 309, 311, 588, 1850, 13, 51588, 51588], "temperature": 0.0, "avg_logprob": -0.1760905637579449, "compression_ratio": 1.6538461538461537, "no_caption_prob": 3.024111720151268e-05}, {"id": 545, "seek": 217170, "start": 2182.4199999999996, "end": 2187.3399999999997, "text": " Elm Slack is trying to always show the anonymous function.", "tokens": [50364, 400, 534, 4471, 732, 1177, 380, 528, 281, 312, 2212, 257, 2010, 13, 50526, 50526, 467, 2738, 281, 312, 2212, 257, 2445, 13, 50652, 50652, 407, 562, 286, 437, 286, 600, 1409, 884, 294, 452, 1065, 3579, 11, 754, 562, 2902, 5110, 322, 264, 50900, 50900, 2699, 76, 37211, 307, 1382, 281, 1009, 855, 264, 24932, 2445, 13, 51146, 51146, 467, 311, 257, 707, 857, 544, 9595, 541, 13, 51238, 51238, 400, 309, 311, 2049, 309, 311, 406, 4725, 264, 3410, 286, 478, 1382, 281, 2924, 13, 51378, 51378, 583, 286, 519, 309, 311, 4420, 281, 855, 309, 456, 445, 281, 5042, 300, 41350, 13, 51538, 51538, 407, 300, 309, 311, 588, 1850, 13, 51588, 51588], "temperature": 0.0, "avg_logprob": -0.1760905637579449, "compression_ratio": 1.6538461538461537, "no_caption_prob": 3.024111720151268e-05}, {"id": 546, "seek": 217170, "start": 2187.3399999999997, "end": 2189.18, "text": " It's a little bit more verbose.", "tokens": [50364, 400, 534, 4471, 732, 1177, 380, 528, 281, 312, 2212, 257, 2010, 13, 50526, 50526, 467, 2738, 281, 312, 2212, 257, 2445, 13, 50652, 50652, 407, 562, 286, 437, 286, 600, 1409, 884, 294, 452, 1065, 3579, 11, 754, 562, 2902, 5110, 322, 264, 50900, 50900, 2699, 76, 37211, 307, 1382, 281, 1009, 855, 264, 24932, 2445, 13, 51146, 51146, 467, 311, 257, 707, 857, 544, 9595, 541, 13, 51238, 51238, 400, 309, 311, 2049, 309, 311, 406, 4725, 264, 3410, 286, 478, 1382, 281, 2924, 13, 51378, 51378, 583, 286, 519, 309, 311, 4420, 281, 855, 309, 456, 445, 281, 5042, 300, 41350, 13, 51538, 51538, 407, 300, 309, 311, 588, 1850, 13, 51588, 51588], "temperature": 0.0, "avg_logprob": -0.1760905637579449, "compression_ratio": 1.6538461538461537, "no_caption_prob": 3.024111720151268e-05}, {"id": 547, "seek": 217170, "start": 2189.18, "end": 2191.98, "text": " And it's often it's not necessarily the concept I'm trying to teach.", "tokens": [50364, 400, 534, 4471, 732, 1177, 380, 528, 281, 312, 2212, 257, 2010, 13, 50526, 50526, 467, 2738, 281, 312, 2212, 257, 2445, 13, 50652, 50652, 407, 562, 286, 437, 286, 600, 1409, 884, 294, 452, 1065, 3579, 11, 754, 562, 2902, 5110, 322, 264, 50900, 50900, 2699, 76, 37211, 307, 1382, 281, 1009, 855, 264, 24932, 2445, 13, 51146, 51146, 467, 311, 257, 707, 857, 544, 9595, 541, 13, 51238, 51238, 400, 309, 311, 2049, 309, 311, 406, 4725, 264, 3410, 286, 478, 1382, 281, 2924, 13, 51378, 51378, 583, 286, 519, 309, 311, 4420, 281, 855, 309, 456, 445, 281, 5042, 300, 41350, 13, 51538, 51538, 407, 300, 309, 311, 588, 1850, 13, 51588, 51588], "temperature": 0.0, "avg_logprob": -0.1760905637579449, "compression_ratio": 1.6538461538461537, "no_caption_prob": 3.024111720151268e-05}, {"id": 548, "seek": 217170, "start": 2191.98, "end": 2195.18, "text": " But I think it's useful to show it there just to avoid that misconception.", "tokens": [50364, 400, 534, 4471, 732, 1177, 380, 528, 281, 312, 2212, 257, 2010, 13, 50526, 50526, 467, 2738, 281, 312, 2212, 257, 2445, 13, 50652, 50652, 407, 562, 286, 437, 286, 600, 1409, 884, 294, 452, 1065, 3579, 11, 754, 562, 2902, 5110, 322, 264, 50900, 50900, 2699, 76, 37211, 307, 1382, 281, 1009, 855, 264, 24932, 2445, 13, 51146, 51146, 467, 311, 257, 707, 857, 544, 9595, 541, 13, 51238, 51238, 400, 309, 311, 2049, 309, 311, 406, 4725, 264, 3410, 286, 478, 1382, 281, 2924, 13, 51378, 51378, 583, 286, 519, 309, 311, 4420, 281, 855, 309, 456, 445, 281, 5042, 300, 41350, 13, 51538, 51538, 407, 300, 309, 311, 588, 1850, 13, 51588, 51588], "temperature": 0.0, "avg_logprob": -0.1760905637579449, "compression_ratio": 1.6538461538461537, "no_caption_prob": 3.024111720151268e-05}, {"id": 549, "seek": 217170, "start": 2195.18, "end": 2196.18, "text": " So that it's very clear.", "tokens": [50364, 400, 534, 4471, 732, 1177, 380, 528, 281, 312, 2212, 257, 2010, 13, 50526, 50526, 467, 2738, 281, 312, 2212, 257, 2445, 13, 50652, 50652, 407, 562, 286, 437, 286, 600, 1409, 884, 294, 452, 1065, 3579, 11, 754, 562, 2902, 5110, 322, 264, 50900, 50900, 2699, 76, 37211, 307, 1382, 281, 1009, 855, 264, 24932, 2445, 13, 51146, 51146, 467, 311, 257, 707, 857, 544, 9595, 541, 13, 51238, 51238, 400, 309, 311, 2049, 309, 311, 406, 4725, 264, 3410, 286, 478, 1382, 281, 2924, 13, 51378, 51378, 583, 286, 519, 309, 311, 4420, 281, 855, 309, 456, 445, 281, 5042, 300, 41350, 13, 51538, 51538, 407, 300, 309, 311, 588, 1850, 13, 51588, 51588], "temperature": 0.0, "avg_logprob": -0.1760905637579449, "compression_ratio": 1.6538461538461537, "no_caption_prob": 3.024111720151268e-05}, {"id": 550, "seek": 219618, "start": 2196.18, "end": 2202.58, "text": " Oh, map two, map three, whatever takes a function, not a type as its first argument.", "tokens": [50364, 876, 11, 4471, 732, 11, 4471, 1045, 11, 2035, 2516, 257, 2445, 11, 406, 257, 2010, 382, 1080, 700, 6770, 13, 50684, 50684, 1779, 13, 50734, 50734, 400, 300, 3641, 3742, 512, 50012, 13, 50808, 50808, 1779, 13, 50858, 50858, 400, 550, 291, 584, 11, 538, 264, 636, 11, 456, 311, 257, 402, 2652, 474, 337, 341, 2445, 13, 51022, 51022, 1079, 13, 51072, 51072, 2589, 291, 458, 300, 562, 291, 6964, 257, 2010, 419, 4609, 337, 257, 2136, 11, 291, 483, 257, 47479, 2445, 51402, 51402, 300, 575, 264, 912, 1315, 382, 428, 2010, 293, 291, 727, 550, 2541, 493, 428, 420, 652, 428, 979, 19866, 51766, 51766], "temperature": 0.0, "avg_logprob": -0.1389184384732633, "compression_ratio": 1.7, "no_caption_prob": 3.120108158327639e-05}, {"id": 551, "seek": 219618, "start": 2202.58, "end": 2203.58, "text": " Right.", "tokens": [50364, 876, 11, 4471, 732, 11, 4471, 1045, 11, 2035, 2516, 257, 2445, 11, 406, 257, 2010, 382, 1080, 700, 6770, 13, 50684, 50684, 1779, 13, 50734, 50734, 400, 300, 3641, 3742, 512, 50012, 13, 50808, 50808, 1779, 13, 50858, 50858, 400, 550, 291, 584, 11, 538, 264, 636, 11, 456, 311, 257, 402, 2652, 474, 337, 341, 2445, 13, 51022, 51022, 1079, 13, 51072, 51072, 2589, 291, 458, 300, 562, 291, 6964, 257, 2010, 419, 4609, 337, 257, 2136, 11, 291, 483, 257, 47479, 2445, 51402, 51402, 300, 575, 264, 912, 1315, 382, 428, 2010, 293, 291, 727, 550, 2541, 493, 428, 420, 652, 428, 979, 19866, 51766, 51766], "temperature": 0.0, "avg_logprob": -0.1389184384732633, "compression_ratio": 1.7, "no_caption_prob": 3.120108158327639e-05}, {"id": 552, "seek": 219618, "start": 2203.58, "end": 2205.06, "text": " And that avoids some misconceptions.", "tokens": [50364, 876, 11, 4471, 732, 11, 4471, 1045, 11, 2035, 2516, 257, 2445, 11, 406, 257, 2010, 382, 1080, 700, 6770, 13, 50684, 50684, 1779, 13, 50734, 50734, 400, 300, 3641, 3742, 512, 50012, 13, 50808, 50808, 1779, 13, 50858, 50858, 400, 550, 291, 584, 11, 538, 264, 636, 11, 456, 311, 257, 402, 2652, 474, 337, 341, 2445, 13, 51022, 51022, 1079, 13, 51072, 51072, 2589, 291, 458, 300, 562, 291, 6964, 257, 2010, 419, 4609, 337, 257, 2136, 11, 291, 483, 257, 47479, 2445, 51402, 51402, 300, 575, 264, 912, 1315, 382, 428, 2010, 293, 291, 727, 550, 2541, 493, 428, 420, 652, 428, 979, 19866, 51766, 51766], "temperature": 0.0, "avg_logprob": -0.1389184384732633, "compression_ratio": 1.7, "no_caption_prob": 3.120108158327639e-05}, {"id": 553, "seek": 219618, "start": 2205.06, "end": 2206.06, "text": " Right.", "tokens": [50364, 876, 11, 4471, 732, 11, 4471, 1045, 11, 2035, 2516, 257, 2445, 11, 406, 257, 2010, 382, 1080, 700, 6770, 13, 50684, 50684, 1779, 13, 50734, 50734, 400, 300, 3641, 3742, 512, 50012, 13, 50808, 50808, 1779, 13, 50858, 50858, 400, 550, 291, 584, 11, 538, 264, 636, 11, 456, 311, 257, 402, 2652, 474, 337, 341, 2445, 13, 51022, 51022, 1079, 13, 51072, 51072, 2589, 291, 458, 300, 562, 291, 6964, 257, 2010, 419, 4609, 337, 257, 2136, 11, 291, 483, 257, 47479, 2445, 51402, 51402, 300, 575, 264, 912, 1315, 382, 428, 2010, 293, 291, 727, 550, 2541, 493, 428, 420, 652, 428, 979, 19866, 51766, 51766], "temperature": 0.0, "avg_logprob": -0.1389184384732633, "compression_ratio": 1.7, "no_caption_prob": 3.120108158327639e-05}, {"id": 554, "seek": 219618, "start": 2206.06, "end": 2209.3399999999997, "text": " And then you say, by the way, there's a shorthand for this function.", "tokens": [50364, 876, 11, 4471, 732, 11, 4471, 1045, 11, 2035, 2516, 257, 2445, 11, 406, 257, 2010, 382, 1080, 700, 6770, 13, 50684, 50684, 1779, 13, 50734, 50734, 400, 300, 3641, 3742, 512, 50012, 13, 50808, 50808, 1779, 13, 50858, 50858, 400, 550, 291, 584, 11, 538, 264, 636, 11, 456, 311, 257, 402, 2652, 474, 337, 341, 2445, 13, 51022, 51022, 1079, 13, 51072, 51072, 2589, 291, 458, 300, 562, 291, 6964, 257, 2010, 419, 4609, 337, 257, 2136, 11, 291, 483, 257, 47479, 2445, 51402, 51402, 300, 575, 264, 912, 1315, 382, 428, 2010, 293, 291, 727, 550, 2541, 493, 428, 420, 652, 428, 979, 19866, 51766, 51766], "temperature": 0.0, "avg_logprob": -0.1389184384732633, "compression_ratio": 1.7, "no_caption_prob": 3.120108158327639e-05}, {"id": 555, "seek": 219618, "start": 2209.3399999999997, "end": 2210.3399999999997, "text": " Yes.", "tokens": [50364, 876, 11, 4471, 732, 11, 4471, 1045, 11, 2035, 2516, 257, 2445, 11, 406, 257, 2010, 382, 1080, 700, 6770, 13, 50684, 50684, 1779, 13, 50734, 50734, 400, 300, 3641, 3742, 512, 50012, 13, 50808, 50808, 1779, 13, 50858, 50858, 400, 550, 291, 584, 11, 538, 264, 636, 11, 456, 311, 257, 402, 2652, 474, 337, 341, 2445, 13, 51022, 51022, 1079, 13, 51072, 51072, 2589, 291, 458, 300, 562, 291, 6964, 257, 2010, 419, 4609, 337, 257, 2136, 11, 291, 483, 257, 47479, 2445, 51402, 51402, 300, 575, 264, 912, 1315, 382, 428, 2010, 293, 291, 727, 550, 2541, 493, 428, 420, 652, 428, 979, 19866, 51766, 51766], "temperature": 0.0, "avg_logprob": -0.1389184384732633, "compression_ratio": 1.7, "no_caption_prob": 3.120108158327639e-05}, {"id": 556, "seek": 219618, "start": 2210.3399999999997, "end": 2216.94, "text": " Did you know that when you define a type alias for a record, you get a constructor function", "tokens": [50364, 876, 11, 4471, 732, 11, 4471, 1045, 11, 2035, 2516, 257, 2445, 11, 406, 257, 2010, 382, 1080, 700, 6770, 13, 50684, 50684, 1779, 13, 50734, 50734, 400, 300, 3641, 3742, 512, 50012, 13, 50808, 50808, 1779, 13, 50858, 50858, 400, 550, 291, 584, 11, 538, 264, 636, 11, 456, 311, 257, 402, 2652, 474, 337, 341, 2445, 13, 51022, 51022, 1079, 13, 51072, 51072, 2589, 291, 458, 300, 562, 291, 6964, 257, 2010, 419, 4609, 337, 257, 2136, 11, 291, 483, 257, 47479, 2445, 51402, 51402, 300, 575, 264, 912, 1315, 382, 428, 2010, 293, 291, 727, 550, 2541, 493, 428, 420, 652, 428, 979, 19866, 51766, 51766], "temperature": 0.0, "avg_logprob": -0.1389184384732633, "compression_ratio": 1.7, "no_caption_prob": 3.120108158327639e-05}, {"id": 557, "seek": 219618, "start": 2216.94, "end": 2224.22, "text": " that has the same name as your type and you could then clean up your or make your decoder", "tokens": [50364, 876, 11, 4471, 732, 11, 4471, 1045, 11, 2035, 2516, 257, 2445, 11, 406, 257, 2010, 382, 1080, 700, 6770, 13, 50684, 50684, 1779, 13, 50734, 50734, 400, 300, 3641, 3742, 512, 50012, 13, 50808, 50808, 1779, 13, 50858, 50858, 400, 550, 291, 584, 11, 538, 264, 636, 11, 456, 311, 257, 402, 2652, 474, 337, 341, 2445, 13, 51022, 51022, 1079, 13, 51072, 51072, 2589, 291, 458, 300, 562, 291, 6964, 257, 2010, 419, 4609, 337, 257, 2136, 11, 291, 483, 257, 47479, 2445, 51402, 51402, 300, 575, 264, 912, 1315, 382, 428, 2010, 293, 291, 727, 550, 2541, 493, 428, 420, 652, 428, 979, 19866, 51766, 51766], "temperature": 0.0, "avg_logprob": -0.1389184384732633, "compression_ratio": 1.7, "no_caption_prob": 3.120108158327639e-05}, {"id": 558, "seek": 222422, "start": 2224.22, "end": 2226.2599999999998, "text": " a little bit terser by using that.", "tokens": [50364, 257, 707, 857, 256, 433, 260, 538, 1228, 300, 13, 50466, 50466, 286, 519, 472, 1778, 983, 309, 3417, 411, 746, 3657, 307, 570, 321, 1128, 764, 300, 2445, 50760, 50760, 14517, 813, 294, 264, 1315, 295, 364, 2580, 1166, 13, 50914, 50914, 509, 1128, 420, 291, 13752, 536, 411, 4195, 428, 1065, 14708, 13, 51180, 51180, 509, 1009, 536, 257, 2136, 365, 700, 293, 1036, 22206, 13, 51458, 51458, 1610, 286, 600, 2351, 926, 293, 561, 534, 500, 380, 411, 1228, 264, 2136, 419, 4609, 1315, 382, 257, 2445, 51816, 51816], "temperature": 0.0, "avg_logprob": -0.15868822057196436, "compression_ratio": 1.6504424778761062, "no_caption_prob": 2.506938108126633e-05}, {"id": 559, "seek": 222422, "start": 2226.2599999999998, "end": 2232.14, "text": " I think one reason why it feels like something weird is because we never use that function", "tokens": [50364, 257, 707, 857, 256, 433, 260, 538, 1228, 300, 13, 50466, 50466, 286, 519, 472, 1778, 983, 309, 3417, 411, 746, 3657, 307, 570, 321, 1128, 764, 300, 2445, 50760, 50760, 14517, 813, 294, 264, 1315, 295, 364, 2580, 1166, 13, 50914, 50914, 509, 1128, 420, 291, 13752, 536, 411, 4195, 428, 1065, 14708, 13, 51180, 51180, 509, 1009, 536, 257, 2136, 365, 700, 293, 1036, 22206, 13, 51458, 51458, 1610, 286, 600, 2351, 926, 293, 561, 534, 500, 380, 411, 1228, 264, 2136, 419, 4609, 1315, 382, 257, 2445, 51816, 51816], "temperature": 0.0, "avg_logprob": -0.15868822057196436, "compression_ratio": 1.6504424778761062, "no_caption_prob": 2.506938108126633e-05}, {"id": 560, "seek": 222422, "start": 2232.14, "end": 2235.22, "text": " elsewhere than in the name of an applicative.", "tokens": [50364, 257, 707, 857, 256, 433, 260, 538, 1228, 300, 13, 50466, 50466, 286, 519, 472, 1778, 983, 309, 3417, 411, 746, 3657, 307, 570, 321, 1128, 764, 300, 2445, 50760, 50760, 14517, 813, 294, 264, 1315, 295, 364, 2580, 1166, 13, 50914, 50914, 509, 1128, 420, 291, 13752, 536, 411, 4195, 428, 1065, 14708, 13, 51180, 51180, 509, 1009, 536, 257, 2136, 365, 700, 293, 1036, 22206, 13, 51458, 51458, 1610, 286, 600, 2351, 926, 293, 561, 534, 500, 380, 411, 1228, 264, 2136, 419, 4609, 1315, 382, 257, 2445, 51816, 51816], "temperature": 0.0, "avg_logprob": -0.15868822057196436, "compression_ratio": 1.6504424778761062, "no_caption_prob": 2.506938108126633e-05}, {"id": 561, "seek": 222422, "start": 2235.22, "end": 2240.54, "text": " You never or you rarely see like user your own angles.", "tokens": [50364, 257, 707, 857, 256, 433, 260, 538, 1228, 300, 13, 50466, 50466, 286, 519, 472, 1778, 983, 309, 3417, 411, 746, 3657, 307, 570, 321, 1128, 764, 300, 2445, 50760, 50760, 14517, 813, 294, 264, 1315, 295, 364, 2580, 1166, 13, 50914, 50914, 509, 1128, 420, 291, 13752, 536, 411, 4195, 428, 1065, 14708, 13, 51180, 51180, 509, 1009, 536, 257, 2136, 365, 700, 293, 1036, 22206, 13, 51458, 51458, 1610, 286, 600, 2351, 926, 293, 561, 534, 500, 380, 411, 1228, 264, 2136, 419, 4609, 1315, 382, 257, 2445, 51816, 51816], "temperature": 0.0, "avg_logprob": -0.15868822057196436, "compression_ratio": 1.6504424778761062, "no_caption_prob": 2.506938108126633e-05}, {"id": 562, "seek": 222422, "start": 2240.54, "end": 2246.1, "text": " You always see a record with first and last specified.", "tokens": [50364, 257, 707, 857, 256, 433, 260, 538, 1228, 300, 13, 50466, 50466, 286, 519, 472, 1778, 983, 309, 3417, 411, 746, 3657, 307, 570, 321, 1128, 764, 300, 2445, 50760, 50760, 14517, 813, 294, 264, 1315, 295, 364, 2580, 1166, 13, 50914, 50914, 509, 1128, 420, 291, 13752, 536, 411, 4195, 428, 1065, 14708, 13, 51180, 51180, 509, 1009, 536, 257, 2136, 365, 700, 293, 1036, 22206, 13, 51458, 51458, 1610, 286, 600, 2351, 926, 293, 561, 534, 500, 380, 411, 1228, 264, 2136, 419, 4609, 1315, 382, 257, 2445, 51816, 51816], "temperature": 0.0, "avg_logprob": -0.15868822057196436, "compression_ratio": 1.6504424778761062, "no_caption_prob": 2.506938108126633e-05}, {"id": 563, "seek": 222422, "start": 2246.1, "end": 2253.2599999999998, "text": " Or I've asked around and people really don't like using the record alias name as a function", "tokens": [50364, 257, 707, 857, 256, 433, 260, 538, 1228, 300, 13, 50466, 50466, 286, 519, 472, 1778, 983, 309, 3417, 411, 746, 3657, 307, 570, 321, 1128, 764, 300, 2445, 50760, 50760, 14517, 813, 294, 264, 1315, 295, 364, 2580, 1166, 13, 50914, 50914, 509, 1128, 420, 291, 13752, 536, 411, 4195, 428, 1065, 14708, 13, 51180, 51180, 509, 1009, 536, 257, 2136, 365, 700, 293, 1036, 22206, 13, 51458, 51458, 1610, 286, 600, 2351, 926, 293, 561, 534, 500, 380, 411, 1228, 264, 2136, 419, 4609, 1315, 382, 257, 2445, 51816, 51816], "temperature": 0.0, "avg_logprob": -0.15868822057196436, "compression_ratio": 1.6504424778761062, "no_caption_prob": 2.506938108126633e-05}, {"id": 564, "seek": 225326, "start": 2253.26, "end": 2255.1800000000003, "text": " outside of an applicative.", "tokens": [50364, 2380, 295, 364, 2580, 1166, 13, 50460, 50460, 1779, 13, 50510, 50510, 1436, 291, 393, 483, 264, 5288, 295, 264, 7909, 7467, 493, 13, 50728, 50728, 1436, 498, 291, 1319, 264, 1315, 11, 498, 291, 362, 2010, 419, 4609, 4195, 6915, 700, 6798, 11, 1036, 51022, 51022, 6798, 586, 11, 293, 550, 291, 1884, 257, 4195, 538, 1566, 4195, 6915, 4238, 624, 4195, 11, 293, 550, 51332, 51332, 382, 700, 1315, 6798, 293, 550, 257, 1036, 1315, 6798, 13, 51464, 51464, 823, 498, 291, 11, 291, 458, 11, 291, 1391, 2759, 380, 11, 457, 498, 291, 645, 281, 1319, 264, 1668, 295, 700, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.16471246024158515, "compression_ratio": 1.8387096774193548, "no_caption_prob": 5.771887117589358e-06}, {"id": 565, "seek": 225326, "start": 2255.1800000000003, "end": 2256.1800000000003, "text": " Right.", "tokens": [50364, 2380, 295, 364, 2580, 1166, 13, 50460, 50460, 1779, 13, 50510, 50510, 1436, 291, 393, 483, 264, 5288, 295, 264, 7909, 7467, 493, 13, 50728, 50728, 1436, 498, 291, 1319, 264, 1315, 11, 498, 291, 362, 2010, 419, 4609, 4195, 6915, 700, 6798, 11, 1036, 51022, 51022, 6798, 586, 11, 293, 550, 291, 1884, 257, 4195, 538, 1566, 4195, 6915, 4238, 624, 4195, 11, 293, 550, 51332, 51332, 382, 700, 1315, 6798, 293, 550, 257, 1036, 1315, 6798, 13, 51464, 51464, 823, 498, 291, 11, 291, 458, 11, 291, 1391, 2759, 380, 11, 457, 498, 291, 645, 281, 1319, 264, 1668, 295, 700, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.16471246024158515, "compression_ratio": 1.8387096774193548, "no_caption_prob": 5.771887117589358e-06}, {"id": 566, "seek": 225326, "start": 2256.1800000000003, "end": 2260.5400000000004, "text": " Because you can get the names of the fields mixed up.", "tokens": [50364, 2380, 295, 364, 2580, 1166, 13, 50460, 50460, 1779, 13, 50510, 50510, 1436, 291, 393, 483, 264, 5288, 295, 264, 7909, 7467, 493, 13, 50728, 50728, 1436, 498, 291, 1319, 264, 1315, 11, 498, 291, 362, 2010, 419, 4609, 4195, 6915, 700, 6798, 11, 1036, 51022, 51022, 6798, 586, 11, 293, 550, 291, 1884, 257, 4195, 538, 1566, 4195, 6915, 4238, 624, 4195, 11, 293, 550, 51332, 51332, 382, 700, 1315, 6798, 293, 550, 257, 1036, 1315, 6798, 13, 51464, 51464, 823, 498, 291, 11, 291, 458, 11, 291, 1391, 2759, 380, 11, 457, 498, 291, 645, 281, 1319, 264, 1668, 295, 700, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.16471246024158515, "compression_ratio": 1.8387096774193548, "no_caption_prob": 5.771887117589358e-06}, {"id": 567, "seek": 225326, "start": 2260.5400000000004, "end": 2266.42, "text": " Because if you change the name, if you have type alias user equals first string, last", "tokens": [50364, 2380, 295, 364, 2580, 1166, 13, 50460, 50460, 1779, 13, 50510, 50510, 1436, 291, 393, 483, 264, 5288, 295, 264, 7909, 7467, 493, 13, 50728, 50728, 1436, 498, 291, 1319, 264, 1315, 11, 498, 291, 362, 2010, 419, 4609, 4195, 6915, 700, 6798, 11, 1036, 51022, 51022, 6798, 586, 11, 293, 550, 291, 1884, 257, 4195, 538, 1566, 4195, 6915, 4238, 624, 4195, 11, 293, 550, 51332, 51332, 382, 700, 1315, 6798, 293, 550, 257, 1036, 1315, 6798, 13, 51464, 51464, 823, 498, 291, 11, 291, 458, 11, 291, 1391, 2759, 380, 11, 457, 498, 291, 645, 281, 1319, 264, 1668, 295, 700, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.16471246024158515, "compression_ratio": 1.8387096774193548, "no_caption_prob": 5.771887117589358e-06}, {"id": 568, "seek": 225326, "start": 2266.42, "end": 2272.6200000000003, "text": " string now, and then you create a user by saying user equals capital U user, and then", "tokens": [50364, 2380, 295, 364, 2580, 1166, 13, 50460, 50460, 1779, 13, 50510, 50510, 1436, 291, 393, 483, 264, 5288, 295, 264, 7909, 7467, 493, 13, 50728, 50728, 1436, 498, 291, 1319, 264, 1315, 11, 498, 291, 362, 2010, 419, 4609, 4195, 6915, 700, 6798, 11, 1036, 51022, 51022, 6798, 586, 11, 293, 550, 291, 1884, 257, 4195, 538, 1566, 4195, 6915, 4238, 624, 4195, 11, 293, 550, 51332, 51332, 382, 700, 1315, 6798, 293, 550, 257, 1036, 1315, 6798, 13, 51464, 51464, 823, 498, 291, 11, 291, 458, 11, 291, 1391, 2759, 380, 11, 457, 498, 291, 645, 281, 1319, 264, 1668, 295, 700, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.16471246024158515, "compression_ratio": 1.8387096774193548, "no_caption_prob": 5.771887117589358e-06}, {"id": 569, "seek": 225326, "start": 2272.6200000000003, "end": 2275.26, "text": " as first name string and then a last name string.", "tokens": [50364, 2380, 295, 364, 2580, 1166, 13, 50460, 50460, 1779, 13, 50510, 50510, 1436, 291, 393, 483, 264, 5288, 295, 264, 7909, 7467, 493, 13, 50728, 50728, 1436, 498, 291, 1319, 264, 1315, 11, 498, 291, 362, 2010, 419, 4609, 4195, 6915, 700, 6798, 11, 1036, 51022, 51022, 6798, 586, 11, 293, 550, 291, 1884, 257, 4195, 538, 1566, 4195, 6915, 4238, 624, 4195, 11, 293, 550, 51332, 51332, 382, 700, 1315, 6798, 293, 550, 257, 1036, 1315, 6798, 13, 51464, 51464, 823, 498, 291, 11, 291, 458, 11, 291, 1391, 2759, 380, 11, 457, 498, 291, 645, 281, 1319, 264, 1668, 295, 700, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.16471246024158515, "compression_ratio": 1.8387096774193548, "no_caption_prob": 5.771887117589358e-06}, {"id": 570, "seek": 225326, "start": 2275.26, "end": 2279.26, "text": " Now if you, you know, you probably wouldn't, but if you were to change the order of first", "tokens": [50364, 2380, 295, 364, 2580, 1166, 13, 50460, 50460, 1779, 13, 50510, 50510, 1436, 291, 393, 483, 264, 5288, 295, 264, 7909, 7467, 493, 13, 50728, 50728, 1436, 498, 291, 1319, 264, 1315, 11, 498, 291, 362, 2010, 419, 4609, 4195, 6915, 700, 6798, 11, 1036, 51022, 51022, 6798, 586, 11, 293, 550, 291, 1884, 257, 4195, 538, 1566, 4195, 6915, 4238, 624, 4195, 11, 293, 550, 51332, 51332, 382, 700, 1315, 6798, 293, 550, 257, 1036, 1315, 6798, 13, 51464, 51464, 823, 498, 291, 11, 291, 458, 11, 291, 1391, 2759, 380, 11, 457, 498, 291, 645, 281, 1319, 264, 1668, 295, 700, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.16471246024158515, "compression_ratio": 1.8387096774193548, "no_caption_prob": 5.771887117589358e-06}, {"id": 571, "seek": 227926, "start": 2279.26, "end": 2285.26, "text": " and last in the record alias, now you're passing strings, you don't get a compiler error.", "tokens": [50364, 293, 1036, 294, 264, 2136, 419, 4609, 11, 586, 291, 434, 8437, 13985, 11, 291, 500, 380, 483, 257, 31958, 6713, 13, 50664, 50664, 400, 1936, 291, 600, 2942, 257, 4583, 295, 1016, 621, 882, 1296, 437, 264, 2519, 1315, 307, 293, 264, 2158, 51005, 51005, 300, 311, 885, 4678, 281, 309, 13, 51058, 51058, 13813, 498, 291, 445, 848, 4195, 6915, 20411, 2136, 700, 6915, 6798, 11, 1036, 6915, 6798, 11, 51414, 51414, 456, 311, 572, 1242, 309, 7467, 493, 13, 51494, 51494, 400, 370, 291, 393, 5042, 300, 15075, 13, 51625, 51625, 1171, 2059, 11, 286, 519, 309, 311, 1570, 264, 885, 4638, 295, 4473, 264, 2519, 5288, 570, 436, 434, 51836, 51836], "temperature": 0.0, "avg_logprob": -0.11273069463224493, "compression_ratio": 1.7007299270072993, "no_caption_prob": 1.4970855772844516e-05}, {"id": 572, "seek": 227926, "start": 2285.26, "end": 2292.0800000000004, "text": " And basically you've created a layer of indirection between what the field name is and the value", "tokens": [50364, 293, 1036, 294, 264, 2136, 419, 4609, 11, 586, 291, 434, 8437, 13985, 11, 291, 500, 380, 483, 257, 31958, 6713, 13, 50664, 50664, 400, 1936, 291, 600, 2942, 257, 4583, 295, 1016, 621, 882, 1296, 437, 264, 2519, 1315, 307, 293, 264, 2158, 51005, 51005, 300, 311, 885, 4678, 281, 309, 13, 51058, 51058, 13813, 498, 291, 445, 848, 4195, 6915, 20411, 2136, 700, 6915, 6798, 11, 1036, 6915, 6798, 11, 51414, 51414, 456, 311, 572, 1242, 309, 7467, 493, 13, 51494, 51494, 400, 370, 291, 393, 5042, 300, 15075, 13, 51625, 51625, 1171, 2059, 11, 286, 519, 309, 311, 1570, 264, 885, 4638, 295, 4473, 264, 2519, 5288, 570, 436, 434, 51836, 51836], "temperature": 0.0, "avg_logprob": -0.11273069463224493, "compression_ratio": 1.7007299270072993, "no_caption_prob": 1.4970855772844516e-05}, {"id": 573, "seek": 227926, "start": 2292.0800000000004, "end": 2293.1400000000003, "text": " that's being passed to it.", "tokens": [50364, 293, 1036, 294, 264, 2136, 419, 4609, 11, 586, 291, 434, 8437, 13985, 11, 291, 500, 380, 483, 257, 31958, 6713, 13, 50664, 50664, 400, 1936, 291, 600, 2942, 257, 4583, 295, 1016, 621, 882, 1296, 437, 264, 2519, 1315, 307, 293, 264, 2158, 51005, 51005, 300, 311, 885, 4678, 281, 309, 13, 51058, 51058, 13813, 498, 291, 445, 848, 4195, 6915, 20411, 2136, 700, 6915, 6798, 11, 1036, 6915, 6798, 11, 51414, 51414, 456, 311, 572, 1242, 309, 7467, 493, 13, 51494, 51494, 400, 370, 291, 393, 5042, 300, 15075, 13, 51625, 51625, 1171, 2059, 11, 286, 519, 309, 311, 1570, 264, 885, 4638, 295, 4473, 264, 2519, 5288, 570, 436, 434, 51836, 51836], "temperature": 0.0, "avg_logprob": -0.11273069463224493, "compression_ratio": 1.7007299270072993, "no_caption_prob": 1.4970855772844516e-05}, {"id": 574, "seek": 227926, "start": 2293.1400000000003, "end": 2300.26, "text": " Whereas if you just said user equals literal record first equals string, last equals string,", "tokens": [50364, 293, 1036, 294, 264, 2136, 419, 4609, 11, 586, 291, 434, 8437, 13985, 11, 291, 500, 380, 483, 257, 31958, 6713, 13, 50664, 50664, 400, 1936, 291, 600, 2942, 257, 4583, 295, 1016, 621, 882, 1296, 437, 264, 2519, 1315, 307, 293, 264, 2158, 51005, 51005, 300, 311, 885, 4678, 281, 309, 13, 51058, 51058, 13813, 498, 291, 445, 848, 4195, 6915, 20411, 2136, 700, 6915, 6798, 11, 1036, 6915, 6798, 11, 51414, 51414, 456, 311, 572, 1242, 309, 7467, 493, 13, 51494, 51494, 400, 370, 291, 393, 5042, 300, 15075, 13, 51625, 51625, 1171, 2059, 11, 286, 519, 309, 311, 1570, 264, 885, 4638, 295, 4473, 264, 2519, 5288, 570, 436, 434, 51836, 51836], "temperature": 0.0, "avg_logprob": -0.11273069463224493, "compression_ratio": 1.7007299270072993, "no_caption_prob": 1.4970855772844516e-05}, {"id": 575, "seek": 227926, "start": 2300.26, "end": 2301.86, "text": " there's no getting it mixed up.", "tokens": [50364, 293, 1036, 294, 264, 2136, 419, 4609, 11, 586, 291, 434, 8437, 13985, 11, 291, 500, 380, 483, 257, 31958, 6713, 13, 50664, 50664, 400, 1936, 291, 600, 2942, 257, 4583, 295, 1016, 621, 882, 1296, 437, 264, 2519, 1315, 307, 293, 264, 2158, 51005, 51005, 300, 311, 885, 4678, 281, 309, 13, 51058, 51058, 13813, 498, 291, 445, 848, 4195, 6915, 20411, 2136, 700, 6915, 6798, 11, 1036, 6915, 6798, 11, 51414, 51414, 456, 311, 572, 1242, 309, 7467, 493, 13, 51494, 51494, 400, 370, 291, 393, 5042, 300, 15075, 13, 51625, 51625, 1171, 2059, 11, 286, 519, 309, 311, 1570, 264, 885, 4638, 295, 4473, 264, 2519, 5288, 570, 436, 434, 51836, 51836], "temperature": 0.0, "avg_logprob": -0.11273069463224493, "compression_ratio": 1.7007299270072993, "no_caption_prob": 1.4970855772844516e-05}, {"id": 576, "seek": 227926, "start": 2301.86, "end": 2304.48, "text": " And so you can avoid that confusion.", "tokens": [50364, 293, 1036, 294, 264, 2136, 419, 4609, 11, 586, 291, 434, 8437, 13985, 11, 291, 500, 380, 483, 257, 31958, 6713, 13, 50664, 50664, 400, 1936, 291, 600, 2942, 257, 4583, 295, 1016, 621, 882, 1296, 437, 264, 2519, 1315, 307, 293, 264, 2158, 51005, 51005, 300, 311, 885, 4678, 281, 309, 13, 51058, 51058, 13813, 498, 291, 445, 848, 4195, 6915, 20411, 2136, 700, 6915, 6798, 11, 1036, 6915, 6798, 11, 51414, 51414, 456, 311, 572, 1242, 309, 7467, 493, 13, 51494, 51494, 400, 370, 291, 393, 5042, 300, 15075, 13, 51625, 51625, 1171, 2059, 11, 286, 519, 309, 311, 1570, 264, 885, 4638, 295, 4473, 264, 2519, 5288, 570, 436, 434, 51836, 51836], "temperature": 0.0, "avg_logprob": -0.11273069463224493, "compression_ratio": 1.7007299270072993, "no_caption_prob": 1.4970855772844516e-05}, {"id": 577, "seek": 227926, "start": 2304.48, "end": 2308.7000000000003, "text": " For myself, I think it's less the being afraid of changing the field names because they're", "tokens": [50364, 293, 1036, 294, 264, 2136, 419, 4609, 11, 586, 291, 434, 8437, 13985, 11, 291, 500, 380, 483, 257, 31958, 6713, 13, 50664, 50664, 400, 1936, 291, 600, 2942, 257, 4583, 295, 1016, 621, 882, 1296, 437, 264, 2519, 1315, 307, 293, 264, 2158, 51005, 51005, 300, 311, 885, 4678, 281, 309, 13, 51058, 51058, 13813, 498, 291, 445, 848, 4195, 6915, 20411, 2136, 700, 6915, 6798, 11, 1036, 6915, 6798, 11, 51414, 51414, 456, 311, 572, 1242, 309, 7467, 493, 13, 51494, 51494, 400, 370, 291, 393, 5042, 300, 15075, 13, 51625, 51625, 1171, 2059, 11, 286, 519, 309, 311, 1570, 264, 885, 4638, 295, 4473, 264, 2519, 5288, 570, 436, 434, 51836, 51836], "temperature": 0.0, "avg_logprob": -0.11273069463224493, "compression_ratio": 1.7007299270072993, "no_caption_prob": 1.4970855772844516e-05}, {"id": 578, "seek": 230870, "start": 2308.7, "end": 2311.46, "text": " pretty much never changed the order.", "tokens": [50364, 1238, 709, 1128, 3105, 264, 1668, 13, 50502, 50502, 583, 309, 311, 544, 445, 264, 1401, 2310, 13, 50626, 50626, 759, 291, 536, 264, 4195, 47479, 293, 550, 732, 13985, 11, 309, 311, 406, 4258, 6322, 597, 50844, 50844, 472, 307, 264, 700, 11, 597, 472, 307, 264, 1036, 13, 50944, 50944, 400, 370, 309, 311, 534, 1481, 337, 1401, 2310, 281, 362, 264, 2519, 5288, 382, 16949, 13, 51197, 51197, 663, 311, 2673, 1570, 1021, 498, 291, 434, 584, 884, 257, 979, 19866, 11, 570, 562, 291, 574, 412, 51508, 51508, 264, 11, 439, 264, 979, 19866, 11, 264, 707, 2609, 2519, 979, 378, 433, 2507, 309, 11, 291, 603, 536, 264, 31828, 51756, 51756, 2519, 5288, 13, 51806, 51806], "temperature": 0.0, "avg_logprob": -0.11992651466431657, "compression_ratio": 1.728624535315985, "no_caption_prob": 1.280528522329405e-05}, {"id": 579, "seek": 230870, "start": 2311.46, "end": 2313.9399999999996, "text": " But it's more just the readability.", "tokens": [50364, 1238, 709, 1128, 3105, 264, 1668, 13, 50502, 50502, 583, 309, 311, 544, 445, 264, 1401, 2310, 13, 50626, 50626, 759, 291, 536, 264, 4195, 47479, 293, 550, 732, 13985, 11, 309, 311, 406, 4258, 6322, 597, 50844, 50844, 472, 307, 264, 700, 11, 597, 472, 307, 264, 1036, 13, 50944, 50944, 400, 370, 309, 311, 534, 1481, 337, 1401, 2310, 281, 362, 264, 2519, 5288, 382, 16949, 13, 51197, 51197, 663, 311, 2673, 1570, 1021, 498, 291, 434, 584, 884, 257, 979, 19866, 11, 570, 562, 291, 574, 412, 51508, 51508, 264, 11, 439, 264, 979, 19866, 11, 264, 707, 2609, 2519, 979, 378, 433, 2507, 309, 11, 291, 603, 536, 264, 31828, 51756, 51756, 2519, 5288, 13, 51806, 51806], "temperature": 0.0, "avg_logprob": -0.11992651466431657, "compression_ratio": 1.728624535315985, "no_caption_prob": 1.280528522329405e-05}, {"id": 580, "seek": 230870, "start": 2313.9399999999996, "end": 2318.2999999999997, "text": " If you see the user constructor and then two strings, it's not immediately obvious which", "tokens": [50364, 1238, 709, 1128, 3105, 264, 1668, 13, 50502, 50502, 583, 309, 311, 544, 445, 264, 1401, 2310, 13, 50626, 50626, 759, 291, 536, 264, 4195, 47479, 293, 550, 732, 13985, 11, 309, 311, 406, 4258, 6322, 597, 50844, 50844, 472, 307, 264, 700, 11, 597, 472, 307, 264, 1036, 13, 50944, 50944, 400, 370, 309, 311, 534, 1481, 337, 1401, 2310, 281, 362, 264, 2519, 5288, 382, 16949, 13, 51197, 51197, 663, 311, 2673, 1570, 1021, 498, 291, 434, 584, 884, 257, 979, 19866, 11, 570, 562, 291, 574, 412, 51508, 51508, 264, 11, 439, 264, 979, 19866, 11, 264, 707, 2609, 2519, 979, 378, 433, 2507, 309, 11, 291, 603, 536, 264, 31828, 51756, 51756, 2519, 5288, 13, 51806, 51806], "temperature": 0.0, "avg_logprob": -0.11992651466431657, "compression_ratio": 1.728624535315985, "no_caption_prob": 1.280528522329405e-05}, {"id": 581, "seek": 230870, "start": 2318.2999999999997, "end": 2320.2999999999997, "text": " one is the first, which one is the last.", "tokens": [50364, 1238, 709, 1128, 3105, 264, 1668, 13, 50502, 50502, 583, 309, 311, 544, 445, 264, 1401, 2310, 13, 50626, 50626, 759, 291, 536, 264, 4195, 47479, 293, 550, 732, 13985, 11, 309, 311, 406, 4258, 6322, 597, 50844, 50844, 472, 307, 264, 700, 11, 597, 472, 307, 264, 1036, 13, 50944, 50944, 400, 370, 309, 311, 534, 1481, 337, 1401, 2310, 281, 362, 264, 2519, 5288, 382, 16949, 13, 51197, 51197, 663, 311, 2673, 1570, 1021, 498, 291, 434, 584, 884, 257, 979, 19866, 11, 570, 562, 291, 574, 412, 51508, 51508, 264, 11, 439, 264, 979, 19866, 11, 264, 707, 2609, 2519, 979, 378, 433, 2507, 309, 11, 291, 603, 536, 264, 31828, 51756, 51756, 2519, 5288, 13, 51806, 51806], "temperature": 0.0, "avg_logprob": -0.11992651466431657, "compression_ratio": 1.728624535315985, "no_caption_prob": 1.280528522329405e-05}, {"id": 582, "seek": 230870, "start": 2320.2999999999997, "end": 2325.3599999999997, "text": " And so it's really nice for readability to have the field names as labels.", "tokens": [50364, 1238, 709, 1128, 3105, 264, 1668, 13, 50502, 50502, 583, 309, 311, 544, 445, 264, 1401, 2310, 13, 50626, 50626, 759, 291, 536, 264, 4195, 47479, 293, 550, 732, 13985, 11, 309, 311, 406, 4258, 6322, 597, 50844, 50844, 472, 307, 264, 700, 11, 597, 472, 307, 264, 1036, 13, 50944, 50944, 400, 370, 309, 311, 534, 1481, 337, 1401, 2310, 281, 362, 264, 2519, 5288, 382, 16949, 13, 51197, 51197, 663, 311, 2673, 1570, 1021, 498, 291, 434, 584, 884, 257, 979, 19866, 11, 570, 562, 291, 574, 412, 51508, 51508, 264, 11, 439, 264, 979, 19866, 11, 264, 707, 2609, 2519, 979, 378, 433, 2507, 309, 11, 291, 603, 536, 264, 31828, 51756, 51756, 2519, 5288, 13, 51806, 51806], "temperature": 0.0, "avg_logprob": -0.11992651466431657, "compression_ratio": 1.728624535315985, "no_caption_prob": 1.280528522329405e-05}, {"id": 583, "seek": 230870, "start": 2325.3599999999997, "end": 2331.58, "text": " That's usually less important if you're say doing a decoder, because when you look at", "tokens": [50364, 1238, 709, 1128, 3105, 264, 1668, 13, 50502, 50502, 583, 309, 311, 544, 445, 264, 1401, 2310, 13, 50626, 50626, 759, 291, 536, 264, 4195, 47479, 293, 550, 732, 13985, 11, 309, 311, 406, 4258, 6322, 597, 50844, 50844, 472, 307, 264, 700, 11, 597, 472, 307, 264, 1036, 13, 50944, 50944, 400, 370, 309, 311, 534, 1481, 337, 1401, 2310, 281, 362, 264, 2519, 5288, 382, 16949, 13, 51197, 51197, 663, 311, 2673, 1570, 1021, 498, 291, 434, 584, 884, 257, 979, 19866, 11, 570, 562, 291, 574, 412, 51508, 51508, 264, 11, 439, 264, 979, 19866, 11, 264, 707, 2609, 2519, 979, 378, 433, 2507, 309, 11, 291, 603, 536, 264, 31828, 51756, 51756, 2519, 5288, 13, 51806, 51806], "temperature": 0.0, "avg_logprob": -0.11992651466431657, "compression_ratio": 1.728624535315985, "no_caption_prob": 1.280528522329405e-05}, {"id": 584, "seek": 230870, "start": 2331.58, "end": 2336.54, "text": " the, all the decoder, the little individual field decoders below it, you'll see the JSON", "tokens": [50364, 1238, 709, 1128, 3105, 264, 1668, 13, 50502, 50502, 583, 309, 311, 544, 445, 264, 1401, 2310, 13, 50626, 50626, 759, 291, 536, 264, 4195, 47479, 293, 550, 732, 13985, 11, 309, 311, 406, 4258, 6322, 597, 50844, 50844, 472, 307, 264, 700, 11, 597, 472, 307, 264, 1036, 13, 50944, 50944, 400, 370, 309, 311, 534, 1481, 337, 1401, 2310, 281, 362, 264, 2519, 5288, 382, 16949, 13, 51197, 51197, 663, 311, 2673, 1570, 1021, 498, 291, 434, 584, 884, 257, 979, 19866, 11, 570, 562, 291, 574, 412, 51508, 51508, 264, 11, 439, 264, 979, 19866, 11, 264, 707, 2609, 2519, 979, 378, 433, 2507, 309, 11, 291, 603, 536, 264, 31828, 51756, 51756, 2519, 5288, 13, 51806, 51806], "temperature": 0.0, "avg_logprob": -0.11992651466431657, "compression_ratio": 1.728624535315985, "no_caption_prob": 1.280528522329405e-05}, {"id": 585, "seek": 230870, "start": 2336.54, "end": 2337.54, "text": " field names.", "tokens": [50364, 1238, 709, 1128, 3105, 264, 1668, 13, 50502, 50502, 583, 309, 311, 544, 445, 264, 1401, 2310, 13, 50626, 50626, 759, 291, 536, 264, 4195, 47479, 293, 550, 732, 13985, 11, 309, 311, 406, 4258, 6322, 597, 50844, 50844, 472, 307, 264, 700, 11, 597, 472, 307, 264, 1036, 13, 50944, 50944, 400, 370, 309, 311, 534, 1481, 337, 1401, 2310, 281, 362, 264, 2519, 5288, 382, 16949, 13, 51197, 51197, 663, 311, 2673, 1570, 1021, 498, 291, 434, 584, 884, 257, 979, 19866, 11, 570, 562, 291, 574, 412, 51508, 51508, 264, 11, 439, 264, 979, 19866, 11, 264, 707, 2609, 2519, 979, 378, 433, 2507, 309, 11, 291, 603, 536, 264, 31828, 51756, 51756, 2519, 5288, 13, 51806, 51806], "temperature": 0.0, "avg_logprob": -0.11992651466431657, "compression_ratio": 1.728624535315985, "no_caption_prob": 1.280528522329405e-05}, {"id": 586, "seek": 233754, "start": 2337.54, "end": 2340.22, "text": " And generally you can tell from the JSON field names what they are.", "tokens": [50364, 400, 5101, 291, 393, 980, 490, 264, 31828, 2519, 5288, 437, 436, 366, 13, 50498, 50498, 865, 13, 50548, 50548, 1610, 295, 264, 979, 378, 433, 13, 50598, 50598, 1779, 13, 50648, 50648, 407, 309, 311, 1238, 6322, 1237, 412, 264, 979, 19866, 11, 437, 311, 264, 700, 1315, 11, 437, 311, 264, 1036, 1315, 11, 50806, 50806, 570, 321, 434, 516, 281, 312, 13761, 281, 264, 5288, 1062, 406, 312, 2293, 264, 912, 294, 264, 50990, 50990, 31828, 13, 51040, 51040, 400, 300, 311, 472, 295, 264, 534, 1481, 721, 466, 979, 378, 433, 13, 51162, 51162, 440, 31828, 1177, 380, 643, 281, 2995, 11, 457, 286, 727, 1391, 980, 437, 436, 366, 13, 51506, 51506, 400, 370, 309, 3417, 257, 707, 857, 40997, 281, 5055, 300, 666, 364, 24932, 2445, 13, 51830, 51830], "temperature": 0.0, "avg_logprob": -0.13114110570754448, "compression_ratio": 1.7394366197183098, "no_caption_prob": 1.3007016605115496e-05}, {"id": 587, "seek": 233754, "start": 2340.22, "end": 2341.22, "text": " Yeah.", "tokens": [50364, 400, 5101, 291, 393, 980, 490, 264, 31828, 2519, 5288, 437, 436, 366, 13, 50498, 50498, 865, 13, 50548, 50548, 1610, 295, 264, 979, 378, 433, 13, 50598, 50598, 1779, 13, 50648, 50648, 407, 309, 311, 1238, 6322, 1237, 412, 264, 979, 19866, 11, 437, 311, 264, 700, 1315, 11, 437, 311, 264, 1036, 1315, 11, 50806, 50806, 570, 321, 434, 516, 281, 312, 13761, 281, 264, 5288, 1062, 406, 312, 2293, 264, 912, 294, 264, 50990, 50990, 31828, 13, 51040, 51040, 400, 300, 311, 472, 295, 264, 534, 1481, 721, 466, 979, 378, 433, 13, 51162, 51162, 440, 31828, 1177, 380, 643, 281, 2995, 11, 457, 286, 727, 1391, 980, 437, 436, 366, 13, 51506, 51506, 400, 370, 309, 3417, 257, 707, 857, 40997, 281, 5055, 300, 666, 364, 24932, 2445, 13, 51830, 51830], "temperature": 0.0, "avg_logprob": -0.13114110570754448, "compression_ratio": 1.7394366197183098, "no_caption_prob": 1.3007016605115496e-05}, {"id": 588, "seek": 233754, "start": 2341.22, "end": 2342.22, "text": " Or of the decoders.", "tokens": [50364, 400, 5101, 291, 393, 980, 490, 264, 31828, 2519, 5288, 437, 436, 366, 13, 50498, 50498, 865, 13, 50548, 50548, 1610, 295, 264, 979, 378, 433, 13, 50598, 50598, 1779, 13, 50648, 50648, 407, 309, 311, 1238, 6322, 1237, 412, 264, 979, 19866, 11, 437, 311, 264, 700, 1315, 11, 437, 311, 264, 1036, 1315, 11, 50806, 50806, 570, 321, 434, 516, 281, 312, 13761, 281, 264, 5288, 1062, 406, 312, 2293, 264, 912, 294, 264, 50990, 50990, 31828, 13, 51040, 51040, 400, 300, 311, 472, 295, 264, 534, 1481, 721, 466, 979, 378, 433, 13, 51162, 51162, 440, 31828, 1177, 380, 643, 281, 2995, 11, 457, 286, 727, 1391, 980, 437, 436, 366, 13, 51506, 51506, 400, 370, 309, 3417, 257, 707, 857, 40997, 281, 5055, 300, 666, 364, 24932, 2445, 13, 51830, 51830], "temperature": 0.0, "avg_logprob": -0.13114110570754448, "compression_ratio": 1.7394366197183098, "no_caption_prob": 1.3007016605115496e-05}, {"id": 589, "seek": 233754, "start": 2342.22, "end": 2343.22, "text": " Right.", "tokens": [50364, 400, 5101, 291, 393, 980, 490, 264, 31828, 2519, 5288, 437, 436, 366, 13, 50498, 50498, 865, 13, 50548, 50548, 1610, 295, 264, 979, 378, 433, 13, 50598, 50598, 1779, 13, 50648, 50648, 407, 309, 311, 1238, 6322, 1237, 412, 264, 979, 19866, 11, 437, 311, 264, 700, 1315, 11, 437, 311, 264, 1036, 1315, 11, 50806, 50806, 570, 321, 434, 516, 281, 312, 13761, 281, 264, 5288, 1062, 406, 312, 2293, 264, 912, 294, 264, 50990, 50990, 31828, 13, 51040, 51040, 400, 300, 311, 472, 295, 264, 534, 1481, 721, 466, 979, 378, 433, 13, 51162, 51162, 440, 31828, 1177, 380, 643, 281, 2995, 11, 457, 286, 727, 1391, 980, 437, 436, 366, 13, 51506, 51506, 400, 370, 309, 3417, 257, 707, 857, 40997, 281, 5055, 300, 666, 364, 24932, 2445, 13, 51830, 51830], "temperature": 0.0, "avg_logprob": -0.13114110570754448, "compression_ratio": 1.7394366197183098, "no_caption_prob": 1.3007016605115496e-05}, {"id": 590, "seek": 233754, "start": 2343.22, "end": 2346.38, "text": " So it's pretty obvious looking at the decoder, what's the first name, what's the last name,", "tokens": [50364, 400, 5101, 291, 393, 980, 490, 264, 31828, 2519, 5288, 437, 436, 366, 13, 50498, 50498, 865, 13, 50548, 50548, 1610, 295, 264, 979, 378, 433, 13, 50598, 50598, 1779, 13, 50648, 50648, 407, 309, 311, 1238, 6322, 1237, 412, 264, 979, 19866, 11, 437, 311, 264, 700, 1315, 11, 437, 311, 264, 1036, 1315, 11, 50806, 50806, 570, 321, 434, 516, 281, 312, 13761, 281, 264, 5288, 1062, 406, 312, 2293, 264, 912, 294, 264, 50990, 50990, 31828, 13, 51040, 51040, 400, 300, 311, 472, 295, 264, 534, 1481, 721, 466, 979, 378, 433, 13, 51162, 51162, 440, 31828, 1177, 380, 643, 281, 2995, 11, 457, 286, 727, 1391, 980, 437, 436, 366, 13, 51506, 51506, 400, 370, 309, 3417, 257, 707, 857, 40997, 281, 5055, 300, 666, 364, 24932, 2445, 13, 51830, 51830], "temperature": 0.0, "avg_logprob": -0.13114110570754448, "compression_ratio": 1.7394366197183098, "no_caption_prob": 1.3007016605115496e-05}, {"id": 591, "seek": 233754, "start": 2346.38, "end": 2350.06, "text": " because we're going to be referring to the names might not be exactly the same in the", "tokens": [50364, 400, 5101, 291, 393, 980, 490, 264, 31828, 2519, 5288, 437, 436, 366, 13, 50498, 50498, 865, 13, 50548, 50548, 1610, 295, 264, 979, 378, 433, 13, 50598, 50598, 1779, 13, 50648, 50648, 407, 309, 311, 1238, 6322, 1237, 412, 264, 979, 19866, 11, 437, 311, 264, 700, 1315, 11, 437, 311, 264, 1036, 1315, 11, 50806, 50806, 570, 321, 434, 516, 281, 312, 13761, 281, 264, 5288, 1062, 406, 312, 2293, 264, 912, 294, 264, 50990, 50990, 31828, 13, 51040, 51040, 400, 300, 311, 472, 295, 264, 534, 1481, 721, 466, 979, 378, 433, 13, 51162, 51162, 440, 31828, 1177, 380, 643, 281, 2995, 11, 457, 286, 727, 1391, 980, 437, 436, 366, 13, 51506, 51506, 400, 370, 309, 3417, 257, 707, 857, 40997, 281, 5055, 300, 666, 364, 24932, 2445, 13, 51830, 51830], "temperature": 0.0, "avg_logprob": -0.13114110570754448, "compression_ratio": 1.7394366197183098, "no_caption_prob": 1.3007016605115496e-05}, {"id": 592, "seek": 233754, "start": 2350.06, "end": 2351.06, "text": " JSON.", "tokens": [50364, 400, 5101, 291, 393, 980, 490, 264, 31828, 2519, 5288, 437, 436, 366, 13, 50498, 50498, 865, 13, 50548, 50548, 1610, 295, 264, 979, 378, 433, 13, 50598, 50598, 1779, 13, 50648, 50648, 407, 309, 311, 1238, 6322, 1237, 412, 264, 979, 19866, 11, 437, 311, 264, 700, 1315, 11, 437, 311, 264, 1036, 1315, 11, 50806, 50806, 570, 321, 434, 516, 281, 312, 13761, 281, 264, 5288, 1062, 406, 312, 2293, 264, 912, 294, 264, 50990, 50990, 31828, 13, 51040, 51040, 400, 300, 311, 472, 295, 264, 534, 1481, 721, 466, 979, 378, 433, 13, 51162, 51162, 440, 31828, 1177, 380, 643, 281, 2995, 11, 457, 286, 727, 1391, 980, 437, 436, 366, 13, 51506, 51506, 400, 370, 309, 3417, 257, 707, 857, 40997, 281, 5055, 300, 666, 364, 24932, 2445, 13, 51830, 51830], "temperature": 0.0, "avg_logprob": -0.13114110570754448, "compression_ratio": 1.7394366197183098, "no_caption_prob": 1.3007016605115496e-05}, {"id": 593, "seek": 233754, "start": 2351.06, "end": 2353.5, "text": " And that's one of the really nice things about decoders.", "tokens": [50364, 400, 5101, 291, 393, 980, 490, 264, 31828, 2519, 5288, 437, 436, 366, 13, 50498, 50498, 865, 13, 50548, 50548, 1610, 295, 264, 979, 378, 433, 13, 50598, 50598, 1779, 13, 50648, 50648, 407, 309, 311, 1238, 6322, 1237, 412, 264, 979, 19866, 11, 437, 311, 264, 700, 1315, 11, 437, 311, 264, 1036, 1315, 11, 50806, 50806, 570, 321, 434, 516, 281, 312, 13761, 281, 264, 5288, 1062, 406, 312, 2293, 264, 912, 294, 264, 50990, 50990, 31828, 13, 51040, 51040, 400, 300, 311, 472, 295, 264, 534, 1481, 721, 466, 979, 378, 433, 13, 51162, 51162, 440, 31828, 1177, 380, 643, 281, 2995, 11, 457, 286, 727, 1391, 980, 437, 436, 366, 13, 51506, 51506, 400, 370, 309, 3417, 257, 707, 857, 40997, 281, 5055, 300, 666, 364, 24932, 2445, 13, 51830, 51830], "temperature": 0.0, "avg_logprob": -0.13114110570754448, "compression_ratio": 1.7394366197183098, "no_caption_prob": 1.3007016605115496e-05}, {"id": 594, "seek": 233754, "start": 2353.5, "end": 2360.38, "text": " The JSON doesn't need to match, but I could probably tell what they are.", "tokens": [50364, 400, 5101, 291, 393, 980, 490, 264, 31828, 2519, 5288, 437, 436, 366, 13, 50498, 50498, 865, 13, 50548, 50548, 1610, 295, 264, 979, 378, 433, 13, 50598, 50598, 1779, 13, 50648, 50648, 407, 309, 311, 1238, 6322, 1237, 412, 264, 979, 19866, 11, 437, 311, 264, 700, 1315, 11, 437, 311, 264, 1036, 1315, 11, 50806, 50806, 570, 321, 434, 516, 281, 312, 13761, 281, 264, 5288, 1062, 406, 312, 2293, 264, 912, 294, 264, 50990, 50990, 31828, 13, 51040, 51040, 400, 300, 311, 472, 295, 264, 534, 1481, 721, 466, 979, 378, 433, 13, 51162, 51162, 440, 31828, 1177, 380, 643, 281, 2995, 11, 457, 286, 727, 1391, 980, 437, 436, 366, 13, 51506, 51506, 400, 370, 309, 3417, 257, 707, 857, 40997, 281, 5055, 300, 666, 364, 24932, 2445, 13, 51830, 51830], "temperature": 0.0, "avg_logprob": -0.13114110570754448, "compression_ratio": 1.7394366197183098, "no_caption_prob": 1.3007016605115496e-05}, {"id": 595, "seek": 233754, "start": 2360.38, "end": 2366.86, "text": " And so it feels a little bit redundant to copy that into an anonymous function.", "tokens": [50364, 400, 5101, 291, 393, 980, 490, 264, 31828, 2519, 5288, 437, 436, 366, 13, 50498, 50498, 865, 13, 50548, 50548, 1610, 295, 264, 979, 378, 433, 13, 50598, 50598, 1779, 13, 50648, 50648, 407, 309, 311, 1238, 6322, 1237, 412, 264, 979, 19866, 11, 437, 311, 264, 700, 1315, 11, 437, 311, 264, 1036, 1315, 11, 50806, 50806, 570, 321, 434, 516, 281, 312, 13761, 281, 264, 5288, 1062, 406, 312, 2293, 264, 912, 294, 264, 50990, 50990, 31828, 13, 51040, 51040, 400, 300, 311, 472, 295, 264, 534, 1481, 721, 466, 979, 378, 433, 13, 51162, 51162, 440, 31828, 1177, 380, 643, 281, 2995, 11, 457, 286, 727, 1391, 980, 437, 436, 366, 13, 51506, 51506, 400, 370, 309, 3417, 257, 707, 857, 40997, 281, 5055, 300, 666, 364, 24932, 2445, 13, 51830, 51830], "temperature": 0.0, "avg_logprob": -0.13114110570754448, "compression_ratio": 1.7394366197183098, "no_caption_prob": 1.3007016605115496e-05}, {"id": 596, "seek": 236686, "start": 2366.86, "end": 2371.2200000000003, "text": " And it also gets really long and verbose for larger records.", "tokens": [50364, 400, 309, 611, 2170, 534, 938, 293, 9595, 541, 337, 4833, 7724, 13, 50582, 50582, 509, 362, 1266, 11, 945, 9317, 294, 264, 2136, 11, 550, 300, 393, 483, 534, 9595, 541, 11, 597, 286, 2041, 300, 50906, 50906, 1310, 6689, 505, 534, 9594, 666, 293, 4471, 257, 3037, 295, 264, 1333, 295, 2580, 1166, 5102, 13, 51286, 51286, 492, 600, 2825, 257, 688, 466, 257, 4471, 732, 11, 4471, 1045, 11, 293, 370, 322, 11, 457, 729, 366, 516, 281, 312, 19362, 13, 51588, 51588, 2048, 1065, 6405, 291, 764, 307, 516, 281, 362, 11, 291, 458, 11, 4471, 493, 281, 4471, 3180, 420, 4461, 436, 51830, 51830], "temperature": 0.0, "avg_logprob": -0.1489730181994739, "compression_ratio": 1.6177606177606179, "no_caption_prob": 2.6425698251841823e-06}, {"id": 597, "seek": 236686, "start": 2371.2200000000003, "end": 2377.7000000000003, "text": " You have 10, 20 keys in the record, then that can get really verbose, which I guess that", "tokens": [50364, 400, 309, 611, 2170, 534, 938, 293, 9595, 541, 337, 4833, 7724, 13, 50582, 50582, 509, 362, 1266, 11, 945, 9317, 294, 264, 2136, 11, 550, 300, 393, 483, 534, 9595, 541, 11, 597, 286, 2041, 300, 50906, 50906, 1310, 6689, 505, 534, 9594, 666, 293, 4471, 257, 3037, 295, 264, 1333, 295, 2580, 1166, 5102, 13, 51286, 51286, 492, 600, 2825, 257, 688, 466, 257, 4471, 732, 11, 4471, 1045, 11, 293, 370, 322, 11, 457, 729, 366, 516, 281, 312, 19362, 13, 51588, 51588, 2048, 1065, 6405, 291, 764, 307, 516, 281, 362, 11, 291, 458, 11, 4471, 493, 281, 4471, 3180, 420, 4461, 436, 51830, 51830], "temperature": 0.0, "avg_logprob": -0.1489730181994739, "compression_ratio": 1.6177606177606179, "no_caption_prob": 2.6425698251841823e-06}, {"id": 598, "seek": 236686, "start": 2377.7000000000003, "end": 2385.3, "text": " maybe leads us really nicely into and map a version of the sort of applicative pattern.", "tokens": [50364, 400, 309, 611, 2170, 534, 938, 293, 9595, 541, 337, 4833, 7724, 13, 50582, 50582, 509, 362, 1266, 11, 945, 9317, 294, 264, 2136, 11, 550, 300, 393, 483, 534, 9595, 541, 11, 597, 286, 2041, 300, 50906, 50906, 1310, 6689, 505, 534, 9594, 666, 293, 4471, 257, 3037, 295, 264, 1333, 295, 2580, 1166, 5102, 13, 51286, 51286, 492, 600, 2825, 257, 688, 466, 257, 4471, 732, 11, 4471, 1045, 11, 293, 370, 322, 11, 457, 729, 366, 516, 281, 312, 19362, 13, 51588, 51588, 2048, 1065, 6405, 291, 764, 307, 516, 281, 362, 11, 291, 458, 11, 4471, 493, 281, 4471, 3180, 420, 4461, 436, 51830, 51830], "temperature": 0.0, "avg_logprob": -0.1489730181994739, "compression_ratio": 1.6177606177606179, "no_caption_prob": 2.6425698251841823e-06}, {"id": 599, "seek": 236686, "start": 2385.3, "end": 2391.34, "text": " We've talked a lot about a map two, map three, and so on, but those are going to be finite.", "tokens": [50364, 400, 309, 611, 2170, 534, 938, 293, 9595, 541, 337, 4833, 7724, 13, 50582, 50582, 509, 362, 1266, 11, 945, 9317, 294, 264, 2136, 11, 550, 300, 393, 483, 534, 9595, 541, 11, 597, 286, 2041, 300, 50906, 50906, 1310, 6689, 505, 534, 9594, 666, 293, 4471, 257, 3037, 295, 264, 1333, 295, 2580, 1166, 5102, 13, 51286, 51286, 492, 600, 2825, 257, 688, 466, 257, 4471, 732, 11, 4471, 1045, 11, 293, 370, 322, 11, 457, 729, 366, 516, 281, 312, 19362, 13, 51588, 51588, 2048, 1065, 6405, 291, 764, 307, 516, 281, 362, 11, 291, 458, 11, 4471, 493, 281, 4471, 3180, 420, 4461, 436, 51830, 51830], "temperature": 0.0, "avg_logprob": -0.1489730181994739, "compression_ratio": 1.6177606177606179, "no_caption_prob": 2.6425698251841823e-06}, {"id": 600, "seek": 236686, "start": 2391.34, "end": 2396.1800000000003, "text": " Every own library you use is going to have, you know, map up to map eight or however they", "tokens": [50364, 400, 309, 611, 2170, 534, 938, 293, 9595, 541, 337, 4833, 7724, 13, 50582, 50582, 509, 362, 1266, 11, 945, 9317, 294, 264, 2136, 11, 550, 300, 393, 483, 534, 9595, 541, 11, 597, 286, 2041, 300, 50906, 50906, 1310, 6689, 505, 534, 9594, 666, 293, 4471, 257, 3037, 295, 264, 1333, 295, 2580, 1166, 5102, 13, 51286, 51286, 492, 600, 2825, 257, 688, 466, 257, 4471, 732, 11, 4471, 1045, 11, 293, 370, 322, 11, 457, 729, 366, 516, 281, 312, 19362, 13, 51588, 51588, 2048, 1065, 6405, 291, 764, 307, 516, 281, 362, 11, 291, 458, 11, 4471, 493, 281, 4471, 3180, 420, 4461, 436, 51830, 51830], "temperature": 0.0, "avg_logprob": -0.1489730181994739, "compression_ratio": 1.6177606177606179, "no_caption_prob": 2.6425698251841823e-06}, {"id": 601, "seek": 239618, "start": 2396.18, "end": 2397.18, "text": " want to do.", "tokens": [50364, 528, 281, 360, 13, 50414, 50414, 400, 4728, 309, 311, 516, 281, 1590, 13, 50482, 50482, 286, 600, 1939, 281, 1190, 666, 300, 4948, 337, 746, 411, 1310, 13, 50668, 50668, 286, 500, 380, 519, 286, 478, 21928, 300, 867, 17312, 4190, 11, 457, 286, 360, 1190, 666, 341, 439, 264, 565, 50924, 50924, 322, 31828, 979, 1429, 570, 309, 311, 406, 29289, 281, 584, 11, 286, 528, 281, 1401, 945, 7909, 484, 295, 257, 31828, 51188, 51188, 293, 10432, 552, 666, 512, 2699, 76, 2657, 13, 51382, 51382, 400, 370, 300, 311, 689, 341, 1333, 295, 15517, 3109, 3643, 534, 4961, 570, 586, 51742, 51742], "temperature": 0.0, "avg_logprob": -0.1268553645522506, "compression_ratio": 1.6062992125984252, "no_caption_prob": 3.5008429222216364e-06}, {"id": 602, "seek": 239618, "start": 2397.18, "end": 2398.54, "text": " And eventually it's going to stop.", "tokens": [50364, 528, 281, 360, 13, 50414, 50414, 400, 4728, 309, 311, 516, 281, 1590, 13, 50482, 50482, 286, 600, 1939, 281, 1190, 666, 300, 4948, 337, 746, 411, 1310, 13, 50668, 50668, 286, 500, 380, 519, 286, 478, 21928, 300, 867, 17312, 4190, 11, 457, 286, 360, 1190, 666, 341, 439, 264, 565, 50924, 50924, 322, 31828, 979, 1429, 570, 309, 311, 406, 29289, 281, 584, 11, 286, 528, 281, 1401, 945, 7909, 484, 295, 257, 31828, 51188, 51188, 293, 10432, 552, 666, 512, 2699, 76, 2657, 13, 51382, 51382, 400, 370, 300, 311, 689, 341, 1333, 295, 15517, 3109, 3643, 534, 4961, 570, 586, 51742, 51742], "temperature": 0.0, "avg_logprob": -0.1268553645522506, "compression_ratio": 1.6062992125984252, "no_caption_prob": 3.5008429222216364e-06}, {"id": 603, "seek": 239618, "start": 2398.54, "end": 2402.2599999999998, "text": " I've yet to run into that limit for something like maybe.", "tokens": [50364, 528, 281, 360, 13, 50414, 50414, 400, 4728, 309, 311, 516, 281, 1590, 13, 50482, 50482, 286, 600, 1939, 281, 1190, 666, 300, 4948, 337, 746, 411, 1310, 13, 50668, 50668, 286, 500, 380, 519, 286, 478, 21928, 300, 867, 17312, 4190, 11, 457, 286, 360, 1190, 666, 341, 439, 264, 565, 50924, 50924, 322, 31828, 979, 1429, 570, 309, 311, 406, 29289, 281, 584, 11, 286, 528, 281, 1401, 945, 7909, 484, 295, 257, 31828, 51188, 51188, 293, 10432, 552, 666, 512, 2699, 76, 2657, 13, 51382, 51382, 400, 370, 300, 311, 689, 341, 1333, 295, 15517, 3109, 3643, 534, 4961, 570, 586, 51742, 51742], "temperature": 0.0, "avg_logprob": -0.1268553645522506, "compression_ratio": 1.6062992125984252, "no_caption_prob": 3.5008429222216364e-06}, {"id": 604, "seek": 239618, "start": 2402.2599999999998, "end": 2407.3799999999997, "text": " I don't think I'm combining that many optional values, but I do run into this all the time", "tokens": [50364, 528, 281, 360, 13, 50414, 50414, 400, 4728, 309, 311, 516, 281, 1590, 13, 50482, 50482, 286, 600, 1939, 281, 1190, 666, 300, 4948, 337, 746, 411, 1310, 13, 50668, 50668, 286, 500, 380, 519, 286, 478, 21928, 300, 867, 17312, 4190, 11, 457, 286, 360, 1190, 666, 341, 439, 264, 565, 50924, 50924, 322, 31828, 979, 1429, 570, 309, 311, 406, 29289, 281, 584, 11, 286, 528, 281, 1401, 945, 7909, 484, 295, 257, 31828, 51188, 51188, 293, 10432, 552, 666, 512, 2699, 76, 2657, 13, 51382, 51382, 400, 370, 300, 311, 689, 341, 1333, 295, 15517, 3109, 3643, 534, 4961, 570, 586, 51742, 51742], "temperature": 0.0, "avg_logprob": -0.1268553645522506, "compression_ratio": 1.6062992125984252, "no_caption_prob": 3.5008429222216364e-06}, {"id": 605, "seek": 239618, "start": 2407.3799999999997, "end": 2412.66, "text": " on JSON decode because it's not uncommon to say, I want to read 20 fields out of a JSON", "tokens": [50364, 528, 281, 360, 13, 50414, 50414, 400, 4728, 309, 311, 516, 281, 1590, 13, 50482, 50482, 286, 600, 1939, 281, 1190, 666, 300, 4948, 337, 746, 411, 1310, 13, 50668, 50668, 286, 500, 380, 519, 286, 478, 21928, 300, 867, 17312, 4190, 11, 457, 286, 360, 1190, 666, 341, 439, 264, 565, 50924, 50924, 322, 31828, 979, 1429, 570, 309, 311, 406, 29289, 281, 584, 11, 286, 528, 281, 1401, 945, 7909, 484, 295, 257, 31828, 51188, 51188, 293, 10432, 552, 666, 512, 2699, 76, 2657, 13, 51382, 51382, 400, 370, 300, 311, 689, 341, 1333, 295, 15517, 3109, 3643, 534, 4961, 570, 586, 51742, 51742], "temperature": 0.0, "avg_logprob": -0.1268553645522506, "compression_ratio": 1.6062992125984252, "no_caption_prob": 3.5008429222216364e-06}, {"id": 606, "seek": 239618, "start": 2412.66, "end": 2416.54, "text": " and combine them into some Elm object.", "tokens": [50364, 528, 281, 360, 13, 50414, 50414, 400, 4728, 309, 311, 516, 281, 1590, 13, 50482, 50482, 286, 600, 1939, 281, 1190, 666, 300, 4948, 337, 746, 411, 1310, 13, 50668, 50668, 286, 500, 380, 519, 286, 478, 21928, 300, 867, 17312, 4190, 11, 457, 286, 360, 1190, 666, 341, 439, 264, 565, 50924, 50924, 322, 31828, 979, 1429, 570, 309, 311, 406, 29289, 281, 584, 11, 286, 528, 281, 1401, 945, 7909, 484, 295, 257, 31828, 51188, 51188, 293, 10432, 552, 666, 512, 2699, 76, 2657, 13, 51382, 51382, 400, 370, 300, 311, 689, 341, 1333, 295, 15517, 3109, 3643, 534, 4961, 570, 586, 51742, 51742], "temperature": 0.0, "avg_logprob": -0.1268553645522506, "compression_ratio": 1.6062992125984252, "no_caption_prob": 3.5008429222216364e-06}, {"id": 607, "seek": 239618, "start": 2416.54, "end": 2423.74, "text": " And so that's where this sort of pipeline approach becomes really helpful because now", "tokens": [50364, 528, 281, 360, 13, 50414, 50414, 400, 4728, 309, 311, 516, 281, 1590, 13, 50482, 50482, 286, 600, 1939, 281, 1190, 666, 300, 4948, 337, 746, 411, 1310, 13, 50668, 50668, 286, 500, 380, 519, 286, 478, 21928, 300, 867, 17312, 4190, 11, 457, 286, 360, 1190, 666, 341, 439, 264, 565, 50924, 50924, 322, 31828, 979, 1429, 570, 309, 311, 406, 29289, 281, 584, 11, 286, 528, 281, 1401, 945, 7909, 484, 295, 257, 31828, 51188, 51188, 293, 10432, 552, 666, 512, 2699, 76, 2657, 13, 51382, 51382, 400, 370, 300, 311, 689, 341, 1333, 295, 15517, 3109, 3643, 534, 4961, 570, 586, 51742, 51742], "temperature": 0.0, "avg_logprob": -0.1268553645522506, "compression_ratio": 1.6062992125984252, "no_caption_prob": 3.5008429222216364e-06}, {"id": 608, "seek": 242374, "start": 2423.74, "end": 2430.4199999999996, "text": " you don't rely just on something finite because the beauty of the and map, which is sort of", "tokens": [50364, 291, 500, 380, 10687, 445, 322, 746, 19362, 570, 264, 6643, 295, 264, 293, 4471, 11, 597, 307, 1333, 295, 50698, 50698, 264, 11, 286, 500, 380, 458, 498, 291, 1116, 528, 281, 584, 264, 11, 309, 311, 406, 264, 17340, 295, 4471, 732, 11, 309, 311, 264, 50894, 50894, 1181, 1833, 822, 281, 4471, 732, 13, 50972, 50972, 821, 311, 257, 10247, 1433, 300, 321, 393, 764, 337, 341, 11, 457, 309, 311, 1071, 37642, 295, 437, 4471, 732, 51250, 51250, 775, 11, 457, 291, 393, 1333, 295, 5021, 309, 36227, 13, 51413, 51413, 407, 498, 291, 528, 264, 10344, 295, 4471, 2319, 11, 291, 727, 360, 11, 722, 365, 257, 3262, 6770, 51776, 51776], "temperature": 0.0, "avg_logprob": -0.1278218980562889, "compression_ratio": 1.7096774193548387, "no_caption_prob": 1.994716967601562e-06}, {"id": 609, "seek": 242374, "start": 2430.4199999999996, "end": 2434.3399999999997, "text": " the, I don't know if you'd want to say the, it's not the inverse of map two, it's the", "tokens": [50364, 291, 500, 380, 10687, 445, 322, 746, 19362, 570, 264, 6643, 295, 264, 293, 4471, 11, 597, 307, 1333, 295, 50698, 50698, 264, 11, 286, 500, 380, 458, 498, 291, 1116, 528, 281, 584, 264, 11, 309, 311, 406, 264, 17340, 295, 4471, 732, 11, 309, 311, 264, 50894, 50894, 1181, 1833, 822, 281, 4471, 732, 13, 50972, 50972, 821, 311, 257, 10247, 1433, 300, 321, 393, 764, 337, 341, 11, 457, 309, 311, 1071, 37642, 295, 437, 4471, 732, 51250, 51250, 775, 11, 457, 291, 393, 1333, 295, 5021, 309, 36227, 13, 51413, 51413, 407, 498, 291, 528, 264, 10344, 295, 4471, 2319, 11, 291, 727, 360, 11, 722, 365, 257, 3262, 6770, 51776, 51776], "temperature": 0.0, "avg_logprob": -0.1278218980562889, "compression_ratio": 1.7096774193548387, "no_caption_prob": 1.994716967601562e-06}, {"id": 610, "seek": 242374, "start": 2434.3399999999997, "end": 2435.8999999999996, "text": " corollary to map two.", "tokens": [50364, 291, 500, 380, 10687, 445, 322, 746, 19362, 570, 264, 6643, 295, 264, 293, 4471, 11, 597, 307, 1333, 295, 50698, 50698, 264, 11, 286, 500, 380, 458, 498, 291, 1116, 528, 281, 584, 264, 11, 309, 311, 406, 264, 17340, 295, 4471, 732, 11, 309, 311, 264, 50894, 50894, 1181, 1833, 822, 281, 4471, 732, 13, 50972, 50972, 821, 311, 257, 10247, 1433, 300, 321, 393, 764, 337, 341, 11, 457, 309, 311, 1071, 37642, 295, 437, 4471, 732, 51250, 51250, 775, 11, 457, 291, 393, 1333, 295, 5021, 309, 36227, 13, 51413, 51413, 407, 498, 291, 528, 264, 10344, 295, 4471, 2319, 11, 291, 727, 360, 11, 722, 365, 257, 3262, 6770, 51776, 51776], "temperature": 0.0, "avg_logprob": -0.1278218980562889, "compression_ratio": 1.7096774193548387, "no_caption_prob": 1.994716967601562e-06}, {"id": 611, "seek": 242374, "start": 2435.8999999999996, "end": 2441.4599999999996, "text": " There's a fancy term that we can use for this, but it's another formulation of what map two", "tokens": [50364, 291, 500, 380, 10687, 445, 322, 746, 19362, 570, 264, 6643, 295, 264, 293, 4471, 11, 597, 307, 1333, 295, 50698, 50698, 264, 11, 286, 500, 380, 458, 498, 291, 1116, 528, 281, 584, 264, 11, 309, 311, 406, 264, 17340, 295, 4471, 732, 11, 309, 311, 264, 50894, 50894, 1181, 1833, 822, 281, 4471, 732, 13, 50972, 50972, 821, 311, 257, 10247, 1433, 300, 321, 393, 764, 337, 341, 11, 457, 309, 311, 1071, 37642, 295, 437, 4471, 732, 51250, 51250, 775, 11, 457, 291, 393, 1333, 295, 5021, 309, 36227, 13, 51413, 51413, 407, 498, 291, 528, 264, 10344, 295, 4471, 2319, 11, 291, 727, 360, 11, 722, 365, 257, 3262, 6770, 51776, 51776], "temperature": 0.0, "avg_logprob": -0.1278218980562889, "compression_ratio": 1.7096774193548387, "no_caption_prob": 1.994716967601562e-06}, {"id": 612, "seek": 242374, "start": 2441.4599999999996, "end": 2444.72, "text": " does, but you can sort of chain it infinitely.", "tokens": [50364, 291, 500, 380, 10687, 445, 322, 746, 19362, 570, 264, 6643, 295, 264, 293, 4471, 11, 597, 307, 1333, 295, 50698, 50698, 264, 11, 286, 500, 380, 458, 498, 291, 1116, 528, 281, 584, 264, 11, 309, 311, 406, 264, 17340, 295, 4471, 732, 11, 309, 311, 264, 50894, 50894, 1181, 1833, 822, 281, 4471, 732, 13, 50972, 50972, 821, 311, 257, 10247, 1433, 300, 321, 393, 764, 337, 341, 11, 457, 309, 311, 1071, 37642, 295, 437, 4471, 732, 51250, 51250, 775, 11, 457, 291, 393, 1333, 295, 5021, 309, 36227, 13, 51413, 51413, 407, 498, 291, 528, 264, 10344, 295, 4471, 2319, 11, 291, 727, 360, 11, 722, 365, 257, 3262, 6770, 51776, 51776], "temperature": 0.0, "avg_logprob": -0.1278218980562889, "compression_ratio": 1.7096774193548387, "no_caption_prob": 1.994716967601562e-06}, {"id": 613, "seek": 242374, "start": 2444.72, "end": 2451.9799999999996, "text": " So if you want the equivalent of map 100, you could do, start with a hundred argument", "tokens": [50364, 291, 500, 380, 10687, 445, 322, 746, 19362, 570, 264, 6643, 295, 264, 293, 4471, 11, 597, 307, 1333, 295, 50698, 50698, 264, 11, 286, 500, 380, 458, 498, 291, 1116, 528, 281, 584, 264, 11, 309, 311, 406, 264, 17340, 295, 4471, 732, 11, 309, 311, 264, 50894, 50894, 1181, 1833, 822, 281, 4471, 732, 13, 50972, 50972, 821, 311, 257, 10247, 1433, 300, 321, 393, 764, 337, 341, 11, 457, 309, 311, 1071, 37642, 295, 437, 4471, 732, 51250, 51250, 775, 11, 457, 291, 393, 1333, 295, 5021, 309, 36227, 13, 51413, 51413, 407, 498, 291, 528, 264, 10344, 295, 4471, 2319, 11, 291, 727, 360, 11, 722, 365, 257, 3262, 6770, 51776, 51776], "temperature": 0.0, "avg_logprob": -0.1278218980562889, "compression_ratio": 1.7096774193548387, "no_caption_prob": 1.994716967601562e-06}, {"id": 614, "seek": 245198, "start": 2451.98, "end": 2455.78, "text": " function and then just 100 pipes to and map.", "tokens": [50364, 2445, 293, 550, 445, 2319, 21882, 281, 293, 4471, 13, 50554, 50554, 865, 11, 558, 13, 50612, 50612, 400, 370, 281, 257, 1629, 8396, 309, 311, 411, 257, 1871, 295, 2973, 3939, 11, 457, 983, 500, 380, 321, 751, 466, 50882, 50882, 512, 295, 264, 544, 10024, 6267, 293, 1014, 1296, 4471, 426, 6828, 11, 4471, 732, 11, 4471, 1045, 11, 4471, 1451, 51272, 51272, 5717, 917, 4471, 13, 51386, 51386, 407, 286, 519, 264, 955, 472, 307, 472, 300, 321, 600, 2825, 466, 1217, 307, 291, 486, 1190, 484, 295, 4471, 426, 51748, 51748, 412, 512, 935, 13, 51798, 51798], "temperature": 0.0, "avg_logprob": -0.15495568803213175, "compression_ratio": 1.5956521739130434, "no_caption_prob": 1.0616027793730609e-05}, {"id": 615, "seek": 245198, "start": 2455.78, "end": 2456.94, "text": " Yeah, right.", "tokens": [50364, 2445, 293, 550, 445, 2319, 21882, 281, 293, 4471, 13, 50554, 50554, 865, 11, 558, 13, 50612, 50612, 400, 370, 281, 257, 1629, 8396, 309, 311, 411, 257, 1871, 295, 2973, 3939, 11, 457, 983, 500, 380, 321, 751, 466, 50882, 50882, 512, 295, 264, 544, 10024, 6267, 293, 1014, 1296, 4471, 426, 6828, 11, 4471, 732, 11, 4471, 1045, 11, 4471, 1451, 51272, 51272, 5717, 917, 4471, 13, 51386, 51386, 407, 286, 519, 264, 955, 472, 307, 472, 300, 321, 600, 2825, 466, 1217, 307, 291, 486, 1190, 484, 295, 4471, 426, 51748, 51748, 412, 512, 935, 13, 51798, 51798], "temperature": 0.0, "avg_logprob": -0.15495568803213175, "compression_ratio": 1.5956521739130434, "no_caption_prob": 1.0616027793730609e-05}, {"id": 616, "seek": 245198, "start": 2456.94, "end": 2462.34, "text": " And so to a certain extent it's like a matter of personal taste, but why don't we talk about", "tokens": [50364, 2445, 293, 550, 445, 2319, 21882, 281, 293, 4471, 13, 50554, 50554, 865, 11, 558, 13, 50612, 50612, 400, 370, 281, 257, 1629, 8396, 309, 311, 411, 257, 1871, 295, 2973, 3939, 11, 457, 983, 500, 380, 321, 751, 466, 50882, 50882, 512, 295, 264, 544, 10024, 6267, 293, 1014, 1296, 4471, 426, 6828, 11, 4471, 732, 11, 4471, 1045, 11, 4471, 1451, 51272, 51272, 5717, 917, 4471, 13, 51386, 51386, 407, 286, 519, 264, 955, 472, 307, 472, 300, 321, 600, 2825, 466, 1217, 307, 291, 486, 1190, 484, 295, 4471, 426, 51748, 51748, 412, 512, 935, 13, 51798, 51798], "temperature": 0.0, "avg_logprob": -0.15495568803213175, "compression_ratio": 1.5956521739130434, "no_caption_prob": 1.0616027793730609e-05}, {"id": 617, "seek": 245198, "start": 2462.34, "end": 2470.14, "text": " some of the more objective pros and cons between map N functions, map two, map three, map four", "tokens": [50364, 2445, 293, 550, 445, 2319, 21882, 281, 293, 4471, 13, 50554, 50554, 865, 11, 558, 13, 50612, 50612, 400, 370, 281, 257, 1629, 8396, 309, 311, 411, 257, 1871, 295, 2973, 3939, 11, 457, 983, 500, 380, 321, 751, 466, 50882, 50882, 512, 295, 264, 544, 10024, 6267, 293, 1014, 1296, 4471, 426, 6828, 11, 4471, 732, 11, 4471, 1045, 11, 4471, 1451, 51272, 51272, 5717, 917, 4471, 13, 51386, 51386, 407, 286, 519, 264, 955, 472, 307, 472, 300, 321, 600, 2825, 466, 1217, 307, 291, 486, 1190, 484, 295, 4471, 426, 51748, 51748, 412, 512, 935, 13, 51798, 51798], "temperature": 0.0, "avg_logprob": -0.15495568803213175, "compression_ratio": 1.5956521739130434, "no_caption_prob": 1.0616027793730609e-05}, {"id": 618, "seek": 245198, "start": 2470.14, "end": 2472.42, "text": " versus end map.", "tokens": [50364, 2445, 293, 550, 445, 2319, 21882, 281, 293, 4471, 13, 50554, 50554, 865, 11, 558, 13, 50612, 50612, 400, 370, 281, 257, 1629, 8396, 309, 311, 411, 257, 1871, 295, 2973, 3939, 11, 457, 983, 500, 380, 321, 751, 466, 50882, 50882, 512, 295, 264, 544, 10024, 6267, 293, 1014, 1296, 4471, 426, 6828, 11, 4471, 732, 11, 4471, 1045, 11, 4471, 1451, 51272, 51272, 5717, 917, 4471, 13, 51386, 51386, 407, 286, 519, 264, 955, 472, 307, 472, 300, 321, 600, 2825, 466, 1217, 307, 291, 486, 1190, 484, 295, 4471, 426, 51748, 51748, 412, 512, 935, 13, 51798, 51798], "temperature": 0.0, "avg_logprob": -0.15495568803213175, "compression_ratio": 1.5956521739130434, "no_caption_prob": 1.0616027793730609e-05}, {"id": 619, "seek": 245198, "start": 2472.42, "end": 2479.66, "text": " So I think the big one is one that we've talked about already is you will run out of map N", "tokens": [50364, 2445, 293, 550, 445, 2319, 21882, 281, 293, 4471, 13, 50554, 50554, 865, 11, 558, 13, 50612, 50612, 400, 370, 281, 257, 1629, 8396, 309, 311, 411, 257, 1871, 295, 2973, 3939, 11, 457, 983, 500, 380, 321, 751, 466, 50882, 50882, 512, 295, 264, 544, 10024, 6267, 293, 1014, 1296, 4471, 426, 6828, 11, 4471, 732, 11, 4471, 1045, 11, 4471, 1451, 51272, 51272, 5717, 917, 4471, 13, 51386, 51386, 407, 286, 519, 264, 955, 472, 307, 472, 300, 321, 600, 2825, 466, 1217, 307, 291, 486, 1190, 484, 295, 4471, 426, 51748, 51748, 412, 512, 935, 13, 51798, 51798], "temperature": 0.0, "avg_logprob": -0.15495568803213175, "compression_ratio": 1.5956521739130434, "no_caption_prob": 1.0616027793730609e-05}, {"id": 620, "seek": 245198, "start": 2479.66, "end": 2480.66, "text": " at some point.", "tokens": [50364, 2445, 293, 550, 445, 2319, 21882, 281, 293, 4471, 13, 50554, 50554, 865, 11, 558, 13, 50612, 50612, 400, 370, 281, 257, 1629, 8396, 309, 311, 411, 257, 1871, 295, 2973, 3939, 11, 457, 983, 500, 380, 321, 751, 466, 50882, 50882, 512, 295, 264, 544, 10024, 6267, 293, 1014, 1296, 4471, 426, 6828, 11, 4471, 732, 11, 4471, 1045, 11, 4471, 1451, 51272, 51272, 5717, 917, 4471, 13, 51386, 51386, 407, 286, 519, 264, 955, 472, 307, 472, 300, 321, 600, 2825, 466, 1217, 307, 291, 486, 1190, 484, 295, 4471, 426, 51748, 51748, 412, 512, 935, 13, 51798, 51798], "temperature": 0.0, "avg_logprob": -0.15495568803213175, "compression_ratio": 1.5956521739130434, "no_caption_prob": 1.0616027793730609e-05}, {"id": 621, "seek": 248066, "start": 2480.66, "end": 2489.22, "text": " Although you can always, if you need a map 17, you can always implement it in terms of", "tokens": [50364, 5780, 291, 393, 1009, 11, 498, 291, 643, 257, 4471, 3282, 11, 291, 393, 1009, 4445, 309, 294, 2115, 295, 50792, 50792, 293, 4471, 570, 309, 311, 10344, 13, 50912, 50912, 407, 498, 291, 915, 309, 3571, 281, 1401, 428, 3089, 11, 291, 727, 445, 4445, 428, 1065, 4471, 3282, 1228, 51214, 51214, 293, 4471, 293, 550, 764, 264, 4471, 3282, 294, 428, 3089, 13, 51364, 51364, 759, 300, 311, 257, 3758, 300, 291, 4382, 11, 291, 727, 764, 512, 3089, 5125, 281, 1884, 4471, 439, 51628, 51628, 264, 636, 493, 281, 257, 3262, 13, 51678, 51678, 663, 576, 767, 312, 1238, 1858, 13, 51786, 51786, 865, 11, 309, 576, 13, 51858, 51858], "temperature": 0.0, "avg_logprob": -0.14628123407778532, "compression_ratio": 1.7468879668049793, "no_caption_prob": 6.339156243484467e-06}, {"id": 622, "seek": 248066, "start": 2489.22, "end": 2491.62, "text": " and map because it's equivalent.", "tokens": [50364, 5780, 291, 393, 1009, 11, 498, 291, 643, 257, 4471, 3282, 11, 291, 393, 1009, 4445, 309, 294, 2115, 295, 50792, 50792, 293, 4471, 570, 309, 311, 10344, 13, 50912, 50912, 407, 498, 291, 915, 309, 3571, 281, 1401, 428, 3089, 11, 291, 727, 445, 4445, 428, 1065, 4471, 3282, 1228, 51214, 51214, 293, 4471, 293, 550, 764, 264, 4471, 3282, 294, 428, 3089, 13, 51364, 51364, 759, 300, 311, 257, 3758, 300, 291, 4382, 11, 291, 727, 764, 512, 3089, 5125, 281, 1884, 4471, 439, 51628, 51628, 264, 636, 493, 281, 257, 3262, 13, 51678, 51678, 663, 576, 767, 312, 1238, 1858, 13, 51786, 51786, 865, 11, 309, 576, 13, 51858, 51858], "temperature": 0.0, "avg_logprob": -0.14628123407778532, "compression_ratio": 1.7468879668049793, "no_caption_prob": 6.339156243484467e-06}, {"id": 623, "seek": 248066, "start": 2491.62, "end": 2497.66, "text": " So if you find it easier to read your code, you could just implement your own map 17 using", "tokens": [50364, 5780, 291, 393, 1009, 11, 498, 291, 643, 257, 4471, 3282, 11, 291, 393, 1009, 4445, 309, 294, 2115, 295, 50792, 50792, 293, 4471, 570, 309, 311, 10344, 13, 50912, 50912, 407, 498, 291, 915, 309, 3571, 281, 1401, 428, 3089, 11, 291, 727, 445, 4445, 428, 1065, 4471, 3282, 1228, 51214, 51214, 293, 4471, 293, 550, 764, 264, 4471, 3282, 294, 428, 3089, 13, 51364, 51364, 759, 300, 311, 257, 3758, 300, 291, 4382, 11, 291, 727, 764, 512, 3089, 5125, 281, 1884, 4471, 439, 51628, 51628, 264, 636, 493, 281, 257, 3262, 13, 51678, 51678, 663, 576, 767, 312, 1238, 1858, 13, 51786, 51786, 865, 11, 309, 576, 13, 51858, 51858], "temperature": 0.0, "avg_logprob": -0.14628123407778532, "compression_ratio": 1.7468879668049793, "no_caption_prob": 6.339156243484467e-06}, {"id": 624, "seek": 248066, "start": 2497.66, "end": 2500.66, "text": " and map and then use the map 17 in your code.", "tokens": [50364, 5780, 291, 393, 1009, 11, 498, 291, 643, 257, 4471, 3282, 11, 291, 393, 1009, 4445, 309, 294, 2115, 295, 50792, 50792, 293, 4471, 570, 309, 311, 10344, 13, 50912, 50912, 407, 498, 291, 915, 309, 3571, 281, 1401, 428, 3089, 11, 291, 727, 445, 4445, 428, 1065, 4471, 3282, 1228, 51214, 51214, 293, 4471, 293, 550, 764, 264, 4471, 3282, 294, 428, 3089, 13, 51364, 51364, 759, 300, 311, 257, 3758, 300, 291, 4382, 11, 291, 727, 764, 512, 3089, 5125, 281, 1884, 4471, 439, 51628, 51628, 264, 636, 493, 281, 257, 3262, 13, 51678, 51678, 663, 576, 767, 312, 1238, 1858, 13, 51786, 51786, 865, 11, 309, 576, 13, 51858, 51858], "temperature": 0.0, "avg_logprob": -0.14628123407778532, "compression_ratio": 1.7468879668049793, "no_caption_prob": 6.339156243484467e-06}, {"id": 625, "seek": 248066, "start": 2500.66, "end": 2505.94, "text": " If that's a style that you prefer, you could use some code generation to create map all", "tokens": [50364, 5780, 291, 393, 1009, 11, 498, 291, 643, 257, 4471, 3282, 11, 291, 393, 1009, 4445, 309, 294, 2115, 295, 50792, 50792, 293, 4471, 570, 309, 311, 10344, 13, 50912, 50912, 407, 498, 291, 915, 309, 3571, 281, 1401, 428, 3089, 11, 291, 727, 445, 4445, 428, 1065, 4471, 3282, 1228, 51214, 51214, 293, 4471, 293, 550, 764, 264, 4471, 3282, 294, 428, 3089, 13, 51364, 51364, 759, 300, 311, 257, 3758, 300, 291, 4382, 11, 291, 727, 764, 512, 3089, 5125, 281, 1884, 4471, 439, 51628, 51628, 264, 636, 493, 281, 257, 3262, 13, 51678, 51678, 663, 576, 767, 312, 1238, 1858, 13, 51786, 51786, 865, 11, 309, 576, 13, 51858, 51858], "temperature": 0.0, "avg_logprob": -0.14628123407778532, "compression_ratio": 1.7468879668049793, "no_caption_prob": 6.339156243484467e-06}, {"id": 626, "seek": 248066, "start": 2505.94, "end": 2506.94, "text": " the way up to a hundred.", "tokens": [50364, 5780, 291, 393, 1009, 11, 498, 291, 643, 257, 4471, 3282, 11, 291, 393, 1009, 4445, 309, 294, 2115, 295, 50792, 50792, 293, 4471, 570, 309, 311, 10344, 13, 50912, 50912, 407, 498, 291, 915, 309, 3571, 281, 1401, 428, 3089, 11, 291, 727, 445, 4445, 428, 1065, 4471, 3282, 1228, 51214, 51214, 293, 4471, 293, 550, 764, 264, 4471, 3282, 294, 428, 3089, 13, 51364, 51364, 759, 300, 311, 257, 3758, 300, 291, 4382, 11, 291, 727, 764, 512, 3089, 5125, 281, 1884, 4471, 439, 51628, 51628, 264, 636, 493, 281, 257, 3262, 13, 51678, 51678, 663, 576, 767, 312, 1238, 1858, 13, 51786, 51786, 865, 11, 309, 576, 13, 51858, 51858], "temperature": 0.0, "avg_logprob": -0.14628123407778532, "compression_ratio": 1.7468879668049793, "no_caption_prob": 6.339156243484467e-06}, {"id": 627, "seek": 248066, "start": 2506.94, "end": 2509.1, "text": " That would actually be pretty easy.", "tokens": [50364, 5780, 291, 393, 1009, 11, 498, 291, 643, 257, 4471, 3282, 11, 291, 393, 1009, 4445, 309, 294, 2115, 295, 50792, 50792, 293, 4471, 570, 309, 311, 10344, 13, 50912, 50912, 407, 498, 291, 915, 309, 3571, 281, 1401, 428, 3089, 11, 291, 727, 445, 4445, 428, 1065, 4471, 3282, 1228, 51214, 51214, 293, 4471, 293, 550, 764, 264, 4471, 3282, 294, 428, 3089, 13, 51364, 51364, 759, 300, 311, 257, 3758, 300, 291, 4382, 11, 291, 727, 764, 512, 3089, 5125, 281, 1884, 4471, 439, 51628, 51628, 264, 636, 493, 281, 257, 3262, 13, 51678, 51678, 663, 576, 767, 312, 1238, 1858, 13, 51786, 51786, 865, 11, 309, 576, 13, 51858, 51858], "temperature": 0.0, "avg_logprob": -0.14628123407778532, "compression_ratio": 1.7468879668049793, "no_caption_prob": 6.339156243484467e-06}, {"id": 628, "seek": 248066, "start": 2509.1, "end": 2510.54, "text": " Yeah, it would.", "tokens": [50364, 5780, 291, 393, 1009, 11, 498, 291, 643, 257, 4471, 3282, 11, 291, 393, 1009, 4445, 309, 294, 2115, 295, 50792, 50792, 293, 4471, 570, 309, 311, 10344, 13, 50912, 50912, 407, 498, 291, 915, 309, 3571, 281, 1401, 428, 3089, 11, 291, 727, 445, 4445, 428, 1065, 4471, 3282, 1228, 51214, 51214, 293, 4471, 293, 550, 764, 264, 4471, 3282, 294, 428, 3089, 13, 51364, 51364, 759, 300, 311, 257, 3758, 300, 291, 4382, 11, 291, 727, 764, 512, 3089, 5125, 281, 1884, 4471, 439, 51628, 51628, 264, 636, 493, 281, 257, 3262, 13, 51678, 51678, 663, 576, 767, 312, 1238, 1858, 13, 51786, 51786, 865, 11, 309, 576, 13, 51858, 51858], "temperature": 0.0, "avg_logprob": -0.14628123407778532, "compression_ratio": 1.7468879668049793, "no_caption_prob": 6.339156243484467e-06}, {"id": 629, "seek": 251054, "start": 2510.54, "end": 2512.74, "text": " Would it be a good idea?", "tokens": [50364, 6068, 309, 312, 257, 665, 1558, 30, 50474, 50474, 2102, 393, 584, 30, 50524, 50524, 7497, 291, 8460, 257, 4471, 3282, 490, 4471, 732, 611, 420, 4471, 1045, 30, 50786, 50786, 1042, 11, 291, 393, 8460, 439, 295, 613, 490, 4471, 732, 13, 50920, 50920, 865, 13, 50970, 50970, 22053, 732, 307, 264, 472, 13, 51020, 51020, 759, 291, 362, 4471, 732, 11, 550, 291, 393, 1322, 439, 295, 613, 721, 13, 51152, 51152, 286, 600, 411, 11, 286, 600, 3094, 370, 867, 15148, 300, 362, 341, 412, 341, 935, 13, 51344, 51344, 8537, 411, 286, 1409, 538, 411, 516, 281, 264, 572, 2182, 11276, 11, 11181, 979, 1429, 15517, 6405, 51626, 51626, 293, 1237, 412, 264, 4009, 3089, 293, 885, 411, 11, 577, 360, 436, 4445, 613, 721, 30, 51782, 51782], "temperature": 0.0, "avg_logprob": -0.16922883845087308, "compression_ratio": 1.7857142857142858, "no_caption_prob": 2.2125303075881675e-05}, {"id": 630, "seek": 251054, "start": 2512.74, "end": 2513.74, "text": " Who can say?", "tokens": [50364, 6068, 309, 312, 257, 665, 1558, 30, 50474, 50474, 2102, 393, 584, 30, 50524, 50524, 7497, 291, 8460, 257, 4471, 3282, 490, 4471, 732, 611, 420, 4471, 1045, 30, 50786, 50786, 1042, 11, 291, 393, 8460, 439, 295, 613, 490, 4471, 732, 13, 50920, 50920, 865, 13, 50970, 50970, 22053, 732, 307, 264, 472, 13, 51020, 51020, 759, 291, 362, 4471, 732, 11, 550, 291, 393, 1322, 439, 295, 613, 721, 13, 51152, 51152, 286, 600, 411, 11, 286, 600, 3094, 370, 867, 15148, 300, 362, 341, 412, 341, 935, 13, 51344, 51344, 8537, 411, 286, 1409, 538, 411, 516, 281, 264, 572, 2182, 11276, 11, 11181, 979, 1429, 15517, 6405, 51626, 51626, 293, 1237, 412, 264, 4009, 3089, 293, 885, 411, 11, 577, 360, 436, 4445, 613, 721, 30, 51782, 51782], "temperature": 0.0, "avg_logprob": -0.16922883845087308, "compression_ratio": 1.7857142857142858, "no_caption_prob": 2.2125303075881675e-05}, {"id": 631, "seek": 251054, "start": 2513.74, "end": 2518.98, "text": " Could you generate a map 17 from map two also or map three?", "tokens": [50364, 6068, 309, 312, 257, 665, 1558, 30, 50474, 50474, 2102, 393, 584, 30, 50524, 50524, 7497, 291, 8460, 257, 4471, 3282, 490, 4471, 732, 611, 420, 4471, 1045, 30, 50786, 50786, 1042, 11, 291, 393, 8460, 439, 295, 613, 490, 4471, 732, 13, 50920, 50920, 865, 13, 50970, 50970, 22053, 732, 307, 264, 472, 13, 51020, 51020, 759, 291, 362, 4471, 732, 11, 550, 291, 393, 1322, 439, 295, 613, 721, 13, 51152, 51152, 286, 600, 411, 11, 286, 600, 3094, 370, 867, 15148, 300, 362, 341, 412, 341, 935, 13, 51344, 51344, 8537, 411, 286, 1409, 538, 411, 516, 281, 264, 572, 2182, 11276, 11, 11181, 979, 1429, 15517, 6405, 51626, 51626, 293, 1237, 412, 264, 4009, 3089, 293, 885, 411, 11, 577, 360, 436, 4445, 613, 721, 30, 51782, 51782], "temperature": 0.0, "avg_logprob": -0.16922883845087308, "compression_ratio": 1.7857142857142858, "no_caption_prob": 2.2125303075881675e-05}, {"id": 632, "seek": 251054, "start": 2518.98, "end": 2521.66, "text": " Well, you can generate all of these from map two.", "tokens": [50364, 6068, 309, 312, 257, 665, 1558, 30, 50474, 50474, 2102, 393, 584, 30, 50524, 50524, 7497, 291, 8460, 257, 4471, 3282, 490, 4471, 732, 611, 420, 4471, 1045, 30, 50786, 50786, 1042, 11, 291, 393, 8460, 439, 295, 613, 490, 4471, 732, 13, 50920, 50920, 865, 13, 50970, 50970, 22053, 732, 307, 264, 472, 13, 51020, 51020, 759, 291, 362, 4471, 732, 11, 550, 291, 393, 1322, 439, 295, 613, 721, 13, 51152, 51152, 286, 600, 411, 11, 286, 600, 3094, 370, 867, 15148, 300, 362, 341, 412, 341, 935, 13, 51344, 51344, 8537, 411, 286, 1409, 538, 411, 516, 281, 264, 572, 2182, 11276, 11, 11181, 979, 1429, 15517, 6405, 51626, 51626, 293, 1237, 412, 264, 4009, 3089, 293, 885, 411, 11, 577, 360, 436, 4445, 613, 721, 30, 51782, 51782], "temperature": 0.0, "avg_logprob": -0.16922883845087308, "compression_ratio": 1.7857142857142858, "no_caption_prob": 2.2125303075881675e-05}, {"id": 633, "seek": 251054, "start": 2521.66, "end": 2522.66, "text": " Yeah.", "tokens": [50364, 6068, 309, 312, 257, 665, 1558, 30, 50474, 50474, 2102, 393, 584, 30, 50524, 50524, 7497, 291, 8460, 257, 4471, 3282, 490, 4471, 732, 611, 420, 4471, 1045, 30, 50786, 50786, 1042, 11, 291, 393, 8460, 439, 295, 613, 490, 4471, 732, 13, 50920, 50920, 865, 13, 50970, 50970, 22053, 732, 307, 264, 472, 13, 51020, 51020, 759, 291, 362, 4471, 732, 11, 550, 291, 393, 1322, 439, 295, 613, 721, 13, 51152, 51152, 286, 600, 411, 11, 286, 600, 3094, 370, 867, 15148, 300, 362, 341, 412, 341, 935, 13, 51344, 51344, 8537, 411, 286, 1409, 538, 411, 516, 281, 264, 572, 2182, 11276, 11, 11181, 979, 1429, 15517, 6405, 51626, 51626, 293, 1237, 412, 264, 4009, 3089, 293, 885, 411, 11, 577, 360, 436, 4445, 613, 721, 30, 51782, 51782], "temperature": 0.0, "avg_logprob": -0.16922883845087308, "compression_ratio": 1.7857142857142858, "no_caption_prob": 2.2125303075881675e-05}, {"id": 634, "seek": 251054, "start": 2522.66, "end": 2523.66, "text": " Map two is the one.", "tokens": [50364, 6068, 309, 312, 257, 665, 1558, 30, 50474, 50474, 2102, 393, 584, 30, 50524, 50524, 7497, 291, 8460, 257, 4471, 3282, 490, 4471, 732, 611, 420, 4471, 1045, 30, 50786, 50786, 1042, 11, 291, 393, 8460, 439, 295, 613, 490, 4471, 732, 13, 50920, 50920, 865, 13, 50970, 50970, 22053, 732, 307, 264, 472, 13, 51020, 51020, 759, 291, 362, 4471, 732, 11, 550, 291, 393, 1322, 439, 295, 613, 721, 13, 51152, 51152, 286, 600, 411, 11, 286, 600, 3094, 370, 867, 15148, 300, 362, 341, 412, 341, 935, 13, 51344, 51344, 8537, 411, 286, 1409, 538, 411, 516, 281, 264, 572, 2182, 11276, 11, 11181, 979, 1429, 15517, 6405, 51626, 51626, 293, 1237, 412, 264, 4009, 3089, 293, 885, 411, 11, 577, 360, 436, 4445, 613, 721, 30, 51782, 51782], "temperature": 0.0, "avg_logprob": -0.16922883845087308, "compression_ratio": 1.7857142857142858, "no_caption_prob": 2.2125303075881675e-05}, {"id": 635, "seek": 251054, "start": 2523.66, "end": 2526.3, "text": " If you have map two, then you can build all of these things.", "tokens": [50364, 6068, 309, 312, 257, 665, 1558, 30, 50474, 50474, 2102, 393, 584, 30, 50524, 50524, 7497, 291, 8460, 257, 4471, 3282, 490, 4471, 732, 611, 420, 4471, 1045, 30, 50786, 50786, 1042, 11, 291, 393, 8460, 439, 295, 613, 490, 4471, 732, 13, 50920, 50920, 865, 13, 50970, 50970, 22053, 732, 307, 264, 472, 13, 51020, 51020, 759, 291, 362, 4471, 732, 11, 550, 291, 393, 1322, 439, 295, 613, 721, 13, 51152, 51152, 286, 600, 411, 11, 286, 600, 3094, 370, 867, 15148, 300, 362, 341, 412, 341, 935, 13, 51344, 51344, 8537, 411, 286, 1409, 538, 411, 516, 281, 264, 572, 2182, 11276, 11, 11181, 979, 1429, 15517, 6405, 51626, 51626, 293, 1237, 412, 264, 4009, 3089, 293, 885, 411, 11, 577, 360, 436, 4445, 613, 721, 30, 51782, 51782], "temperature": 0.0, "avg_logprob": -0.16922883845087308, "compression_ratio": 1.7857142857142858, "no_caption_prob": 2.2125303075881675e-05}, {"id": 636, "seek": 251054, "start": 2526.3, "end": 2530.14, "text": " I've like, I've built so many libraries that have this at this point.", "tokens": [50364, 6068, 309, 312, 257, 665, 1558, 30, 50474, 50474, 2102, 393, 584, 30, 50524, 50524, 7497, 291, 8460, 257, 4471, 3282, 490, 4471, 732, 611, 420, 4471, 1045, 30, 50786, 50786, 1042, 11, 291, 393, 8460, 439, 295, 613, 490, 4471, 732, 13, 50920, 50920, 865, 13, 50970, 50970, 22053, 732, 307, 264, 472, 13, 51020, 51020, 759, 291, 362, 4471, 732, 11, 550, 291, 393, 1322, 439, 295, 613, 721, 13, 51152, 51152, 286, 600, 411, 11, 286, 600, 3094, 370, 867, 15148, 300, 362, 341, 412, 341, 935, 13, 51344, 51344, 8537, 411, 286, 1409, 538, 411, 516, 281, 264, 572, 2182, 11276, 11, 11181, 979, 1429, 15517, 6405, 51626, 51626, 293, 1237, 412, 264, 4009, 3089, 293, 885, 411, 11, 577, 360, 436, 4445, 613, 721, 30, 51782, 51782], "temperature": 0.0, "avg_logprob": -0.16922883845087308, "compression_ratio": 1.7857142857142858, "no_caption_prob": 2.2125303075881675e-05}, {"id": 637, "seek": 251054, "start": 2530.14, "end": 2535.7799999999997, "text": " Basically like I started by like going to the no red ink, Jason decode pipeline library", "tokens": [50364, 6068, 309, 312, 257, 665, 1558, 30, 50474, 50474, 2102, 393, 584, 30, 50524, 50524, 7497, 291, 8460, 257, 4471, 3282, 490, 4471, 732, 611, 420, 4471, 1045, 30, 50786, 50786, 1042, 11, 291, 393, 8460, 439, 295, 613, 490, 4471, 732, 13, 50920, 50920, 865, 13, 50970, 50970, 22053, 732, 307, 264, 472, 13, 51020, 51020, 759, 291, 362, 4471, 732, 11, 550, 291, 393, 1322, 439, 295, 613, 721, 13, 51152, 51152, 286, 600, 411, 11, 286, 600, 3094, 370, 867, 15148, 300, 362, 341, 412, 341, 935, 13, 51344, 51344, 8537, 411, 286, 1409, 538, 411, 516, 281, 264, 572, 2182, 11276, 11, 11181, 979, 1429, 15517, 6405, 51626, 51626, 293, 1237, 412, 264, 4009, 3089, 293, 885, 411, 11, 577, 360, 436, 4445, 613, 721, 30, 51782, 51782], "temperature": 0.0, "avg_logprob": -0.16922883845087308, "compression_ratio": 1.7857142857142858, "no_caption_prob": 2.2125303075881675e-05}, {"id": 638, "seek": 251054, "start": 2535.7799999999997, "end": 2538.9, "text": " and looking at the source code and being like, how do they implement these things?", "tokens": [50364, 6068, 309, 312, 257, 665, 1558, 30, 50474, 50474, 2102, 393, 584, 30, 50524, 50524, 7497, 291, 8460, 257, 4471, 3282, 490, 4471, 732, 611, 420, 4471, 1045, 30, 50786, 50786, 1042, 11, 291, 393, 8460, 439, 295, 613, 490, 4471, 732, 13, 50920, 50920, 865, 13, 50970, 50970, 22053, 732, 307, 264, 472, 13, 51020, 51020, 759, 291, 362, 4471, 732, 11, 550, 291, 393, 1322, 439, 295, 613, 721, 13, 51152, 51152, 286, 600, 411, 11, 286, 600, 3094, 370, 867, 15148, 300, 362, 341, 412, 341, 935, 13, 51344, 51344, 8537, 411, 286, 1409, 538, 411, 516, 281, 264, 572, 2182, 11276, 11, 11181, 979, 1429, 15517, 6405, 51626, 51626, 293, 1237, 412, 264, 4009, 3089, 293, 885, 411, 11, 577, 360, 436, 4445, 613, 721, 30, 51782, 51782], "temperature": 0.0, "avg_logprob": -0.16922883845087308, "compression_ratio": 1.7857142857142858, "no_caption_prob": 2.2125303075881675e-05}, {"id": 639, "seek": 253890, "start": 2538.9, "end": 2541.02, "text": " And like, how did the types line up?", "tokens": [50364, 400, 411, 11, 577, 630, 264, 3467, 1622, 493, 30, 50470, 50470, 400, 550, 291, 536, 411, 11, 456, 311, 257, 11, 291, 458, 11, 309, 311, 411, 257, 979, 19866, 295, 316, 281, 746, 13, 50886, 50886, 440, 13397, 307, 1575, 22487, 13, 51014, 51014, 467, 920, 11051, 452, 3567, 281, 519, 466, 309, 13, 51092, 51092, 400, 286, 600, 12270, 309, 294, 15148, 370, 867, 1413, 586, 13, 51315, 51315, 509, 483, 979, 378, 433, 295, 6828, 11, 558, 30, 51440, 51440, 6595, 411, 300, 30, 51490, 51490, 1079, 13, 51540, 51540, 865, 13, 51590, 51590, 400, 309, 311, 411, 9275, 472, 295, 264, 4190, 382, 291, 352, 807, 294, 264, 15517, 13, 51766, 51766], "temperature": 0.0, "avg_logprob": -0.19565163940942587, "compression_ratio": 1.6122448979591837, "no_caption_prob": 1.0953017408610322e-05}, {"id": 640, "seek": 253890, "start": 2541.02, "end": 2549.34, "text": " And then you see like, there's a, you know, it's like a decoder of A to something.", "tokens": [50364, 400, 411, 11, 577, 630, 264, 3467, 1622, 493, 30, 50470, 50470, 400, 550, 291, 536, 411, 11, 456, 311, 257, 11, 291, 458, 11, 309, 311, 411, 257, 979, 19866, 295, 316, 281, 746, 13, 50886, 50886, 440, 13397, 307, 1575, 22487, 13, 51014, 51014, 467, 920, 11051, 452, 3567, 281, 519, 466, 309, 13, 51092, 51092, 400, 286, 600, 12270, 309, 294, 15148, 370, 867, 1413, 586, 13, 51315, 51315, 509, 483, 979, 378, 433, 295, 6828, 11, 558, 30, 51440, 51440, 6595, 411, 300, 30, 51490, 51490, 1079, 13, 51540, 51540, 865, 13, 51590, 51590, 400, 309, 311, 411, 9275, 472, 295, 264, 4190, 382, 291, 352, 807, 294, 264, 15517, 13, 51766, 51766], "temperature": 0.0, "avg_logprob": -0.19565163940942587, "compression_ratio": 1.6122448979591837, "no_caption_prob": 1.0953017408610322e-05}, {"id": 641, "seek": 253890, "start": 2549.34, "end": 2551.9, "text": " The signature is mind bending.", "tokens": [50364, 400, 411, 11, 577, 630, 264, 3467, 1622, 493, 30, 50470, 50470, 400, 550, 291, 536, 411, 11, 456, 311, 257, 11, 291, 458, 11, 309, 311, 411, 257, 979, 19866, 295, 316, 281, 746, 13, 50886, 50886, 440, 13397, 307, 1575, 22487, 13, 51014, 51014, 467, 920, 11051, 452, 3567, 281, 519, 466, 309, 13, 51092, 51092, 400, 286, 600, 12270, 309, 294, 15148, 370, 867, 1413, 586, 13, 51315, 51315, 509, 483, 979, 378, 433, 295, 6828, 11, 558, 30, 51440, 51440, 6595, 411, 300, 30, 51490, 51490, 1079, 13, 51540, 51540, 865, 13, 51590, 51590, 400, 309, 311, 411, 9275, 472, 295, 264, 4190, 382, 291, 352, 807, 294, 264, 15517, 13, 51766, 51766], "temperature": 0.0, "avg_logprob": -0.19565163940942587, "compression_ratio": 1.6122448979591837, "no_caption_prob": 1.0953017408610322e-05}, {"id": 642, "seek": 253890, "start": 2551.9, "end": 2553.46, "text": " It still hurts my brain to think about it.", "tokens": [50364, 400, 411, 11, 577, 630, 264, 3467, 1622, 493, 30, 50470, 50470, 400, 550, 291, 536, 411, 11, 456, 311, 257, 11, 291, 458, 11, 309, 311, 411, 257, 979, 19866, 295, 316, 281, 746, 13, 50886, 50886, 440, 13397, 307, 1575, 22487, 13, 51014, 51014, 467, 920, 11051, 452, 3567, 281, 519, 466, 309, 13, 51092, 51092, 400, 286, 600, 12270, 309, 294, 15148, 370, 867, 1413, 586, 13, 51315, 51315, 509, 483, 979, 378, 433, 295, 6828, 11, 558, 30, 51440, 51440, 6595, 411, 300, 30, 51490, 51490, 1079, 13, 51540, 51540, 865, 13, 51590, 51590, 400, 309, 311, 411, 9275, 472, 295, 264, 4190, 382, 291, 352, 807, 294, 264, 15517, 13, 51766, 51766], "temperature": 0.0, "avg_logprob": -0.19565163940942587, "compression_ratio": 1.6122448979591837, "no_caption_prob": 1.0953017408610322e-05}, {"id": 643, "seek": 253890, "start": 2553.46, "end": 2557.92, "text": " And I've implemented it in libraries so many times now.", "tokens": [50364, 400, 411, 11, 577, 630, 264, 3467, 1622, 493, 30, 50470, 50470, 400, 550, 291, 536, 411, 11, 456, 311, 257, 11, 291, 458, 11, 309, 311, 411, 257, 979, 19866, 295, 316, 281, 746, 13, 50886, 50886, 440, 13397, 307, 1575, 22487, 13, 51014, 51014, 467, 920, 11051, 452, 3567, 281, 519, 466, 309, 13, 51092, 51092, 400, 286, 600, 12270, 309, 294, 15148, 370, 867, 1413, 586, 13, 51315, 51315, 509, 483, 979, 378, 433, 295, 6828, 11, 558, 30, 51440, 51440, 6595, 411, 300, 30, 51490, 51490, 1079, 13, 51540, 51540, 865, 13, 51590, 51590, 400, 309, 311, 411, 9275, 472, 295, 264, 4190, 382, 291, 352, 807, 294, 264, 15517, 13, 51766, 51766], "temperature": 0.0, "avg_logprob": -0.19565163940942587, "compression_ratio": 1.6122448979591837, "no_caption_prob": 1.0953017408610322e-05}, {"id": 644, "seek": 253890, "start": 2557.92, "end": 2560.42, "text": " You get decoders of functions, right?", "tokens": [50364, 400, 411, 11, 577, 630, 264, 3467, 1622, 493, 30, 50470, 50470, 400, 550, 291, 536, 411, 11, 456, 311, 257, 11, 291, 458, 11, 309, 311, 411, 257, 979, 19866, 295, 316, 281, 746, 13, 50886, 50886, 440, 13397, 307, 1575, 22487, 13, 51014, 51014, 467, 920, 11051, 452, 3567, 281, 519, 466, 309, 13, 51092, 51092, 400, 286, 600, 12270, 309, 294, 15148, 370, 867, 1413, 586, 13, 51315, 51315, 509, 483, 979, 378, 433, 295, 6828, 11, 558, 30, 51440, 51440, 6595, 411, 300, 30, 51490, 51490, 1079, 13, 51540, 51540, 865, 13, 51590, 51590, 400, 309, 311, 411, 9275, 472, 295, 264, 4190, 382, 291, 352, 807, 294, 264, 15517, 13, 51766, 51766], "temperature": 0.0, "avg_logprob": -0.19565163940942587, "compression_ratio": 1.6122448979591837, "no_caption_prob": 1.0953017408610322e-05}, {"id": 645, "seek": 253890, "start": 2560.42, "end": 2561.42, "text": " Something like that?", "tokens": [50364, 400, 411, 11, 577, 630, 264, 3467, 1622, 493, 30, 50470, 50470, 400, 550, 291, 536, 411, 11, 456, 311, 257, 11, 291, 458, 11, 309, 311, 411, 257, 979, 19866, 295, 316, 281, 746, 13, 50886, 50886, 440, 13397, 307, 1575, 22487, 13, 51014, 51014, 467, 920, 11051, 452, 3567, 281, 519, 466, 309, 13, 51092, 51092, 400, 286, 600, 12270, 309, 294, 15148, 370, 867, 1413, 586, 13, 51315, 51315, 509, 483, 979, 378, 433, 295, 6828, 11, 558, 30, 51440, 51440, 6595, 411, 300, 30, 51490, 51490, 1079, 13, 51540, 51540, 865, 13, 51590, 51590, 400, 309, 311, 411, 9275, 472, 295, 264, 4190, 382, 291, 352, 807, 294, 264, 15517, 13, 51766, 51766], "temperature": 0.0, "avg_logprob": -0.19565163940942587, "compression_ratio": 1.6122448979591837, "no_caption_prob": 1.0953017408610322e-05}, {"id": 646, "seek": 253890, "start": 2561.42, "end": 2562.42, "text": " Yes.", "tokens": [50364, 400, 411, 11, 577, 630, 264, 3467, 1622, 493, 30, 50470, 50470, 400, 550, 291, 536, 411, 11, 456, 311, 257, 11, 291, 458, 11, 309, 311, 411, 257, 979, 19866, 295, 316, 281, 746, 13, 50886, 50886, 440, 13397, 307, 1575, 22487, 13, 51014, 51014, 467, 920, 11051, 452, 3567, 281, 519, 466, 309, 13, 51092, 51092, 400, 286, 600, 12270, 309, 294, 15148, 370, 867, 1413, 586, 13, 51315, 51315, 509, 483, 979, 378, 433, 295, 6828, 11, 558, 30, 51440, 51440, 6595, 411, 300, 30, 51490, 51490, 1079, 13, 51540, 51540, 865, 13, 51590, 51590, 400, 309, 311, 411, 9275, 472, 295, 264, 4190, 382, 291, 352, 807, 294, 264, 15517, 13, 51766, 51766], "temperature": 0.0, "avg_logprob": -0.19565163940942587, "compression_ratio": 1.6122448979591837, "no_caption_prob": 1.0953017408610322e-05}, {"id": 647, "seek": 253890, "start": 2562.42, "end": 2563.42, "text": " Yeah.", "tokens": [50364, 400, 411, 11, 577, 630, 264, 3467, 1622, 493, 30, 50470, 50470, 400, 550, 291, 536, 411, 11, 456, 311, 257, 11, 291, 458, 11, 309, 311, 411, 257, 979, 19866, 295, 316, 281, 746, 13, 50886, 50886, 440, 13397, 307, 1575, 22487, 13, 51014, 51014, 467, 920, 11051, 452, 3567, 281, 519, 466, 309, 13, 51092, 51092, 400, 286, 600, 12270, 309, 294, 15148, 370, 867, 1413, 586, 13, 51315, 51315, 509, 483, 979, 378, 433, 295, 6828, 11, 558, 30, 51440, 51440, 6595, 411, 300, 30, 51490, 51490, 1079, 13, 51540, 51540, 865, 13, 51590, 51590, 400, 309, 311, 411, 9275, 472, 295, 264, 4190, 382, 291, 352, 807, 294, 264, 15517, 13, 51766, 51766], "temperature": 0.0, "avg_logprob": -0.19565163940942587, "compression_ratio": 1.6122448979591837, "no_caption_prob": 1.0953017408610322e-05}, {"id": 648, "seek": 253890, "start": 2563.42, "end": 2566.94, "text": " And it's like applying one of the values as you go through in the pipeline.", "tokens": [50364, 400, 411, 11, 577, 630, 264, 3467, 1622, 493, 30, 50470, 50470, 400, 550, 291, 536, 411, 11, 456, 311, 257, 11, 291, 458, 11, 309, 311, 411, 257, 979, 19866, 295, 316, 281, 746, 13, 50886, 50886, 440, 13397, 307, 1575, 22487, 13, 51014, 51014, 467, 920, 11051, 452, 3567, 281, 519, 466, 309, 13, 51092, 51092, 400, 286, 600, 12270, 309, 294, 15148, 370, 867, 1413, 586, 13, 51315, 51315, 509, 483, 979, 378, 433, 295, 6828, 11, 558, 30, 51440, 51440, 6595, 411, 300, 30, 51490, 51490, 1079, 13, 51540, 51540, 865, 13, 51590, 51590, 400, 309, 311, 411, 9275, 472, 295, 264, 4190, 382, 291, 352, 807, 294, 264, 15517, 13, 51766, 51766], "temperature": 0.0, "avg_logprob": -0.19565163940942587, "compression_ratio": 1.6122448979591837, "no_caption_prob": 1.0953017408610322e-05}, {"id": 649, "seek": 256694, "start": 2566.94, "end": 2569.9, "text": " You have a function wrapped in a decoder.", "tokens": [50364, 509, 362, 257, 2445, 14226, 294, 257, 979, 19866, 13, 50512, 50512, 509, 362, 257, 11, 411, 257, 9859, 2158, 14226, 294, 257, 979, 19866, 293, 291, 434, 1566, 3079, 300, 50762, 50762, 2158, 382, 364, 6770, 281, 300, 2445, 13, 50880, 50880, 865, 13, 50930, 50930, 1743, 264, 2445, 1062, 312, 257, 1266, 6770, 2445, 13, 51042, 51042, 407, 291, 787, 3079, 472, 6770, 281, 309, 13, 51152, 51152, 400, 550, 291, 483, 646, 257, 777, 979, 19866, 300, 311, 1071, 11, 300, 311, 586, 257, 4949, 6770, 2445, 51382, 51382, 979, 19866, 11, 597, 291, 393, 550, 3079, 281, 1071, 9859, 2158, 979, 19866, 281, 3079, 6770, 4949, 13, 51774, 51774], "temperature": 0.0, "avg_logprob": -0.15426083440365998, "compression_ratio": 2.0230414746543777, "no_caption_prob": 2.507078716007527e-05}, {"id": 650, "seek": 256694, "start": 2569.9, "end": 2574.9, "text": " You have a, like a concrete value wrapped in a decoder and you're saying apply that", "tokens": [50364, 509, 362, 257, 2445, 14226, 294, 257, 979, 19866, 13, 50512, 50512, 509, 362, 257, 11, 411, 257, 9859, 2158, 14226, 294, 257, 979, 19866, 293, 291, 434, 1566, 3079, 300, 50762, 50762, 2158, 382, 364, 6770, 281, 300, 2445, 13, 50880, 50880, 865, 13, 50930, 50930, 1743, 264, 2445, 1062, 312, 257, 1266, 6770, 2445, 13, 51042, 51042, 407, 291, 787, 3079, 472, 6770, 281, 309, 13, 51152, 51152, 400, 550, 291, 483, 646, 257, 777, 979, 19866, 300, 311, 1071, 11, 300, 311, 586, 257, 4949, 6770, 2445, 51382, 51382, 979, 19866, 11, 597, 291, 393, 550, 3079, 281, 1071, 9859, 2158, 979, 19866, 281, 3079, 6770, 4949, 13, 51774, 51774], "temperature": 0.0, "avg_logprob": -0.15426083440365998, "compression_ratio": 2.0230414746543777, "no_caption_prob": 2.507078716007527e-05}, {"id": 651, "seek": 256694, "start": 2574.9, "end": 2577.26, "text": " value as an argument to that function.", "tokens": [50364, 509, 362, 257, 2445, 14226, 294, 257, 979, 19866, 13, 50512, 50512, 509, 362, 257, 11, 411, 257, 9859, 2158, 14226, 294, 257, 979, 19866, 293, 291, 434, 1566, 3079, 300, 50762, 50762, 2158, 382, 364, 6770, 281, 300, 2445, 13, 50880, 50880, 865, 13, 50930, 50930, 1743, 264, 2445, 1062, 312, 257, 1266, 6770, 2445, 13, 51042, 51042, 407, 291, 787, 3079, 472, 6770, 281, 309, 13, 51152, 51152, 400, 550, 291, 483, 646, 257, 777, 979, 19866, 300, 311, 1071, 11, 300, 311, 586, 257, 4949, 6770, 2445, 51382, 51382, 979, 19866, 11, 597, 291, 393, 550, 3079, 281, 1071, 9859, 2158, 979, 19866, 281, 3079, 6770, 4949, 13, 51774, 51774], "temperature": 0.0, "avg_logprob": -0.15426083440365998, "compression_ratio": 2.0230414746543777, "no_caption_prob": 2.507078716007527e-05}, {"id": 652, "seek": 256694, "start": 2577.26, "end": 2578.26, "text": " Yeah.", "tokens": [50364, 509, 362, 257, 2445, 14226, 294, 257, 979, 19866, 13, 50512, 50512, 509, 362, 257, 11, 411, 257, 9859, 2158, 14226, 294, 257, 979, 19866, 293, 291, 434, 1566, 3079, 300, 50762, 50762, 2158, 382, 364, 6770, 281, 300, 2445, 13, 50880, 50880, 865, 13, 50930, 50930, 1743, 264, 2445, 1062, 312, 257, 1266, 6770, 2445, 13, 51042, 51042, 407, 291, 787, 3079, 472, 6770, 281, 309, 13, 51152, 51152, 400, 550, 291, 483, 646, 257, 777, 979, 19866, 300, 311, 1071, 11, 300, 311, 586, 257, 4949, 6770, 2445, 51382, 51382, 979, 19866, 11, 597, 291, 393, 550, 3079, 281, 1071, 9859, 2158, 979, 19866, 281, 3079, 6770, 4949, 13, 51774, 51774], "temperature": 0.0, "avg_logprob": -0.15426083440365998, "compression_ratio": 2.0230414746543777, "no_caption_prob": 2.507078716007527e-05}, {"id": 653, "seek": 256694, "start": 2578.26, "end": 2580.5, "text": " Like the function might be a 10 argument function.", "tokens": [50364, 509, 362, 257, 2445, 14226, 294, 257, 979, 19866, 13, 50512, 50512, 509, 362, 257, 11, 411, 257, 9859, 2158, 14226, 294, 257, 979, 19866, 293, 291, 434, 1566, 3079, 300, 50762, 50762, 2158, 382, 364, 6770, 281, 300, 2445, 13, 50880, 50880, 865, 13, 50930, 50930, 1743, 264, 2445, 1062, 312, 257, 1266, 6770, 2445, 13, 51042, 51042, 407, 291, 787, 3079, 472, 6770, 281, 309, 13, 51152, 51152, 400, 550, 291, 483, 646, 257, 777, 979, 19866, 300, 311, 1071, 11, 300, 311, 586, 257, 4949, 6770, 2445, 51382, 51382, 979, 19866, 11, 597, 291, 393, 550, 3079, 281, 1071, 9859, 2158, 979, 19866, 281, 3079, 6770, 4949, 13, 51774, 51774], "temperature": 0.0, "avg_logprob": -0.15426083440365998, "compression_ratio": 2.0230414746543777, "no_caption_prob": 2.507078716007527e-05}, {"id": 654, "seek": 256694, "start": 2580.5, "end": 2582.7000000000003, "text": " So you only apply one argument to it.", "tokens": [50364, 509, 362, 257, 2445, 14226, 294, 257, 979, 19866, 13, 50512, 50512, 509, 362, 257, 11, 411, 257, 9859, 2158, 14226, 294, 257, 979, 19866, 293, 291, 434, 1566, 3079, 300, 50762, 50762, 2158, 382, 364, 6770, 281, 300, 2445, 13, 50880, 50880, 865, 13, 50930, 50930, 1743, 264, 2445, 1062, 312, 257, 1266, 6770, 2445, 13, 51042, 51042, 407, 291, 787, 3079, 472, 6770, 281, 309, 13, 51152, 51152, 400, 550, 291, 483, 646, 257, 777, 979, 19866, 300, 311, 1071, 11, 300, 311, 586, 257, 4949, 6770, 2445, 51382, 51382, 979, 19866, 11, 597, 291, 393, 550, 3079, 281, 1071, 9859, 2158, 979, 19866, 281, 3079, 6770, 4949, 13, 51774, 51774], "temperature": 0.0, "avg_logprob": -0.15426083440365998, "compression_ratio": 2.0230414746543777, "no_caption_prob": 2.507078716007527e-05}, {"id": 655, "seek": 256694, "start": 2582.7000000000003, "end": 2587.3, "text": " And then you get back a new decoder that's another, that's now a nine argument function", "tokens": [50364, 509, 362, 257, 2445, 14226, 294, 257, 979, 19866, 13, 50512, 50512, 509, 362, 257, 11, 411, 257, 9859, 2158, 14226, 294, 257, 979, 19866, 293, 291, 434, 1566, 3079, 300, 50762, 50762, 2158, 382, 364, 6770, 281, 300, 2445, 13, 50880, 50880, 865, 13, 50930, 50930, 1743, 264, 2445, 1062, 312, 257, 1266, 6770, 2445, 13, 51042, 51042, 407, 291, 787, 3079, 472, 6770, 281, 309, 13, 51152, 51152, 400, 550, 291, 483, 646, 257, 777, 979, 19866, 300, 311, 1071, 11, 300, 311, 586, 257, 4949, 6770, 2445, 51382, 51382, 979, 19866, 11, 597, 291, 393, 550, 3079, 281, 1071, 9859, 2158, 979, 19866, 281, 3079, 6770, 4949, 13, 51774, 51774], "temperature": 0.0, "avg_logprob": -0.15426083440365998, "compression_ratio": 2.0230414746543777, "no_caption_prob": 2.507078716007527e-05}, {"id": 656, "seek": 256694, "start": 2587.3, "end": 2595.14, "text": " decoder, which you can then apply to another concrete value decoder to apply argument nine.", "tokens": [50364, 509, 362, 257, 2445, 14226, 294, 257, 979, 19866, 13, 50512, 50512, 509, 362, 257, 11, 411, 257, 9859, 2158, 14226, 294, 257, 979, 19866, 293, 291, 434, 1566, 3079, 300, 50762, 50762, 2158, 382, 364, 6770, 281, 300, 2445, 13, 50880, 50880, 865, 13, 50930, 50930, 1743, 264, 2445, 1062, 312, 257, 1266, 6770, 2445, 13, 51042, 51042, 407, 291, 787, 3079, 472, 6770, 281, 309, 13, 51152, 51152, 400, 550, 291, 483, 646, 257, 777, 979, 19866, 300, 311, 1071, 11, 300, 311, 586, 257, 4949, 6770, 2445, 51382, 51382, 979, 19866, 11, 597, 291, 393, 550, 3079, 281, 1071, 9859, 2158, 979, 19866, 281, 3079, 6770, 4949, 13, 51774, 51774], "temperature": 0.0, "avg_logprob": -0.15426083440365998, "compression_ratio": 2.0230414746543777, "no_caption_prob": 2.507078716007527e-05}, {"id": 657, "seek": 259514, "start": 2595.14, "end": 2597.8599999999997, "text": " And now you get back an eight argument decoder and so on.", "tokens": [50364, 400, 586, 291, 483, 646, 364, 3180, 6770, 979, 19866, 293, 370, 322, 13, 50500, 50500, 865, 13, 50550, 50550, 400, 257, 979, 19866, 295, 257, 2445, 534, 1177, 380, 652, 604, 2020, 322, 1080, 1065, 13, 50738, 50738, 467, 534, 1669, 2020, 294, 341, 4319, 295, 364, 2580, 1166, 13, 50906, 50906, 1079, 13, 50956, 50956, 1079, 13, 51006, 51006, 400, 300, 311, 689, 309, 311, 6252, 4961, 13, 51082, 51082, 1779, 13, 51132, 51132, 407, 264, 6713, 7897, 727, 312, 13181, 13, 51304, 51304, 400, 300, 311, 472, 295, 264, 7595, 721, 307, 411, 264, 4471, 293, 6713, 7897, 562, 291, 483, 51601, 51601, 746, 2085, 366, 588, 1850, 293, 13600, 13, 51775, 51775], "temperature": 0.0, "avg_logprob": -0.16975834410069351, "compression_ratio": 1.6825396825396826, "no_caption_prob": 2.295906824656413e-06}, {"id": 658, "seek": 259514, "start": 2597.8599999999997, "end": 2598.8599999999997, "text": " Yeah.", "tokens": [50364, 400, 586, 291, 483, 646, 364, 3180, 6770, 979, 19866, 293, 370, 322, 13, 50500, 50500, 865, 13, 50550, 50550, 400, 257, 979, 19866, 295, 257, 2445, 534, 1177, 380, 652, 604, 2020, 322, 1080, 1065, 13, 50738, 50738, 467, 534, 1669, 2020, 294, 341, 4319, 295, 364, 2580, 1166, 13, 50906, 50906, 1079, 13, 50956, 50956, 1079, 13, 51006, 51006, 400, 300, 311, 689, 309, 311, 6252, 4961, 13, 51082, 51082, 1779, 13, 51132, 51132, 407, 264, 6713, 7897, 727, 312, 13181, 13, 51304, 51304, 400, 300, 311, 472, 295, 264, 7595, 721, 307, 411, 264, 4471, 293, 6713, 7897, 562, 291, 483, 51601, 51601, 746, 2085, 366, 588, 1850, 293, 13600, 13, 51775, 51775], "temperature": 0.0, "avg_logprob": -0.16975834410069351, "compression_ratio": 1.6825396825396826, "no_caption_prob": 2.295906824656413e-06}, {"id": 659, "seek": 259514, "start": 2598.8599999999997, "end": 2602.62, "text": " And a decoder of a function really doesn't make any sense on its own.", "tokens": [50364, 400, 586, 291, 483, 646, 364, 3180, 6770, 979, 19866, 293, 370, 322, 13, 50500, 50500, 865, 13, 50550, 50550, 400, 257, 979, 19866, 295, 257, 2445, 534, 1177, 380, 652, 604, 2020, 322, 1080, 1065, 13, 50738, 50738, 467, 534, 1669, 2020, 294, 341, 4319, 295, 364, 2580, 1166, 13, 50906, 50906, 1079, 13, 50956, 50956, 1079, 13, 51006, 51006, 400, 300, 311, 689, 309, 311, 6252, 4961, 13, 51082, 51082, 1779, 13, 51132, 51132, 407, 264, 6713, 7897, 727, 312, 13181, 13, 51304, 51304, 400, 300, 311, 472, 295, 264, 7595, 721, 307, 411, 264, 4471, 293, 6713, 7897, 562, 291, 483, 51601, 51601, 746, 2085, 366, 588, 1850, 293, 13600, 13, 51775, 51775], "temperature": 0.0, "avg_logprob": -0.16975834410069351, "compression_ratio": 1.6825396825396826, "no_caption_prob": 2.295906824656413e-06}, {"id": 660, "seek": 259514, "start": 2602.62, "end": 2605.98, "text": " It really makes sense in this context of an applicative.", "tokens": [50364, 400, 586, 291, 483, 646, 364, 3180, 6770, 979, 19866, 293, 370, 322, 13, 50500, 50500, 865, 13, 50550, 50550, 400, 257, 979, 19866, 295, 257, 2445, 534, 1177, 380, 652, 604, 2020, 322, 1080, 1065, 13, 50738, 50738, 467, 534, 1669, 2020, 294, 341, 4319, 295, 364, 2580, 1166, 13, 50906, 50906, 1079, 13, 50956, 50956, 1079, 13, 51006, 51006, 400, 300, 311, 689, 309, 311, 6252, 4961, 13, 51082, 51082, 1779, 13, 51132, 51132, 407, 264, 6713, 7897, 727, 312, 13181, 13, 51304, 51304, 400, 300, 311, 472, 295, 264, 7595, 721, 307, 411, 264, 4471, 293, 6713, 7897, 562, 291, 483, 51601, 51601, 746, 2085, 366, 588, 1850, 293, 13600, 13, 51775, 51775], "temperature": 0.0, "avg_logprob": -0.16975834410069351, "compression_ratio": 1.6825396825396826, "no_caption_prob": 2.295906824656413e-06}, {"id": 661, "seek": 259514, "start": 2605.98, "end": 2606.98, "text": " Yes.", "tokens": [50364, 400, 586, 291, 483, 646, 364, 3180, 6770, 979, 19866, 293, 370, 322, 13, 50500, 50500, 865, 13, 50550, 50550, 400, 257, 979, 19866, 295, 257, 2445, 534, 1177, 380, 652, 604, 2020, 322, 1080, 1065, 13, 50738, 50738, 467, 534, 1669, 2020, 294, 341, 4319, 295, 364, 2580, 1166, 13, 50906, 50906, 1079, 13, 50956, 50956, 1079, 13, 51006, 51006, 400, 300, 311, 689, 309, 311, 6252, 4961, 13, 51082, 51082, 1779, 13, 51132, 51132, 407, 264, 6713, 7897, 727, 312, 13181, 13, 51304, 51304, 400, 300, 311, 472, 295, 264, 7595, 721, 307, 411, 264, 4471, 293, 6713, 7897, 562, 291, 483, 51601, 51601, 746, 2085, 366, 588, 1850, 293, 13600, 13, 51775, 51775], "temperature": 0.0, "avg_logprob": -0.16975834410069351, "compression_ratio": 1.6825396825396826, "no_caption_prob": 2.295906824656413e-06}, {"id": 662, "seek": 259514, "start": 2606.98, "end": 2607.98, "text": " Yes.", "tokens": [50364, 400, 586, 291, 483, 646, 364, 3180, 6770, 979, 19866, 293, 370, 322, 13, 50500, 50500, 865, 13, 50550, 50550, 400, 257, 979, 19866, 295, 257, 2445, 534, 1177, 380, 652, 604, 2020, 322, 1080, 1065, 13, 50738, 50738, 467, 534, 1669, 2020, 294, 341, 4319, 295, 364, 2580, 1166, 13, 50906, 50906, 1079, 13, 50956, 50956, 1079, 13, 51006, 51006, 400, 300, 311, 689, 309, 311, 6252, 4961, 13, 51082, 51082, 1779, 13, 51132, 51132, 407, 264, 6713, 7897, 727, 312, 13181, 13, 51304, 51304, 400, 300, 311, 472, 295, 264, 7595, 721, 307, 411, 264, 4471, 293, 6713, 7897, 562, 291, 483, 51601, 51601, 746, 2085, 366, 588, 1850, 293, 13600, 13, 51775, 51775], "temperature": 0.0, "avg_logprob": -0.16975834410069351, "compression_ratio": 1.6825396825396826, "no_caption_prob": 2.295906824656413e-06}, {"id": 663, "seek": 259514, "start": 2607.98, "end": 2609.5, "text": " And that's where it's incredibly helpful.", "tokens": [50364, 400, 586, 291, 483, 646, 364, 3180, 6770, 979, 19866, 293, 370, 322, 13, 50500, 50500, 865, 13, 50550, 50550, 400, 257, 979, 19866, 295, 257, 2445, 534, 1177, 380, 652, 604, 2020, 322, 1080, 1065, 13, 50738, 50738, 467, 534, 1669, 2020, 294, 341, 4319, 295, 364, 2580, 1166, 13, 50906, 50906, 1079, 13, 50956, 50956, 1079, 13, 51006, 51006, 400, 300, 311, 689, 309, 311, 6252, 4961, 13, 51082, 51082, 1779, 13, 51132, 51132, 407, 264, 6713, 7897, 727, 312, 13181, 13, 51304, 51304, 400, 300, 311, 472, 295, 264, 7595, 721, 307, 411, 264, 4471, 293, 6713, 7897, 562, 291, 483, 51601, 51601, 746, 2085, 366, 588, 1850, 293, 13600, 13, 51775, 51775], "temperature": 0.0, "avg_logprob": -0.16975834410069351, "compression_ratio": 1.6825396825396826, "no_caption_prob": 2.295906824656413e-06}, {"id": 664, "seek": 259514, "start": 2609.5, "end": 2610.5, "text": " Right.", "tokens": [50364, 400, 586, 291, 483, 646, 364, 3180, 6770, 979, 19866, 293, 370, 322, 13, 50500, 50500, 865, 13, 50550, 50550, 400, 257, 979, 19866, 295, 257, 2445, 534, 1177, 380, 652, 604, 2020, 322, 1080, 1065, 13, 50738, 50738, 467, 534, 1669, 2020, 294, 341, 4319, 295, 364, 2580, 1166, 13, 50906, 50906, 1079, 13, 50956, 50956, 1079, 13, 51006, 51006, 400, 300, 311, 689, 309, 311, 6252, 4961, 13, 51082, 51082, 1779, 13, 51132, 51132, 407, 264, 6713, 7897, 727, 312, 13181, 13, 51304, 51304, 400, 300, 311, 472, 295, 264, 7595, 721, 307, 411, 264, 4471, 293, 6713, 7897, 562, 291, 483, 51601, 51601, 746, 2085, 366, 588, 1850, 293, 13600, 13, 51775, 51775], "temperature": 0.0, "avg_logprob": -0.16975834410069351, "compression_ratio": 1.6825396825396826, "no_caption_prob": 2.295906824656413e-06}, {"id": 665, "seek": 259514, "start": 2610.5, "end": 2613.94, "text": " So the error messages could be confusing.", "tokens": [50364, 400, 586, 291, 483, 646, 364, 3180, 6770, 979, 19866, 293, 370, 322, 13, 50500, 50500, 865, 13, 50550, 50550, 400, 257, 979, 19866, 295, 257, 2445, 534, 1177, 380, 652, 604, 2020, 322, 1080, 1065, 13, 50738, 50738, 467, 534, 1669, 2020, 294, 341, 4319, 295, 364, 2580, 1166, 13, 50906, 50906, 1079, 13, 50956, 50956, 1079, 13, 51006, 51006, 400, 300, 311, 689, 309, 311, 6252, 4961, 13, 51082, 51082, 1779, 13, 51132, 51132, 407, 264, 6713, 7897, 727, 312, 13181, 13, 51304, 51304, 400, 300, 311, 472, 295, 264, 7595, 721, 307, 411, 264, 4471, 293, 6713, 7897, 562, 291, 483, 51601, 51601, 746, 2085, 366, 588, 1850, 293, 13600, 13, 51775, 51775], "temperature": 0.0, "avg_logprob": -0.16975834410069351, "compression_ratio": 1.6825396825396826, "no_caption_prob": 2.295906824656413e-06}, {"id": 666, "seek": 259514, "start": 2613.94, "end": 2619.8799999999997, "text": " And that's one of the challenging things is like the map and error messages when you get", "tokens": [50364, 400, 586, 291, 483, 646, 364, 3180, 6770, 979, 19866, 293, 370, 322, 13, 50500, 50500, 865, 13, 50550, 50550, 400, 257, 979, 19866, 295, 257, 2445, 534, 1177, 380, 652, 604, 2020, 322, 1080, 1065, 13, 50738, 50738, 467, 534, 1669, 2020, 294, 341, 4319, 295, 364, 2580, 1166, 13, 50906, 50906, 1079, 13, 50956, 50956, 1079, 13, 51006, 51006, 400, 300, 311, 689, 309, 311, 6252, 4961, 13, 51082, 51082, 1779, 13, 51132, 51132, 407, 264, 6713, 7897, 727, 312, 13181, 13, 51304, 51304, 400, 300, 311, 472, 295, 264, 7595, 721, 307, 411, 264, 4471, 293, 6713, 7897, 562, 291, 483, 51601, 51601, 746, 2085, 366, 588, 1850, 293, 13600, 13, 51775, 51775], "temperature": 0.0, "avg_logprob": -0.16975834410069351, "compression_ratio": 1.6825396825396826, "no_caption_prob": 2.295906824656413e-06}, {"id": 667, "seek": 259514, "start": 2619.8799999999997, "end": 2623.3599999999997, "text": " something wrong are very clear and precise.", "tokens": [50364, 400, 586, 291, 483, 646, 364, 3180, 6770, 979, 19866, 293, 370, 322, 13, 50500, 50500, 865, 13, 50550, 50550, 400, 257, 979, 19866, 295, 257, 2445, 534, 1177, 380, 652, 604, 2020, 322, 1080, 1065, 13, 50738, 50738, 467, 534, 1669, 2020, 294, 341, 4319, 295, 364, 2580, 1166, 13, 50906, 50906, 1079, 13, 50956, 50956, 1079, 13, 51006, 51006, 400, 300, 311, 689, 309, 311, 6252, 4961, 13, 51082, 51082, 1779, 13, 51132, 51132, 407, 264, 6713, 7897, 727, 312, 13181, 13, 51304, 51304, 400, 300, 311, 472, 295, 264, 7595, 721, 307, 411, 264, 4471, 293, 6713, 7897, 562, 291, 483, 51601, 51601, 746, 2085, 366, 588, 1850, 293, 13600, 13, 51775, 51775], "temperature": 0.0, "avg_logprob": -0.16975834410069351, "compression_ratio": 1.6825396825396826, "no_caption_prob": 2.295906824656413e-06}, {"id": 668, "seek": 262336, "start": 2623.36, "end": 2629.34, "text": " The compiler isn't able to give information as precisely if you're doing end map because", "tokens": [50364, 440, 31958, 1943, 380, 1075, 281, 976, 1589, 382, 13402, 498, 291, 434, 884, 917, 4471, 570, 50663, 50663, 309, 1177, 380, 458, 2293, 577, 867, 721, 291, 1393, 281, 3079, 13, 50853, 50853, 407, 309, 393, 380, 976, 291, 264, 18356, 13, 50967, 50967, 407, 300, 311, 472, 295, 264, 4923, 39457, 13, 51017, 51017, 407, 498, 291, 600, 658, 364, 6713, 294, 257, 584, 257, 4471, 732, 420, 257, 4471, 1045, 570, 309, 311, 14853, 424, 3759, 439, 51241, 51241, 295, 552, 700, 293, 550, 1566, 11, 510, 311, 257, 1045, 6770, 2445, 11, 3079, 439, 1045, 295, 613, 51449, 51449, 12869, 11, 309, 393, 4258, 980, 291, 11, 1954, 11, 6770, 732, 295, 1045, 307, 18424, 13, 51659, 51659], "temperature": 0.0, "avg_logprob": -0.13775803965906944, "compression_ratio": 1.788679245283019, "no_caption_prob": 2.684186483747908e-06}, {"id": 669, "seek": 262336, "start": 2629.34, "end": 2633.1400000000003, "text": " it doesn't know exactly how many things you plan to apply.", "tokens": [50364, 440, 31958, 1943, 380, 1075, 281, 976, 1589, 382, 13402, 498, 291, 434, 884, 917, 4471, 570, 50663, 50663, 309, 1177, 380, 458, 2293, 577, 867, 721, 291, 1393, 281, 3079, 13, 50853, 50853, 407, 309, 393, 380, 976, 291, 264, 18356, 13, 50967, 50967, 407, 300, 311, 472, 295, 264, 4923, 39457, 13, 51017, 51017, 407, 498, 291, 600, 658, 364, 6713, 294, 257, 584, 257, 4471, 732, 420, 257, 4471, 1045, 570, 309, 311, 14853, 424, 3759, 439, 51241, 51241, 295, 552, 700, 293, 550, 1566, 11, 510, 311, 257, 1045, 6770, 2445, 11, 3079, 439, 1045, 295, 613, 51449, 51449, 12869, 11, 309, 393, 4258, 980, 291, 11, 1954, 11, 6770, 732, 295, 1045, 307, 18424, 13, 51659, 51659], "temperature": 0.0, "avg_logprob": -0.13775803965906944, "compression_ratio": 1.788679245283019, "no_caption_prob": 2.684186483747908e-06}, {"id": 670, "seek": 262336, "start": 2633.1400000000003, "end": 2635.42, "text": " So it can't give you the precision.", "tokens": [50364, 440, 31958, 1943, 380, 1075, 281, 976, 1589, 382, 13402, 498, 291, 434, 884, 917, 4471, 570, 50663, 50663, 309, 1177, 380, 458, 2293, 577, 867, 721, 291, 1393, 281, 3079, 13, 50853, 50853, 407, 309, 393, 380, 976, 291, 264, 18356, 13, 50967, 50967, 407, 300, 311, 472, 295, 264, 4923, 39457, 13, 51017, 51017, 407, 498, 291, 600, 658, 364, 6713, 294, 257, 584, 257, 4471, 732, 420, 257, 4471, 1045, 570, 309, 311, 14853, 424, 3759, 439, 51241, 51241, 295, 552, 700, 293, 550, 1566, 11, 510, 311, 257, 1045, 6770, 2445, 11, 3079, 439, 1045, 295, 613, 51449, 51449, 12869, 11, 309, 393, 4258, 980, 291, 11, 1954, 11, 6770, 732, 295, 1045, 307, 18424, 13, 51659, 51659], "temperature": 0.0, "avg_logprob": -0.13775803965906944, "compression_ratio": 1.788679245283019, "no_caption_prob": 2.684186483747908e-06}, {"id": 671, "seek": 262336, "start": 2635.42, "end": 2636.42, "text": " So that's one of the trade offs.", "tokens": [50364, 440, 31958, 1943, 380, 1075, 281, 976, 1589, 382, 13402, 498, 291, 434, 884, 917, 4471, 570, 50663, 50663, 309, 1177, 380, 458, 2293, 577, 867, 721, 291, 1393, 281, 3079, 13, 50853, 50853, 407, 309, 393, 380, 976, 291, 264, 18356, 13, 50967, 50967, 407, 300, 311, 472, 295, 264, 4923, 39457, 13, 51017, 51017, 407, 498, 291, 600, 658, 364, 6713, 294, 257, 584, 257, 4471, 732, 420, 257, 4471, 1045, 570, 309, 311, 14853, 424, 3759, 439, 51241, 51241, 295, 552, 700, 293, 550, 1566, 11, 510, 311, 257, 1045, 6770, 2445, 11, 3079, 439, 1045, 295, 613, 51449, 51449, 12869, 11, 309, 393, 4258, 980, 291, 11, 1954, 11, 6770, 732, 295, 1045, 307, 18424, 13, 51659, 51659], "temperature": 0.0, "avg_logprob": -0.13775803965906944, "compression_ratio": 1.788679245283019, "no_caption_prob": 2.684186483747908e-06}, {"id": 672, "seek": 262336, "start": 2636.42, "end": 2640.9, "text": " So if you've got an error in a say a map two or a map three because it's unwrapping all", "tokens": [50364, 440, 31958, 1943, 380, 1075, 281, 976, 1589, 382, 13402, 498, 291, 434, 884, 917, 4471, 570, 50663, 50663, 309, 1177, 380, 458, 2293, 577, 867, 721, 291, 1393, 281, 3079, 13, 50853, 50853, 407, 309, 393, 380, 976, 291, 264, 18356, 13, 50967, 50967, 407, 300, 311, 472, 295, 264, 4923, 39457, 13, 51017, 51017, 407, 498, 291, 600, 658, 364, 6713, 294, 257, 584, 257, 4471, 732, 420, 257, 4471, 1045, 570, 309, 311, 14853, 424, 3759, 439, 51241, 51241, 295, 552, 700, 293, 550, 1566, 11, 510, 311, 257, 1045, 6770, 2445, 11, 3079, 439, 1045, 295, 613, 51449, 51449, 12869, 11, 309, 393, 4258, 980, 291, 11, 1954, 11, 6770, 732, 295, 1045, 307, 18424, 13, 51659, 51659], "temperature": 0.0, "avg_logprob": -0.13775803965906944, "compression_ratio": 1.788679245283019, "no_caption_prob": 2.684186483747908e-06}, {"id": 673, "seek": 262336, "start": 2640.9, "end": 2645.06, "text": " of them first and then saying, here's a three argument function, apply all three of these", "tokens": [50364, 440, 31958, 1943, 380, 1075, 281, 976, 1589, 382, 13402, 498, 291, 434, 884, 917, 4471, 570, 50663, 50663, 309, 1177, 380, 458, 2293, 577, 867, 721, 291, 1393, 281, 3079, 13, 50853, 50853, 407, 309, 393, 380, 976, 291, 264, 18356, 13, 50967, 50967, 407, 300, 311, 472, 295, 264, 4923, 39457, 13, 51017, 51017, 407, 498, 291, 600, 658, 364, 6713, 294, 257, 584, 257, 4471, 732, 420, 257, 4471, 1045, 570, 309, 311, 14853, 424, 3759, 439, 51241, 51241, 295, 552, 700, 293, 550, 1566, 11, 510, 311, 257, 1045, 6770, 2445, 11, 3079, 439, 1045, 295, 613, 51449, 51449, 12869, 11, 309, 393, 4258, 980, 291, 11, 1954, 11, 6770, 732, 295, 1045, 307, 18424, 13, 51659, 51659], "temperature": 0.0, "avg_logprob": -0.13775803965906944, "compression_ratio": 1.788679245283019, "no_caption_prob": 2.684186483747908e-06}, {"id": 674, "seek": 262336, "start": 2645.06, "end": 2649.26, "text": " arguments, it can immediately tell you, oh, argument two of three is incorrect.", "tokens": [50364, 440, 31958, 1943, 380, 1075, 281, 976, 1589, 382, 13402, 498, 291, 434, 884, 917, 4471, 570, 50663, 50663, 309, 1177, 380, 458, 2293, 577, 867, 721, 291, 1393, 281, 3079, 13, 50853, 50853, 407, 309, 393, 380, 976, 291, 264, 18356, 13, 50967, 50967, 407, 300, 311, 472, 295, 264, 4923, 39457, 13, 51017, 51017, 407, 498, 291, 600, 658, 364, 6713, 294, 257, 584, 257, 4471, 732, 420, 257, 4471, 1045, 570, 309, 311, 14853, 424, 3759, 439, 51241, 51241, 295, 552, 700, 293, 550, 1566, 11, 510, 311, 257, 1045, 6770, 2445, 11, 3079, 439, 1045, 295, 613, 51449, 51449, 12869, 11, 309, 393, 4258, 980, 291, 11, 1954, 11, 6770, 732, 295, 1045, 307, 18424, 13, 51659, 51659], "temperature": 0.0, "avg_logprob": -0.13775803965906944, "compression_ratio": 1.788679245283019, "no_caption_prob": 2.684186483747908e-06}, {"id": 675, "seek": 264926, "start": 2649.26, "end": 2655.1000000000004, "text": " Whereas with end map, because you're slowly applying arguments one at a time and you've", "tokens": [50364, 13813, 365, 917, 4471, 11, 570, 291, 434, 5692, 9275, 12869, 472, 412, 257, 565, 293, 291, 600, 50656, 50656, 658, 428, 11, 264, 1399, 295, 9275, 552, 472, 412, 257, 565, 307, 7620, 257, 1266, 6770, 2445, 50902, 50902, 666, 257, 4949, 6770, 2445, 11, 550, 7620, 309, 666, 364, 3180, 6770, 2445, 11, 550, 257, 51060, 51060, 3407, 6770, 2445, 293, 370, 322, 13, 51162, 51162, 440, 6713, 300, 291, 434, 516, 281, 483, 307, 746, 411, 11, 1954, 11, 322, 1823, 1732, 11, 286, 5176, 257, 2445, 51488, 51488, 365, 341, 13397, 11, 457, 264, 13397, 510, 307, 406, 1596, 558, 13, 51716, 51716], "temperature": 0.0, "avg_logprob": -0.13181491291851077, "compression_ratio": 1.8916666666666666, "no_caption_prob": 1.4285219549492467e-05}, {"id": 676, "seek": 264926, "start": 2655.1000000000004, "end": 2660.0200000000004, "text": " got your, the process of applying them one at a time is convert a 10 argument function", "tokens": [50364, 13813, 365, 917, 4471, 11, 570, 291, 434, 5692, 9275, 12869, 472, 412, 257, 565, 293, 291, 600, 50656, 50656, 658, 428, 11, 264, 1399, 295, 9275, 552, 472, 412, 257, 565, 307, 7620, 257, 1266, 6770, 2445, 50902, 50902, 666, 257, 4949, 6770, 2445, 11, 550, 7620, 309, 666, 364, 3180, 6770, 2445, 11, 550, 257, 51060, 51060, 3407, 6770, 2445, 293, 370, 322, 13, 51162, 51162, 440, 6713, 300, 291, 434, 516, 281, 483, 307, 746, 411, 11, 1954, 11, 322, 1823, 1732, 11, 286, 5176, 257, 2445, 51488, 51488, 365, 341, 13397, 11, 457, 264, 13397, 510, 307, 406, 1596, 558, 13, 51716, 51716], "temperature": 0.0, "avg_logprob": -0.13181491291851077, "compression_ratio": 1.8916666666666666, "no_caption_prob": 1.4285219549492467e-05}, {"id": 677, "seek": 264926, "start": 2660.0200000000004, "end": 2663.1800000000003, "text": " into a nine argument function, then convert it into an eight argument function, then a", "tokens": [50364, 13813, 365, 917, 4471, 11, 570, 291, 434, 5692, 9275, 12869, 472, 412, 257, 565, 293, 291, 600, 50656, 50656, 658, 428, 11, 264, 1399, 295, 9275, 552, 472, 412, 257, 565, 307, 7620, 257, 1266, 6770, 2445, 50902, 50902, 666, 257, 4949, 6770, 2445, 11, 550, 7620, 309, 666, 364, 3180, 6770, 2445, 11, 550, 257, 51060, 51060, 3407, 6770, 2445, 293, 370, 322, 13, 51162, 51162, 440, 6713, 300, 291, 434, 516, 281, 483, 307, 746, 411, 11, 1954, 11, 322, 1823, 1732, 11, 286, 5176, 257, 2445, 51488, 51488, 365, 341, 13397, 11, 457, 264, 13397, 510, 307, 406, 1596, 558, 13, 51716, 51716], "temperature": 0.0, "avg_logprob": -0.13181491291851077, "compression_ratio": 1.8916666666666666, "no_caption_prob": 1.4285219549492467e-05}, {"id": 678, "seek": 264926, "start": 2663.1800000000003, "end": 2665.2200000000003, "text": " seven argument function and so on.", "tokens": [50364, 13813, 365, 917, 4471, 11, 570, 291, 434, 5692, 9275, 12869, 472, 412, 257, 565, 293, 291, 600, 50656, 50656, 658, 428, 11, 264, 1399, 295, 9275, 552, 472, 412, 257, 565, 307, 7620, 257, 1266, 6770, 2445, 50902, 50902, 666, 257, 4949, 6770, 2445, 11, 550, 7620, 309, 666, 364, 3180, 6770, 2445, 11, 550, 257, 51060, 51060, 3407, 6770, 2445, 293, 370, 322, 13, 51162, 51162, 440, 6713, 300, 291, 434, 516, 281, 483, 307, 746, 411, 11, 1954, 11, 322, 1823, 1732, 11, 286, 5176, 257, 2445, 51488, 51488, 365, 341, 13397, 11, 457, 264, 13397, 510, 307, 406, 1596, 558, 13, 51716, 51716], "temperature": 0.0, "avg_logprob": -0.13181491291851077, "compression_ratio": 1.8916666666666666, "no_caption_prob": 1.4285219549492467e-05}, {"id": 679, "seek": 264926, "start": 2665.2200000000003, "end": 2671.7400000000002, "text": " The error that you're going to get is something like, oh, on step five, I expected a function", "tokens": [50364, 13813, 365, 917, 4471, 11, 570, 291, 434, 5692, 9275, 12869, 472, 412, 257, 565, 293, 291, 600, 50656, 50656, 658, 428, 11, 264, 1399, 295, 9275, 552, 472, 412, 257, 565, 307, 7620, 257, 1266, 6770, 2445, 50902, 50902, 666, 257, 4949, 6770, 2445, 11, 550, 7620, 309, 666, 364, 3180, 6770, 2445, 11, 550, 257, 51060, 51060, 3407, 6770, 2445, 293, 370, 322, 13, 51162, 51162, 440, 6713, 300, 291, 434, 516, 281, 483, 307, 746, 411, 11, 1954, 11, 322, 1823, 1732, 11, 286, 5176, 257, 2445, 51488, 51488, 365, 341, 13397, 11, 457, 264, 13397, 510, 307, 406, 1596, 558, 13, 51716, 51716], "temperature": 0.0, "avg_logprob": -0.13181491291851077, "compression_ratio": 1.8916666666666666, "no_caption_prob": 1.4285219549492467e-05}, {"id": 680, "seek": 264926, "start": 2671.7400000000002, "end": 2676.3, "text": " with this signature, but the signature here is not quite right.", "tokens": [50364, 13813, 365, 917, 4471, 11, 570, 291, 434, 5692, 9275, 12869, 472, 412, 257, 565, 293, 291, 600, 50656, 50656, 658, 428, 11, 264, 1399, 295, 9275, 552, 472, 412, 257, 565, 307, 7620, 257, 1266, 6770, 2445, 50902, 50902, 666, 257, 4949, 6770, 2445, 11, 550, 7620, 309, 666, 364, 3180, 6770, 2445, 11, 550, 257, 51060, 51060, 3407, 6770, 2445, 293, 370, 322, 13, 51162, 51162, 440, 6713, 300, 291, 434, 516, 281, 483, 307, 746, 411, 11, 1954, 11, 322, 1823, 1732, 11, 286, 5176, 257, 2445, 51488, 51488, 365, 341, 13397, 11, 457, 264, 13397, 510, 307, 406, 1596, 558, 13, 51716, 51716], "temperature": 0.0, "avg_logprob": -0.13181491291851077, "compression_ratio": 1.8916666666666666, "no_caption_prob": 1.4285219549492467e-05}, {"id": 681, "seek": 267630, "start": 2676.3, "end": 2680.78, "text": " And it can be really a head scratcher if you don't understand under the hood what's going", "tokens": [50364, 400, 309, 393, 312, 534, 257, 1378, 8459, 260, 498, 291, 500, 380, 1223, 833, 264, 13376, 437, 311, 516, 50588, 50588, 322, 11, 498, 291, 434, 406, 4963, 365, 264, 3410, 295, 14641, 3861, 13, 50770, 50770, 407, 300, 311, 2138, 264, 25060, 13, 50868, 50868, 467, 2516, 512, 49859, 278, 11, 754, 498, 291, 434, 588, 4963, 365, 309, 13, 51130, 51130, 583, 309, 2709, 291, 1547, 295, 257, 13602, 300, 291, 434, 411, 11, 746, 311, 766, 365, 452, 5021, 13, 51370, 51370, 400, 412, 300, 935, 11, 2171, 309, 311, 4961, 281, 445, 11, 2171, 286, 603, 445, 829, 294, 452, 15517, 51642, 51642, 295, 917, 11317, 13, 51696, 51696], "temperature": 0.0, "avg_logprob": -0.1438710278478162, "compression_ratio": 1.6844106463878328, "no_caption_prob": 3.0894696010363987e-06}, {"id": 682, "seek": 267630, "start": 2680.78, "end": 2684.42, "text": " on, if you're not familiar with the concept of partial application.", "tokens": [50364, 400, 309, 393, 312, 534, 257, 1378, 8459, 260, 498, 291, 500, 380, 1223, 833, 264, 13376, 437, 311, 516, 50588, 50588, 322, 11, 498, 291, 434, 406, 4963, 365, 264, 3410, 295, 14641, 3861, 13, 50770, 50770, 407, 300, 311, 2138, 264, 25060, 13, 50868, 50868, 467, 2516, 512, 49859, 278, 11, 754, 498, 291, 434, 588, 4963, 365, 309, 13, 51130, 51130, 583, 309, 2709, 291, 1547, 295, 257, 13602, 300, 291, 434, 411, 11, 746, 311, 766, 365, 452, 5021, 13, 51370, 51370, 400, 412, 300, 935, 11, 2171, 309, 311, 4961, 281, 445, 11, 2171, 286, 603, 445, 829, 294, 452, 15517, 51642, 51642, 295, 917, 11317, 13, 51696, 51696], "temperature": 0.0, "avg_logprob": -0.1438710278478162, "compression_ratio": 1.6844106463878328, "no_caption_prob": 3.0894696010363987e-06}, {"id": 683, "seek": 267630, "start": 2684.42, "end": 2686.38, "text": " So that's definitely the downside.", "tokens": [50364, 400, 309, 393, 312, 534, 257, 1378, 8459, 260, 498, 291, 500, 380, 1223, 833, 264, 13376, 437, 311, 516, 50588, 50588, 322, 11, 498, 291, 434, 406, 4963, 365, 264, 3410, 295, 14641, 3861, 13, 50770, 50770, 407, 300, 311, 2138, 264, 25060, 13, 50868, 50868, 467, 2516, 512, 49859, 278, 11, 754, 498, 291, 434, 588, 4963, 365, 309, 13, 51130, 51130, 583, 309, 2709, 291, 1547, 295, 257, 13602, 300, 291, 434, 411, 11, 746, 311, 766, 365, 452, 5021, 13, 51370, 51370, 400, 412, 300, 935, 11, 2171, 309, 311, 4961, 281, 445, 11, 2171, 286, 603, 445, 829, 294, 452, 15517, 51642, 51642, 295, 917, 11317, 13, 51696, 51696], "temperature": 0.0, "avg_logprob": -0.1438710278478162, "compression_ratio": 1.6844106463878328, "no_caption_prob": 3.0894696010363987e-06}, {"id": 684, "seek": 267630, "start": 2686.38, "end": 2691.6200000000003, "text": " It takes some deciphering, even if you're very familiar with it.", "tokens": [50364, 400, 309, 393, 312, 534, 257, 1378, 8459, 260, 498, 291, 500, 380, 1223, 833, 264, 13376, 437, 311, 516, 50588, 50588, 322, 11, 498, 291, 434, 406, 4963, 365, 264, 3410, 295, 14641, 3861, 13, 50770, 50770, 407, 300, 311, 2138, 264, 25060, 13, 50868, 50868, 467, 2516, 512, 49859, 278, 11, 754, 498, 291, 434, 588, 4963, 365, 309, 13, 51130, 51130, 583, 309, 2709, 291, 1547, 295, 257, 13602, 300, 291, 434, 411, 11, 746, 311, 766, 365, 452, 5021, 13, 51370, 51370, 400, 412, 300, 935, 11, 2171, 309, 311, 4961, 281, 445, 11, 2171, 286, 603, 445, 829, 294, 452, 15517, 51642, 51642, 295, 917, 11317, 13, 51696, 51696], "temperature": 0.0, "avg_logprob": -0.1438710278478162, "compression_ratio": 1.6844106463878328, "no_caption_prob": 3.0894696010363987e-06}, {"id": 685, "seek": 267630, "start": 2691.6200000000003, "end": 2696.42, "text": " But it gives you enough of a clue that you're like, something's off with my chain.", "tokens": [50364, 400, 309, 393, 312, 534, 257, 1378, 8459, 260, 498, 291, 500, 380, 1223, 833, 264, 13376, 437, 311, 516, 50588, 50588, 322, 11, 498, 291, 434, 406, 4963, 365, 264, 3410, 295, 14641, 3861, 13, 50770, 50770, 407, 300, 311, 2138, 264, 25060, 13, 50868, 50868, 467, 2516, 512, 49859, 278, 11, 754, 498, 291, 434, 588, 4963, 365, 309, 13, 51130, 51130, 583, 309, 2709, 291, 1547, 295, 257, 13602, 300, 291, 434, 411, 11, 746, 311, 766, 365, 452, 5021, 13, 51370, 51370, 400, 412, 300, 935, 11, 2171, 309, 311, 4961, 281, 445, 11, 2171, 286, 603, 445, 829, 294, 452, 15517, 51642, 51642, 295, 917, 11317, 13, 51696, 51696], "temperature": 0.0, "avg_logprob": -0.1438710278478162, "compression_ratio": 1.6844106463878328, "no_caption_prob": 3.0894696010363987e-06}, {"id": 686, "seek": 267630, "start": 2696.42, "end": 2701.86, "text": " And at that point, sometimes it's helpful to just, sometimes I'll just put in my pipeline", "tokens": [50364, 400, 309, 393, 312, 534, 257, 1378, 8459, 260, 498, 291, 500, 380, 1223, 833, 264, 13376, 437, 311, 516, 50588, 50588, 322, 11, 498, 291, 434, 406, 4963, 365, 264, 3410, 295, 14641, 3861, 13, 50770, 50770, 407, 300, 311, 2138, 264, 25060, 13, 50868, 50868, 467, 2516, 512, 49859, 278, 11, 754, 498, 291, 434, 588, 4963, 365, 309, 13, 51130, 51130, 583, 309, 2709, 291, 1547, 295, 257, 13602, 300, 291, 434, 411, 11, 746, 311, 766, 365, 452, 5021, 13, 51370, 51370, 400, 412, 300, 935, 11, 2171, 309, 311, 4961, 281, 445, 11, 2171, 286, 603, 445, 829, 294, 452, 15517, 51642, 51642, 295, 917, 11317, 13, 51696, 51696], "temperature": 0.0, "avg_logprob": -0.1438710278478162, "compression_ratio": 1.6844106463878328, "no_caption_prob": 3.0894696010363987e-06}, {"id": 687, "seek": 267630, "start": 2701.86, "end": 2702.94, "text": " of end maps.", "tokens": [50364, 400, 309, 393, 312, 534, 257, 1378, 8459, 260, 498, 291, 500, 380, 1223, 833, 264, 13376, 437, 311, 516, 50588, 50588, 322, 11, 498, 291, 434, 406, 4963, 365, 264, 3410, 295, 14641, 3861, 13, 50770, 50770, 407, 300, 311, 2138, 264, 25060, 13, 50868, 50868, 467, 2516, 512, 49859, 278, 11, 754, 498, 291, 434, 588, 4963, 365, 309, 13, 51130, 51130, 583, 309, 2709, 291, 1547, 295, 257, 13602, 300, 291, 434, 411, 11, 746, 311, 766, 365, 452, 5021, 13, 51370, 51370, 400, 412, 300, 935, 11, 2171, 309, 311, 4961, 281, 445, 11, 2171, 286, 603, 445, 829, 294, 452, 15517, 51642, 51642, 295, 917, 11317, 13, 51696, 51696], "temperature": 0.0, "avg_logprob": -0.1438710278478162, "compression_ratio": 1.6844106463878328, "no_caption_prob": 3.0894696010363987e-06}, {"id": 688, "seek": 270294, "start": 2702.94, "end": 2707.46, "text": " I'll just put like a debug.to do as one of the things in the pipeline be like, all right,", "tokens": [50364, 286, 603, 445, 829, 411, 257, 24083, 13, 1353, 360, 382, 472, 295, 264, 721, 294, 264, 15517, 312, 411, 11, 439, 558, 11, 50590, 50590, 718, 311, 445, 11865, 300, 341, 472, 307, 2035, 291, 528, 309, 281, 312, 281, 19319, 264, 31958, 50834, 50834, 510, 307, 264, 1154, 456, 420, 4079, 1646, 13, 50957, 50957, 400, 550, 309, 603, 980, 291, 498, 309, 311, 920, 2902, 291, 364, 6713, 11, 264, 1154, 2067, 380, 689, 291, 51147, 51147, 829, 264, 24083, 13, 1353, 360, 13, 51222, 51222, 759, 309, 311, 406, 2902, 291, 364, 6713, 11, 498, 309, 311, 406, 2902, 291, 364, 6713, 11, 550, 291, 458, 2293, 51436, 51436, 689, 281, 574, 13, 51486, 51486, 1485, 5002, 295, 264, 1333, 295, 917, 4471, 15517, 3109, 307, 300, 291, 393, 550, 10432, 300, 51806, 51806], "temperature": 0.0, "avg_logprob": -0.1004237243107387, "compression_ratio": 1.9261992619926198, "no_caption_prob": 2.769384991552215e-06}, {"id": 689, "seek": 270294, "start": 2707.46, "end": 2712.34, "text": " let's just pretend that this one is whatever you want it to be to satisfy the compiler", "tokens": [50364, 286, 603, 445, 829, 411, 257, 24083, 13, 1353, 360, 382, 472, 295, 264, 721, 294, 264, 15517, 312, 411, 11, 439, 558, 11, 50590, 50590, 718, 311, 445, 11865, 300, 341, 472, 307, 2035, 291, 528, 309, 281, 312, 281, 19319, 264, 31958, 50834, 50834, 510, 307, 264, 1154, 456, 420, 4079, 1646, 13, 50957, 50957, 400, 550, 309, 603, 980, 291, 498, 309, 311, 920, 2902, 291, 364, 6713, 11, 264, 1154, 2067, 380, 689, 291, 51147, 51147, 829, 264, 24083, 13, 1353, 360, 13, 51222, 51222, 759, 309, 311, 406, 2902, 291, 364, 6713, 11, 498, 309, 311, 406, 2902, 291, 364, 6713, 11, 550, 291, 458, 2293, 51436, 51436, 689, 281, 574, 13, 51486, 51486, 1485, 5002, 295, 264, 1333, 295, 917, 4471, 15517, 3109, 307, 300, 291, 393, 550, 10432, 300, 51806, 51806], "temperature": 0.0, "avg_logprob": -0.1004237243107387, "compression_ratio": 1.9261992619926198, "no_caption_prob": 2.769384991552215e-06}, {"id": 690, "seek": 270294, "start": 2712.34, "end": 2714.8, "text": " here is the problem there or somewhere else.", "tokens": [50364, 286, 603, 445, 829, 411, 257, 24083, 13, 1353, 360, 382, 472, 295, 264, 721, 294, 264, 15517, 312, 411, 11, 439, 558, 11, 50590, 50590, 718, 311, 445, 11865, 300, 341, 472, 307, 2035, 291, 528, 309, 281, 312, 281, 19319, 264, 31958, 50834, 50834, 510, 307, 264, 1154, 456, 420, 4079, 1646, 13, 50957, 50957, 400, 550, 309, 603, 980, 291, 498, 309, 311, 920, 2902, 291, 364, 6713, 11, 264, 1154, 2067, 380, 689, 291, 51147, 51147, 829, 264, 24083, 13, 1353, 360, 13, 51222, 51222, 759, 309, 311, 406, 2902, 291, 364, 6713, 11, 498, 309, 311, 406, 2902, 291, 364, 6713, 11, 550, 291, 458, 2293, 51436, 51436, 689, 281, 574, 13, 51486, 51486, 1485, 5002, 295, 264, 1333, 295, 917, 4471, 15517, 3109, 307, 300, 291, 393, 550, 10432, 300, 51806, 51806], "temperature": 0.0, "avg_logprob": -0.1004237243107387, "compression_ratio": 1.9261992619926198, "no_caption_prob": 2.769384991552215e-06}, {"id": 691, "seek": 270294, "start": 2714.8, "end": 2718.6, "text": " And then it'll tell you if it's still giving you an error, the problem wasn't where you", "tokens": [50364, 286, 603, 445, 829, 411, 257, 24083, 13, 1353, 360, 382, 472, 295, 264, 721, 294, 264, 15517, 312, 411, 11, 439, 558, 11, 50590, 50590, 718, 311, 445, 11865, 300, 341, 472, 307, 2035, 291, 528, 309, 281, 312, 281, 19319, 264, 31958, 50834, 50834, 510, 307, 264, 1154, 456, 420, 4079, 1646, 13, 50957, 50957, 400, 550, 309, 603, 980, 291, 498, 309, 311, 920, 2902, 291, 364, 6713, 11, 264, 1154, 2067, 380, 689, 291, 51147, 51147, 829, 264, 24083, 13, 1353, 360, 13, 51222, 51222, 759, 309, 311, 406, 2902, 291, 364, 6713, 11, 498, 309, 311, 406, 2902, 291, 364, 6713, 11, 550, 291, 458, 2293, 51436, 51436, 689, 281, 574, 13, 51486, 51486, 1485, 5002, 295, 264, 1333, 295, 917, 4471, 15517, 3109, 307, 300, 291, 393, 550, 10432, 300, 51806, 51806], "temperature": 0.0, "avg_logprob": -0.1004237243107387, "compression_ratio": 1.9261992619926198, "no_caption_prob": 2.769384991552215e-06}, {"id": 692, "seek": 270294, "start": 2718.6, "end": 2720.1, "text": " put the debug.to do.", "tokens": [50364, 286, 603, 445, 829, 411, 257, 24083, 13, 1353, 360, 382, 472, 295, 264, 721, 294, 264, 15517, 312, 411, 11, 439, 558, 11, 50590, 50590, 718, 311, 445, 11865, 300, 341, 472, 307, 2035, 291, 528, 309, 281, 312, 281, 19319, 264, 31958, 50834, 50834, 510, 307, 264, 1154, 456, 420, 4079, 1646, 13, 50957, 50957, 400, 550, 309, 603, 980, 291, 498, 309, 311, 920, 2902, 291, 364, 6713, 11, 264, 1154, 2067, 380, 689, 291, 51147, 51147, 829, 264, 24083, 13, 1353, 360, 13, 51222, 51222, 759, 309, 311, 406, 2902, 291, 364, 6713, 11, 498, 309, 311, 406, 2902, 291, 364, 6713, 11, 550, 291, 458, 2293, 51436, 51436, 689, 281, 574, 13, 51486, 51486, 1485, 5002, 295, 264, 1333, 295, 917, 4471, 15517, 3109, 307, 300, 291, 393, 550, 10432, 300, 51806, 51806], "temperature": 0.0, "avg_logprob": -0.1004237243107387, "compression_ratio": 1.9261992619926198, "no_caption_prob": 2.769384991552215e-06}, {"id": 693, "seek": 270294, "start": 2720.1, "end": 2724.38, "text": " If it's not giving you an error, if it's not giving you an error, then you know exactly", "tokens": [50364, 286, 603, 445, 829, 411, 257, 24083, 13, 1353, 360, 382, 472, 295, 264, 721, 294, 264, 15517, 312, 411, 11, 439, 558, 11, 50590, 50590, 718, 311, 445, 11865, 300, 341, 472, 307, 2035, 291, 528, 309, 281, 312, 281, 19319, 264, 31958, 50834, 50834, 510, 307, 264, 1154, 456, 420, 4079, 1646, 13, 50957, 50957, 400, 550, 309, 603, 980, 291, 498, 309, 311, 920, 2902, 291, 364, 6713, 11, 264, 1154, 2067, 380, 689, 291, 51147, 51147, 829, 264, 24083, 13, 1353, 360, 13, 51222, 51222, 759, 309, 311, 406, 2902, 291, 364, 6713, 11, 498, 309, 311, 406, 2902, 291, 364, 6713, 11, 550, 291, 458, 2293, 51436, 51436, 689, 281, 574, 13, 51486, 51486, 1485, 5002, 295, 264, 1333, 295, 917, 4471, 15517, 3109, 307, 300, 291, 393, 550, 10432, 300, 51806, 51806], "temperature": 0.0, "avg_logprob": -0.1004237243107387, "compression_ratio": 1.9261992619926198, "no_caption_prob": 2.769384991552215e-06}, {"id": 694, "seek": 270294, "start": 2724.38, "end": 2725.38, "text": " where to look.", "tokens": [50364, 286, 603, 445, 829, 411, 257, 24083, 13, 1353, 360, 382, 472, 295, 264, 721, 294, 264, 15517, 312, 411, 11, 439, 558, 11, 50590, 50590, 718, 311, 445, 11865, 300, 341, 472, 307, 2035, 291, 528, 309, 281, 312, 281, 19319, 264, 31958, 50834, 50834, 510, 307, 264, 1154, 456, 420, 4079, 1646, 13, 50957, 50957, 400, 550, 309, 603, 980, 291, 498, 309, 311, 920, 2902, 291, 364, 6713, 11, 264, 1154, 2067, 380, 689, 291, 51147, 51147, 829, 264, 24083, 13, 1353, 360, 13, 51222, 51222, 759, 309, 311, 406, 2902, 291, 364, 6713, 11, 498, 309, 311, 406, 2902, 291, 364, 6713, 11, 550, 291, 458, 2293, 51436, 51436, 689, 281, 574, 13, 51486, 51486, 1485, 5002, 295, 264, 1333, 295, 917, 4471, 15517, 3109, 307, 300, 291, 393, 550, 10432, 300, 51806, 51806], "temperature": 0.0, "avg_logprob": -0.1004237243107387, "compression_ratio": 1.9261992619926198, "no_caption_prob": 2.769384991552215e-06}, {"id": 695, "seek": 270294, "start": 2725.38, "end": 2731.78, "text": " One advantage of the sort of end map pipeline approach is that you can then combine that", "tokens": [50364, 286, 603, 445, 829, 411, 257, 24083, 13, 1353, 360, 382, 472, 295, 264, 721, 294, 264, 15517, 312, 411, 11, 439, 558, 11, 50590, 50590, 718, 311, 445, 11865, 300, 341, 472, 307, 2035, 291, 528, 309, 281, 312, 281, 19319, 264, 31958, 50834, 50834, 510, 307, 264, 1154, 456, 420, 4079, 1646, 13, 50957, 50957, 400, 550, 309, 603, 980, 291, 498, 309, 311, 920, 2902, 291, 364, 6713, 11, 264, 1154, 2067, 380, 689, 291, 51147, 51147, 829, 264, 24083, 13, 1353, 360, 13, 51222, 51222, 759, 309, 311, 406, 2902, 291, 364, 6713, 11, 498, 309, 311, 406, 2902, 291, 364, 6713, 11, 550, 291, 458, 2293, 51436, 51436, 689, 281, 574, 13, 51486, 51486, 1485, 5002, 295, 264, 1333, 295, 917, 4471, 15517, 3109, 307, 300, 291, 393, 550, 10432, 300, 51806, 51806], "temperature": 0.0, "avg_logprob": -0.1004237243107387, "compression_ratio": 1.9261992619926198, "no_caption_prob": 2.769384991552215e-06}, {"id": 696, "seek": 273178, "start": 2731.78, "end": 2738.34, "text": " with other functions to create almost like a domain specific variation.", "tokens": [50364, 365, 661, 6828, 281, 1884, 1920, 411, 257, 9274, 2685, 12990, 13, 50692, 50692, 400, 321, 600, 2835, 257, 1326, 1413, 264, 572, 2182, 11276, 31828, 281, 3089, 15517, 13, 50888, 50888, 400, 437, 436, 600, 1096, 307, 436, 600, 2726, 341, 917, 4471, 2445, 293, 9354, 309, 365, 257, 1326, 51124, 51124, 295, 264, 854, 433, 490, 264, 31828, 281, 3089, 6405, 337, 5006, 7909, 412, 257, 1729, 4914, 13, 51445, 51445, 400, 370, 291, 393, 584, 286, 362, 341, 4739, 2519, 420, 362, 341, 4739, 15646, 292, 3100, 13, 51760, 51760], "temperature": 0.0, "avg_logprob": -0.10586595033344469, "compression_ratio": 1.694915254237288, "no_caption_prob": 2.0784658772754483e-05}, {"id": 697, "seek": 273178, "start": 2738.34, "end": 2742.26, "text": " And we've mentioned a few times the no red ink JSON to code pipeline.", "tokens": [50364, 365, 661, 6828, 281, 1884, 1920, 411, 257, 9274, 2685, 12990, 13, 50692, 50692, 400, 321, 600, 2835, 257, 1326, 1413, 264, 572, 2182, 11276, 31828, 281, 3089, 15517, 13, 50888, 50888, 400, 437, 436, 600, 1096, 307, 436, 600, 2726, 341, 917, 4471, 2445, 293, 9354, 309, 365, 257, 1326, 51124, 51124, 295, 264, 854, 433, 490, 264, 31828, 281, 3089, 6405, 337, 5006, 7909, 412, 257, 1729, 4914, 13, 51445, 51445, 400, 370, 291, 393, 584, 286, 362, 341, 4739, 2519, 420, 362, 341, 4739, 15646, 292, 3100, 13, 51760, 51760], "temperature": 0.0, "avg_logprob": -0.10586595033344469, "compression_ratio": 1.694915254237288, "no_caption_prob": 2.0784658772754483e-05}, {"id": 698, "seek": 273178, "start": 2742.26, "end": 2746.98, "text": " And what they've done is they've taken this end map function and combined it with a few", "tokens": [50364, 365, 661, 6828, 281, 1884, 1920, 411, 257, 9274, 2685, 12990, 13, 50692, 50692, 400, 321, 600, 2835, 257, 1326, 1413, 264, 572, 2182, 11276, 31828, 281, 3089, 15517, 13, 50888, 50888, 400, 437, 436, 600, 1096, 307, 436, 600, 2726, 341, 917, 4471, 2445, 293, 9354, 309, 365, 257, 1326, 51124, 51124, 295, 264, 854, 433, 490, 264, 31828, 281, 3089, 6405, 337, 5006, 7909, 412, 257, 1729, 4914, 13, 51445, 51445, 400, 370, 291, 393, 584, 286, 362, 341, 4739, 2519, 420, 362, 341, 4739, 15646, 292, 3100, 13, 51760, 51760], "temperature": 0.0, "avg_logprob": -0.10586595033344469, "compression_ratio": 1.694915254237288, "no_caption_prob": 2.0784658772754483e-05}, {"id": 699, "seek": 273178, "start": 2746.98, "end": 2753.4, "text": " of the helpers from the JSON to code library for finding fields at a particular location.", "tokens": [50364, 365, 661, 6828, 281, 1884, 1920, 411, 257, 9274, 2685, 12990, 13, 50692, 50692, 400, 321, 600, 2835, 257, 1326, 1413, 264, 572, 2182, 11276, 31828, 281, 3089, 15517, 13, 50888, 50888, 400, 437, 436, 600, 1096, 307, 436, 600, 2726, 341, 917, 4471, 2445, 293, 9354, 309, 365, 257, 1326, 51124, 51124, 295, 264, 854, 433, 490, 264, 31828, 281, 3089, 6405, 337, 5006, 7909, 412, 257, 1729, 4914, 13, 51445, 51445, 400, 370, 291, 393, 584, 286, 362, 341, 4739, 2519, 420, 362, 341, 4739, 15646, 292, 3100, 13, 51760, 51760], "temperature": 0.0, "avg_logprob": -0.10586595033344469, "compression_ratio": 1.694915254237288, "no_caption_prob": 2.0784658772754483e-05}, {"id": 700, "seek": 273178, "start": 2753.4, "end": 2759.7000000000003, "text": " And so you can say I have this required field or have this required nested path.", "tokens": [50364, 365, 661, 6828, 281, 1884, 1920, 411, 257, 9274, 2685, 12990, 13, 50692, 50692, 400, 321, 600, 2835, 257, 1326, 1413, 264, 572, 2182, 11276, 31828, 281, 3089, 15517, 13, 50888, 50888, 400, 437, 436, 600, 1096, 307, 436, 600, 2726, 341, 917, 4471, 2445, 293, 9354, 309, 365, 257, 1326, 51124, 51124, 295, 264, 854, 433, 490, 264, 31828, 281, 3089, 6405, 337, 5006, 7909, 412, 257, 1729, 4914, 13, 51445, 51445, 400, 370, 291, 393, 584, 286, 362, 341, 4739, 2519, 420, 362, 341, 4739, 15646, 292, 3100, 13, 51760, 51760], "temperature": 0.0, "avg_logprob": -0.10586595033344469, "compression_ratio": 1.694915254237288, "no_caption_prob": 2.0784658772754483e-05}, {"id": 701, "seek": 275970, "start": 2759.7, "end": 2762.18, "text": " And those can all just be piped one to another.", "tokens": [50364, 400, 729, 393, 439, 445, 312, 8489, 292, 472, 281, 1071, 13, 50488, 50488, 400, 309, 3643, 588, 1481, 281, 1401, 13, 50599, 50599, 286, 519, 1580, 567, 1177, 380, 1223, 437, 264, 5102, 775, 833, 264, 13376, 727, 920, 50762, 50762, 1223, 437, 264, 3089, 775, 13, 50858, 50858, 1436, 291, 727, 584, 11, 1954, 11, 7690, 257, 4195, 1228, 257, 4739, 700, 1315, 293, 257, 4739, 51258, 51258, 1036, 1315, 15646, 292, 833, 613, 6352, 295, 9317, 13, 51414, 51414, 1779, 13, 51464, 51464, 407, 472, 1778, 286, 841, 411, 561, 815, 2171, 445, 2524, 337, 613, 1333, 295, 917, 4471, 420, 15517, 51826, 51826], "temperature": 0.0, "avg_logprob": -0.12610625345772558, "compression_ratio": 1.704724409448819, "no_caption_prob": 4.860390163230477e-06}, {"id": 702, "seek": 275970, "start": 2762.18, "end": 2764.3999999999996, "text": " And it becomes very nice to read.", "tokens": [50364, 400, 729, 393, 439, 445, 312, 8489, 292, 472, 281, 1071, 13, 50488, 50488, 400, 309, 3643, 588, 1481, 281, 1401, 13, 50599, 50599, 286, 519, 1580, 567, 1177, 380, 1223, 437, 264, 5102, 775, 833, 264, 13376, 727, 920, 50762, 50762, 1223, 437, 264, 3089, 775, 13, 50858, 50858, 1436, 291, 727, 584, 11, 1954, 11, 7690, 257, 4195, 1228, 257, 4739, 700, 1315, 293, 257, 4739, 51258, 51258, 1036, 1315, 15646, 292, 833, 613, 6352, 295, 9317, 13, 51414, 51414, 1779, 13, 51464, 51464, 407, 472, 1778, 286, 841, 411, 561, 815, 2171, 445, 2524, 337, 613, 1333, 295, 917, 4471, 420, 15517, 51826, 51826], "temperature": 0.0, "avg_logprob": -0.12610625345772558, "compression_ratio": 1.704724409448819, "no_caption_prob": 4.860390163230477e-06}, {"id": 703, "seek": 275970, "start": 2764.3999999999996, "end": 2767.66, "text": " I think someone who doesn't understand what the pattern does under the hood could still", "tokens": [50364, 400, 729, 393, 439, 445, 312, 8489, 292, 472, 281, 1071, 13, 50488, 50488, 400, 309, 3643, 588, 1481, 281, 1401, 13, 50599, 50599, 286, 519, 1580, 567, 1177, 380, 1223, 437, 264, 5102, 775, 833, 264, 13376, 727, 920, 50762, 50762, 1223, 437, 264, 3089, 775, 13, 50858, 50858, 1436, 291, 727, 584, 11, 1954, 11, 7690, 257, 4195, 1228, 257, 4739, 700, 1315, 293, 257, 4739, 51258, 51258, 1036, 1315, 15646, 292, 833, 613, 6352, 295, 9317, 13, 51414, 51414, 1779, 13, 51464, 51464, 407, 472, 1778, 286, 841, 411, 561, 815, 2171, 445, 2524, 337, 613, 1333, 295, 917, 4471, 420, 15517, 51826, 51826], "temperature": 0.0, "avg_logprob": -0.12610625345772558, "compression_ratio": 1.704724409448819, "no_caption_prob": 4.860390163230477e-06}, {"id": 704, "seek": 275970, "start": 2767.66, "end": 2769.58, "text": " understand what the code does.", "tokens": [50364, 400, 729, 393, 439, 445, 312, 8489, 292, 472, 281, 1071, 13, 50488, 50488, 400, 309, 3643, 588, 1481, 281, 1401, 13, 50599, 50599, 286, 519, 1580, 567, 1177, 380, 1223, 437, 264, 5102, 775, 833, 264, 13376, 727, 920, 50762, 50762, 1223, 437, 264, 3089, 775, 13, 50858, 50858, 1436, 291, 727, 584, 11, 1954, 11, 7690, 257, 4195, 1228, 257, 4739, 700, 1315, 293, 257, 4739, 51258, 51258, 1036, 1315, 15646, 292, 833, 613, 6352, 295, 9317, 13, 51414, 51414, 1779, 13, 51464, 51464, 407, 472, 1778, 286, 841, 411, 561, 815, 2171, 445, 2524, 337, 613, 1333, 295, 917, 4471, 420, 15517, 51826, 51826], "temperature": 0.0, "avg_logprob": -0.12610625345772558, "compression_ratio": 1.704724409448819, "no_caption_prob": 4.860390163230477e-06}, {"id": 705, "seek": 275970, "start": 2769.58, "end": 2777.58, "text": " Because you could say, oh, construct a user using a required first name and a required", "tokens": [50364, 400, 729, 393, 439, 445, 312, 8489, 292, 472, 281, 1071, 13, 50488, 50488, 400, 309, 3643, 588, 1481, 281, 1401, 13, 50599, 50599, 286, 519, 1580, 567, 1177, 380, 1223, 437, 264, 5102, 775, 833, 264, 13376, 727, 920, 50762, 50762, 1223, 437, 264, 3089, 775, 13, 50858, 50858, 1436, 291, 727, 584, 11, 1954, 11, 7690, 257, 4195, 1228, 257, 4739, 700, 1315, 293, 257, 4739, 51258, 51258, 1036, 1315, 15646, 292, 833, 613, 6352, 295, 9317, 13, 51414, 51414, 1779, 13, 51464, 51464, 407, 472, 1778, 286, 841, 411, 561, 815, 2171, 445, 2524, 337, 613, 1333, 295, 917, 4471, 420, 15517, 51826, 51826], "temperature": 0.0, "avg_logprob": -0.12610625345772558, "compression_ratio": 1.704724409448819, "no_caption_prob": 4.860390163230477e-06}, {"id": 706, "seek": 275970, "start": 2777.58, "end": 2780.7, "text": " last name nested under these sets of keys.", "tokens": [50364, 400, 729, 393, 439, 445, 312, 8489, 292, 472, 281, 1071, 13, 50488, 50488, 400, 309, 3643, 588, 1481, 281, 1401, 13, 50599, 50599, 286, 519, 1580, 567, 1177, 380, 1223, 437, 264, 5102, 775, 833, 264, 13376, 727, 920, 50762, 50762, 1223, 437, 264, 3089, 775, 13, 50858, 50858, 1436, 291, 727, 584, 11, 1954, 11, 7690, 257, 4195, 1228, 257, 4739, 700, 1315, 293, 257, 4739, 51258, 51258, 1036, 1315, 15646, 292, 833, 613, 6352, 295, 9317, 13, 51414, 51414, 1779, 13, 51464, 51464, 407, 472, 1778, 286, 841, 411, 561, 815, 2171, 445, 2524, 337, 613, 1333, 295, 917, 4471, 420, 15517, 51826, 51826], "temperature": 0.0, "avg_logprob": -0.12610625345772558, "compression_ratio": 1.704724409448819, "no_caption_prob": 4.860390163230477e-06}, {"id": 707, "seek": 275970, "start": 2780.7, "end": 2781.7, "text": " Right.", "tokens": [50364, 400, 729, 393, 439, 445, 312, 8489, 292, 472, 281, 1071, 13, 50488, 50488, 400, 309, 3643, 588, 1481, 281, 1401, 13, 50599, 50599, 286, 519, 1580, 567, 1177, 380, 1223, 437, 264, 5102, 775, 833, 264, 13376, 727, 920, 50762, 50762, 1223, 437, 264, 3089, 775, 13, 50858, 50858, 1436, 291, 727, 584, 11, 1954, 11, 7690, 257, 4195, 1228, 257, 4739, 700, 1315, 293, 257, 4739, 51258, 51258, 1036, 1315, 15646, 292, 833, 613, 6352, 295, 9317, 13, 51414, 51414, 1779, 13, 51464, 51464, 407, 472, 1778, 286, 841, 411, 561, 815, 2171, 445, 2524, 337, 613, 1333, 295, 917, 4471, 420, 15517, 51826, 51826], "temperature": 0.0, "avg_logprob": -0.12610625345772558, "compression_ratio": 1.704724409448819, "no_caption_prob": 4.860390163230477e-06}, {"id": 708, "seek": 275970, "start": 2781.7, "end": 2788.9399999999996, "text": " So one reason I feel like people may sometimes just reach for these sort of end map or pipeline", "tokens": [50364, 400, 729, 393, 439, 445, 312, 8489, 292, 472, 281, 1071, 13, 50488, 50488, 400, 309, 3643, 588, 1481, 281, 1401, 13, 50599, 50599, 286, 519, 1580, 567, 1177, 380, 1223, 437, 264, 5102, 775, 833, 264, 13376, 727, 920, 50762, 50762, 1223, 437, 264, 3089, 775, 13, 50858, 50858, 1436, 291, 727, 584, 11, 1954, 11, 7690, 257, 4195, 1228, 257, 4739, 700, 1315, 293, 257, 4739, 51258, 51258, 1036, 1315, 15646, 292, 833, 613, 6352, 295, 9317, 13, 51414, 51414, 1779, 13, 51464, 51464, 407, 472, 1778, 286, 841, 411, 561, 815, 2171, 445, 2524, 337, 613, 1333, 295, 917, 4471, 420, 15517, 51826, 51826], "temperature": 0.0, "avg_logprob": -0.12610625345772558, "compression_ratio": 1.704724409448819, "no_caption_prob": 4.860390163230477e-06}, {"id": 709, "seek": 278894, "start": 2788.94, "end": 2795.78, "text": " functions to start with is just the workflow of changing from map to map two to map three", "tokens": [50364, 6828, 281, 722, 365, 307, 445, 264, 20993, 295, 4473, 490, 4471, 281, 4471, 732, 281, 4471, 1045, 50706, 50706, 646, 281, 4471, 732, 382, 291, 1333, 295, 4369, 721, 307, 257, 707, 857, 596, 25837, 13, 50924, 50924, 286, 3928, 286, 915, 2059, 1228, 1969, 257, 293, 1969, 2031, 293, 371, 332, 11, 597, 307, 26200, 1230, 293, 6853, 518, 51262, 51262, 1230, 439, 264, 565, 337, 341, 13, 51362, 51362, 1436, 437, 2314, 307, 291, 352, 493, 281, 264, 1622, 689, 456, 311, 257, 4471, 281, 291, 393, 312, 4992, 51596, 51596, 294, 264, 1622, 412, 264, 2863, 295, 264, 1622, 4992, 949, 264, 732, 294, 264, 4471, 281, 291, 360, 1969, 51836, 51836], "temperature": 0.0, "avg_logprob": -0.13959443367133706, "compression_ratio": 1.8616600790513833, "no_caption_prob": 3.071745595661923e-05}, {"id": 710, "seek": 278894, "start": 2795.78, "end": 2800.14, "text": " back to map two as you sort of adjust things is a little bit clunky.", "tokens": [50364, 6828, 281, 722, 365, 307, 445, 264, 20993, 295, 4473, 490, 4471, 281, 4471, 732, 281, 4471, 1045, 50706, 50706, 646, 281, 4471, 732, 382, 291, 1333, 295, 4369, 721, 307, 257, 707, 857, 596, 25837, 13, 50924, 50924, 286, 3928, 286, 915, 2059, 1228, 1969, 257, 293, 1969, 2031, 293, 371, 332, 11, 597, 307, 26200, 1230, 293, 6853, 518, 51262, 51262, 1230, 439, 264, 565, 337, 341, 13, 51362, 51362, 1436, 437, 2314, 307, 291, 352, 493, 281, 264, 1622, 689, 456, 311, 257, 4471, 281, 291, 393, 312, 4992, 51596, 51596, 294, 264, 1622, 412, 264, 2863, 295, 264, 1622, 4992, 949, 264, 732, 294, 264, 4471, 281, 291, 360, 1969, 51836, 51836], "temperature": 0.0, "avg_logprob": -0.13959443367133706, "compression_ratio": 1.8616600790513833, "no_caption_prob": 3.071745595661923e-05}, {"id": 711, "seek": 278894, "start": 2800.14, "end": 2806.9, "text": " I tend I find myself using control a and control x and vim, which is increment number and decrement", "tokens": [50364, 6828, 281, 722, 365, 307, 445, 264, 20993, 295, 4473, 490, 4471, 281, 4471, 732, 281, 4471, 1045, 50706, 50706, 646, 281, 4471, 732, 382, 291, 1333, 295, 4369, 721, 307, 257, 707, 857, 596, 25837, 13, 50924, 50924, 286, 3928, 286, 915, 2059, 1228, 1969, 257, 293, 1969, 2031, 293, 371, 332, 11, 597, 307, 26200, 1230, 293, 6853, 518, 51262, 51262, 1230, 439, 264, 565, 337, 341, 13, 51362, 51362, 1436, 437, 2314, 307, 291, 352, 493, 281, 264, 1622, 689, 456, 311, 257, 4471, 281, 291, 393, 312, 4992, 51596, 51596, 294, 264, 1622, 412, 264, 2863, 295, 264, 1622, 4992, 949, 264, 732, 294, 264, 4471, 281, 291, 360, 1969, 51836, 51836], "temperature": 0.0, "avg_logprob": -0.13959443367133706, "compression_ratio": 1.8616600790513833, "no_caption_prob": 3.071745595661923e-05}, {"id": 712, "seek": 278894, "start": 2806.9, "end": 2808.9, "text": " number all the time for this.", "tokens": [50364, 6828, 281, 722, 365, 307, 445, 264, 20993, 295, 4473, 490, 4471, 281, 4471, 732, 281, 4471, 1045, 50706, 50706, 646, 281, 4471, 732, 382, 291, 1333, 295, 4369, 721, 307, 257, 707, 857, 596, 25837, 13, 50924, 50924, 286, 3928, 286, 915, 2059, 1228, 1969, 257, 293, 1969, 2031, 293, 371, 332, 11, 597, 307, 26200, 1230, 293, 6853, 518, 51262, 51262, 1230, 439, 264, 565, 337, 341, 13, 51362, 51362, 1436, 437, 2314, 307, 291, 352, 493, 281, 264, 1622, 689, 456, 311, 257, 4471, 281, 291, 393, 312, 4992, 51596, 51596, 294, 264, 1622, 412, 264, 2863, 295, 264, 1622, 4992, 949, 264, 732, 294, 264, 4471, 281, 291, 360, 1969, 51836, 51836], "temperature": 0.0, "avg_logprob": -0.13959443367133706, "compression_ratio": 1.8616600790513833, "no_caption_prob": 3.071745595661923e-05}, {"id": 713, "seek": 278894, "start": 2808.9, "end": 2813.58, "text": " Because what happens is you go up to the line where there's a map to you can be anywhere", "tokens": [50364, 6828, 281, 722, 365, 307, 445, 264, 20993, 295, 4473, 490, 4471, 281, 4471, 732, 281, 4471, 1045, 50706, 50706, 646, 281, 4471, 732, 382, 291, 1333, 295, 4369, 721, 307, 257, 707, 857, 596, 25837, 13, 50924, 50924, 286, 3928, 286, 915, 2059, 1228, 1969, 257, 293, 1969, 2031, 293, 371, 332, 11, 597, 307, 26200, 1230, 293, 6853, 518, 51262, 51262, 1230, 439, 264, 565, 337, 341, 13, 51362, 51362, 1436, 437, 2314, 307, 291, 352, 493, 281, 264, 1622, 689, 456, 311, 257, 4471, 281, 291, 393, 312, 4992, 51596, 51596, 294, 264, 1622, 412, 264, 2863, 295, 264, 1622, 4992, 949, 264, 732, 294, 264, 4471, 281, 291, 360, 1969, 51836, 51836], "temperature": 0.0, "avg_logprob": -0.13959443367133706, "compression_ratio": 1.8616600790513833, "no_caption_prob": 3.071745595661923e-05}, {"id": 714, "seek": 278894, "start": 2813.58, "end": 2818.38, "text": " in the line at the beginning of the line anywhere before the two in the map to you do control", "tokens": [50364, 6828, 281, 722, 365, 307, 445, 264, 20993, 295, 4473, 490, 4471, 281, 4471, 732, 281, 4471, 1045, 50706, 50706, 646, 281, 4471, 732, 382, 291, 1333, 295, 4369, 721, 307, 257, 707, 857, 596, 25837, 13, 50924, 50924, 286, 3928, 286, 915, 2059, 1228, 1969, 257, 293, 1969, 2031, 293, 371, 332, 11, 597, 307, 26200, 1230, 293, 6853, 518, 51262, 51262, 1230, 439, 264, 565, 337, 341, 13, 51362, 51362, 1436, 437, 2314, 307, 291, 352, 493, 281, 264, 1622, 689, 456, 311, 257, 4471, 281, 291, 393, 312, 4992, 51596, 51596, 294, 264, 1622, 412, 264, 2863, 295, 264, 1622, 4992, 949, 264, 732, 294, 264, 4471, 281, 291, 360, 1969, 51836, 51836], "temperature": 0.0, "avg_logprob": -0.13959443367133706, "compression_ratio": 1.8616600790513833, "no_caption_prob": 3.071745595661923e-05}, {"id": 715, "seek": 281838, "start": 2818.38, "end": 2821.58, "text": " a and it increments that to map three.", "tokens": [50364, 257, 293, 309, 1946, 1117, 300, 281, 4471, 1045, 13, 50524, 50524, 407, 300, 311, 300, 311, 257, 707, 4282, 300, 286, 764, 13, 50664, 50664, 400, 286, 767, 5665, 3928, 281, 764, 264, 4471, 293, 6828, 562, 286, 478, 6260, 365, 3195, 50950, 50950, 295, 1359, 10199, 712, 9239, 13, 51052, 51052, 583, 286, 519, 309, 311, 309, 311, 257, 1871, 295, 2973, 17502, 13, 51192, 51192, 400, 456, 311, 665, 1778, 281, 445, 584, 11, 291, 458, 437, 11, 286, 500, 380, 528, 281, 2028, 365, 341, 20993, 51354, 51354, 295, 4473, 264, 917, 294, 264, 4471, 293, 633, 565, 286, 909, 746, 11, 286, 445, 528, 281, 2028, 365, 51591, 51591, 917, 4471, 633, 565, 13, 51641, 51641, 865, 11, 457, 586, 300, 291, 458, 300, 34620, 411, 572, 11, 291, 500, 380, 362, 604, 8960, 3602, 13, 51862, 51862], "temperature": 0.0, "avg_logprob": -0.1313598501271215, "compression_ratio": 1.7606557377049181, "no_caption_prob": 1.1659438314381987e-05}, {"id": 716, "seek": 281838, "start": 2821.58, "end": 2824.38, "text": " So that's that's a little trick that I use.", "tokens": [50364, 257, 293, 309, 1946, 1117, 300, 281, 4471, 1045, 13, 50524, 50524, 407, 300, 311, 300, 311, 257, 707, 4282, 300, 286, 764, 13, 50664, 50664, 400, 286, 767, 5665, 3928, 281, 764, 264, 4471, 293, 6828, 562, 286, 478, 6260, 365, 3195, 50950, 50950, 295, 1359, 10199, 712, 9239, 13, 51052, 51052, 583, 286, 519, 309, 311, 309, 311, 257, 1871, 295, 2973, 17502, 13, 51192, 51192, 400, 456, 311, 665, 1778, 281, 445, 584, 11, 291, 458, 437, 11, 286, 500, 380, 528, 281, 2028, 365, 341, 20993, 51354, 51354, 295, 4473, 264, 917, 294, 264, 4471, 293, 633, 565, 286, 909, 746, 11, 286, 445, 528, 281, 2028, 365, 51591, 51591, 917, 4471, 633, 565, 13, 51641, 51641, 865, 11, 457, 586, 300, 291, 458, 300, 34620, 411, 572, 11, 291, 500, 380, 362, 604, 8960, 3602, 13, 51862, 51862], "temperature": 0.0, "avg_logprob": -0.1313598501271215, "compression_ratio": 1.7606557377049181, "no_caption_prob": 1.1659438314381987e-05}, {"id": 717, "seek": 281838, "start": 2824.38, "end": 2830.1, "text": " And I actually personally tend to use the map and functions when I'm dealing with lots", "tokens": [50364, 257, 293, 309, 1946, 1117, 300, 281, 4471, 1045, 13, 50524, 50524, 407, 300, 311, 300, 311, 257, 707, 4282, 300, 286, 764, 13, 50664, 50664, 400, 286, 767, 5665, 3928, 281, 764, 264, 4471, 293, 6828, 562, 286, 478, 6260, 365, 3195, 50950, 50950, 295, 1359, 10199, 712, 9239, 13, 51052, 51052, 583, 286, 519, 309, 311, 309, 311, 257, 1871, 295, 2973, 17502, 13, 51192, 51192, 400, 456, 311, 665, 1778, 281, 445, 584, 11, 291, 458, 437, 11, 286, 500, 380, 528, 281, 2028, 365, 341, 20993, 51354, 51354, 295, 4473, 264, 917, 294, 264, 4471, 293, 633, 565, 286, 909, 746, 11, 286, 445, 528, 281, 2028, 365, 51591, 51591, 917, 4471, 633, 565, 13, 51641, 51641, 865, 11, 457, 586, 300, 291, 458, 300, 34620, 411, 572, 11, 291, 500, 380, 362, 604, 8960, 3602, 13, 51862, 51862], "temperature": 0.0, "avg_logprob": -0.1313598501271215, "compression_ratio": 1.7606557377049181, "no_caption_prob": 1.1659438314381987e-05}, {"id": 718, "seek": 281838, "start": 2830.1, "end": 2832.1400000000003, "text": " of small composable bits.", "tokens": [50364, 257, 293, 309, 1946, 1117, 300, 281, 4471, 1045, 13, 50524, 50524, 407, 300, 311, 300, 311, 257, 707, 4282, 300, 286, 764, 13, 50664, 50664, 400, 286, 767, 5665, 3928, 281, 764, 264, 4471, 293, 6828, 562, 286, 478, 6260, 365, 3195, 50950, 50950, 295, 1359, 10199, 712, 9239, 13, 51052, 51052, 583, 286, 519, 309, 311, 309, 311, 257, 1871, 295, 2973, 17502, 13, 51192, 51192, 400, 456, 311, 665, 1778, 281, 445, 584, 11, 291, 458, 437, 11, 286, 500, 380, 528, 281, 2028, 365, 341, 20993, 51354, 51354, 295, 4473, 264, 917, 294, 264, 4471, 293, 633, 565, 286, 909, 746, 11, 286, 445, 528, 281, 2028, 365, 51591, 51591, 917, 4471, 633, 565, 13, 51641, 51641, 865, 11, 457, 586, 300, 291, 458, 300, 34620, 411, 572, 11, 291, 500, 380, 362, 604, 8960, 3602, 13, 51862, 51862], "temperature": 0.0, "avg_logprob": -0.1313598501271215, "compression_ratio": 1.7606557377049181, "no_caption_prob": 1.1659438314381987e-05}, {"id": 719, "seek": 281838, "start": 2832.1400000000003, "end": 2834.94, "text": " But I think it's it's a matter of personal preference.", "tokens": [50364, 257, 293, 309, 1946, 1117, 300, 281, 4471, 1045, 13, 50524, 50524, 407, 300, 311, 300, 311, 257, 707, 4282, 300, 286, 764, 13, 50664, 50664, 400, 286, 767, 5665, 3928, 281, 764, 264, 4471, 293, 6828, 562, 286, 478, 6260, 365, 3195, 50950, 50950, 295, 1359, 10199, 712, 9239, 13, 51052, 51052, 583, 286, 519, 309, 311, 309, 311, 257, 1871, 295, 2973, 17502, 13, 51192, 51192, 400, 456, 311, 665, 1778, 281, 445, 584, 11, 291, 458, 437, 11, 286, 500, 380, 528, 281, 2028, 365, 341, 20993, 51354, 51354, 295, 4473, 264, 917, 294, 264, 4471, 293, 633, 565, 286, 909, 746, 11, 286, 445, 528, 281, 2028, 365, 51591, 51591, 917, 4471, 633, 565, 13, 51641, 51641, 865, 11, 457, 586, 300, 291, 458, 300, 34620, 411, 572, 11, 291, 500, 380, 362, 604, 8960, 3602, 13, 51862, 51862], "temperature": 0.0, "avg_logprob": -0.1313598501271215, "compression_ratio": 1.7606557377049181, "no_caption_prob": 1.1659438314381987e-05}, {"id": 720, "seek": 281838, "start": 2834.94, "end": 2838.1800000000003, "text": " And there's good reason to just say, you know what, I don't want to deal with this workflow", "tokens": [50364, 257, 293, 309, 1946, 1117, 300, 281, 4471, 1045, 13, 50524, 50524, 407, 300, 311, 300, 311, 257, 707, 4282, 300, 286, 764, 13, 50664, 50664, 400, 286, 767, 5665, 3928, 281, 764, 264, 4471, 293, 6828, 562, 286, 478, 6260, 365, 3195, 50950, 50950, 295, 1359, 10199, 712, 9239, 13, 51052, 51052, 583, 286, 519, 309, 311, 309, 311, 257, 1871, 295, 2973, 17502, 13, 51192, 51192, 400, 456, 311, 665, 1778, 281, 445, 584, 11, 291, 458, 437, 11, 286, 500, 380, 528, 281, 2028, 365, 341, 20993, 51354, 51354, 295, 4473, 264, 917, 294, 264, 4471, 293, 633, 565, 286, 909, 746, 11, 286, 445, 528, 281, 2028, 365, 51591, 51591, 917, 4471, 633, 565, 13, 51641, 51641, 865, 11, 457, 586, 300, 291, 458, 300, 34620, 411, 572, 11, 291, 500, 380, 362, 604, 8960, 3602, 13, 51862, 51862], "temperature": 0.0, "avg_logprob": -0.1313598501271215, "compression_ratio": 1.7606557377049181, "no_caption_prob": 1.1659438314381987e-05}, {"id": 721, "seek": 281838, "start": 2838.1800000000003, "end": 2842.92, "text": " of changing the end in the map and every time I add something, I just want to deal with", "tokens": [50364, 257, 293, 309, 1946, 1117, 300, 281, 4471, 1045, 13, 50524, 50524, 407, 300, 311, 300, 311, 257, 707, 4282, 300, 286, 764, 13, 50664, 50664, 400, 286, 767, 5665, 3928, 281, 764, 264, 4471, 293, 6828, 562, 286, 478, 6260, 365, 3195, 50950, 50950, 295, 1359, 10199, 712, 9239, 13, 51052, 51052, 583, 286, 519, 309, 311, 309, 311, 257, 1871, 295, 2973, 17502, 13, 51192, 51192, 400, 456, 311, 665, 1778, 281, 445, 584, 11, 291, 458, 437, 11, 286, 500, 380, 528, 281, 2028, 365, 341, 20993, 51354, 51354, 295, 4473, 264, 917, 294, 264, 4471, 293, 633, 565, 286, 909, 746, 11, 286, 445, 528, 281, 2028, 365, 51591, 51591, 917, 4471, 633, 565, 13, 51641, 51641, 865, 11, 457, 586, 300, 291, 458, 300, 34620, 411, 572, 11, 291, 500, 380, 362, 604, 8960, 3602, 13, 51862, 51862], "temperature": 0.0, "avg_logprob": -0.1313598501271215, "compression_ratio": 1.7606557377049181, "no_caption_prob": 1.1659438314381987e-05}, {"id": 722, "seek": 281838, "start": 2842.92, "end": 2843.92, "text": " end map every time.", "tokens": [50364, 257, 293, 309, 1946, 1117, 300, 281, 4471, 1045, 13, 50524, 50524, 407, 300, 311, 300, 311, 257, 707, 4282, 300, 286, 764, 13, 50664, 50664, 400, 286, 767, 5665, 3928, 281, 764, 264, 4471, 293, 6828, 562, 286, 478, 6260, 365, 3195, 50950, 50950, 295, 1359, 10199, 712, 9239, 13, 51052, 51052, 583, 286, 519, 309, 311, 309, 311, 257, 1871, 295, 2973, 17502, 13, 51192, 51192, 400, 456, 311, 665, 1778, 281, 445, 584, 11, 291, 458, 437, 11, 286, 500, 380, 528, 281, 2028, 365, 341, 20993, 51354, 51354, 295, 4473, 264, 917, 294, 264, 4471, 293, 633, 565, 286, 909, 746, 11, 286, 445, 528, 281, 2028, 365, 51591, 51591, 917, 4471, 633, 565, 13, 51641, 51641, 865, 11, 457, 586, 300, 291, 458, 300, 34620, 411, 572, 11, 291, 500, 380, 362, 604, 8960, 3602, 13, 51862, 51862], "temperature": 0.0, "avg_logprob": -0.1313598501271215, "compression_ratio": 1.7606557377049181, "no_caption_prob": 1.1659438314381987e-05}, {"id": 723, "seek": 281838, "start": 2843.92, "end": 2848.34, "text": " Yeah, but now that you know that shortcuts like no, you don't have any excuse anymore.", "tokens": [50364, 257, 293, 309, 1946, 1117, 300, 281, 4471, 1045, 13, 50524, 50524, 407, 300, 311, 300, 311, 257, 707, 4282, 300, 286, 764, 13, 50664, 50664, 400, 286, 767, 5665, 3928, 281, 764, 264, 4471, 293, 6828, 562, 286, 478, 6260, 365, 3195, 50950, 50950, 295, 1359, 10199, 712, 9239, 13, 51052, 51052, 583, 286, 519, 309, 311, 309, 311, 257, 1871, 295, 2973, 17502, 13, 51192, 51192, 400, 456, 311, 665, 1778, 281, 445, 584, 11, 291, 458, 437, 11, 286, 500, 380, 528, 281, 2028, 365, 341, 20993, 51354, 51354, 295, 4473, 264, 917, 294, 264, 4471, 293, 633, 565, 286, 909, 746, 11, 286, 445, 528, 281, 2028, 365, 51591, 51591, 917, 4471, 633, 565, 13, 51641, 51641, 865, 11, 457, 586, 300, 291, 458, 300, 34620, 411, 572, 11, 291, 500, 380, 362, 604, 8960, 3602, 13, 51862, 51862], "temperature": 0.0, "avg_logprob": -0.1313598501271215, "compression_ratio": 1.7606557377049181, "no_caption_prob": 1.1659438314381987e-05}, {"id": 724, "seek": 284834, "start": 2848.34, "end": 2854.26, "text": " So I'm very curious about one thing, because we've seen this pattern happen in a lot of", "tokens": [50364, 407, 286, 478, 588, 6369, 466, 472, 551, 11, 570, 321, 600, 1612, 341, 5102, 1051, 294, 257, 688, 295, 50660, 50660, 264, 4965, 15148, 420, 4965, 10392, 300, 362, 668, 3974, 484, 3974, 484, 439, 670, 411, 21156, 433, 11, 50936, 50936, 31828, 13, 50990, 50990, 583, 562, 576, 291, 2524, 337, 341, 5102, 30, 51131, 51131, 1743, 291, 434, 2390, 746, 777, 30, 51248, 51248, 682, 437, 3331, 30, 51338, 51338, 708, 6851, 576, 291, 584, 309, 576, 312, 1481, 281, 362, 257, 2512, 31927, 337, 341, 9362, 30, 51662, 51662, 286, 519, 300, 643, 2049, 27388, 1798, 984, 13, 51776, 51776], "temperature": 0.0, "avg_logprob": -0.17437639776265845, "compression_ratio": 1.616600790513834, "no_caption_prob": 2.046258668997325e-05}, {"id": 725, "seek": 284834, "start": 2854.26, "end": 2859.78, "text": " the core libraries or core concepts that have been spread out spread out all over like parsers,", "tokens": [50364, 407, 286, 478, 588, 6369, 466, 472, 551, 11, 570, 321, 600, 1612, 341, 5102, 1051, 294, 257, 688, 295, 50660, 50660, 264, 4965, 15148, 420, 4965, 10392, 300, 362, 668, 3974, 484, 3974, 484, 439, 670, 411, 21156, 433, 11, 50936, 50936, 31828, 13, 50990, 50990, 583, 562, 576, 291, 2524, 337, 341, 5102, 30, 51131, 51131, 1743, 291, 434, 2390, 746, 777, 30, 51248, 51248, 682, 437, 3331, 30, 51338, 51338, 708, 6851, 576, 291, 584, 309, 576, 312, 1481, 281, 362, 257, 2512, 31927, 337, 341, 9362, 30, 51662, 51662, 286, 519, 300, 643, 2049, 27388, 1798, 984, 13, 51776, 51776], "temperature": 0.0, "avg_logprob": -0.17437639776265845, "compression_ratio": 1.616600790513834, "no_caption_prob": 2.046258668997325e-05}, {"id": 726, "seek": 284834, "start": 2859.78, "end": 2860.86, "text": " JSON.", "tokens": [50364, 407, 286, 478, 588, 6369, 466, 472, 551, 11, 570, 321, 600, 1612, 341, 5102, 1051, 294, 257, 688, 295, 50660, 50660, 264, 4965, 15148, 420, 4965, 10392, 300, 362, 668, 3974, 484, 3974, 484, 439, 670, 411, 21156, 433, 11, 50936, 50936, 31828, 13, 50990, 50990, 583, 562, 576, 291, 2524, 337, 341, 5102, 30, 51131, 51131, 1743, 291, 434, 2390, 746, 777, 30, 51248, 51248, 682, 437, 3331, 30, 51338, 51338, 708, 6851, 576, 291, 584, 309, 576, 312, 1481, 281, 362, 257, 2512, 31927, 337, 341, 9362, 30, 51662, 51662, 286, 519, 300, 643, 2049, 27388, 1798, 984, 13, 51776, 51776], "temperature": 0.0, "avg_logprob": -0.17437639776265845, "compression_ratio": 1.616600790513834, "no_caption_prob": 2.046258668997325e-05}, {"id": 727, "seek": 284834, "start": 2860.86, "end": 2863.6800000000003, "text": " But when would you reach for this pattern?", "tokens": [50364, 407, 286, 478, 588, 6369, 466, 472, 551, 11, 570, 321, 600, 1612, 341, 5102, 1051, 294, 257, 688, 295, 50660, 50660, 264, 4965, 15148, 420, 4965, 10392, 300, 362, 668, 3974, 484, 3974, 484, 439, 670, 411, 21156, 433, 11, 50936, 50936, 31828, 13, 50990, 50990, 583, 562, 576, 291, 2524, 337, 341, 5102, 30, 51131, 51131, 1743, 291, 434, 2390, 746, 777, 30, 51248, 51248, 682, 437, 3331, 30, 51338, 51338, 708, 6851, 576, 291, 584, 309, 576, 312, 1481, 281, 362, 257, 2512, 31927, 337, 341, 9362, 30, 51662, 51662, 286, 519, 300, 643, 2049, 27388, 1798, 984, 13, 51776, 51776], "temperature": 0.0, "avg_logprob": -0.17437639776265845, "compression_ratio": 1.616600790513834, "no_caption_prob": 2.046258668997325e-05}, {"id": 728, "seek": 284834, "start": 2863.6800000000003, "end": 2866.02, "text": " Like you're building something new?", "tokens": [50364, 407, 286, 478, 588, 6369, 466, 472, 551, 11, 570, 321, 600, 1612, 341, 5102, 1051, 294, 257, 688, 295, 50660, 50660, 264, 4965, 15148, 420, 4965, 10392, 300, 362, 668, 3974, 484, 3974, 484, 439, 670, 411, 21156, 433, 11, 50936, 50936, 31828, 13, 50990, 50990, 583, 562, 576, 291, 2524, 337, 341, 5102, 30, 51131, 51131, 1743, 291, 434, 2390, 746, 777, 30, 51248, 51248, 682, 437, 3331, 30, 51338, 51338, 708, 6851, 576, 291, 584, 309, 576, 312, 1481, 281, 362, 257, 2512, 31927, 337, 341, 9362, 30, 51662, 51662, 286, 519, 300, 643, 2049, 27388, 1798, 984, 13, 51776, 51776], "temperature": 0.0, "avg_logprob": -0.17437639776265845, "compression_ratio": 1.616600790513834, "no_caption_prob": 2.046258668997325e-05}, {"id": 729, "seek": 284834, "start": 2866.02, "end": 2867.82, "text": " In what cases?", "tokens": [50364, 407, 286, 478, 588, 6369, 466, 472, 551, 11, 570, 321, 600, 1612, 341, 5102, 1051, 294, 257, 688, 295, 50660, 50660, 264, 4965, 15148, 420, 4965, 10392, 300, 362, 668, 3974, 484, 3974, 484, 439, 670, 411, 21156, 433, 11, 50936, 50936, 31828, 13, 50990, 50990, 583, 562, 576, 291, 2524, 337, 341, 5102, 30, 51131, 51131, 1743, 291, 434, 2390, 746, 777, 30, 51248, 51248, 682, 437, 3331, 30, 51338, 51338, 708, 6851, 576, 291, 584, 309, 576, 312, 1481, 281, 362, 257, 2512, 31927, 337, 341, 9362, 30, 51662, 51662, 286, 519, 300, 643, 2049, 27388, 1798, 984, 13, 51776, 51776], "temperature": 0.0, "avg_logprob": -0.17437639776265845, "compression_ratio": 1.616600790513834, "no_caption_prob": 2.046258668997325e-05}, {"id": 730, "seek": 284834, "start": 2867.82, "end": 2874.3, "text": " What situations would you say it would be nice to have a combinator for this API?", "tokens": [50364, 407, 286, 478, 588, 6369, 466, 472, 551, 11, 570, 321, 600, 1612, 341, 5102, 1051, 294, 257, 688, 295, 50660, 50660, 264, 4965, 15148, 420, 4965, 10392, 300, 362, 668, 3974, 484, 3974, 484, 439, 670, 411, 21156, 433, 11, 50936, 50936, 31828, 13, 50990, 50990, 583, 562, 576, 291, 2524, 337, 341, 5102, 30, 51131, 51131, 1743, 291, 434, 2390, 746, 777, 30, 51248, 51248, 682, 437, 3331, 30, 51338, 51338, 708, 6851, 576, 291, 584, 309, 576, 312, 1481, 281, 362, 257, 2512, 31927, 337, 341, 9362, 30, 51662, 51662, 286, 519, 300, 643, 2049, 27388, 1798, 984, 13, 51776, 51776], "temperature": 0.0, "avg_logprob": -0.17437639776265845, "compression_ratio": 1.616600790513834, "no_caption_prob": 2.046258668997325e-05}, {"id": 731, "seek": 284834, "start": 2874.3, "end": 2876.58, "text": " I think that need often arises organically.", "tokens": [50364, 407, 286, 478, 588, 6369, 466, 472, 551, 11, 570, 321, 600, 1612, 341, 5102, 1051, 294, 257, 688, 295, 50660, 50660, 264, 4965, 15148, 420, 4965, 10392, 300, 362, 668, 3974, 484, 3974, 484, 439, 670, 411, 21156, 433, 11, 50936, 50936, 31828, 13, 50990, 50990, 583, 562, 576, 291, 2524, 337, 341, 5102, 30, 51131, 51131, 1743, 291, 434, 2390, 746, 777, 30, 51248, 51248, 682, 437, 3331, 30, 51338, 51338, 708, 6851, 576, 291, 584, 309, 576, 312, 1481, 281, 362, 257, 2512, 31927, 337, 341, 9362, 30, 51662, 51662, 286, 519, 300, 643, 2049, 27388, 1798, 984, 13, 51776, 51776], "temperature": 0.0, "avg_logprob": -0.17437639776265845, "compression_ratio": 1.616600790513834, "no_caption_prob": 2.046258668997325e-05}, {"id": 732, "seek": 287658, "start": 2876.58, "end": 2881.38, "text": " You'll sort of start working with your type and realize, oh, actually, I need a way to", "tokens": [50364, 509, 603, 1333, 295, 722, 1364, 365, 428, 2010, 293, 4325, 11, 1954, 11, 767, 11, 286, 643, 257, 636, 281, 50604, 50604, 10432, 13, 50654, 50654, 400, 300, 311, 562, 341, 1333, 295, 551, 486, 20288, 13, 50825, 50825, 5048, 5101, 11, 341, 1333, 295, 551, 307, 2673, 787, 2978, 337, 3467, 300, 362, 257, 2010, 7006, 51080, 51080, 294, 552, 13, 51130, 51130, 407, 498, 291, 362, 257, 9859, 2010, 11, 300, 311, 512, 733, 295, 465, 449, 3758, 2158, 420, 746, 411, 51356, 51356, 300, 11, 291, 434, 406, 516, 281, 643, 257, 4471, 281, 570, 456, 311, 572, 1333, 295, 456, 307, 572, 1333, 295, 7284, 51601, 51601, 2158, 281, 4088, 13, 51678, 51678], "temperature": 0.0, "avg_logprob": -0.13666844367980957, "compression_ratio": 1.7450980392156863, "no_caption_prob": 8.530163540854119e-06}, {"id": 733, "seek": 287658, "start": 2881.38, "end": 2882.38, "text": " combine.", "tokens": [50364, 509, 603, 1333, 295, 722, 1364, 365, 428, 2010, 293, 4325, 11, 1954, 11, 767, 11, 286, 643, 257, 636, 281, 50604, 50604, 10432, 13, 50654, 50654, 400, 300, 311, 562, 341, 1333, 295, 551, 486, 20288, 13, 50825, 50825, 5048, 5101, 11, 341, 1333, 295, 551, 307, 2673, 787, 2978, 337, 3467, 300, 362, 257, 2010, 7006, 51080, 51080, 294, 552, 13, 51130, 51130, 407, 498, 291, 362, 257, 9859, 2010, 11, 300, 311, 512, 733, 295, 465, 449, 3758, 2158, 420, 746, 411, 51356, 51356, 300, 11, 291, 434, 406, 516, 281, 643, 257, 4471, 281, 570, 456, 311, 572, 1333, 295, 456, 307, 572, 1333, 295, 7284, 51601, 51601, 2158, 281, 4088, 13, 51678, 51678], "temperature": 0.0, "avg_logprob": -0.13666844367980957, "compression_ratio": 1.7450980392156863, "no_caption_prob": 8.530163540854119e-06}, {"id": 734, "seek": 287658, "start": 2882.38, "end": 2885.7999999999997, "text": " And that's when this sort of thing will arise.", "tokens": [50364, 509, 603, 1333, 295, 722, 1364, 365, 428, 2010, 293, 4325, 11, 1954, 11, 767, 11, 286, 643, 257, 636, 281, 50604, 50604, 10432, 13, 50654, 50654, 400, 300, 311, 562, 341, 1333, 295, 551, 486, 20288, 13, 50825, 50825, 5048, 5101, 11, 341, 1333, 295, 551, 307, 2673, 787, 2978, 337, 3467, 300, 362, 257, 2010, 7006, 51080, 51080, 294, 552, 13, 51130, 51130, 407, 498, 291, 362, 257, 9859, 2010, 11, 300, 311, 512, 733, 295, 465, 449, 3758, 2158, 420, 746, 411, 51356, 51356, 300, 11, 291, 434, 406, 516, 281, 643, 257, 4471, 281, 570, 456, 311, 572, 1333, 295, 456, 307, 572, 1333, 295, 7284, 51601, 51601, 2158, 281, 4088, 13, 51678, 51678], "temperature": 0.0, "avg_logprob": -0.13666844367980957, "compression_ratio": 1.7450980392156863, "no_caption_prob": 8.530163540854119e-06}, {"id": 735, "seek": 287658, "start": 2885.7999999999997, "end": 2890.9, "text": " More generally, this sort of thing is usually only needed for types that have a type variable", "tokens": [50364, 509, 603, 1333, 295, 722, 1364, 365, 428, 2010, 293, 4325, 11, 1954, 11, 767, 11, 286, 643, 257, 636, 281, 50604, 50604, 10432, 13, 50654, 50654, 400, 300, 311, 562, 341, 1333, 295, 551, 486, 20288, 13, 50825, 50825, 5048, 5101, 11, 341, 1333, 295, 551, 307, 2673, 787, 2978, 337, 3467, 300, 362, 257, 2010, 7006, 51080, 51080, 294, 552, 13, 51130, 51130, 407, 498, 291, 362, 257, 9859, 2010, 11, 300, 311, 512, 733, 295, 465, 449, 3758, 2158, 420, 746, 411, 51356, 51356, 300, 11, 291, 434, 406, 516, 281, 643, 257, 4471, 281, 570, 456, 311, 572, 1333, 295, 456, 307, 572, 1333, 295, 7284, 51601, 51601, 2158, 281, 4088, 13, 51678, 51678], "temperature": 0.0, "avg_logprob": -0.13666844367980957, "compression_ratio": 1.7450980392156863, "no_caption_prob": 8.530163540854119e-06}, {"id": 736, "seek": 287658, "start": 2890.9, "end": 2891.9, "text": " in them.", "tokens": [50364, 509, 603, 1333, 295, 722, 1364, 365, 428, 2010, 293, 4325, 11, 1954, 11, 767, 11, 286, 643, 257, 636, 281, 50604, 50604, 10432, 13, 50654, 50654, 400, 300, 311, 562, 341, 1333, 295, 551, 486, 20288, 13, 50825, 50825, 5048, 5101, 11, 341, 1333, 295, 551, 307, 2673, 787, 2978, 337, 3467, 300, 362, 257, 2010, 7006, 51080, 51080, 294, 552, 13, 51130, 51130, 407, 498, 291, 362, 257, 9859, 2010, 11, 300, 311, 512, 733, 295, 465, 449, 3758, 2158, 420, 746, 411, 51356, 51356, 300, 11, 291, 434, 406, 516, 281, 643, 257, 4471, 281, 570, 456, 311, 572, 1333, 295, 456, 307, 572, 1333, 295, 7284, 51601, 51601, 2158, 281, 4088, 13, 51678, 51678], "temperature": 0.0, "avg_logprob": -0.13666844367980957, "compression_ratio": 1.7450980392156863, "no_caption_prob": 8.530163540854119e-06}, {"id": 737, "seek": 287658, "start": 2891.9, "end": 2896.42, "text": " So if you have a concrete type, that's some kind of enum style value or something like", "tokens": [50364, 509, 603, 1333, 295, 722, 1364, 365, 428, 2010, 293, 4325, 11, 1954, 11, 767, 11, 286, 643, 257, 636, 281, 50604, 50604, 10432, 13, 50654, 50654, 400, 300, 311, 562, 341, 1333, 295, 551, 486, 20288, 13, 50825, 50825, 5048, 5101, 11, 341, 1333, 295, 551, 307, 2673, 787, 2978, 337, 3467, 300, 362, 257, 2010, 7006, 51080, 51080, 294, 552, 13, 51130, 51130, 407, 498, 291, 362, 257, 9859, 2010, 11, 300, 311, 512, 733, 295, 465, 449, 3758, 2158, 420, 746, 411, 51356, 51356, 300, 11, 291, 434, 406, 516, 281, 643, 257, 4471, 281, 570, 456, 311, 572, 1333, 295, 456, 307, 572, 1333, 295, 7284, 51601, 51601, 2158, 281, 4088, 13, 51678, 51678], "temperature": 0.0, "avg_logprob": -0.13666844367980957, "compression_ratio": 1.7450980392156863, "no_caption_prob": 8.530163540854119e-06}, {"id": 738, "seek": 287658, "start": 2896.42, "end": 2901.3199999999997, "text": " that, you're not going to need a map to because there's no sort of there is no sort of inner", "tokens": [50364, 509, 603, 1333, 295, 722, 1364, 365, 428, 2010, 293, 4325, 11, 1954, 11, 767, 11, 286, 643, 257, 636, 281, 50604, 50604, 10432, 13, 50654, 50654, 400, 300, 311, 562, 341, 1333, 295, 551, 486, 20288, 13, 50825, 50825, 5048, 5101, 11, 341, 1333, 295, 551, 307, 2673, 787, 2978, 337, 3467, 300, 362, 257, 2010, 7006, 51080, 51080, 294, 552, 13, 51130, 51130, 407, 498, 291, 362, 257, 9859, 2010, 11, 300, 311, 512, 733, 295, 465, 449, 3758, 2158, 420, 746, 411, 51356, 51356, 300, 11, 291, 434, 406, 516, 281, 643, 257, 4471, 281, 570, 456, 311, 572, 1333, 295, 456, 307, 572, 1333, 295, 7284, 51601, 51601, 2158, 281, 4088, 13, 51678, 51678], "temperature": 0.0, "avg_logprob": -0.13666844367980957, "compression_ratio": 1.7450980392156863, "no_caption_prob": 8.530163540854119e-06}, {"id": 739, "seek": 287658, "start": 2901.3199999999997, "end": 2902.86, "text": " value to transform.", "tokens": [50364, 509, 603, 1333, 295, 722, 1364, 365, 428, 2010, 293, 4325, 11, 1954, 11, 767, 11, 286, 643, 257, 636, 281, 50604, 50604, 10432, 13, 50654, 50654, 400, 300, 311, 562, 341, 1333, 295, 551, 486, 20288, 13, 50825, 50825, 5048, 5101, 11, 341, 1333, 295, 551, 307, 2673, 787, 2978, 337, 3467, 300, 362, 257, 2010, 7006, 51080, 51080, 294, 552, 13, 51130, 51130, 407, 498, 291, 362, 257, 9859, 2010, 11, 300, 311, 512, 733, 295, 465, 449, 3758, 2158, 420, 746, 411, 51356, 51356, 300, 11, 291, 434, 406, 516, 281, 643, 257, 4471, 281, 570, 456, 311, 572, 1333, 295, 456, 307, 572, 1333, 295, 7284, 51601, 51601, 2158, 281, 4088, 13, 51678, 51678], "temperature": 0.0, "avg_logprob": -0.13666844367980957, "compression_ratio": 1.7450980392156863, "no_caption_prob": 8.530163540854119e-06}, {"id": 740, "seek": 290286, "start": 2902.86, "end": 2909.34, "text": " Yeah, but you could still want to combine two elements to be a single element, like", "tokens": [50364, 865, 11, 457, 291, 727, 920, 528, 281, 10432, 732, 4959, 281, 312, 257, 2167, 4478, 11, 411, 50688, 50688, 257, 1329, 295, 732, 721, 3574, 666, 257, 1329, 295, 472, 551, 13, 50840, 50840, 1042, 11, 586, 309, 311, 264, 38514, 3391, 322, 264, 1329, 11, 406, 264, 3174, 2564, 13, 51076, 51076, 821, 366, 512, 321, 600, 668, 1417, 257, 688, 466, 11, 291, 458, 11, 439, 291, 643, 307, 257, 4471, 281, 2445, 51326, 51326, 337, 341, 281, 1207, 382, 2580, 1166, 293, 611, 257, 47479, 13, 51490, 51490, 42494, 11, 456, 311, 611, 257, 992, 295, 4474, 337, 300, 264, 4471, 281, 2445, 2203, 281, 1524, 294, 51784, 51784], "temperature": 0.0, "avg_logprob": -0.19998457535453465, "compression_ratio": 1.742063492063492, "no_caption_prob": 2.046249937848188e-05}, {"id": 741, "seek": 290286, "start": 2909.34, "end": 2912.38, "text": " a list of two things turned into a list of one thing.", "tokens": [50364, 865, 11, 457, 291, 727, 920, 528, 281, 10432, 732, 4959, 281, 312, 257, 2167, 4478, 11, 411, 50688, 50688, 257, 1329, 295, 732, 721, 3574, 666, 257, 1329, 295, 472, 551, 13, 50840, 50840, 1042, 11, 586, 309, 311, 264, 38514, 3391, 322, 264, 1329, 11, 406, 264, 3174, 2564, 13, 51076, 51076, 821, 366, 512, 321, 600, 668, 1417, 257, 688, 466, 11, 291, 458, 11, 439, 291, 643, 307, 257, 4471, 281, 2445, 51326, 51326, 337, 341, 281, 1207, 382, 2580, 1166, 293, 611, 257, 47479, 13, 51490, 51490, 42494, 11, 456, 311, 611, 257, 992, 295, 4474, 337, 300, 264, 4471, 281, 2445, 2203, 281, 1524, 294, 51784, 51784], "temperature": 0.0, "avg_logprob": -0.19998457535453465, "compression_ratio": 1.742063492063492, "no_caption_prob": 2.046249937848188e-05}, {"id": 742, "seek": 290286, "start": 2912.38, "end": 2917.1, "text": " Well, now it's the combinators on the list, not the item itself.", "tokens": [50364, 865, 11, 457, 291, 727, 920, 528, 281, 10432, 732, 4959, 281, 312, 257, 2167, 4478, 11, 411, 50688, 50688, 257, 1329, 295, 732, 721, 3574, 666, 257, 1329, 295, 472, 551, 13, 50840, 50840, 1042, 11, 586, 309, 311, 264, 38514, 3391, 322, 264, 1329, 11, 406, 264, 3174, 2564, 13, 51076, 51076, 821, 366, 512, 321, 600, 668, 1417, 257, 688, 466, 11, 291, 458, 11, 439, 291, 643, 307, 257, 4471, 281, 2445, 51326, 51326, 337, 341, 281, 1207, 382, 2580, 1166, 293, 611, 257, 47479, 13, 51490, 51490, 42494, 11, 456, 311, 611, 257, 992, 295, 4474, 337, 300, 264, 4471, 281, 2445, 2203, 281, 1524, 294, 51784, 51784], "temperature": 0.0, "avg_logprob": -0.19998457535453465, "compression_ratio": 1.742063492063492, "no_caption_prob": 2.046249937848188e-05}, {"id": 743, "seek": 290286, "start": 2917.1, "end": 2922.1, "text": " There are some we've been talking a lot about, you know, all you need is a map to function", "tokens": [50364, 865, 11, 457, 291, 727, 920, 528, 281, 10432, 732, 4959, 281, 312, 257, 2167, 4478, 11, 411, 50688, 50688, 257, 1329, 295, 732, 721, 3574, 666, 257, 1329, 295, 472, 551, 13, 50840, 50840, 1042, 11, 586, 309, 311, 264, 38514, 3391, 322, 264, 1329, 11, 406, 264, 3174, 2564, 13, 51076, 51076, 821, 366, 512, 321, 600, 668, 1417, 257, 688, 466, 11, 291, 458, 11, 439, 291, 643, 307, 257, 4471, 281, 2445, 51326, 51326, 337, 341, 281, 1207, 382, 2580, 1166, 293, 611, 257, 47479, 13, 51490, 51490, 42494, 11, 456, 311, 611, 257, 992, 295, 4474, 337, 300, 264, 4471, 281, 2445, 2203, 281, 1524, 294, 51784, 51784], "temperature": 0.0, "avg_logprob": -0.19998457535453465, "compression_ratio": 1.742063492063492, "no_caption_prob": 2.046249937848188e-05}, {"id": 744, "seek": 290286, "start": 2922.1, "end": 2925.38, "text": " for this to count as applicative and also a constructor.", "tokens": [50364, 865, 11, 457, 291, 727, 920, 528, 281, 10432, 732, 4959, 281, 312, 257, 2167, 4478, 11, 411, 50688, 50688, 257, 1329, 295, 732, 721, 3574, 666, 257, 1329, 295, 472, 551, 13, 50840, 50840, 1042, 11, 586, 309, 311, 264, 38514, 3391, 322, 264, 1329, 11, 406, 264, 3174, 2564, 13, 51076, 51076, 821, 366, 512, 321, 600, 668, 1417, 257, 688, 466, 11, 291, 458, 11, 439, 291, 643, 307, 257, 4471, 281, 2445, 51326, 51326, 337, 341, 281, 1207, 382, 2580, 1166, 293, 611, 257, 47479, 13, 51490, 51490, 42494, 11, 456, 311, 611, 257, 992, 295, 4474, 337, 300, 264, 4471, 281, 2445, 2203, 281, 1524, 294, 51784, 51784], "temperature": 0.0, "avg_logprob": -0.19998457535453465, "compression_ratio": 1.742063492063492, "no_caption_prob": 2.046249937848188e-05}, {"id": 745, "seek": 290286, "start": 2925.38, "end": 2931.26, "text": " Technically, there's also a set of rules for that the map to function needs to follow in", "tokens": [50364, 865, 11, 457, 291, 727, 920, 528, 281, 10432, 732, 4959, 281, 312, 257, 2167, 4478, 11, 411, 50688, 50688, 257, 1329, 295, 732, 721, 3574, 666, 257, 1329, 295, 472, 551, 13, 50840, 50840, 1042, 11, 586, 309, 311, 264, 38514, 3391, 322, 264, 1329, 11, 406, 264, 3174, 2564, 13, 51076, 51076, 821, 366, 512, 321, 600, 668, 1417, 257, 688, 466, 11, 291, 458, 11, 439, 291, 643, 307, 257, 4471, 281, 2445, 51326, 51326, 337, 341, 281, 1207, 382, 2580, 1166, 293, 611, 257, 47479, 13, 51490, 51490, 42494, 11, 456, 311, 611, 257, 992, 295, 4474, 337, 300, 264, 4471, 281, 2445, 2203, 281, 1524, 294, 51784, 51784], "temperature": 0.0, "avg_logprob": -0.19998457535453465, "compression_ratio": 1.742063492063492, "no_caption_prob": 2.046249937848188e-05}, {"id": 746, "seek": 293126, "start": 2931.26, "end": 2934.78, "text": " order to be considered a legitimate map to for this purposes.", "tokens": [50364, 1668, 281, 312, 4888, 257, 17956, 4471, 281, 337, 341, 9932, 13, 50540, 50540, 509, 393, 380, 445, 7962, 512, 2445, 300, 311, 411, 11, 1954, 11, 341, 307, 257, 6798, 1588, 7186, 399, 13, 50723, 50723, 286, 478, 516, 281, 818, 309, 4471, 281, 293, 4177, 11, 286, 478, 2580, 1166, 13, 50847, 50847, 708, 311, 264, 1433, 337, 309, 30, 50897, 50897, 7744, 906, 30, 50947, 50947, 7744, 906, 11, 558, 30, 50997, 50997, 286, 519, 370, 13, 51047, 51047, 1079, 13, 51097, 51097, 286, 411, 300, 13, 51147, 51147, 467, 1669, 309, 1626, 411, 364, 484, 5901, 13, 51197, 51197, 467, 1920, 307, 411, 11, 3263, 411, 309, 576, 312, 1627, 281, 411, 406, 1524, 729, 4474, 13, 51349, 51349, 879, 364, 484, 5901, 13, 51399, 51399, 286, 445, 519, 295, 257, 413, 5, 35, 18515, 6927, 586, 13, 51548, 51548, 865, 11, 558, 13, 51654, 51654, 663, 307, 264, 787, 7123, 286, 362, 294, 1575, 337, 2101, 906, 13, 51835, 51835], "temperature": 0.0, "avg_logprob": -0.16750319703610358, "compression_ratio": 1.6973684210526316, "no_caption_prob": 1.4063864909985568e-05}, {"id": 747, "seek": 293126, "start": 2934.78, "end": 2938.44, "text": " You can't just invent some function that's like, oh, this is a string concatenation.", "tokens": [50364, 1668, 281, 312, 4888, 257, 17956, 4471, 281, 337, 341, 9932, 13, 50540, 50540, 509, 393, 380, 445, 7962, 512, 2445, 300, 311, 411, 11, 1954, 11, 341, 307, 257, 6798, 1588, 7186, 399, 13, 50723, 50723, 286, 478, 516, 281, 818, 309, 4471, 281, 293, 4177, 11, 286, 478, 2580, 1166, 13, 50847, 50847, 708, 311, 264, 1433, 337, 309, 30, 50897, 50897, 7744, 906, 30, 50947, 50947, 7744, 906, 11, 558, 30, 50997, 50997, 286, 519, 370, 13, 51047, 51047, 1079, 13, 51097, 51097, 286, 411, 300, 13, 51147, 51147, 467, 1669, 309, 1626, 411, 364, 484, 5901, 13, 51197, 51197, 467, 1920, 307, 411, 11, 3263, 411, 309, 576, 312, 1627, 281, 411, 406, 1524, 729, 4474, 13, 51349, 51349, 879, 364, 484, 5901, 13, 51399, 51399, 286, 445, 519, 295, 257, 413, 5, 35, 18515, 6927, 586, 13, 51548, 51548, 865, 11, 558, 13, 51654, 51654, 663, 307, 264, 787, 7123, 286, 362, 294, 1575, 337, 2101, 906, 13, 51835, 51835], "temperature": 0.0, "avg_logprob": -0.16750319703610358, "compression_ratio": 1.6973684210526316, "no_caption_prob": 1.4063864909985568e-05}, {"id": 748, "seek": 293126, "start": 2938.44, "end": 2940.92, "text": " I'm going to call it map to and hey, I'm applicative.", "tokens": [50364, 1668, 281, 312, 4888, 257, 17956, 4471, 281, 337, 341, 9932, 13, 50540, 50540, 509, 393, 380, 445, 7962, 512, 2445, 300, 311, 411, 11, 1954, 11, 341, 307, 257, 6798, 1588, 7186, 399, 13, 50723, 50723, 286, 478, 516, 281, 818, 309, 4471, 281, 293, 4177, 11, 286, 478, 2580, 1166, 13, 50847, 50847, 708, 311, 264, 1433, 337, 309, 30, 50897, 50897, 7744, 906, 30, 50947, 50947, 7744, 906, 11, 558, 30, 50997, 50997, 286, 519, 370, 13, 51047, 51047, 1079, 13, 51097, 51097, 286, 411, 300, 13, 51147, 51147, 467, 1669, 309, 1626, 411, 364, 484, 5901, 13, 51197, 51197, 467, 1920, 307, 411, 11, 3263, 411, 309, 576, 312, 1627, 281, 411, 406, 1524, 729, 4474, 13, 51349, 51349, 879, 364, 484, 5901, 13, 51399, 51399, 286, 445, 519, 295, 257, 413, 5, 35, 18515, 6927, 586, 13, 51548, 51548, 865, 11, 558, 13, 51654, 51654, 663, 307, 264, 787, 7123, 286, 362, 294, 1575, 337, 2101, 906, 13, 51835, 51835], "temperature": 0.0, "avg_logprob": -0.16750319703610358, "compression_ratio": 1.6973684210526316, "no_caption_prob": 1.4063864909985568e-05}, {"id": 749, "seek": 293126, "start": 2940.92, "end": 2941.92, "text": " What's the term for it?", "tokens": [50364, 1668, 281, 312, 4888, 257, 17956, 4471, 281, 337, 341, 9932, 13, 50540, 50540, 509, 393, 380, 445, 7962, 512, 2445, 300, 311, 411, 11, 1954, 11, 341, 307, 257, 6798, 1588, 7186, 399, 13, 50723, 50723, 286, 478, 516, 281, 818, 309, 4471, 281, 293, 4177, 11, 286, 478, 2580, 1166, 13, 50847, 50847, 708, 311, 264, 1433, 337, 309, 30, 50897, 50897, 7744, 906, 30, 50947, 50947, 7744, 906, 11, 558, 30, 50997, 50997, 286, 519, 370, 13, 51047, 51047, 1079, 13, 51097, 51097, 286, 411, 300, 13, 51147, 51147, 467, 1669, 309, 1626, 411, 364, 484, 5901, 13, 51197, 51197, 467, 1920, 307, 411, 11, 3263, 411, 309, 576, 312, 1627, 281, 411, 406, 1524, 729, 4474, 13, 51349, 51349, 879, 364, 484, 5901, 13, 51399, 51399, 286, 445, 519, 295, 257, 413, 5, 35, 18515, 6927, 586, 13, 51548, 51548, 865, 11, 558, 13, 51654, 51654, 663, 307, 264, 787, 7123, 286, 362, 294, 1575, 337, 2101, 906, 13, 51835, 51835], "temperature": 0.0, "avg_logprob": -0.16750319703610358, "compression_ratio": 1.6973684210526316, "no_caption_prob": 1.4063864909985568e-05}, {"id": 750, "seek": 293126, "start": 2941.92, "end": 2942.92, "text": " Lawful?", "tokens": [50364, 1668, 281, 312, 4888, 257, 17956, 4471, 281, 337, 341, 9932, 13, 50540, 50540, 509, 393, 380, 445, 7962, 512, 2445, 300, 311, 411, 11, 1954, 11, 341, 307, 257, 6798, 1588, 7186, 399, 13, 50723, 50723, 286, 478, 516, 281, 818, 309, 4471, 281, 293, 4177, 11, 286, 478, 2580, 1166, 13, 50847, 50847, 708, 311, 264, 1433, 337, 309, 30, 50897, 50897, 7744, 906, 30, 50947, 50947, 7744, 906, 11, 558, 30, 50997, 50997, 286, 519, 370, 13, 51047, 51047, 1079, 13, 51097, 51097, 286, 411, 300, 13, 51147, 51147, 467, 1669, 309, 1626, 411, 364, 484, 5901, 13, 51197, 51197, 467, 1920, 307, 411, 11, 3263, 411, 309, 576, 312, 1627, 281, 411, 406, 1524, 729, 4474, 13, 51349, 51349, 879, 364, 484, 5901, 13, 51399, 51399, 286, 445, 519, 295, 257, 413, 5, 35, 18515, 6927, 586, 13, 51548, 51548, 865, 11, 558, 13, 51654, 51654, 663, 307, 264, 787, 7123, 286, 362, 294, 1575, 337, 2101, 906, 13, 51835, 51835], "temperature": 0.0, "avg_logprob": -0.16750319703610358, "compression_ratio": 1.6973684210526316, "no_caption_prob": 1.4063864909985568e-05}, {"id": 751, "seek": 293126, "start": 2942.92, "end": 2943.92, "text": " Lawful, right?", "tokens": [50364, 1668, 281, 312, 4888, 257, 17956, 4471, 281, 337, 341, 9932, 13, 50540, 50540, 509, 393, 380, 445, 7962, 512, 2445, 300, 311, 411, 11, 1954, 11, 341, 307, 257, 6798, 1588, 7186, 399, 13, 50723, 50723, 286, 478, 516, 281, 818, 309, 4471, 281, 293, 4177, 11, 286, 478, 2580, 1166, 13, 50847, 50847, 708, 311, 264, 1433, 337, 309, 30, 50897, 50897, 7744, 906, 30, 50947, 50947, 7744, 906, 11, 558, 30, 50997, 50997, 286, 519, 370, 13, 51047, 51047, 1079, 13, 51097, 51097, 286, 411, 300, 13, 51147, 51147, 467, 1669, 309, 1626, 411, 364, 484, 5901, 13, 51197, 51197, 467, 1920, 307, 411, 11, 3263, 411, 309, 576, 312, 1627, 281, 411, 406, 1524, 729, 4474, 13, 51349, 51349, 879, 364, 484, 5901, 13, 51399, 51399, 286, 445, 519, 295, 257, 413, 5, 35, 18515, 6927, 586, 13, 51548, 51548, 865, 11, 558, 13, 51654, 51654, 663, 307, 264, 787, 7123, 286, 362, 294, 1575, 337, 2101, 906, 13, 51835, 51835], "temperature": 0.0, "avg_logprob": -0.16750319703610358, "compression_ratio": 1.6973684210526316, "no_caption_prob": 1.4063864909985568e-05}, {"id": 752, "seek": 293126, "start": 2943.92, "end": 2944.92, "text": " I think so.", "tokens": [50364, 1668, 281, 312, 4888, 257, 17956, 4471, 281, 337, 341, 9932, 13, 50540, 50540, 509, 393, 380, 445, 7962, 512, 2445, 300, 311, 411, 11, 1954, 11, 341, 307, 257, 6798, 1588, 7186, 399, 13, 50723, 50723, 286, 478, 516, 281, 818, 309, 4471, 281, 293, 4177, 11, 286, 478, 2580, 1166, 13, 50847, 50847, 708, 311, 264, 1433, 337, 309, 30, 50897, 50897, 7744, 906, 30, 50947, 50947, 7744, 906, 11, 558, 30, 50997, 50997, 286, 519, 370, 13, 51047, 51047, 1079, 13, 51097, 51097, 286, 411, 300, 13, 51147, 51147, 467, 1669, 309, 1626, 411, 364, 484, 5901, 13, 51197, 51197, 467, 1920, 307, 411, 11, 3263, 411, 309, 576, 312, 1627, 281, 411, 406, 1524, 729, 4474, 13, 51349, 51349, 879, 364, 484, 5901, 13, 51399, 51399, 286, 445, 519, 295, 257, 413, 5, 35, 18515, 6927, 586, 13, 51548, 51548, 865, 11, 558, 13, 51654, 51654, 663, 307, 264, 787, 7123, 286, 362, 294, 1575, 337, 2101, 906, 13, 51835, 51835], "temperature": 0.0, "avg_logprob": -0.16750319703610358, "compression_ratio": 1.6973684210526316, "no_caption_prob": 1.4063864909985568e-05}, {"id": 753, "seek": 293126, "start": 2944.92, "end": 2945.92, "text": " Yes.", "tokens": [50364, 1668, 281, 312, 4888, 257, 17956, 4471, 281, 337, 341, 9932, 13, 50540, 50540, 509, 393, 380, 445, 7962, 512, 2445, 300, 311, 411, 11, 1954, 11, 341, 307, 257, 6798, 1588, 7186, 399, 13, 50723, 50723, 286, 478, 516, 281, 818, 309, 4471, 281, 293, 4177, 11, 286, 478, 2580, 1166, 13, 50847, 50847, 708, 311, 264, 1433, 337, 309, 30, 50897, 50897, 7744, 906, 30, 50947, 50947, 7744, 906, 11, 558, 30, 50997, 50997, 286, 519, 370, 13, 51047, 51047, 1079, 13, 51097, 51097, 286, 411, 300, 13, 51147, 51147, 467, 1669, 309, 1626, 411, 364, 484, 5901, 13, 51197, 51197, 467, 1920, 307, 411, 11, 3263, 411, 309, 576, 312, 1627, 281, 411, 406, 1524, 729, 4474, 13, 51349, 51349, 879, 364, 484, 5901, 13, 51399, 51399, 286, 445, 519, 295, 257, 413, 5, 35, 18515, 6927, 586, 13, 51548, 51548, 865, 11, 558, 13, 51654, 51654, 663, 307, 264, 787, 7123, 286, 362, 294, 1575, 337, 2101, 906, 13, 51835, 51835], "temperature": 0.0, "avg_logprob": -0.16750319703610358, "compression_ratio": 1.6973684210526316, "no_caption_prob": 1.4063864909985568e-05}, {"id": 754, "seek": 293126, "start": 2945.92, "end": 2946.92, "text": " I like that.", "tokens": [50364, 1668, 281, 312, 4888, 257, 17956, 4471, 281, 337, 341, 9932, 13, 50540, 50540, 509, 393, 380, 445, 7962, 512, 2445, 300, 311, 411, 11, 1954, 11, 341, 307, 257, 6798, 1588, 7186, 399, 13, 50723, 50723, 286, 478, 516, 281, 818, 309, 4471, 281, 293, 4177, 11, 286, 478, 2580, 1166, 13, 50847, 50847, 708, 311, 264, 1433, 337, 309, 30, 50897, 50897, 7744, 906, 30, 50947, 50947, 7744, 906, 11, 558, 30, 50997, 50997, 286, 519, 370, 13, 51047, 51047, 1079, 13, 51097, 51097, 286, 411, 300, 13, 51147, 51147, 467, 1669, 309, 1626, 411, 364, 484, 5901, 13, 51197, 51197, 467, 1920, 307, 411, 11, 3263, 411, 309, 576, 312, 1627, 281, 411, 406, 1524, 729, 4474, 13, 51349, 51349, 879, 364, 484, 5901, 13, 51399, 51399, 286, 445, 519, 295, 257, 413, 5, 35, 18515, 6927, 586, 13, 51548, 51548, 865, 11, 558, 13, 51654, 51654, 663, 307, 264, 787, 7123, 286, 362, 294, 1575, 337, 2101, 906, 13, 51835, 51835], "temperature": 0.0, "avg_logprob": -0.16750319703610358, "compression_ratio": 1.6973684210526316, "no_caption_prob": 1.4063864909985568e-05}, {"id": 755, "seek": 293126, "start": 2946.92, "end": 2947.92, "text": " It makes it sound like an outlaw.", "tokens": [50364, 1668, 281, 312, 4888, 257, 17956, 4471, 281, 337, 341, 9932, 13, 50540, 50540, 509, 393, 380, 445, 7962, 512, 2445, 300, 311, 411, 11, 1954, 11, 341, 307, 257, 6798, 1588, 7186, 399, 13, 50723, 50723, 286, 478, 516, 281, 818, 309, 4471, 281, 293, 4177, 11, 286, 478, 2580, 1166, 13, 50847, 50847, 708, 311, 264, 1433, 337, 309, 30, 50897, 50897, 7744, 906, 30, 50947, 50947, 7744, 906, 11, 558, 30, 50997, 50997, 286, 519, 370, 13, 51047, 51047, 1079, 13, 51097, 51097, 286, 411, 300, 13, 51147, 51147, 467, 1669, 309, 1626, 411, 364, 484, 5901, 13, 51197, 51197, 467, 1920, 307, 411, 11, 3263, 411, 309, 576, 312, 1627, 281, 411, 406, 1524, 729, 4474, 13, 51349, 51349, 879, 364, 484, 5901, 13, 51399, 51399, 286, 445, 519, 295, 257, 413, 5, 35, 18515, 6927, 586, 13, 51548, 51548, 865, 11, 558, 13, 51654, 51654, 663, 307, 264, 787, 7123, 286, 362, 294, 1575, 337, 2101, 906, 13, 51835, 51835], "temperature": 0.0, "avg_logprob": -0.16750319703610358, "compression_ratio": 1.6973684210526316, "no_caption_prob": 1.4063864909985568e-05}, {"id": 756, "seek": 293126, "start": 2947.92, "end": 2950.96, "text": " It almost is like, sounds like it would be cool to like not follow those rules.", "tokens": [50364, 1668, 281, 312, 4888, 257, 17956, 4471, 281, 337, 341, 9932, 13, 50540, 50540, 509, 393, 380, 445, 7962, 512, 2445, 300, 311, 411, 11, 1954, 11, 341, 307, 257, 6798, 1588, 7186, 399, 13, 50723, 50723, 286, 478, 516, 281, 818, 309, 4471, 281, 293, 4177, 11, 286, 478, 2580, 1166, 13, 50847, 50847, 708, 311, 264, 1433, 337, 309, 30, 50897, 50897, 7744, 906, 30, 50947, 50947, 7744, 906, 11, 558, 30, 50997, 50997, 286, 519, 370, 13, 51047, 51047, 1079, 13, 51097, 51097, 286, 411, 300, 13, 51147, 51147, 467, 1669, 309, 1626, 411, 364, 484, 5901, 13, 51197, 51197, 467, 1920, 307, 411, 11, 3263, 411, 309, 576, 312, 1627, 281, 411, 406, 1524, 729, 4474, 13, 51349, 51349, 879, 364, 484, 5901, 13, 51399, 51399, 286, 445, 519, 295, 257, 413, 5, 35, 18515, 6927, 586, 13, 51548, 51548, 865, 11, 558, 13, 51654, 51654, 663, 307, 264, 787, 7123, 286, 362, 294, 1575, 337, 2101, 906, 13, 51835, 51835], "temperature": 0.0, "avg_logprob": -0.16750319703610358, "compression_ratio": 1.6973684210526316, "no_caption_prob": 1.4063864909985568e-05}, {"id": 757, "seek": 293126, "start": 2950.96, "end": 2951.96, "text": " Be an outlaw.", "tokens": [50364, 1668, 281, 312, 4888, 257, 17956, 4471, 281, 337, 341, 9932, 13, 50540, 50540, 509, 393, 380, 445, 7962, 512, 2445, 300, 311, 411, 11, 1954, 11, 341, 307, 257, 6798, 1588, 7186, 399, 13, 50723, 50723, 286, 478, 516, 281, 818, 309, 4471, 281, 293, 4177, 11, 286, 478, 2580, 1166, 13, 50847, 50847, 708, 311, 264, 1433, 337, 309, 30, 50897, 50897, 7744, 906, 30, 50947, 50947, 7744, 906, 11, 558, 30, 50997, 50997, 286, 519, 370, 13, 51047, 51047, 1079, 13, 51097, 51097, 286, 411, 300, 13, 51147, 51147, 467, 1669, 309, 1626, 411, 364, 484, 5901, 13, 51197, 51197, 467, 1920, 307, 411, 11, 3263, 411, 309, 576, 312, 1627, 281, 411, 406, 1524, 729, 4474, 13, 51349, 51349, 879, 364, 484, 5901, 13, 51399, 51399, 286, 445, 519, 295, 257, 413, 5, 35, 18515, 6927, 586, 13, 51548, 51548, 865, 11, 558, 13, 51654, 51654, 663, 307, 264, 787, 7123, 286, 362, 294, 1575, 337, 2101, 906, 13, 51835, 51835], "temperature": 0.0, "avg_logprob": -0.16750319703610358, "compression_ratio": 1.6973684210526316, "no_caption_prob": 1.4063864909985568e-05}, {"id": 758, "seek": 293126, "start": 2951.96, "end": 2954.94, "text": " I just think of a D&D alignment chart now.", "tokens": [50364, 1668, 281, 312, 4888, 257, 17956, 4471, 281, 337, 341, 9932, 13, 50540, 50540, 509, 393, 380, 445, 7962, 512, 2445, 300, 311, 411, 11, 1954, 11, 341, 307, 257, 6798, 1588, 7186, 399, 13, 50723, 50723, 286, 478, 516, 281, 818, 309, 4471, 281, 293, 4177, 11, 286, 478, 2580, 1166, 13, 50847, 50847, 708, 311, 264, 1433, 337, 309, 30, 50897, 50897, 7744, 906, 30, 50947, 50947, 7744, 906, 11, 558, 30, 50997, 50997, 286, 519, 370, 13, 51047, 51047, 1079, 13, 51097, 51097, 286, 411, 300, 13, 51147, 51147, 467, 1669, 309, 1626, 411, 364, 484, 5901, 13, 51197, 51197, 467, 1920, 307, 411, 11, 3263, 411, 309, 576, 312, 1627, 281, 411, 406, 1524, 729, 4474, 13, 51349, 51349, 879, 364, 484, 5901, 13, 51399, 51399, 286, 445, 519, 295, 257, 413, 5, 35, 18515, 6927, 586, 13, 51548, 51548, 865, 11, 558, 13, 51654, 51654, 663, 307, 264, 787, 7123, 286, 362, 294, 1575, 337, 2101, 906, 13, 51835, 51835], "temperature": 0.0, "avg_logprob": -0.16750319703610358, "compression_ratio": 1.6973684210526316, "no_caption_prob": 1.4063864909985568e-05}, {"id": 759, "seek": 293126, "start": 2954.94, "end": 2957.0600000000004, "text": " Yeah, right.", "tokens": [50364, 1668, 281, 312, 4888, 257, 17956, 4471, 281, 337, 341, 9932, 13, 50540, 50540, 509, 393, 380, 445, 7962, 512, 2445, 300, 311, 411, 11, 1954, 11, 341, 307, 257, 6798, 1588, 7186, 399, 13, 50723, 50723, 286, 478, 516, 281, 818, 309, 4471, 281, 293, 4177, 11, 286, 478, 2580, 1166, 13, 50847, 50847, 708, 311, 264, 1433, 337, 309, 30, 50897, 50897, 7744, 906, 30, 50947, 50947, 7744, 906, 11, 558, 30, 50997, 50997, 286, 519, 370, 13, 51047, 51047, 1079, 13, 51097, 51097, 286, 411, 300, 13, 51147, 51147, 467, 1669, 309, 1626, 411, 364, 484, 5901, 13, 51197, 51197, 467, 1920, 307, 411, 11, 3263, 411, 309, 576, 312, 1627, 281, 411, 406, 1524, 729, 4474, 13, 51349, 51349, 879, 364, 484, 5901, 13, 51399, 51399, 286, 445, 519, 295, 257, 413, 5, 35, 18515, 6927, 586, 13, 51548, 51548, 865, 11, 558, 13, 51654, 51654, 663, 307, 264, 787, 7123, 286, 362, 294, 1575, 337, 2101, 906, 13, 51835, 51835], "temperature": 0.0, "avg_logprob": -0.16750319703610358, "compression_ratio": 1.6973684210526316, "no_caption_prob": 1.4063864909985568e-05}, {"id": 760, "seek": 293126, "start": 2957.0600000000004, "end": 2960.6800000000003, "text": " That is the only definition I have in mind for lawful.", "tokens": [50364, 1668, 281, 312, 4888, 257, 17956, 4471, 281, 337, 341, 9932, 13, 50540, 50540, 509, 393, 380, 445, 7962, 512, 2445, 300, 311, 411, 11, 1954, 11, 341, 307, 257, 6798, 1588, 7186, 399, 13, 50723, 50723, 286, 478, 516, 281, 818, 309, 4471, 281, 293, 4177, 11, 286, 478, 2580, 1166, 13, 50847, 50847, 708, 311, 264, 1433, 337, 309, 30, 50897, 50897, 7744, 906, 30, 50947, 50947, 7744, 906, 11, 558, 30, 50997, 50997, 286, 519, 370, 13, 51047, 51047, 1079, 13, 51097, 51097, 286, 411, 300, 13, 51147, 51147, 467, 1669, 309, 1626, 411, 364, 484, 5901, 13, 51197, 51197, 467, 1920, 307, 411, 11, 3263, 411, 309, 576, 312, 1627, 281, 411, 406, 1524, 729, 4474, 13, 51349, 51349, 879, 364, 484, 5901, 13, 51399, 51399, 286, 445, 519, 295, 257, 413, 5, 35, 18515, 6927, 586, 13, 51548, 51548, 865, 11, 558, 13, 51654, 51654, 663, 307, 264, 787, 7123, 286, 362, 294, 1575, 337, 2101, 906, 13, 51835, 51835], "temperature": 0.0, "avg_logprob": -0.16750319703610358, "compression_ratio": 1.6973684210526316, "no_caption_prob": 1.4063864909985568e-05}, {"id": 761, "seek": 296068, "start": 2960.68, "end": 2963.22, "text": " So if you can explain, please do.", "tokens": [50364, 407, 498, 291, 393, 2903, 11, 1767, 360, 13, 50491, 50491, 407, 456, 311, 257, 1326, 7221, 300, 362, 281, 312, 11, 293, 286, 500, 380, 458, 552, 766, 264, 1192, 295, 452, 1378, 11, 50707, 50707, 457, 1936, 309, 311, 411, 11, 1954, 11, 498, 291, 4471, 264, 6575, 2445, 11, 550, 264, 5598, 1633, 312, 50952, 50952, 264, 912, 420, 456, 311, 257, 1326, 4474, 411, 300, 13, 51069, 51069, 814, 434, 1219, 264, 2580, 1166, 6064, 13, 51185, 51185, 407, 498, 291, 574, 300, 493, 11, 300, 311, 437, 321, 603, 855, 13, 51391, 51391, 583, 544, 5101, 11, 264, 13397, 337, 4471, 281, 307, 516, 281, 362, 9102, 294, 309, 13, 51683, 51683], "temperature": 0.0, "avg_logprob": -0.1381582532610212, "compression_ratio": 1.6456692913385826, "no_caption_prob": 1.078319110092707e-05}, {"id": 762, "seek": 296068, "start": 2963.22, "end": 2967.54, "text": " So there's a few properties that have to be, and I don't know them off the top of my head,", "tokens": [50364, 407, 498, 291, 393, 2903, 11, 1767, 360, 13, 50491, 50491, 407, 456, 311, 257, 1326, 7221, 300, 362, 281, 312, 11, 293, 286, 500, 380, 458, 552, 766, 264, 1192, 295, 452, 1378, 11, 50707, 50707, 457, 1936, 309, 311, 411, 11, 1954, 11, 498, 291, 4471, 264, 6575, 2445, 11, 550, 264, 5598, 1633, 312, 50952, 50952, 264, 912, 420, 456, 311, 257, 1326, 4474, 411, 300, 13, 51069, 51069, 814, 434, 1219, 264, 2580, 1166, 6064, 13, 51185, 51185, 407, 498, 291, 574, 300, 493, 11, 300, 311, 437, 321, 603, 855, 13, 51391, 51391, 583, 544, 5101, 11, 264, 13397, 337, 4471, 281, 307, 516, 281, 362, 9102, 294, 309, 13, 51683, 51683], "temperature": 0.0, "avg_logprob": -0.1381582532610212, "compression_ratio": 1.6456692913385826, "no_caption_prob": 1.078319110092707e-05}, {"id": 763, "seek": 296068, "start": 2967.54, "end": 2972.44, "text": " but basically it's like, oh, if you map the identity function, then the output must be", "tokens": [50364, 407, 498, 291, 393, 2903, 11, 1767, 360, 13, 50491, 50491, 407, 456, 311, 257, 1326, 7221, 300, 362, 281, 312, 11, 293, 286, 500, 380, 458, 552, 766, 264, 1192, 295, 452, 1378, 11, 50707, 50707, 457, 1936, 309, 311, 411, 11, 1954, 11, 498, 291, 4471, 264, 6575, 2445, 11, 550, 264, 5598, 1633, 312, 50952, 50952, 264, 912, 420, 456, 311, 257, 1326, 4474, 411, 300, 13, 51069, 51069, 814, 434, 1219, 264, 2580, 1166, 6064, 13, 51185, 51185, 407, 498, 291, 574, 300, 493, 11, 300, 311, 437, 321, 603, 855, 13, 51391, 51391, 583, 544, 5101, 11, 264, 13397, 337, 4471, 281, 307, 516, 281, 362, 9102, 294, 309, 13, 51683, 51683], "temperature": 0.0, "avg_logprob": -0.1381582532610212, "compression_ratio": 1.6456692913385826, "no_caption_prob": 1.078319110092707e-05}, {"id": 764, "seek": 296068, "start": 2972.44, "end": 2974.7799999999997, "text": " the same or there's a few rules like that.", "tokens": [50364, 407, 498, 291, 393, 2903, 11, 1767, 360, 13, 50491, 50491, 407, 456, 311, 257, 1326, 7221, 300, 362, 281, 312, 11, 293, 286, 500, 380, 458, 552, 766, 264, 1192, 295, 452, 1378, 11, 50707, 50707, 457, 1936, 309, 311, 411, 11, 1954, 11, 498, 291, 4471, 264, 6575, 2445, 11, 550, 264, 5598, 1633, 312, 50952, 50952, 264, 912, 420, 456, 311, 257, 1326, 4474, 411, 300, 13, 51069, 51069, 814, 434, 1219, 264, 2580, 1166, 6064, 13, 51185, 51185, 407, 498, 291, 574, 300, 493, 11, 300, 311, 437, 321, 603, 855, 13, 51391, 51391, 583, 544, 5101, 11, 264, 13397, 337, 4471, 281, 307, 516, 281, 362, 9102, 294, 309, 13, 51683, 51683], "temperature": 0.0, "avg_logprob": -0.1381582532610212, "compression_ratio": 1.6456692913385826, "no_caption_prob": 1.078319110092707e-05}, {"id": 765, "seek": 296068, "start": 2974.7799999999997, "end": 2977.1, "text": " They're called the applicative laws.", "tokens": [50364, 407, 498, 291, 393, 2903, 11, 1767, 360, 13, 50491, 50491, 407, 456, 311, 257, 1326, 7221, 300, 362, 281, 312, 11, 293, 286, 500, 380, 458, 552, 766, 264, 1192, 295, 452, 1378, 11, 50707, 50707, 457, 1936, 309, 311, 411, 11, 1954, 11, 498, 291, 4471, 264, 6575, 2445, 11, 550, 264, 5598, 1633, 312, 50952, 50952, 264, 912, 420, 456, 311, 257, 1326, 4474, 411, 300, 13, 51069, 51069, 814, 434, 1219, 264, 2580, 1166, 6064, 13, 51185, 51185, 407, 498, 291, 574, 300, 493, 11, 300, 311, 437, 321, 603, 855, 13, 51391, 51391, 583, 544, 5101, 11, 264, 13397, 337, 4471, 281, 307, 516, 281, 362, 9102, 294, 309, 13, 51683, 51683], "temperature": 0.0, "avg_logprob": -0.1381582532610212, "compression_ratio": 1.6456692913385826, "no_caption_prob": 1.078319110092707e-05}, {"id": 766, "seek": 296068, "start": 2977.1, "end": 2981.22, "text": " So if you look that up, that's what we'll show.", "tokens": [50364, 407, 498, 291, 393, 2903, 11, 1767, 360, 13, 50491, 50491, 407, 456, 311, 257, 1326, 7221, 300, 362, 281, 312, 11, 293, 286, 500, 380, 458, 552, 766, 264, 1192, 295, 452, 1378, 11, 50707, 50707, 457, 1936, 309, 311, 411, 11, 1954, 11, 498, 291, 4471, 264, 6575, 2445, 11, 550, 264, 5598, 1633, 312, 50952, 50952, 264, 912, 420, 456, 311, 257, 1326, 4474, 411, 300, 13, 51069, 51069, 814, 434, 1219, 264, 2580, 1166, 6064, 13, 51185, 51185, 407, 498, 291, 574, 300, 493, 11, 300, 311, 437, 321, 603, 855, 13, 51391, 51391, 583, 544, 5101, 11, 264, 13397, 337, 4471, 281, 307, 516, 281, 362, 9102, 294, 309, 13, 51683, 51683], "temperature": 0.0, "avg_logprob": -0.1381582532610212, "compression_ratio": 1.6456692913385826, "no_caption_prob": 1.078319110092707e-05}, {"id": 767, "seek": 296068, "start": 2981.22, "end": 2987.06, "text": " But more generally, the signature for map to is going to have variables in it.", "tokens": [50364, 407, 498, 291, 393, 2903, 11, 1767, 360, 13, 50491, 50491, 407, 456, 311, 257, 1326, 7221, 300, 362, 281, 312, 11, 293, 286, 500, 380, 458, 552, 766, 264, 1192, 295, 452, 1378, 11, 50707, 50707, 457, 1936, 309, 311, 411, 11, 1954, 11, 498, 291, 4471, 264, 6575, 2445, 11, 550, 264, 5598, 1633, 312, 50952, 50952, 264, 912, 420, 456, 311, 257, 1326, 4474, 411, 300, 13, 51069, 51069, 814, 434, 1219, 264, 2580, 1166, 6064, 13, 51185, 51185, 407, 498, 291, 574, 300, 493, 11, 300, 311, 437, 321, 603, 855, 13, 51391, 51391, 583, 544, 5101, 11, 264, 13397, 337, 4471, 281, 307, 516, 281, 362, 9102, 294, 309, 13, 51683, 51683], "temperature": 0.0, "avg_logprob": -0.1381582532610212, "compression_ratio": 1.6456692913385826, "no_caption_prob": 1.078319110092707e-05}, {"id": 768, "seek": 298706, "start": 2987.06, "end": 2994.7, "text": " So it's going to be a two argument function, A to B to C, and then your type with a variable", "tokens": [50364, 407, 309, 311, 516, 281, 312, 257, 732, 6770, 2445, 11, 316, 281, 363, 281, 383, 11, 293, 550, 428, 2010, 365, 257, 7006, 50746, 50746, 316, 11, 428, 2010, 365, 7006, 363, 11, 293, 550, 309, 486, 294, 264, 917, 1884, 428, 2010, 365, 7006, 50972, 50972, 383, 13, 400, 370, 498, 428, 2010, 1177, 380, 362, 257, 2010, 7006, 11, 550, 309, 311, 1391, 406, 18006, 613, 51308, 51308, 6828, 13, 51358, 51358, 663, 311, 1880, 13, 51408, 51408, 1743, 437, 498, 291, 362, 364, 42687, 2010, 11, 411, 512, 1333, 295, 1460, 2010, 30, 51622, 51622, 400, 286, 914, 11, 286, 478, 445, 1382, 281, 519, 295, 257, 9859, 764, 1389, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.12845202053294463, "compression_ratio": 1.7736625514403292, "no_caption_prob": 1.4144706028673681e-06}, {"id": 769, "seek": 298706, "start": 2994.7, "end": 2999.22, "text": " A, your type with variable B, and then it will in the end create your type with variable", "tokens": [50364, 407, 309, 311, 516, 281, 312, 257, 732, 6770, 2445, 11, 316, 281, 363, 281, 383, 11, 293, 550, 428, 2010, 365, 257, 7006, 50746, 50746, 316, 11, 428, 2010, 365, 7006, 363, 11, 293, 550, 309, 486, 294, 264, 917, 1884, 428, 2010, 365, 7006, 50972, 50972, 383, 13, 400, 370, 498, 428, 2010, 1177, 380, 362, 257, 2010, 7006, 11, 550, 309, 311, 1391, 406, 18006, 613, 51308, 51308, 6828, 13, 51358, 51358, 663, 311, 1880, 13, 51408, 51408, 1743, 437, 498, 291, 362, 364, 42687, 2010, 11, 411, 512, 1333, 295, 1460, 2010, 30, 51622, 51622, 400, 286, 914, 11, 286, 478, 445, 1382, 281, 519, 295, 257, 9859, 764, 1389, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.12845202053294463, "compression_ratio": 1.7736625514403292, "no_caption_prob": 1.4144706028673681e-06}, {"id": 770, "seek": 298706, "start": 2999.22, "end": 3005.94, "text": " C. And so if your type doesn't have a type variable, then it's probably not needing these", "tokens": [50364, 407, 309, 311, 516, 281, 312, 257, 732, 6770, 2445, 11, 316, 281, 363, 281, 383, 11, 293, 550, 428, 2010, 365, 257, 7006, 50746, 50746, 316, 11, 428, 2010, 365, 7006, 363, 11, 293, 550, 309, 486, 294, 264, 917, 1884, 428, 2010, 365, 7006, 50972, 50972, 383, 13, 400, 370, 498, 428, 2010, 1177, 380, 362, 257, 2010, 7006, 11, 550, 309, 311, 1391, 406, 18006, 613, 51308, 51308, 6828, 13, 51358, 51358, 663, 311, 1880, 13, 51408, 51408, 1743, 437, 498, 291, 362, 364, 42687, 2010, 11, 411, 512, 1333, 295, 1460, 2010, 30, 51622, 51622, 400, 286, 914, 11, 286, 478, 445, 1382, 281, 519, 295, 257, 9859, 764, 1389, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.12845202053294463, "compression_ratio": 1.7736625514403292, "no_caption_prob": 1.4144706028673681e-06}, {"id": 771, "seek": 298706, "start": 3005.94, "end": 3006.94, "text": " functions.", "tokens": [50364, 407, 309, 311, 516, 281, 312, 257, 732, 6770, 2445, 11, 316, 281, 363, 281, 383, 11, 293, 550, 428, 2010, 365, 257, 7006, 50746, 50746, 316, 11, 428, 2010, 365, 7006, 363, 11, 293, 550, 309, 486, 294, 264, 917, 1884, 428, 2010, 365, 7006, 50972, 50972, 383, 13, 400, 370, 498, 428, 2010, 1177, 380, 362, 257, 2010, 7006, 11, 550, 309, 311, 1391, 406, 18006, 613, 51308, 51308, 6828, 13, 51358, 51358, 663, 311, 1880, 13, 51408, 51408, 1743, 437, 498, 291, 362, 364, 42687, 2010, 11, 411, 512, 1333, 295, 1460, 2010, 30, 51622, 51622, 400, 286, 914, 11, 286, 478, 445, 1382, 281, 519, 295, 257, 9859, 764, 1389, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.12845202053294463, "compression_ratio": 1.7736625514403292, "no_caption_prob": 1.4144706028673681e-06}, {"id": 772, "seek": 298706, "start": 3006.94, "end": 3007.94, "text": " That's interesting.", "tokens": [50364, 407, 309, 311, 516, 281, 312, 257, 732, 6770, 2445, 11, 316, 281, 363, 281, 383, 11, 293, 550, 428, 2010, 365, 257, 7006, 50746, 50746, 316, 11, 428, 2010, 365, 7006, 363, 11, 293, 550, 309, 486, 294, 264, 917, 1884, 428, 2010, 365, 7006, 50972, 50972, 383, 13, 400, 370, 498, 428, 2010, 1177, 380, 362, 257, 2010, 7006, 11, 550, 309, 311, 1391, 406, 18006, 613, 51308, 51308, 6828, 13, 51358, 51358, 663, 311, 1880, 13, 51408, 51408, 1743, 437, 498, 291, 362, 364, 42687, 2010, 11, 411, 512, 1333, 295, 1460, 2010, 30, 51622, 51622, 400, 286, 914, 11, 286, 478, 445, 1382, 281, 519, 295, 257, 9859, 764, 1389, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.12845202053294463, "compression_ratio": 1.7736625514403292, "no_caption_prob": 1.4144706028673681e-06}, {"id": 773, "seek": 298706, "start": 3007.94, "end": 3012.22, "text": " Like what if you have an opaque type, like some sort of money type?", "tokens": [50364, 407, 309, 311, 516, 281, 312, 257, 732, 6770, 2445, 11, 316, 281, 363, 281, 383, 11, 293, 550, 428, 2010, 365, 257, 7006, 50746, 50746, 316, 11, 428, 2010, 365, 7006, 363, 11, 293, 550, 309, 486, 294, 264, 917, 1884, 428, 2010, 365, 7006, 50972, 50972, 383, 13, 400, 370, 498, 428, 2010, 1177, 380, 362, 257, 2010, 7006, 11, 550, 309, 311, 1391, 406, 18006, 613, 51308, 51308, 6828, 13, 51358, 51358, 663, 311, 1880, 13, 51408, 51408, 1743, 437, 498, 291, 362, 364, 42687, 2010, 11, 411, 512, 1333, 295, 1460, 2010, 30, 51622, 51622, 400, 286, 914, 11, 286, 478, 445, 1382, 281, 519, 295, 257, 9859, 764, 1389, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.12845202053294463, "compression_ratio": 1.7736625514403292, "no_caption_prob": 1.4144706028673681e-06}, {"id": 774, "seek": 298706, "start": 3012.22, "end": 3015.06, "text": " And I mean, I'm just trying to think of a concrete use case.", "tokens": [50364, 407, 309, 311, 516, 281, 312, 257, 732, 6770, 2445, 11, 316, 281, 363, 281, 383, 11, 293, 550, 428, 2010, 365, 257, 7006, 50746, 50746, 316, 11, 428, 2010, 365, 7006, 363, 11, 293, 550, 309, 486, 294, 264, 917, 1884, 428, 2010, 365, 7006, 50972, 50972, 383, 13, 400, 370, 498, 428, 2010, 1177, 380, 362, 257, 2010, 7006, 11, 550, 309, 311, 1391, 406, 18006, 613, 51308, 51308, 6828, 13, 51358, 51358, 663, 311, 1880, 13, 51408, 51408, 1743, 437, 498, 291, 362, 364, 42687, 2010, 11, 411, 512, 1333, 295, 1460, 2010, 30, 51622, 51622, 400, 286, 914, 11, 286, 478, 445, 1382, 281, 519, 295, 257, 9859, 764, 1389, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.12845202053294463, "compression_ratio": 1.7736625514403292, "no_caption_prob": 1.4144706028673681e-06}, {"id": 775, "seek": 301506, "start": 3015.06, "end": 3018.02, "text": " In that case, there is like a thing in this box.", "tokens": [50364, 682, 300, 1389, 11, 456, 307, 411, 257, 551, 294, 341, 2424, 13, 50512, 50512, 1743, 291, 393, 380, 3838, 360, 1340, 365, 1460, 3467, 13, 50653, 50653, 509, 643, 281, 19219, 364, 9226, 281, 2028, 365, 729, 13, 50802, 50802, 583, 300, 848, 11, 360, 291, 528, 281, 19219, 512, 1460, 5893, 4471, 689, 291, 393, 550, 12972, 51172, 51172, 309, 538, 257, 2459, 420, 746, 30, 51276, 51276, 2704, 437, 291, 534, 528, 281, 360, 307, 19219, 1460, 5893, 512, 420, 512, 1333, 295, 9274, 2685, 51652, 51652, 6828, 337, 6260, 365, 264, 1460, 13, 51766, 51766, 663, 311, 2293, 264, 3100, 13, 51816, 51816], "temperature": 0.0, "avg_logprob": -0.14167499542236328, "compression_ratio": 1.6975806451612903, "no_caption_prob": 3.187530865034205e-06}, {"id": 776, "seek": 301506, "start": 3018.02, "end": 3020.84, "text": " Like you can't directly do anything with money types.", "tokens": [50364, 682, 300, 1389, 11, 456, 307, 411, 257, 551, 294, 341, 2424, 13, 50512, 50512, 1743, 291, 393, 380, 3838, 360, 1340, 365, 1460, 3467, 13, 50653, 50653, 509, 643, 281, 19219, 364, 9226, 281, 2028, 365, 729, 13, 50802, 50802, 583, 300, 848, 11, 360, 291, 528, 281, 19219, 512, 1460, 5893, 4471, 689, 291, 393, 550, 12972, 51172, 51172, 309, 538, 257, 2459, 420, 746, 30, 51276, 51276, 2704, 437, 291, 534, 528, 281, 360, 307, 19219, 1460, 5893, 512, 420, 512, 1333, 295, 9274, 2685, 51652, 51652, 6828, 337, 6260, 365, 264, 1460, 13, 51766, 51766, 663, 311, 2293, 264, 3100, 13, 51816, 51816], "temperature": 0.0, "avg_logprob": -0.14167499542236328, "compression_ratio": 1.6975806451612903, "no_caption_prob": 3.187530865034205e-06}, {"id": 777, "seek": 301506, "start": 3020.84, "end": 3023.82, "text": " You need to expose an interface to deal with those.", "tokens": [50364, 682, 300, 1389, 11, 456, 307, 411, 257, 551, 294, 341, 2424, 13, 50512, 50512, 1743, 291, 393, 380, 3838, 360, 1340, 365, 1460, 3467, 13, 50653, 50653, 509, 643, 281, 19219, 364, 9226, 281, 2028, 365, 729, 13, 50802, 50802, 583, 300, 848, 11, 360, 291, 528, 281, 19219, 512, 1460, 5893, 4471, 689, 291, 393, 550, 12972, 51172, 51172, 309, 538, 257, 2459, 420, 746, 30, 51276, 51276, 2704, 437, 291, 534, 528, 281, 360, 307, 19219, 1460, 5893, 512, 420, 512, 1333, 295, 9274, 2685, 51652, 51652, 6828, 337, 6260, 365, 264, 1460, 13, 51766, 51766, 663, 311, 2293, 264, 3100, 13, 51816, 51816], "temperature": 0.0, "avg_logprob": -0.14167499542236328, "compression_ratio": 1.6975806451612903, "no_caption_prob": 3.187530865034205e-06}, {"id": 778, "seek": 301506, "start": 3023.82, "end": 3031.22, "text": " But that said, do you want to expose some money dot map where you can then multiply", "tokens": [50364, 682, 300, 1389, 11, 456, 307, 411, 257, 551, 294, 341, 2424, 13, 50512, 50512, 1743, 291, 393, 380, 3838, 360, 1340, 365, 1460, 3467, 13, 50653, 50653, 509, 643, 281, 19219, 364, 9226, 281, 2028, 365, 729, 13, 50802, 50802, 583, 300, 848, 11, 360, 291, 528, 281, 19219, 512, 1460, 5893, 4471, 689, 291, 393, 550, 12972, 51172, 51172, 309, 538, 257, 2459, 420, 746, 30, 51276, 51276, 2704, 437, 291, 534, 528, 281, 360, 307, 19219, 1460, 5893, 512, 420, 512, 1333, 295, 9274, 2685, 51652, 51652, 6828, 337, 6260, 365, 264, 1460, 13, 51766, 51766, 663, 311, 2293, 264, 3100, 13, 51816, 51816], "temperature": 0.0, "avg_logprob": -0.14167499542236328, "compression_ratio": 1.6975806451612903, "no_caption_prob": 3.187530865034205e-06}, {"id": 779, "seek": 301506, "start": 3031.22, "end": 3033.2999999999997, "text": " it by a million or something?", "tokens": [50364, 682, 300, 1389, 11, 456, 307, 411, 257, 551, 294, 341, 2424, 13, 50512, 50512, 1743, 291, 393, 380, 3838, 360, 1340, 365, 1460, 3467, 13, 50653, 50653, 509, 643, 281, 19219, 364, 9226, 281, 2028, 365, 729, 13, 50802, 50802, 583, 300, 848, 11, 360, 291, 528, 281, 19219, 512, 1460, 5893, 4471, 689, 291, 393, 550, 12972, 51172, 51172, 309, 538, 257, 2459, 420, 746, 30, 51276, 51276, 2704, 437, 291, 534, 528, 281, 360, 307, 19219, 1460, 5893, 512, 420, 512, 1333, 295, 9274, 2685, 51652, 51652, 6828, 337, 6260, 365, 264, 1460, 13, 51766, 51766, 663, 311, 2293, 264, 3100, 13, 51816, 51816], "temperature": 0.0, "avg_logprob": -0.14167499542236328, "compression_ratio": 1.6975806451612903, "no_caption_prob": 3.187530865034205e-06}, {"id": 780, "seek": 301506, "start": 3033.2999999999997, "end": 3040.82, "text": " Maybe what you really want to do is expose money dot some or some sort of domain specific", "tokens": [50364, 682, 300, 1389, 11, 456, 307, 411, 257, 551, 294, 341, 2424, 13, 50512, 50512, 1743, 291, 393, 380, 3838, 360, 1340, 365, 1460, 3467, 13, 50653, 50653, 509, 643, 281, 19219, 364, 9226, 281, 2028, 365, 729, 13, 50802, 50802, 583, 300, 848, 11, 360, 291, 528, 281, 19219, 512, 1460, 5893, 4471, 689, 291, 393, 550, 12972, 51172, 51172, 309, 538, 257, 2459, 420, 746, 30, 51276, 51276, 2704, 437, 291, 534, 528, 281, 360, 307, 19219, 1460, 5893, 512, 420, 512, 1333, 295, 9274, 2685, 51652, 51652, 6828, 337, 6260, 365, 264, 1460, 13, 51766, 51766, 663, 311, 2293, 264, 3100, 13, 51816, 51816], "temperature": 0.0, "avg_logprob": -0.14167499542236328, "compression_ratio": 1.6975806451612903, "no_caption_prob": 3.187530865034205e-06}, {"id": 781, "seek": 301506, "start": 3040.82, "end": 3043.1, "text": " functions for dealing with the money.", "tokens": [50364, 682, 300, 1389, 11, 456, 307, 411, 257, 551, 294, 341, 2424, 13, 50512, 50512, 1743, 291, 393, 380, 3838, 360, 1340, 365, 1460, 3467, 13, 50653, 50653, 509, 643, 281, 19219, 364, 9226, 281, 2028, 365, 729, 13, 50802, 50802, 583, 300, 848, 11, 360, 291, 528, 281, 19219, 512, 1460, 5893, 4471, 689, 291, 393, 550, 12972, 51172, 51172, 309, 538, 257, 2459, 420, 746, 30, 51276, 51276, 2704, 437, 291, 534, 528, 281, 360, 307, 19219, 1460, 5893, 512, 420, 512, 1333, 295, 9274, 2685, 51652, 51652, 6828, 337, 6260, 365, 264, 1460, 13, 51766, 51766, 663, 311, 2293, 264, 3100, 13, 51816, 51816], "temperature": 0.0, "avg_logprob": -0.14167499542236328, "compression_ratio": 1.6975806451612903, "no_caption_prob": 3.187530865034205e-06}, {"id": 782, "seek": 301506, "start": 3043.1, "end": 3044.1, "text": " That's exactly the path.", "tokens": [50364, 682, 300, 1389, 11, 456, 307, 411, 257, 551, 294, 341, 2424, 13, 50512, 50512, 1743, 291, 393, 380, 3838, 360, 1340, 365, 1460, 3467, 13, 50653, 50653, 509, 643, 281, 19219, 364, 9226, 281, 2028, 365, 729, 13, 50802, 50802, 583, 300, 848, 11, 360, 291, 528, 281, 19219, 512, 1460, 5893, 4471, 689, 291, 393, 550, 12972, 51172, 51172, 309, 538, 257, 2459, 420, 746, 30, 51276, 51276, 2704, 437, 291, 534, 528, 281, 360, 307, 19219, 1460, 5893, 512, 420, 512, 1333, 295, 9274, 2685, 51652, 51652, 6828, 337, 6260, 365, 264, 1460, 13, 51766, 51766, 663, 311, 2293, 264, 3100, 13, 51816, 51816], "temperature": 0.0, "avg_logprob": -0.14167499542236328, "compression_ratio": 1.6975806451612903, "no_caption_prob": 3.187530865034205e-06}, {"id": 783, "seek": 304410, "start": 3044.1, "end": 3047.2599999999998, "text": " Actually, I've been down this path.", "tokens": [50364, 5135, 11, 286, 600, 668, 760, 341, 3100, 13, 50522, 50522, 286, 519, 300, 390, 767, 1391, 472, 295, 264, 3179, 286, 700, 534, 7320, 18350, 50802, 50802, 6828, 13, 50852, 50852, 286, 390, 4084, 257, 1460, 2010, 293, 309, 390, 406, 13075, 1602, 13, 51042, 51042, 467, 390, 445, 257, 46906, 926, 1391, 364, 24922, 420, 257, 15706, 13, 51240, 51240, 400, 550, 286, 5334, 11, 1699, 11, 457, 411, 309, 311, 11304, 281, 1009, 7019, 293, 14853, 4007, 613, 721, 13, 51450, 51450, 639, 733, 295, 1542, 411, 18350, 13, 51537, 51537, 708, 498, 286, 2942, 257, 4471, 886, 30, 51612, 51612], "temperature": 0.0, "avg_logprob": -0.12829647424086085, "compression_ratio": 1.625, "no_caption_prob": 4.425471161084715e-06}, {"id": 784, "seek": 304410, "start": 3047.2599999999998, "end": 3052.86, "text": " I think that was actually probably one of the areas I first really understood mapping", "tokens": [50364, 5135, 11, 286, 600, 668, 760, 341, 3100, 13, 50522, 50522, 286, 519, 300, 390, 767, 1391, 472, 295, 264, 3179, 286, 700, 534, 7320, 18350, 50802, 50802, 6828, 13, 50852, 50852, 286, 390, 4084, 257, 1460, 2010, 293, 309, 390, 406, 13075, 1602, 13, 51042, 51042, 467, 390, 445, 257, 46906, 926, 1391, 364, 24922, 420, 257, 15706, 13, 51240, 51240, 400, 550, 286, 5334, 11, 1699, 11, 457, 411, 309, 311, 11304, 281, 1009, 7019, 293, 14853, 4007, 613, 721, 13, 51450, 51450, 639, 733, 295, 1542, 411, 18350, 13, 51537, 51537, 708, 498, 286, 2942, 257, 4471, 886, 30, 51612, 51612], "temperature": 0.0, "avg_logprob": -0.12829647424086085, "compression_ratio": 1.625, "no_caption_prob": 4.425471161084715e-06}, {"id": 785, "seek": 304410, "start": 3052.86, "end": 3053.86, "text": " functions.", "tokens": [50364, 5135, 11, 286, 600, 668, 760, 341, 3100, 13, 50522, 50522, 286, 519, 300, 390, 767, 1391, 472, 295, 264, 3179, 286, 700, 534, 7320, 18350, 50802, 50802, 6828, 13, 50852, 50852, 286, 390, 4084, 257, 1460, 2010, 293, 309, 390, 406, 13075, 1602, 13, 51042, 51042, 467, 390, 445, 257, 46906, 926, 1391, 364, 24922, 420, 257, 15706, 13, 51240, 51240, 400, 550, 286, 5334, 11, 1699, 11, 457, 411, 309, 311, 11304, 281, 1009, 7019, 293, 14853, 4007, 613, 721, 13, 51450, 51450, 639, 733, 295, 1542, 411, 18350, 13, 51537, 51537, 708, 498, 286, 2942, 257, 4471, 886, 30, 51612, 51612], "temperature": 0.0, "avg_logprob": -0.12829647424086085, "compression_ratio": 1.625, "no_caption_prob": 4.425471161084715e-06}, {"id": 786, "seek": 304410, "start": 3053.86, "end": 3057.66, "text": " I was creating a money type and it was not parameterized.", "tokens": [50364, 5135, 11, 286, 600, 668, 760, 341, 3100, 13, 50522, 50522, 286, 519, 300, 390, 767, 1391, 472, 295, 264, 3179, 286, 700, 534, 7320, 18350, 50802, 50802, 6828, 13, 50852, 50852, 286, 390, 4084, 257, 1460, 2010, 293, 309, 390, 406, 13075, 1602, 13, 51042, 51042, 467, 390, 445, 257, 46906, 926, 1391, 364, 24922, 420, 257, 15706, 13, 51240, 51240, 400, 550, 286, 5334, 11, 1699, 11, 457, 411, 309, 311, 11304, 281, 1009, 7019, 293, 14853, 4007, 613, 721, 13, 51450, 51450, 639, 733, 295, 1542, 411, 18350, 13, 51537, 51537, 708, 498, 286, 2942, 257, 4471, 886, 30, 51612, 51612], "temperature": 0.0, "avg_logprob": -0.12829647424086085, "compression_ratio": 1.625, "no_caption_prob": 4.425471161084715e-06}, {"id": 787, "seek": 304410, "start": 3057.66, "end": 3061.62, "text": " It was just a wrapper around probably an integer or a float.", "tokens": [50364, 5135, 11, 286, 600, 668, 760, 341, 3100, 13, 50522, 50522, 286, 519, 300, 390, 767, 1391, 472, 295, 264, 3179, 286, 700, 534, 7320, 18350, 50802, 50802, 6828, 13, 50852, 50852, 286, 390, 4084, 257, 1460, 2010, 293, 309, 390, 406, 13075, 1602, 13, 51042, 51042, 467, 390, 445, 257, 46906, 926, 1391, 364, 24922, 420, 257, 15706, 13, 51240, 51240, 400, 550, 286, 5334, 11, 1699, 11, 457, 411, 309, 311, 11304, 281, 1009, 7019, 293, 14853, 4007, 613, 721, 13, 51450, 51450, 639, 733, 295, 1542, 411, 18350, 13, 51537, 51537, 708, 498, 286, 2942, 257, 4471, 886, 30, 51612, 51612], "temperature": 0.0, "avg_logprob": -0.12829647424086085, "compression_ratio": 1.625, "no_caption_prob": 4.425471161084715e-06}, {"id": 788, "seek": 304410, "start": 3061.62, "end": 3065.8199999999997, "text": " And then I realized, wait, but like it's annoying to always wrap and unwrap these things.", "tokens": [50364, 5135, 11, 286, 600, 668, 760, 341, 3100, 13, 50522, 50522, 286, 519, 300, 390, 767, 1391, 472, 295, 264, 3179, 286, 700, 534, 7320, 18350, 50802, 50802, 6828, 13, 50852, 50852, 286, 390, 4084, 257, 1460, 2010, 293, 309, 390, 406, 13075, 1602, 13, 51042, 51042, 467, 390, 445, 257, 46906, 926, 1391, 364, 24922, 420, 257, 15706, 13, 51240, 51240, 400, 550, 286, 5334, 11, 1699, 11, 457, 411, 309, 311, 11304, 281, 1009, 7019, 293, 14853, 4007, 613, 721, 13, 51450, 51450, 639, 733, 295, 1542, 411, 18350, 13, 51537, 51537, 708, 498, 286, 2942, 257, 4471, 886, 30, 51612, 51612], "temperature": 0.0, "avg_logprob": -0.12829647424086085, "compression_ratio": 1.625, "no_caption_prob": 4.425471161084715e-06}, {"id": 789, "seek": 304410, "start": 3065.8199999999997, "end": 3067.56, "text": " This kind of looks like mapping.", "tokens": [50364, 5135, 11, 286, 600, 668, 760, 341, 3100, 13, 50522, 50522, 286, 519, 300, 390, 767, 1391, 472, 295, 264, 3179, 286, 700, 534, 7320, 18350, 50802, 50802, 6828, 13, 50852, 50852, 286, 390, 4084, 257, 1460, 2010, 293, 309, 390, 406, 13075, 1602, 13, 51042, 51042, 467, 390, 445, 257, 46906, 926, 1391, 364, 24922, 420, 257, 15706, 13, 51240, 51240, 400, 550, 286, 5334, 11, 1699, 11, 457, 411, 309, 311, 11304, 281, 1009, 7019, 293, 14853, 4007, 613, 721, 13, 51450, 51450, 639, 733, 295, 1542, 411, 18350, 13, 51537, 51537, 708, 498, 286, 2942, 257, 4471, 886, 30, 51612, 51612], "temperature": 0.0, "avg_logprob": -0.12829647424086085, "compression_ratio": 1.625, "no_caption_prob": 4.425471161084715e-06}, {"id": 790, "seek": 304410, "start": 3067.56, "end": 3069.06, "text": " What if I created a map too?", "tokens": [50364, 5135, 11, 286, 600, 668, 760, 341, 3100, 13, 50522, 50522, 286, 519, 300, 390, 767, 1391, 472, 295, 264, 3179, 286, 700, 534, 7320, 18350, 50802, 50802, 6828, 13, 50852, 50852, 286, 390, 4084, 257, 1460, 2010, 293, 309, 390, 406, 13075, 1602, 13, 51042, 51042, 467, 390, 445, 257, 46906, 926, 1391, 364, 24922, 420, 257, 15706, 13, 51240, 51240, 400, 550, 286, 5334, 11, 1699, 11, 457, 411, 309, 311, 11304, 281, 1009, 7019, 293, 14853, 4007, 613, 721, 13, 51450, 51450, 639, 733, 295, 1542, 411, 18350, 13, 51537, 51537, 708, 498, 286, 2942, 257, 4471, 886, 30, 51612, 51612], "temperature": 0.0, "avg_logprob": -0.12829647424086085, "compression_ratio": 1.625, "no_caption_prob": 4.425471161084715e-06}, {"id": 791, "seek": 306906, "start": 3069.06, "end": 3075.5, "text": " And then I can say anytime I want to say add to dollar amounts, I can just map to the plus", "tokens": [50364, 400, 550, 286, 393, 584, 13038, 286, 528, 281, 584, 909, 281, 7241, 11663, 11, 286, 393, 445, 4471, 281, 264, 1804, 50686, 50686, 2445, 300, 445, 1985, 13, 50828, 50828, 1610, 4471, 281, 264, 1413, 2445, 13, 50920, 50920, 865, 13, 50970, 50970, 708, 775, 300, 914, 30, 51072, 51072, 865, 13, 51122, 51122, 3013, 411, 11, 286, 519, 382, 41504, 11, 321, 862, 588, 2370, 293, 9612, 365, 5221, 13, 51444, 51444, 400, 498, 291, 645, 294, 257, 544, 11, 584, 11, 498, 291, 434, 1364, 365, 10649, 11, 291, 458, 300, 498, 291, 51694, 51694], "temperature": 0.0, "avg_logprob": -0.21138341903686522, "compression_ratio": 1.6376811594202898, "no_caption_prob": 9.516130376141518e-06}, {"id": 792, "seek": 306906, "start": 3075.5, "end": 3078.34, "text": " function that just works.", "tokens": [50364, 400, 550, 286, 393, 584, 13038, 286, 528, 281, 584, 909, 281, 7241, 11663, 11, 286, 393, 445, 4471, 281, 264, 1804, 50686, 50686, 2445, 300, 445, 1985, 13, 50828, 50828, 1610, 4471, 281, 264, 1413, 2445, 13, 50920, 50920, 865, 13, 50970, 50970, 708, 775, 300, 914, 30, 51072, 51072, 865, 13, 51122, 51122, 3013, 411, 11, 286, 519, 382, 41504, 11, 321, 862, 588, 2370, 293, 9612, 365, 5221, 13, 51444, 51444, 400, 498, 291, 645, 294, 257, 544, 11, 584, 11, 498, 291, 434, 1364, 365, 10649, 11, 291, 458, 300, 498, 291, 51694, 51694], "temperature": 0.0, "avg_logprob": -0.21138341903686522, "compression_ratio": 1.6376811594202898, "no_caption_prob": 9.516130376141518e-06}, {"id": 793, "seek": 306906, "start": 3078.34, "end": 3080.18, "text": " Or map to the times function.", "tokens": [50364, 400, 550, 286, 393, 584, 13038, 286, 528, 281, 584, 909, 281, 7241, 11663, 11, 286, 393, 445, 4471, 281, 264, 1804, 50686, 50686, 2445, 300, 445, 1985, 13, 50828, 50828, 1610, 4471, 281, 264, 1413, 2445, 13, 50920, 50920, 865, 13, 50970, 50970, 708, 775, 300, 914, 30, 51072, 51072, 865, 13, 51122, 51122, 3013, 411, 11, 286, 519, 382, 41504, 11, 321, 862, 588, 2370, 293, 9612, 365, 5221, 13, 51444, 51444, 400, 498, 291, 645, 294, 257, 544, 11, 584, 11, 498, 291, 434, 1364, 365, 10649, 11, 291, 458, 300, 498, 291, 51694, 51694], "temperature": 0.0, "avg_logprob": -0.21138341903686522, "compression_ratio": 1.6376811594202898, "no_caption_prob": 9.516130376141518e-06}, {"id": 794, "seek": 306906, "start": 3080.18, "end": 3081.18, "text": " Yeah.", "tokens": [50364, 400, 550, 286, 393, 584, 13038, 286, 528, 281, 584, 909, 281, 7241, 11663, 11, 286, 393, 445, 4471, 281, 264, 1804, 50686, 50686, 2445, 300, 445, 1985, 13, 50828, 50828, 1610, 4471, 281, 264, 1413, 2445, 13, 50920, 50920, 865, 13, 50970, 50970, 708, 775, 300, 914, 30, 51072, 51072, 865, 13, 51122, 51122, 3013, 411, 11, 286, 519, 382, 41504, 11, 321, 862, 588, 2370, 293, 9612, 365, 5221, 13, 51444, 51444, 400, 498, 291, 645, 294, 257, 544, 11, 584, 11, 498, 291, 434, 1364, 365, 10649, 11, 291, 458, 300, 498, 291, 51694, 51694], "temperature": 0.0, "avg_logprob": -0.21138341903686522, "compression_ratio": 1.6376811594202898, "no_caption_prob": 9.516130376141518e-06}, {"id": 795, "seek": 306906, "start": 3081.18, "end": 3083.22, "text": " What does that mean?", "tokens": [50364, 400, 550, 286, 393, 584, 13038, 286, 528, 281, 584, 909, 281, 7241, 11663, 11, 286, 393, 445, 4471, 281, 264, 1804, 50686, 50686, 2445, 300, 445, 1985, 13, 50828, 50828, 1610, 4471, 281, 264, 1413, 2445, 13, 50920, 50920, 865, 13, 50970, 50970, 708, 775, 300, 914, 30, 51072, 51072, 865, 13, 51122, 51122, 3013, 411, 11, 286, 519, 382, 41504, 11, 321, 862, 588, 2370, 293, 9612, 365, 5221, 13, 51444, 51444, 400, 498, 291, 645, 294, 257, 544, 11, 584, 11, 498, 291, 434, 1364, 365, 10649, 11, 291, 458, 300, 498, 291, 51694, 51694], "temperature": 0.0, "avg_logprob": -0.21138341903686522, "compression_ratio": 1.6376811594202898, "no_caption_prob": 9.516130376141518e-06}, {"id": 796, "seek": 306906, "start": 3083.22, "end": 3084.22, "text": " Yeah.", "tokens": [50364, 400, 550, 286, 393, 584, 13038, 286, 528, 281, 584, 909, 281, 7241, 11663, 11, 286, 393, 445, 4471, 281, 264, 1804, 50686, 50686, 2445, 300, 445, 1985, 13, 50828, 50828, 1610, 4471, 281, 264, 1413, 2445, 13, 50920, 50920, 865, 13, 50970, 50970, 708, 775, 300, 914, 30, 51072, 51072, 865, 13, 51122, 51122, 3013, 411, 11, 286, 519, 382, 41504, 11, 321, 862, 588, 2370, 293, 9612, 365, 5221, 13, 51444, 51444, 400, 498, 291, 645, 294, 257, 544, 11, 584, 11, 498, 291, 434, 1364, 365, 10649, 11, 291, 458, 300, 498, 291, 51694, 51694], "temperature": 0.0, "avg_logprob": -0.21138341903686522, "compression_ratio": 1.6376811594202898, "no_caption_prob": 9.516130376141518e-06}, {"id": 797, "seek": 306906, "start": 3084.22, "end": 3090.66, "text": " Which like, I think as programmers, we play very fast and loose with math.", "tokens": [50364, 400, 550, 286, 393, 584, 13038, 286, 528, 281, 584, 909, 281, 7241, 11663, 11, 286, 393, 445, 4471, 281, 264, 1804, 50686, 50686, 2445, 300, 445, 1985, 13, 50828, 50828, 1610, 4471, 281, 264, 1413, 2445, 13, 50920, 50920, 865, 13, 50970, 50970, 708, 775, 300, 914, 30, 51072, 51072, 865, 13, 51122, 51122, 3013, 411, 11, 286, 519, 382, 41504, 11, 321, 862, 588, 2370, 293, 9612, 365, 5221, 13, 51444, 51444, 400, 498, 291, 645, 294, 257, 544, 11, 584, 11, 498, 291, 434, 1364, 365, 10649, 11, 291, 458, 300, 498, 291, 51694, 51694], "temperature": 0.0, "avg_logprob": -0.21138341903686522, "compression_ratio": 1.6376811594202898, "no_caption_prob": 9.516130376141518e-06}, {"id": 798, "seek": 306906, "start": 3090.66, "end": 3095.66, "text": " And if you were in a more, say, if you're working with physics, you know that if you", "tokens": [50364, 400, 550, 286, 393, 584, 13038, 286, 528, 281, 584, 909, 281, 7241, 11663, 11, 286, 393, 445, 4471, 281, 264, 1804, 50686, 50686, 2445, 300, 445, 1985, 13, 50828, 50828, 1610, 4471, 281, 264, 1413, 2445, 13, 50920, 50920, 865, 13, 50970, 50970, 708, 775, 300, 914, 30, 51072, 51072, 865, 13, 51122, 51122, 3013, 411, 11, 286, 519, 382, 41504, 11, 321, 862, 588, 2370, 293, 9612, 365, 5221, 13, 51444, 51444, 400, 498, 291, 645, 294, 257, 544, 11, 584, 11, 498, 291, 434, 1364, 365, 10649, 11, 291, 458, 300, 498, 291, 51694, 51694], "temperature": 0.0, "avg_logprob": -0.21138341903686522, "compression_ratio": 1.6376811594202898, "no_caption_prob": 9.516130376141518e-06}, {"id": 799, "seek": 309566, "start": 3095.66, "end": 3102.2, "text": " multiply two numbers that have a unit, then you also have to multiply the unit.", "tokens": [50364, 12972, 732, 3547, 300, 362, 257, 4985, 11, 550, 291, 611, 362, 281, 12972, 264, 4985, 13, 50691, 50691, 400, 370, 498, 291, 434, 30955, 3808, 1413, 3808, 11, 437, 291, 483, 646, 307, 3808, 8889, 13, 51122, 51122, 663, 3263, 869, 281, 385, 13, 51182, 51182, 13515, 385, 493, 13, 51232, 51232, 3013, 294, 881, 5821, 307, 1391, 257, 297, 892, 694, 804, 4985, 2010, 13, 51440, 51440, 407, 291, 1391, 500, 380, 528, 281, 2089, 23211, 7705, 322, 264, 2158, 13, 51756, 51756], "temperature": 0.0, "avg_logprob": -0.15199420095860272, "compression_ratio": 1.6394230769230769, "no_caption_prob": 3.785294211411383e-06}, {"id": 800, "seek": 309566, "start": 3102.2, "end": 3110.8199999999997, "text": " And so if you're multiplying dollars times dollars, what you get back is dollars squared.", "tokens": [50364, 12972, 732, 3547, 300, 362, 257, 4985, 11, 550, 291, 611, 362, 281, 12972, 264, 4985, 13, 50691, 50691, 400, 370, 498, 291, 434, 30955, 3808, 1413, 3808, 11, 437, 291, 483, 646, 307, 3808, 8889, 13, 51122, 51122, 663, 3263, 869, 281, 385, 13, 51182, 51182, 13515, 385, 493, 13, 51232, 51232, 3013, 294, 881, 5821, 307, 1391, 257, 297, 892, 694, 804, 4985, 2010, 13, 51440, 51440, 407, 291, 1391, 500, 380, 528, 281, 2089, 23211, 7705, 322, 264, 2158, 13, 51756, 51756], "temperature": 0.0, "avg_logprob": -0.15199420095860272, "compression_ratio": 1.6394230769230769, "no_caption_prob": 3.785294211411383e-06}, {"id": 801, "seek": 309566, "start": 3110.8199999999997, "end": 3112.02, "text": " That sounds great to me.", "tokens": [50364, 12972, 732, 3547, 300, 362, 257, 4985, 11, 550, 291, 611, 362, 281, 12972, 264, 4985, 13, 50691, 50691, 400, 370, 498, 291, 434, 30955, 3808, 1413, 3808, 11, 437, 291, 483, 646, 307, 3808, 8889, 13, 51122, 51122, 663, 3263, 869, 281, 385, 13, 51182, 51182, 13515, 385, 493, 13, 51232, 51232, 3013, 294, 881, 5821, 307, 1391, 257, 297, 892, 694, 804, 4985, 2010, 13, 51440, 51440, 407, 291, 1391, 500, 380, 528, 281, 2089, 23211, 7705, 322, 264, 2158, 13, 51756, 51756], "temperature": 0.0, "avg_logprob": -0.15199420095860272, "compression_ratio": 1.6394230769230769, "no_caption_prob": 3.785294211411383e-06}, {"id": 802, "seek": 309566, "start": 3112.02, "end": 3113.02, "text": " Sign me up.", "tokens": [50364, 12972, 732, 3547, 300, 362, 257, 4985, 11, 550, 291, 611, 362, 281, 12972, 264, 4985, 13, 50691, 50691, 400, 370, 498, 291, 434, 30955, 3808, 1413, 3808, 11, 437, 291, 483, 646, 307, 3808, 8889, 13, 51122, 51122, 663, 3263, 869, 281, 385, 13, 51182, 51182, 13515, 385, 493, 13, 51232, 51232, 3013, 294, 881, 5821, 307, 1391, 257, 297, 892, 694, 804, 4985, 2010, 13, 51440, 51440, 407, 291, 1391, 500, 380, 528, 281, 2089, 23211, 7705, 322, 264, 2158, 13, 51756, 51756], "temperature": 0.0, "avg_logprob": -0.15199420095860272, "compression_ratio": 1.6394230769230769, "no_caption_prob": 3.785294211411383e-06}, {"id": 803, "seek": 309566, "start": 3113.02, "end": 3117.18, "text": " Which in most applications is probably a nonsensical unit type.", "tokens": [50364, 12972, 732, 3547, 300, 362, 257, 4985, 11, 550, 291, 611, 362, 281, 12972, 264, 4985, 13, 50691, 50691, 400, 370, 498, 291, 434, 30955, 3808, 1413, 3808, 11, 437, 291, 483, 646, 307, 3808, 8889, 13, 51122, 51122, 663, 3263, 869, 281, 385, 13, 51182, 51182, 13515, 385, 493, 13, 51232, 51232, 3013, 294, 881, 5821, 307, 1391, 257, 297, 892, 694, 804, 4985, 2010, 13, 51440, 51440, 407, 291, 1391, 500, 380, 528, 281, 2089, 23211, 7705, 322, 264, 2158, 13, 51756, 51756], "temperature": 0.0, "avg_logprob": -0.15199420095860272, "compression_ratio": 1.6394230769230769, "no_caption_prob": 3.785294211411383e-06}, {"id": 804, "seek": 309566, "start": 3117.18, "end": 3123.5, "text": " So you probably don't want to allow arbitrary operations on the value.", "tokens": [50364, 12972, 732, 3547, 300, 362, 257, 4985, 11, 550, 291, 611, 362, 281, 12972, 264, 4985, 13, 50691, 50691, 400, 370, 498, 291, 434, 30955, 3808, 1413, 3808, 11, 437, 291, 483, 646, 307, 3808, 8889, 13, 51122, 51122, 663, 3263, 869, 281, 385, 13, 51182, 51182, 13515, 385, 493, 13, 51232, 51232, 3013, 294, 881, 5821, 307, 1391, 257, 297, 892, 694, 804, 4985, 2010, 13, 51440, 51440, 407, 291, 1391, 500, 380, 528, 281, 2089, 23211, 7705, 322, 264, 2158, 13, 51756, 51756], "temperature": 0.0, "avg_logprob": -0.15199420095860272, "compression_ratio": 1.6394230769230769, "no_caption_prob": 3.785294211411383e-06}, {"id": 805, "seek": 312350, "start": 3123.5, "end": 3129.3, "text": " Another really interesting thing is that normally a map to function, you pass a to argument", "tokens": [50364, 3996, 534, 1880, 551, 307, 300, 5646, 257, 4471, 281, 2445, 11, 291, 1320, 257, 281, 6770, 50654, 50654, 2445, 281, 309, 281, 584, 11, 4177, 11, 10432, 613, 732, 1228, 341, 2445, 13, 50848, 50848, 400, 300, 2445, 291, 976, 309, 393, 362, 604, 732, 15743, 293, 604, 5598, 2010, 570, 291, 51126, 51126, 393, 10432, 604, 4190, 1214, 13, 51268, 51268, 2022, 746, 411, 11, 584, 11, 257, 7241, 46906, 11, 291, 393, 380, 360, 300, 570, 264, 2158, 1854, 51542, 51542, 307, 1009, 364, 24922, 13, 51612, 51612, 400, 370, 264, 732, 15743, 337, 428, 732, 6770, 6828, 1633, 312, 364, 24922, 13, 51812, 51812], "temperature": 0.0, "avg_logprob": -0.12286787033081055, "compression_ratio": 1.8775510204081634, "no_caption_prob": 3.611958845795016e-06}, {"id": 806, "seek": 312350, "start": 3129.3, "end": 3133.18, "text": " function to it to say, hey, combine these two using this function.", "tokens": [50364, 3996, 534, 1880, 551, 307, 300, 5646, 257, 4471, 281, 2445, 11, 291, 1320, 257, 281, 6770, 50654, 50654, 2445, 281, 309, 281, 584, 11, 4177, 11, 10432, 613, 732, 1228, 341, 2445, 13, 50848, 50848, 400, 300, 2445, 291, 976, 309, 393, 362, 604, 732, 15743, 293, 604, 5598, 2010, 570, 291, 51126, 51126, 393, 10432, 604, 4190, 1214, 13, 51268, 51268, 2022, 746, 411, 11, 584, 11, 257, 7241, 46906, 11, 291, 393, 380, 360, 300, 570, 264, 2158, 1854, 51542, 51542, 307, 1009, 364, 24922, 13, 51612, 51612, 400, 370, 264, 732, 15743, 337, 428, 732, 6770, 6828, 1633, 312, 364, 24922, 13, 51812, 51812], "temperature": 0.0, "avg_logprob": -0.12286787033081055, "compression_ratio": 1.8775510204081634, "no_caption_prob": 3.611958845795016e-06}, {"id": 807, "seek": 312350, "start": 3133.18, "end": 3138.74, "text": " And that function you give it can have any two inputs and any output type because you", "tokens": [50364, 3996, 534, 1880, 551, 307, 300, 5646, 257, 4471, 281, 2445, 11, 291, 1320, 257, 281, 6770, 50654, 50654, 2445, 281, 309, 281, 584, 11, 4177, 11, 10432, 613, 732, 1228, 341, 2445, 13, 50848, 50848, 400, 300, 2445, 291, 976, 309, 393, 362, 604, 732, 15743, 293, 604, 5598, 2010, 570, 291, 51126, 51126, 393, 10432, 604, 4190, 1214, 13, 51268, 51268, 2022, 746, 411, 11, 584, 11, 257, 7241, 46906, 11, 291, 393, 380, 360, 300, 570, 264, 2158, 1854, 51542, 51542, 307, 1009, 364, 24922, 13, 51612, 51612, 400, 370, 264, 732, 15743, 337, 428, 732, 6770, 6828, 1633, 312, 364, 24922, 13, 51812, 51812], "temperature": 0.0, "avg_logprob": -0.12286787033081055, "compression_ratio": 1.8775510204081634, "no_caption_prob": 3.611958845795016e-06}, {"id": 808, "seek": 312350, "start": 3138.74, "end": 3141.58, "text": " can combine any values together.", "tokens": [50364, 3996, 534, 1880, 551, 307, 300, 5646, 257, 4471, 281, 2445, 11, 291, 1320, 257, 281, 6770, 50654, 50654, 2445, 281, 309, 281, 584, 11, 4177, 11, 10432, 613, 732, 1228, 341, 2445, 13, 50848, 50848, 400, 300, 2445, 291, 976, 309, 393, 362, 604, 732, 15743, 293, 604, 5598, 2010, 570, 291, 51126, 51126, 393, 10432, 604, 4190, 1214, 13, 51268, 51268, 2022, 746, 411, 11, 584, 11, 257, 7241, 46906, 11, 291, 393, 380, 360, 300, 570, 264, 2158, 1854, 51542, 51542, 307, 1009, 364, 24922, 13, 51612, 51612, 400, 370, 264, 732, 15743, 337, 428, 732, 6770, 6828, 1633, 312, 364, 24922, 13, 51812, 51812], "temperature": 0.0, "avg_logprob": -0.12286787033081055, "compression_ratio": 1.8775510204081634, "no_caption_prob": 3.611958845795016e-06}, {"id": 809, "seek": 312350, "start": 3141.58, "end": 3147.06, "text": " With something like, say, a dollar wrapper, you can't do that because the value inside", "tokens": [50364, 3996, 534, 1880, 551, 307, 300, 5646, 257, 4471, 281, 2445, 11, 291, 1320, 257, 281, 6770, 50654, 50654, 2445, 281, 309, 281, 584, 11, 4177, 11, 10432, 613, 732, 1228, 341, 2445, 13, 50848, 50848, 400, 300, 2445, 291, 976, 309, 393, 362, 604, 732, 15743, 293, 604, 5598, 2010, 570, 291, 51126, 51126, 393, 10432, 604, 4190, 1214, 13, 51268, 51268, 2022, 746, 411, 11, 584, 11, 257, 7241, 46906, 11, 291, 393, 380, 360, 300, 570, 264, 2158, 1854, 51542, 51542, 307, 1009, 364, 24922, 13, 51612, 51612, 400, 370, 264, 732, 15743, 337, 428, 732, 6770, 6828, 1633, 312, 364, 24922, 13, 51812, 51812], "temperature": 0.0, "avg_logprob": -0.12286787033081055, "compression_ratio": 1.8775510204081634, "no_caption_prob": 3.611958845795016e-06}, {"id": 810, "seek": 312350, "start": 3147.06, "end": 3148.46, "text": " is always an integer.", "tokens": [50364, 3996, 534, 1880, 551, 307, 300, 5646, 257, 4471, 281, 2445, 11, 291, 1320, 257, 281, 6770, 50654, 50654, 2445, 281, 309, 281, 584, 11, 4177, 11, 10432, 613, 732, 1228, 341, 2445, 13, 50848, 50848, 400, 300, 2445, 291, 976, 309, 393, 362, 604, 732, 15743, 293, 604, 5598, 2010, 570, 291, 51126, 51126, 393, 10432, 604, 4190, 1214, 13, 51268, 51268, 2022, 746, 411, 11, 584, 11, 257, 7241, 46906, 11, 291, 393, 380, 360, 300, 570, 264, 2158, 1854, 51542, 51542, 307, 1009, 364, 24922, 13, 51612, 51612, 400, 370, 264, 732, 15743, 337, 428, 732, 6770, 6828, 1633, 312, 364, 24922, 13, 51812, 51812], "temperature": 0.0, "avg_logprob": -0.12286787033081055, "compression_ratio": 1.8775510204081634, "no_caption_prob": 3.611958845795016e-06}, {"id": 811, "seek": 312350, "start": 3148.46, "end": 3152.46, "text": " And so the two inputs for your two argument functions must be an integer.", "tokens": [50364, 3996, 534, 1880, 551, 307, 300, 5646, 257, 4471, 281, 2445, 11, 291, 1320, 257, 281, 6770, 50654, 50654, 2445, 281, 309, 281, 584, 11, 4177, 11, 10432, 613, 732, 1228, 341, 2445, 13, 50848, 50848, 400, 300, 2445, 291, 976, 309, 393, 362, 604, 732, 15743, 293, 604, 5598, 2010, 570, 291, 51126, 51126, 393, 10432, 604, 4190, 1214, 13, 51268, 51268, 2022, 746, 411, 11, 584, 11, 257, 7241, 46906, 11, 291, 393, 380, 360, 300, 570, 264, 2158, 1854, 51542, 51542, 307, 1009, 364, 24922, 13, 51612, 51612, 400, 370, 264, 732, 15743, 337, 428, 732, 6770, 6828, 1633, 312, 364, 24922, 13, 51812, 51812], "temperature": 0.0, "avg_logprob": -0.12286787033081055, "compression_ratio": 1.8775510204081634, "no_caption_prob": 3.611958845795016e-06}, {"id": 812, "seek": 315246, "start": 3152.46, "end": 3157.38, "text": " And because you're creating a new dollar value as the output, the output value also must", "tokens": [50364, 400, 570, 291, 434, 4084, 257, 777, 7241, 2158, 382, 264, 5598, 11, 264, 5598, 2158, 611, 1633, 50610, 50610, 312, 364, 24922, 13, 50660, 50660, 407, 2831, 813, 1419, 257, 19577, 2445, 885, 4678, 666, 428, 4471, 281, 300, 311, 257, 11, 272, 11, 269, 11, 309, 311, 50902, 50902, 767, 516, 281, 312, 560, 11, 560, 11, 560, 11, 597, 307, 6264, 2264, 13, 51192, 51192, 821, 311, 264, 3410, 295, 11365, 3807, 1296, 11, 286, 478, 516, 281, 3507, 512, 10247, 2115, 484, 510, 11, 51482, 51482, 6754, 76, 18191, 299, 5717, 1108, 32702, 299, 9606, 295, 613, 6828, 13, 51692, 51692], "temperature": 0.0, "avg_logprob": -0.11384034379620418, "compression_ratio": 1.6437246963562753, "no_caption_prob": 5.255375072010793e-06}, {"id": 813, "seek": 315246, "start": 3157.38, "end": 3158.38, "text": " be an integer.", "tokens": [50364, 400, 570, 291, 434, 4084, 257, 777, 7241, 2158, 382, 264, 5598, 11, 264, 5598, 2158, 611, 1633, 50610, 50610, 312, 364, 24922, 13, 50660, 50660, 407, 2831, 813, 1419, 257, 19577, 2445, 885, 4678, 666, 428, 4471, 281, 300, 311, 257, 11, 272, 11, 269, 11, 309, 311, 50902, 50902, 767, 516, 281, 312, 560, 11, 560, 11, 560, 11, 597, 307, 6264, 2264, 13, 51192, 51192, 821, 311, 264, 3410, 295, 11365, 3807, 1296, 11, 286, 478, 516, 281, 3507, 512, 10247, 2115, 484, 510, 11, 51482, 51482, 6754, 76, 18191, 299, 5717, 1108, 32702, 299, 9606, 295, 613, 6828, 13, 51692, 51692], "temperature": 0.0, "avg_logprob": -0.11384034379620418, "compression_ratio": 1.6437246963562753, "no_caption_prob": 5.255375072010793e-06}, {"id": 814, "seek": 315246, "start": 3158.38, "end": 3163.2200000000003, "text": " So rather than having a generic function being passed into your map to that's a, b, c, it's", "tokens": [50364, 400, 570, 291, 434, 4084, 257, 777, 7241, 2158, 382, 264, 5598, 11, 264, 5598, 2158, 611, 1633, 50610, 50610, 312, 364, 24922, 13, 50660, 50660, 407, 2831, 813, 1419, 257, 19577, 2445, 885, 4678, 666, 428, 4471, 281, 300, 311, 257, 11, 272, 11, 269, 11, 309, 311, 50902, 50902, 767, 516, 281, 312, 560, 11, 560, 11, 560, 11, 597, 307, 6264, 2264, 13, 51192, 51192, 821, 311, 264, 3410, 295, 11365, 3807, 1296, 11, 286, 478, 516, 281, 3507, 512, 10247, 2115, 484, 510, 11, 51482, 51482, 6754, 76, 18191, 299, 5717, 1108, 32702, 299, 9606, 295, 613, 6828, 13, 51692, 51692], "temperature": 0.0, "avg_logprob": -0.11384034379620418, "compression_ratio": 1.6437246963562753, "no_caption_prob": 5.255375072010793e-06}, {"id": 815, "seek": 315246, "start": 3163.2200000000003, "end": 3169.02, "text": " actually going to be int, int, int, which is possibly OK.", "tokens": [50364, 400, 570, 291, 434, 4084, 257, 777, 7241, 2158, 382, 264, 5598, 11, 264, 5598, 2158, 611, 1633, 50610, 50610, 312, 364, 24922, 13, 50660, 50660, 407, 2831, 813, 1419, 257, 19577, 2445, 885, 4678, 666, 428, 4471, 281, 300, 311, 257, 11, 272, 11, 269, 11, 309, 311, 50902, 50902, 767, 516, 281, 312, 560, 11, 560, 11, 560, 11, 597, 307, 6264, 2264, 13, 51192, 51192, 821, 311, 264, 3410, 295, 11365, 3807, 1296, 11, 286, 478, 516, 281, 3507, 512, 10247, 2115, 484, 510, 11, 51482, 51482, 6754, 76, 18191, 299, 5717, 1108, 32702, 299, 9606, 295, 613, 6828, 13, 51692, 51692], "temperature": 0.0, "avg_logprob": -0.11384034379620418, "compression_ratio": 1.6437246963562753, "no_caption_prob": 5.255375072010793e-06}, {"id": 816, "seek": 315246, "start": 3169.02, "end": 3174.82, "text": " There's the concept of distinguishing between, I'm going to throw some fancy terms out here,", "tokens": [50364, 400, 570, 291, 434, 4084, 257, 777, 7241, 2158, 382, 264, 5598, 11, 264, 5598, 2158, 611, 1633, 50610, 50610, 312, 364, 24922, 13, 50660, 50660, 407, 2831, 813, 1419, 257, 19577, 2445, 885, 4678, 666, 428, 4471, 281, 300, 311, 257, 11, 272, 11, 269, 11, 309, 311, 50902, 50902, 767, 516, 281, 312, 560, 11, 560, 11, 560, 11, 597, 307, 6264, 2264, 13, 51192, 51192, 821, 311, 264, 3410, 295, 11365, 3807, 1296, 11, 286, 478, 516, 281, 3507, 512, 10247, 2115, 484, 510, 11, 51482, 51482, 6754, 76, 18191, 299, 5717, 1108, 32702, 299, 9606, 295, 613, 6828, 13, 51692, 51692], "temperature": 0.0, "avg_logprob": -0.11384034379620418, "compression_ratio": 1.6437246963562753, "no_caption_prob": 5.255375072010793e-06}, {"id": 817, "seek": 315246, "start": 3174.82, "end": 3179.02, "text": " polymorphic versus monomorphic versions of these functions.", "tokens": [50364, 400, 570, 291, 434, 4084, 257, 777, 7241, 2158, 382, 264, 5598, 11, 264, 5598, 2158, 611, 1633, 50610, 50610, 312, 364, 24922, 13, 50660, 50660, 407, 2831, 813, 1419, 257, 19577, 2445, 885, 4678, 666, 428, 4471, 281, 300, 311, 257, 11, 272, 11, 269, 11, 309, 311, 50902, 50902, 767, 516, 281, 312, 560, 11, 560, 11, 560, 11, 597, 307, 6264, 2264, 13, 51192, 51192, 821, 311, 264, 3410, 295, 11365, 3807, 1296, 11, 286, 478, 516, 281, 3507, 512, 10247, 2115, 484, 510, 11, 51482, 51482, 6754, 76, 18191, 299, 5717, 1108, 32702, 299, 9606, 295, 613, 6828, 13, 51692, 51692], "temperature": 0.0, "avg_logprob": -0.11384034379620418, "compression_ratio": 1.6437246963562753, "no_caption_prob": 5.255375072010793e-06}, {"id": 818, "seek": 317902, "start": 3179.02, "end": 3182.66, "text": " Monomorphic meaning many shapes, monomorphic meaning single shape.", "tokens": [50364, 4713, 32702, 299, 3620, 867, 10854, 11, 1108, 32702, 299, 3620, 2167, 3909, 13, 50546, 50546, 407, 498, 309, 311, 445, 1009, 364, 24922, 11, 550, 300, 311, 257, 1108, 32702, 299, 3037, 295, 4471, 420, 4471, 281, 13, 50810, 50810, 400, 729, 393, 312, 2101, 906, 833, 1629, 9121, 13, 51018, 51018, 583, 294, 2674, 11, 562, 561, 366, 1417, 466, 721, 411, 2580, 1166, 11, 436, 11, 291, 914, 264, 51378, 51378, 6754, 76, 18191, 299, 3037, 13, 51458, 51458, 407, 577, 576, 291, 818, 264, 1108, 32702, 299, 3037, 550, 30, 51610, 51610, 509, 362, 281, 652, 472, 13, 51766, 51766], "temperature": 0.0, "avg_logprob": -0.14800628626121665, "compression_ratio": 1.7, "no_caption_prob": 2.392227361269761e-05}, {"id": 819, "seek": 317902, "start": 3182.66, "end": 3187.94, "text": " So if it's just always an integer, then that's a monomorphic version of map or map to.", "tokens": [50364, 4713, 32702, 299, 3620, 867, 10854, 11, 1108, 32702, 299, 3620, 2167, 3909, 13, 50546, 50546, 407, 498, 309, 311, 445, 1009, 364, 24922, 11, 550, 300, 311, 257, 1108, 32702, 299, 3037, 295, 4471, 420, 4471, 281, 13, 50810, 50810, 400, 729, 393, 312, 2101, 906, 833, 1629, 9121, 13, 51018, 51018, 583, 294, 2674, 11, 562, 561, 366, 1417, 466, 721, 411, 2580, 1166, 11, 436, 11, 291, 914, 264, 51378, 51378, 6754, 76, 18191, 299, 3037, 13, 51458, 51458, 407, 577, 576, 291, 818, 264, 1108, 32702, 299, 3037, 550, 30, 51610, 51610, 509, 362, 281, 652, 472, 13, 51766, 51766], "temperature": 0.0, "avg_logprob": -0.14800628626121665, "compression_ratio": 1.7, "no_caption_prob": 2.392227361269761e-05}, {"id": 820, "seek": 317902, "start": 3187.94, "end": 3192.1, "text": " And those can be lawful under certain circumstances.", "tokens": [50364, 4713, 32702, 299, 3620, 867, 10854, 11, 1108, 32702, 299, 3620, 2167, 3909, 13, 50546, 50546, 407, 498, 309, 311, 445, 1009, 364, 24922, 11, 550, 300, 311, 257, 1108, 32702, 299, 3037, 295, 4471, 420, 4471, 281, 13, 50810, 50810, 400, 729, 393, 312, 2101, 906, 833, 1629, 9121, 13, 51018, 51018, 583, 294, 2674, 11, 562, 561, 366, 1417, 466, 721, 411, 2580, 1166, 11, 436, 11, 291, 914, 264, 51378, 51378, 6754, 76, 18191, 299, 3037, 13, 51458, 51458, 407, 577, 576, 291, 818, 264, 1108, 32702, 299, 3037, 550, 30, 51610, 51610, 509, 362, 281, 652, 472, 13, 51766, 51766], "temperature": 0.0, "avg_logprob": -0.14800628626121665, "compression_ratio": 1.7, "no_caption_prob": 2.392227361269761e-05}, {"id": 821, "seek": 317902, "start": 3192.1, "end": 3199.3, "text": " But in general, when people are talking about things like applicative, they, you mean the", "tokens": [50364, 4713, 32702, 299, 3620, 867, 10854, 11, 1108, 32702, 299, 3620, 2167, 3909, 13, 50546, 50546, 407, 498, 309, 311, 445, 1009, 364, 24922, 11, 550, 300, 311, 257, 1108, 32702, 299, 3037, 295, 4471, 420, 4471, 281, 13, 50810, 50810, 400, 729, 393, 312, 2101, 906, 833, 1629, 9121, 13, 51018, 51018, 583, 294, 2674, 11, 562, 561, 366, 1417, 466, 721, 411, 2580, 1166, 11, 436, 11, 291, 914, 264, 51378, 51378, 6754, 76, 18191, 299, 3037, 13, 51458, 51458, 407, 577, 576, 291, 818, 264, 1108, 32702, 299, 3037, 550, 30, 51610, 51610, 509, 362, 281, 652, 472, 13, 51766, 51766], "temperature": 0.0, "avg_logprob": -0.14800628626121665, "compression_ratio": 1.7, "no_caption_prob": 2.392227361269761e-05}, {"id": 822, "seek": 317902, "start": 3199.3, "end": 3200.9, "text": " polymorphic version.", "tokens": [50364, 4713, 32702, 299, 3620, 867, 10854, 11, 1108, 32702, 299, 3620, 2167, 3909, 13, 50546, 50546, 407, 498, 309, 311, 445, 1009, 364, 24922, 11, 550, 300, 311, 257, 1108, 32702, 299, 3037, 295, 4471, 420, 4471, 281, 13, 50810, 50810, 400, 729, 393, 312, 2101, 906, 833, 1629, 9121, 13, 51018, 51018, 583, 294, 2674, 11, 562, 561, 366, 1417, 466, 721, 411, 2580, 1166, 11, 436, 11, 291, 914, 264, 51378, 51378, 6754, 76, 18191, 299, 3037, 13, 51458, 51458, 407, 577, 576, 291, 818, 264, 1108, 32702, 299, 3037, 550, 30, 51610, 51610, 509, 362, 281, 652, 472, 13, 51766, 51766], "temperature": 0.0, "avg_logprob": -0.14800628626121665, "compression_ratio": 1.7, "no_caption_prob": 2.392227361269761e-05}, {"id": 823, "seek": 317902, "start": 3200.9, "end": 3203.94, "text": " So how would you call the monomorphic version then?", "tokens": [50364, 4713, 32702, 299, 3620, 867, 10854, 11, 1108, 32702, 299, 3620, 2167, 3909, 13, 50546, 50546, 407, 498, 309, 311, 445, 1009, 364, 24922, 11, 550, 300, 311, 257, 1108, 32702, 299, 3037, 295, 4471, 420, 4471, 281, 13, 50810, 50810, 400, 729, 393, 312, 2101, 906, 833, 1629, 9121, 13, 51018, 51018, 583, 294, 2674, 11, 562, 561, 366, 1417, 466, 721, 411, 2580, 1166, 11, 436, 11, 291, 914, 264, 51378, 51378, 6754, 76, 18191, 299, 3037, 13, 51458, 51458, 407, 577, 576, 291, 818, 264, 1108, 32702, 299, 3037, 550, 30, 51610, 51610, 509, 362, 281, 652, 472, 13, 51766, 51766], "temperature": 0.0, "avg_logprob": -0.14800628626121665, "compression_ratio": 1.7, "no_caption_prob": 2.392227361269761e-05}, {"id": 824, "seek": 317902, "start": 3203.94, "end": 3207.06, "text": " You have to make one.", "tokens": [50364, 4713, 32702, 299, 3620, 867, 10854, 11, 1108, 32702, 299, 3620, 2167, 3909, 13, 50546, 50546, 407, 498, 309, 311, 445, 1009, 364, 24922, 11, 550, 300, 311, 257, 1108, 32702, 299, 3037, 295, 4471, 420, 4471, 281, 13, 50810, 50810, 400, 729, 393, 312, 2101, 906, 833, 1629, 9121, 13, 51018, 51018, 583, 294, 2674, 11, 562, 561, 366, 1417, 466, 721, 411, 2580, 1166, 11, 436, 11, 291, 914, 264, 51378, 51378, 6754, 76, 18191, 299, 3037, 13, 51458, 51458, 407, 577, 576, 291, 818, 264, 1108, 32702, 299, 3037, 550, 30, 51610, 51610, 509, 362, 281, 652, 472, 13, 51766, 51766], "temperature": 0.0, "avg_logprob": -0.14800628626121665, "compression_ratio": 1.7, "no_caption_prob": 2.392227361269761e-05}, {"id": 825, "seek": 320706, "start": 3207.06, "end": 3215.1, "text": " We actually decided not to give it a name like map to and instead give it a domain specific", "tokens": [50364, 492, 767, 3047, 406, 281, 976, 309, 257, 1315, 411, 4471, 281, 293, 2602, 976, 309, 257, 9274, 2685, 50766, 50766, 1315, 13, 50816, 50816, 1018, 28160, 2835, 11, 337, 746, 257, 7241, 2010, 11, 291, 1062, 528, 281, 445, 1884, 512, 9274, 51050, 51050, 2685, 6828, 411, 909, 2831, 813, 746, 19577, 13, 51238, 51238, 286, 519, 689, 341, 1487, 493, 1310, 257, 707, 857, 544, 10374, 307, 498, 291, 362, 512, 42687, 51608, 51608, 2010, 300, 575, 257, 6798, 294, 309, 420, 1310, 309, 311, 754, 257, 2136, 420, 746, 293, 291, 584, 11, 1954, 11, 51806, 51806], "temperature": 0.0, "avg_logprob": -0.14908169765098422, "compression_ratio": 1.6892430278884463, "no_caption_prob": 5.771884389105253e-06}, {"id": 826, "seek": 320706, "start": 3215.1, "end": 3216.1, "text": " name.", "tokens": [50364, 492, 767, 3047, 406, 281, 976, 309, 257, 1315, 411, 4471, 281, 293, 2602, 976, 309, 257, 9274, 2685, 50766, 50766, 1315, 13, 50816, 50816, 1018, 28160, 2835, 11, 337, 746, 257, 7241, 2010, 11, 291, 1062, 528, 281, 445, 1884, 512, 9274, 51050, 51050, 2685, 6828, 411, 909, 2831, 813, 746, 19577, 13, 51238, 51238, 286, 519, 689, 341, 1487, 493, 1310, 257, 707, 857, 544, 10374, 307, 498, 291, 362, 512, 42687, 51608, 51608, 2010, 300, 575, 257, 6798, 294, 309, 420, 1310, 309, 311, 754, 257, 2136, 420, 746, 293, 291, 584, 11, 1954, 11, 51806, 51806], "temperature": 0.0, "avg_logprob": -0.14908169765098422, "compression_ratio": 1.6892430278884463, "no_caption_prob": 5.771884389105253e-06}, {"id": 827, "seek": 320706, "start": 3216.1, "end": 3220.7799999999997, "text": " As Dylan mentioned, for something a dollar type, you might want to just create some domain", "tokens": [50364, 492, 767, 3047, 406, 281, 976, 309, 257, 1315, 411, 4471, 281, 293, 2602, 976, 309, 257, 9274, 2685, 50766, 50766, 1315, 13, 50816, 50816, 1018, 28160, 2835, 11, 337, 746, 257, 7241, 2010, 11, 291, 1062, 528, 281, 445, 1884, 512, 9274, 51050, 51050, 2685, 6828, 411, 909, 2831, 813, 746, 19577, 13, 51238, 51238, 286, 519, 689, 341, 1487, 493, 1310, 257, 707, 857, 544, 10374, 307, 498, 291, 362, 512, 42687, 51608, 51608, 2010, 300, 575, 257, 6798, 294, 309, 420, 1310, 309, 311, 754, 257, 2136, 420, 746, 293, 291, 584, 11, 1954, 11, 51806, 51806], "temperature": 0.0, "avg_logprob": -0.14908169765098422, "compression_ratio": 1.6892430278884463, "no_caption_prob": 5.771884389105253e-06}, {"id": 828, "seek": 320706, "start": 3220.7799999999997, "end": 3224.54, "text": " specific functions like add rather than something generic.", "tokens": [50364, 492, 767, 3047, 406, 281, 976, 309, 257, 1315, 411, 4471, 281, 293, 2602, 976, 309, 257, 9274, 2685, 50766, 50766, 1315, 13, 50816, 50816, 1018, 28160, 2835, 11, 337, 746, 257, 7241, 2010, 11, 291, 1062, 528, 281, 445, 1884, 512, 9274, 51050, 51050, 2685, 6828, 411, 909, 2831, 813, 746, 19577, 13, 51238, 51238, 286, 519, 689, 341, 1487, 493, 1310, 257, 707, 857, 544, 10374, 307, 498, 291, 362, 512, 42687, 51608, 51608, 2010, 300, 575, 257, 6798, 294, 309, 420, 1310, 309, 311, 754, 257, 2136, 420, 746, 293, 291, 584, 11, 1954, 11, 51806, 51806], "temperature": 0.0, "avg_logprob": -0.14908169765098422, "compression_ratio": 1.6892430278884463, "no_caption_prob": 5.771884389105253e-06}, {"id": 829, "seek": 320706, "start": 3224.54, "end": 3231.94, "text": " I think where this comes up maybe a little bit more frequently is if you have some opaque", "tokens": [50364, 492, 767, 3047, 406, 281, 976, 309, 257, 1315, 411, 4471, 281, 293, 2602, 976, 309, 257, 9274, 2685, 50766, 50766, 1315, 13, 50816, 50816, 1018, 28160, 2835, 11, 337, 746, 257, 7241, 2010, 11, 291, 1062, 528, 281, 445, 1884, 512, 9274, 51050, 51050, 2685, 6828, 411, 909, 2831, 813, 746, 19577, 13, 51238, 51238, 286, 519, 689, 341, 1487, 493, 1310, 257, 707, 857, 544, 10374, 307, 498, 291, 362, 512, 42687, 51608, 51608, 2010, 300, 575, 257, 6798, 294, 309, 420, 1310, 309, 311, 754, 257, 2136, 420, 746, 293, 291, 584, 11, 1954, 11, 51806, 51806], "temperature": 0.0, "avg_logprob": -0.14908169765098422, "compression_ratio": 1.6892430278884463, "no_caption_prob": 5.771884389105253e-06}, {"id": 830, "seek": 320706, "start": 3231.94, "end": 3235.9, "text": " type that has a string in it or maybe it's even a record or something and you say, oh,", "tokens": [50364, 492, 767, 3047, 406, 281, 976, 309, 257, 1315, 411, 4471, 281, 293, 2602, 976, 309, 257, 9274, 2685, 50766, 50766, 1315, 13, 50816, 50816, 1018, 28160, 2835, 11, 337, 746, 257, 7241, 2010, 11, 291, 1062, 528, 281, 445, 1884, 512, 9274, 51050, 51050, 2685, 6828, 411, 909, 2831, 813, 746, 19577, 13, 51238, 51238, 286, 519, 689, 341, 1487, 493, 1310, 257, 707, 857, 544, 10374, 307, 498, 291, 362, 512, 42687, 51608, 51608, 2010, 300, 575, 257, 6798, 294, 309, 420, 1310, 309, 311, 754, 257, 2136, 420, 746, 293, 291, 584, 11, 1954, 11, 51806, 51806], "temperature": 0.0, "avg_logprob": -0.14908169765098422, "compression_ratio": 1.6892430278884463, "no_caption_prob": 5.771884389105253e-06}, {"id": 831, "seek": 323590, "start": 3235.9, "end": 3241.1800000000003, "text": " I want to map over this user's name, but you can't reach into the name directly.", "tokens": [50364, 286, 528, 281, 4471, 670, 341, 4195, 311, 1315, 11, 457, 291, 393, 380, 2524, 666, 264, 1315, 3838, 13, 50628, 50628, 509, 362, 281, 11, 570, 309, 311, 42687, 11, 370, 291, 362, 281, 362, 512, 1333, 295, 2445, 300, 775, 300, 50870, 50870, 337, 291, 13, 50920, 50920, 400, 291, 1062, 312, 29941, 281, 818, 309, 4471, 420, 4471, 1315, 420, 746, 411, 300, 13, 51142, 51142, 583, 570, 309, 307, 544, 1108, 32702, 299, 293, 309, 1177, 380, 534, 589, 294, 264, 912, 636, 11, 286, 1352, 51476, 51476, 309, 311, 4420, 281, 445, 352, 439, 294, 322, 264, 9274, 2685, 1558, 293, 445, 976, 309, 257, 1315, 300, 51698, 51698, 15626, 437, 309, 775, 13, 51760, 51760], "temperature": 0.0, "avg_logprob": -0.07840013891700806, "compression_ratio": 1.7328244274809161, "no_caption_prob": 5.173869340069359e-06}, {"id": 832, "seek": 323590, "start": 3241.1800000000003, "end": 3246.02, "text": " You have to, because it's opaque, so you have to have some sort of function that does that", "tokens": [50364, 286, 528, 281, 4471, 670, 341, 4195, 311, 1315, 11, 457, 291, 393, 380, 2524, 666, 264, 1315, 3838, 13, 50628, 50628, 509, 362, 281, 11, 570, 309, 311, 42687, 11, 370, 291, 362, 281, 362, 512, 1333, 295, 2445, 300, 775, 300, 50870, 50870, 337, 291, 13, 50920, 50920, 400, 291, 1062, 312, 29941, 281, 818, 309, 4471, 420, 4471, 1315, 420, 746, 411, 300, 13, 51142, 51142, 583, 570, 309, 307, 544, 1108, 32702, 299, 293, 309, 1177, 380, 534, 589, 294, 264, 912, 636, 11, 286, 1352, 51476, 51476, 309, 311, 4420, 281, 445, 352, 439, 294, 322, 264, 9274, 2685, 1558, 293, 445, 976, 309, 257, 1315, 300, 51698, 51698, 15626, 437, 309, 775, 13, 51760, 51760], "temperature": 0.0, "avg_logprob": -0.07840013891700806, "compression_ratio": 1.7328244274809161, "no_caption_prob": 5.173869340069359e-06}, {"id": 833, "seek": 323590, "start": 3246.02, "end": 3247.02, "text": " for you.", "tokens": [50364, 286, 528, 281, 4471, 670, 341, 4195, 311, 1315, 11, 457, 291, 393, 380, 2524, 666, 264, 1315, 3838, 13, 50628, 50628, 509, 362, 281, 11, 570, 309, 311, 42687, 11, 370, 291, 362, 281, 362, 512, 1333, 295, 2445, 300, 775, 300, 50870, 50870, 337, 291, 13, 50920, 50920, 400, 291, 1062, 312, 29941, 281, 818, 309, 4471, 420, 4471, 1315, 420, 746, 411, 300, 13, 51142, 51142, 583, 570, 309, 307, 544, 1108, 32702, 299, 293, 309, 1177, 380, 534, 589, 294, 264, 912, 636, 11, 286, 1352, 51476, 51476, 309, 311, 4420, 281, 445, 352, 439, 294, 322, 264, 9274, 2685, 1558, 293, 445, 976, 309, 257, 1315, 300, 51698, 51698, 15626, 437, 309, 775, 13, 51760, 51760], "temperature": 0.0, "avg_logprob": -0.07840013891700806, "compression_ratio": 1.7328244274809161, "no_caption_prob": 5.173869340069359e-06}, {"id": 834, "seek": 323590, "start": 3247.02, "end": 3251.46, "text": " And you might be tempted to call it map or map name or something like that.", "tokens": [50364, 286, 528, 281, 4471, 670, 341, 4195, 311, 1315, 11, 457, 291, 393, 380, 2524, 666, 264, 1315, 3838, 13, 50628, 50628, 509, 362, 281, 11, 570, 309, 311, 42687, 11, 370, 291, 362, 281, 362, 512, 1333, 295, 2445, 300, 775, 300, 50870, 50870, 337, 291, 13, 50920, 50920, 400, 291, 1062, 312, 29941, 281, 818, 309, 4471, 420, 4471, 1315, 420, 746, 411, 300, 13, 51142, 51142, 583, 570, 309, 307, 544, 1108, 32702, 299, 293, 309, 1177, 380, 534, 589, 294, 264, 912, 636, 11, 286, 1352, 51476, 51476, 309, 311, 4420, 281, 445, 352, 439, 294, 322, 264, 9274, 2685, 1558, 293, 445, 976, 309, 257, 1315, 300, 51698, 51698, 15626, 437, 309, 775, 13, 51760, 51760], "temperature": 0.0, "avg_logprob": -0.07840013891700806, "compression_ratio": 1.7328244274809161, "no_caption_prob": 5.173869340069359e-06}, {"id": 835, "seek": 323590, "start": 3251.46, "end": 3258.14, "text": " But because it is more monomorphic and it doesn't really work in the same way, I found", "tokens": [50364, 286, 528, 281, 4471, 670, 341, 4195, 311, 1315, 11, 457, 291, 393, 380, 2524, 666, 264, 1315, 3838, 13, 50628, 50628, 509, 362, 281, 11, 570, 309, 311, 42687, 11, 370, 291, 362, 281, 362, 512, 1333, 295, 2445, 300, 775, 300, 50870, 50870, 337, 291, 13, 50920, 50920, 400, 291, 1062, 312, 29941, 281, 818, 309, 4471, 420, 4471, 1315, 420, 746, 411, 300, 13, 51142, 51142, 583, 570, 309, 307, 544, 1108, 32702, 299, 293, 309, 1177, 380, 534, 589, 294, 264, 912, 636, 11, 286, 1352, 51476, 51476, 309, 311, 4420, 281, 445, 352, 439, 294, 322, 264, 9274, 2685, 1558, 293, 445, 976, 309, 257, 1315, 300, 51698, 51698, 15626, 437, 309, 775, 13, 51760, 51760], "temperature": 0.0, "avg_logprob": -0.07840013891700806, "compression_ratio": 1.7328244274809161, "no_caption_prob": 5.173869340069359e-06}, {"id": 836, "seek": 323590, "start": 3258.14, "end": 3262.58, "text": " it's useful to just go all in on the domain specific idea and just give it a name that", "tokens": [50364, 286, 528, 281, 4471, 670, 341, 4195, 311, 1315, 11, 457, 291, 393, 380, 2524, 666, 264, 1315, 3838, 13, 50628, 50628, 509, 362, 281, 11, 570, 309, 311, 42687, 11, 370, 291, 362, 281, 362, 512, 1333, 295, 2445, 300, 775, 300, 50870, 50870, 337, 291, 13, 50920, 50920, 400, 291, 1062, 312, 29941, 281, 818, 309, 4471, 420, 4471, 1315, 420, 746, 411, 300, 13, 51142, 51142, 583, 570, 309, 307, 544, 1108, 32702, 299, 293, 309, 1177, 380, 534, 589, 294, 264, 912, 636, 11, 286, 1352, 51476, 51476, 309, 311, 4420, 281, 445, 352, 439, 294, 322, 264, 9274, 2685, 1558, 293, 445, 976, 309, 257, 1315, 300, 51698, 51698, 15626, 437, 309, 775, 13, 51760, 51760], "temperature": 0.0, "avg_logprob": -0.07840013891700806, "compression_ratio": 1.7328244274809161, "no_caption_prob": 5.173869340069359e-06}, {"id": 837, "seek": 323590, "start": 3262.58, "end": 3263.82, "text": " describes what it does.", "tokens": [50364, 286, 528, 281, 4471, 670, 341, 4195, 311, 1315, 11, 457, 291, 393, 380, 2524, 666, 264, 1315, 3838, 13, 50628, 50628, 509, 362, 281, 11, 570, 309, 311, 42687, 11, 370, 291, 362, 281, 362, 512, 1333, 295, 2445, 300, 775, 300, 50870, 50870, 337, 291, 13, 50920, 50920, 400, 291, 1062, 312, 29941, 281, 818, 309, 4471, 420, 4471, 1315, 420, 746, 411, 300, 13, 51142, 51142, 583, 570, 309, 307, 544, 1108, 32702, 299, 293, 309, 1177, 380, 534, 589, 294, 264, 912, 636, 11, 286, 1352, 51476, 51476, 309, 311, 4420, 281, 445, 352, 439, 294, 322, 264, 9274, 2685, 1558, 293, 445, 976, 309, 257, 1315, 300, 51698, 51698, 15626, 437, 309, 775, 13, 51760, 51760], "temperature": 0.0, "avg_logprob": -0.07840013891700806, "compression_ratio": 1.7328244274809161, "no_caption_prob": 5.173869340069359e-06}, {"id": 838, "seek": 326382, "start": 3263.82, "end": 3268.82, "text": " So call it update name and that better describes what it's going to do and doesn't confuse", "tokens": [50364, 407, 818, 309, 5623, 1315, 293, 300, 1101, 15626, 437, 309, 311, 516, 281, 360, 293, 1177, 380, 28584, 50614, 50614, 561, 365, 257, 544, 2674, 3410, 295, 18350, 13, 50726, 50726, 407, 309, 311, 257, 1101, 1752, 337, 264, 5022, 295, 428, 3089, 11, 1391, 445, 3571, 281, 1401, 50902, 50902, 309, 294, 2674, 13, 50954, 50954, 286, 519, 472, 11183, 281, 341, 307, 767, 294, 264, 2699, 76, 4965, 6405, 293, 300, 307, 6798, 13, 24223, 51362, 51362, 570, 2699, 76, 4045, 291, 281, 4471, 670, 13985, 13, 51528, 51528, 814, 500, 380, 362, 257, 4471, 281, 11, 457, 456, 307, 257, 6798, 4471, 293, 309, 307, 1108, 32702, 299, 570, 562, 291, 51798, 51798], "temperature": 0.0, "avg_logprob": -0.10358918614748146, "compression_ratio": 1.6824817518248176, "no_caption_prob": 1.2679228120759944e-06}, {"id": 839, "seek": 326382, "start": 3268.82, "end": 3271.06, "text": " people with a more general concept of mapping.", "tokens": [50364, 407, 818, 309, 5623, 1315, 293, 300, 1101, 15626, 437, 309, 311, 516, 281, 360, 293, 1177, 380, 28584, 50614, 50614, 561, 365, 257, 544, 2674, 3410, 295, 18350, 13, 50726, 50726, 407, 309, 311, 257, 1101, 1752, 337, 264, 5022, 295, 428, 3089, 11, 1391, 445, 3571, 281, 1401, 50902, 50902, 309, 294, 2674, 13, 50954, 50954, 286, 519, 472, 11183, 281, 341, 307, 767, 294, 264, 2699, 76, 4965, 6405, 293, 300, 307, 6798, 13, 24223, 51362, 51362, 570, 2699, 76, 4045, 291, 281, 4471, 670, 13985, 13, 51528, 51528, 814, 500, 380, 362, 257, 4471, 281, 11, 457, 456, 307, 257, 6798, 4471, 293, 309, 307, 1108, 32702, 299, 570, 562, 291, 51798, 51798], "temperature": 0.0, "avg_logprob": -0.10358918614748146, "compression_ratio": 1.6824817518248176, "no_caption_prob": 1.2679228120759944e-06}, {"id": 840, "seek": 326382, "start": 3271.06, "end": 3274.5800000000004, "text": " So it's a better experience for the users of your code, probably just easier to read", "tokens": [50364, 407, 818, 309, 5623, 1315, 293, 300, 1101, 15626, 437, 309, 311, 516, 281, 360, 293, 1177, 380, 28584, 50614, 50614, 561, 365, 257, 544, 2674, 3410, 295, 18350, 13, 50726, 50726, 407, 309, 311, 257, 1101, 1752, 337, 264, 5022, 295, 428, 3089, 11, 1391, 445, 3571, 281, 1401, 50902, 50902, 309, 294, 2674, 13, 50954, 50954, 286, 519, 472, 11183, 281, 341, 307, 767, 294, 264, 2699, 76, 4965, 6405, 293, 300, 307, 6798, 13, 24223, 51362, 51362, 570, 2699, 76, 4045, 291, 281, 4471, 670, 13985, 13, 51528, 51528, 814, 500, 380, 362, 257, 4471, 281, 11, 457, 456, 307, 257, 6798, 4471, 293, 309, 307, 1108, 32702, 299, 570, 562, 291, 51798, 51798], "temperature": 0.0, "avg_logprob": -0.10358918614748146, "compression_ratio": 1.6824817518248176, "no_caption_prob": 1.2679228120759944e-06}, {"id": 841, "seek": 326382, "start": 3274.5800000000004, "end": 3275.6200000000003, "text": " it in general.", "tokens": [50364, 407, 818, 309, 5623, 1315, 293, 300, 1101, 15626, 437, 309, 311, 516, 281, 360, 293, 1177, 380, 28584, 50614, 50614, 561, 365, 257, 544, 2674, 3410, 295, 18350, 13, 50726, 50726, 407, 309, 311, 257, 1101, 1752, 337, 264, 5022, 295, 428, 3089, 11, 1391, 445, 3571, 281, 1401, 50902, 50902, 309, 294, 2674, 13, 50954, 50954, 286, 519, 472, 11183, 281, 341, 307, 767, 294, 264, 2699, 76, 4965, 6405, 293, 300, 307, 6798, 13, 24223, 51362, 51362, 570, 2699, 76, 4045, 291, 281, 4471, 670, 13985, 13, 51528, 51528, 814, 500, 380, 362, 257, 4471, 281, 11, 457, 456, 307, 257, 6798, 4471, 293, 309, 307, 1108, 32702, 299, 570, 562, 291, 51798, 51798], "temperature": 0.0, "avg_logprob": -0.10358918614748146, "compression_ratio": 1.6824817518248176, "no_caption_prob": 1.2679228120759944e-06}, {"id": 842, "seek": 326382, "start": 3275.6200000000003, "end": 3283.78, "text": " I think one exception to this is actually in the Elm core library and that is string.map", "tokens": [50364, 407, 818, 309, 5623, 1315, 293, 300, 1101, 15626, 437, 309, 311, 516, 281, 360, 293, 1177, 380, 28584, 50614, 50614, 561, 365, 257, 544, 2674, 3410, 295, 18350, 13, 50726, 50726, 407, 309, 311, 257, 1101, 1752, 337, 264, 5022, 295, 428, 3089, 11, 1391, 445, 3571, 281, 1401, 50902, 50902, 309, 294, 2674, 13, 50954, 50954, 286, 519, 472, 11183, 281, 341, 307, 767, 294, 264, 2699, 76, 4965, 6405, 293, 300, 307, 6798, 13, 24223, 51362, 51362, 570, 2699, 76, 4045, 291, 281, 4471, 670, 13985, 13, 51528, 51528, 814, 500, 380, 362, 257, 4471, 281, 11, 457, 456, 307, 257, 6798, 4471, 293, 309, 307, 1108, 32702, 299, 570, 562, 291, 51798, 51798], "temperature": 0.0, "avg_logprob": -0.10358918614748146, "compression_ratio": 1.6824817518248176, "no_caption_prob": 1.2679228120759944e-06}, {"id": 843, "seek": 326382, "start": 3283.78, "end": 3287.1000000000004, "text": " because Elm allows you to map over strings.", "tokens": [50364, 407, 818, 309, 5623, 1315, 293, 300, 1101, 15626, 437, 309, 311, 516, 281, 360, 293, 1177, 380, 28584, 50614, 50614, 561, 365, 257, 544, 2674, 3410, 295, 18350, 13, 50726, 50726, 407, 309, 311, 257, 1101, 1752, 337, 264, 5022, 295, 428, 3089, 11, 1391, 445, 3571, 281, 1401, 50902, 50902, 309, 294, 2674, 13, 50954, 50954, 286, 519, 472, 11183, 281, 341, 307, 767, 294, 264, 2699, 76, 4965, 6405, 293, 300, 307, 6798, 13, 24223, 51362, 51362, 570, 2699, 76, 4045, 291, 281, 4471, 670, 13985, 13, 51528, 51528, 814, 500, 380, 362, 257, 4471, 281, 11, 457, 456, 307, 257, 6798, 4471, 293, 309, 307, 1108, 32702, 299, 570, 562, 291, 51798, 51798], "temperature": 0.0, "avg_logprob": -0.10358918614748146, "compression_ratio": 1.6824817518248176, "no_caption_prob": 1.2679228120759944e-06}, {"id": 844, "seek": 326382, "start": 3287.1000000000004, "end": 3292.5, "text": " They don't have a map to, but there is a string map and it is monomorphic because when you", "tokens": [50364, 407, 818, 309, 5623, 1315, 293, 300, 1101, 15626, 437, 309, 311, 516, 281, 360, 293, 1177, 380, 28584, 50614, 50614, 561, 365, 257, 544, 2674, 3410, 295, 18350, 13, 50726, 50726, 407, 309, 311, 257, 1101, 1752, 337, 264, 5022, 295, 428, 3089, 11, 1391, 445, 3571, 281, 1401, 50902, 50902, 309, 294, 2674, 13, 50954, 50954, 286, 519, 472, 11183, 281, 341, 307, 767, 294, 264, 2699, 76, 4965, 6405, 293, 300, 307, 6798, 13, 24223, 51362, 51362, 570, 2699, 76, 4045, 291, 281, 4471, 670, 13985, 13, 51528, 51528, 814, 500, 380, 362, 257, 4471, 281, 11, 457, 456, 307, 257, 6798, 4471, 293, 309, 307, 1108, 32702, 299, 570, 562, 291, 51798, 51798], "temperature": 0.0, "avg_logprob": -0.10358918614748146, "compression_ratio": 1.6824817518248176, "no_caption_prob": 1.2679228120759944e-06}, {"id": 845, "seek": 329250, "start": 3292.5, "end": 3296.18, "text": " map the function you pass in has to be character to character.", "tokens": [50364, 4471, 264, 2445, 291, 1320, 294, 575, 281, 312, 2517, 281, 2517, 13, 50548, 50548, 2205, 48770, 13, 50598, 50598, 583, 286, 519, 561, 366, 370, 1143, 281, 18350, 382, 341, 1558, 295, 23149, 278, 257, 5765, 293, 50858, 50858, 27210, 264, 4190, 2051, 264, 636, 300, 300, 472, 1391, 1177, 380, 28584, 561, 13, 51122, 51122, 3432, 1391, 754, 445, 764, 309, 293, 312, 411, 11, 1954, 11, 295, 1164, 309, 311, 2517, 281, 2517, 51261, 51261, 293, 1128, 1194, 295, 411, 11, 1954, 11, 437, 498, 286, 1415, 281, 360, 2517, 281, 560, 30, 51472, 51472, 1545, 1177, 380, 300, 589, 30, 51531, 51531, 407, 291, 815, 362, 1143, 6798, 13, 24223, 293, 1128, 5334, 309, 390, 819, 490, 439, 264, 661, 51712, 51712], "temperature": 0.0, "avg_logprob": -0.12348467856645584, "compression_ratio": 1.7731958762886597, "no_caption_prob": 3.1692732591181993e-05}, {"id": 846, "seek": 329250, "start": 3296.18, "end": 3297.18, "text": " Good trivia.", "tokens": [50364, 4471, 264, 2445, 291, 1320, 294, 575, 281, 312, 2517, 281, 2517, 13, 50548, 50548, 2205, 48770, 13, 50598, 50598, 583, 286, 519, 561, 366, 370, 1143, 281, 18350, 382, 341, 1558, 295, 23149, 278, 257, 5765, 293, 50858, 50858, 27210, 264, 4190, 2051, 264, 636, 300, 300, 472, 1391, 1177, 380, 28584, 561, 13, 51122, 51122, 3432, 1391, 754, 445, 764, 309, 293, 312, 411, 11, 1954, 11, 295, 1164, 309, 311, 2517, 281, 2517, 51261, 51261, 293, 1128, 1194, 295, 411, 11, 1954, 11, 437, 498, 286, 1415, 281, 360, 2517, 281, 560, 30, 51472, 51472, 1545, 1177, 380, 300, 589, 30, 51531, 51531, 407, 291, 815, 362, 1143, 6798, 13, 24223, 293, 1128, 5334, 309, 390, 819, 490, 439, 264, 661, 51712, 51712], "temperature": 0.0, "avg_logprob": -0.12348467856645584, "compression_ratio": 1.7731958762886597, "no_caption_prob": 3.1692732591181993e-05}, {"id": 847, "seek": 329250, "start": 3297.18, "end": 3302.38, "text": " But I think people are so used to mapping as this idea of traversing a collection and", "tokens": [50364, 4471, 264, 2445, 291, 1320, 294, 575, 281, 312, 2517, 281, 2517, 13, 50548, 50548, 2205, 48770, 13, 50598, 50598, 583, 286, 519, 561, 366, 370, 1143, 281, 18350, 382, 341, 1558, 295, 23149, 278, 257, 5765, 293, 50858, 50858, 27210, 264, 4190, 2051, 264, 636, 300, 300, 472, 1391, 1177, 380, 28584, 561, 13, 51122, 51122, 3432, 1391, 754, 445, 764, 309, 293, 312, 411, 11, 1954, 11, 295, 1164, 309, 311, 2517, 281, 2517, 51261, 51261, 293, 1128, 1194, 295, 411, 11, 1954, 11, 437, 498, 286, 1415, 281, 360, 2517, 281, 560, 30, 51472, 51472, 1545, 1177, 380, 300, 589, 30, 51531, 51531, 407, 291, 815, 362, 1143, 6798, 13, 24223, 293, 1128, 5334, 309, 390, 819, 490, 439, 264, 661, 51712, 51712], "temperature": 0.0, "avg_logprob": -0.12348467856645584, "compression_ratio": 1.7731958762886597, "no_caption_prob": 3.1692732591181993e-05}, {"id": 848, "seek": 329250, "start": 3302.38, "end": 3307.66, "text": " transforming the values along the way that that one probably doesn't confuse people.", "tokens": [50364, 4471, 264, 2445, 291, 1320, 294, 575, 281, 312, 2517, 281, 2517, 13, 50548, 50548, 2205, 48770, 13, 50598, 50598, 583, 286, 519, 561, 366, 370, 1143, 281, 18350, 382, 341, 1558, 295, 23149, 278, 257, 5765, 293, 50858, 50858, 27210, 264, 4190, 2051, 264, 636, 300, 300, 472, 1391, 1177, 380, 28584, 561, 13, 51122, 51122, 3432, 1391, 754, 445, 764, 309, 293, 312, 411, 11, 1954, 11, 295, 1164, 309, 311, 2517, 281, 2517, 51261, 51261, 293, 1128, 1194, 295, 411, 11, 1954, 11, 437, 498, 286, 1415, 281, 360, 2517, 281, 560, 30, 51472, 51472, 1545, 1177, 380, 300, 589, 30, 51531, 51531, 407, 291, 815, 362, 1143, 6798, 13, 24223, 293, 1128, 5334, 309, 390, 819, 490, 439, 264, 661, 51712, 51712], "temperature": 0.0, "avg_logprob": -0.12348467856645584, "compression_ratio": 1.7731958762886597, "no_caption_prob": 3.1692732591181993e-05}, {"id": 849, "seek": 329250, "start": 3307.66, "end": 3310.44, "text": " People probably even just use it and be like, oh, of course it's character to character", "tokens": [50364, 4471, 264, 2445, 291, 1320, 294, 575, 281, 312, 2517, 281, 2517, 13, 50548, 50548, 2205, 48770, 13, 50598, 50598, 583, 286, 519, 561, 366, 370, 1143, 281, 18350, 382, 341, 1558, 295, 23149, 278, 257, 5765, 293, 50858, 50858, 27210, 264, 4190, 2051, 264, 636, 300, 300, 472, 1391, 1177, 380, 28584, 561, 13, 51122, 51122, 3432, 1391, 754, 445, 764, 309, 293, 312, 411, 11, 1954, 11, 295, 1164, 309, 311, 2517, 281, 2517, 51261, 51261, 293, 1128, 1194, 295, 411, 11, 1954, 11, 437, 498, 286, 1415, 281, 360, 2517, 281, 560, 30, 51472, 51472, 1545, 1177, 380, 300, 589, 30, 51531, 51531, 407, 291, 815, 362, 1143, 6798, 13, 24223, 293, 1128, 5334, 309, 390, 819, 490, 439, 264, 661, 51712, 51712], "temperature": 0.0, "avg_logprob": -0.12348467856645584, "compression_ratio": 1.7731958762886597, "no_caption_prob": 3.1692732591181993e-05}, {"id": 850, "seek": 329250, "start": 3310.44, "end": 3314.66, "text": " and never thought of like, oh, what if I wanted to do character to int?", "tokens": [50364, 4471, 264, 2445, 291, 1320, 294, 575, 281, 312, 2517, 281, 2517, 13, 50548, 50548, 2205, 48770, 13, 50598, 50598, 583, 286, 519, 561, 366, 370, 1143, 281, 18350, 382, 341, 1558, 295, 23149, 278, 257, 5765, 293, 50858, 50858, 27210, 264, 4190, 2051, 264, 636, 300, 300, 472, 1391, 1177, 380, 28584, 561, 13, 51122, 51122, 3432, 1391, 754, 445, 764, 309, 293, 312, 411, 11, 1954, 11, 295, 1164, 309, 311, 2517, 281, 2517, 51261, 51261, 293, 1128, 1194, 295, 411, 11, 1954, 11, 437, 498, 286, 1415, 281, 360, 2517, 281, 560, 30, 51472, 51472, 1545, 1177, 380, 300, 589, 30, 51531, 51531, 407, 291, 815, 362, 1143, 6798, 13, 24223, 293, 1128, 5334, 309, 390, 819, 490, 439, 264, 661, 51712, 51712], "temperature": 0.0, "avg_logprob": -0.12348467856645584, "compression_ratio": 1.7731958762886597, "no_caption_prob": 3.1692732591181993e-05}, {"id": 851, "seek": 329250, "start": 3314.66, "end": 3315.84, "text": " Why doesn't that work?", "tokens": [50364, 4471, 264, 2445, 291, 1320, 294, 575, 281, 312, 2517, 281, 2517, 13, 50548, 50548, 2205, 48770, 13, 50598, 50598, 583, 286, 519, 561, 366, 370, 1143, 281, 18350, 382, 341, 1558, 295, 23149, 278, 257, 5765, 293, 50858, 50858, 27210, 264, 4190, 2051, 264, 636, 300, 300, 472, 1391, 1177, 380, 28584, 561, 13, 51122, 51122, 3432, 1391, 754, 445, 764, 309, 293, 312, 411, 11, 1954, 11, 295, 1164, 309, 311, 2517, 281, 2517, 51261, 51261, 293, 1128, 1194, 295, 411, 11, 1954, 11, 437, 498, 286, 1415, 281, 360, 2517, 281, 560, 30, 51472, 51472, 1545, 1177, 380, 300, 589, 30, 51531, 51531, 407, 291, 815, 362, 1143, 6798, 13, 24223, 293, 1128, 5334, 309, 390, 819, 490, 439, 264, 661, 51712, 51712], "temperature": 0.0, "avg_logprob": -0.12348467856645584, "compression_ratio": 1.7731958762886597, "no_caption_prob": 3.1692732591181993e-05}, {"id": 852, "seek": 329250, "start": 3315.84, "end": 3319.46, "text": " So you may have used string.map and never realized it was different from all the other", "tokens": [50364, 4471, 264, 2445, 291, 1320, 294, 575, 281, 312, 2517, 281, 2517, 13, 50548, 50548, 2205, 48770, 13, 50598, 50598, 583, 286, 519, 561, 366, 370, 1143, 281, 18350, 382, 341, 1558, 295, 23149, 278, 257, 5765, 293, 50858, 50858, 27210, 264, 4190, 2051, 264, 636, 300, 300, 472, 1391, 1177, 380, 28584, 561, 13, 51122, 51122, 3432, 1391, 754, 445, 764, 309, 293, 312, 411, 11, 1954, 11, 295, 1164, 309, 311, 2517, 281, 2517, 51261, 51261, 293, 1128, 1194, 295, 411, 11, 1954, 11, 437, 498, 286, 1415, 281, 360, 2517, 281, 560, 30, 51472, 51472, 1545, 1177, 380, 300, 589, 30, 51531, 51531, 407, 291, 815, 362, 1143, 6798, 13, 24223, 293, 1128, 5334, 309, 390, 819, 490, 439, 264, 661, 51712, 51712], "temperature": 0.0, "avg_logprob": -0.12348467856645584, "compression_ratio": 1.7731958762886597, "no_caption_prob": 3.1692732591181993e-05}, {"id": 853, "seek": 331946, "start": 3319.46, "end": 3322.82, "text": " maps in the Elm world.", "tokens": [50364, 11317, 294, 264, 2699, 76, 1002, 13, 50532, 50532, 407, 472, 661, 5102, 286, 5694, 14989, 562, 286, 478, 6260, 365, 2390, 493, 40168, 295, 50882, 50882, 721, 11, 286, 914, 11, 309, 2314, 439, 264, 565, 13, 50944, 50944, 467, 311, 406, 4725, 445, 411, 2390, 257, 31828, 979, 19866, 420, 257, 4974, 1230, 19265, 13, 51206, 51206, 286, 478, 2049, 884, 613, 40168, 293, 2171, 456, 366, 613, 40168, 689, 2831, 813, 51510, 51510, 445, 6260, 365, 472, 2685, 551, 11, 293, 321, 2825, 466, 341, 1558, 295, 6260, 365, 51792, 51792], "temperature": 0.0, "avg_logprob": -0.1346155802408854, "compression_ratio": 1.6970954356846473, "no_caption_prob": 3.0415635592362378e-06}, {"id": 854, "seek": 331946, "start": 3322.82, "end": 3329.82, "text": " So one other pattern I noticed emerging when I'm dealing with building up pipelines of", "tokens": [50364, 11317, 294, 264, 2699, 76, 1002, 13, 50532, 50532, 407, 472, 661, 5102, 286, 5694, 14989, 562, 286, 478, 6260, 365, 2390, 493, 40168, 295, 50882, 50882, 721, 11, 286, 914, 11, 309, 2314, 439, 264, 565, 13, 50944, 50944, 467, 311, 406, 4725, 445, 411, 2390, 257, 31828, 979, 19866, 420, 257, 4974, 1230, 19265, 13, 51206, 51206, 286, 478, 2049, 884, 613, 40168, 293, 2171, 456, 366, 613, 40168, 689, 2831, 813, 51510, 51510, 445, 6260, 365, 472, 2685, 551, 11, 293, 321, 2825, 466, 341, 1558, 295, 6260, 365, 51792, 51792], "temperature": 0.0, "avg_logprob": -0.1346155802408854, "compression_ratio": 1.6970954356846473, "no_caption_prob": 3.0415635592362378e-06}, {"id": 855, "seek": 331946, "start": 3329.82, "end": 3331.06, "text": " things, I mean, it happens all the time.", "tokens": [50364, 11317, 294, 264, 2699, 76, 1002, 13, 50532, 50532, 407, 472, 661, 5102, 286, 5694, 14989, 562, 286, 478, 6260, 365, 2390, 493, 40168, 295, 50882, 50882, 721, 11, 286, 914, 11, 309, 2314, 439, 264, 565, 13, 50944, 50944, 467, 311, 406, 4725, 445, 411, 2390, 257, 31828, 979, 19866, 420, 257, 4974, 1230, 19265, 13, 51206, 51206, 286, 478, 2049, 884, 613, 40168, 293, 2171, 456, 366, 613, 40168, 689, 2831, 813, 51510, 51510, 445, 6260, 365, 472, 2685, 551, 11, 293, 321, 2825, 466, 341, 1558, 295, 6260, 365, 51792, 51792], "temperature": 0.0, "avg_logprob": -0.1346155802408854, "compression_ratio": 1.6970954356846473, "no_caption_prob": 3.0415635592362378e-06}, {"id": 856, "seek": 331946, "start": 3331.06, "end": 3336.3, "text": " It's not necessarily just like building a JSON decoder or a random number generator.", "tokens": [50364, 11317, 294, 264, 2699, 76, 1002, 13, 50532, 50532, 407, 472, 661, 5102, 286, 5694, 14989, 562, 286, 478, 6260, 365, 2390, 493, 40168, 295, 50882, 50882, 721, 11, 286, 914, 11, 309, 2314, 439, 264, 565, 13, 50944, 50944, 467, 311, 406, 4725, 445, 411, 2390, 257, 31828, 979, 19866, 420, 257, 4974, 1230, 19265, 13, 51206, 51206, 286, 478, 2049, 884, 613, 40168, 293, 2171, 456, 366, 613, 40168, 689, 2831, 813, 51510, 51510, 445, 6260, 365, 472, 2685, 551, 11, 293, 321, 2825, 466, 341, 1558, 295, 6260, 365, 51792, 51792], "temperature": 0.0, "avg_logprob": -0.1346155802408854, "compression_ratio": 1.6970954356846473, "no_caption_prob": 3.0415635592362378e-06}, {"id": 857, "seek": 331946, "start": 3336.3, "end": 3342.38, "text": " I'm often doing these pipelines and sometimes there are these pipelines where rather than", "tokens": [50364, 11317, 294, 264, 2699, 76, 1002, 13, 50532, 50532, 407, 472, 661, 5102, 286, 5694, 14989, 562, 286, 478, 6260, 365, 2390, 493, 40168, 295, 50882, 50882, 721, 11, 286, 914, 11, 309, 2314, 439, 264, 565, 13, 50944, 50944, 467, 311, 406, 4725, 445, 411, 2390, 257, 31828, 979, 19866, 420, 257, 4974, 1230, 19265, 13, 51206, 51206, 286, 478, 2049, 884, 613, 40168, 293, 2171, 456, 366, 613, 40168, 689, 2831, 813, 51510, 51510, 445, 6260, 365, 472, 2685, 551, 11, 293, 321, 2825, 466, 341, 1558, 295, 6260, 365, 51792, 51792], "temperature": 0.0, "avg_logprob": -0.1346155802408854, "compression_ratio": 1.6970954356846473, "no_caption_prob": 3.0415635592362378e-06}, {"id": 858, "seek": 331946, "start": 3342.38, "end": 3348.02, "text": " just dealing with one specific thing, and we talked about this idea of dealing with", "tokens": [50364, 11317, 294, 264, 2699, 76, 1002, 13, 50532, 50532, 407, 472, 661, 5102, 286, 5694, 14989, 562, 286, 478, 6260, 365, 2390, 493, 40168, 295, 50882, 50882, 721, 11, 286, 914, 11, 309, 2314, 439, 264, 565, 13, 50944, 50944, 467, 311, 406, 4725, 445, 411, 2390, 257, 31828, 979, 19866, 420, 257, 4974, 1230, 19265, 13, 51206, 51206, 286, 478, 2049, 884, 613, 40168, 293, 2171, 456, 366, 613, 40168, 689, 2831, 813, 51510, 51510, 445, 6260, 365, 472, 2685, 551, 11, 293, 321, 2825, 466, 341, 1558, 295, 6260, 365, 51792, 51792], "temperature": 0.0, "avg_logprob": -0.1346155802408854, "compression_ratio": 1.6970954356846473, "no_caption_prob": 3.0415635592362378e-06}, {"id": 859, "seek": 334802, "start": 3348.02, "end": 3350.68, "text": " one level of abstraction at a time.", "tokens": [50364, 472, 1496, 295, 37765, 412, 257, 565, 13, 50497, 50497, 407, 2049, 291, 434, 6260, 365, 472, 1496, 295, 37765, 689, 309, 311, 445, 979, 8616, 257, 3840, 50748, 50748, 295, 1507, 11, 445, 2390, 493, 257, 31828, 979, 19866, 13, 50874, 50874, 583, 2171, 291, 434, 2614, 257, 979, 19866, 293, 550, 300, 2709, 291, 257, 1874, 293, 550, 291, 434, 51142, 51142, 6246, 300, 666, 257, 1729, 2010, 295, 6713, 300, 291, 434, 21928, 365, 1071, 551, 11, 51370, 51370, 337, 1365, 13, 51420, 51420, 407, 613, 1333, 295, 2946, 1496, 40168, 689, 291, 434, 17990, 291, 434, 1333, 295, 9007, 51660, 51660, 746, 2831, 813, 884, 439, 264, 9942, 9007, 13, 51816, 51816], "temperature": 0.0, "avg_logprob": -0.07268067537728003, "compression_ratio": 1.8863636363636365, "no_caption_prob": 4.936940968036652e-06}, {"id": 860, "seek": 334802, "start": 3350.68, "end": 3355.7, "text": " So often you're dealing with one level of abstraction where it's just decoding a bunch", "tokens": [50364, 472, 1496, 295, 37765, 412, 257, 565, 13, 50497, 50497, 407, 2049, 291, 434, 6260, 365, 472, 1496, 295, 37765, 689, 309, 311, 445, 979, 8616, 257, 3840, 50748, 50748, 295, 1507, 11, 445, 2390, 493, 257, 31828, 979, 19866, 13, 50874, 50874, 583, 2171, 291, 434, 2614, 257, 979, 19866, 293, 550, 300, 2709, 291, 257, 1874, 293, 550, 291, 434, 51142, 51142, 6246, 300, 666, 257, 1729, 2010, 295, 6713, 300, 291, 434, 21928, 365, 1071, 551, 11, 51370, 51370, 337, 1365, 13, 51420, 51420, 407, 613, 1333, 295, 2946, 1496, 40168, 689, 291, 434, 17990, 291, 434, 1333, 295, 9007, 51660, 51660, 746, 2831, 813, 884, 439, 264, 9942, 9007, 13, 51816, 51816], "temperature": 0.0, "avg_logprob": -0.07268067537728003, "compression_ratio": 1.8863636363636365, "no_caption_prob": 4.936940968036652e-06}, {"id": 861, "seek": 334802, "start": 3355.7, "end": 3358.22, "text": " of stuff, just building up a JSON decoder.", "tokens": [50364, 472, 1496, 295, 37765, 412, 257, 565, 13, 50497, 50497, 407, 2049, 291, 434, 6260, 365, 472, 1496, 295, 37765, 689, 309, 311, 445, 979, 8616, 257, 3840, 50748, 50748, 295, 1507, 11, 445, 2390, 493, 257, 31828, 979, 19866, 13, 50874, 50874, 583, 2171, 291, 434, 2614, 257, 979, 19866, 293, 550, 300, 2709, 291, 257, 1874, 293, 550, 291, 434, 51142, 51142, 6246, 300, 666, 257, 1729, 2010, 295, 6713, 300, 291, 434, 21928, 365, 1071, 551, 11, 51370, 51370, 337, 1365, 13, 51420, 51420, 407, 613, 1333, 295, 2946, 1496, 40168, 689, 291, 434, 17990, 291, 434, 1333, 295, 9007, 51660, 51660, 746, 2831, 813, 884, 439, 264, 9942, 9007, 13, 51816, 51816], "temperature": 0.0, "avg_logprob": -0.07268067537728003, "compression_ratio": 1.8863636363636365, "no_caption_prob": 4.936940968036652e-06}, {"id": 862, "seek": 334802, "start": 3358.22, "end": 3363.58, "text": " But sometimes you're running a decoder and then that gives you a result and then you're", "tokens": [50364, 472, 1496, 295, 37765, 412, 257, 565, 13, 50497, 50497, 407, 2049, 291, 434, 6260, 365, 472, 1496, 295, 37765, 689, 309, 311, 445, 979, 8616, 257, 3840, 50748, 50748, 295, 1507, 11, 445, 2390, 493, 257, 31828, 979, 19866, 13, 50874, 50874, 583, 2171, 291, 434, 2614, 257, 979, 19866, 293, 550, 300, 2709, 291, 257, 1874, 293, 550, 291, 434, 51142, 51142, 6246, 300, 666, 257, 1729, 2010, 295, 6713, 300, 291, 434, 21928, 365, 1071, 551, 11, 51370, 51370, 337, 1365, 13, 51420, 51420, 407, 613, 1333, 295, 2946, 1496, 40168, 689, 291, 434, 17990, 291, 434, 1333, 295, 9007, 51660, 51660, 746, 2831, 813, 884, 439, 264, 9942, 9007, 13, 51816, 51816], "temperature": 0.0, "avg_logprob": -0.07268067537728003, "compression_ratio": 1.8863636363636365, "no_caption_prob": 4.936940968036652e-06}, {"id": 863, "seek": 334802, "start": 3363.58, "end": 3368.14, "text": " turning that into a particular type of error that you're combining with another thing,", "tokens": [50364, 472, 1496, 295, 37765, 412, 257, 565, 13, 50497, 50497, 407, 2049, 291, 434, 6260, 365, 472, 1496, 295, 37765, 689, 309, 311, 445, 979, 8616, 257, 3840, 50748, 50748, 295, 1507, 11, 445, 2390, 493, 257, 31828, 979, 19866, 13, 50874, 50874, 583, 2171, 291, 434, 2614, 257, 979, 19866, 293, 550, 300, 2709, 291, 257, 1874, 293, 550, 291, 434, 51142, 51142, 6246, 300, 666, 257, 1729, 2010, 295, 6713, 300, 291, 434, 21928, 365, 1071, 551, 11, 51370, 51370, 337, 1365, 13, 51420, 51420, 407, 613, 1333, 295, 2946, 1496, 40168, 689, 291, 434, 17990, 291, 434, 1333, 295, 9007, 51660, 51660, 746, 2831, 813, 884, 439, 264, 9942, 9007, 13, 51816, 51816], "temperature": 0.0, "avg_logprob": -0.07268067537728003, "compression_ratio": 1.8863636363636365, "no_caption_prob": 4.936940968036652e-06}, {"id": 864, "seek": 334802, "start": 3368.14, "end": 3369.14, "text": " for example.", "tokens": [50364, 472, 1496, 295, 37765, 412, 257, 565, 13, 50497, 50497, 407, 2049, 291, 434, 6260, 365, 472, 1496, 295, 37765, 689, 309, 311, 445, 979, 8616, 257, 3840, 50748, 50748, 295, 1507, 11, 445, 2390, 493, 257, 31828, 979, 19866, 13, 50874, 50874, 583, 2171, 291, 434, 2614, 257, 979, 19866, 293, 550, 300, 2709, 291, 257, 1874, 293, 550, 291, 434, 51142, 51142, 6246, 300, 666, 257, 1729, 2010, 295, 6713, 300, 291, 434, 21928, 365, 1071, 551, 11, 51370, 51370, 337, 1365, 13, 51420, 51420, 407, 613, 1333, 295, 2946, 1496, 40168, 689, 291, 434, 17990, 291, 434, 1333, 295, 9007, 51660, 51660, 746, 2831, 813, 884, 439, 264, 9942, 9007, 13, 51816, 51816], "temperature": 0.0, "avg_logprob": -0.07268067537728003, "compression_ratio": 1.8863636363636365, "no_caption_prob": 4.936940968036652e-06}, {"id": 865, "seek": 334802, "start": 3369.14, "end": 3373.94, "text": " So these sort of higher level pipelines where you're deciding you're sort of processing", "tokens": [50364, 472, 1496, 295, 37765, 412, 257, 565, 13, 50497, 50497, 407, 2049, 291, 434, 6260, 365, 472, 1496, 295, 37765, 689, 309, 311, 445, 979, 8616, 257, 3840, 50748, 50748, 295, 1507, 11, 445, 2390, 493, 257, 31828, 979, 19866, 13, 50874, 50874, 583, 2171, 291, 434, 2614, 257, 979, 19866, 293, 550, 300, 2709, 291, 257, 1874, 293, 550, 291, 434, 51142, 51142, 6246, 300, 666, 257, 1729, 2010, 295, 6713, 300, 291, 434, 21928, 365, 1071, 551, 11, 51370, 51370, 337, 1365, 13, 51420, 51420, 407, 613, 1333, 295, 2946, 1496, 40168, 689, 291, 434, 17990, 291, 434, 1333, 295, 9007, 51660, 51660, 746, 2831, 813, 884, 439, 264, 9942, 9007, 13, 51816, 51816], "temperature": 0.0, "avg_logprob": -0.07268067537728003, "compression_ratio": 1.8863636363636365, "no_caption_prob": 4.936940968036652e-06}, {"id": 866, "seek": 334802, "start": 3373.94, "end": 3377.06, "text": " something rather than doing all the detailed processing.", "tokens": [50364, 472, 1496, 295, 37765, 412, 257, 565, 13, 50497, 50497, 407, 2049, 291, 434, 6260, 365, 472, 1496, 295, 37765, 689, 309, 311, 445, 979, 8616, 257, 3840, 50748, 50748, 295, 1507, 11, 445, 2390, 493, 257, 31828, 979, 19866, 13, 50874, 50874, 583, 2171, 291, 434, 2614, 257, 979, 19866, 293, 550, 300, 2709, 291, 257, 1874, 293, 550, 291, 434, 51142, 51142, 6246, 300, 666, 257, 1729, 2010, 295, 6713, 300, 291, 434, 21928, 365, 1071, 551, 11, 51370, 51370, 337, 1365, 13, 51420, 51420, 407, 613, 1333, 295, 2946, 1496, 40168, 689, 291, 434, 17990, 291, 434, 1333, 295, 9007, 51660, 51660, 746, 2831, 813, 884, 439, 264, 9942, 9007, 13, 51816, 51816], "temperature": 0.0, "avg_logprob": -0.07268067537728003, "compression_ratio": 1.8863636363636365, "no_caption_prob": 4.936940968036652e-06}, {"id": 867, "seek": 337706, "start": 3377.06, "end": 3382.34, "text": " Often I want to build something up into a particular type of value.", "tokens": [50364, 20043, 286, 528, 281, 1322, 746, 493, 666, 257, 1729, 2010, 295, 2158, 13, 50628, 50628, 759, 286, 643, 281, 747, 472, 2010, 295, 6713, 293, 1261, 309, 666, 11, 10432, 309, 365, 11, 1310, 456, 311, 364, 50918, 50918, 33283, 6713, 300, 815, 362, 2011, 294, 472, 1874, 293, 1071, 2010, 295, 6713, 300, 1062, 362, 51164, 51164, 2011, 294, 1071, 1874, 13, 51238, 51238, 400, 550, 286, 643, 281, 10432, 729, 293, 2235, 294, 512, 661, 1412, 13, 51396, 51396, 407, 729, 3467, 295, 40168, 11, 286, 3928, 281, 536, 257, 1326, 819, 3467, 295, 8294, 14989, 13, 51665, 51665], "temperature": 0.0, "avg_logprob": -0.10700693497290978, "compression_ratio": 1.7510373443983402, "no_caption_prob": 7.646484846191015e-06}, {"id": 868, "seek": 337706, "start": 3382.34, "end": 3388.14, "text": " If I need to take one type of error and turn it into, combine it with, maybe there's an", "tokens": [50364, 20043, 286, 528, 281, 1322, 746, 493, 666, 257, 1729, 2010, 295, 2158, 13, 50628, 50628, 759, 286, 643, 281, 747, 472, 2010, 295, 6713, 293, 1261, 309, 666, 11, 10432, 309, 365, 11, 1310, 456, 311, 364, 50918, 50918, 33283, 6713, 300, 815, 362, 2011, 294, 472, 1874, 293, 1071, 2010, 295, 6713, 300, 1062, 362, 51164, 51164, 2011, 294, 1071, 1874, 13, 51238, 51238, 400, 550, 286, 643, 281, 10432, 729, 293, 2235, 294, 512, 661, 1412, 13, 51396, 51396, 407, 729, 3467, 295, 40168, 11, 286, 3928, 281, 536, 257, 1326, 819, 3467, 295, 8294, 14989, 13, 51665, 51665], "temperature": 0.0, "avg_logprob": -0.10700693497290978, "compression_ratio": 1.7510373443983402, "no_caption_prob": 7.646484846191015e-06}, {"id": 869, "seek": 337706, "start": 3388.14, "end": 3393.06, "text": " HTTP error that may have happened in one result and another type of error that might have", "tokens": [50364, 20043, 286, 528, 281, 1322, 746, 493, 666, 257, 1729, 2010, 295, 2158, 13, 50628, 50628, 759, 286, 643, 281, 747, 472, 2010, 295, 6713, 293, 1261, 309, 666, 11, 10432, 309, 365, 11, 1310, 456, 311, 364, 50918, 50918, 33283, 6713, 300, 815, 362, 2011, 294, 472, 1874, 293, 1071, 2010, 295, 6713, 300, 1062, 362, 51164, 51164, 2011, 294, 1071, 1874, 13, 51238, 51238, 400, 550, 286, 643, 281, 10432, 729, 293, 2235, 294, 512, 661, 1412, 13, 51396, 51396, 407, 729, 3467, 295, 40168, 11, 286, 3928, 281, 536, 257, 1326, 819, 3467, 295, 8294, 14989, 13, 51665, 51665], "temperature": 0.0, "avg_logprob": -0.10700693497290978, "compression_ratio": 1.7510373443983402, "no_caption_prob": 7.646484846191015e-06}, {"id": 870, "seek": 337706, "start": 3393.06, "end": 3394.54, "text": " happened in another result.", "tokens": [50364, 20043, 286, 528, 281, 1322, 746, 493, 666, 257, 1729, 2010, 295, 2158, 13, 50628, 50628, 759, 286, 643, 281, 747, 472, 2010, 295, 6713, 293, 1261, 309, 666, 11, 10432, 309, 365, 11, 1310, 456, 311, 364, 50918, 50918, 33283, 6713, 300, 815, 362, 2011, 294, 472, 1874, 293, 1071, 2010, 295, 6713, 300, 1062, 362, 51164, 51164, 2011, 294, 1071, 1874, 13, 51238, 51238, 400, 550, 286, 643, 281, 10432, 729, 293, 2235, 294, 512, 661, 1412, 13, 51396, 51396, 407, 729, 3467, 295, 40168, 11, 286, 3928, 281, 536, 257, 1326, 819, 3467, 295, 8294, 14989, 13, 51665, 51665], "temperature": 0.0, "avg_logprob": -0.10700693497290978, "compression_ratio": 1.7510373443983402, "no_caption_prob": 7.646484846191015e-06}, {"id": 871, "seek": 337706, "start": 3394.54, "end": 3397.7, "text": " And then I need to combine those and pull in some other data.", "tokens": [50364, 20043, 286, 528, 281, 1322, 746, 493, 666, 257, 1729, 2010, 295, 2158, 13, 50628, 50628, 759, 286, 643, 281, 747, 472, 2010, 295, 6713, 293, 1261, 309, 666, 11, 10432, 309, 365, 11, 1310, 456, 311, 364, 50918, 50918, 33283, 6713, 300, 815, 362, 2011, 294, 472, 1874, 293, 1071, 2010, 295, 6713, 300, 1062, 362, 51164, 51164, 2011, 294, 1071, 1874, 13, 51238, 51238, 400, 550, 286, 643, 281, 10432, 729, 293, 2235, 294, 512, 661, 1412, 13, 51396, 51396, 407, 729, 3467, 295, 40168, 11, 286, 3928, 281, 536, 257, 1326, 819, 3467, 295, 8294, 14989, 13, 51665, 51665], "temperature": 0.0, "avg_logprob": -0.10700693497290978, "compression_ratio": 1.7510373443983402, "no_caption_prob": 7.646484846191015e-06}, {"id": 872, "seek": 337706, "start": 3397.7, "end": 3403.08, "text": " So those types of pipelines, I tend to see a few different types of patterns emerging.", "tokens": [50364, 20043, 286, 528, 281, 1322, 746, 493, 666, 257, 1729, 2010, 295, 2158, 13, 50628, 50628, 759, 286, 643, 281, 747, 472, 2010, 295, 6713, 293, 1261, 309, 666, 11, 10432, 309, 365, 11, 1310, 456, 311, 364, 50918, 50918, 33283, 6713, 300, 815, 362, 2011, 294, 472, 1874, 293, 1071, 2010, 295, 6713, 300, 1062, 362, 51164, 51164, 2011, 294, 1071, 1874, 13, 51238, 51238, 400, 550, 286, 643, 281, 10432, 729, 293, 2235, 294, 512, 661, 1412, 13, 51396, 51396, 407, 729, 3467, 295, 40168, 11, 286, 3928, 281, 536, 257, 1326, 819, 3467, 295, 8294, 14989, 13, 51665, 51665], "temperature": 0.0, "avg_logprob": -0.10700693497290978, "compression_ratio": 1.7510373443983402, "no_caption_prob": 7.646484846191015e-06}, {"id": 873, "seek": 340308, "start": 3403.08, "end": 3408.66, "text": " One is I tend to see, sometimes I need to coerce something into the same type of thing.", "tokens": [50364, 1485, 307, 286, 3928, 281, 536, 11, 2171, 286, 643, 281, 598, 260, 384, 746, 666, 264, 912, 2010, 295, 551, 13, 50643, 50643, 407, 1310, 286, 362, 257, 1310, 2158, 293, 286, 362, 257, 1874, 295, 364, 33283, 6713, 293, 286, 362, 257, 1874, 50893, 50893, 295, 1071, 6713, 2010, 13, 50964, 50964, 407, 286, 1062, 643, 281, 360, 1874, 13, 24223, 28135, 2874, 281, 483, 264, 732, 1874, 3467, 281, 362, 264, 912, 6713, 13, 51313, 51313, 400, 550, 286, 1062, 643, 281, 747, 264, 1310, 2010, 293, 360, 1874, 13, 20579, 29727, 293, 976, 309, 364, 6713, 51619, 51619, 2010, 498, 309, 311, 1825, 13, 51711, 51711], "temperature": 0.0, "avg_logprob": -0.09103098937443324, "compression_ratio": 1.9275362318840579, "no_caption_prob": 7.766873750369996e-06}, {"id": 874, "seek": 340308, "start": 3408.66, "end": 3413.66, "text": " So maybe I have a maybe value and I have a result of an HTTP error and I have a result", "tokens": [50364, 1485, 307, 286, 3928, 281, 536, 11, 2171, 286, 643, 281, 598, 260, 384, 746, 666, 264, 912, 2010, 295, 551, 13, 50643, 50643, 407, 1310, 286, 362, 257, 1310, 2158, 293, 286, 362, 257, 1874, 295, 364, 33283, 6713, 293, 286, 362, 257, 1874, 50893, 50893, 295, 1071, 6713, 2010, 13, 50964, 50964, 407, 286, 1062, 643, 281, 360, 1874, 13, 24223, 28135, 2874, 281, 483, 264, 732, 1874, 3467, 281, 362, 264, 912, 6713, 13, 51313, 51313, 400, 550, 286, 1062, 643, 281, 747, 264, 1310, 2010, 293, 360, 1874, 13, 20579, 29727, 293, 976, 309, 364, 6713, 51619, 51619, 2010, 498, 309, 311, 1825, 13, 51711, 51711], "temperature": 0.0, "avg_logprob": -0.09103098937443324, "compression_ratio": 1.9275362318840579, "no_caption_prob": 7.766873750369996e-06}, {"id": 875, "seek": 340308, "start": 3413.66, "end": 3415.08, "text": " of another error type.", "tokens": [50364, 1485, 307, 286, 3928, 281, 536, 11, 2171, 286, 643, 281, 598, 260, 384, 746, 666, 264, 912, 2010, 295, 551, 13, 50643, 50643, 407, 1310, 286, 362, 257, 1310, 2158, 293, 286, 362, 257, 1874, 295, 364, 33283, 6713, 293, 286, 362, 257, 1874, 50893, 50893, 295, 1071, 6713, 2010, 13, 50964, 50964, 407, 286, 1062, 643, 281, 360, 1874, 13, 24223, 28135, 2874, 281, 483, 264, 732, 1874, 3467, 281, 362, 264, 912, 6713, 13, 51313, 51313, 400, 550, 286, 1062, 643, 281, 747, 264, 1310, 2010, 293, 360, 1874, 13, 20579, 29727, 293, 976, 309, 364, 6713, 51619, 51619, 2010, 498, 309, 311, 1825, 13, 51711, 51711], "temperature": 0.0, "avg_logprob": -0.09103098937443324, "compression_ratio": 1.9275362318840579, "no_caption_prob": 7.766873750369996e-06}, {"id": 876, "seek": 340308, "start": 3415.08, "end": 3422.06, "text": " So I might need to do result.mapError to get the two result types to have the same error.", "tokens": [50364, 1485, 307, 286, 3928, 281, 536, 11, 2171, 286, 643, 281, 598, 260, 384, 746, 666, 264, 912, 2010, 295, 551, 13, 50643, 50643, 407, 1310, 286, 362, 257, 1310, 2158, 293, 286, 362, 257, 1874, 295, 364, 33283, 6713, 293, 286, 362, 257, 1874, 50893, 50893, 295, 1071, 6713, 2010, 13, 50964, 50964, 407, 286, 1062, 643, 281, 360, 1874, 13, 24223, 28135, 2874, 281, 483, 264, 732, 1874, 3467, 281, 362, 264, 912, 6713, 13, 51313, 51313, 400, 550, 286, 1062, 643, 281, 747, 264, 1310, 2010, 293, 360, 1874, 13, 20579, 29727, 293, 976, 309, 364, 6713, 51619, 51619, 2010, 498, 309, 311, 1825, 13, 51711, 51711], "temperature": 0.0, "avg_logprob": -0.09103098937443324, "compression_ratio": 1.9275362318840579, "no_caption_prob": 7.766873750369996e-06}, {"id": 877, "seek": 340308, "start": 3422.06, "end": 3428.18, "text": " And then I might need to take the maybe type and do result.fromMaybe and give it an error", "tokens": [50364, 1485, 307, 286, 3928, 281, 536, 11, 2171, 286, 643, 281, 598, 260, 384, 746, 666, 264, 912, 2010, 295, 551, 13, 50643, 50643, 407, 1310, 286, 362, 257, 1310, 2158, 293, 286, 362, 257, 1874, 295, 364, 33283, 6713, 293, 286, 362, 257, 1874, 50893, 50893, 295, 1071, 6713, 2010, 13, 50964, 50964, 407, 286, 1062, 643, 281, 360, 1874, 13, 24223, 28135, 2874, 281, 483, 264, 732, 1874, 3467, 281, 362, 264, 912, 6713, 13, 51313, 51313, 400, 550, 286, 1062, 643, 281, 747, 264, 1310, 2010, 293, 360, 1874, 13, 20579, 29727, 293, 976, 309, 364, 6713, 51619, 51619, 2010, 498, 309, 311, 1825, 13, 51711, 51711], "temperature": 0.0, "avg_logprob": -0.09103098937443324, "compression_ratio": 1.9275362318840579, "no_caption_prob": 7.766873750369996e-06}, {"id": 878, "seek": 340308, "start": 3428.18, "end": 3430.02, "text": " type if it's nothing.", "tokens": [50364, 1485, 307, 286, 3928, 281, 536, 11, 2171, 286, 643, 281, 598, 260, 384, 746, 666, 264, 912, 2010, 295, 551, 13, 50643, 50643, 407, 1310, 286, 362, 257, 1310, 2158, 293, 286, 362, 257, 1874, 295, 364, 33283, 6713, 293, 286, 362, 257, 1874, 50893, 50893, 295, 1071, 6713, 2010, 13, 50964, 50964, 407, 286, 1062, 643, 281, 360, 1874, 13, 24223, 28135, 2874, 281, 483, 264, 732, 1874, 3467, 281, 362, 264, 912, 6713, 13, 51313, 51313, 400, 550, 286, 1062, 643, 281, 747, 264, 1310, 2010, 293, 360, 1874, 13, 20579, 29727, 293, 976, 309, 364, 6713, 51619, 51619, 2010, 498, 309, 311, 1825, 13, 51711, 51711], "temperature": 0.0, "avg_logprob": -0.09103098937443324, "compression_ratio": 1.9275362318840579, "no_caption_prob": 7.766873750369996e-06}, {"id": 879, "seek": 343002, "start": 3430.02, "end": 3436.1, "text": " So those are sort of like some higher level patterns for combining things that I find", "tokens": [50364, 407, 729, 366, 1333, 295, 411, 512, 2946, 1496, 8294, 337, 21928, 721, 300, 286, 915, 50668, 50668, 808, 493, 257, 688, 13, 50718, 50718, 400, 1071, 472, 300, 286, 536, 1348, 493, 257, 688, 294, 3089, 300, 286, 2464, 307, 286, 603, 528, 281, 1333, 50936, 50936, 295, 35925, 1214, 2098, 295, 18350, 721, 13, 51107, 51107, 407, 286, 603, 362, 411, 257, 1310, 1329, 420, 257, 31828, 979, 19866, 295, 257, 1329, 13, 51458, 51458, 400, 286, 528, 281, 4471, 264, 7284, 1329, 1854, 295, 300, 13, 51610, 51610], "temperature": 0.0, "avg_logprob": -0.08184462208901683, "compression_ratio": 1.681592039800995, "no_caption_prob": 7.002149686741177e-07}, {"id": 880, "seek": 343002, "start": 3436.1, "end": 3437.1, "text": " come up a lot.", "tokens": [50364, 407, 729, 366, 1333, 295, 411, 512, 2946, 1496, 8294, 337, 21928, 721, 300, 286, 915, 50668, 50668, 808, 493, 257, 688, 13, 50718, 50718, 400, 1071, 472, 300, 286, 536, 1348, 493, 257, 688, 294, 3089, 300, 286, 2464, 307, 286, 603, 528, 281, 1333, 50936, 50936, 295, 35925, 1214, 2098, 295, 18350, 721, 13, 51107, 51107, 407, 286, 603, 362, 411, 257, 1310, 1329, 420, 257, 31828, 979, 19866, 295, 257, 1329, 13, 51458, 51458, 400, 286, 528, 281, 4471, 264, 7284, 1329, 1854, 295, 300, 13, 51610, 51610], "temperature": 0.0, "avg_logprob": -0.08184462208901683, "compression_ratio": 1.681592039800995, "no_caption_prob": 7.002149686741177e-07}, {"id": 881, "seek": 343002, "start": 3437.1, "end": 3441.46, "text": " And another one that I see coming up a lot in code that I write is I'll want to sort", "tokens": [50364, 407, 729, 366, 1333, 295, 411, 512, 2946, 1496, 8294, 337, 21928, 721, 300, 286, 915, 50668, 50668, 808, 493, 257, 688, 13, 50718, 50718, 400, 1071, 472, 300, 286, 536, 1348, 493, 257, 688, 294, 3089, 300, 286, 2464, 307, 286, 603, 528, 281, 1333, 50936, 50936, 295, 35925, 1214, 2098, 295, 18350, 721, 13, 51107, 51107, 407, 286, 603, 362, 411, 257, 1310, 1329, 420, 257, 31828, 979, 19866, 295, 257, 1329, 13, 51458, 51458, 400, 286, 528, 281, 4471, 264, 7284, 1329, 1854, 295, 300, 13, 51610, 51610], "temperature": 0.0, "avg_logprob": -0.08184462208901683, "compression_ratio": 1.681592039800995, "no_caption_prob": 7.002149686741177e-07}, {"id": 882, "seek": 343002, "start": 3441.46, "end": 3444.88, "text": " of compose together ways of mapping things.", "tokens": [50364, 407, 729, 366, 1333, 295, 411, 512, 2946, 1496, 8294, 337, 21928, 721, 300, 286, 915, 50668, 50668, 808, 493, 257, 688, 13, 50718, 50718, 400, 1071, 472, 300, 286, 536, 1348, 493, 257, 688, 294, 3089, 300, 286, 2464, 307, 286, 603, 528, 281, 1333, 50936, 50936, 295, 35925, 1214, 2098, 295, 18350, 721, 13, 51107, 51107, 407, 286, 603, 362, 411, 257, 1310, 1329, 420, 257, 31828, 979, 19866, 295, 257, 1329, 13, 51458, 51458, 400, 286, 528, 281, 4471, 264, 7284, 1329, 1854, 295, 300, 13, 51610, 51610], "temperature": 0.0, "avg_logprob": -0.08184462208901683, "compression_ratio": 1.681592039800995, "no_caption_prob": 7.002149686741177e-07}, {"id": 883, "seek": 343002, "start": 3444.88, "end": 3451.9, "text": " So I'll have like a maybe list or a JSON decoder of a list.", "tokens": [50364, 407, 729, 366, 1333, 295, 411, 512, 2946, 1496, 8294, 337, 21928, 721, 300, 286, 915, 50668, 50668, 808, 493, 257, 688, 13, 50718, 50718, 400, 1071, 472, 300, 286, 536, 1348, 493, 257, 688, 294, 3089, 300, 286, 2464, 307, 286, 603, 528, 281, 1333, 50936, 50936, 295, 35925, 1214, 2098, 295, 18350, 721, 13, 51107, 51107, 407, 286, 603, 362, 411, 257, 1310, 1329, 420, 257, 31828, 979, 19866, 295, 257, 1329, 13, 51458, 51458, 400, 286, 528, 281, 4471, 264, 7284, 1329, 1854, 295, 300, 13, 51610, 51610], "temperature": 0.0, "avg_logprob": -0.08184462208901683, "compression_ratio": 1.681592039800995, "no_caption_prob": 7.002149686741177e-07}, {"id": 884, "seek": 343002, "start": 3451.9, "end": 3454.94, "text": " And I want to map the inner list inside of that.", "tokens": [50364, 407, 729, 366, 1333, 295, 411, 512, 2946, 1496, 8294, 337, 21928, 721, 300, 286, 915, 50668, 50668, 808, 493, 257, 688, 13, 50718, 50718, 400, 1071, 472, 300, 286, 536, 1348, 493, 257, 688, 294, 3089, 300, 286, 2464, 307, 286, 603, 528, 281, 1333, 50936, 50936, 295, 35925, 1214, 2098, 295, 18350, 721, 13, 51107, 51107, 407, 286, 603, 362, 411, 257, 1310, 1329, 420, 257, 31828, 979, 19866, 295, 257, 1329, 13, 51458, 51458, 400, 286, 528, 281, 4471, 264, 7284, 1329, 1854, 295, 300, 13, 51610, 51610], "temperature": 0.0, "avg_logprob": -0.08184462208901683, "compression_ratio": 1.681592039800995, "no_caption_prob": 7.002149686741177e-07}, {"id": 885, "seek": 345494, "start": 3454.94, "end": 3461.26, "text": " And in those cases, I'll do like maybe.map, list.map, and then apply something in there.", "tokens": [50364, 400, 294, 729, 3331, 11, 286, 603, 360, 411, 1310, 13, 24223, 11, 1329, 13, 24223, 11, 293, 550, 3079, 746, 294, 456, 13, 50680, 50680, 407, 729, 366, 1333, 295, 732, 2946, 1496, 8294, 300, 286, 600, 5694, 14989, 257, 688, 13, 50904, 50904, 1079, 13, 50954, 50954, 286, 519, 729, 366, 1391, 257, 707, 857, 4994, 490, 341, 2580, 1166, 3410, 293, 300, 436, 434, 51100, 51100, 445, 6082, 337, 1364, 365, 40168, 294, 2674, 13, 51266, 51266, 286, 576, 5850, 406, 10432, 729, 365, 257, 584, 293, 4471, 15517, 13, 51574, 51574, 759, 286, 478, 584, 884, 512, 31828, 979, 8616, 293, 550, 286, 528, 281, 10432, 264, 13603, 365, 512, 661, 51850, 51850], "temperature": 0.0, "avg_logprob": -0.1502669679016626, "compression_ratio": 1.674911660777385, "no_caption_prob": 1.568917832628358e-05}, {"id": 886, "seek": 345494, "start": 3461.26, "end": 3465.7400000000002, "text": " So those are sort of two higher level patterns that I've noticed emerging a lot.", "tokens": [50364, 400, 294, 729, 3331, 11, 286, 603, 360, 411, 1310, 13, 24223, 11, 1329, 13, 24223, 11, 293, 550, 3079, 746, 294, 456, 13, 50680, 50680, 407, 729, 366, 1333, 295, 732, 2946, 1496, 8294, 300, 286, 600, 5694, 14989, 257, 688, 13, 50904, 50904, 1079, 13, 50954, 50954, 286, 519, 729, 366, 1391, 257, 707, 857, 4994, 490, 341, 2580, 1166, 3410, 293, 300, 436, 434, 51100, 51100, 445, 6082, 337, 1364, 365, 40168, 294, 2674, 13, 51266, 51266, 286, 576, 5850, 406, 10432, 729, 365, 257, 584, 293, 4471, 15517, 13, 51574, 51574, 759, 286, 478, 584, 884, 512, 31828, 979, 8616, 293, 550, 286, 528, 281, 10432, 264, 13603, 365, 512, 661, 51850, 51850], "temperature": 0.0, "avg_logprob": -0.1502669679016626, "compression_ratio": 1.674911660777385, "no_caption_prob": 1.568917832628358e-05}, {"id": 887, "seek": 345494, "start": 3465.7400000000002, "end": 3466.7400000000002, "text": " Yes.", "tokens": [50364, 400, 294, 729, 3331, 11, 286, 603, 360, 411, 1310, 13, 24223, 11, 1329, 13, 24223, 11, 293, 550, 3079, 746, 294, 456, 13, 50680, 50680, 407, 729, 366, 1333, 295, 732, 2946, 1496, 8294, 300, 286, 600, 5694, 14989, 257, 688, 13, 50904, 50904, 1079, 13, 50954, 50954, 286, 519, 729, 366, 1391, 257, 707, 857, 4994, 490, 341, 2580, 1166, 3410, 293, 300, 436, 434, 51100, 51100, 445, 6082, 337, 1364, 365, 40168, 294, 2674, 13, 51266, 51266, 286, 576, 5850, 406, 10432, 729, 365, 257, 584, 293, 4471, 15517, 13, 51574, 51574, 759, 286, 478, 584, 884, 512, 31828, 979, 8616, 293, 550, 286, 528, 281, 10432, 264, 13603, 365, 512, 661, 51850, 51850], "temperature": 0.0, "avg_logprob": -0.1502669679016626, "compression_ratio": 1.674911660777385, "no_caption_prob": 1.568917832628358e-05}, {"id": 888, "seek": 345494, "start": 3466.7400000000002, "end": 3469.66, "text": " I think those are probably a little bit separate from this applicative concept and that they're", "tokens": [50364, 400, 294, 729, 3331, 11, 286, 603, 360, 411, 1310, 13, 24223, 11, 1329, 13, 24223, 11, 293, 550, 3079, 746, 294, 456, 13, 50680, 50680, 407, 729, 366, 1333, 295, 732, 2946, 1496, 8294, 300, 286, 600, 5694, 14989, 257, 688, 13, 50904, 50904, 1079, 13, 50954, 50954, 286, 519, 729, 366, 1391, 257, 707, 857, 4994, 490, 341, 2580, 1166, 3410, 293, 300, 436, 434, 51100, 51100, 445, 6082, 337, 1364, 365, 40168, 294, 2674, 13, 51266, 51266, 286, 576, 5850, 406, 10432, 729, 365, 257, 584, 293, 4471, 15517, 13, 51574, 51574, 759, 286, 478, 584, 884, 512, 31828, 979, 8616, 293, 550, 286, 528, 281, 10432, 264, 13603, 365, 512, 661, 51850, 51850], "temperature": 0.0, "avg_logprob": -0.1502669679016626, "compression_ratio": 1.674911660777385, "no_caption_prob": 1.568917832628358e-05}, {"id": 889, "seek": 345494, "start": 3469.66, "end": 3472.98, "text": " just tips for working with pipelines in general.", "tokens": [50364, 400, 294, 729, 3331, 11, 286, 603, 360, 411, 1310, 13, 24223, 11, 1329, 13, 24223, 11, 293, 550, 3079, 746, 294, 456, 13, 50680, 50680, 407, 729, 366, 1333, 295, 732, 2946, 1496, 8294, 300, 286, 600, 5694, 14989, 257, 688, 13, 50904, 50904, 1079, 13, 50954, 50954, 286, 519, 729, 366, 1391, 257, 707, 857, 4994, 490, 341, 2580, 1166, 3410, 293, 300, 436, 434, 51100, 51100, 445, 6082, 337, 1364, 365, 40168, 294, 2674, 13, 51266, 51266, 286, 576, 5850, 406, 10432, 729, 365, 257, 584, 293, 4471, 15517, 13, 51574, 51574, 759, 286, 478, 584, 884, 512, 31828, 979, 8616, 293, 550, 286, 528, 281, 10432, 264, 13603, 365, 512, 661, 51850, 51850], "temperature": 0.0, "avg_logprob": -0.1502669679016626, "compression_ratio": 1.674911660777385, "no_caption_prob": 1.568917832628358e-05}, {"id": 890, "seek": 345494, "start": 3472.98, "end": 3479.14, "text": " I would typically not combine those with a say and map pipeline.", "tokens": [50364, 400, 294, 729, 3331, 11, 286, 603, 360, 411, 1310, 13, 24223, 11, 1329, 13, 24223, 11, 293, 550, 3079, 746, 294, 456, 13, 50680, 50680, 407, 729, 366, 1333, 295, 732, 2946, 1496, 8294, 300, 286, 600, 5694, 14989, 257, 688, 13, 50904, 50904, 1079, 13, 50954, 50954, 286, 519, 729, 366, 1391, 257, 707, 857, 4994, 490, 341, 2580, 1166, 3410, 293, 300, 436, 434, 51100, 51100, 445, 6082, 337, 1364, 365, 40168, 294, 2674, 13, 51266, 51266, 286, 576, 5850, 406, 10432, 729, 365, 257, 584, 293, 4471, 15517, 13, 51574, 51574, 759, 286, 478, 584, 884, 512, 31828, 979, 8616, 293, 550, 286, 528, 281, 10432, 264, 13603, 365, 512, 661, 51850, 51850], "temperature": 0.0, "avg_logprob": -0.1502669679016626, "compression_ratio": 1.674911660777385, "no_caption_prob": 1.568917832628358e-05}, {"id": 891, "seek": 345494, "start": 3479.14, "end": 3484.66, "text": " If I'm say doing some JSON decoding and then I want to combine the errors with some other", "tokens": [50364, 400, 294, 729, 3331, 11, 286, 603, 360, 411, 1310, 13, 24223, 11, 1329, 13, 24223, 11, 293, 550, 3079, 746, 294, 456, 13, 50680, 50680, 407, 729, 366, 1333, 295, 732, 2946, 1496, 8294, 300, 286, 600, 5694, 14989, 257, 688, 13, 50904, 50904, 1079, 13, 50954, 50954, 286, 519, 729, 366, 1391, 257, 707, 857, 4994, 490, 341, 2580, 1166, 3410, 293, 300, 436, 434, 51100, 51100, 445, 6082, 337, 1364, 365, 40168, 294, 2674, 13, 51266, 51266, 286, 576, 5850, 406, 10432, 729, 365, 257, 584, 293, 4471, 15517, 13, 51574, 51574, 759, 286, 478, 584, 884, 512, 31828, 979, 8616, 293, 550, 286, 528, 281, 10432, 264, 13603, 365, 512, 661, 51850, 51850], "temperature": 0.0, "avg_logprob": -0.1502669679016626, "compression_ratio": 1.674911660777385, "no_caption_prob": 1.568917832628358e-05}, {"id": 892, "seek": 348466, "start": 3484.66, "end": 3489.02, "text": " result, I would probably have a separate function that handles the JSON decoder and just find", "tokens": [50364, 1874, 11, 286, 576, 1391, 362, 257, 4994, 2445, 300, 18722, 264, 31828, 979, 19866, 293, 445, 915, 50582, 50582, 341, 307, 577, 291, 979, 1429, 264, 31828, 293, 550, 818, 300, 490, 257, 819, 15517, 300, 311, 11642, 50852, 50852, 264, 3542, 13, 50902, 50902, 3764, 11, 646, 281, 300, 1558, 295, 257, 2167, 1496, 295, 37765, 13, 51048, 51048, 286, 362, 257, 2445, 300, 23122, 510, 311, 577, 321, 4648, 365, 31828, 293, 264, 661, 472, 300, 51224, 51224, 1619, 510, 311, 577, 321, 550, 411, 1401, 264, 31828, 293, 4813, 264, 13603, 13, 51486, 51486, 509, 483, 281, 512, 534, 1880, 8294, 365, 1333, 295, 1163, 2123, 613, 721, 886, 13, 51700, 51700], "temperature": 0.0, "avg_logprob": -0.10432166568303512, "compression_ratio": 1.7934782608695652, "no_caption_prob": 6.748004580003908e-06}, {"id": 893, "seek": 348466, "start": 3489.02, "end": 3494.42, "text": " this is how you decode the JSON and then call that from a different pipeline that's managing", "tokens": [50364, 1874, 11, 286, 576, 1391, 362, 257, 4994, 2445, 300, 18722, 264, 31828, 979, 19866, 293, 445, 915, 50582, 50582, 341, 307, 577, 291, 979, 1429, 264, 31828, 293, 550, 818, 300, 490, 257, 819, 15517, 300, 311, 11642, 50852, 50852, 264, 3542, 13, 50902, 50902, 3764, 11, 646, 281, 300, 1558, 295, 257, 2167, 1496, 295, 37765, 13, 51048, 51048, 286, 362, 257, 2445, 300, 23122, 510, 311, 577, 321, 4648, 365, 31828, 293, 264, 661, 472, 300, 51224, 51224, 1619, 510, 311, 577, 321, 550, 411, 1401, 264, 31828, 293, 4813, 264, 13603, 13, 51486, 51486, 509, 483, 281, 512, 534, 1880, 8294, 365, 1333, 295, 1163, 2123, 613, 721, 886, 13, 51700, 51700], "temperature": 0.0, "avg_logprob": -0.10432166568303512, "compression_ratio": 1.7934782608695652, "no_caption_prob": 6.748004580003908e-06}, {"id": 894, "seek": 348466, "start": 3494.42, "end": 3495.42, "text": " the results.", "tokens": [50364, 1874, 11, 286, 576, 1391, 362, 257, 4994, 2445, 300, 18722, 264, 31828, 979, 19866, 293, 445, 915, 50582, 50582, 341, 307, 577, 291, 979, 1429, 264, 31828, 293, 550, 818, 300, 490, 257, 819, 15517, 300, 311, 11642, 50852, 50852, 264, 3542, 13, 50902, 50902, 3764, 11, 646, 281, 300, 1558, 295, 257, 2167, 1496, 295, 37765, 13, 51048, 51048, 286, 362, 257, 2445, 300, 23122, 510, 311, 577, 321, 4648, 365, 31828, 293, 264, 661, 472, 300, 51224, 51224, 1619, 510, 311, 577, 321, 550, 411, 1401, 264, 31828, 293, 4813, 264, 13603, 13, 51486, 51486, 509, 483, 281, 512, 534, 1880, 8294, 365, 1333, 295, 1163, 2123, 613, 721, 886, 13, 51700, 51700], "temperature": 0.0, "avg_logprob": -0.10432166568303512, "compression_ratio": 1.7934782608695652, "no_caption_prob": 6.748004580003908e-06}, {"id": 895, "seek": 348466, "start": 3495.42, "end": 3498.3399999999997, "text": " Again, back to that idea of a single level of abstraction.", "tokens": [50364, 1874, 11, 286, 576, 1391, 362, 257, 4994, 2445, 300, 18722, 264, 31828, 979, 19866, 293, 445, 915, 50582, 50582, 341, 307, 577, 291, 979, 1429, 264, 31828, 293, 550, 818, 300, 490, 257, 819, 15517, 300, 311, 11642, 50852, 50852, 264, 3542, 13, 50902, 50902, 3764, 11, 646, 281, 300, 1558, 295, 257, 2167, 1496, 295, 37765, 13, 51048, 51048, 286, 362, 257, 2445, 300, 23122, 510, 311, 577, 321, 4648, 365, 31828, 293, 264, 661, 472, 300, 51224, 51224, 1619, 510, 311, 577, 321, 550, 411, 1401, 264, 31828, 293, 4813, 264, 13603, 13, 51486, 51486, 509, 483, 281, 512, 534, 1880, 8294, 365, 1333, 295, 1163, 2123, 613, 721, 886, 13, 51700, 51700], "temperature": 0.0, "avg_logprob": -0.10432166568303512, "compression_ratio": 1.7934782608695652, "no_caption_prob": 6.748004580003908e-06}, {"id": 896, "seek": 348466, "start": 3498.3399999999997, "end": 3501.8599999999997, "text": " I have a function that defines here's how we interact with JSON and the other one that", "tokens": [50364, 1874, 11, 286, 576, 1391, 362, 257, 4994, 2445, 300, 18722, 264, 31828, 979, 19866, 293, 445, 915, 50582, 50582, 341, 307, 577, 291, 979, 1429, 264, 31828, 293, 550, 818, 300, 490, 257, 819, 15517, 300, 311, 11642, 50852, 50852, 264, 3542, 13, 50902, 50902, 3764, 11, 646, 281, 300, 1558, 295, 257, 2167, 1496, 295, 37765, 13, 51048, 51048, 286, 362, 257, 2445, 300, 23122, 510, 311, 577, 321, 4648, 365, 31828, 293, 264, 661, 472, 300, 51224, 51224, 1619, 510, 311, 577, 321, 550, 411, 1401, 264, 31828, 293, 4813, 264, 13603, 13, 51486, 51486, 509, 483, 281, 512, 534, 1880, 8294, 365, 1333, 295, 1163, 2123, 613, 721, 886, 13, 51700, 51700], "temperature": 0.0, "avg_logprob": -0.10432166568303512, "compression_ratio": 1.7934782608695652, "no_caption_prob": 6.748004580003908e-06}, {"id": 897, "seek": 348466, "start": 3501.8599999999997, "end": 3507.1, "text": " says here's how we then like read the JSON and handle the errors.", "tokens": [50364, 1874, 11, 286, 576, 1391, 362, 257, 4994, 2445, 300, 18722, 264, 31828, 979, 19866, 293, 445, 915, 50582, 50582, 341, 307, 577, 291, 979, 1429, 264, 31828, 293, 550, 818, 300, 490, 257, 819, 15517, 300, 311, 11642, 50852, 50852, 264, 3542, 13, 50902, 50902, 3764, 11, 646, 281, 300, 1558, 295, 257, 2167, 1496, 295, 37765, 13, 51048, 51048, 286, 362, 257, 2445, 300, 23122, 510, 311, 577, 321, 4648, 365, 31828, 293, 264, 661, 472, 300, 51224, 51224, 1619, 510, 311, 577, 321, 550, 411, 1401, 264, 31828, 293, 4813, 264, 13603, 13, 51486, 51486, 509, 483, 281, 512, 534, 1880, 8294, 365, 1333, 295, 1163, 2123, 613, 721, 886, 13, 51700, 51700], "temperature": 0.0, "avg_logprob": -0.10432166568303512, "compression_ratio": 1.7934782608695652, "no_caption_prob": 6.748004580003908e-06}, {"id": 898, "seek": 348466, "start": 3507.1, "end": 3511.3799999999997, "text": " You get to some really interesting patterns with sort of deriving these things too.", "tokens": [50364, 1874, 11, 286, 576, 1391, 362, 257, 4994, 2445, 300, 18722, 264, 31828, 979, 19866, 293, 445, 915, 50582, 50582, 341, 307, 577, 291, 979, 1429, 264, 31828, 293, 550, 818, 300, 490, 257, 819, 15517, 300, 311, 11642, 50852, 50852, 264, 3542, 13, 50902, 50902, 3764, 11, 646, 281, 300, 1558, 295, 257, 2167, 1496, 295, 37765, 13, 51048, 51048, 286, 362, 257, 2445, 300, 23122, 510, 311, 577, 321, 4648, 365, 31828, 293, 264, 661, 472, 300, 51224, 51224, 1619, 510, 311, 577, 321, 550, 411, 1401, 264, 31828, 293, 4813, 264, 13603, 13, 51486, 51486, 509, 483, 281, 512, 534, 1880, 8294, 365, 1333, 295, 1163, 2123, 613, 721, 886, 13, 51700, 51700], "temperature": 0.0, "avg_logprob": -0.10432166568303512, "compression_ratio": 1.7934782608695652, "no_caption_prob": 6.748004580003908e-06}, {"id": 899, "seek": 351138, "start": 3511.38, "end": 3518.58, "text": " So another thing I've noticed is that a lot of these sort of mappable APIs will...", "tokens": [50364, 407, 1071, 551, 286, 600, 5694, 307, 300, 257, 688, 295, 613, 1333, 295, 463, 427, 712, 21445, 486, 485, 50724, 50724, 286, 914, 11, 498, 291, 362, 4471, 17, 11, 437, 393, 291, 28446, 490, 309, 30, 50962, 50962, 509, 2835, 300, 291, 393, 485, 51040, 51040, 663, 307, 12066, 13, 51090, 51090, 440, 1623, 291, 5366, 4471, 17, 11, 370, 867, 721, 1813, 1944, 13, 51344, 51344, 865, 13, 51394, 51394, 467, 311, 1238, 10654, 13, 51444, 51444, 1485, 295, 264, 721, 300, 286, 600, 668, 884, 11, 286, 600, 658, 341, 441, 15168, 5093, 21156, 278, 6405, 293, 286, 600, 51794, 51794], "temperature": 0.0, "avg_logprob": -0.2146427297146521, "compression_ratio": 1.5517241379310345, "no_caption_prob": 2.5612621357140597e-06}, {"id": 900, "seek": 351138, "start": 3518.58, "end": 3523.34, "text": " I mean, if you have map2, what can you derive from it?", "tokens": [50364, 407, 1071, 551, 286, 600, 5694, 307, 300, 257, 688, 295, 613, 1333, 295, 463, 427, 712, 21445, 486, 485, 50724, 50724, 286, 914, 11, 498, 291, 362, 4471, 17, 11, 437, 393, 291, 28446, 490, 309, 30, 50962, 50962, 509, 2835, 300, 291, 393, 485, 51040, 51040, 663, 307, 12066, 13, 51090, 51090, 440, 1623, 291, 5366, 4471, 17, 11, 370, 867, 721, 1813, 1944, 13, 51344, 51344, 865, 13, 51394, 51394, 467, 311, 1238, 10654, 13, 51444, 51444, 1485, 295, 264, 721, 300, 286, 600, 668, 884, 11, 286, 600, 658, 341, 441, 15168, 5093, 21156, 278, 6405, 293, 286, 600, 51794, 51794], "temperature": 0.0, "avg_logprob": -0.2146427297146521, "compression_ratio": 1.5517241379310345, "no_caption_prob": 2.5612621357140597e-06}, {"id": 901, "seek": 351138, "start": 3523.34, "end": 3524.9, "text": " You mentioned that you can...", "tokens": [50364, 407, 1071, 551, 286, 600, 5694, 307, 300, 257, 688, 295, 613, 1333, 295, 463, 427, 712, 21445, 486, 485, 50724, 50724, 286, 914, 11, 498, 291, 362, 4471, 17, 11, 437, 393, 291, 28446, 490, 309, 30, 50962, 50962, 509, 2835, 300, 291, 393, 485, 51040, 51040, 663, 307, 12066, 13, 51090, 51090, 440, 1623, 291, 5366, 4471, 17, 11, 370, 867, 721, 1813, 1944, 13, 51344, 51344, 865, 13, 51394, 51394, 467, 311, 1238, 10654, 13, 51444, 51444, 1485, 295, 264, 721, 300, 286, 600, 668, 884, 11, 286, 600, 658, 341, 441, 15168, 5093, 21156, 278, 6405, 293, 286, 600, 51794, 51794], "temperature": 0.0, "avg_logprob": -0.2146427297146521, "compression_ratio": 1.5517241379310345, "no_caption_prob": 2.5612621357140597e-06}, {"id": 902, "seek": 351138, "start": 3524.9, "end": 3525.9, "text": " That is magical.", "tokens": [50364, 407, 1071, 551, 286, 600, 5694, 307, 300, 257, 688, 295, 613, 1333, 295, 463, 427, 712, 21445, 486, 485, 50724, 50724, 286, 914, 11, 498, 291, 362, 4471, 17, 11, 437, 393, 291, 28446, 490, 309, 30, 50962, 50962, 509, 2835, 300, 291, 393, 485, 51040, 51040, 663, 307, 12066, 13, 51090, 51090, 440, 1623, 291, 5366, 4471, 17, 11, 370, 867, 721, 1813, 1944, 13, 51344, 51344, 865, 13, 51394, 51394, 467, 311, 1238, 10654, 13, 51444, 51444, 1485, 295, 264, 721, 300, 286, 600, 668, 884, 11, 286, 600, 658, 341, 441, 15168, 5093, 21156, 278, 6405, 293, 286, 600, 51794, 51794], "temperature": 0.0, "avg_logprob": -0.2146427297146521, "compression_ratio": 1.5517241379310345, "no_caption_prob": 2.5612621357140597e-06}, {"id": 903, "seek": 351138, "start": 3525.9, "end": 3530.98, "text": " The moment you introduce map2, so many things become possible.", "tokens": [50364, 407, 1071, 551, 286, 600, 5694, 307, 300, 257, 688, 295, 613, 1333, 295, 463, 427, 712, 21445, 486, 485, 50724, 50724, 286, 914, 11, 498, 291, 362, 4471, 17, 11, 437, 393, 291, 28446, 490, 309, 30, 50962, 50962, 509, 2835, 300, 291, 393, 485, 51040, 51040, 663, 307, 12066, 13, 51090, 51090, 440, 1623, 291, 5366, 4471, 17, 11, 370, 867, 721, 1813, 1944, 13, 51344, 51344, 865, 13, 51394, 51394, 467, 311, 1238, 10654, 13, 51444, 51444, 1485, 295, 264, 721, 300, 286, 600, 668, 884, 11, 286, 600, 658, 341, 441, 15168, 5093, 21156, 278, 6405, 293, 286, 600, 51794, 51794], "temperature": 0.0, "avg_logprob": -0.2146427297146521, "compression_ratio": 1.5517241379310345, "no_caption_prob": 2.5612621357140597e-06}, {"id": 904, "seek": 351138, "start": 3530.98, "end": 3531.98, "text": " Yeah.", "tokens": [50364, 407, 1071, 551, 286, 600, 5694, 307, 300, 257, 688, 295, 613, 1333, 295, 463, 427, 712, 21445, 486, 485, 50724, 50724, 286, 914, 11, 498, 291, 362, 4471, 17, 11, 437, 393, 291, 28446, 490, 309, 30, 50962, 50962, 509, 2835, 300, 291, 393, 485, 51040, 51040, 663, 307, 12066, 13, 51090, 51090, 440, 1623, 291, 5366, 4471, 17, 11, 370, 867, 721, 1813, 1944, 13, 51344, 51344, 865, 13, 51394, 51394, 467, 311, 1238, 10654, 13, 51444, 51444, 1485, 295, 264, 721, 300, 286, 600, 668, 884, 11, 286, 600, 658, 341, 441, 15168, 5093, 21156, 278, 6405, 293, 286, 600, 51794, 51794], "temperature": 0.0, "avg_logprob": -0.2146427297146521, "compression_ratio": 1.5517241379310345, "no_caption_prob": 2.5612621357140597e-06}, {"id": 905, "seek": 351138, "start": 3531.98, "end": 3532.98, "text": " It's pretty neat.", "tokens": [50364, 407, 1071, 551, 286, 600, 5694, 307, 300, 257, 688, 295, 613, 1333, 295, 463, 427, 712, 21445, 486, 485, 50724, 50724, 286, 914, 11, 498, 291, 362, 4471, 17, 11, 437, 393, 291, 28446, 490, 309, 30, 50962, 50962, 509, 2835, 300, 291, 393, 485, 51040, 51040, 663, 307, 12066, 13, 51090, 51090, 440, 1623, 291, 5366, 4471, 17, 11, 370, 867, 721, 1813, 1944, 13, 51344, 51344, 865, 13, 51394, 51394, 467, 311, 1238, 10654, 13, 51444, 51444, 1485, 295, 264, 721, 300, 286, 600, 668, 884, 11, 286, 600, 658, 341, 441, 15168, 5093, 21156, 278, 6405, 293, 286, 600, 51794, 51794], "temperature": 0.0, "avg_logprob": -0.2146427297146521, "compression_ratio": 1.5517241379310345, "no_caption_prob": 2.5612621357140597e-06}, {"id": 906, "seek": 351138, "start": 3532.98, "end": 3539.98, "text": " One of the things that I've been doing, I've got this LMarkdown parsing library and I've", "tokens": [50364, 407, 1071, 551, 286, 600, 5694, 307, 300, 257, 688, 295, 613, 1333, 295, 463, 427, 712, 21445, 486, 485, 50724, 50724, 286, 914, 11, 498, 291, 362, 4471, 17, 11, 437, 393, 291, 28446, 490, 309, 30, 50962, 50962, 509, 2835, 300, 291, 393, 485, 51040, 51040, 663, 307, 12066, 13, 51090, 51090, 440, 1623, 291, 5366, 4471, 17, 11, 370, 867, 721, 1813, 1944, 13, 51344, 51344, 865, 13, 51394, 51394, 467, 311, 1238, 10654, 13, 51444, 51444, 1485, 295, 264, 721, 300, 286, 600, 668, 884, 11, 286, 600, 658, 341, 441, 15168, 5093, 21156, 278, 6405, 293, 286, 600, 51794, 51794], "temperature": 0.0, "avg_logprob": -0.2146427297146521, "compression_ratio": 1.5517241379310345, "no_caption_prob": 2.5612621357140597e-06}, {"id": 907, "seek": 353998, "start": 3539.98, "end": 3545.26, "text": " had a lot of fun building up transformations because it's really fun in a typed language", "tokens": [50364, 632, 257, 688, 295, 1019, 2390, 493, 34852, 570, 309, 311, 534, 1019, 294, 257, 33941, 2856, 50628, 50628, 281, 2028, 365, 604, 1333, 295, 12649, 28431, 4230, 11, 1968, 309, 311, 3934, 5093, 420, 746, 1646, 13, 50954, 50954, 407, 286, 478, 5006, 2059, 884, 7705, 689, 291, 528, 281, 1207, 264, 1230, 295, 1378, 1109, 420, 51264, 51264, 291, 528, 281, 747, 439, 295, 264, 1496, 732, 1378, 1109, 293, 7983, 729, 13, 51590, 51590], "temperature": 0.0, "avg_logprob": -0.1219281667395483, "compression_ratio": 1.5761904761904761, "no_caption_prob": 2.3552200218546204e-05}, {"id": 908, "seek": 353998, "start": 3545.26, "end": 3551.78, "text": " to deal with any sort of abstract syntax tree, whether it's Markdown or something else.", "tokens": [50364, 632, 257, 688, 295, 1019, 2390, 493, 34852, 570, 309, 311, 534, 1019, 294, 257, 33941, 2856, 50628, 50628, 281, 2028, 365, 604, 1333, 295, 12649, 28431, 4230, 11, 1968, 309, 311, 3934, 5093, 420, 746, 1646, 13, 50954, 50954, 407, 286, 478, 5006, 2059, 884, 7705, 689, 291, 528, 281, 1207, 264, 1230, 295, 1378, 1109, 420, 51264, 51264, 291, 528, 281, 747, 439, 295, 264, 1496, 732, 1378, 1109, 293, 7983, 729, 13, 51590, 51590], "temperature": 0.0, "avg_logprob": -0.1219281667395483, "compression_ratio": 1.5761904761904761, "no_caption_prob": 2.3552200218546204e-05}, {"id": 909, "seek": 353998, "start": 3551.78, "end": 3557.98, "text": " So I'm finding myself doing operations where you want to count the number of headings or", "tokens": [50364, 632, 257, 688, 295, 1019, 2390, 493, 34852, 570, 309, 311, 534, 1019, 294, 257, 33941, 2856, 50628, 50628, 281, 2028, 365, 604, 1333, 295, 12649, 28431, 4230, 11, 1968, 309, 311, 3934, 5093, 420, 746, 1646, 13, 50954, 50954, 407, 286, 478, 5006, 2059, 884, 7705, 689, 291, 528, 281, 1207, 264, 1230, 295, 1378, 1109, 420, 51264, 51264, 291, 528, 281, 747, 439, 295, 264, 1496, 732, 1378, 1109, 293, 7983, 729, 13, 51590, 51590], "temperature": 0.0, "avg_logprob": -0.1219281667395483, "compression_ratio": 1.5761904761904761, "no_caption_prob": 2.3552200218546204e-05}, {"id": 910, "seek": 353998, "start": 3557.98, "end": 3564.5, "text": " you want to take all of the level two headings and capture those.", "tokens": [50364, 632, 257, 688, 295, 1019, 2390, 493, 34852, 570, 309, 311, 534, 1019, 294, 257, 33941, 2856, 50628, 50628, 281, 2028, 365, 604, 1333, 295, 12649, 28431, 4230, 11, 1968, 309, 311, 3934, 5093, 420, 746, 1646, 13, 50954, 50954, 407, 286, 478, 5006, 2059, 884, 7705, 689, 291, 528, 281, 1207, 264, 1230, 295, 1378, 1109, 420, 51264, 51264, 291, 528, 281, 747, 439, 295, 264, 1496, 732, 1378, 1109, 293, 7983, 729, 13, 51590, 51590], "temperature": 0.0, "avg_logprob": -0.1219281667395483, "compression_ratio": 1.5761904761904761, "no_caption_prob": 2.3552200218546204e-05}, {"id": 911, "seek": 356450, "start": 3564.5, "end": 3569.88, "text": " So that's like, you might want to do like a fold left over them and that's just derived", "tokens": [50364, 407, 300, 311, 411, 11, 291, 1062, 528, 281, 360, 411, 257, 4860, 1411, 670, 552, 293, 300, 311, 445, 18949, 50633, 50633, 490, 4471, 17, 420, 291, 1062, 528, 281, 485, 50788, 50788, 1042, 11, 264, 4860, 307, 406, 18949, 490, 4471, 17, 13, 50958, 50958, 467, 307, 1080, 1065, 551, 11, 457, 456, 311, 257, 6562, 295, 4860, 293, 4471, 17, 300, 3643, 534, 11, 534, 51250, 51250, 4005, 13, 51300, 51300, 286, 519, 300, 311, 437, 291, 434, 12166, 3030, 13, 51454, 51454, 407, 341, 1709, 5850, 833, 264, 1315, 295, 257, 8310, 420, 9354, 294, 3683, 15148, 13, 51760, 51760], "temperature": 0.0, "avg_logprob": -0.1676996518980782, "compression_ratio": 1.6952789699570816, "no_caption_prob": 1.3211590157879982e-05}, {"id": 912, "seek": 356450, "start": 3569.88, "end": 3572.98, "text": " from map2 or you might want to...", "tokens": [50364, 407, 300, 311, 411, 11, 291, 1062, 528, 281, 360, 411, 257, 4860, 1411, 670, 552, 293, 300, 311, 445, 18949, 50633, 50633, 490, 4471, 17, 420, 291, 1062, 528, 281, 485, 50788, 50788, 1042, 11, 264, 4860, 307, 406, 18949, 490, 4471, 17, 13, 50958, 50958, 467, 307, 1080, 1065, 551, 11, 457, 456, 311, 257, 6562, 295, 4860, 293, 4471, 17, 300, 3643, 534, 11, 534, 51250, 51250, 4005, 13, 51300, 51300, 286, 519, 300, 311, 437, 291, 434, 12166, 3030, 13, 51454, 51454, 407, 341, 1709, 5850, 833, 264, 1315, 295, 257, 8310, 420, 9354, 294, 3683, 15148, 13, 51760, 51760], "temperature": 0.0, "avg_logprob": -0.1676996518980782, "compression_ratio": 1.6952789699570816, "no_caption_prob": 1.3211590157879982e-05}, {"id": 913, "seek": 356450, "start": 3572.98, "end": 3576.38, "text": " Well, the fold is not derived from map2.", "tokens": [50364, 407, 300, 311, 411, 11, 291, 1062, 528, 281, 360, 411, 257, 4860, 1411, 670, 552, 293, 300, 311, 445, 18949, 50633, 50633, 490, 4471, 17, 420, 291, 1062, 528, 281, 485, 50788, 50788, 1042, 11, 264, 4860, 307, 406, 18949, 490, 4471, 17, 13, 50958, 50958, 467, 307, 1080, 1065, 551, 11, 457, 456, 311, 257, 6562, 295, 4860, 293, 4471, 17, 300, 3643, 534, 11, 534, 51250, 51250, 4005, 13, 51300, 51300, 286, 519, 300, 311, 437, 291, 434, 12166, 3030, 13, 51454, 51454, 407, 341, 1709, 5850, 833, 264, 1315, 295, 257, 8310, 420, 9354, 294, 3683, 15148, 13, 51760, 51760], "temperature": 0.0, "avg_logprob": -0.1676996518980782, "compression_ratio": 1.6952789699570816, "no_caption_prob": 1.3211590157879982e-05}, {"id": 914, "seek": 356450, "start": 3576.38, "end": 3582.22, "text": " It is its own thing, but there's a combination of fold and map2 that becomes really, really", "tokens": [50364, 407, 300, 311, 411, 11, 291, 1062, 528, 281, 360, 411, 257, 4860, 1411, 670, 552, 293, 300, 311, 445, 18949, 50633, 50633, 490, 4471, 17, 420, 291, 1062, 528, 281, 485, 50788, 50788, 1042, 11, 264, 4860, 307, 406, 18949, 490, 4471, 17, 13, 50958, 50958, 467, 307, 1080, 1065, 551, 11, 457, 456, 311, 257, 6562, 295, 4860, 293, 4471, 17, 300, 3643, 534, 11, 534, 51250, 51250, 4005, 13, 51300, 51300, 286, 519, 300, 311, 437, 291, 434, 12166, 3030, 13, 51454, 51454, 407, 341, 1709, 5850, 833, 264, 1315, 295, 257, 8310, 420, 9354, 294, 3683, 15148, 13, 51760, 51760], "temperature": 0.0, "avg_logprob": -0.1676996518980782, "compression_ratio": 1.6952789699570816, "no_caption_prob": 1.3211590157879982e-05}, {"id": 915, "seek": 356450, "start": 3582.22, "end": 3583.22, "text": " powerful.", "tokens": [50364, 407, 300, 311, 411, 11, 291, 1062, 528, 281, 360, 411, 257, 4860, 1411, 670, 552, 293, 300, 311, 445, 18949, 50633, 50633, 490, 4471, 17, 420, 291, 1062, 528, 281, 485, 50788, 50788, 1042, 11, 264, 4860, 307, 406, 18949, 490, 4471, 17, 13, 50958, 50958, 467, 307, 1080, 1065, 551, 11, 457, 456, 311, 257, 6562, 295, 4860, 293, 4471, 17, 300, 3643, 534, 11, 534, 51250, 51250, 4005, 13, 51300, 51300, 286, 519, 300, 311, 437, 291, 434, 12166, 3030, 13, 51454, 51454, 407, 341, 1709, 5850, 833, 264, 1315, 295, 257, 8310, 420, 9354, 294, 3683, 15148, 13, 51760, 51760], "temperature": 0.0, "avg_logprob": -0.1676996518980782, "compression_ratio": 1.6952789699570816, "no_caption_prob": 1.3211590157879982e-05}, {"id": 916, "seek": 356450, "start": 3583.22, "end": 3586.3, "text": " I think that's what you're pointing towards.", "tokens": [50364, 407, 300, 311, 411, 11, 291, 1062, 528, 281, 360, 411, 257, 4860, 1411, 670, 552, 293, 300, 311, 445, 18949, 50633, 50633, 490, 4471, 17, 420, 291, 1062, 528, 281, 485, 50788, 50788, 1042, 11, 264, 4860, 307, 406, 18949, 490, 4471, 17, 13, 50958, 50958, 467, 307, 1080, 1065, 551, 11, 457, 456, 311, 257, 6562, 295, 4860, 293, 4471, 17, 300, 3643, 534, 11, 534, 51250, 51250, 4005, 13, 51300, 51300, 286, 519, 300, 311, 437, 291, 434, 12166, 3030, 13, 51454, 51454, 407, 341, 1709, 5850, 833, 264, 1315, 295, 257, 8310, 420, 9354, 294, 3683, 15148, 13, 51760, 51760], "temperature": 0.0, "avg_logprob": -0.1676996518980782, "compression_ratio": 1.6952789699570816, "no_caption_prob": 1.3211590157879982e-05}, {"id": 917, "seek": 356450, "start": 3586.3, "end": 3592.42, "text": " So this goes typically under the name of a sequence or combined in various libraries.", "tokens": [50364, 407, 300, 311, 411, 11, 291, 1062, 528, 281, 360, 411, 257, 4860, 1411, 670, 552, 293, 300, 311, 445, 18949, 50633, 50633, 490, 4471, 17, 420, 291, 1062, 528, 281, 485, 50788, 50788, 1042, 11, 264, 4860, 307, 406, 18949, 490, 4471, 17, 13, 50958, 50958, 467, 307, 1080, 1065, 551, 11, 457, 456, 311, 257, 6562, 295, 4860, 293, 4471, 17, 300, 3643, 534, 11, 534, 51250, 51250, 4005, 13, 51300, 51300, 286, 519, 300, 311, 437, 291, 434, 12166, 3030, 13, 51454, 51454, 407, 341, 1709, 5850, 833, 264, 1315, 295, 257, 8310, 420, 9354, 294, 3683, 15148, 13, 51760, 51760], "temperature": 0.0, "avg_logprob": -0.1676996518980782, "compression_ratio": 1.6952789699570816, "no_caption_prob": 1.3211590157879982e-05}, {"id": 918, "seek": 359242, "start": 3592.42, "end": 3599.62, "text": " But if you have say a list of maybes and you don't want to check each of them individually,", "tokens": [50364, 583, 498, 291, 362, 584, 257, 1329, 295, 815, 6446, 293, 291, 500, 380, 528, 281, 1520, 1184, 295, 552, 16652, 11, 50724, 50724, 291, 584, 11, 976, 385, 646, 445, 472, 2167, 1310, 300, 311, 2139, 1825, 498, 604, 295, 264, 4754, 50993, 50993, 645, 5361, 420, 445, 264, 1329, 295, 439, 264, 1974, 4190, 498, 436, 645, 439, 1974, 13, 51258, 51258, 400, 300, 311, 689, 291, 576, 4860, 4471, 17, 13, 51362, 51362, 286, 600, 1143, 309, 1228, 264, 8607, 1412, 5102, 13, 51495, 51495, 467, 311, 534, 4420, 281, 458, 498, 439, 295, 264, 485, 51606, 51606], "temperature": 0.0, "avg_logprob": -0.13700725962814775, "compression_ratio": 1.6666666666666667, "no_caption_prob": 9.368560313305352e-06}, {"id": 919, "seek": 359242, "start": 3599.62, "end": 3605.0, "text": " you say, give me back just one single maybe that's either nothing if any of the items", "tokens": [50364, 583, 498, 291, 362, 584, 257, 1329, 295, 815, 6446, 293, 291, 500, 380, 528, 281, 1520, 1184, 295, 552, 16652, 11, 50724, 50724, 291, 584, 11, 976, 385, 646, 445, 472, 2167, 1310, 300, 311, 2139, 1825, 498, 604, 295, 264, 4754, 50993, 50993, 645, 5361, 420, 445, 264, 1329, 295, 439, 264, 1974, 4190, 498, 436, 645, 439, 1974, 13, 51258, 51258, 400, 300, 311, 689, 291, 576, 4860, 4471, 17, 13, 51362, 51362, 286, 600, 1143, 309, 1228, 264, 8607, 1412, 5102, 13, 51495, 51495, 467, 311, 534, 4420, 281, 458, 498, 439, 295, 264, 485, 51606, 51606], "temperature": 0.0, "avg_logprob": -0.13700725962814775, "compression_ratio": 1.6666666666666667, "no_caption_prob": 9.368560313305352e-06}, {"id": 920, "seek": 359242, "start": 3605.0, "end": 3610.3, "text": " were missing or just the list of all the present values if they were all present.", "tokens": [50364, 583, 498, 291, 362, 584, 257, 1329, 295, 815, 6446, 293, 291, 500, 380, 528, 281, 1520, 1184, 295, 552, 16652, 11, 50724, 50724, 291, 584, 11, 976, 385, 646, 445, 472, 2167, 1310, 300, 311, 2139, 1825, 498, 604, 295, 264, 4754, 50993, 50993, 645, 5361, 420, 445, 264, 1329, 295, 439, 264, 1974, 4190, 498, 436, 645, 439, 1974, 13, 51258, 51258, 400, 300, 311, 689, 291, 576, 4860, 4471, 17, 13, 51362, 51362, 286, 600, 1143, 309, 1228, 264, 8607, 1412, 5102, 13, 51495, 51495, 467, 311, 534, 4420, 281, 458, 498, 439, 295, 264, 485, 51606, 51606], "temperature": 0.0, "avg_logprob": -0.13700725962814775, "compression_ratio": 1.6666666666666667, "no_caption_prob": 9.368560313305352e-06}, {"id": 921, "seek": 359242, "start": 3610.3, "end": 3612.38, "text": " And that's where you would fold map2.", "tokens": [50364, 583, 498, 291, 362, 584, 257, 1329, 295, 815, 6446, 293, 291, 500, 380, 528, 281, 1520, 1184, 295, 552, 16652, 11, 50724, 50724, 291, 584, 11, 976, 385, 646, 445, 472, 2167, 1310, 300, 311, 2139, 1825, 498, 604, 295, 264, 4754, 50993, 50993, 645, 5361, 420, 445, 264, 1329, 295, 439, 264, 1974, 4190, 498, 436, 645, 439, 1974, 13, 51258, 51258, 400, 300, 311, 689, 291, 576, 4860, 4471, 17, 13, 51362, 51362, 286, 600, 1143, 309, 1228, 264, 8607, 1412, 5102, 13, 51495, 51495, 467, 311, 534, 4420, 281, 458, 498, 439, 295, 264, 485, 51606, 51606], "temperature": 0.0, "avg_logprob": -0.13700725962814775, "compression_ratio": 1.6666666666666667, "no_caption_prob": 9.368560313305352e-06}, {"id": 922, "seek": 359242, "start": 3612.38, "end": 3615.04, "text": " I've used it using the remote data pattern.", "tokens": [50364, 583, 498, 291, 362, 584, 257, 1329, 295, 815, 6446, 293, 291, 500, 380, 528, 281, 1520, 1184, 295, 552, 16652, 11, 50724, 50724, 291, 584, 11, 976, 385, 646, 445, 472, 2167, 1310, 300, 311, 2139, 1825, 498, 604, 295, 264, 4754, 50993, 50993, 645, 5361, 420, 445, 264, 1329, 295, 439, 264, 1974, 4190, 498, 436, 645, 439, 1974, 13, 51258, 51258, 400, 300, 311, 689, 291, 576, 4860, 4471, 17, 13, 51362, 51362, 286, 600, 1143, 309, 1228, 264, 8607, 1412, 5102, 13, 51495, 51495, 467, 311, 534, 4420, 281, 458, 498, 439, 295, 264, 485, 51606, 51606], "temperature": 0.0, "avg_logprob": -0.13700725962814775, "compression_ratio": 1.6666666666666667, "no_caption_prob": 9.368560313305352e-06}, {"id": 923, "seek": 359242, "start": 3615.04, "end": 3617.26, "text": " It's really useful to know if all of the...", "tokens": [50364, 583, 498, 291, 362, 584, 257, 1329, 295, 815, 6446, 293, 291, 500, 380, 528, 281, 1520, 1184, 295, 552, 16652, 11, 50724, 50724, 291, 584, 11, 976, 385, 646, 445, 472, 2167, 1310, 300, 311, 2139, 1825, 498, 604, 295, 264, 4754, 50993, 50993, 645, 5361, 420, 445, 264, 1329, 295, 439, 264, 1974, 4190, 498, 436, 645, 439, 1974, 13, 51258, 51258, 400, 300, 311, 689, 291, 576, 4860, 4471, 17, 13, 51362, 51362, 286, 600, 1143, 309, 1228, 264, 8607, 1412, 5102, 13, 51495, 51495, 467, 311, 534, 4420, 281, 458, 498, 439, 295, 264, 485, 51606, 51606], "temperature": 0.0, "avg_logprob": -0.13700725962814775, "compression_ratio": 1.6666666666666667, "no_caption_prob": 9.368560313305352e-06}, {"id": 924, "seek": 361726, "start": 3617.26, "end": 3622.7400000000002, "text": " If you have a list of remote data values, it's useful to see are they all successful", "tokens": [50364, 759, 291, 362, 257, 1329, 295, 8607, 1412, 4190, 11, 309, 311, 4420, 281, 536, 366, 436, 439, 4406, 50638, 50638, 420, 366, 604, 295, 552, 32110, 420, 7612, 13, 50728, 50728, 407, 309, 2709, 291, 411, 364, 26118, 6558, 295, 439, 613, 6695, 8607, 20377, 13, 51036, 51036, 400, 498, 436, 434, 439, 4406, 11, 550, 291, 483, 257, 1329, 295, 439, 264, 4406, 4190, 13, 51200, 51200, 407, 309, 311, 1687, 11, 1687, 10851, 13, 51310, 51310, 865, 13, 51360, 51360, 25939, 533, 307, 364, 3476, 36133, 13, 51509, 51509, 400, 286, 3811, 291, 434, 1228, 309, 294, 428, 1491, 5093, 21156, 260, 689, 291, 584, 11, 1954, 11, 286, 362, 257, 1329, 295, 51738, 51738, 21156, 433, 13, 51794, 51794], "temperature": 0.0, "avg_logprob": -0.16372682189941407, "compression_ratio": 1.7755905511811023, "no_caption_prob": 3.024126090167556e-05}, {"id": 925, "seek": 361726, "start": 3622.7400000000002, "end": 3624.5400000000004, "text": " or are any of them pending or failed.", "tokens": [50364, 759, 291, 362, 257, 1329, 295, 8607, 1412, 4190, 11, 309, 311, 4420, 281, 536, 366, 436, 439, 4406, 50638, 50638, 420, 366, 604, 295, 552, 32110, 420, 7612, 13, 50728, 50728, 407, 309, 2709, 291, 411, 364, 26118, 6558, 295, 439, 613, 6695, 8607, 20377, 13, 51036, 51036, 400, 498, 436, 434, 439, 4406, 11, 550, 291, 483, 257, 1329, 295, 439, 264, 4406, 4190, 13, 51200, 51200, 407, 309, 311, 1687, 11, 1687, 10851, 13, 51310, 51310, 865, 13, 51360, 51360, 25939, 533, 307, 364, 3476, 36133, 13, 51509, 51509, 400, 286, 3811, 291, 434, 1228, 309, 294, 428, 1491, 5093, 21156, 260, 689, 291, 584, 11, 1954, 11, 286, 362, 257, 1329, 295, 51738, 51738, 21156, 433, 13, 51794, 51794], "temperature": 0.0, "avg_logprob": -0.16372682189941407, "compression_ratio": 1.7755905511811023, "no_caption_prob": 3.024126090167556e-05}, {"id": 926, "seek": 361726, "start": 3624.5400000000004, "end": 3630.7000000000003, "text": " So it gives you like an aggregate status of all these independent remote datas.", "tokens": [50364, 759, 291, 362, 257, 1329, 295, 8607, 1412, 4190, 11, 309, 311, 4420, 281, 536, 366, 436, 439, 4406, 50638, 50638, 420, 366, 604, 295, 552, 32110, 420, 7612, 13, 50728, 50728, 407, 309, 2709, 291, 411, 364, 26118, 6558, 295, 439, 613, 6695, 8607, 20377, 13, 51036, 51036, 400, 498, 436, 434, 439, 4406, 11, 550, 291, 483, 257, 1329, 295, 439, 264, 4406, 4190, 13, 51200, 51200, 407, 309, 311, 1687, 11, 1687, 10851, 13, 51310, 51310, 865, 13, 51360, 51360, 25939, 533, 307, 364, 3476, 36133, 13, 51509, 51509, 400, 286, 3811, 291, 434, 1228, 309, 294, 428, 1491, 5093, 21156, 260, 689, 291, 584, 11, 1954, 11, 286, 362, 257, 1329, 295, 51738, 51738, 21156, 433, 13, 51794, 51794], "temperature": 0.0, "avg_logprob": -0.16372682189941407, "compression_ratio": 1.7755905511811023, "no_caption_prob": 3.024126090167556e-05}, {"id": 927, "seek": 361726, "start": 3630.7000000000003, "end": 3633.98, "text": " And if they're all successful, then you get a list of all the successful values.", "tokens": [50364, 759, 291, 362, 257, 1329, 295, 8607, 1412, 4190, 11, 309, 311, 4420, 281, 536, 366, 436, 439, 4406, 50638, 50638, 420, 366, 604, 295, 552, 32110, 420, 7612, 13, 50728, 50728, 407, 309, 2709, 291, 411, 364, 26118, 6558, 295, 439, 613, 6695, 8607, 20377, 13, 51036, 51036, 400, 498, 436, 434, 439, 4406, 11, 550, 291, 483, 257, 1329, 295, 439, 264, 4406, 4190, 13, 51200, 51200, 407, 309, 311, 1687, 11, 1687, 10851, 13, 51310, 51310, 865, 13, 51360, 51360, 25939, 533, 307, 364, 3476, 36133, 13, 51509, 51509, 400, 286, 3811, 291, 434, 1228, 309, 294, 428, 1491, 5093, 21156, 260, 689, 291, 584, 11, 1954, 11, 286, 362, 257, 1329, 295, 51738, 51738, 21156, 433, 13, 51794, 51794], "temperature": 0.0, "avg_logprob": -0.16372682189941407, "compression_ratio": 1.7755905511811023, "no_caption_prob": 3.024126090167556e-05}, {"id": 928, "seek": 361726, "start": 3633.98, "end": 3636.1800000000003, "text": " So it's super, super convenient.", "tokens": [50364, 759, 291, 362, 257, 1329, 295, 8607, 1412, 4190, 11, 309, 311, 4420, 281, 536, 366, 436, 439, 4406, 50638, 50638, 420, 366, 604, 295, 552, 32110, 420, 7612, 13, 50728, 50728, 407, 309, 2709, 291, 411, 364, 26118, 6558, 295, 439, 613, 6695, 8607, 20377, 13, 51036, 51036, 400, 498, 436, 434, 439, 4406, 11, 550, 291, 483, 257, 1329, 295, 439, 264, 4406, 4190, 13, 51200, 51200, 407, 309, 311, 1687, 11, 1687, 10851, 13, 51310, 51310, 865, 13, 51360, 51360, 25939, 533, 307, 364, 3476, 36133, 13, 51509, 51509, 400, 286, 3811, 291, 434, 1228, 309, 294, 428, 1491, 5093, 21156, 260, 689, 291, 584, 11, 1954, 11, 286, 362, 257, 1329, 295, 51738, 51738, 21156, 433, 13, 51794, 51794], "temperature": 0.0, "avg_logprob": -0.16372682189941407, "compression_ratio": 1.7755905511811023, "no_caption_prob": 3.024126090167556e-05}, {"id": 929, "seek": 361726, "start": 3636.1800000000003, "end": 3637.1800000000003, "text": " Yeah.", "tokens": [50364, 759, 291, 362, 257, 1329, 295, 8607, 1412, 4190, 11, 309, 311, 4420, 281, 536, 366, 436, 439, 4406, 50638, 50638, 420, 366, 604, 295, 552, 32110, 420, 7612, 13, 50728, 50728, 407, 309, 2709, 291, 411, 364, 26118, 6558, 295, 439, 613, 6695, 8607, 20377, 13, 51036, 51036, 400, 498, 436, 434, 439, 4406, 11, 550, 291, 483, 257, 1329, 295, 439, 264, 4406, 4190, 13, 51200, 51200, 407, 309, 311, 1687, 11, 1687, 10851, 13, 51310, 51310, 865, 13, 51360, 51360, 25939, 533, 307, 364, 3476, 36133, 13, 51509, 51509, 400, 286, 3811, 291, 434, 1228, 309, 294, 428, 1491, 5093, 21156, 260, 689, 291, 584, 11, 1954, 11, 286, 362, 257, 1329, 295, 51738, 51738, 21156, 433, 13, 51794, 51794], "temperature": 0.0, "avg_logprob": -0.16372682189941407, "compression_ratio": 1.7755905511811023, "no_caption_prob": 3.024126090167556e-05}, {"id": 930, "seek": 361726, "start": 3637.1800000000003, "end": 3640.1600000000003, "text": " Combine is an awesome helper.", "tokens": [50364, 759, 291, 362, 257, 1329, 295, 8607, 1412, 4190, 11, 309, 311, 4420, 281, 536, 366, 436, 439, 4406, 50638, 50638, 420, 366, 604, 295, 552, 32110, 420, 7612, 13, 50728, 50728, 407, 309, 2709, 291, 411, 364, 26118, 6558, 295, 439, 613, 6695, 8607, 20377, 13, 51036, 51036, 400, 498, 436, 434, 439, 4406, 11, 550, 291, 483, 257, 1329, 295, 439, 264, 4406, 4190, 13, 51200, 51200, 407, 309, 311, 1687, 11, 1687, 10851, 13, 51310, 51310, 865, 13, 51360, 51360, 25939, 533, 307, 364, 3476, 36133, 13, 51509, 51509, 400, 286, 3811, 291, 434, 1228, 309, 294, 428, 1491, 5093, 21156, 260, 689, 291, 584, 11, 1954, 11, 286, 362, 257, 1329, 295, 51738, 51738, 21156, 433, 13, 51794, 51794], "temperature": 0.0, "avg_logprob": -0.16372682189941407, "compression_ratio": 1.7755905511811023, "no_caption_prob": 3.024126090167556e-05}, {"id": 931, "seek": 361726, "start": 3640.1600000000003, "end": 3644.7400000000002, "text": " And I imagine you're using it in your markdown parser where you say, oh, I have a list of", "tokens": [50364, 759, 291, 362, 257, 1329, 295, 8607, 1412, 4190, 11, 309, 311, 4420, 281, 536, 366, 436, 439, 4406, 50638, 50638, 420, 366, 604, 295, 552, 32110, 420, 7612, 13, 50728, 50728, 407, 309, 2709, 291, 411, 364, 26118, 6558, 295, 439, 613, 6695, 8607, 20377, 13, 51036, 51036, 400, 498, 436, 434, 439, 4406, 11, 550, 291, 483, 257, 1329, 295, 439, 264, 4406, 4190, 13, 51200, 51200, 407, 309, 311, 1687, 11, 1687, 10851, 13, 51310, 51310, 865, 13, 51360, 51360, 25939, 533, 307, 364, 3476, 36133, 13, 51509, 51509, 400, 286, 3811, 291, 434, 1228, 309, 294, 428, 1491, 5093, 21156, 260, 689, 291, 584, 11, 1954, 11, 286, 362, 257, 1329, 295, 51738, 51738, 21156, 433, 13, 51794, 51794], "temperature": 0.0, "avg_logprob": -0.16372682189941407, "compression_ratio": 1.7755905511811023, "no_caption_prob": 3.024126090167556e-05}, {"id": 932, "seek": 361726, "start": 3644.7400000000002, "end": 3645.86, "text": " parsers.", "tokens": [50364, 759, 291, 362, 257, 1329, 295, 8607, 1412, 4190, 11, 309, 311, 4420, 281, 536, 366, 436, 439, 4406, 50638, 50638, 420, 366, 604, 295, 552, 32110, 420, 7612, 13, 50728, 50728, 407, 309, 2709, 291, 411, 364, 26118, 6558, 295, 439, 613, 6695, 8607, 20377, 13, 51036, 51036, 400, 498, 436, 434, 439, 4406, 11, 550, 291, 483, 257, 1329, 295, 439, 264, 4406, 4190, 13, 51200, 51200, 407, 309, 311, 1687, 11, 1687, 10851, 13, 51310, 51310, 865, 13, 51360, 51360, 25939, 533, 307, 364, 3476, 36133, 13, 51509, 51509, 400, 286, 3811, 291, 434, 1228, 309, 294, 428, 1491, 5093, 21156, 260, 689, 291, 584, 11, 1954, 11, 286, 362, 257, 1329, 295, 51738, 51738, 21156, 433, 13, 51794, 51794], "temperature": 0.0, "avg_logprob": -0.16372682189941407, "compression_ratio": 1.7755905511811023, "no_caption_prob": 3.024126090167556e-05}, {"id": 933, "seek": 364586, "start": 3645.86, "end": 3648.82, "text": " Can you sort of turn that into a parser that gives me a list of things?", "tokens": [50364, 1664, 291, 1333, 295, 1261, 300, 666, 257, 21156, 260, 300, 2709, 385, 257, 1329, 295, 721, 30, 50512, 50512, 509, 458, 11, 286, 500, 380, 519, 286, 19219, 257, 9354, 2445, 337, 485, 50656, 50656, 583, 1310, 286, 820, 13, 50716, 50716, 583, 286, 669, 294, 2699, 76, 7183, 13, 50868, 50868, 286, 362, 341, 1412, 4009, 9362, 11, 1143, 281, 312, 13437, 33283, 11, 597, 307, 1333, 295, 411, 257, 16694, 1166, 51123, 51123, 3855, 295, 411, 1242, 33283, 1412, 13, 51270, 51270, 407, 309, 311, 406, 257, 5622, 13, 51326, 51326, 467, 311, 746, 300, 291, 393, 1333, 295, 445, 362, 562, 291, 3677, 257, 3028, 13, 51578, 51578, 400, 4033, 11, 10432, 307, 1687, 4961, 456, 570, 291, 603, 362, 439, 613, 819, 1412, 51806, 51806], "temperature": 0.0, "avg_logprob": -0.14085661281238904, "compression_ratio": 1.6305084745762712, "no_caption_prob": 4.495139819482574e-06}, {"id": 934, "seek": 364586, "start": 3648.82, "end": 3651.7000000000003, "text": " You know, I don't think I expose a combined function for...", "tokens": [50364, 1664, 291, 1333, 295, 1261, 300, 666, 257, 21156, 260, 300, 2709, 385, 257, 1329, 295, 721, 30, 50512, 50512, 509, 458, 11, 286, 500, 380, 519, 286, 19219, 257, 9354, 2445, 337, 485, 50656, 50656, 583, 1310, 286, 820, 13, 50716, 50716, 583, 286, 669, 294, 2699, 76, 7183, 13, 50868, 50868, 286, 362, 341, 1412, 4009, 9362, 11, 1143, 281, 312, 13437, 33283, 11, 597, 307, 1333, 295, 411, 257, 16694, 1166, 51123, 51123, 3855, 295, 411, 1242, 33283, 1412, 13, 51270, 51270, 407, 309, 311, 406, 257, 5622, 13, 51326, 51326, 467, 311, 746, 300, 291, 393, 1333, 295, 445, 362, 562, 291, 3677, 257, 3028, 13, 51578, 51578, 400, 4033, 11, 10432, 307, 1687, 4961, 456, 570, 291, 603, 362, 439, 613, 819, 1412, 51806, 51806], "temperature": 0.0, "avg_logprob": -0.14085661281238904, "compression_ratio": 1.6305084745762712, "no_caption_prob": 4.495139819482574e-06}, {"id": 935, "seek": 364586, "start": 3651.7000000000003, "end": 3652.9, "text": " But maybe I should.", "tokens": [50364, 1664, 291, 1333, 295, 1261, 300, 666, 257, 21156, 260, 300, 2709, 385, 257, 1329, 295, 721, 30, 50512, 50512, 509, 458, 11, 286, 500, 380, 519, 286, 19219, 257, 9354, 2445, 337, 485, 50656, 50656, 583, 1310, 286, 820, 13, 50716, 50716, 583, 286, 669, 294, 2699, 76, 7183, 13, 50868, 50868, 286, 362, 341, 1412, 4009, 9362, 11, 1143, 281, 312, 13437, 33283, 11, 597, 307, 1333, 295, 411, 257, 16694, 1166, 51123, 51123, 3855, 295, 411, 1242, 33283, 1412, 13, 51270, 51270, 407, 309, 311, 406, 257, 5622, 13, 51326, 51326, 467, 311, 746, 300, 291, 393, 1333, 295, 445, 362, 562, 291, 3677, 257, 3028, 13, 51578, 51578, 400, 4033, 11, 10432, 307, 1687, 4961, 456, 570, 291, 603, 362, 439, 613, 819, 1412, 51806, 51806], "temperature": 0.0, "avg_logprob": -0.14085661281238904, "compression_ratio": 1.6305084745762712, "no_caption_prob": 4.495139819482574e-06}, {"id": 936, "seek": 364586, "start": 3652.9, "end": 3655.94, "text": " But I am in Elm pages.", "tokens": [50364, 1664, 291, 1333, 295, 1261, 300, 666, 257, 21156, 260, 300, 2709, 385, 257, 1329, 295, 721, 30, 50512, 50512, 509, 458, 11, 286, 500, 380, 519, 286, 19219, 257, 9354, 2445, 337, 485, 50656, 50656, 583, 1310, 286, 820, 13, 50716, 50716, 583, 286, 669, 294, 2699, 76, 7183, 13, 50868, 50868, 286, 362, 341, 1412, 4009, 9362, 11, 1143, 281, 312, 13437, 33283, 11, 597, 307, 1333, 295, 411, 257, 16694, 1166, 51123, 51123, 3855, 295, 411, 1242, 33283, 1412, 13, 51270, 51270, 407, 309, 311, 406, 257, 5622, 13, 51326, 51326, 467, 311, 746, 300, 291, 393, 1333, 295, 445, 362, 562, 291, 3677, 257, 3028, 13, 51578, 51578, 400, 4033, 11, 10432, 307, 1687, 4961, 456, 570, 291, 603, 362, 439, 613, 819, 1412, 51806, 51806], "temperature": 0.0, "avg_logprob": -0.14085661281238904, "compression_ratio": 1.6305084745762712, "no_caption_prob": 4.495139819482574e-06}, {"id": 937, "seek": 364586, "start": 3655.94, "end": 3661.04, "text": " I have this data source API, used to be static HTTP, which is sort of like a declarative", "tokens": [50364, 1664, 291, 1333, 295, 1261, 300, 666, 257, 21156, 260, 300, 2709, 385, 257, 1329, 295, 721, 30, 50512, 50512, 509, 458, 11, 286, 500, 380, 519, 286, 19219, 257, 9354, 2445, 337, 485, 50656, 50656, 583, 1310, 286, 820, 13, 50716, 50716, 583, 286, 669, 294, 2699, 76, 7183, 13, 50868, 50868, 286, 362, 341, 1412, 4009, 9362, 11, 1143, 281, 312, 13437, 33283, 11, 597, 307, 1333, 295, 411, 257, 16694, 1166, 51123, 51123, 3855, 295, 411, 1242, 33283, 1412, 13, 51270, 51270, 407, 309, 311, 406, 257, 5622, 13, 51326, 51326, 467, 311, 746, 300, 291, 393, 1333, 295, 445, 362, 562, 291, 3677, 257, 3028, 13, 51578, 51578, 400, 4033, 11, 10432, 307, 1687, 4961, 456, 570, 291, 603, 362, 439, 613, 819, 1412, 51806, 51806], "temperature": 0.0, "avg_logprob": -0.14085661281238904, "compression_ratio": 1.6305084745762712, "no_caption_prob": 4.495139819482574e-06}, {"id": 938, "seek": 364586, "start": 3661.04, "end": 3663.98, "text": " description of like getting HTTP data.", "tokens": [50364, 1664, 291, 1333, 295, 1261, 300, 666, 257, 21156, 260, 300, 2709, 385, 257, 1329, 295, 721, 30, 50512, 50512, 509, 458, 11, 286, 500, 380, 519, 286, 19219, 257, 9354, 2445, 337, 485, 50656, 50656, 583, 1310, 286, 820, 13, 50716, 50716, 583, 286, 669, 294, 2699, 76, 7183, 13, 50868, 50868, 286, 362, 341, 1412, 4009, 9362, 11, 1143, 281, 312, 13437, 33283, 11, 597, 307, 1333, 295, 411, 257, 16694, 1166, 51123, 51123, 3855, 295, 411, 1242, 33283, 1412, 13, 51270, 51270, 407, 309, 311, 406, 257, 5622, 13, 51326, 51326, 467, 311, 746, 300, 291, 393, 1333, 295, 445, 362, 562, 291, 3677, 257, 3028, 13, 51578, 51578, 400, 4033, 11, 10432, 307, 1687, 4961, 456, 570, 291, 603, 362, 439, 613, 819, 1412, 51806, 51806], "temperature": 0.0, "avg_logprob": -0.14085661281238904, "compression_ratio": 1.6305084745762712, "no_caption_prob": 4.495139819482574e-06}, {"id": 939, "seek": 364586, "start": 3663.98, "end": 3665.1, "text": " So it's not a command.", "tokens": [50364, 1664, 291, 1333, 295, 1261, 300, 666, 257, 21156, 260, 300, 2709, 385, 257, 1329, 295, 721, 30, 50512, 50512, 509, 458, 11, 286, 500, 380, 519, 286, 19219, 257, 9354, 2445, 337, 485, 50656, 50656, 583, 1310, 286, 820, 13, 50716, 50716, 583, 286, 669, 294, 2699, 76, 7183, 13, 50868, 50868, 286, 362, 341, 1412, 4009, 9362, 11, 1143, 281, 312, 13437, 33283, 11, 597, 307, 1333, 295, 411, 257, 16694, 1166, 51123, 51123, 3855, 295, 411, 1242, 33283, 1412, 13, 51270, 51270, 407, 309, 311, 406, 257, 5622, 13, 51326, 51326, 467, 311, 746, 300, 291, 393, 1333, 295, 445, 362, 562, 291, 3677, 257, 3028, 13, 51578, 51578, 400, 4033, 11, 10432, 307, 1687, 4961, 456, 570, 291, 603, 362, 439, 613, 819, 1412, 51806, 51806], "temperature": 0.0, "avg_logprob": -0.14085661281238904, "compression_ratio": 1.6305084745762712, "no_caption_prob": 4.495139819482574e-06}, {"id": 940, "seek": 364586, "start": 3665.1, "end": 3670.1400000000003, "text": " It's something that you can sort of just have when you load a page.", "tokens": [50364, 1664, 291, 1333, 295, 1261, 300, 666, 257, 21156, 260, 300, 2709, 385, 257, 1329, 295, 721, 30, 50512, 50512, 509, 458, 11, 286, 500, 380, 519, 286, 19219, 257, 9354, 2445, 337, 485, 50656, 50656, 583, 1310, 286, 820, 13, 50716, 50716, 583, 286, 669, 294, 2699, 76, 7183, 13, 50868, 50868, 286, 362, 341, 1412, 4009, 9362, 11, 1143, 281, 312, 13437, 33283, 11, 597, 307, 1333, 295, 411, 257, 16694, 1166, 51123, 51123, 3855, 295, 411, 1242, 33283, 1412, 13, 51270, 51270, 407, 309, 311, 406, 257, 5622, 13, 51326, 51326, 467, 311, 746, 300, 291, 393, 1333, 295, 445, 362, 562, 291, 3677, 257, 3028, 13, 51578, 51578, 400, 4033, 11, 10432, 307, 1687, 4961, 456, 570, 291, 603, 362, 439, 613, 819, 1412, 51806, 51806], "temperature": 0.0, "avg_logprob": -0.14085661281238904, "compression_ratio": 1.6305084745762712, "no_caption_prob": 4.495139819482574e-06}, {"id": 941, "seek": 364586, "start": 3670.1400000000003, "end": 3674.7000000000003, "text": " And anyway, combine is super helpful there because you'll have all these different data", "tokens": [50364, 1664, 291, 1333, 295, 1261, 300, 666, 257, 21156, 260, 300, 2709, 385, 257, 1329, 295, 721, 30, 50512, 50512, 509, 458, 11, 286, 500, 380, 519, 286, 19219, 257, 9354, 2445, 337, 485, 50656, 50656, 583, 1310, 286, 820, 13, 50716, 50716, 583, 286, 669, 294, 2699, 76, 7183, 13, 50868, 50868, 286, 362, 341, 1412, 4009, 9362, 11, 1143, 281, 312, 13437, 33283, 11, 597, 307, 1333, 295, 411, 257, 16694, 1166, 51123, 51123, 3855, 295, 411, 1242, 33283, 1412, 13, 51270, 51270, 407, 309, 311, 406, 257, 5622, 13, 51326, 51326, 467, 311, 746, 300, 291, 393, 1333, 295, 445, 362, 562, 291, 3677, 257, 3028, 13, 51578, 51578, 400, 4033, 11, 10432, 307, 1687, 4961, 456, 570, 291, 603, 362, 439, 613, 819, 1412, 51806, 51806], "temperature": 0.0, "avg_logprob": -0.14085661281238904, "compression_ratio": 1.6305084745762712, "no_caption_prob": 4.495139819482574e-06}, {"id": 942, "seek": 367470, "start": 3674.7, "end": 3676.66, "text": " sources that you want to combine into a list.", "tokens": [50364, 7139, 300, 291, 528, 281, 10432, 666, 257, 1329, 13, 50462, 50462, 400, 300, 311, 257, 1687, 13239, 2445, 13, 50552, 50552, 407, 286, 478, 9019, 13, 50602, 50602, 1119, 341, 10432, 420, 307, 309, 8310, 30, 50666, 50666, 663, 307, 7713, 13, 50716, 50716, 286, 519, 415, 311, 1566, 309, 311, 257, 5451, 12732, 13, 50794, 50794, 865, 13, 50844, 50844, 440, 732, 5288, 366, 1143, 294, 2699, 76, 13, 50942, 50942, 407, 337, 1365, 11, 294, 264, 4965, 6405, 11, 456, 311, 257, 5633, 5893, 8310, 11, 597, 2516, 257, 1329, 295, 51176, 51176, 9608, 293, 445, 1333, 295, 2339, 12808, 309, 760, 666, 257, 2167, 5633, 300, 486, 7754, 498, 439, 264, 51380, 51380, 1440, 9608, 7754, 13, 51490, 51490, 583, 291, 1062, 536, 293, 584, 264, 8607, 1412, 286, 519, 4960, 485, 51678, 51678], "temperature": 0.0, "avg_logprob": -0.1779226984296526, "compression_ratio": 1.6843971631205674, "no_caption_prob": 1.593652086739894e-05}, {"id": 943, "seek": 367470, "start": 3676.66, "end": 3678.46, "text": " And that's a super handy function.", "tokens": [50364, 7139, 300, 291, 528, 281, 10432, 666, 257, 1329, 13, 50462, 50462, 400, 300, 311, 257, 1687, 13239, 2445, 13, 50552, 50552, 407, 286, 478, 9019, 13, 50602, 50602, 1119, 341, 10432, 420, 307, 309, 8310, 30, 50666, 50666, 663, 307, 7713, 13, 50716, 50716, 286, 519, 415, 311, 1566, 309, 311, 257, 5451, 12732, 13, 50794, 50794, 865, 13, 50844, 50844, 440, 732, 5288, 366, 1143, 294, 2699, 76, 13, 50942, 50942, 407, 337, 1365, 11, 294, 264, 4965, 6405, 11, 456, 311, 257, 5633, 5893, 8310, 11, 597, 2516, 257, 1329, 295, 51176, 51176, 9608, 293, 445, 1333, 295, 2339, 12808, 309, 760, 666, 257, 2167, 5633, 300, 486, 7754, 498, 439, 264, 51380, 51380, 1440, 9608, 7754, 13, 51490, 51490, 583, 291, 1062, 536, 293, 584, 264, 8607, 1412, 286, 519, 4960, 485, 51678, 51678], "temperature": 0.0, "avg_logprob": -0.1779226984296526, "compression_ratio": 1.6843971631205674, "no_caption_prob": 1.593652086739894e-05}, {"id": 944, "seek": 367470, "start": 3678.46, "end": 3679.46, "text": " So I'm confused.", "tokens": [50364, 7139, 300, 291, 528, 281, 10432, 666, 257, 1329, 13, 50462, 50462, 400, 300, 311, 257, 1687, 13239, 2445, 13, 50552, 50552, 407, 286, 478, 9019, 13, 50602, 50602, 1119, 341, 10432, 420, 307, 309, 8310, 30, 50666, 50666, 663, 307, 7713, 13, 50716, 50716, 286, 519, 415, 311, 1566, 309, 311, 257, 5451, 12732, 13, 50794, 50794, 865, 13, 50844, 50844, 440, 732, 5288, 366, 1143, 294, 2699, 76, 13, 50942, 50942, 407, 337, 1365, 11, 294, 264, 4965, 6405, 11, 456, 311, 257, 5633, 5893, 8310, 11, 597, 2516, 257, 1329, 295, 51176, 51176, 9608, 293, 445, 1333, 295, 2339, 12808, 309, 760, 666, 257, 2167, 5633, 300, 486, 7754, 498, 439, 264, 51380, 51380, 1440, 9608, 7754, 13, 51490, 51490, 583, 291, 1062, 536, 293, 584, 264, 8607, 1412, 286, 519, 4960, 485, 51678, 51678], "temperature": 0.0, "avg_logprob": -0.1779226984296526, "compression_ratio": 1.6843971631205674, "no_caption_prob": 1.593652086739894e-05}, {"id": 945, "seek": 367470, "start": 3679.46, "end": 3680.74, "text": " Is this combine or is it sequence?", "tokens": [50364, 7139, 300, 291, 528, 281, 10432, 666, 257, 1329, 13, 50462, 50462, 400, 300, 311, 257, 1687, 13239, 2445, 13, 50552, 50552, 407, 286, 478, 9019, 13, 50602, 50602, 1119, 341, 10432, 420, 307, 309, 8310, 30, 50666, 50666, 663, 307, 7713, 13, 50716, 50716, 286, 519, 415, 311, 1566, 309, 311, 257, 5451, 12732, 13, 50794, 50794, 865, 13, 50844, 50844, 440, 732, 5288, 366, 1143, 294, 2699, 76, 13, 50942, 50942, 407, 337, 1365, 11, 294, 264, 4965, 6405, 11, 456, 311, 257, 5633, 5893, 8310, 11, 597, 2516, 257, 1329, 295, 51176, 51176, 9608, 293, 445, 1333, 295, 2339, 12808, 309, 760, 666, 257, 2167, 5633, 300, 486, 7754, 498, 439, 264, 51380, 51380, 1440, 9608, 7754, 13, 51490, 51490, 583, 291, 1062, 536, 293, 584, 264, 8607, 1412, 286, 519, 4960, 485, 51678, 51678], "temperature": 0.0, "avg_logprob": -0.1779226984296526, "compression_ratio": 1.6843971631205674, "no_caption_prob": 1.593652086739894e-05}, {"id": 946, "seek": 367470, "start": 3680.74, "end": 3681.74, "text": " That is usual.", "tokens": [50364, 7139, 300, 291, 528, 281, 10432, 666, 257, 1329, 13, 50462, 50462, 400, 300, 311, 257, 1687, 13239, 2445, 13, 50552, 50552, 407, 286, 478, 9019, 13, 50602, 50602, 1119, 341, 10432, 420, 307, 309, 8310, 30, 50666, 50666, 663, 307, 7713, 13, 50716, 50716, 286, 519, 415, 311, 1566, 309, 311, 257, 5451, 12732, 13, 50794, 50794, 865, 13, 50844, 50844, 440, 732, 5288, 366, 1143, 294, 2699, 76, 13, 50942, 50942, 407, 337, 1365, 11, 294, 264, 4965, 6405, 11, 456, 311, 257, 5633, 5893, 8310, 11, 597, 2516, 257, 1329, 295, 51176, 51176, 9608, 293, 445, 1333, 295, 2339, 12808, 309, 760, 666, 257, 2167, 5633, 300, 486, 7754, 498, 439, 264, 51380, 51380, 1440, 9608, 7754, 13, 51490, 51490, 583, 291, 1062, 536, 293, 584, 264, 8607, 1412, 286, 519, 4960, 485, 51678, 51678], "temperature": 0.0, "avg_logprob": -0.1779226984296526, "compression_ratio": 1.6843971631205674, "no_caption_prob": 1.593652086739894e-05}, {"id": 947, "seek": 367470, "start": 3681.74, "end": 3683.2999999999997, "text": " I think he's saying it's a synonym.", "tokens": [50364, 7139, 300, 291, 528, 281, 10432, 666, 257, 1329, 13, 50462, 50462, 400, 300, 311, 257, 1687, 13239, 2445, 13, 50552, 50552, 407, 286, 478, 9019, 13, 50602, 50602, 1119, 341, 10432, 420, 307, 309, 8310, 30, 50666, 50666, 663, 307, 7713, 13, 50716, 50716, 286, 519, 415, 311, 1566, 309, 311, 257, 5451, 12732, 13, 50794, 50794, 865, 13, 50844, 50844, 440, 732, 5288, 366, 1143, 294, 2699, 76, 13, 50942, 50942, 407, 337, 1365, 11, 294, 264, 4965, 6405, 11, 456, 311, 257, 5633, 5893, 8310, 11, 597, 2516, 257, 1329, 295, 51176, 51176, 9608, 293, 445, 1333, 295, 2339, 12808, 309, 760, 666, 257, 2167, 5633, 300, 486, 7754, 498, 439, 264, 51380, 51380, 1440, 9608, 7754, 13, 51490, 51490, 583, 291, 1062, 536, 293, 584, 264, 8607, 1412, 286, 519, 4960, 485, 51678, 51678], "temperature": 0.0, "avg_logprob": -0.1779226984296526, "compression_ratio": 1.6843971631205674, "no_caption_prob": 1.593652086739894e-05}, {"id": 948, "seek": 367470, "start": 3683.2999999999997, "end": 3684.2999999999997, "text": " Yeah.", "tokens": [50364, 7139, 300, 291, 528, 281, 10432, 666, 257, 1329, 13, 50462, 50462, 400, 300, 311, 257, 1687, 13239, 2445, 13, 50552, 50552, 407, 286, 478, 9019, 13, 50602, 50602, 1119, 341, 10432, 420, 307, 309, 8310, 30, 50666, 50666, 663, 307, 7713, 13, 50716, 50716, 286, 519, 415, 311, 1566, 309, 311, 257, 5451, 12732, 13, 50794, 50794, 865, 13, 50844, 50844, 440, 732, 5288, 366, 1143, 294, 2699, 76, 13, 50942, 50942, 407, 337, 1365, 11, 294, 264, 4965, 6405, 11, 456, 311, 257, 5633, 5893, 8310, 11, 597, 2516, 257, 1329, 295, 51176, 51176, 9608, 293, 445, 1333, 295, 2339, 12808, 309, 760, 666, 257, 2167, 5633, 300, 486, 7754, 498, 439, 264, 51380, 51380, 1440, 9608, 7754, 13, 51490, 51490, 583, 291, 1062, 536, 293, 584, 264, 8607, 1412, 286, 519, 4960, 485, 51678, 51678], "temperature": 0.0, "avg_logprob": -0.1779226984296526, "compression_ratio": 1.6843971631205674, "no_caption_prob": 1.593652086739894e-05}, {"id": 949, "seek": 367470, "start": 3684.2999999999997, "end": 3686.2599999999998, "text": " The two names are used in Elm.", "tokens": [50364, 7139, 300, 291, 528, 281, 10432, 666, 257, 1329, 13, 50462, 50462, 400, 300, 311, 257, 1687, 13239, 2445, 13, 50552, 50552, 407, 286, 478, 9019, 13, 50602, 50602, 1119, 341, 10432, 420, 307, 309, 8310, 30, 50666, 50666, 663, 307, 7713, 13, 50716, 50716, 286, 519, 415, 311, 1566, 309, 311, 257, 5451, 12732, 13, 50794, 50794, 865, 13, 50844, 50844, 440, 732, 5288, 366, 1143, 294, 2699, 76, 13, 50942, 50942, 407, 337, 1365, 11, 294, 264, 4965, 6405, 11, 456, 311, 257, 5633, 5893, 8310, 11, 597, 2516, 257, 1329, 295, 51176, 51176, 9608, 293, 445, 1333, 295, 2339, 12808, 309, 760, 666, 257, 2167, 5633, 300, 486, 7754, 498, 439, 264, 51380, 51380, 1440, 9608, 7754, 13, 51490, 51490, 583, 291, 1062, 536, 293, 584, 264, 8607, 1412, 286, 519, 4960, 485, 51678, 51678], "temperature": 0.0, "avg_logprob": -0.1779226984296526, "compression_ratio": 1.6843971631205674, "no_caption_prob": 1.593652086739894e-05}, {"id": 950, "seek": 367470, "start": 3686.2599999999998, "end": 3690.9399999999996, "text": " So for example, in the core library, there's a task dot sequence, which takes a list of", "tokens": [50364, 7139, 300, 291, 528, 281, 10432, 666, 257, 1329, 13, 50462, 50462, 400, 300, 311, 257, 1687, 13239, 2445, 13, 50552, 50552, 407, 286, 478, 9019, 13, 50602, 50602, 1119, 341, 10432, 420, 307, 309, 8310, 30, 50666, 50666, 663, 307, 7713, 13, 50716, 50716, 286, 519, 415, 311, 1566, 309, 311, 257, 5451, 12732, 13, 50794, 50794, 865, 13, 50844, 50844, 440, 732, 5288, 366, 1143, 294, 2699, 76, 13, 50942, 50942, 407, 337, 1365, 11, 294, 264, 4965, 6405, 11, 456, 311, 257, 5633, 5893, 8310, 11, 597, 2516, 257, 1329, 295, 51176, 51176, 9608, 293, 445, 1333, 295, 2339, 12808, 309, 760, 666, 257, 2167, 5633, 300, 486, 7754, 498, 439, 264, 51380, 51380, 1440, 9608, 7754, 13, 51490, 51490, 583, 291, 1062, 536, 293, 584, 264, 8607, 1412, 286, 519, 4960, 485, 51678, 51678], "temperature": 0.0, "avg_logprob": -0.1779226984296526, "compression_ratio": 1.6843971631205674, "no_caption_prob": 1.593652086739894e-05}, {"id": 951, "seek": 367470, "start": 3690.9399999999996, "end": 3695.02, "text": " tasks and just sort of squashes it down into a single task that will succeed if all the", "tokens": [50364, 7139, 300, 291, 528, 281, 10432, 666, 257, 1329, 13, 50462, 50462, 400, 300, 311, 257, 1687, 13239, 2445, 13, 50552, 50552, 407, 286, 478, 9019, 13, 50602, 50602, 1119, 341, 10432, 420, 307, 309, 8310, 30, 50666, 50666, 663, 307, 7713, 13, 50716, 50716, 286, 519, 415, 311, 1566, 309, 311, 257, 5451, 12732, 13, 50794, 50794, 865, 13, 50844, 50844, 440, 732, 5288, 366, 1143, 294, 2699, 76, 13, 50942, 50942, 407, 337, 1365, 11, 294, 264, 4965, 6405, 11, 456, 311, 257, 5633, 5893, 8310, 11, 597, 2516, 257, 1329, 295, 51176, 51176, 9608, 293, 445, 1333, 295, 2339, 12808, 309, 760, 666, 257, 2167, 5633, 300, 486, 7754, 498, 439, 264, 51380, 51380, 1440, 9608, 7754, 13, 51490, 51490, 583, 291, 1062, 536, 293, 584, 264, 8607, 1412, 286, 519, 4960, 485, 51678, 51678], "temperature": 0.0, "avg_logprob": -0.1779226984296526, "compression_ratio": 1.6843971631205674, "no_caption_prob": 1.593652086739894e-05}, {"id": 952, "seek": 367470, "start": 3695.02, "end": 3697.22, "text": " child tasks succeed.", "tokens": [50364, 7139, 300, 291, 528, 281, 10432, 666, 257, 1329, 13, 50462, 50462, 400, 300, 311, 257, 1687, 13239, 2445, 13, 50552, 50552, 407, 286, 478, 9019, 13, 50602, 50602, 1119, 341, 10432, 420, 307, 309, 8310, 30, 50666, 50666, 663, 307, 7713, 13, 50716, 50716, 286, 519, 415, 311, 1566, 309, 311, 257, 5451, 12732, 13, 50794, 50794, 865, 13, 50844, 50844, 440, 732, 5288, 366, 1143, 294, 2699, 76, 13, 50942, 50942, 407, 337, 1365, 11, 294, 264, 4965, 6405, 11, 456, 311, 257, 5633, 5893, 8310, 11, 597, 2516, 257, 1329, 295, 51176, 51176, 9608, 293, 445, 1333, 295, 2339, 12808, 309, 760, 666, 257, 2167, 5633, 300, 486, 7754, 498, 439, 264, 51380, 51380, 1440, 9608, 7754, 13, 51490, 51490, 583, 291, 1062, 536, 293, 584, 264, 8607, 1412, 286, 519, 4960, 485, 51678, 51678], "temperature": 0.0, "avg_logprob": -0.1779226984296526, "compression_ratio": 1.6843971631205674, "no_caption_prob": 1.593652086739894e-05}, {"id": 953, "seek": 367470, "start": 3697.22, "end": 3700.98, "text": " But you might see and say the remote data I think uses...", "tokens": [50364, 7139, 300, 291, 528, 281, 10432, 666, 257, 1329, 13, 50462, 50462, 400, 300, 311, 257, 1687, 13239, 2445, 13, 50552, 50552, 407, 286, 478, 9019, 13, 50602, 50602, 1119, 341, 10432, 420, 307, 309, 8310, 30, 50666, 50666, 663, 307, 7713, 13, 50716, 50716, 286, 519, 415, 311, 1566, 309, 311, 257, 5451, 12732, 13, 50794, 50794, 865, 13, 50844, 50844, 440, 732, 5288, 366, 1143, 294, 2699, 76, 13, 50942, 50942, 407, 337, 1365, 11, 294, 264, 4965, 6405, 11, 456, 311, 257, 5633, 5893, 8310, 11, 597, 2516, 257, 1329, 295, 51176, 51176, 9608, 293, 445, 1333, 295, 2339, 12808, 309, 760, 666, 257, 2167, 5633, 300, 486, 7754, 498, 439, 264, 51380, 51380, 1440, 9608, 7754, 13, 51490, 51490, 583, 291, 1062, 536, 293, 584, 264, 8607, 1412, 286, 519, 4960, 485, 51678, 51678], "temperature": 0.0, "avg_logprob": -0.1779226984296526, "compression_ratio": 1.6843971631205674, "no_caption_prob": 1.593652086739894e-05}, {"id": 954, "seek": 370098, "start": 3700.98, "end": 3705.58, "text": " Actually remote data I think uses from list and then like the result extra maybe extra", "tokens": [50364, 5135, 8607, 1412, 286, 519, 4960, 490, 1329, 293, 550, 411, 264, 1874, 2857, 1310, 2857, 50594, 50594, 764, 10432, 13, 50644, 50644, 865, 13, 50694, 50694, 286, 519, 300, 311, 1310, 472, 295, 264, 37431, 295, 406, 1419, 2010, 5359, 307, 300, 309, 4045, 50990, 50990, 264, 912, 2445, 281, 362, 819, 5288, 11, 597, 2171, 307, 1481, 570, 257, 544, 9274, 51280, 51280, 2685, 1315, 1062, 652, 544, 2020, 294, 264, 4319, 295, 472, 6405, 11, 457, 309, 1669, 309, 1310, 51494, 51494, 257, 707, 857, 6081, 281, 536, 512, 295, 613, 8294, 2108, 3866, 16679, 13, 51780, 51780], "temperature": 0.0, "avg_logprob": -0.1141518713201134, "compression_ratio": 1.662962962962963, "no_caption_prob": 4.2892575038422365e-06}, {"id": 955, "seek": 370098, "start": 3705.58, "end": 3706.58, "text": " use combine.", "tokens": [50364, 5135, 8607, 1412, 286, 519, 4960, 490, 1329, 293, 550, 411, 264, 1874, 2857, 1310, 2857, 50594, 50594, 764, 10432, 13, 50644, 50644, 865, 13, 50694, 50694, 286, 519, 300, 311, 1310, 472, 295, 264, 37431, 295, 406, 1419, 2010, 5359, 307, 300, 309, 4045, 50990, 50990, 264, 912, 2445, 281, 362, 819, 5288, 11, 597, 2171, 307, 1481, 570, 257, 544, 9274, 51280, 51280, 2685, 1315, 1062, 652, 544, 2020, 294, 264, 4319, 295, 472, 6405, 11, 457, 309, 1669, 309, 1310, 51494, 51494, 257, 707, 857, 6081, 281, 536, 512, 295, 613, 8294, 2108, 3866, 16679, 13, 51780, 51780], "temperature": 0.0, "avg_logprob": -0.1141518713201134, "compression_ratio": 1.662962962962963, "no_caption_prob": 4.2892575038422365e-06}, {"id": 956, "seek": 370098, "start": 3706.58, "end": 3707.58, "text": " Yeah.", "tokens": [50364, 5135, 8607, 1412, 286, 519, 4960, 490, 1329, 293, 550, 411, 264, 1874, 2857, 1310, 2857, 50594, 50594, 764, 10432, 13, 50644, 50644, 865, 13, 50694, 50694, 286, 519, 300, 311, 1310, 472, 295, 264, 37431, 295, 406, 1419, 2010, 5359, 307, 300, 309, 4045, 50990, 50990, 264, 912, 2445, 281, 362, 819, 5288, 11, 597, 2171, 307, 1481, 570, 257, 544, 9274, 51280, 51280, 2685, 1315, 1062, 652, 544, 2020, 294, 264, 4319, 295, 472, 6405, 11, 457, 309, 1669, 309, 1310, 51494, 51494, 257, 707, 857, 6081, 281, 536, 512, 295, 613, 8294, 2108, 3866, 16679, 13, 51780, 51780], "temperature": 0.0, "avg_logprob": -0.1141518713201134, "compression_ratio": 1.662962962962963, "no_caption_prob": 4.2892575038422365e-06}, {"id": 957, "seek": 370098, "start": 3707.58, "end": 3713.5, "text": " I think that's maybe one of the disadvantages of not having type classes is that it allows", "tokens": [50364, 5135, 8607, 1412, 286, 519, 4960, 490, 1329, 293, 550, 411, 264, 1874, 2857, 1310, 2857, 50594, 50594, 764, 10432, 13, 50644, 50644, 865, 13, 50694, 50694, 286, 519, 300, 311, 1310, 472, 295, 264, 37431, 295, 406, 1419, 2010, 5359, 307, 300, 309, 4045, 50990, 50990, 264, 912, 2445, 281, 362, 819, 5288, 11, 597, 2171, 307, 1481, 570, 257, 544, 9274, 51280, 51280, 2685, 1315, 1062, 652, 544, 2020, 294, 264, 4319, 295, 472, 6405, 11, 457, 309, 1669, 309, 1310, 51494, 51494, 257, 707, 857, 6081, 281, 536, 512, 295, 613, 8294, 2108, 3866, 16679, 13, 51780, 51780], "temperature": 0.0, "avg_logprob": -0.1141518713201134, "compression_ratio": 1.662962962962963, "no_caption_prob": 4.2892575038422365e-06}, {"id": 958, "seek": 370098, "start": 3713.5, "end": 3719.3, "text": " the same function to have different names, which sometimes is nice because a more domain", "tokens": [50364, 5135, 8607, 1412, 286, 519, 4960, 490, 1329, 293, 550, 411, 264, 1874, 2857, 1310, 2857, 50594, 50594, 764, 10432, 13, 50644, 50644, 865, 13, 50694, 50694, 286, 519, 300, 311, 1310, 472, 295, 264, 37431, 295, 406, 1419, 2010, 5359, 307, 300, 309, 4045, 50990, 50990, 264, 912, 2445, 281, 362, 819, 5288, 11, 597, 2171, 307, 1481, 570, 257, 544, 9274, 51280, 51280, 2685, 1315, 1062, 652, 544, 2020, 294, 264, 4319, 295, 472, 6405, 11, 457, 309, 1669, 309, 1310, 51494, 51494, 257, 707, 857, 6081, 281, 536, 512, 295, 613, 8294, 2108, 3866, 16679, 13, 51780, 51780], "temperature": 0.0, "avg_logprob": -0.1141518713201134, "compression_ratio": 1.662962962962963, "no_caption_prob": 4.2892575038422365e-06}, {"id": 959, "seek": 370098, "start": 3719.3, "end": 3723.58, "text": " specific name might make more sense in the context of one library, but it makes it maybe", "tokens": [50364, 5135, 8607, 1412, 286, 519, 4960, 490, 1329, 293, 550, 411, 264, 1874, 2857, 1310, 2857, 50594, 50594, 764, 10432, 13, 50644, 50644, 865, 13, 50694, 50694, 286, 519, 300, 311, 1310, 472, 295, 264, 37431, 295, 406, 1419, 2010, 5359, 307, 300, 309, 4045, 50990, 50990, 264, 912, 2445, 281, 362, 819, 5288, 11, 597, 2171, 307, 1481, 570, 257, 544, 9274, 51280, 51280, 2685, 1315, 1062, 652, 544, 2020, 294, 264, 4319, 295, 472, 6405, 11, 457, 309, 1669, 309, 1310, 51494, 51494, 257, 707, 857, 6081, 281, 536, 512, 295, 613, 8294, 2108, 3866, 16679, 13, 51780, 51780], "temperature": 0.0, "avg_logprob": -0.1141518713201134, "compression_ratio": 1.662962962962963, "no_caption_prob": 4.2892575038422365e-06}, {"id": 960, "seek": 370098, "start": 3723.58, "end": 3729.3, "text": " a little bit harder to see some of these patterns across multiple modules.", "tokens": [50364, 5135, 8607, 1412, 286, 519, 4960, 490, 1329, 293, 550, 411, 264, 1874, 2857, 1310, 2857, 50594, 50594, 764, 10432, 13, 50644, 50644, 865, 13, 50694, 50694, 286, 519, 300, 311, 1310, 472, 295, 264, 37431, 295, 406, 1419, 2010, 5359, 307, 300, 309, 4045, 50990, 50990, 264, 912, 2445, 281, 362, 819, 5288, 11, 597, 2171, 307, 1481, 570, 257, 544, 9274, 51280, 51280, 2685, 1315, 1062, 652, 544, 2020, 294, 264, 4319, 295, 472, 6405, 11, 457, 309, 1669, 309, 1310, 51494, 51494, 257, 707, 857, 6081, 281, 536, 512, 295, 613, 8294, 2108, 3866, 16679, 13, 51780, 51780], "temperature": 0.0, "avg_logprob": -0.1141518713201134, "compression_ratio": 1.662962962962963, "no_caption_prob": 4.2892575038422365e-06}, {"id": 961, "seek": 372930, "start": 3729.3, "end": 3733.78, "text": " Well having type classes wouldn't prevent you from adding a new function that does the", "tokens": [50364, 1042, 1419, 2010, 5359, 2759, 380, 4871, 291, 490, 5127, 257, 777, 2445, 300, 775, 264, 50588, 50588, 912, 551, 4033, 13, 50638, 50638, 583, 309, 576, 24825, 300, 498, 746, 307, 2580, 1166, 11, 309, 1633, 362, 341, 2445, 365, 50886, 50886, 341, 1315, 13, 50936, 50936, 400, 370, 286, 519, 309, 576, 312, 534, 1880, 281, 6839, 411, 1419, 257, 1333, 295, 1768, 51218, 51218, 7684, 295, 364, 2699, 76, 3131, 4978, 689, 291, 393, 1333, 295, 362, 512, 707, 412, 45444, 294, 257, 51594, 51594], "temperature": 0.0, "avg_logprob": -0.11482326719495985, "compression_ratio": 1.6521739130434783, "no_caption_prob": 4.936932327836985e-06}, {"id": 962, "seek": 372930, "start": 3733.78, "end": 3734.78, "text": " same thing anyway.", "tokens": [50364, 1042, 1419, 2010, 5359, 2759, 380, 4871, 291, 490, 5127, 257, 777, 2445, 300, 775, 264, 50588, 50588, 912, 551, 4033, 13, 50638, 50638, 583, 309, 576, 24825, 300, 498, 746, 307, 2580, 1166, 11, 309, 1633, 362, 341, 2445, 365, 50886, 50886, 341, 1315, 13, 50936, 50936, 400, 370, 286, 519, 309, 576, 312, 534, 1880, 281, 6839, 411, 1419, 257, 1333, 295, 1768, 51218, 51218, 7684, 295, 364, 2699, 76, 3131, 4978, 689, 291, 393, 1333, 295, 362, 512, 707, 412, 45444, 294, 257, 51594, 51594], "temperature": 0.0, "avg_logprob": -0.11482326719495985, "compression_ratio": 1.6521739130434783, "no_caption_prob": 4.936932327836985e-06}, {"id": 963, "seek": 372930, "start": 3734.78, "end": 3739.7400000000002, "text": " But it would enforce that if something is applicative, it must have this function with", "tokens": [50364, 1042, 1419, 2010, 5359, 2759, 380, 4871, 291, 490, 5127, 257, 777, 2445, 300, 775, 264, 50588, 50588, 912, 551, 4033, 13, 50638, 50638, 583, 309, 576, 24825, 300, 498, 746, 307, 2580, 1166, 11, 309, 1633, 362, 341, 2445, 365, 50886, 50886, 341, 1315, 13, 50936, 50936, 400, 370, 286, 519, 309, 576, 312, 534, 1880, 281, 6839, 411, 1419, 257, 1333, 295, 1768, 51218, 51218, 7684, 295, 364, 2699, 76, 3131, 4978, 689, 291, 393, 1333, 295, 362, 512, 707, 412, 45444, 294, 257, 51594, 51594], "temperature": 0.0, "avg_logprob": -0.11482326719495985, "compression_ratio": 1.6521739130434783, "no_caption_prob": 4.936932327836985e-06}, {"id": 964, "seek": 372930, "start": 3739.7400000000002, "end": 3740.7400000000002, "text": " this name.", "tokens": [50364, 1042, 1419, 2010, 5359, 2759, 380, 4871, 291, 490, 5127, 257, 777, 2445, 300, 775, 264, 50588, 50588, 912, 551, 4033, 13, 50638, 50638, 583, 309, 576, 24825, 300, 498, 746, 307, 2580, 1166, 11, 309, 1633, 362, 341, 2445, 365, 50886, 50886, 341, 1315, 13, 50936, 50936, 400, 370, 286, 519, 309, 576, 312, 534, 1880, 281, 6839, 411, 1419, 257, 1333, 295, 1768, 51218, 51218, 7684, 295, 364, 2699, 76, 3131, 4978, 689, 291, 393, 1333, 295, 362, 512, 707, 412, 45444, 294, 257, 51594, 51594], "temperature": 0.0, "avg_logprob": -0.11482326719495985, "compression_ratio": 1.6521739130434783, "no_caption_prob": 4.936932327836985e-06}, {"id": 965, "seek": 372930, "start": 3740.7400000000002, "end": 3746.38, "text": " And so I think it would be really interesting to explore like having a sort of community", "tokens": [50364, 1042, 1419, 2010, 5359, 2759, 380, 4871, 291, 490, 5127, 257, 777, 2445, 300, 775, 264, 50588, 50588, 912, 551, 4033, 13, 50638, 50638, 583, 309, 576, 24825, 300, 498, 746, 307, 2580, 1166, 11, 309, 1633, 362, 341, 2445, 365, 50886, 50886, 341, 1315, 13, 50936, 50936, 400, 370, 286, 519, 309, 576, 312, 534, 1880, 281, 6839, 411, 1419, 257, 1333, 295, 1768, 51218, 51218, 7684, 295, 364, 2699, 76, 3131, 4978, 689, 291, 393, 1333, 295, 362, 512, 707, 412, 45444, 294, 257, 51594, 51594], "temperature": 0.0, "avg_logprob": -0.11482326719495985, "compression_ratio": 1.6521739130434783, "no_caption_prob": 4.936932327836985e-06}, {"id": 966, "seek": 372930, "start": 3746.38, "end": 3753.9, "text": " resource of an Elm review rule where you can sort of have some little at directive in a", "tokens": [50364, 1042, 1419, 2010, 5359, 2759, 380, 4871, 291, 490, 5127, 257, 777, 2445, 300, 775, 264, 50588, 50588, 912, 551, 4033, 13, 50638, 50638, 583, 309, 576, 24825, 300, 498, 746, 307, 2580, 1166, 11, 309, 1633, 362, 341, 2445, 365, 50886, 50886, 341, 1315, 13, 50936, 50936, 400, 370, 286, 519, 309, 576, 312, 534, 1880, 281, 6839, 411, 1419, 257, 1333, 295, 1768, 51218, 51218, 7684, 295, 364, 2699, 76, 3131, 4978, 689, 291, 393, 1333, 295, 362, 512, 707, 412, 45444, 294, 257, 51594, 51594], "temperature": 0.0, "avg_logprob": -0.11482326719495985, "compression_ratio": 1.6521739130434783, "no_caption_prob": 4.936932327836985e-06}, {"id": 967, "seek": 375390, "start": 3753.9, "end": 3760.28, "text": " doc comment in a module and say this is applicative or whatever term we want to use.", "tokens": [50364, 3211, 2871, 294, 257, 10088, 293, 584, 341, 307, 2580, 1166, 420, 2035, 1433, 321, 528, 281, 764, 13, 50683, 50683, 583, 445, 281, 1333, 295, 362, 309, 4160, 291, 11, 1954, 11, 457, 291, 500, 380, 19219, 257, 2445, 1315, 281, 341, 13, 50952, 50952, 2704, 291, 4140, 281, 360, 300, 13, 51045, 51045, 407, 1071, 551, 300, 264, 4471, 281, 4045, 293, 321, 1217, 9828, 257, 707, 857, 322, 309, 365, 51262, 51262, 15517, 21445, 293, 21928, 11, 457, 309, 393, 445, 312, 257, 534, 4005, 636, 295, 8924, 493, 3089, 13, 51568, 51568, 400, 286, 632, 341, 12066, 1752, 257, 1339, 646, 13, 51738, 51738], "temperature": 0.0, "avg_logprob": -0.16005037481134587, "compression_ratio": 1.562043795620438, "no_caption_prob": 8.397870260523632e-06}, {"id": 968, "seek": 375390, "start": 3760.28, "end": 3765.6600000000003, "text": " But just to sort of have it remind you, oh, but you don't expose a function name to this.", "tokens": [50364, 3211, 2871, 294, 257, 10088, 293, 584, 341, 307, 2580, 1166, 420, 2035, 1433, 321, 528, 281, 764, 13, 50683, 50683, 583, 445, 281, 1333, 295, 362, 309, 4160, 291, 11, 1954, 11, 457, 291, 500, 380, 19219, 257, 2445, 1315, 281, 341, 13, 50952, 50952, 2704, 291, 4140, 281, 360, 300, 13, 51045, 51045, 407, 1071, 551, 300, 264, 4471, 281, 4045, 293, 321, 1217, 9828, 257, 707, 857, 322, 309, 365, 51262, 51262, 15517, 21445, 293, 21928, 11, 457, 309, 393, 445, 312, 257, 534, 4005, 636, 295, 8924, 493, 3089, 13, 51568, 51568, 400, 286, 632, 341, 12066, 1752, 257, 1339, 646, 13, 51738, 51738], "temperature": 0.0, "avg_logprob": -0.16005037481134587, "compression_ratio": 1.562043795620438, "no_caption_prob": 8.397870260523632e-06}, {"id": 969, "seek": 375390, "start": 3765.6600000000003, "end": 3767.52, "text": " Maybe you meant to do that.", "tokens": [50364, 3211, 2871, 294, 257, 10088, 293, 584, 341, 307, 2580, 1166, 420, 2035, 1433, 321, 528, 281, 764, 13, 50683, 50683, 583, 445, 281, 1333, 295, 362, 309, 4160, 291, 11, 1954, 11, 457, 291, 500, 380, 19219, 257, 2445, 1315, 281, 341, 13, 50952, 50952, 2704, 291, 4140, 281, 360, 300, 13, 51045, 51045, 407, 1071, 551, 300, 264, 4471, 281, 4045, 293, 321, 1217, 9828, 257, 707, 857, 322, 309, 365, 51262, 51262, 15517, 21445, 293, 21928, 11, 457, 309, 393, 445, 312, 257, 534, 4005, 636, 295, 8924, 493, 3089, 13, 51568, 51568, 400, 286, 632, 341, 12066, 1752, 257, 1339, 646, 13, 51738, 51738], "temperature": 0.0, "avg_logprob": -0.16005037481134587, "compression_ratio": 1.562043795620438, "no_caption_prob": 8.397870260523632e-06}, {"id": 970, "seek": 375390, "start": 3767.52, "end": 3771.86, "text": " So another thing that the map to allows and we already touched a little bit on it with", "tokens": [50364, 3211, 2871, 294, 257, 10088, 293, 584, 341, 307, 2580, 1166, 420, 2035, 1433, 321, 528, 281, 764, 13, 50683, 50683, 583, 445, 281, 1333, 295, 362, 309, 4160, 291, 11, 1954, 11, 457, 291, 500, 380, 19219, 257, 2445, 1315, 281, 341, 13, 50952, 50952, 2704, 291, 4140, 281, 360, 300, 13, 51045, 51045, 407, 1071, 551, 300, 264, 4471, 281, 4045, 293, 321, 1217, 9828, 257, 707, 857, 322, 309, 365, 51262, 51262, 15517, 21445, 293, 21928, 11, 457, 309, 393, 445, 312, 257, 534, 4005, 636, 295, 8924, 493, 3089, 13, 51568, 51568, 400, 286, 632, 341, 12066, 1752, 257, 1339, 646, 13, 51738, 51738], "temperature": 0.0, "avg_logprob": -0.16005037481134587, "compression_ratio": 1.562043795620438, "no_caption_prob": 8.397870260523632e-06}, {"id": 971, "seek": 375390, "start": 3771.86, "end": 3777.98, "text": " pipeline APIs and combining, but it can just be a really powerful way of cleaning up code.", "tokens": [50364, 3211, 2871, 294, 257, 10088, 293, 584, 341, 307, 2580, 1166, 420, 2035, 1433, 321, 528, 281, 764, 13, 50683, 50683, 583, 445, 281, 1333, 295, 362, 309, 4160, 291, 11, 1954, 11, 457, 291, 500, 380, 19219, 257, 2445, 1315, 281, 341, 13, 50952, 50952, 2704, 291, 4140, 281, 360, 300, 13, 51045, 51045, 407, 1071, 551, 300, 264, 4471, 281, 4045, 293, 321, 1217, 9828, 257, 707, 857, 322, 309, 365, 51262, 51262, 15517, 21445, 293, 21928, 11, 457, 309, 393, 445, 312, 257, 534, 4005, 636, 295, 8924, 493, 3089, 13, 51568, 51568, 400, 286, 632, 341, 12066, 1752, 257, 1339, 646, 13, 51738, 51738], "temperature": 0.0, "avg_logprob": -0.16005037481134587, "compression_ratio": 1.562043795620438, "no_caption_prob": 8.397870260523632e-06}, {"id": 972, "seek": 375390, "start": 3777.98, "end": 3781.38, "text": " And I had this magical experience a while back.", "tokens": [50364, 3211, 2871, 294, 257, 10088, 293, 584, 341, 307, 2580, 1166, 420, 2035, 1433, 321, 528, 281, 764, 13, 50683, 50683, 583, 445, 281, 1333, 295, 362, 309, 4160, 291, 11, 1954, 11, 457, 291, 500, 380, 19219, 257, 2445, 1315, 281, 341, 13, 50952, 50952, 2704, 291, 4140, 281, 360, 300, 13, 51045, 51045, 407, 1071, 551, 300, 264, 4471, 281, 4045, 293, 321, 1217, 9828, 257, 707, 857, 322, 309, 365, 51262, 51262, 15517, 21445, 293, 21928, 11, 457, 309, 393, 445, 312, 257, 534, 4005, 636, 295, 8924, 493, 3089, 13, 51568, 51568, 400, 286, 632, 341, 12066, 1752, 257, 1339, 646, 13, 51738, 51738], "temperature": 0.0, "avg_logprob": -0.16005037481134587, "compression_ratio": 1.562043795620438, "no_caption_prob": 8.397870260523632e-06}, {"id": 973, "seek": 378138, "start": 3781.38, "end": 3786.02, "text": " I was helping somebody else on a JavaScript project where they needed to parse sort of", "tokens": [50364, 286, 390, 4315, 2618, 1646, 322, 257, 15778, 1716, 689, 436, 2978, 281, 48377, 1333, 295, 50596, 50596, 411, 19060, 3758, 30546, 11, 597, 366, 544, 420, 1570, 445, 411, 46969, 6828, 300, 393, 50910, 50910, 312, 15646, 292, 19071, 3289, 13, 50984, 50984, 400, 321, 1361, 493, 365, 746, 300, 311, 257, 707, 857, 596, 25837, 13, 51062, 51062, 286, 519, 309, 1062, 600, 668, 512, 733, 295, 20560, 488, 2445, 300, 576, 14732, 257, 6798, 293, 853, 51300, 51300, 281, 1322, 257, 4230, 484, 295, 309, 13, 51474, 51474, 400, 286, 17055, 498, 286, 727, 360, 746, 294, 2699, 76, 300, 576, 312, 22842, 13, 51634, 51634], "temperature": 0.0, "avg_logprob": -0.09818510966258007, "compression_ratio": 1.6058394160583942, "no_caption_prob": 2.260302835566108e-06}, {"id": 974, "seek": 378138, "start": 3786.02, "end": 3792.3, "text": " like Excel style formulas, which are more or less just like prefix functions that can", "tokens": [50364, 286, 390, 4315, 2618, 1646, 322, 257, 15778, 1716, 689, 436, 2978, 281, 48377, 1333, 295, 50596, 50596, 411, 19060, 3758, 30546, 11, 597, 366, 544, 420, 1570, 445, 411, 46969, 6828, 300, 393, 50910, 50910, 312, 15646, 292, 19071, 3289, 13, 50984, 50984, 400, 321, 1361, 493, 365, 746, 300, 311, 257, 707, 857, 596, 25837, 13, 51062, 51062, 286, 519, 309, 1062, 600, 668, 512, 733, 295, 20560, 488, 2445, 300, 576, 14732, 257, 6798, 293, 853, 51300, 51300, 281, 1322, 257, 4230, 484, 295, 309, 13, 51474, 51474, 400, 286, 17055, 498, 286, 727, 360, 746, 294, 2699, 76, 300, 576, 312, 22842, 13, 51634, 51634], "temperature": 0.0, "avg_logprob": -0.09818510966258007, "compression_ratio": 1.6058394160583942, "no_caption_prob": 2.260302835566108e-06}, {"id": 975, "seek": 378138, "start": 3792.3, "end": 3793.78, "text": " be nested arbitrarily.", "tokens": [50364, 286, 390, 4315, 2618, 1646, 322, 257, 15778, 1716, 689, 436, 2978, 281, 48377, 1333, 295, 50596, 50596, 411, 19060, 3758, 30546, 11, 597, 366, 544, 420, 1570, 445, 411, 46969, 6828, 300, 393, 50910, 50910, 312, 15646, 292, 19071, 3289, 13, 50984, 50984, 400, 321, 1361, 493, 365, 746, 300, 311, 257, 707, 857, 596, 25837, 13, 51062, 51062, 286, 519, 309, 1062, 600, 668, 512, 733, 295, 20560, 488, 2445, 300, 576, 14732, 257, 6798, 293, 853, 51300, 51300, 281, 1322, 257, 4230, 484, 295, 309, 13, 51474, 51474, 400, 286, 17055, 498, 286, 727, 360, 746, 294, 2699, 76, 300, 576, 312, 22842, 13, 51634, 51634], "temperature": 0.0, "avg_logprob": -0.09818510966258007, "compression_ratio": 1.6058394160583942, "no_caption_prob": 2.260302835566108e-06}, {"id": 976, "seek": 378138, "start": 3793.78, "end": 3795.34, "text": " And we came up with something that's a little bit clunky.", "tokens": [50364, 286, 390, 4315, 2618, 1646, 322, 257, 15778, 1716, 689, 436, 2978, 281, 48377, 1333, 295, 50596, 50596, 411, 19060, 3758, 30546, 11, 597, 366, 544, 420, 1570, 445, 411, 46969, 6828, 300, 393, 50910, 50910, 312, 15646, 292, 19071, 3289, 13, 50984, 50984, 400, 321, 1361, 493, 365, 746, 300, 311, 257, 707, 857, 596, 25837, 13, 51062, 51062, 286, 519, 309, 1062, 600, 668, 512, 733, 295, 20560, 488, 2445, 300, 576, 14732, 257, 6798, 293, 853, 51300, 51300, 281, 1322, 257, 4230, 484, 295, 309, 13, 51474, 51474, 400, 286, 17055, 498, 286, 727, 360, 746, 294, 2699, 76, 300, 576, 312, 22842, 13, 51634, 51634], "temperature": 0.0, "avg_logprob": -0.09818510966258007, "compression_ratio": 1.6058394160583942, "no_caption_prob": 2.260302835566108e-06}, {"id": 977, "seek": 378138, "start": 3795.34, "end": 3800.1, "text": " I think it might've been some kind of recursive function that would consume a string and try", "tokens": [50364, 286, 390, 4315, 2618, 1646, 322, 257, 15778, 1716, 689, 436, 2978, 281, 48377, 1333, 295, 50596, 50596, 411, 19060, 3758, 30546, 11, 597, 366, 544, 420, 1570, 445, 411, 46969, 6828, 300, 393, 50910, 50910, 312, 15646, 292, 19071, 3289, 13, 50984, 50984, 400, 321, 1361, 493, 365, 746, 300, 311, 257, 707, 857, 596, 25837, 13, 51062, 51062, 286, 519, 309, 1062, 600, 668, 512, 733, 295, 20560, 488, 2445, 300, 576, 14732, 257, 6798, 293, 853, 51300, 51300, 281, 1322, 257, 4230, 484, 295, 309, 13, 51474, 51474, 400, 286, 17055, 498, 286, 727, 360, 746, 294, 2699, 76, 300, 576, 312, 22842, 13, 51634, 51634], "temperature": 0.0, "avg_logprob": -0.09818510966258007, "compression_ratio": 1.6058394160583942, "no_caption_prob": 2.260302835566108e-06}, {"id": 978, "seek": 378138, "start": 3800.1, "end": 3803.58, "text": " to build a tree out of it.", "tokens": [50364, 286, 390, 4315, 2618, 1646, 322, 257, 15778, 1716, 689, 436, 2978, 281, 48377, 1333, 295, 50596, 50596, 411, 19060, 3758, 30546, 11, 597, 366, 544, 420, 1570, 445, 411, 46969, 6828, 300, 393, 50910, 50910, 312, 15646, 292, 19071, 3289, 13, 50984, 50984, 400, 321, 1361, 493, 365, 746, 300, 311, 257, 707, 857, 596, 25837, 13, 51062, 51062, 286, 519, 309, 1062, 600, 668, 512, 733, 295, 20560, 488, 2445, 300, 576, 14732, 257, 6798, 293, 853, 51300, 51300, 281, 1322, 257, 4230, 484, 295, 309, 13, 51474, 51474, 400, 286, 17055, 498, 286, 727, 360, 746, 294, 2699, 76, 300, 576, 312, 22842, 13, 51634, 51634], "temperature": 0.0, "avg_logprob": -0.09818510966258007, "compression_ratio": 1.6058394160583942, "no_caption_prob": 2.260302835566108e-06}, {"id": 979, "seek": 378138, "start": 3803.58, "end": 3806.78, "text": " And I wondered if I could do something in Elm that would be nicer.", "tokens": [50364, 286, 390, 4315, 2618, 1646, 322, 257, 15778, 1716, 689, 436, 2978, 281, 48377, 1333, 295, 50596, 50596, 411, 19060, 3758, 30546, 11, 597, 366, 544, 420, 1570, 445, 411, 46969, 6828, 300, 393, 50910, 50910, 312, 15646, 292, 19071, 3289, 13, 50984, 50984, 400, 321, 1361, 493, 365, 746, 300, 311, 257, 707, 857, 596, 25837, 13, 51062, 51062, 286, 519, 309, 1062, 600, 668, 512, 733, 295, 20560, 488, 2445, 300, 576, 14732, 257, 6798, 293, 853, 51300, 51300, 281, 1322, 257, 4230, 484, 295, 309, 13, 51474, 51474, 400, 286, 17055, 498, 286, 727, 360, 746, 294, 2699, 76, 300, 576, 312, 22842, 13, 51634, 51634], "temperature": 0.0, "avg_logprob": -0.09818510966258007, "compression_ratio": 1.6058394160583942, "no_caption_prob": 2.260302835566108e-06}, {"id": 980, "seek": 380678, "start": 3806.78, "end": 3811.42, "text": " And I started with just re implementing the same approach that we had in JavaScript in", "tokens": [50364, 400, 286, 1409, 365, 445, 319, 18114, 264, 912, 3109, 300, 321, 632, 294, 15778, 294, 50596, 50596, 2699, 76, 11, 689, 286, 478, 21156, 278, 257, 6798, 13, 50784, 50784, 583, 286, 611, 632, 7268, 264, 917, 295, 257, 1874, 2010, 445, 570, 2699, 76, 575, 300, 293, 15778, 51046, 51046, 1177, 380, 13, 51102, 51102, 407, 1184, 1333, 295, 1823, 286, 576, 853, 281, 48377, 257, 16635, 295, 264, 6798, 293, 550, 2736, 257, 1874, 51392, 51392, 498, 309, 390, 1578, 293, 5911, 1066, 516, 13, 51586, 51586, 400, 309, 390, 341, 7410, 15646, 292, 1389, 6114, 11, 597, 452, 1150, 1823, 390, 1566, 11, 1392, 11, 731, 11, 51842, 51842], "temperature": 0.0, "avg_logprob": -0.1477630781090778, "compression_ratio": 1.6356877323420074, "no_caption_prob": 3.0415690162044484e-06}, {"id": 981, "seek": 380678, "start": 3811.42, "end": 3815.1800000000003, "text": " Elm, where I'm parsing a string.", "tokens": [50364, 400, 286, 1409, 365, 445, 319, 18114, 264, 912, 3109, 300, 321, 632, 294, 15778, 294, 50596, 50596, 2699, 76, 11, 689, 286, 478, 21156, 278, 257, 6798, 13, 50784, 50784, 583, 286, 611, 632, 7268, 264, 917, 295, 257, 1874, 2010, 445, 570, 2699, 76, 575, 300, 293, 15778, 51046, 51046, 1177, 380, 13, 51102, 51102, 407, 1184, 1333, 295, 1823, 286, 576, 853, 281, 48377, 257, 16635, 295, 264, 6798, 293, 550, 2736, 257, 1874, 51392, 51392, 498, 309, 390, 1578, 293, 5911, 1066, 516, 13, 51586, 51586, 400, 309, 390, 341, 7410, 15646, 292, 1389, 6114, 11, 597, 452, 1150, 1823, 390, 1566, 11, 1392, 11, 731, 11, 51842, 51842], "temperature": 0.0, "avg_logprob": -0.1477630781090778, "compression_ratio": 1.6356877323420074, "no_caption_prob": 3.0415690162044484e-06}, {"id": 982, "seek": 380678, "start": 3815.1800000000003, "end": 3820.42, "text": " But I also had introduced the end of a result type just because Elm has that and JavaScript", "tokens": [50364, 400, 286, 1409, 365, 445, 319, 18114, 264, 912, 3109, 300, 321, 632, 294, 15778, 294, 50596, 50596, 2699, 76, 11, 689, 286, 478, 21156, 278, 257, 6798, 13, 50784, 50784, 583, 286, 611, 632, 7268, 264, 917, 295, 257, 1874, 2010, 445, 570, 2699, 76, 575, 300, 293, 15778, 51046, 51046, 1177, 380, 13, 51102, 51102, 407, 1184, 1333, 295, 1823, 286, 576, 853, 281, 48377, 257, 16635, 295, 264, 6798, 293, 550, 2736, 257, 1874, 51392, 51392, 498, 309, 390, 1578, 293, 5911, 1066, 516, 13, 51586, 51586, 400, 309, 390, 341, 7410, 15646, 292, 1389, 6114, 11, 597, 452, 1150, 1823, 390, 1566, 11, 1392, 11, 731, 11, 51842, 51842], "temperature": 0.0, "avg_logprob": -0.1477630781090778, "compression_ratio": 1.6356877323420074, "no_caption_prob": 3.0415690162044484e-06}, {"id": 983, "seek": 380678, "start": 3820.42, "end": 3821.5400000000004, "text": " doesn't.", "tokens": [50364, 400, 286, 1409, 365, 445, 319, 18114, 264, 912, 3109, 300, 321, 632, 294, 15778, 294, 50596, 50596, 2699, 76, 11, 689, 286, 478, 21156, 278, 257, 6798, 13, 50784, 50784, 583, 286, 611, 632, 7268, 264, 917, 295, 257, 1874, 2010, 445, 570, 2699, 76, 575, 300, 293, 15778, 51046, 51046, 1177, 380, 13, 51102, 51102, 407, 1184, 1333, 295, 1823, 286, 576, 853, 281, 48377, 257, 16635, 295, 264, 6798, 293, 550, 2736, 257, 1874, 51392, 51392, 498, 309, 390, 1578, 293, 5911, 1066, 516, 13, 51586, 51586, 400, 309, 390, 341, 7410, 15646, 292, 1389, 6114, 11, 597, 452, 1150, 1823, 390, 1566, 11, 1392, 11, 731, 11, 51842, 51842], "temperature": 0.0, "avg_logprob": -0.1477630781090778, "compression_ratio": 1.6356877323420074, "no_caption_prob": 3.0415690162044484e-06}, {"id": 984, "seek": 380678, "start": 3821.5400000000004, "end": 3827.34, "text": " So each sort of step I would try to parse a chunk of the string and then return a result", "tokens": [50364, 400, 286, 1409, 365, 445, 319, 18114, 264, 912, 3109, 300, 321, 632, 294, 15778, 294, 50596, 50596, 2699, 76, 11, 689, 286, 478, 21156, 278, 257, 6798, 13, 50784, 50784, 583, 286, 611, 632, 7268, 264, 917, 295, 257, 1874, 2010, 445, 570, 2699, 76, 575, 300, 293, 15778, 51046, 51046, 1177, 380, 13, 51102, 51102, 407, 1184, 1333, 295, 1823, 286, 576, 853, 281, 48377, 257, 16635, 295, 264, 6798, 293, 550, 2736, 257, 1874, 51392, 51392, 498, 309, 390, 1578, 293, 5911, 1066, 516, 13, 51586, 51586, 400, 309, 390, 341, 7410, 15646, 292, 1389, 6114, 11, 597, 452, 1150, 1823, 390, 1566, 11, 1392, 11, 731, 11, 51842, 51842], "temperature": 0.0, "avg_logprob": -0.1477630781090778, "compression_ratio": 1.6356877323420074, "no_caption_prob": 3.0415690162044484e-06}, {"id": 985, "seek": 380678, "start": 3827.34, "end": 3831.2200000000003, "text": " if it was bad and otherwise keep going.", "tokens": [50364, 400, 286, 1409, 365, 445, 319, 18114, 264, 912, 3109, 300, 321, 632, 294, 15778, 294, 50596, 50596, 2699, 76, 11, 689, 286, 478, 21156, 278, 257, 6798, 13, 50784, 50784, 583, 286, 611, 632, 7268, 264, 917, 295, 257, 1874, 2010, 445, 570, 2699, 76, 575, 300, 293, 15778, 51046, 51046, 1177, 380, 13, 51102, 51102, 407, 1184, 1333, 295, 1823, 286, 576, 853, 281, 48377, 257, 16635, 295, 264, 6798, 293, 550, 2736, 257, 1874, 51392, 51392, 498, 309, 390, 1578, 293, 5911, 1066, 516, 13, 51586, 51586, 400, 309, 390, 341, 7410, 15646, 292, 1389, 6114, 11, 597, 452, 1150, 1823, 390, 1566, 11, 1392, 11, 731, 11, 51842, 51842], "temperature": 0.0, "avg_logprob": -0.1477630781090778, "compression_ratio": 1.6356877323420074, "no_caption_prob": 3.0415690162044484e-06}, {"id": 986, "seek": 380678, "start": 3831.2200000000003, "end": 3836.34, "text": " And it was this giant nested case expression, which my second step was saying, okay, well,", "tokens": [50364, 400, 286, 1409, 365, 445, 319, 18114, 264, 912, 3109, 300, 321, 632, 294, 15778, 294, 50596, 50596, 2699, 76, 11, 689, 286, 478, 21156, 278, 257, 6798, 13, 50784, 50784, 583, 286, 611, 632, 7268, 264, 917, 295, 257, 1874, 2010, 445, 570, 2699, 76, 575, 300, 293, 15778, 51046, 51046, 1177, 380, 13, 51102, 51102, 407, 1184, 1333, 295, 1823, 286, 576, 853, 281, 48377, 257, 16635, 295, 264, 6798, 293, 550, 2736, 257, 1874, 51392, 51392, 498, 309, 390, 1578, 293, 5911, 1066, 516, 13, 51586, 51586, 400, 309, 390, 341, 7410, 15646, 292, 1389, 6114, 11, 597, 452, 1150, 1823, 390, 1566, 11, 1392, 11, 731, 11, 51842, 51842], "temperature": 0.0, "avg_logprob": -0.1477630781090778, "compression_ratio": 1.6356877323420074, "no_caption_prob": 3.0415690162044484e-06}, {"id": 987, "seek": 383634, "start": 3836.34, "end": 3842.78, "text": " there's a bunch of steps where I can say it can either be a function name, like add or", "tokens": [50364, 456, 311, 257, 3840, 295, 4439, 689, 286, 393, 584, 309, 393, 2139, 312, 257, 2445, 1315, 11, 411, 909, 420, 50686, 50686, 16390, 13, 50736, 50736, 467, 393, 312, 364, 1269, 23350, 9374, 13, 50786, 50786, 467, 393, 312, 364, 7284, 6114, 13, 50888, 50888, 467, 393, 312, 257, 5395, 23350, 9374, 13, 50982, 50982, 400, 729, 645, 439, 15646, 292, 1389, 15277, 13, 51090, 51090, 708, 498, 286, 6902, 552, 484, 666, 6828, 30, 51184, 51184, 400, 370, 286, 6902, 552, 439, 484, 666, 6828, 365, 341, 534, 38284, 13397, 689, 309, 311, 51370, 51370, 411, 6798, 281, 2604, 781, 295, 8877, 6798, 293, 1874, 295, 411, 264, 2010, 321, 600, 21156, 292, 370, 1400, 13, 51792, 51792], "temperature": 0.0, "avg_logprob": -0.14271898738673475, "compression_ratio": 1.853061224489796, "no_caption_prob": 8.801029252936132e-06}, {"id": 988, "seek": 383634, "start": 3842.78, "end": 3843.78, "text": " subtract.", "tokens": [50364, 456, 311, 257, 3840, 295, 4439, 689, 286, 393, 584, 309, 393, 2139, 312, 257, 2445, 1315, 11, 411, 909, 420, 50686, 50686, 16390, 13, 50736, 50736, 467, 393, 312, 364, 1269, 23350, 9374, 13, 50786, 50786, 467, 393, 312, 364, 7284, 6114, 13, 50888, 50888, 467, 393, 312, 257, 5395, 23350, 9374, 13, 50982, 50982, 400, 729, 645, 439, 15646, 292, 1389, 15277, 13, 51090, 51090, 708, 498, 286, 6902, 552, 484, 666, 6828, 30, 51184, 51184, 400, 370, 286, 6902, 552, 439, 484, 666, 6828, 365, 341, 534, 38284, 13397, 689, 309, 311, 51370, 51370, 411, 6798, 281, 2604, 781, 295, 8877, 6798, 293, 1874, 295, 411, 264, 2010, 321, 600, 21156, 292, 370, 1400, 13, 51792, 51792], "temperature": 0.0, "avg_logprob": -0.14271898738673475, "compression_ratio": 1.853061224489796, "no_caption_prob": 8.801029252936132e-06}, {"id": 989, "seek": 383634, "start": 3843.78, "end": 3844.78, "text": " It can be an open parenthesis.", "tokens": [50364, 456, 311, 257, 3840, 295, 4439, 689, 286, 393, 584, 309, 393, 2139, 312, 257, 2445, 1315, 11, 411, 909, 420, 50686, 50686, 16390, 13, 50736, 50736, 467, 393, 312, 364, 1269, 23350, 9374, 13, 50786, 50786, 467, 393, 312, 364, 7284, 6114, 13, 50888, 50888, 467, 393, 312, 257, 5395, 23350, 9374, 13, 50982, 50982, 400, 729, 645, 439, 15646, 292, 1389, 15277, 13, 51090, 51090, 708, 498, 286, 6902, 552, 484, 666, 6828, 30, 51184, 51184, 400, 370, 286, 6902, 552, 439, 484, 666, 6828, 365, 341, 534, 38284, 13397, 689, 309, 311, 51370, 51370, 411, 6798, 281, 2604, 781, 295, 8877, 6798, 293, 1874, 295, 411, 264, 2010, 321, 600, 21156, 292, 370, 1400, 13, 51792, 51792], "temperature": 0.0, "avg_logprob": -0.14271898738673475, "compression_ratio": 1.853061224489796, "no_caption_prob": 8.801029252936132e-06}, {"id": 990, "seek": 383634, "start": 3844.78, "end": 3846.82, "text": " It can be an inner expression.", "tokens": [50364, 456, 311, 257, 3840, 295, 4439, 689, 286, 393, 584, 309, 393, 2139, 312, 257, 2445, 1315, 11, 411, 909, 420, 50686, 50686, 16390, 13, 50736, 50736, 467, 393, 312, 364, 1269, 23350, 9374, 13, 50786, 50786, 467, 393, 312, 364, 7284, 6114, 13, 50888, 50888, 467, 393, 312, 257, 5395, 23350, 9374, 13, 50982, 50982, 400, 729, 645, 439, 15646, 292, 1389, 15277, 13, 51090, 51090, 708, 498, 286, 6902, 552, 484, 666, 6828, 30, 51184, 51184, 400, 370, 286, 6902, 552, 439, 484, 666, 6828, 365, 341, 534, 38284, 13397, 689, 309, 311, 51370, 51370, 411, 6798, 281, 2604, 781, 295, 8877, 6798, 293, 1874, 295, 411, 264, 2010, 321, 600, 21156, 292, 370, 1400, 13, 51792, 51792], "temperature": 0.0, "avg_logprob": -0.14271898738673475, "compression_ratio": 1.853061224489796, "no_caption_prob": 8.801029252936132e-06}, {"id": 991, "seek": 383634, "start": 3846.82, "end": 3848.7000000000003, "text": " It can be a closed parenthesis.", "tokens": [50364, 456, 311, 257, 3840, 295, 4439, 689, 286, 393, 584, 309, 393, 2139, 312, 257, 2445, 1315, 11, 411, 909, 420, 50686, 50686, 16390, 13, 50736, 50736, 467, 393, 312, 364, 1269, 23350, 9374, 13, 50786, 50786, 467, 393, 312, 364, 7284, 6114, 13, 50888, 50888, 467, 393, 312, 257, 5395, 23350, 9374, 13, 50982, 50982, 400, 729, 645, 439, 15646, 292, 1389, 15277, 13, 51090, 51090, 708, 498, 286, 6902, 552, 484, 666, 6828, 30, 51184, 51184, 400, 370, 286, 6902, 552, 439, 484, 666, 6828, 365, 341, 534, 38284, 13397, 689, 309, 311, 51370, 51370, 411, 6798, 281, 2604, 781, 295, 8877, 6798, 293, 1874, 295, 411, 264, 2010, 321, 600, 21156, 292, 370, 1400, 13, 51792, 51792], "temperature": 0.0, "avg_logprob": -0.14271898738673475, "compression_ratio": 1.853061224489796, "no_caption_prob": 8.801029252936132e-06}, {"id": 992, "seek": 383634, "start": 3848.7000000000003, "end": 3850.86, "text": " And those were all nested case expressions.", "tokens": [50364, 456, 311, 257, 3840, 295, 4439, 689, 286, 393, 584, 309, 393, 2139, 312, 257, 2445, 1315, 11, 411, 909, 420, 50686, 50686, 16390, 13, 50736, 50736, 467, 393, 312, 364, 1269, 23350, 9374, 13, 50786, 50786, 467, 393, 312, 364, 7284, 6114, 13, 50888, 50888, 467, 393, 312, 257, 5395, 23350, 9374, 13, 50982, 50982, 400, 729, 645, 439, 15646, 292, 1389, 15277, 13, 51090, 51090, 708, 498, 286, 6902, 552, 484, 666, 6828, 30, 51184, 51184, 400, 370, 286, 6902, 552, 439, 484, 666, 6828, 365, 341, 534, 38284, 13397, 689, 309, 311, 51370, 51370, 411, 6798, 281, 2604, 781, 295, 8877, 6798, 293, 1874, 295, 411, 264, 2010, 321, 600, 21156, 292, 370, 1400, 13, 51792, 51792], "temperature": 0.0, "avg_logprob": -0.14271898738673475, "compression_ratio": 1.853061224489796, "no_caption_prob": 8.801029252936132e-06}, {"id": 993, "seek": 383634, "start": 3850.86, "end": 3852.7400000000002, "text": " What if I broke them out into functions?", "tokens": [50364, 456, 311, 257, 3840, 295, 4439, 689, 286, 393, 584, 309, 393, 2139, 312, 257, 2445, 1315, 11, 411, 909, 420, 50686, 50686, 16390, 13, 50736, 50736, 467, 393, 312, 364, 1269, 23350, 9374, 13, 50786, 50786, 467, 393, 312, 364, 7284, 6114, 13, 50888, 50888, 467, 393, 312, 257, 5395, 23350, 9374, 13, 50982, 50982, 400, 729, 645, 439, 15646, 292, 1389, 15277, 13, 51090, 51090, 708, 498, 286, 6902, 552, 484, 666, 6828, 30, 51184, 51184, 400, 370, 286, 6902, 552, 439, 484, 666, 6828, 365, 341, 534, 38284, 13397, 689, 309, 311, 51370, 51370, 411, 6798, 281, 2604, 781, 295, 8877, 6798, 293, 1874, 295, 411, 264, 2010, 321, 600, 21156, 292, 370, 1400, 13, 51792, 51792], "temperature": 0.0, "avg_logprob": -0.14271898738673475, "compression_ratio": 1.853061224489796, "no_caption_prob": 8.801029252936132e-06}, {"id": 994, "seek": 383634, "start": 3852.7400000000002, "end": 3856.46, "text": " And so I broke them all out into functions with this really tedious signature where it's", "tokens": [50364, 456, 311, 257, 3840, 295, 4439, 689, 286, 393, 584, 309, 393, 2139, 312, 257, 2445, 1315, 11, 411, 909, 420, 50686, 50686, 16390, 13, 50736, 50736, 467, 393, 312, 364, 1269, 23350, 9374, 13, 50786, 50786, 467, 393, 312, 364, 7284, 6114, 13, 50888, 50888, 467, 393, 312, 257, 5395, 23350, 9374, 13, 50982, 50982, 400, 729, 645, 439, 15646, 292, 1389, 15277, 13, 51090, 51090, 708, 498, 286, 6902, 552, 484, 666, 6828, 30, 51184, 51184, 400, 370, 286, 6902, 552, 439, 484, 666, 6828, 365, 341, 534, 38284, 13397, 689, 309, 311, 51370, 51370, 411, 6798, 281, 2604, 781, 295, 8877, 6798, 293, 1874, 295, 411, 264, 2010, 321, 600, 21156, 292, 370, 1400, 13, 51792, 51792], "temperature": 0.0, "avg_logprob": -0.14271898738673475, "compression_ratio": 1.853061224489796, "no_caption_prob": 8.801029252936132e-06}, {"id": 995, "seek": 383634, "start": 3856.46, "end": 3864.9, "text": " like string to tuple of remaining string and result of like the type we've parsed so far.", "tokens": [50364, 456, 311, 257, 3840, 295, 4439, 689, 286, 393, 584, 309, 393, 2139, 312, 257, 2445, 1315, 11, 411, 909, 420, 50686, 50686, 16390, 13, 50736, 50736, 467, 393, 312, 364, 1269, 23350, 9374, 13, 50786, 50786, 467, 393, 312, 364, 7284, 6114, 13, 50888, 50888, 467, 393, 312, 257, 5395, 23350, 9374, 13, 50982, 50982, 400, 729, 645, 439, 15646, 292, 1389, 15277, 13, 51090, 51090, 708, 498, 286, 6902, 552, 484, 666, 6828, 30, 51184, 51184, 400, 370, 286, 6902, 552, 439, 484, 666, 6828, 365, 341, 534, 38284, 13397, 689, 309, 311, 51370, 51370, 411, 6798, 281, 2604, 781, 295, 8877, 6798, 293, 1874, 295, 411, 264, 2010, 321, 600, 21156, 292, 370, 1400, 13, 51792, 51792], "temperature": 0.0, "avg_logprob": -0.14271898738673475, "compression_ratio": 1.853061224489796, "no_caption_prob": 8.801029252936132e-06}, {"id": 996, "seek": 386490, "start": 3864.9, "end": 3867.26, "text": " It was just really tortuous.", "tokens": [50364, 467, 390, 445, 534, 3930, 9179, 563, 13, 50482, 50482, 583, 412, 1935, 309, 24183, 292, 452, 1389, 15277, 257, 707, 857, 570, 586, 439, 295, 264, 7510, 50751, 50751, 645, 5463, 484, 666, 6828, 11, 597, 307, 300, 4978, 295, 37765, 286, 2825, 466, 3071, 11, 50994, 50994, 4994, 884, 3089, 490, 9819, 278, 3089, 13, 51106, 51106, 400, 550, 286, 1409, 16734, 11, 1699, 257, 3456, 11, 341, 13397, 295, 411, 6798, 281, 341, 11232, 51456, 51456, 2604, 781, 3110, 493, 439, 264, 565, 13, 51596, 51596, 400, 498, 321, 519, 466, 309, 11, 300, 311, 8659, 437, 257, 21156, 260, 307, 13, 51778, 51778], "temperature": 0.0, "avg_logprob": -0.11684475470026699, "compression_ratio": 1.6067415730337078, "no_caption_prob": 2.1568062038568314e-06}, {"id": 997, "seek": 386490, "start": 3867.26, "end": 3872.64, "text": " But at least it flattened my case expressions a little bit because now all of the bodies", "tokens": [50364, 467, 390, 445, 534, 3930, 9179, 563, 13, 50482, 50482, 583, 412, 1935, 309, 24183, 292, 452, 1389, 15277, 257, 707, 857, 570, 586, 439, 295, 264, 7510, 50751, 50751, 645, 5463, 484, 666, 6828, 11, 597, 307, 300, 4978, 295, 37765, 286, 2825, 466, 3071, 11, 50994, 50994, 4994, 884, 3089, 490, 9819, 278, 3089, 13, 51106, 51106, 400, 550, 286, 1409, 16734, 11, 1699, 257, 3456, 11, 341, 13397, 295, 411, 6798, 281, 341, 11232, 51456, 51456, 2604, 781, 3110, 493, 439, 264, 565, 13, 51596, 51596, 400, 498, 321, 519, 466, 309, 11, 300, 311, 8659, 437, 257, 21156, 260, 307, 13, 51778, 51778], "temperature": 0.0, "avg_logprob": -0.11684475470026699, "compression_ratio": 1.6067415730337078, "no_caption_prob": 2.1568062038568314e-06}, {"id": 998, "seek": 386490, "start": 3872.64, "end": 3877.5, "text": " were broken out into functions, which is that rule of abstraction I talked about earlier,", "tokens": [50364, 467, 390, 445, 534, 3930, 9179, 563, 13, 50482, 50482, 583, 412, 1935, 309, 24183, 292, 452, 1389, 15277, 257, 707, 857, 570, 586, 439, 295, 264, 7510, 50751, 50751, 645, 5463, 484, 666, 6828, 11, 597, 307, 300, 4978, 295, 37765, 286, 2825, 466, 3071, 11, 50994, 50994, 4994, 884, 3089, 490, 9819, 278, 3089, 13, 51106, 51106, 400, 550, 286, 1409, 16734, 11, 1699, 257, 3456, 11, 341, 13397, 295, 411, 6798, 281, 341, 11232, 51456, 51456, 2604, 781, 3110, 493, 439, 264, 565, 13, 51596, 51596, 400, 498, 321, 519, 466, 309, 11, 300, 311, 8659, 437, 257, 21156, 260, 307, 13, 51778, 51778], "temperature": 0.0, "avg_logprob": -0.11684475470026699, "compression_ratio": 1.6067415730337078, "no_caption_prob": 2.1568062038568314e-06}, {"id": 999, "seek": 386490, "start": 3877.5, "end": 3879.7400000000002, "text": " separate doing code from branching code.", "tokens": [50364, 467, 390, 445, 534, 3930, 9179, 563, 13, 50482, 50482, 583, 412, 1935, 309, 24183, 292, 452, 1389, 15277, 257, 707, 857, 570, 586, 439, 295, 264, 7510, 50751, 50751, 645, 5463, 484, 666, 6828, 11, 597, 307, 300, 4978, 295, 37765, 286, 2825, 466, 3071, 11, 50994, 50994, 4994, 884, 3089, 490, 9819, 278, 3089, 13, 51106, 51106, 400, 550, 286, 1409, 16734, 11, 1699, 257, 3456, 11, 341, 13397, 295, 411, 6798, 281, 341, 11232, 51456, 51456, 2604, 781, 3110, 493, 439, 264, 565, 13, 51596, 51596, 400, 498, 321, 519, 466, 309, 11, 300, 311, 8659, 437, 257, 21156, 260, 307, 13, 51778, 51778], "temperature": 0.0, "avg_logprob": -0.11684475470026699, "compression_ratio": 1.6067415730337078, "no_caption_prob": 2.1568062038568314e-06}, {"id": 1000, "seek": 386490, "start": 3879.7400000000002, "end": 3886.7400000000002, "text": " And then I started realizing, wait a minute, this signature of like string to this awful", "tokens": [50364, 467, 390, 445, 534, 3930, 9179, 563, 13, 50482, 50482, 583, 412, 1935, 309, 24183, 292, 452, 1389, 15277, 257, 707, 857, 570, 586, 439, 295, 264, 7510, 50751, 50751, 645, 5463, 484, 666, 6828, 11, 597, 307, 300, 4978, 295, 37765, 286, 2825, 466, 3071, 11, 50994, 50994, 4994, 884, 3089, 490, 9819, 278, 3089, 13, 51106, 51106, 400, 550, 286, 1409, 16734, 11, 1699, 257, 3456, 11, 341, 13397, 295, 411, 6798, 281, 341, 11232, 51456, 51456, 2604, 781, 3110, 493, 439, 264, 565, 13, 51596, 51596, 400, 498, 321, 519, 466, 309, 11, 300, 311, 8659, 437, 257, 21156, 260, 307, 13, 51778, 51778], "temperature": 0.0, "avg_logprob": -0.11684475470026699, "compression_ratio": 1.6067415730337078, "no_caption_prob": 2.1568062038568314e-06}, {"id": 1001, "seek": 386490, "start": 3886.7400000000002, "end": 3889.54, "text": " tuple shows up all the time.", "tokens": [50364, 467, 390, 445, 534, 3930, 9179, 563, 13, 50482, 50482, 583, 412, 1935, 309, 24183, 292, 452, 1389, 15277, 257, 707, 857, 570, 586, 439, 295, 264, 7510, 50751, 50751, 645, 5463, 484, 666, 6828, 11, 597, 307, 300, 4978, 295, 37765, 286, 2825, 466, 3071, 11, 50994, 50994, 4994, 884, 3089, 490, 9819, 278, 3089, 13, 51106, 51106, 400, 550, 286, 1409, 16734, 11, 1699, 257, 3456, 11, 341, 13397, 295, 411, 6798, 281, 341, 11232, 51456, 51456, 2604, 781, 3110, 493, 439, 264, 565, 13, 51596, 51596, 400, 498, 321, 519, 466, 309, 11, 300, 311, 8659, 437, 257, 21156, 260, 307, 13, 51778, 51778], "temperature": 0.0, "avg_logprob": -0.11684475470026699, "compression_ratio": 1.6067415730337078, "no_caption_prob": 2.1568062038568314e-06}, {"id": 1002, "seek": 386490, "start": 3889.54, "end": 3893.1800000000003, "text": " And if we think about it, that's effectively what a parser is.", "tokens": [50364, 467, 390, 445, 534, 3930, 9179, 563, 13, 50482, 50482, 583, 412, 1935, 309, 24183, 292, 452, 1389, 15277, 257, 707, 857, 570, 586, 439, 295, 264, 7510, 50751, 50751, 645, 5463, 484, 666, 6828, 11, 597, 307, 300, 4978, 295, 37765, 286, 2825, 466, 3071, 11, 50994, 50994, 4994, 884, 3089, 490, 9819, 278, 3089, 13, 51106, 51106, 400, 550, 286, 1409, 16734, 11, 1699, 257, 3456, 11, 341, 13397, 295, 411, 6798, 281, 341, 11232, 51456, 51456, 2604, 781, 3110, 493, 439, 264, 565, 13, 51596, 51596, 400, 498, 321, 519, 466, 309, 11, 300, 311, 8659, 437, 257, 21156, 260, 307, 13, 51778, 51778], "temperature": 0.0, "avg_logprob": -0.11684475470026699, "compression_ratio": 1.6067415730337078, "no_caption_prob": 2.1568062038568314e-06}, {"id": 1003, "seek": 389318, "start": 3893.18, "end": 3899.98, "text": " It's turning a string into some less structured value, in this case a string, into a more", "tokens": [50364, 467, 311, 6246, 257, 6798, 666, 512, 1570, 18519, 2158, 11, 294, 341, 1389, 257, 6798, 11, 666, 257, 544, 50704, 50704, 18519, 2158, 293, 6264, 364, 6713, 11, 597, 307, 983, 286, 632, 300, 1874, 13, 50998, 50998, 400, 294, 341, 1389, 11, 286, 632, 281, 1066, 2837, 295, 264, 8877, 6798, 570, 291, 500, 380, 48377, 1203, 51204, 51204, 439, 412, 1564, 13, 51258, 51258, 400, 370, 286, 1890, 300, 293, 10198, 1937, 309, 281, 21156, 260, 293, 445, 16146, 493, 439, 264, 32322, 13, 51519, 51519, 400, 309, 2956, 257, 688, 22842, 11, 457, 286, 390, 920, 1419, 281, 360, 439, 341, 45109, 281, 1333, 295, 10432, 51811, 51811], "temperature": 0.0, "avg_logprob": -0.10150246871145148, "compression_ratio": 1.784, "no_caption_prob": 3.785316266657901e-06}, {"id": 1004, "seek": 389318, "start": 3899.98, "end": 3905.8599999999997, "text": " structured value and possibly an error, which is why I had that result.", "tokens": [50364, 467, 311, 6246, 257, 6798, 666, 512, 1570, 18519, 2158, 11, 294, 341, 1389, 257, 6798, 11, 666, 257, 544, 50704, 50704, 18519, 2158, 293, 6264, 364, 6713, 11, 597, 307, 983, 286, 632, 300, 1874, 13, 50998, 50998, 400, 294, 341, 1389, 11, 286, 632, 281, 1066, 2837, 295, 264, 8877, 6798, 570, 291, 500, 380, 48377, 1203, 51204, 51204, 439, 412, 1564, 13, 51258, 51258, 400, 370, 286, 1890, 300, 293, 10198, 1937, 309, 281, 21156, 260, 293, 445, 16146, 493, 439, 264, 32322, 13, 51519, 51519, 400, 309, 2956, 257, 688, 22842, 11, 457, 286, 390, 920, 1419, 281, 360, 439, 341, 45109, 281, 1333, 295, 10432, 51811, 51811], "temperature": 0.0, "avg_logprob": -0.10150246871145148, "compression_ratio": 1.784, "no_caption_prob": 3.785316266657901e-06}, {"id": 1005, "seek": 389318, "start": 3905.8599999999997, "end": 3909.98, "text": " And in this case, I had to keep track of the remaining string because you don't parse everything", "tokens": [50364, 467, 311, 6246, 257, 6798, 666, 512, 1570, 18519, 2158, 11, 294, 341, 1389, 257, 6798, 11, 666, 257, 544, 50704, 50704, 18519, 2158, 293, 6264, 364, 6713, 11, 597, 307, 983, 286, 632, 300, 1874, 13, 50998, 50998, 400, 294, 341, 1389, 11, 286, 632, 281, 1066, 2837, 295, 264, 8877, 6798, 570, 291, 500, 380, 48377, 1203, 51204, 51204, 439, 412, 1564, 13, 51258, 51258, 400, 370, 286, 1890, 300, 293, 10198, 1937, 309, 281, 21156, 260, 293, 445, 16146, 493, 439, 264, 32322, 13, 51519, 51519, 400, 309, 2956, 257, 688, 22842, 11, 457, 286, 390, 920, 1419, 281, 360, 439, 341, 45109, 281, 1333, 295, 10432, 51811, 51811], "temperature": 0.0, "avg_logprob": -0.10150246871145148, "compression_ratio": 1.784, "no_caption_prob": 3.785316266657901e-06}, {"id": 1006, "seek": 389318, "start": 3909.98, "end": 3911.06, "text": " all at once.", "tokens": [50364, 467, 311, 6246, 257, 6798, 666, 512, 1570, 18519, 2158, 11, 294, 341, 1389, 257, 6798, 11, 666, 257, 544, 50704, 50704, 18519, 2158, 293, 6264, 364, 6713, 11, 597, 307, 983, 286, 632, 300, 1874, 13, 50998, 50998, 400, 294, 341, 1389, 11, 286, 632, 281, 1066, 2837, 295, 264, 8877, 6798, 570, 291, 500, 380, 48377, 1203, 51204, 51204, 439, 412, 1564, 13, 51258, 51258, 400, 370, 286, 1890, 300, 293, 10198, 1937, 309, 281, 21156, 260, 293, 445, 16146, 493, 439, 264, 32322, 13, 51519, 51519, 400, 309, 2956, 257, 688, 22842, 11, 457, 286, 390, 920, 1419, 281, 360, 439, 341, 45109, 281, 1333, 295, 10432, 51811, 51811], "temperature": 0.0, "avg_logprob": -0.10150246871145148, "compression_ratio": 1.784, "no_caption_prob": 3.785316266657901e-06}, {"id": 1007, "seek": 389318, "start": 3911.06, "end": 3916.2799999999997, "text": " And so I took that and aliased it to parser and just cleaned up all the signatures.", "tokens": [50364, 467, 311, 6246, 257, 6798, 666, 512, 1570, 18519, 2158, 11, 294, 341, 1389, 257, 6798, 11, 666, 257, 544, 50704, 50704, 18519, 2158, 293, 6264, 364, 6713, 11, 597, 307, 983, 286, 632, 300, 1874, 13, 50998, 50998, 400, 294, 341, 1389, 11, 286, 632, 281, 1066, 2837, 295, 264, 8877, 6798, 570, 291, 500, 380, 48377, 1203, 51204, 51204, 439, 412, 1564, 13, 51258, 51258, 400, 370, 286, 1890, 300, 293, 10198, 1937, 309, 281, 21156, 260, 293, 445, 16146, 493, 439, 264, 32322, 13, 51519, 51519, 400, 309, 2956, 257, 688, 22842, 11, 457, 286, 390, 920, 1419, 281, 360, 439, 341, 45109, 281, 1333, 295, 10432, 51811, 51811], "temperature": 0.0, "avg_logprob": -0.10150246871145148, "compression_ratio": 1.784, "no_caption_prob": 3.785316266657901e-06}, {"id": 1008, "seek": 389318, "start": 3916.2799999999997, "end": 3922.12, "text": " And it looked a lot nicer, but I was still having to do all this casing to sort of combine", "tokens": [50364, 467, 311, 6246, 257, 6798, 666, 512, 1570, 18519, 2158, 11, 294, 341, 1389, 257, 6798, 11, 666, 257, 544, 50704, 50704, 18519, 2158, 293, 6264, 364, 6713, 11, 597, 307, 983, 286, 632, 300, 1874, 13, 50998, 50998, 400, 294, 341, 1389, 11, 286, 632, 281, 1066, 2837, 295, 264, 8877, 6798, 570, 291, 500, 380, 48377, 1203, 51204, 51204, 439, 412, 1564, 13, 51258, 51258, 400, 370, 286, 1890, 300, 293, 10198, 1937, 309, 281, 21156, 260, 293, 445, 16146, 493, 439, 264, 32322, 13, 51519, 51519, 400, 309, 2956, 257, 688, 22842, 11, 457, 286, 390, 920, 1419, 281, 360, 439, 341, 45109, 281, 1333, 295, 10432, 51811, 51811], "temperature": 0.0, "avg_logprob": -0.10150246871145148, "compression_ratio": 1.784, "no_caption_prob": 3.785316266657901e-06}, {"id": 1009, "seek": 392212, "start": 3922.12, "end": 3923.42, "text": " the things together.", "tokens": [50364, 264, 721, 1214, 13, 50429, 50429, 639, 307, 689, 264, 1442, 21122, 3719, 516, 766, 13, 50505, 50505, 286, 478, 411, 11, 1699, 257, 3456, 11, 286, 478, 884, 439, 341, 45109, 322, 264, 3542, 11, 439, 322, 341, 411, 2604, 781, 50761, 50761, 1874, 551, 281, 536, 11, 393, 286, 10432, 613, 819, 3755, 1214, 30, 50983, 50983, 26291, 380, 309, 312, 1481, 498, 286, 632, 257, 636, 281, 445, 11, 586, 300, 436, 434, 1219, 21156, 433, 11, 445, 10432, 51193, 51193, 732, 21156, 433, 1214, 30, 51283, 51283, 8239, 11, 727, 286, 6964, 257, 4471, 17, 2445, 30, 51529, 51529, 400, 309, 311, 257, 707, 857, 1575, 22487, 281, 6964, 257, 4471, 17, 2445, 670, 411, 6828, 295, 2604, 2622, 51785, 51785, 295, 3542, 13, 51835, 51835], "temperature": 0.0, "avg_logprob": -0.16135311126708984, "compression_ratio": 1.7472527472527473, "no_caption_prob": 4.400047691888176e-05}, {"id": 1010, "seek": 392212, "start": 3923.42, "end": 3924.94, "text": " This is where the light bulb starts going off.", "tokens": [50364, 264, 721, 1214, 13, 50429, 50429, 639, 307, 689, 264, 1442, 21122, 3719, 516, 766, 13, 50505, 50505, 286, 478, 411, 11, 1699, 257, 3456, 11, 286, 478, 884, 439, 341, 45109, 322, 264, 3542, 11, 439, 322, 341, 411, 2604, 781, 50761, 50761, 1874, 551, 281, 536, 11, 393, 286, 10432, 613, 819, 3755, 1214, 30, 50983, 50983, 26291, 380, 309, 312, 1481, 498, 286, 632, 257, 636, 281, 445, 11, 586, 300, 436, 434, 1219, 21156, 433, 11, 445, 10432, 51193, 51193, 732, 21156, 433, 1214, 30, 51283, 51283, 8239, 11, 727, 286, 6964, 257, 4471, 17, 2445, 30, 51529, 51529, 400, 309, 311, 257, 707, 857, 1575, 22487, 281, 6964, 257, 4471, 17, 2445, 670, 411, 6828, 295, 2604, 2622, 51785, 51785, 295, 3542, 13, 51835, 51835], "temperature": 0.0, "avg_logprob": -0.16135311126708984, "compression_ratio": 1.7472527472527473, "no_caption_prob": 4.400047691888176e-05}, {"id": 1011, "seek": 392212, "start": 3924.94, "end": 3930.06, "text": " I'm like, wait a minute, I'm doing all this casing on the results, all on this like tuple", "tokens": [50364, 264, 721, 1214, 13, 50429, 50429, 639, 307, 689, 264, 1442, 21122, 3719, 516, 766, 13, 50505, 50505, 286, 478, 411, 11, 1699, 257, 3456, 11, 286, 478, 884, 439, 341, 45109, 322, 264, 3542, 11, 439, 322, 341, 411, 2604, 781, 50761, 50761, 1874, 551, 281, 536, 11, 393, 286, 10432, 613, 819, 3755, 1214, 30, 50983, 50983, 26291, 380, 309, 312, 1481, 498, 286, 632, 257, 636, 281, 445, 11, 586, 300, 436, 434, 1219, 21156, 433, 11, 445, 10432, 51193, 51193, 732, 21156, 433, 1214, 30, 51283, 51283, 8239, 11, 727, 286, 6964, 257, 4471, 17, 2445, 30, 51529, 51529, 400, 309, 311, 257, 707, 857, 1575, 22487, 281, 6964, 257, 4471, 17, 2445, 670, 411, 6828, 295, 2604, 2622, 51785, 51785, 295, 3542, 13, 51835, 51835], "temperature": 0.0, "avg_logprob": -0.16135311126708984, "compression_ratio": 1.7472527472527473, "no_caption_prob": 4.400047691888176e-05}, {"id": 1012, "seek": 392212, "start": 3930.06, "end": 3934.5, "text": " result thing to see, can I combine these different pieces together?", "tokens": [50364, 264, 721, 1214, 13, 50429, 50429, 639, 307, 689, 264, 1442, 21122, 3719, 516, 766, 13, 50505, 50505, 286, 478, 411, 11, 1699, 257, 3456, 11, 286, 478, 884, 439, 341, 45109, 322, 264, 3542, 11, 439, 322, 341, 411, 2604, 781, 50761, 50761, 1874, 551, 281, 536, 11, 393, 286, 10432, 613, 819, 3755, 1214, 30, 50983, 50983, 26291, 380, 309, 312, 1481, 498, 286, 632, 257, 636, 281, 445, 11, 586, 300, 436, 434, 1219, 21156, 433, 11, 445, 10432, 51193, 51193, 732, 21156, 433, 1214, 30, 51283, 51283, 8239, 11, 727, 286, 6964, 257, 4471, 17, 2445, 30, 51529, 51529, 400, 309, 311, 257, 707, 857, 1575, 22487, 281, 6964, 257, 4471, 17, 2445, 670, 411, 6828, 295, 2604, 2622, 51785, 51785, 295, 3542, 13, 51835, 51835], "temperature": 0.0, "avg_logprob": -0.16135311126708984, "compression_ratio": 1.7472527472527473, "no_caption_prob": 4.400047691888176e-05}, {"id": 1013, "seek": 392212, "start": 3934.5, "end": 3938.7, "text": " Wouldn't it be nice if I had a way to just, now that they're called parsers, just combine", "tokens": [50364, 264, 721, 1214, 13, 50429, 50429, 639, 307, 689, 264, 1442, 21122, 3719, 516, 766, 13, 50505, 50505, 286, 478, 411, 11, 1699, 257, 3456, 11, 286, 478, 884, 439, 341, 45109, 322, 264, 3542, 11, 439, 322, 341, 411, 2604, 781, 50761, 50761, 1874, 551, 281, 536, 11, 393, 286, 10432, 613, 819, 3755, 1214, 30, 50983, 50983, 26291, 380, 309, 312, 1481, 498, 286, 632, 257, 636, 281, 445, 11, 586, 300, 436, 434, 1219, 21156, 433, 11, 445, 10432, 51193, 51193, 732, 21156, 433, 1214, 30, 51283, 51283, 8239, 11, 727, 286, 6964, 257, 4471, 17, 2445, 30, 51529, 51529, 400, 309, 311, 257, 707, 857, 1575, 22487, 281, 6964, 257, 4471, 17, 2445, 670, 411, 6828, 295, 2604, 2622, 51785, 51785, 295, 3542, 13, 51835, 51835], "temperature": 0.0, "avg_logprob": -0.16135311126708984, "compression_ratio": 1.7472527472527473, "no_caption_prob": 4.400047691888176e-05}, {"id": 1014, "seek": 392212, "start": 3938.7, "end": 3940.5, "text": " two parsers together?", "tokens": [50364, 264, 721, 1214, 13, 50429, 50429, 639, 307, 689, 264, 1442, 21122, 3719, 516, 766, 13, 50505, 50505, 286, 478, 411, 11, 1699, 257, 3456, 11, 286, 478, 884, 439, 341, 45109, 322, 264, 3542, 11, 439, 322, 341, 411, 2604, 781, 50761, 50761, 1874, 551, 281, 536, 11, 393, 286, 10432, 613, 819, 3755, 1214, 30, 50983, 50983, 26291, 380, 309, 312, 1481, 498, 286, 632, 257, 636, 281, 445, 11, 586, 300, 436, 434, 1219, 21156, 433, 11, 445, 10432, 51193, 51193, 732, 21156, 433, 1214, 30, 51283, 51283, 8239, 11, 727, 286, 6964, 257, 4471, 17, 2445, 30, 51529, 51529, 400, 309, 311, 257, 707, 857, 1575, 22487, 281, 6964, 257, 4471, 17, 2445, 670, 411, 6828, 295, 2604, 2622, 51785, 51785, 295, 3542, 13, 51835, 51835], "temperature": 0.0, "avg_logprob": -0.16135311126708984, "compression_ratio": 1.7472527472527473, "no_caption_prob": 4.400047691888176e-05}, {"id": 1015, "seek": 392212, "start": 3940.5, "end": 3945.42, "text": " Hmm, could I define a map2 function?", "tokens": [50364, 264, 721, 1214, 13, 50429, 50429, 639, 307, 689, 264, 1442, 21122, 3719, 516, 766, 13, 50505, 50505, 286, 478, 411, 11, 1699, 257, 3456, 11, 286, 478, 884, 439, 341, 45109, 322, 264, 3542, 11, 439, 322, 341, 411, 2604, 781, 50761, 50761, 1874, 551, 281, 536, 11, 393, 286, 10432, 613, 819, 3755, 1214, 30, 50983, 50983, 26291, 380, 309, 312, 1481, 498, 286, 632, 257, 636, 281, 445, 11, 586, 300, 436, 434, 1219, 21156, 433, 11, 445, 10432, 51193, 51193, 732, 21156, 433, 1214, 30, 51283, 51283, 8239, 11, 727, 286, 6964, 257, 4471, 17, 2445, 30, 51529, 51529, 400, 309, 311, 257, 707, 857, 1575, 22487, 281, 6964, 257, 4471, 17, 2445, 670, 411, 6828, 295, 2604, 2622, 51785, 51785, 295, 3542, 13, 51835, 51835], "temperature": 0.0, "avg_logprob": -0.16135311126708984, "compression_ratio": 1.7472527472527473, "no_caption_prob": 4.400047691888176e-05}, {"id": 1016, "seek": 392212, "start": 3945.42, "end": 3950.54, "text": " And it's a little bit mind bending to define a map2 function over like functions of tuples", "tokens": [50364, 264, 721, 1214, 13, 50429, 50429, 639, 307, 689, 264, 1442, 21122, 3719, 516, 766, 13, 50505, 50505, 286, 478, 411, 11, 1699, 257, 3456, 11, 286, 478, 884, 439, 341, 45109, 322, 264, 3542, 11, 439, 322, 341, 411, 2604, 781, 50761, 50761, 1874, 551, 281, 536, 11, 393, 286, 10432, 613, 819, 3755, 1214, 30, 50983, 50983, 26291, 380, 309, 312, 1481, 498, 286, 632, 257, 636, 281, 445, 11, 586, 300, 436, 434, 1219, 21156, 433, 11, 445, 10432, 51193, 51193, 732, 21156, 433, 1214, 30, 51283, 51283, 8239, 11, 727, 286, 6964, 257, 4471, 17, 2445, 30, 51529, 51529, 400, 309, 311, 257, 707, 857, 1575, 22487, 281, 6964, 257, 4471, 17, 2445, 670, 411, 6828, 295, 2604, 2622, 51785, 51785, 295, 3542, 13, 51835, 51835], "temperature": 0.0, "avg_logprob": -0.16135311126708984, "compression_ratio": 1.7472527472527473, "no_caption_prob": 4.400047691888176e-05}, {"id": 1017, "seek": 392212, "start": 3950.54, "end": 3951.54, "text": " of results.", "tokens": [50364, 264, 721, 1214, 13, 50429, 50429, 639, 307, 689, 264, 1442, 21122, 3719, 516, 766, 13, 50505, 50505, 286, 478, 411, 11, 1699, 257, 3456, 11, 286, 478, 884, 439, 341, 45109, 322, 264, 3542, 11, 439, 322, 341, 411, 2604, 781, 50761, 50761, 1874, 551, 281, 536, 11, 393, 286, 10432, 613, 819, 3755, 1214, 30, 50983, 50983, 26291, 380, 309, 312, 1481, 498, 286, 632, 257, 636, 281, 445, 11, 586, 300, 436, 434, 1219, 21156, 433, 11, 445, 10432, 51193, 51193, 732, 21156, 433, 1214, 30, 51283, 51283, 8239, 11, 727, 286, 6964, 257, 4471, 17, 2445, 30, 51529, 51529, 400, 309, 311, 257, 707, 857, 1575, 22487, 281, 6964, 257, 4471, 17, 2445, 670, 411, 6828, 295, 2604, 2622, 51785, 51785, 295, 3542, 13, 51835, 51835], "temperature": 0.0, "avg_logprob": -0.16135311126708984, "compression_ratio": 1.7472527472527473, "no_caption_prob": 4.400047691888176e-05}, {"id": 1018, "seek": 395154, "start": 3951.54, "end": 3957.46, "text": " But because I had aliased it to just parser A, I knew, oh, I know how to define a map2", "tokens": [50364, 583, 570, 286, 632, 10198, 1937, 309, 281, 445, 21156, 260, 316, 11, 286, 2586, 11, 1954, 11, 286, 458, 577, 281, 6964, 257, 4471, 17, 50660, 50660, 670, 21156, 260, 316, 13, 286, 7642, 300, 11, 293, 300, 311, 562, 264, 5585, 2011, 13, 50874, 50874, 1436, 439, 295, 257, 3990, 11, 286, 727, 13819, 439, 729, 1389, 15277, 293, 445, 588, 2541, 356, 51262, 51262, 10432, 439, 729, 34086, 6828, 300, 286, 632, 1214, 294, 257, 6457, 4962, 636, 13, 51551, 51551], "temperature": 0.0, "avg_logprob": -0.13179314413736032, "compression_ratio": 1.5776699029126213, "no_caption_prob": 1.8162160131396377e-06}, {"id": 1019, "seek": 395154, "start": 3957.46, "end": 3961.74, "text": " over parser A. I defined that, and that's when the magic happened.", "tokens": [50364, 583, 570, 286, 632, 10198, 1937, 309, 281, 445, 21156, 260, 316, 11, 286, 2586, 11, 1954, 11, 286, 458, 577, 281, 6964, 257, 4471, 17, 50660, 50660, 670, 21156, 260, 316, 13, 286, 7642, 300, 11, 293, 300, 311, 562, 264, 5585, 2011, 13, 50874, 50874, 1436, 439, 295, 257, 3990, 11, 286, 727, 13819, 439, 729, 1389, 15277, 293, 445, 588, 2541, 356, 51262, 51262, 10432, 439, 729, 34086, 6828, 300, 286, 632, 1214, 294, 257, 6457, 4962, 636, 13, 51551, 51551], "temperature": 0.0, "avg_logprob": -0.13179314413736032, "compression_ratio": 1.5776699029126213, "no_caption_prob": 1.8162160131396377e-06}, {"id": 1020, "seek": 395154, "start": 3961.74, "end": 3969.5, "text": " Because all of a sudden, I could eliminate all those case expressions and just very cleanly", "tokens": [50364, 583, 570, 286, 632, 10198, 1937, 309, 281, 445, 21156, 260, 316, 11, 286, 2586, 11, 1954, 11, 286, 458, 577, 281, 6964, 257, 4471, 17, 50660, 50660, 670, 21156, 260, 316, 13, 286, 7642, 300, 11, 293, 300, 311, 562, 264, 5585, 2011, 13, 50874, 50874, 1436, 439, 295, 257, 3990, 11, 286, 727, 13819, 439, 729, 1389, 15277, 293, 445, 588, 2541, 356, 51262, 51262, 10432, 439, 729, 34086, 6828, 300, 286, 632, 1214, 294, 257, 6457, 4962, 636, 13, 51551, 51551], "temperature": 0.0, "avg_logprob": -0.13179314413736032, "compression_ratio": 1.5776699029126213, "no_caption_prob": 1.8162160131396377e-06}, {"id": 1021, "seek": 395154, "start": 3969.5, "end": 3975.2799999999997, "text": " combine all those extracted functions that I had together in a fairly flat way.", "tokens": [50364, 583, 570, 286, 632, 10198, 1937, 309, 281, 445, 21156, 260, 316, 11, 286, 2586, 11, 1954, 11, 286, 458, 577, 281, 6964, 257, 4471, 17, 50660, 50660, 670, 21156, 260, 316, 13, 286, 7642, 300, 11, 293, 300, 311, 562, 264, 5585, 2011, 13, 50874, 50874, 1436, 439, 295, 257, 3990, 11, 286, 727, 13819, 439, 729, 1389, 15277, 293, 445, 588, 2541, 356, 51262, 51262, 10432, 439, 729, 34086, 6828, 300, 286, 632, 1214, 294, 257, 6457, 4962, 636, 13, 51551, 51551], "temperature": 0.0, "avg_logprob": -0.13179314413736032, "compression_ratio": 1.5776699029126213, "no_caption_prob": 1.8162160131396377e-06}, {"id": 1022, "seek": 397528, "start": 3975.28, "end": 3982.96, "text": " And then of course, knowing that I can use map2 to implement and map, I did that to give", "tokens": [50364, 400, 550, 295, 1164, 11, 5276, 300, 286, 393, 764, 4471, 17, 281, 4445, 293, 4471, 11, 286, 630, 300, 281, 976, 50748, 50748, 2059, 257, 21156, 278, 15517, 9362, 11, 597, 3574, 484, 281, 312, 534, 11, 534, 1481, 13, 51015, 51015, 400, 550, 1333, 295, 294, 264, 30669, 295, 437, 264, 31828, 979, 1429, 15517, 775, 11, 689, 291, 393, 1333, 295, 51239, 51239, 4583, 322, 257, 707, 857, 295, 2857, 5223, 420, 3620, 322, 1192, 295, 300, 13, 51446, 51446, 1133, 291, 434, 21156, 278, 11, 2171, 291, 528, 281, 48377, 257, 2158, 293, 550, 411, 767, 1884, 51661, 51661, 257, 2158, 484, 295, 309, 13, 51757, 51757], "temperature": 0.0, "avg_logprob": -0.11509686866692737, "compression_ratio": 1.6447876447876448, "no_caption_prob": 8.579198720326531e-07}, {"id": 1023, "seek": 397528, "start": 3982.96, "end": 3988.3, "text": " myself a parsing pipeline API, which turned out to be really, really nice.", "tokens": [50364, 400, 550, 295, 1164, 11, 5276, 300, 286, 393, 764, 4471, 17, 281, 4445, 293, 4471, 11, 286, 630, 300, 281, 976, 50748, 50748, 2059, 257, 21156, 278, 15517, 9362, 11, 597, 3574, 484, 281, 312, 534, 11, 534, 1481, 13, 51015, 51015, 400, 550, 1333, 295, 294, 264, 30669, 295, 437, 264, 31828, 979, 1429, 15517, 775, 11, 689, 291, 393, 1333, 295, 51239, 51239, 4583, 322, 257, 707, 857, 295, 2857, 5223, 420, 3620, 322, 1192, 295, 300, 13, 51446, 51446, 1133, 291, 434, 21156, 278, 11, 2171, 291, 528, 281, 48377, 257, 2158, 293, 550, 411, 767, 1884, 51661, 51661, 257, 2158, 484, 295, 309, 13, 51757, 51757], "temperature": 0.0, "avg_logprob": -0.11509686866692737, "compression_ratio": 1.6447876447876448, "no_caption_prob": 8.579198720326531e-07}, {"id": 1024, "seek": 397528, "start": 3988.3, "end": 3992.78, "text": " And then sort of in the vein of what the JSON decode pipeline does, where you can sort of", "tokens": [50364, 400, 550, 295, 1164, 11, 5276, 300, 286, 393, 764, 4471, 17, 281, 4445, 293, 4471, 11, 286, 630, 300, 281, 976, 50748, 50748, 2059, 257, 21156, 278, 15517, 9362, 11, 597, 3574, 484, 281, 312, 534, 11, 534, 1481, 13, 51015, 51015, 400, 550, 1333, 295, 294, 264, 30669, 295, 437, 264, 31828, 979, 1429, 15517, 775, 11, 689, 291, 393, 1333, 295, 51239, 51239, 4583, 322, 257, 707, 857, 295, 2857, 5223, 420, 3620, 322, 1192, 295, 300, 13, 51446, 51446, 1133, 291, 434, 21156, 278, 11, 2171, 291, 528, 281, 48377, 257, 2158, 293, 550, 411, 767, 1884, 51661, 51661, 257, 2158, 484, 295, 309, 13, 51757, 51757], "temperature": 0.0, "avg_logprob": -0.11509686866692737, "compression_ratio": 1.6447876447876448, "no_caption_prob": 8.579198720326531e-07}, {"id": 1025, "seek": 397528, "start": 3992.78, "end": 3996.92, "text": " layer on a little bit of extra behavior or meaning on top of that.", "tokens": [50364, 400, 550, 295, 1164, 11, 5276, 300, 286, 393, 764, 4471, 17, 281, 4445, 293, 4471, 11, 286, 630, 300, 281, 976, 50748, 50748, 2059, 257, 21156, 278, 15517, 9362, 11, 597, 3574, 484, 281, 312, 534, 11, 534, 1481, 13, 51015, 51015, 400, 550, 1333, 295, 294, 264, 30669, 295, 437, 264, 31828, 979, 1429, 15517, 775, 11, 689, 291, 393, 1333, 295, 51239, 51239, 4583, 322, 257, 707, 857, 295, 2857, 5223, 420, 3620, 322, 1192, 295, 300, 13, 51446, 51446, 1133, 291, 434, 21156, 278, 11, 2171, 291, 528, 281, 48377, 257, 2158, 293, 550, 411, 767, 1884, 51661, 51661, 257, 2158, 484, 295, 309, 13, 51757, 51757], "temperature": 0.0, "avg_logprob": -0.11509686866692737, "compression_ratio": 1.6447876447876448, "no_caption_prob": 8.579198720326531e-07}, {"id": 1026, "seek": 397528, "start": 3996.92, "end": 4001.2200000000003, "text": " When you're parsing, sometimes you want to parse a value and then like actually create", "tokens": [50364, 400, 550, 295, 1164, 11, 5276, 300, 286, 393, 764, 4471, 17, 281, 4445, 293, 4471, 11, 286, 630, 300, 281, 976, 50748, 50748, 2059, 257, 21156, 278, 15517, 9362, 11, 597, 3574, 484, 281, 312, 534, 11, 534, 1481, 13, 51015, 51015, 400, 550, 1333, 295, 294, 264, 30669, 295, 437, 264, 31828, 979, 1429, 15517, 775, 11, 689, 291, 393, 1333, 295, 51239, 51239, 4583, 322, 257, 707, 857, 295, 2857, 5223, 420, 3620, 322, 1192, 295, 300, 13, 51446, 51446, 1133, 291, 434, 21156, 278, 11, 2171, 291, 528, 281, 48377, 257, 2158, 293, 550, 411, 767, 1884, 51661, 51661, 257, 2158, 484, 295, 309, 13, 51757, 51757], "temperature": 0.0, "avg_logprob": -0.11509686866692737, "compression_ratio": 1.6447876447876448, "no_caption_prob": 8.579198720326531e-07}, {"id": 1027, "seek": 397528, "start": 4001.2200000000003, "end": 4003.1400000000003, "text": " a value out of it.", "tokens": [50364, 400, 550, 295, 1164, 11, 5276, 300, 286, 393, 764, 4471, 17, 281, 4445, 293, 4471, 11, 286, 630, 300, 281, 976, 50748, 50748, 2059, 257, 21156, 278, 15517, 9362, 11, 597, 3574, 484, 281, 312, 534, 11, 534, 1481, 13, 51015, 51015, 400, 550, 1333, 295, 294, 264, 30669, 295, 437, 264, 31828, 979, 1429, 15517, 775, 11, 689, 291, 393, 1333, 295, 51239, 51239, 4583, 322, 257, 707, 857, 295, 2857, 5223, 420, 3620, 322, 1192, 295, 300, 13, 51446, 51446, 1133, 291, 434, 21156, 278, 11, 2171, 291, 528, 281, 48377, 257, 2158, 293, 550, 411, 767, 1884, 51661, 51661, 257, 2158, 484, 295, 309, 13, 51757, 51757], "temperature": 0.0, "avg_logprob": -0.11509686866692737, "compression_ratio": 1.6447876447876448, "no_caption_prob": 8.579198720326531e-07}, {"id": 1028, "seek": 400314, "start": 4003.14, "end": 4006.74, "text": " And sometimes you just want to make sure that something is there in the string, but you", "tokens": [50364, 400, 2171, 291, 445, 528, 281, 652, 988, 300, 746, 307, 456, 294, 264, 6798, 11, 457, 291, 50544, 50544, 528, 281, 1286, 322, 13, 50594, 50594, 407, 291, 1062, 528, 281, 14732, 257, 2158, 420, 291, 1062, 528, 281, 767, 411, 48377, 746, 50821, 50821, 484, 295, 309, 13, 50871, 50871, 286, 500, 380, 458, 498, 291, 1062, 818, 300, 1066, 293, 14732, 420, 746, 411, 300, 13, 51030, 51030, 407, 300, 311, 8659, 437, 286, 630, 13, 51084, 51084, 286, 632, 411, 9274, 2685, 17840, 322, 293, 4471, 13, 51228, 51228, 400, 286, 519, 286, 1219, 552, 1066, 293, 14732, 300, 4350, 385, 281, 362, 257, 588, 4962, 15517, 51482, 51482], "temperature": 0.0, "avg_logprob": -0.13293622887652853, "compression_ratio": 1.8225806451612903, "no_caption_prob": 4.157315743213985e-06}, {"id": 1029, "seek": 400314, "start": 4006.74, "end": 4007.74, "text": " want to move on.", "tokens": [50364, 400, 2171, 291, 445, 528, 281, 652, 988, 300, 746, 307, 456, 294, 264, 6798, 11, 457, 291, 50544, 50544, 528, 281, 1286, 322, 13, 50594, 50594, 407, 291, 1062, 528, 281, 14732, 257, 2158, 420, 291, 1062, 528, 281, 767, 411, 48377, 746, 50821, 50821, 484, 295, 309, 13, 50871, 50871, 286, 500, 380, 458, 498, 291, 1062, 818, 300, 1066, 293, 14732, 420, 746, 411, 300, 13, 51030, 51030, 407, 300, 311, 8659, 437, 286, 630, 13, 51084, 51084, 286, 632, 411, 9274, 2685, 17840, 322, 293, 4471, 13, 51228, 51228, 400, 286, 519, 286, 1219, 552, 1066, 293, 14732, 300, 4350, 385, 281, 362, 257, 588, 4962, 15517, 51482, 51482], "temperature": 0.0, "avg_logprob": -0.13293622887652853, "compression_ratio": 1.8225806451612903, "no_caption_prob": 4.157315743213985e-06}, {"id": 1030, "seek": 400314, "start": 4007.74, "end": 4012.2799999999997, "text": " So you might want to consume a value or you might want to actually like parse something", "tokens": [50364, 400, 2171, 291, 445, 528, 281, 652, 988, 300, 746, 307, 456, 294, 264, 6798, 11, 457, 291, 50544, 50544, 528, 281, 1286, 322, 13, 50594, 50594, 407, 291, 1062, 528, 281, 14732, 257, 2158, 420, 291, 1062, 528, 281, 767, 411, 48377, 746, 50821, 50821, 484, 295, 309, 13, 50871, 50871, 286, 500, 380, 458, 498, 291, 1062, 818, 300, 1066, 293, 14732, 420, 746, 411, 300, 13, 51030, 51030, 407, 300, 311, 8659, 437, 286, 630, 13, 51084, 51084, 286, 632, 411, 9274, 2685, 17840, 322, 293, 4471, 13, 51228, 51228, 400, 286, 519, 286, 1219, 552, 1066, 293, 14732, 300, 4350, 385, 281, 362, 257, 588, 4962, 15517, 51482, 51482], "temperature": 0.0, "avg_logprob": -0.13293622887652853, "compression_ratio": 1.8225806451612903, "no_caption_prob": 4.157315743213985e-06}, {"id": 1031, "seek": 400314, "start": 4012.2799999999997, "end": 4013.2799999999997, "text": " out of it.", "tokens": [50364, 400, 2171, 291, 445, 528, 281, 652, 988, 300, 746, 307, 456, 294, 264, 6798, 11, 457, 291, 50544, 50544, 528, 281, 1286, 322, 13, 50594, 50594, 407, 291, 1062, 528, 281, 14732, 257, 2158, 420, 291, 1062, 528, 281, 767, 411, 48377, 746, 50821, 50821, 484, 295, 309, 13, 50871, 50871, 286, 500, 380, 458, 498, 291, 1062, 818, 300, 1066, 293, 14732, 420, 746, 411, 300, 13, 51030, 51030, 407, 300, 311, 8659, 437, 286, 630, 13, 51084, 51084, 286, 632, 411, 9274, 2685, 17840, 322, 293, 4471, 13, 51228, 51228, 400, 286, 519, 286, 1219, 552, 1066, 293, 14732, 300, 4350, 385, 281, 362, 257, 588, 4962, 15517, 51482, 51482], "temperature": 0.0, "avg_logprob": -0.13293622887652853, "compression_ratio": 1.8225806451612903, "no_caption_prob": 4.157315743213985e-06}, {"id": 1032, "seek": 400314, "start": 4013.2799999999997, "end": 4016.46, "text": " I don't know if you might call that keep and consume or something like that.", "tokens": [50364, 400, 2171, 291, 445, 528, 281, 652, 988, 300, 746, 307, 456, 294, 264, 6798, 11, 457, 291, 50544, 50544, 528, 281, 1286, 322, 13, 50594, 50594, 407, 291, 1062, 528, 281, 14732, 257, 2158, 420, 291, 1062, 528, 281, 767, 411, 48377, 746, 50821, 50821, 484, 295, 309, 13, 50871, 50871, 286, 500, 380, 458, 498, 291, 1062, 818, 300, 1066, 293, 14732, 420, 746, 411, 300, 13, 51030, 51030, 407, 300, 311, 8659, 437, 286, 630, 13, 51084, 51084, 286, 632, 411, 9274, 2685, 17840, 322, 293, 4471, 13, 51228, 51228, 400, 286, 519, 286, 1219, 552, 1066, 293, 14732, 300, 4350, 385, 281, 362, 257, 588, 4962, 15517, 51482, 51482], "temperature": 0.0, "avg_logprob": -0.13293622887652853, "compression_ratio": 1.8225806451612903, "no_caption_prob": 4.157315743213985e-06}, {"id": 1033, "seek": 400314, "start": 4016.46, "end": 4017.54, "text": " So that's effectively what I did.", "tokens": [50364, 400, 2171, 291, 445, 528, 281, 652, 988, 300, 746, 307, 456, 294, 264, 6798, 11, 457, 291, 50544, 50544, 528, 281, 1286, 322, 13, 50594, 50594, 407, 291, 1062, 528, 281, 14732, 257, 2158, 420, 291, 1062, 528, 281, 767, 411, 48377, 746, 50821, 50821, 484, 295, 309, 13, 50871, 50871, 286, 500, 380, 458, 498, 291, 1062, 818, 300, 1066, 293, 14732, 420, 746, 411, 300, 13, 51030, 51030, 407, 300, 311, 8659, 437, 286, 630, 13, 51084, 51084, 286, 632, 411, 9274, 2685, 17840, 322, 293, 4471, 13, 51228, 51228, 400, 286, 519, 286, 1219, 552, 1066, 293, 14732, 300, 4350, 385, 281, 362, 257, 588, 4962, 15517, 51482, 51482], "temperature": 0.0, "avg_logprob": -0.13293622887652853, "compression_ratio": 1.8225806451612903, "no_caption_prob": 4.157315743213985e-06}, {"id": 1034, "seek": 400314, "start": 4017.54, "end": 4020.42, "text": " I had like domain specific variations on and map.", "tokens": [50364, 400, 2171, 291, 445, 528, 281, 652, 988, 300, 746, 307, 456, 294, 264, 6798, 11, 457, 291, 50544, 50544, 528, 281, 1286, 322, 13, 50594, 50594, 407, 291, 1062, 528, 281, 14732, 257, 2158, 420, 291, 1062, 528, 281, 767, 411, 48377, 746, 50821, 50821, 484, 295, 309, 13, 50871, 50871, 286, 500, 380, 458, 498, 291, 1062, 818, 300, 1066, 293, 14732, 420, 746, 411, 300, 13, 51030, 51030, 407, 300, 311, 8659, 437, 286, 630, 13, 51084, 51084, 286, 632, 411, 9274, 2685, 17840, 322, 293, 4471, 13, 51228, 51228, 400, 286, 519, 286, 1219, 552, 1066, 293, 14732, 300, 4350, 385, 281, 362, 257, 588, 4962, 15517, 51482, 51482], "temperature": 0.0, "avg_logprob": -0.13293622887652853, "compression_ratio": 1.8225806451612903, "no_caption_prob": 4.157315743213985e-06}, {"id": 1035, "seek": 400314, "start": 4020.42, "end": 4025.5, "text": " And I think I called them keep and consume that allowed me to have a very flat pipeline", "tokens": [50364, 400, 2171, 291, 445, 528, 281, 652, 988, 300, 746, 307, 456, 294, 264, 6798, 11, 457, 291, 50544, 50544, 528, 281, 1286, 322, 13, 50594, 50594, 407, 291, 1062, 528, 281, 14732, 257, 2158, 420, 291, 1062, 528, 281, 767, 411, 48377, 746, 50821, 50821, 484, 295, 309, 13, 50871, 50871, 286, 500, 380, 458, 498, 291, 1062, 818, 300, 1066, 293, 14732, 420, 746, 411, 300, 13, 51030, 51030, 407, 300, 311, 8659, 437, 286, 630, 13, 51084, 51084, 286, 632, 411, 9274, 2685, 17840, 322, 293, 4471, 13, 51228, 51228, 400, 286, 519, 286, 1219, 552, 1066, 293, 14732, 300, 4350, 385, 281, 362, 257, 588, 4962, 15517, 51482, 51482], "temperature": 0.0, "avg_logprob": -0.13293622887652853, "compression_ratio": 1.8225806451612903, "no_caption_prob": 4.157315743213985e-06}, {"id": 1036, "seek": 402550, "start": 4025.5, "end": 4035.62, "text": " that was just like, oh, start by attempting to parse a function name, then just consume", "tokens": [50364, 300, 390, 445, 411, 11, 1954, 11, 722, 538, 22001, 281, 48377, 257, 2445, 1315, 11, 550, 445, 14732, 50870, 50870, 364, 1269, 23350, 9374, 11, 550, 1333, 295, 20560, 3413, 5217, 281, 48377, 1071, 6114, 11, 293, 550, 51256, 51256, 853, 281, 14732, 257, 10377, 23350, 9374, 13, 51466, 51466, 400, 445, 309, 439, 5696, 666, 1081, 490, 341, 534, 47192, 15646, 292, 2082, 295, 1389, 15277, 51750, 51750], "temperature": 0.0, "avg_logprob": -0.11953210830688477, "compression_ratio": 1.6906077348066297, "no_caption_prob": 8.18634021015896e-07}, {"id": 1037, "seek": 402550, "start": 4035.62, "end": 4043.34, "text": " an open parenthesis, then sort of recursively attempt to parse another expression, and then", "tokens": [50364, 300, 390, 445, 411, 11, 1954, 11, 722, 538, 22001, 281, 48377, 257, 2445, 1315, 11, 550, 445, 14732, 50870, 50870, 364, 1269, 23350, 9374, 11, 550, 1333, 295, 20560, 3413, 5217, 281, 48377, 1071, 6114, 11, 293, 550, 51256, 51256, 853, 281, 14732, 257, 10377, 23350, 9374, 13, 51466, 51466, 400, 445, 309, 439, 5696, 666, 1081, 490, 341, 534, 47192, 15646, 292, 2082, 295, 1389, 15277, 51750, 51750], "temperature": 0.0, "avg_logprob": -0.11953210830688477, "compression_ratio": 1.6906077348066297, "no_caption_prob": 8.18634021015896e-07}, {"id": 1038, "seek": 402550, "start": 4043.34, "end": 4047.54, "text": " try to consume a closing parenthesis.", "tokens": [50364, 300, 390, 445, 411, 11, 1954, 11, 722, 538, 22001, 281, 48377, 257, 2445, 1315, 11, 550, 445, 14732, 50870, 50870, 364, 1269, 23350, 9374, 11, 550, 1333, 295, 20560, 3413, 5217, 281, 48377, 1071, 6114, 11, 293, 550, 51256, 51256, 853, 281, 14732, 257, 10377, 23350, 9374, 13, 51466, 51466, 400, 445, 309, 439, 5696, 666, 1081, 490, 341, 534, 47192, 15646, 292, 2082, 295, 1389, 15277, 51750, 51750], "temperature": 0.0, "avg_logprob": -0.11953210830688477, "compression_ratio": 1.6906077348066297, "no_caption_prob": 8.18634021015896e-07}, {"id": 1039, "seek": 402550, "start": 4047.54, "end": 4053.22, "text": " And just it all fell into place from this really tangled nested mess of case expressions", "tokens": [50364, 300, 390, 445, 411, 11, 1954, 11, 722, 538, 22001, 281, 48377, 257, 2445, 1315, 11, 550, 445, 14732, 50870, 50870, 364, 1269, 23350, 9374, 11, 550, 1333, 295, 20560, 3413, 5217, 281, 48377, 1071, 6114, 11, 293, 550, 51256, 51256, 853, 281, 14732, 257, 10377, 23350, 9374, 13, 51466, 51466, 400, 445, 309, 439, 5696, 666, 1081, 490, 341, 534, 47192, 15646, 292, 2082, 295, 1389, 15277, 51750, 51750], "temperature": 0.0, "avg_logprob": -0.11953210830688477, "compression_ratio": 1.6906077348066297, "no_caption_prob": 8.18634021015896e-07}, {"id": 1040, "seek": 405322, "start": 4053.22, "end": 4056.7799999999997, "text": " and nested functions into this beautiful API.", "tokens": [50364, 293, 15646, 292, 6828, 666, 341, 2238, 9362, 13, 50542, 50542, 467, 311, 439, 570, 295, 4471, 732, 13, 50616, 50616, 400, 300, 390, 257, 588, 17138, 1166, 3109, 300, 286, 1890, 13, 50846, 50846, 286, 390, 3650, 295, 512, 295, 613, 10392, 570, 286, 600, 1143, 257, 688, 295, 31828, 979, 378, 433, 949, 11, 51048, 51048, 457, 286, 2067, 380, 534, 4619, 365, 21156, 278, 13985, 13, 51218, 51218, 583, 300, 1752, 295, 1333, 295, 342, 14188, 666, 437, 286, 2041, 291, 1062, 818, 21156, 260, 38514, 3391, 11, 51554, 51554, 597, 286, 2041, 534, 439, 295, 257, 3990, 300, 1433, 1027, 370, 709, 2020, 337, 385, 570, 286, 632, 51836, 51836], "temperature": 0.0, "avg_logprob": -0.1459877244357405, "compression_ratio": 1.6290909090909091, "no_caption_prob": 3.0415819765039487e-06}, {"id": 1041, "seek": 405322, "start": 4056.7799999999997, "end": 4058.2599999999998, "text": " It's all because of map two.", "tokens": [50364, 293, 15646, 292, 6828, 666, 341, 2238, 9362, 13, 50542, 50542, 467, 311, 439, 570, 295, 4471, 732, 13, 50616, 50616, 400, 300, 390, 257, 588, 17138, 1166, 3109, 300, 286, 1890, 13, 50846, 50846, 286, 390, 3650, 295, 512, 295, 613, 10392, 570, 286, 600, 1143, 257, 688, 295, 31828, 979, 378, 433, 949, 11, 51048, 51048, 457, 286, 2067, 380, 534, 4619, 365, 21156, 278, 13985, 13, 51218, 51218, 583, 300, 1752, 295, 1333, 295, 342, 14188, 666, 437, 286, 2041, 291, 1062, 818, 21156, 260, 38514, 3391, 11, 51554, 51554, 597, 286, 2041, 534, 439, 295, 257, 3990, 300, 1433, 1027, 370, 709, 2020, 337, 385, 570, 286, 632, 51836, 51836], "temperature": 0.0, "avg_logprob": -0.1459877244357405, "compression_ratio": 1.6290909090909091, "no_caption_prob": 3.0415819765039487e-06}, {"id": 1042, "seek": 405322, "start": 4058.2599999999998, "end": 4062.8599999999997, "text": " And that was a very iterative approach that I took.", "tokens": [50364, 293, 15646, 292, 6828, 666, 341, 2238, 9362, 13, 50542, 50542, 467, 311, 439, 570, 295, 4471, 732, 13, 50616, 50616, 400, 300, 390, 257, 588, 17138, 1166, 3109, 300, 286, 1890, 13, 50846, 50846, 286, 390, 3650, 295, 512, 295, 613, 10392, 570, 286, 600, 1143, 257, 688, 295, 31828, 979, 378, 433, 949, 11, 51048, 51048, 457, 286, 2067, 380, 534, 4619, 365, 21156, 278, 13985, 13, 51218, 51218, 583, 300, 1752, 295, 1333, 295, 342, 14188, 666, 437, 286, 2041, 291, 1062, 818, 21156, 260, 38514, 3391, 11, 51554, 51554, 597, 286, 2041, 534, 439, 295, 257, 3990, 300, 1433, 1027, 370, 709, 2020, 337, 385, 570, 286, 632, 51836, 51836], "temperature": 0.0, "avg_logprob": -0.1459877244357405, "compression_ratio": 1.6290909090909091, "no_caption_prob": 3.0415819765039487e-06}, {"id": 1043, "seek": 405322, "start": 4062.8599999999997, "end": 4066.8999999999996, "text": " I was aware of some of these concepts because I've used a lot of JSON decoders before,", "tokens": [50364, 293, 15646, 292, 6828, 666, 341, 2238, 9362, 13, 50542, 50542, 467, 311, 439, 570, 295, 4471, 732, 13, 50616, 50616, 400, 300, 390, 257, 588, 17138, 1166, 3109, 300, 286, 1890, 13, 50846, 50846, 286, 390, 3650, 295, 512, 295, 613, 10392, 570, 286, 600, 1143, 257, 688, 295, 31828, 979, 378, 433, 949, 11, 51048, 51048, 457, 286, 2067, 380, 534, 4619, 365, 21156, 278, 13985, 13, 51218, 51218, 583, 300, 1752, 295, 1333, 295, 342, 14188, 666, 437, 286, 2041, 291, 1062, 818, 21156, 260, 38514, 3391, 11, 51554, 51554, 597, 286, 2041, 534, 439, 295, 257, 3990, 300, 1433, 1027, 370, 709, 2020, 337, 385, 570, 286, 632, 51836, 51836], "temperature": 0.0, "avg_logprob": -0.1459877244357405, "compression_ratio": 1.6290909090909091, "no_caption_prob": 3.0415819765039487e-06}, {"id": 1044, "seek": 405322, "start": 4066.8999999999996, "end": 4070.2999999999997, "text": " but I wasn't really comfortable with parsing strings.", "tokens": [50364, 293, 15646, 292, 6828, 666, 341, 2238, 9362, 13, 50542, 50542, 467, 311, 439, 570, 295, 4471, 732, 13, 50616, 50616, 400, 300, 390, 257, 588, 17138, 1166, 3109, 300, 286, 1890, 13, 50846, 50846, 286, 390, 3650, 295, 512, 295, 613, 10392, 570, 286, 600, 1143, 257, 688, 295, 31828, 979, 378, 433, 949, 11, 51048, 51048, 457, 286, 2067, 380, 534, 4619, 365, 21156, 278, 13985, 13, 51218, 51218, 583, 300, 1752, 295, 1333, 295, 342, 14188, 666, 437, 286, 2041, 291, 1062, 818, 21156, 260, 38514, 3391, 11, 51554, 51554, 597, 286, 2041, 534, 439, 295, 257, 3990, 300, 1433, 1027, 370, 709, 2020, 337, 385, 570, 286, 632, 51836, 51836], "temperature": 0.0, "avg_logprob": -0.1459877244357405, "compression_ratio": 1.6290909090909091, "no_caption_prob": 3.0415819765039487e-06}, {"id": 1045, "seek": 405322, "start": 4070.2999999999997, "end": 4077.02, "text": " But that experience of sort of stumbling into what I guess you might call parser combinators,", "tokens": [50364, 293, 15646, 292, 6828, 666, 341, 2238, 9362, 13, 50542, 50542, 467, 311, 439, 570, 295, 4471, 732, 13, 50616, 50616, 400, 300, 390, 257, 588, 17138, 1166, 3109, 300, 286, 1890, 13, 50846, 50846, 286, 390, 3650, 295, 512, 295, 613, 10392, 570, 286, 600, 1143, 257, 688, 295, 31828, 979, 378, 433, 949, 11, 51048, 51048, 457, 286, 2067, 380, 534, 4619, 365, 21156, 278, 13985, 13, 51218, 51218, 583, 300, 1752, 295, 1333, 295, 342, 14188, 666, 437, 286, 2041, 291, 1062, 818, 21156, 260, 38514, 3391, 11, 51554, 51554, 597, 286, 2041, 534, 439, 295, 257, 3990, 300, 1433, 1027, 370, 709, 2020, 337, 385, 570, 286, 632, 51836, 51836], "temperature": 0.0, "avg_logprob": -0.1459877244357405, "compression_ratio": 1.6290909090909091, "no_caption_prob": 3.0415819765039487e-06}, {"id": 1046, "seek": 405322, "start": 4077.02, "end": 4082.66, "text": " which I guess really all of a sudden that term made so much sense for me because I had", "tokens": [50364, 293, 15646, 292, 6828, 666, 341, 2238, 9362, 13, 50542, 50542, 467, 311, 439, 570, 295, 4471, 732, 13, 50616, 50616, 400, 300, 390, 257, 588, 17138, 1166, 3109, 300, 286, 1890, 13, 50846, 50846, 286, 390, 3650, 295, 512, 295, 613, 10392, 570, 286, 600, 1143, 257, 688, 295, 31828, 979, 378, 433, 949, 11, 51048, 51048, 457, 286, 2067, 380, 534, 4619, 365, 21156, 278, 13985, 13, 51218, 51218, 583, 300, 1752, 295, 1333, 295, 342, 14188, 666, 437, 286, 2041, 291, 1062, 818, 21156, 260, 38514, 3391, 11, 51554, 51554, 597, 286, 2041, 534, 439, 295, 257, 3990, 300, 1433, 1027, 370, 709, 2020, 337, 385, 570, 286, 632, 51836, 51836], "temperature": 0.0, "avg_logprob": -0.1459877244357405, "compression_ratio": 1.6290909090909091, "no_caption_prob": 3.0415819765039487e-06}, {"id": 1047, "seek": 408266, "start": 4082.66, "end": 4083.66, "text": " these parses already.", "tokens": [50364, 613, 21156, 279, 1217, 13, 50414, 50414, 639, 307, 707, 6828, 286, 632, 1217, 34086, 337, 48377, 264, 6798, 666, 257, 2445, 1315, 50614, 50614, 420, 257, 23350, 9374, 13, 50680, 50680, 400, 550, 286, 12270, 4471, 732, 293, 257, 1916, 661, 6828, 300, 4350, 385, 281, 10432, 50974, 50974, 21156, 433, 1214, 293, 9351, 11, 439, 295, 257, 3990, 286, 632, 294, 11, 286, 500, 380, 458, 11, 1391, 1570, 813, 51216, 51216, 2319, 3876, 295, 2699, 76, 3094, 257, 21156, 278, 6405, 13, 51324, 51324, 663, 390, 534, 12066, 293, 1575, 15068, 13, 51450, 51450, 400, 550, 445, 337, 1019, 11, 286, 10033, 264, 2699, 76, 21156, 260, 6405, 11, 597, 309, 767, 575, 257, 15517, 51674, 51674, 28431, 13, 51724, 51724], "temperature": 0.0, "avg_logprob": -0.18361259642101468, "compression_ratio": 1.7077464788732395, "no_caption_prob": 1.1125494893349241e-05}, {"id": 1048, "seek": 408266, "start": 4083.66, "end": 4087.66, "text": " This is little functions I had already extracted for parse the string into a function name", "tokens": [50364, 613, 21156, 279, 1217, 13, 50414, 50414, 639, 307, 707, 6828, 286, 632, 1217, 34086, 337, 48377, 264, 6798, 666, 257, 2445, 1315, 50614, 50614, 420, 257, 23350, 9374, 13, 50680, 50680, 400, 550, 286, 12270, 4471, 732, 293, 257, 1916, 661, 6828, 300, 4350, 385, 281, 10432, 50974, 50974, 21156, 433, 1214, 293, 9351, 11, 439, 295, 257, 3990, 286, 632, 294, 11, 286, 500, 380, 458, 11, 1391, 1570, 813, 51216, 51216, 2319, 3876, 295, 2699, 76, 3094, 257, 21156, 278, 6405, 13, 51324, 51324, 663, 390, 534, 12066, 293, 1575, 15068, 13, 51450, 51450, 400, 550, 445, 337, 1019, 11, 286, 10033, 264, 2699, 76, 21156, 260, 6405, 11, 597, 309, 767, 575, 257, 15517, 51674, 51674, 28431, 13, 51724, 51724], "temperature": 0.0, "avg_logprob": -0.18361259642101468, "compression_ratio": 1.7077464788732395, "no_caption_prob": 1.1125494893349241e-05}, {"id": 1049, "seek": 408266, "start": 4087.66, "end": 4088.98, "text": " or a parenthesis.", "tokens": [50364, 613, 21156, 279, 1217, 13, 50414, 50414, 639, 307, 707, 6828, 286, 632, 1217, 34086, 337, 48377, 264, 6798, 666, 257, 2445, 1315, 50614, 50614, 420, 257, 23350, 9374, 13, 50680, 50680, 400, 550, 286, 12270, 4471, 732, 293, 257, 1916, 661, 6828, 300, 4350, 385, 281, 10432, 50974, 50974, 21156, 433, 1214, 293, 9351, 11, 439, 295, 257, 3990, 286, 632, 294, 11, 286, 500, 380, 458, 11, 1391, 1570, 813, 51216, 51216, 2319, 3876, 295, 2699, 76, 3094, 257, 21156, 278, 6405, 13, 51324, 51324, 663, 390, 534, 12066, 293, 1575, 15068, 13, 51450, 51450, 400, 550, 445, 337, 1019, 11, 286, 10033, 264, 2699, 76, 21156, 260, 6405, 11, 597, 309, 767, 575, 257, 15517, 51674, 51674, 28431, 13, 51724, 51724], "temperature": 0.0, "avg_logprob": -0.18361259642101468, "compression_ratio": 1.7077464788732395, "no_caption_prob": 1.1125494893349241e-05}, {"id": 1050, "seek": 408266, "start": 4088.98, "end": 4094.8599999999997, "text": " And then I implemented map two and a couple other functions that allowed me to combine", "tokens": [50364, 613, 21156, 279, 1217, 13, 50414, 50414, 639, 307, 707, 6828, 286, 632, 1217, 34086, 337, 48377, 264, 6798, 666, 257, 2445, 1315, 50614, 50614, 420, 257, 23350, 9374, 13, 50680, 50680, 400, 550, 286, 12270, 4471, 732, 293, 257, 1916, 661, 6828, 300, 4350, 385, 281, 10432, 50974, 50974, 21156, 433, 1214, 293, 9351, 11, 439, 295, 257, 3990, 286, 632, 294, 11, 286, 500, 380, 458, 11, 1391, 1570, 813, 51216, 51216, 2319, 3876, 295, 2699, 76, 3094, 257, 21156, 278, 6405, 13, 51324, 51324, 663, 390, 534, 12066, 293, 1575, 15068, 13, 51450, 51450, 400, 550, 445, 337, 1019, 11, 286, 10033, 264, 2699, 76, 21156, 260, 6405, 11, 597, 309, 767, 575, 257, 15517, 51674, 51674, 28431, 13, 51724, 51724], "temperature": 0.0, "avg_logprob": -0.18361259642101468, "compression_ratio": 1.7077464788732395, "no_caption_prob": 1.1125494893349241e-05}, {"id": 1051, "seek": 408266, "start": 4094.8599999999997, "end": 4099.7, "text": " parsers together and boom, all of a sudden I had in, I don't know, probably less than", "tokens": [50364, 613, 21156, 279, 1217, 13, 50414, 50414, 639, 307, 707, 6828, 286, 632, 1217, 34086, 337, 48377, 264, 6798, 666, 257, 2445, 1315, 50614, 50614, 420, 257, 23350, 9374, 13, 50680, 50680, 400, 550, 286, 12270, 4471, 732, 293, 257, 1916, 661, 6828, 300, 4350, 385, 281, 10432, 50974, 50974, 21156, 433, 1214, 293, 9351, 11, 439, 295, 257, 3990, 286, 632, 294, 11, 286, 500, 380, 458, 11, 1391, 1570, 813, 51216, 51216, 2319, 3876, 295, 2699, 76, 3094, 257, 21156, 278, 6405, 13, 51324, 51324, 663, 390, 534, 12066, 293, 1575, 15068, 13, 51450, 51450, 400, 550, 445, 337, 1019, 11, 286, 10033, 264, 2699, 76, 21156, 260, 6405, 11, 597, 309, 767, 575, 257, 15517, 51674, 51674, 28431, 13, 51724, 51724], "temperature": 0.0, "avg_logprob": -0.18361259642101468, "compression_ratio": 1.7077464788732395, "no_caption_prob": 1.1125494893349241e-05}, {"id": 1052, "seek": 408266, "start": 4099.7, "end": 4101.86, "text": " 100 lines of Elm built a parsing library.", "tokens": [50364, 613, 21156, 279, 1217, 13, 50414, 50414, 639, 307, 707, 6828, 286, 632, 1217, 34086, 337, 48377, 264, 6798, 666, 257, 2445, 1315, 50614, 50614, 420, 257, 23350, 9374, 13, 50680, 50680, 400, 550, 286, 12270, 4471, 732, 293, 257, 1916, 661, 6828, 300, 4350, 385, 281, 10432, 50974, 50974, 21156, 433, 1214, 293, 9351, 11, 439, 295, 257, 3990, 286, 632, 294, 11, 286, 500, 380, 458, 11, 1391, 1570, 813, 51216, 51216, 2319, 3876, 295, 2699, 76, 3094, 257, 21156, 278, 6405, 13, 51324, 51324, 663, 390, 534, 12066, 293, 1575, 15068, 13, 51450, 51450, 400, 550, 445, 337, 1019, 11, 286, 10033, 264, 2699, 76, 21156, 260, 6405, 11, 597, 309, 767, 575, 257, 15517, 51674, 51674, 28431, 13, 51724, 51724], "temperature": 0.0, "avg_logprob": -0.18361259642101468, "compression_ratio": 1.7077464788732395, "no_caption_prob": 1.1125494893349241e-05}, {"id": 1053, "seek": 408266, "start": 4101.86, "end": 4104.38, "text": " That was really magical and mind blowing.", "tokens": [50364, 613, 21156, 279, 1217, 13, 50414, 50414, 639, 307, 707, 6828, 286, 632, 1217, 34086, 337, 48377, 264, 6798, 666, 257, 2445, 1315, 50614, 50614, 420, 257, 23350, 9374, 13, 50680, 50680, 400, 550, 286, 12270, 4471, 732, 293, 257, 1916, 661, 6828, 300, 4350, 385, 281, 10432, 50974, 50974, 21156, 433, 1214, 293, 9351, 11, 439, 295, 257, 3990, 286, 632, 294, 11, 286, 500, 380, 458, 11, 1391, 1570, 813, 51216, 51216, 2319, 3876, 295, 2699, 76, 3094, 257, 21156, 278, 6405, 13, 51324, 51324, 663, 390, 534, 12066, 293, 1575, 15068, 13, 51450, 51450, 400, 550, 445, 337, 1019, 11, 286, 10033, 264, 2699, 76, 21156, 260, 6405, 11, 597, 309, 767, 575, 257, 15517, 51674, 51674, 28431, 13, 51724, 51724], "temperature": 0.0, "avg_logprob": -0.18361259642101468, "compression_ratio": 1.7077464788732395, "no_caption_prob": 1.1125494893349241e-05}, {"id": 1054, "seek": 408266, "start": 4104.38, "end": 4108.86, "text": " And then just for fun, I checked the Elm parser library, which it actually has a pipeline", "tokens": [50364, 613, 21156, 279, 1217, 13, 50414, 50414, 639, 307, 707, 6828, 286, 632, 1217, 34086, 337, 48377, 264, 6798, 666, 257, 2445, 1315, 50614, 50614, 420, 257, 23350, 9374, 13, 50680, 50680, 400, 550, 286, 12270, 4471, 732, 293, 257, 1916, 661, 6828, 300, 4350, 385, 281, 10432, 50974, 50974, 21156, 433, 1214, 293, 9351, 11, 439, 295, 257, 3990, 286, 632, 294, 11, 286, 500, 380, 458, 11, 1391, 1570, 813, 51216, 51216, 2319, 3876, 295, 2699, 76, 3094, 257, 21156, 278, 6405, 13, 51324, 51324, 663, 390, 534, 12066, 293, 1575, 15068, 13, 51450, 51450, 400, 550, 445, 337, 1019, 11, 286, 10033, 264, 2699, 76, 21156, 260, 6405, 11, 597, 309, 767, 575, 257, 15517, 51674, 51674, 28431, 13, 51724, 51724], "temperature": 0.0, "avg_logprob": -0.18361259642101468, "compression_ratio": 1.7077464788732395, "no_caption_prob": 1.1125494893349241e-05}, {"id": 1055, "seek": 408266, "start": 4108.86, "end": 4109.86, "text": " syntax.", "tokens": [50364, 613, 21156, 279, 1217, 13, 50414, 50414, 639, 307, 707, 6828, 286, 632, 1217, 34086, 337, 48377, 264, 6798, 666, 257, 2445, 1315, 50614, 50614, 420, 257, 23350, 9374, 13, 50680, 50680, 400, 550, 286, 12270, 4471, 732, 293, 257, 1916, 661, 6828, 300, 4350, 385, 281, 10432, 50974, 50974, 21156, 433, 1214, 293, 9351, 11, 439, 295, 257, 3990, 286, 632, 294, 11, 286, 500, 380, 458, 11, 1391, 1570, 813, 51216, 51216, 2319, 3876, 295, 2699, 76, 3094, 257, 21156, 278, 6405, 13, 51324, 51324, 663, 390, 534, 12066, 293, 1575, 15068, 13, 51450, 51450, 400, 550, 445, 337, 1019, 11, 286, 10033, 264, 2699, 76, 21156, 260, 6405, 11, 597, 309, 767, 575, 257, 15517, 51674, 51674, 28431, 13, 51724, 51724], "temperature": 0.0, "avg_logprob": -0.18361259642101468, "compression_ratio": 1.7077464788732395, "no_caption_prob": 1.1125494893349241e-05}, {"id": 1056, "seek": 410986, "start": 4109.86, "end": 4112.98, "text": " It uses special operators, but it's effectively nmap.", "tokens": [50364, 467, 4960, 2121, 19077, 11, 457, 309, 311, 8659, 297, 24223, 13, 50520, 50520, 663, 311, 411, 11240, 5893, 293, 11240, 6915, 11, 597, 366, 10344, 281, 452, 19813, 19077, 50812, 50812, 337, 411, 48377, 293, 14732, 13, 50948, 50948, 400, 309, 390, 1936, 264, 912, 3089, 13, 51050, 51050, 407, 286, 1333, 295, 36668, 666, 746, 300, 390, 588, 2531, 281, 264, 4783, 2699, 76, 48377, 51278, 51278, 6405, 13, 51328, 51328, 407, 309, 390, 257, 534, 1019, 5380, 337, 385, 13, 51456, 51456, 286, 3264, 257, 688, 13, 51506, 51506, 286, 841, 411, 286, 3264, 577, 21156, 278, 1985, 13, 51674, 51674], "temperature": 0.0, "avg_logprob": -0.1514801169341465, "compression_ratio": 1.6431535269709543, "no_caption_prob": 8.013343176571652e-06}, {"id": 1057, "seek": 410986, "start": 4112.98, "end": 4118.82, "text": " That's like pipe dot and pipe equals, which are equivalent to my specialized operators", "tokens": [50364, 467, 4960, 2121, 19077, 11, 457, 309, 311, 8659, 297, 24223, 13, 50520, 50520, 663, 311, 411, 11240, 5893, 293, 11240, 6915, 11, 597, 366, 10344, 281, 452, 19813, 19077, 50812, 50812, 337, 411, 48377, 293, 14732, 13, 50948, 50948, 400, 309, 390, 1936, 264, 912, 3089, 13, 51050, 51050, 407, 286, 1333, 295, 36668, 666, 746, 300, 390, 588, 2531, 281, 264, 4783, 2699, 76, 48377, 51278, 51278, 6405, 13, 51328, 51328, 407, 309, 390, 257, 534, 1019, 5380, 337, 385, 13, 51456, 51456, 286, 3264, 257, 688, 13, 51506, 51506, 286, 841, 411, 286, 3264, 577, 21156, 278, 1985, 13, 51674, 51674], "temperature": 0.0, "avg_logprob": -0.1514801169341465, "compression_ratio": 1.6431535269709543, "no_caption_prob": 8.013343176571652e-06}, {"id": 1058, "seek": 410986, "start": 4118.82, "end": 4121.54, "text": " for like parse and consume.", "tokens": [50364, 467, 4960, 2121, 19077, 11, 457, 309, 311, 8659, 297, 24223, 13, 50520, 50520, 663, 311, 411, 11240, 5893, 293, 11240, 6915, 11, 597, 366, 10344, 281, 452, 19813, 19077, 50812, 50812, 337, 411, 48377, 293, 14732, 13, 50948, 50948, 400, 309, 390, 1936, 264, 912, 3089, 13, 51050, 51050, 407, 286, 1333, 295, 36668, 666, 746, 300, 390, 588, 2531, 281, 264, 4783, 2699, 76, 48377, 51278, 51278, 6405, 13, 51328, 51328, 407, 309, 390, 257, 534, 1019, 5380, 337, 385, 13, 51456, 51456, 286, 3264, 257, 688, 13, 51506, 51506, 286, 841, 411, 286, 3264, 577, 21156, 278, 1985, 13, 51674, 51674], "temperature": 0.0, "avg_logprob": -0.1514801169341465, "compression_ratio": 1.6431535269709543, "no_caption_prob": 8.013343176571652e-06}, {"id": 1059, "seek": 410986, "start": 4121.54, "end": 4123.58, "text": " And it was basically the same code.", "tokens": [50364, 467, 4960, 2121, 19077, 11, 457, 309, 311, 8659, 297, 24223, 13, 50520, 50520, 663, 311, 411, 11240, 5893, 293, 11240, 6915, 11, 597, 366, 10344, 281, 452, 19813, 19077, 50812, 50812, 337, 411, 48377, 293, 14732, 13, 50948, 50948, 400, 309, 390, 1936, 264, 912, 3089, 13, 51050, 51050, 407, 286, 1333, 295, 36668, 666, 746, 300, 390, 588, 2531, 281, 264, 4783, 2699, 76, 48377, 51278, 51278, 6405, 13, 51328, 51328, 407, 309, 390, 257, 534, 1019, 5380, 337, 385, 13, 51456, 51456, 286, 3264, 257, 688, 13, 51506, 51506, 286, 841, 411, 286, 3264, 577, 21156, 278, 1985, 13, 51674, 51674], "temperature": 0.0, "avg_logprob": -0.1514801169341465, "compression_ratio": 1.6431535269709543, "no_caption_prob": 8.013343176571652e-06}, {"id": 1060, "seek": 410986, "start": 4123.58, "end": 4128.139999999999, "text": " So I sort of stumbled into something that was very similar to the official Elm parse", "tokens": [50364, 467, 4960, 2121, 19077, 11, 457, 309, 311, 8659, 297, 24223, 13, 50520, 50520, 663, 311, 411, 11240, 5893, 293, 11240, 6915, 11, 597, 366, 10344, 281, 452, 19813, 19077, 50812, 50812, 337, 411, 48377, 293, 14732, 13, 50948, 50948, 400, 309, 390, 1936, 264, 912, 3089, 13, 51050, 51050, 407, 286, 1333, 295, 36668, 666, 746, 300, 390, 588, 2531, 281, 264, 4783, 2699, 76, 48377, 51278, 51278, 6405, 13, 51328, 51328, 407, 309, 390, 257, 534, 1019, 5380, 337, 385, 13, 51456, 51456, 286, 3264, 257, 688, 13, 51506, 51506, 286, 841, 411, 286, 3264, 577, 21156, 278, 1985, 13, 51674, 51674], "temperature": 0.0, "avg_logprob": -0.1514801169341465, "compression_ratio": 1.6431535269709543, "no_caption_prob": 8.013343176571652e-06}, {"id": 1061, "seek": 410986, "start": 4128.139999999999, "end": 4129.139999999999, "text": " library.", "tokens": [50364, 467, 4960, 2121, 19077, 11, 457, 309, 311, 8659, 297, 24223, 13, 50520, 50520, 663, 311, 411, 11240, 5893, 293, 11240, 6915, 11, 597, 366, 10344, 281, 452, 19813, 19077, 50812, 50812, 337, 411, 48377, 293, 14732, 13, 50948, 50948, 400, 309, 390, 1936, 264, 912, 3089, 13, 51050, 51050, 407, 286, 1333, 295, 36668, 666, 746, 300, 390, 588, 2531, 281, 264, 4783, 2699, 76, 48377, 51278, 51278, 6405, 13, 51328, 51328, 407, 309, 390, 257, 534, 1019, 5380, 337, 385, 13, 51456, 51456, 286, 3264, 257, 688, 13, 51506, 51506, 286, 841, 411, 286, 3264, 577, 21156, 278, 1985, 13, 51674, 51674], "temperature": 0.0, "avg_logprob": -0.1514801169341465, "compression_ratio": 1.6431535269709543, "no_caption_prob": 8.013343176571652e-06}, {"id": 1062, "seek": 410986, "start": 4129.139999999999, "end": 4131.7, "text": " So it was a really fun exercise for me.", "tokens": [50364, 467, 4960, 2121, 19077, 11, 457, 309, 311, 8659, 297, 24223, 13, 50520, 50520, 663, 311, 411, 11240, 5893, 293, 11240, 6915, 11, 597, 366, 10344, 281, 452, 19813, 19077, 50812, 50812, 337, 411, 48377, 293, 14732, 13, 50948, 50948, 400, 309, 390, 1936, 264, 912, 3089, 13, 51050, 51050, 407, 286, 1333, 295, 36668, 666, 746, 300, 390, 588, 2531, 281, 264, 4783, 2699, 76, 48377, 51278, 51278, 6405, 13, 51328, 51328, 407, 309, 390, 257, 534, 1019, 5380, 337, 385, 13, 51456, 51456, 286, 3264, 257, 688, 13, 51506, 51506, 286, 841, 411, 286, 3264, 577, 21156, 278, 1985, 13, 51674, 51674], "temperature": 0.0, "avg_logprob": -0.1514801169341465, "compression_ratio": 1.6431535269709543, "no_caption_prob": 8.013343176571652e-06}, {"id": 1063, "seek": 410986, "start": 4131.7, "end": 4132.7, "text": " I learned a lot.", "tokens": [50364, 467, 4960, 2121, 19077, 11, 457, 309, 311, 8659, 297, 24223, 13, 50520, 50520, 663, 311, 411, 11240, 5893, 293, 11240, 6915, 11, 597, 366, 10344, 281, 452, 19813, 19077, 50812, 50812, 337, 411, 48377, 293, 14732, 13, 50948, 50948, 400, 309, 390, 1936, 264, 912, 3089, 13, 51050, 51050, 407, 286, 1333, 295, 36668, 666, 746, 300, 390, 588, 2531, 281, 264, 4783, 2699, 76, 48377, 51278, 51278, 6405, 13, 51328, 51328, 407, 309, 390, 257, 534, 1019, 5380, 337, 385, 13, 51456, 51456, 286, 3264, 257, 688, 13, 51506, 51506, 286, 841, 411, 286, 3264, 577, 21156, 278, 1985, 13, 51674, 51674], "temperature": 0.0, "avg_logprob": -0.1514801169341465, "compression_ratio": 1.6431535269709543, "no_caption_prob": 8.013343176571652e-06}, {"id": 1064, "seek": 410986, "start": 4132.7, "end": 4136.0599999999995, "text": " I feel like I learned how parsing works.", "tokens": [50364, 467, 4960, 2121, 19077, 11, 457, 309, 311, 8659, 297, 24223, 13, 50520, 50520, 663, 311, 411, 11240, 5893, 293, 11240, 6915, 11, 597, 366, 10344, 281, 452, 19813, 19077, 50812, 50812, 337, 411, 48377, 293, 14732, 13, 50948, 50948, 400, 309, 390, 1936, 264, 912, 3089, 13, 51050, 51050, 407, 286, 1333, 295, 36668, 666, 746, 300, 390, 588, 2531, 281, 264, 4783, 2699, 76, 48377, 51278, 51278, 6405, 13, 51328, 51328, 407, 309, 390, 257, 534, 1019, 5380, 337, 385, 13, 51456, 51456, 286, 3264, 257, 688, 13, 51506, 51506, 286, 841, 411, 286, 3264, 577, 21156, 278, 1985, 13, 51674, 51674], "temperature": 0.0, "avg_logprob": -0.1514801169341465, "compression_ratio": 1.6431535269709543, "no_caption_prob": 8.013343176571652e-06}, {"id": 1065, "seek": 413606, "start": 4136.06, "end": 4144.14, "text": " I got way more comfortable with some new facets of map two, the idea of combinators in general.", "tokens": [50364, 286, 658, 636, 544, 4619, 365, 512, 777, 49752, 295, 4471, 732, 11, 264, 1558, 295, 38514, 3391, 294, 2674, 13, 50768, 50768, 286, 519, 286, 12634, 257, 777, 1496, 295, 3701, 264, 6562, 295, 21156, 433, 293, 38514, 3391, 51020, 51020, 382, 411, 732, 3755, 300, 534, 862, 731, 1214, 13, 51154, 51154, 865, 11, 309, 390, 257, 534, 12066, 1752, 13, 51284, 51284, 286, 9181, 493, 3469, 666, 264, 1818, 293, 309, 390, 445, 411, 11, 1954, 11, 1071, 1442, 21122, 1623, 13, 51532, 51532, 286, 519, 286, 2942, 1391, 1451, 420, 1732, 2699, 271, 300, 286, 2942, 411, 337, 1184, 1823, 294, 300, 51812, 51812], "temperature": 0.0, "avg_logprob": -0.18039235201748935, "compression_ratio": 1.6943396226415095, "no_caption_prob": 1.3925345001553069e-06}, {"id": 1066, "seek": 413606, "start": 4144.14, "end": 4149.18, "text": " I think I gained a new level of understanding the combination of parsers and combinators", "tokens": [50364, 286, 658, 636, 544, 4619, 365, 512, 777, 49752, 295, 4471, 732, 11, 264, 1558, 295, 38514, 3391, 294, 2674, 13, 50768, 50768, 286, 519, 286, 12634, 257, 777, 1496, 295, 3701, 264, 6562, 295, 21156, 433, 293, 38514, 3391, 51020, 51020, 382, 411, 732, 3755, 300, 534, 862, 731, 1214, 13, 51154, 51154, 865, 11, 309, 390, 257, 534, 12066, 1752, 13, 51284, 51284, 286, 9181, 493, 3469, 666, 264, 1818, 293, 309, 390, 445, 411, 11, 1954, 11, 1071, 1442, 21122, 1623, 13, 51532, 51532, 286, 519, 286, 2942, 1391, 1451, 420, 1732, 2699, 271, 300, 286, 2942, 411, 337, 1184, 1823, 294, 300, 51812, 51812], "temperature": 0.0, "avg_logprob": -0.18039235201748935, "compression_ratio": 1.6943396226415095, "no_caption_prob": 1.3925345001553069e-06}, {"id": 1067, "seek": 413606, "start": 4149.18, "end": 4151.860000000001, "text": " as like two pieces that really play well together.", "tokens": [50364, 286, 658, 636, 544, 4619, 365, 512, 777, 49752, 295, 4471, 732, 11, 264, 1558, 295, 38514, 3391, 294, 2674, 13, 50768, 50768, 286, 519, 286, 12634, 257, 777, 1496, 295, 3701, 264, 6562, 295, 21156, 433, 293, 38514, 3391, 51020, 51020, 382, 411, 732, 3755, 300, 534, 862, 731, 1214, 13, 51154, 51154, 865, 11, 309, 390, 257, 534, 12066, 1752, 13, 51284, 51284, 286, 9181, 493, 3469, 666, 264, 1818, 293, 309, 390, 445, 411, 11, 1954, 11, 1071, 1442, 21122, 1623, 13, 51532, 51532, 286, 519, 286, 2942, 1391, 1451, 420, 1732, 2699, 271, 300, 286, 2942, 411, 337, 1184, 1823, 294, 300, 51812, 51812], "temperature": 0.0, "avg_logprob": -0.18039235201748935, "compression_ratio": 1.6943396226415095, "no_caption_prob": 1.3925345001553069e-06}, {"id": 1068, "seek": 413606, "start": 4151.860000000001, "end": 4154.46, "text": " Yeah, it was a really magical experience.", "tokens": [50364, 286, 658, 636, 544, 4619, 365, 512, 777, 49752, 295, 4471, 732, 11, 264, 1558, 295, 38514, 3391, 294, 2674, 13, 50768, 50768, 286, 519, 286, 12634, 257, 777, 1496, 295, 3701, 264, 6562, 295, 21156, 433, 293, 38514, 3391, 51020, 51020, 382, 411, 732, 3755, 300, 534, 862, 731, 1214, 13, 51154, 51154, 865, 11, 309, 390, 257, 534, 12066, 1752, 13, 51284, 51284, 286, 9181, 493, 3469, 666, 264, 1818, 293, 309, 390, 445, 411, 11, 1954, 11, 1071, 1442, 21122, 1623, 13, 51532, 51532, 286, 519, 286, 2942, 1391, 1451, 420, 1732, 2699, 271, 300, 286, 2942, 411, 337, 1184, 1823, 294, 300, 51812, 51812], "temperature": 0.0, "avg_logprob": -0.18039235201748935, "compression_ratio": 1.6943396226415095, "no_caption_prob": 1.3925345001553069e-06}, {"id": 1069, "seek": 413606, "start": 4154.46, "end": 4159.42, "text": " I stayed up late into the night and it was just like, oh, another light bulb moment.", "tokens": [50364, 286, 658, 636, 544, 4619, 365, 512, 777, 49752, 295, 4471, 732, 11, 264, 1558, 295, 38514, 3391, 294, 2674, 13, 50768, 50768, 286, 519, 286, 12634, 257, 777, 1496, 295, 3701, 264, 6562, 295, 21156, 433, 293, 38514, 3391, 51020, 51020, 382, 411, 732, 3755, 300, 534, 862, 731, 1214, 13, 51154, 51154, 865, 11, 309, 390, 257, 534, 12066, 1752, 13, 51284, 51284, 286, 9181, 493, 3469, 666, 264, 1818, 293, 309, 390, 445, 411, 11, 1954, 11, 1071, 1442, 21122, 1623, 13, 51532, 51532, 286, 519, 286, 2942, 1391, 1451, 420, 1732, 2699, 271, 300, 286, 2942, 411, 337, 1184, 1823, 294, 300, 51812, 51812], "temperature": 0.0, "avg_logprob": -0.18039235201748935, "compression_ratio": 1.6943396226415095, "no_caption_prob": 1.3925345001553069e-06}, {"id": 1070, "seek": 413606, "start": 4159.42, "end": 4165.02, "text": " I think I created probably four or five Elis that I created like for each step in that", "tokens": [50364, 286, 658, 636, 544, 4619, 365, 512, 777, 49752, 295, 4471, 732, 11, 264, 1558, 295, 38514, 3391, 294, 2674, 13, 50768, 50768, 286, 519, 286, 12634, 257, 777, 1496, 295, 3701, 264, 6562, 295, 21156, 433, 293, 38514, 3391, 51020, 51020, 382, 411, 732, 3755, 300, 534, 862, 731, 1214, 13, 51154, 51154, 865, 11, 309, 390, 257, 534, 12066, 1752, 13, 51284, 51284, 286, 9181, 493, 3469, 666, 264, 1818, 293, 309, 390, 445, 411, 11, 1954, 11, 1071, 1442, 21122, 1623, 13, 51532, 51532, 286, 519, 286, 2942, 1391, 1451, 420, 1732, 2699, 271, 300, 286, 2942, 411, 337, 1184, 1823, 294, 300, 51812, 51812], "temperature": 0.0, "avg_logprob": -0.18039235201748935, "compression_ratio": 1.6943396226415095, "no_caption_prob": 1.3925345001553069e-06}, {"id": 1071, "seek": 416502, "start": 4165.02, "end": 4166.02, "text": " process.", "tokens": [50364, 1399, 13, 50414, 50414, 400, 309, 390, 2243, 13, 50492, 50492, 865, 13, 50542, 50542, 286, 478, 586, 588, 6369, 11, 630, 291, 646, 2707, 300, 281, 264, 15778, 3037, 30, 50786, 50786, 286, 994, 380, 3838, 11, 457, 286, 390, 4315, 2618, 1646, 322, 641, 1716, 293, 286, 5507, 264, 2699, 76, 51160, 51160, 9052, 791, 11, 597, 658, 264, 661, 954, 3102, 294, 1237, 493, 412, 15778, 21156, 278, 420, 21156, 260, 51492, 51492, 2512, 31927, 15148, 11, 597, 436, 645, 550, 1075, 281, 1895, 15104, 527, 3380, 3827, 666, 51740, 51740], "temperature": 0.0, "avg_logprob": -0.1768596569697062, "compression_ratio": 1.5303643724696356, "no_caption_prob": 1.5689292922616005e-05}, {"id": 1072, "seek": 416502, "start": 4166.02, "end": 4167.580000000001, "text": " And it was amazing.", "tokens": [50364, 1399, 13, 50414, 50414, 400, 309, 390, 2243, 13, 50492, 50492, 865, 13, 50542, 50542, 286, 478, 586, 588, 6369, 11, 630, 291, 646, 2707, 300, 281, 264, 15778, 3037, 30, 50786, 50786, 286, 994, 380, 3838, 11, 457, 286, 390, 4315, 2618, 1646, 322, 641, 1716, 293, 286, 5507, 264, 2699, 76, 51160, 51160, 9052, 791, 11, 597, 658, 264, 661, 954, 3102, 294, 1237, 493, 412, 15778, 21156, 278, 420, 21156, 260, 51492, 51492, 2512, 31927, 15148, 11, 597, 436, 645, 550, 1075, 281, 1895, 15104, 527, 3380, 3827, 666, 51740, 51740], "temperature": 0.0, "avg_logprob": -0.1768596569697062, "compression_ratio": 1.5303643724696356, "no_caption_prob": 1.5689292922616005e-05}, {"id": 1073, "seek": 416502, "start": 4167.580000000001, "end": 4168.580000000001, "text": " Yeah.", "tokens": [50364, 1399, 13, 50414, 50414, 400, 309, 390, 2243, 13, 50492, 50492, 865, 13, 50542, 50542, 286, 478, 586, 588, 6369, 11, 630, 291, 646, 2707, 300, 281, 264, 15778, 3037, 30, 50786, 50786, 286, 994, 380, 3838, 11, 457, 286, 390, 4315, 2618, 1646, 322, 641, 1716, 293, 286, 5507, 264, 2699, 76, 51160, 51160, 9052, 791, 11, 597, 658, 264, 661, 954, 3102, 294, 1237, 493, 412, 15778, 21156, 278, 420, 21156, 260, 51492, 51492, 2512, 31927, 15148, 11, 597, 436, 645, 550, 1075, 281, 1895, 15104, 527, 3380, 3827, 666, 51740, 51740], "temperature": 0.0, "avg_logprob": -0.1768596569697062, "compression_ratio": 1.5303643724696356, "no_caption_prob": 1.5689292922616005e-05}, {"id": 1074, "seek": 416502, "start": 4168.580000000001, "end": 4173.46, "text": " I'm now very curious, did you backport that to the JavaScript version?", "tokens": [50364, 1399, 13, 50414, 50414, 400, 309, 390, 2243, 13, 50492, 50492, 865, 13, 50542, 50542, 286, 478, 586, 588, 6369, 11, 630, 291, 646, 2707, 300, 281, 264, 15778, 3037, 30, 50786, 50786, 286, 994, 380, 3838, 11, 457, 286, 390, 4315, 2618, 1646, 322, 641, 1716, 293, 286, 5507, 264, 2699, 76, 51160, 51160, 9052, 791, 11, 597, 658, 264, 661, 954, 3102, 294, 1237, 493, 412, 15778, 21156, 278, 420, 21156, 260, 51492, 51492, 2512, 31927, 15148, 11, 597, 436, 645, 550, 1075, 281, 1895, 15104, 527, 3380, 3827, 666, 51740, 51740], "temperature": 0.0, "avg_logprob": -0.1768596569697062, "compression_ratio": 1.5303643724696356, "no_caption_prob": 1.5689292922616005e-05}, {"id": 1075, "seek": 416502, "start": 4173.46, "end": 4180.9400000000005, "text": " I didn't directly, but I was helping somebody else on their project and I shared the Elm", "tokens": [50364, 1399, 13, 50414, 50414, 400, 309, 390, 2243, 13, 50492, 50492, 865, 13, 50542, 50542, 286, 478, 586, 588, 6369, 11, 630, 291, 646, 2707, 300, 281, 264, 15778, 3037, 30, 50786, 50786, 286, 994, 380, 3838, 11, 457, 286, 390, 4315, 2618, 1646, 322, 641, 1716, 293, 286, 5507, 264, 2699, 76, 51160, 51160, 9052, 791, 11, 597, 658, 264, 661, 954, 3102, 294, 1237, 493, 412, 15778, 21156, 278, 420, 21156, 260, 51492, 51492, 2512, 31927, 15148, 11, 597, 436, 645, 550, 1075, 281, 1895, 15104, 527, 3380, 3827, 666, 51740, 51740], "temperature": 0.0, "avg_logprob": -0.1768596569697062, "compression_ratio": 1.5303643724696356, "no_caption_prob": 1.5689292922616005e-05}, {"id": 1076, "seek": 416502, "start": 4180.9400000000005, "end": 4187.580000000001, "text": " equivalents, which got the other person interested in looking up at JavaScript parsing or parser", "tokens": [50364, 1399, 13, 50414, 50414, 400, 309, 390, 2243, 13, 50492, 50492, 865, 13, 50542, 50542, 286, 478, 586, 588, 6369, 11, 630, 291, 646, 2707, 300, 281, 264, 15778, 3037, 30, 50786, 50786, 286, 994, 380, 3838, 11, 457, 286, 390, 4315, 2618, 1646, 322, 641, 1716, 293, 286, 5507, 264, 2699, 76, 51160, 51160, 9052, 791, 11, 597, 658, 264, 661, 954, 3102, 294, 1237, 493, 412, 15778, 21156, 278, 420, 21156, 260, 51492, 51492, 2512, 31927, 15148, 11, 597, 436, 645, 550, 1075, 281, 1895, 15104, 527, 3380, 3827, 666, 51740, 51740], "temperature": 0.0, "avg_logprob": -0.1768596569697062, "compression_ratio": 1.5303643724696356, "no_caption_prob": 1.5689292922616005e-05}, {"id": 1077, "seek": 416502, "start": 4187.580000000001, "end": 4192.540000000001, "text": " combinator libraries, which they were then able to refactor our original solution into", "tokens": [50364, 1399, 13, 50414, 50414, 400, 309, 390, 2243, 13, 50492, 50492, 865, 13, 50542, 50542, 286, 478, 586, 588, 6369, 11, 630, 291, 646, 2707, 300, 281, 264, 15778, 3037, 30, 50786, 50786, 286, 994, 380, 3838, 11, 457, 286, 390, 4315, 2618, 1646, 322, 641, 1716, 293, 286, 5507, 264, 2699, 76, 51160, 51160, 9052, 791, 11, 597, 658, 264, 661, 954, 3102, 294, 1237, 493, 412, 15778, 21156, 278, 420, 21156, 260, 51492, 51492, 2512, 31927, 15148, 11, 597, 436, 645, 550, 1075, 281, 1895, 15104, 527, 3380, 3827, 666, 51740, 51740], "temperature": 0.0, "avg_logprob": -0.1768596569697062, "compression_ratio": 1.5303643724696356, "no_caption_prob": 1.5689292922616005e-05}, {"id": 1078, "seek": 419254, "start": 4192.54, "end": 4198.18, "text": " something using the JavaScript parser combinator library that was very similar to what I ended", "tokens": [50364, 746, 1228, 264, 15778, 21156, 260, 2512, 31927, 6405, 300, 390, 588, 2531, 281, 437, 286, 4590, 50646, 50646, 493, 365, 294, 2699, 76, 13, 50696, 50696, 663, 311, 1627, 13, 50746, 50746, 865, 13, 50796, 50796, 286, 519, 411, 2512, 31927, 307, 1270, 364, 29714, 1349, 11, 457, 534, 264, 3410, 307, 746, 51080, 51080, 300, 411, 11, 286, 914, 11, 498, 291, 600, 4418, 257, 688, 295, 565, 1228, 512, 295, 264, 3875, 3873, 300, 2699, 76, 51366, 51366, 2709, 505, 411, 979, 378, 433, 11, 309, 311, 257, 588, 4963, 3410, 295, 7697, 760, 257, 1154, 666, 1359, 51685, 51685], "temperature": 0.0, "avg_logprob": -0.11441782996768043, "compression_ratio": 1.6048387096774193, "no_caption_prob": 1.568911102367565e-05}, {"id": 1079, "seek": 419254, "start": 4198.18, "end": 4199.18, "text": " up with in Elm.", "tokens": [50364, 746, 1228, 264, 15778, 21156, 260, 2512, 31927, 6405, 300, 390, 588, 2531, 281, 437, 286, 4590, 50646, 50646, 493, 365, 294, 2699, 76, 13, 50696, 50696, 663, 311, 1627, 13, 50746, 50746, 865, 13, 50796, 50796, 286, 519, 411, 2512, 31927, 307, 1270, 364, 29714, 1349, 11, 457, 534, 264, 3410, 307, 746, 51080, 51080, 300, 411, 11, 286, 914, 11, 498, 291, 600, 4418, 257, 688, 295, 565, 1228, 512, 295, 264, 3875, 3873, 300, 2699, 76, 51366, 51366, 2709, 505, 411, 979, 378, 433, 11, 309, 311, 257, 588, 4963, 3410, 295, 7697, 760, 257, 1154, 666, 1359, 51685, 51685], "temperature": 0.0, "avg_logprob": -0.11441782996768043, "compression_ratio": 1.6048387096774193, "no_caption_prob": 1.568911102367565e-05}, {"id": 1080, "seek": 419254, "start": 4199.18, "end": 4200.18, "text": " That's cool.", "tokens": [50364, 746, 1228, 264, 15778, 21156, 260, 2512, 31927, 6405, 300, 390, 588, 2531, 281, 437, 286, 4590, 50646, 50646, 493, 365, 294, 2699, 76, 13, 50696, 50696, 663, 311, 1627, 13, 50746, 50746, 865, 13, 50796, 50796, 286, 519, 411, 2512, 31927, 307, 1270, 364, 29714, 1349, 11, 457, 534, 264, 3410, 307, 746, 51080, 51080, 300, 411, 11, 286, 914, 11, 498, 291, 600, 4418, 257, 688, 295, 565, 1228, 512, 295, 264, 3875, 3873, 300, 2699, 76, 51366, 51366, 2709, 505, 411, 979, 378, 433, 11, 309, 311, 257, 588, 4963, 3410, 295, 7697, 760, 257, 1154, 666, 1359, 51685, 51685], "temperature": 0.0, "avg_logprob": -0.11441782996768043, "compression_ratio": 1.6048387096774193, "no_caption_prob": 1.568911102367565e-05}, {"id": 1081, "seek": 419254, "start": 4200.18, "end": 4201.18, "text": " Yeah.", "tokens": [50364, 746, 1228, 264, 15778, 21156, 260, 2512, 31927, 6405, 300, 390, 588, 2531, 281, 437, 286, 4590, 50646, 50646, 493, 365, 294, 2699, 76, 13, 50696, 50696, 663, 311, 1627, 13, 50746, 50746, 865, 13, 50796, 50796, 286, 519, 411, 2512, 31927, 307, 1270, 364, 29714, 1349, 11, 457, 534, 264, 3410, 307, 746, 51080, 51080, 300, 411, 11, 286, 914, 11, 498, 291, 600, 4418, 257, 688, 295, 565, 1228, 512, 295, 264, 3875, 3873, 300, 2699, 76, 51366, 51366, 2709, 505, 411, 979, 378, 433, 11, 309, 311, 257, 588, 4963, 3410, 295, 7697, 760, 257, 1154, 666, 1359, 51685, 51685], "temperature": 0.0, "avg_logprob": -0.11441782996768043, "compression_ratio": 1.6048387096774193, "no_caption_prob": 1.568911102367565e-05}, {"id": 1082, "seek": 419254, "start": 4201.18, "end": 4206.86, "text": " I think like combinator is such an intimidating word, but really the concept is something", "tokens": [50364, 746, 1228, 264, 15778, 21156, 260, 2512, 31927, 6405, 300, 390, 588, 2531, 281, 437, 286, 4590, 50646, 50646, 493, 365, 294, 2699, 76, 13, 50696, 50696, 663, 311, 1627, 13, 50746, 50746, 865, 13, 50796, 50796, 286, 519, 411, 2512, 31927, 307, 1270, 364, 29714, 1349, 11, 457, 534, 264, 3410, 307, 746, 51080, 51080, 300, 411, 11, 286, 914, 11, 498, 291, 600, 4418, 257, 688, 295, 565, 1228, 512, 295, 264, 3875, 3873, 300, 2699, 76, 51366, 51366, 2709, 505, 411, 979, 378, 433, 11, 309, 311, 257, 588, 4963, 3410, 295, 7697, 760, 257, 1154, 666, 1359, 51685, 51685], "temperature": 0.0, "avg_logprob": -0.11441782996768043, "compression_ratio": 1.6048387096774193, "no_caption_prob": 1.568911102367565e-05}, {"id": 1083, "seek": 419254, "start": 4206.86, "end": 4212.58, "text": " that like, I mean, if you've spent a lot of time using some of the basic tools that Elm", "tokens": [50364, 746, 1228, 264, 15778, 21156, 260, 2512, 31927, 6405, 300, 390, 588, 2531, 281, 437, 286, 4590, 50646, 50646, 493, 365, 294, 2699, 76, 13, 50696, 50696, 663, 311, 1627, 13, 50746, 50746, 865, 13, 50796, 50796, 286, 519, 411, 2512, 31927, 307, 1270, 364, 29714, 1349, 11, 457, 534, 264, 3410, 307, 746, 51080, 51080, 300, 411, 11, 286, 914, 11, 498, 291, 600, 4418, 257, 688, 295, 565, 1228, 512, 295, 264, 3875, 3873, 300, 2699, 76, 51366, 51366, 2709, 505, 411, 979, 378, 433, 11, 309, 311, 257, 588, 4963, 3410, 295, 7697, 760, 257, 1154, 666, 1359, 51685, 51685], "temperature": 0.0, "avg_logprob": -0.11441782996768043, "compression_ratio": 1.6048387096774193, "no_caption_prob": 1.568911102367565e-05}, {"id": 1084, "seek": 419254, "start": 4212.58, "end": 4218.96, "text": " gives us like decoders, it's a very familiar concept of breaking down a problem into small", "tokens": [50364, 746, 1228, 264, 15778, 21156, 260, 2512, 31927, 6405, 300, 390, 588, 2531, 281, 437, 286, 4590, 50646, 50646, 493, 365, 294, 2699, 76, 13, 50696, 50696, 663, 311, 1627, 13, 50746, 50746, 865, 13, 50796, 50796, 286, 519, 411, 2512, 31927, 307, 1270, 364, 29714, 1349, 11, 457, 534, 264, 3410, 307, 746, 51080, 51080, 300, 411, 11, 286, 914, 11, 498, 291, 600, 4418, 257, 688, 295, 565, 1228, 512, 295, 264, 3875, 3873, 300, 2699, 76, 51366, 51366, 2709, 505, 411, 979, 378, 433, 11, 309, 311, 257, 588, 4963, 3410, 295, 7697, 760, 257, 1154, 666, 1359, 51685, 51685], "temperature": 0.0, "avg_logprob": -0.11441782996768043, "compression_ratio": 1.6048387096774193, "no_caption_prob": 1.568911102367565e-05}, {"id": 1085, "seek": 421896, "start": 4218.96, "end": 4224.74, "text": " sub problems and then building it up into something more complex by using these sort", "tokens": [50364, 1422, 2740, 293, 550, 2390, 309, 493, 666, 746, 544, 3997, 538, 1228, 613, 1333, 50653, 50653, 295, 21928, 6828, 13, 50725, 50725, 663, 311, 439, 309, 307, 13, 50781, 50781, 400, 309, 311, 257, 588, 11, 309, 311, 4074, 570, 562, 291, 722, 281, 411, 519, 466, 264, 2154, 1124, 293, 51007, 51007, 21988, 11, 309, 2544, 370, 6179, 11, 457, 562, 291, 360, 309, 11, 309, 311, 370, 3303, 293, 309, 311, 370, 51267, 51267, 1858, 281, 360, 309, 731, 13, 51317, 51317, 10865, 309, 1936, 411, 264, 10063, 286, 600, 808, 281, 307, 300, 309, 311, 1936, 264, 2649, 51529, 51529, 1296, 411, 32490, 34852, 293, 16694, 1166, 34852, 13, 51741, 51741], "temperature": 0.0, "avg_logprob": -0.09935784951234475, "compression_ratio": 1.7992565055762082, "no_caption_prob": 8.664517736178823e-06}, {"id": 1086, "seek": 421896, "start": 4224.74, "end": 4226.18, "text": " of combining functions.", "tokens": [50364, 1422, 2740, 293, 550, 2390, 309, 493, 666, 746, 544, 3997, 538, 1228, 613, 1333, 50653, 50653, 295, 21928, 6828, 13, 50725, 50725, 663, 311, 439, 309, 307, 13, 50781, 50781, 400, 309, 311, 257, 588, 11, 309, 311, 4074, 570, 562, 291, 722, 281, 411, 519, 466, 264, 2154, 1124, 293, 51007, 51007, 21988, 11, 309, 2544, 370, 6179, 11, 457, 562, 291, 360, 309, 11, 309, 311, 370, 3303, 293, 309, 311, 370, 51267, 51267, 1858, 281, 360, 309, 731, 13, 51317, 51317, 10865, 309, 1936, 411, 264, 10063, 286, 600, 808, 281, 307, 300, 309, 311, 1936, 264, 2649, 51529, 51529, 1296, 411, 32490, 34852, 293, 16694, 1166, 34852, 13, 51741, 51741], "temperature": 0.0, "avg_logprob": -0.09935784951234475, "compression_ratio": 1.7992565055762082, "no_caption_prob": 8.664517736178823e-06}, {"id": 1087, "seek": 421896, "start": 4226.18, "end": 4227.3, "text": " That's all it is.", "tokens": [50364, 1422, 2740, 293, 550, 2390, 309, 493, 666, 746, 544, 3997, 538, 1228, 613, 1333, 50653, 50653, 295, 21928, 6828, 13, 50725, 50725, 663, 311, 439, 309, 307, 13, 50781, 50781, 400, 309, 311, 257, 588, 11, 309, 311, 4074, 570, 562, 291, 722, 281, 411, 519, 466, 264, 2154, 1124, 293, 51007, 51007, 21988, 11, 309, 2544, 370, 6179, 11, 457, 562, 291, 360, 309, 11, 309, 311, 370, 3303, 293, 309, 311, 370, 51267, 51267, 1858, 281, 360, 309, 731, 13, 51317, 51317, 10865, 309, 1936, 411, 264, 10063, 286, 600, 808, 281, 307, 300, 309, 311, 1936, 264, 2649, 51529, 51529, 1296, 411, 32490, 34852, 293, 16694, 1166, 34852, 13, 51741, 51741], "temperature": 0.0, "avg_logprob": -0.09935784951234475, "compression_ratio": 1.7992565055762082, "no_caption_prob": 8.664517736178823e-06}, {"id": 1088, "seek": 421896, "start": 4227.3, "end": 4231.82, "text": " And it's a very, it's funny because when you start to like think about the internals and", "tokens": [50364, 1422, 2740, 293, 550, 2390, 309, 493, 666, 746, 544, 3997, 538, 1228, 613, 1333, 50653, 50653, 295, 21928, 6828, 13, 50725, 50725, 663, 311, 439, 309, 307, 13, 50781, 50781, 400, 309, 311, 257, 588, 11, 309, 311, 4074, 570, 562, 291, 722, 281, 411, 519, 466, 264, 2154, 1124, 293, 51007, 51007, 21988, 11, 309, 2544, 370, 6179, 11, 457, 562, 291, 360, 309, 11, 309, 311, 370, 3303, 293, 309, 311, 370, 51267, 51267, 1858, 281, 360, 309, 731, 13, 51317, 51317, 10865, 309, 1936, 411, 264, 10063, 286, 600, 808, 281, 307, 300, 309, 311, 1936, 264, 2649, 51529, 51529, 1296, 411, 32490, 34852, 293, 16694, 1166, 34852, 13, 51741, 51741], "temperature": 0.0, "avg_logprob": -0.09935784951234475, "compression_ratio": 1.7992565055762082, "no_caption_prob": 8.664517736178823e-06}, {"id": 1089, "seek": 421896, "start": 4231.82, "end": 4237.02, "text": " definitions, it seems so complicated, but when you do it, it's so natural and it's so", "tokens": [50364, 1422, 2740, 293, 550, 2390, 309, 493, 666, 746, 544, 3997, 538, 1228, 613, 1333, 50653, 50653, 295, 21928, 6828, 13, 50725, 50725, 663, 311, 439, 309, 307, 13, 50781, 50781, 400, 309, 311, 257, 588, 11, 309, 311, 4074, 570, 562, 291, 722, 281, 411, 519, 466, 264, 2154, 1124, 293, 51007, 51007, 21988, 11, 309, 2544, 370, 6179, 11, 457, 562, 291, 360, 309, 11, 309, 311, 370, 3303, 293, 309, 311, 370, 51267, 51267, 1858, 281, 360, 309, 731, 13, 51317, 51317, 10865, 309, 1936, 411, 264, 10063, 286, 600, 808, 281, 307, 300, 309, 311, 1936, 264, 2649, 51529, 51529, 1296, 411, 32490, 34852, 293, 16694, 1166, 34852, 13, 51741, 51741], "temperature": 0.0, "avg_logprob": -0.09935784951234475, "compression_ratio": 1.7992565055762082, "no_caption_prob": 8.664517736178823e-06}, {"id": 1090, "seek": 421896, "start": 4237.02, "end": 4238.02, "text": " easy to do it well.", "tokens": [50364, 1422, 2740, 293, 550, 2390, 309, 493, 666, 746, 544, 3997, 538, 1228, 613, 1333, 50653, 50653, 295, 21928, 6828, 13, 50725, 50725, 663, 311, 439, 309, 307, 13, 50781, 50781, 400, 309, 311, 257, 588, 11, 309, 311, 4074, 570, 562, 291, 722, 281, 411, 519, 466, 264, 2154, 1124, 293, 51007, 51007, 21988, 11, 309, 2544, 370, 6179, 11, 457, 562, 291, 360, 309, 11, 309, 311, 370, 3303, 293, 309, 311, 370, 51267, 51267, 1858, 281, 360, 309, 731, 13, 51317, 51317, 10865, 309, 1936, 411, 264, 10063, 286, 600, 808, 281, 307, 300, 309, 311, 1936, 264, 2649, 51529, 51529, 1296, 411, 32490, 34852, 293, 16694, 1166, 34852, 13, 51741, 51741], "temperature": 0.0, "avg_logprob": -0.09935784951234475, "compression_ratio": 1.7992565055762082, "no_caption_prob": 8.664517736178823e-06}, {"id": 1091, "seek": 421896, "start": 4238.02, "end": 4242.26, "text": " Cause it basically like the conclusion I've come to is that it's basically the difference", "tokens": [50364, 1422, 2740, 293, 550, 2390, 309, 493, 666, 746, 544, 3997, 538, 1228, 613, 1333, 50653, 50653, 295, 21928, 6828, 13, 50725, 50725, 663, 311, 439, 309, 307, 13, 50781, 50781, 400, 309, 311, 257, 588, 11, 309, 311, 4074, 570, 562, 291, 722, 281, 411, 519, 466, 264, 2154, 1124, 293, 51007, 51007, 21988, 11, 309, 2544, 370, 6179, 11, 457, 562, 291, 360, 309, 11, 309, 311, 370, 3303, 293, 309, 311, 370, 51267, 51267, 1858, 281, 360, 309, 731, 13, 51317, 51317, 10865, 309, 1936, 411, 264, 10063, 286, 600, 808, 281, 307, 300, 309, 311, 1936, 264, 2649, 51529, 51529, 1296, 411, 32490, 34852, 293, 16694, 1166, 34852, 13, 51741, 51741], "temperature": 0.0, "avg_logprob": -0.09935784951234475, "compression_ratio": 1.7992565055762082, "no_caption_prob": 8.664517736178823e-06}, {"id": 1092, "seek": 421896, "start": 4242.26, "end": 4246.5, "text": " between like imperative transformations and declarative transformations.", "tokens": [50364, 1422, 2740, 293, 550, 2390, 309, 493, 666, 746, 544, 3997, 538, 1228, 613, 1333, 50653, 50653, 295, 21928, 6828, 13, 50725, 50725, 663, 311, 439, 309, 307, 13, 50781, 50781, 400, 309, 311, 257, 588, 11, 309, 311, 4074, 570, 562, 291, 722, 281, 411, 519, 466, 264, 2154, 1124, 293, 51007, 51007, 21988, 11, 309, 2544, 370, 6179, 11, 457, 562, 291, 360, 309, 11, 309, 311, 370, 3303, 293, 309, 311, 370, 51267, 51267, 1858, 281, 360, 309, 731, 13, 51317, 51317, 10865, 309, 1936, 411, 264, 10063, 286, 600, 808, 281, 307, 300, 309, 311, 1936, 264, 2649, 51529, 51529, 1296, 411, 32490, 34852, 293, 16694, 1166, 34852, 13, 51741, 51741], "temperature": 0.0, "avg_logprob": -0.09935784951234475, "compression_ratio": 1.7992565055762082, "no_caption_prob": 8.664517736178823e-06}, {"id": 1093, "seek": 424650, "start": 4246.5, "end": 4250.2, "text": " That's basically what a combinator is, is it's like a declarative way of describing", "tokens": [50364, 663, 311, 1936, 437, 257, 2512, 31927, 307, 11, 307, 309, 311, 411, 257, 16694, 1166, 636, 295, 16141, 50549, 50549, 257, 9887, 11, 597, 393, 550, 312, 3094, 484, 295, 411, 1936, 436, 434, 264, 28540, 50791, 50791, 9887, 2390, 8474, 293, 613, 14154, 2306, 689, 291, 393, 10432, 552, 1214, 13, 51047, 51047, 663, 311, 439, 309, 307, 13, 51097, 51097, 400, 309, 311, 257, 588, 3303, 5102, 13, 51202, 51202, 39401, 291, 528, 11, 291, 362, 411, 732, 3755, 295, 1412, 300, 291, 1116, 528, 281, 589, 365, 293, 291, 434, 51434, 51434, 6359, 11, 876, 11, 286, 643, 281, 10432, 552, 13, 51498, 51498, 467, 1062, 312, 11, 286, 362, 732, 815, 6446, 13, 51573, 51573, 286, 528, 1293, 295, 11, 286, 528, 281, 360, 512, 6916, 322, 1293, 295, 729, 281, 483, 257, 777, 1310, 646, 13, 51811, 51811], "temperature": 0.0, "avg_logprob": -0.1190417564078553, "compression_ratio": 1.7665615141955835, "no_caption_prob": 9.516200407233555e-06}, {"id": 1094, "seek": 424650, "start": 4250.2, "end": 4255.04, "text": " a transformation, which can then be built out of like basically they're the primitive", "tokens": [50364, 663, 311, 1936, 437, 257, 2512, 31927, 307, 11, 307, 309, 311, 411, 257, 16694, 1166, 636, 295, 16141, 50549, 50549, 257, 9887, 11, 597, 393, 550, 312, 3094, 484, 295, 411, 1936, 436, 434, 264, 28540, 50791, 50791, 9887, 2390, 8474, 293, 613, 14154, 2306, 689, 291, 393, 10432, 552, 1214, 13, 51047, 51047, 663, 311, 439, 309, 307, 13, 51097, 51097, 400, 309, 311, 257, 588, 3303, 5102, 13, 51202, 51202, 39401, 291, 528, 11, 291, 362, 411, 732, 3755, 295, 1412, 300, 291, 1116, 528, 281, 589, 365, 293, 291, 434, 51434, 51434, 6359, 11, 876, 11, 286, 643, 281, 10432, 552, 13, 51498, 51498, 467, 1062, 312, 11, 286, 362, 732, 815, 6446, 13, 51573, 51573, 286, 528, 1293, 295, 11, 286, 528, 281, 360, 512, 6916, 322, 1293, 295, 729, 281, 483, 257, 777, 1310, 646, 13, 51811, 51811], "temperature": 0.0, "avg_logprob": -0.1190417564078553, "compression_ratio": 1.7665615141955835, "no_caption_prob": 9.516200407233555e-06}, {"id": 1095, "seek": 424650, "start": 4255.04, "end": 4260.16, "text": " transformation building blocks and these compound ones where you can combine them together.", "tokens": [50364, 663, 311, 1936, 437, 257, 2512, 31927, 307, 11, 307, 309, 311, 411, 257, 16694, 1166, 636, 295, 16141, 50549, 50549, 257, 9887, 11, 597, 393, 550, 312, 3094, 484, 295, 411, 1936, 436, 434, 264, 28540, 50791, 50791, 9887, 2390, 8474, 293, 613, 14154, 2306, 689, 291, 393, 10432, 552, 1214, 13, 51047, 51047, 663, 311, 439, 309, 307, 13, 51097, 51097, 400, 309, 311, 257, 588, 3303, 5102, 13, 51202, 51202, 39401, 291, 528, 11, 291, 362, 411, 732, 3755, 295, 1412, 300, 291, 1116, 528, 281, 589, 365, 293, 291, 434, 51434, 51434, 6359, 11, 876, 11, 286, 643, 281, 10432, 552, 13, 51498, 51498, 467, 1062, 312, 11, 286, 362, 732, 815, 6446, 13, 51573, 51573, 286, 528, 1293, 295, 11, 286, 528, 281, 360, 512, 6916, 322, 1293, 295, 729, 281, 483, 257, 777, 1310, 646, 13, 51811, 51811], "temperature": 0.0, "avg_logprob": -0.1190417564078553, "compression_ratio": 1.7665615141955835, "no_caption_prob": 9.516200407233555e-06}, {"id": 1096, "seek": 424650, "start": 4260.16, "end": 4261.16, "text": " That's all it is.", "tokens": [50364, 663, 311, 1936, 437, 257, 2512, 31927, 307, 11, 307, 309, 311, 411, 257, 16694, 1166, 636, 295, 16141, 50549, 50549, 257, 9887, 11, 597, 393, 550, 312, 3094, 484, 295, 411, 1936, 436, 434, 264, 28540, 50791, 50791, 9887, 2390, 8474, 293, 613, 14154, 2306, 689, 291, 393, 10432, 552, 1214, 13, 51047, 51047, 663, 311, 439, 309, 307, 13, 51097, 51097, 400, 309, 311, 257, 588, 3303, 5102, 13, 51202, 51202, 39401, 291, 528, 11, 291, 362, 411, 732, 3755, 295, 1412, 300, 291, 1116, 528, 281, 589, 365, 293, 291, 434, 51434, 51434, 6359, 11, 876, 11, 286, 643, 281, 10432, 552, 13, 51498, 51498, 467, 1062, 312, 11, 286, 362, 732, 815, 6446, 13, 51573, 51573, 286, 528, 1293, 295, 11, 286, 528, 281, 360, 512, 6916, 322, 1293, 295, 729, 281, 483, 257, 777, 1310, 646, 13, 51811, 51811], "temperature": 0.0, "avg_logprob": -0.1190417564078553, "compression_ratio": 1.7665615141955835, "no_caption_prob": 9.516200407233555e-06}, {"id": 1097, "seek": 424650, "start": 4261.16, "end": 4263.26, "text": " And it's a very natural pattern.", "tokens": [50364, 663, 311, 1936, 437, 257, 2512, 31927, 307, 11, 307, 309, 311, 411, 257, 16694, 1166, 636, 295, 16141, 50549, 50549, 257, 9887, 11, 597, 393, 550, 312, 3094, 484, 295, 411, 1936, 436, 434, 264, 28540, 50791, 50791, 9887, 2390, 8474, 293, 613, 14154, 2306, 689, 291, 393, 10432, 552, 1214, 13, 51047, 51047, 663, 311, 439, 309, 307, 13, 51097, 51097, 400, 309, 311, 257, 588, 3303, 5102, 13, 51202, 51202, 39401, 291, 528, 11, 291, 362, 411, 732, 3755, 295, 1412, 300, 291, 1116, 528, 281, 589, 365, 293, 291, 434, 51434, 51434, 6359, 11, 876, 11, 286, 643, 281, 10432, 552, 13, 51498, 51498, 467, 1062, 312, 11, 286, 362, 732, 815, 6446, 13, 51573, 51573, 286, 528, 1293, 295, 11, 286, 528, 281, 360, 512, 6916, 322, 1293, 295, 729, 281, 483, 257, 777, 1310, 646, 13, 51811, 51811], "temperature": 0.0, "avg_logprob": -0.1190417564078553, "compression_ratio": 1.7665615141955835, "no_caption_prob": 9.516200407233555e-06}, {"id": 1098, "seek": 424650, "start": 4263.26, "end": 4267.9, "text": " Anytime you want, you have like two pieces of data that you'd want to work with and you're", "tokens": [50364, 663, 311, 1936, 437, 257, 2512, 31927, 307, 11, 307, 309, 311, 411, 257, 16694, 1166, 636, 295, 16141, 50549, 50549, 257, 9887, 11, 597, 393, 550, 312, 3094, 484, 295, 411, 1936, 436, 434, 264, 28540, 50791, 50791, 9887, 2390, 8474, 293, 613, 14154, 2306, 689, 291, 393, 10432, 552, 1214, 13, 51047, 51047, 663, 311, 439, 309, 307, 13, 51097, 51097, 400, 309, 311, 257, 588, 3303, 5102, 13, 51202, 51202, 39401, 291, 528, 11, 291, 362, 411, 732, 3755, 295, 1412, 300, 291, 1116, 528, 281, 589, 365, 293, 291, 434, 51434, 51434, 6359, 11, 876, 11, 286, 643, 281, 10432, 552, 13, 51498, 51498, 467, 1062, 312, 11, 286, 362, 732, 815, 6446, 13, 51573, 51573, 286, 528, 1293, 295, 11, 286, 528, 281, 360, 512, 6916, 322, 1293, 295, 729, 281, 483, 257, 777, 1310, 646, 13, 51811, 51811], "temperature": 0.0, "avg_logprob": -0.1190417564078553, "compression_ratio": 1.7665615141955835, "no_caption_prob": 9.516200407233555e-06}, {"id": 1099, "seek": 424650, "start": 4267.9, "end": 4269.18, "text": " wondering, Oh, I need to combine them.", "tokens": [50364, 663, 311, 1936, 437, 257, 2512, 31927, 307, 11, 307, 309, 311, 411, 257, 16694, 1166, 636, 295, 16141, 50549, 50549, 257, 9887, 11, 597, 393, 550, 312, 3094, 484, 295, 411, 1936, 436, 434, 264, 28540, 50791, 50791, 9887, 2390, 8474, 293, 613, 14154, 2306, 689, 291, 393, 10432, 552, 1214, 13, 51047, 51047, 663, 311, 439, 309, 307, 13, 51097, 51097, 400, 309, 311, 257, 588, 3303, 5102, 13, 51202, 51202, 39401, 291, 528, 11, 291, 362, 411, 732, 3755, 295, 1412, 300, 291, 1116, 528, 281, 589, 365, 293, 291, 434, 51434, 51434, 6359, 11, 876, 11, 286, 643, 281, 10432, 552, 13, 51498, 51498, 467, 1062, 312, 11, 286, 362, 732, 815, 6446, 13, 51573, 51573, 286, 528, 1293, 295, 11, 286, 528, 281, 360, 512, 6916, 322, 1293, 295, 729, 281, 483, 257, 777, 1310, 646, 13, 51811, 51811], "temperature": 0.0, "avg_logprob": -0.1190417564078553, "compression_ratio": 1.7665615141955835, "no_caption_prob": 9.516200407233555e-06}, {"id": 1100, "seek": 424650, "start": 4269.18, "end": 4270.68, "text": " It might be, I have two maybes.", "tokens": [50364, 663, 311, 1936, 437, 257, 2512, 31927, 307, 11, 307, 309, 311, 411, 257, 16694, 1166, 636, 295, 16141, 50549, 50549, 257, 9887, 11, 597, 393, 550, 312, 3094, 484, 295, 411, 1936, 436, 434, 264, 28540, 50791, 50791, 9887, 2390, 8474, 293, 613, 14154, 2306, 689, 291, 393, 10432, 552, 1214, 13, 51047, 51047, 663, 311, 439, 309, 307, 13, 51097, 51097, 400, 309, 311, 257, 588, 3303, 5102, 13, 51202, 51202, 39401, 291, 528, 11, 291, 362, 411, 732, 3755, 295, 1412, 300, 291, 1116, 528, 281, 589, 365, 293, 291, 434, 51434, 51434, 6359, 11, 876, 11, 286, 643, 281, 10432, 552, 13, 51498, 51498, 467, 1062, 312, 11, 286, 362, 732, 815, 6446, 13, 51573, 51573, 286, 528, 1293, 295, 11, 286, 528, 281, 360, 512, 6916, 322, 1293, 295, 729, 281, 483, 257, 777, 1310, 646, 13, 51811, 51811], "temperature": 0.0, "avg_logprob": -0.1190417564078553, "compression_ratio": 1.7665615141955835, "no_caption_prob": 9.516200407233555e-06}, {"id": 1101, "seek": 424650, "start": 4270.68, "end": 4275.44, "text": " I want both of, I want to do some operation on both of those to get a new maybe back.", "tokens": [50364, 663, 311, 1936, 437, 257, 2512, 31927, 307, 11, 307, 309, 311, 411, 257, 16694, 1166, 636, 295, 16141, 50549, 50549, 257, 9887, 11, 597, 393, 550, 312, 3094, 484, 295, 411, 1936, 436, 434, 264, 28540, 50791, 50791, 9887, 2390, 8474, 293, 613, 14154, 2306, 689, 291, 393, 10432, 552, 1214, 13, 51047, 51047, 663, 311, 439, 309, 307, 13, 51097, 51097, 400, 309, 311, 257, 588, 3303, 5102, 13, 51202, 51202, 39401, 291, 528, 11, 291, 362, 411, 732, 3755, 295, 1412, 300, 291, 1116, 528, 281, 589, 365, 293, 291, 434, 51434, 51434, 6359, 11, 876, 11, 286, 643, 281, 10432, 552, 13, 51498, 51498, 467, 1062, 312, 11, 286, 362, 732, 815, 6446, 13, 51573, 51573, 286, 528, 1293, 295, 11, 286, 528, 281, 360, 512, 6916, 322, 1293, 295, 729, 281, 483, 257, 777, 1310, 646, 13, 51811, 51811], "temperature": 0.0, "avg_logprob": -0.1190417564078553, "compression_ratio": 1.7665615141955835, "no_caption_prob": 9.516200407233555e-06}, {"id": 1102, "seek": 427544, "start": 4275.44, "end": 4277.259999999999, "text": " That might be one way to do it.", "tokens": [50364, 663, 1062, 312, 472, 636, 281, 360, 309, 13, 50455, 50455, 663, 576, 312, 257, 2512, 31927, 13, 50559, 50559, 286, 519, 300, 264, 732, 3467, 295, 2512, 31927, 300, 286, 2978, 281, 4445, 337, 341, 21156, 278, 6405, 11, 50815, 50815, 472, 390, 257, 636, 281, 10432, 732, 3755, 1214, 293, 584, 11, 286, 528, 281, 360, 48377, 341, 2522, 295, 51000, 51000, 1412, 293, 611, 341, 661, 2522, 295, 1412, 13, 51113, 51113, 583, 611, 2171, 291, 528, 281, 584, 11, 5217, 281, 48377, 309, 341, 636, 11, 420, 498, 300, 18199, 11, 611, 51383, 51383, 5217, 281, 48377, 309, 341, 661, 636, 13, 51457, 51457, 759, 291, 600, 1096, 31828, 979, 8616, 11, 291, 603, 312, 4963, 365, 411, 264, 472, 295, 689, 291, 976, 309, 257, 1329, 51637, 51637, 295, 979, 378, 433, 293, 309, 486, 853, 439, 295, 552, 293, 24123, 49263, 700, 307, 264, 2306, 300, 311, 51839, 51839], "temperature": 0.0, "avg_logprob": -0.14129396912398612, "compression_ratio": 1.8906752411575563, "no_caption_prob": 5.338118626241339e-06}, {"id": 1103, "seek": 427544, "start": 4277.259999999999, "end": 4279.339999999999, "text": " That would be a combinator.", "tokens": [50364, 663, 1062, 312, 472, 636, 281, 360, 309, 13, 50455, 50455, 663, 576, 312, 257, 2512, 31927, 13, 50559, 50559, 286, 519, 300, 264, 732, 3467, 295, 2512, 31927, 300, 286, 2978, 281, 4445, 337, 341, 21156, 278, 6405, 11, 50815, 50815, 472, 390, 257, 636, 281, 10432, 732, 3755, 1214, 293, 584, 11, 286, 528, 281, 360, 48377, 341, 2522, 295, 51000, 51000, 1412, 293, 611, 341, 661, 2522, 295, 1412, 13, 51113, 51113, 583, 611, 2171, 291, 528, 281, 584, 11, 5217, 281, 48377, 309, 341, 636, 11, 420, 498, 300, 18199, 11, 611, 51383, 51383, 5217, 281, 48377, 309, 341, 661, 636, 13, 51457, 51457, 759, 291, 600, 1096, 31828, 979, 8616, 11, 291, 603, 312, 4963, 365, 411, 264, 472, 295, 689, 291, 976, 309, 257, 1329, 51637, 51637, 295, 979, 378, 433, 293, 309, 486, 853, 439, 295, 552, 293, 24123, 49263, 700, 307, 264, 2306, 300, 311, 51839, 51839], "temperature": 0.0, "avg_logprob": -0.14129396912398612, "compression_ratio": 1.8906752411575563, "no_caption_prob": 5.338118626241339e-06}, {"id": 1104, "seek": 427544, "start": 4279.339999999999, "end": 4284.46, "text": " I think that the two types of combinator that I needed to implement for this parsing library,", "tokens": [50364, 663, 1062, 312, 472, 636, 281, 360, 309, 13, 50455, 50455, 663, 576, 312, 257, 2512, 31927, 13, 50559, 50559, 286, 519, 300, 264, 732, 3467, 295, 2512, 31927, 300, 286, 2978, 281, 4445, 337, 341, 21156, 278, 6405, 11, 50815, 50815, 472, 390, 257, 636, 281, 10432, 732, 3755, 1214, 293, 584, 11, 286, 528, 281, 360, 48377, 341, 2522, 295, 51000, 51000, 1412, 293, 611, 341, 661, 2522, 295, 1412, 13, 51113, 51113, 583, 611, 2171, 291, 528, 281, 584, 11, 5217, 281, 48377, 309, 341, 636, 11, 420, 498, 300, 18199, 11, 611, 51383, 51383, 5217, 281, 48377, 309, 341, 661, 636, 13, 51457, 51457, 759, 291, 600, 1096, 31828, 979, 8616, 11, 291, 603, 312, 4963, 365, 411, 264, 472, 295, 689, 291, 976, 309, 257, 1329, 51637, 51637, 295, 979, 378, 433, 293, 309, 486, 853, 439, 295, 552, 293, 24123, 49263, 700, 307, 264, 2306, 300, 311, 51839, 51839], "temperature": 0.0, "avg_logprob": -0.14129396912398612, "compression_ratio": 1.8906752411575563, "no_caption_prob": 5.338118626241339e-06}, {"id": 1105, "seek": 427544, "start": 4284.46, "end": 4288.16, "text": " one was a way to combine two pieces together and say, I want to do parse this piece of", "tokens": [50364, 663, 1062, 312, 472, 636, 281, 360, 309, 13, 50455, 50455, 663, 576, 312, 257, 2512, 31927, 13, 50559, 50559, 286, 519, 300, 264, 732, 3467, 295, 2512, 31927, 300, 286, 2978, 281, 4445, 337, 341, 21156, 278, 6405, 11, 50815, 50815, 472, 390, 257, 636, 281, 10432, 732, 3755, 1214, 293, 584, 11, 286, 528, 281, 360, 48377, 341, 2522, 295, 51000, 51000, 1412, 293, 611, 341, 661, 2522, 295, 1412, 13, 51113, 51113, 583, 611, 2171, 291, 528, 281, 584, 11, 5217, 281, 48377, 309, 341, 636, 11, 420, 498, 300, 18199, 11, 611, 51383, 51383, 5217, 281, 48377, 309, 341, 661, 636, 13, 51457, 51457, 759, 291, 600, 1096, 31828, 979, 8616, 11, 291, 603, 312, 4963, 365, 411, 264, 472, 295, 689, 291, 976, 309, 257, 1329, 51637, 51637, 295, 979, 378, 433, 293, 309, 486, 853, 439, 295, 552, 293, 24123, 49263, 700, 307, 264, 2306, 300, 311, 51839, 51839], "temperature": 0.0, "avg_logprob": -0.14129396912398612, "compression_ratio": 1.8906752411575563, "no_caption_prob": 5.338118626241339e-06}, {"id": 1106, "seek": 427544, "start": 4288.16, "end": 4290.419999999999, "text": " data and also this other piece of data.", "tokens": [50364, 663, 1062, 312, 472, 636, 281, 360, 309, 13, 50455, 50455, 663, 576, 312, 257, 2512, 31927, 13, 50559, 50559, 286, 519, 300, 264, 732, 3467, 295, 2512, 31927, 300, 286, 2978, 281, 4445, 337, 341, 21156, 278, 6405, 11, 50815, 50815, 472, 390, 257, 636, 281, 10432, 732, 3755, 1214, 293, 584, 11, 286, 528, 281, 360, 48377, 341, 2522, 295, 51000, 51000, 1412, 293, 611, 341, 661, 2522, 295, 1412, 13, 51113, 51113, 583, 611, 2171, 291, 528, 281, 584, 11, 5217, 281, 48377, 309, 341, 636, 11, 420, 498, 300, 18199, 11, 611, 51383, 51383, 5217, 281, 48377, 309, 341, 661, 636, 13, 51457, 51457, 759, 291, 600, 1096, 31828, 979, 8616, 11, 291, 603, 312, 4963, 365, 411, 264, 472, 295, 689, 291, 976, 309, 257, 1329, 51637, 51637, 295, 979, 378, 433, 293, 309, 486, 853, 439, 295, 552, 293, 24123, 49263, 700, 307, 264, 2306, 300, 311, 51839, 51839], "temperature": 0.0, "avg_logprob": -0.14129396912398612, "compression_ratio": 1.8906752411575563, "no_caption_prob": 5.338118626241339e-06}, {"id": 1107, "seek": 427544, "start": 4290.419999999999, "end": 4295.82, "text": " But also sometimes you want to say, attempt to parse it this way, or if that fails, also", "tokens": [50364, 663, 1062, 312, 472, 636, 281, 360, 309, 13, 50455, 50455, 663, 576, 312, 257, 2512, 31927, 13, 50559, 50559, 286, 519, 300, 264, 732, 3467, 295, 2512, 31927, 300, 286, 2978, 281, 4445, 337, 341, 21156, 278, 6405, 11, 50815, 50815, 472, 390, 257, 636, 281, 10432, 732, 3755, 1214, 293, 584, 11, 286, 528, 281, 360, 48377, 341, 2522, 295, 51000, 51000, 1412, 293, 611, 341, 661, 2522, 295, 1412, 13, 51113, 51113, 583, 611, 2171, 291, 528, 281, 584, 11, 5217, 281, 48377, 309, 341, 636, 11, 420, 498, 300, 18199, 11, 611, 51383, 51383, 5217, 281, 48377, 309, 341, 661, 636, 13, 51457, 51457, 759, 291, 600, 1096, 31828, 979, 8616, 11, 291, 603, 312, 4963, 365, 411, 264, 472, 295, 689, 291, 976, 309, 257, 1329, 51637, 51637, 295, 979, 378, 433, 293, 309, 486, 853, 439, 295, 552, 293, 24123, 49263, 700, 307, 264, 2306, 300, 311, 51839, 51839], "temperature": 0.0, "avg_logprob": -0.14129396912398612, "compression_ratio": 1.8906752411575563, "no_caption_prob": 5.338118626241339e-06}, {"id": 1108, "seek": 427544, "start": 4295.82, "end": 4297.299999999999, "text": " attempt to parse it this other way.", "tokens": [50364, 663, 1062, 312, 472, 636, 281, 360, 309, 13, 50455, 50455, 663, 576, 312, 257, 2512, 31927, 13, 50559, 50559, 286, 519, 300, 264, 732, 3467, 295, 2512, 31927, 300, 286, 2978, 281, 4445, 337, 341, 21156, 278, 6405, 11, 50815, 50815, 472, 390, 257, 636, 281, 10432, 732, 3755, 1214, 293, 584, 11, 286, 528, 281, 360, 48377, 341, 2522, 295, 51000, 51000, 1412, 293, 611, 341, 661, 2522, 295, 1412, 13, 51113, 51113, 583, 611, 2171, 291, 528, 281, 584, 11, 5217, 281, 48377, 309, 341, 636, 11, 420, 498, 300, 18199, 11, 611, 51383, 51383, 5217, 281, 48377, 309, 341, 661, 636, 13, 51457, 51457, 759, 291, 600, 1096, 31828, 979, 8616, 11, 291, 603, 312, 4963, 365, 411, 264, 472, 295, 689, 291, 976, 309, 257, 1329, 51637, 51637, 295, 979, 378, 433, 293, 309, 486, 853, 439, 295, 552, 293, 24123, 49263, 700, 307, 264, 2306, 300, 311, 51839, 51839], "temperature": 0.0, "avg_logprob": -0.14129396912398612, "compression_ratio": 1.8906752411575563, "no_caption_prob": 5.338118626241339e-06}, {"id": 1109, "seek": 427544, "start": 4297.299999999999, "end": 4300.9, "text": " If you've done JSON decoding, you'll be familiar with like the one of where you give it a list", "tokens": [50364, 663, 1062, 312, 472, 636, 281, 360, 309, 13, 50455, 50455, 663, 576, 312, 257, 2512, 31927, 13, 50559, 50559, 286, 519, 300, 264, 732, 3467, 295, 2512, 31927, 300, 286, 2978, 281, 4445, 337, 341, 21156, 278, 6405, 11, 50815, 50815, 472, 390, 257, 636, 281, 10432, 732, 3755, 1214, 293, 584, 11, 286, 528, 281, 360, 48377, 341, 2522, 295, 51000, 51000, 1412, 293, 611, 341, 661, 2522, 295, 1412, 13, 51113, 51113, 583, 611, 2171, 291, 528, 281, 584, 11, 5217, 281, 48377, 309, 341, 636, 11, 420, 498, 300, 18199, 11, 611, 51383, 51383, 5217, 281, 48377, 309, 341, 661, 636, 13, 51457, 51457, 759, 291, 600, 1096, 31828, 979, 8616, 11, 291, 603, 312, 4963, 365, 411, 264, 472, 295, 689, 291, 976, 309, 257, 1329, 51637, 51637, 295, 979, 378, 433, 293, 309, 486, 853, 439, 295, 552, 293, 24123, 49263, 700, 307, 264, 2306, 300, 311, 51839, 51839], "temperature": 0.0, "avg_logprob": -0.14129396912398612, "compression_ratio": 1.8906752411575563, "no_caption_prob": 5.338118626241339e-06}, {"id": 1110, "seek": 427544, "start": 4300.9, "end": 4304.94, "text": " of decoders and it will try all of them and whichever succeeds first is the ones that's", "tokens": [50364, 663, 1062, 312, 472, 636, 281, 360, 309, 13, 50455, 50455, 663, 576, 312, 257, 2512, 31927, 13, 50559, 50559, 286, 519, 300, 264, 732, 3467, 295, 2512, 31927, 300, 286, 2978, 281, 4445, 337, 341, 21156, 278, 6405, 11, 50815, 50815, 472, 390, 257, 636, 281, 10432, 732, 3755, 1214, 293, 584, 11, 286, 528, 281, 360, 48377, 341, 2522, 295, 51000, 51000, 1412, 293, 611, 341, 661, 2522, 295, 1412, 13, 51113, 51113, 583, 611, 2171, 291, 528, 281, 584, 11, 5217, 281, 48377, 309, 341, 636, 11, 420, 498, 300, 18199, 11, 611, 51383, 51383, 5217, 281, 48377, 309, 341, 661, 636, 13, 51457, 51457, 759, 291, 600, 1096, 31828, 979, 8616, 11, 291, 603, 312, 4963, 365, 411, 264, 472, 295, 689, 291, 976, 309, 257, 1329, 51637, 51637, 295, 979, 378, 433, 293, 309, 486, 853, 439, 295, 552, 293, 24123, 49263, 700, 307, 264, 2306, 300, 311, 51839, 51839], "temperature": 0.0, "avg_logprob": -0.14129396912398612, "compression_ratio": 1.8906752411575563, "no_caption_prob": 5.338118626241339e-06}, {"id": 1111, "seek": 430494, "start": 4304.94, "end": 4305.94, "text": " fused.", "tokens": [50364, 283, 4717, 13, 50414, 50414, 400, 286, 12270, 472, 295, 729, 337, 452, 707, 21156, 260, 293, 300, 311, 611, 257, 1254, 295, 2512, 31927, 13, 50720, 50720, 865, 13, 50770, 50770, 492, 2825, 466, 341, 322, 527, 2699, 76, 21156, 260, 3500, 11, 457, 456, 307, 257, 534, 1880, 551, 300, 51020, 51020, 562, 291, 434, 1348, 490, 1752, 1228, 31828, 979, 1429, 293, 550, 291, 352, 764, 264, 2699, 76, 21156, 260, 51286, 51286, 6405, 11, 309, 311, 733, 295, 5682, 686, 48314, 570, 291, 764, 472, 295, 293, 291, 434, 411, 11, 1699, 257, 3456, 11, 51549, 51549, 264, 472, 295, 445, 7612, 322, 264, 700, 551, 294, 452, 472, 295, 300, 632, 1045, 819, 3956, 13, 51832, 51832], "temperature": 0.0, "avg_logprob": -0.10067419082887712, "compression_ratio": 1.6702508960573477, "no_caption_prob": 3.4267959563294426e-05}, {"id": 1112, "seek": 430494, "start": 4305.94, "end": 4312.0599999999995, "text": " And I implemented one of those for my little parser and that's also a form of combinator.", "tokens": [50364, 283, 4717, 13, 50414, 50414, 400, 286, 12270, 472, 295, 729, 337, 452, 707, 21156, 260, 293, 300, 311, 611, 257, 1254, 295, 2512, 31927, 13, 50720, 50720, 865, 13, 50770, 50770, 492, 2825, 466, 341, 322, 527, 2699, 76, 21156, 260, 3500, 11, 457, 456, 307, 257, 534, 1880, 551, 300, 51020, 51020, 562, 291, 434, 1348, 490, 1752, 1228, 31828, 979, 1429, 293, 550, 291, 352, 764, 264, 2699, 76, 21156, 260, 51286, 51286, 6405, 11, 309, 311, 733, 295, 5682, 686, 48314, 570, 291, 764, 472, 295, 293, 291, 434, 411, 11, 1699, 257, 3456, 11, 51549, 51549, 264, 472, 295, 445, 7612, 322, 264, 700, 551, 294, 452, 472, 295, 300, 632, 1045, 819, 3956, 13, 51832, 51832], "temperature": 0.0, "avg_logprob": -0.10067419082887712, "compression_ratio": 1.6702508960573477, "no_caption_prob": 3.4267959563294426e-05}, {"id": 1113, "seek": 430494, "start": 4312.0599999999995, "end": 4313.0599999999995, "text": " Yeah.", "tokens": [50364, 283, 4717, 13, 50414, 50414, 400, 286, 12270, 472, 295, 729, 337, 452, 707, 21156, 260, 293, 300, 311, 611, 257, 1254, 295, 2512, 31927, 13, 50720, 50720, 865, 13, 50770, 50770, 492, 2825, 466, 341, 322, 527, 2699, 76, 21156, 260, 3500, 11, 457, 456, 307, 257, 534, 1880, 551, 300, 51020, 51020, 562, 291, 434, 1348, 490, 1752, 1228, 31828, 979, 1429, 293, 550, 291, 352, 764, 264, 2699, 76, 21156, 260, 51286, 51286, 6405, 11, 309, 311, 733, 295, 5682, 686, 48314, 570, 291, 764, 472, 295, 293, 291, 434, 411, 11, 1699, 257, 3456, 11, 51549, 51549, 264, 472, 295, 445, 7612, 322, 264, 700, 551, 294, 452, 472, 295, 300, 632, 1045, 819, 3956, 13, 51832, 51832], "temperature": 0.0, "avg_logprob": -0.10067419082887712, "compression_ratio": 1.6702508960573477, "no_caption_prob": 3.4267959563294426e-05}, {"id": 1114, "seek": 430494, "start": 4313.0599999999995, "end": 4318.0599999999995, "text": " We talked about this on our Elm parser episode, but there is a really interesting thing that", "tokens": [50364, 283, 4717, 13, 50414, 50414, 400, 286, 12270, 472, 295, 729, 337, 452, 707, 21156, 260, 293, 300, 311, 611, 257, 1254, 295, 2512, 31927, 13, 50720, 50720, 865, 13, 50770, 50770, 492, 2825, 466, 341, 322, 527, 2699, 76, 21156, 260, 3500, 11, 457, 456, 307, 257, 534, 1880, 551, 300, 51020, 51020, 562, 291, 434, 1348, 490, 1752, 1228, 31828, 979, 1429, 293, 550, 291, 352, 764, 264, 2699, 76, 21156, 260, 51286, 51286, 6405, 11, 309, 311, 733, 295, 5682, 686, 48314, 570, 291, 764, 472, 295, 293, 291, 434, 411, 11, 1699, 257, 3456, 11, 51549, 51549, 264, 472, 295, 445, 7612, 322, 264, 700, 551, 294, 452, 472, 295, 300, 632, 1045, 819, 3956, 13, 51832, 51832], "temperature": 0.0, "avg_logprob": -0.10067419082887712, "compression_ratio": 1.6702508960573477, "no_caption_prob": 3.4267959563294426e-05}, {"id": 1115, "seek": 430494, "start": 4318.0599999999995, "end": 4323.379999999999, "text": " when you're coming from experience using JSON decode and then you go use the Elm parser", "tokens": [50364, 283, 4717, 13, 50414, 50414, 400, 286, 12270, 472, 295, 729, 337, 452, 707, 21156, 260, 293, 300, 311, 611, 257, 1254, 295, 2512, 31927, 13, 50720, 50720, 865, 13, 50770, 50770, 492, 2825, 466, 341, 322, 527, 2699, 76, 21156, 260, 3500, 11, 457, 456, 307, 257, 534, 1880, 551, 300, 51020, 51020, 562, 291, 434, 1348, 490, 1752, 1228, 31828, 979, 1429, 293, 550, 291, 352, 764, 264, 2699, 76, 21156, 260, 51286, 51286, 6405, 11, 309, 311, 733, 295, 5682, 686, 48314, 570, 291, 764, 472, 295, 293, 291, 434, 411, 11, 1699, 257, 3456, 11, 51549, 51549, 264, 472, 295, 445, 7612, 322, 264, 700, 551, 294, 452, 472, 295, 300, 632, 1045, 819, 3956, 13, 51832, 51832], "temperature": 0.0, "avg_logprob": -0.10067419082887712, "compression_ratio": 1.6702508960573477, "no_caption_prob": 3.4267959563294426e-05}, {"id": 1116, "seek": 430494, "start": 4323.379999999999, "end": 4328.639999999999, "text": " library, it's kind of counterintuitive because you use one of and you're like, wait a minute,", "tokens": [50364, 283, 4717, 13, 50414, 50414, 400, 286, 12270, 472, 295, 729, 337, 452, 707, 21156, 260, 293, 300, 311, 611, 257, 1254, 295, 2512, 31927, 13, 50720, 50720, 865, 13, 50770, 50770, 492, 2825, 466, 341, 322, 527, 2699, 76, 21156, 260, 3500, 11, 457, 456, 307, 257, 534, 1880, 551, 300, 51020, 51020, 562, 291, 434, 1348, 490, 1752, 1228, 31828, 979, 1429, 293, 550, 291, 352, 764, 264, 2699, 76, 21156, 260, 51286, 51286, 6405, 11, 309, 311, 733, 295, 5682, 686, 48314, 570, 291, 764, 472, 295, 293, 291, 434, 411, 11, 1699, 257, 3456, 11, 51549, 51549, 264, 472, 295, 445, 7612, 322, 264, 700, 551, 294, 452, 472, 295, 300, 632, 1045, 819, 3956, 13, 51832, 51832], "temperature": 0.0, "avg_logprob": -0.10067419082887712, "compression_ratio": 1.6702508960573477, "no_caption_prob": 3.4267959563294426e-05}, {"id": 1117, "seek": 430494, "start": 4328.639999999999, "end": 4334.299999999999, "text": " the one of just failed on the first thing in my one of that had three different options.", "tokens": [50364, 283, 4717, 13, 50414, 50414, 400, 286, 12270, 472, 295, 729, 337, 452, 707, 21156, 260, 293, 300, 311, 611, 257, 1254, 295, 2512, 31927, 13, 50720, 50720, 865, 13, 50770, 50770, 492, 2825, 466, 341, 322, 527, 2699, 76, 21156, 260, 3500, 11, 457, 456, 307, 257, 534, 1880, 551, 300, 51020, 51020, 562, 291, 434, 1348, 490, 1752, 1228, 31828, 979, 1429, 293, 550, 291, 352, 764, 264, 2699, 76, 21156, 260, 51286, 51286, 6405, 11, 309, 311, 733, 295, 5682, 686, 48314, 570, 291, 764, 472, 295, 293, 291, 434, 411, 11, 1699, 257, 3456, 11, 51549, 51549, 264, 472, 295, 445, 7612, 322, 264, 700, 551, 294, 452, 472, 295, 300, 632, 1045, 819, 3956, 13, 51832, 51832], "temperature": 0.0, "avg_logprob": -0.10067419082887712, "compression_ratio": 1.6702508960573477, "no_caption_prob": 3.4267959563294426e-05}, {"id": 1118, "seek": 433430, "start": 4334.3, "end": 4339.68, "text": " And so it's interesting because the semantics are different between one of in JSON decode", "tokens": [50364, 400, 370, 309, 311, 1880, 570, 264, 4361, 45298, 366, 819, 1296, 472, 295, 294, 31828, 979, 1429, 50633, 50633, 293, 472, 295, 294, 2699, 76, 21156, 260, 13, 50708, 50708, 1779, 13, 50758, 50758, 1436, 291, 362, 264, 1558, 295, 26659, 5717, 646, 6903, 14134, 13, 50892, 50892, 7587, 13, 50942, 50942, 3013, 307, 411, 1071, 4583, 281, 1466, 13, 51050, 51050, 1079, 13, 51100, 51100, 400, 286, 500, 380, 519, 300, 311, 4725, 257, 2101, 295, 257, 1729, 5102, 11, 457, 309, 445, 1709, 51488, 51488, 281, 855, 300, 291, 393, 1333, 295, 4317, 411, 1524, 613, 912, 8294, 11, 457, 362, 4748, 51778, 51778, 819, 4361, 45298, 13, 51842, 51842], "temperature": 0.0, "avg_logprob": -0.1689474686332371, "compression_ratio": 1.5947955390334572, "no_caption_prob": 5.7718698371900246e-06}, {"id": 1119, "seek": 433430, "start": 4339.68, "end": 4341.18, "text": " and one of in Elm parser.", "tokens": [50364, 400, 370, 309, 311, 1880, 570, 264, 4361, 45298, 366, 819, 1296, 472, 295, 294, 31828, 979, 1429, 50633, 50633, 293, 472, 295, 294, 2699, 76, 21156, 260, 13, 50708, 50708, 1779, 13, 50758, 50758, 1436, 291, 362, 264, 1558, 295, 26659, 5717, 646, 6903, 14134, 13, 50892, 50892, 7587, 13, 50942, 50942, 3013, 307, 411, 1071, 4583, 281, 1466, 13, 51050, 51050, 1079, 13, 51100, 51100, 400, 286, 500, 380, 519, 300, 311, 4725, 257, 2101, 295, 257, 1729, 5102, 11, 457, 309, 445, 1709, 51488, 51488, 281, 855, 300, 291, 393, 1333, 295, 4317, 411, 1524, 613, 912, 8294, 11, 457, 362, 4748, 51778, 51778, 819, 4361, 45298, 13, 51842, 51842], "temperature": 0.0, "avg_logprob": -0.1689474686332371, "compression_ratio": 1.5947955390334572, "no_caption_prob": 5.7718698371900246e-06}, {"id": 1120, "seek": 433430, "start": 4341.18, "end": 4342.18, "text": " Right.", "tokens": [50364, 400, 370, 309, 311, 1880, 570, 264, 4361, 45298, 366, 819, 1296, 472, 295, 294, 31828, 979, 1429, 50633, 50633, 293, 472, 295, 294, 2699, 76, 21156, 260, 13, 50708, 50708, 1779, 13, 50758, 50758, 1436, 291, 362, 264, 1558, 295, 26659, 5717, 646, 6903, 14134, 13, 50892, 50892, 7587, 13, 50942, 50942, 3013, 307, 411, 1071, 4583, 281, 1466, 13, 51050, 51050, 1079, 13, 51100, 51100, 400, 286, 500, 380, 519, 300, 311, 4725, 257, 2101, 295, 257, 1729, 5102, 11, 457, 309, 445, 1709, 51488, 51488, 281, 855, 300, 291, 393, 1333, 295, 4317, 411, 1524, 613, 912, 8294, 11, 457, 362, 4748, 51778, 51778, 819, 4361, 45298, 13, 51842, 51842], "temperature": 0.0, "avg_logprob": -0.1689474686332371, "compression_ratio": 1.5947955390334572, "no_caption_prob": 5.7718698371900246e-06}, {"id": 1121, "seek": 433430, "start": 4342.18, "end": 4344.860000000001, "text": " Because you have the idea of committing versus backtracking.", "tokens": [50364, 400, 370, 309, 311, 1880, 570, 264, 4361, 45298, 366, 819, 1296, 472, 295, 294, 31828, 979, 1429, 50633, 50633, 293, 472, 295, 294, 2699, 76, 21156, 260, 13, 50708, 50708, 1779, 13, 50758, 50758, 1436, 291, 362, 264, 1558, 295, 26659, 5717, 646, 6903, 14134, 13, 50892, 50892, 7587, 13, 50942, 50942, 3013, 307, 411, 1071, 4583, 281, 1466, 13, 51050, 51050, 1079, 13, 51100, 51100, 400, 286, 500, 380, 519, 300, 311, 4725, 257, 2101, 295, 257, 1729, 5102, 11, 457, 309, 445, 1709, 51488, 51488, 281, 855, 300, 291, 393, 1333, 295, 4317, 411, 1524, 613, 912, 8294, 11, 457, 362, 4748, 51778, 51778, 819, 4361, 45298, 13, 51842, 51842], "temperature": 0.0, "avg_logprob": -0.1689474686332371, "compression_ratio": 1.5947955390334572, "no_caption_prob": 5.7718698371900246e-06}, {"id": 1122, "seek": 433430, "start": 4344.860000000001, "end": 4345.860000000001, "text": " Exactly.", "tokens": [50364, 400, 370, 309, 311, 1880, 570, 264, 4361, 45298, 366, 819, 1296, 472, 295, 294, 31828, 979, 1429, 50633, 50633, 293, 472, 295, 294, 2699, 76, 21156, 260, 13, 50708, 50708, 1779, 13, 50758, 50758, 1436, 291, 362, 264, 1558, 295, 26659, 5717, 646, 6903, 14134, 13, 50892, 50892, 7587, 13, 50942, 50942, 3013, 307, 411, 1071, 4583, 281, 1466, 13, 51050, 51050, 1079, 13, 51100, 51100, 400, 286, 500, 380, 519, 300, 311, 4725, 257, 2101, 295, 257, 1729, 5102, 11, 457, 309, 445, 1709, 51488, 51488, 281, 855, 300, 291, 393, 1333, 295, 4317, 411, 1524, 613, 912, 8294, 11, 457, 362, 4748, 51778, 51778, 819, 4361, 45298, 13, 51842, 51842], "temperature": 0.0, "avg_logprob": -0.1689474686332371, "compression_ratio": 1.5947955390334572, "no_caption_prob": 5.7718698371900246e-06}, {"id": 1123, "seek": 433430, "start": 4345.860000000001, "end": 4348.02, "text": " Which is like another layer to learn.", "tokens": [50364, 400, 370, 309, 311, 1880, 570, 264, 4361, 45298, 366, 819, 1296, 472, 295, 294, 31828, 979, 1429, 50633, 50633, 293, 472, 295, 294, 2699, 76, 21156, 260, 13, 50708, 50708, 1779, 13, 50758, 50758, 1436, 291, 362, 264, 1558, 295, 26659, 5717, 646, 6903, 14134, 13, 50892, 50892, 7587, 13, 50942, 50942, 3013, 307, 411, 1071, 4583, 281, 1466, 13, 51050, 51050, 1079, 13, 51100, 51100, 400, 286, 500, 380, 519, 300, 311, 4725, 257, 2101, 295, 257, 1729, 5102, 11, 457, 309, 445, 1709, 51488, 51488, 281, 855, 300, 291, 393, 1333, 295, 4317, 411, 1524, 613, 912, 8294, 11, 457, 362, 4748, 51778, 51778, 819, 4361, 45298, 13, 51842, 51842], "temperature": 0.0, "avg_logprob": -0.1689474686332371, "compression_ratio": 1.5947955390334572, "no_caption_prob": 5.7718698371900246e-06}, {"id": 1124, "seek": 433430, "start": 4348.02, "end": 4349.02, "text": " Yes.", "tokens": [50364, 400, 370, 309, 311, 1880, 570, 264, 4361, 45298, 366, 819, 1296, 472, 295, 294, 31828, 979, 1429, 50633, 50633, 293, 472, 295, 294, 2699, 76, 21156, 260, 13, 50708, 50708, 1779, 13, 50758, 50758, 1436, 291, 362, 264, 1558, 295, 26659, 5717, 646, 6903, 14134, 13, 50892, 50892, 7587, 13, 50942, 50942, 3013, 307, 411, 1071, 4583, 281, 1466, 13, 51050, 51050, 1079, 13, 51100, 51100, 400, 286, 500, 380, 519, 300, 311, 4725, 257, 2101, 295, 257, 1729, 5102, 11, 457, 309, 445, 1709, 51488, 51488, 281, 855, 300, 291, 393, 1333, 295, 4317, 411, 1524, 613, 912, 8294, 11, 457, 362, 4748, 51778, 51778, 819, 4361, 45298, 13, 51842, 51842], "temperature": 0.0, "avg_logprob": -0.1689474686332371, "compression_ratio": 1.5947955390334572, "no_caption_prob": 5.7718698371900246e-06}, {"id": 1125, "seek": 433430, "start": 4349.02, "end": 4356.78, "text": " And I don't think that's necessarily a law of a particular pattern, but it just goes", "tokens": [50364, 400, 370, 309, 311, 1880, 570, 264, 4361, 45298, 366, 819, 1296, 472, 295, 294, 31828, 979, 1429, 50633, 50633, 293, 472, 295, 294, 2699, 76, 21156, 260, 13, 50708, 50708, 1779, 13, 50758, 50758, 1436, 291, 362, 264, 1558, 295, 26659, 5717, 646, 6903, 14134, 13, 50892, 50892, 7587, 13, 50942, 50942, 3013, 307, 411, 1071, 4583, 281, 1466, 13, 51050, 51050, 1079, 13, 51100, 51100, 400, 286, 500, 380, 519, 300, 311, 4725, 257, 2101, 295, 257, 1729, 5102, 11, 457, 309, 445, 1709, 51488, 51488, 281, 855, 300, 291, 393, 1333, 295, 4317, 411, 1524, 613, 912, 8294, 11, 457, 362, 4748, 51778, 51778, 819, 4361, 45298, 13, 51842, 51842], "temperature": 0.0, "avg_logprob": -0.1689474686332371, "compression_ratio": 1.5947955390334572, "no_caption_prob": 5.7718698371900246e-06}, {"id": 1126, "seek": 433430, "start": 4356.78, "end": 4362.58, "text": " to show that you can sort of perhaps like follow these same patterns, but have slightly", "tokens": [50364, 400, 370, 309, 311, 1880, 570, 264, 4361, 45298, 366, 819, 1296, 472, 295, 294, 31828, 979, 1429, 50633, 50633, 293, 472, 295, 294, 2699, 76, 21156, 260, 13, 50708, 50708, 1779, 13, 50758, 50758, 1436, 291, 362, 264, 1558, 295, 26659, 5717, 646, 6903, 14134, 13, 50892, 50892, 7587, 13, 50942, 50942, 3013, 307, 411, 1071, 4583, 281, 1466, 13, 51050, 51050, 1079, 13, 51100, 51100, 400, 286, 500, 380, 519, 300, 311, 4725, 257, 2101, 295, 257, 1729, 5102, 11, 457, 309, 445, 1709, 51488, 51488, 281, 855, 300, 291, 393, 1333, 295, 4317, 411, 1524, 613, 912, 8294, 11, 457, 362, 4748, 51778, 51778, 819, 4361, 45298, 13, 51842, 51842], "temperature": 0.0, "avg_logprob": -0.1689474686332371, "compression_ratio": 1.5947955390334572, "no_caption_prob": 5.7718698371900246e-06}, {"id": 1127, "seek": 433430, "start": 4362.58, "end": 4363.860000000001, "text": " different semantics.", "tokens": [50364, 400, 370, 309, 311, 1880, 570, 264, 4361, 45298, 366, 819, 1296, 472, 295, 294, 31828, 979, 1429, 50633, 50633, 293, 472, 295, 294, 2699, 76, 21156, 260, 13, 50708, 50708, 1779, 13, 50758, 50758, 1436, 291, 362, 264, 1558, 295, 26659, 5717, 646, 6903, 14134, 13, 50892, 50892, 7587, 13, 50942, 50942, 3013, 307, 411, 1071, 4583, 281, 1466, 13, 51050, 51050, 1079, 13, 51100, 51100, 400, 286, 500, 380, 519, 300, 311, 4725, 257, 2101, 295, 257, 1729, 5102, 11, 457, 309, 445, 1709, 51488, 51488, 281, 855, 300, 291, 393, 1333, 295, 4317, 411, 1524, 613, 912, 8294, 11, 457, 362, 4748, 51778, 51778, 819, 4361, 45298, 13, 51842, 51842], "temperature": 0.0, "avg_logprob": -0.1689474686332371, "compression_ratio": 1.5947955390334572, "no_caption_prob": 5.7718698371900246e-06}, {"id": 1128, "seek": 436386, "start": 4363.86, "end": 4368.179999999999, "text": " Well, I think we've we've covered applicatives pretty well.", "tokens": [50364, 1042, 11, 286, 519, 321, 600, 321, 600, 5343, 2580, 4884, 1238, 731, 13, 50580, 50580, 286, 478, 988, 456, 311, 544, 321, 727, 584, 13, 50662, 50662, 583, 3139, 4434, 11, 3231, 797, 337, 5549, 505, 13, 50854, 50854, 400, 498, 561, 528, 281, 483, 512, 544, 295, 428, 665, 3601, 11, 689, 393, 436, 1524, 291, 51104, 51104, 293, 689, 393, 436, 1466, 544, 30, 51174, 51174, 407, 436, 393, 1524, 385, 322, 5794, 11, 3139, 4434, 8273, 11, 508, 422, 462, 441, 1249, 624, 462, 426, 13, 51440, 51440, 814, 393, 611, 352, 281, 264, 23058, 18870, 6968, 13, 51678, 51678, 663, 311, 257, 1081, 286, 589, 412, 13, 51778, 51778], "temperature": 0.0, "avg_logprob": -0.175702769180824, "compression_ratio": 1.538152610441767, "no_caption_prob": 1.2805181540898047e-05}, {"id": 1129, "seek": 436386, "start": 4368.179999999999, "end": 4369.82, "text": " I'm sure there's more we could say.", "tokens": [50364, 1042, 11, 286, 519, 321, 600, 321, 600, 5343, 2580, 4884, 1238, 731, 13, 50580, 50580, 286, 478, 988, 456, 311, 544, 321, 727, 584, 13, 50662, 50662, 583, 3139, 4434, 11, 3231, 797, 337, 5549, 505, 13, 50854, 50854, 400, 498, 561, 528, 281, 483, 512, 544, 295, 428, 665, 3601, 11, 689, 393, 436, 1524, 291, 51104, 51104, 293, 689, 393, 436, 1466, 544, 30, 51174, 51174, 407, 436, 393, 1524, 385, 322, 5794, 11, 3139, 4434, 8273, 11, 508, 422, 462, 441, 1249, 624, 462, 426, 13, 51440, 51440, 814, 393, 611, 352, 281, 264, 23058, 18870, 6968, 13, 51678, 51678, 663, 311, 257, 1081, 286, 589, 412, 13, 51778, 51778], "temperature": 0.0, "avg_logprob": -0.175702769180824, "compression_ratio": 1.538152610441767, "no_caption_prob": 1.2805181540898047e-05}, {"id": 1130, "seek": 436386, "start": 4369.82, "end": 4373.66, "text": " But Joelle, thanks again for joining us.", "tokens": [50364, 1042, 11, 286, 519, 321, 600, 321, 600, 5343, 2580, 4884, 1238, 731, 13, 50580, 50580, 286, 478, 988, 456, 311, 544, 321, 727, 584, 13, 50662, 50662, 583, 3139, 4434, 11, 3231, 797, 337, 5549, 505, 13, 50854, 50854, 400, 498, 561, 528, 281, 483, 512, 544, 295, 428, 665, 3601, 11, 689, 393, 436, 1524, 291, 51104, 51104, 293, 689, 393, 436, 1466, 544, 30, 51174, 51174, 407, 436, 393, 1524, 385, 322, 5794, 11, 3139, 4434, 8273, 11, 508, 422, 462, 441, 1249, 624, 462, 426, 13, 51440, 51440, 814, 393, 611, 352, 281, 264, 23058, 18870, 6968, 13, 51678, 51678, 663, 311, 257, 1081, 286, 589, 412, 13, 51778, 51778], "temperature": 0.0, "avg_logprob": -0.175702769180824, "compression_ratio": 1.538152610441767, "no_caption_prob": 1.2805181540898047e-05}, {"id": 1131, "seek": 436386, "start": 4373.66, "end": 4378.66, "text": " And if people want to get some more of your good knowledge, where can they follow you", "tokens": [50364, 1042, 11, 286, 519, 321, 600, 321, 600, 5343, 2580, 4884, 1238, 731, 13, 50580, 50580, 286, 478, 988, 456, 311, 544, 321, 727, 584, 13, 50662, 50662, 583, 3139, 4434, 11, 3231, 797, 337, 5549, 505, 13, 50854, 50854, 400, 498, 561, 528, 281, 483, 512, 544, 295, 428, 665, 3601, 11, 689, 393, 436, 1524, 291, 51104, 51104, 293, 689, 393, 436, 1466, 544, 30, 51174, 51174, 407, 436, 393, 1524, 385, 322, 5794, 11, 3139, 4434, 8273, 11, 508, 422, 462, 441, 1249, 624, 462, 426, 13, 51440, 51440, 814, 393, 611, 352, 281, 264, 23058, 18870, 6968, 13, 51678, 51678, 663, 311, 257, 1081, 286, 589, 412, 13, 51778, 51778], "temperature": 0.0, "avg_logprob": -0.175702769180824, "compression_ratio": 1.538152610441767, "no_caption_prob": 1.2805181540898047e-05}, {"id": 1132, "seek": 436386, "start": 4378.66, "end": 4380.0599999999995, "text": " and where can they learn more?", "tokens": [50364, 1042, 11, 286, 519, 321, 600, 321, 600, 5343, 2580, 4884, 1238, 731, 13, 50580, 50580, 286, 478, 988, 456, 311, 544, 321, 727, 584, 13, 50662, 50662, 583, 3139, 4434, 11, 3231, 797, 337, 5549, 505, 13, 50854, 50854, 400, 498, 561, 528, 281, 483, 512, 544, 295, 428, 665, 3601, 11, 689, 393, 436, 1524, 291, 51104, 51104, 293, 689, 393, 436, 1466, 544, 30, 51174, 51174, 407, 436, 393, 1524, 385, 322, 5794, 11, 3139, 4434, 8273, 11, 508, 422, 462, 441, 1249, 624, 462, 426, 13, 51440, 51440, 814, 393, 611, 352, 281, 264, 23058, 18870, 6968, 13, 51678, 51678, 663, 311, 257, 1081, 286, 589, 412, 13, 51778, 51778], "temperature": 0.0, "avg_logprob": -0.175702769180824, "compression_ratio": 1.538152610441767, "no_caption_prob": 1.2805181540898047e-05}, {"id": 1133, "seek": 436386, "start": 4380.0599999999995, "end": 4385.38, "text": " So they can follow me on Twitter, Joelle Ken, J O E L Q U E N.", "tokens": [50364, 1042, 11, 286, 519, 321, 600, 321, 600, 5343, 2580, 4884, 1238, 731, 13, 50580, 50580, 286, 478, 988, 456, 311, 544, 321, 727, 584, 13, 50662, 50662, 583, 3139, 4434, 11, 3231, 797, 337, 5549, 505, 13, 50854, 50854, 400, 498, 561, 528, 281, 483, 512, 544, 295, 428, 665, 3601, 11, 689, 393, 436, 1524, 291, 51104, 51104, 293, 689, 393, 436, 1466, 544, 30, 51174, 51174, 407, 436, 393, 1524, 385, 322, 5794, 11, 3139, 4434, 8273, 11, 508, 422, 462, 441, 1249, 624, 462, 426, 13, 51440, 51440, 814, 393, 611, 352, 281, 264, 23058, 18870, 6968, 13, 51678, 51678, 663, 311, 257, 1081, 286, 589, 412, 13, 51778, 51778], "temperature": 0.0, "avg_logprob": -0.175702769180824, "compression_ratio": 1.538152610441767, "no_caption_prob": 1.2805181540898047e-05}, {"id": 1134, "seek": 436386, "start": 4385.38, "end": 4390.139999999999, "text": " They can also go to the Thoughtbot blog.", "tokens": [50364, 1042, 11, 286, 519, 321, 600, 321, 600, 5343, 2580, 4884, 1238, 731, 13, 50580, 50580, 286, 478, 988, 456, 311, 544, 321, 727, 584, 13, 50662, 50662, 583, 3139, 4434, 11, 3231, 797, 337, 5549, 505, 13, 50854, 50854, 400, 498, 561, 528, 281, 483, 512, 544, 295, 428, 665, 3601, 11, 689, 393, 436, 1524, 291, 51104, 51104, 293, 689, 393, 436, 1466, 544, 30, 51174, 51174, 407, 436, 393, 1524, 385, 322, 5794, 11, 3139, 4434, 8273, 11, 508, 422, 462, 441, 1249, 624, 462, 426, 13, 51440, 51440, 814, 393, 611, 352, 281, 264, 23058, 18870, 6968, 13, 51678, 51678, 663, 311, 257, 1081, 286, 589, 412, 13, 51778, 51778], "temperature": 0.0, "avg_logprob": -0.175702769180824, "compression_ratio": 1.538152610441767, "no_caption_prob": 1.2805181540898047e-05}, {"id": 1135, "seek": 436386, "start": 4390.139999999999, "end": 4392.139999999999, "text": " That's a place I work at.", "tokens": [50364, 1042, 11, 286, 519, 321, 600, 321, 600, 5343, 2580, 4884, 1238, 731, 13, 50580, 50580, 286, 478, 988, 456, 311, 544, 321, 727, 584, 13, 50662, 50662, 583, 3139, 4434, 11, 3231, 797, 337, 5549, 505, 13, 50854, 50854, 400, 498, 561, 528, 281, 483, 512, 544, 295, 428, 665, 3601, 11, 689, 393, 436, 1524, 291, 51104, 51104, 293, 689, 393, 436, 1466, 544, 30, 51174, 51174, 407, 436, 393, 1524, 385, 322, 5794, 11, 3139, 4434, 8273, 11, 508, 422, 462, 441, 1249, 624, 462, 426, 13, 51440, 51440, 814, 393, 611, 352, 281, 264, 23058, 18870, 6968, 13, 51678, 51678, 663, 311, 257, 1081, 286, 589, 412, 13, 51778, 51778], "temperature": 0.0, "avg_logprob": -0.175702769180824, "compression_ratio": 1.538152610441767, "no_caption_prob": 1.2805181540898047e-05}, {"id": 1136, "seek": 439214, "start": 4392.14, "end": 4396.14, "text": " I have a lot of articles there talking about Elm and also other things.", "tokens": [50364, 286, 362, 257, 688, 295, 11290, 456, 1417, 466, 2699, 76, 293, 611, 661, 721, 13, 50564, 50564, 407, 300, 576, 312, 23058, 18870, 13, 1112, 17330, 6968, 17330, 16552, 17330, 3139, 4434, 8240, 8273, 8386, 13, 50890, 50890, 663, 311, 1391, 3571, 281, 2113, 813, 281, 853, 281, 9827, 309, 13, 51086, 51086, 759, 291, 2052, 926, 281, 512, 18632, 420, 3164, 11, 291, 603, 915, 309, 886, 13, 51228, 51228, 865, 13, 51278, 51278, 821, 366, 257, 688, 295, 869, 2699, 76, 6968, 12300, 13, 51404, 51404, 821, 311, 2138, 3163, 8568, 484, 13, 51472, 51472, 316, 688, 295, 552, 1391, 1745, 281, 264, 4829, 321, 2825, 281, 965, 570, 456, 311, 370, 867, 51742, 51742], "temperature": 0.0, "avg_logprob": -0.21611940066019694, "compression_ratio": 1.6446886446886446, "no_caption_prob": 1.6700585547368973e-05}, {"id": 1137, "seek": 439214, "start": 4396.14, "end": 4402.660000000001, "text": " So that would be Thoughtbot.com slash blog slash authors slash Joelle dash Kenville.", "tokens": [50364, 286, 362, 257, 688, 295, 11290, 456, 1417, 466, 2699, 76, 293, 611, 661, 721, 13, 50564, 50564, 407, 300, 576, 312, 23058, 18870, 13, 1112, 17330, 6968, 17330, 16552, 17330, 3139, 4434, 8240, 8273, 8386, 13, 50890, 50890, 663, 311, 1391, 3571, 281, 2113, 813, 281, 853, 281, 9827, 309, 13, 51086, 51086, 759, 291, 2052, 926, 281, 512, 18632, 420, 3164, 11, 291, 603, 915, 309, 886, 13, 51228, 51228, 865, 13, 51278, 51278, 821, 366, 257, 688, 295, 869, 2699, 76, 6968, 12300, 13, 51404, 51404, 821, 311, 2138, 3163, 8568, 484, 13, 51472, 51472, 316, 688, 295, 552, 1391, 1745, 281, 264, 4829, 321, 2825, 281, 965, 570, 456, 311, 370, 867, 51742, 51742], "temperature": 0.0, "avg_logprob": -0.21611940066019694, "compression_ratio": 1.6446886446886446, "no_caption_prob": 1.6700585547368973e-05}, {"id": 1138, "seek": 439214, "start": 4402.660000000001, "end": 4406.58, "text": " That's probably easier to link than to try to spell it.", "tokens": [50364, 286, 362, 257, 688, 295, 11290, 456, 1417, 466, 2699, 76, 293, 611, 661, 721, 13, 50564, 50564, 407, 300, 576, 312, 23058, 18870, 13, 1112, 17330, 6968, 17330, 16552, 17330, 3139, 4434, 8240, 8273, 8386, 13, 50890, 50890, 663, 311, 1391, 3571, 281, 2113, 813, 281, 853, 281, 9827, 309, 13, 51086, 51086, 759, 291, 2052, 926, 281, 512, 18632, 420, 3164, 11, 291, 603, 915, 309, 886, 13, 51228, 51228, 865, 13, 51278, 51278, 821, 366, 257, 688, 295, 869, 2699, 76, 6968, 12300, 13, 51404, 51404, 821, 311, 2138, 3163, 8568, 484, 13, 51472, 51472, 316, 688, 295, 552, 1391, 1745, 281, 264, 4829, 321, 2825, 281, 965, 570, 456, 311, 370, 867, 51742, 51742], "temperature": 0.0, "avg_logprob": -0.21611940066019694, "compression_ratio": 1.6446886446886446, "no_caption_prob": 1.6700585547368973e-05}, {"id": 1139, "seek": 439214, "start": 4406.58, "end": 4409.42, "text": " If you click around to some tags or search, you'll find it too.", "tokens": [50364, 286, 362, 257, 688, 295, 11290, 456, 1417, 466, 2699, 76, 293, 611, 661, 721, 13, 50564, 50564, 407, 300, 576, 312, 23058, 18870, 13, 1112, 17330, 6968, 17330, 16552, 17330, 3139, 4434, 8240, 8273, 8386, 13, 50890, 50890, 663, 311, 1391, 3571, 281, 2113, 813, 281, 853, 281, 9827, 309, 13, 51086, 51086, 759, 291, 2052, 926, 281, 512, 18632, 420, 3164, 11, 291, 603, 915, 309, 886, 13, 51228, 51228, 865, 13, 51278, 51278, 821, 366, 257, 688, 295, 869, 2699, 76, 6968, 12300, 13, 51404, 51404, 821, 311, 2138, 3163, 8568, 484, 13, 51472, 51472, 316, 688, 295, 552, 1391, 1745, 281, 264, 4829, 321, 2825, 281, 965, 570, 456, 311, 370, 867, 51742, 51742], "temperature": 0.0, "avg_logprob": -0.21611940066019694, "compression_ratio": 1.6446886446886446, "no_caption_prob": 1.6700585547368973e-05}, {"id": 1140, "seek": 439214, "start": 4409.42, "end": 4410.42, "text": " Yeah.", "tokens": [50364, 286, 362, 257, 688, 295, 11290, 456, 1417, 466, 2699, 76, 293, 611, 661, 721, 13, 50564, 50564, 407, 300, 576, 312, 23058, 18870, 13, 1112, 17330, 6968, 17330, 16552, 17330, 3139, 4434, 8240, 8273, 8386, 13, 50890, 50890, 663, 311, 1391, 3571, 281, 2113, 813, 281, 853, 281, 9827, 309, 13, 51086, 51086, 759, 291, 2052, 926, 281, 512, 18632, 420, 3164, 11, 291, 603, 915, 309, 886, 13, 51228, 51228, 865, 13, 51278, 51278, 821, 366, 257, 688, 295, 869, 2699, 76, 6968, 12300, 13, 51404, 51404, 821, 311, 2138, 3163, 8568, 484, 13, 51472, 51472, 316, 688, 295, 552, 1391, 1745, 281, 264, 4829, 321, 2825, 281, 965, 570, 456, 311, 370, 867, 51742, 51742], "temperature": 0.0, "avg_logprob": -0.21611940066019694, "compression_ratio": 1.6446886446886446, "no_caption_prob": 1.6700585547368973e-05}, {"id": 1141, "seek": 439214, "start": 4410.42, "end": 4412.9400000000005, "text": " There are a lot of great Elm blog posts.", "tokens": [50364, 286, 362, 257, 688, 295, 11290, 456, 1417, 466, 2699, 76, 293, 611, 661, 721, 13, 50564, 50564, 407, 300, 576, 312, 23058, 18870, 13, 1112, 17330, 6968, 17330, 16552, 17330, 3139, 4434, 8240, 8273, 8386, 13, 50890, 50890, 663, 311, 1391, 3571, 281, 2113, 813, 281, 853, 281, 9827, 309, 13, 51086, 51086, 759, 291, 2052, 926, 281, 512, 18632, 420, 3164, 11, 291, 603, 915, 309, 886, 13, 51228, 51228, 865, 13, 51278, 51278, 821, 366, 257, 688, 295, 869, 2699, 76, 6968, 12300, 13, 51404, 51404, 821, 311, 2138, 3163, 8568, 484, 13, 51472, 51472, 316, 688, 295, 552, 1391, 1745, 281, 264, 4829, 321, 2825, 281, 965, 570, 456, 311, 370, 867, 51742, 51742], "temperature": 0.0, "avg_logprob": -0.21611940066019694, "compression_ratio": 1.6446886446886446, "no_caption_prob": 1.6700585547368973e-05}, {"id": 1142, "seek": 439214, "start": 4412.9400000000005, "end": 4414.3, "text": " There's definitely worth checking out.", "tokens": [50364, 286, 362, 257, 688, 295, 11290, 456, 1417, 466, 2699, 76, 293, 611, 661, 721, 13, 50564, 50564, 407, 300, 576, 312, 23058, 18870, 13, 1112, 17330, 6968, 17330, 16552, 17330, 3139, 4434, 8240, 8273, 8386, 13, 50890, 50890, 663, 311, 1391, 3571, 281, 2113, 813, 281, 853, 281, 9827, 309, 13, 51086, 51086, 759, 291, 2052, 926, 281, 512, 18632, 420, 3164, 11, 291, 603, 915, 309, 886, 13, 51228, 51228, 865, 13, 51278, 51278, 821, 366, 257, 688, 295, 869, 2699, 76, 6968, 12300, 13, 51404, 51404, 821, 311, 2138, 3163, 8568, 484, 13, 51472, 51472, 316, 688, 295, 552, 1391, 1745, 281, 264, 4829, 321, 2825, 281, 965, 570, 456, 311, 370, 867, 51742, 51742], "temperature": 0.0, "avg_logprob": -0.21611940066019694, "compression_ratio": 1.6446886446886446, "no_caption_prob": 1.6700585547368973e-05}, {"id": 1143, "seek": 439214, "start": 4414.3, "end": 4419.700000000001, "text": " A lot of them probably connect to the topic we talked to today because there's so many", "tokens": [50364, 286, 362, 257, 688, 295, 11290, 456, 1417, 466, 2699, 76, 293, 611, 661, 721, 13, 50564, 50564, 407, 300, 576, 312, 23058, 18870, 13, 1112, 17330, 6968, 17330, 16552, 17330, 3139, 4434, 8240, 8273, 8386, 13, 50890, 50890, 663, 311, 1391, 3571, 281, 2113, 813, 281, 853, 281, 9827, 309, 13, 51086, 51086, 759, 291, 2052, 926, 281, 512, 18632, 420, 3164, 11, 291, 603, 915, 309, 886, 13, 51228, 51228, 865, 13, 51278, 51278, 821, 366, 257, 688, 295, 869, 2699, 76, 6968, 12300, 13, 51404, 51404, 821, 311, 2138, 3163, 8568, 484, 13, 51472, 51472, 316, 688, 295, 552, 1391, 1745, 281, 264, 4829, 321, 2825, 281, 965, 570, 456, 311, 370, 867, 51742, 51742], "temperature": 0.0, "avg_logprob": -0.21611940066019694, "compression_ratio": 1.6446886446886446, "no_caption_prob": 1.6700585547368973e-05}, {"id": 1144, "seek": 441970, "start": 4419.7, "end": 4425.0599999999995, "text": " sort of foundational aspects that overlap into this topic of applicatives.", "tokens": [50364, 1333, 295, 32195, 7270, 300, 19959, 666, 341, 4829, 295, 2580, 4884, 13, 50632, 50632, 400, 370, 456, 311, 257, 688, 295, 11290, 286, 600, 3720, 670, 565, 300, 1745, 281, 341, 13, 50856, 50856, 865, 13, 50906, 50906, 865, 13, 50956, 50956, 509, 611, 2729, 257, 534, 869, 751, 466, 4974, 38662, 300, 1062, 312, 7340, 510, 337, 51174, 51174, 561, 6369, 281, 1466, 544, 13, 51274, 51274, 865, 13, 51324, 51324, 865, 13, 51374, 51374, 821, 311, 611, 751, 466, 4974, 38662, 293, 4471, 732, 293, 577, 300, 1985, 456, 13, 51548, 51548, 286, 600, 2212, 751, 365, 1310, 293, 577, 4471, 732, 1985, 456, 13, 51768, 51768], "temperature": 0.0, "avg_logprob": -0.16416711466653006, "compression_ratio": 1.8382978723404255, "no_caption_prob": 1.0783153811644297e-05}, {"id": 1145, "seek": 441970, "start": 4425.0599999999995, "end": 4429.54, "text": " And so there's a lot of articles I've written over time that connect to this.", "tokens": [50364, 1333, 295, 32195, 7270, 300, 19959, 666, 341, 4829, 295, 2580, 4884, 13, 50632, 50632, 400, 370, 456, 311, 257, 688, 295, 11290, 286, 600, 3720, 670, 565, 300, 1745, 281, 341, 13, 50856, 50856, 865, 13, 50906, 50906, 865, 13, 50956, 50956, 509, 611, 2729, 257, 534, 869, 751, 466, 4974, 38662, 300, 1062, 312, 7340, 510, 337, 51174, 51174, 561, 6369, 281, 1466, 544, 13, 51274, 51274, 865, 13, 51324, 51324, 865, 13, 51374, 51374, 821, 311, 611, 751, 466, 4974, 38662, 293, 4471, 732, 293, 577, 300, 1985, 456, 13, 51548, 51548, 286, 600, 2212, 751, 365, 1310, 293, 577, 4471, 732, 1985, 456, 13, 51768, 51768], "temperature": 0.0, "avg_logprob": -0.16416711466653006, "compression_ratio": 1.8382978723404255, "no_caption_prob": 1.0783153811644297e-05}, {"id": 1146, "seek": 441970, "start": 4429.54, "end": 4430.54, "text": " Yeah.", "tokens": [50364, 1333, 295, 32195, 7270, 300, 19959, 666, 341, 4829, 295, 2580, 4884, 13, 50632, 50632, 400, 370, 456, 311, 257, 688, 295, 11290, 286, 600, 3720, 670, 565, 300, 1745, 281, 341, 13, 50856, 50856, 865, 13, 50906, 50906, 865, 13, 50956, 50956, 509, 611, 2729, 257, 534, 869, 751, 466, 4974, 38662, 300, 1062, 312, 7340, 510, 337, 51174, 51174, 561, 6369, 281, 1466, 544, 13, 51274, 51274, 865, 13, 51324, 51324, 865, 13, 51374, 51374, 821, 311, 611, 751, 466, 4974, 38662, 293, 4471, 732, 293, 577, 300, 1985, 456, 13, 51548, 51548, 286, 600, 2212, 751, 365, 1310, 293, 577, 4471, 732, 1985, 456, 13, 51768, 51768], "temperature": 0.0, "avg_logprob": -0.16416711466653006, "compression_ratio": 1.8382978723404255, "no_caption_prob": 1.0783153811644297e-05}, {"id": 1147, "seek": 441970, "start": 4430.54, "end": 4431.54, "text": " Yeah.", "tokens": [50364, 1333, 295, 32195, 7270, 300, 19959, 666, 341, 4829, 295, 2580, 4884, 13, 50632, 50632, 400, 370, 456, 311, 257, 688, 295, 11290, 286, 600, 3720, 670, 565, 300, 1745, 281, 341, 13, 50856, 50856, 865, 13, 50906, 50906, 865, 13, 50956, 50956, 509, 611, 2729, 257, 534, 869, 751, 466, 4974, 38662, 300, 1062, 312, 7340, 510, 337, 51174, 51174, 561, 6369, 281, 1466, 544, 13, 51274, 51274, 865, 13, 51324, 51324, 865, 13, 51374, 51374, 821, 311, 611, 751, 466, 4974, 38662, 293, 4471, 732, 293, 577, 300, 1985, 456, 13, 51548, 51548, 286, 600, 2212, 751, 365, 1310, 293, 577, 4471, 732, 1985, 456, 13, 51768, 51768], "temperature": 0.0, "avg_logprob": -0.16416711466653006, "compression_ratio": 1.8382978723404255, "no_caption_prob": 1.0783153811644297e-05}, {"id": 1148, "seek": 441970, "start": 4431.54, "end": 4435.9, "text": " You also gave a really great talk about random generators that might be relevant here for", "tokens": [50364, 1333, 295, 32195, 7270, 300, 19959, 666, 341, 4829, 295, 2580, 4884, 13, 50632, 50632, 400, 370, 456, 311, 257, 688, 295, 11290, 286, 600, 3720, 670, 565, 300, 1745, 281, 341, 13, 50856, 50856, 865, 13, 50906, 50906, 865, 13, 50956, 50956, 509, 611, 2729, 257, 534, 869, 751, 466, 4974, 38662, 300, 1062, 312, 7340, 510, 337, 51174, 51174, 561, 6369, 281, 1466, 544, 13, 51274, 51274, 865, 13, 51324, 51324, 865, 13, 51374, 51374, 821, 311, 611, 751, 466, 4974, 38662, 293, 4471, 732, 293, 577, 300, 1985, 456, 13, 51548, 51548, 286, 600, 2212, 751, 365, 1310, 293, 577, 4471, 732, 1985, 456, 13, 51768, 51768], "temperature": 0.0, "avg_logprob": -0.16416711466653006, "compression_ratio": 1.8382978723404255, "no_caption_prob": 1.0783153811644297e-05}, {"id": 1149, "seek": 441970, "start": 4435.9, "end": 4437.9, "text": " people curious to learn more.", "tokens": [50364, 1333, 295, 32195, 7270, 300, 19959, 666, 341, 4829, 295, 2580, 4884, 13, 50632, 50632, 400, 370, 456, 311, 257, 688, 295, 11290, 286, 600, 3720, 670, 565, 300, 1745, 281, 341, 13, 50856, 50856, 865, 13, 50906, 50906, 865, 13, 50956, 50956, 509, 611, 2729, 257, 534, 869, 751, 466, 4974, 38662, 300, 1062, 312, 7340, 510, 337, 51174, 51174, 561, 6369, 281, 1466, 544, 13, 51274, 51274, 865, 13, 51324, 51324, 865, 13, 51374, 51374, 821, 311, 611, 751, 466, 4974, 38662, 293, 4471, 732, 293, 577, 300, 1985, 456, 13, 51548, 51548, 286, 600, 2212, 751, 365, 1310, 293, 577, 4471, 732, 1985, 456, 13, 51768, 51768], "temperature": 0.0, "avg_logprob": -0.16416711466653006, "compression_ratio": 1.8382978723404255, "no_caption_prob": 1.0783153811644297e-05}, {"id": 1150, "seek": 441970, "start": 4437.9, "end": 4438.9, "text": " Yeah.", "tokens": [50364, 1333, 295, 32195, 7270, 300, 19959, 666, 341, 4829, 295, 2580, 4884, 13, 50632, 50632, 400, 370, 456, 311, 257, 688, 295, 11290, 286, 600, 3720, 670, 565, 300, 1745, 281, 341, 13, 50856, 50856, 865, 13, 50906, 50906, 865, 13, 50956, 50956, 509, 611, 2729, 257, 534, 869, 751, 466, 4974, 38662, 300, 1062, 312, 7340, 510, 337, 51174, 51174, 561, 6369, 281, 1466, 544, 13, 51274, 51274, 865, 13, 51324, 51324, 865, 13, 51374, 51374, 821, 311, 611, 751, 466, 4974, 38662, 293, 4471, 732, 293, 577, 300, 1985, 456, 13, 51548, 51548, 286, 600, 2212, 751, 365, 1310, 293, 577, 4471, 732, 1985, 456, 13, 51768, 51768], "temperature": 0.0, "avg_logprob": -0.16416711466653006, "compression_ratio": 1.8382978723404255, "no_caption_prob": 1.0783153811644297e-05}, {"id": 1151, "seek": 441970, "start": 4438.9, "end": 4439.9, "text": " Yeah.", "tokens": [50364, 1333, 295, 32195, 7270, 300, 19959, 666, 341, 4829, 295, 2580, 4884, 13, 50632, 50632, 400, 370, 456, 311, 257, 688, 295, 11290, 286, 600, 3720, 670, 565, 300, 1745, 281, 341, 13, 50856, 50856, 865, 13, 50906, 50906, 865, 13, 50956, 50956, 509, 611, 2729, 257, 534, 869, 751, 466, 4974, 38662, 300, 1062, 312, 7340, 510, 337, 51174, 51174, 561, 6369, 281, 1466, 544, 13, 51274, 51274, 865, 13, 51324, 51324, 865, 13, 51374, 51374, 821, 311, 611, 751, 466, 4974, 38662, 293, 4471, 732, 293, 577, 300, 1985, 456, 13, 51548, 51548, 286, 600, 2212, 751, 365, 1310, 293, 577, 4471, 732, 1985, 456, 13, 51768, 51768], "temperature": 0.0, "avg_logprob": -0.16416711466653006, "compression_ratio": 1.8382978723404255, "no_caption_prob": 1.0783153811644297e-05}, {"id": 1152, "seek": 441970, "start": 4439.9, "end": 4443.38, "text": " There's also talk about random generators and map two and how that works there.", "tokens": [50364, 1333, 295, 32195, 7270, 300, 19959, 666, 341, 4829, 295, 2580, 4884, 13, 50632, 50632, 400, 370, 456, 311, 257, 688, 295, 11290, 286, 600, 3720, 670, 565, 300, 1745, 281, 341, 13, 50856, 50856, 865, 13, 50906, 50906, 865, 13, 50956, 50956, 509, 611, 2729, 257, 534, 869, 751, 466, 4974, 38662, 300, 1062, 312, 7340, 510, 337, 51174, 51174, 561, 6369, 281, 1466, 544, 13, 51274, 51274, 865, 13, 51324, 51324, 865, 13, 51374, 51374, 821, 311, 611, 751, 466, 4974, 38662, 293, 4471, 732, 293, 577, 300, 1985, 456, 13, 51548, 51548, 286, 600, 2212, 751, 365, 1310, 293, 577, 4471, 732, 1985, 456, 13, 51768, 51768], "temperature": 0.0, "avg_logprob": -0.16416711466653006, "compression_ratio": 1.8382978723404255, "no_caption_prob": 1.0783153811644297e-05}, {"id": 1153, "seek": 441970, "start": 4443.38, "end": 4447.78, "text": " I've given talk with maybe and how map two works there.", "tokens": [50364, 1333, 295, 32195, 7270, 300, 19959, 666, 341, 4829, 295, 2580, 4884, 13, 50632, 50632, 400, 370, 456, 311, 257, 688, 295, 11290, 286, 600, 3720, 670, 565, 300, 1745, 281, 341, 13, 50856, 50856, 865, 13, 50906, 50906, 865, 13, 50956, 50956, 509, 611, 2729, 257, 534, 869, 751, 466, 4974, 38662, 300, 1062, 312, 7340, 510, 337, 51174, 51174, 561, 6369, 281, 1466, 544, 13, 51274, 51274, 865, 13, 51324, 51324, 865, 13, 51374, 51374, 821, 311, 611, 751, 466, 4974, 38662, 293, 4471, 732, 293, 577, 300, 1985, 456, 13, 51548, 51548, 286, 600, 2212, 751, 365, 1310, 293, 577, 4471, 732, 1985, 456, 13, 51768, 51768], "temperature": 0.0, "avg_logprob": -0.16416711466653006, "compression_ratio": 1.8382978723404255, "no_caption_prob": 1.0783153811644297e-05}, {"id": 1154, "seek": 444778, "start": 4447.78, "end": 4451.7, "text": " So yeah, maybe this whole time I was just trying to get everyone to be excited about", "tokens": [50364, 407, 1338, 11, 1310, 341, 1379, 565, 286, 390, 445, 1382, 281, 483, 1518, 281, 312, 2919, 466, 50560, 50560, 4471, 732, 13, 50610, 50610, 467, 390, 264, 1151, 2445, 13, 50694, 50694, 1042, 11, 309, 2732, 337, 385, 13, 50774, 50774, 286, 478, 669, 3452, 493, 13, 50824, 50824, 1042, 11, 1309, 291, 370, 709, 797, 13, 50904, 50904, 400, 508, 2032, 268, 11, 362, 257, 665, 472, 13, 50954, 50954, 3560, 257, 665, 472, 13, 50954], "temperature": 0.0, "avg_logprob": -0.20011765956878663, "compression_ratio": 1.4181818181818182, "no_caption_prob": 5.337892616807949e-06}, {"id": 1155, "seek": 444778, "start": 4451.7, "end": 4452.7, "text": " map two.", "tokens": [50364, 407, 1338, 11, 1310, 341, 1379, 565, 286, 390, 445, 1382, 281, 483, 1518, 281, 312, 2919, 466, 50560, 50560, 4471, 732, 13, 50610, 50610, 467, 390, 264, 1151, 2445, 13, 50694, 50694, 1042, 11, 309, 2732, 337, 385, 13, 50774, 50774, 286, 478, 669, 3452, 493, 13, 50824, 50824, 1042, 11, 1309, 291, 370, 709, 797, 13, 50904, 50904, 400, 508, 2032, 268, 11, 362, 257, 665, 472, 13, 50954, 50954, 3560, 257, 665, 472, 13, 50954], "temperature": 0.0, "avg_logprob": -0.20011765956878663, "compression_ratio": 1.4181818181818182, "no_caption_prob": 5.337892616807949e-06}, {"id": 1156, "seek": 444778, "start": 4452.7, "end": 4454.38, "text": " It was the best function.", "tokens": [50364, 407, 1338, 11, 1310, 341, 1379, 565, 286, 390, 445, 1382, 281, 483, 1518, 281, 312, 2919, 466, 50560, 50560, 4471, 732, 13, 50610, 50610, 467, 390, 264, 1151, 2445, 13, 50694, 50694, 1042, 11, 309, 2732, 337, 385, 13, 50774, 50774, 286, 478, 669, 3452, 493, 13, 50824, 50824, 1042, 11, 1309, 291, 370, 709, 797, 13, 50904, 50904, 400, 508, 2032, 268, 11, 362, 257, 665, 472, 13, 50954, 50954, 3560, 257, 665, 472, 13, 50954], "temperature": 0.0, "avg_logprob": -0.20011765956878663, "compression_ratio": 1.4181818181818182, "no_caption_prob": 5.337892616807949e-06}, {"id": 1157, "seek": 444778, "start": 4454.38, "end": 4455.98, "text": " Well, it worked for me.", "tokens": [50364, 407, 1338, 11, 1310, 341, 1379, 565, 286, 390, 445, 1382, 281, 483, 1518, 281, 312, 2919, 466, 50560, 50560, 4471, 732, 13, 50610, 50610, 467, 390, 264, 1151, 2445, 13, 50694, 50694, 1042, 11, 309, 2732, 337, 385, 13, 50774, 50774, 286, 478, 669, 3452, 493, 13, 50824, 50824, 1042, 11, 1309, 291, 370, 709, 797, 13, 50904, 50904, 400, 508, 2032, 268, 11, 362, 257, 665, 472, 13, 50954, 50954, 3560, 257, 665, 472, 13, 50954], "temperature": 0.0, "avg_logprob": -0.20011765956878663, "compression_ratio": 1.4181818181818182, "no_caption_prob": 5.337892616807949e-06}, {"id": 1158, "seek": 444778, "start": 4455.98, "end": 4456.98, "text": " I'm amped up.", "tokens": [50364, 407, 1338, 11, 1310, 341, 1379, 565, 286, 390, 445, 1382, 281, 483, 1518, 281, 312, 2919, 466, 50560, 50560, 4471, 732, 13, 50610, 50610, 467, 390, 264, 1151, 2445, 13, 50694, 50694, 1042, 11, 309, 2732, 337, 385, 13, 50774, 50774, 286, 478, 669, 3452, 493, 13, 50824, 50824, 1042, 11, 1309, 291, 370, 709, 797, 13, 50904, 50904, 400, 508, 2032, 268, 11, 362, 257, 665, 472, 13, 50954, 50954, 3560, 257, 665, 472, 13, 50954], "temperature": 0.0, "avg_logprob": -0.20011765956878663, "compression_ratio": 1.4181818181818182, "no_caption_prob": 5.337892616807949e-06}, {"id": 1159, "seek": 444778, "start": 4456.98, "end": 4458.58, "text": " Well, thank you so much again.", "tokens": [50364, 407, 1338, 11, 1310, 341, 1379, 565, 286, 390, 445, 1382, 281, 483, 1518, 281, 312, 2919, 466, 50560, 50560, 4471, 732, 13, 50610, 50610, 467, 390, 264, 1151, 2445, 13, 50694, 50694, 1042, 11, 309, 2732, 337, 385, 13, 50774, 50774, 286, 478, 669, 3452, 493, 13, 50824, 50824, 1042, 11, 1309, 291, 370, 709, 797, 13, 50904, 50904, 400, 508, 2032, 268, 11, 362, 257, 665, 472, 13, 50954, 50954, 3560, 257, 665, 472, 13, 50954], "temperature": 0.0, "avg_logprob": -0.20011765956878663, "compression_ratio": 1.4181818181818182, "no_caption_prob": 5.337892616807949e-06}, {"id": 1160, "seek": 444778, "start": 4458.58, "end": 4459.58, "text": " And Jeroen, have a good one.", "tokens": [50364, 407, 1338, 11, 1310, 341, 1379, 565, 286, 390, 445, 1382, 281, 483, 1518, 281, 312, 2919, 466, 50560, 50560, 4471, 732, 13, 50610, 50610, 467, 390, 264, 1151, 2445, 13, 50694, 50694, 1042, 11, 309, 2732, 337, 385, 13, 50774, 50774, 286, 478, 669, 3452, 493, 13, 50824, 50824, 1042, 11, 1309, 291, 370, 709, 797, 13, 50904, 50904, 400, 508, 2032, 268, 11, 362, 257, 665, 472, 13, 50954, 50954, 3560, 257, 665, 472, 13, 50954], "temperature": 0.0, "avg_logprob": -0.20011765956878663, "compression_ratio": 1.4181818181818182, "no_caption_prob": 5.337892616807949e-06}, {"id": 1161, "seek": 445958, "start": 4459.58, "end": 4481.98, "text": " Have a good one.", "tokens": [50364, 3560, 257, 665, 472, 13, 51484], "temperature": 0.0, "avg_logprob": -0.576862096786499, "compression_ratio": 0.6666666666666666, "no_caption_prob": 0.0001841303746914491}], "language": "en"}