{"text": " Hello, Jeroen. Hello, Dylan. You know what I love to generate? Good content? I do love generating good content. I love generating ideas. I love generating code. And I love generating buzz. And you know who's really good for generating buzz? It's our good friend Matt Griffith. Matt, thanks for joining the show. Oh, man. Thanks for having me. That's probably the best introduction we've done so far. That was pretty good. Yeah, it did not go where I thought it was going to go. That's great. Could the editing team please add bells and whistles to... Yeah, right. Like, cheers in the background. Absolutely. Matt, I think this is a long time coming. We've had you on for some game show episodes, but not for a topic. So here we are. Yeah, here we go. I'm excited. Yeah, I'm glad to be here. This is awesome. Yeah, I'm excited about your cranking out some projects right now. So what are we talking about today? Yeah, there's been a lot on the back burner for a long time. So now it's like, okay, time to get them out. Like, let's do this. Yes. Yeah. So what are we talking about today? Yeah, let's talk about it. We are talking about Elm CodeGen, which is the first of these projects that needs to get out there. Yeah, shall I give like a high level overview of what it does? Yeah, that would be excellent. What the heck is it? Yeah, so Elm CodeGen. It's two things, actually. So it's a command line tool, right? And it's also an Elm library, and you can use either of them. And essentially what I wanted is I wanted something to generate Elm code that was more convenient than string templates and less of a pain than ASTs. I realized that last point might be like a little bit of a spicy point, and there's some interesting like kind of area to navigate there. ASTs are great, but like the question was, could we do better? And specifically, I was like, okay, if when someone wants to do CodeGen for like a tiny thing, if they reach for this versus just reaching for a string template, like string replace, right? If they believe just sort of in their gut that that's more convenient, then I've won. And separately, if you could build some sort of larger project, something very more abstract, and have it be more maintainable than having to juggle a raw AST, that would be a major win. And if I could do both, it would be just a very cool project. I feel a bit confused. Like, do you know about any code generation tools that use ASTs where you actually have to construct ASTs to generate code? I think it would be the default. I think, yeah, for sure. Like if you go to the TypeScript compiler, like to generate TypeScript code, you have a little factory. Oh, yeah. But like it's a very open ended, you know, there's not much judge there, right? It's like, here are all the options for this AST thing, and you just have sort of this massive surface area, right? Yeah, I remember playing with it with LMMtimized Level 2. Right, that was my experience as well, right? We're trying to like, and there's maybe like two aspects to this because there's reading ASTs, right, which is its own certain level of complexity. And there's writing them, which has its own separate set of complexities. So, okay, maybe this is a good point to sort of, because it's easy to jump into the details here. Like maybe the motivating examples, because I didn't actually set out to make a code gen tool, or like that's not where it started, right? So where it started and what I was kind of interested in is there were two projects, one for work and one that I just wanted out there, but maybe relevant to work that I wanted. It's been on my mind for a while. And one of them was, I was really curious to build GQL 2.0 sort of compiler, right? Read a little GQL query or mutation, generate some really nice Elm code that you could interact with. So, and there's a whole discussion there that I know Dylan will have. Yes, we would love to have you on for that. And just to clarify for anyone who doesn't know GQL, you're talking about GraphQL. GraphQL, that's right. That's right. So there's like, okay, I want to be able to generate some code, like reading essentially a query, maybe do some checking and generate some Elm code. That's a decently complex operation actually. So it's kind of a pretty abstract use case. It's not quite as abstract as maybe your own, you're used to dealing with Elm review being like Elm review fix of like, we're going to map a full AST to a full AST, right? Here we're taking a smaller input. It's not that much smaller, but it is smaller. It's the AST of your GraphQL, either your query or the schema, maybe doing some things like checking, type checking it saying like, okay, like you're only asking for fields you expect and then generating some Elm code. So you're still getting the AST on the generation side. Yeah. Just to clarify Elm review doesn't work with, you don't give it an AST, you manipulate the strings. What? Yeah. Fixes are just changing, inserting, deleting strings, which is... That's interesting because it's not, you're using Elm syntax though, right? Yeah. But if you replace some parts of the AST by other AST, then you lose formatting, you lose comments. Okay, fair. Yeah. And the thing is if you do it with strings, string manipulations, then that's easier to understand for other tools like a language server. And you can still use AST replacements by having an AST to string function. Yeah, like a lot of people use Elm syntax DSL to generate a string that... And then use the string as interrupt format kind of a thing. Yeah. Yeah. That's really interesting. I did not know that. And then the other project that I was interested in to sort of anchor it here was I was interested in generating like design systems for Elm UI. I think with Elm UI, if you're not familiar with Elm UI, it's a little sort of library for like a layout language that you can use instead of CSS that basically will generate some CSS, but maybe has some characteristics which make it easier to think about. But one of the missing pieces I found with Elm UI, I'm like, okay, well, you know, but what do I want with Elm UI? I really want people to... I want the experience to be they, you know, they're like, I would like to use Elm UI. And then immediately they have... They maybe make a few high level choices of like, I would like pastels, right? And I would like a dark mode and I prefer like a serif font, right? That's tastefully chosen. And if they could just have a set of Elm code that was like, okay, well, you know, here's a nice color palette like that we know works together. Like here's a nice set of a spacing scale, like for like, you know, paddings, like to have paddings and like font sizes and spacing between elements, all sort of just naturally work out. Like creating design systems, there are certain set of rules that are pretty well known at this point. So you can actually have a fairly constrained set of inputs and generate something where it's like, okay, great. You just have a design system now and you can interact with it and you can have a beautiful app kind of right out of the gate. That was something that I think the JavaScript community has more tools that are like that, where you have something beautiful out of the gate. Elm UI is not that. It's actually like it's more about the logic of your layout, which is intellectually really cool. But ultimately, to thread the needle, you want somewhere it's like, okay, they've made something and it's beautiful and hopefully even more beautiful than what they would do just, you know, if they were left to their own devices or whatever. So where would Elm CodeGen fit into this exactly? So for that, it would be you create some sort of higher level design language, like your color palette, spacing palette. The term, like to think about this language, you would look to terms that designers use to sort of describe design systems. And then you would generate a bunch of Elm code and you would kind of have these values baked in and then you can get this sort of, it's not really a guarantee, but maybe like a sign, really a soft guarantee. But it's like if you're only pulling from this generated, you know, UI theme file, you have this pretty good thing of like, you know, when you're straying outside of your design system and you know that if you use things from this file, it's just going to or set of files, it's just there are just going to work. So again, so it's taking like, and with CodeGen, I like to think of like, yeah, inputs and outputs. So GQL, it was the GraphQL schema and your queries and mutations to Elm code. In this case, it would be like some high level design language. Let's be fair, I haven't done this yet, right? But it's more just in conceptual phases. And then you take that and you'd be able to bake in these values into some generated Elm code. So those were kind of, and also just I found that there were tiny little CodeGen, you know, tasks that I'm like, oh, if I could generate some code, this would actually be really, really nice. Like, but this is such a small thing as this even like a project. And I'm like, and I've noticed that I think other people have these ideas too. And so having it, so an example of this is like, well, you know, we at Vendor, we, you know, we have our design team and they're working on stuff and the design team lives in Figma mostly. And so they're creating artifacts and everything. And one of the things we found was, well, we have our own set of icons there and we wanted to be able to have our icons and color them dynamically and, you know, programmatically, right? So it's like, okay, we want the X, but we want to turn it red or like, you know, whatever. And so it's like, well, that's actually like, how great would it be to just make a Figma API call and say like, hey, give me all the things in this like little box, like that have been squared, like that are inside this physical, I forget what Figma calls things, but like that are all grouped together in some sort of way, give me all of them. And I'm going to create a Figma.icons file and of the way to reference it in Elm code and maybe a few like little options I can switch. I want the large version, I want the small version. I would like the, you know, success versus failure colors or something like that. So little, little deep, like little things where it's like, okay, someone could build a common tool for everybody to do that. And that's fine, but it's less of a project that, I mean, maybe that would be like, maybe there's a general project there, but I'd love to be able to, it's like, oh, it's very easy just to whip something like that up. I'll take a day, I'm just going to do it. And then we never have to worry about it. Yeah, it's really, really exciting. So I think I'm hearing like that I'm hearing two sides of this equation. Like one is you're talking about having a more constrained way to generate code to make it feel safer and easier. So like doing string templating works, but it's, you can create invalid ASTs using things AST based things like Elm C syntax DSL constraints that further. So you can only generate valid ASTs, but valid ASTs might be invalid programs. And then Elm code gen helps reduce that space a little further. And so we haven't gotten into this, but with the help of sort of some generated placeholders for installing quote unquote, installing Elm packages and it sort of knowing the APIs and giving you generated code, meta generated code. Yodog, I heard you like generated code. Basically it gives you generated code to build generated code in a safer way. So you're, so on the one side you're constraining things more to reduce friction. And on the other side, you're giving like a CLI tool because it's kind of a pain to, to build up the boilerplate for, okay, I need to run a little node JS application. I need to spin up my own code. I need to template some code. I need to output that to a file. And you have a CLI that helps you just kind of like Elm review. You have a review config. In code gen you have your generate.elm file and you run Elm code gen run and it generates Elm files. Yeah. Yeah, that's, that's right. There's so the way I think about it and it's great. This is like a preview of my strange loop talk. So there we go. I was literally writing slides this morning about this. So you think about like a, a sliding scale of, of safety. So on the left, right, you have strings, right? And the only thing that strings are guarding against are, is that you're encoded in like, you know, UTF 8. And even then, maybe not, I don't know. Even you go with just numbers, just one giant string of, of. Yeah, right. Strings like so, but inherently flexible and you can build as is obvious if you were, you know, trapped in a room and you needed to build a tiny little like cogen thing and you had nothing else, you'd probably like have strings and do some replacements or what. It's powerful. Are these nightmares that you have being trapped in a room? I have very, very weird. Yes. The saw version of, of generating code. Yeah. To get out of this room, you have to build a cogen tool. Oh, good. I know how to do that. Basically. Yeah. So, so, okay. So strings are on the left and they are the least safe, but immediately this convenience, like sliding scale is both talking about safety, but it's also talking about convenience. There's like this strings inherently portable, inherently convenience. There's some safety stuff, but like you may or may not care about that depending on your use case. Like, so it's like, okay, cool. And just to like acknowledge that that's a valid choice. It's not like more abstract is not always better. There's there are trade offs always. So then you go one, one notch further and you're like, okay, great. I have an AST, an abstract syntax tree. How cool is that? Like we've now modeled the syntax in a tree and what we're guarding against is it's syntactically valid, but it's like, okay, that's cool. We're still missing a few things. One AST is tend to have a very large surface area. Elm is actually pretty great because its surface area is smaller, but even for Elm, it's so small within AST. It's actually still pretty big just because AST is necessarily sort of need to represent a base number of constructs unless it's a very, very simple language. Right. So it's like, okay, even in the simple case, it's still a lot of surface area. And you like, so let's go one notch further. How can we get more safety? Like from an AST. It's like, well, we have to sort of protect it a little bit and we have to maybe process it a little bit. So now we're getting into the area where we're actually going to pretend to be like a little bit more of a compiler ourselves. I'll look at the AST and do some stuff. So the first thing is like, well, can we get imports to always work? Like if you're generating code, if you want to start using a value and it's from a different module, how do you like? It's like, well, before you have to think like, okay, I'm generating and you like this especially happened for the Elm GQL thing that I've been working on is like, okay, this file is going to reference that code and I'm going to like call this value or whatever. I mean, like, okay, well, I'm going to make the call and then I'm separately and it's total other part of the code base. I'm going to make sure that it's imported. And you sort of sit there and you're like, well, but that's kind of dumb because I already like the AST has that information. It's not even like that hidden, right? So can I just before rendering, can I just grab like what values did you use? I'm going to assume that they exist and I'm just going to import them. So it's like, okay, that's one notch farther than an AST. We've processed our AST a little bit to give us some safety. We have this thing of like, you can't screw up your imports. Like that's cool. Okay, but and like, how can we go farther? And this is where things change. Like where I think the key insight for Elm Cogen kind of came where I think what makes it much more useful. Like if I would have stopped there, I think it would have been pretty cool. But there's a lot more value still on the table, which is like, okay. I want to call a function from another module. Or I want to generate. I have to be careful because it's like we're getting into inception land where it's like, okay, are you talking about the code? Are you talking about the code that generates the code? Yeah. You need to be more meta. Yeah. So I want to generate a piece of code that calls a function from another module. Well, in AST land, what you would normally do is you'd have a concept called apply, right? Which is like you say, I'm going to apply these arguments to this value. And the arguments in general is like a list. It's like an open ended list of like, I'm going to like apply X number of arguments to this. So the first thing you'd sort of go to is you're like, okay, well, but I know this function takes two arguments. So I'm going to manually write a little helper. I'm going to write a little function that is going to take that function is going to take two arguments. Behind the scenes, it's going to call apply with list, the unsafe thing, but it's only going to apply it with two values. I know if I use this function to generate a call that I've guarded against something else. I've guarded against arity issues, right? So it's like, okay, we're one notch at imports. Now we're guarding against arity, like calling a function with a number of values, right? And then the let me maybe the last part is like, okay, but the next chunk is types. Now this is kind of weird. And like, so what I mean by that is like, okay, let's say we have a new function called add. We've just invented this. It's amazing. Takes two numbers, smashes them together. You get another number. Groundbreaking. Yeah, super groundbreaking. In this case, we're going to only operate on integers. Now we could make our little helper function that like takes two expressions, like AST expressions and generates a new expression. And it means that whenever you called that, you'd have to say like, okay, my first argument is an integer. So you say like, this is an integer. And then the second argument is like, okay, this is an integer. And you like kind of wrap it before it goes in. But there's another form of this. Like you can just do that wrapping inside of the function. So you have another helper that basically helper that's like my sweet, sweet add function takes two integers and returns an expression. And then it just does the mapping. And so there we've actually squeezed out another bit of safety because now we can call this my add function with two integers that we maybe know at build time. And we get a expression that generates like what it would look like to call that function normally. So now what I like to think about with this, I realize I've been talking a decent long time. So hopefully I'm spinning a good yarn here. But is that that form, that last form of you have a function add, give it two integers and it returns an expression that is that value. That to me is like very close to being like writing the original code, which means it's very close to writing a string. Like convenience wise. It's also interestingly enough, the safest version of everything we've been talking about. Now, the only downside is that in some cases when you're generating code, you don't always know all the values at build time. Right. Like so like. But what we've done and what I think is so cool is we've taken it from being anchored in the unsafe realm and trying to stretch and reach to the safety where it's like the farther we reach the safety, the more like painful it is. Right. We've actually inverted it. Now we say like by default, you are as safe as we can get in this sort of context and the most convenient. And if you need to be more abstract, you can reach farther. You can say like, I need to oh, I need to call this function with a variable number of arguments. Like if I'm doing a builder pattern or something, something that's actually I mean, it's still relatively common, but it's not it's not the most common thing. So there are ways to basically be like, OK, I can reach into my little tool bag and say, like, I want like the more abstract version because that's what I need right now. But you're anchored in this like concrete type checked version of things or not not completely type checked. There's another discussion, which I'm really curious to bring up of I remember sort of going crazy. Again, this is like the, you know, Matt's, you know, nightmares of like you're trapped in a room like, you know, there's a bomb inside of you and you need to code generate it out. I don't know. And and I kept thinking, like, could you could you make a library that has the thing of like if it type checks, it generates code that type checks. And there was a form of this that I was really interested about. And then and I kept trying to leave the door open to explore that. And we maybe after we come to this area, we can go back to that of what it was. But there's a key insight of why that's not doable without some crazy type level stuff that probably doesn't that you that I think you would need or some other mechanism that someone much more clever than me would need to come up with. Cool. I really want to get into that. But but yeah, to keep it to keep it at level one here. I really like what you're saying about this philosophy of like, just as a broader concept in the Elm community, like, can we have our cake and eat it to as far as like, let's make it safer and easier. Can we can we right it's like, the way I've been thinking about it is, can we leverage safety? And this is I think what what Elm does, it's just like, it's clear to me why it's not. We sort of emphasize type safety in Elm. And I think some people may roll their eyes, which is fine. But I think the interesting insight for Elm and the thing that really struck me is like, let's leverage safety to make things more convenient. Like, like, and that's not always possible. I don't think I mean, how could it be but like, for the cases where it is, it's kind of magical. It's kind of like, okay, you ended up with this thing that is safer, and also better to work with. And sometimes also faster. Yeah, there's a there's a lot there's a lot of things that sort of pile up there. And, and if you focus too much of like, okay, we got the type safety or like, or I'm just gonna have type safety, type safety, blah, blah, blah, blah, blah. If you don't balance it out with that other thing of like, I am looking for opportunities to make this incredibly convenient, you'll you'll usually end up with something that's like, okay, this doesn't not like, what the heck am I doing? You know, like, I'm drowning in types. I don't feel great. There was, um, in my agile coaching days, I felt a similar tension, sometimes in a similar enthusiasm to like, dispel these myths that there's like a common perception that, you know, these these technical practices, like, you know, test driven development, or refactoring code and, you know, having having thoughtful, thoughtfully designed code that you iterate on and all of these things like slow you down. You know, testing my code that's going to slow me down. Now I have to write a test, but it's feedback. It's shortening the feedback loop, and it both makes you go faster. And safety also gives you the confidence to just go and not look back not think about whether, whether you're doing something wrong, or whether, you know, some monster is going to trap you in a room. You know, it's very freeing. Yeah. I, yeah, right. Yeah. I can hear the flashbacks of your nightmares. Sorry to. Oh, God. So yeah, so so maybe to bring it around, like, just because I realized with some with the cogen stuff. It's maybe you're hearing it and depending on your experience, you may be very experienced with ASTs or not, maybe that term is actually kind of arcane and weird, which is fair. It's very abstract. Yeah, kind of what it comes down to practically is if you're like, you know, I really want to be able to generate some code some Elm code that, like, is basically just a view function, like it's some HTML calls. What you would do is you would say Elm cogen install Elm HTML, that would give you this little helper module, you could then use that helper module with just like as you'd use any other kind of local module. And you'd write code that looks a lot like a view function, something you're already doing. And the and then you hit run and you just have that, that would be yours. And if you wanted to get crazier, you can push it farther. And there's some cool things you can do there too. But like, just to anchor the concrete part of this, it's like, it's so easy to be like, okay, here's this high level, you know, thing like, oh, they said it was so convenient and so safe. And it's like, well, but but like, what were they actually doing? Right? Yeah, it basically is trying to mirror what your generated code would look like as much as possible, right? Like you Elm dash code gen, install Elm slash time. And then in your generate dot Elm module that generates your Elm code gen code, you do import gen dot time. And then you do gen dot time dot millis two posix or whatever function call and you millis two posix takes an int and gen dot time dot millis two posix takes an int. And so it looks like the code you you're actually generating. That's right. Wait, it takes an intro or it takes an expression, generate expression. It takes an int. But it correct me if I'm wrong, Matt, but it provides an escape hatch if you want to provide a general expression, but the more low hanging fruit way to consume it assumes it just takes a literal int that you already have. Yeah, so the base assumption, the place you start with Elm code gen is the thing that is most convenient is that you probably and this gets into the use cases, but you probably know concretely the values you're putting into these functions at build time in the most common to in the land. It's always like a gradient rate, like how far you go, right? But the most we want to say, like, okay, 85% of the time, you're going to be doing this. It's like, great, we're going to make that super convenient. Like, oh, you want to like you have an integer already almost by definition, you're you're taking some source, some, you know, source of truth, right? The figma, the figma API, or like a graph qL, like schema, which you have these literal values or, you know, and we can just skip the abstract part, nearly completely, like, we are still generating an expression, right? But, but you provide a concrete values, and you basically get kind of what you were expecting. And like, I think you all of a sudden don't need to think about stuff, which was causing us a decent amount of pain, which is like, imports, like, you use the age, use the time library, oh, it's important. And you probably didn't even work like have to worry that that was like a thing. Hopefully, hopefully you're using this for like a few days, you're like, oh, wait, oh, interesting. Okay. Or like, sometimes, like a library doesn't even need to be important, if it's like list or something. And it knows, in most cases, there's still a few things I need to a few like little subtle bugs like that I need to smash, but like, it'll know like, oh, yeah, list dot map. Great. I love that declarative quality. Does it also help you because so I've I've done a lot of string based code generation in JavaScript, and in Elm to generate Elm code. And so I'm very familiar with the pain points you're addressing, including the creating the correct imports, resolving type signatures correctly for types that you're sort of piecing together, it gets really tricky. Also, like creating parameters that aren't going to have name collisions is, oh, is that also something that Elm code gen helps with like giving you valid parameter names that won't. So it's funny, like in focusing on the convenience, I skipped over like a decent amount that Elm code gen does. Some of it. Yeah, maybe need some love, but it does track naming collisions. Not completely. So top level values aren't checked, you have to verify those. But those are usually pretty easy to verify, like if you have a top level value. And when you get into like building the body of something, it's actually tracking a set of like a scope of basically what values are in there. And basically what values are in scope. And like, and add again, like, if it does detect a collision, it'll add in a little like underscore and then a bunch of numbers, I guess kind of like a little protection thing. But it's not 100%. Like there are still some cases to catch. And like the challenging part with this, and where I was trying to get to is, like, if it doesn't have to protect a variable, it shouldn't. Because we want the code that's generated to be nice to look at. And the primary use case could be generating examples. In fact, there's a discussion we should have about that because there's some interesting stuff there. But the code that's generated, I absolutely want it to be inspectable, like with the Elm GQL utility, which is coming up for release and, you know, however many periods of time soon. We've been using it at vendor for the past year and a half, and it's been incredibly successful. So it's, it's more just like documentation needs to get up. But the idea there was that you'd write some graph QL, you'd write a query, you'd write a mutation, and you'd be able to look at the generated Elm code and looking at the generated Elm code would be like, should be like reading really well written Elm code, it should be very simple, very straightforward. Here are the types that are coming in to run this query or mutation. Here are the types, here's the data you're going to get out. Like you don't worry about decoders, don't worry about whatever, you know that it matches the graph QL schema perfectly, right. And the generated code is part of the interface of that library. It's like you're supposed to look at it, even to the point where what I was talking with was developing this with some of my co workers, like Duncan Malashok, and I were looking at this. And they made a suggestion at a certain point that even with the code being generated, it would be useful if we had examples of running that query, especially if the inputs to that query were a little bit more involved. Sometimes they are, and inputs have turned out to be challenging with graph QL and Elm for various sort of subtle and dumb reasons. And so I went down the whole rabbit hole of generating example code that actually turned out to be pretty cool. You know, you basically you say like, okay, we have this schema, we're going to say, well, you know, Dylan, you made this joke when we were getting coffee the other day, like computer, get me a, get me a, you know, a filter, a person filter. Yeah. And then, you know, you have it run out and try to construct a value. And what we found with construct and so with that example code, what was so nice, and I think is something that what I want as an area for Elm code gen that I'm currently exploring and we'll be talking about at Strangeloop of example code generation and how to leverage that into something as a developer resource, right? So, you know, I think it's like, let's be fair, copying and pasting something, and maybe editing it, or like, tweaking it. I mean, you could be like, that's so dumb, you know, like, go to stack overflow and get a thing. It's like, yeah, but we know that this code is like, on some level, some level correct. And so it's actually very useful to be able to copy and paste and remove some of this, you know, you're like, oh, I don't need that. I don't need that, whatever, whatever. And then you have a thing, it's like, okay, wonderful. Here we go. We actually used that to take it further, like, okay, well, we generate these example calls, basically to make using this stuff useful. Now, some things happened. One, we, so small bit of background with GQL inputs cannot have unions, which means that are certain ways that you want to generate, you want to like provide a input, you want to say like, it's one of these values, and you kind of can't do that. And it's very frustrating. And optional stuff is also weird, because it's actually sort of inherits the JavaScript sort of legacy or whatever language legacy of like, things by default are optional. And if it's optional, it's actually a number of states, it's actually either it's not there, or it's there, and it's null, or it's present, right. And the tricky part about that is that present and null is actually a distinct state from absent, and some cases meaningful, but not always, usually not. So, so there are a few ways of handling this in Elm. And I don't really want to get into them because they're, you know, yeah, that's a whole can of worms. And when that actually comes up, but I think it's interesting, using Elm code gen, I was staring at this thing. And I was looking at the example calls, and some of them were pretty big if the surface area was pretty big. But when you're saying that the example calls for the design decisions you've made for your library just becomes very obvious how they scale. You're like, oh, if we handle optional arguments, using the phantom builder pattern or using the like a list of whatever is or like, there are no way of doing this, right. But you can immediately be like, well, this is what a huge query looks like. And this approach looks great when it's small, but oh, boy, there are some weird cases when it gets bigger. And something that would be hard to explore when exploring API span hand, which is the default. So can you elaborate a little bit on how Elm code gen helps you generate examples. So essentially, it, we talked about you do Elm code gen install some package. So basic, and it gives you gen dot time dot whatever the time API is, or whichever package you're using. So you're, you're talking about essentially, using fuzzers to call these types of API. Yeah. So the way the way we are, I originally did it was looking at the source of truth in this case, which was the GraphQL schema. And you're like, okay, I want to make this call to this query. This query takes this input. And what you do is you'd sort of loop over the schema and sort of say, can I make an exhaustive example? And it's like, okay, if this needs a string, I'm just going to put in a string that's called placeholder. If it's a string that's called placeholder, if it needs an integer, great here you get five, you know, so the actual values, you just sort of make something up, just give me something I don't care. And you would kind of like loop over and, and generate calls. So yeah, so you're taking in this case, you were taking the GraphQL schema, and you were using and this is actually with the generated code, it actually exactly where we were. But this is a case where you might want a more abstract version of, of the when we talk about the Elm cogen, like different flavors, right? So it's like the most convenient one is the very concrete one, you might make them use a more abstract version. And so like, in this case, because like the values you're creating, you may not know like, literally. So I'm not sure if that lands for everybody. But so but that's generally what you're doing. And what's interesting, though, and what I'm exploring more recently is actually being able to generate examples for any given piece of Elm code using the like you can for a given Elm package, you can get the what's called the docs JSON, right, which decodes into a really nice type signature for every value in there, which basically the you can think of the docs dot JSON as when you go to the documentation on the Elm package site, and you see the listing of all of the types and the functions and the types that the functions take, that's right, right. So that's the information that's there. Yeah, right. And it's just it's kind of it's just there. If you check out there's a project called project metadata utils, I believe, or something like that, which you ruin I know you're probably very familiar with. And so if you go to like the Elm type module there, you'll see a represent representation of Elm type system. It's just like super great. It's I was thinking about this where I'm like, oh, ASTs in general are like, kind of like the same thing. And I kind of naturally have a large surface area. And I was like looking at that type specifically the type that represents type signatures, as this little this little baby AST, right? It's just like little tiny thing you just want to put in your pocket, right? It's just like, like, you're like, this is so nice. And like, so the thing I've been thinking about it, or I was I'm like, okay, well, we, you know, we did the graph QL example generation. And that was me just sort of figuring it out based on the schema. And because I don't want to get farther away from it, I want to make the point, we also use that example generation on the graph QL side, we were doing a an upgrade to our back end, and we were changing graph QL libraries. And it was one of those things where it's like, okay, we were reasonably, we think it's reasonably good. But, but also, this is a global change to all of our graph QL handling on the back end, which is sort of nerve wracking, kind of no matter where you're at, right? So I was talking with Aaron White, and we were like, how can we get how can we get more confidence around this thing? And I was like, well, have you considered ordering a glass of all your queries? Because basically, we had this example generation, it's like, well, we don't actually, I mean, valid query, completely valid queries, and mutations and everything. It's like, that's, that's good. But we're just testing that the graph QL libraries hooked up correctly. So we just checked, I just took all those example queries and mutations. And I just sent them to the server and said, like, did you blow up? And we did that. And we caught like a few cases, some older parts of the database that had something weird with them. I forget what it was, but it was something. And of course, all the things that were returning was like, what are you talking about, dude? You know, the server was saying, but it's like, no, but the fact that you told me this means I know you're doing all right. Versus versus you just like screaming with your hair on fire, right? So anyway, I wanted to get that point in because I thought it was I think it's really cool. Example generation turns out to be a whole I mean, this is program synthesis, right? It's like, there's a whole set of things you can do with this. So coming back to we went to the little side quest there. We had that cool coming back with that, those types from docs JSON, you have this beautiful little type that sort of represents elm types. I think I've been thinking about that you think about like, what are the sources of information? And what are the inputs and the outputs for your different code gen projects? Like this is actually one that's very valuable and has some advantages over raw ISTs that are kind of huge, right? So it's like a few things one surface area way small, great. So it's very convenient to work on, you still have to do some recursive stuff. But this just the surface area of the recursive stuff you have to do probably not as big. Well, definitely not as big as a normal IST. What do you mean? Well, yeah, you have to like you have, like you'll to represent a function. It's like a lambda call. And then that's like a type and then another type, right? So whatever function you use to generate code using that elm type type, okay, is going to recurse on itself, but it's not going to be it's not going to be too crazy. So and separately, like there's this desire when you're doing code gen, possibly to know some types to operate on types. Or at least like when you have access to it's like, okay, I know for sure that there is a value that has this type. And like, in fact, I know the whole bag of recipes to build these values from this module. Then you have everything you have everything you need to make a example cake, right? Like you just you say you pick a starting point. And you say like, I'm gonna, and you could just pick every point and say like, I'm gonna start wherever and I want to end up, I want to end up with some HTML. Great. So I'm gonna start here. And of course, this thing may fail, right? Me and may not find a way to get to HTML. But it like, you can write an algorithm. And this algorithm is not very involved. 300 lines of code, maybe we say I'm going to start with this value. You're looking at your bag of recipes, you're gonna say like, okay, okay, so you start with it, for instance, or something? Yeah, you start with init. That's a, you know, that would be a natural place to start with some of these things. So like a UI button, right? So you say UI button in it, great. What that maybe, maybe your button module uses the builder pattern. So init does not create HTML, but it creates a button button type. So what you'd say is like, okay, my button takes a record, which has a string and a message, right? So like label and on click, cool, I'm going to make up a string. And I'm going to like, when I see something like message, and we have a little bit of like, just stuff, right? in this like messages, messages, a special case. Then you say like, okay, great, I've created a button. Now that I have a button, what can I do? And then you write a little bit of code to say, like, well, are there any builders that could take a button and maybe a value and modify it? It's like, okay, that's cool. That's cool. It's not that hard. A builder is just a function which takes some stuff and then ultimately takes a thing and returns a thing, right? Great. Really easy to detect when you have this. And then you're like, okay, well, do I have anything? Could I create anything that takes a button and returns HTML? Oh, there's button.view. Great. I'll put that in the end and then I'll claim success. I threaded the maze. Okay. So conceptually, I'm with you about taking this Elm type, which represents a possible Elm type and that represents the thing you see in the Elm package documentation that describes types and functions. And then taking that and solving this puzzle to say, okay, I want to generate something of this type. Here are all the things that are available. How do I create something like that? What I'm not understanding is, is this something that you're just on your own going and taking some docs.json and figuring that out? Or does Elm code gen have something to actually help you with this? That's a wonderful question. So this is something that I'm using Elm code gen to help with. I'm exploring this. Elm code gen does not do this right now. There might be a thing in the future where it's like, maybe this lives in Elm code gen. This could be built entirely on top of Elm code gen. I think there's nothing essential about Elm code gen. It doesn't need to work with internals or anything. So this is more an exploration of what do I find exciting about code generation? And there's this whole territory that sort of opens up when you have something that is convenient. It's like, I'm not worrying about imports, not worrying about type inference. Oh, we kind of forgot to mention Elm code gen does have type inference in it. Like figure out the type signature. There are some limitations to it. It's not as smart as the Elm compiler, but that's fine because the type inference there is a convenience. You can overwrite it if you know it. And it's actually usually not that big of a deal to overwrite it. Let's dive into that a little bit. So at the base level, if you do in your Elm code gen generate module where you're generating some code, if you define a declaration and then in that declaration you just have a, you say, time zero equals time dot millis two posix zero, then it knows the type of that, like the code you generated when you did Elm code gen install Elm slash time knows all of the types for those little generated stubs to help you build using that package. And therefore that declaration, when you generate it, it's going to say time zero colon time dot posix, right? Cause it inferred that. Yeah, that's right. Yeah. So like you'll, you'll add in little values, especially like calling out to libraries and stuff. And ultimately when you render that declaration, it should have a type signature, which is correct, except for a few cases. One, there are some nuances to building type inference. And so there are some, there are some cases that I need to figure out. I think in the general, like to be fair in the Elm GQL, the library I'm working on using the vendor, I work at vendor, which uses, we have 600,000 lines of Elm code, FYI, 300,000 lines of them are generated. But of the 1000 files, or I think it's 1200 or so that are generated, which to be fair, we don't use all of them. And the ones we do use, you only ship values that are used, which is important to consider when generating Elm code. You get, you know, you're not going to bear the burden of a huge like asset size for the stuff that you generate and don't use. So you just don't have to worry about that. But for those 1000, 1200 files that we generate, the type signatures were correct. Like it didn't throw a type signature error for those. So that feels pretty good. But there are cases where it gets confused. I think especially, I think the case where there are going to be cases, which I'm not even sure that there's going to be a way around it, which is when you're heavily using aliases to capture various states. Like it's just, the question is, is just, it doesn't necessarily, like the Elm compiler knows all your aliases. It knows it because it knows your entire project. We don't do, like we do very minimal amount of alias tracking, right? So one of the projects where this shows up that's challenging is Elm CSS because they use type aliases to mimic the constraints of CSS, which is challenging. So there, like the thing you can do is you say like, okay, great. I'll just tell you what the type is. I know what it is. It's actually not that involved. So you can say, you know, for this declaration, the type is going to be this and then we'll be fine. Okay. And you mentioned an escape patch where you can help it along if it does get confused. What is that? That's the with type. Like, yeah. So any expression you can basically say, ignore what you were doing. This is what you are. And then you're in charge. I mean, you're still going to like, ultimately this code is compiled by Elm anyway. So great. Like you'll have to figure it out. Do you have an option to not have a type annotation in case like even you don't know how to, that's a good question. I think so if it errors, it's not going to have a type annotation or at least it shouldn't. There are a few maybe soft errors where the inference is wrong and it's giving the wrong annotation, but that's different. There's no way to sort of say like, don't write any annotation as an explicit statement at the moment. So when the, when it can't infer the type annotation, you won't have a type annotation. Yeah. When you come to find it, infer the type, there won't be a type annotation, but the tool doesn't crash or the tool doesn't say, sorry, I can't generate this code. That's right. We wanted it. Yeah. I think that's a right. And this was something we were thinking about is like, I didn't want my dumb little type inference code, which I'm like, look, this is really just like, if it's, if it works great. Otherwise, yeah, there's ways around us. It's not that big of a deal, but like I'm trying to get to delightful, but yeah, preventing you from generating your code is not delightful. So it will always generate code unless your code doesn't compile. Right. So the original generation code doesn't compile. So the, yeah. So you're delegating the type checking part to the compiler ultimately. Yeah. I wish you have to, right? I mean, like, I mean, ultimately we're going to say like, we're going to try our best, but if, yeah, if we can't figure it out, we're not going to, we're not going to. And then there's, there was even a thing like, I know that there's a bug, which Dylan ran into earlier today, which I'm so glad for, which I actually, in this line of thinking of like, we want to generate your code. Like even if we sort of think that there's something wrong, it's like, we're not the armators of truth right now. L, the L compilers, there is a case in the type inference thing where it will do an infinite loop. Before it was an infinite loop and it'd be like, you know, oh well. It's like, well, that's not great. So the way infinite loops happen is when it's doing type inference, it's looking up like, okay, oh, this is a message. What is a message? Oh, a message is an integer, right? So it does this sort of lookup of like, here's this type variable. What do I know about this type variable? I have a bag of facts about this type variable and I'm going to go and I'm going to try to figure it out. The infinite loop happens when you have a type variable that loops around to itself. So it, it's a variable on it. Like, oh, what is the message? Well, a message is a message. Obviously, yeah. A message is a message is a message is a message. Like that was one of my nightmares. So as if you weren't enough during this episode. Yeah. So, so basically what it will do now is it's actually tracking what type variable names, what values it's already done a lookup for. And if it runs into it again, it's going to give you an error message that says, oh no, I'm not as smart as the UMP compiler, but we're good friends. Like, and I especially get confused in these circumstances, but you know, try to be as like, Hey, this isn't that big of a deal. So this is like, this is not an error. This is a, technically a warning, right? It's not going to stop you. It's just your type signature for that declaration is not going to show up, which honestly is probably fine. Yeah. And I have seen it also give, we're talking a lot about like cases that it's not as smart as the Elm compiler, which is, you know, big shoes to fill, but, but also I've seen it tell me about failures where it's like, Hey, this is supposed to be type HTML, but you gave me a list. I think something's off. Right. So, but ultimately, so it gives you a warning if it encounters something like that and tells you what it thinks the problem was. But then it says, I'm, I'm not the arbiter of truth, like you said. So it still lets you generate the code, but then you can always take that code that it generated and run the compiler on it to make sure it that's, that's the ultimate source of truth. Right. Right. And then there's, yeah, there's a natural like feedback loop there of like, Oh, you know, I ran Elm code gen on this code. And to be very, it's only really giving you like meaningful type inference issue or warnings. If you're sort of in the less concrete area and in the more abstract area, you're using expressions for stuff. And so it'll say like, I tried to unify these two expressions and like one's an integer and one is, who knows. So when that, I lost my train of thought, where were they going? I don't know. And if you call, if you call gen.time.milis2possics, that's, that's kind of a cool case because the type checking is built in where as a compile time guarantee, because it takes an int and therefore if it compiles, it's, there's nothing to even check. It's not, it can't fail. Yeah, that's right. Maybe this is a good time to get into that can of worms that you alluded to earlier about why doesn't it go ahead and, and give like compile time guarantees that you will generate something where the types line up. I love it. Okay. So I'm pretty curious about this. It's, it's fun. Okay. So here, here's what we have. So normally in an AST, you have the AST itself is one type, ignoring the different differences between declarations and expressions. We're just going to focus on expression right now, which is the bulk of stuff. So there's one type and you have an expression and like here's dealing with expressions kind of everywhere. Now, what you could have potentially is because like in, you can have a type on top of expression, which is what Elm Cogen already has. The inner expression is from Elm syntax. There's an outer expression, which basically just has some metadata about stuff, right? So it's actually kind of grabbing a list of imports that is in there, right? Just so it doesn't have to crawl the AST to get them. And it has some other sort of type checking information on there that's not in the original AST. So there's two levels of expressions, right? Now at top level, the one that's exposed that you're most when you are working with Elm Cogen, you see expression. That's the one you're working on is that top level interface. The thing that was making my brain go nuts is you could have expression and then you have a type variable next to it, which is basically the thing you want to generate. Now, the cool part about it is you don't actually need that thing. This is a phantom type. So you could say, or float, you say Elm.float produces an expression of float. Hey, that's cool. And you could definitely create a function that is like add float. Of course, it'd have to be float, which is kind of irritating. Numbers are weird, but let's say there's not a difference between the images and float. So you have add and it takes an expression float, another expression float, and returns an expression float. And then if you didn't pass it, if you pass it like an expression list of float or whatever, you'd get a compile time error. It'd say like, well, you know, I, and it would be like, you know, in that developer catnip kind of a way, like kind of mirroring the original error of like, you know, this function takes a float and float and you gave me a float and you know, whatever. What the heck? So I was like, oh my God, this is nuts. This is so cool. And so I was thinking about it and I was like, okay. And I was like, you know, dreaming about this, having nightmares about it, whatever. You should stop sleeping, man. Oh no, that's not the answer. Type safety for convenience. You go the other way. We got more sleep. More nightmares. So I was thinking about it and like, okay, well, where does this get weird? One part where it gets weird is records. How do you make kind of records work? So records, you need a, you can no longer have a record to create a record. You like to create a record in Lmcogen, you have a list of fields, which is basically the name of the field and the value. That's a problem. It's not totally, so like, again, we're a sliding scale of safety here. Like, and we're comfortable with that. We are not like, so it's like, we kind of give up that like, oh, if it type checks, it generates type checked code. We know that that's probably not doable without some shenanigans or maybe not doable at all. I don't know. Why is that a problem? Is it because you're passing a list of? Yeah, so it's the list part. So the list has to be all one value. So it's like, let's say I wanted a record and it had two fields. One that is my integer and it's an expression integer. And another one, which is my float, which is expression float. All of a sudden that doesn't unify. I think we should clarify too. Like, I think if you're talking about the sort of generated stubs that you have for like, for known APIs, for Lmcogen install some package. That would. You could do that because you could have manually put the phantom type in there. But if you're saying, well, I just want to create my own record, it's not from any package or anything. It's just arbitrary types. Now, like in order to get that phantom type to be a specific thing, you have to pass it in something of that type, but you're not, you're passing it a list, not a record. I think you could potentially do it with a builder pattern. Oh yeah. Yeah. So here's where. Interesting. But you wouldn't be able to get the field name into the type name. So, and you couldn't, you couldn't. So the thing that I think you'd have to do even on the builder pattern is I think you have to have a type hole, which is essentially where an escape hatch for the types. So what this would mean, and this is why originally to add a field to a record, it wasn't just a tuple of like a string and an expression. It was actually I have to say like elm.field passes a string and an expression. The reason why is it would convert it to a special expression, which is expression field. And then you could have a list of those. And you could actually make it work out because you're basically saying, I'm going to throw away the type information here. And you're going to let me do anything. I think you'd have to do the same thing with a builder pattern. Right. Because unless you generated a function for every possible field name, you couldn't get the field names in that type variable. That's right. And so it's like, okay, so I was like, okay, we have this, we have an approach. We can do the field, we can have a little type hole, that's fine. It's not a big deal. It's like, again, it should be more safe and potentially like kind of ergonomic or whatever. And then I realized there was another thing that basically I was just like, well, dang, I don't think that we can do this, which is in the most abstract case, you're not going to know what types you're generating. Like if you want to generate a value of a type that you don't know of until generation time, things get weird. Do you have examples for that? So like, let's say I want to generate like a, where it's like, I don't know the shape of the type and the name of the type or anything. Like so even as it doesn't have to be very complicated, it could be like generating a message type or something. I would all of a sudden have to sort of start to, what I would have to do is I would have to start to mirror, I'd have to create a phantom value, like, okay, here, like I'm generating a message like type. And on the generation code, I'm going to create a type message equal, like type generated message equals generated message. And I'm going to stub that in as the phantom thing for here so that it, but then it just leads down this area where that level of abstraction, you have to start mirroring stuff that you're going to be generating. And I think ultimately you can't because you don't know what you're going to be generating until you generate it, which means you would have to actually maybe generate those types first. And then it's like, where, like, if you're lost, I'm definitely lost. Like if you're like having like, well, I'm not even following you. It's like, great, then we're on the same page. And so then I'm like, oh, but you know, ultimately, and this is where I would like, again, if we were to nail the top, top line thing, can we leverage safety for convenience? And at this point, it started to become clear to me that that was a bridge too far and that there may be options for some safety, but we would give up some expressiveness. And we would also adopt a bucket of confusion. So like an example being like, if someone's coming to Elm, like, you know, we should think of the questions that people generally ask when they come to Elm. One of them, what is a decoder? What the heck? Like, what the heck? Second one, what is this little message on HTML? Right? I mean, those are fair questions. Like, like those are, they're not dumb. Like, they're just they're the first ones you should run into. And so it's like, okay, well, do I want do I want this library to be where it's like, oh, this is for Elm. If you're familiar with this in advance library, it is an advanced library, just because code generation, I think, has to be kind of but like, if, if there's a chance that somebody that this could be their first intro to Elm, and they would actually do something that they maybe in another language, it was too complicated for if they do that, that's such a cool experience. That's so so so cool. And I wasn't, I wasn't willing to have a type variable, screw that up. I'm in favor of type variables in general, just so it's clear. But like, if I don't have to have one, I prefer not to. Yeah, my first experience with Elm was basically building a linter. So playing with ASTs. I think honestly, mine was parsers, right? Which are worse. Yeah. Yeah, but it was solving a big problem. Like I was trying to parse guitar tablature back in the day. And this is actually in lering Haskell. So it was actually if I would have known Elm at that point, or like the Elm parsing library, if it would have existed, that would have been amazing. But this was that was definitely where I was like, Oh, I'm hooked. This is amazing. I had this big bag of regular expressions before, but this is like, so so good. So people can have deep technical experiences. And if we can facilitate them, there's a there's a huge opportunity for people to be like, Oh, that's that was so good. Why? It is that trade off we talked about a lot with like, when you add this guarantee, like, if you do non empty string, is it really gonna like protect you that much? It's like, pretty cumbersome. And it's adding like, or like the Elm HTML escape hatches for different HTML node types. It's like, well, take that what if you what if you write an HTML node type that's not a valid HTML nodes? What if you write empty string for the HTML node type? Well, okay, but at least you know, if you use the core functions, if you use html.div html.span, you're going to be fine. And if you use node, just don't pass it an empty string is probably okay. Yeah, I think there's there's this thing of like, you think about the appetite people have for various things. I'm not sure that people come into Elm with a huge appetite for safety. I think they come into it for a big appetite for sanity, like clarity. I would say that's probably the more the thing and then like you sort of think about it afterwards, like, oh, yeah, no runtime errors. You don't think about no run runtime errors is like a thing that's desirable until like you're in the pit of despair, like experiencing errors all the time. But like, it's not the thing you strive for. Ultimately, like the thing is like you strive for I want to build this beautiful thing or like, look at this cool code. I was able to make this and it's like, I'm not able to make this and it I'm able to do what I could not do before. And it makes sense to me. I didn't like go nuts. And in this case, ultimately, like you still have the Elm compiler to check for things. So yeah, I think dropping the type variable to try and type check things makes a lot of sense. Nice. Yeah, it was it was definitely painting me for a while. But like more and more well, not more and more these days. I want to thread the needle on safety in service of convenience. Right? Yeah, I like the balance you've struck. I wanted to touch on also like, you you provide an API for for creating the generate programs that sort of run your generation code. So like the default one, you just generate a list of modules. So you give it modules which have declarations which have expressions in them and use all this Elm code gen goodness to kind of safely generate files and it and it outputs files when you run Elm code gen run. But then you've got some some ways to create a program that has flags. So like you've got from JSON, which you give it a JSON decoder, and then you get access to those flags for generating your program. So tell us a little bit about those kind of helpers. Sure. Yeah, so in the Elm code gen, the CLI, the thing that runs stuff, the CLI, there's some JavaScript, which is actually very simple. If you want to run an Elm app using node, if that interests you, it's surprisingly simple. It's basically like, start this Elm application. If you have ports, maybe you talk to it by ports. But so behind the scenes, Elm code gen is just, you know, starting your own application and sort of it has two ports, which is basically I think there's a success and a failure port probably could have been like one of them. But and it's expecting a certain shape of JSON in both sides. And you're also able to pass data through the flags. So what I found in most cases, the thing that you're the most common case that you're doing is taking some external source of data and you want to do something with it. So you may like the most convenient way to do that is like I'm going to make an API call and get some JSON and then I'm going to hand that JSON to Elm code gen and it's going to do a thing. So I wanted to make that like just super, super convenient. So like in the Elm code gen CLI, you can basically just say like Elm code gen space run space flags, and then you hand it a JSON file and it will read that. And then you'll have to have a decoder on your decoder side. But and then you can kind of do whatever. And then there is also some stuff to be able to where it's like maybe the more advanced cases you kind of want this where it's like maybe you want to be able to throw it. Well, you definitely want to be able to throw errors, right? Like, like, well, you know, figma changed their API, like in this value is not whatever. Or in some cases, I believe there's an affordance for it, like just talking to the terminal saying like, here's a warning, here's whatever. So it was really just trying to make find what are those really convenient things and, and just make them convenient. So the most most convenient one was JSON data. If it's not, if it doesn't have the JSON suffix, it'll just pass it in as a text file. So markdown, great, you'll get a markdown file, like, you can do whatever. I think there's probably some additional stuff we can do there. Sources of truth that are interesting is like, like, I know Ryan with elm land, which is a very cool projects, was looking at just your directory structure of your page, and using that to drive your routes. I think that's that's super insightful, right? That means the source of truth is the is the directory structure. And there's, there's no like, a built in way to grab that in elm code gen. But it's really not hard to just wrap that in JSON and shove it in the code gen. Right. So, so for instance, if you were if you wanted to have access to the contents of an elm file, for instance, then you would pass that as a flag. And then you just have one giant string. And if you wanted to have access to two elm files, then you would convert them to some JSON and possibly Yeah, okay. I think there's probably a few different ways to slice it like depending on it's hard to basically say, Oh, here's the way without seeing a specific project, right? As far as what are the best ways to do that, it could be where it's all loaded in through flags, maybe there's like a crazy async thing you have going where it's your you can still talk to this thing via ports, right? It's the actor pattern. So you could, you could have a thing where you're like feeding it files as you go, but you'd need to adjust the elm code gen utility. And like, like right now that for elm GQL, to be clear, because elm code gen didn't have its own way of running stuff, elm GQL, just because that JavaScript is not that hard to write, just wrote its own JavaScript runner. Right. And so like, and can basically do whatever it has its own CLI interface, like the intention with elm GQL is that it's its own thing. So I don't want like, I don't want someone to start up elm GQL and have it say like, welcome to elm code gen, would you like to call elm HTML and they're being like, what the heck are you talking about? So like, I think what if people are looking to build tools on top of elm code gen, which, by the way, if you are, I'm super excited to hear about it. And if you run into issues, especially right, and if you don't run into issues even better, but probably what I'd recommend if you're looking into it is like, can you even copy elm code gen CLI as a starting point and adjust it as maybe you have different flags or like whatever, you know, but do what like, do what fits for your projects and use elm code gen CLI as a reference for what, how to talk to stuff, but be pretty easy to extend it. I'm actually really thinking about like, it would be cool if there was like an elm pages harness. So like, you know, elm pages is for like building static sites and with v3 for building sort of server rendered sites. But the heart of elm pages is this data source abstraction, which is basically a way of like, asking node JS to do things for you. Make an HTTP request and give me that data. Read this file, decode this file as JSON, whatever, right. So glob, glob a list of file paths and get me that as the input, right. So it's communicating with node JS to like do nodey things and then give you back elm data in a safe way, right. So, and then you can map that into whatever. It would be really cool if you could like do, you know, data source HTTP dot get, get some JSON data, decode that, generate some code with just elm code gen types, and then you're up and running. And if that was like a little self encapsulated command line tool, that'd be so, so useful. I would use that. Yeah, I think I think there might be an opportunity for elm code gen basically as the library, right? Like, right. And like, if you're already doing interesting things with, you know, data sources and threading through stuff, and I mean, you're already generating files, right? Like, so this is just like, exactly, like, you wouldn't even need to. Yeah, you just like, put elm code gen in wherever you want to generate some stuff. I mean, ultimately, the vast majority of elm code gen is just in elm. You can run it in an le, right? Like, I really like that you can run it. You can transform the generated code to string, and therefore making it available to elm review, which people can do cool things with it. Like, oh, yeah, there we go. If your review is you're generating elm code before it's generated, is that useful? Probably not. No, well, Martin Seward and even Dylan wrote some review rules where you did say debug.to do, and in this ring, you have HTML code, and that transforms it to HTML or JSON decoders or whatever. Okay. So there's definitely some uses for it. I don't know if it's easier to write it using strings, but maybe elm code gen would be perfect here. It would be very cool. Let's make elm pages code gen review and then call it a day. Let's do it. Perfect. Yeah, I actually used elm code gen like a while back for something when it was still elm prefab. That was the original name. Yeah, I forgot about that. I also own elmprefab.com. It was pretty fabulous as advertised. The one thing that I ran into, which is not your fault, but it's an unfortunate limitation, is that I accept all responsibility. Well, yeah, if you want to, you can't put inline comments in expressions. That's right. Yeah, I was trying to use it for a couple of things where I wanted to do for elm HTTP fusion, this app that Mario and I have collaborated on a bit, mostly Mario, but to kind of scaffold out these decoders and stuff based on JSON responses. But the scaffolded code, sometimes you want to put in these little comments in the scaffold code and that's a limitation. Yeah, I definitely want it. I'm guessing it's a limitation from elm syntax or something. That's right. That's right. So you can have comments, top level comments. You can have doc comments attached to declarations, right? So those are supported and should be great. The challenge, this elm code gen is built on top of a library called elm syntax. And what elm syntax does when it parses elm code, even though we're not necessarily parsing elm code in elm code gen, except sometimes, is that it takes all the inline comments, notes their source position, so their column and line, and then it drags them up to a dictionary or not dictionary, a list at the top of the data structure. So it takes them out of the AST. And generally, you know, I mean, there's a topic of discussion for like, do comments live in ASTs? I think ultimately, it depends what your purpose of your AST is. Elm syntax, it's a question that's interesting to ask, what is the purpose of elm syntax? I almost think that it makes sense to actually keep the comments in the AST, even like in a way where it's not, doesn't invalidate your thing. But that's the right now, I don't really want to get into like, well, it would be a huge lift for elm code gen to figure out the math of where the comments go, because elm code gen essentially doesn't care about source position, because it's not reading a file, we're using like, we're so like all the source positions and elm code gen behind the scenes are like zero, zero. So it'd be like, oh, no, now we have to like do this math. And if I if I screw up, then, then, you know, your code code is going to be broken. So I was like, okay, well, I'm just going to wait for some smart person to figure it out in elm syntax. And no, no, because I'm the one with published rights on the package. I know. And I have no clue how to do it. Like, I've actually looked at what different ASTs did in JavaScript. And it was, I found like 20, which was a surprisingly large number. And all of them either ignored comments or put them in a list, just like elm syntax does. And one of them put them in the AST. But then there's a question like, is this is this AST node, the right one to attach the comment to? Do you want to put the comments before or after? That's also... That's what you would have is you'd have well, shooting from the hip here, like, and I don't expect this to be fair, I have no intention of putting this on your plate. But like what I would expect is you'd have two constructors, one for comment before one for comment after. And, and it is sort of like a function in that it's sort of like has to be attached to another expression. You can't have a comment just, you know, hanging out by itself. But... Well, except if it's at top level. Right. Well, track those separately, right? Maybe have a different flavor of top level comment. But I know that's Elm format also has a lot of complexity around comments. It's tricky. It's a tricky situation. And like, it's one of those things where it's like the use case in this case is super clear. It's very clear in other cases that comments, it would be great to just get rid of them. So like for compile, like if you ever look at the Elm compiler, it's like, it makes sense that it's not tracked there. Like formatting, it does make sense. It's a whole thing. And that's why I say when I like talk about ASTs being weird, there's also like varying levels of information depending on what you're actually trying to do with a given AST. And if it's there, it's great. If it's not, it's challenging. And it's hard to possibly add in stuff later. Yeah. Yeah. But aside from that limitation, like it really seems like, you know, I mean, you can run the type checking yourself anytime you want to after you generate something. And otherwise, it's just a lovely tool. So thank you for introducing it to the community. Yeah, that's wonderful. I'm very excited for it to be out. I'm looking forward to what people make with it. Yeah, exactly. Me too. Yeah, amazing stuff. What should people look at if they if they want to get started? Yeah, so the main thing to check out is going to be the GitHub repo, which is just mdgriffith slash elmcogen. There's also a post on the discourse, the Elm discourse of that sort of gives maybe a more involved motivation. But I think most of that's captured in the readme. There should be like, just a few examples there to naturally like get started with. I probably need to add more. There are guides on that repo that sort of lead you through the various like inception levels of code generation, starting out concrete and moving to more abstract. I think to get started, I think it's really useful, or it's pretty fun to actually just mess around with an Ellie. And just install it and just get a feel for it. I should probably have that set up on the readme as far as like to really get people started. But and then once you kind of get a little bit of the flavor of it, it can be probably the next step is setting up a project and deciding what is your source of truth and what do you want to generate? Those are the two big decisions, honestly. Yeah, or npm install elm codegen review pages and coming soon. Yeah. Yeah. Amazing. And we'll look out for your Strangeloop talk as well. Super excited. Thank you. Yeah, it's gonna be good. Amazing stuff. All right. Thank you so much for joining, Matt. It was a pleasure. Yeah, thank you. And Jeroen. Until next time. Until next time.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 1.0, "text": " Hello, Jeroen.", "tokens": [50364, 2425, 11, 508, 2032, 268, 13, 50414, 50414, 2425, 11, 28160, 13, 50464, 50464, 509, 458, 437, 286, 959, 281, 8460, 30, 50664, 50664, 2205, 2701, 30, 50714, 50714, 286, 360, 959, 17746, 665, 2701, 13, 50814, 50814, 286, 959, 17746, 3487, 13, 50864, 50864, 286, 959, 17746, 3089, 13, 51014, 51014, 400, 286, 959, 17746, 13036, 13, 51114, 51114, 400, 291, 458, 567, 311, 534, 665, 337, 17746, 13036, 30, 51264, 51264, 467, 311, 527, 665, 1277, 7397, 23765, 355, 13, 51364, 51364, 7397, 11, 3231, 337, 5549, 264, 855, 13, 51464, 51464, 876, 11, 587, 13, 51514, 51514, 2561, 337, 1419, 385, 13, 51564, 51564, 663, 311, 1391, 264, 1151, 9339, 321, 600, 1096, 370, 1400, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.20731273123888466, "compression_ratio": 1.78125, "no_caption_prob": 0.2304062396287918}, {"id": 1, "seek": 0, "start": 1.0, "end": 2.0, "text": " Hello, Dylan.", "tokens": [50364, 2425, 11, 508, 2032, 268, 13, 50414, 50414, 2425, 11, 28160, 13, 50464, 50464, 509, 458, 437, 286, 959, 281, 8460, 30, 50664, 50664, 2205, 2701, 30, 50714, 50714, 286, 360, 959, 17746, 665, 2701, 13, 50814, 50814, 286, 959, 17746, 3487, 13, 50864, 50864, 286, 959, 17746, 3089, 13, 51014, 51014, 400, 286, 959, 17746, 13036, 13, 51114, 51114, 400, 291, 458, 567, 311, 534, 665, 337, 17746, 13036, 30, 51264, 51264, 467, 311, 527, 665, 1277, 7397, 23765, 355, 13, 51364, 51364, 7397, 11, 3231, 337, 5549, 264, 855, 13, 51464, 51464, 876, 11, 587, 13, 51514, 51514, 2561, 337, 1419, 385, 13, 51564, 51564, 663, 311, 1391, 264, 1151, 9339, 321, 600, 1096, 370, 1400, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.20731273123888466, "compression_ratio": 1.78125, "no_caption_prob": 0.2304062396287918}, {"id": 2, "seek": 0, "start": 2.0, "end": 6.0, "text": " You know what I love to generate?", "tokens": [50364, 2425, 11, 508, 2032, 268, 13, 50414, 50414, 2425, 11, 28160, 13, 50464, 50464, 509, 458, 437, 286, 959, 281, 8460, 30, 50664, 50664, 2205, 2701, 30, 50714, 50714, 286, 360, 959, 17746, 665, 2701, 13, 50814, 50814, 286, 959, 17746, 3487, 13, 50864, 50864, 286, 959, 17746, 3089, 13, 51014, 51014, 400, 286, 959, 17746, 13036, 13, 51114, 51114, 400, 291, 458, 567, 311, 534, 665, 337, 17746, 13036, 30, 51264, 51264, 467, 311, 527, 665, 1277, 7397, 23765, 355, 13, 51364, 51364, 7397, 11, 3231, 337, 5549, 264, 855, 13, 51464, 51464, 876, 11, 587, 13, 51514, 51514, 2561, 337, 1419, 385, 13, 51564, 51564, 663, 311, 1391, 264, 1151, 9339, 321, 600, 1096, 370, 1400, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.20731273123888466, "compression_ratio": 1.78125, "no_caption_prob": 0.2304062396287918}, {"id": 3, "seek": 0, "start": 6.0, "end": 7.0, "text": " Good content?", "tokens": [50364, 2425, 11, 508, 2032, 268, 13, 50414, 50414, 2425, 11, 28160, 13, 50464, 50464, 509, 458, 437, 286, 959, 281, 8460, 30, 50664, 50664, 2205, 2701, 30, 50714, 50714, 286, 360, 959, 17746, 665, 2701, 13, 50814, 50814, 286, 959, 17746, 3487, 13, 50864, 50864, 286, 959, 17746, 3089, 13, 51014, 51014, 400, 286, 959, 17746, 13036, 13, 51114, 51114, 400, 291, 458, 567, 311, 534, 665, 337, 17746, 13036, 30, 51264, 51264, 467, 311, 527, 665, 1277, 7397, 23765, 355, 13, 51364, 51364, 7397, 11, 3231, 337, 5549, 264, 855, 13, 51464, 51464, 876, 11, 587, 13, 51514, 51514, 2561, 337, 1419, 385, 13, 51564, 51564, 663, 311, 1391, 264, 1151, 9339, 321, 600, 1096, 370, 1400, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.20731273123888466, "compression_ratio": 1.78125, "no_caption_prob": 0.2304062396287918}, {"id": 4, "seek": 0, "start": 7.0, "end": 9.0, "text": " I do love generating good content.", "tokens": [50364, 2425, 11, 508, 2032, 268, 13, 50414, 50414, 2425, 11, 28160, 13, 50464, 50464, 509, 458, 437, 286, 959, 281, 8460, 30, 50664, 50664, 2205, 2701, 30, 50714, 50714, 286, 360, 959, 17746, 665, 2701, 13, 50814, 50814, 286, 959, 17746, 3487, 13, 50864, 50864, 286, 959, 17746, 3089, 13, 51014, 51014, 400, 286, 959, 17746, 13036, 13, 51114, 51114, 400, 291, 458, 567, 311, 534, 665, 337, 17746, 13036, 30, 51264, 51264, 467, 311, 527, 665, 1277, 7397, 23765, 355, 13, 51364, 51364, 7397, 11, 3231, 337, 5549, 264, 855, 13, 51464, 51464, 876, 11, 587, 13, 51514, 51514, 2561, 337, 1419, 385, 13, 51564, 51564, 663, 311, 1391, 264, 1151, 9339, 321, 600, 1096, 370, 1400, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.20731273123888466, "compression_ratio": 1.78125, "no_caption_prob": 0.2304062396287918}, {"id": 5, "seek": 0, "start": 9.0, "end": 10.0, "text": " I love generating ideas.", "tokens": [50364, 2425, 11, 508, 2032, 268, 13, 50414, 50414, 2425, 11, 28160, 13, 50464, 50464, 509, 458, 437, 286, 959, 281, 8460, 30, 50664, 50664, 2205, 2701, 30, 50714, 50714, 286, 360, 959, 17746, 665, 2701, 13, 50814, 50814, 286, 959, 17746, 3487, 13, 50864, 50864, 286, 959, 17746, 3089, 13, 51014, 51014, 400, 286, 959, 17746, 13036, 13, 51114, 51114, 400, 291, 458, 567, 311, 534, 665, 337, 17746, 13036, 30, 51264, 51264, 467, 311, 527, 665, 1277, 7397, 23765, 355, 13, 51364, 51364, 7397, 11, 3231, 337, 5549, 264, 855, 13, 51464, 51464, 876, 11, 587, 13, 51514, 51514, 2561, 337, 1419, 385, 13, 51564, 51564, 663, 311, 1391, 264, 1151, 9339, 321, 600, 1096, 370, 1400, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.20731273123888466, "compression_ratio": 1.78125, "no_caption_prob": 0.2304062396287918}, {"id": 6, "seek": 0, "start": 10.0, "end": 13.0, "text": " I love generating code.", "tokens": [50364, 2425, 11, 508, 2032, 268, 13, 50414, 50414, 2425, 11, 28160, 13, 50464, 50464, 509, 458, 437, 286, 959, 281, 8460, 30, 50664, 50664, 2205, 2701, 30, 50714, 50714, 286, 360, 959, 17746, 665, 2701, 13, 50814, 50814, 286, 959, 17746, 3487, 13, 50864, 50864, 286, 959, 17746, 3089, 13, 51014, 51014, 400, 286, 959, 17746, 13036, 13, 51114, 51114, 400, 291, 458, 567, 311, 534, 665, 337, 17746, 13036, 30, 51264, 51264, 467, 311, 527, 665, 1277, 7397, 23765, 355, 13, 51364, 51364, 7397, 11, 3231, 337, 5549, 264, 855, 13, 51464, 51464, 876, 11, 587, 13, 51514, 51514, 2561, 337, 1419, 385, 13, 51564, 51564, 663, 311, 1391, 264, 1151, 9339, 321, 600, 1096, 370, 1400, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.20731273123888466, "compression_ratio": 1.78125, "no_caption_prob": 0.2304062396287918}, {"id": 7, "seek": 0, "start": 13.0, "end": 15.0, "text": " And I love generating buzz.", "tokens": [50364, 2425, 11, 508, 2032, 268, 13, 50414, 50414, 2425, 11, 28160, 13, 50464, 50464, 509, 458, 437, 286, 959, 281, 8460, 30, 50664, 50664, 2205, 2701, 30, 50714, 50714, 286, 360, 959, 17746, 665, 2701, 13, 50814, 50814, 286, 959, 17746, 3487, 13, 50864, 50864, 286, 959, 17746, 3089, 13, 51014, 51014, 400, 286, 959, 17746, 13036, 13, 51114, 51114, 400, 291, 458, 567, 311, 534, 665, 337, 17746, 13036, 30, 51264, 51264, 467, 311, 527, 665, 1277, 7397, 23765, 355, 13, 51364, 51364, 7397, 11, 3231, 337, 5549, 264, 855, 13, 51464, 51464, 876, 11, 587, 13, 51514, 51514, 2561, 337, 1419, 385, 13, 51564, 51564, 663, 311, 1391, 264, 1151, 9339, 321, 600, 1096, 370, 1400, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.20731273123888466, "compression_ratio": 1.78125, "no_caption_prob": 0.2304062396287918}, {"id": 8, "seek": 0, "start": 15.0, "end": 18.0, "text": " And you know who's really good for generating buzz?", "tokens": [50364, 2425, 11, 508, 2032, 268, 13, 50414, 50414, 2425, 11, 28160, 13, 50464, 50464, 509, 458, 437, 286, 959, 281, 8460, 30, 50664, 50664, 2205, 2701, 30, 50714, 50714, 286, 360, 959, 17746, 665, 2701, 13, 50814, 50814, 286, 959, 17746, 3487, 13, 50864, 50864, 286, 959, 17746, 3089, 13, 51014, 51014, 400, 286, 959, 17746, 13036, 13, 51114, 51114, 400, 291, 458, 567, 311, 534, 665, 337, 17746, 13036, 30, 51264, 51264, 467, 311, 527, 665, 1277, 7397, 23765, 355, 13, 51364, 51364, 7397, 11, 3231, 337, 5549, 264, 855, 13, 51464, 51464, 876, 11, 587, 13, 51514, 51514, 2561, 337, 1419, 385, 13, 51564, 51564, 663, 311, 1391, 264, 1151, 9339, 321, 600, 1096, 370, 1400, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.20731273123888466, "compression_ratio": 1.78125, "no_caption_prob": 0.2304062396287918}, {"id": 9, "seek": 0, "start": 18.0, "end": 20.0, "text": " It's our good friend Matt Griffith.", "tokens": [50364, 2425, 11, 508, 2032, 268, 13, 50414, 50414, 2425, 11, 28160, 13, 50464, 50464, 509, 458, 437, 286, 959, 281, 8460, 30, 50664, 50664, 2205, 2701, 30, 50714, 50714, 286, 360, 959, 17746, 665, 2701, 13, 50814, 50814, 286, 959, 17746, 3487, 13, 50864, 50864, 286, 959, 17746, 3089, 13, 51014, 51014, 400, 286, 959, 17746, 13036, 13, 51114, 51114, 400, 291, 458, 567, 311, 534, 665, 337, 17746, 13036, 30, 51264, 51264, 467, 311, 527, 665, 1277, 7397, 23765, 355, 13, 51364, 51364, 7397, 11, 3231, 337, 5549, 264, 855, 13, 51464, 51464, 876, 11, 587, 13, 51514, 51514, 2561, 337, 1419, 385, 13, 51564, 51564, 663, 311, 1391, 264, 1151, 9339, 321, 600, 1096, 370, 1400, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.20731273123888466, "compression_ratio": 1.78125, "no_caption_prob": 0.2304062396287918}, {"id": 10, "seek": 0, "start": 20.0, "end": 22.0, "text": " Matt, thanks for joining the show.", "tokens": [50364, 2425, 11, 508, 2032, 268, 13, 50414, 50414, 2425, 11, 28160, 13, 50464, 50464, 509, 458, 437, 286, 959, 281, 8460, 30, 50664, 50664, 2205, 2701, 30, 50714, 50714, 286, 360, 959, 17746, 665, 2701, 13, 50814, 50814, 286, 959, 17746, 3487, 13, 50864, 50864, 286, 959, 17746, 3089, 13, 51014, 51014, 400, 286, 959, 17746, 13036, 13, 51114, 51114, 400, 291, 458, 567, 311, 534, 665, 337, 17746, 13036, 30, 51264, 51264, 467, 311, 527, 665, 1277, 7397, 23765, 355, 13, 51364, 51364, 7397, 11, 3231, 337, 5549, 264, 855, 13, 51464, 51464, 876, 11, 587, 13, 51514, 51514, 2561, 337, 1419, 385, 13, 51564, 51564, 663, 311, 1391, 264, 1151, 9339, 321, 600, 1096, 370, 1400, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.20731273123888466, "compression_ratio": 1.78125, "no_caption_prob": 0.2304062396287918}, {"id": 11, "seek": 0, "start": 22.0, "end": 23.0, "text": " Oh, man.", "tokens": [50364, 2425, 11, 508, 2032, 268, 13, 50414, 50414, 2425, 11, 28160, 13, 50464, 50464, 509, 458, 437, 286, 959, 281, 8460, 30, 50664, 50664, 2205, 2701, 30, 50714, 50714, 286, 360, 959, 17746, 665, 2701, 13, 50814, 50814, 286, 959, 17746, 3487, 13, 50864, 50864, 286, 959, 17746, 3089, 13, 51014, 51014, 400, 286, 959, 17746, 13036, 13, 51114, 51114, 400, 291, 458, 567, 311, 534, 665, 337, 17746, 13036, 30, 51264, 51264, 467, 311, 527, 665, 1277, 7397, 23765, 355, 13, 51364, 51364, 7397, 11, 3231, 337, 5549, 264, 855, 13, 51464, 51464, 876, 11, 587, 13, 51514, 51514, 2561, 337, 1419, 385, 13, 51564, 51564, 663, 311, 1391, 264, 1151, 9339, 321, 600, 1096, 370, 1400, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.20731273123888466, "compression_ratio": 1.78125, "no_caption_prob": 0.2304062396287918}, {"id": 12, "seek": 0, "start": 23.0, "end": 24.0, "text": " Thanks for having me.", "tokens": [50364, 2425, 11, 508, 2032, 268, 13, 50414, 50414, 2425, 11, 28160, 13, 50464, 50464, 509, 458, 437, 286, 959, 281, 8460, 30, 50664, 50664, 2205, 2701, 30, 50714, 50714, 286, 360, 959, 17746, 665, 2701, 13, 50814, 50814, 286, 959, 17746, 3487, 13, 50864, 50864, 286, 959, 17746, 3089, 13, 51014, 51014, 400, 286, 959, 17746, 13036, 13, 51114, 51114, 400, 291, 458, 567, 311, 534, 665, 337, 17746, 13036, 30, 51264, 51264, 467, 311, 527, 665, 1277, 7397, 23765, 355, 13, 51364, 51364, 7397, 11, 3231, 337, 5549, 264, 855, 13, 51464, 51464, 876, 11, 587, 13, 51514, 51514, 2561, 337, 1419, 385, 13, 51564, 51564, 663, 311, 1391, 264, 1151, 9339, 321, 600, 1096, 370, 1400, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.20731273123888466, "compression_ratio": 1.78125, "no_caption_prob": 0.2304062396287918}, {"id": 13, "seek": 0, "start": 24.0, "end": 28.0, "text": " That's probably the best introduction we've done so far.", "tokens": [50364, 2425, 11, 508, 2032, 268, 13, 50414, 50414, 2425, 11, 28160, 13, 50464, 50464, 509, 458, 437, 286, 959, 281, 8460, 30, 50664, 50664, 2205, 2701, 30, 50714, 50714, 286, 360, 959, 17746, 665, 2701, 13, 50814, 50814, 286, 959, 17746, 3487, 13, 50864, 50864, 286, 959, 17746, 3089, 13, 51014, 51014, 400, 286, 959, 17746, 13036, 13, 51114, 51114, 400, 291, 458, 567, 311, 534, 665, 337, 17746, 13036, 30, 51264, 51264, 467, 311, 527, 665, 1277, 7397, 23765, 355, 13, 51364, 51364, 7397, 11, 3231, 337, 5549, 264, 855, 13, 51464, 51464, 876, 11, 587, 13, 51514, 51514, 2561, 337, 1419, 385, 13, 51564, 51564, 663, 311, 1391, 264, 1151, 9339, 321, 600, 1096, 370, 1400, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.20731273123888466, "compression_ratio": 1.78125, "no_caption_prob": 0.2304062396287918}, {"id": 14, "seek": 2800, "start": 28.0, "end": 30.0, "text": " That was pretty good.", "tokens": [50364, 663, 390, 1238, 665, 13, 50464, 50464, 865, 11, 309, 630, 406, 352, 689, 286, 1194, 309, 390, 516, 281, 352, 13, 50564, 50564, 663, 311, 869, 13, 50664, 50664, 7497, 264, 10000, 1469, 1767, 909, 25474, 293, 49282, 281, 485, 50864, 50864, 865, 11, 558, 13, 50914, 50914, 1743, 11, 15301, 294, 264, 3678, 13, 51014, 51014, 7021, 13, 51164, 51164, 7397, 11, 286, 519, 341, 307, 257, 938, 565, 1348, 13, 51314, 51314, 492, 600, 632, 291, 322, 337, 512, 1216, 855, 9313, 11, 457, 406, 337, 257, 4829, 13, 51614, 51614, 407, 510, 321, 366, 13, 51714, 51714, 865, 11, 510, 321, 352, 13, 51764, 51764, 286, 478, 2919, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.09374616900060931, "compression_ratio": 1.5252100840336134, "no_caption_prob": 0.0003004420723300427}, {"id": 15, "seek": 2800, "start": 30.0, "end": 32.0, "text": " Yeah, it did not go where I thought it was going to go.", "tokens": [50364, 663, 390, 1238, 665, 13, 50464, 50464, 865, 11, 309, 630, 406, 352, 689, 286, 1194, 309, 390, 516, 281, 352, 13, 50564, 50564, 663, 311, 869, 13, 50664, 50664, 7497, 264, 10000, 1469, 1767, 909, 25474, 293, 49282, 281, 485, 50864, 50864, 865, 11, 558, 13, 50914, 50914, 1743, 11, 15301, 294, 264, 3678, 13, 51014, 51014, 7021, 13, 51164, 51164, 7397, 11, 286, 519, 341, 307, 257, 938, 565, 1348, 13, 51314, 51314, 492, 600, 632, 291, 322, 337, 512, 1216, 855, 9313, 11, 457, 406, 337, 257, 4829, 13, 51614, 51614, 407, 510, 321, 366, 13, 51714, 51714, 865, 11, 510, 321, 352, 13, 51764, 51764, 286, 478, 2919, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.09374616900060931, "compression_ratio": 1.5252100840336134, "no_caption_prob": 0.0003004420723300427}, {"id": 16, "seek": 2800, "start": 32.0, "end": 34.0, "text": " That's great.", "tokens": [50364, 663, 390, 1238, 665, 13, 50464, 50464, 865, 11, 309, 630, 406, 352, 689, 286, 1194, 309, 390, 516, 281, 352, 13, 50564, 50564, 663, 311, 869, 13, 50664, 50664, 7497, 264, 10000, 1469, 1767, 909, 25474, 293, 49282, 281, 485, 50864, 50864, 865, 11, 558, 13, 50914, 50914, 1743, 11, 15301, 294, 264, 3678, 13, 51014, 51014, 7021, 13, 51164, 51164, 7397, 11, 286, 519, 341, 307, 257, 938, 565, 1348, 13, 51314, 51314, 492, 600, 632, 291, 322, 337, 512, 1216, 855, 9313, 11, 457, 406, 337, 257, 4829, 13, 51614, 51614, 407, 510, 321, 366, 13, 51714, 51714, 865, 11, 510, 321, 352, 13, 51764, 51764, 286, 478, 2919, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.09374616900060931, "compression_ratio": 1.5252100840336134, "no_caption_prob": 0.0003004420723300427}, {"id": 17, "seek": 2800, "start": 34.0, "end": 38.0, "text": " Could the editing team please add bells and whistles to...", "tokens": [50364, 663, 390, 1238, 665, 13, 50464, 50464, 865, 11, 309, 630, 406, 352, 689, 286, 1194, 309, 390, 516, 281, 352, 13, 50564, 50564, 663, 311, 869, 13, 50664, 50664, 7497, 264, 10000, 1469, 1767, 909, 25474, 293, 49282, 281, 485, 50864, 50864, 865, 11, 558, 13, 50914, 50914, 1743, 11, 15301, 294, 264, 3678, 13, 51014, 51014, 7021, 13, 51164, 51164, 7397, 11, 286, 519, 341, 307, 257, 938, 565, 1348, 13, 51314, 51314, 492, 600, 632, 291, 322, 337, 512, 1216, 855, 9313, 11, 457, 406, 337, 257, 4829, 13, 51614, 51614, 407, 510, 321, 366, 13, 51714, 51714, 865, 11, 510, 321, 352, 13, 51764, 51764, 286, 478, 2919, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.09374616900060931, "compression_ratio": 1.5252100840336134, "no_caption_prob": 0.0003004420723300427}, {"id": 18, "seek": 2800, "start": 38.0, "end": 39.0, "text": " Yeah, right.", "tokens": [50364, 663, 390, 1238, 665, 13, 50464, 50464, 865, 11, 309, 630, 406, 352, 689, 286, 1194, 309, 390, 516, 281, 352, 13, 50564, 50564, 663, 311, 869, 13, 50664, 50664, 7497, 264, 10000, 1469, 1767, 909, 25474, 293, 49282, 281, 485, 50864, 50864, 865, 11, 558, 13, 50914, 50914, 1743, 11, 15301, 294, 264, 3678, 13, 51014, 51014, 7021, 13, 51164, 51164, 7397, 11, 286, 519, 341, 307, 257, 938, 565, 1348, 13, 51314, 51314, 492, 600, 632, 291, 322, 337, 512, 1216, 855, 9313, 11, 457, 406, 337, 257, 4829, 13, 51614, 51614, 407, 510, 321, 366, 13, 51714, 51714, 865, 11, 510, 321, 352, 13, 51764, 51764, 286, 478, 2919, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.09374616900060931, "compression_ratio": 1.5252100840336134, "no_caption_prob": 0.0003004420723300427}, {"id": 19, "seek": 2800, "start": 39.0, "end": 41.0, "text": " Like, cheers in the background.", "tokens": [50364, 663, 390, 1238, 665, 13, 50464, 50464, 865, 11, 309, 630, 406, 352, 689, 286, 1194, 309, 390, 516, 281, 352, 13, 50564, 50564, 663, 311, 869, 13, 50664, 50664, 7497, 264, 10000, 1469, 1767, 909, 25474, 293, 49282, 281, 485, 50864, 50864, 865, 11, 558, 13, 50914, 50914, 1743, 11, 15301, 294, 264, 3678, 13, 51014, 51014, 7021, 13, 51164, 51164, 7397, 11, 286, 519, 341, 307, 257, 938, 565, 1348, 13, 51314, 51314, 492, 600, 632, 291, 322, 337, 512, 1216, 855, 9313, 11, 457, 406, 337, 257, 4829, 13, 51614, 51614, 407, 510, 321, 366, 13, 51714, 51714, 865, 11, 510, 321, 352, 13, 51764, 51764, 286, 478, 2919, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.09374616900060931, "compression_ratio": 1.5252100840336134, "no_caption_prob": 0.0003004420723300427}, {"id": 20, "seek": 2800, "start": 41.0, "end": 44.0, "text": " Absolutely.", "tokens": [50364, 663, 390, 1238, 665, 13, 50464, 50464, 865, 11, 309, 630, 406, 352, 689, 286, 1194, 309, 390, 516, 281, 352, 13, 50564, 50564, 663, 311, 869, 13, 50664, 50664, 7497, 264, 10000, 1469, 1767, 909, 25474, 293, 49282, 281, 485, 50864, 50864, 865, 11, 558, 13, 50914, 50914, 1743, 11, 15301, 294, 264, 3678, 13, 51014, 51014, 7021, 13, 51164, 51164, 7397, 11, 286, 519, 341, 307, 257, 938, 565, 1348, 13, 51314, 51314, 492, 600, 632, 291, 322, 337, 512, 1216, 855, 9313, 11, 457, 406, 337, 257, 4829, 13, 51614, 51614, 407, 510, 321, 366, 13, 51714, 51714, 865, 11, 510, 321, 352, 13, 51764, 51764, 286, 478, 2919, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.09374616900060931, "compression_ratio": 1.5252100840336134, "no_caption_prob": 0.0003004420723300427}, {"id": 21, "seek": 2800, "start": 44.0, "end": 47.0, "text": " Matt, I think this is a long time coming.", "tokens": [50364, 663, 390, 1238, 665, 13, 50464, 50464, 865, 11, 309, 630, 406, 352, 689, 286, 1194, 309, 390, 516, 281, 352, 13, 50564, 50564, 663, 311, 869, 13, 50664, 50664, 7497, 264, 10000, 1469, 1767, 909, 25474, 293, 49282, 281, 485, 50864, 50864, 865, 11, 558, 13, 50914, 50914, 1743, 11, 15301, 294, 264, 3678, 13, 51014, 51014, 7021, 13, 51164, 51164, 7397, 11, 286, 519, 341, 307, 257, 938, 565, 1348, 13, 51314, 51314, 492, 600, 632, 291, 322, 337, 512, 1216, 855, 9313, 11, 457, 406, 337, 257, 4829, 13, 51614, 51614, 407, 510, 321, 366, 13, 51714, 51714, 865, 11, 510, 321, 352, 13, 51764, 51764, 286, 478, 2919, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.09374616900060931, "compression_ratio": 1.5252100840336134, "no_caption_prob": 0.0003004420723300427}, {"id": 22, "seek": 2800, "start": 47.0, "end": 53.0, "text": " We've had you on for some game show episodes, but not for a topic.", "tokens": [50364, 663, 390, 1238, 665, 13, 50464, 50464, 865, 11, 309, 630, 406, 352, 689, 286, 1194, 309, 390, 516, 281, 352, 13, 50564, 50564, 663, 311, 869, 13, 50664, 50664, 7497, 264, 10000, 1469, 1767, 909, 25474, 293, 49282, 281, 485, 50864, 50864, 865, 11, 558, 13, 50914, 50914, 1743, 11, 15301, 294, 264, 3678, 13, 51014, 51014, 7021, 13, 51164, 51164, 7397, 11, 286, 519, 341, 307, 257, 938, 565, 1348, 13, 51314, 51314, 492, 600, 632, 291, 322, 337, 512, 1216, 855, 9313, 11, 457, 406, 337, 257, 4829, 13, 51614, 51614, 407, 510, 321, 366, 13, 51714, 51714, 865, 11, 510, 321, 352, 13, 51764, 51764, 286, 478, 2919, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.09374616900060931, "compression_ratio": 1.5252100840336134, "no_caption_prob": 0.0003004420723300427}, {"id": 23, "seek": 2800, "start": 53.0, "end": 55.0, "text": " So here we are.", "tokens": [50364, 663, 390, 1238, 665, 13, 50464, 50464, 865, 11, 309, 630, 406, 352, 689, 286, 1194, 309, 390, 516, 281, 352, 13, 50564, 50564, 663, 311, 869, 13, 50664, 50664, 7497, 264, 10000, 1469, 1767, 909, 25474, 293, 49282, 281, 485, 50864, 50864, 865, 11, 558, 13, 50914, 50914, 1743, 11, 15301, 294, 264, 3678, 13, 51014, 51014, 7021, 13, 51164, 51164, 7397, 11, 286, 519, 341, 307, 257, 938, 565, 1348, 13, 51314, 51314, 492, 600, 632, 291, 322, 337, 512, 1216, 855, 9313, 11, 457, 406, 337, 257, 4829, 13, 51614, 51614, 407, 510, 321, 366, 13, 51714, 51714, 865, 11, 510, 321, 352, 13, 51764, 51764, 286, 478, 2919, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.09374616900060931, "compression_ratio": 1.5252100840336134, "no_caption_prob": 0.0003004420723300427}, {"id": 24, "seek": 2800, "start": 55.0, "end": 56.0, "text": " Yeah, here we go.", "tokens": [50364, 663, 390, 1238, 665, 13, 50464, 50464, 865, 11, 309, 630, 406, 352, 689, 286, 1194, 309, 390, 516, 281, 352, 13, 50564, 50564, 663, 311, 869, 13, 50664, 50664, 7497, 264, 10000, 1469, 1767, 909, 25474, 293, 49282, 281, 485, 50864, 50864, 865, 11, 558, 13, 50914, 50914, 1743, 11, 15301, 294, 264, 3678, 13, 51014, 51014, 7021, 13, 51164, 51164, 7397, 11, 286, 519, 341, 307, 257, 938, 565, 1348, 13, 51314, 51314, 492, 600, 632, 291, 322, 337, 512, 1216, 855, 9313, 11, 457, 406, 337, 257, 4829, 13, 51614, 51614, 407, 510, 321, 366, 13, 51714, 51714, 865, 11, 510, 321, 352, 13, 51764, 51764, 286, 478, 2919, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.09374616900060931, "compression_ratio": 1.5252100840336134, "no_caption_prob": 0.0003004420723300427}, {"id": 25, "seek": 2800, "start": 56.0, "end": 57.0, "text": " I'm excited.", "tokens": [50364, 663, 390, 1238, 665, 13, 50464, 50464, 865, 11, 309, 630, 406, 352, 689, 286, 1194, 309, 390, 516, 281, 352, 13, 50564, 50564, 663, 311, 869, 13, 50664, 50664, 7497, 264, 10000, 1469, 1767, 909, 25474, 293, 49282, 281, 485, 50864, 50864, 865, 11, 558, 13, 50914, 50914, 1743, 11, 15301, 294, 264, 3678, 13, 51014, 51014, 7021, 13, 51164, 51164, 7397, 11, 286, 519, 341, 307, 257, 938, 565, 1348, 13, 51314, 51314, 492, 600, 632, 291, 322, 337, 512, 1216, 855, 9313, 11, 457, 406, 337, 257, 4829, 13, 51614, 51614, 407, 510, 321, 366, 13, 51714, 51714, 865, 11, 510, 321, 352, 13, 51764, 51764, 286, 478, 2919, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.09374616900060931, "compression_ratio": 1.5252100840336134, "no_caption_prob": 0.0003004420723300427}, {"id": 26, "seek": 5700, "start": 57.0, "end": 58.0, "text": " Yeah, I'm glad to be here.", "tokens": [50364, 865, 11, 286, 478, 5404, 281, 312, 510, 13, 50414, 50414, 639, 307, 3476, 13, 50464, 50464, 865, 11, 286, 478, 2919, 466, 428, 21263, 278, 484, 512, 4455, 558, 586, 13, 50814, 50814, 407, 437, 366, 321, 1417, 466, 965, 30, 50914, 50914, 865, 11, 456, 311, 668, 257, 688, 322, 264, 646, 36116, 337, 257, 938, 565, 13, 51014, 51014, 407, 586, 309, 311, 411, 11, 1392, 11, 565, 281, 483, 552, 484, 13, 51164, 51164, 1743, 11, 718, 311, 360, 341, 13, 51264, 51264, 1079, 13, 51314, 51314, 865, 13, 51364, 51364, 407, 437, 366, 321, 1417, 466, 965, 30, 51414, 51414, 865, 11, 718, 311, 751, 466, 309, 13, 51514, 51514, 492, 366, 1417, 466, 2699, 76, 15549, 26647, 11, 597, 307, 264, 700, 295, 613, 4455, 51714, 51714, 300, 2203, 281, 483, 484, 456, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.08021807008319431, "compression_ratio": 1.8211382113821137, "no_caption_prob": 8.613250247435644e-05}, {"id": 27, "seek": 5700, "start": 58.0, "end": 59.0, "text": " This is awesome.", "tokens": [50364, 865, 11, 286, 478, 5404, 281, 312, 510, 13, 50414, 50414, 639, 307, 3476, 13, 50464, 50464, 865, 11, 286, 478, 2919, 466, 428, 21263, 278, 484, 512, 4455, 558, 586, 13, 50814, 50814, 407, 437, 366, 321, 1417, 466, 965, 30, 50914, 50914, 865, 11, 456, 311, 668, 257, 688, 322, 264, 646, 36116, 337, 257, 938, 565, 13, 51014, 51014, 407, 586, 309, 311, 411, 11, 1392, 11, 565, 281, 483, 552, 484, 13, 51164, 51164, 1743, 11, 718, 311, 360, 341, 13, 51264, 51264, 1079, 13, 51314, 51314, 865, 13, 51364, 51364, 407, 437, 366, 321, 1417, 466, 965, 30, 51414, 51414, 865, 11, 718, 311, 751, 466, 309, 13, 51514, 51514, 492, 366, 1417, 466, 2699, 76, 15549, 26647, 11, 597, 307, 264, 700, 295, 613, 4455, 51714, 51714, 300, 2203, 281, 483, 484, 456, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.08021807008319431, "compression_ratio": 1.8211382113821137, "no_caption_prob": 8.613250247435644e-05}, {"id": 28, "seek": 5700, "start": 59.0, "end": 66.0, "text": " Yeah, I'm excited about your cranking out some projects right now.", "tokens": [50364, 865, 11, 286, 478, 5404, 281, 312, 510, 13, 50414, 50414, 639, 307, 3476, 13, 50464, 50464, 865, 11, 286, 478, 2919, 466, 428, 21263, 278, 484, 512, 4455, 558, 586, 13, 50814, 50814, 407, 437, 366, 321, 1417, 466, 965, 30, 50914, 50914, 865, 11, 456, 311, 668, 257, 688, 322, 264, 646, 36116, 337, 257, 938, 565, 13, 51014, 51014, 407, 586, 309, 311, 411, 11, 1392, 11, 565, 281, 483, 552, 484, 13, 51164, 51164, 1743, 11, 718, 311, 360, 341, 13, 51264, 51264, 1079, 13, 51314, 51314, 865, 13, 51364, 51364, 407, 437, 366, 321, 1417, 466, 965, 30, 51414, 51414, 865, 11, 718, 311, 751, 466, 309, 13, 51514, 51514, 492, 366, 1417, 466, 2699, 76, 15549, 26647, 11, 597, 307, 264, 700, 295, 613, 4455, 51714, 51714, 300, 2203, 281, 483, 484, 456, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.08021807008319431, "compression_ratio": 1.8211382113821137, "no_caption_prob": 8.613250247435644e-05}, {"id": 29, "seek": 5700, "start": 66.0, "end": 68.0, "text": " So what are we talking about today?", "tokens": [50364, 865, 11, 286, 478, 5404, 281, 312, 510, 13, 50414, 50414, 639, 307, 3476, 13, 50464, 50464, 865, 11, 286, 478, 2919, 466, 428, 21263, 278, 484, 512, 4455, 558, 586, 13, 50814, 50814, 407, 437, 366, 321, 1417, 466, 965, 30, 50914, 50914, 865, 11, 456, 311, 668, 257, 688, 322, 264, 646, 36116, 337, 257, 938, 565, 13, 51014, 51014, 407, 586, 309, 311, 411, 11, 1392, 11, 565, 281, 483, 552, 484, 13, 51164, 51164, 1743, 11, 718, 311, 360, 341, 13, 51264, 51264, 1079, 13, 51314, 51314, 865, 13, 51364, 51364, 407, 437, 366, 321, 1417, 466, 965, 30, 51414, 51414, 865, 11, 718, 311, 751, 466, 309, 13, 51514, 51514, 492, 366, 1417, 466, 2699, 76, 15549, 26647, 11, 597, 307, 264, 700, 295, 613, 4455, 51714, 51714, 300, 2203, 281, 483, 484, 456, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.08021807008319431, "compression_ratio": 1.8211382113821137, "no_caption_prob": 8.613250247435644e-05}, {"id": 30, "seek": 5700, "start": 68.0, "end": 70.0, "text": " Yeah, there's been a lot on the back burner for a long time.", "tokens": [50364, 865, 11, 286, 478, 5404, 281, 312, 510, 13, 50414, 50414, 639, 307, 3476, 13, 50464, 50464, 865, 11, 286, 478, 2919, 466, 428, 21263, 278, 484, 512, 4455, 558, 586, 13, 50814, 50814, 407, 437, 366, 321, 1417, 466, 965, 30, 50914, 50914, 865, 11, 456, 311, 668, 257, 688, 322, 264, 646, 36116, 337, 257, 938, 565, 13, 51014, 51014, 407, 586, 309, 311, 411, 11, 1392, 11, 565, 281, 483, 552, 484, 13, 51164, 51164, 1743, 11, 718, 311, 360, 341, 13, 51264, 51264, 1079, 13, 51314, 51314, 865, 13, 51364, 51364, 407, 437, 366, 321, 1417, 466, 965, 30, 51414, 51414, 865, 11, 718, 311, 751, 466, 309, 13, 51514, 51514, 492, 366, 1417, 466, 2699, 76, 15549, 26647, 11, 597, 307, 264, 700, 295, 613, 4455, 51714, 51714, 300, 2203, 281, 483, 484, 456, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.08021807008319431, "compression_ratio": 1.8211382113821137, "no_caption_prob": 8.613250247435644e-05}, {"id": 31, "seek": 5700, "start": 70.0, "end": 73.0, "text": " So now it's like, okay, time to get them out.", "tokens": [50364, 865, 11, 286, 478, 5404, 281, 312, 510, 13, 50414, 50414, 639, 307, 3476, 13, 50464, 50464, 865, 11, 286, 478, 2919, 466, 428, 21263, 278, 484, 512, 4455, 558, 586, 13, 50814, 50814, 407, 437, 366, 321, 1417, 466, 965, 30, 50914, 50914, 865, 11, 456, 311, 668, 257, 688, 322, 264, 646, 36116, 337, 257, 938, 565, 13, 51014, 51014, 407, 586, 309, 311, 411, 11, 1392, 11, 565, 281, 483, 552, 484, 13, 51164, 51164, 1743, 11, 718, 311, 360, 341, 13, 51264, 51264, 1079, 13, 51314, 51314, 865, 13, 51364, 51364, 407, 437, 366, 321, 1417, 466, 965, 30, 51414, 51414, 865, 11, 718, 311, 751, 466, 309, 13, 51514, 51514, 492, 366, 1417, 466, 2699, 76, 15549, 26647, 11, 597, 307, 264, 700, 295, 613, 4455, 51714, 51714, 300, 2203, 281, 483, 484, 456, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.08021807008319431, "compression_ratio": 1.8211382113821137, "no_caption_prob": 8.613250247435644e-05}, {"id": 32, "seek": 5700, "start": 73.0, "end": 75.0, "text": " Like, let's do this.", "tokens": [50364, 865, 11, 286, 478, 5404, 281, 312, 510, 13, 50414, 50414, 639, 307, 3476, 13, 50464, 50464, 865, 11, 286, 478, 2919, 466, 428, 21263, 278, 484, 512, 4455, 558, 586, 13, 50814, 50814, 407, 437, 366, 321, 1417, 466, 965, 30, 50914, 50914, 865, 11, 456, 311, 668, 257, 688, 322, 264, 646, 36116, 337, 257, 938, 565, 13, 51014, 51014, 407, 586, 309, 311, 411, 11, 1392, 11, 565, 281, 483, 552, 484, 13, 51164, 51164, 1743, 11, 718, 311, 360, 341, 13, 51264, 51264, 1079, 13, 51314, 51314, 865, 13, 51364, 51364, 407, 437, 366, 321, 1417, 466, 965, 30, 51414, 51414, 865, 11, 718, 311, 751, 466, 309, 13, 51514, 51514, 492, 366, 1417, 466, 2699, 76, 15549, 26647, 11, 597, 307, 264, 700, 295, 613, 4455, 51714, 51714, 300, 2203, 281, 483, 484, 456, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.08021807008319431, "compression_ratio": 1.8211382113821137, "no_caption_prob": 8.613250247435644e-05}, {"id": 33, "seek": 5700, "start": 75.0, "end": 76.0, "text": " Yes.", "tokens": [50364, 865, 11, 286, 478, 5404, 281, 312, 510, 13, 50414, 50414, 639, 307, 3476, 13, 50464, 50464, 865, 11, 286, 478, 2919, 466, 428, 21263, 278, 484, 512, 4455, 558, 586, 13, 50814, 50814, 407, 437, 366, 321, 1417, 466, 965, 30, 50914, 50914, 865, 11, 456, 311, 668, 257, 688, 322, 264, 646, 36116, 337, 257, 938, 565, 13, 51014, 51014, 407, 586, 309, 311, 411, 11, 1392, 11, 565, 281, 483, 552, 484, 13, 51164, 51164, 1743, 11, 718, 311, 360, 341, 13, 51264, 51264, 1079, 13, 51314, 51314, 865, 13, 51364, 51364, 407, 437, 366, 321, 1417, 466, 965, 30, 51414, 51414, 865, 11, 718, 311, 751, 466, 309, 13, 51514, 51514, 492, 366, 1417, 466, 2699, 76, 15549, 26647, 11, 597, 307, 264, 700, 295, 613, 4455, 51714, 51714, 300, 2203, 281, 483, 484, 456, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.08021807008319431, "compression_ratio": 1.8211382113821137, "no_caption_prob": 8.613250247435644e-05}, {"id": 34, "seek": 5700, "start": 76.0, "end": 77.0, "text": " Yeah.", "tokens": [50364, 865, 11, 286, 478, 5404, 281, 312, 510, 13, 50414, 50414, 639, 307, 3476, 13, 50464, 50464, 865, 11, 286, 478, 2919, 466, 428, 21263, 278, 484, 512, 4455, 558, 586, 13, 50814, 50814, 407, 437, 366, 321, 1417, 466, 965, 30, 50914, 50914, 865, 11, 456, 311, 668, 257, 688, 322, 264, 646, 36116, 337, 257, 938, 565, 13, 51014, 51014, 407, 586, 309, 311, 411, 11, 1392, 11, 565, 281, 483, 552, 484, 13, 51164, 51164, 1743, 11, 718, 311, 360, 341, 13, 51264, 51264, 1079, 13, 51314, 51314, 865, 13, 51364, 51364, 407, 437, 366, 321, 1417, 466, 965, 30, 51414, 51414, 865, 11, 718, 311, 751, 466, 309, 13, 51514, 51514, 492, 366, 1417, 466, 2699, 76, 15549, 26647, 11, 597, 307, 264, 700, 295, 613, 4455, 51714, 51714, 300, 2203, 281, 483, 484, 456, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.08021807008319431, "compression_ratio": 1.8211382113821137, "no_caption_prob": 8.613250247435644e-05}, {"id": 35, "seek": 5700, "start": 77.0, "end": 78.0, "text": " So what are we talking about today?", "tokens": [50364, 865, 11, 286, 478, 5404, 281, 312, 510, 13, 50414, 50414, 639, 307, 3476, 13, 50464, 50464, 865, 11, 286, 478, 2919, 466, 428, 21263, 278, 484, 512, 4455, 558, 586, 13, 50814, 50814, 407, 437, 366, 321, 1417, 466, 965, 30, 50914, 50914, 865, 11, 456, 311, 668, 257, 688, 322, 264, 646, 36116, 337, 257, 938, 565, 13, 51014, 51014, 407, 586, 309, 311, 411, 11, 1392, 11, 565, 281, 483, 552, 484, 13, 51164, 51164, 1743, 11, 718, 311, 360, 341, 13, 51264, 51264, 1079, 13, 51314, 51314, 865, 13, 51364, 51364, 407, 437, 366, 321, 1417, 466, 965, 30, 51414, 51414, 865, 11, 718, 311, 751, 466, 309, 13, 51514, 51514, 492, 366, 1417, 466, 2699, 76, 15549, 26647, 11, 597, 307, 264, 700, 295, 613, 4455, 51714, 51714, 300, 2203, 281, 483, 484, 456, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.08021807008319431, "compression_ratio": 1.8211382113821137, "no_caption_prob": 8.613250247435644e-05}, {"id": 36, "seek": 5700, "start": 78.0, "end": 80.0, "text": " Yeah, let's talk about it.", "tokens": [50364, 865, 11, 286, 478, 5404, 281, 312, 510, 13, 50414, 50414, 639, 307, 3476, 13, 50464, 50464, 865, 11, 286, 478, 2919, 466, 428, 21263, 278, 484, 512, 4455, 558, 586, 13, 50814, 50814, 407, 437, 366, 321, 1417, 466, 965, 30, 50914, 50914, 865, 11, 456, 311, 668, 257, 688, 322, 264, 646, 36116, 337, 257, 938, 565, 13, 51014, 51014, 407, 586, 309, 311, 411, 11, 1392, 11, 565, 281, 483, 552, 484, 13, 51164, 51164, 1743, 11, 718, 311, 360, 341, 13, 51264, 51264, 1079, 13, 51314, 51314, 865, 13, 51364, 51364, 407, 437, 366, 321, 1417, 466, 965, 30, 51414, 51414, 865, 11, 718, 311, 751, 466, 309, 13, 51514, 51514, 492, 366, 1417, 466, 2699, 76, 15549, 26647, 11, 597, 307, 264, 700, 295, 613, 4455, 51714, 51714, 300, 2203, 281, 483, 484, 456, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.08021807008319431, "compression_ratio": 1.8211382113821137, "no_caption_prob": 8.613250247435644e-05}, {"id": 37, "seek": 5700, "start": 80.0, "end": 84.0, "text": " We are talking about Elm CodeGen, which is the first of these projects", "tokens": [50364, 865, 11, 286, 478, 5404, 281, 312, 510, 13, 50414, 50414, 639, 307, 3476, 13, 50464, 50464, 865, 11, 286, 478, 2919, 466, 428, 21263, 278, 484, 512, 4455, 558, 586, 13, 50814, 50814, 407, 437, 366, 321, 1417, 466, 965, 30, 50914, 50914, 865, 11, 456, 311, 668, 257, 688, 322, 264, 646, 36116, 337, 257, 938, 565, 13, 51014, 51014, 407, 586, 309, 311, 411, 11, 1392, 11, 565, 281, 483, 552, 484, 13, 51164, 51164, 1743, 11, 718, 311, 360, 341, 13, 51264, 51264, 1079, 13, 51314, 51314, 865, 13, 51364, 51364, 407, 437, 366, 321, 1417, 466, 965, 30, 51414, 51414, 865, 11, 718, 311, 751, 466, 309, 13, 51514, 51514, 492, 366, 1417, 466, 2699, 76, 15549, 26647, 11, 597, 307, 264, 700, 295, 613, 4455, 51714, 51714, 300, 2203, 281, 483, 484, 456, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.08021807008319431, "compression_ratio": 1.8211382113821137, "no_caption_prob": 8.613250247435644e-05}, {"id": 38, "seek": 5700, "start": 84.0, "end": 86.0, "text": " that needs to get out there.", "tokens": [50364, 865, 11, 286, 478, 5404, 281, 312, 510, 13, 50414, 50414, 639, 307, 3476, 13, 50464, 50464, 865, 11, 286, 478, 2919, 466, 428, 21263, 278, 484, 512, 4455, 558, 586, 13, 50814, 50814, 407, 437, 366, 321, 1417, 466, 965, 30, 50914, 50914, 865, 11, 456, 311, 668, 257, 688, 322, 264, 646, 36116, 337, 257, 938, 565, 13, 51014, 51014, 407, 586, 309, 311, 411, 11, 1392, 11, 565, 281, 483, 552, 484, 13, 51164, 51164, 1743, 11, 718, 311, 360, 341, 13, 51264, 51264, 1079, 13, 51314, 51314, 865, 13, 51364, 51364, 407, 437, 366, 321, 1417, 466, 965, 30, 51414, 51414, 865, 11, 718, 311, 751, 466, 309, 13, 51514, 51514, 492, 366, 1417, 466, 2699, 76, 15549, 26647, 11, 597, 307, 264, 700, 295, 613, 4455, 51714, 51714, 300, 2203, 281, 483, 484, 456, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.08021807008319431, "compression_ratio": 1.8211382113821137, "no_caption_prob": 8.613250247435644e-05}, {"id": 39, "seek": 8600, "start": 86.0, "end": 90.0, "text": " Yeah, shall I give like a high level overview of what it does?", "tokens": [50364, 865, 11, 4393, 286, 976, 411, 257, 1090, 1496, 12492, 295, 437, 309, 775, 30, 50564, 50564, 865, 11, 300, 576, 312, 7103, 13, 50614, 50614, 708, 264, 12872, 307, 309, 30, 50714, 50714, 865, 11, 370, 2699, 76, 15549, 26647, 13, 50764, 50764, 467, 311, 732, 721, 11, 767, 13, 50864, 50864, 407, 309, 311, 257, 5622, 1622, 2290, 11, 558, 30, 50964, 50964, 400, 309, 311, 611, 364, 2699, 76, 6405, 11, 293, 291, 393, 764, 2139, 295, 552, 13, 51164, 51164, 400, 4476, 437, 286, 1415, 307, 286, 1415, 746, 281, 8460, 2699, 76, 3089, 51414, 51414, 300, 390, 544, 10851, 813, 6798, 21165, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.0902995118149766, "compression_ratio": 1.5614754098360655, "no_caption_prob": 5.306709135766141e-05}, {"id": 40, "seek": 8600, "start": 90.0, "end": 91.0, "text": " Yeah, that would be excellent.", "tokens": [50364, 865, 11, 4393, 286, 976, 411, 257, 1090, 1496, 12492, 295, 437, 309, 775, 30, 50564, 50564, 865, 11, 300, 576, 312, 7103, 13, 50614, 50614, 708, 264, 12872, 307, 309, 30, 50714, 50714, 865, 11, 370, 2699, 76, 15549, 26647, 13, 50764, 50764, 467, 311, 732, 721, 11, 767, 13, 50864, 50864, 407, 309, 311, 257, 5622, 1622, 2290, 11, 558, 30, 50964, 50964, 400, 309, 311, 611, 364, 2699, 76, 6405, 11, 293, 291, 393, 764, 2139, 295, 552, 13, 51164, 51164, 400, 4476, 437, 286, 1415, 307, 286, 1415, 746, 281, 8460, 2699, 76, 3089, 51414, 51414, 300, 390, 544, 10851, 813, 6798, 21165, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.0902995118149766, "compression_ratio": 1.5614754098360655, "no_caption_prob": 5.306709135766141e-05}, {"id": 41, "seek": 8600, "start": 91.0, "end": 93.0, "text": " What the heck is it?", "tokens": [50364, 865, 11, 4393, 286, 976, 411, 257, 1090, 1496, 12492, 295, 437, 309, 775, 30, 50564, 50564, 865, 11, 300, 576, 312, 7103, 13, 50614, 50614, 708, 264, 12872, 307, 309, 30, 50714, 50714, 865, 11, 370, 2699, 76, 15549, 26647, 13, 50764, 50764, 467, 311, 732, 721, 11, 767, 13, 50864, 50864, 407, 309, 311, 257, 5622, 1622, 2290, 11, 558, 30, 50964, 50964, 400, 309, 311, 611, 364, 2699, 76, 6405, 11, 293, 291, 393, 764, 2139, 295, 552, 13, 51164, 51164, 400, 4476, 437, 286, 1415, 307, 286, 1415, 746, 281, 8460, 2699, 76, 3089, 51414, 51414, 300, 390, 544, 10851, 813, 6798, 21165, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.0902995118149766, "compression_ratio": 1.5614754098360655, "no_caption_prob": 5.306709135766141e-05}, {"id": 42, "seek": 8600, "start": 93.0, "end": 94.0, "text": " Yeah, so Elm CodeGen.", "tokens": [50364, 865, 11, 4393, 286, 976, 411, 257, 1090, 1496, 12492, 295, 437, 309, 775, 30, 50564, 50564, 865, 11, 300, 576, 312, 7103, 13, 50614, 50614, 708, 264, 12872, 307, 309, 30, 50714, 50714, 865, 11, 370, 2699, 76, 15549, 26647, 13, 50764, 50764, 467, 311, 732, 721, 11, 767, 13, 50864, 50864, 407, 309, 311, 257, 5622, 1622, 2290, 11, 558, 30, 50964, 50964, 400, 309, 311, 611, 364, 2699, 76, 6405, 11, 293, 291, 393, 764, 2139, 295, 552, 13, 51164, 51164, 400, 4476, 437, 286, 1415, 307, 286, 1415, 746, 281, 8460, 2699, 76, 3089, 51414, 51414, 300, 390, 544, 10851, 813, 6798, 21165, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.0902995118149766, "compression_ratio": 1.5614754098360655, "no_caption_prob": 5.306709135766141e-05}, {"id": 43, "seek": 8600, "start": 94.0, "end": 96.0, "text": " It's two things, actually.", "tokens": [50364, 865, 11, 4393, 286, 976, 411, 257, 1090, 1496, 12492, 295, 437, 309, 775, 30, 50564, 50564, 865, 11, 300, 576, 312, 7103, 13, 50614, 50614, 708, 264, 12872, 307, 309, 30, 50714, 50714, 865, 11, 370, 2699, 76, 15549, 26647, 13, 50764, 50764, 467, 311, 732, 721, 11, 767, 13, 50864, 50864, 407, 309, 311, 257, 5622, 1622, 2290, 11, 558, 30, 50964, 50964, 400, 309, 311, 611, 364, 2699, 76, 6405, 11, 293, 291, 393, 764, 2139, 295, 552, 13, 51164, 51164, 400, 4476, 437, 286, 1415, 307, 286, 1415, 746, 281, 8460, 2699, 76, 3089, 51414, 51414, 300, 390, 544, 10851, 813, 6798, 21165, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.0902995118149766, "compression_ratio": 1.5614754098360655, "no_caption_prob": 5.306709135766141e-05}, {"id": 44, "seek": 8600, "start": 96.0, "end": 98.0, "text": " So it's a command line tool, right?", "tokens": [50364, 865, 11, 4393, 286, 976, 411, 257, 1090, 1496, 12492, 295, 437, 309, 775, 30, 50564, 50564, 865, 11, 300, 576, 312, 7103, 13, 50614, 50614, 708, 264, 12872, 307, 309, 30, 50714, 50714, 865, 11, 370, 2699, 76, 15549, 26647, 13, 50764, 50764, 467, 311, 732, 721, 11, 767, 13, 50864, 50864, 407, 309, 311, 257, 5622, 1622, 2290, 11, 558, 30, 50964, 50964, 400, 309, 311, 611, 364, 2699, 76, 6405, 11, 293, 291, 393, 764, 2139, 295, 552, 13, 51164, 51164, 400, 4476, 437, 286, 1415, 307, 286, 1415, 746, 281, 8460, 2699, 76, 3089, 51414, 51414, 300, 390, 544, 10851, 813, 6798, 21165, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.0902995118149766, "compression_ratio": 1.5614754098360655, "no_caption_prob": 5.306709135766141e-05}, {"id": 45, "seek": 8600, "start": 98.0, "end": 102.0, "text": " And it's also an Elm library, and you can use either of them.", "tokens": [50364, 865, 11, 4393, 286, 976, 411, 257, 1090, 1496, 12492, 295, 437, 309, 775, 30, 50564, 50564, 865, 11, 300, 576, 312, 7103, 13, 50614, 50614, 708, 264, 12872, 307, 309, 30, 50714, 50714, 865, 11, 370, 2699, 76, 15549, 26647, 13, 50764, 50764, 467, 311, 732, 721, 11, 767, 13, 50864, 50864, 407, 309, 311, 257, 5622, 1622, 2290, 11, 558, 30, 50964, 50964, 400, 309, 311, 611, 364, 2699, 76, 6405, 11, 293, 291, 393, 764, 2139, 295, 552, 13, 51164, 51164, 400, 4476, 437, 286, 1415, 307, 286, 1415, 746, 281, 8460, 2699, 76, 3089, 51414, 51414, 300, 390, 544, 10851, 813, 6798, 21165, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.0902995118149766, "compression_ratio": 1.5614754098360655, "no_caption_prob": 5.306709135766141e-05}, {"id": 46, "seek": 8600, "start": 102.0, "end": 107.0, "text": " And essentially what I wanted is I wanted something to generate Elm code", "tokens": [50364, 865, 11, 4393, 286, 976, 411, 257, 1090, 1496, 12492, 295, 437, 309, 775, 30, 50564, 50564, 865, 11, 300, 576, 312, 7103, 13, 50614, 50614, 708, 264, 12872, 307, 309, 30, 50714, 50714, 865, 11, 370, 2699, 76, 15549, 26647, 13, 50764, 50764, 467, 311, 732, 721, 11, 767, 13, 50864, 50864, 407, 309, 311, 257, 5622, 1622, 2290, 11, 558, 30, 50964, 50964, 400, 309, 311, 611, 364, 2699, 76, 6405, 11, 293, 291, 393, 764, 2139, 295, 552, 13, 51164, 51164, 400, 4476, 437, 286, 1415, 307, 286, 1415, 746, 281, 8460, 2699, 76, 3089, 51414, 51414, 300, 390, 544, 10851, 813, 6798, 21165, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.0902995118149766, "compression_ratio": 1.5614754098360655, "no_caption_prob": 5.306709135766141e-05}, {"id": 47, "seek": 8600, "start": 107.0, "end": 112.0, "text": " that was more convenient than string templates", "tokens": [50364, 865, 11, 4393, 286, 976, 411, 257, 1090, 1496, 12492, 295, 437, 309, 775, 30, 50564, 50564, 865, 11, 300, 576, 312, 7103, 13, 50614, 50614, 708, 264, 12872, 307, 309, 30, 50714, 50714, 865, 11, 370, 2699, 76, 15549, 26647, 13, 50764, 50764, 467, 311, 732, 721, 11, 767, 13, 50864, 50864, 407, 309, 311, 257, 5622, 1622, 2290, 11, 558, 30, 50964, 50964, 400, 309, 311, 611, 364, 2699, 76, 6405, 11, 293, 291, 393, 764, 2139, 295, 552, 13, 51164, 51164, 400, 4476, 437, 286, 1415, 307, 286, 1415, 746, 281, 8460, 2699, 76, 3089, 51414, 51414, 300, 390, 544, 10851, 813, 6798, 21165, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.0902995118149766, "compression_ratio": 1.5614754098360655, "no_caption_prob": 5.306709135766141e-05}, {"id": 48, "seek": 11200, "start": 112.0, "end": 117.0, "text": " and less of a pain than ASTs.", "tokens": [50364, 293, 1570, 295, 257, 1822, 813, 316, 6840, 82, 13, 50614, 50614, 286, 5334, 300, 1036, 935, 1062, 312, 411, 257, 707, 857, 295, 257, 9127, 935, 11, 50814, 50814, 293, 456, 311, 512, 1880, 411, 733, 295, 1859, 281, 12350, 456, 13, 50964, 50964, 316, 6840, 82, 366, 869, 11, 457, 411, 264, 1168, 390, 11, 727, 321, 360, 1101, 30, 51164, 51164, 400, 4682, 11, 286, 390, 411, 11, 1392, 11, 498, 562, 1580, 2738, 281, 360, 15549, 26647, 51414, 51414, 337, 411, 257, 5870, 551, 11, 498, 436, 2524, 337, 341, 5717, 445, 9906, 51664, 51664, 337, 257, 6798, 12379, 11, 411, 6798, 7406, 11, 558, 30, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.08352133265712805, "compression_ratio": 1.6470588235294117, "no_caption_prob": 7.841989281587303e-05}, {"id": 49, "seek": 11200, "start": 117.0, "end": 121.0, "text": " I realized that last point might be like a little bit of a spicy point,", "tokens": [50364, 293, 1570, 295, 257, 1822, 813, 316, 6840, 82, 13, 50614, 50614, 286, 5334, 300, 1036, 935, 1062, 312, 411, 257, 707, 857, 295, 257, 9127, 935, 11, 50814, 50814, 293, 456, 311, 512, 1880, 411, 733, 295, 1859, 281, 12350, 456, 13, 50964, 50964, 316, 6840, 82, 366, 869, 11, 457, 411, 264, 1168, 390, 11, 727, 321, 360, 1101, 30, 51164, 51164, 400, 4682, 11, 286, 390, 411, 11, 1392, 11, 498, 562, 1580, 2738, 281, 360, 15549, 26647, 51414, 51414, 337, 411, 257, 5870, 551, 11, 498, 436, 2524, 337, 341, 5717, 445, 9906, 51664, 51664, 337, 257, 6798, 12379, 11, 411, 6798, 7406, 11, 558, 30, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.08352133265712805, "compression_ratio": 1.6470588235294117, "no_caption_prob": 7.841989281587303e-05}, {"id": 50, "seek": 11200, "start": 121.0, "end": 124.0, "text": " and there's some interesting like kind of area to navigate there.", "tokens": [50364, 293, 1570, 295, 257, 1822, 813, 316, 6840, 82, 13, 50614, 50614, 286, 5334, 300, 1036, 935, 1062, 312, 411, 257, 707, 857, 295, 257, 9127, 935, 11, 50814, 50814, 293, 456, 311, 512, 1880, 411, 733, 295, 1859, 281, 12350, 456, 13, 50964, 50964, 316, 6840, 82, 366, 869, 11, 457, 411, 264, 1168, 390, 11, 727, 321, 360, 1101, 30, 51164, 51164, 400, 4682, 11, 286, 390, 411, 11, 1392, 11, 498, 562, 1580, 2738, 281, 360, 15549, 26647, 51414, 51414, 337, 411, 257, 5870, 551, 11, 498, 436, 2524, 337, 341, 5717, 445, 9906, 51664, 51664, 337, 257, 6798, 12379, 11, 411, 6798, 7406, 11, 558, 30, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.08352133265712805, "compression_ratio": 1.6470588235294117, "no_caption_prob": 7.841989281587303e-05}, {"id": 51, "seek": 11200, "start": 124.0, "end": 128.0, "text": " ASTs are great, but like the question was, could we do better?", "tokens": [50364, 293, 1570, 295, 257, 1822, 813, 316, 6840, 82, 13, 50614, 50614, 286, 5334, 300, 1036, 935, 1062, 312, 411, 257, 707, 857, 295, 257, 9127, 935, 11, 50814, 50814, 293, 456, 311, 512, 1880, 411, 733, 295, 1859, 281, 12350, 456, 13, 50964, 50964, 316, 6840, 82, 366, 869, 11, 457, 411, 264, 1168, 390, 11, 727, 321, 360, 1101, 30, 51164, 51164, 400, 4682, 11, 286, 390, 411, 11, 1392, 11, 498, 562, 1580, 2738, 281, 360, 15549, 26647, 51414, 51414, 337, 411, 257, 5870, 551, 11, 498, 436, 2524, 337, 341, 5717, 445, 9906, 51664, 51664, 337, 257, 6798, 12379, 11, 411, 6798, 7406, 11, 558, 30, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.08352133265712805, "compression_ratio": 1.6470588235294117, "no_caption_prob": 7.841989281587303e-05}, {"id": 52, "seek": 11200, "start": 128.0, "end": 133.0, "text": " And specifically, I was like, okay, if when someone wants to do CodeGen", "tokens": [50364, 293, 1570, 295, 257, 1822, 813, 316, 6840, 82, 13, 50614, 50614, 286, 5334, 300, 1036, 935, 1062, 312, 411, 257, 707, 857, 295, 257, 9127, 935, 11, 50814, 50814, 293, 456, 311, 512, 1880, 411, 733, 295, 1859, 281, 12350, 456, 13, 50964, 50964, 316, 6840, 82, 366, 869, 11, 457, 411, 264, 1168, 390, 11, 727, 321, 360, 1101, 30, 51164, 51164, 400, 4682, 11, 286, 390, 411, 11, 1392, 11, 498, 562, 1580, 2738, 281, 360, 15549, 26647, 51414, 51414, 337, 411, 257, 5870, 551, 11, 498, 436, 2524, 337, 341, 5717, 445, 9906, 51664, 51664, 337, 257, 6798, 12379, 11, 411, 6798, 7406, 11, 558, 30, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.08352133265712805, "compression_ratio": 1.6470588235294117, "no_caption_prob": 7.841989281587303e-05}, {"id": 53, "seek": 11200, "start": 133.0, "end": 138.0, "text": " for like a tiny thing, if they reach for this versus just reaching", "tokens": [50364, 293, 1570, 295, 257, 1822, 813, 316, 6840, 82, 13, 50614, 50614, 286, 5334, 300, 1036, 935, 1062, 312, 411, 257, 707, 857, 295, 257, 9127, 935, 11, 50814, 50814, 293, 456, 311, 512, 1880, 411, 733, 295, 1859, 281, 12350, 456, 13, 50964, 50964, 316, 6840, 82, 366, 869, 11, 457, 411, 264, 1168, 390, 11, 727, 321, 360, 1101, 30, 51164, 51164, 400, 4682, 11, 286, 390, 411, 11, 1392, 11, 498, 562, 1580, 2738, 281, 360, 15549, 26647, 51414, 51414, 337, 411, 257, 5870, 551, 11, 498, 436, 2524, 337, 341, 5717, 445, 9906, 51664, 51664, 337, 257, 6798, 12379, 11, 411, 6798, 7406, 11, 558, 30, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.08352133265712805, "compression_ratio": 1.6470588235294117, "no_caption_prob": 7.841989281587303e-05}, {"id": 54, "seek": 11200, "start": 138.0, "end": 141.0, "text": " for a string template, like string replace, right?", "tokens": [50364, 293, 1570, 295, 257, 1822, 813, 316, 6840, 82, 13, 50614, 50614, 286, 5334, 300, 1036, 935, 1062, 312, 411, 257, 707, 857, 295, 257, 9127, 935, 11, 50814, 50814, 293, 456, 311, 512, 1880, 411, 733, 295, 1859, 281, 12350, 456, 13, 50964, 50964, 316, 6840, 82, 366, 869, 11, 457, 411, 264, 1168, 390, 11, 727, 321, 360, 1101, 30, 51164, 51164, 400, 4682, 11, 286, 390, 411, 11, 1392, 11, 498, 562, 1580, 2738, 281, 360, 15549, 26647, 51414, 51414, 337, 411, 257, 5870, 551, 11, 498, 436, 2524, 337, 341, 5717, 445, 9906, 51664, 51664, 337, 257, 6798, 12379, 11, 411, 6798, 7406, 11, 558, 30, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.08352133265712805, "compression_ratio": 1.6470588235294117, "no_caption_prob": 7.841989281587303e-05}, {"id": 55, "seek": 14100, "start": 141.0, "end": 146.0, "text": " If they believe just sort of in their gut that that's more convenient,", "tokens": [50364, 759, 436, 1697, 445, 1333, 295, 294, 641, 5228, 300, 300, 311, 544, 10851, 11, 50614, 50614, 550, 286, 600, 1582, 13, 50664, 50664, 400, 14759, 11, 498, 291, 727, 1322, 512, 1333, 295, 4833, 1716, 11, 50814, 50814, 746, 588, 544, 12649, 11, 293, 362, 309, 312, 544, 6909, 712, 51064, 51064, 813, 1419, 281, 361, 31726, 257, 8936, 316, 6840, 11, 300, 576, 312, 257, 2563, 1942, 13, 51314, 51314, 400, 498, 286, 727, 360, 1293, 11, 309, 576, 312, 445, 257, 588, 1627, 1716, 13, 51464, 51464, 286, 841, 257, 857, 9019, 13, 51564, 51564, 1743, 11, 360, 291, 458, 466, 604, 3089, 5125, 3873, 300, 764, 316, 6840, 82, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.061136388371133395, "compression_ratio": 1.6509803921568627, "no_caption_prob": 5.3072304581291974e-05}, {"id": 56, "seek": 14100, "start": 146.0, "end": 147.0, "text": " then I've won.", "tokens": [50364, 759, 436, 1697, 445, 1333, 295, 294, 641, 5228, 300, 300, 311, 544, 10851, 11, 50614, 50614, 550, 286, 600, 1582, 13, 50664, 50664, 400, 14759, 11, 498, 291, 727, 1322, 512, 1333, 295, 4833, 1716, 11, 50814, 50814, 746, 588, 544, 12649, 11, 293, 362, 309, 312, 544, 6909, 712, 51064, 51064, 813, 1419, 281, 361, 31726, 257, 8936, 316, 6840, 11, 300, 576, 312, 257, 2563, 1942, 13, 51314, 51314, 400, 498, 286, 727, 360, 1293, 11, 309, 576, 312, 445, 257, 588, 1627, 1716, 13, 51464, 51464, 286, 841, 257, 857, 9019, 13, 51564, 51564, 1743, 11, 360, 291, 458, 466, 604, 3089, 5125, 3873, 300, 764, 316, 6840, 82, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.061136388371133395, "compression_ratio": 1.6509803921568627, "no_caption_prob": 5.3072304581291974e-05}, {"id": 57, "seek": 14100, "start": 147.0, "end": 150.0, "text": " And separately, if you could build some sort of larger project,", "tokens": [50364, 759, 436, 1697, 445, 1333, 295, 294, 641, 5228, 300, 300, 311, 544, 10851, 11, 50614, 50614, 550, 286, 600, 1582, 13, 50664, 50664, 400, 14759, 11, 498, 291, 727, 1322, 512, 1333, 295, 4833, 1716, 11, 50814, 50814, 746, 588, 544, 12649, 11, 293, 362, 309, 312, 544, 6909, 712, 51064, 51064, 813, 1419, 281, 361, 31726, 257, 8936, 316, 6840, 11, 300, 576, 312, 257, 2563, 1942, 13, 51314, 51314, 400, 498, 286, 727, 360, 1293, 11, 309, 576, 312, 445, 257, 588, 1627, 1716, 13, 51464, 51464, 286, 841, 257, 857, 9019, 13, 51564, 51564, 1743, 11, 360, 291, 458, 466, 604, 3089, 5125, 3873, 300, 764, 316, 6840, 82, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.061136388371133395, "compression_ratio": 1.6509803921568627, "no_caption_prob": 5.3072304581291974e-05}, {"id": 58, "seek": 14100, "start": 150.0, "end": 155.0, "text": " something very more abstract, and have it be more maintainable", "tokens": [50364, 759, 436, 1697, 445, 1333, 295, 294, 641, 5228, 300, 300, 311, 544, 10851, 11, 50614, 50614, 550, 286, 600, 1582, 13, 50664, 50664, 400, 14759, 11, 498, 291, 727, 1322, 512, 1333, 295, 4833, 1716, 11, 50814, 50814, 746, 588, 544, 12649, 11, 293, 362, 309, 312, 544, 6909, 712, 51064, 51064, 813, 1419, 281, 361, 31726, 257, 8936, 316, 6840, 11, 300, 576, 312, 257, 2563, 1942, 13, 51314, 51314, 400, 498, 286, 727, 360, 1293, 11, 309, 576, 312, 445, 257, 588, 1627, 1716, 13, 51464, 51464, 286, 841, 257, 857, 9019, 13, 51564, 51564, 1743, 11, 360, 291, 458, 466, 604, 3089, 5125, 3873, 300, 764, 316, 6840, 82, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.061136388371133395, "compression_ratio": 1.6509803921568627, "no_caption_prob": 5.3072304581291974e-05}, {"id": 59, "seek": 14100, "start": 155.0, "end": 160.0, "text": " than having to juggle a raw AST, that would be a major win.", "tokens": [50364, 759, 436, 1697, 445, 1333, 295, 294, 641, 5228, 300, 300, 311, 544, 10851, 11, 50614, 50614, 550, 286, 600, 1582, 13, 50664, 50664, 400, 14759, 11, 498, 291, 727, 1322, 512, 1333, 295, 4833, 1716, 11, 50814, 50814, 746, 588, 544, 12649, 11, 293, 362, 309, 312, 544, 6909, 712, 51064, 51064, 813, 1419, 281, 361, 31726, 257, 8936, 316, 6840, 11, 300, 576, 312, 257, 2563, 1942, 13, 51314, 51314, 400, 498, 286, 727, 360, 1293, 11, 309, 576, 312, 445, 257, 588, 1627, 1716, 13, 51464, 51464, 286, 841, 257, 857, 9019, 13, 51564, 51564, 1743, 11, 360, 291, 458, 466, 604, 3089, 5125, 3873, 300, 764, 316, 6840, 82, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.061136388371133395, "compression_ratio": 1.6509803921568627, "no_caption_prob": 5.3072304581291974e-05}, {"id": 60, "seek": 14100, "start": 160.0, "end": 163.0, "text": " And if I could do both, it would be just a very cool project.", "tokens": [50364, 759, 436, 1697, 445, 1333, 295, 294, 641, 5228, 300, 300, 311, 544, 10851, 11, 50614, 50614, 550, 286, 600, 1582, 13, 50664, 50664, 400, 14759, 11, 498, 291, 727, 1322, 512, 1333, 295, 4833, 1716, 11, 50814, 50814, 746, 588, 544, 12649, 11, 293, 362, 309, 312, 544, 6909, 712, 51064, 51064, 813, 1419, 281, 361, 31726, 257, 8936, 316, 6840, 11, 300, 576, 312, 257, 2563, 1942, 13, 51314, 51314, 400, 498, 286, 727, 360, 1293, 11, 309, 576, 312, 445, 257, 588, 1627, 1716, 13, 51464, 51464, 286, 841, 257, 857, 9019, 13, 51564, 51564, 1743, 11, 360, 291, 458, 466, 604, 3089, 5125, 3873, 300, 764, 316, 6840, 82, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.061136388371133395, "compression_ratio": 1.6509803921568627, "no_caption_prob": 5.3072304581291974e-05}, {"id": 61, "seek": 14100, "start": 163.0, "end": 165.0, "text": " I feel a bit confused.", "tokens": [50364, 759, 436, 1697, 445, 1333, 295, 294, 641, 5228, 300, 300, 311, 544, 10851, 11, 50614, 50614, 550, 286, 600, 1582, 13, 50664, 50664, 400, 14759, 11, 498, 291, 727, 1322, 512, 1333, 295, 4833, 1716, 11, 50814, 50814, 746, 588, 544, 12649, 11, 293, 362, 309, 312, 544, 6909, 712, 51064, 51064, 813, 1419, 281, 361, 31726, 257, 8936, 316, 6840, 11, 300, 576, 312, 257, 2563, 1942, 13, 51314, 51314, 400, 498, 286, 727, 360, 1293, 11, 309, 576, 312, 445, 257, 588, 1627, 1716, 13, 51464, 51464, 286, 841, 257, 857, 9019, 13, 51564, 51564, 1743, 11, 360, 291, 458, 466, 604, 3089, 5125, 3873, 300, 764, 316, 6840, 82, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.061136388371133395, "compression_ratio": 1.6509803921568627, "no_caption_prob": 5.3072304581291974e-05}, {"id": 62, "seek": 14100, "start": 165.0, "end": 169.0, "text": " Like, do you know about any code generation tools that use ASTs", "tokens": [50364, 759, 436, 1697, 445, 1333, 295, 294, 641, 5228, 300, 300, 311, 544, 10851, 11, 50614, 50614, 550, 286, 600, 1582, 13, 50664, 50664, 400, 14759, 11, 498, 291, 727, 1322, 512, 1333, 295, 4833, 1716, 11, 50814, 50814, 746, 588, 544, 12649, 11, 293, 362, 309, 312, 544, 6909, 712, 51064, 51064, 813, 1419, 281, 361, 31726, 257, 8936, 316, 6840, 11, 300, 576, 312, 257, 2563, 1942, 13, 51314, 51314, 400, 498, 286, 727, 360, 1293, 11, 309, 576, 312, 445, 257, 588, 1627, 1716, 13, 51464, 51464, 286, 841, 257, 857, 9019, 13, 51564, 51564, 1743, 11, 360, 291, 458, 466, 604, 3089, 5125, 3873, 300, 764, 316, 6840, 82, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.061136388371133395, "compression_ratio": 1.6509803921568627, "no_caption_prob": 5.3072304581291974e-05}, {"id": 63, "seek": 16900, "start": 169.0, "end": 174.0, "text": " where you actually have to construct ASTs to generate code?", "tokens": [50364, 689, 291, 767, 362, 281, 7690, 316, 6840, 82, 281, 8460, 3089, 30, 50614, 50614, 286, 519, 309, 576, 312, 264, 7576, 13, 50664, 50664, 286, 519, 11, 1338, 11, 337, 988, 13, 50764, 50764, 1743, 498, 291, 352, 281, 264, 15576, 14237, 31958, 11, 411, 281, 8460, 15576, 14237, 3089, 11, 51014, 51014, 291, 362, 257, 707, 9265, 13, 51114, 51114, 876, 11, 1338, 13, 51164, 51164, 583, 411, 309, 311, 257, 588, 1269, 4590, 11, 291, 458, 11, 456, 311, 406, 709, 6995, 456, 11, 558, 30, 51514, 51514, 467, 311, 411, 11, 510, 366, 439, 264, 3956, 337, 341, 316, 6840, 551, 11, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.10798778533935546, "compression_ratio": 1.5887445887445888, "no_caption_prob": 4.908550181426108e-05}, {"id": 64, "seek": 16900, "start": 174.0, "end": 175.0, "text": " I think it would be the default.", "tokens": [50364, 689, 291, 767, 362, 281, 7690, 316, 6840, 82, 281, 8460, 3089, 30, 50614, 50614, 286, 519, 309, 576, 312, 264, 7576, 13, 50664, 50664, 286, 519, 11, 1338, 11, 337, 988, 13, 50764, 50764, 1743, 498, 291, 352, 281, 264, 15576, 14237, 31958, 11, 411, 281, 8460, 15576, 14237, 3089, 11, 51014, 51014, 291, 362, 257, 707, 9265, 13, 51114, 51114, 876, 11, 1338, 13, 51164, 51164, 583, 411, 309, 311, 257, 588, 1269, 4590, 11, 291, 458, 11, 456, 311, 406, 709, 6995, 456, 11, 558, 30, 51514, 51514, 467, 311, 411, 11, 510, 366, 439, 264, 3956, 337, 341, 316, 6840, 551, 11, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.10798778533935546, "compression_ratio": 1.5887445887445888, "no_caption_prob": 4.908550181426108e-05}, {"id": 65, "seek": 16900, "start": 175.0, "end": 177.0, "text": " I think, yeah, for sure.", "tokens": [50364, 689, 291, 767, 362, 281, 7690, 316, 6840, 82, 281, 8460, 3089, 30, 50614, 50614, 286, 519, 309, 576, 312, 264, 7576, 13, 50664, 50664, 286, 519, 11, 1338, 11, 337, 988, 13, 50764, 50764, 1743, 498, 291, 352, 281, 264, 15576, 14237, 31958, 11, 411, 281, 8460, 15576, 14237, 3089, 11, 51014, 51014, 291, 362, 257, 707, 9265, 13, 51114, 51114, 876, 11, 1338, 13, 51164, 51164, 583, 411, 309, 311, 257, 588, 1269, 4590, 11, 291, 458, 11, 456, 311, 406, 709, 6995, 456, 11, 558, 30, 51514, 51514, 467, 311, 411, 11, 510, 366, 439, 264, 3956, 337, 341, 316, 6840, 551, 11, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.10798778533935546, "compression_ratio": 1.5887445887445888, "no_caption_prob": 4.908550181426108e-05}, {"id": 66, "seek": 16900, "start": 177.0, "end": 182.0, "text": " Like if you go to the TypeScript compiler, like to generate TypeScript code,", "tokens": [50364, 689, 291, 767, 362, 281, 7690, 316, 6840, 82, 281, 8460, 3089, 30, 50614, 50614, 286, 519, 309, 576, 312, 264, 7576, 13, 50664, 50664, 286, 519, 11, 1338, 11, 337, 988, 13, 50764, 50764, 1743, 498, 291, 352, 281, 264, 15576, 14237, 31958, 11, 411, 281, 8460, 15576, 14237, 3089, 11, 51014, 51014, 291, 362, 257, 707, 9265, 13, 51114, 51114, 876, 11, 1338, 13, 51164, 51164, 583, 411, 309, 311, 257, 588, 1269, 4590, 11, 291, 458, 11, 456, 311, 406, 709, 6995, 456, 11, 558, 30, 51514, 51514, 467, 311, 411, 11, 510, 366, 439, 264, 3956, 337, 341, 316, 6840, 551, 11, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.10798778533935546, "compression_ratio": 1.5887445887445888, "no_caption_prob": 4.908550181426108e-05}, {"id": 67, "seek": 16900, "start": 182.0, "end": 184.0, "text": " you have a little factory.", "tokens": [50364, 689, 291, 767, 362, 281, 7690, 316, 6840, 82, 281, 8460, 3089, 30, 50614, 50614, 286, 519, 309, 576, 312, 264, 7576, 13, 50664, 50664, 286, 519, 11, 1338, 11, 337, 988, 13, 50764, 50764, 1743, 498, 291, 352, 281, 264, 15576, 14237, 31958, 11, 411, 281, 8460, 15576, 14237, 3089, 11, 51014, 51014, 291, 362, 257, 707, 9265, 13, 51114, 51114, 876, 11, 1338, 13, 51164, 51164, 583, 411, 309, 311, 257, 588, 1269, 4590, 11, 291, 458, 11, 456, 311, 406, 709, 6995, 456, 11, 558, 30, 51514, 51514, 467, 311, 411, 11, 510, 366, 439, 264, 3956, 337, 341, 316, 6840, 551, 11, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.10798778533935546, "compression_ratio": 1.5887445887445888, "no_caption_prob": 4.908550181426108e-05}, {"id": 68, "seek": 16900, "start": 184.0, "end": 185.0, "text": " Oh, yeah.", "tokens": [50364, 689, 291, 767, 362, 281, 7690, 316, 6840, 82, 281, 8460, 3089, 30, 50614, 50614, 286, 519, 309, 576, 312, 264, 7576, 13, 50664, 50664, 286, 519, 11, 1338, 11, 337, 988, 13, 50764, 50764, 1743, 498, 291, 352, 281, 264, 15576, 14237, 31958, 11, 411, 281, 8460, 15576, 14237, 3089, 11, 51014, 51014, 291, 362, 257, 707, 9265, 13, 51114, 51114, 876, 11, 1338, 13, 51164, 51164, 583, 411, 309, 311, 257, 588, 1269, 4590, 11, 291, 458, 11, 456, 311, 406, 709, 6995, 456, 11, 558, 30, 51514, 51514, 467, 311, 411, 11, 510, 366, 439, 264, 3956, 337, 341, 316, 6840, 551, 11, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.10798778533935546, "compression_ratio": 1.5887445887445888, "no_caption_prob": 4.908550181426108e-05}, {"id": 69, "seek": 16900, "start": 185.0, "end": 192.0, "text": " But like it's a very open ended, you know, there's not much judge there, right?", "tokens": [50364, 689, 291, 767, 362, 281, 7690, 316, 6840, 82, 281, 8460, 3089, 30, 50614, 50614, 286, 519, 309, 576, 312, 264, 7576, 13, 50664, 50664, 286, 519, 11, 1338, 11, 337, 988, 13, 50764, 50764, 1743, 498, 291, 352, 281, 264, 15576, 14237, 31958, 11, 411, 281, 8460, 15576, 14237, 3089, 11, 51014, 51014, 291, 362, 257, 707, 9265, 13, 51114, 51114, 876, 11, 1338, 13, 51164, 51164, 583, 411, 309, 311, 257, 588, 1269, 4590, 11, 291, 458, 11, 456, 311, 406, 709, 6995, 456, 11, 558, 30, 51514, 51514, 467, 311, 411, 11, 510, 366, 439, 264, 3956, 337, 341, 316, 6840, 551, 11, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.10798778533935546, "compression_ratio": 1.5887445887445888, "no_caption_prob": 4.908550181426108e-05}, {"id": 70, "seek": 16900, "start": 192.0, "end": 197.0, "text": " It's like, here are all the options for this AST thing,", "tokens": [50364, 689, 291, 767, 362, 281, 7690, 316, 6840, 82, 281, 8460, 3089, 30, 50614, 50614, 286, 519, 309, 576, 312, 264, 7576, 13, 50664, 50664, 286, 519, 11, 1338, 11, 337, 988, 13, 50764, 50764, 1743, 498, 291, 352, 281, 264, 15576, 14237, 31958, 11, 411, 281, 8460, 15576, 14237, 3089, 11, 51014, 51014, 291, 362, 257, 707, 9265, 13, 51114, 51114, 876, 11, 1338, 13, 51164, 51164, 583, 411, 309, 311, 257, 588, 1269, 4590, 11, 291, 458, 11, 456, 311, 406, 709, 6995, 456, 11, 558, 30, 51514, 51514, 467, 311, 411, 11, 510, 366, 439, 264, 3956, 337, 341, 316, 6840, 551, 11, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.10798778533935546, "compression_ratio": 1.5887445887445888, "no_caption_prob": 4.908550181426108e-05}, {"id": 71, "seek": 19700, "start": 197.0, "end": 200.0, "text": " and you just have sort of this massive surface area, right?", "tokens": [50364, 293, 291, 445, 362, 1333, 295, 341, 5994, 3753, 1859, 11, 558, 30, 50514, 50514, 865, 11, 286, 1604, 2433, 365, 309, 365, 441, 17365, 83, 332, 1602, 16872, 568, 13, 50714, 50714, 1779, 11, 300, 390, 452, 1752, 382, 731, 11, 558, 30, 50864, 50864, 492, 434, 1382, 281, 411, 11, 293, 456, 311, 1310, 411, 732, 7270, 281, 341, 51014, 51014, 570, 456, 311, 3760, 316, 6840, 82, 11, 558, 11, 597, 307, 1080, 1065, 1629, 1496, 295, 14024, 13, 51264, 51264, 400, 456, 311, 3579, 552, 11, 597, 575, 1080, 1065, 4994, 992, 295, 48705, 13, 51464, 51464, 407, 11, 1392, 11, 1310, 341, 307, 257, 665, 935, 281, 1333, 295, 11, 51664, 51664, 570, 309, 311, 1858, 281, 3012, 666, 264, 4365, 510, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.16264006585785837, "compression_ratio": 1.6655172413793105, "no_caption_prob": 5.475529906107113e-05}, {"id": 72, "seek": 19700, "start": 200.0, "end": 204.0, "text": " Yeah, I remember playing with it with LMMtimized Level 2.", "tokens": [50364, 293, 291, 445, 362, 1333, 295, 341, 5994, 3753, 1859, 11, 558, 30, 50514, 50514, 865, 11, 286, 1604, 2433, 365, 309, 365, 441, 17365, 83, 332, 1602, 16872, 568, 13, 50714, 50714, 1779, 11, 300, 390, 452, 1752, 382, 731, 11, 558, 30, 50864, 50864, 492, 434, 1382, 281, 411, 11, 293, 456, 311, 1310, 411, 732, 7270, 281, 341, 51014, 51014, 570, 456, 311, 3760, 316, 6840, 82, 11, 558, 11, 597, 307, 1080, 1065, 1629, 1496, 295, 14024, 13, 51264, 51264, 400, 456, 311, 3579, 552, 11, 597, 575, 1080, 1065, 4994, 992, 295, 48705, 13, 51464, 51464, 407, 11, 1392, 11, 1310, 341, 307, 257, 665, 935, 281, 1333, 295, 11, 51664, 51664, 570, 309, 311, 1858, 281, 3012, 666, 264, 4365, 510, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.16264006585785837, "compression_ratio": 1.6655172413793105, "no_caption_prob": 5.475529906107113e-05}, {"id": 73, "seek": 19700, "start": 204.0, "end": 207.0, "text": " Right, that was my experience as well, right?", "tokens": [50364, 293, 291, 445, 362, 1333, 295, 341, 5994, 3753, 1859, 11, 558, 30, 50514, 50514, 865, 11, 286, 1604, 2433, 365, 309, 365, 441, 17365, 83, 332, 1602, 16872, 568, 13, 50714, 50714, 1779, 11, 300, 390, 452, 1752, 382, 731, 11, 558, 30, 50864, 50864, 492, 434, 1382, 281, 411, 11, 293, 456, 311, 1310, 411, 732, 7270, 281, 341, 51014, 51014, 570, 456, 311, 3760, 316, 6840, 82, 11, 558, 11, 597, 307, 1080, 1065, 1629, 1496, 295, 14024, 13, 51264, 51264, 400, 456, 311, 3579, 552, 11, 597, 575, 1080, 1065, 4994, 992, 295, 48705, 13, 51464, 51464, 407, 11, 1392, 11, 1310, 341, 307, 257, 665, 935, 281, 1333, 295, 11, 51664, 51664, 570, 309, 311, 1858, 281, 3012, 666, 264, 4365, 510, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.16264006585785837, "compression_ratio": 1.6655172413793105, "no_caption_prob": 5.475529906107113e-05}, {"id": 74, "seek": 19700, "start": 207.0, "end": 210.0, "text": " We're trying to like, and there's maybe like two aspects to this", "tokens": [50364, 293, 291, 445, 362, 1333, 295, 341, 5994, 3753, 1859, 11, 558, 30, 50514, 50514, 865, 11, 286, 1604, 2433, 365, 309, 365, 441, 17365, 83, 332, 1602, 16872, 568, 13, 50714, 50714, 1779, 11, 300, 390, 452, 1752, 382, 731, 11, 558, 30, 50864, 50864, 492, 434, 1382, 281, 411, 11, 293, 456, 311, 1310, 411, 732, 7270, 281, 341, 51014, 51014, 570, 456, 311, 3760, 316, 6840, 82, 11, 558, 11, 597, 307, 1080, 1065, 1629, 1496, 295, 14024, 13, 51264, 51264, 400, 456, 311, 3579, 552, 11, 597, 575, 1080, 1065, 4994, 992, 295, 48705, 13, 51464, 51464, 407, 11, 1392, 11, 1310, 341, 307, 257, 665, 935, 281, 1333, 295, 11, 51664, 51664, 570, 309, 311, 1858, 281, 3012, 666, 264, 4365, 510, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.16264006585785837, "compression_ratio": 1.6655172413793105, "no_caption_prob": 5.475529906107113e-05}, {"id": 75, "seek": 19700, "start": 210.0, "end": 215.0, "text": " because there's reading ASTs, right, which is its own certain level of complexity.", "tokens": [50364, 293, 291, 445, 362, 1333, 295, 341, 5994, 3753, 1859, 11, 558, 30, 50514, 50514, 865, 11, 286, 1604, 2433, 365, 309, 365, 441, 17365, 83, 332, 1602, 16872, 568, 13, 50714, 50714, 1779, 11, 300, 390, 452, 1752, 382, 731, 11, 558, 30, 50864, 50864, 492, 434, 1382, 281, 411, 11, 293, 456, 311, 1310, 411, 732, 7270, 281, 341, 51014, 51014, 570, 456, 311, 3760, 316, 6840, 82, 11, 558, 11, 597, 307, 1080, 1065, 1629, 1496, 295, 14024, 13, 51264, 51264, 400, 456, 311, 3579, 552, 11, 597, 575, 1080, 1065, 4994, 992, 295, 48705, 13, 51464, 51464, 407, 11, 1392, 11, 1310, 341, 307, 257, 665, 935, 281, 1333, 295, 11, 51664, 51664, 570, 309, 311, 1858, 281, 3012, 666, 264, 4365, 510, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.16264006585785837, "compression_ratio": 1.6655172413793105, "no_caption_prob": 5.475529906107113e-05}, {"id": 76, "seek": 19700, "start": 215.0, "end": 219.0, "text": " And there's writing them, which has its own separate set of complexities.", "tokens": [50364, 293, 291, 445, 362, 1333, 295, 341, 5994, 3753, 1859, 11, 558, 30, 50514, 50514, 865, 11, 286, 1604, 2433, 365, 309, 365, 441, 17365, 83, 332, 1602, 16872, 568, 13, 50714, 50714, 1779, 11, 300, 390, 452, 1752, 382, 731, 11, 558, 30, 50864, 50864, 492, 434, 1382, 281, 411, 11, 293, 456, 311, 1310, 411, 732, 7270, 281, 341, 51014, 51014, 570, 456, 311, 3760, 316, 6840, 82, 11, 558, 11, 597, 307, 1080, 1065, 1629, 1496, 295, 14024, 13, 51264, 51264, 400, 456, 311, 3579, 552, 11, 597, 575, 1080, 1065, 4994, 992, 295, 48705, 13, 51464, 51464, 407, 11, 1392, 11, 1310, 341, 307, 257, 665, 935, 281, 1333, 295, 11, 51664, 51664, 570, 309, 311, 1858, 281, 3012, 666, 264, 4365, 510, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.16264006585785837, "compression_ratio": 1.6655172413793105, "no_caption_prob": 5.475529906107113e-05}, {"id": 77, "seek": 19700, "start": 219.0, "end": 223.0, "text": " So, okay, maybe this is a good point to sort of,", "tokens": [50364, 293, 291, 445, 362, 1333, 295, 341, 5994, 3753, 1859, 11, 558, 30, 50514, 50514, 865, 11, 286, 1604, 2433, 365, 309, 365, 441, 17365, 83, 332, 1602, 16872, 568, 13, 50714, 50714, 1779, 11, 300, 390, 452, 1752, 382, 731, 11, 558, 30, 50864, 50864, 492, 434, 1382, 281, 411, 11, 293, 456, 311, 1310, 411, 732, 7270, 281, 341, 51014, 51014, 570, 456, 311, 3760, 316, 6840, 82, 11, 558, 11, 597, 307, 1080, 1065, 1629, 1496, 295, 14024, 13, 51264, 51264, 400, 456, 311, 3579, 552, 11, 597, 575, 1080, 1065, 4994, 992, 295, 48705, 13, 51464, 51464, 407, 11, 1392, 11, 1310, 341, 307, 257, 665, 935, 281, 1333, 295, 11, 51664, 51664, 570, 309, 311, 1858, 281, 3012, 666, 264, 4365, 510, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.16264006585785837, "compression_ratio": 1.6655172413793105, "no_caption_prob": 5.475529906107113e-05}, {"id": 78, "seek": 19700, "start": 223.0, "end": 225.0, "text": " because it's easy to jump into the details here.", "tokens": [50364, 293, 291, 445, 362, 1333, 295, 341, 5994, 3753, 1859, 11, 558, 30, 50514, 50514, 865, 11, 286, 1604, 2433, 365, 309, 365, 441, 17365, 83, 332, 1602, 16872, 568, 13, 50714, 50714, 1779, 11, 300, 390, 452, 1752, 382, 731, 11, 558, 30, 50864, 50864, 492, 434, 1382, 281, 411, 11, 293, 456, 311, 1310, 411, 732, 7270, 281, 341, 51014, 51014, 570, 456, 311, 3760, 316, 6840, 82, 11, 558, 11, 597, 307, 1080, 1065, 1629, 1496, 295, 14024, 13, 51264, 51264, 400, 456, 311, 3579, 552, 11, 597, 575, 1080, 1065, 4994, 992, 295, 48705, 13, 51464, 51464, 407, 11, 1392, 11, 1310, 341, 307, 257, 665, 935, 281, 1333, 295, 11, 51664, 51664, 570, 309, 311, 1858, 281, 3012, 666, 264, 4365, 510, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.16264006585785837, "compression_ratio": 1.6655172413793105, "no_caption_prob": 5.475529906107113e-05}, {"id": 79, "seek": 22500, "start": 225.0, "end": 229.0, "text": " Like maybe the motivating examples,", "tokens": [50364, 1743, 1310, 264, 41066, 5110, 11, 50564, 50564, 570, 286, 994, 380, 767, 992, 484, 281, 652, 257, 3089, 1049, 2290, 11, 50714, 50714, 420, 411, 300, 311, 406, 689, 309, 1409, 11, 558, 30, 50864, 50864, 407, 689, 309, 1409, 293, 437, 286, 390, 733, 295, 3102, 294, 307, 456, 645, 732, 4455, 11, 51164, 51164, 472, 337, 589, 293, 472, 300, 286, 445, 1415, 484, 456, 11, 51314, 51314, 457, 1310, 7340, 281, 589, 300, 286, 1415, 13, 51414, 51414, 467, 311, 668, 322, 452, 1575, 337, 257, 1339, 13, 51514, 51514, 400, 472, 295, 552, 390, 11, 286, 390, 534, 6369, 281, 1322, 460, 13695, 568, 13, 15, 1333, 295, 31958, 11, 558, 30, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.134958771634693, "compression_ratio": 1.6254681647940075, "no_caption_prob": 5.0640701374504715e-05}, {"id": 80, "seek": 22500, "start": 229.0, "end": 232.0, "text": " because I didn't actually set out to make a code gen tool,", "tokens": [50364, 1743, 1310, 264, 41066, 5110, 11, 50564, 50564, 570, 286, 994, 380, 767, 992, 484, 281, 652, 257, 3089, 1049, 2290, 11, 50714, 50714, 420, 411, 300, 311, 406, 689, 309, 1409, 11, 558, 30, 50864, 50864, 407, 689, 309, 1409, 293, 437, 286, 390, 733, 295, 3102, 294, 307, 456, 645, 732, 4455, 11, 51164, 51164, 472, 337, 589, 293, 472, 300, 286, 445, 1415, 484, 456, 11, 51314, 51314, 457, 1310, 7340, 281, 589, 300, 286, 1415, 13, 51414, 51414, 467, 311, 668, 322, 452, 1575, 337, 257, 1339, 13, 51514, 51514, 400, 472, 295, 552, 390, 11, 286, 390, 534, 6369, 281, 1322, 460, 13695, 568, 13, 15, 1333, 295, 31958, 11, 558, 30, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.134958771634693, "compression_ratio": 1.6254681647940075, "no_caption_prob": 5.0640701374504715e-05}, {"id": 81, "seek": 22500, "start": 232.0, "end": 235.0, "text": " or like that's not where it started, right?", "tokens": [50364, 1743, 1310, 264, 41066, 5110, 11, 50564, 50564, 570, 286, 994, 380, 767, 992, 484, 281, 652, 257, 3089, 1049, 2290, 11, 50714, 50714, 420, 411, 300, 311, 406, 689, 309, 1409, 11, 558, 30, 50864, 50864, 407, 689, 309, 1409, 293, 437, 286, 390, 733, 295, 3102, 294, 307, 456, 645, 732, 4455, 11, 51164, 51164, 472, 337, 589, 293, 472, 300, 286, 445, 1415, 484, 456, 11, 51314, 51314, 457, 1310, 7340, 281, 589, 300, 286, 1415, 13, 51414, 51414, 467, 311, 668, 322, 452, 1575, 337, 257, 1339, 13, 51514, 51514, 400, 472, 295, 552, 390, 11, 286, 390, 534, 6369, 281, 1322, 460, 13695, 568, 13, 15, 1333, 295, 31958, 11, 558, 30, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.134958771634693, "compression_ratio": 1.6254681647940075, "no_caption_prob": 5.0640701374504715e-05}, {"id": 82, "seek": 22500, "start": 235.0, "end": 241.0, "text": " So where it started and what I was kind of interested in is there were two projects,", "tokens": [50364, 1743, 1310, 264, 41066, 5110, 11, 50564, 50564, 570, 286, 994, 380, 767, 992, 484, 281, 652, 257, 3089, 1049, 2290, 11, 50714, 50714, 420, 411, 300, 311, 406, 689, 309, 1409, 11, 558, 30, 50864, 50864, 407, 689, 309, 1409, 293, 437, 286, 390, 733, 295, 3102, 294, 307, 456, 645, 732, 4455, 11, 51164, 51164, 472, 337, 589, 293, 472, 300, 286, 445, 1415, 484, 456, 11, 51314, 51314, 457, 1310, 7340, 281, 589, 300, 286, 1415, 13, 51414, 51414, 467, 311, 668, 322, 452, 1575, 337, 257, 1339, 13, 51514, 51514, 400, 472, 295, 552, 390, 11, 286, 390, 534, 6369, 281, 1322, 460, 13695, 568, 13, 15, 1333, 295, 31958, 11, 558, 30, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.134958771634693, "compression_ratio": 1.6254681647940075, "no_caption_prob": 5.0640701374504715e-05}, {"id": 83, "seek": 22500, "start": 241.0, "end": 244.0, "text": " one for work and one that I just wanted out there,", "tokens": [50364, 1743, 1310, 264, 41066, 5110, 11, 50564, 50564, 570, 286, 994, 380, 767, 992, 484, 281, 652, 257, 3089, 1049, 2290, 11, 50714, 50714, 420, 411, 300, 311, 406, 689, 309, 1409, 11, 558, 30, 50864, 50864, 407, 689, 309, 1409, 293, 437, 286, 390, 733, 295, 3102, 294, 307, 456, 645, 732, 4455, 11, 51164, 51164, 472, 337, 589, 293, 472, 300, 286, 445, 1415, 484, 456, 11, 51314, 51314, 457, 1310, 7340, 281, 589, 300, 286, 1415, 13, 51414, 51414, 467, 311, 668, 322, 452, 1575, 337, 257, 1339, 13, 51514, 51514, 400, 472, 295, 552, 390, 11, 286, 390, 534, 6369, 281, 1322, 460, 13695, 568, 13, 15, 1333, 295, 31958, 11, 558, 30, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.134958771634693, "compression_ratio": 1.6254681647940075, "no_caption_prob": 5.0640701374504715e-05}, {"id": 84, "seek": 22500, "start": 244.0, "end": 246.0, "text": " but maybe relevant to work that I wanted.", "tokens": [50364, 1743, 1310, 264, 41066, 5110, 11, 50564, 50564, 570, 286, 994, 380, 767, 992, 484, 281, 652, 257, 3089, 1049, 2290, 11, 50714, 50714, 420, 411, 300, 311, 406, 689, 309, 1409, 11, 558, 30, 50864, 50864, 407, 689, 309, 1409, 293, 437, 286, 390, 733, 295, 3102, 294, 307, 456, 645, 732, 4455, 11, 51164, 51164, 472, 337, 589, 293, 472, 300, 286, 445, 1415, 484, 456, 11, 51314, 51314, 457, 1310, 7340, 281, 589, 300, 286, 1415, 13, 51414, 51414, 467, 311, 668, 322, 452, 1575, 337, 257, 1339, 13, 51514, 51514, 400, 472, 295, 552, 390, 11, 286, 390, 534, 6369, 281, 1322, 460, 13695, 568, 13, 15, 1333, 295, 31958, 11, 558, 30, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.134958771634693, "compression_ratio": 1.6254681647940075, "no_caption_prob": 5.0640701374504715e-05}, {"id": 85, "seek": 22500, "start": 246.0, "end": 248.0, "text": " It's been on my mind for a while.", "tokens": [50364, 1743, 1310, 264, 41066, 5110, 11, 50564, 50564, 570, 286, 994, 380, 767, 992, 484, 281, 652, 257, 3089, 1049, 2290, 11, 50714, 50714, 420, 411, 300, 311, 406, 689, 309, 1409, 11, 558, 30, 50864, 50864, 407, 689, 309, 1409, 293, 437, 286, 390, 733, 295, 3102, 294, 307, 456, 645, 732, 4455, 11, 51164, 51164, 472, 337, 589, 293, 472, 300, 286, 445, 1415, 484, 456, 11, 51314, 51314, 457, 1310, 7340, 281, 589, 300, 286, 1415, 13, 51414, 51414, 467, 311, 668, 322, 452, 1575, 337, 257, 1339, 13, 51514, 51514, 400, 472, 295, 552, 390, 11, 286, 390, 534, 6369, 281, 1322, 460, 13695, 568, 13, 15, 1333, 295, 31958, 11, 558, 30, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.134958771634693, "compression_ratio": 1.6254681647940075, "no_caption_prob": 5.0640701374504715e-05}, {"id": 86, "seek": 22500, "start": 248.0, "end": 254.0, "text": " And one of them was, I was really curious to build GQL 2.0 sort of compiler, right?", "tokens": [50364, 1743, 1310, 264, 41066, 5110, 11, 50564, 50564, 570, 286, 994, 380, 767, 992, 484, 281, 652, 257, 3089, 1049, 2290, 11, 50714, 50714, 420, 411, 300, 311, 406, 689, 309, 1409, 11, 558, 30, 50864, 50864, 407, 689, 309, 1409, 293, 437, 286, 390, 733, 295, 3102, 294, 307, 456, 645, 732, 4455, 11, 51164, 51164, 472, 337, 589, 293, 472, 300, 286, 445, 1415, 484, 456, 11, 51314, 51314, 457, 1310, 7340, 281, 589, 300, 286, 1415, 13, 51414, 51414, 467, 311, 668, 322, 452, 1575, 337, 257, 1339, 13, 51514, 51514, 400, 472, 295, 552, 390, 11, 286, 390, 534, 6369, 281, 1322, 460, 13695, 568, 13, 15, 1333, 295, 31958, 11, 558, 30, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.134958771634693, "compression_ratio": 1.6254681647940075, "no_caption_prob": 5.0640701374504715e-05}, {"id": 87, "seek": 25400, "start": 254.0, "end": 257.0, "text": " Read a little GQL query or mutation,", "tokens": [50364, 17604, 257, 707, 460, 13695, 14581, 420, 27960, 11, 50514, 50514, 8460, 512, 534, 1481, 2699, 76, 3089, 300, 291, 727, 4648, 365, 13, 50714, 50714, 407, 11, 293, 456, 311, 257, 1379, 5017, 456, 300, 286, 458, 28160, 486, 362, 13, 50964, 50964, 1079, 11, 321, 576, 959, 281, 362, 291, 322, 337, 300, 13, 51114, 51114, 400, 445, 281, 17594, 337, 2878, 567, 1177, 380, 458, 460, 13695, 11, 291, 434, 1417, 466, 21884, 13695, 13, 51314, 51314, 21884, 13695, 11, 300, 311, 558, 13, 51364, 51364, 663, 311, 558, 13, 51414, 51414, 407, 456, 311, 411, 11, 1392, 11, 286, 528, 281, 312, 1075, 281, 8460, 512, 3089, 11, 51564, 51564, 411, 3760, 4476, 257, 14581, 11, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.10538992574138026, "compression_ratio": 1.6217228464419475, "no_caption_prob": 4.264507151674479e-05}, {"id": 88, "seek": 25400, "start": 257.0, "end": 261.0, "text": " generate some really nice Elm code that you could interact with.", "tokens": [50364, 17604, 257, 707, 460, 13695, 14581, 420, 27960, 11, 50514, 50514, 8460, 512, 534, 1481, 2699, 76, 3089, 300, 291, 727, 4648, 365, 13, 50714, 50714, 407, 11, 293, 456, 311, 257, 1379, 5017, 456, 300, 286, 458, 28160, 486, 362, 13, 50964, 50964, 1079, 11, 321, 576, 959, 281, 362, 291, 322, 337, 300, 13, 51114, 51114, 400, 445, 281, 17594, 337, 2878, 567, 1177, 380, 458, 460, 13695, 11, 291, 434, 1417, 466, 21884, 13695, 13, 51314, 51314, 21884, 13695, 11, 300, 311, 558, 13, 51364, 51364, 663, 311, 558, 13, 51414, 51414, 407, 456, 311, 411, 11, 1392, 11, 286, 528, 281, 312, 1075, 281, 8460, 512, 3089, 11, 51564, 51564, 411, 3760, 4476, 257, 14581, 11, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.10538992574138026, "compression_ratio": 1.6217228464419475, "no_caption_prob": 4.264507151674479e-05}, {"id": 89, "seek": 25400, "start": 261.0, "end": 266.0, "text": " So, and there's a whole discussion there that I know Dylan will have.", "tokens": [50364, 17604, 257, 707, 460, 13695, 14581, 420, 27960, 11, 50514, 50514, 8460, 512, 534, 1481, 2699, 76, 3089, 300, 291, 727, 4648, 365, 13, 50714, 50714, 407, 11, 293, 456, 311, 257, 1379, 5017, 456, 300, 286, 458, 28160, 486, 362, 13, 50964, 50964, 1079, 11, 321, 576, 959, 281, 362, 291, 322, 337, 300, 13, 51114, 51114, 400, 445, 281, 17594, 337, 2878, 567, 1177, 380, 458, 460, 13695, 11, 291, 434, 1417, 466, 21884, 13695, 13, 51314, 51314, 21884, 13695, 11, 300, 311, 558, 13, 51364, 51364, 663, 311, 558, 13, 51414, 51414, 407, 456, 311, 411, 11, 1392, 11, 286, 528, 281, 312, 1075, 281, 8460, 512, 3089, 11, 51564, 51564, 411, 3760, 4476, 257, 14581, 11, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.10538992574138026, "compression_ratio": 1.6217228464419475, "no_caption_prob": 4.264507151674479e-05}, {"id": 90, "seek": 25400, "start": 266.0, "end": 269.0, "text": " Yes, we would love to have you on for that.", "tokens": [50364, 17604, 257, 707, 460, 13695, 14581, 420, 27960, 11, 50514, 50514, 8460, 512, 534, 1481, 2699, 76, 3089, 300, 291, 727, 4648, 365, 13, 50714, 50714, 407, 11, 293, 456, 311, 257, 1379, 5017, 456, 300, 286, 458, 28160, 486, 362, 13, 50964, 50964, 1079, 11, 321, 576, 959, 281, 362, 291, 322, 337, 300, 13, 51114, 51114, 400, 445, 281, 17594, 337, 2878, 567, 1177, 380, 458, 460, 13695, 11, 291, 434, 1417, 466, 21884, 13695, 13, 51314, 51314, 21884, 13695, 11, 300, 311, 558, 13, 51364, 51364, 663, 311, 558, 13, 51414, 51414, 407, 456, 311, 411, 11, 1392, 11, 286, 528, 281, 312, 1075, 281, 8460, 512, 3089, 11, 51564, 51564, 411, 3760, 4476, 257, 14581, 11, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.10538992574138026, "compression_ratio": 1.6217228464419475, "no_caption_prob": 4.264507151674479e-05}, {"id": 91, "seek": 25400, "start": 269.0, "end": 273.0, "text": " And just to clarify for anyone who doesn't know GQL, you're talking about GraphQL.", "tokens": [50364, 17604, 257, 707, 460, 13695, 14581, 420, 27960, 11, 50514, 50514, 8460, 512, 534, 1481, 2699, 76, 3089, 300, 291, 727, 4648, 365, 13, 50714, 50714, 407, 11, 293, 456, 311, 257, 1379, 5017, 456, 300, 286, 458, 28160, 486, 362, 13, 50964, 50964, 1079, 11, 321, 576, 959, 281, 362, 291, 322, 337, 300, 13, 51114, 51114, 400, 445, 281, 17594, 337, 2878, 567, 1177, 380, 458, 460, 13695, 11, 291, 434, 1417, 466, 21884, 13695, 13, 51314, 51314, 21884, 13695, 11, 300, 311, 558, 13, 51364, 51364, 663, 311, 558, 13, 51414, 51414, 407, 456, 311, 411, 11, 1392, 11, 286, 528, 281, 312, 1075, 281, 8460, 512, 3089, 11, 51564, 51564, 411, 3760, 4476, 257, 14581, 11, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.10538992574138026, "compression_ratio": 1.6217228464419475, "no_caption_prob": 4.264507151674479e-05}, {"id": 92, "seek": 25400, "start": 273.0, "end": 274.0, "text": " GraphQL, that's right.", "tokens": [50364, 17604, 257, 707, 460, 13695, 14581, 420, 27960, 11, 50514, 50514, 8460, 512, 534, 1481, 2699, 76, 3089, 300, 291, 727, 4648, 365, 13, 50714, 50714, 407, 11, 293, 456, 311, 257, 1379, 5017, 456, 300, 286, 458, 28160, 486, 362, 13, 50964, 50964, 1079, 11, 321, 576, 959, 281, 362, 291, 322, 337, 300, 13, 51114, 51114, 400, 445, 281, 17594, 337, 2878, 567, 1177, 380, 458, 460, 13695, 11, 291, 434, 1417, 466, 21884, 13695, 13, 51314, 51314, 21884, 13695, 11, 300, 311, 558, 13, 51364, 51364, 663, 311, 558, 13, 51414, 51414, 407, 456, 311, 411, 11, 1392, 11, 286, 528, 281, 312, 1075, 281, 8460, 512, 3089, 11, 51564, 51564, 411, 3760, 4476, 257, 14581, 11, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.10538992574138026, "compression_ratio": 1.6217228464419475, "no_caption_prob": 4.264507151674479e-05}, {"id": 93, "seek": 25400, "start": 274.0, "end": 275.0, "text": " That's right.", "tokens": [50364, 17604, 257, 707, 460, 13695, 14581, 420, 27960, 11, 50514, 50514, 8460, 512, 534, 1481, 2699, 76, 3089, 300, 291, 727, 4648, 365, 13, 50714, 50714, 407, 11, 293, 456, 311, 257, 1379, 5017, 456, 300, 286, 458, 28160, 486, 362, 13, 50964, 50964, 1079, 11, 321, 576, 959, 281, 362, 291, 322, 337, 300, 13, 51114, 51114, 400, 445, 281, 17594, 337, 2878, 567, 1177, 380, 458, 460, 13695, 11, 291, 434, 1417, 466, 21884, 13695, 13, 51314, 51314, 21884, 13695, 11, 300, 311, 558, 13, 51364, 51364, 663, 311, 558, 13, 51414, 51414, 407, 456, 311, 411, 11, 1392, 11, 286, 528, 281, 312, 1075, 281, 8460, 512, 3089, 11, 51564, 51564, 411, 3760, 4476, 257, 14581, 11, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.10538992574138026, "compression_ratio": 1.6217228464419475, "no_caption_prob": 4.264507151674479e-05}, {"id": 94, "seek": 25400, "start": 275.0, "end": 278.0, "text": " So there's like, okay, I want to be able to generate some code,", "tokens": [50364, 17604, 257, 707, 460, 13695, 14581, 420, 27960, 11, 50514, 50514, 8460, 512, 534, 1481, 2699, 76, 3089, 300, 291, 727, 4648, 365, 13, 50714, 50714, 407, 11, 293, 456, 311, 257, 1379, 5017, 456, 300, 286, 458, 28160, 486, 362, 13, 50964, 50964, 1079, 11, 321, 576, 959, 281, 362, 291, 322, 337, 300, 13, 51114, 51114, 400, 445, 281, 17594, 337, 2878, 567, 1177, 380, 458, 460, 13695, 11, 291, 434, 1417, 466, 21884, 13695, 13, 51314, 51314, 21884, 13695, 11, 300, 311, 558, 13, 51364, 51364, 663, 311, 558, 13, 51414, 51414, 407, 456, 311, 411, 11, 1392, 11, 286, 528, 281, 312, 1075, 281, 8460, 512, 3089, 11, 51564, 51564, 411, 3760, 4476, 257, 14581, 11, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.10538992574138026, "compression_ratio": 1.6217228464419475, "no_caption_prob": 4.264507151674479e-05}, {"id": 95, "seek": 25400, "start": 278.0, "end": 281.0, "text": " like reading essentially a query,", "tokens": [50364, 17604, 257, 707, 460, 13695, 14581, 420, 27960, 11, 50514, 50514, 8460, 512, 534, 1481, 2699, 76, 3089, 300, 291, 727, 4648, 365, 13, 50714, 50714, 407, 11, 293, 456, 311, 257, 1379, 5017, 456, 300, 286, 458, 28160, 486, 362, 13, 50964, 50964, 1079, 11, 321, 576, 959, 281, 362, 291, 322, 337, 300, 13, 51114, 51114, 400, 445, 281, 17594, 337, 2878, 567, 1177, 380, 458, 460, 13695, 11, 291, 434, 1417, 466, 21884, 13695, 13, 51314, 51314, 21884, 13695, 11, 300, 311, 558, 13, 51364, 51364, 663, 311, 558, 13, 51414, 51414, 407, 456, 311, 411, 11, 1392, 11, 286, 528, 281, 312, 1075, 281, 8460, 512, 3089, 11, 51564, 51564, 411, 3760, 4476, 257, 14581, 11, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.10538992574138026, "compression_ratio": 1.6217228464419475, "no_caption_prob": 4.264507151674479e-05}, {"id": 96, "seek": 28100, "start": 281.0, "end": 284.0, "text": " maybe do some checking and generate some Elm code.", "tokens": [50364, 1310, 360, 512, 8568, 293, 8460, 512, 2699, 76, 3089, 13, 50514, 50514, 663, 311, 257, 979, 2276, 3997, 6916, 767, 13, 50614, 50614, 407, 309, 311, 733, 295, 257, 1238, 12649, 764, 1389, 13, 50714, 50714, 467, 311, 406, 1596, 382, 12649, 382, 1310, 428, 1065, 11, 50864, 50864, 291, 434, 1143, 281, 6260, 365, 2699, 76, 3131, 885, 411, 2699, 76, 3131, 3191, 295, 411, 11, 51064, 51064, 321, 434, 516, 281, 4471, 257, 1577, 316, 6840, 281, 257, 1577, 316, 6840, 11, 558, 30, 51264, 51264, 1692, 321, 434, 1940, 257, 4356, 4846, 13, 51364, 51364, 467, 311, 406, 300, 709, 4356, 11, 457, 309, 307, 4356, 13, 51464, 51464, 467, 311, 264, 316, 6840, 295, 428, 21884, 13695, 11, 2139, 428, 14581, 420, 264, 34078, 11, 51664, 51664, 1310, 884, 512, 721, 411, 8568, 11, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.07911086582637333, "compression_ratio": 1.7222222222222223, "no_caption_prob": 4.757238639285788e-05}, {"id": 97, "seek": 28100, "start": 284.0, "end": 286.0, "text": " That's a decently complex operation actually.", "tokens": [50364, 1310, 360, 512, 8568, 293, 8460, 512, 2699, 76, 3089, 13, 50514, 50514, 663, 311, 257, 979, 2276, 3997, 6916, 767, 13, 50614, 50614, 407, 309, 311, 733, 295, 257, 1238, 12649, 764, 1389, 13, 50714, 50714, 467, 311, 406, 1596, 382, 12649, 382, 1310, 428, 1065, 11, 50864, 50864, 291, 434, 1143, 281, 6260, 365, 2699, 76, 3131, 885, 411, 2699, 76, 3131, 3191, 295, 411, 11, 51064, 51064, 321, 434, 516, 281, 4471, 257, 1577, 316, 6840, 281, 257, 1577, 316, 6840, 11, 558, 30, 51264, 51264, 1692, 321, 434, 1940, 257, 4356, 4846, 13, 51364, 51364, 467, 311, 406, 300, 709, 4356, 11, 457, 309, 307, 4356, 13, 51464, 51464, 467, 311, 264, 316, 6840, 295, 428, 21884, 13695, 11, 2139, 428, 14581, 420, 264, 34078, 11, 51664, 51664, 1310, 884, 512, 721, 411, 8568, 11, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.07911086582637333, "compression_ratio": 1.7222222222222223, "no_caption_prob": 4.757238639285788e-05}, {"id": 98, "seek": 28100, "start": 286.0, "end": 288.0, "text": " So it's kind of a pretty abstract use case.", "tokens": [50364, 1310, 360, 512, 8568, 293, 8460, 512, 2699, 76, 3089, 13, 50514, 50514, 663, 311, 257, 979, 2276, 3997, 6916, 767, 13, 50614, 50614, 407, 309, 311, 733, 295, 257, 1238, 12649, 764, 1389, 13, 50714, 50714, 467, 311, 406, 1596, 382, 12649, 382, 1310, 428, 1065, 11, 50864, 50864, 291, 434, 1143, 281, 6260, 365, 2699, 76, 3131, 885, 411, 2699, 76, 3131, 3191, 295, 411, 11, 51064, 51064, 321, 434, 516, 281, 4471, 257, 1577, 316, 6840, 281, 257, 1577, 316, 6840, 11, 558, 30, 51264, 51264, 1692, 321, 434, 1940, 257, 4356, 4846, 13, 51364, 51364, 467, 311, 406, 300, 709, 4356, 11, 457, 309, 307, 4356, 13, 51464, 51464, 467, 311, 264, 316, 6840, 295, 428, 21884, 13695, 11, 2139, 428, 14581, 420, 264, 34078, 11, 51664, 51664, 1310, 884, 512, 721, 411, 8568, 11, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.07911086582637333, "compression_ratio": 1.7222222222222223, "no_caption_prob": 4.757238639285788e-05}, {"id": 99, "seek": 28100, "start": 288.0, "end": 291.0, "text": " It's not quite as abstract as maybe your own,", "tokens": [50364, 1310, 360, 512, 8568, 293, 8460, 512, 2699, 76, 3089, 13, 50514, 50514, 663, 311, 257, 979, 2276, 3997, 6916, 767, 13, 50614, 50614, 407, 309, 311, 733, 295, 257, 1238, 12649, 764, 1389, 13, 50714, 50714, 467, 311, 406, 1596, 382, 12649, 382, 1310, 428, 1065, 11, 50864, 50864, 291, 434, 1143, 281, 6260, 365, 2699, 76, 3131, 885, 411, 2699, 76, 3131, 3191, 295, 411, 11, 51064, 51064, 321, 434, 516, 281, 4471, 257, 1577, 316, 6840, 281, 257, 1577, 316, 6840, 11, 558, 30, 51264, 51264, 1692, 321, 434, 1940, 257, 4356, 4846, 13, 51364, 51364, 467, 311, 406, 300, 709, 4356, 11, 457, 309, 307, 4356, 13, 51464, 51464, 467, 311, 264, 316, 6840, 295, 428, 21884, 13695, 11, 2139, 428, 14581, 420, 264, 34078, 11, 51664, 51664, 1310, 884, 512, 721, 411, 8568, 11, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.07911086582637333, "compression_ratio": 1.7222222222222223, "no_caption_prob": 4.757238639285788e-05}, {"id": 100, "seek": 28100, "start": 291.0, "end": 295.0, "text": " you're used to dealing with Elm review being like Elm review fix of like,", "tokens": [50364, 1310, 360, 512, 8568, 293, 8460, 512, 2699, 76, 3089, 13, 50514, 50514, 663, 311, 257, 979, 2276, 3997, 6916, 767, 13, 50614, 50614, 407, 309, 311, 733, 295, 257, 1238, 12649, 764, 1389, 13, 50714, 50714, 467, 311, 406, 1596, 382, 12649, 382, 1310, 428, 1065, 11, 50864, 50864, 291, 434, 1143, 281, 6260, 365, 2699, 76, 3131, 885, 411, 2699, 76, 3131, 3191, 295, 411, 11, 51064, 51064, 321, 434, 516, 281, 4471, 257, 1577, 316, 6840, 281, 257, 1577, 316, 6840, 11, 558, 30, 51264, 51264, 1692, 321, 434, 1940, 257, 4356, 4846, 13, 51364, 51364, 467, 311, 406, 300, 709, 4356, 11, 457, 309, 307, 4356, 13, 51464, 51464, 467, 311, 264, 316, 6840, 295, 428, 21884, 13695, 11, 2139, 428, 14581, 420, 264, 34078, 11, 51664, 51664, 1310, 884, 512, 721, 411, 8568, 11, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.07911086582637333, "compression_ratio": 1.7222222222222223, "no_caption_prob": 4.757238639285788e-05}, {"id": 101, "seek": 28100, "start": 295.0, "end": 299.0, "text": " we're going to map a full AST to a full AST, right?", "tokens": [50364, 1310, 360, 512, 8568, 293, 8460, 512, 2699, 76, 3089, 13, 50514, 50514, 663, 311, 257, 979, 2276, 3997, 6916, 767, 13, 50614, 50614, 407, 309, 311, 733, 295, 257, 1238, 12649, 764, 1389, 13, 50714, 50714, 467, 311, 406, 1596, 382, 12649, 382, 1310, 428, 1065, 11, 50864, 50864, 291, 434, 1143, 281, 6260, 365, 2699, 76, 3131, 885, 411, 2699, 76, 3131, 3191, 295, 411, 11, 51064, 51064, 321, 434, 516, 281, 4471, 257, 1577, 316, 6840, 281, 257, 1577, 316, 6840, 11, 558, 30, 51264, 51264, 1692, 321, 434, 1940, 257, 4356, 4846, 13, 51364, 51364, 467, 311, 406, 300, 709, 4356, 11, 457, 309, 307, 4356, 13, 51464, 51464, 467, 311, 264, 316, 6840, 295, 428, 21884, 13695, 11, 2139, 428, 14581, 420, 264, 34078, 11, 51664, 51664, 1310, 884, 512, 721, 411, 8568, 11, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.07911086582637333, "compression_ratio": 1.7222222222222223, "no_caption_prob": 4.757238639285788e-05}, {"id": 102, "seek": 28100, "start": 299.0, "end": 301.0, "text": " Here we're taking a smaller input.", "tokens": [50364, 1310, 360, 512, 8568, 293, 8460, 512, 2699, 76, 3089, 13, 50514, 50514, 663, 311, 257, 979, 2276, 3997, 6916, 767, 13, 50614, 50614, 407, 309, 311, 733, 295, 257, 1238, 12649, 764, 1389, 13, 50714, 50714, 467, 311, 406, 1596, 382, 12649, 382, 1310, 428, 1065, 11, 50864, 50864, 291, 434, 1143, 281, 6260, 365, 2699, 76, 3131, 885, 411, 2699, 76, 3131, 3191, 295, 411, 11, 51064, 51064, 321, 434, 516, 281, 4471, 257, 1577, 316, 6840, 281, 257, 1577, 316, 6840, 11, 558, 30, 51264, 51264, 1692, 321, 434, 1940, 257, 4356, 4846, 13, 51364, 51364, 467, 311, 406, 300, 709, 4356, 11, 457, 309, 307, 4356, 13, 51464, 51464, 467, 311, 264, 316, 6840, 295, 428, 21884, 13695, 11, 2139, 428, 14581, 420, 264, 34078, 11, 51664, 51664, 1310, 884, 512, 721, 411, 8568, 11, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.07911086582637333, "compression_ratio": 1.7222222222222223, "no_caption_prob": 4.757238639285788e-05}, {"id": 103, "seek": 28100, "start": 301.0, "end": 303.0, "text": " It's not that much smaller, but it is smaller.", "tokens": [50364, 1310, 360, 512, 8568, 293, 8460, 512, 2699, 76, 3089, 13, 50514, 50514, 663, 311, 257, 979, 2276, 3997, 6916, 767, 13, 50614, 50614, 407, 309, 311, 733, 295, 257, 1238, 12649, 764, 1389, 13, 50714, 50714, 467, 311, 406, 1596, 382, 12649, 382, 1310, 428, 1065, 11, 50864, 50864, 291, 434, 1143, 281, 6260, 365, 2699, 76, 3131, 885, 411, 2699, 76, 3131, 3191, 295, 411, 11, 51064, 51064, 321, 434, 516, 281, 4471, 257, 1577, 316, 6840, 281, 257, 1577, 316, 6840, 11, 558, 30, 51264, 51264, 1692, 321, 434, 1940, 257, 4356, 4846, 13, 51364, 51364, 467, 311, 406, 300, 709, 4356, 11, 457, 309, 307, 4356, 13, 51464, 51464, 467, 311, 264, 316, 6840, 295, 428, 21884, 13695, 11, 2139, 428, 14581, 420, 264, 34078, 11, 51664, 51664, 1310, 884, 512, 721, 411, 8568, 11, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.07911086582637333, "compression_ratio": 1.7222222222222223, "no_caption_prob": 4.757238639285788e-05}, {"id": 104, "seek": 28100, "start": 303.0, "end": 307.0, "text": " It's the AST of your GraphQL, either your query or the schema,", "tokens": [50364, 1310, 360, 512, 8568, 293, 8460, 512, 2699, 76, 3089, 13, 50514, 50514, 663, 311, 257, 979, 2276, 3997, 6916, 767, 13, 50614, 50614, 407, 309, 311, 733, 295, 257, 1238, 12649, 764, 1389, 13, 50714, 50714, 467, 311, 406, 1596, 382, 12649, 382, 1310, 428, 1065, 11, 50864, 50864, 291, 434, 1143, 281, 6260, 365, 2699, 76, 3131, 885, 411, 2699, 76, 3131, 3191, 295, 411, 11, 51064, 51064, 321, 434, 516, 281, 4471, 257, 1577, 316, 6840, 281, 257, 1577, 316, 6840, 11, 558, 30, 51264, 51264, 1692, 321, 434, 1940, 257, 4356, 4846, 13, 51364, 51364, 467, 311, 406, 300, 709, 4356, 11, 457, 309, 307, 4356, 13, 51464, 51464, 467, 311, 264, 316, 6840, 295, 428, 21884, 13695, 11, 2139, 428, 14581, 420, 264, 34078, 11, 51664, 51664, 1310, 884, 512, 721, 411, 8568, 11, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.07911086582637333, "compression_ratio": 1.7222222222222223, "no_caption_prob": 4.757238639285788e-05}, {"id": 105, "seek": 28100, "start": 307.0, "end": 309.0, "text": " maybe doing some things like checking,", "tokens": [50364, 1310, 360, 512, 8568, 293, 8460, 512, 2699, 76, 3089, 13, 50514, 50514, 663, 311, 257, 979, 2276, 3997, 6916, 767, 13, 50614, 50614, 407, 309, 311, 733, 295, 257, 1238, 12649, 764, 1389, 13, 50714, 50714, 467, 311, 406, 1596, 382, 12649, 382, 1310, 428, 1065, 11, 50864, 50864, 291, 434, 1143, 281, 6260, 365, 2699, 76, 3131, 885, 411, 2699, 76, 3131, 3191, 295, 411, 11, 51064, 51064, 321, 434, 516, 281, 4471, 257, 1577, 316, 6840, 281, 257, 1577, 316, 6840, 11, 558, 30, 51264, 51264, 1692, 321, 434, 1940, 257, 4356, 4846, 13, 51364, 51364, 467, 311, 406, 300, 709, 4356, 11, 457, 309, 307, 4356, 13, 51464, 51464, 467, 311, 264, 316, 6840, 295, 428, 21884, 13695, 11, 2139, 428, 14581, 420, 264, 34078, 11, 51664, 51664, 1310, 884, 512, 721, 411, 8568, 11, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.07911086582637333, "compression_ratio": 1.7222222222222223, "no_caption_prob": 4.757238639285788e-05}, {"id": 106, "seek": 30900, "start": 309.0, "end": 314.0, "text": " type checking it saying like, okay, like you're only asking for fields you expect", "tokens": [50364, 2010, 8568, 309, 1566, 411, 11, 1392, 11, 411, 291, 434, 787, 3365, 337, 7909, 291, 2066, 50614, 50614, 293, 550, 17746, 512, 2699, 76, 3089, 13, 50714, 50714, 407, 291, 434, 920, 1242, 264, 316, 6840, 322, 264, 5125, 1252, 13, 50814, 50814, 865, 13, 50864, 50864, 1449, 281, 17594, 2699, 76, 3131, 1177, 380, 589, 365, 11, 50964, 50964, 291, 500, 380, 976, 309, 364, 316, 6840, 11, 291, 20459, 264, 13985, 13, 51164, 51164, 708, 30, 51214, 51214, 865, 13, 51264, 51264, 25538, 279, 366, 445, 4473, 11, 46567, 11, 48946, 13985, 11, 597, 307, 485, 51614, 51614, 663, 311, 1880, 570, 309, 311, 406, 11, 291, 434, 1228, 2699, 76, 28431, 1673, 11, 558, 30, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.15690001821130273, "compression_ratio": 1.6240601503759398, "no_caption_prob": 8.092355710687116e-05}, {"id": 107, "seek": 30900, "start": 314.0, "end": 316.0, "text": " and then generating some Elm code.", "tokens": [50364, 2010, 8568, 309, 1566, 411, 11, 1392, 11, 411, 291, 434, 787, 3365, 337, 7909, 291, 2066, 50614, 50614, 293, 550, 17746, 512, 2699, 76, 3089, 13, 50714, 50714, 407, 291, 434, 920, 1242, 264, 316, 6840, 322, 264, 5125, 1252, 13, 50814, 50814, 865, 13, 50864, 50864, 1449, 281, 17594, 2699, 76, 3131, 1177, 380, 589, 365, 11, 50964, 50964, 291, 500, 380, 976, 309, 364, 316, 6840, 11, 291, 20459, 264, 13985, 13, 51164, 51164, 708, 30, 51214, 51214, 865, 13, 51264, 51264, 25538, 279, 366, 445, 4473, 11, 46567, 11, 48946, 13985, 11, 597, 307, 485, 51614, 51614, 663, 311, 1880, 570, 309, 311, 406, 11, 291, 434, 1228, 2699, 76, 28431, 1673, 11, 558, 30, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.15690001821130273, "compression_ratio": 1.6240601503759398, "no_caption_prob": 8.092355710687116e-05}, {"id": 108, "seek": 30900, "start": 316.0, "end": 318.0, "text": " So you're still getting the AST on the generation side.", "tokens": [50364, 2010, 8568, 309, 1566, 411, 11, 1392, 11, 411, 291, 434, 787, 3365, 337, 7909, 291, 2066, 50614, 50614, 293, 550, 17746, 512, 2699, 76, 3089, 13, 50714, 50714, 407, 291, 434, 920, 1242, 264, 316, 6840, 322, 264, 5125, 1252, 13, 50814, 50814, 865, 13, 50864, 50864, 1449, 281, 17594, 2699, 76, 3131, 1177, 380, 589, 365, 11, 50964, 50964, 291, 500, 380, 976, 309, 364, 316, 6840, 11, 291, 20459, 264, 13985, 13, 51164, 51164, 708, 30, 51214, 51214, 865, 13, 51264, 51264, 25538, 279, 366, 445, 4473, 11, 46567, 11, 48946, 13985, 11, 597, 307, 485, 51614, 51614, 663, 311, 1880, 570, 309, 311, 406, 11, 291, 434, 1228, 2699, 76, 28431, 1673, 11, 558, 30, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.15690001821130273, "compression_ratio": 1.6240601503759398, "no_caption_prob": 8.092355710687116e-05}, {"id": 109, "seek": 30900, "start": 318.0, "end": 319.0, "text": " Yeah.", "tokens": [50364, 2010, 8568, 309, 1566, 411, 11, 1392, 11, 411, 291, 434, 787, 3365, 337, 7909, 291, 2066, 50614, 50614, 293, 550, 17746, 512, 2699, 76, 3089, 13, 50714, 50714, 407, 291, 434, 920, 1242, 264, 316, 6840, 322, 264, 5125, 1252, 13, 50814, 50814, 865, 13, 50864, 50864, 1449, 281, 17594, 2699, 76, 3131, 1177, 380, 589, 365, 11, 50964, 50964, 291, 500, 380, 976, 309, 364, 316, 6840, 11, 291, 20459, 264, 13985, 13, 51164, 51164, 708, 30, 51214, 51214, 865, 13, 51264, 51264, 25538, 279, 366, 445, 4473, 11, 46567, 11, 48946, 13985, 11, 597, 307, 485, 51614, 51614, 663, 311, 1880, 570, 309, 311, 406, 11, 291, 434, 1228, 2699, 76, 28431, 1673, 11, 558, 30, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.15690001821130273, "compression_ratio": 1.6240601503759398, "no_caption_prob": 8.092355710687116e-05}, {"id": 110, "seek": 30900, "start": 319.0, "end": 321.0, "text": " Just to clarify Elm review doesn't work with,", "tokens": [50364, 2010, 8568, 309, 1566, 411, 11, 1392, 11, 411, 291, 434, 787, 3365, 337, 7909, 291, 2066, 50614, 50614, 293, 550, 17746, 512, 2699, 76, 3089, 13, 50714, 50714, 407, 291, 434, 920, 1242, 264, 316, 6840, 322, 264, 5125, 1252, 13, 50814, 50814, 865, 13, 50864, 50864, 1449, 281, 17594, 2699, 76, 3131, 1177, 380, 589, 365, 11, 50964, 50964, 291, 500, 380, 976, 309, 364, 316, 6840, 11, 291, 20459, 264, 13985, 13, 51164, 51164, 708, 30, 51214, 51214, 865, 13, 51264, 51264, 25538, 279, 366, 445, 4473, 11, 46567, 11, 48946, 13985, 11, 597, 307, 485, 51614, 51614, 663, 311, 1880, 570, 309, 311, 406, 11, 291, 434, 1228, 2699, 76, 28431, 1673, 11, 558, 30, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.15690001821130273, "compression_ratio": 1.6240601503759398, "no_caption_prob": 8.092355710687116e-05}, {"id": 111, "seek": 30900, "start": 321.0, "end": 325.0, "text": " you don't give it an AST, you manipulate the strings.", "tokens": [50364, 2010, 8568, 309, 1566, 411, 11, 1392, 11, 411, 291, 434, 787, 3365, 337, 7909, 291, 2066, 50614, 50614, 293, 550, 17746, 512, 2699, 76, 3089, 13, 50714, 50714, 407, 291, 434, 920, 1242, 264, 316, 6840, 322, 264, 5125, 1252, 13, 50814, 50814, 865, 13, 50864, 50864, 1449, 281, 17594, 2699, 76, 3131, 1177, 380, 589, 365, 11, 50964, 50964, 291, 500, 380, 976, 309, 364, 316, 6840, 11, 291, 20459, 264, 13985, 13, 51164, 51164, 708, 30, 51214, 51214, 865, 13, 51264, 51264, 25538, 279, 366, 445, 4473, 11, 46567, 11, 48946, 13985, 11, 597, 307, 485, 51614, 51614, 663, 311, 1880, 570, 309, 311, 406, 11, 291, 434, 1228, 2699, 76, 28431, 1673, 11, 558, 30, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.15690001821130273, "compression_ratio": 1.6240601503759398, "no_caption_prob": 8.092355710687116e-05}, {"id": 112, "seek": 30900, "start": 325.0, "end": 326.0, "text": " What?", "tokens": [50364, 2010, 8568, 309, 1566, 411, 11, 1392, 11, 411, 291, 434, 787, 3365, 337, 7909, 291, 2066, 50614, 50614, 293, 550, 17746, 512, 2699, 76, 3089, 13, 50714, 50714, 407, 291, 434, 920, 1242, 264, 316, 6840, 322, 264, 5125, 1252, 13, 50814, 50814, 865, 13, 50864, 50864, 1449, 281, 17594, 2699, 76, 3131, 1177, 380, 589, 365, 11, 50964, 50964, 291, 500, 380, 976, 309, 364, 316, 6840, 11, 291, 20459, 264, 13985, 13, 51164, 51164, 708, 30, 51214, 51214, 865, 13, 51264, 51264, 25538, 279, 366, 445, 4473, 11, 46567, 11, 48946, 13985, 11, 597, 307, 485, 51614, 51614, 663, 311, 1880, 570, 309, 311, 406, 11, 291, 434, 1228, 2699, 76, 28431, 1673, 11, 558, 30, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.15690001821130273, "compression_ratio": 1.6240601503759398, "no_caption_prob": 8.092355710687116e-05}, {"id": 113, "seek": 30900, "start": 326.0, "end": 327.0, "text": " Yeah.", "tokens": [50364, 2010, 8568, 309, 1566, 411, 11, 1392, 11, 411, 291, 434, 787, 3365, 337, 7909, 291, 2066, 50614, 50614, 293, 550, 17746, 512, 2699, 76, 3089, 13, 50714, 50714, 407, 291, 434, 920, 1242, 264, 316, 6840, 322, 264, 5125, 1252, 13, 50814, 50814, 865, 13, 50864, 50864, 1449, 281, 17594, 2699, 76, 3131, 1177, 380, 589, 365, 11, 50964, 50964, 291, 500, 380, 976, 309, 364, 316, 6840, 11, 291, 20459, 264, 13985, 13, 51164, 51164, 708, 30, 51214, 51214, 865, 13, 51264, 51264, 25538, 279, 366, 445, 4473, 11, 46567, 11, 48946, 13985, 11, 597, 307, 485, 51614, 51614, 663, 311, 1880, 570, 309, 311, 406, 11, 291, 434, 1228, 2699, 76, 28431, 1673, 11, 558, 30, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.15690001821130273, "compression_ratio": 1.6240601503759398, "no_caption_prob": 8.092355710687116e-05}, {"id": 114, "seek": 30900, "start": 327.0, "end": 334.0, "text": " Fixes are just changing, inserting, deleting strings, which is...", "tokens": [50364, 2010, 8568, 309, 1566, 411, 11, 1392, 11, 411, 291, 434, 787, 3365, 337, 7909, 291, 2066, 50614, 50614, 293, 550, 17746, 512, 2699, 76, 3089, 13, 50714, 50714, 407, 291, 434, 920, 1242, 264, 316, 6840, 322, 264, 5125, 1252, 13, 50814, 50814, 865, 13, 50864, 50864, 1449, 281, 17594, 2699, 76, 3131, 1177, 380, 589, 365, 11, 50964, 50964, 291, 500, 380, 976, 309, 364, 316, 6840, 11, 291, 20459, 264, 13985, 13, 51164, 51164, 708, 30, 51214, 51214, 865, 13, 51264, 51264, 25538, 279, 366, 445, 4473, 11, 46567, 11, 48946, 13985, 11, 597, 307, 485, 51614, 51614, 663, 311, 1880, 570, 309, 311, 406, 11, 291, 434, 1228, 2699, 76, 28431, 1673, 11, 558, 30, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.15690001821130273, "compression_ratio": 1.6240601503759398, "no_caption_prob": 8.092355710687116e-05}, {"id": 115, "seek": 30900, "start": 334.0, "end": 338.0, "text": " That's interesting because it's not, you're using Elm syntax though, right?", "tokens": [50364, 2010, 8568, 309, 1566, 411, 11, 1392, 11, 411, 291, 434, 787, 3365, 337, 7909, 291, 2066, 50614, 50614, 293, 550, 17746, 512, 2699, 76, 3089, 13, 50714, 50714, 407, 291, 434, 920, 1242, 264, 316, 6840, 322, 264, 5125, 1252, 13, 50814, 50814, 865, 13, 50864, 50864, 1449, 281, 17594, 2699, 76, 3131, 1177, 380, 589, 365, 11, 50964, 50964, 291, 500, 380, 976, 309, 364, 316, 6840, 11, 291, 20459, 264, 13985, 13, 51164, 51164, 708, 30, 51214, 51214, 865, 13, 51264, 51264, 25538, 279, 366, 445, 4473, 11, 46567, 11, 48946, 13985, 11, 597, 307, 485, 51614, 51614, 663, 311, 1880, 570, 309, 311, 406, 11, 291, 434, 1228, 2699, 76, 28431, 1673, 11, 558, 30, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.15690001821130273, "compression_ratio": 1.6240601503759398, "no_caption_prob": 8.092355710687116e-05}, {"id": 116, "seek": 33800, "start": 338.0, "end": 339.0, "text": " Yeah.", "tokens": [50364, 865, 13, 50414, 50414, 583, 498, 291, 7406, 512, 3166, 295, 264, 316, 6840, 538, 661, 316, 6840, 11, 50714, 50714, 550, 291, 3624, 39366, 11, 291, 3624, 3053, 13, 50864, 50864, 1033, 11, 3143, 13, 50914, 50914, 865, 13, 50964, 50964, 400, 264, 551, 307, 498, 291, 360, 309, 365, 13985, 11, 6798, 9258, 4136, 11, 51164, 51164, 550, 300, 311, 3571, 281, 1223, 337, 661, 3873, 411, 257, 2856, 7154, 13, 51364, 51364, 400, 291, 393, 920, 764, 316, 6840, 3248, 41140, 538, 1419, 364, 316, 6840, 281, 6798, 2445, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.07783264474770457, "compression_ratio": 1.6095238095238096, "no_caption_prob": 0.00012338563101366162}, {"id": 117, "seek": 33800, "start": 339.0, "end": 345.0, "text": " But if you replace some parts of the AST by other AST,", "tokens": [50364, 865, 13, 50414, 50414, 583, 498, 291, 7406, 512, 3166, 295, 264, 316, 6840, 538, 661, 316, 6840, 11, 50714, 50714, 550, 291, 3624, 39366, 11, 291, 3624, 3053, 13, 50864, 50864, 1033, 11, 3143, 13, 50914, 50914, 865, 13, 50964, 50964, 400, 264, 551, 307, 498, 291, 360, 309, 365, 13985, 11, 6798, 9258, 4136, 11, 51164, 51164, 550, 300, 311, 3571, 281, 1223, 337, 661, 3873, 411, 257, 2856, 7154, 13, 51364, 51364, 400, 291, 393, 920, 764, 316, 6840, 3248, 41140, 538, 1419, 364, 316, 6840, 281, 6798, 2445, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.07783264474770457, "compression_ratio": 1.6095238095238096, "no_caption_prob": 0.00012338563101366162}, {"id": 118, "seek": 33800, "start": 345.0, "end": 348.0, "text": " then you lose formatting, you lose comments.", "tokens": [50364, 865, 13, 50414, 50414, 583, 498, 291, 7406, 512, 3166, 295, 264, 316, 6840, 538, 661, 316, 6840, 11, 50714, 50714, 550, 291, 3624, 39366, 11, 291, 3624, 3053, 13, 50864, 50864, 1033, 11, 3143, 13, 50914, 50914, 865, 13, 50964, 50964, 400, 264, 551, 307, 498, 291, 360, 309, 365, 13985, 11, 6798, 9258, 4136, 11, 51164, 51164, 550, 300, 311, 3571, 281, 1223, 337, 661, 3873, 411, 257, 2856, 7154, 13, 51364, 51364, 400, 291, 393, 920, 764, 316, 6840, 3248, 41140, 538, 1419, 364, 316, 6840, 281, 6798, 2445, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.07783264474770457, "compression_ratio": 1.6095238095238096, "no_caption_prob": 0.00012338563101366162}, {"id": 119, "seek": 33800, "start": 348.0, "end": 349.0, "text": " Okay, fair.", "tokens": [50364, 865, 13, 50414, 50414, 583, 498, 291, 7406, 512, 3166, 295, 264, 316, 6840, 538, 661, 316, 6840, 11, 50714, 50714, 550, 291, 3624, 39366, 11, 291, 3624, 3053, 13, 50864, 50864, 1033, 11, 3143, 13, 50914, 50914, 865, 13, 50964, 50964, 400, 264, 551, 307, 498, 291, 360, 309, 365, 13985, 11, 6798, 9258, 4136, 11, 51164, 51164, 550, 300, 311, 3571, 281, 1223, 337, 661, 3873, 411, 257, 2856, 7154, 13, 51364, 51364, 400, 291, 393, 920, 764, 316, 6840, 3248, 41140, 538, 1419, 364, 316, 6840, 281, 6798, 2445, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.07783264474770457, "compression_ratio": 1.6095238095238096, "no_caption_prob": 0.00012338563101366162}, {"id": 120, "seek": 33800, "start": 349.0, "end": 350.0, "text": " Yeah.", "tokens": [50364, 865, 13, 50414, 50414, 583, 498, 291, 7406, 512, 3166, 295, 264, 316, 6840, 538, 661, 316, 6840, 11, 50714, 50714, 550, 291, 3624, 39366, 11, 291, 3624, 3053, 13, 50864, 50864, 1033, 11, 3143, 13, 50914, 50914, 865, 13, 50964, 50964, 400, 264, 551, 307, 498, 291, 360, 309, 365, 13985, 11, 6798, 9258, 4136, 11, 51164, 51164, 550, 300, 311, 3571, 281, 1223, 337, 661, 3873, 411, 257, 2856, 7154, 13, 51364, 51364, 400, 291, 393, 920, 764, 316, 6840, 3248, 41140, 538, 1419, 364, 316, 6840, 281, 6798, 2445, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.07783264474770457, "compression_ratio": 1.6095238095238096, "no_caption_prob": 0.00012338563101366162}, {"id": 121, "seek": 33800, "start": 350.0, "end": 354.0, "text": " And the thing is if you do it with strings, string manipulations,", "tokens": [50364, 865, 13, 50414, 50414, 583, 498, 291, 7406, 512, 3166, 295, 264, 316, 6840, 538, 661, 316, 6840, 11, 50714, 50714, 550, 291, 3624, 39366, 11, 291, 3624, 3053, 13, 50864, 50864, 1033, 11, 3143, 13, 50914, 50914, 865, 13, 50964, 50964, 400, 264, 551, 307, 498, 291, 360, 309, 365, 13985, 11, 6798, 9258, 4136, 11, 51164, 51164, 550, 300, 311, 3571, 281, 1223, 337, 661, 3873, 411, 257, 2856, 7154, 13, 51364, 51364, 400, 291, 393, 920, 764, 316, 6840, 3248, 41140, 538, 1419, 364, 316, 6840, 281, 6798, 2445, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.07783264474770457, "compression_ratio": 1.6095238095238096, "no_caption_prob": 0.00012338563101366162}, {"id": 122, "seek": 33800, "start": 354.0, "end": 358.0, "text": " then that's easier to understand for other tools like a language server.", "tokens": [50364, 865, 13, 50414, 50414, 583, 498, 291, 7406, 512, 3166, 295, 264, 316, 6840, 538, 661, 316, 6840, 11, 50714, 50714, 550, 291, 3624, 39366, 11, 291, 3624, 3053, 13, 50864, 50864, 1033, 11, 3143, 13, 50914, 50914, 865, 13, 50964, 50964, 400, 264, 551, 307, 498, 291, 360, 309, 365, 13985, 11, 6798, 9258, 4136, 11, 51164, 51164, 550, 300, 311, 3571, 281, 1223, 337, 661, 3873, 411, 257, 2856, 7154, 13, 51364, 51364, 400, 291, 393, 920, 764, 316, 6840, 3248, 41140, 538, 1419, 364, 316, 6840, 281, 6798, 2445, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.07783264474770457, "compression_ratio": 1.6095238095238096, "no_caption_prob": 0.00012338563101366162}, {"id": 123, "seek": 33800, "start": 358.0, "end": 366.0, "text": " And you can still use AST replacements by having an AST to string function.", "tokens": [50364, 865, 13, 50414, 50414, 583, 498, 291, 7406, 512, 3166, 295, 264, 316, 6840, 538, 661, 316, 6840, 11, 50714, 50714, 550, 291, 3624, 39366, 11, 291, 3624, 3053, 13, 50864, 50864, 1033, 11, 3143, 13, 50914, 50914, 865, 13, 50964, 50964, 400, 264, 551, 307, 498, 291, 360, 309, 365, 13985, 11, 6798, 9258, 4136, 11, 51164, 51164, 550, 300, 311, 3571, 281, 1223, 337, 661, 3873, 411, 257, 2856, 7154, 13, 51364, 51364, 400, 291, 393, 920, 764, 316, 6840, 3248, 41140, 538, 1419, 364, 316, 6840, 281, 6798, 2445, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.07783264474770457, "compression_ratio": 1.6095238095238096, "no_caption_prob": 0.00012338563101366162}, {"id": 124, "seek": 36600, "start": 366.0, "end": 371.0, "text": " Yeah, like a lot of people use Elm syntax DSL to generate a string that...", "tokens": [50364, 865, 11, 411, 257, 688, 295, 561, 764, 2699, 76, 28431, 15816, 43, 281, 8460, 257, 6798, 300, 485, 50614, 50614, 400, 550, 764, 264, 6798, 382, 12729, 7877, 733, 295, 257, 551, 13, 50764, 50764, 865, 13, 50814, 50814, 865, 13, 50864, 50864, 663, 311, 534, 1880, 13, 50914, 50914, 286, 630, 406, 458, 300, 13, 50964, 50964, 400, 550, 264, 661, 1716, 300, 286, 390, 3102, 294, 281, 1333, 295, 18487, 309, 510, 51114, 51114, 390, 286, 390, 3102, 294, 17746, 411, 1715, 3652, 337, 2699, 76, 15682, 13, 51414, 51414, 286, 519, 365, 2699, 76, 15682, 11, 498, 291, 434, 406, 4963, 365, 2699, 76, 15682, 11, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.08329634080853379, "compression_ratio": 1.7112068965517242, "no_caption_prob": 3.705122071551159e-05}, {"id": 125, "seek": 36600, "start": 371.0, "end": 374.0, "text": " And then use the string as interrupt format kind of a thing.", "tokens": [50364, 865, 11, 411, 257, 688, 295, 561, 764, 2699, 76, 28431, 15816, 43, 281, 8460, 257, 6798, 300, 485, 50614, 50614, 400, 550, 764, 264, 6798, 382, 12729, 7877, 733, 295, 257, 551, 13, 50764, 50764, 865, 13, 50814, 50814, 865, 13, 50864, 50864, 663, 311, 534, 1880, 13, 50914, 50914, 286, 630, 406, 458, 300, 13, 50964, 50964, 400, 550, 264, 661, 1716, 300, 286, 390, 3102, 294, 281, 1333, 295, 18487, 309, 510, 51114, 51114, 390, 286, 390, 3102, 294, 17746, 411, 1715, 3652, 337, 2699, 76, 15682, 13, 51414, 51414, 286, 519, 365, 2699, 76, 15682, 11, 498, 291, 434, 406, 4963, 365, 2699, 76, 15682, 11, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.08329634080853379, "compression_ratio": 1.7112068965517242, "no_caption_prob": 3.705122071551159e-05}, {"id": 126, "seek": 36600, "start": 374.0, "end": 375.0, "text": " Yeah.", "tokens": [50364, 865, 11, 411, 257, 688, 295, 561, 764, 2699, 76, 28431, 15816, 43, 281, 8460, 257, 6798, 300, 485, 50614, 50614, 400, 550, 764, 264, 6798, 382, 12729, 7877, 733, 295, 257, 551, 13, 50764, 50764, 865, 13, 50814, 50814, 865, 13, 50864, 50864, 663, 311, 534, 1880, 13, 50914, 50914, 286, 630, 406, 458, 300, 13, 50964, 50964, 400, 550, 264, 661, 1716, 300, 286, 390, 3102, 294, 281, 1333, 295, 18487, 309, 510, 51114, 51114, 390, 286, 390, 3102, 294, 17746, 411, 1715, 3652, 337, 2699, 76, 15682, 13, 51414, 51414, 286, 519, 365, 2699, 76, 15682, 11, 498, 291, 434, 406, 4963, 365, 2699, 76, 15682, 11, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.08329634080853379, "compression_ratio": 1.7112068965517242, "no_caption_prob": 3.705122071551159e-05}, {"id": 127, "seek": 36600, "start": 375.0, "end": 376.0, "text": " Yeah.", "tokens": [50364, 865, 11, 411, 257, 688, 295, 561, 764, 2699, 76, 28431, 15816, 43, 281, 8460, 257, 6798, 300, 485, 50614, 50614, 400, 550, 764, 264, 6798, 382, 12729, 7877, 733, 295, 257, 551, 13, 50764, 50764, 865, 13, 50814, 50814, 865, 13, 50864, 50864, 663, 311, 534, 1880, 13, 50914, 50914, 286, 630, 406, 458, 300, 13, 50964, 50964, 400, 550, 264, 661, 1716, 300, 286, 390, 3102, 294, 281, 1333, 295, 18487, 309, 510, 51114, 51114, 390, 286, 390, 3102, 294, 17746, 411, 1715, 3652, 337, 2699, 76, 15682, 13, 51414, 51414, 286, 519, 365, 2699, 76, 15682, 11, 498, 291, 434, 406, 4963, 365, 2699, 76, 15682, 11, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.08329634080853379, "compression_ratio": 1.7112068965517242, "no_caption_prob": 3.705122071551159e-05}, {"id": 128, "seek": 36600, "start": 376.0, "end": 377.0, "text": " That's really interesting.", "tokens": [50364, 865, 11, 411, 257, 688, 295, 561, 764, 2699, 76, 28431, 15816, 43, 281, 8460, 257, 6798, 300, 485, 50614, 50614, 400, 550, 764, 264, 6798, 382, 12729, 7877, 733, 295, 257, 551, 13, 50764, 50764, 865, 13, 50814, 50814, 865, 13, 50864, 50864, 663, 311, 534, 1880, 13, 50914, 50914, 286, 630, 406, 458, 300, 13, 50964, 50964, 400, 550, 264, 661, 1716, 300, 286, 390, 3102, 294, 281, 1333, 295, 18487, 309, 510, 51114, 51114, 390, 286, 390, 3102, 294, 17746, 411, 1715, 3652, 337, 2699, 76, 15682, 13, 51414, 51414, 286, 519, 365, 2699, 76, 15682, 11, 498, 291, 434, 406, 4963, 365, 2699, 76, 15682, 11, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.08329634080853379, "compression_ratio": 1.7112068965517242, "no_caption_prob": 3.705122071551159e-05}, {"id": 129, "seek": 36600, "start": 377.0, "end": 378.0, "text": " I did not know that.", "tokens": [50364, 865, 11, 411, 257, 688, 295, 561, 764, 2699, 76, 28431, 15816, 43, 281, 8460, 257, 6798, 300, 485, 50614, 50614, 400, 550, 764, 264, 6798, 382, 12729, 7877, 733, 295, 257, 551, 13, 50764, 50764, 865, 13, 50814, 50814, 865, 13, 50864, 50864, 663, 311, 534, 1880, 13, 50914, 50914, 286, 630, 406, 458, 300, 13, 50964, 50964, 400, 550, 264, 661, 1716, 300, 286, 390, 3102, 294, 281, 1333, 295, 18487, 309, 510, 51114, 51114, 390, 286, 390, 3102, 294, 17746, 411, 1715, 3652, 337, 2699, 76, 15682, 13, 51414, 51414, 286, 519, 365, 2699, 76, 15682, 11, 498, 291, 434, 406, 4963, 365, 2699, 76, 15682, 11, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.08329634080853379, "compression_ratio": 1.7112068965517242, "no_caption_prob": 3.705122071551159e-05}, {"id": 130, "seek": 36600, "start": 378.0, "end": 381.0, "text": " And then the other project that I was interested in to sort of anchor it here", "tokens": [50364, 865, 11, 411, 257, 688, 295, 561, 764, 2699, 76, 28431, 15816, 43, 281, 8460, 257, 6798, 300, 485, 50614, 50614, 400, 550, 764, 264, 6798, 382, 12729, 7877, 733, 295, 257, 551, 13, 50764, 50764, 865, 13, 50814, 50814, 865, 13, 50864, 50864, 663, 311, 534, 1880, 13, 50914, 50914, 286, 630, 406, 458, 300, 13, 50964, 50964, 400, 550, 264, 661, 1716, 300, 286, 390, 3102, 294, 281, 1333, 295, 18487, 309, 510, 51114, 51114, 390, 286, 390, 3102, 294, 17746, 411, 1715, 3652, 337, 2699, 76, 15682, 13, 51414, 51414, 286, 519, 365, 2699, 76, 15682, 11, 498, 291, 434, 406, 4963, 365, 2699, 76, 15682, 11, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.08329634080853379, "compression_ratio": 1.7112068965517242, "no_caption_prob": 3.705122071551159e-05}, {"id": 131, "seek": 36600, "start": 381.0, "end": 387.0, "text": " was I was interested in generating like design systems for Elm UI.", "tokens": [50364, 865, 11, 411, 257, 688, 295, 561, 764, 2699, 76, 28431, 15816, 43, 281, 8460, 257, 6798, 300, 485, 50614, 50614, 400, 550, 764, 264, 6798, 382, 12729, 7877, 733, 295, 257, 551, 13, 50764, 50764, 865, 13, 50814, 50814, 865, 13, 50864, 50864, 663, 311, 534, 1880, 13, 50914, 50914, 286, 630, 406, 458, 300, 13, 50964, 50964, 400, 550, 264, 661, 1716, 300, 286, 390, 3102, 294, 281, 1333, 295, 18487, 309, 510, 51114, 51114, 390, 286, 390, 3102, 294, 17746, 411, 1715, 3652, 337, 2699, 76, 15682, 13, 51414, 51414, 286, 519, 365, 2699, 76, 15682, 11, 498, 291, 434, 406, 4963, 365, 2699, 76, 15682, 11, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.08329634080853379, "compression_ratio": 1.7112068965517242, "no_caption_prob": 3.705122071551159e-05}, {"id": 132, "seek": 36600, "start": 387.0, "end": 390.0, "text": " I think with Elm UI, if you're not familiar with Elm UI,", "tokens": [50364, 865, 11, 411, 257, 688, 295, 561, 764, 2699, 76, 28431, 15816, 43, 281, 8460, 257, 6798, 300, 485, 50614, 50614, 400, 550, 764, 264, 6798, 382, 12729, 7877, 733, 295, 257, 551, 13, 50764, 50764, 865, 13, 50814, 50814, 865, 13, 50864, 50864, 663, 311, 534, 1880, 13, 50914, 50914, 286, 630, 406, 458, 300, 13, 50964, 50964, 400, 550, 264, 661, 1716, 300, 286, 390, 3102, 294, 281, 1333, 295, 18487, 309, 510, 51114, 51114, 390, 286, 390, 3102, 294, 17746, 411, 1715, 3652, 337, 2699, 76, 15682, 13, 51414, 51414, 286, 519, 365, 2699, 76, 15682, 11, 498, 291, 434, 406, 4963, 365, 2699, 76, 15682, 11, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.08329634080853379, "compression_ratio": 1.7112068965517242, "no_caption_prob": 3.705122071551159e-05}, {"id": 133, "seek": 39000, "start": 390.0, "end": 397.0, "text": " it's a little sort of library for like a layout language that you can use instead of CSS", "tokens": [50364, 309, 311, 257, 707, 1333, 295, 6405, 337, 411, 257, 13333, 2856, 300, 291, 393, 764, 2602, 295, 24387, 50714, 50714, 300, 1936, 486, 8460, 512, 24387, 11, 50814, 50814, 457, 1310, 575, 512, 10891, 597, 652, 309, 3571, 281, 519, 466, 13, 51014, 51014, 583, 472, 295, 264, 5361, 3755, 286, 1352, 365, 2699, 76, 15682, 11, 286, 478, 411, 11, 1392, 11, 731, 11, 291, 458, 11, 51214, 51214, 457, 437, 360, 286, 528, 365, 2699, 76, 15682, 30, 51364, 51364, 286, 534, 528, 561, 281, 485, 51464, 51464, 286, 528, 264, 1752, 281, 312, 436, 11, 291, 458, 11, 436, 434, 411, 11, 286, 576, 411, 281, 764, 2699, 76, 15682, 13, 51614, 51614, 400, 550, 4258, 436, 362, 485, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.08473819071852316, "compression_ratio": 1.6523297491039426, "no_caption_prob": 0.00024144935014192015}, {"id": 134, "seek": 39000, "start": 397.0, "end": 399.0, "text": " that basically will generate some CSS,", "tokens": [50364, 309, 311, 257, 707, 1333, 295, 6405, 337, 411, 257, 13333, 2856, 300, 291, 393, 764, 2602, 295, 24387, 50714, 50714, 300, 1936, 486, 8460, 512, 24387, 11, 50814, 50814, 457, 1310, 575, 512, 10891, 597, 652, 309, 3571, 281, 519, 466, 13, 51014, 51014, 583, 472, 295, 264, 5361, 3755, 286, 1352, 365, 2699, 76, 15682, 11, 286, 478, 411, 11, 1392, 11, 731, 11, 291, 458, 11, 51214, 51214, 457, 437, 360, 286, 528, 365, 2699, 76, 15682, 30, 51364, 51364, 286, 534, 528, 561, 281, 485, 51464, 51464, 286, 528, 264, 1752, 281, 312, 436, 11, 291, 458, 11, 436, 434, 411, 11, 286, 576, 411, 281, 764, 2699, 76, 15682, 13, 51614, 51614, 400, 550, 4258, 436, 362, 485, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.08473819071852316, "compression_ratio": 1.6523297491039426, "no_caption_prob": 0.00024144935014192015}, {"id": 135, "seek": 39000, "start": 399.0, "end": 403.0, "text": " but maybe has some characteristics which make it easier to think about.", "tokens": [50364, 309, 311, 257, 707, 1333, 295, 6405, 337, 411, 257, 13333, 2856, 300, 291, 393, 764, 2602, 295, 24387, 50714, 50714, 300, 1936, 486, 8460, 512, 24387, 11, 50814, 50814, 457, 1310, 575, 512, 10891, 597, 652, 309, 3571, 281, 519, 466, 13, 51014, 51014, 583, 472, 295, 264, 5361, 3755, 286, 1352, 365, 2699, 76, 15682, 11, 286, 478, 411, 11, 1392, 11, 731, 11, 291, 458, 11, 51214, 51214, 457, 437, 360, 286, 528, 365, 2699, 76, 15682, 30, 51364, 51364, 286, 534, 528, 561, 281, 485, 51464, 51464, 286, 528, 264, 1752, 281, 312, 436, 11, 291, 458, 11, 436, 434, 411, 11, 286, 576, 411, 281, 764, 2699, 76, 15682, 13, 51614, 51614, 400, 550, 4258, 436, 362, 485, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.08473819071852316, "compression_ratio": 1.6523297491039426, "no_caption_prob": 0.00024144935014192015}, {"id": 136, "seek": 39000, "start": 403.0, "end": 407.0, "text": " But one of the missing pieces I found with Elm UI, I'm like, okay, well, you know,", "tokens": [50364, 309, 311, 257, 707, 1333, 295, 6405, 337, 411, 257, 13333, 2856, 300, 291, 393, 764, 2602, 295, 24387, 50714, 50714, 300, 1936, 486, 8460, 512, 24387, 11, 50814, 50814, 457, 1310, 575, 512, 10891, 597, 652, 309, 3571, 281, 519, 466, 13, 51014, 51014, 583, 472, 295, 264, 5361, 3755, 286, 1352, 365, 2699, 76, 15682, 11, 286, 478, 411, 11, 1392, 11, 731, 11, 291, 458, 11, 51214, 51214, 457, 437, 360, 286, 528, 365, 2699, 76, 15682, 30, 51364, 51364, 286, 534, 528, 561, 281, 485, 51464, 51464, 286, 528, 264, 1752, 281, 312, 436, 11, 291, 458, 11, 436, 434, 411, 11, 286, 576, 411, 281, 764, 2699, 76, 15682, 13, 51614, 51614, 400, 550, 4258, 436, 362, 485, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.08473819071852316, "compression_ratio": 1.6523297491039426, "no_caption_prob": 0.00024144935014192015}, {"id": 137, "seek": 39000, "start": 407.0, "end": 410.0, "text": " but what do I want with Elm UI?", "tokens": [50364, 309, 311, 257, 707, 1333, 295, 6405, 337, 411, 257, 13333, 2856, 300, 291, 393, 764, 2602, 295, 24387, 50714, 50714, 300, 1936, 486, 8460, 512, 24387, 11, 50814, 50814, 457, 1310, 575, 512, 10891, 597, 652, 309, 3571, 281, 519, 466, 13, 51014, 51014, 583, 472, 295, 264, 5361, 3755, 286, 1352, 365, 2699, 76, 15682, 11, 286, 478, 411, 11, 1392, 11, 731, 11, 291, 458, 11, 51214, 51214, 457, 437, 360, 286, 528, 365, 2699, 76, 15682, 30, 51364, 51364, 286, 534, 528, 561, 281, 485, 51464, 51464, 286, 528, 264, 1752, 281, 312, 436, 11, 291, 458, 11, 436, 434, 411, 11, 286, 576, 411, 281, 764, 2699, 76, 15682, 13, 51614, 51614, 400, 550, 4258, 436, 362, 485, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.08473819071852316, "compression_ratio": 1.6523297491039426, "no_caption_prob": 0.00024144935014192015}, {"id": 138, "seek": 39000, "start": 410.0, "end": 412.0, "text": " I really want people to...", "tokens": [50364, 309, 311, 257, 707, 1333, 295, 6405, 337, 411, 257, 13333, 2856, 300, 291, 393, 764, 2602, 295, 24387, 50714, 50714, 300, 1936, 486, 8460, 512, 24387, 11, 50814, 50814, 457, 1310, 575, 512, 10891, 597, 652, 309, 3571, 281, 519, 466, 13, 51014, 51014, 583, 472, 295, 264, 5361, 3755, 286, 1352, 365, 2699, 76, 15682, 11, 286, 478, 411, 11, 1392, 11, 731, 11, 291, 458, 11, 51214, 51214, 457, 437, 360, 286, 528, 365, 2699, 76, 15682, 30, 51364, 51364, 286, 534, 528, 561, 281, 485, 51464, 51464, 286, 528, 264, 1752, 281, 312, 436, 11, 291, 458, 11, 436, 434, 411, 11, 286, 576, 411, 281, 764, 2699, 76, 15682, 13, 51614, 51614, 400, 550, 4258, 436, 362, 485, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.08473819071852316, "compression_ratio": 1.6523297491039426, "no_caption_prob": 0.00024144935014192015}, {"id": 139, "seek": 39000, "start": 412.0, "end": 415.0, "text": " I want the experience to be they, you know, they're like, I would like to use Elm UI.", "tokens": [50364, 309, 311, 257, 707, 1333, 295, 6405, 337, 411, 257, 13333, 2856, 300, 291, 393, 764, 2602, 295, 24387, 50714, 50714, 300, 1936, 486, 8460, 512, 24387, 11, 50814, 50814, 457, 1310, 575, 512, 10891, 597, 652, 309, 3571, 281, 519, 466, 13, 51014, 51014, 583, 472, 295, 264, 5361, 3755, 286, 1352, 365, 2699, 76, 15682, 11, 286, 478, 411, 11, 1392, 11, 731, 11, 291, 458, 11, 51214, 51214, 457, 437, 360, 286, 528, 365, 2699, 76, 15682, 30, 51364, 51364, 286, 534, 528, 561, 281, 485, 51464, 51464, 286, 528, 264, 1752, 281, 312, 436, 11, 291, 458, 11, 436, 434, 411, 11, 286, 576, 411, 281, 764, 2699, 76, 15682, 13, 51614, 51614, 400, 550, 4258, 436, 362, 485, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.08473819071852316, "compression_ratio": 1.6523297491039426, "no_caption_prob": 0.00024144935014192015}, {"id": 140, "seek": 39000, "start": 415.0, "end": 417.0, "text": " And then immediately they have...", "tokens": [50364, 309, 311, 257, 707, 1333, 295, 6405, 337, 411, 257, 13333, 2856, 300, 291, 393, 764, 2602, 295, 24387, 50714, 50714, 300, 1936, 486, 8460, 512, 24387, 11, 50814, 50814, 457, 1310, 575, 512, 10891, 597, 652, 309, 3571, 281, 519, 466, 13, 51014, 51014, 583, 472, 295, 264, 5361, 3755, 286, 1352, 365, 2699, 76, 15682, 11, 286, 478, 411, 11, 1392, 11, 731, 11, 291, 458, 11, 51214, 51214, 457, 437, 360, 286, 528, 365, 2699, 76, 15682, 30, 51364, 51364, 286, 534, 528, 561, 281, 485, 51464, 51464, 286, 528, 264, 1752, 281, 312, 436, 11, 291, 458, 11, 436, 434, 411, 11, 286, 576, 411, 281, 764, 2699, 76, 15682, 13, 51614, 51614, 400, 550, 4258, 436, 362, 485, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.08473819071852316, "compression_ratio": 1.6523297491039426, "no_caption_prob": 0.00024144935014192015}, {"id": 141, "seek": 41700, "start": 417.0, "end": 422.0, "text": " They maybe make a few high level choices of like, I would like pastels, right?", "tokens": [50364, 814, 1310, 652, 257, 1326, 1090, 1496, 7994, 295, 411, 11, 286, 576, 411, 1791, 1625, 11, 558, 30, 50614, 50614, 400, 286, 576, 411, 257, 2877, 4391, 293, 286, 4382, 411, 257, 816, 351, 10703, 11, 558, 30, 50864, 50864, 663, 311, 3939, 2277, 8614, 13, 50964, 50964, 400, 498, 436, 727, 445, 362, 257, 992, 295, 2699, 76, 3089, 300, 390, 411, 11, 1392, 11, 731, 11, 291, 458, 11, 51364, 51364, 510, 311, 257, 1481, 2017, 15851, 411, 300, 321, 458, 1985, 1214, 13, 51514, 51514, 1743, 510, 311, 257, 1481, 992, 295, 257, 27739, 4373, 11, 411, 337, 411, 11, 291, 458, 11, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.11674297607696808, "compression_ratio": 1.696035242290749, "no_caption_prob": 2.1780706447316334e-05}, {"id": 142, "seek": 41700, "start": 422.0, "end": 427.0, "text": " And I would like a dark mode and I prefer like a serif font, right?", "tokens": [50364, 814, 1310, 652, 257, 1326, 1090, 1496, 7994, 295, 411, 11, 286, 576, 411, 1791, 1625, 11, 558, 30, 50614, 50614, 400, 286, 576, 411, 257, 2877, 4391, 293, 286, 4382, 411, 257, 816, 351, 10703, 11, 558, 30, 50864, 50864, 663, 311, 3939, 2277, 8614, 13, 50964, 50964, 400, 498, 436, 727, 445, 362, 257, 992, 295, 2699, 76, 3089, 300, 390, 411, 11, 1392, 11, 731, 11, 291, 458, 11, 51364, 51364, 510, 311, 257, 1481, 2017, 15851, 411, 300, 321, 458, 1985, 1214, 13, 51514, 51514, 1743, 510, 311, 257, 1481, 992, 295, 257, 27739, 4373, 11, 411, 337, 411, 11, 291, 458, 11, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.11674297607696808, "compression_ratio": 1.696035242290749, "no_caption_prob": 2.1780706447316334e-05}, {"id": 143, "seek": 41700, "start": 427.0, "end": 429.0, "text": " That's tastefully chosen.", "tokens": [50364, 814, 1310, 652, 257, 1326, 1090, 1496, 7994, 295, 411, 11, 286, 576, 411, 1791, 1625, 11, 558, 30, 50614, 50614, 400, 286, 576, 411, 257, 2877, 4391, 293, 286, 4382, 411, 257, 816, 351, 10703, 11, 558, 30, 50864, 50864, 663, 311, 3939, 2277, 8614, 13, 50964, 50964, 400, 498, 436, 727, 445, 362, 257, 992, 295, 2699, 76, 3089, 300, 390, 411, 11, 1392, 11, 731, 11, 291, 458, 11, 51364, 51364, 510, 311, 257, 1481, 2017, 15851, 411, 300, 321, 458, 1985, 1214, 13, 51514, 51514, 1743, 510, 311, 257, 1481, 992, 295, 257, 27739, 4373, 11, 411, 337, 411, 11, 291, 458, 11, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.11674297607696808, "compression_ratio": 1.696035242290749, "no_caption_prob": 2.1780706447316334e-05}, {"id": 144, "seek": 41700, "start": 429.0, "end": 437.0, "text": " And if they could just have a set of Elm code that was like, okay, well, you know,", "tokens": [50364, 814, 1310, 652, 257, 1326, 1090, 1496, 7994, 295, 411, 11, 286, 576, 411, 1791, 1625, 11, 558, 30, 50614, 50614, 400, 286, 576, 411, 257, 2877, 4391, 293, 286, 4382, 411, 257, 816, 351, 10703, 11, 558, 30, 50864, 50864, 663, 311, 3939, 2277, 8614, 13, 50964, 50964, 400, 498, 436, 727, 445, 362, 257, 992, 295, 2699, 76, 3089, 300, 390, 411, 11, 1392, 11, 731, 11, 291, 458, 11, 51364, 51364, 510, 311, 257, 1481, 2017, 15851, 411, 300, 321, 458, 1985, 1214, 13, 51514, 51514, 1743, 510, 311, 257, 1481, 992, 295, 257, 27739, 4373, 11, 411, 337, 411, 11, 291, 458, 11, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.11674297607696808, "compression_ratio": 1.696035242290749, "no_caption_prob": 2.1780706447316334e-05}, {"id": 145, "seek": 41700, "start": 437.0, "end": 440.0, "text": " here's a nice color palette like that we know works together.", "tokens": [50364, 814, 1310, 652, 257, 1326, 1090, 1496, 7994, 295, 411, 11, 286, 576, 411, 1791, 1625, 11, 558, 30, 50614, 50614, 400, 286, 576, 411, 257, 2877, 4391, 293, 286, 4382, 411, 257, 816, 351, 10703, 11, 558, 30, 50864, 50864, 663, 311, 3939, 2277, 8614, 13, 50964, 50964, 400, 498, 436, 727, 445, 362, 257, 992, 295, 2699, 76, 3089, 300, 390, 411, 11, 1392, 11, 731, 11, 291, 458, 11, 51364, 51364, 510, 311, 257, 1481, 2017, 15851, 411, 300, 321, 458, 1985, 1214, 13, 51514, 51514, 1743, 510, 311, 257, 1481, 992, 295, 257, 27739, 4373, 11, 411, 337, 411, 11, 291, 458, 11, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.11674297607696808, "compression_ratio": 1.696035242290749, "no_caption_prob": 2.1780706447316334e-05}, {"id": 146, "seek": 41700, "start": 440.0, "end": 445.0, "text": " Like here's a nice set of a spacing scale, like for like, you know,", "tokens": [50364, 814, 1310, 652, 257, 1326, 1090, 1496, 7994, 295, 411, 11, 286, 576, 411, 1791, 1625, 11, 558, 30, 50614, 50614, 400, 286, 576, 411, 257, 2877, 4391, 293, 286, 4382, 411, 257, 816, 351, 10703, 11, 558, 30, 50864, 50864, 663, 311, 3939, 2277, 8614, 13, 50964, 50964, 400, 498, 436, 727, 445, 362, 257, 992, 295, 2699, 76, 3089, 300, 390, 411, 11, 1392, 11, 731, 11, 291, 458, 11, 51364, 51364, 510, 311, 257, 1481, 2017, 15851, 411, 300, 321, 458, 1985, 1214, 13, 51514, 51514, 1743, 510, 311, 257, 1481, 992, 295, 257, 27739, 4373, 11, 411, 337, 411, 11, 291, 458, 11, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.11674297607696808, "compression_ratio": 1.696035242290749, "no_caption_prob": 2.1780706447316334e-05}, {"id": 147, "seek": 44500, "start": 445.0, "end": 450.0, "text": " paddings, like to have paddings and like font sizes and spacing between elements,", "tokens": [50364, 6887, 29432, 11, 411, 281, 362, 6887, 29432, 293, 411, 10703, 11602, 293, 27739, 1296, 4959, 11, 50614, 50614, 439, 1333, 295, 445, 8195, 589, 484, 13, 50764, 50764, 1743, 4084, 1715, 3652, 11, 456, 366, 1629, 992, 295, 4474, 300, 366, 1238, 731, 50964, 50964, 2570, 412, 341, 935, 13, 51064, 51064, 407, 291, 393, 767, 362, 257, 6457, 38901, 992, 295, 15743, 293, 8460, 51214, 51214, 746, 689, 309, 311, 411, 11, 1392, 11, 869, 13, 51314, 51314, 509, 445, 362, 257, 1715, 1185, 586, 293, 291, 393, 4648, 365, 309, 293, 291, 393, 362, 257, 51614, 51614, 2238, 724, 733, 295, 558, 484, 295, 264, 8539, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.09825097468861363, "compression_ratio": 1.739622641509434, "no_caption_prob": 7.483800436602905e-05}, {"id": 148, "seek": 44500, "start": 450.0, "end": 453.0, "text": " all sort of just naturally work out.", "tokens": [50364, 6887, 29432, 11, 411, 281, 362, 6887, 29432, 293, 411, 10703, 11602, 293, 27739, 1296, 4959, 11, 50614, 50614, 439, 1333, 295, 445, 8195, 589, 484, 13, 50764, 50764, 1743, 4084, 1715, 3652, 11, 456, 366, 1629, 992, 295, 4474, 300, 366, 1238, 731, 50964, 50964, 2570, 412, 341, 935, 13, 51064, 51064, 407, 291, 393, 767, 362, 257, 6457, 38901, 992, 295, 15743, 293, 8460, 51214, 51214, 746, 689, 309, 311, 411, 11, 1392, 11, 869, 13, 51314, 51314, 509, 445, 362, 257, 1715, 1185, 586, 293, 291, 393, 4648, 365, 309, 293, 291, 393, 362, 257, 51614, 51614, 2238, 724, 733, 295, 558, 484, 295, 264, 8539, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.09825097468861363, "compression_ratio": 1.739622641509434, "no_caption_prob": 7.483800436602905e-05}, {"id": 149, "seek": 44500, "start": 453.0, "end": 457.0, "text": " Like creating design systems, there are certain set of rules that are pretty well", "tokens": [50364, 6887, 29432, 11, 411, 281, 362, 6887, 29432, 293, 411, 10703, 11602, 293, 27739, 1296, 4959, 11, 50614, 50614, 439, 1333, 295, 445, 8195, 589, 484, 13, 50764, 50764, 1743, 4084, 1715, 3652, 11, 456, 366, 1629, 992, 295, 4474, 300, 366, 1238, 731, 50964, 50964, 2570, 412, 341, 935, 13, 51064, 51064, 407, 291, 393, 767, 362, 257, 6457, 38901, 992, 295, 15743, 293, 8460, 51214, 51214, 746, 689, 309, 311, 411, 11, 1392, 11, 869, 13, 51314, 51314, 509, 445, 362, 257, 1715, 1185, 586, 293, 291, 393, 4648, 365, 309, 293, 291, 393, 362, 257, 51614, 51614, 2238, 724, 733, 295, 558, 484, 295, 264, 8539, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.09825097468861363, "compression_ratio": 1.739622641509434, "no_caption_prob": 7.483800436602905e-05}, {"id": 150, "seek": 44500, "start": 457.0, "end": 459.0, "text": " known at this point.", "tokens": [50364, 6887, 29432, 11, 411, 281, 362, 6887, 29432, 293, 411, 10703, 11602, 293, 27739, 1296, 4959, 11, 50614, 50614, 439, 1333, 295, 445, 8195, 589, 484, 13, 50764, 50764, 1743, 4084, 1715, 3652, 11, 456, 366, 1629, 992, 295, 4474, 300, 366, 1238, 731, 50964, 50964, 2570, 412, 341, 935, 13, 51064, 51064, 407, 291, 393, 767, 362, 257, 6457, 38901, 992, 295, 15743, 293, 8460, 51214, 51214, 746, 689, 309, 311, 411, 11, 1392, 11, 869, 13, 51314, 51314, 509, 445, 362, 257, 1715, 1185, 586, 293, 291, 393, 4648, 365, 309, 293, 291, 393, 362, 257, 51614, 51614, 2238, 724, 733, 295, 558, 484, 295, 264, 8539, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.09825097468861363, "compression_ratio": 1.739622641509434, "no_caption_prob": 7.483800436602905e-05}, {"id": 151, "seek": 44500, "start": 459.0, "end": 462.0, "text": " So you can actually have a fairly constrained set of inputs and generate", "tokens": [50364, 6887, 29432, 11, 411, 281, 362, 6887, 29432, 293, 411, 10703, 11602, 293, 27739, 1296, 4959, 11, 50614, 50614, 439, 1333, 295, 445, 8195, 589, 484, 13, 50764, 50764, 1743, 4084, 1715, 3652, 11, 456, 366, 1629, 992, 295, 4474, 300, 366, 1238, 731, 50964, 50964, 2570, 412, 341, 935, 13, 51064, 51064, 407, 291, 393, 767, 362, 257, 6457, 38901, 992, 295, 15743, 293, 8460, 51214, 51214, 746, 689, 309, 311, 411, 11, 1392, 11, 869, 13, 51314, 51314, 509, 445, 362, 257, 1715, 1185, 586, 293, 291, 393, 4648, 365, 309, 293, 291, 393, 362, 257, 51614, 51614, 2238, 724, 733, 295, 558, 484, 295, 264, 8539, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.09825097468861363, "compression_ratio": 1.739622641509434, "no_caption_prob": 7.483800436602905e-05}, {"id": 152, "seek": 44500, "start": 462.0, "end": 464.0, "text": " something where it's like, okay, great.", "tokens": [50364, 6887, 29432, 11, 411, 281, 362, 6887, 29432, 293, 411, 10703, 11602, 293, 27739, 1296, 4959, 11, 50614, 50614, 439, 1333, 295, 445, 8195, 589, 484, 13, 50764, 50764, 1743, 4084, 1715, 3652, 11, 456, 366, 1629, 992, 295, 4474, 300, 366, 1238, 731, 50964, 50964, 2570, 412, 341, 935, 13, 51064, 51064, 407, 291, 393, 767, 362, 257, 6457, 38901, 992, 295, 15743, 293, 8460, 51214, 51214, 746, 689, 309, 311, 411, 11, 1392, 11, 869, 13, 51314, 51314, 509, 445, 362, 257, 1715, 1185, 586, 293, 291, 393, 4648, 365, 309, 293, 291, 393, 362, 257, 51614, 51614, 2238, 724, 733, 295, 558, 484, 295, 264, 8539, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.09825097468861363, "compression_ratio": 1.739622641509434, "no_caption_prob": 7.483800436602905e-05}, {"id": 153, "seek": 44500, "start": 464.0, "end": 470.0, "text": " You just have a design system now and you can interact with it and you can have a", "tokens": [50364, 6887, 29432, 11, 411, 281, 362, 6887, 29432, 293, 411, 10703, 11602, 293, 27739, 1296, 4959, 11, 50614, 50614, 439, 1333, 295, 445, 8195, 589, 484, 13, 50764, 50764, 1743, 4084, 1715, 3652, 11, 456, 366, 1629, 992, 295, 4474, 300, 366, 1238, 731, 50964, 50964, 2570, 412, 341, 935, 13, 51064, 51064, 407, 291, 393, 767, 362, 257, 6457, 38901, 992, 295, 15743, 293, 8460, 51214, 51214, 746, 689, 309, 311, 411, 11, 1392, 11, 869, 13, 51314, 51314, 509, 445, 362, 257, 1715, 1185, 586, 293, 291, 393, 4648, 365, 309, 293, 291, 393, 362, 257, 51614, 51614, 2238, 724, 733, 295, 558, 484, 295, 264, 8539, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.09825097468861363, "compression_ratio": 1.739622641509434, "no_caption_prob": 7.483800436602905e-05}, {"id": 154, "seek": 44500, "start": 470.0, "end": 473.0, "text": " beautiful app kind of right out of the gate.", "tokens": [50364, 6887, 29432, 11, 411, 281, 362, 6887, 29432, 293, 411, 10703, 11602, 293, 27739, 1296, 4959, 11, 50614, 50614, 439, 1333, 295, 445, 8195, 589, 484, 13, 50764, 50764, 1743, 4084, 1715, 3652, 11, 456, 366, 1629, 992, 295, 4474, 300, 366, 1238, 731, 50964, 50964, 2570, 412, 341, 935, 13, 51064, 51064, 407, 291, 393, 767, 362, 257, 6457, 38901, 992, 295, 15743, 293, 8460, 51214, 51214, 746, 689, 309, 311, 411, 11, 1392, 11, 869, 13, 51314, 51314, 509, 445, 362, 257, 1715, 1185, 586, 293, 291, 393, 4648, 365, 309, 293, 291, 393, 362, 257, 51614, 51614, 2238, 724, 733, 295, 558, 484, 295, 264, 8539, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.09825097468861363, "compression_ratio": 1.739622641509434, "no_caption_prob": 7.483800436602905e-05}, {"id": 155, "seek": 47300, "start": 473.0, "end": 478.0, "text": " That was something that I think the JavaScript community has more tools that", "tokens": [50364, 663, 390, 746, 300, 286, 519, 264, 15778, 1768, 575, 544, 3873, 300, 50614, 50614, 366, 411, 300, 11, 689, 291, 362, 746, 2238, 484, 295, 264, 8539, 13, 50764, 50764, 2699, 76, 15682, 307, 406, 300, 13, 50864, 50864, 467, 311, 767, 411, 309, 311, 544, 466, 264, 9952, 295, 428, 13333, 11, 597, 307, 51064, 51064, 46481, 534, 1627, 13, 51164, 51164, 583, 6284, 11, 281, 7207, 264, 11037, 11, 291, 528, 4079, 309, 311, 411, 11, 1392, 11, 51414, 51414, 436, 600, 1027, 746, 293, 309, 311, 2238, 293, 4696, 754, 544, 2238, 813, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.12185502760481126, "compression_ratio": 1.7333333333333334, "no_caption_prob": 5.306973616825417e-05}, {"id": 156, "seek": 47300, "start": 478.0, "end": 481.0, "text": " are like that, where you have something beautiful out of the gate.", "tokens": [50364, 663, 390, 746, 300, 286, 519, 264, 15778, 1768, 575, 544, 3873, 300, 50614, 50614, 366, 411, 300, 11, 689, 291, 362, 746, 2238, 484, 295, 264, 8539, 13, 50764, 50764, 2699, 76, 15682, 307, 406, 300, 13, 50864, 50864, 467, 311, 767, 411, 309, 311, 544, 466, 264, 9952, 295, 428, 13333, 11, 597, 307, 51064, 51064, 46481, 534, 1627, 13, 51164, 51164, 583, 6284, 11, 281, 7207, 264, 11037, 11, 291, 528, 4079, 309, 311, 411, 11, 1392, 11, 51414, 51414, 436, 600, 1027, 746, 293, 309, 311, 2238, 293, 4696, 754, 544, 2238, 813, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.12185502760481126, "compression_ratio": 1.7333333333333334, "no_caption_prob": 5.306973616825417e-05}, {"id": 157, "seek": 47300, "start": 481.0, "end": 483.0, "text": " Elm UI is not that.", "tokens": [50364, 663, 390, 746, 300, 286, 519, 264, 15778, 1768, 575, 544, 3873, 300, 50614, 50614, 366, 411, 300, 11, 689, 291, 362, 746, 2238, 484, 295, 264, 8539, 13, 50764, 50764, 2699, 76, 15682, 307, 406, 300, 13, 50864, 50864, 467, 311, 767, 411, 309, 311, 544, 466, 264, 9952, 295, 428, 13333, 11, 597, 307, 51064, 51064, 46481, 534, 1627, 13, 51164, 51164, 583, 6284, 11, 281, 7207, 264, 11037, 11, 291, 528, 4079, 309, 311, 411, 11, 1392, 11, 51414, 51414, 436, 600, 1027, 746, 293, 309, 311, 2238, 293, 4696, 754, 544, 2238, 813, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.12185502760481126, "compression_ratio": 1.7333333333333334, "no_caption_prob": 5.306973616825417e-05}, {"id": 158, "seek": 47300, "start": 483.0, "end": 487.0, "text": " It's actually like it's more about the logic of your layout, which is", "tokens": [50364, 663, 390, 746, 300, 286, 519, 264, 15778, 1768, 575, 544, 3873, 300, 50614, 50614, 366, 411, 300, 11, 689, 291, 362, 746, 2238, 484, 295, 264, 8539, 13, 50764, 50764, 2699, 76, 15682, 307, 406, 300, 13, 50864, 50864, 467, 311, 767, 411, 309, 311, 544, 466, 264, 9952, 295, 428, 13333, 11, 597, 307, 51064, 51064, 46481, 534, 1627, 13, 51164, 51164, 583, 6284, 11, 281, 7207, 264, 11037, 11, 291, 528, 4079, 309, 311, 411, 11, 1392, 11, 51414, 51414, 436, 600, 1027, 746, 293, 309, 311, 2238, 293, 4696, 754, 544, 2238, 813, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.12185502760481126, "compression_ratio": 1.7333333333333334, "no_caption_prob": 5.306973616825417e-05}, {"id": 159, "seek": 47300, "start": 487.0, "end": 489.0, "text": " intellectually really cool.", "tokens": [50364, 663, 390, 746, 300, 286, 519, 264, 15778, 1768, 575, 544, 3873, 300, 50614, 50614, 366, 411, 300, 11, 689, 291, 362, 746, 2238, 484, 295, 264, 8539, 13, 50764, 50764, 2699, 76, 15682, 307, 406, 300, 13, 50864, 50864, 467, 311, 767, 411, 309, 311, 544, 466, 264, 9952, 295, 428, 13333, 11, 597, 307, 51064, 51064, 46481, 534, 1627, 13, 51164, 51164, 583, 6284, 11, 281, 7207, 264, 11037, 11, 291, 528, 4079, 309, 311, 411, 11, 1392, 11, 51414, 51414, 436, 600, 1027, 746, 293, 309, 311, 2238, 293, 4696, 754, 544, 2238, 813, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.12185502760481126, "compression_ratio": 1.7333333333333334, "no_caption_prob": 5.306973616825417e-05}, {"id": 160, "seek": 47300, "start": 489.0, "end": 494.0, "text": " But ultimately, to thread the needle, you want somewhere it's like, okay,", "tokens": [50364, 663, 390, 746, 300, 286, 519, 264, 15778, 1768, 575, 544, 3873, 300, 50614, 50614, 366, 411, 300, 11, 689, 291, 362, 746, 2238, 484, 295, 264, 8539, 13, 50764, 50764, 2699, 76, 15682, 307, 406, 300, 13, 50864, 50864, 467, 311, 767, 411, 309, 311, 544, 466, 264, 9952, 295, 428, 13333, 11, 597, 307, 51064, 51064, 46481, 534, 1627, 13, 51164, 51164, 583, 6284, 11, 281, 7207, 264, 11037, 11, 291, 528, 4079, 309, 311, 411, 11, 1392, 11, 51414, 51414, 436, 600, 1027, 746, 293, 309, 311, 2238, 293, 4696, 754, 544, 2238, 813, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.12185502760481126, "compression_ratio": 1.7333333333333334, "no_caption_prob": 5.306973616825417e-05}, {"id": 161, "seek": 47300, "start": 494.0, "end": 497.0, "text": " they've made something and it's beautiful and hopefully even more beautiful than", "tokens": [50364, 663, 390, 746, 300, 286, 519, 264, 15778, 1768, 575, 544, 3873, 300, 50614, 50614, 366, 411, 300, 11, 689, 291, 362, 746, 2238, 484, 295, 264, 8539, 13, 50764, 50764, 2699, 76, 15682, 307, 406, 300, 13, 50864, 50864, 467, 311, 767, 411, 309, 311, 544, 466, 264, 9952, 295, 428, 13333, 11, 597, 307, 51064, 51064, 46481, 534, 1627, 13, 51164, 51164, 583, 6284, 11, 281, 7207, 264, 11037, 11, 291, 528, 4079, 309, 311, 411, 11, 1392, 11, 51414, 51414, 436, 600, 1027, 746, 293, 309, 311, 2238, 293, 4696, 754, 544, 2238, 813, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.12185502760481126, "compression_ratio": 1.7333333333333334, "no_caption_prob": 5.306973616825417e-05}, {"id": 162, "seek": 49700, "start": 497.0, "end": 503.0, "text": " what they would do just, you know, if they were left to their own devices or whatever.", "tokens": [50364, 437, 436, 576, 360, 445, 11, 291, 458, 11, 498, 436, 645, 1411, 281, 641, 1065, 5759, 420, 2035, 13, 50664, 50664, 407, 689, 576, 2699, 76, 15549, 26647, 3318, 666, 341, 2293, 30, 50864, 50864, 407, 337, 300, 11, 309, 576, 312, 291, 1884, 512, 1333, 295, 2946, 1496, 1715, 2856, 11, 51114, 51114, 411, 428, 2017, 15851, 11, 27739, 15851, 13, 51264, 51264, 440, 1433, 11, 411, 281, 519, 466, 341, 2856, 11, 291, 576, 574, 281, 2115, 300, 51464, 51464, 16196, 764, 281, 1333, 295, 6786, 1715, 3652, 13, 51564, 51564, 400, 550, 291, 576, 8460, 257, 3840, 295, 2699, 76, 3089, 293, 291, 576, 733, 295, 362, 613, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.10259347126401704, "compression_ratio": 1.75, "no_caption_prob": 3.2190713682211936e-05}, {"id": 163, "seek": 49700, "start": 503.0, "end": 507.0, "text": " So where would Elm CodeGen fit into this exactly?", "tokens": [50364, 437, 436, 576, 360, 445, 11, 291, 458, 11, 498, 436, 645, 1411, 281, 641, 1065, 5759, 420, 2035, 13, 50664, 50664, 407, 689, 576, 2699, 76, 15549, 26647, 3318, 666, 341, 2293, 30, 50864, 50864, 407, 337, 300, 11, 309, 576, 312, 291, 1884, 512, 1333, 295, 2946, 1496, 1715, 2856, 11, 51114, 51114, 411, 428, 2017, 15851, 11, 27739, 15851, 13, 51264, 51264, 440, 1433, 11, 411, 281, 519, 466, 341, 2856, 11, 291, 576, 574, 281, 2115, 300, 51464, 51464, 16196, 764, 281, 1333, 295, 6786, 1715, 3652, 13, 51564, 51564, 400, 550, 291, 576, 8460, 257, 3840, 295, 2699, 76, 3089, 293, 291, 576, 733, 295, 362, 613, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.10259347126401704, "compression_ratio": 1.75, "no_caption_prob": 3.2190713682211936e-05}, {"id": 164, "seek": 49700, "start": 507.0, "end": 512.0, "text": " So for that, it would be you create some sort of higher level design language,", "tokens": [50364, 437, 436, 576, 360, 445, 11, 291, 458, 11, 498, 436, 645, 1411, 281, 641, 1065, 5759, 420, 2035, 13, 50664, 50664, 407, 689, 576, 2699, 76, 15549, 26647, 3318, 666, 341, 2293, 30, 50864, 50864, 407, 337, 300, 11, 309, 576, 312, 291, 1884, 512, 1333, 295, 2946, 1496, 1715, 2856, 11, 51114, 51114, 411, 428, 2017, 15851, 11, 27739, 15851, 13, 51264, 51264, 440, 1433, 11, 411, 281, 519, 466, 341, 2856, 11, 291, 576, 574, 281, 2115, 300, 51464, 51464, 16196, 764, 281, 1333, 295, 6786, 1715, 3652, 13, 51564, 51564, 400, 550, 291, 576, 8460, 257, 3840, 295, 2699, 76, 3089, 293, 291, 576, 733, 295, 362, 613, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.10259347126401704, "compression_ratio": 1.75, "no_caption_prob": 3.2190713682211936e-05}, {"id": 165, "seek": 49700, "start": 512.0, "end": 515.0, "text": " like your color palette, spacing palette.", "tokens": [50364, 437, 436, 576, 360, 445, 11, 291, 458, 11, 498, 436, 645, 1411, 281, 641, 1065, 5759, 420, 2035, 13, 50664, 50664, 407, 689, 576, 2699, 76, 15549, 26647, 3318, 666, 341, 2293, 30, 50864, 50864, 407, 337, 300, 11, 309, 576, 312, 291, 1884, 512, 1333, 295, 2946, 1496, 1715, 2856, 11, 51114, 51114, 411, 428, 2017, 15851, 11, 27739, 15851, 13, 51264, 51264, 440, 1433, 11, 411, 281, 519, 466, 341, 2856, 11, 291, 576, 574, 281, 2115, 300, 51464, 51464, 16196, 764, 281, 1333, 295, 6786, 1715, 3652, 13, 51564, 51564, 400, 550, 291, 576, 8460, 257, 3840, 295, 2699, 76, 3089, 293, 291, 576, 733, 295, 362, 613, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.10259347126401704, "compression_ratio": 1.75, "no_caption_prob": 3.2190713682211936e-05}, {"id": 166, "seek": 49700, "start": 515.0, "end": 519.0, "text": " The term, like to think about this language, you would look to terms that", "tokens": [50364, 437, 436, 576, 360, 445, 11, 291, 458, 11, 498, 436, 645, 1411, 281, 641, 1065, 5759, 420, 2035, 13, 50664, 50664, 407, 689, 576, 2699, 76, 15549, 26647, 3318, 666, 341, 2293, 30, 50864, 50864, 407, 337, 300, 11, 309, 576, 312, 291, 1884, 512, 1333, 295, 2946, 1496, 1715, 2856, 11, 51114, 51114, 411, 428, 2017, 15851, 11, 27739, 15851, 13, 51264, 51264, 440, 1433, 11, 411, 281, 519, 466, 341, 2856, 11, 291, 576, 574, 281, 2115, 300, 51464, 51464, 16196, 764, 281, 1333, 295, 6786, 1715, 3652, 13, 51564, 51564, 400, 550, 291, 576, 8460, 257, 3840, 295, 2699, 76, 3089, 293, 291, 576, 733, 295, 362, 613, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.10259347126401704, "compression_ratio": 1.75, "no_caption_prob": 3.2190713682211936e-05}, {"id": 167, "seek": 49700, "start": 519.0, "end": 521.0, "text": " designers use to sort of describe design systems.", "tokens": [50364, 437, 436, 576, 360, 445, 11, 291, 458, 11, 498, 436, 645, 1411, 281, 641, 1065, 5759, 420, 2035, 13, 50664, 50664, 407, 689, 576, 2699, 76, 15549, 26647, 3318, 666, 341, 2293, 30, 50864, 50864, 407, 337, 300, 11, 309, 576, 312, 291, 1884, 512, 1333, 295, 2946, 1496, 1715, 2856, 11, 51114, 51114, 411, 428, 2017, 15851, 11, 27739, 15851, 13, 51264, 51264, 440, 1433, 11, 411, 281, 519, 466, 341, 2856, 11, 291, 576, 574, 281, 2115, 300, 51464, 51464, 16196, 764, 281, 1333, 295, 6786, 1715, 3652, 13, 51564, 51564, 400, 550, 291, 576, 8460, 257, 3840, 295, 2699, 76, 3089, 293, 291, 576, 733, 295, 362, 613, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.10259347126401704, "compression_ratio": 1.75, "no_caption_prob": 3.2190713682211936e-05}, {"id": 168, "seek": 49700, "start": 521.0, "end": 525.0, "text": " And then you would generate a bunch of Elm code and you would kind of have these", "tokens": [50364, 437, 436, 576, 360, 445, 11, 291, 458, 11, 498, 436, 645, 1411, 281, 641, 1065, 5759, 420, 2035, 13, 50664, 50664, 407, 689, 576, 2699, 76, 15549, 26647, 3318, 666, 341, 2293, 30, 50864, 50864, 407, 337, 300, 11, 309, 576, 312, 291, 1884, 512, 1333, 295, 2946, 1496, 1715, 2856, 11, 51114, 51114, 411, 428, 2017, 15851, 11, 27739, 15851, 13, 51264, 51264, 440, 1433, 11, 411, 281, 519, 466, 341, 2856, 11, 291, 576, 574, 281, 2115, 300, 51464, 51464, 16196, 764, 281, 1333, 295, 6786, 1715, 3652, 13, 51564, 51564, 400, 550, 291, 576, 8460, 257, 3840, 295, 2699, 76, 3089, 293, 291, 576, 733, 295, 362, 613, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.10259347126401704, "compression_ratio": 1.75, "no_caption_prob": 3.2190713682211936e-05}, {"id": 169, "seek": 52500, "start": 525.0, "end": 529.0, "text": " values baked in and then you can get this sort of, it's not really a guarantee,", "tokens": [50364, 4190, 19453, 294, 293, 550, 291, 393, 483, 341, 1333, 295, 11, 309, 311, 406, 534, 257, 10815, 11, 50564, 50564, 457, 1310, 411, 257, 1465, 11, 534, 257, 2787, 10815, 13, 50664, 50664, 583, 309, 311, 411, 498, 291, 434, 787, 8407, 490, 341, 10833, 11, 291, 458, 11, 15682, 6314, 50864, 50864, 3991, 11, 291, 362, 341, 1238, 665, 551, 295, 411, 11, 291, 458, 11, 562, 291, 434, 1056, 32600, 51064, 51064, 2380, 295, 428, 1715, 1185, 293, 291, 458, 300, 498, 291, 764, 721, 490, 341, 51214, 51214, 3991, 11, 309, 311, 445, 516, 281, 420, 992, 295, 7098, 11, 309, 311, 445, 456, 366, 445, 516, 281, 589, 13, 51414, 51414, 407, 797, 11, 370, 309, 311, 1940, 411, 11, 293, 365, 15549, 26647, 11, 286, 411, 281, 519, 295, 411, 11, 1338, 11, 51614, 51614, 15743, 293, 23930, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.12197703163095769, "compression_ratio": 1.875, "no_caption_prob": 2.3922559194033965e-05}, {"id": 170, "seek": 52500, "start": 529.0, "end": 531.0, "text": " but maybe like a sign, really a soft guarantee.", "tokens": [50364, 4190, 19453, 294, 293, 550, 291, 393, 483, 341, 1333, 295, 11, 309, 311, 406, 534, 257, 10815, 11, 50564, 50564, 457, 1310, 411, 257, 1465, 11, 534, 257, 2787, 10815, 13, 50664, 50664, 583, 309, 311, 411, 498, 291, 434, 787, 8407, 490, 341, 10833, 11, 291, 458, 11, 15682, 6314, 50864, 50864, 3991, 11, 291, 362, 341, 1238, 665, 551, 295, 411, 11, 291, 458, 11, 562, 291, 434, 1056, 32600, 51064, 51064, 2380, 295, 428, 1715, 1185, 293, 291, 458, 300, 498, 291, 764, 721, 490, 341, 51214, 51214, 3991, 11, 309, 311, 445, 516, 281, 420, 992, 295, 7098, 11, 309, 311, 445, 456, 366, 445, 516, 281, 589, 13, 51414, 51414, 407, 797, 11, 370, 309, 311, 1940, 411, 11, 293, 365, 15549, 26647, 11, 286, 411, 281, 519, 295, 411, 11, 1338, 11, 51614, 51614, 15743, 293, 23930, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.12197703163095769, "compression_ratio": 1.875, "no_caption_prob": 2.3922559194033965e-05}, {"id": 171, "seek": 52500, "start": 531.0, "end": 535.0, "text": " But it's like if you're only pulling from this generated, you know, UI theme", "tokens": [50364, 4190, 19453, 294, 293, 550, 291, 393, 483, 341, 1333, 295, 11, 309, 311, 406, 534, 257, 10815, 11, 50564, 50564, 457, 1310, 411, 257, 1465, 11, 534, 257, 2787, 10815, 13, 50664, 50664, 583, 309, 311, 411, 498, 291, 434, 787, 8407, 490, 341, 10833, 11, 291, 458, 11, 15682, 6314, 50864, 50864, 3991, 11, 291, 362, 341, 1238, 665, 551, 295, 411, 11, 291, 458, 11, 562, 291, 434, 1056, 32600, 51064, 51064, 2380, 295, 428, 1715, 1185, 293, 291, 458, 300, 498, 291, 764, 721, 490, 341, 51214, 51214, 3991, 11, 309, 311, 445, 516, 281, 420, 992, 295, 7098, 11, 309, 311, 445, 456, 366, 445, 516, 281, 589, 13, 51414, 51414, 407, 797, 11, 370, 309, 311, 1940, 411, 11, 293, 365, 15549, 26647, 11, 286, 411, 281, 519, 295, 411, 11, 1338, 11, 51614, 51614, 15743, 293, 23930, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.12197703163095769, "compression_ratio": 1.875, "no_caption_prob": 2.3922559194033965e-05}, {"id": 172, "seek": 52500, "start": 535.0, "end": 539.0, "text": " file, you have this pretty good thing of like, you know, when you're straying", "tokens": [50364, 4190, 19453, 294, 293, 550, 291, 393, 483, 341, 1333, 295, 11, 309, 311, 406, 534, 257, 10815, 11, 50564, 50564, 457, 1310, 411, 257, 1465, 11, 534, 257, 2787, 10815, 13, 50664, 50664, 583, 309, 311, 411, 498, 291, 434, 787, 8407, 490, 341, 10833, 11, 291, 458, 11, 15682, 6314, 50864, 50864, 3991, 11, 291, 362, 341, 1238, 665, 551, 295, 411, 11, 291, 458, 11, 562, 291, 434, 1056, 32600, 51064, 51064, 2380, 295, 428, 1715, 1185, 293, 291, 458, 300, 498, 291, 764, 721, 490, 341, 51214, 51214, 3991, 11, 309, 311, 445, 516, 281, 420, 992, 295, 7098, 11, 309, 311, 445, 456, 366, 445, 516, 281, 589, 13, 51414, 51414, 407, 797, 11, 370, 309, 311, 1940, 411, 11, 293, 365, 15549, 26647, 11, 286, 411, 281, 519, 295, 411, 11, 1338, 11, 51614, 51614, 15743, 293, 23930, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.12197703163095769, "compression_ratio": 1.875, "no_caption_prob": 2.3922559194033965e-05}, {"id": 173, "seek": 52500, "start": 539.0, "end": 542.0, "text": " outside of your design system and you know that if you use things from this", "tokens": [50364, 4190, 19453, 294, 293, 550, 291, 393, 483, 341, 1333, 295, 11, 309, 311, 406, 534, 257, 10815, 11, 50564, 50564, 457, 1310, 411, 257, 1465, 11, 534, 257, 2787, 10815, 13, 50664, 50664, 583, 309, 311, 411, 498, 291, 434, 787, 8407, 490, 341, 10833, 11, 291, 458, 11, 15682, 6314, 50864, 50864, 3991, 11, 291, 362, 341, 1238, 665, 551, 295, 411, 11, 291, 458, 11, 562, 291, 434, 1056, 32600, 51064, 51064, 2380, 295, 428, 1715, 1185, 293, 291, 458, 300, 498, 291, 764, 721, 490, 341, 51214, 51214, 3991, 11, 309, 311, 445, 516, 281, 420, 992, 295, 7098, 11, 309, 311, 445, 456, 366, 445, 516, 281, 589, 13, 51414, 51414, 407, 797, 11, 370, 309, 311, 1940, 411, 11, 293, 365, 15549, 26647, 11, 286, 411, 281, 519, 295, 411, 11, 1338, 11, 51614, 51614, 15743, 293, 23930, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.12197703163095769, "compression_ratio": 1.875, "no_caption_prob": 2.3922559194033965e-05}, {"id": 174, "seek": 52500, "start": 542.0, "end": 546.0, "text": " file, it's just going to or set of files, it's just there are just going to work.", "tokens": [50364, 4190, 19453, 294, 293, 550, 291, 393, 483, 341, 1333, 295, 11, 309, 311, 406, 534, 257, 10815, 11, 50564, 50564, 457, 1310, 411, 257, 1465, 11, 534, 257, 2787, 10815, 13, 50664, 50664, 583, 309, 311, 411, 498, 291, 434, 787, 8407, 490, 341, 10833, 11, 291, 458, 11, 15682, 6314, 50864, 50864, 3991, 11, 291, 362, 341, 1238, 665, 551, 295, 411, 11, 291, 458, 11, 562, 291, 434, 1056, 32600, 51064, 51064, 2380, 295, 428, 1715, 1185, 293, 291, 458, 300, 498, 291, 764, 721, 490, 341, 51214, 51214, 3991, 11, 309, 311, 445, 516, 281, 420, 992, 295, 7098, 11, 309, 311, 445, 456, 366, 445, 516, 281, 589, 13, 51414, 51414, 407, 797, 11, 370, 309, 311, 1940, 411, 11, 293, 365, 15549, 26647, 11, 286, 411, 281, 519, 295, 411, 11, 1338, 11, 51614, 51614, 15743, 293, 23930, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.12197703163095769, "compression_ratio": 1.875, "no_caption_prob": 2.3922559194033965e-05}, {"id": 175, "seek": 52500, "start": 546.0, "end": 550.0, "text": " So again, so it's taking like, and with CodeGen, I like to think of like, yeah,", "tokens": [50364, 4190, 19453, 294, 293, 550, 291, 393, 483, 341, 1333, 295, 11, 309, 311, 406, 534, 257, 10815, 11, 50564, 50564, 457, 1310, 411, 257, 1465, 11, 534, 257, 2787, 10815, 13, 50664, 50664, 583, 309, 311, 411, 498, 291, 434, 787, 8407, 490, 341, 10833, 11, 291, 458, 11, 15682, 6314, 50864, 50864, 3991, 11, 291, 362, 341, 1238, 665, 551, 295, 411, 11, 291, 458, 11, 562, 291, 434, 1056, 32600, 51064, 51064, 2380, 295, 428, 1715, 1185, 293, 291, 458, 300, 498, 291, 764, 721, 490, 341, 51214, 51214, 3991, 11, 309, 311, 445, 516, 281, 420, 992, 295, 7098, 11, 309, 311, 445, 456, 366, 445, 516, 281, 589, 13, 51414, 51414, 407, 797, 11, 370, 309, 311, 1940, 411, 11, 293, 365, 15549, 26647, 11, 286, 411, 281, 519, 295, 411, 11, 1338, 11, 51614, 51614, 15743, 293, 23930, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.12197703163095769, "compression_ratio": 1.875, "no_caption_prob": 2.3922559194033965e-05}, {"id": 176, "seek": 52500, "start": 550.0, "end": 551.0, "text": " inputs and outputs.", "tokens": [50364, 4190, 19453, 294, 293, 550, 291, 393, 483, 341, 1333, 295, 11, 309, 311, 406, 534, 257, 10815, 11, 50564, 50564, 457, 1310, 411, 257, 1465, 11, 534, 257, 2787, 10815, 13, 50664, 50664, 583, 309, 311, 411, 498, 291, 434, 787, 8407, 490, 341, 10833, 11, 291, 458, 11, 15682, 6314, 50864, 50864, 3991, 11, 291, 362, 341, 1238, 665, 551, 295, 411, 11, 291, 458, 11, 562, 291, 434, 1056, 32600, 51064, 51064, 2380, 295, 428, 1715, 1185, 293, 291, 458, 300, 498, 291, 764, 721, 490, 341, 51214, 51214, 3991, 11, 309, 311, 445, 516, 281, 420, 992, 295, 7098, 11, 309, 311, 445, 456, 366, 445, 516, 281, 589, 13, 51414, 51414, 407, 797, 11, 370, 309, 311, 1940, 411, 11, 293, 365, 15549, 26647, 11, 286, 411, 281, 519, 295, 411, 11, 1338, 11, 51614, 51614, 15743, 293, 23930, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.12197703163095769, "compression_ratio": 1.875, "no_caption_prob": 2.3922559194033965e-05}, {"id": 177, "seek": 55100, "start": 551.0, "end": 557.0, "text": " So GQL, it was the GraphQL schema and your queries and mutations to Elm code.", "tokens": [50364, 407, 460, 13695, 11, 309, 390, 264, 21884, 13695, 34078, 293, 428, 24109, 293, 29243, 281, 2699, 76, 3089, 13, 50664, 50664, 682, 341, 1389, 11, 309, 576, 312, 411, 512, 1090, 1496, 1715, 2856, 13, 50864, 50864, 961, 311, 312, 3143, 11, 286, 2378, 380, 1096, 341, 1939, 11, 558, 30, 50964, 50964, 583, 309, 311, 544, 445, 294, 24106, 18764, 13, 51064, 51064, 400, 550, 291, 747, 300, 293, 291, 1116, 312, 1075, 281, 16562, 294, 613, 4190, 666, 512, 51264, 51264, 10833, 2699, 76, 3089, 13, 51364, 51364, 407, 729, 645, 733, 295, 11, 293, 611, 445, 286, 1352, 300, 456, 645, 5870, 707, 15549, 26647, 11, 51614, 51614, 291, 458, 11, 9608, 300, 286, 478, 411, 11, 1954, 11, 498, 286, 727, 8460, 512, 3089, 11, 341, 576, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.09126454241135541, "compression_ratio": 1.6262626262626263, "no_caption_prob": 1.6700925698387437e-05}, {"id": 178, "seek": 55100, "start": 557.0, "end": 561.0, "text": " In this case, it would be like some high level design language.", "tokens": [50364, 407, 460, 13695, 11, 309, 390, 264, 21884, 13695, 34078, 293, 428, 24109, 293, 29243, 281, 2699, 76, 3089, 13, 50664, 50664, 682, 341, 1389, 11, 309, 576, 312, 411, 512, 1090, 1496, 1715, 2856, 13, 50864, 50864, 961, 311, 312, 3143, 11, 286, 2378, 380, 1096, 341, 1939, 11, 558, 30, 50964, 50964, 583, 309, 311, 544, 445, 294, 24106, 18764, 13, 51064, 51064, 400, 550, 291, 747, 300, 293, 291, 1116, 312, 1075, 281, 16562, 294, 613, 4190, 666, 512, 51264, 51264, 10833, 2699, 76, 3089, 13, 51364, 51364, 407, 729, 645, 733, 295, 11, 293, 611, 445, 286, 1352, 300, 456, 645, 5870, 707, 15549, 26647, 11, 51614, 51614, 291, 458, 11, 9608, 300, 286, 478, 411, 11, 1954, 11, 498, 286, 727, 8460, 512, 3089, 11, 341, 576, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.09126454241135541, "compression_ratio": 1.6262626262626263, "no_caption_prob": 1.6700925698387437e-05}, {"id": 179, "seek": 55100, "start": 561.0, "end": 563.0, "text": " Let's be fair, I haven't done this yet, right?", "tokens": [50364, 407, 460, 13695, 11, 309, 390, 264, 21884, 13695, 34078, 293, 428, 24109, 293, 29243, 281, 2699, 76, 3089, 13, 50664, 50664, 682, 341, 1389, 11, 309, 576, 312, 411, 512, 1090, 1496, 1715, 2856, 13, 50864, 50864, 961, 311, 312, 3143, 11, 286, 2378, 380, 1096, 341, 1939, 11, 558, 30, 50964, 50964, 583, 309, 311, 544, 445, 294, 24106, 18764, 13, 51064, 51064, 400, 550, 291, 747, 300, 293, 291, 1116, 312, 1075, 281, 16562, 294, 613, 4190, 666, 512, 51264, 51264, 10833, 2699, 76, 3089, 13, 51364, 51364, 407, 729, 645, 733, 295, 11, 293, 611, 445, 286, 1352, 300, 456, 645, 5870, 707, 15549, 26647, 11, 51614, 51614, 291, 458, 11, 9608, 300, 286, 478, 411, 11, 1954, 11, 498, 286, 727, 8460, 512, 3089, 11, 341, 576, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.09126454241135541, "compression_ratio": 1.6262626262626263, "no_caption_prob": 1.6700925698387437e-05}, {"id": 180, "seek": 55100, "start": 563.0, "end": 565.0, "text": " But it's more just in conceptual phases.", "tokens": [50364, 407, 460, 13695, 11, 309, 390, 264, 21884, 13695, 34078, 293, 428, 24109, 293, 29243, 281, 2699, 76, 3089, 13, 50664, 50664, 682, 341, 1389, 11, 309, 576, 312, 411, 512, 1090, 1496, 1715, 2856, 13, 50864, 50864, 961, 311, 312, 3143, 11, 286, 2378, 380, 1096, 341, 1939, 11, 558, 30, 50964, 50964, 583, 309, 311, 544, 445, 294, 24106, 18764, 13, 51064, 51064, 400, 550, 291, 747, 300, 293, 291, 1116, 312, 1075, 281, 16562, 294, 613, 4190, 666, 512, 51264, 51264, 10833, 2699, 76, 3089, 13, 51364, 51364, 407, 729, 645, 733, 295, 11, 293, 611, 445, 286, 1352, 300, 456, 645, 5870, 707, 15549, 26647, 11, 51614, 51614, 291, 458, 11, 9608, 300, 286, 478, 411, 11, 1954, 11, 498, 286, 727, 8460, 512, 3089, 11, 341, 576, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.09126454241135541, "compression_ratio": 1.6262626262626263, "no_caption_prob": 1.6700925698387437e-05}, {"id": 181, "seek": 55100, "start": 565.0, "end": 569.0, "text": " And then you take that and you'd be able to bake in these values into some", "tokens": [50364, 407, 460, 13695, 11, 309, 390, 264, 21884, 13695, 34078, 293, 428, 24109, 293, 29243, 281, 2699, 76, 3089, 13, 50664, 50664, 682, 341, 1389, 11, 309, 576, 312, 411, 512, 1090, 1496, 1715, 2856, 13, 50864, 50864, 961, 311, 312, 3143, 11, 286, 2378, 380, 1096, 341, 1939, 11, 558, 30, 50964, 50964, 583, 309, 311, 544, 445, 294, 24106, 18764, 13, 51064, 51064, 400, 550, 291, 747, 300, 293, 291, 1116, 312, 1075, 281, 16562, 294, 613, 4190, 666, 512, 51264, 51264, 10833, 2699, 76, 3089, 13, 51364, 51364, 407, 729, 645, 733, 295, 11, 293, 611, 445, 286, 1352, 300, 456, 645, 5870, 707, 15549, 26647, 11, 51614, 51614, 291, 458, 11, 9608, 300, 286, 478, 411, 11, 1954, 11, 498, 286, 727, 8460, 512, 3089, 11, 341, 576, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.09126454241135541, "compression_ratio": 1.6262626262626263, "no_caption_prob": 1.6700925698387437e-05}, {"id": 182, "seek": 55100, "start": 569.0, "end": 571.0, "text": " generated Elm code.", "tokens": [50364, 407, 460, 13695, 11, 309, 390, 264, 21884, 13695, 34078, 293, 428, 24109, 293, 29243, 281, 2699, 76, 3089, 13, 50664, 50664, 682, 341, 1389, 11, 309, 576, 312, 411, 512, 1090, 1496, 1715, 2856, 13, 50864, 50864, 961, 311, 312, 3143, 11, 286, 2378, 380, 1096, 341, 1939, 11, 558, 30, 50964, 50964, 583, 309, 311, 544, 445, 294, 24106, 18764, 13, 51064, 51064, 400, 550, 291, 747, 300, 293, 291, 1116, 312, 1075, 281, 16562, 294, 613, 4190, 666, 512, 51264, 51264, 10833, 2699, 76, 3089, 13, 51364, 51364, 407, 729, 645, 733, 295, 11, 293, 611, 445, 286, 1352, 300, 456, 645, 5870, 707, 15549, 26647, 11, 51614, 51614, 291, 458, 11, 9608, 300, 286, 478, 411, 11, 1954, 11, 498, 286, 727, 8460, 512, 3089, 11, 341, 576, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.09126454241135541, "compression_ratio": 1.6262626262626263, "no_caption_prob": 1.6700925698387437e-05}, {"id": 183, "seek": 55100, "start": 571.0, "end": 576.0, "text": " So those were kind of, and also just I found that there were tiny little CodeGen,", "tokens": [50364, 407, 460, 13695, 11, 309, 390, 264, 21884, 13695, 34078, 293, 428, 24109, 293, 29243, 281, 2699, 76, 3089, 13, 50664, 50664, 682, 341, 1389, 11, 309, 576, 312, 411, 512, 1090, 1496, 1715, 2856, 13, 50864, 50864, 961, 311, 312, 3143, 11, 286, 2378, 380, 1096, 341, 1939, 11, 558, 30, 50964, 50964, 583, 309, 311, 544, 445, 294, 24106, 18764, 13, 51064, 51064, 400, 550, 291, 747, 300, 293, 291, 1116, 312, 1075, 281, 16562, 294, 613, 4190, 666, 512, 51264, 51264, 10833, 2699, 76, 3089, 13, 51364, 51364, 407, 729, 645, 733, 295, 11, 293, 611, 445, 286, 1352, 300, 456, 645, 5870, 707, 15549, 26647, 11, 51614, 51614, 291, 458, 11, 9608, 300, 286, 478, 411, 11, 1954, 11, 498, 286, 727, 8460, 512, 3089, 11, 341, 576, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.09126454241135541, "compression_ratio": 1.6262626262626263, "no_caption_prob": 1.6700925698387437e-05}, {"id": 184, "seek": 55100, "start": 576.0, "end": 579.0, "text": " you know, tasks that I'm like, oh, if I could generate some code, this would", "tokens": [50364, 407, 460, 13695, 11, 309, 390, 264, 21884, 13695, 34078, 293, 428, 24109, 293, 29243, 281, 2699, 76, 3089, 13, 50664, 50664, 682, 341, 1389, 11, 309, 576, 312, 411, 512, 1090, 1496, 1715, 2856, 13, 50864, 50864, 961, 311, 312, 3143, 11, 286, 2378, 380, 1096, 341, 1939, 11, 558, 30, 50964, 50964, 583, 309, 311, 544, 445, 294, 24106, 18764, 13, 51064, 51064, 400, 550, 291, 747, 300, 293, 291, 1116, 312, 1075, 281, 16562, 294, 613, 4190, 666, 512, 51264, 51264, 10833, 2699, 76, 3089, 13, 51364, 51364, 407, 729, 645, 733, 295, 11, 293, 611, 445, 286, 1352, 300, 456, 645, 5870, 707, 15549, 26647, 11, 51614, 51614, 291, 458, 11, 9608, 300, 286, 478, 411, 11, 1954, 11, 498, 286, 727, 8460, 512, 3089, 11, 341, 576, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.09126454241135541, "compression_ratio": 1.6262626262626263, "no_caption_prob": 1.6700925698387437e-05}, {"id": 185, "seek": 57900, "start": 579.0, "end": 581.0, "text": " actually be really, really nice.", "tokens": [50364, 767, 312, 534, 11, 534, 1481, 13, 50464, 50464, 1743, 11, 457, 341, 307, 1270, 257, 1359, 551, 382, 341, 754, 411, 257, 1716, 13, 50664, 50664, 400, 286, 478, 411, 11, 293, 286, 600, 5694, 300, 286, 519, 661, 561, 362, 613, 3487, 886, 13, 50864, 50864, 400, 370, 1419, 309, 11, 370, 364, 1365, 295, 341, 307, 411, 11, 731, 11, 291, 458, 11, 321, 412, 691, 521, 284, 11, 51064, 51064, 321, 11, 291, 458, 11, 321, 362, 527, 1715, 1469, 293, 436, 434, 1364, 322, 1507, 293, 264, 51264, 51264, 1715, 1469, 2909, 294, 479, 16150, 5240, 13, 51364, 51364, 400, 370, 436, 434, 4084, 24617, 293, 1203, 13, 51514, 51514, 400, 472, 295, 264, 721, 321, 1352, 390, 11, 731, 11, 321, 362, 527, 1065, 992, 295, 23308, 456, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.0966041744619176, "compression_ratio": 1.8191881918819188, "no_caption_prob": 2.429906635370571e-05}, {"id": 186, "seek": 57900, "start": 581.0, "end": 585.0, "text": " Like, but this is such a small thing as this even like a project.", "tokens": [50364, 767, 312, 534, 11, 534, 1481, 13, 50464, 50464, 1743, 11, 457, 341, 307, 1270, 257, 1359, 551, 382, 341, 754, 411, 257, 1716, 13, 50664, 50664, 400, 286, 478, 411, 11, 293, 286, 600, 5694, 300, 286, 519, 661, 561, 362, 613, 3487, 886, 13, 50864, 50864, 400, 370, 1419, 309, 11, 370, 364, 1365, 295, 341, 307, 411, 11, 731, 11, 291, 458, 11, 321, 412, 691, 521, 284, 11, 51064, 51064, 321, 11, 291, 458, 11, 321, 362, 527, 1715, 1469, 293, 436, 434, 1364, 322, 1507, 293, 264, 51264, 51264, 1715, 1469, 2909, 294, 479, 16150, 5240, 13, 51364, 51364, 400, 370, 436, 434, 4084, 24617, 293, 1203, 13, 51514, 51514, 400, 472, 295, 264, 721, 321, 1352, 390, 11, 731, 11, 321, 362, 527, 1065, 992, 295, 23308, 456, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.0966041744619176, "compression_ratio": 1.8191881918819188, "no_caption_prob": 2.429906635370571e-05}, {"id": 187, "seek": 57900, "start": 585.0, "end": 589.0, "text": " And I'm like, and I've noticed that I think other people have these ideas too.", "tokens": [50364, 767, 312, 534, 11, 534, 1481, 13, 50464, 50464, 1743, 11, 457, 341, 307, 1270, 257, 1359, 551, 382, 341, 754, 411, 257, 1716, 13, 50664, 50664, 400, 286, 478, 411, 11, 293, 286, 600, 5694, 300, 286, 519, 661, 561, 362, 613, 3487, 886, 13, 50864, 50864, 400, 370, 1419, 309, 11, 370, 364, 1365, 295, 341, 307, 411, 11, 731, 11, 291, 458, 11, 321, 412, 691, 521, 284, 11, 51064, 51064, 321, 11, 291, 458, 11, 321, 362, 527, 1715, 1469, 293, 436, 434, 1364, 322, 1507, 293, 264, 51264, 51264, 1715, 1469, 2909, 294, 479, 16150, 5240, 13, 51364, 51364, 400, 370, 436, 434, 4084, 24617, 293, 1203, 13, 51514, 51514, 400, 472, 295, 264, 721, 321, 1352, 390, 11, 731, 11, 321, 362, 527, 1065, 992, 295, 23308, 456, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.0966041744619176, "compression_ratio": 1.8191881918819188, "no_caption_prob": 2.429906635370571e-05}, {"id": 188, "seek": 57900, "start": 589.0, "end": 593.0, "text": " And so having it, so an example of this is like, well, you know, we at Vendor,", "tokens": [50364, 767, 312, 534, 11, 534, 1481, 13, 50464, 50464, 1743, 11, 457, 341, 307, 1270, 257, 1359, 551, 382, 341, 754, 411, 257, 1716, 13, 50664, 50664, 400, 286, 478, 411, 11, 293, 286, 600, 5694, 300, 286, 519, 661, 561, 362, 613, 3487, 886, 13, 50864, 50864, 400, 370, 1419, 309, 11, 370, 364, 1365, 295, 341, 307, 411, 11, 731, 11, 291, 458, 11, 321, 412, 691, 521, 284, 11, 51064, 51064, 321, 11, 291, 458, 11, 321, 362, 527, 1715, 1469, 293, 436, 434, 1364, 322, 1507, 293, 264, 51264, 51264, 1715, 1469, 2909, 294, 479, 16150, 5240, 13, 51364, 51364, 400, 370, 436, 434, 4084, 24617, 293, 1203, 13, 51514, 51514, 400, 472, 295, 264, 721, 321, 1352, 390, 11, 731, 11, 321, 362, 527, 1065, 992, 295, 23308, 456, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.0966041744619176, "compression_ratio": 1.8191881918819188, "no_caption_prob": 2.429906635370571e-05}, {"id": 189, "seek": 57900, "start": 593.0, "end": 597.0, "text": " we, you know, we have our design team and they're working on stuff and the", "tokens": [50364, 767, 312, 534, 11, 534, 1481, 13, 50464, 50464, 1743, 11, 457, 341, 307, 1270, 257, 1359, 551, 382, 341, 754, 411, 257, 1716, 13, 50664, 50664, 400, 286, 478, 411, 11, 293, 286, 600, 5694, 300, 286, 519, 661, 561, 362, 613, 3487, 886, 13, 50864, 50864, 400, 370, 1419, 309, 11, 370, 364, 1365, 295, 341, 307, 411, 11, 731, 11, 291, 458, 11, 321, 412, 691, 521, 284, 11, 51064, 51064, 321, 11, 291, 458, 11, 321, 362, 527, 1715, 1469, 293, 436, 434, 1364, 322, 1507, 293, 264, 51264, 51264, 1715, 1469, 2909, 294, 479, 16150, 5240, 13, 51364, 51364, 400, 370, 436, 434, 4084, 24617, 293, 1203, 13, 51514, 51514, 400, 472, 295, 264, 721, 321, 1352, 390, 11, 731, 11, 321, 362, 527, 1065, 992, 295, 23308, 456, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.0966041744619176, "compression_ratio": 1.8191881918819188, "no_caption_prob": 2.429906635370571e-05}, {"id": 190, "seek": 57900, "start": 597.0, "end": 599.0, "text": " design team lives in Figma mostly.", "tokens": [50364, 767, 312, 534, 11, 534, 1481, 13, 50464, 50464, 1743, 11, 457, 341, 307, 1270, 257, 1359, 551, 382, 341, 754, 411, 257, 1716, 13, 50664, 50664, 400, 286, 478, 411, 11, 293, 286, 600, 5694, 300, 286, 519, 661, 561, 362, 613, 3487, 886, 13, 50864, 50864, 400, 370, 1419, 309, 11, 370, 364, 1365, 295, 341, 307, 411, 11, 731, 11, 291, 458, 11, 321, 412, 691, 521, 284, 11, 51064, 51064, 321, 11, 291, 458, 11, 321, 362, 527, 1715, 1469, 293, 436, 434, 1364, 322, 1507, 293, 264, 51264, 51264, 1715, 1469, 2909, 294, 479, 16150, 5240, 13, 51364, 51364, 400, 370, 436, 434, 4084, 24617, 293, 1203, 13, 51514, 51514, 400, 472, 295, 264, 721, 321, 1352, 390, 11, 731, 11, 321, 362, 527, 1065, 992, 295, 23308, 456, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.0966041744619176, "compression_ratio": 1.8191881918819188, "no_caption_prob": 2.429906635370571e-05}, {"id": 191, "seek": 57900, "start": 599.0, "end": 602.0, "text": " And so they're creating artifacts and everything.", "tokens": [50364, 767, 312, 534, 11, 534, 1481, 13, 50464, 50464, 1743, 11, 457, 341, 307, 1270, 257, 1359, 551, 382, 341, 754, 411, 257, 1716, 13, 50664, 50664, 400, 286, 478, 411, 11, 293, 286, 600, 5694, 300, 286, 519, 661, 561, 362, 613, 3487, 886, 13, 50864, 50864, 400, 370, 1419, 309, 11, 370, 364, 1365, 295, 341, 307, 411, 11, 731, 11, 291, 458, 11, 321, 412, 691, 521, 284, 11, 51064, 51064, 321, 11, 291, 458, 11, 321, 362, 527, 1715, 1469, 293, 436, 434, 1364, 322, 1507, 293, 264, 51264, 51264, 1715, 1469, 2909, 294, 479, 16150, 5240, 13, 51364, 51364, 400, 370, 436, 434, 4084, 24617, 293, 1203, 13, 51514, 51514, 400, 472, 295, 264, 721, 321, 1352, 390, 11, 731, 11, 321, 362, 527, 1065, 992, 295, 23308, 456, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.0966041744619176, "compression_ratio": 1.8191881918819188, "no_caption_prob": 2.429906635370571e-05}, {"id": 192, "seek": 57900, "start": 602.0, "end": 605.0, "text": " And one of the things we found was, well, we have our own set of icons there", "tokens": [50364, 767, 312, 534, 11, 534, 1481, 13, 50464, 50464, 1743, 11, 457, 341, 307, 1270, 257, 1359, 551, 382, 341, 754, 411, 257, 1716, 13, 50664, 50664, 400, 286, 478, 411, 11, 293, 286, 600, 5694, 300, 286, 519, 661, 561, 362, 613, 3487, 886, 13, 50864, 50864, 400, 370, 1419, 309, 11, 370, 364, 1365, 295, 341, 307, 411, 11, 731, 11, 291, 458, 11, 321, 412, 691, 521, 284, 11, 51064, 51064, 321, 11, 291, 458, 11, 321, 362, 527, 1715, 1469, 293, 436, 434, 1364, 322, 1507, 293, 264, 51264, 51264, 1715, 1469, 2909, 294, 479, 16150, 5240, 13, 51364, 51364, 400, 370, 436, 434, 4084, 24617, 293, 1203, 13, 51514, 51514, 400, 472, 295, 264, 721, 321, 1352, 390, 11, 731, 11, 321, 362, 527, 1065, 992, 295, 23308, 456, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.0966041744619176, "compression_ratio": 1.8191881918819188, "no_caption_prob": 2.429906635370571e-05}, {"id": 193, "seek": 60500, "start": 605.0, "end": 610.0, "text": " and we wanted to be able to have our icons and color them dynamically and,", "tokens": [50364, 293, 321, 1415, 281, 312, 1075, 281, 362, 527, 23308, 293, 2017, 552, 43492, 293, 11, 50614, 50614, 291, 458, 11, 37648, 5030, 11, 558, 30, 50714, 50714, 407, 309, 311, 411, 11, 1392, 11, 321, 528, 264, 1783, 11, 457, 321, 528, 281, 1261, 309, 2182, 420, 411, 11, 50864, 50864, 291, 458, 11, 2035, 13, 50964, 50964, 400, 370, 309, 311, 411, 11, 731, 11, 300, 311, 767, 411, 11, 577, 869, 576, 309, 312, 281, 445, 51164, 51164, 652, 257, 479, 16150, 9362, 818, 293, 584, 411, 11, 4177, 11, 976, 385, 439, 264, 721, 294, 341, 411, 51464, 51464, 707, 2424, 11, 411, 300, 362, 668, 8889, 11, 411, 300, 366, 1854, 341, 4001, 11, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.13403766911204268, "compression_ratio": 1.7063492063492063, "no_caption_prob": 0.00012930002412758768}, {"id": 194, "seek": 60500, "start": 610.0, "end": 612.0, "text": " you know, programmatically, right?", "tokens": [50364, 293, 321, 1415, 281, 312, 1075, 281, 362, 527, 23308, 293, 2017, 552, 43492, 293, 11, 50614, 50614, 291, 458, 11, 37648, 5030, 11, 558, 30, 50714, 50714, 407, 309, 311, 411, 11, 1392, 11, 321, 528, 264, 1783, 11, 457, 321, 528, 281, 1261, 309, 2182, 420, 411, 11, 50864, 50864, 291, 458, 11, 2035, 13, 50964, 50964, 400, 370, 309, 311, 411, 11, 731, 11, 300, 311, 767, 411, 11, 577, 869, 576, 309, 312, 281, 445, 51164, 51164, 652, 257, 479, 16150, 9362, 818, 293, 584, 411, 11, 4177, 11, 976, 385, 439, 264, 721, 294, 341, 411, 51464, 51464, 707, 2424, 11, 411, 300, 362, 668, 8889, 11, 411, 300, 366, 1854, 341, 4001, 11, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.13403766911204268, "compression_ratio": 1.7063492063492063, "no_caption_prob": 0.00012930002412758768}, {"id": 195, "seek": 60500, "start": 612.0, "end": 615.0, "text": " So it's like, okay, we want the X, but we want to turn it red or like,", "tokens": [50364, 293, 321, 1415, 281, 312, 1075, 281, 362, 527, 23308, 293, 2017, 552, 43492, 293, 11, 50614, 50614, 291, 458, 11, 37648, 5030, 11, 558, 30, 50714, 50714, 407, 309, 311, 411, 11, 1392, 11, 321, 528, 264, 1783, 11, 457, 321, 528, 281, 1261, 309, 2182, 420, 411, 11, 50864, 50864, 291, 458, 11, 2035, 13, 50964, 50964, 400, 370, 309, 311, 411, 11, 731, 11, 300, 311, 767, 411, 11, 577, 869, 576, 309, 312, 281, 445, 51164, 51164, 652, 257, 479, 16150, 9362, 818, 293, 584, 411, 11, 4177, 11, 976, 385, 439, 264, 721, 294, 341, 411, 51464, 51464, 707, 2424, 11, 411, 300, 362, 668, 8889, 11, 411, 300, 366, 1854, 341, 4001, 11, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.13403766911204268, "compression_ratio": 1.7063492063492063, "no_caption_prob": 0.00012930002412758768}, {"id": 196, "seek": 60500, "start": 615.0, "end": 617.0, "text": " you know, whatever.", "tokens": [50364, 293, 321, 1415, 281, 312, 1075, 281, 362, 527, 23308, 293, 2017, 552, 43492, 293, 11, 50614, 50614, 291, 458, 11, 37648, 5030, 11, 558, 30, 50714, 50714, 407, 309, 311, 411, 11, 1392, 11, 321, 528, 264, 1783, 11, 457, 321, 528, 281, 1261, 309, 2182, 420, 411, 11, 50864, 50864, 291, 458, 11, 2035, 13, 50964, 50964, 400, 370, 309, 311, 411, 11, 731, 11, 300, 311, 767, 411, 11, 577, 869, 576, 309, 312, 281, 445, 51164, 51164, 652, 257, 479, 16150, 9362, 818, 293, 584, 411, 11, 4177, 11, 976, 385, 439, 264, 721, 294, 341, 411, 51464, 51464, 707, 2424, 11, 411, 300, 362, 668, 8889, 11, 411, 300, 366, 1854, 341, 4001, 11, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.13403766911204268, "compression_ratio": 1.7063492063492063, "no_caption_prob": 0.00012930002412758768}, {"id": 197, "seek": 60500, "start": 617.0, "end": 621.0, "text": " And so it's like, well, that's actually like, how great would it be to just", "tokens": [50364, 293, 321, 1415, 281, 312, 1075, 281, 362, 527, 23308, 293, 2017, 552, 43492, 293, 11, 50614, 50614, 291, 458, 11, 37648, 5030, 11, 558, 30, 50714, 50714, 407, 309, 311, 411, 11, 1392, 11, 321, 528, 264, 1783, 11, 457, 321, 528, 281, 1261, 309, 2182, 420, 411, 11, 50864, 50864, 291, 458, 11, 2035, 13, 50964, 50964, 400, 370, 309, 311, 411, 11, 731, 11, 300, 311, 767, 411, 11, 577, 869, 576, 309, 312, 281, 445, 51164, 51164, 652, 257, 479, 16150, 9362, 818, 293, 584, 411, 11, 4177, 11, 976, 385, 439, 264, 721, 294, 341, 411, 51464, 51464, 707, 2424, 11, 411, 300, 362, 668, 8889, 11, 411, 300, 366, 1854, 341, 4001, 11, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.13403766911204268, "compression_ratio": 1.7063492063492063, "no_caption_prob": 0.00012930002412758768}, {"id": 198, "seek": 60500, "start": 621.0, "end": 627.0, "text": " make a Figma API call and say like, hey, give me all the things in this like", "tokens": [50364, 293, 321, 1415, 281, 312, 1075, 281, 362, 527, 23308, 293, 2017, 552, 43492, 293, 11, 50614, 50614, 291, 458, 11, 37648, 5030, 11, 558, 30, 50714, 50714, 407, 309, 311, 411, 11, 1392, 11, 321, 528, 264, 1783, 11, 457, 321, 528, 281, 1261, 309, 2182, 420, 411, 11, 50864, 50864, 291, 458, 11, 2035, 13, 50964, 50964, 400, 370, 309, 311, 411, 11, 731, 11, 300, 311, 767, 411, 11, 577, 869, 576, 309, 312, 281, 445, 51164, 51164, 652, 257, 479, 16150, 9362, 818, 293, 584, 411, 11, 4177, 11, 976, 385, 439, 264, 721, 294, 341, 411, 51464, 51464, 707, 2424, 11, 411, 300, 362, 668, 8889, 11, 411, 300, 366, 1854, 341, 4001, 11, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.13403766911204268, "compression_ratio": 1.7063492063492063, "no_caption_prob": 0.00012930002412758768}, {"id": 199, "seek": 60500, "start": 627.0, "end": 632.0, "text": " little box, like that have been squared, like that are inside this physical,", "tokens": [50364, 293, 321, 1415, 281, 312, 1075, 281, 362, 527, 23308, 293, 2017, 552, 43492, 293, 11, 50614, 50614, 291, 458, 11, 37648, 5030, 11, 558, 30, 50714, 50714, 407, 309, 311, 411, 11, 1392, 11, 321, 528, 264, 1783, 11, 457, 321, 528, 281, 1261, 309, 2182, 420, 411, 11, 50864, 50864, 291, 458, 11, 2035, 13, 50964, 50964, 400, 370, 309, 311, 411, 11, 731, 11, 300, 311, 767, 411, 11, 577, 869, 576, 309, 312, 281, 445, 51164, 51164, 652, 257, 479, 16150, 9362, 818, 293, 584, 411, 11, 4177, 11, 976, 385, 439, 264, 721, 294, 341, 411, 51464, 51464, 707, 2424, 11, 411, 300, 362, 668, 8889, 11, 411, 300, 366, 1854, 341, 4001, 11, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.13403766911204268, "compression_ratio": 1.7063492063492063, "no_caption_prob": 0.00012930002412758768}, {"id": 200, "seek": 63200, "start": 632.0, "end": 635.0, "text": " I forget what Figma calls things, but like that are all grouped together", "tokens": [50364, 286, 2870, 437, 479, 16150, 5498, 721, 11, 457, 411, 300, 366, 439, 41877, 1214, 50514, 50514, 294, 512, 1333, 295, 636, 11, 976, 385, 439, 295, 552, 13, 50614, 50614, 400, 286, 478, 516, 281, 1884, 257, 479, 16150, 13, 299, 892, 3991, 293, 295, 264, 636, 281, 6408, 309, 294, 50964, 50964, 2699, 76, 3089, 293, 1310, 257, 1326, 411, 707, 3956, 286, 393, 3679, 13, 51114, 51114, 286, 528, 264, 2416, 3037, 11, 286, 528, 264, 1359, 3037, 13, 51214, 51214, 286, 576, 411, 264, 11, 291, 458, 11, 2245, 5717, 7763, 4577, 420, 746, 411, 300, 13, 51414, 51414, 407, 707, 11, 707, 2452, 11, 411, 707, 721, 689, 309, 311, 411, 11, 1392, 11, 1580, 51614, 51614, 727, 1322, 257, 2689, 2290, 337, 2201, 281, 360, 300, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.10041280732537708, "compression_ratio": 1.7465753424657535, "no_caption_prob": 6.50239599053748e-05}, {"id": 201, "seek": 63200, "start": 635.0, "end": 637.0, "text": " in some sort of way, give me all of them.", "tokens": [50364, 286, 2870, 437, 479, 16150, 5498, 721, 11, 457, 411, 300, 366, 439, 41877, 1214, 50514, 50514, 294, 512, 1333, 295, 636, 11, 976, 385, 439, 295, 552, 13, 50614, 50614, 400, 286, 478, 516, 281, 1884, 257, 479, 16150, 13, 299, 892, 3991, 293, 295, 264, 636, 281, 6408, 309, 294, 50964, 50964, 2699, 76, 3089, 293, 1310, 257, 1326, 411, 707, 3956, 286, 393, 3679, 13, 51114, 51114, 286, 528, 264, 2416, 3037, 11, 286, 528, 264, 1359, 3037, 13, 51214, 51214, 286, 576, 411, 264, 11, 291, 458, 11, 2245, 5717, 7763, 4577, 420, 746, 411, 300, 13, 51414, 51414, 407, 707, 11, 707, 2452, 11, 411, 707, 721, 689, 309, 311, 411, 11, 1392, 11, 1580, 51614, 51614, 727, 1322, 257, 2689, 2290, 337, 2201, 281, 360, 300, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.10041280732537708, "compression_ratio": 1.7465753424657535, "no_caption_prob": 6.50239599053748e-05}, {"id": 202, "seek": 63200, "start": 637.0, "end": 644.0, "text": " And I'm going to create a Figma.icons file and of the way to reference it in", "tokens": [50364, 286, 2870, 437, 479, 16150, 5498, 721, 11, 457, 411, 300, 366, 439, 41877, 1214, 50514, 50514, 294, 512, 1333, 295, 636, 11, 976, 385, 439, 295, 552, 13, 50614, 50614, 400, 286, 478, 516, 281, 1884, 257, 479, 16150, 13, 299, 892, 3991, 293, 295, 264, 636, 281, 6408, 309, 294, 50964, 50964, 2699, 76, 3089, 293, 1310, 257, 1326, 411, 707, 3956, 286, 393, 3679, 13, 51114, 51114, 286, 528, 264, 2416, 3037, 11, 286, 528, 264, 1359, 3037, 13, 51214, 51214, 286, 576, 411, 264, 11, 291, 458, 11, 2245, 5717, 7763, 4577, 420, 746, 411, 300, 13, 51414, 51414, 407, 707, 11, 707, 2452, 11, 411, 707, 721, 689, 309, 311, 411, 11, 1392, 11, 1580, 51614, 51614, 727, 1322, 257, 2689, 2290, 337, 2201, 281, 360, 300, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.10041280732537708, "compression_ratio": 1.7465753424657535, "no_caption_prob": 6.50239599053748e-05}, {"id": 203, "seek": 63200, "start": 644.0, "end": 647.0, "text": " Elm code and maybe a few like little options I can switch.", "tokens": [50364, 286, 2870, 437, 479, 16150, 5498, 721, 11, 457, 411, 300, 366, 439, 41877, 1214, 50514, 50514, 294, 512, 1333, 295, 636, 11, 976, 385, 439, 295, 552, 13, 50614, 50614, 400, 286, 478, 516, 281, 1884, 257, 479, 16150, 13, 299, 892, 3991, 293, 295, 264, 636, 281, 6408, 309, 294, 50964, 50964, 2699, 76, 3089, 293, 1310, 257, 1326, 411, 707, 3956, 286, 393, 3679, 13, 51114, 51114, 286, 528, 264, 2416, 3037, 11, 286, 528, 264, 1359, 3037, 13, 51214, 51214, 286, 576, 411, 264, 11, 291, 458, 11, 2245, 5717, 7763, 4577, 420, 746, 411, 300, 13, 51414, 51414, 407, 707, 11, 707, 2452, 11, 411, 707, 721, 689, 309, 311, 411, 11, 1392, 11, 1580, 51614, 51614, 727, 1322, 257, 2689, 2290, 337, 2201, 281, 360, 300, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.10041280732537708, "compression_ratio": 1.7465753424657535, "no_caption_prob": 6.50239599053748e-05}, {"id": 204, "seek": 63200, "start": 647.0, "end": 649.0, "text": " I want the large version, I want the small version.", "tokens": [50364, 286, 2870, 437, 479, 16150, 5498, 721, 11, 457, 411, 300, 366, 439, 41877, 1214, 50514, 50514, 294, 512, 1333, 295, 636, 11, 976, 385, 439, 295, 552, 13, 50614, 50614, 400, 286, 478, 516, 281, 1884, 257, 479, 16150, 13, 299, 892, 3991, 293, 295, 264, 636, 281, 6408, 309, 294, 50964, 50964, 2699, 76, 3089, 293, 1310, 257, 1326, 411, 707, 3956, 286, 393, 3679, 13, 51114, 51114, 286, 528, 264, 2416, 3037, 11, 286, 528, 264, 1359, 3037, 13, 51214, 51214, 286, 576, 411, 264, 11, 291, 458, 11, 2245, 5717, 7763, 4577, 420, 746, 411, 300, 13, 51414, 51414, 407, 707, 11, 707, 2452, 11, 411, 707, 721, 689, 309, 311, 411, 11, 1392, 11, 1580, 51614, 51614, 727, 1322, 257, 2689, 2290, 337, 2201, 281, 360, 300, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.10041280732537708, "compression_ratio": 1.7465753424657535, "no_caption_prob": 6.50239599053748e-05}, {"id": 205, "seek": 63200, "start": 649.0, "end": 653.0, "text": " I would like the, you know, success versus failure colors or something like that.", "tokens": [50364, 286, 2870, 437, 479, 16150, 5498, 721, 11, 457, 411, 300, 366, 439, 41877, 1214, 50514, 50514, 294, 512, 1333, 295, 636, 11, 976, 385, 439, 295, 552, 13, 50614, 50614, 400, 286, 478, 516, 281, 1884, 257, 479, 16150, 13, 299, 892, 3991, 293, 295, 264, 636, 281, 6408, 309, 294, 50964, 50964, 2699, 76, 3089, 293, 1310, 257, 1326, 411, 707, 3956, 286, 393, 3679, 13, 51114, 51114, 286, 528, 264, 2416, 3037, 11, 286, 528, 264, 1359, 3037, 13, 51214, 51214, 286, 576, 411, 264, 11, 291, 458, 11, 2245, 5717, 7763, 4577, 420, 746, 411, 300, 13, 51414, 51414, 407, 707, 11, 707, 2452, 11, 411, 707, 721, 689, 309, 311, 411, 11, 1392, 11, 1580, 51614, 51614, 727, 1322, 257, 2689, 2290, 337, 2201, 281, 360, 300, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.10041280732537708, "compression_ratio": 1.7465753424657535, "no_caption_prob": 6.50239599053748e-05}, {"id": 206, "seek": 63200, "start": 653.0, "end": 657.0, "text": " So little, little deep, like little things where it's like, okay, someone", "tokens": [50364, 286, 2870, 437, 479, 16150, 5498, 721, 11, 457, 411, 300, 366, 439, 41877, 1214, 50514, 50514, 294, 512, 1333, 295, 636, 11, 976, 385, 439, 295, 552, 13, 50614, 50614, 400, 286, 478, 516, 281, 1884, 257, 479, 16150, 13, 299, 892, 3991, 293, 295, 264, 636, 281, 6408, 309, 294, 50964, 50964, 2699, 76, 3089, 293, 1310, 257, 1326, 411, 707, 3956, 286, 393, 3679, 13, 51114, 51114, 286, 528, 264, 2416, 3037, 11, 286, 528, 264, 1359, 3037, 13, 51214, 51214, 286, 576, 411, 264, 11, 291, 458, 11, 2245, 5717, 7763, 4577, 420, 746, 411, 300, 13, 51414, 51414, 407, 707, 11, 707, 2452, 11, 411, 707, 721, 689, 309, 311, 411, 11, 1392, 11, 1580, 51614, 51614, 727, 1322, 257, 2689, 2290, 337, 2201, 281, 360, 300, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.10041280732537708, "compression_ratio": 1.7465753424657535, "no_caption_prob": 6.50239599053748e-05}, {"id": 207, "seek": 63200, "start": 657.0, "end": 661.0, "text": " could build a common tool for everybody to do that.", "tokens": [50364, 286, 2870, 437, 479, 16150, 5498, 721, 11, 457, 411, 300, 366, 439, 41877, 1214, 50514, 50514, 294, 512, 1333, 295, 636, 11, 976, 385, 439, 295, 552, 13, 50614, 50614, 400, 286, 478, 516, 281, 1884, 257, 479, 16150, 13, 299, 892, 3991, 293, 295, 264, 636, 281, 6408, 309, 294, 50964, 50964, 2699, 76, 3089, 293, 1310, 257, 1326, 411, 707, 3956, 286, 393, 3679, 13, 51114, 51114, 286, 528, 264, 2416, 3037, 11, 286, 528, 264, 1359, 3037, 13, 51214, 51214, 286, 576, 411, 264, 11, 291, 458, 11, 2245, 5717, 7763, 4577, 420, 746, 411, 300, 13, 51414, 51414, 407, 707, 11, 707, 2452, 11, 411, 707, 721, 689, 309, 311, 411, 11, 1392, 11, 1580, 51614, 51614, 727, 1322, 257, 2689, 2290, 337, 2201, 281, 360, 300, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.10041280732537708, "compression_ratio": 1.7465753424657535, "no_caption_prob": 6.50239599053748e-05}, {"id": 208, "seek": 66100, "start": 661.0, "end": 665.0, "text": " And that's fine, but it's less of a project that, I mean, maybe that would be like,", "tokens": [50364, 400, 300, 311, 2489, 11, 457, 309, 311, 1570, 295, 257, 1716, 300, 11, 286, 914, 11, 1310, 300, 576, 312, 411, 11, 50564, 50564, 1310, 456, 311, 257, 2674, 1716, 456, 11, 457, 286, 1116, 959, 281, 312, 1075, 281, 11, 309, 311, 411, 11, 50714, 50714, 1954, 11, 309, 311, 588, 1858, 445, 281, 22377, 746, 411, 300, 493, 13, 50814, 50814, 286, 603, 747, 257, 786, 11, 286, 478, 445, 516, 281, 360, 309, 13, 50914, 50914, 400, 550, 321, 1128, 362, 281, 3292, 466, 309, 13, 51014, 51014, 865, 11, 309, 311, 534, 11, 534, 4670, 13, 51064, 51064, 407, 286, 519, 286, 478, 4763, 411, 300, 286, 478, 4763, 732, 4881, 295, 341, 5367, 13, 51364, 51364, 1743, 472, 307, 291, 434, 1417, 466, 1419, 257, 544, 38901, 636, 281, 8460, 3089, 51614, 51614, 281, 652, 309, 841, 15856, 293, 3571, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.08991609661784393, "compression_ratio": 1.78839590443686, "no_caption_prob": 6.108626985223964e-05}, {"id": 209, "seek": 66100, "start": 665.0, "end": 668.0, "text": " maybe there's a general project there, but I'd love to be able to, it's like,", "tokens": [50364, 400, 300, 311, 2489, 11, 457, 309, 311, 1570, 295, 257, 1716, 300, 11, 286, 914, 11, 1310, 300, 576, 312, 411, 11, 50564, 50564, 1310, 456, 311, 257, 2674, 1716, 456, 11, 457, 286, 1116, 959, 281, 312, 1075, 281, 11, 309, 311, 411, 11, 50714, 50714, 1954, 11, 309, 311, 588, 1858, 445, 281, 22377, 746, 411, 300, 493, 13, 50814, 50814, 286, 603, 747, 257, 786, 11, 286, 478, 445, 516, 281, 360, 309, 13, 50914, 50914, 400, 550, 321, 1128, 362, 281, 3292, 466, 309, 13, 51014, 51014, 865, 11, 309, 311, 534, 11, 534, 4670, 13, 51064, 51064, 407, 286, 519, 286, 478, 4763, 411, 300, 286, 478, 4763, 732, 4881, 295, 341, 5367, 13, 51364, 51364, 1743, 472, 307, 291, 434, 1417, 466, 1419, 257, 544, 38901, 636, 281, 8460, 3089, 51614, 51614, 281, 652, 309, 841, 15856, 293, 3571, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.08991609661784393, "compression_ratio": 1.78839590443686, "no_caption_prob": 6.108626985223964e-05}, {"id": 210, "seek": 66100, "start": 668.0, "end": 670.0, "text": " oh, it's very easy just to whip something like that up.", "tokens": [50364, 400, 300, 311, 2489, 11, 457, 309, 311, 1570, 295, 257, 1716, 300, 11, 286, 914, 11, 1310, 300, 576, 312, 411, 11, 50564, 50564, 1310, 456, 311, 257, 2674, 1716, 456, 11, 457, 286, 1116, 959, 281, 312, 1075, 281, 11, 309, 311, 411, 11, 50714, 50714, 1954, 11, 309, 311, 588, 1858, 445, 281, 22377, 746, 411, 300, 493, 13, 50814, 50814, 286, 603, 747, 257, 786, 11, 286, 478, 445, 516, 281, 360, 309, 13, 50914, 50914, 400, 550, 321, 1128, 362, 281, 3292, 466, 309, 13, 51014, 51014, 865, 11, 309, 311, 534, 11, 534, 4670, 13, 51064, 51064, 407, 286, 519, 286, 478, 4763, 411, 300, 286, 478, 4763, 732, 4881, 295, 341, 5367, 13, 51364, 51364, 1743, 472, 307, 291, 434, 1417, 466, 1419, 257, 544, 38901, 636, 281, 8460, 3089, 51614, 51614, 281, 652, 309, 841, 15856, 293, 3571, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.08991609661784393, "compression_ratio": 1.78839590443686, "no_caption_prob": 6.108626985223964e-05}, {"id": 211, "seek": 66100, "start": 670.0, "end": 672.0, "text": " I'll take a day, I'm just going to do it.", "tokens": [50364, 400, 300, 311, 2489, 11, 457, 309, 311, 1570, 295, 257, 1716, 300, 11, 286, 914, 11, 1310, 300, 576, 312, 411, 11, 50564, 50564, 1310, 456, 311, 257, 2674, 1716, 456, 11, 457, 286, 1116, 959, 281, 312, 1075, 281, 11, 309, 311, 411, 11, 50714, 50714, 1954, 11, 309, 311, 588, 1858, 445, 281, 22377, 746, 411, 300, 493, 13, 50814, 50814, 286, 603, 747, 257, 786, 11, 286, 478, 445, 516, 281, 360, 309, 13, 50914, 50914, 400, 550, 321, 1128, 362, 281, 3292, 466, 309, 13, 51014, 51014, 865, 11, 309, 311, 534, 11, 534, 4670, 13, 51064, 51064, 407, 286, 519, 286, 478, 4763, 411, 300, 286, 478, 4763, 732, 4881, 295, 341, 5367, 13, 51364, 51364, 1743, 472, 307, 291, 434, 1417, 466, 1419, 257, 544, 38901, 636, 281, 8460, 3089, 51614, 51614, 281, 652, 309, 841, 15856, 293, 3571, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.08991609661784393, "compression_ratio": 1.78839590443686, "no_caption_prob": 6.108626985223964e-05}, {"id": 212, "seek": 66100, "start": 672.0, "end": 674.0, "text": " And then we never have to worry about it.", "tokens": [50364, 400, 300, 311, 2489, 11, 457, 309, 311, 1570, 295, 257, 1716, 300, 11, 286, 914, 11, 1310, 300, 576, 312, 411, 11, 50564, 50564, 1310, 456, 311, 257, 2674, 1716, 456, 11, 457, 286, 1116, 959, 281, 312, 1075, 281, 11, 309, 311, 411, 11, 50714, 50714, 1954, 11, 309, 311, 588, 1858, 445, 281, 22377, 746, 411, 300, 493, 13, 50814, 50814, 286, 603, 747, 257, 786, 11, 286, 478, 445, 516, 281, 360, 309, 13, 50914, 50914, 400, 550, 321, 1128, 362, 281, 3292, 466, 309, 13, 51014, 51014, 865, 11, 309, 311, 534, 11, 534, 4670, 13, 51064, 51064, 407, 286, 519, 286, 478, 4763, 411, 300, 286, 478, 4763, 732, 4881, 295, 341, 5367, 13, 51364, 51364, 1743, 472, 307, 291, 434, 1417, 466, 1419, 257, 544, 38901, 636, 281, 8460, 3089, 51614, 51614, 281, 652, 309, 841, 15856, 293, 3571, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.08991609661784393, "compression_ratio": 1.78839590443686, "no_caption_prob": 6.108626985223964e-05}, {"id": 213, "seek": 66100, "start": 674.0, "end": 675.0, "text": " Yeah, it's really, really exciting.", "tokens": [50364, 400, 300, 311, 2489, 11, 457, 309, 311, 1570, 295, 257, 1716, 300, 11, 286, 914, 11, 1310, 300, 576, 312, 411, 11, 50564, 50564, 1310, 456, 311, 257, 2674, 1716, 456, 11, 457, 286, 1116, 959, 281, 312, 1075, 281, 11, 309, 311, 411, 11, 50714, 50714, 1954, 11, 309, 311, 588, 1858, 445, 281, 22377, 746, 411, 300, 493, 13, 50814, 50814, 286, 603, 747, 257, 786, 11, 286, 478, 445, 516, 281, 360, 309, 13, 50914, 50914, 400, 550, 321, 1128, 362, 281, 3292, 466, 309, 13, 51014, 51014, 865, 11, 309, 311, 534, 11, 534, 4670, 13, 51064, 51064, 407, 286, 519, 286, 478, 4763, 411, 300, 286, 478, 4763, 732, 4881, 295, 341, 5367, 13, 51364, 51364, 1743, 472, 307, 291, 434, 1417, 466, 1419, 257, 544, 38901, 636, 281, 8460, 3089, 51614, 51614, 281, 652, 309, 841, 15856, 293, 3571, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.08991609661784393, "compression_ratio": 1.78839590443686, "no_caption_prob": 6.108626985223964e-05}, {"id": 214, "seek": 66100, "start": 675.0, "end": 681.0, "text": " So I think I'm hearing like that I'm hearing two sides of this equation.", "tokens": [50364, 400, 300, 311, 2489, 11, 457, 309, 311, 1570, 295, 257, 1716, 300, 11, 286, 914, 11, 1310, 300, 576, 312, 411, 11, 50564, 50564, 1310, 456, 311, 257, 2674, 1716, 456, 11, 457, 286, 1116, 959, 281, 312, 1075, 281, 11, 309, 311, 411, 11, 50714, 50714, 1954, 11, 309, 311, 588, 1858, 445, 281, 22377, 746, 411, 300, 493, 13, 50814, 50814, 286, 603, 747, 257, 786, 11, 286, 478, 445, 516, 281, 360, 309, 13, 50914, 50914, 400, 550, 321, 1128, 362, 281, 3292, 466, 309, 13, 51014, 51014, 865, 11, 309, 311, 534, 11, 534, 4670, 13, 51064, 51064, 407, 286, 519, 286, 478, 4763, 411, 300, 286, 478, 4763, 732, 4881, 295, 341, 5367, 13, 51364, 51364, 1743, 472, 307, 291, 434, 1417, 466, 1419, 257, 544, 38901, 636, 281, 8460, 3089, 51614, 51614, 281, 652, 309, 841, 15856, 293, 3571, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.08991609661784393, "compression_ratio": 1.78839590443686, "no_caption_prob": 6.108626985223964e-05}, {"id": 215, "seek": 66100, "start": 681.0, "end": 686.0, "text": " Like one is you're talking about having a more constrained way to generate code", "tokens": [50364, 400, 300, 311, 2489, 11, 457, 309, 311, 1570, 295, 257, 1716, 300, 11, 286, 914, 11, 1310, 300, 576, 312, 411, 11, 50564, 50564, 1310, 456, 311, 257, 2674, 1716, 456, 11, 457, 286, 1116, 959, 281, 312, 1075, 281, 11, 309, 311, 411, 11, 50714, 50714, 1954, 11, 309, 311, 588, 1858, 445, 281, 22377, 746, 411, 300, 493, 13, 50814, 50814, 286, 603, 747, 257, 786, 11, 286, 478, 445, 516, 281, 360, 309, 13, 50914, 50914, 400, 550, 321, 1128, 362, 281, 3292, 466, 309, 13, 51014, 51014, 865, 11, 309, 311, 534, 11, 534, 4670, 13, 51064, 51064, 407, 286, 519, 286, 478, 4763, 411, 300, 286, 478, 4763, 732, 4881, 295, 341, 5367, 13, 51364, 51364, 1743, 472, 307, 291, 434, 1417, 466, 1419, 257, 544, 38901, 636, 281, 8460, 3089, 51614, 51614, 281, 652, 309, 841, 15856, 293, 3571, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.08991609661784393, "compression_ratio": 1.78839590443686, "no_caption_prob": 6.108626985223964e-05}, {"id": 216, "seek": 66100, "start": 686.0, "end": 689.0, "text": " to make it feel safer and easier.", "tokens": [50364, 400, 300, 311, 2489, 11, 457, 309, 311, 1570, 295, 257, 1716, 300, 11, 286, 914, 11, 1310, 300, 576, 312, 411, 11, 50564, 50564, 1310, 456, 311, 257, 2674, 1716, 456, 11, 457, 286, 1116, 959, 281, 312, 1075, 281, 11, 309, 311, 411, 11, 50714, 50714, 1954, 11, 309, 311, 588, 1858, 445, 281, 22377, 746, 411, 300, 493, 13, 50814, 50814, 286, 603, 747, 257, 786, 11, 286, 478, 445, 516, 281, 360, 309, 13, 50914, 50914, 400, 550, 321, 1128, 362, 281, 3292, 466, 309, 13, 51014, 51014, 865, 11, 309, 311, 534, 11, 534, 4670, 13, 51064, 51064, 407, 286, 519, 286, 478, 4763, 411, 300, 286, 478, 4763, 732, 4881, 295, 341, 5367, 13, 51364, 51364, 1743, 472, 307, 291, 434, 1417, 466, 1419, 257, 544, 38901, 636, 281, 8460, 3089, 51614, 51614, 281, 652, 309, 841, 15856, 293, 3571, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.08991609661784393, "compression_ratio": 1.78839590443686, "no_caption_prob": 6.108626985223964e-05}, {"id": 217, "seek": 68900, "start": 689.0, "end": 695.0, "text": " So like doing string templating works, but it's, you can create invalid ASTs", "tokens": [50364, 407, 411, 884, 6798, 9100, 990, 1985, 11, 457, 309, 311, 11, 291, 393, 1884, 34702, 316, 6840, 82, 50664, 50664, 1228, 721, 316, 6840, 2361, 721, 411, 2699, 76, 383, 28431, 15816, 43, 18491, 300, 3052, 13, 50964, 50964, 407, 291, 393, 787, 8460, 7363, 316, 6840, 82, 11, 457, 7363, 316, 6840, 82, 1062, 312, 34702, 4268, 13, 51214, 51214, 400, 550, 2699, 76, 3089, 1049, 3665, 5407, 300, 1901, 257, 707, 3052, 13, 51464, 51464, 400, 370, 321, 2378, 380, 5768, 666, 341, 11, 457, 365, 264, 854, 295, 1333, 295, 512, 10833, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.10469682693481445, "compression_ratio": 1.6905829596412556, "no_caption_prob": 2.9772154448437504e-05}, {"id": 218, "seek": 68900, "start": 695.0, "end": 701.0, "text": " using things AST based things like Elm C syntax DSL constraints that further.", "tokens": [50364, 407, 411, 884, 6798, 9100, 990, 1985, 11, 457, 309, 311, 11, 291, 393, 1884, 34702, 316, 6840, 82, 50664, 50664, 1228, 721, 316, 6840, 2361, 721, 411, 2699, 76, 383, 28431, 15816, 43, 18491, 300, 3052, 13, 50964, 50964, 407, 291, 393, 787, 8460, 7363, 316, 6840, 82, 11, 457, 7363, 316, 6840, 82, 1062, 312, 34702, 4268, 13, 51214, 51214, 400, 550, 2699, 76, 3089, 1049, 3665, 5407, 300, 1901, 257, 707, 3052, 13, 51464, 51464, 400, 370, 321, 2378, 380, 5768, 666, 341, 11, 457, 365, 264, 854, 295, 1333, 295, 512, 10833, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.10469682693481445, "compression_ratio": 1.6905829596412556, "no_caption_prob": 2.9772154448437504e-05}, {"id": 219, "seek": 68900, "start": 701.0, "end": 706.0, "text": " So you can only generate valid ASTs, but valid ASTs might be invalid programs.", "tokens": [50364, 407, 411, 884, 6798, 9100, 990, 1985, 11, 457, 309, 311, 11, 291, 393, 1884, 34702, 316, 6840, 82, 50664, 50664, 1228, 721, 316, 6840, 2361, 721, 411, 2699, 76, 383, 28431, 15816, 43, 18491, 300, 3052, 13, 50964, 50964, 407, 291, 393, 787, 8460, 7363, 316, 6840, 82, 11, 457, 7363, 316, 6840, 82, 1062, 312, 34702, 4268, 13, 51214, 51214, 400, 550, 2699, 76, 3089, 1049, 3665, 5407, 300, 1901, 257, 707, 3052, 13, 51464, 51464, 400, 370, 321, 2378, 380, 5768, 666, 341, 11, 457, 365, 264, 854, 295, 1333, 295, 512, 10833, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.10469682693481445, "compression_ratio": 1.6905829596412556, "no_caption_prob": 2.9772154448437504e-05}, {"id": 220, "seek": 68900, "start": 706.0, "end": 711.0, "text": " And then Elm code gen helps reduce that space a little further.", "tokens": [50364, 407, 411, 884, 6798, 9100, 990, 1985, 11, 457, 309, 311, 11, 291, 393, 1884, 34702, 316, 6840, 82, 50664, 50664, 1228, 721, 316, 6840, 2361, 721, 411, 2699, 76, 383, 28431, 15816, 43, 18491, 300, 3052, 13, 50964, 50964, 407, 291, 393, 787, 8460, 7363, 316, 6840, 82, 11, 457, 7363, 316, 6840, 82, 1062, 312, 34702, 4268, 13, 51214, 51214, 400, 550, 2699, 76, 3089, 1049, 3665, 5407, 300, 1901, 257, 707, 3052, 13, 51464, 51464, 400, 370, 321, 2378, 380, 5768, 666, 341, 11, 457, 365, 264, 854, 295, 1333, 295, 512, 10833, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.10469682693481445, "compression_ratio": 1.6905829596412556, "no_caption_prob": 2.9772154448437504e-05}, {"id": 221, "seek": 68900, "start": 711.0, "end": 716.0, "text": " And so we haven't gotten into this, but with the help of sort of some generated", "tokens": [50364, 407, 411, 884, 6798, 9100, 990, 1985, 11, 457, 309, 311, 11, 291, 393, 1884, 34702, 316, 6840, 82, 50664, 50664, 1228, 721, 316, 6840, 2361, 721, 411, 2699, 76, 383, 28431, 15816, 43, 18491, 300, 3052, 13, 50964, 50964, 407, 291, 393, 787, 8460, 7363, 316, 6840, 82, 11, 457, 7363, 316, 6840, 82, 1062, 312, 34702, 4268, 13, 51214, 51214, 400, 550, 2699, 76, 3089, 1049, 3665, 5407, 300, 1901, 257, 707, 3052, 13, 51464, 51464, 400, 370, 321, 2378, 380, 5768, 666, 341, 11, 457, 365, 264, 854, 295, 1333, 295, 512, 10833, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.10469682693481445, "compression_ratio": 1.6905829596412556, "no_caption_prob": 2.9772154448437504e-05}, {"id": 222, "seek": 71600, "start": 716.0, "end": 724.0, "text": " placeholders for installing quote unquote, installing Elm packages and it sort of", "tokens": [50364, 1081, 12916, 337, 20762, 6513, 37557, 11, 20762, 2699, 76, 17401, 293, 309, 1333, 295, 50764, 50764, 5276, 264, 21445, 293, 2902, 291, 10833, 3089, 11, 19616, 10833, 3089, 13, 51064, 51064, 398, 378, 664, 11, 286, 2198, 291, 411, 10833, 3089, 13, 51164, 51164, 8537, 309, 2709, 291, 10833, 3089, 281, 1322, 10833, 3089, 294, 257, 15856, 636, 13, 51364, 51364, 407, 291, 434, 11, 370, 322, 264, 472, 1252, 291, 434, 11525, 1760, 721, 544, 281, 5407, 17710, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.1856228323543773, "compression_ratio": 1.7241379310344827, "no_caption_prob": 1.9525496099959128e-05}, {"id": 223, "seek": 71600, "start": 724.0, "end": 730.0, "text": " knowing the APIs and giving you generated code, meta generated code.", "tokens": [50364, 1081, 12916, 337, 20762, 6513, 37557, 11, 20762, 2699, 76, 17401, 293, 309, 1333, 295, 50764, 50764, 5276, 264, 21445, 293, 2902, 291, 10833, 3089, 11, 19616, 10833, 3089, 13, 51064, 51064, 398, 378, 664, 11, 286, 2198, 291, 411, 10833, 3089, 13, 51164, 51164, 8537, 309, 2709, 291, 10833, 3089, 281, 1322, 10833, 3089, 294, 257, 15856, 636, 13, 51364, 51364, 407, 291, 434, 11, 370, 322, 264, 472, 1252, 291, 434, 11525, 1760, 721, 544, 281, 5407, 17710, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.1856228323543773, "compression_ratio": 1.7241379310344827, "no_caption_prob": 1.9525496099959128e-05}, {"id": 224, "seek": 71600, "start": 730.0, "end": 732.0, "text": " Yodog, I heard you like generated code.", "tokens": [50364, 1081, 12916, 337, 20762, 6513, 37557, 11, 20762, 2699, 76, 17401, 293, 309, 1333, 295, 50764, 50764, 5276, 264, 21445, 293, 2902, 291, 10833, 3089, 11, 19616, 10833, 3089, 13, 51064, 51064, 398, 378, 664, 11, 286, 2198, 291, 411, 10833, 3089, 13, 51164, 51164, 8537, 309, 2709, 291, 10833, 3089, 281, 1322, 10833, 3089, 294, 257, 15856, 636, 13, 51364, 51364, 407, 291, 434, 11, 370, 322, 264, 472, 1252, 291, 434, 11525, 1760, 721, 544, 281, 5407, 17710, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.1856228323543773, "compression_ratio": 1.7241379310344827, "no_caption_prob": 1.9525496099959128e-05}, {"id": 225, "seek": 71600, "start": 732.0, "end": 736.0, "text": " Basically it gives you generated code to build generated code in a safer way.", "tokens": [50364, 1081, 12916, 337, 20762, 6513, 37557, 11, 20762, 2699, 76, 17401, 293, 309, 1333, 295, 50764, 50764, 5276, 264, 21445, 293, 2902, 291, 10833, 3089, 11, 19616, 10833, 3089, 13, 51064, 51064, 398, 378, 664, 11, 286, 2198, 291, 411, 10833, 3089, 13, 51164, 51164, 8537, 309, 2709, 291, 10833, 3089, 281, 1322, 10833, 3089, 294, 257, 15856, 636, 13, 51364, 51364, 407, 291, 434, 11, 370, 322, 264, 472, 1252, 291, 434, 11525, 1760, 721, 544, 281, 5407, 17710, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.1856228323543773, "compression_ratio": 1.7241379310344827, "no_caption_prob": 1.9525496099959128e-05}, {"id": 226, "seek": 71600, "start": 736.0, "end": 741.0, "text": " So you're, so on the one side you're constraining things more to reduce friction.", "tokens": [50364, 1081, 12916, 337, 20762, 6513, 37557, 11, 20762, 2699, 76, 17401, 293, 309, 1333, 295, 50764, 50764, 5276, 264, 21445, 293, 2902, 291, 10833, 3089, 11, 19616, 10833, 3089, 13, 51064, 51064, 398, 378, 664, 11, 286, 2198, 291, 411, 10833, 3089, 13, 51164, 51164, 8537, 309, 2709, 291, 10833, 3089, 281, 1322, 10833, 3089, 294, 257, 15856, 636, 13, 51364, 51364, 407, 291, 434, 11, 370, 322, 264, 472, 1252, 291, 434, 11525, 1760, 721, 544, 281, 5407, 17710, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.1856228323543773, "compression_ratio": 1.7241379310344827, "no_caption_prob": 1.9525496099959128e-05}, {"id": 227, "seek": 74100, "start": 741.0, "end": 748.0, "text": " And on the other side, you're giving like a CLI tool because it's kind of a pain to,", "tokens": [50364, 400, 322, 264, 661, 1252, 11, 291, 434, 2902, 411, 257, 12855, 40, 2290, 570, 309, 311, 733, 295, 257, 1822, 281, 11, 50714, 50714, 281, 1322, 493, 264, 39228, 37008, 337, 11, 1392, 11, 286, 643, 281, 1190, 257, 707, 9984, 33063, 3861, 13, 50964, 50964, 286, 643, 281, 6060, 493, 452, 1065, 3089, 13, 51064, 51064, 286, 643, 281, 12379, 512, 3089, 13, 51164, 51164, 286, 643, 281, 5598, 300, 281, 257, 3991, 13, 51264, 51264, 400, 291, 362, 257, 12855, 40, 300, 3665, 291, 445, 733, 295, 411, 2699, 76, 3131, 13, 51464, 51464, 509, 362, 257, 3131, 6662, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.07895386776077414, "compression_ratio": 1.6175115207373272, "no_caption_prob": 5.143937960383482e-05}, {"id": 228, "seek": 74100, "start": 748.0, "end": 753.0, "text": " to build up the boilerplate for, okay, I need to run a little node JS application.", "tokens": [50364, 400, 322, 264, 661, 1252, 11, 291, 434, 2902, 411, 257, 12855, 40, 2290, 570, 309, 311, 733, 295, 257, 1822, 281, 11, 50714, 50714, 281, 1322, 493, 264, 39228, 37008, 337, 11, 1392, 11, 286, 643, 281, 1190, 257, 707, 9984, 33063, 3861, 13, 50964, 50964, 286, 643, 281, 6060, 493, 452, 1065, 3089, 13, 51064, 51064, 286, 643, 281, 12379, 512, 3089, 13, 51164, 51164, 286, 643, 281, 5598, 300, 281, 257, 3991, 13, 51264, 51264, 400, 291, 362, 257, 12855, 40, 300, 3665, 291, 445, 733, 295, 411, 2699, 76, 3131, 13, 51464, 51464, 509, 362, 257, 3131, 6662, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.07895386776077414, "compression_ratio": 1.6175115207373272, "no_caption_prob": 5.143937960383482e-05}, {"id": 229, "seek": 74100, "start": 753.0, "end": 755.0, "text": " I need to spin up my own code.", "tokens": [50364, 400, 322, 264, 661, 1252, 11, 291, 434, 2902, 411, 257, 12855, 40, 2290, 570, 309, 311, 733, 295, 257, 1822, 281, 11, 50714, 50714, 281, 1322, 493, 264, 39228, 37008, 337, 11, 1392, 11, 286, 643, 281, 1190, 257, 707, 9984, 33063, 3861, 13, 50964, 50964, 286, 643, 281, 6060, 493, 452, 1065, 3089, 13, 51064, 51064, 286, 643, 281, 12379, 512, 3089, 13, 51164, 51164, 286, 643, 281, 5598, 300, 281, 257, 3991, 13, 51264, 51264, 400, 291, 362, 257, 12855, 40, 300, 3665, 291, 445, 733, 295, 411, 2699, 76, 3131, 13, 51464, 51464, 509, 362, 257, 3131, 6662, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.07895386776077414, "compression_ratio": 1.6175115207373272, "no_caption_prob": 5.143937960383482e-05}, {"id": 230, "seek": 74100, "start": 755.0, "end": 757.0, "text": " I need to template some code.", "tokens": [50364, 400, 322, 264, 661, 1252, 11, 291, 434, 2902, 411, 257, 12855, 40, 2290, 570, 309, 311, 733, 295, 257, 1822, 281, 11, 50714, 50714, 281, 1322, 493, 264, 39228, 37008, 337, 11, 1392, 11, 286, 643, 281, 1190, 257, 707, 9984, 33063, 3861, 13, 50964, 50964, 286, 643, 281, 6060, 493, 452, 1065, 3089, 13, 51064, 51064, 286, 643, 281, 12379, 512, 3089, 13, 51164, 51164, 286, 643, 281, 5598, 300, 281, 257, 3991, 13, 51264, 51264, 400, 291, 362, 257, 12855, 40, 300, 3665, 291, 445, 733, 295, 411, 2699, 76, 3131, 13, 51464, 51464, 509, 362, 257, 3131, 6662, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.07895386776077414, "compression_ratio": 1.6175115207373272, "no_caption_prob": 5.143937960383482e-05}, {"id": 231, "seek": 74100, "start": 757.0, "end": 759.0, "text": " I need to output that to a file.", "tokens": [50364, 400, 322, 264, 661, 1252, 11, 291, 434, 2902, 411, 257, 12855, 40, 2290, 570, 309, 311, 733, 295, 257, 1822, 281, 11, 50714, 50714, 281, 1322, 493, 264, 39228, 37008, 337, 11, 1392, 11, 286, 643, 281, 1190, 257, 707, 9984, 33063, 3861, 13, 50964, 50964, 286, 643, 281, 6060, 493, 452, 1065, 3089, 13, 51064, 51064, 286, 643, 281, 12379, 512, 3089, 13, 51164, 51164, 286, 643, 281, 5598, 300, 281, 257, 3991, 13, 51264, 51264, 400, 291, 362, 257, 12855, 40, 300, 3665, 291, 445, 733, 295, 411, 2699, 76, 3131, 13, 51464, 51464, 509, 362, 257, 3131, 6662, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.07895386776077414, "compression_ratio": 1.6175115207373272, "no_caption_prob": 5.143937960383482e-05}, {"id": 232, "seek": 74100, "start": 759.0, "end": 763.0, "text": " And you have a CLI that helps you just kind of like Elm review.", "tokens": [50364, 400, 322, 264, 661, 1252, 11, 291, 434, 2902, 411, 257, 12855, 40, 2290, 570, 309, 311, 733, 295, 257, 1822, 281, 11, 50714, 50714, 281, 1322, 493, 264, 39228, 37008, 337, 11, 1392, 11, 286, 643, 281, 1190, 257, 707, 9984, 33063, 3861, 13, 50964, 50964, 286, 643, 281, 6060, 493, 452, 1065, 3089, 13, 51064, 51064, 286, 643, 281, 12379, 512, 3089, 13, 51164, 51164, 286, 643, 281, 5598, 300, 281, 257, 3991, 13, 51264, 51264, 400, 291, 362, 257, 12855, 40, 300, 3665, 291, 445, 733, 295, 411, 2699, 76, 3131, 13, 51464, 51464, 509, 362, 257, 3131, 6662, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.07895386776077414, "compression_ratio": 1.6175115207373272, "no_caption_prob": 5.143937960383482e-05}, {"id": 233, "seek": 74100, "start": 763.0, "end": 765.0, "text": " You have a review config.", "tokens": [50364, 400, 322, 264, 661, 1252, 11, 291, 434, 2902, 411, 257, 12855, 40, 2290, 570, 309, 311, 733, 295, 257, 1822, 281, 11, 50714, 50714, 281, 1322, 493, 264, 39228, 37008, 337, 11, 1392, 11, 286, 643, 281, 1190, 257, 707, 9984, 33063, 3861, 13, 50964, 50964, 286, 643, 281, 6060, 493, 452, 1065, 3089, 13, 51064, 51064, 286, 643, 281, 12379, 512, 3089, 13, 51164, 51164, 286, 643, 281, 5598, 300, 281, 257, 3991, 13, 51264, 51264, 400, 291, 362, 257, 12855, 40, 300, 3665, 291, 445, 733, 295, 411, 2699, 76, 3131, 13, 51464, 51464, 509, 362, 257, 3131, 6662, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.07895386776077414, "compression_ratio": 1.6175115207373272, "no_caption_prob": 5.143937960383482e-05}, {"id": 234, "seek": 76500, "start": 765.0, "end": 774.0, "text": " In code gen you have your generate.elm file and you run Elm code gen run and it generates Elm files.", "tokens": [50364, 682, 3089, 1049, 291, 362, 428, 8460, 13, 338, 76, 3991, 293, 291, 1190, 2699, 76, 3089, 1049, 1190, 293, 309, 23815, 2699, 76, 7098, 13, 50814, 50814, 865, 13, 50864, 50864, 865, 11, 300, 311, 11, 300, 311, 558, 13, 50914, 50914, 821, 311, 370, 264, 636, 286, 519, 466, 309, 293, 309, 311, 869, 13, 51064, 51064, 639, 307, 411, 257, 14281, 295, 452, 5861, 6367, 751, 13, 51164, 51164, 407, 456, 321, 352, 13, 51214, 51214, 286, 390, 3736, 3579, 9788, 341, 2446, 466, 341, 13, 51364, 51364, 407, 291, 519, 466, 411, 257, 11, 257, 21169, 4373, 295, 11, 295, 4514, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.13574010675603693, "compression_ratio": 1.6697247706422018, "no_caption_prob": 0.00025710472255013883}, {"id": 235, "seek": 76500, "start": 774.0, "end": 775.0, "text": " Yeah.", "tokens": [50364, 682, 3089, 1049, 291, 362, 428, 8460, 13, 338, 76, 3991, 293, 291, 1190, 2699, 76, 3089, 1049, 1190, 293, 309, 23815, 2699, 76, 7098, 13, 50814, 50814, 865, 13, 50864, 50864, 865, 11, 300, 311, 11, 300, 311, 558, 13, 50914, 50914, 821, 311, 370, 264, 636, 286, 519, 466, 309, 293, 309, 311, 869, 13, 51064, 51064, 639, 307, 411, 257, 14281, 295, 452, 5861, 6367, 751, 13, 51164, 51164, 407, 456, 321, 352, 13, 51214, 51214, 286, 390, 3736, 3579, 9788, 341, 2446, 466, 341, 13, 51364, 51364, 407, 291, 519, 466, 411, 257, 11, 257, 21169, 4373, 295, 11, 295, 4514, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.13574010675603693, "compression_ratio": 1.6697247706422018, "no_caption_prob": 0.00025710472255013883}, {"id": 236, "seek": 76500, "start": 775.0, "end": 776.0, "text": " Yeah, that's, that's right.", "tokens": [50364, 682, 3089, 1049, 291, 362, 428, 8460, 13, 338, 76, 3991, 293, 291, 1190, 2699, 76, 3089, 1049, 1190, 293, 309, 23815, 2699, 76, 7098, 13, 50814, 50814, 865, 13, 50864, 50864, 865, 11, 300, 311, 11, 300, 311, 558, 13, 50914, 50914, 821, 311, 370, 264, 636, 286, 519, 466, 309, 293, 309, 311, 869, 13, 51064, 51064, 639, 307, 411, 257, 14281, 295, 452, 5861, 6367, 751, 13, 51164, 51164, 407, 456, 321, 352, 13, 51214, 51214, 286, 390, 3736, 3579, 9788, 341, 2446, 466, 341, 13, 51364, 51364, 407, 291, 519, 466, 411, 257, 11, 257, 21169, 4373, 295, 11, 295, 4514, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.13574010675603693, "compression_ratio": 1.6697247706422018, "no_caption_prob": 0.00025710472255013883}, {"id": 237, "seek": 76500, "start": 776.0, "end": 779.0, "text": " There's so the way I think about it and it's great.", "tokens": [50364, 682, 3089, 1049, 291, 362, 428, 8460, 13, 338, 76, 3991, 293, 291, 1190, 2699, 76, 3089, 1049, 1190, 293, 309, 23815, 2699, 76, 7098, 13, 50814, 50814, 865, 13, 50864, 50864, 865, 11, 300, 311, 11, 300, 311, 558, 13, 50914, 50914, 821, 311, 370, 264, 636, 286, 519, 466, 309, 293, 309, 311, 869, 13, 51064, 51064, 639, 307, 411, 257, 14281, 295, 452, 5861, 6367, 751, 13, 51164, 51164, 407, 456, 321, 352, 13, 51214, 51214, 286, 390, 3736, 3579, 9788, 341, 2446, 466, 341, 13, 51364, 51364, 407, 291, 519, 466, 411, 257, 11, 257, 21169, 4373, 295, 11, 295, 4514, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.13574010675603693, "compression_ratio": 1.6697247706422018, "no_caption_prob": 0.00025710472255013883}, {"id": 238, "seek": 76500, "start": 779.0, "end": 781.0, "text": " This is like a preview of my strange loop talk.", "tokens": [50364, 682, 3089, 1049, 291, 362, 428, 8460, 13, 338, 76, 3991, 293, 291, 1190, 2699, 76, 3089, 1049, 1190, 293, 309, 23815, 2699, 76, 7098, 13, 50814, 50814, 865, 13, 50864, 50864, 865, 11, 300, 311, 11, 300, 311, 558, 13, 50914, 50914, 821, 311, 370, 264, 636, 286, 519, 466, 309, 293, 309, 311, 869, 13, 51064, 51064, 639, 307, 411, 257, 14281, 295, 452, 5861, 6367, 751, 13, 51164, 51164, 407, 456, 321, 352, 13, 51214, 51214, 286, 390, 3736, 3579, 9788, 341, 2446, 466, 341, 13, 51364, 51364, 407, 291, 519, 466, 411, 257, 11, 257, 21169, 4373, 295, 11, 295, 4514, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.13574010675603693, "compression_ratio": 1.6697247706422018, "no_caption_prob": 0.00025710472255013883}, {"id": 239, "seek": 76500, "start": 781.0, "end": 782.0, "text": " So there we go.", "tokens": [50364, 682, 3089, 1049, 291, 362, 428, 8460, 13, 338, 76, 3991, 293, 291, 1190, 2699, 76, 3089, 1049, 1190, 293, 309, 23815, 2699, 76, 7098, 13, 50814, 50814, 865, 13, 50864, 50864, 865, 11, 300, 311, 11, 300, 311, 558, 13, 50914, 50914, 821, 311, 370, 264, 636, 286, 519, 466, 309, 293, 309, 311, 869, 13, 51064, 51064, 639, 307, 411, 257, 14281, 295, 452, 5861, 6367, 751, 13, 51164, 51164, 407, 456, 321, 352, 13, 51214, 51214, 286, 390, 3736, 3579, 9788, 341, 2446, 466, 341, 13, 51364, 51364, 407, 291, 519, 466, 411, 257, 11, 257, 21169, 4373, 295, 11, 295, 4514, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.13574010675603693, "compression_ratio": 1.6697247706422018, "no_caption_prob": 0.00025710472255013883}, {"id": 240, "seek": 76500, "start": 782.0, "end": 785.0, "text": " I was literally writing slides this morning about this.", "tokens": [50364, 682, 3089, 1049, 291, 362, 428, 8460, 13, 338, 76, 3991, 293, 291, 1190, 2699, 76, 3089, 1049, 1190, 293, 309, 23815, 2699, 76, 7098, 13, 50814, 50814, 865, 13, 50864, 50864, 865, 11, 300, 311, 11, 300, 311, 558, 13, 50914, 50914, 821, 311, 370, 264, 636, 286, 519, 466, 309, 293, 309, 311, 869, 13, 51064, 51064, 639, 307, 411, 257, 14281, 295, 452, 5861, 6367, 751, 13, 51164, 51164, 407, 456, 321, 352, 13, 51214, 51214, 286, 390, 3736, 3579, 9788, 341, 2446, 466, 341, 13, 51364, 51364, 407, 291, 519, 466, 411, 257, 11, 257, 21169, 4373, 295, 11, 295, 4514, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.13574010675603693, "compression_ratio": 1.6697247706422018, "no_caption_prob": 0.00025710472255013883}, {"id": 241, "seek": 76500, "start": 785.0, "end": 792.0, "text": " So you think about like a, a sliding scale of, of safety.", "tokens": [50364, 682, 3089, 1049, 291, 362, 428, 8460, 13, 338, 76, 3991, 293, 291, 1190, 2699, 76, 3089, 1049, 1190, 293, 309, 23815, 2699, 76, 7098, 13, 50814, 50814, 865, 13, 50864, 50864, 865, 11, 300, 311, 11, 300, 311, 558, 13, 50914, 50914, 821, 311, 370, 264, 636, 286, 519, 466, 309, 293, 309, 311, 869, 13, 51064, 51064, 639, 307, 411, 257, 14281, 295, 452, 5861, 6367, 751, 13, 51164, 51164, 407, 456, 321, 352, 13, 51214, 51214, 286, 390, 3736, 3579, 9788, 341, 2446, 466, 341, 13, 51364, 51364, 407, 291, 519, 466, 411, 257, 11, 257, 21169, 4373, 295, 11, 295, 4514, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.13574010675603693, "compression_ratio": 1.6697247706422018, "no_caption_prob": 0.00025710472255013883}, {"id": 242, "seek": 79200, "start": 792.0, "end": 797.0, "text": " So on the left, right, you have strings, right?", "tokens": [50364, 407, 322, 264, 1411, 11, 558, 11, 291, 362, 13985, 11, 558, 30, 50614, 50614, 400, 264, 787, 551, 300, 13985, 366, 44077, 1970, 366, 11, 307, 300, 291, 434, 2058, 12340, 294, 411, 11, 291, 458, 11, 624, 20527, 1649, 13, 50964, 50964, 400, 754, 550, 11, 1310, 406, 11, 286, 500, 380, 458, 13, 51064, 51064, 2754, 291, 352, 365, 445, 3547, 11, 445, 472, 7410, 6798, 295, 11, 295, 13, 51264, 51264, 865, 11, 558, 13, 51364, 51364, 8251, 1109, 411, 370, 11, 457, 27993, 11358, 293, 291, 393, 1322, 382, 307, 6322, 498, 291, 645, 11, 291, 458, 11, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.17856560466445495, "compression_ratio": 1.5964912280701755, "no_caption_prob": 5.143824455444701e-05}, {"id": 243, "seek": 79200, "start": 797.0, "end": 804.0, "text": " And the only thing that strings are guarding against are, is that you're encoded in like, you know, UTF 8.", "tokens": [50364, 407, 322, 264, 1411, 11, 558, 11, 291, 362, 13985, 11, 558, 30, 50614, 50614, 400, 264, 787, 551, 300, 13985, 366, 44077, 1970, 366, 11, 307, 300, 291, 434, 2058, 12340, 294, 411, 11, 291, 458, 11, 624, 20527, 1649, 13, 50964, 50964, 400, 754, 550, 11, 1310, 406, 11, 286, 500, 380, 458, 13, 51064, 51064, 2754, 291, 352, 365, 445, 3547, 11, 445, 472, 7410, 6798, 295, 11, 295, 13, 51264, 51264, 865, 11, 558, 13, 51364, 51364, 8251, 1109, 411, 370, 11, 457, 27993, 11358, 293, 291, 393, 1322, 382, 307, 6322, 498, 291, 645, 11, 291, 458, 11, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.17856560466445495, "compression_ratio": 1.5964912280701755, "no_caption_prob": 5.143824455444701e-05}, {"id": 244, "seek": 79200, "start": 804.0, "end": 806.0, "text": " And even then, maybe not, I don't know.", "tokens": [50364, 407, 322, 264, 1411, 11, 558, 11, 291, 362, 13985, 11, 558, 30, 50614, 50614, 400, 264, 787, 551, 300, 13985, 366, 44077, 1970, 366, 11, 307, 300, 291, 434, 2058, 12340, 294, 411, 11, 291, 458, 11, 624, 20527, 1649, 13, 50964, 50964, 400, 754, 550, 11, 1310, 406, 11, 286, 500, 380, 458, 13, 51064, 51064, 2754, 291, 352, 365, 445, 3547, 11, 445, 472, 7410, 6798, 295, 11, 295, 13, 51264, 51264, 865, 11, 558, 13, 51364, 51364, 8251, 1109, 411, 370, 11, 457, 27993, 11358, 293, 291, 393, 1322, 382, 307, 6322, 498, 291, 645, 11, 291, 458, 11, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.17856560466445495, "compression_ratio": 1.5964912280701755, "no_caption_prob": 5.143824455444701e-05}, {"id": 245, "seek": 79200, "start": 806.0, "end": 810.0, "text": " Even you go with just numbers, just one giant string of, of.", "tokens": [50364, 407, 322, 264, 1411, 11, 558, 11, 291, 362, 13985, 11, 558, 30, 50614, 50614, 400, 264, 787, 551, 300, 13985, 366, 44077, 1970, 366, 11, 307, 300, 291, 434, 2058, 12340, 294, 411, 11, 291, 458, 11, 624, 20527, 1649, 13, 50964, 50964, 400, 754, 550, 11, 1310, 406, 11, 286, 500, 380, 458, 13, 51064, 51064, 2754, 291, 352, 365, 445, 3547, 11, 445, 472, 7410, 6798, 295, 11, 295, 13, 51264, 51264, 865, 11, 558, 13, 51364, 51364, 8251, 1109, 411, 370, 11, 457, 27993, 11358, 293, 291, 393, 1322, 382, 307, 6322, 498, 291, 645, 11, 291, 458, 11, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.17856560466445495, "compression_ratio": 1.5964912280701755, "no_caption_prob": 5.143824455444701e-05}, {"id": 246, "seek": 79200, "start": 810.0, "end": 812.0, "text": " Yeah, right.", "tokens": [50364, 407, 322, 264, 1411, 11, 558, 11, 291, 362, 13985, 11, 558, 30, 50614, 50614, 400, 264, 787, 551, 300, 13985, 366, 44077, 1970, 366, 11, 307, 300, 291, 434, 2058, 12340, 294, 411, 11, 291, 458, 11, 624, 20527, 1649, 13, 50964, 50964, 400, 754, 550, 11, 1310, 406, 11, 286, 500, 380, 458, 13, 51064, 51064, 2754, 291, 352, 365, 445, 3547, 11, 445, 472, 7410, 6798, 295, 11, 295, 13, 51264, 51264, 865, 11, 558, 13, 51364, 51364, 8251, 1109, 411, 370, 11, 457, 27993, 11358, 293, 291, 393, 1322, 382, 307, 6322, 498, 291, 645, 11, 291, 458, 11, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.17856560466445495, "compression_ratio": 1.5964912280701755, "no_caption_prob": 5.143824455444701e-05}, {"id": 247, "seek": 79200, "start": 812.0, "end": 820.0, "text": " Strings like so, but inherently flexible and you can build as is obvious if you were, you know,", "tokens": [50364, 407, 322, 264, 1411, 11, 558, 11, 291, 362, 13985, 11, 558, 30, 50614, 50614, 400, 264, 787, 551, 300, 13985, 366, 44077, 1970, 366, 11, 307, 300, 291, 434, 2058, 12340, 294, 411, 11, 291, 458, 11, 624, 20527, 1649, 13, 50964, 50964, 400, 754, 550, 11, 1310, 406, 11, 286, 500, 380, 458, 13, 51064, 51064, 2754, 291, 352, 365, 445, 3547, 11, 445, 472, 7410, 6798, 295, 11, 295, 13, 51264, 51264, 865, 11, 558, 13, 51364, 51364, 8251, 1109, 411, 370, 11, 457, 27993, 11358, 293, 291, 393, 1322, 382, 307, 6322, 498, 291, 645, 11, 291, 458, 11, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.17856560466445495, "compression_ratio": 1.5964912280701755, "no_caption_prob": 5.143824455444701e-05}, {"id": 248, "seek": 82000, "start": 820.0, "end": 827.0, "text": " trapped in a room and you needed to build a tiny little like cogen thing and you had nothing else,", "tokens": [50364, 14994, 294, 257, 1808, 293, 291, 2978, 281, 1322, 257, 5870, 707, 411, 598, 1766, 551, 293, 291, 632, 1825, 1646, 11, 50714, 50714, 291, 1116, 1391, 411, 362, 13985, 293, 360, 512, 3248, 41140, 420, 437, 13, 50914, 50914, 467, 311, 4005, 13, 50964, 50964, 2014, 613, 36911, 300, 291, 362, 885, 14994, 294, 257, 1808, 30, 51064, 51064, 286, 362, 588, 11, 588, 3657, 13, 51214, 51214, 1079, 13, 51364, 51364, 440, 1866, 3037, 295, 11, 295, 17746, 3089, 13, 51564, 51564, 865, 13, 51614, 51614, 1407, 483, 484, 295, 341, 1808, 11, 291, 362, 281, 1322, 257, 598, 1766, 2290, 13, 51714, 51714, 876, 11, 665, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.14021566457915724, "compression_ratio": 1.6437768240343347, "no_caption_prob": 4.8323909140890464e-05}, {"id": 249, "seek": 82000, "start": 827.0, "end": 831.0, "text": " you'd probably like have strings and do some replacements or what.", "tokens": [50364, 14994, 294, 257, 1808, 293, 291, 2978, 281, 1322, 257, 5870, 707, 411, 598, 1766, 551, 293, 291, 632, 1825, 1646, 11, 50714, 50714, 291, 1116, 1391, 411, 362, 13985, 293, 360, 512, 3248, 41140, 420, 437, 13, 50914, 50914, 467, 311, 4005, 13, 50964, 50964, 2014, 613, 36911, 300, 291, 362, 885, 14994, 294, 257, 1808, 30, 51064, 51064, 286, 362, 588, 11, 588, 3657, 13, 51214, 51214, 1079, 13, 51364, 51364, 440, 1866, 3037, 295, 11, 295, 17746, 3089, 13, 51564, 51564, 865, 13, 51614, 51614, 1407, 483, 484, 295, 341, 1808, 11, 291, 362, 281, 1322, 257, 598, 1766, 2290, 13, 51714, 51714, 876, 11, 665, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.14021566457915724, "compression_ratio": 1.6437768240343347, "no_caption_prob": 4.8323909140890464e-05}, {"id": 250, "seek": 82000, "start": 831.0, "end": 832.0, "text": " It's powerful.", "tokens": [50364, 14994, 294, 257, 1808, 293, 291, 2978, 281, 1322, 257, 5870, 707, 411, 598, 1766, 551, 293, 291, 632, 1825, 1646, 11, 50714, 50714, 291, 1116, 1391, 411, 362, 13985, 293, 360, 512, 3248, 41140, 420, 437, 13, 50914, 50914, 467, 311, 4005, 13, 50964, 50964, 2014, 613, 36911, 300, 291, 362, 885, 14994, 294, 257, 1808, 30, 51064, 51064, 286, 362, 588, 11, 588, 3657, 13, 51214, 51214, 1079, 13, 51364, 51364, 440, 1866, 3037, 295, 11, 295, 17746, 3089, 13, 51564, 51564, 865, 13, 51614, 51614, 1407, 483, 484, 295, 341, 1808, 11, 291, 362, 281, 1322, 257, 598, 1766, 2290, 13, 51714, 51714, 876, 11, 665, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.14021566457915724, "compression_ratio": 1.6437768240343347, "no_caption_prob": 4.8323909140890464e-05}, {"id": 251, "seek": 82000, "start": 832.0, "end": 834.0, "text": " Are these nightmares that you have being trapped in a room?", "tokens": [50364, 14994, 294, 257, 1808, 293, 291, 2978, 281, 1322, 257, 5870, 707, 411, 598, 1766, 551, 293, 291, 632, 1825, 1646, 11, 50714, 50714, 291, 1116, 1391, 411, 362, 13985, 293, 360, 512, 3248, 41140, 420, 437, 13, 50914, 50914, 467, 311, 4005, 13, 50964, 50964, 2014, 613, 36911, 300, 291, 362, 885, 14994, 294, 257, 1808, 30, 51064, 51064, 286, 362, 588, 11, 588, 3657, 13, 51214, 51214, 1079, 13, 51364, 51364, 440, 1866, 3037, 295, 11, 295, 17746, 3089, 13, 51564, 51564, 865, 13, 51614, 51614, 1407, 483, 484, 295, 341, 1808, 11, 291, 362, 281, 1322, 257, 598, 1766, 2290, 13, 51714, 51714, 876, 11, 665, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.14021566457915724, "compression_ratio": 1.6437768240343347, "no_caption_prob": 4.8323909140890464e-05}, {"id": 252, "seek": 82000, "start": 834.0, "end": 837.0, "text": " I have very, very weird.", "tokens": [50364, 14994, 294, 257, 1808, 293, 291, 2978, 281, 1322, 257, 5870, 707, 411, 598, 1766, 551, 293, 291, 632, 1825, 1646, 11, 50714, 50714, 291, 1116, 1391, 411, 362, 13985, 293, 360, 512, 3248, 41140, 420, 437, 13, 50914, 50914, 467, 311, 4005, 13, 50964, 50964, 2014, 613, 36911, 300, 291, 362, 885, 14994, 294, 257, 1808, 30, 51064, 51064, 286, 362, 588, 11, 588, 3657, 13, 51214, 51214, 1079, 13, 51364, 51364, 440, 1866, 3037, 295, 11, 295, 17746, 3089, 13, 51564, 51564, 865, 13, 51614, 51614, 1407, 483, 484, 295, 341, 1808, 11, 291, 362, 281, 1322, 257, 598, 1766, 2290, 13, 51714, 51714, 876, 11, 665, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.14021566457915724, "compression_ratio": 1.6437768240343347, "no_caption_prob": 4.8323909140890464e-05}, {"id": 253, "seek": 82000, "start": 837.0, "end": 840.0, "text": " Yes.", "tokens": [50364, 14994, 294, 257, 1808, 293, 291, 2978, 281, 1322, 257, 5870, 707, 411, 598, 1766, 551, 293, 291, 632, 1825, 1646, 11, 50714, 50714, 291, 1116, 1391, 411, 362, 13985, 293, 360, 512, 3248, 41140, 420, 437, 13, 50914, 50914, 467, 311, 4005, 13, 50964, 50964, 2014, 613, 36911, 300, 291, 362, 885, 14994, 294, 257, 1808, 30, 51064, 51064, 286, 362, 588, 11, 588, 3657, 13, 51214, 51214, 1079, 13, 51364, 51364, 440, 1866, 3037, 295, 11, 295, 17746, 3089, 13, 51564, 51564, 865, 13, 51614, 51614, 1407, 483, 484, 295, 341, 1808, 11, 291, 362, 281, 1322, 257, 598, 1766, 2290, 13, 51714, 51714, 876, 11, 665, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.14021566457915724, "compression_ratio": 1.6437768240343347, "no_caption_prob": 4.8323909140890464e-05}, {"id": 254, "seek": 82000, "start": 840.0, "end": 844.0, "text": " The saw version of, of generating code.", "tokens": [50364, 14994, 294, 257, 1808, 293, 291, 2978, 281, 1322, 257, 5870, 707, 411, 598, 1766, 551, 293, 291, 632, 1825, 1646, 11, 50714, 50714, 291, 1116, 1391, 411, 362, 13985, 293, 360, 512, 3248, 41140, 420, 437, 13, 50914, 50914, 467, 311, 4005, 13, 50964, 50964, 2014, 613, 36911, 300, 291, 362, 885, 14994, 294, 257, 1808, 30, 51064, 51064, 286, 362, 588, 11, 588, 3657, 13, 51214, 51214, 1079, 13, 51364, 51364, 440, 1866, 3037, 295, 11, 295, 17746, 3089, 13, 51564, 51564, 865, 13, 51614, 51614, 1407, 483, 484, 295, 341, 1808, 11, 291, 362, 281, 1322, 257, 598, 1766, 2290, 13, 51714, 51714, 876, 11, 665, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.14021566457915724, "compression_ratio": 1.6437768240343347, "no_caption_prob": 4.8323909140890464e-05}, {"id": 255, "seek": 82000, "start": 844.0, "end": 845.0, "text": " Yeah.", "tokens": [50364, 14994, 294, 257, 1808, 293, 291, 2978, 281, 1322, 257, 5870, 707, 411, 598, 1766, 551, 293, 291, 632, 1825, 1646, 11, 50714, 50714, 291, 1116, 1391, 411, 362, 13985, 293, 360, 512, 3248, 41140, 420, 437, 13, 50914, 50914, 467, 311, 4005, 13, 50964, 50964, 2014, 613, 36911, 300, 291, 362, 885, 14994, 294, 257, 1808, 30, 51064, 51064, 286, 362, 588, 11, 588, 3657, 13, 51214, 51214, 1079, 13, 51364, 51364, 440, 1866, 3037, 295, 11, 295, 17746, 3089, 13, 51564, 51564, 865, 13, 51614, 51614, 1407, 483, 484, 295, 341, 1808, 11, 291, 362, 281, 1322, 257, 598, 1766, 2290, 13, 51714, 51714, 876, 11, 665, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.14021566457915724, "compression_ratio": 1.6437768240343347, "no_caption_prob": 4.8323909140890464e-05}, {"id": 256, "seek": 82000, "start": 845.0, "end": 847.0, "text": " To get out of this room, you have to build a cogen tool.", "tokens": [50364, 14994, 294, 257, 1808, 293, 291, 2978, 281, 1322, 257, 5870, 707, 411, 598, 1766, 551, 293, 291, 632, 1825, 1646, 11, 50714, 50714, 291, 1116, 1391, 411, 362, 13985, 293, 360, 512, 3248, 41140, 420, 437, 13, 50914, 50914, 467, 311, 4005, 13, 50964, 50964, 2014, 613, 36911, 300, 291, 362, 885, 14994, 294, 257, 1808, 30, 51064, 51064, 286, 362, 588, 11, 588, 3657, 13, 51214, 51214, 1079, 13, 51364, 51364, 440, 1866, 3037, 295, 11, 295, 17746, 3089, 13, 51564, 51564, 865, 13, 51614, 51614, 1407, 483, 484, 295, 341, 1808, 11, 291, 362, 281, 1322, 257, 598, 1766, 2290, 13, 51714, 51714, 876, 11, 665, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.14021566457915724, "compression_ratio": 1.6437768240343347, "no_caption_prob": 4.8323909140890464e-05}, {"id": 257, "seek": 82000, "start": 847.0, "end": 848.0, "text": " Oh, good.", "tokens": [50364, 14994, 294, 257, 1808, 293, 291, 2978, 281, 1322, 257, 5870, 707, 411, 598, 1766, 551, 293, 291, 632, 1825, 1646, 11, 50714, 50714, 291, 1116, 1391, 411, 362, 13985, 293, 360, 512, 3248, 41140, 420, 437, 13, 50914, 50914, 467, 311, 4005, 13, 50964, 50964, 2014, 613, 36911, 300, 291, 362, 885, 14994, 294, 257, 1808, 30, 51064, 51064, 286, 362, 588, 11, 588, 3657, 13, 51214, 51214, 1079, 13, 51364, 51364, 440, 1866, 3037, 295, 11, 295, 17746, 3089, 13, 51564, 51564, 865, 13, 51614, 51614, 1407, 483, 484, 295, 341, 1808, 11, 291, 362, 281, 1322, 257, 598, 1766, 2290, 13, 51714, 51714, 876, 11, 665, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.14021566457915724, "compression_ratio": 1.6437768240343347, "no_caption_prob": 4.8323909140890464e-05}, {"id": 258, "seek": 84800, "start": 848.0, "end": 852.0, "text": " I know how to do that.", "tokens": [50364, 286, 458, 577, 281, 360, 300, 13, 50564, 50564, 8537, 13, 865, 13, 50614, 50614, 407, 11, 370, 11, 1392, 13, 50664, 50664, 407, 13985, 366, 322, 264, 1411, 293, 436, 366, 264, 1935, 3273, 11, 457, 4258, 341, 19283, 11, 411, 21169, 4373, 307, 1293, 1417, 466, 4514, 11, 51214, 51214, 457, 309, 311, 611, 1417, 466, 19283, 13, 51264, 51264, 821, 311, 411, 341, 13985, 27993, 21800, 11, 27993, 19283, 13, 51514, 51514, 821, 311, 512, 4514, 1507, 11, 457, 411, 291, 815, 420, 815, 406, 1127, 466, 300, 5413, 322, 428, 764, 1389, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.12266603790887512, "compression_ratio": 1.775330396475771, "no_caption_prob": 6.920863961568102e-05}, {"id": 259, "seek": 84800, "start": 852.0, "end": 853.0, "text": " Basically. Yeah.", "tokens": [50364, 286, 458, 577, 281, 360, 300, 13, 50564, 50564, 8537, 13, 865, 13, 50614, 50614, 407, 11, 370, 11, 1392, 13, 50664, 50664, 407, 13985, 366, 322, 264, 1411, 293, 436, 366, 264, 1935, 3273, 11, 457, 4258, 341, 19283, 11, 411, 21169, 4373, 307, 1293, 1417, 466, 4514, 11, 51214, 51214, 457, 309, 311, 611, 1417, 466, 19283, 13, 51264, 51264, 821, 311, 411, 341, 13985, 27993, 21800, 11, 27993, 19283, 13, 51514, 51514, 821, 311, 512, 4514, 1507, 11, 457, 411, 291, 815, 420, 815, 406, 1127, 466, 300, 5413, 322, 428, 764, 1389, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.12266603790887512, "compression_ratio": 1.775330396475771, "no_caption_prob": 6.920863961568102e-05}, {"id": 260, "seek": 84800, "start": 853.0, "end": 854.0, "text": " So, so, okay.", "tokens": [50364, 286, 458, 577, 281, 360, 300, 13, 50564, 50564, 8537, 13, 865, 13, 50614, 50614, 407, 11, 370, 11, 1392, 13, 50664, 50664, 407, 13985, 366, 322, 264, 1411, 293, 436, 366, 264, 1935, 3273, 11, 457, 4258, 341, 19283, 11, 411, 21169, 4373, 307, 1293, 1417, 466, 4514, 11, 51214, 51214, 457, 309, 311, 611, 1417, 466, 19283, 13, 51264, 51264, 821, 311, 411, 341, 13985, 27993, 21800, 11, 27993, 19283, 13, 51514, 51514, 821, 311, 512, 4514, 1507, 11, 457, 411, 291, 815, 420, 815, 406, 1127, 466, 300, 5413, 322, 428, 764, 1389, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.12266603790887512, "compression_ratio": 1.775330396475771, "no_caption_prob": 6.920863961568102e-05}, {"id": 261, "seek": 84800, "start": 854.0, "end": 865.0, "text": " So strings are on the left and they are the least safe, but immediately this convenience, like sliding scale is both talking about safety,", "tokens": [50364, 286, 458, 577, 281, 360, 300, 13, 50564, 50564, 8537, 13, 865, 13, 50614, 50614, 407, 11, 370, 11, 1392, 13, 50664, 50664, 407, 13985, 366, 322, 264, 1411, 293, 436, 366, 264, 1935, 3273, 11, 457, 4258, 341, 19283, 11, 411, 21169, 4373, 307, 1293, 1417, 466, 4514, 11, 51214, 51214, 457, 309, 311, 611, 1417, 466, 19283, 13, 51264, 51264, 821, 311, 411, 341, 13985, 27993, 21800, 11, 27993, 19283, 13, 51514, 51514, 821, 311, 512, 4514, 1507, 11, 457, 411, 291, 815, 420, 815, 406, 1127, 466, 300, 5413, 322, 428, 764, 1389, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.12266603790887512, "compression_ratio": 1.775330396475771, "no_caption_prob": 6.920863961568102e-05}, {"id": 262, "seek": 84800, "start": 865.0, "end": 866.0, "text": " but it's also talking about convenience.", "tokens": [50364, 286, 458, 577, 281, 360, 300, 13, 50564, 50564, 8537, 13, 865, 13, 50614, 50614, 407, 11, 370, 11, 1392, 13, 50664, 50664, 407, 13985, 366, 322, 264, 1411, 293, 436, 366, 264, 1935, 3273, 11, 457, 4258, 341, 19283, 11, 411, 21169, 4373, 307, 1293, 1417, 466, 4514, 11, 51214, 51214, 457, 309, 311, 611, 1417, 466, 19283, 13, 51264, 51264, 821, 311, 411, 341, 13985, 27993, 21800, 11, 27993, 19283, 13, 51514, 51514, 821, 311, 512, 4514, 1507, 11, 457, 411, 291, 815, 420, 815, 406, 1127, 466, 300, 5413, 322, 428, 764, 1389, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.12266603790887512, "compression_ratio": 1.775330396475771, "no_caption_prob": 6.920863961568102e-05}, {"id": 263, "seek": 84800, "start": 866.0, "end": 871.0, "text": " There's like this strings inherently portable, inherently convenience.", "tokens": [50364, 286, 458, 577, 281, 360, 300, 13, 50564, 50564, 8537, 13, 865, 13, 50614, 50614, 407, 11, 370, 11, 1392, 13, 50664, 50664, 407, 13985, 366, 322, 264, 1411, 293, 436, 366, 264, 1935, 3273, 11, 457, 4258, 341, 19283, 11, 411, 21169, 4373, 307, 1293, 1417, 466, 4514, 11, 51214, 51214, 457, 309, 311, 611, 1417, 466, 19283, 13, 51264, 51264, 821, 311, 411, 341, 13985, 27993, 21800, 11, 27993, 19283, 13, 51514, 51514, 821, 311, 512, 4514, 1507, 11, 457, 411, 291, 815, 420, 815, 406, 1127, 466, 300, 5413, 322, 428, 764, 1389, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.12266603790887512, "compression_ratio": 1.775330396475771, "no_caption_prob": 6.920863961568102e-05}, {"id": 264, "seek": 84800, "start": 871.0, "end": 877.0, "text": " There's some safety stuff, but like you may or may not care about that depending on your use case.", "tokens": [50364, 286, 458, 577, 281, 360, 300, 13, 50564, 50564, 8537, 13, 865, 13, 50614, 50614, 407, 11, 370, 11, 1392, 13, 50664, 50664, 407, 13985, 366, 322, 264, 1411, 293, 436, 366, 264, 1935, 3273, 11, 457, 4258, 341, 19283, 11, 411, 21169, 4373, 307, 1293, 1417, 466, 4514, 11, 51214, 51214, 457, 309, 311, 611, 1417, 466, 19283, 13, 51264, 51264, 821, 311, 411, 341, 13985, 27993, 21800, 11, 27993, 19283, 13, 51514, 51514, 821, 311, 512, 4514, 1507, 11, 457, 411, 291, 815, 420, 815, 406, 1127, 466, 300, 5413, 322, 428, 764, 1389, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.12266603790887512, "compression_ratio": 1.775330396475771, "no_caption_prob": 6.920863961568102e-05}, {"id": 265, "seek": 87700, "start": 877.0, "end": 878.0, "text": " Like, so it's like, okay, cool.", "tokens": [50364, 1743, 11, 370, 309, 311, 411, 11, 1392, 11, 1627, 13, 50414, 50414, 400, 445, 281, 411, 10692, 300, 300, 311, 257, 7363, 3922, 13, 50614, 50614, 467, 311, 406, 411, 544, 12649, 307, 406, 1009, 1101, 13, 50764, 50764, 821, 311, 456, 366, 4923, 39457, 1009, 13, 50864, 50864, 407, 550, 291, 352, 472, 11, 472, 26109, 3052, 293, 291, 434, 411, 11, 1392, 11, 869, 13, 51014, 51014, 286, 362, 364, 316, 6840, 11, 364, 12649, 28431, 4230, 13, 51214, 51214, 1012, 1627, 307, 300, 30, 51264, 51264, 1743, 321, 600, 586, 37140, 264, 28431, 294, 257, 4230, 293, 437, 321, 434, 44077, 1970, 307, 309, 311, 23980, 578, 984, 7363, 11, 457, 309, 311, 411, 11, 1392, 11, 300, 311, 1627, 13, 51614, 51614, 492, 434, 920, 5361, 257, 1326, 721, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.08175712009128049, "compression_ratio": 1.711191335740072, "no_caption_prob": 0.00011958394316025078}, {"id": 266, "seek": 87700, "start": 878.0, "end": 882.0, "text": " And just to like acknowledge that that's a valid choice.", "tokens": [50364, 1743, 11, 370, 309, 311, 411, 11, 1392, 11, 1627, 13, 50414, 50414, 400, 445, 281, 411, 10692, 300, 300, 311, 257, 7363, 3922, 13, 50614, 50614, 467, 311, 406, 411, 544, 12649, 307, 406, 1009, 1101, 13, 50764, 50764, 821, 311, 456, 366, 4923, 39457, 1009, 13, 50864, 50864, 407, 550, 291, 352, 472, 11, 472, 26109, 3052, 293, 291, 434, 411, 11, 1392, 11, 869, 13, 51014, 51014, 286, 362, 364, 316, 6840, 11, 364, 12649, 28431, 4230, 13, 51214, 51214, 1012, 1627, 307, 300, 30, 51264, 51264, 1743, 321, 600, 586, 37140, 264, 28431, 294, 257, 4230, 293, 437, 321, 434, 44077, 1970, 307, 309, 311, 23980, 578, 984, 7363, 11, 457, 309, 311, 411, 11, 1392, 11, 300, 311, 1627, 13, 51614, 51614, 492, 434, 920, 5361, 257, 1326, 721, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.08175712009128049, "compression_ratio": 1.711191335740072, "no_caption_prob": 0.00011958394316025078}, {"id": 267, "seek": 87700, "start": 882.0, "end": 885.0, "text": " It's not like more abstract is not always better.", "tokens": [50364, 1743, 11, 370, 309, 311, 411, 11, 1392, 11, 1627, 13, 50414, 50414, 400, 445, 281, 411, 10692, 300, 300, 311, 257, 7363, 3922, 13, 50614, 50614, 467, 311, 406, 411, 544, 12649, 307, 406, 1009, 1101, 13, 50764, 50764, 821, 311, 456, 366, 4923, 39457, 1009, 13, 50864, 50864, 407, 550, 291, 352, 472, 11, 472, 26109, 3052, 293, 291, 434, 411, 11, 1392, 11, 869, 13, 51014, 51014, 286, 362, 364, 316, 6840, 11, 364, 12649, 28431, 4230, 13, 51214, 51214, 1012, 1627, 307, 300, 30, 51264, 51264, 1743, 321, 600, 586, 37140, 264, 28431, 294, 257, 4230, 293, 437, 321, 434, 44077, 1970, 307, 309, 311, 23980, 578, 984, 7363, 11, 457, 309, 311, 411, 11, 1392, 11, 300, 311, 1627, 13, 51614, 51614, 492, 434, 920, 5361, 257, 1326, 721, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.08175712009128049, "compression_ratio": 1.711191335740072, "no_caption_prob": 0.00011958394316025078}, {"id": 268, "seek": 87700, "start": 885.0, "end": 887.0, "text": " There's there are trade offs always.", "tokens": [50364, 1743, 11, 370, 309, 311, 411, 11, 1392, 11, 1627, 13, 50414, 50414, 400, 445, 281, 411, 10692, 300, 300, 311, 257, 7363, 3922, 13, 50614, 50614, 467, 311, 406, 411, 544, 12649, 307, 406, 1009, 1101, 13, 50764, 50764, 821, 311, 456, 366, 4923, 39457, 1009, 13, 50864, 50864, 407, 550, 291, 352, 472, 11, 472, 26109, 3052, 293, 291, 434, 411, 11, 1392, 11, 869, 13, 51014, 51014, 286, 362, 364, 316, 6840, 11, 364, 12649, 28431, 4230, 13, 51214, 51214, 1012, 1627, 307, 300, 30, 51264, 51264, 1743, 321, 600, 586, 37140, 264, 28431, 294, 257, 4230, 293, 437, 321, 434, 44077, 1970, 307, 309, 311, 23980, 578, 984, 7363, 11, 457, 309, 311, 411, 11, 1392, 11, 300, 311, 1627, 13, 51614, 51614, 492, 434, 920, 5361, 257, 1326, 721, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.08175712009128049, "compression_ratio": 1.711191335740072, "no_caption_prob": 0.00011958394316025078}, {"id": 269, "seek": 87700, "start": 887.0, "end": 890.0, "text": " So then you go one, one notch further and you're like, okay, great.", "tokens": [50364, 1743, 11, 370, 309, 311, 411, 11, 1392, 11, 1627, 13, 50414, 50414, 400, 445, 281, 411, 10692, 300, 300, 311, 257, 7363, 3922, 13, 50614, 50614, 467, 311, 406, 411, 544, 12649, 307, 406, 1009, 1101, 13, 50764, 50764, 821, 311, 456, 366, 4923, 39457, 1009, 13, 50864, 50864, 407, 550, 291, 352, 472, 11, 472, 26109, 3052, 293, 291, 434, 411, 11, 1392, 11, 869, 13, 51014, 51014, 286, 362, 364, 316, 6840, 11, 364, 12649, 28431, 4230, 13, 51214, 51214, 1012, 1627, 307, 300, 30, 51264, 51264, 1743, 321, 600, 586, 37140, 264, 28431, 294, 257, 4230, 293, 437, 321, 434, 44077, 1970, 307, 309, 311, 23980, 578, 984, 7363, 11, 457, 309, 311, 411, 11, 1392, 11, 300, 311, 1627, 13, 51614, 51614, 492, 434, 920, 5361, 257, 1326, 721, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.08175712009128049, "compression_ratio": 1.711191335740072, "no_caption_prob": 0.00011958394316025078}, {"id": 270, "seek": 87700, "start": 890.0, "end": 894.0, "text": " I have an AST, an abstract syntax tree.", "tokens": [50364, 1743, 11, 370, 309, 311, 411, 11, 1392, 11, 1627, 13, 50414, 50414, 400, 445, 281, 411, 10692, 300, 300, 311, 257, 7363, 3922, 13, 50614, 50614, 467, 311, 406, 411, 544, 12649, 307, 406, 1009, 1101, 13, 50764, 50764, 821, 311, 456, 366, 4923, 39457, 1009, 13, 50864, 50864, 407, 550, 291, 352, 472, 11, 472, 26109, 3052, 293, 291, 434, 411, 11, 1392, 11, 869, 13, 51014, 51014, 286, 362, 364, 316, 6840, 11, 364, 12649, 28431, 4230, 13, 51214, 51214, 1012, 1627, 307, 300, 30, 51264, 51264, 1743, 321, 600, 586, 37140, 264, 28431, 294, 257, 4230, 293, 437, 321, 434, 44077, 1970, 307, 309, 311, 23980, 578, 984, 7363, 11, 457, 309, 311, 411, 11, 1392, 11, 300, 311, 1627, 13, 51614, 51614, 492, 434, 920, 5361, 257, 1326, 721, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.08175712009128049, "compression_ratio": 1.711191335740072, "no_caption_prob": 0.00011958394316025078}, {"id": 271, "seek": 87700, "start": 894.0, "end": 895.0, "text": " How cool is that?", "tokens": [50364, 1743, 11, 370, 309, 311, 411, 11, 1392, 11, 1627, 13, 50414, 50414, 400, 445, 281, 411, 10692, 300, 300, 311, 257, 7363, 3922, 13, 50614, 50614, 467, 311, 406, 411, 544, 12649, 307, 406, 1009, 1101, 13, 50764, 50764, 821, 311, 456, 366, 4923, 39457, 1009, 13, 50864, 50864, 407, 550, 291, 352, 472, 11, 472, 26109, 3052, 293, 291, 434, 411, 11, 1392, 11, 869, 13, 51014, 51014, 286, 362, 364, 316, 6840, 11, 364, 12649, 28431, 4230, 13, 51214, 51214, 1012, 1627, 307, 300, 30, 51264, 51264, 1743, 321, 600, 586, 37140, 264, 28431, 294, 257, 4230, 293, 437, 321, 434, 44077, 1970, 307, 309, 311, 23980, 578, 984, 7363, 11, 457, 309, 311, 411, 11, 1392, 11, 300, 311, 1627, 13, 51614, 51614, 492, 434, 920, 5361, 257, 1326, 721, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.08175712009128049, "compression_ratio": 1.711191335740072, "no_caption_prob": 0.00011958394316025078}, {"id": 272, "seek": 87700, "start": 895.0, "end": 902.0, "text": " Like we've now modeled the syntax in a tree and what we're guarding against is it's syntactically valid, but it's like, okay, that's cool.", "tokens": [50364, 1743, 11, 370, 309, 311, 411, 11, 1392, 11, 1627, 13, 50414, 50414, 400, 445, 281, 411, 10692, 300, 300, 311, 257, 7363, 3922, 13, 50614, 50614, 467, 311, 406, 411, 544, 12649, 307, 406, 1009, 1101, 13, 50764, 50764, 821, 311, 456, 366, 4923, 39457, 1009, 13, 50864, 50864, 407, 550, 291, 352, 472, 11, 472, 26109, 3052, 293, 291, 434, 411, 11, 1392, 11, 869, 13, 51014, 51014, 286, 362, 364, 316, 6840, 11, 364, 12649, 28431, 4230, 13, 51214, 51214, 1012, 1627, 307, 300, 30, 51264, 51264, 1743, 321, 600, 586, 37140, 264, 28431, 294, 257, 4230, 293, 437, 321, 434, 44077, 1970, 307, 309, 311, 23980, 578, 984, 7363, 11, 457, 309, 311, 411, 11, 1392, 11, 300, 311, 1627, 13, 51614, 51614, 492, 434, 920, 5361, 257, 1326, 721, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.08175712009128049, "compression_ratio": 1.711191335740072, "no_caption_prob": 0.00011958394316025078}, {"id": 273, "seek": 87700, "start": 902.0, "end": 904.0, "text": " We're still missing a few things.", "tokens": [50364, 1743, 11, 370, 309, 311, 411, 11, 1392, 11, 1627, 13, 50414, 50414, 400, 445, 281, 411, 10692, 300, 300, 311, 257, 7363, 3922, 13, 50614, 50614, 467, 311, 406, 411, 544, 12649, 307, 406, 1009, 1101, 13, 50764, 50764, 821, 311, 456, 366, 4923, 39457, 1009, 13, 50864, 50864, 407, 550, 291, 352, 472, 11, 472, 26109, 3052, 293, 291, 434, 411, 11, 1392, 11, 869, 13, 51014, 51014, 286, 362, 364, 316, 6840, 11, 364, 12649, 28431, 4230, 13, 51214, 51214, 1012, 1627, 307, 300, 30, 51264, 51264, 1743, 321, 600, 586, 37140, 264, 28431, 294, 257, 4230, 293, 437, 321, 434, 44077, 1970, 307, 309, 311, 23980, 578, 984, 7363, 11, 457, 309, 311, 411, 11, 1392, 11, 300, 311, 1627, 13, 51614, 51614, 492, 434, 920, 5361, 257, 1326, 721, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.08175712009128049, "compression_ratio": 1.711191335740072, "no_caption_prob": 0.00011958394316025078}, {"id": 274, "seek": 90400, "start": 904.0, "end": 907.0, "text": " One AST is tend to have a very large surface area.", "tokens": [50364, 1485, 316, 6840, 307, 3928, 281, 362, 257, 588, 2416, 3753, 1859, 13, 50514, 50514, 2699, 76, 307, 767, 1238, 869, 570, 1080, 3753, 1859, 307, 4356, 11, 457, 754, 337, 2699, 76, 11, 309, 311, 370, 1359, 1951, 316, 6840, 13, 50764, 50764, 467, 311, 767, 920, 1238, 955, 445, 570, 316, 6840, 307, 4725, 1333, 295, 643, 281, 2906, 257, 3096, 1230, 295, 7690, 82, 5969, 309, 311, 257, 588, 11, 588, 2199, 2856, 13, 51264, 51264, 1779, 13, 51314, 51314, 407, 309, 311, 411, 11, 1392, 11, 754, 294, 264, 2199, 1389, 11, 309, 311, 920, 257, 688, 295, 3753, 1859, 13, 51464, 51464, 400, 291, 411, 11, 370, 718, 311, 352, 472, 26109, 3052, 13, 51614, 51614, 1012, 393, 321, 483, 544, 4514, 30, 51714, 51714, 1743, 490, 364, 316, 6840, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.13584514345441545, "compression_ratio": 1.7282229965156795, "no_caption_prob": 5.955052074568812e-06}, {"id": 275, "seek": 90400, "start": 907.0, "end": 912.0, "text": " Elm is actually pretty great because its surface area is smaller, but even for Elm, it's so small within AST.", "tokens": [50364, 1485, 316, 6840, 307, 3928, 281, 362, 257, 588, 2416, 3753, 1859, 13, 50514, 50514, 2699, 76, 307, 767, 1238, 869, 570, 1080, 3753, 1859, 307, 4356, 11, 457, 754, 337, 2699, 76, 11, 309, 311, 370, 1359, 1951, 316, 6840, 13, 50764, 50764, 467, 311, 767, 920, 1238, 955, 445, 570, 316, 6840, 307, 4725, 1333, 295, 643, 281, 2906, 257, 3096, 1230, 295, 7690, 82, 5969, 309, 311, 257, 588, 11, 588, 2199, 2856, 13, 51264, 51264, 1779, 13, 51314, 51314, 407, 309, 311, 411, 11, 1392, 11, 754, 294, 264, 2199, 1389, 11, 309, 311, 920, 257, 688, 295, 3753, 1859, 13, 51464, 51464, 400, 291, 411, 11, 370, 718, 311, 352, 472, 26109, 3052, 13, 51614, 51614, 1012, 393, 321, 483, 544, 4514, 30, 51714, 51714, 1743, 490, 364, 316, 6840, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.13584514345441545, "compression_ratio": 1.7282229965156795, "no_caption_prob": 5.955052074568812e-06}, {"id": 276, "seek": 90400, "start": 912.0, "end": 922.0, "text": " It's actually still pretty big just because AST is necessarily sort of need to represent a base number of constructs unless it's a very, very simple language.", "tokens": [50364, 1485, 316, 6840, 307, 3928, 281, 362, 257, 588, 2416, 3753, 1859, 13, 50514, 50514, 2699, 76, 307, 767, 1238, 869, 570, 1080, 3753, 1859, 307, 4356, 11, 457, 754, 337, 2699, 76, 11, 309, 311, 370, 1359, 1951, 316, 6840, 13, 50764, 50764, 467, 311, 767, 920, 1238, 955, 445, 570, 316, 6840, 307, 4725, 1333, 295, 643, 281, 2906, 257, 3096, 1230, 295, 7690, 82, 5969, 309, 311, 257, 588, 11, 588, 2199, 2856, 13, 51264, 51264, 1779, 13, 51314, 51314, 407, 309, 311, 411, 11, 1392, 11, 754, 294, 264, 2199, 1389, 11, 309, 311, 920, 257, 688, 295, 3753, 1859, 13, 51464, 51464, 400, 291, 411, 11, 370, 718, 311, 352, 472, 26109, 3052, 13, 51614, 51614, 1012, 393, 321, 483, 544, 4514, 30, 51714, 51714, 1743, 490, 364, 316, 6840, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.13584514345441545, "compression_ratio": 1.7282229965156795, "no_caption_prob": 5.955052074568812e-06}, {"id": 277, "seek": 90400, "start": 922.0, "end": 923.0, "text": " Right.", "tokens": [50364, 1485, 316, 6840, 307, 3928, 281, 362, 257, 588, 2416, 3753, 1859, 13, 50514, 50514, 2699, 76, 307, 767, 1238, 869, 570, 1080, 3753, 1859, 307, 4356, 11, 457, 754, 337, 2699, 76, 11, 309, 311, 370, 1359, 1951, 316, 6840, 13, 50764, 50764, 467, 311, 767, 920, 1238, 955, 445, 570, 316, 6840, 307, 4725, 1333, 295, 643, 281, 2906, 257, 3096, 1230, 295, 7690, 82, 5969, 309, 311, 257, 588, 11, 588, 2199, 2856, 13, 51264, 51264, 1779, 13, 51314, 51314, 407, 309, 311, 411, 11, 1392, 11, 754, 294, 264, 2199, 1389, 11, 309, 311, 920, 257, 688, 295, 3753, 1859, 13, 51464, 51464, 400, 291, 411, 11, 370, 718, 311, 352, 472, 26109, 3052, 13, 51614, 51614, 1012, 393, 321, 483, 544, 4514, 30, 51714, 51714, 1743, 490, 364, 316, 6840, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.13584514345441545, "compression_ratio": 1.7282229965156795, "no_caption_prob": 5.955052074568812e-06}, {"id": 278, "seek": 90400, "start": 923.0, "end": 926.0, "text": " So it's like, okay, even in the simple case, it's still a lot of surface area.", "tokens": [50364, 1485, 316, 6840, 307, 3928, 281, 362, 257, 588, 2416, 3753, 1859, 13, 50514, 50514, 2699, 76, 307, 767, 1238, 869, 570, 1080, 3753, 1859, 307, 4356, 11, 457, 754, 337, 2699, 76, 11, 309, 311, 370, 1359, 1951, 316, 6840, 13, 50764, 50764, 467, 311, 767, 920, 1238, 955, 445, 570, 316, 6840, 307, 4725, 1333, 295, 643, 281, 2906, 257, 3096, 1230, 295, 7690, 82, 5969, 309, 311, 257, 588, 11, 588, 2199, 2856, 13, 51264, 51264, 1779, 13, 51314, 51314, 407, 309, 311, 411, 11, 1392, 11, 754, 294, 264, 2199, 1389, 11, 309, 311, 920, 257, 688, 295, 3753, 1859, 13, 51464, 51464, 400, 291, 411, 11, 370, 718, 311, 352, 472, 26109, 3052, 13, 51614, 51614, 1012, 393, 321, 483, 544, 4514, 30, 51714, 51714, 1743, 490, 364, 316, 6840, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.13584514345441545, "compression_ratio": 1.7282229965156795, "no_caption_prob": 5.955052074568812e-06}, {"id": 279, "seek": 90400, "start": 926.0, "end": 929.0, "text": " And you like, so let's go one notch further.", "tokens": [50364, 1485, 316, 6840, 307, 3928, 281, 362, 257, 588, 2416, 3753, 1859, 13, 50514, 50514, 2699, 76, 307, 767, 1238, 869, 570, 1080, 3753, 1859, 307, 4356, 11, 457, 754, 337, 2699, 76, 11, 309, 311, 370, 1359, 1951, 316, 6840, 13, 50764, 50764, 467, 311, 767, 920, 1238, 955, 445, 570, 316, 6840, 307, 4725, 1333, 295, 643, 281, 2906, 257, 3096, 1230, 295, 7690, 82, 5969, 309, 311, 257, 588, 11, 588, 2199, 2856, 13, 51264, 51264, 1779, 13, 51314, 51314, 407, 309, 311, 411, 11, 1392, 11, 754, 294, 264, 2199, 1389, 11, 309, 311, 920, 257, 688, 295, 3753, 1859, 13, 51464, 51464, 400, 291, 411, 11, 370, 718, 311, 352, 472, 26109, 3052, 13, 51614, 51614, 1012, 393, 321, 483, 544, 4514, 30, 51714, 51714, 1743, 490, 364, 316, 6840, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.13584514345441545, "compression_ratio": 1.7282229965156795, "no_caption_prob": 5.955052074568812e-06}, {"id": 280, "seek": 90400, "start": 929.0, "end": 931.0, "text": " How can we get more safety?", "tokens": [50364, 1485, 316, 6840, 307, 3928, 281, 362, 257, 588, 2416, 3753, 1859, 13, 50514, 50514, 2699, 76, 307, 767, 1238, 869, 570, 1080, 3753, 1859, 307, 4356, 11, 457, 754, 337, 2699, 76, 11, 309, 311, 370, 1359, 1951, 316, 6840, 13, 50764, 50764, 467, 311, 767, 920, 1238, 955, 445, 570, 316, 6840, 307, 4725, 1333, 295, 643, 281, 2906, 257, 3096, 1230, 295, 7690, 82, 5969, 309, 311, 257, 588, 11, 588, 2199, 2856, 13, 51264, 51264, 1779, 13, 51314, 51314, 407, 309, 311, 411, 11, 1392, 11, 754, 294, 264, 2199, 1389, 11, 309, 311, 920, 257, 688, 295, 3753, 1859, 13, 51464, 51464, 400, 291, 411, 11, 370, 718, 311, 352, 472, 26109, 3052, 13, 51614, 51614, 1012, 393, 321, 483, 544, 4514, 30, 51714, 51714, 1743, 490, 364, 316, 6840, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.13584514345441545, "compression_ratio": 1.7282229965156795, "no_caption_prob": 5.955052074568812e-06}, {"id": 281, "seek": 90400, "start": 931.0, "end": 932.0, "text": " Like from an AST.", "tokens": [50364, 1485, 316, 6840, 307, 3928, 281, 362, 257, 588, 2416, 3753, 1859, 13, 50514, 50514, 2699, 76, 307, 767, 1238, 869, 570, 1080, 3753, 1859, 307, 4356, 11, 457, 754, 337, 2699, 76, 11, 309, 311, 370, 1359, 1951, 316, 6840, 13, 50764, 50764, 467, 311, 767, 920, 1238, 955, 445, 570, 316, 6840, 307, 4725, 1333, 295, 643, 281, 2906, 257, 3096, 1230, 295, 7690, 82, 5969, 309, 311, 257, 588, 11, 588, 2199, 2856, 13, 51264, 51264, 1779, 13, 51314, 51314, 407, 309, 311, 411, 11, 1392, 11, 754, 294, 264, 2199, 1389, 11, 309, 311, 920, 257, 688, 295, 3753, 1859, 13, 51464, 51464, 400, 291, 411, 11, 370, 718, 311, 352, 472, 26109, 3052, 13, 51614, 51614, 1012, 393, 321, 483, 544, 4514, 30, 51714, 51714, 1743, 490, 364, 316, 6840, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.13584514345441545, "compression_ratio": 1.7282229965156795, "no_caption_prob": 5.955052074568812e-06}, {"id": 282, "seek": 93200, "start": 932.0, "end": 937.0, "text": " It's like, well, we have to sort of protect it a little bit and we have to maybe process it a little bit.", "tokens": [50364, 467, 311, 411, 11, 731, 11, 321, 362, 281, 1333, 295, 2371, 309, 257, 707, 857, 293, 321, 362, 281, 1310, 1399, 309, 257, 707, 857, 13, 50614, 50614, 407, 586, 321, 434, 1242, 666, 264, 1859, 689, 321, 434, 767, 516, 281, 11865, 281, 312, 411, 257, 707, 857, 544, 295, 257, 31958, 4175, 13, 51014, 51014, 286, 603, 574, 412, 264, 316, 6840, 293, 360, 512, 1507, 13, 51114, 51114, 407, 264, 700, 551, 307, 411, 11, 731, 11, 393, 321, 483, 41596, 281, 1009, 589, 30, 51364, 51364, 1743, 498, 291, 434, 17746, 3089, 11, 498, 291, 528, 281, 722, 1228, 257, 2158, 293, 309, 311, 490, 257, 819, 10088, 11, 577, 360, 291, 411, 30, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.06445444696317844, "compression_ratio": 1.7255639097744362, "no_caption_prob": 1.241114478034433e-05}, {"id": 283, "seek": 93200, "start": 937.0, "end": 945.0, "text": " So now we're getting into the area where we're actually going to pretend to be like a little bit more of a compiler ourselves.", "tokens": [50364, 467, 311, 411, 11, 731, 11, 321, 362, 281, 1333, 295, 2371, 309, 257, 707, 857, 293, 321, 362, 281, 1310, 1399, 309, 257, 707, 857, 13, 50614, 50614, 407, 586, 321, 434, 1242, 666, 264, 1859, 689, 321, 434, 767, 516, 281, 11865, 281, 312, 411, 257, 707, 857, 544, 295, 257, 31958, 4175, 13, 51014, 51014, 286, 603, 574, 412, 264, 316, 6840, 293, 360, 512, 1507, 13, 51114, 51114, 407, 264, 700, 551, 307, 411, 11, 731, 11, 393, 321, 483, 41596, 281, 1009, 589, 30, 51364, 51364, 1743, 498, 291, 434, 17746, 3089, 11, 498, 291, 528, 281, 722, 1228, 257, 2158, 293, 309, 311, 490, 257, 819, 10088, 11, 577, 360, 291, 411, 30, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.06445444696317844, "compression_ratio": 1.7255639097744362, "no_caption_prob": 1.241114478034433e-05}, {"id": 284, "seek": 93200, "start": 945.0, "end": 947.0, "text": " I'll look at the AST and do some stuff.", "tokens": [50364, 467, 311, 411, 11, 731, 11, 321, 362, 281, 1333, 295, 2371, 309, 257, 707, 857, 293, 321, 362, 281, 1310, 1399, 309, 257, 707, 857, 13, 50614, 50614, 407, 586, 321, 434, 1242, 666, 264, 1859, 689, 321, 434, 767, 516, 281, 11865, 281, 312, 411, 257, 707, 857, 544, 295, 257, 31958, 4175, 13, 51014, 51014, 286, 603, 574, 412, 264, 316, 6840, 293, 360, 512, 1507, 13, 51114, 51114, 407, 264, 700, 551, 307, 411, 11, 731, 11, 393, 321, 483, 41596, 281, 1009, 589, 30, 51364, 51364, 1743, 498, 291, 434, 17746, 3089, 11, 498, 291, 528, 281, 722, 1228, 257, 2158, 293, 309, 311, 490, 257, 819, 10088, 11, 577, 360, 291, 411, 30, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.06445444696317844, "compression_ratio": 1.7255639097744362, "no_caption_prob": 1.241114478034433e-05}, {"id": 285, "seek": 93200, "start": 947.0, "end": 952.0, "text": " So the first thing is like, well, can we get imports to always work?", "tokens": [50364, 467, 311, 411, 11, 731, 11, 321, 362, 281, 1333, 295, 2371, 309, 257, 707, 857, 293, 321, 362, 281, 1310, 1399, 309, 257, 707, 857, 13, 50614, 50614, 407, 586, 321, 434, 1242, 666, 264, 1859, 689, 321, 434, 767, 516, 281, 11865, 281, 312, 411, 257, 707, 857, 544, 295, 257, 31958, 4175, 13, 51014, 51014, 286, 603, 574, 412, 264, 316, 6840, 293, 360, 512, 1507, 13, 51114, 51114, 407, 264, 700, 551, 307, 411, 11, 731, 11, 393, 321, 483, 41596, 281, 1009, 589, 30, 51364, 51364, 1743, 498, 291, 434, 17746, 3089, 11, 498, 291, 528, 281, 722, 1228, 257, 2158, 293, 309, 311, 490, 257, 819, 10088, 11, 577, 360, 291, 411, 30, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.06445444696317844, "compression_ratio": 1.7255639097744362, "no_caption_prob": 1.241114478034433e-05}, {"id": 286, "seek": 93200, "start": 952.0, "end": 960.0, "text": " Like if you're generating code, if you want to start using a value and it's from a different module, how do you like?", "tokens": [50364, 467, 311, 411, 11, 731, 11, 321, 362, 281, 1333, 295, 2371, 309, 257, 707, 857, 293, 321, 362, 281, 1310, 1399, 309, 257, 707, 857, 13, 50614, 50614, 407, 586, 321, 434, 1242, 666, 264, 1859, 689, 321, 434, 767, 516, 281, 11865, 281, 312, 411, 257, 707, 857, 544, 295, 257, 31958, 4175, 13, 51014, 51014, 286, 603, 574, 412, 264, 316, 6840, 293, 360, 512, 1507, 13, 51114, 51114, 407, 264, 700, 551, 307, 411, 11, 731, 11, 393, 321, 483, 41596, 281, 1009, 589, 30, 51364, 51364, 1743, 498, 291, 434, 17746, 3089, 11, 498, 291, 528, 281, 722, 1228, 257, 2158, 293, 309, 311, 490, 257, 819, 10088, 11, 577, 360, 291, 411, 30, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.06445444696317844, "compression_ratio": 1.7255639097744362, "no_caption_prob": 1.241114478034433e-05}, {"id": 287, "seek": 96000, "start": 960.0, "end": 976.0, "text": " It's like, well, before you have to think like, okay, I'm generating and you like this especially happened for the Elm GQL thing that I've been working on is like, okay, this file is going to reference that code and I'm going to like call this value or whatever.", "tokens": [50364, 467, 311, 411, 11, 731, 11, 949, 291, 362, 281, 519, 411, 11, 1392, 11, 286, 478, 17746, 293, 291, 411, 341, 2318, 2011, 337, 264, 2699, 76, 460, 13695, 551, 300, 286, 600, 668, 1364, 322, 307, 411, 11, 1392, 11, 341, 3991, 307, 516, 281, 6408, 300, 3089, 293, 286, 478, 516, 281, 411, 818, 341, 2158, 420, 2035, 13, 51164, 51164, 286, 914, 11, 411, 11, 1392, 11, 731, 11, 286, 478, 516, 281, 652, 264, 818, 293, 550, 286, 478, 14759, 293, 309, 311, 3217, 661, 644, 295, 264, 3089, 3096, 13, 51414, 51414, 286, 478, 516, 281, 652, 988, 300, 309, 311, 25524, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.14991100277520913, "compression_ratio": 1.8205128205128205, "no_caption_prob": 1.3845536159351468e-05}, {"id": 288, "seek": 96000, "start": 976.0, "end": 981.0, "text": " I mean, like, okay, well, I'm going to make the call and then I'm separately and it's total other part of the code base.", "tokens": [50364, 467, 311, 411, 11, 731, 11, 949, 291, 362, 281, 519, 411, 11, 1392, 11, 286, 478, 17746, 293, 291, 411, 341, 2318, 2011, 337, 264, 2699, 76, 460, 13695, 551, 300, 286, 600, 668, 1364, 322, 307, 411, 11, 1392, 11, 341, 3991, 307, 516, 281, 6408, 300, 3089, 293, 286, 478, 516, 281, 411, 818, 341, 2158, 420, 2035, 13, 51164, 51164, 286, 914, 11, 411, 11, 1392, 11, 731, 11, 286, 478, 516, 281, 652, 264, 818, 293, 550, 286, 478, 14759, 293, 309, 311, 3217, 661, 644, 295, 264, 3089, 3096, 13, 51414, 51414, 286, 478, 516, 281, 652, 988, 300, 309, 311, 25524, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.14991100277520913, "compression_ratio": 1.8205128205128205, "no_caption_prob": 1.3845536159351468e-05}, {"id": 289, "seek": 96000, "start": 981.0, "end": 983.0, "text": " I'm going to make sure that it's imported.", "tokens": [50364, 467, 311, 411, 11, 731, 11, 949, 291, 362, 281, 519, 411, 11, 1392, 11, 286, 478, 17746, 293, 291, 411, 341, 2318, 2011, 337, 264, 2699, 76, 460, 13695, 551, 300, 286, 600, 668, 1364, 322, 307, 411, 11, 1392, 11, 341, 3991, 307, 516, 281, 6408, 300, 3089, 293, 286, 478, 516, 281, 411, 818, 341, 2158, 420, 2035, 13, 51164, 51164, 286, 914, 11, 411, 11, 1392, 11, 731, 11, 286, 478, 516, 281, 652, 264, 818, 293, 550, 286, 478, 14759, 293, 309, 311, 3217, 661, 644, 295, 264, 3089, 3096, 13, 51414, 51414, 286, 478, 516, 281, 652, 988, 300, 309, 311, 25524, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.14991100277520913, "compression_ratio": 1.8205128205128205, "no_caption_prob": 1.3845536159351468e-05}, {"id": 290, "seek": 98300, "start": 983.0, "end": 992.0, "text": " And you sort of sit there and you're like, well, but that's kind of dumb because I already like the AST has that information.", "tokens": [50364, 400, 291, 1333, 295, 1394, 456, 293, 291, 434, 411, 11, 731, 11, 457, 300, 311, 733, 295, 10316, 570, 286, 1217, 411, 264, 316, 6840, 575, 300, 1589, 13, 50814, 50814, 467, 311, 406, 754, 411, 300, 7633, 11, 558, 30, 50914, 50914, 407, 393, 286, 445, 949, 22407, 11, 393, 286, 445, 4444, 411, 437, 4190, 630, 291, 764, 30, 51164, 51164, 286, 478, 516, 281, 6552, 300, 436, 2514, 293, 286, 478, 445, 516, 281, 974, 552, 13, 51314, 51314, 407, 309, 311, 411, 11, 1392, 11, 300, 311, 472, 26109, 20344, 813, 364, 316, 6840, 13, 51414, 51414, 492, 600, 18846, 527, 316, 6840, 257, 707, 857, 281, 976, 505, 512, 4514, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.0767960745441027, "compression_ratio": 1.6363636363636365, "no_caption_prob": 1.7230931916856207e-05}, {"id": 291, "seek": 98300, "start": 992.0, "end": 994.0, "text": " It's not even like that hidden, right?", "tokens": [50364, 400, 291, 1333, 295, 1394, 456, 293, 291, 434, 411, 11, 731, 11, 457, 300, 311, 733, 295, 10316, 570, 286, 1217, 411, 264, 316, 6840, 575, 300, 1589, 13, 50814, 50814, 467, 311, 406, 754, 411, 300, 7633, 11, 558, 30, 50914, 50914, 407, 393, 286, 445, 949, 22407, 11, 393, 286, 445, 4444, 411, 437, 4190, 630, 291, 764, 30, 51164, 51164, 286, 478, 516, 281, 6552, 300, 436, 2514, 293, 286, 478, 445, 516, 281, 974, 552, 13, 51314, 51314, 407, 309, 311, 411, 11, 1392, 11, 300, 311, 472, 26109, 20344, 813, 364, 316, 6840, 13, 51414, 51414, 492, 600, 18846, 527, 316, 6840, 257, 707, 857, 281, 976, 505, 512, 4514, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.0767960745441027, "compression_ratio": 1.6363636363636365, "no_caption_prob": 1.7230931916856207e-05}, {"id": 292, "seek": 98300, "start": 994.0, "end": 999.0, "text": " So can I just before rendering, can I just grab like what values did you use?", "tokens": [50364, 400, 291, 1333, 295, 1394, 456, 293, 291, 434, 411, 11, 731, 11, 457, 300, 311, 733, 295, 10316, 570, 286, 1217, 411, 264, 316, 6840, 575, 300, 1589, 13, 50814, 50814, 467, 311, 406, 754, 411, 300, 7633, 11, 558, 30, 50914, 50914, 407, 393, 286, 445, 949, 22407, 11, 393, 286, 445, 4444, 411, 437, 4190, 630, 291, 764, 30, 51164, 51164, 286, 478, 516, 281, 6552, 300, 436, 2514, 293, 286, 478, 445, 516, 281, 974, 552, 13, 51314, 51314, 407, 309, 311, 411, 11, 1392, 11, 300, 311, 472, 26109, 20344, 813, 364, 316, 6840, 13, 51414, 51414, 492, 600, 18846, 527, 316, 6840, 257, 707, 857, 281, 976, 505, 512, 4514, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.0767960745441027, "compression_ratio": 1.6363636363636365, "no_caption_prob": 1.7230931916856207e-05}, {"id": 293, "seek": 98300, "start": 999.0, "end": 1002.0, "text": " I'm going to assume that they exist and I'm just going to import them.", "tokens": [50364, 400, 291, 1333, 295, 1394, 456, 293, 291, 434, 411, 11, 731, 11, 457, 300, 311, 733, 295, 10316, 570, 286, 1217, 411, 264, 316, 6840, 575, 300, 1589, 13, 50814, 50814, 467, 311, 406, 754, 411, 300, 7633, 11, 558, 30, 50914, 50914, 407, 393, 286, 445, 949, 22407, 11, 393, 286, 445, 4444, 411, 437, 4190, 630, 291, 764, 30, 51164, 51164, 286, 478, 516, 281, 6552, 300, 436, 2514, 293, 286, 478, 445, 516, 281, 974, 552, 13, 51314, 51314, 407, 309, 311, 411, 11, 1392, 11, 300, 311, 472, 26109, 20344, 813, 364, 316, 6840, 13, 51414, 51414, 492, 600, 18846, 527, 316, 6840, 257, 707, 857, 281, 976, 505, 512, 4514, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.0767960745441027, "compression_ratio": 1.6363636363636365, "no_caption_prob": 1.7230931916856207e-05}, {"id": 294, "seek": 98300, "start": 1002.0, "end": 1004.0, "text": " So it's like, okay, that's one notch farther than an AST.", "tokens": [50364, 400, 291, 1333, 295, 1394, 456, 293, 291, 434, 411, 11, 731, 11, 457, 300, 311, 733, 295, 10316, 570, 286, 1217, 411, 264, 316, 6840, 575, 300, 1589, 13, 50814, 50814, 467, 311, 406, 754, 411, 300, 7633, 11, 558, 30, 50914, 50914, 407, 393, 286, 445, 949, 22407, 11, 393, 286, 445, 4444, 411, 437, 4190, 630, 291, 764, 30, 51164, 51164, 286, 478, 516, 281, 6552, 300, 436, 2514, 293, 286, 478, 445, 516, 281, 974, 552, 13, 51314, 51314, 407, 309, 311, 411, 11, 1392, 11, 300, 311, 472, 26109, 20344, 813, 364, 316, 6840, 13, 51414, 51414, 492, 600, 18846, 527, 316, 6840, 257, 707, 857, 281, 976, 505, 512, 4514, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.0767960745441027, "compression_ratio": 1.6363636363636365, "no_caption_prob": 1.7230931916856207e-05}, {"id": 295, "seek": 98300, "start": 1004.0, "end": 1007.0, "text": " We've processed our AST a little bit to give us some safety.", "tokens": [50364, 400, 291, 1333, 295, 1394, 456, 293, 291, 434, 411, 11, 731, 11, 457, 300, 311, 733, 295, 10316, 570, 286, 1217, 411, 264, 316, 6840, 575, 300, 1589, 13, 50814, 50814, 467, 311, 406, 754, 411, 300, 7633, 11, 558, 30, 50914, 50914, 407, 393, 286, 445, 949, 22407, 11, 393, 286, 445, 4444, 411, 437, 4190, 630, 291, 764, 30, 51164, 51164, 286, 478, 516, 281, 6552, 300, 436, 2514, 293, 286, 478, 445, 516, 281, 974, 552, 13, 51314, 51314, 407, 309, 311, 411, 11, 1392, 11, 300, 311, 472, 26109, 20344, 813, 364, 316, 6840, 13, 51414, 51414, 492, 600, 18846, 527, 316, 6840, 257, 707, 857, 281, 976, 505, 512, 4514, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.0767960745441027, "compression_ratio": 1.6363636363636365, "no_caption_prob": 1.7230931916856207e-05}, {"id": 296, "seek": 100700, "start": 1007.0, "end": 1013.0, "text": " We have this thing of like, you can't screw up your imports.", "tokens": [50364, 492, 362, 341, 551, 295, 411, 11, 291, 393, 380, 5630, 493, 428, 41596, 13, 50664, 50664, 1743, 300, 311, 1627, 13, 50714, 50714, 1033, 11, 457, 293, 411, 11, 577, 393, 321, 352, 20344, 30, 50814, 50814, 400, 341, 307, 689, 721, 1319, 13, 50914, 50914, 1743, 689, 286, 519, 264, 2141, 11269, 337, 2699, 76, 383, 8799, 733, 295, 1361, 689, 286, 519, 437, 1669, 309, 709, 544, 4420, 13, 51264, 51264, 1743, 498, 286, 576, 362, 5936, 456, 11, 286, 519, 309, 576, 362, 668, 1238, 1627, 13, 51464, 51464, 583, 456, 311, 257, 688, 544, 2158, 920, 322, 264, 3199, 11, 597, 307, 411, 11, 1392, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.11036864570949388, "compression_ratio": 1.6518218623481782, "no_caption_prob": 4.539491419564001e-05}, {"id": 297, "seek": 100700, "start": 1013.0, "end": 1014.0, "text": " Like that's cool.", "tokens": [50364, 492, 362, 341, 551, 295, 411, 11, 291, 393, 380, 5630, 493, 428, 41596, 13, 50664, 50664, 1743, 300, 311, 1627, 13, 50714, 50714, 1033, 11, 457, 293, 411, 11, 577, 393, 321, 352, 20344, 30, 50814, 50814, 400, 341, 307, 689, 721, 1319, 13, 50914, 50914, 1743, 689, 286, 519, 264, 2141, 11269, 337, 2699, 76, 383, 8799, 733, 295, 1361, 689, 286, 519, 437, 1669, 309, 709, 544, 4420, 13, 51264, 51264, 1743, 498, 286, 576, 362, 5936, 456, 11, 286, 519, 309, 576, 362, 668, 1238, 1627, 13, 51464, 51464, 583, 456, 311, 257, 688, 544, 2158, 920, 322, 264, 3199, 11, 597, 307, 411, 11, 1392, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.11036864570949388, "compression_ratio": 1.6518218623481782, "no_caption_prob": 4.539491419564001e-05}, {"id": 298, "seek": 100700, "start": 1014.0, "end": 1016.0, "text": " Okay, but and like, how can we go farther?", "tokens": [50364, 492, 362, 341, 551, 295, 411, 11, 291, 393, 380, 5630, 493, 428, 41596, 13, 50664, 50664, 1743, 300, 311, 1627, 13, 50714, 50714, 1033, 11, 457, 293, 411, 11, 577, 393, 321, 352, 20344, 30, 50814, 50814, 400, 341, 307, 689, 721, 1319, 13, 50914, 50914, 1743, 689, 286, 519, 264, 2141, 11269, 337, 2699, 76, 383, 8799, 733, 295, 1361, 689, 286, 519, 437, 1669, 309, 709, 544, 4420, 13, 51264, 51264, 1743, 498, 286, 576, 362, 5936, 456, 11, 286, 519, 309, 576, 362, 668, 1238, 1627, 13, 51464, 51464, 583, 456, 311, 257, 688, 544, 2158, 920, 322, 264, 3199, 11, 597, 307, 411, 11, 1392, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.11036864570949388, "compression_ratio": 1.6518218623481782, "no_caption_prob": 4.539491419564001e-05}, {"id": 299, "seek": 100700, "start": 1016.0, "end": 1018.0, "text": " And this is where things change.", "tokens": [50364, 492, 362, 341, 551, 295, 411, 11, 291, 393, 380, 5630, 493, 428, 41596, 13, 50664, 50664, 1743, 300, 311, 1627, 13, 50714, 50714, 1033, 11, 457, 293, 411, 11, 577, 393, 321, 352, 20344, 30, 50814, 50814, 400, 341, 307, 689, 721, 1319, 13, 50914, 50914, 1743, 689, 286, 519, 264, 2141, 11269, 337, 2699, 76, 383, 8799, 733, 295, 1361, 689, 286, 519, 437, 1669, 309, 709, 544, 4420, 13, 51264, 51264, 1743, 498, 286, 576, 362, 5936, 456, 11, 286, 519, 309, 576, 362, 668, 1238, 1627, 13, 51464, 51464, 583, 456, 311, 257, 688, 544, 2158, 920, 322, 264, 3199, 11, 597, 307, 411, 11, 1392, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.11036864570949388, "compression_ratio": 1.6518218623481782, "no_caption_prob": 4.539491419564001e-05}, {"id": 300, "seek": 100700, "start": 1018.0, "end": 1025.0, "text": " Like where I think the key insight for Elm Cogen kind of came where I think what makes it much more useful.", "tokens": [50364, 492, 362, 341, 551, 295, 411, 11, 291, 393, 380, 5630, 493, 428, 41596, 13, 50664, 50664, 1743, 300, 311, 1627, 13, 50714, 50714, 1033, 11, 457, 293, 411, 11, 577, 393, 321, 352, 20344, 30, 50814, 50814, 400, 341, 307, 689, 721, 1319, 13, 50914, 50914, 1743, 689, 286, 519, 264, 2141, 11269, 337, 2699, 76, 383, 8799, 733, 295, 1361, 689, 286, 519, 437, 1669, 309, 709, 544, 4420, 13, 51264, 51264, 1743, 498, 286, 576, 362, 5936, 456, 11, 286, 519, 309, 576, 362, 668, 1238, 1627, 13, 51464, 51464, 583, 456, 311, 257, 688, 544, 2158, 920, 322, 264, 3199, 11, 597, 307, 411, 11, 1392, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.11036864570949388, "compression_ratio": 1.6518218623481782, "no_caption_prob": 4.539491419564001e-05}, {"id": 301, "seek": 100700, "start": 1025.0, "end": 1029.0, "text": " Like if I would have stopped there, I think it would have been pretty cool.", "tokens": [50364, 492, 362, 341, 551, 295, 411, 11, 291, 393, 380, 5630, 493, 428, 41596, 13, 50664, 50664, 1743, 300, 311, 1627, 13, 50714, 50714, 1033, 11, 457, 293, 411, 11, 577, 393, 321, 352, 20344, 30, 50814, 50814, 400, 341, 307, 689, 721, 1319, 13, 50914, 50914, 1743, 689, 286, 519, 264, 2141, 11269, 337, 2699, 76, 383, 8799, 733, 295, 1361, 689, 286, 519, 437, 1669, 309, 709, 544, 4420, 13, 51264, 51264, 1743, 498, 286, 576, 362, 5936, 456, 11, 286, 519, 309, 576, 362, 668, 1238, 1627, 13, 51464, 51464, 583, 456, 311, 257, 688, 544, 2158, 920, 322, 264, 3199, 11, 597, 307, 411, 11, 1392, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.11036864570949388, "compression_ratio": 1.6518218623481782, "no_caption_prob": 4.539491419564001e-05}, {"id": 302, "seek": 100700, "start": 1029.0, "end": 1034.0, "text": " But there's a lot more value still on the table, which is like, okay.", "tokens": [50364, 492, 362, 341, 551, 295, 411, 11, 291, 393, 380, 5630, 493, 428, 41596, 13, 50664, 50664, 1743, 300, 311, 1627, 13, 50714, 50714, 1033, 11, 457, 293, 411, 11, 577, 393, 321, 352, 20344, 30, 50814, 50814, 400, 341, 307, 689, 721, 1319, 13, 50914, 50914, 1743, 689, 286, 519, 264, 2141, 11269, 337, 2699, 76, 383, 8799, 733, 295, 1361, 689, 286, 519, 437, 1669, 309, 709, 544, 4420, 13, 51264, 51264, 1743, 498, 286, 576, 362, 5936, 456, 11, 286, 519, 309, 576, 362, 668, 1238, 1627, 13, 51464, 51464, 583, 456, 311, 257, 688, 544, 2158, 920, 322, 264, 3199, 11, 597, 307, 411, 11, 1392, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.11036864570949388, "compression_ratio": 1.6518218623481782, "no_caption_prob": 4.539491419564001e-05}, {"id": 303, "seek": 103400, "start": 1034.0, "end": 1039.0, "text": " I want to call a function from another module.", "tokens": [50364, 286, 528, 281, 818, 257, 2445, 490, 1071, 10088, 13, 50614, 50614, 1610, 286, 528, 281, 8460, 13, 50714, 50714, 286, 362, 281, 312, 5026, 570, 309, 311, 411, 321, 434, 1242, 666, 49834, 2117, 689, 309, 311, 411, 11, 1392, 11, 366, 291, 1417, 466, 264, 3089, 30, 51014, 51014, 2014, 291, 1417, 466, 264, 3089, 300, 23815, 264, 3089, 30, 51114, 51114, 865, 13, 51164, 51164, 509, 643, 281, 312, 544, 19616, 13, 51264, 51264, 865, 13, 51314, 51314, 407, 286, 528, 281, 8460, 257, 2522, 295, 3089, 300, 5498, 257, 2445, 490, 1071, 10088, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.15751135583017387, "compression_ratio": 1.8883248730964468, "no_caption_prob": 6.92186804371886e-05}, {"id": 304, "seek": 103400, "start": 1039.0, "end": 1041.0, "text": " Or I want to generate.", "tokens": [50364, 286, 528, 281, 818, 257, 2445, 490, 1071, 10088, 13, 50614, 50614, 1610, 286, 528, 281, 8460, 13, 50714, 50714, 286, 362, 281, 312, 5026, 570, 309, 311, 411, 321, 434, 1242, 666, 49834, 2117, 689, 309, 311, 411, 11, 1392, 11, 366, 291, 1417, 466, 264, 3089, 30, 51014, 51014, 2014, 291, 1417, 466, 264, 3089, 300, 23815, 264, 3089, 30, 51114, 51114, 865, 13, 51164, 51164, 509, 643, 281, 312, 544, 19616, 13, 51264, 51264, 865, 13, 51314, 51314, 407, 286, 528, 281, 8460, 257, 2522, 295, 3089, 300, 5498, 257, 2445, 490, 1071, 10088, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.15751135583017387, "compression_ratio": 1.8883248730964468, "no_caption_prob": 6.92186804371886e-05}, {"id": 305, "seek": 103400, "start": 1041.0, "end": 1047.0, "text": " I have to be careful because it's like we're getting into inception land where it's like, okay, are you talking about the code?", "tokens": [50364, 286, 528, 281, 818, 257, 2445, 490, 1071, 10088, 13, 50614, 50614, 1610, 286, 528, 281, 8460, 13, 50714, 50714, 286, 362, 281, 312, 5026, 570, 309, 311, 411, 321, 434, 1242, 666, 49834, 2117, 689, 309, 311, 411, 11, 1392, 11, 366, 291, 1417, 466, 264, 3089, 30, 51014, 51014, 2014, 291, 1417, 466, 264, 3089, 300, 23815, 264, 3089, 30, 51114, 51114, 865, 13, 51164, 51164, 509, 643, 281, 312, 544, 19616, 13, 51264, 51264, 865, 13, 51314, 51314, 407, 286, 528, 281, 8460, 257, 2522, 295, 3089, 300, 5498, 257, 2445, 490, 1071, 10088, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.15751135583017387, "compression_ratio": 1.8883248730964468, "no_caption_prob": 6.92186804371886e-05}, {"id": 306, "seek": 103400, "start": 1047.0, "end": 1049.0, "text": " Are you talking about the code that generates the code?", "tokens": [50364, 286, 528, 281, 818, 257, 2445, 490, 1071, 10088, 13, 50614, 50614, 1610, 286, 528, 281, 8460, 13, 50714, 50714, 286, 362, 281, 312, 5026, 570, 309, 311, 411, 321, 434, 1242, 666, 49834, 2117, 689, 309, 311, 411, 11, 1392, 11, 366, 291, 1417, 466, 264, 3089, 30, 51014, 51014, 2014, 291, 1417, 466, 264, 3089, 300, 23815, 264, 3089, 30, 51114, 51114, 865, 13, 51164, 51164, 509, 643, 281, 312, 544, 19616, 13, 51264, 51264, 865, 13, 51314, 51314, 407, 286, 528, 281, 8460, 257, 2522, 295, 3089, 300, 5498, 257, 2445, 490, 1071, 10088, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.15751135583017387, "compression_ratio": 1.8883248730964468, "no_caption_prob": 6.92186804371886e-05}, {"id": 307, "seek": 103400, "start": 1049.0, "end": 1050.0, "text": " Yeah.", "tokens": [50364, 286, 528, 281, 818, 257, 2445, 490, 1071, 10088, 13, 50614, 50614, 1610, 286, 528, 281, 8460, 13, 50714, 50714, 286, 362, 281, 312, 5026, 570, 309, 311, 411, 321, 434, 1242, 666, 49834, 2117, 689, 309, 311, 411, 11, 1392, 11, 366, 291, 1417, 466, 264, 3089, 30, 51014, 51014, 2014, 291, 1417, 466, 264, 3089, 300, 23815, 264, 3089, 30, 51114, 51114, 865, 13, 51164, 51164, 509, 643, 281, 312, 544, 19616, 13, 51264, 51264, 865, 13, 51314, 51314, 407, 286, 528, 281, 8460, 257, 2522, 295, 3089, 300, 5498, 257, 2445, 490, 1071, 10088, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.15751135583017387, "compression_ratio": 1.8883248730964468, "no_caption_prob": 6.92186804371886e-05}, {"id": 308, "seek": 103400, "start": 1050.0, "end": 1052.0, "text": " You need to be more meta.", "tokens": [50364, 286, 528, 281, 818, 257, 2445, 490, 1071, 10088, 13, 50614, 50614, 1610, 286, 528, 281, 8460, 13, 50714, 50714, 286, 362, 281, 312, 5026, 570, 309, 311, 411, 321, 434, 1242, 666, 49834, 2117, 689, 309, 311, 411, 11, 1392, 11, 366, 291, 1417, 466, 264, 3089, 30, 51014, 51014, 2014, 291, 1417, 466, 264, 3089, 300, 23815, 264, 3089, 30, 51114, 51114, 865, 13, 51164, 51164, 509, 643, 281, 312, 544, 19616, 13, 51264, 51264, 865, 13, 51314, 51314, 407, 286, 528, 281, 8460, 257, 2522, 295, 3089, 300, 5498, 257, 2445, 490, 1071, 10088, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.15751135583017387, "compression_ratio": 1.8883248730964468, "no_caption_prob": 6.92186804371886e-05}, {"id": 309, "seek": 103400, "start": 1052.0, "end": 1053.0, "text": " Yeah.", "tokens": [50364, 286, 528, 281, 818, 257, 2445, 490, 1071, 10088, 13, 50614, 50614, 1610, 286, 528, 281, 8460, 13, 50714, 50714, 286, 362, 281, 312, 5026, 570, 309, 311, 411, 321, 434, 1242, 666, 49834, 2117, 689, 309, 311, 411, 11, 1392, 11, 366, 291, 1417, 466, 264, 3089, 30, 51014, 51014, 2014, 291, 1417, 466, 264, 3089, 300, 23815, 264, 3089, 30, 51114, 51114, 865, 13, 51164, 51164, 509, 643, 281, 312, 544, 19616, 13, 51264, 51264, 865, 13, 51314, 51314, 407, 286, 528, 281, 8460, 257, 2522, 295, 3089, 300, 5498, 257, 2445, 490, 1071, 10088, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.15751135583017387, "compression_ratio": 1.8883248730964468, "no_caption_prob": 6.92186804371886e-05}, {"id": 310, "seek": 103400, "start": 1053.0, "end": 1059.0, "text": " So I want to generate a piece of code that calls a function from another module.", "tokens": [50364, 286, 528, 281, 818, 257, 2445, 490, 1071, 10088, 13, 50614, 50614, 1610, 286, 528, 281, 8460, 13, 50714, 50714, 286, 362, 281, 312, 5026, 570, 309, 311, 411, 321, 434, 1242, 666, 49834, 2117, 689, 309, 311, 411, 11, 1392, 11, 366, 291, 1417, 466, 264, 3089, 30, 51014, 51014, 2014, 291, 1417, 466, 264, 3089, 300, 23815, 264, 3089, 30, 51114, 51114, 865, 13, 51164, 51164, 509, 643, 281, 312, 544, 19616, 13, 51264, 51264, 865, 13, 51314, 51314, 407, 286, 528, 281, 8460, 257, 2522, 295, 3089, 300, 5498, 257, 2445, 490, 1071, 10088, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.15751135583017387, "compression_ratio": 1.8883248730964468, "no_caption_prob": 6.92186804371886e-05}, {"id": 311, "seek": 105900, "start": 1059.0, "end": 1064.0, "text": " Well, in AST land, what you would normally do is you'd have a concept called apply, right?", "tokens": [50364, 1042, 11, 294, 316, 6840, 2117, 11, 437, 291, 576, 5646, 360, 307, 291, 1116, 362, 257, 3410, 1219, 3079, 11, 558, 30, 50614, 50614, 3013, 307, 411, 291, 584, 11, 286, 478, 516, 281, 3079, 613, 12869, 281, 341, 2158, 13, 50864, 50864, 400, 264, 12869, 294, 2674, 307, 411, 257, 1329, 13, 51014, 51014, 467, 311, 411, 364, 1269, 4590, 1329, 295, 411, 11, 286, 478, 516, 281, 411, 3079, 1783, 1230, 295, 12869, 281, 341, 13, 51264, 51264, 407, 264, 700, 551, 291, 1116, 1333, 295, 352, 281, 307, 291, 434, 411, 11, 1392, 11, 731, 11, 457, 286, 458, 341, 2445, 2516, 732, 12869, 13, 51564, 51564, 407, 286, 478, 516, 281, 16945, 2464, 257, 707, 36133, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.07141347158522833, "compression_ratio": 1.8046875, "no_caption_prob": 8.480122778564692e-05}, {"id": 312, "seek": 105900, "start": 1064.0, "end": 1069.0, "text": " Which is like you say, I'm going to apply these arguments to this value.", "tokens": [50364, 1042, 11, 294, 316, 6840, 2117, 11, 437, 291, 576, 5646, 360, 307, 291, 1116, 362, 257, 3410, 1219, 3079, 11, 558, 30, 50614, 50614, 3013, 307, 411, 291, 584, 11, 286, 478, 516, 281, 3079, 613, 12869, 281, 341, 2158, 13, 50864, 50864, 400, 264, 12869, 294, 2674, 307, 411, 257, 1329, 13, 51014, 51014, 467, 311, 411, 364, 1269, 4590, 1329, 295, 411, 11, 286, 478, 516, 281, 411, 3079, 1783, 1230, 295, 12869, 281, 341, 13, 51264, 51264, 407, 264, 700, 551, 291, 1116, 1333, 295, 352, 281, 307, 291, 434, 411, 11, 1392, 11, 731, 11, 457, 286, 458, 341, 2445, 2516, 732, 12869, 13, 51564, 51564, 407, 286, 478, 516, 281, 16945, 2464, 257, 707, 36133, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.07141347158522833, "compression_ratio": 1.8046875, "no_caption_prob": 8.480122778564692e-05}, {"id": 313, "seek": 105900, "start": 1069.0, "end": 1072.0, "text": " And the arguments in general is like a list.", "tokens": [50364, 1042, 11, 294, 316, 6840, 2117, 11, 437, 291, 576, 5646, 360, 307, 291, 1116, 362, 257, 3410, 1219, 3079, 11, 558, 30, 50614, 50614, 3013, 307, 411, 291, 584, 11, 286, 478, 516, 281, 3079, 613, 12869, 281, 341, 2158, 13, 50864, 50864, 400, 264, 12869, 294, 2674, 307, 411, 257, 1329, 13, 51014, 51014, 467, 311, 411, 364, 1269, 4590, 1329, 295, 411, 11, 286, 478, 516, 281, 411, 3079, 1783, 1230, 295, 12869, 281, 341, 13, 51264, 51264, 407, 264, 700, 551, 291, 1116, 1333, 295, 352, 281, 307, 291, 434, 411, 11, 1392, 11, 731, 11, 457, 286, 458, 341, 2445, 2516, 732, 12869, 13, 51564, 51564, 407, 286, 478, 516, 281, 16945, 2464, 257, 707, 36133, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.07141347158522833, "compression_ratio": 1.8046875, "no_caption_prob": 8.480122778564692e-05}, {"id": 314, "seek": 105900, "start": 1072.0, "end": 1077.0, "text": " It's like an open ended list of like, I'm going to like apply X number of arguments to this.", "tokens": [50364, 1042, 11, 294, 316, 6840, 2117, 11, 437, 291, 576, 5646, 360, 307, 291, 1116, 362, 257, 3410, 1219, 3079, 11, 558, 30, 50614, 50614, 3013, 307, 411, 291, 584, 11, 286, 478, 516, 281, 3079, 613, 12869, 281, 341, 2158, 13, 50864, 50864, 400, 264, 12869, 294, 2674, 307, 411, 257, 1329, 13, 51014, 51014, 467, 311, 411, 364, 1269, 4590, 1329, 295, 411, 11, 286, 478, 516, 281, 411, 3079, 1783, 1230, 295, 12869, 281, 341, 13, 51264, 51264, 407, 264, 700, 551, 291, 1116, 1333, 295, 352, 281, 307, 291, 434, 411, 11, 1392, 11, 731, 11, 457, 286, 458, 341, 2445, 2516, 732, 12869, 13, 51564, 51564, 407, 286, 478, 516, 281, 16945, 2464, 257, 707, 36133, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.07141347158522833, "compression_ratio": 1.8046875, "no_caption_prob": 8.480122778564692e-05}, {"id": 315, "seek": 105900, "start": 1077.0, "end": 1083.0, "text": " So the first thing you'd sort of go to is you're like, okay, well, but I know this function takes two arguments.", "tokens": [50364, 1042, 11, 294, 316, 6840, 2117, 11, 437, 291, 576, 5646, 360, 307, 291, 1116, 362, 257, 3410, 1219, 3079, 11, 558, 30, 50614, 50614, 3013, 307, 411, 291, 584, 11, 286, 478, 516, 281, 3079, 613, 12869, 281, 341, 2158, 13, 50864, 50864, 400, 264, 12869, 294, 2674, 307, 411, 257, 1329, 13, 51014, 51014, 467, 311, 411, 364, 1269, 4590, 1329, 295, 411, 11, 286, 478, 516, 281, 411, 3079, 1783, 1230, 295, 12869, 281, 341, 13, 51264, 51264, 407, 264, 700, 551, 291, 1116, 1333, 295, 352, 281, 307, 291, 434, 411, 11, 1392, 11, 731, 11, 457, 286, 458, 341, 2445, 2516, 732, 12869, 13, 51564, 51564, 407, 286, 478, 516, 281, 16945, 2464, 257, 707, 36133, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.07141347158522833, "compression_ratio": 1.8046875, "no_caption_prob": 8.480122778564692e-05}, {"id": 316, "seek": 105900, "start": 1083.0, "end": 1085.0, "text": " So I'm going to manually write a little helper.", "tokens": [50364, 1042, 11, 294, 316, 6840, 2117, 11, 437, 291, 576, 5646, 360, 307, 291, 1116, 362, 257, 3410, 1219, 3079, 11, 558, 30, 50614, 50614, 3013, 307, 411, 291, 584, 11, 286, 478, 516, 281, 3079, 613, 12869, 281, 341, 2158, 13, 50864, 50864, 400, 264, 12869, 294, 2674, 307, 411, 257, 1329, 13, 51014, 51014, 467, 311, 411, 364, 1269, 4590, 1329, 295, 411, 11, 286, 478, 516, 281, 411, 3079, 1783, 1230, 295, 12869, 281, 341, 13, 51264, 51264, 407, 264, 700, 551, 291, 1116, 1333, 295, 352, 281, 307, 291, 434, 411, 11, 1392, 11, 731, 11, 457, 286, 458, 341, 2445, 2516, 732, 12869, 13, 51564, 51564, 407, 286, 478, 516, 281, 16945, 2464, 257, 707, 36133, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.07141347158522833, "compression_ratio": 1.8046875, "no_caption_prob": 8.480122778564692e-05}, {"id": 317, "seek": 108500, "start": 1085.0, "end": 1091.0, "text": " I'm going to write a little function that is going to take that function is going to take two arguments.", "tokens": [50364, 286, 478, 516, 281, 2464, 257, 707, 2445, 300, 307, 516, 281, 747, 300, 2445, 307, 516, 281, 747, 732, 12869, 13, 50664, 50664, 20475, 264, 8026, 11, 309, 311, 516, 281, 818, 3079, 365, 1329, 11, 264, 35948, 551, 11, 457, 309, 311, 787, 516, 281, 3079, 309, 365, 732, 4190, 13, 50964, 50964, 286, 458, 498, 286, 764, 341, 2445, 281, 8460, 257, 818, 300, 286, 600, 44157, 1970, 746, 1646, 13, 51214, 51214, 286, 600, 44157, 1970, 594, 507, 2663, 11, 558, 30, 51364, 51364, 407, 309, 311, 411, 11, 1392, 11, 321, 434, 472, 26109, 412, 41596, 13, 51464, 51464, 823, 321, 434, 44077, 1970, 594, 507, 11, 411, 5141, 257, 2445, 365, 257, 1230, 295, 4190, 11, 558, 30, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.09592688828706741, "compression_ratio": 1.9189189189189189, "no_caption_prob": 2.6273224648321047e-05}, {"id": 318, "seek": 108500, "start": 1091.0, "end": 1097.0, "text": " Behind the scenes, it's going to call apply with list, the unsafe thing, but it's only going to apply it with two values.", "tokens": [50364, 286, 478, 516, 281, 2464, 257, 707, 2445, 300, 307, 516, 281, 747, 300, 2445, 307, 516, 281, 747, 732, 12869, 13, 50664, 50664, 20475, 264, 8026, 11, 309, 311, 516, 281, 818, 3079, 365, 1329, 11, 264, 35948, 551, 11, 457, 309, 311, 787, 516, 281, 3079, 309, 365, 732, 4190, 13, 50964, 50964, 286, 458, 498, 286, 764, 341, 2445, 281, 8460, 257, 818, 300, 286, 600, 44157, 1970, 746, 1646, 13, 51214, 51214, 286, 600, 44157, 1970, 594, 507, 2663, 11, 558, 30, 51364, 51364, 407, 309, 311, 411, 11, 1392, 11, 321, 434, 472, 26109, 412, 41596, 13, 51464, 51464, 823, 321, 434, 44077, 1970, 594, 507, 11, 411, 5141, 257, 2445, 365, 257, 1230, 295, 4190, 11, 558, 30, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.09592688828706741, "compression_ratio": 1.9189189189189189, "no_caption_prob": 2.6273224648321047e-05}, {"id": 319, "seek": 108500, "start": 1097.0, "end": 1102.0, "text": " I know if I use this function to generate a call that I've guarded against something else.", "tokens": [50364, 286, 478, 516, 281, 2464, 257, 707, 2445, 300, 307, 516, 281, 747, 300, 2445, 307, 516, 281, 747, 732, 12869, 13, 50664, 50664, 20475, 264, 8026, 11, 309, 311, 516, 281, 818, 3079, 365, 1329, 11, 264, 35948, 551, 11, 457, 309, 311, 787, 516, 281, 3079, 309, 365, 732, 4190, 13, 50964, 50964, 286, 458, 498, 286, 764, 341, 2445, 281, 8460, 257, 818, 300, 286, 600, 44157, 1970, 746, 1646, 13, 51214, 51214, 286, 600, 44157, 1970, 594, 507, 2663, 11, 558, 30, 51364, 51364, 407, 309, 311, 411, 11, 1392, 11, 321, 434, 472, 26109, 412, 41596, 13, 51464, 51464, 823, 321, 434, 44077, 1970, 594, 507, 11, 411, 5141, 257, 2445, 365, 257, 1230, 295, 4190, 11, 558, 30, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.09592688828706741, "compression_ratio": 1.9189189189189189, "no_caption_prob": 2.6273224648321047e-05}, {"id": 320, "seek": 108500, "start": 1102.0, "end": 1105.0, "text": " I've guarded against arity issues, right?", "tokens": [50364, 286, 478, 516, 281, 2464, 257, 707, 2445, 300, 307, 516, 281, 747, 300, 2445, 307, 516, 281, 747, 732, 12869, 13, 50664, 50664, 20475, 264, 8026, 11, 309, 311, 516, 281, 818, 3079, 365, 1329, 11, 264, 35948, 551, 11, 457, 309, 311, 787, 516, 281, 3079, 309, 365, 732, 4190, 13, 50964, 50964, 286, 458, 498, 286, 764, 341, 2445, 281, 8460, 257, 818, 300, 286, 600, 44157, 1970, 746, 1646, 13, 51214, 51214, 286, 600, 44157, 1970, 594, 507, 2663, 11, 558, 30, 51364, 51364, 407, 309, 311, 411, 11, 1392, 11, 321, 434, 472, 26109, 412, 41596, 13, 51464, 51464, 823, 321, 434, 44077, 1970, 594, 507, 11, 411, 5141, 257, 2445, 365, 257, 1230, 295, 4190, 11, 558, 30, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.09592688828706741, "compression_ratio": 1.9189189189189189, "no_caption_prob": 2.6273224648321047e-05}, {"id": 321, "seek": 108500, "start": 1105.0, "end": 1107.0, "text": " So it's like, okay, we're one notch at imports.", "tokens": [50364, 286, 478, 516, 281, 2464, 257, 707, 2445, 300, 307, 516, 281, 747, 300, 2445, 307, 516, 281, 747, 732, 12869, 13, 50664, 50664, 20475, 264, 8026, 11, 309, 311, 516, 281, 818, 3079, 365, 1329, 11, 264, 35948, 551, 11, 457, 309, 311, 787, 516, 281, 3079, 309, 365, 732, 4190, 13, 50964, 50964, 286, 458, 498, 286, 764, 341, 2445, 281, 8460, 257, 818, 300, 286, 600, 44157, 1970, 746, 1646, 13, 51214, 51214, 286, 600, 44157, 1970, 594, 507, 2663, 11, 558, 30, 51364, 51364, 407, 309, 311, 411, 11, 1392, 11, 321, 434, 472, 26109, 412, 41596, 13, 51464, 51464, 823, 321, 434, 44077, 1970, 594, 507, 11, 411, 5141, 257, 2445, 365, 257, 1230, 295, 4190, 11, 558, 30, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.09592688828706741, "compression_ratio": 1.9189189189189189, "no_caption_prob": 2.6273224648321047e-05}, {"id": 322, "seek": 108500, "start": 1107.0, "end": 1112.0, "text": " Now we're guarding against arity, like calling a function with a number of values, right?", "tokens": [50364, 286, 478, 516, 281, 2464, 257, 707, 2445, 300, 307, 516, 281, 747, 300, 2445, 307, 516, 281, 747, 732, 12869, 13, 50664, 50664, 20475, 264, 8026, 11, 309, 311, 516, 281, 818, 3079, 365, 1329, 11, 264, 35948, 551, 11, 457, 309, 311, 787, 516, 281, 3079, 309, 365, 732, 4190, 13, 50964, 50964, 286, 458, 498, 286, 764, 341, 2445, 281, 8460, 257, 818, 300, 286, 600, 44157, 1970, 746, 1646, 13, 51214, 51214, 286, 600, 44157, 1970, 594, 507, 2663, 11, 558, 30, 51364, 51364, 407, 309, 311, 411, 11, 1392, 11, 321, 434, 472, 26109, 412, 41596, 13, 51464, 51464, 823, 321, 434, 44077, 1970, 594, 507, 11, 411, 5141, 257, 2445, 365, 257, 1230, 295, 4190, 11, 558, 30, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.09592688828706741, "compression_ratio": 1.9189189189189189, "no_caption_prob": 2.6273224648321047e-05}, {"id": 323, "seek": 111200, "start": 1112.0, "end": 1120.0, "text": " And then the let me maybe the last part is like, okay, but the next chunk is types.", "tokens": [50364, 400, 550, 264, 718, 385, 1310, 264, 1036, 644, 307, 411, 11, 1392, 11, 457, 264, 958, 16635, 307, 3467, 13, 50764, 50764, 823, 341, 307, 733, 295, 3657, 13, 50864, 50864, 400, 411, 11, 370, 437, 286, 914, 538, 300, 307, 411, 11, 1392, 11, 718, 311, 584, 321, 362, 257, 777, 2445, 1219, 909, 13, 51064, 51064, 492, 600, 445, 14479, 341, 13, 51164, 51164, 467, 311, 2243, 13, 51214, 51214, 44347, 732, 3547, 11, 899, 12808, 552, 1214, 13, 51314, 51314, 509, 483, 1071, 1230, 13, 51364, 51364, 28371, 20602, 13, 51414, 51414, 865, 11, 1687, 42491, 13, 51464, 51464, 682, 341, 1389, 11, 321, 434, 516, 281, 787, 9651, 322, 41674, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.11712361176808675, "compression_ratio": 1.6, "no_caption_prob": 2.7534770197235048e-05}, {"id": 324, "seek": 111200, "start": 1120.0, "end": 1122.0, "text": " Now this is kind of weird.", "tokens": [50364, 400, 550, 264, 718, 385, 1310, 264, 1036, 644, 307, 411, 11, 1392, 11, 457, 264, 958, 16635, 307, 3467, 13, 50764, 50764, 823, 341, 307, 733, 295, 3657, 13, 50864, 50864, 400, 411, 11, 370, 437, 286, 914, 538, 300, 307, 411, 11, 1392, 11, 718, 311, 584, 321, 362, 257, 777, 2445, 1219, 909, 13, 51064, 51064, 492, 600, 445, 14479, 341, 13, 51164, 51164, 467, 311, 2243, 13, 51214, 51214, 44347, 732, 3547, 11, 899, 12808, 552, 1214, 13, 51314, 51314, 509, 483, 1071, 1230, 13, 51364, 51364, 28371, 20602, 13, 51414, 51414, 865, 11, 1687, 42491, 13, 51464, 51464, 682, 341, 1389, 11, 321, 434, 516, 281, 787, 9651, 322, 41674, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.11712361176808675, "compression_ratio": 1.6, "no_caption_prob": 2.7534770197235048e-05}, {"id": 325, "seek": 111200, "start": 1122.0, "end": 1126.0, "text": " And like, so what I mean by that is like, okay, let's say we have a new function called add.", "tokens": [50364, 400, 550, 264, 718, 385, 1310, 264, 1036, 644, 307, 411, 11, 1392, 11, 457, 264, 958, 16635, 307, 3467, 13, 50764, 50764, 823, 341, 307, 733, 295, 3657, 13, 50864, 50864, 400, 411, 11, 370, 437, 286, 914, 538, 300, 307, 411, 11, 1392, 11, 718, 311, 584, 321, 362, 257, 777, 2445, 1219, 909, 13, 51064, 51064, 492, 600, 445, 14479, 341, 13, 51164, 51164, 467, 311, 2243, 13, 51214, 51214, 44347, 732, 3547, 11, 899, 12808, 552, 1214, 13, 51314, 51314, 509, 483, 1071, 1230, 13, 51364, 51364, 28371, 20602, 13, 51414, 51414, 865, 11, 1687, 42491, 13, 51464, 51464, 682, 341, 1389, 11, 321, 434, 516, 281, 787, 9651, 322, 41674, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.11712361176808675, "compression_ratio": 1.6, "no_caption_prob": 2.7534770197235048e-05}, {"id": 326, "seek": 111200, "start": 1126.0, "end": 1128.0, "text": " We've just invented this.", "tokens": [50364, 400, 550, 264, 718, 385, 1310, 264, 1036, 644, 307, 411, 11, 1392, 11, 457, 264, 958, 16635, 307, 3467, 13, 50764, 50764, 823, 341, 307, 733, 295, 3657, 13, 50864, 50864, 400, 411, 11, 370, 437, 286, 914, 538, 300, 307, 411, 11, 1392, 11, 718, 311, 584, 321, 362, 257, 777, 2445, 1219, 909, 13, 51064, 51064, 492, 600, 445, 14479, 341, 13, 51164, 51164, 467, 311, 2243, 13, 51214, 51214, 44347, 732, 3547, 11, 899, 12808, 552, 1214, 13, 51314, 51314, 509, 483, 1071, 1230, 13, 51364, 51364, 28371, 20602, 13, 51414, 51414, 865, 11, 1687, 42491, 13, 51464, 51464, 682, 341, 1389, 11, 321, 434, 516, 281, 787, 9651, 322, 41674, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.11712361176808675, "compression_ratio": 1.6, "no_caption_prob": 2.7534770197235048e-05}, {"id": 327, "seek": 111200, "start": 1128.0, "end": 1129.0, "text": " It's amazing.", "tokens": [50364, 400, 550, 264, 718, 385, 1310, 264, 1036, 644, 307, 411, 11, 1392, 11, 457, 264, 958, 16635, 307, 3467, 13, 50764, 50764, 823, 341, 307, 733, 295, 3657, 13, 50864, 50864, 400, 411, 11, 370, 437, 286, 914, 538, 300, 307, 411, 11, 1392, 11, 718, 311, 584, 321, 362, 257, 777, 2445, 1219, 909, 13, 51064, 51064, 492, 600, 445, 14479, 341, 13, 51164, 51164, 467, 311, 2243, 13, 51214, 51214, 44347, 732, 3547, 11, 899, 12808, 552, 1214, 13, 51314, 51314, 509, 483, 1071, 1230, 13, 51364, 51364, 28371, 20602, 13, 51414, 51414, 865, 11, 1687, 42491, 13, 51464, 51464, 682, 341, 1389, 11, 321, 434, 516, 281, 787, 9651, 322, 41674, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.11712361176808675, "compression_ratio": 1.6, "no_caption_prob": 2.7534770197235048e-05}, {"id": 328, "seek": 111200, "start": 1129.0, "end": 1131.0, "text": " Takes two numbers, smashes them together.", "tokens": [50364, 400, 550, 264, 718, 385, 1310, 264, 1036, 644, 307, 411, 11, 1392, 11, 457, 264, 958, 16635, 307, 3467, 13, 50764, 50764, 823, 341, 307, 733, 295, 3657, 13, 50864, 50864, 400, 411, 11, 370, 437, 286, 914, 538, 300, 307, 411, 11, 1392, 11, 718, 311, 584, 321, 362, 257, 777, 2445, 1219, 909, 13, 51064, 51064, 492, 600, 445, 14479, 341, 13, 51164, 51164, 467, 311, 2243, 13, 51214, 51214, 44347, 732, 3547, 11, 899, 12808, 552, 1214, 13, 51314, 51314, 509, 483, 1071, 1230, 13, 51364, 51364, 28371, 20602, 13, 51414, 51414, 865, 11, 1687, 42491, 13, 51464, 51464, 682, 341, 1389, 11, 321, 434, 516, 281, 787, 9651, 322, 41674, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.11712361176808675, "compression_ratio": 1.6, "no_caption_prob": 2.7534770197235048e-05}, {"id": 329, "seek": 111200, "start": 1131.0, "end": 1132.0, "text": " You get another number.", "tokens": [50364, 400, 550, 264, 718, 385, 1310, 264, 1036, 644, 307, 411, 11, 1392, 11, 457, 264, 958, 16635, 307, 3467, 13, 50764, 50764, 823, 341, 307, 733, 295, 3657, 13, 50864, 50864, 400, 411, 11, 370, 437, 286, 914, 538, 300, 307, 411, 11, 1392, 11, 718, 311, 584, 321, 362, 257, 777, 2445, 1219, 909, 13, 51064, 51064, 492, 600, 445, 14479, 341, 13, 51164, 51164, 467, 311, 2243, 13, 51214, 51214, 44347, 732, 3547, 11, 899, 12808, 552, 1214, 13, 51314, 51314, 509, 483, 1071, 1230, 13, 51364, 51364, 28371, 20602, 13, 51414, 51414, 865, 11, 1687, 42491, 13, 51464, 51464, 682, 341, 1389, 11, 321, 434, 516, 281, 787, 9651, 322, 41674, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.11712361176808675, "compression_ratio": 1.6, "no_caption_prob": 2.7534770197235048e-05}, {"id": 330, "seek": 111200, "start": 1132.0, "end": 1133.0, "text": " Groundbreaking.", "tokens": [50364, 400, 550, 264, 718, 385, 1310, 264, 1036, 644, 307, 411, 11, 1392, 11, 457, 264, 958, 16635, 307, 3467, 13, 50764, 50764, 823, 341, 307, 733, 295, 3657, 13, 50864, 50864, 400, 411, 11, 370, 437, 286, 914, 538, 300, 307, 411, 11, 1392, 11, 718, 311, 584, 321, 362, 257, 777, 2445, 1219, 909, 13, 51064, 51064, 492, 600, 445, 14479, 341, 13, 51164, 51164, 467, 311, 2243, 13, 51214, 51214, 44347, 732, 3547, 11, 899, 12808, 552, 1214, 13, 51314, 51314, 509, 483, 1071, 1230, 13, 51364, 51364, 28371, 20602, 13, 51414, 51414, 865, 11, 1687, 42491, 13, 51464, 51464, 682, 341, 1389, 11, 321, 434, 516, 281, 787, 9651, 322, 41674, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.11712361176808675, "compression_ratio": 1.6, "no_caption_prob": 2.7534770197235048e-05}, {"id": 331, "seek": 111200, "start": 1133.0, "end": 1134.0, "text": " Yeah, super groundbreaking.", "tokens": [50364, 400, 550, 264, 718, 385, 1310, 264, 1036, 644, 307, 411, 11, 1392, 11, 457, 264, 958, 16635, 307, 3467, 13, 50764, 50764, 823, 341, 307, 733, 295, 3657, 13, 50864, 50864, 400, 411, 11, 370, 437, 286, 914, 538, 300, 307, 411, 11, 1392, 11, 718, 311, 584, 321, 362, 257, 777, 2445, 1219, 909, 13, 51064, 51064, 492, 600, 445, 14479, 341, 13, 51164, 51164, 467, 311, 2243, 13, 51214, 51214, 44347, 732, 3547, 11, 899, 12808, 552, 1214, 13, 51314, 51314, 509, 483, 1071, 1230, 13, 51364, 51364, 28371, 20602, 13, 51414, 51414, 865, 11, 1687, 42491, 13, 51464, 51464, 682, 341, 1389, 11, 321, 434, 516, 281, 787, 9651, 322, 41674, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.11712361176808675, "compression_ratio": 1.6, "no_caption_prob": 2.7534770197235048e-05}, {"id": 332, "seek": 111200, "start": 1134.0, "end": 1137.0, "text": " In this case, we're going to only operate on integers.", "tokens": [50364, 400, 550, 264, 718, 385, 1310, 264, 1036, 644, 307, 411, 11, 1392, 11, 457, 264, 958, 16635, 307, 3467, 13, 50764, 50764, 823, 341, 307, 733, 295, 3657, 13, 50864, 50864, 400, 411, 11, 370, 437, 286, 914, 538, 300, 307, 411, 11, 1392, 11, 718, 311, 584, 321, 362, 257, 777, 2445, 1219, 909, 13, 51064, 51064, 492, 600, 445, 14479, 341, 13, 51164, 51164, 467, 311, 2243, 13, 51214, 51214, 44347, 732, 3547, 11, 899, 12808, 552, 1214, 13, 51314, 51314, 509, 483, 1071, 1230, 13, 51364, 51364, 28371, 20602, 13, 51414, 51414, 865, 11, 1687, 42491, 13, 51464, 51464, 682, 341, 1389, 11, 321, 434, 516, 281, 787, 9651, 322, 41674, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.11712361176808675, "compression_ratio": 1.6, "no_caption_prob": 2.7534770197235048e-05}, {"id": 333, "seek": 113700, "start": 1137.0, "end": 1147.0, "text": " Now we could make our little helper function that like takes two expressions, like AST expressions and generates a new expression.", "tokens": [50364, 823, 321, 727, 652, 527, 707, 36133, 2445, 300, 411, 2516, 732, 15277, 11, 411, 316, 6840, 15277, 293, 23815, 257, 777, 6114, 13, 50864, 50864, 400, 309, 1355, 300, 5699, 291, 1219, 300, 11, 291, 1116, 362, 281, 584, 411, 11, 1392, 11, 452, 700, 6770, 307, 364, 24922, 13, 51114, 51114, 407, 291, 584, 411, 11, 341, 307, 364, 24922, 13, 51214, 51214, 400, 550, 264, 1150, 6770, 307, 411, 11, 1392, 11, 341, 307, 364, 24922, 13, 51314, 51314, 400, 291, 411, 733, 295, 7019, 309, 949, 309, 1709, 294, 13, 51414, 51414, 583, 456, 311, 1071, 1254, 295, 341, 13, 51464, 51464, 1743, 291, 393, 445, 360, 300, 21993, 1854, 295, 264, 2445, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.1211169430466949, "compression_ratio": 1.8565891472868217, "no_caption_prob": 0.00011410929437261075}, {"id": 334, "seek": 113700, "start": 1147.0, "end": 1152.0, "text": " And it means that whenever you called that, you'd have to say like, okay, my first argument is an integer.", "tokens": [50364, 823, 321, 727, 652, 527, 707, 36133, 2445, 300, 411, 2516, 732, 15277, 11, 411, 316, 6840, 15277, 293, 23815, 257, 777, 6114, 13, 50864, 50864, 400, 309, 1355, 300, 5699, 291, 1219, 300, 11, 291, 1116, 362, 281, 584, 411, 11, 1392, 11, 452, 700, 6770, 307, 364, 24922, 13, 51114, 51114, 407, 291, 584, 411, 11, 341, 307, 364, 24922, 13, 51214, 51214, 400, 550, 264, 1150, 6770, 307, 411, 11, 1392, 11, 341, 307, 364, 24922, 13, 51314, 51314, 400, 291, 411, 733, 295, 7019, 309, 949, 309, 1709, 294, 13, 51414, 51414, 583, 456, 311, 1071, 1254, 295, 341, 13, 51464, 51464, 1743, 291, 393, 445, 360, 300, 21993, 1854, 295, 264, 2445, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.1211169430466949, "compression_ratio": 1.8565891472868217, "no_caption_prob": 0.00011410929437261075}, {"id": 335, "seek": 113700, "start": 1152.0, "end": 1154.0, "text": " So you say like, this is an integer.", "tokens": [50364, 823, 321, 727, 652, 527, 707, 36133, 2445, 300, 411, 2516, 732, 15277, 11, 411, 316, 6840, 15277, 293, 23815, 257, 777, 6114, 13, 50864, 50864, 400, 309, 1355, 300, 5699, 291, 1219, 300, 11, 291, 1116, 362, 281, 584, 411, 11, 1392, 11, 452, 700, 6770, 307, 364, 24922, 13, 51114, 51114, 407, 291, 584, 411, 11, 341, 307, 364, 24922, 13, 51214, 51214, 400, 550, 264, 1150, 6770, 307, 411, 11, 1392, 11, 341, 307, 364, 24922, 13, 51314, 51314, 400, 291, 411, 733, 295, 7019, 309, 949, 309, 1709, 294, 13, 51414, 51414, 583, 456, 311, 1071, 1254, 295, 341, 13, 51464, 51464, 1743, 291, 393, 445, 360, 300, 21993, 1854, 295, 264, 2445, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.1211169430466949, "compression_ratio": 1.8565891472868217, "no_caption_prob": 0.00011410929437261075}, {"id": 336, "seek": 113700, "start": 1154.0, "end": 1156.0, "text": " And then the second argument is like, okay, this is an integer.", "tokens": [50364, 823, 321, 727, 652, 527, 707, 36133, 2445, 300, 411, 2516, 732, 15277, 11, 411, 316, 6840, 15277, 293, 23815, 257, 777, 6114, 13, 50864, 50864, 400, 309, 1355, 300, 5699, 291, 1219, 300, 11, 291, 1116, 362, 281, 584, 411, 11, 1392, 11, 452, 700, 6770, 307, 364, 24922, 13, 51114, 51114, 407, 291, 584, 411, 11, 341, 307, 364, 24922, 13, 51214, 51214, 400, 550, 264, 1150, 6770, 307, 411, 11, 1392, 11, 341, 307, 364, 24922, 13, 51314, 51314, 400, 291, 411, 733, 295, 7019, 309, 949, 309, 1709, 294, 13, 51414, 51414, 583, 456, 311, 1071, 1254, 295, 341, 13, 51464, 51464, 1743, 291, 393, 445, 360, 300, 21993, 1854, 295, 264, 2445, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.1211169430466949, "compression_ratio": 1.8565891472868217, "no_caption_prob": 0.00011410929437261075}, {"id": 337, "seek": 113700, "start": 1156.0, "end": 1158.0, "text": " And you like kind of wrap it before it goes in.", "tokens": [50364, 823, 321, 727, 652, 527, 707, 36133, 2445, 300, 411, 2516, 732, 15277, 11, 411, 316, 6840, 15277, 293, 23815, 257, 777, 6114, 13, 50864, 50864, 400, 309, 1355, 300, 5699, 291, 1219, 300, 11, 291, 1116, 362, 281, 584, 411, 11, 1392, 11, 452, 700, 6770, 307, 364, 24922, 13, 51114, 51114, 407, 291, 584, 411, 11, 341, 307, 364, 24922, 13, 51214, 51214, 400, 550, 264, 1150, 6770, 307, 411, 11, 1392, 11, 341, 307, 364, 24922, 13, 51314, 51314, 400, 291, 411, 733, 295, 7019, 309, 949, 309, 1709, 294, 13, 51414, 51414, 583, 456, 311, 1071, 1254, 295, 341, 13, 51464, 51464, 1743, 291, 393, 445, 360, 300, 21993, 1854, 295, 264, 2445, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.1211169430466949, "compression_ratio": 1.8565891472868217, "no_caption_prob": 0.00011410929437261075}, {"id": 338, "seek": 113700, "start": 1158.0, "end": 1159.0, "text": " But there's another form of this.", "tokens": [50364, 823, 321, 727, 652, 527, 707, 36133, 2445, 300, 411, 2516, 732, 15277, 11, 411, 316, 6840, 15277, 293, 23815, 257, 777, 6114, 13, 50864, 50864, 400, 309, 1355, 300, 5699, 291, 1219, 300, 11, 291, 1116, 362, 281, 584, 411, 11, 1392, 11, 452, 700, 6770, 307, 364, 24922, 13, 51114, 51114, 407, 291, 584, 411, 11, 341, 307, 364, 24922, 13, 51214, 51214, 400, 550, 264, 1150, 6770, 307, 411, 11, 1392, 11, 341, 307, 364, 24922, 13, 51314, 51314, 400, 291, 411, 733, 295, 7019, 309, 949, 309, 1709, 294, 13, 51414, 51414, 583, 456, 311, 1071, 1254, 295, 341, 13, 51464, 51464, 1743, 291, 393, 445, 360, 300, 21993, 1854, 295, 264, 2445, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.1211169430466949, "compression_ratio": 1.8565891472868217, "no_caption_prob": 0.00011410929437261075}, {"id": 339, "seek": 113700, "start": 1159.0, "end": 1162.0, "text": " Like you can just do that wrapping inside of the function.", "tokens": [50364, 823, 321, 727, 652, 527, 707, 36133, 2445, 300, 411, 2516, 732, 15277, 11, 411, 316, 6840, 15277, 293, 23815, 257, 777, 6114, 13, 50864, 50864, 400, 309, 1355, 300, 5699, 291, 1219, 300, 11, 291, 1116, 362, 281, 584, 411, 11, 1392, 11, 452, 700, 6770, 307, 364, 24922, 13, 51114, 51114, 407, 291, 584, 411, 11, 341, 307, 364, 24922, 13, 51214, 51214, 400, 550, 264, 1150, 6770, 307, 411, 11, 1392, 11, 341, 307, 364, 24922, 13, 51314, 51314, 400, 291, 411, 733, 295, 7019, 309, 949, 309, 1709, 294, 13, 51414, 51414, 583, 456, 311, 1071, 1254, 295, 341, 13, 51464, 51464, 1743, 291, 393, 445, 360, 300, 21993, 1854, 295, 264, 2445, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.1211169430466949, "compression_ratio": 1.8565891472868217, "no_caption_prob": 0.00011410929437261075}, {"id": 340, "seek": 116200, "start": 1162.0, "end": 1170.0, "text": " So you have another helper that basically helper that's like my sweet, sweet add function takes two integers and returns an expression.", "tokens": [50364, 407, 291, 362, 1071, 36133, 300, 1936, 36133, 300, 311, 411, 452, 3844, 11, 3844, 909, 2445, 2516, 732, 41674, 293, 11247, 364, 6114, 13, 50764, 50764, 400, 550, 309, 445, 775, 264, 18350, 13, 50914, 50914, 400, 370, 456, 321, 600, 767, 39470, 484, 1071, 857, 295, 4514, 570, 586, 321, 393, 818, 341, 452, 909, 2445, 365, 732, 41674, 300, 321, 1310, 458, 412, 1322, 565, 13, 51364, 51364, 400, 321, 483, 257, 6114, 300, 23815, 411, 437, 309, 576, 574, 411, 281, 818, 300, 2445, 5646, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.08725871431066635, "compression_ratio": 1.7768595041322315, "no_caption_prob": 2.2472737327916548e-05}, {"id": 341, "seek": 116200, "start": 1170.0, "end": 1173.0, "text": " And then it just does the mapping.", "tokens": [50364, 407, 291, 362, 1071, 36133, 300, 1936, 36133, 300, 311, 411, 452, 3844, 11, 3844, 909, 2445, 2516, 732, 41674, 293, 11247, 364, 6114, 13, 50764, 50764, 400, 550, 309, 445, 775, 264, 18350, 13, 50914, 50914, 400, 370, 456, 321, 600, 767, 39470, 484, 1071, 857, 295, 4514, 570, 586, 321, 393, 818, 341, 452, 909, 2445, 365, 732, 41674, 300, 321, 1310, 458, 412, 1322, 565, 13, 51364, 51364, 400, 321, 483, 257, 6114, 300, 23815, 411, 437, 309, 576, 574, 411, 281, 818, 300, 2445, 5646, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.08725871431066635, "compression_ratio": 1.7768595041322315, "no_caption_prob": 2.2472737327916548e-05}, {"id": 342, "seek": 116200, "start": 1173.0, "end": 1182.0, "text": " And so there we've actually squeezed out another bit of safety because now we can call this my add function with two integers that we maybe know at build time.", "tokens": [50364, 407, 291, 362, 1071, 36133, 300, 1936, 36133, 300, 311, 411, 452, 3844, 11, 3844, 909, 2445, 2516, 732, 41674, 293, 11247, 364, 6114, 13, 50764, 50764, 400, 550, 309, 445, 775, 264, 18350, 13, 50914, 50914, 400, 370, 456, 321, 600, 767, 39470, 484, 1071, 857, 295, 4514, 570, 586, 321, 393, 818, 341, 452, 909, 2445, 365, 732, 41674, 300, 321, 1310, 458, 412, 1322, 565, 13, 51364, 51364, 400, 321, 483, 257, 6114, 300, 23815, 411, 437, 309, 576, 574, 411, 281, 818, 300, 2445, 5646, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.08725871431066635, "compression_ratio": 1.7768595041322315, "no_caption_prob": 2.2472737327916548e-05}, {"id": 343, "seek": 116200, "start": 1182.0, "end": 1189.0, "text": " And we get a expression that generates like what it would look like to call that function normally.", "tokens": [50364, 407, 291, 362, 1071, 36133, 300, 1936, 36133, 300, 311, 411, 452, 3844, 11, 3844, 909, 2445, 2516, 732, 41674, 293, 11247, 364, 6114, 13, 50764, 50764, 400, 550, 309, 445, 775, 264, 18350, 13, 50914, 50914, 400, 370, 456, 321, 600, 767, 39470, 484, 1071, 857, 295, 4514, 570, 586, 321, 393, 818, 341, 452, 909, 2445, 365, 732, 41674, 300, 321, 1310, 458, 412, 1322, 565, 13, 51364, 51364, 400, 321, 483, 257, 6114, 300, 23815, 411, 437, 309, 576, 574, 411, 281, 818, 300, 2445, 5646, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.08725871431066635, "compression_ratio": 1.7768595041322315, "no_caption_prob": 2.2472737327916548e-05}, {"id": 344, "seek": 118900, "start": 1189.0, "end": 1194.0, "text": " So now what I like to think about with this, I realize I've been talking a decent long time.", "tokens": [50364, 407, 586, 437, 286, 411, 281, 519, 466, 365, 341, 11, 286, 4325, 286, 600, 668, 1417, 257, 8681, 938, 565, 13, 50614, 50614, 407, 4696, 286, 478, 15640, 257, 665, 11400, 510, 13, 50764, 50764, 583, 307, 300, 300, 1254, 11, 300, 1036, 1254, 295, 291, 362, 257, 2445, 909, 11, 976, 309, 732, 41674, 293, 309, 11247, 364, 6114, 300, 307, 300, 2158, 13, 51364, 51364, 663, 281, 385, 307, 411, 588, 1998, 281, 885, 411, 3579, 264, 3380, 3089, 11, 597, 1355, 309, 311, 588, 1998, 281, 3579, 257, 6798, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.08710351282236528, "compression_ratio": 1.6265560165975104, "no_caption_prob": 5.7380944781471044e-05}, {"id": 345, "seek": 118900, "start": 1194.0, "end": 1197.0, "text": " So hopefully I'm spinning a good yarn here.", "tokens": [50364, 407, 586, 437, 286, 411, 281, 519, 466, 365, 341, 11, 286, 4325, 286, 600, 668, 1417, 257, 8681, 938, 565, 13, 50614, 50614, 407, 4696, 286, 478, 15640, 257, 665, 11400, 510, 13, 50764, 50764, 583, 307, 300, 300, 1254, 11, 300, 1036, 1254, 295, 291, 362, 257, 2445, 909, 11, 976, 309, 732, 41674, 293, 309, 11247, 364, 6114, 300, 307, 300, 2158, 13, 51364, 51364, 663, 281, 385, 307, 411, 588, 1998, 281, 885, 411, 3579, 264, 3380, 3089, 11, 597, 1355, 309, 311, 588, 1998, 281, 3579, 257, 6798, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.08710351282236528, "compression_ratio": 1.6265560165975104, "no_caption_prob": 5.7380944781471044e-05}, {"id": 346, "seek": 118900, "start": 1197.0, "end": 1209.0, "text": " But is that that form, that last form of you have a function add, give it two integers and it returns an expression that is that value.", "tokens": [50364, 407, 586, 437, 286, 411, 281, 519, 466, 365, 341, 11, 286, 4325, 286, 600, 668, 1417, 257, 8681, 938, 565, 13, 50614, 50614, 407, 4696, 286, 478, 15640, 257, 665, 11400, 510, 13, 50764, 50764, 583, 307, 300, 300, 1254, 11, 300, 1036, 1254, 295, 291, 362, 257, 2445, 909, 11, 976, 309, 732, 41674, 293, 309, 11247, 364, 6114, 300, 307, 300, 2158, 13, 51364, 51364, 663, 281, 385, 307, 411, 588, 1998, 281, 885, 411, 3579, 264, 3380, 3089, 11, 597, 1355, 309, 311, 588, 1998, 281, 3579, 257, 6798, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.08710351282236528, "compression_ratio": 1.6265560165975104, "no_caption_prob": 5.7380944781471044e-05}, {"id": 347, "seek": 118900, "start": 1209.0, "end": 1218.0, "text": " That to me is like very close to being like writing the original code, which means it's very close to writing a string.", "tokens": [50364, 407, 586, 437, 286, 411, 281, 519, 466, 365, 341, 11, 286, 4325, 286, 600, 668, 1417, 257, 8681, 938, 565, 13, 50614, 50614, 407, 4696, 286, 478, 15640, 257, 665, 11400, 510, 13, 50764, 50764, 583, 307, 300, 300, 1254, 11, 300, 1036, 1254, 295, 291, 362, 257, 2445, 909, 11, 976, 309, 732, 41674, 293, 309, 11247, 364, 6114, 300, 307, 300, 2158, 13, 51364, 51364, 663, 281, 385, 307, 411, 588, 1998, 281, 885, 411, 3579, 264, 3380, 3089, 11, 597, 1355, 309, 311, 588, 1998, 281, 3579, 257, 6798, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.08710351282236528, "compression_ratio": 1.6265560165975104, "no_caption_prob": 5.7380944781471044e-05}, {"id": 348, "seek": 121800, "start": 1218.0, "end": 1220.0, "text": " Like convenience wise.", "tokens": [50364, 1743, 19283, 10829, 13, 50464, 50464, 467, 311, 611, 25873, 1547, 11, 264, 37558, 3037, 295, 1203, 321, 600, 668, 1417, 466, 13, 50714, 50714, 823, 11, 264, 787, 25060, 307, 300, 294, 512, 3331, 562, 291, 434, 17746, 3089, 11, 291, 500, 380, 1009, 458, 439, 264, 4190, 412, 1322, 565, 13, 51164, 51164, 1779, 13, 1743, 370, 411, 13, 51314, 51314], "temperature": 0.0, "avg_logprob": -0.11734477556668794, "compression_ratio": 1.4207650273224044, "no_caption_prob": 2.1111141904839315e-05}, {"id": 349, "seek": 121800, "start": 1220.0, "end": 1225.0, "text": " It's also interestingly enough, the safest version of everything we've been talking about.", "tokens": [50364, 1743, 19283, 10829, 13, 50464, 50464, 467, 311, 611, 25873, 1547, 11, 264, 37558, 3037, 295, 1203, 321, 600, 668, 1417, 466, 13, 50714, 50714, 823, 11, 264, 787, 25060, 307, 300, 294, 512, 3331, 562, 291, 434, 17746, 3089, 11, 291, 500, 380, 1009, 458, 439, 264, 4190, 412, 1322, 565, 13, 51164, 51164, 1779, 13, 1743, 370, 411, 13, 51314, 51314], "temperature": 0.0, "avg_logprob": -0.11734477556668794, "compression_ratio": 1.4207650273224044, "no_caption_prob": 2.1111141904839315e-05}, {"id": 350, "seek": 121800, "start": 1225.0, "end": 1234.0, "text": " Now, the only downside is that in some cases when you're generating code, you don't always know all the values at build time.", "tokens": [50364, 1743, 19283, 10829, 13, 50464, 50464, 467, 311, 611, 25873, 1547, 11, 264, 37558, 3037, 295, 1203, 321, 600, 668, 1417, 466, 13, 50714, 50714, 823, 11, 264, 787, 25060, 307, 300, 294, 512, 3331, 562, 291, 434, 17746, 3089, 11, 291, 500, 380, 1009, 458, 439, 264, 4190, 412, 1322, 565, 13, 51164, 51164, 1779, 13, 1743, 370, 411, 13, 51314, 51314], "temperature": 0.0, "avg_logprob": -0.11734477556668794, "compression_ratio": 1.4207650273224044, "no_caption_prob": 2.1111141904839315e-05}, {"id": 351, "seek": 121800, "start": 1234.0, "end": 1237.0, "text": " Right. Like so like.", "tokens": [50364, 1743, 19283, 10829, 13, 50464, 50464, 467, 311, 611, 25873, 1547, 11, 264, 37558, 3037, 295, 1203, 321, 600, 668, 1417, 466, 13, 50714, 50714, 823, 11, 264, 787, 25060, 307, 300, 294, 512, 3331, 562, 291, 434, 17746, 3089, 11, 291, 500, 380, 1009, 458, 439, 264, 4190, 412, 1322, 565, 13, 51164, 51164, 1779, 13, 1743, 370, 411, 13, 51314, 51314], "temperature": 0.0, "avg_logprob": -0.11734477556668794, "compression_ratio": 1.4207650273224044, "no_caption_prob": 2.1111141904839315e-05}, {"id": 352, "seek": 123700, "start": 1237.0, "end": 1253.0, "text": " But what we've done and what I think is so cool is we've taken it from being anchored in the unsafe realm and trying to stretch and reach to the safety where it's like the farther we reach the safety, the more like painful it is.", "tokens": [50364, 583, 437, 321, 600, 1096, 293, 437, 286, 519, 307, 370, 1627, 307, 321, 600, 2726, 309, 490, 885, 12723, 2769, 294, 264, 35948, 15355, 293, 1382, 281, 5985, 293, 2524, 281, 264, 4514, 689, 309, 311, 411, 264, 20344, 321, 2524, 264, 4514, 11, 264, 544, 411, 11697, 309, 307, 13, 51164, 51164, 1779, 13, 492, 600, 767, 38969, 309, 13, 51264, 51264, 823, 321, 584, 411, 538, 7576, 11, 291, 366, 382, 3273, 382, 321, 393, 483, 294, 341, 1333, 295, 4319, 293, 264, 881, 10851, 13, 51664, 51664, 400, 498, 291, 643, 281, 312, 544, 12649, 11, 291, 393, 2524, 20344, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.048194635898695076, "compression_ratio": 1.7171314741035857, "no_caption_prob": 4.399457247927785e-05}, {"id": 353, "seek": 123700, "start": 1253.0, "end": 1255.0, "text": " Right. We've actually inverted it.", "tokens": [50364, 583, 437, 321, 600, 1096, 293, 437, 286, 519, 307, 370, 1627, 307, 321, 600, 2726, 309, 490, 885, 12723, 2769, 294, 264, 35948, 15355, 293, 1382, 281, 5985, 293, 2524, 281, 264, 4514, 689, 309, 311, 411, 264, 20344, 321, 2524, 264, 4514, 11, 264, 544, 411, 11697, 309, 307, 13, 51164, 51164, 1779, 13, 492, 600, 767, 38969, 309, 13, 51264, 51264, 823, 321, 584, 411, 538, 7576, 11, 291, 366, 382, 3273, 382, 321, 393, 483, 294, 341, 1333, 295, 4319, 293, 264, 881, 10851, 13, 51664, 51664, 400, 498, 291, 643, 281, 312, 544, 12649, 11, 291, 393, 2524, 20344, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.048194635898695076, "compression_ratio": 1.7171314741035857, "no_caption_prob": 4.399457247927785e-05}, {"id": 354, "seek": 123700, "start": 1255.0, "end": 1263.0, "text": " Now we say like by default, you are as safe as we can get in this sort of context and the most convenient.", "tokens": [50364, 583, 437, 321, 600, 1096, 293, 437, 286, 519, 307, 370, 1627, 307, 321, 600, 2726, 309, 490, 885, 12723, 2769, 294, 264, 35948, 15355, 293, 1382, 281, 5985, 293, 2524, 281, 264, 4514, 689, 309, 311, 411, 264, 20344, 321, 2524, 264, 4514, 11, 264, 544, 411, 11697, 309, 307, 13, 51164, 51164, 1779, 13, 492, 600, 767, 38969, 309, 13, 51264, 51264, 823, 321, 584, 411, 538, 7576, 11, 291, 366, 382, 3273, 382, 321, 393, 483, 294, 341, 1333, 295, 4319, 293, 264, 881, 10851, 13, 51664, 51664, 400, 498, 291, 643, 281, 312, 544, 12649, 11, 291, 393, 2524, 20344, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.048194635898695076, "compression_ratio": 1.7171314741035857, "no_caption_prob": 4.399457247927785e-05}, {"id": 355, "seek": 123700, "start": 1263.0, "end": 1266.0, "text": " And if you need to be more abstract, you can reach farther.", "tokens": [50364, 583, 437, 321, 600, 1096, 293, 437, 286, 519, 307, 370, 1627, 307, 321, 600, 2726, 309, 490, 885, 12723, 2769, 294, 264, 35948, 15355, 293, 1382, 281, 5985, 293, 2524, 281, 264, 4514, 689, 309, 311, 411, 264, 20344, 321, 2524, 264, 4514, 11, 264, 544, 411, 11697, 309, 307, 13, 51164, 51164, 1779, 13, 492, 600, 767, 38969, 309, 13, 51264, 51264, 823, 321, 584, 411, 538, 7576, 11, 291, 366, 382, 3273, 382, 321, 393, 483, 294, 341, 1333, 295, 4319, 293, 264, 881, 10851, 13, 51664, 51664, 400, 498, 291, 643, 281, 312, 544, 12649, 11, 291, 393, 2524, 20344, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.048194635898695076, "compression_ratio": 1.7171314741035857, "no_caption_prob": 4.399457247927785e-05}, {"id": 356, "seek": 126600, "start": 1266.0, "end": 1272.0, "text": " You can say like, I need to oh, I need to call this function with a variable number of arguments.", "tokens": [50364, 509, 393, 584, 411, 11, 286, 643, 281, 1954, 11, 286, 643, 281, 818, 341, 2445, 365, 257, 7006, 1230, 295, 12869, 13, 50664, 50664, 1743, 498, 286, 478, 884, 257, 27377, 5102, 420, 746, 11, 746, 300, 311, 767, 286, 914, 11, 309, 311, 920, 7226, 2689, 11, 457, 309, 311, 406, 309, 311, 406, 264, 881, 2689, 551, 13, 51064, 51064, 407, 456, 366, 2098, 281, 1936, 312, 411, 11, 2264, 11, 286, 393, 2524, 666, 452, 707, 2290, 3411, 293, 584, 11, 411, 11, 286, 528, 411, 264, 544, 12649, 3037, 570, 300, 311, 437, 286, 643, 558, 586, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.10648310295889311, "compression_ratio": 1.6811023622047243, "no_caption_prob": 5.828657594975084e-05}, {"id": 357, "seek": 126600, "start": 1272.0, "end": 1280.0, "text": " Like if I'm doing a builder pattern or something, something that's actually I mean, it's still relatively common, but it's not it's not the most common thing.", "tokens": [50364, 509, 393, 584, 411, 11, 286, 643, 281, 1954, 11, 286, 643, 281, 818, 341, 2445, 365, 257, 7006, 1230, 295, 12869, 13, 50664, 50664, 1743, 498, 286, 478, 884, 257, 27377, 5102, 420, 746, 11, 746, 300, 311, 767, 286, 914, 11, 309, 311, 920, 7226, 2689, 11, 457, 309, 311, 406, 309, 311, 406, 264, 881, 2689, 551, 13, 51064, 51064, 407, 456, 366, 2098, 281, 1936, 312, 411, 11, 2264, 11, 286, 393, 2524, 666, 452, 707, 2290, 3411, 293, 584, 11, 411, 11, 286, 528, 411, 264, 544, 12649, 3037, 570, 300, 311, 437, 286, 643, 558, 586, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.10648310295889311, "compression_ratio": 1.6811023622047243, "no_caption_prob": 5.828657594975084e-05}, {"id": 358, "seek": 126600, "start": 1280.0, "end": 1290.0, "text": " So there are ways to basically be like, OK, I can reach into my little tool bag and say, like, I want like the more abstract version because that's what I need right now.", "tokens": [50364, 509, 393, 584, 411, 11, 286, 643, 281, 1954, 11, 286, 643, 281, 818, 341, 2445, 365, 257, 7006, 1230, 295, 12869, 13, 50664, 50664, 1743, 498, 286, 478, 884, 257, 27377, 5102, 420, 746, 11, 746, 300, 311, 767, 286, 914, 11, 309, 311, 920, 7226, 2689, 11, 457, 309, 311, 406, 309, 311, 406, 264, 881, 2689, 551, 13, 51064, 51064, 407, 456, 366, 2098, 281, 1936, 312, 411, 11, 2264, 11, 286, 393, 2524, 666, 452, 707, 2290, 3411, 293, 584, 11, 411, 11, 286, 528, 411, 264, 544, 12649, 3037, 570, 300, 311, 437, 286, 643, 558, 586, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.10648310295889311, "compression_ratio": 1.6811023622047243, "no_caption_prob": 5.828657594975084e-05}, {"id": 359, "seek": 129000, "start": 1290.0, "end": 1297.0, "text": " But you're anchored in this like concrete type checked version of things or not not completely type checked.", "tokens": [50364, 583, 291, 434, 12723, 2769, 294, 341, 411, 9859, 2010, 10033, 3037, 295, 721, 420, 406, 406, 2584, 2010, 10033, 13, 50714, 50714, 821, 311, 1071, 5017, 11, 597, 286, 478, 534, 6369, 281, 1565, 493, 295, 286, 1604, 1333, 295, 516, 3219, 13, 51014, 51014, 3764, 11, 341, 307, 411, 264, 11, 291, 458, 11, 7397, 311, 11, 291, 458, 11, 36911, 295, 411, 291, 434, 14994, 294, 257, 1808, 411, 11, 291, 458, 11, 456, 311, 257, 7851, 1854, 295, 291, 293, 291, 643, 281, 3089, 8460, 309, 484, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.11702047785123189, "compression_ratio": 1.6581196581196582, "no_caption_prob": 2.54645747190807e-05}, {"id": 360, "seek": 129000, "start": 1297.0, "end": 1303.0, "text": " There's another discussion, which I'm really curious to bring up of I remember sort of going crazy.", "tokens": [50364, 583, 291, 434, 12723, 2769, 294, 341, 411, 9859, 2010, 10033, 3037, 295, 721, 420, 406, 406, 2584, 2010, 10033, 13, 50714, 50714, 821, 311, 1071, 5017, 11, 597, 286, 478, 534, 6369, 281, 1565, 493, 295, 286, 1604, 1333, 295, 516, 3219, 13, 51014, 51014, 3764, 11, 341, 307, 411, 264, 11, 291, 458, 11, 7397, 311, 11, 291, 458, 11, 36911, 295, 411, 291, 434, 14994, 294, 257, 1808, 411, 11, 291, 458, 11, 456, 311, 257, 7851, 1854, 295, 291, 293, 291, 643, 281, 3089, 8460, 309, 484, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.11702047785123189, "compression_ratio": 1.6581196581196582, "no_caption_prob": 2.54645747190807e-05}, {"id": 361, "seek": 129000, "start": 1303.0, "end": 1313.0, "text": " Again, this is like the, you know, Matt's, you know, nightmares of like you're trapped in a room like, you know, there's a bomb inside of you and you need to code generate it out.", "tokens": [50364, 583, 291, 434, 12723, 2769, 294, 341, 411, 9859, 2010, 10033, 3037, 295, 721, 420, 406, 406, 2584, 2010, 10033, 13, 50714, 50714, 821, 311, 1071, 5017, 11, 597, 286, 478, 534, 6369, 281, 1565, 493, 295, 286, 1604, 1333, 295, 516, 3219, 13, 51014, 51014, 3764, 11, 341, 307, 411, 264, 11, 291, 458, 11, 7397, 311, 11, 291, 458, 11, 36911, 295, 411, 291, 434, 14994, 294, 257, 1808, 411, 11, 291, 458, 11, 456, 311, 257, 7851, 1854, 295, 291, 293, 291, 643, 281, 3089, 8460, 309, 484, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.11702047785123189, "compression_ratio": 1.6581196581196582, "no_caption_prob": 2.54645747190807e-05}, {"id": 362, "seek": 131300, "start": 1313.0, "end": 1326.0, "text": " I don't know. And and I kept thinking, like, could you could you make a library that has the thing of like if it type checks, it generates code that type checks.", "tokens": [50364, 286, 500, 380, 458, 13, 400, 293, 286, 4305, 1953, 11, 411, 11, 727, 291, 727, 291, 652, 257, 6405, 300, 575, 264, 551, 295, 411, 498, 309, 2010, 13834, 11, 309, 23815, 3089, 300, 2010, 13834, 13, 51014, 51014, 400, 456, 390, 257, 1254, 295, 341, 300, 286, 390, 534, 3102, 466, 13, 51164, 51164, 400, 550, 293, 286, 4305, 1382, 281, 1856, 264, 2853, 1269, 281, 6839, 300, 13, 51414, 51414], "temperature": 0.0, "avg_logprob": -0.0921829096476237, "compression_ratio": 1.646067415730337, "no_caption_prob": 3.535192081471905e-05}, {"id": 363, "seek": 131300, "start": 1326.0, "end": 1329.0, "text": " And there was a form of this that I was really interested about.", "tokens": [50364, 286, 500, 380, 458, 13, 400, 293, 286, 4305, 1953, 11, 411, 11, 727, 291, 727, 291, 652, 257, 6405, 300, 575, 264, 551, 295, 411, 498, 309, 2010, 13834, 11, 309, 23815, 3089, 300, 2010, 13834, 13, 51014, 51014, 400, 456, 390, 257, 1254, 295, 341, 300, 286, 390, 534, 3102, 466, 13, 51164, 51164, 400, 550, 293, 286, 4305, 1382, 281, 1856, 264, 2853, 1269, 281, 6839, 300, 13, 51414, 51414], "temperature": 0.0, "avg_logprob": -0.0921829096476237, "compression_ratio": 1.646067415730337, "no_caption_prob": 3.535192081471905e-05}, {"id": 364, "seek": 131300, "start": 1329.0, "end": 1334.0, "text": " And then and I kept trying to leave the door open to explore that.", "tokens": [50364, 286, 500, 380, 458, 13, 400, 293, 286, 4305, 1953, 11, 411, 11, 727, 291, 727, 291, 652, 257, 6405, 300, 575, 264, 551, 295, 411, 498, 309, 2010, 13834, 11, 309, 23815, 3089, 300, 2010, 13834, 13, 51014, 51014, 400, 456, 390, 257, 1254, 295, 341, 300, 286, 390, 534, 3102, 466, 13, 51164, 51164, 400, 550, 293, 286, 4305, 1382, 281, 1856, 264, 2853, 1269, 281, 6839, 300, 13, 51414, 51414], "temperature": 0.0, "avg_logprob": -0.0921829096476237, "compression_ratio": 1.646067415730337, "no_caption_prob": 3.535192081471905e-05}, {"id": 365, "seek": 133400, "start": 1334.0, "end": 1354.0, "text": " And we maybe after we come to this area, we can go back to that of what it was. But there's a key insight of why that's not doable without some crazy type level stuff that probably doesn't that you that I think you would need or some other mechanism that someone much more clever than me would need to come up with.", "tokens": [50364, 400, 321, 1310, 934, 321, 808, 281, 341, 1859, 11, 321, 393, 352, 646, 281, 300, 295, 437, 309, 390, 13, 583, 456, 311, 257, 2141, 11269, 295, 983, 300, 311, 406, 41183, 1553, 512, 3219, 2010, 1496, 1507, 300, 1391, 1177, 380, 300, 291, 300, 286, 519, 291, 576, 643, 420, 512, 661, 7513, 300, 1580, 709, 544, 13494, 813, 385, 576, 643, 281, 808, 493, 365, 13, 51364, 51364, 8561, 13, 286, 534, 528, 281, 483, 666, 300, 13, 583, 457, 1338, 11, 281, 1066, 309, 281, 1066, 309, 412, 1496, 472, 510, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.09897467613220215, "compression_ratio": 1.7142857142857142, "no_caption_prob": 0.0001038953269016929}, {"id": 366, "seek": 133400, "start": 1354.0, "end": 1361.0, "text": " Cool. I really want to get into that. But but yeah, to keep it to keep it at level one here.", "tokens": [50364, 400, 321, 1310, 934, 321, 808, 281, 341, 1859, 11, 321, 393, 352, 646, 281, 300, 295, 437, 309, 390, 13, 583, 456, 311, 257, 2141, 11269, 295, 983, 300, 311, 406, 41183, 1553, 512, 3219, 2010, 1496, 1507, 300, 1391, 1177, 380, 300, 291, 300, 286, 519, 291, 576, 643, 420, 512, 661, 7513, 300, 1580, 709, 544, 13494, 813, 385, 576, 643, 281, 808, 493, 365, 13, 51364, 51364, 8561, 13, 286, 534, 528, 281, 483, 666, 300, 13, 583, 457, 1338, 11, 281, 1066, 309, 281, 1066, 309, 412, 1496, 472, 510, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.09897467613220215, "compression_ratio": 1.7142857142857142, "no_caption_prob": 0.0001038953269016929}, {"id": 367, "seek": 136100, "start": 1361.0, "end": 1375.0, "text": " I really like what you're saying about this philosophy of like, just as a broader concept in the Elm community, like, can we have our cake and eat it to as far as like, let's make it safer and easier.", "tokens": [50364, 286, 534, 411, 437, 291, 434, 1566, 466, 341, 10675, 295, 411, 11, 445, 382, 257, 13227, 3410, 294, 264, 2699, 76, 1768, 11, 411, 11, 393, 321, 362, 527, 5908, 293, 1862, 309, 281, 382, 1400, 382, 411, 11, 718, 311, 652, 309, 15856, 293, 3571, 13, 51064, 51064, 1664, 321, 393, 321, 558, 309, 311, 411, 11, 264, 636, 286, 600, 668, 1953, 466, 309, 307, 11, 393, 321, 13982, 4514, 30, 400, 341, 307, 286, 519, 437, 437, 2699, 76, 775, 11, 309, 311, 445, 411, 11, 309, 311, 1850, 281, 385, 983, 309, 311, 406, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.13363310006948617, "compression_ratio": 1.6828193832599119, "no_caption_prob": 2.1443580408231355e-05}, {"id": 368, "seek": 136100, "start": 1375.0, "end": 1387.0, "text": " Can we can we right it's like, the way I've been thinking about it is, can we leverage safety? And this is I think what what Elm does, it's just like, it's clear to me why it's not.", "tokens": [50364, 286, 534, 411, 437, 291, 434, 1566, 466, 341, 10675, 295, 411, 11, 445, 382, 257, 13227, 3410, 294, 264, 2699, 76, 1768, 11, 411, 11, 393, 321, 362, 527, 5908, 293, 1862, 309, 281, 382, 1400, 382, 411, 11, 718, 311, 652, 309, 15856, 293, 3571, 13, 51064, 51064, 1664, 321, 393, 321, 558, 309, 311, 411, 11, 264, 636, 286, 600, 668, 1953, 466, 309, 307, 11, 393, 321, 13982, 4514, 30, 400, 341, 307, 286, 519, 437, 437, 2699, 76, 775, 11, 309, 311, 445, 411, 11, 309, 311, 1850, 281, 385, 983, 309, 311, 406, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.13363310006948617, "compression_ratio": 1.6828193832599119, "no_caption_prob": 2.1443580408231355e-05}, {"id": 369, "seek": 138700, "start": 1387.0, "end": 1402.0, "text": " We sort of emphasize type safety in Elm. And I think some people may roll their eyes, which is fine. But I think the interesting insight for Elm and the thing that really struck me is like, let's leverage safety to make things more convenient.", "tokens": [50364, 492, 1333, 295, 16078, 2010, 4514, 294, 2699, 76, 13, 400, 286, 519, 512, 561, 815, 3373, 641, 2575, 11, 597, 307, 2489, 13, 583, 286, 519, 264, 1880, 11269, 337, 2699, 76, 293, 264, 551, 300, 534, 13159, 385, 307, 411, 11, 718, 311, 13982, 4514, 281, 652, 721, 544, 10851, 13, 51114, 51114], "temperature": 0.0, "avg_logprob": -0.08948545288621333, "compression_ratio": 1.4550898203592815, "no_caption_prob": 2.1443636796902865e-05}, {"id": 370, "seek": 140200, "start": 1402.0, "end": 1418.0, "text": " Like, like, and that's not always possible. I don't think I mean, how could it be but like, for the cases where it is, it's kind of magical. It's kind of like, okay, you ended up with this thing that is safer, and also better to work with.", "tokens": [50364, 1743, 11, 411, 11, 293, 300, 311, 406, 1009, 1944, 13, 286, 500, 380, 519, 286, 914, 11, 577, 727, 309, 312, 457, 411, 11, 337, 264, 3331, 689, 309, 307, 11, 309, 311, 733, 295, 12066, 13, 467, 311, 733, 295, 411, 11, 1392, 11, 291, 4590, 493, 365, 341, 551, 300, 307, 15856, 11, 293, 611, 1101, 281, 589, 365, 13, 51164, 51164, 400, 2171, 611, 4663, 13, 51264, 51264], "temperature": 0.0, "avg_logprob": -0.0669069934535671, "compression_ratio": 1.5113636363636365, "no_caption_prob": 4.029407591588097e-06}, {"id": 371, "seek": 140200, "start": 1418.0, "end": 1420.0, "text": " And sometimes also faster.", "tokens": [50364, 1743, 11, 411, 11, 293, 300, 311, 406, 1009, 1944, 13, 286, 500, 380, 519, 286, 914, 11, 577, 727, 309, 312, 457, 411, 11, 337, 264, 3331, 689, 309, 307, 11, 309, 311, 733, 295, 12066, 13, 467, 311, 733, 295, 411, 11, 1392, 11, 291, 4590, 493, 365, 341, 551, 300, 307, 15856, 11, 293, 611, 1101, 281, 589, 365, 13, 51164, 51164, 400, 2171, 611, 4663, 13, 51264, 51264], "temperature": 0.0, "avg_logprob": -0.0669069934535671, "compression_ratio": 1.5113636363636365, "no_caption_prob": 4.029407591588097e-06}, {"id": 372, "seek": 142000, "start": 1420.0, "end": 1432.0, "text": " Yeah, there's a there's a lot there's a lot of things that sort of pile up there. And, and if you focus too much of like, okay, we got the type safety or like, or I'm just gonna have type safety, type safety, blah, blah, blah, blah, blah.", "tokens": [50364, 865, 11, 456, 311, 257, 456, 311, 257, 688, 456, 311, 257, 688, 295, 721, 300, 1333, 295, 14375, 493, 456, 13, 400, 11, 293, 498, 291, 1879, 886, 709, 295, 411, 11, 1392, 11, 321, 658, 264, 2010, 4514, 420, 411, 11, 420, 286, 478, 445, 799, 362, 2010, 4514, 11, 2010, 4514, 11, 12288, 11, 12288, 11, 12288, 11, 12288, 11, 12288, 13, 50964, 50964, 759, 291, 500, 380, 4772, 309, 484, 365, 300, 661, 551, 295, 411, 11, 286, 669, 1237, 337, 4786, 281, 652, 341, 6252, 10851, 11, 291, 603, 291, 603, 2673, 917, 493, 365, 746, 300, 311, 411, 11, 1392, 11, 341, 1177, 380, 406, 411, 11, 437, 264, 12872, 669, 286, 884, 30, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.11822476694660802, "compression_ratio": 1.874015748031496, "no_caption_prob": 2.840835804818198e-05}, {"id": 373, "seek": 142000, "start": 1432.0, "end": 1445.0, "text": " If you don't balance it out with that other thing of like, I am looking for opportunities to make this incredibly convenient, you'll you'll usually end up with something that's like, okay, this doesn't not like, what the heck am I doing?", "tokens": [50364, 865, 11, 456, 311, 257, 456, 311, 257, 688, 456, 311, 257, 688, 295, 721, 300, 1333, 295, 14375, 493, 456, 13, 400, 11, 293, 498, 291, 1879, 886, 709, 295, 411, 11, 1392, 11, 321, 658, 264, 2010, 4514, 420, 411, 11, 420, 286, 478, 445, 799, 362, 2010, 4514, 11, 2010, 4514, 11, 12288, 11, 12288, 11, 12288, 11, 12288, 11, 12288, 13, 50964, 50964, 759, 291, 500, 380, 4772, 309, 484, 365, 300, 661, 551, 295, 411, 11, 286, 669, 1237, 337, 4786, 281, 652, 341, 6252, 10851, 11, 291, 603, 291, 603, 2673, 917, 493, 365, 746, 300, 311, 411, 11, 1392, 11, 341, 1177, 380, 406, 411, 11, 437, 264, 12872, 669, 286, 884, 30, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.11822476694660802, "compression_ratio": 1.874015748031496, "no_caption_prob": 2.840835804818198e-05}, {"id": 374, "seek": 144500, "start": 1445.0, "end": 1451.0, "text": " You know, like, I'm drowning in types. I don't feel great.", "tokens": [50364, 509, 458, 11, 411, 11, 286, 478, 37198, 294, 3467, 13, 286, 500, 380, 841, 869, 13, 50664, 50664], "temperature": 0.0, "avg_logprob": -0.10210975011189778, "compression_ratio": 0.8787878787878788, "no_caption_prob": 4.832128979614936e-05}, {"id": 375, "seek": 145100, "start": 1451.0, "end": 1480.0, "text": " There was, um, in my agile coaching days, I felt a similar tension, sometimes in a similar enthusiasm to like, dispel these myths that there's like a common perception that, you know, these these technical practices, like, you know, test driven development, or refactoring code and, you know, having having thoughtful, thoughtfully designed code that you iterate on and all of these things like slow you down.", "tokens": [50364, 821, 390, 11, 1105, 11, 294, 452, 30072, 15818, 1708, 11, 286, 2762, 257, 2531, 8980, 11, 2171, 294, 257, 2531, 23417, 281, 411, 11, 4920, 338, 613, 28205, 300, 456, 311, 411, 257, 2689, 12860, 300, 11, 291, 458, 11, 613, 613, 6191, 7525, 11, 411, 11, 291, 458, 11, 1500, 9555, 3250, 11, 420, 1895, 578, 3662, 3089, 293, 11, 291, 458, 11, 1419, 1419, 21566, 11, 1194, 2277, 4761, 3089, 300, 291, 44497, 322, 293, 439, 295, 613, 721, 411, 2964, 291, 760, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.09675160083141955, "compression_ratio": 1.7404255319148936, "no_caption_prob": 6.401730206562206e-05}, {"id": 376, "seek": 148000, "start": 1480.0, "end": 1503.0, "text": " You know, testing my code that's going to slow me down. Now I have to write a test, but it's feedback. It's shortening the feedback loop, and it both makes you go faster. And safety also gives you the confidence to just go and not look back not think about whether, whether you're doing something wrong, or whether, you know, some monster is going to trap you in a room.", "tokens": [50364, 509, 458, 11, 4997, 452, 3089, 300, 311, 516, 281, 2964, 385, 760, 13, 823, 286, 362, 281, 2464, 257, 1500, 11, 457, 309, 311, 5824, 13, 467, 311, 2099, 4559, 264, 5824, 6367, 11, 293, 309, 1293, 1669, 291, 352, 4663, 13, 400, 4514, 611, 2709, 291, 264, 6687, 281, 445, 352, 293, 406, 574, 646, 406, 519, 466, 1968, 11, 1968, 291, 434, 884, 746, 2085, 11, 420, 1968, 11, 291, 458, 11, 512, 10090, 307, 516, 281, 11487, 291, 294, 257, 1808, 13, 51514, 51514, 509, 458, 11, 309, 311, 588, 1737, 278, 13, 51614, 51614, 865, 13, 51664, 51664, 286, 11, 1338, 11, 558, 13, 865, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.1703824748163638, "compression_ratio": 1.721774193548387, "no_caption_prob": 5.475505895446986e-05}, {"id": 377, "seek": 148000, "start": 1503.0, "end": 1505.0, "text": " You know, it's very freeing.", "tokens": [50364, 509, 458, 11, 4997, 452, 3089, 300, 311, 516, 281, 2964, 385, 760, 13, 823, 286, 362, 281, 2464, 257, 1500, 11, 457, 309, 311, 5824, 13, 467, 311, 2099, 4559, 264, 5824, 6367, 11, 293, 309, 1293, 1669, 291, 352, 4663, 13, 400, 4514, 611, 2709, 291, 264, 6687, 281, 445, 352, 293, 406, 574, 646, 406, 519, 466, 1968, 11, 1968, 291, 434, 884, 746, 2085, 11, 420, 1968, 11, 291, 458, 11, 512, 10090, 307, 516, 281, 11487, 291, 294, 257, 1808, 13, 51514, 51514, 509, 458, 11, 309, 311, 588, 1737, 278, 13, 51614, 51614, 865, 13, 51664, 51664, 286, 11, 1338, 11, 558, 13, 865, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.1703824748163638, "compression_ratio": 1.721774193548387, "no_caption_prob": 5.475505895446986e-05}, {"id": 378, "seek": 148000, "start": 1505.0, "end": 1506.0, "text": " Yeah.", "tokens": [50364, 509, 458, 11, 4997, 452, 3089, 300, 311, 516, 281, 2964, 385, 760, 13, 823, 286, 362, 281, 2464, 257, 1500, 11, 457, 309, 311, 5824, 13, 467, 311, 2099, 4559, 264, 5824, 6367, 11, 293, 309, 1293, 1669, 291, 352, 4663, 13, 400, 4514, 611, 2709, 291, 264, 6687, 281, 445, 352, 293, 406, 574, 646, 406, 519, 466, 1968, 11, 1968, 291, 434, 884, 746, 2085, 11, 420, 1968, 11, 291, 458, 11, 512, 10090, 307, 516, 281, 11487, 291, 294, 257, 1808, 13, 51514, 51514, 509, 458, 11, 309, 311, 588, 1737, 278, 13, 51614, 51614, 865, 13, 51664, 51664, 286, 11, 1338, 11, 558, 13, 865, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.1703824748163638, "compression_ratio": 1.721774193548387, "no_caption_prob": 5.475505895446986e-05}, {"id": 379, "seek": 148000, "start": 1506.0, "end": 1509.0, "text": " I, yeah, right. Yeah.", "tokens": [50364, 509, 458, 11, 4997, 452, 3089, 300, 311, 516, 281, 2964, 385, 760, 13, 823, 286, 362, 281, 2464, 257, 1500, 11, 457, 309, 311, 5824, 13, 467, 311, 2099, 4559, 264, 5824, 6367, 11, 293, 309, 1293, 1669, 291, 352, 4663, 13, 400, 4514, 611, 2709, 291, 264, 6687, 281, 445, 352, 293, 406, 574, 646, 406, 519, 466, 1968, 11, 1968, 291, 434, 884, 746, 2085, 11, 420, 1968, 11, 291, 458, 11, 512, 10090, 307, 516, 281, 11487, 291, 294, 257, 1808, 13, 51514, 51514, 509, 458, 11, 309, 311, 588, 1737, 278, 13, 51614, 51614, 865, 13, 51664, 51664, 286, 11, 1338, 11, 558, 13, 865, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.1703824748163638, "compression_ratio": 1.721774193548387, "no_caption_prob": 5.475505895446986e-05}, {"id": 380, "seek": 150900, "start": 1509.0, "end": 1512.0, "text": " I can hear the flashbacks of your nightmares. Sorry to.", "tokens": [50364, 286, 393, 1568, 264, 7319, 17758, 295, 428, 36911, 13, 4919, 281, 13, 50514, 50514, 876, 11, 1265, 13, 50614, 50614, 407, 1338, 11, 370, 370, 1310, 281, 1565, 309, 926, 11, 411, 11, 445, 570, 286, 5334, 365, 512, 365, 264, 598, 1766, 1507, 13, 467, 311, 1310, 291, 434, 4763, 309, 293, 5413, 322, 428, 1752, 11, 291, 815, 312, 588, 6751, 365, 316, 6840, 82, 420, 406, 11, 1310, 300, 1433, 307, 767, 733, 295, 10346, 1929, 293, 3657, 11, 597, 307, 3143, 13, 51564, 51564, 467, 311, 588, 12649, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.1589256306083835, "compression_ratio": 1.553191489361702, "no_caption_prob": 0.0001253157970495522}, {"id": 381, "seek": 150900, "start": 1512.0, "end": 1514.0, "text": " Oh, God.", "tokens": [50364, 286, 393, 1568, 264, 7319, 17758, 295, 428, 36911, 13, 4919, 281, 13, 50514, 50514, 876, 11, 1265, 13, 50614, 50614, 407, 1338, 11, 370, 370, 1310, 281, 1565, 309, 926, 11, 411, 11, 445, 570, 286, 5334, 365, 512, 365, 264, 598, 1766, 1507, 13, 467, 311, 1310, 291, 434, 4763, 309, 293, 5413, 322, 428, 1752, 11, 291, 815, 312, 588, 6751, 365, 316, 6840, 82, 420, 406, 11, 1310, 300, 1433, 307, 767, 733, 295, 10346, 1929, 293, 3657, 11, 597, 307, 3143, 13, 51564, 51564, 467, 311, 588, 12649, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.1589256306083835, "compression_ratio": 1.553191489361702, "no_caption_prob": 0.0001253157970495522}, {"id": 382, "seek": 150900, "start": 1514.0, "end": 1533.0, "text": " So yeah, so so maybe to bring it around, like, just because I realized with some with the cogen stuff. It's maybe you're hearing it and depending on your experience, you may be very experienced with ASTs or not, maybe that term is actually kind of arcane and weird, which is fair.", "tokens": [50364, 286, 393, 1568, 264, 7319, 17758, 295, 428, 36911, 13, 4919, 281, 13, 50514, 50514, 876, 11, 1265, 13, 50614, 50614, 407, 1338, 11, 370, 370, 1310, 281, 1565, 309, 926, 11, 411, 11, 445, 570, 286, 5334, 365, 512, 365, 264, 598, 1766, 1507, 13, 467, 311, 1310, 291, 434, 4763, 309, 293, 5413, 322, 428, 1752, 11, 291, 815, 312, 588, 6751, 365, 316, 6840, 82, 420, 406, 11, 1310, 300, 1433, 307, 767, 733, 295, 10346, 1929, 293, 3657, 11, 597, 307, 3143, 13, 51564, 51564, 467, 311, 588, 12649, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.1589256306083835, "compression_ratio": 1.553191489361702, "no_caption_prob": 0.0001253157970495522}, {"id": 383, "seek": 150900, "start": 1533.0, "end": 1535.0, "text": " It's very abstract.", "tokens": [50364, 286, 393, 1568, 264, 7319, 17758, 295, 428, 36911, 13, 4919, 281, 13, 50514, 50514, 876, 11, 1265, 13, 50614, 50614, 407, 1338, 11, 370, 370, 1310, 281, 1565, 309, 926, 11, 411, 11, 445, 570, 286, 5334, 365, 512, 365, 264, 598, 1766, 1507, 13, 467, 311, 1310, 291, 434, 4763, 309, 293, 5413, 322, 428, 1752, 11, 291, 815, 312, 588, 6751, 365, 316, 6840, 82, 420, 406, 11, 1310, 300, 1433, 307, 767, 733, 295, 10346, 1929, 293, 3657, 11, 597, 307, 3143, 13, 51564, 51564, 467, 311, 588, 12649, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.1589256306083835, "compression_ratio": 1.553191489361702, "no_caption_prob": 0.0001253157970495522}, {"id": 384, "seek": 153500, "start": 1535.0, "end": 1552.0, "text": " Yeah, kind of what it comes down to practically is if you're like, you know, I really want to be able to generate some code some Elm code that, like, is basically just a view function, like it's some HTML calls.", "tokens": [50364, 865, 11, 733, 295, 437, 309, 1487, 760, 281, 15667, 307, 498, 291, 434, 411, 11, 291, 458, 11, 286, 534, 528, 281, 312, 1075, 281, 8460, 512, 3089, 512, 2699, 76, 3089, 300, 11, 411, 11, 307, 1936, 445, 257, 1910, 2445, 11, 411, 309, 311, 512, 17995, 5498, 13, 51214, 51214], "temperature": 0.0, "avg_logprob": -0.1357534321871671, "compression_ratio": 1.4161073825503356, "no_caption_prob": 2.5463967176619917e-05}, {"id": 385, "seek": 155200, "start": 1552.0, "end": 1566.0, "text": " What you would do is you would say Elm cogen install Elm HTML, that would give you this little helper module, you could then use that helper module with just like as you'd use any other kind of local module.", "tokens": [50364, 708, 291, 576, 360, 307, 291, 576, 584, 2699, 76, 598, 1766, 3625, 2699, 76, 17995, 11, 300, 576, 976, 291, 341, 707, 36133, 10088, 11, 291, 727, 550, 764, 300, 36133, 10088, 365, 445, 411, 382, 291, 1116, 764, 604, 661, 733, 295, 2654, 10088, 13, 51064, 51064, 400, 291, 1116, 2464, 3089, 300, 1542, 257, 688, 411, 257, 1910, 2445, 11, 746, 291, 434, 1217, 884, 13, 400, 264, 293, 550, 291, 2045, 1190, 293, 291, 445, 362, 300, 11, 300, 576, 312, 6342, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.09299593705397385, "compression_ratio": 1.7348837209302326, "no_caption_prob": 1.1125030141556635e-05}, {"id": 386, "seek": 155200, "start": 1566.0, "end": 1577.0, "text": " And you'd write code that looks a lot like a view function, something you're already doing. And the and then you hit run and you just have that, that would be yours.", "tokens": [50364, 708, 291, 576, 360, 307, 291, 576, 584, 2699, 76, 598, 1766, 3625, 2699, 76, 17995, 11, 300, 576, 976, 291, 341, 707, 36133, 10088, 11, 291, 727, 550, 764, 300, 36133, 10088, 365, 445, 411, 382, 291, 1116, 764, 604, 661, 733, 295, 2654, 10088, 13, 51064, 51064, 400, 291, 1116, 2464, 3089, 300, 1542, 257, 688, 411, 257, 1910, 2445, 11, 746, 291, 434, 1217, 884, 13, 400, 264, 293, 550, 291, 2045, 1190, 293, 291, 445, 362, 300, 11, 300, 576, 312, 6342, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.09299593705397385, "compression_ratio": 1.7348837209302326, "no_caption_prob": 1.1125030141556635e-05}, {"id": 387, "seek": 157700, "start": 1577.0, "end": 1592.0, "text": " And if you wanted to get crazier, you can push it farther. And there's some cool things you can do there too. But like, just to anchor the concrete part of this, it's like, it's so easy to be like, okay, here's this high level, you know, thing like, oh, they said it was so convenient and so safe.", "tokens": [50364, 400, 498, 291, 1415, 281, 483, 2094, 33352, 11, 291, 393, 2944, 309, 20344, 13, 400, 456, 311, 512, 1627, 721, 291, 393, 360, 456, 886, 13, 583, 411, 11, 445, 281, 18487, 264, 9859, 644, 295, 341, 11, 309, 311, 411, 11, 309, 311, 370, 1858, 281, 312, 411, 11, 1392, 11, 510, 311, 341, 1090, 1496, 11, 291, 458, 11, 551, 411, 11, 1954, 11, 436, 848, 309, 390, 370, 10851, 293, 370, 3273, 13, 51114, 51114, 400, 309, 311, 411, 11, 731, 11, 457, 457, 411, 11, 437, 645, 436, 767, 884, 30, 1779, 30, 51314, 51314], "temperature": 0.0, "avg_logprob": -0.09099448895921894, "compression_ratio": 1.6666666666666667, "no_caption_prob": 0.00013548597053159028}, {"id": 388, "seek": 157700, "start": 1592.0, "end": 1596.0, "text": " And it's like, well, but but like, what were they actually doing? Right?", "tokens": [50364, 400, 498, 291, 1415, 281, 483, 2094, 33352, 11, 291, 393, 2944, 309, 20344, 13, 400, 456, 311, 512, 1627, 721, 291, 393, 360, 456, 886, 13, 583, 411, 11, 445, 281, 18487, 264, 9859, 644, 295, 341, 11, 309, 311, 411, 11, 309, 311, 370, 1858, 281, 312, 411, 11, 1392, 11, 510, 311, 341, 1090, 1496, 11, 291, 458, 11, 551, 411, 11, 1954, 11, 436, 848, 309, 390, 370, 10851, 293, 370, 3273, 13, 51114, 51114, 400, 309, 311, 411, 11, 731, 11, 457, 457, 411, 11, 437, 645, 436, 767, 884, 30, 1779, 30, 51314, 51314], "temperature": 0.0, "avg_logprob": -0.09099448895921894, "compression_ratio": 1.6666666666666667, "no_caption_prob": 0.00013548597053159028}, {"id": 389, "seek": 159600, "start": 1596.0, "end": 1616.0, "text": " Yeah, it basically is trying to mirror what your generated code would look like as much as possible, right? Like you Elm dash code gen, install Elm slash time. And then in your generate dot Elm module that generates your Elm code gen code, you do import gen dot time.", "tokens": [50364, 865, 11, 309, 1936, 307, 1382, 281, 8013, 437, 428, 10833, 3089, 576, 574, 411, 382, 709, 382, 1944, 11, 558, 30, 1743, 291, 2699, 76, 8240, 3089, 1049, 11, 3625, 2699, 76, 17330, 565, 13, 400, 550, 294, 428, 8460, 5893, 2699, 76, 10088, 300, 23815, 428, 2699, 76, 3089, 1049, 3089, 11, 291, 360, 974, 1049, 5893, 565, 13, 51364, 51364], "temperature": 0.0, "avg_logprob": -0.12552463824932392, "compression_ratio": 1.5892857142857142, "no_caption_prob": 3.480625673546456e-05}, {"id": 390, "seek": 161600, "start": 1616.0, "end": 1633.0, "text": " And then you do gen dot time dot millis two posix or whatever function call and you millis two posix takes an int and gen dot time dot millis two posix takes an int. And so it looks like the code you you're actually generating.", "tokens": [50364, 400, 550, 291, 360, 1049, 5893, 565, 5893, 1728, 271, 732, 1366, 970, 420, 2035, 2445, 818, 293, 291, 1728, 271, 732, 1366, 970, 2516, 364, 560, 293, 1049, 5893, 565, 5893, 1728, 271, 732, 1366, 970, 2516, 364, 560, 13, 400, 370, 309, 1542, 411, 264, 3089, 291, 291, 434, 767, 17746, 13, 51214, 51214, 663, 311, 558, 13, 3802, 11, 309, 2516, 364, 12897, 420, 309, 2516, 364, 6114, 11, 8460, 6114, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.230472830277455, "compression_ratio": 1.8411764705882352, "no_caption_prob": 2.796901753754355e-05}, {"id": 391, "seek": 161600, "start": 1633.0, "end": 1638.0, "text": " That's right. Wait, it takes an intro or it takes an expression, generate expression.", "tokens": [50364, 400, 550, 291, 360, 1049, 5893, 565, 5893, 1728, 271, 732, 1366, 970, 420, 2035, 2445, 818, 293, 291, 1728, 271, 732, 1366, 970, 2516, 364, 560, 293, 1049, 5893, 565, 5893, 1728, 271, 732, 1366, 970, 2516, 364, 560, 13, 400, 370, 309, 1542, 411, 264, 3089, 291, 291, 434, 767, 17746, 13, 51214, 51214, 663, 311, 558, 13, 3802, 11, 309, 2516, 364, 12897, 420, 309, 2516, 364, 6114, 11, 8460, 6114, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.230472830277455, "compression_ratio": 1.8411764705882352, "no_caption_prob": 2.796901753754355e-05}, {"id": 392, "seek": 163800, "start": 1638.0, "end": 1653.0, "text": " It takes an int. But it correct me if I'm wrong, Matt, but it provides an escape hatch if you want to provide a general expression, but the more low hanging fruit way to consume it assumes it just takes a literal int that you already have.", "tokens": [50364, 467, 2516, 364, 560, 13, 583, 309, 3006, 385, 498, 286, 478, 2085, 11, 7397, 11, 457, 309, 6417, 364, 7615, 17387, 498, 291, 528, 281, 2893, 257, 2674, 6114, 11, 457, 264, 544, 2295, 8345, 6773, 636, 281, 14732, 309, 37808, 309, 445, 2516, 257, 20411, 560, 300, 291, 1217, 362, 13, 51114, 51114], "temperature": 0.0, "avg_logprob": -0.10884418822171395, "compression_ratio": 1.484472049689441, "no_caption_prob": 7.484277011826634e-05}, {"id": 393, "seek": 165300, "start": 1653.0, "end": 1672.0, "text": " Yeah, so the base assumption, the place you start with Elm code gen is the thing that is most convenient is that you probably and this gets into the use cases, but you probably know concretely the values you're putting into these functions at build time in the most common", "tokens": [50364, 865, 11, 370, 264, 3096, 15302, 11, 264, 1081, 291, 722, 365, 2699, 76, 3089, 1049, 307, 264, 551, 300, 307, 881, 10851, 307, 300, 291, 1391, 293, 341, 2170, 666, 264, 764, 3331, 11, 457, 291, 1391, 458, 39481, 736, 264, 4190, 291, 434, 3372, 666, 613, 6828, 412, 1322, 565, 294, 264, 881, 2689, 51314, 51314], "temperature": 0.0, "avg_logprob": -0.08593788941701254, "compression_ratio": 1.590643274853801, "no_caption_prob": 3.169191040797159e-05}, {"id": 394, "seek": 167200, "start": 1672.0, "end": 1689.0, "text": " to in the land. It's always like a gradient rate, like how far you go, right? But the most we want to say, like, okay, 85% of the time, you're going to be doing this. It's like, great, we're going to make that super convenient. Like, oh, you want to like you have an integer already almost by definition, you're", "tokens": [50364, 281, 294, 264, 2117, 13, 467, 311, 1009, 411, 257, 16235, 3314, 11, 411, 577, 1400, 291, 352, 11, 558, 30, 583, 264, 881, 321, 528, 281, 584, 11, 411, 11, 1392, 11, 14695, 4, 295, 264, 565, 11, 291, 434, 516, 281, 312, 884, 341, 13, 467, 311, 411, 11, 869, 11, 321, 434, 516, 281, 652, 300, 1687, 10851, 13, 1743, 11, 1954, 11, 291, 528, 281, 411, 291, 362, 364, 24922, 1217, 1920, 538, 7123, 11, 291, 434, 51214, 51214], "temperature": 0.0, "avg_logprob": -0.1961190616383272, "compression_ratio": 1.586734693877551, "no_caption_prob": 3.59115147148259e-05}, {"id": 395, "seek": 168900, "start": 1689.0, "end": 1708.0, "text": " you're taking some source, some, you know, source of truth, right? The figma, the figma API, or like a graph qL, like schema, which you have these literal values or, you know, and we can just skip the abstract part, nearly completely, like, we are still generating an expression, right?", "tokens": [50364, 291, 434, 1940, 512, 4009, 11, 512, 11, 291, 458, 11, 4009, 295, 3494, 11, 558, 30, 440, 2147, 1696, 11, 264, 2147, 1696, 9362, 11, 420, 411, 257, 4295, 9505, 43, 11, 411, 34078, 11, 597, 291, 362, 613, 20411, 4190, 420, 11, 291, 458, 11, 293, 321, 393, 445, 10023, 264, 12649, 644, 11, 6217, 2584, 11, 411, 11, 321, 366, 920, 17746, 364, 6114, 11, 558, 30, 51314, 51314], "temperature": 0.0, "avg_logprob": -0.1407837996611724, "compression_ratio": 1.5052631578947369, "no_caption_prob": 2.355200376769062e-05}, {"id": 396, "seek": 170800, "start": 1708.0, "end": 1723.0, "text": " But, but you provide a concrete values, and you basically get kind of what you were expecting. And like, I think you all of a sudden don't need to think about stuff, which was causing us a decent amount of pain, which is like, imports, like, you use the age, use the time library, oh, it's important.", "tokens": [50364, 583, 11, 457, 291, 2893, 257, 9859, 4190, 11, 293, 291, 1936, 483, 733, 295, 437, 291, 645, 9650, 13, 400, 411, 11, 286, 519, 291, 439, 295, 257, 3990, 500, 380, 643, 281, 519, 466, 1507, 11, 597, 390, 9853, 505, 257, 8681, 2372, 295, 1822, 11, 597, 307, 411, 11, 41596, 11, 411, 11, 291, 764, 264, 3205, 11, 764, 264, 565, 6405, 11, 1954, 11, 309, 311, 1021, 13, 51114, 51114], "temperature": 0.0, "avg_logprob": -0.0967537478396767, "compression_ratio": 1.5463917525773196, "no_caption_prob": 0.00013133400352671742}, {"id": 397, "seek": 172300, "start": 1723.0, "end": 1746.0, "text": " And you probably didn't even work like have to worry that that was like a thing. Hopefully, hopefully you're using this for like a few days, you're like, oh, wait, oh, interesting. Okay. Or like, sometimes, like a library doesn't even need to be important, if it's like list or something. And it knows, in most cases, there's still a few things I need to a few like little subtle bugs like that I need to smash, but like, it'll know like, oh, yeah, list dot map. Great.", "tokens": [50364, 400, 291, 1391, 994, 380, 754, 589, 411, 362, 281, 3292, 300, 300, 390, 411, 257, 551, 13, 10429, 11, 4696, 291, 434, 1228, 341, 337, 411, 257, 1326, 1708, 11, 291, 434, 411, 11, 1954, 11, 1699, 11, 1954, 11, 1880, 13, 1033, 13, 1610, 411, 11, 2171, 11, 411, 257, 6405, 1177, 380, 754, 643, 281, 312, 1021, 11, 498, 309, 311, 411, 1329, 420, 746, 13, 400, 309, 3255, 11, 294, 881, 3331, 11, 456, 311, 920, 257, 1326, 721, 286, 643, 281, 257, 1326, 411, 707, 13743, 15120, 411, 300, 286, 643, 281, 17960, 11, 457, 411, 11, 309, 603, 458, 411, 11, 1954, 11, 1338, 11, 1329, 5893, 4471, 13, 3769, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.1528707614614944, "compression_ratio": 1.817829457364341, "no_caption_prob": 3.169197589159012e-05}, {"id": 398, "seek": 174600, "start": 1746.0, "end": 1774.0, "text": " I love that declarative quality. Does it also help you because so I've I've done a lot of string based code generation in JavaScript, and in Elm to generate Elm code. And so I'm very familiar with the pain points you're addressing, including the creating the correct imports, resolving type signatures correctly for types that you're sort of piecing together, it gets really tricky.", "tokens": [50364, 286, 959, 300, 16694, 1166, 3125, 13, 4402, 309, 611, 854, 291, 570, 370, 286, 600, 286, 600, 1096, 257, 688, 295, 6798, 2361, 3089, 5125, 294, 15778, 11, 293, 294, 2699, 76, 281, 8460, 2699, 76, 3089, 13, 400, 370, 286, 478, 588, 4963, 365, 264, 1822, 2793, 291, 434, 14329, 11, 3009, 264, 4084, 264, 3006, 41596, 11, 49940, 2010, 32322, 8944, 337, 3467, 300, 291, 434, 1333, 295, 1730, 2175, 1214, 11, 309, 2170, 534, 12414, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.07042405718848818, "compression_ratio": 1.598326359832636, "no_caption_prob": 4.4692504161503166e-05}, {"id": 399, "seek": 177400, "start": 1774.0, "end": 1792.0, "text": " Also, like creating parameters that aren't going to have name collisions is, oh, is that also something that Elm code gen helps with like giving you valid parameter names that won't. So it's funny, like in focusing on the convenience, I skipped over like a decent amount that Elm code gen does.", "tokens": [50364, 2743, 11, 411, 4084, 9834, 300, 3212, 380, 516, 281, 362, 1315, 46537, 307, 11, 1954, 11, 307, 300, 611, 746, 300, 2699, 76, 3089, 1049, 3665, 365, 411, 2902, 291, 7363, 13075, 5288, 300, 1582, 380, 13, 407, 309, 311, 4074, 11, 411, 294, 8416, 322, 264, 19283, 11, 286, 30193, 670, 411, 257, 8681, 2372, 300, 2699, 76, 3089, 1049, 775, 13, 51264, 51264], "temperature": 0.0, "avg_logprob": -0.21749096758225384, "compression_ratio": 1.5978260869565217, "no_caption_prob": 0.00010719754209276289}, {"id": 400, "seek": 179200, "start": 1792.0, "end": 1821.0, "text": " Some of it. Yeah, maybe need some love, but it does track naming collisions. Not completely. So top level values aren't checked, you have to verify those. But those are usually pretty easy to verify, like if you have a top level value. And when you get into like building the body of something, it's actually tracking a set of like a scope of basically what values are in there.", "tokens": [50364, 2188, 295, 309, 13, 865, 11, 1310, 643, 512, 959, 11, 457, 309, 775, 2837, 25290, 46537, 13, 1726, 2584, 13, 407, 1192, 1496, 4190, 3212, 380, 10033, 11, 291, 362, 281, 16888, 729, 13, 583, 729, 366, 2673, 1238, 1858, 281, 16888, 11, 411, 498, 291, 362, 257, 1192, 1496, 2158, 13, 400, 562, 291, 483, 666, 411, 2390, 264, 1772, 295, 746, 11, 309, 311, 767, 11603, 257, 992, 295, 411, 257, 11923, 295, 1936, 437, 4190, 366, 294, 456, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.14443605795673942, "compression_ratio": 1.6363636363636365, "no_caption_prob": 7.48380261939019e-05}, {"id": 401, "seek": 182100, "start": 1821.0, "end": 1833.0, "text": " And basically what values are in scope. And like, and add again, like, if it does detect a collision, it'll add in a little like underscore and then a bunch of numbers, I guess kind of like a little protection thing.", "tokens": [50364, 400, 1936, 437, 4190, 366, 294, 11923, 13, 400, 411, 11, 293, 909, 797, 11, 411, 11, 498, 309, 775, 5531, 257, 24644, 11, 309, 603, 909, 294, 257, 707, 411, 37556, 293, 550, 257, 3840, 295, 3547, 11, 286, 2041, 733, 295, 411, 257, 707, 6334, 551, 13, 50964, 50964], "temperature": 0.0, "avg_logprob": -0.20286955923404335, "compression_ratio": 1.44, "no_caption_prob": 2.178184331569355e-05}, {"id": 402, "seek": 183300, "start": 1833.0, "end": 1853.0, "text": " But it's not 100%. Like there are still some cases to catch. And like the challenging part with this, and where I was trying to get to is, like, if it doesn't have to protect a variable, it shouldn't. Because we want the code that's generated to be nice to look at.", "tokens": [50364, 583, 309, 311, 406, 2319, 6856, 1743, 456, 366, 920, 512, 3331, 281, 3745, 13, 400, 411, 264, 7595, 644, 365, 341, 11, 293, 689, 286, 390, 1382, 281, 483, 281, 307, 11, 411, 11, 498, 309, 1177, 380, 362, 281, 2371, 257, 7006, 11, 309, 4659, 380, 13, 1436, 321, 528, 264, 3089, 300, 311, 10833, 281, 312, 1481, 281, 574, 412, 13, 51364, 51364], "temperature": 0.0, "avg_logprob": -0.13791454539579504, "compression_ratio": 1.4480874316939891, "no_caption_prob": 5.22506088600494e-05}, {"id": 403, "seek": 185300, "start": 1853.0, "end": 1880.0, "text": " And the primary use case could be generating examples. In fact, there's a discussion we should have about that because there's some interesting stuff there. But the code that's generated, I absolutely want it to be inspectable, like with the Elm GQL utility, which is coming up for release and, you know, however many periods of time soon.", "tokens": [50364, 400, 264, 6194, 764, 1389, 727, 312, 17746, 5110, 13, 682, 1186, 11, 456, 311, 257, 5017, 321, 820, 362, 466, 300, 570, 456, 311, 512, 1880, 1507, 456, 13, 583, 264, 3089, 300, 311, 10833, 11, 286, 3122, 528, 309, 281, 312, 15018, 712, 11, 411, 365, 264, 2699, 76, 460, 13695, 14877, 11, 597, 307, 1348, 493, 337, 4374, 293, 11, 291, 458, 11, 4461, 867, 13804, 295, 565, 2321, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.14588450146959975, "compression_ratio": 1.5, "no_caption_prob": 7.601820834679529e-05}, {"id": 404, "seek": 188000, "start": 1880.0, "end": 1905.0, "text": " We've been using it at vendor for the past year and a half, and it's been incredibly successful. So it's, it's more just like documentation needs to get up. But the idea there was that you'd write some graph QL, you'd write a query, you'd write a mutation, and you'd be able to look at the generated Elm code and looking at the generated Elm code would be like, should be like reading really well written Elm code, it should be very simple, very straightforward.", "tokens": [50364, 492, 600, 668, 1228, 309, 412, 24321, 337, 264, 1791, 1064, 293, 257, 1922, 11, 293, 309, 311, 668, 6252, 4406, 13, 407, 309, 311, 11, 309, 311, 544, 445, 411, 14333, 2203, 281, 483, 493, 13, 583, 264, 1558, 456, 390, 300, 291, 1116, 2464, 512, 4295, 1249, 43, 11, 291, 1116, 2464, 257, 14581, 11, 291, 1116, 2464, 257, 27960, 11, 293, 291, 1116, 312, 1075, 281, 574, 412, 264, 10833, 2699, 76, 3089, 293, 1237, 412, 264, 10833, 2699, 76, 3089, 576, 312, 411, 11, 820, 312, 411, 3760, 534, 731, 3720, 2699, 76, 3089, 11, 309, 820, 312, 588, 2199, 11, 588, 15325, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.12377590792519706, "compression_ratio": 1.7837837837837838, "no_caption_prob": 1.6187037545023486e-05}, {"id": 405, "seek": 190500, "start": 1905.0, "end": 1922.0, "text": " Here are the types that are coming in to run this query or mutation. Here are the types, here's the data you're going to get out. Like you don't worry about decoders, don't worry about whatever, you know that it matches the graph QL schema perfectly, right. And the generated code is part of the interface of that library.", "tokens": [50364, 1692, 366, 264, 3467, 300, 366, 1348, 294, 281, 1190, 341, 14581, 420, 27960, 13, 1692, 366, 264, 3467, 11, 510, 311, 264, 1412, 291, 434, 516, 281, 483, 484, 13, 1743, 291, 500, 380, 3292, 466, 979, 378, 433, 11, 500, 380, 3292, 466, 2035, 11, 291, 458, 300, 309, 10676, 264, 4295, 1249, 43, 34078, 6239, 11, 558, 13, 400, 264, 10833, 3089, 307, 644, 295, 264, 9226, 295, 300, 6405, 13, 51214, 51214], "temperature": 0.0, "avg_logprob": -0.12486764712211414, "compression_ratio": 1.634517766497462, "no_caption_prob": 9.026080806506798e-05}, {"id": 406, "seek": 192200, "start": 1922.0, "end": 1950.0, "text": " It's like you're supposed to look at it, even to the point where what I was talking with was developing this with some of my co workers, like Duncan Malashok, and I were looking at this. And they made a suggestion at a certain point that even with the code being generated, it would be useful if we had examples of running that query,", "tokens": [50364, 467, 311, 411, 291, 434, 3442, 281, 574, 412, 309, 11, 754, 281, 264, 935, 689, 437, 286, 390, 1417, 365, 390, 6416, 341, 365, 512, 295, 452, 598, 5600, 11, 411, 31942, 5746, 1299, 453, 11, 293, 286, 645, 1237, 412, 341, 13, 400, 436, 1027, 257, 16541, 412, 257, 1629, 935, 300, 754, 365, 264, 3089, 885, 10833, 11, 309, 576, 312, 4420, 498, 321, 632, 5110, 295, 2614, 300, 14581, 11, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.12875012862376678, "compression_ratio": 1.5462962962962963, "no_caption_prob": 0.00014650696539320052}, {"id": 407, "seek": 195000, "start": 1950.0, "end": 1963.0, "text": " especially if the inputs to that query were a little bit more involved. Sometimes they are, and inputs have turned out to be challenging with graph QL and Elm for various sort of subtle and dumb reasons.", "tokens": [50364, 2318, 498, 264, 15743, 281, 300, 14581, 645, 257, 707, 857, 544, 3288, 13, 4803, 436, 366, 11, 293, 15743, 362, 3574, 484, 281, 312, 7595, 365, 4295, 1249, 43, 293, 2699, 76, 337, 3683, 1333, 295, 13743, 293, 10316, 4112, 13, 51014, 51014], "temperature": 0.0, "avg_logprob": -0.07866203784942627, "compression_ratio": 1.3624161073825503, "no_caption_prob": 6.814064545324072e-05}, {"id": 408, "seek": 196300, "start": 1963.0, "end": 1984.0, "text": " And so I went down the whole rabbit hole of generating example code that actually turned out to be pretty cool. You know, you basically you say like, okay, we have this schema, we're going to say, well, you know, Dylan, you made this joke when we were getting coffee the other day, like computer, get me a, get me a, you know, a filter, a person filter.", "tokens": [50364, 400, 370, 286, 1437, 760, 264, 1379, 19509, 5458, 295, 17746, 1365, 3089, 300, 767, 3574, 484, 281, 312, 1238, 1627, 13, 509, 458, 11, 291, 1936, 291, 584, 411, 11, 1392, 11, 321, 362, 341, 34078, 11, 321, 434, 516, 281, 584, 11, 731, 11, 291, 458, 11, 28160, 11, 291, 1027, 341, 7647, 562, 321, 645, 1242, 4982, 264, 661, 786, 11, 411, 3820, 11, 483, 385, 257, 11, 483, 385, 257, 11, 291, 458, 11, 257, 6608, 11, 257, 954, 6608, 13, 51414, 51414, 865, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.12033582502795805, "compression_ratio": 1.639269406392694, "no_caption_prob": 9.914331167237833e-05}, {"id": 409, "seek": 196300, "start": 1984.0, "end": 1986.0, "text": " Yeah.", "tokens": [50364, 400, 370, 286, 1437, 760, 264, 1379, 19509, 5458, 295, 17746, 1365, 3089, 300, 767, 3574, 484, 281, 312, 1238, 1627, 13, 509, 458, 11, 291, 1936, 291, 584, 411, 11, 1392, 11, 321, 362, 341, 34078, 11, 321, 434, 516, 281, 584, 11, 731, 11, 291, 458, 11, 28160, 11, 291, 1027, 341, 7647, 562, 321, 645, 1242, 4982, 264, 661, 786, 11, 411, 3820, 11, 483, 385, 257, 11, 483, 385, 257, 11, 291, 458, 11, 257, 6608, 11, 257, 954, 6608, 13, 51414, 51414, 865, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.12033582502795805, "compression_ratio": 1.639269406392694, "no_caption_prob": 9.914331167237833e-05}, {"id": 410, "seek": 198600, "start": 1986.0, "end": 2011.0, "text": " And then, you know, you have it run out and try to construct a value. And what we found with construct and so with that example code, what was so nice, and I think is something that what I want as an area for Elm code gen that I'm currently exploring and we'll be talking about at Strangeloop of example code generation and how to leverage that into something as a developer resource, right?", "tokens": [50364, 400, 550, 11, 291, 458, 11, 291, 362, 309, 1190, 484, 293, 853, 281, 7690, 257, 2158, 13, 400, 437, 321, 1352, 365, 7690, 293, 370, 365, 300, 1365, 3089, 11, 437, 390, 370, 1481, 11, 293, 286, 519, 307, 746, 300, 437, 286, 528, 382, 364, 1859, 337, 2699, 76, 3089, 1049, 300, 286, 478, 4362, 12736, 293, 321, 603, 312, 1417, 466, 412, 8251, 14282, 15812, 295, 1365, 3089, 5125, 293, 577, 281, 13982, 300, 666, 746, 382, 257, 10754, 7684, 11, 558, 30, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.17706807454427084, "compression_ratio": 1.7074235807860263, "no_caption_prob": 3.321082112961449e-05}, {"id": 411, "seek": 201100, "start": 2011.0, "end": 2030.0, "text": " So, you know, I think it's like, let's be fair, copying and pasting something, and maybe editing it, or like, tweaking it. I mean, you could be like, that's so dumb, you know, like, go to stack overflow and get a thing. It's like, yeah, but we know that this code is like, on some level, some level correct.", "tokens": [50364, 407, 11, 291, 458, 11, 286, 519, 309, 311, 411, 11, 718, 311, 312, 3143, 11, 27976, 293, 1791, 278, 746, 11, 293, 1310, 10000, 309, 11, 420, 411, 11, 6986, 2456, 309, 13, 286, 914, 11, 291, 727, 312, 411, 11, 300, 311, 370, 10316, 11, 291, 458, 11, 411, 11, 352, 281, 8630, 37772, 293, 483, 257, 551, 13, 467, 311, 411, 11, 1338, 11, 457, 321, 458, 300, 341, 3089, 307, 411, 11, 322, 512, 1496, 11, 512, 1496, 3006, 13, 51314, 51314], "temperature": 0.0, "avg_logprob": -0.27079419656233356, "compression_ratio": 1.7055555555555555, "no_caption_prob": 4.005800292361528e-05}, {"id": 412, "seek": 203000, "start": 2030.0, "end": 2051.0, "text": " And so it's actually very useful to be able to copy and paste and remove some of this, you know, you're like, oh, I don't need that. I don't need that, whatever, whatever. And then you have a thing, it's like, okay, wonderful. Here we go. We actually used that to take it further, like, okay, well, we generate these example calls, basically to make using this stuff useful.", "tokens": [50364, 400, 370, 309, 311, 767, 588, 4420, 281, 312, 1075, 281, 5055, 293, 9163, 293, 4159, 512, 295, 341, 11, 291, 458, 11, 291, 434, 411, 11, 1954, 11, 286, 500, 380, 643, 300, 13, 286, 500, 380, 643, 300, 11, 2035, 11, 2035, 13, 400, 550, 291, 362, 257, 551, 11, 309, 311, 411, 11, 1392, 11, 3715, 13, 1692, 321, 352, 13, 492, 767, 1143, 300, 281, 747, 309, 3052, 11, 411, 11, 1392, 11, 731, 11, 321, 8460, 613, 1365, 5498, 11, 1936, 281, 652, 1228, 341, 1507, 4420, 13, 51414, 51414], "temperature": 0.0, "avg_logprob": -0.12947899533301285, "compression_ratio": 1.6846846846846846, "no_caption_prob": 4.832040212932043e-05}, {"id": 413, "seek": 205100, "start": 2051.0, "end": 2073.0, "text": " Now, some things happened. One, we, so small bit of background with GQL inputs cannot have unions, which means that are certain ways that you want to generate, you want to like provide a input, you want to say like, it's one of these values, and you kind of can't do that.", "tokens": [50364, 823, 11, 512, 721, 2011, 13, 1485, 11, 321, 11, 370, 1359, 857, 295, 3678, 365, 460, 13695, 15743, 2644, 362, 24914, 11, 597, 1355, 300, 366, 1629, 2098, 300, 291, 528, 281, 8460, 11, 291, 528, 281, 411, 2893, 257, 4846, 11, 291, 528, 281, 584, 411, 11, 309, 311, 472, 295, 613, 4190, 11, 293, 291, 733, 295, 393, 380, 360, 300, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.16197528009829315, "compression_ratio": 1.511111111111111, "no_caption_prob": 2.506939745217096e-05}, {"id": 414, "seek": 207300, "start": 2073.0, "end": 2096.0, "text": " And it's very frustrating. And optional stuff is also weird, because it's actually sort of inherits the JavaScript sort of legacy or whatever language legacy of like, things by default are optional. And if it's optional, it's actually a number of states, it's actually either it's not there, or it's there, and it's null, or it's present, right.", "tokens": [50364, 400, 309, 311, 588, 16522, 13, 400, 17312, 1507, 307, 611, 3657, 11, 570, 309, 311, 767, 1333, 295, 9484, 1208, 264, 15778, 1333, 295, 11711, 420, 2035, 2856, 11711, 295, 411, 11, 721, 538, 7576, 366, 17312, 13, 400, 498, 309, 311, 17312, 11, 309, 311, 767, 257, 1230, 295, 4368, 11, 309, 311, 767, 2139, 309, 311, 406, 456, 11, 420, 309, 311, 456, 11, 293, 309, 311, 18184, 11, 420, 309, 311, 1974, 11, 558, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.09857839561370482, "compression_ratio": 1.760204081632653, "no_caption_prob": 9.22308572626207e-06}, {"id": 415, "seek": 209600, "start": 2096.0, "end": 2114.0, "text": " And the tricky part about that is that present and null is actually a distinct state from absent, and some cases meaningful, but not always, usually not. So, so there are a few ways of handling this in Elm. And I don't really want to get into them because they're, you know,", "tokens": [50364, 400, 264, 12414, 644, 466, 300, 307, 300, 1974, 293, 18184, 307, 767, 257, 10644, 1785, 490, 25185, 11, 293, 512, 3331, 10995, 11, 457, 406, 1009, 11, 2673, 406, 13, 407, 11, 370, 456, 366, 257, 1326, 2098, 295, 13175, 341, 294, 2699, 76, 13, 400, 286, 500, 380, 534, 528, 281, 483, 666, 552, 570, 436, 434, 11, 291, 458, 11, 51264, 51264], "temperature": 0.0, "avg_logprob": -0.11980284505815648, "compression_ratio": 1.46524064171123, "no_caption_prob": 5.6492153817089275e-05}, {"id": 416, "seek": 211400, "start": 2114.0, "end": 2136.0, "text": " yeah, that's a whole can of worms. And when that actually comes up, but I think it's interesting, using Elm code gen, I was staring at this thing. And I was looking at the example calls, and some of them were pretty big if the surface area was pretty big. But when you're saying that the example calls for the design decisions you've made for your library just becomes very obvious how they scale.", "tokens": [50364, 1338, 11, 300, 311, 257, 1379, 393, 295, 28271, 13, 400, 562, 300, 767, 1487, 493, 11, 457, 286, 519, 309, 311, 1880, 11, 1228, 2699, 76, 3089, 1049, 11, 286, 390, 18043, 412, 341, 551, 13, 400, 286, 390, 1237, 412, 264, 1365, 5498, 11, 293, 512, 295, 552, 645, 1238, 955, 498, 264, 3753, 1859, 390, 1238, 955, 13, 583, 562, 291, 434, 1566, 300, 264, 1365, 5498, 337, 264, 1715, 5327, 291, 600, 1027, 337, 428, 6405, 445, 3643, 588, 6322, 577, 436, 4373, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.18751330997632898, "compression_ratio": 1.6822033898305084, "no_caption_prob": 7.030554843368009e-05}, {"id": 417, "seek": 213600, "start": 2136.0, "end": 2157.0, "text": " You're like, oh, if we handle optional arguments, using the phantom builder pattern or using the like a list of whatever is or like, there are no way of doing this, right. But you can immediately be like, well, this is what a huge query looks like. And this approach looks great when it's small, but oh, boy, there are some weird cases when it gets bigger. And", "tokens": [50364, 509, 434, 411, 11, 1954, 11, 498, 321, 4813, 17312, 12869, 11, 1228, 264, 903, 25796, 27377, 5102, 420, 1228, 264, 411, 257, 1329, 295, 2035, 307, 420, 411, 11, 456, 366, 572, 636, 295, 884, 341, 11, 558, 13, 583, 291, 393, 4258, 312, 411, 11, 731, 11, 341, 307, 437, 257, 2603, 14581, 1542, 411, 13, 400, 341, 3109, 1542, 869, 562, 309, 311, 1359, 11, 457, 1954, 11, 3237, 11, 456, 366, 512, 3657, 3331, 562, 309, 2170, 3801, 13, 400, 51414, 51414], "temperature": 0.0, "avg_logprob": -0.133268648927862, "compression_ratio": 1.643835616438356, "no_caption_prob": 4.8322555812774226e-05}, {"id": 418, "seek": 215700, "start": 2157.0, "end": 2186.0, "text": " something that would be hard to explore when exploring API span hand, which is the default. So can you elaborate a little bit on how Elm code gen helps you generate examples. So essentially, it, we talked about you do Elm code gen install some package. So basic, and it gives you gen dot time dot whatever the time API is, or whichever package you're using. So you're, you're talking about essentially, using", "tokens": [50364, 746, 300, 576, 312, 1152, 281, 6839, 562, 12736, 9362, 16174, 1011, 11, 597, 307, 264, 7576, 13, 407, 393, 291, 20945, 257, 707, 857, 322, 577, 2699, 76, 3089, 1049, 3665, 291, 8460, 5110, 13, 407, 4476, 11, 309, 11, 321, 2825, 466, 291, 360, 2699, 76, 3089, 1049, 3625, 512, 7372, 13, 407, 3875, 11, 293, 309, 2709, 291, 1049, 5893, 565, 5893, 2035, 264, 565, 9362, 307, 11, 420, 24123, 7372, 291, 434, 1228, 13, 407, 291, 434, 11, 291, 434, 1417, 466, 4476, 11, 1228, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.1662543204522902, "compression_ratio": 1.7142857142857142, "no_caption_prob": 0.0001535417977720499}, {"id": 419, "seek": 218600, "start": 2186.0, "end": 2215.0, "text": " fuzzers to call these types of API. Yeah. So the way the way we are, I originally did it was looking at the source of truth in this case, which was the GraphQL schema. And you're like, okay, I want to make this call to this query. This query takes this input. And what you do is you'd sort of loop over the schema and sort of say, can I make an exhaustive example? And it's like, okay, if this needs a string, I'm just going to put in a string that's called placeholder. If it's a", "tokens": [50364, 283, 16740, 433, 281, 818, 613, 3467, 295, 9362, 13, 865, 13, 407, 264, 636, 264, 636, 321, 366, 11, 286, 7993, 630, 309, 390, 1237, 412, 264, 4009, 295, 3494, 294, 341, 1389, 11, 597, 390, 264, 21884, 13695, 34078, 13, 400, 291, 434, 411, 11, 1392, 11, 286, 528, 281, 652, 341, 818, 281, 341, 14581, 13, 639, 14581, 2516, 341, 4846, 13, 400, 437, 291, 360, 307, 291, 1116, 1333, 295, 6367, 670, 264, 34078, 293, 1333, 295, 584, 11, 393, 286, 652, 364, 14687, 488, 1365, 30, 400, 309, 311, 411, 11, 1392, 11, 498, 341, 2203, 257, 6798, 11, 286, 478, 445, 516, 281, 829, 294, 257, 6798, 300, 311, 1219, 1081, 20480, 13, 759, 309, 311, 257, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.14010611106091597, "compression_ratio": 1.6724738675958188, "no_caption_prob": 7.368042861344293e-05}, {"id": 420, "seek": 221500, "start": 2215.0, "end": 2244.0, "text": " string that's called placeholder, if it needs an integer, great here you get five, you know, so the actual values, you just sort of make something up, just give me something I don't care. And you would kind of like loop over and, and generate calls. So yeah, so you're taking in this case, you were taking the GraphQL schema, and you were using and this is actually with the generated code, it actually exactly where we were. But this is a case where you might want a more abstract version of, of the", "tokens": [50364, 6798, 300, 311, 1219, 1081, 20480, 11, 498, 309, 2203, 364, 24922, 11, 869, 510, 291, 483, 1732, 11, 291, 458, 11, 370, 264, 3539, 4190, 11, 291, 445, 1333, 295, 652, 746, 493, 11, 445, 976, 385, 746, 286, 500, 380, 1127, 13, 400, 291, 576, 733, 295, 411, 6367, 670, 293, 11, 293, 8460, 5498, 13, 407, 1338, 11, 370, 291, 434, 1940, 294, 341, 1389, 11, 291, 645, 1940, 264, 21884, 13695, 34078, 11, 293, 291, 645, 1228, 293, 341, 307, 767, 365, 264, 10833, 3089, 11, 309, 767, 2293, 689, 321, 645, 13, 583, 341, 307, 257, 1389, 689, 291, 1062, 528, 257, 544, 12649, 3037, 295, 11, 295, 264, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.15306841316869704, "compression_ratio": 1.7361111111111112, "no_caption_prob": 0.00012337266525719315}, {"id": 421, "seek": 224400, "start": 2244.0, "end": 2273.0, "text": " when we talk about the Elm cogen, like different flavors, right? So it's like the most convenient one is the very concrete one, you might make them use a more abstract version. And so like, in this case, because like the values you're creating, you may not know like, literally. So I'm not sure if that lands for everybody. But so but that's generally what you're doing. And what's interesting, though, and what I'm exploring more recently is actually being able to generate examples for any given", "tokens": [50364, 562, 321, 751, 466, 264, 2699, 76, 598, 1766, 11, 411, 819, 16303, 11, 558, 30, 407, 309, 311, 411, 264, 881, 10851, 472, 307, 264, 588, 9859, 472, 11, 291, 1062, 652, 552, 764, 257, 544, 12649, 3037, 13, 400, 370, 411, 11, 294, 341, 1389, 11, 570, 411, 264, 4190, 291, 434, 4084, 11, 291, 815, 406, 458, 411, 11, 3736, 13, 407, 286, 478, 406, 988, 498, 300, 5949, 337, 2201, 13, 583, 370, 457, 300, 311, 5101, 437, 291, 434, 884, 13, 400, 437, 311, 1880, 11, 1673, 11, 293, 437, 286, 478, 12736, 544, 3938, 307, 767, 885, 1075, 281, 8460, 5110, 337, 604, 2212, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.14200121896308765, "compression_ratio": 1.7197231833910034, "no_caption_prob": 9.168853284791112e-05}, {"id": 422, "seek": 227300, "start": 2273.0, "end": 2302.0, "text": " piece of Elm code using the like you can for a given Elm package, you can get the what's called the docs JSON, right, which decodes into a really nice type signature for every value in there, which basically the you can think of the docs dot JSON as when you go to the documentation on the Elm package site, and you see the listing of all of the types and the functions and the types that the functions take,", "tokens": [50364, 2522, 295, 2699, 76, 3089, 1228, 264, 411, 291, 393, 337, 257, 2212, 2699, 76, 7372, 11, 291, 393, 483, 264, 437, 311, 1219, 264, 45623, 31828, 11, 558, 11, 597, 979, 4789, 666, 257, 534, 1481, 2010, 13397, 337, 633, 2158, 294, 456, 11, 597, 1936, 264, 291, 393, 519, 295, 264, 45623, 5893, 31828, 382, 562, 291, 352, 281, 264, 14333, 322, 264, 2699, 76, 7372, 3621, 11, 293, 291, 536, 264, 22161, 295, 439, 295, 264, 3467, 293, 264, 6828, 293, 264, 3467, 300, 264, 6828, 747, 11, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.1398700613724558, "compression_ratio": 1.7973568281938326, "no_caption_prob": 0.00010888377437368035}, {"id": 423, "seek": 230200, "start": 2302.0, "end": 2331.0, "text": " that's right, right. So that's the information that's there. Yeah, right. And it's just it's kind of it's just there. If you check out there's a project called project metadata utils, I believe, or something like that, which you ruin I know you're probably very familiar with. And so if you go to like the Elm type module there, you'll see a represent representation of Elm type system. It's just like super great. It's I was thinking about this where I'm like, oh, ASTs in general are like, kind of like the same thing.", "tokens": [50364, 300, 311, 558, 11, 558, 13, 407, 300, 311, 264, 1589, 300, 311, 456, 13, 865, 11, 558, 13, 400, 309, 311, 445, 309, 311, 733, 295, 309, 311, 445, 456, 13, 759, 291, 1520, 484, 456, 311, 257, 1716, 1219, 1716, 26603, 2839, 4174, 11, 286, 1697, 11, 420, 746, 411, 300, 11, 597, 291, 15514, 286, 458, 291, 434, 1391, 588, 4963, 365, 13, 400, 370, 498, 291, 352, 281, 411, 264, 2699, 76, 2010, 10088, 456, 11, 291, 603, 536, 257, 2906, 10290, 295, 2699, 76, 2010, 1185, 13, 467, 311, 445, 411, 1687, 869, 13, 467, 311, 286, 390, 1953, 466, 341, 689, 286, 478, 411, 11, 1954, 11, 316, 6840, 82, 294, 2674, 366, 411, 11, 733, 295, 411, 264, 912, 551, 13, 51814], "temperature": 0.2, "avg_logprob": -0.2052549988258886, "compression_ratio": 1.8181818181818181, "no_caption_prob": 6.502428004750982e-05}, {"id": 424, "seek": 233200, "start": 2332.0, "end": 2332.0, "text": " And I kind of naturally have a large surface area. And I was like looking at that type specifically the type that represents type signatures, as this little this little baby AST, right? It's just like little tiny thing you just want to put in your pocket, right? It's just like, like, you're like, this is so nice. And like, so the thing I've been thinking about it, or I was I'm like, okay, well, we, you know, we did the graph QL example generation. And that was me just sort of figuring it out based on the schema. And because I don't want to get", "tokens": [50364, 400, 286, 733, 295, 8195, 362, 257, 2416, 3753, 1859, 13, 400, 286, 390, 411, 1237, 412, 300, 2010, 4682, 264, 2010, 300, 8855, 2010, 32322, 11, 382, 341, 707, 341, 707, 3186, 316, 6840, 11, 558, 30, 467, 311, 445, 411, 707, 5870, 551, 291, 445, 528, 281, 829, 294, 428, 8963, 11, 558, 30, 467, 311, 445, 411, 11, 411, 11, 291, 434, 411, 11, 341, 307, 370, 1481, 13, 400, 411, 11, 370, 264, 551, 286, 600, 668, 1953, 466, 309, 11, 420, 286, 390, 286, 478, 411, 11, 1392, 11, 731, 11, 321, 11, 291, 458, 11, 321, 630, 264, 4295, 1249, 43, 1365, 5125, 13, 400, 300, 390, 385, 445, 1333, 295, 15213, 309, 484, 2361, 322, 264, 34078, 13, 400, 570, 286, 500, 380, 528, 281, 483], "temperature": 0.0, "avg_logprob": -0.1641115117956091, "compression_ratio": 1.823920265780731, "no_caption_prob": 0.0026314842980355024}, {"id": 425, "seek": 236200, "start": 2362.0, "end": 2362.0, "text": " farther away from it, I want to make the point, we also use that example generation on the graph QL side, we were doing a an upgrade to our back end, and we were changing graph QL libraries. And it was one of those things where it's like, okay, we were reasonably, we think it's reasonably good. But, but also, this is a global change to all of our graph QL handling on the back end, which is sort of nerve wracking, kind of no matter where you're at, right? So I was talking with Aaron White, and we were like, how can we get how can we", "tokens": [50364, 20344, 1314, 490, 309, 11, 286, 528, 281, 652, 264, 935, 11, 321, 611, 764, 300, 1365, 5125, 322, 264, 4295, 1249, 43, 1252, 11, 321, 645, 884, 257, 364, 11484, 281, 527, 646, 917, 11, 293, 321, 645, 4473, 4295, 1249, 43, 15148, 13, 400, 309, 390, 472, 295, 729, 721, 689, 309, 311, 411, 11, 1392, 11, 321, 645, 23551, 11, 321, 519, 309, 311, 23551, 665, 13, 583, 11, 457, 611, 11, 341, 307, 257, 4338, 1319, 281, 439, 295, 527, 4295, 1249, 43, 13175, 322, 264, 646, 917, 11, 597, 307, 1333, 295, 16355, 928, 14134, 11, 733, 295, 572, 1871, 689, 291, 434, 412, 11, 558, 30, 407, 286, 390, 1417, 365, 14018, 5552, 11, 293, 321, 645, 411, 11, 577, 393, 321, 483, 577, 393, 321], "temperature": 0.0, "avg_logprob": -0.0841570327531046, "compression_ratio": 1.7840531561461794, "no_caption_prob": 0.0011878437362611294}, {"id": 426, "seek": 239200, "start": 2392.0, "end": 2392.0, "text": " get more confidence around this thing? And I was like, well, have you considered ordering a glass of all your queries? Because basically, we had this example generation, it's like, well, we don't actually, I mean, valid query, completely valid queries, and mutations and everything. It's like, that's, that's good. But we're just testing that the graph QL libraries hooked up correctly. So we just checked, I just took all those example queries and mutations. And I just sent them to the server and said, like,", "tokens": [50364, 483, 544, 6687, 926, 341, 551, 30, 400, 286, 390, 411, 11, 731, 11, 362, 291, 4888, 21739, 257, 4276, 295, 439, 428, 24109, 30, 1436, 1936, 11, 321, 632, 341, 1365, 5125, 11, 309, 311, 411, 11, 731, 11, 321, 500, 380, 767, 11, 286, 914, 11, 7363, 14581, 11, 2584, 7363, 24109, 11, 293, 29243, 293, 1203, 13, 467, 311, 411, 11, 300, 311, 11, 300, 311, 665, 13, 583, 321, 434, 445, 4997, 300, 264, 4295, 1249, 43, 15148, 20410, 493, 8944, 13, 407, 321, 445, 10033, 11, 286, 445, 1890, 439, 729, 1365, 24109, 293, 29243, 13, 400, 286, 445, 2279, 552, 281, 264, 7154, 293, 848, 11, 411, 11], "temperature": 0.0, "avg_logprob": -0.0644049068977093, "compression_ratio": 1.7647058823529411, "no_caption_prob": 0.00020340780611149967}, {"id": 427, "seek": 242200, "start": 2422.0, "end": 2422.0, "text": " did you blow up? And we did that. And we caught like a few cases, some older parts of the database that had something weird with them. I forget what it was, but it was something. And of course, all the things that were returning was like, what are you talking about, dude? You know, the server was saying, but it's like, no, but the fact that you told me this means I know you're doing all right. Versus versus you just like screaming with your hair on fire, right? So", "tokens": [50364, 630, 291, 6327, 493, 30, 400, 321, 630, 300, 13, 400, 321, 5415, 411, 257, 1326, 3331, 11, 512, 4906, 3166, 295, 264, 8149, 300, 632, 746, 3657, 365, 552, 13, 286, 2870, 437, 309, 390, 11, 457, 309, 390, 746, 13, 400, 295, 1164, 11, 439, 264, 721, 300, 645, 12678, 390, 411, 11, 437, 366, 291, 1417, 466, 11, 6449, 30, 509, 458, 11, 264, 7154, 390, 1566, 11, 457, 309, 311, 411, 11, 572, 11, 457, 264, 1186, 300, 291, 1907, 385, 341, 1355, 286, 458, 291, 434, 884, 439, 558, 13, 12226, 301, 5717, 291, 445, 411, 12636, 365, 428, 2578, 322, 2610, 11, 558, 30, 407], "temperature": 0.0, "avg_logprob": -0.10096459684118761, "compression_ratio": 1.7462686567164178, "no_caption_prob": 0.0006361289415508509}, {"id": 428, "seek": 245200, "start": 2452.0, "end": 2452.0, "text": " anyway, I wanted to get that point in because I thought it was I think it's really cool. Example generation turns out to be a whole I mean, this is program synthesis, right? It's like, there's a whole set of things you can do with this. So coming back to we went to the little side quest there. We had that cool coming back with that, those types from docs JSON, you have this beautiful little type that sort of represents elm types. I think I've been thinking about that you think about like, what are the sources of", "tokens": [50364, 4033, 11, 286, 1415, 281, 483, 300, 935, 294, 570, 286, 1194, 309, 390, 286, 519, 309, 311, 534, 1627, 13, 24755, 781, 5125, 4523, 484, 281, 312, 257, 1379, 286, 914, 11, 341, 307, 1461, 30252, 11, 558, 30, 467, 311, 411, 11, 456, 311, 257, 1379, 992, 295, 721, 291, 393, 360, 365, 341, 13, 407, 1348, 646, 281, 321, 1437, 281, 264, 707, 1252, 866, 456, 13, 492, 632, 300, 1627, 1348, 646, 365, 300, 11, 729, 3467, 490, 45623, 31828, 11, 291, 362, 341, 2238, 707, 2010, 300, 1333, 295, 8855, 806, 76, 3467, 13, 286, 519, 286, 600, 668, 1953, 466, 300, 291, 519, 466, 411, 11, 437, 366, 264, 7139, 295], "temperature": 0.0, "avg_logprob": -0.14978878437971868, "compression_ratio": 1.7233333333333334, "no_caption_prob": 0.000356940901838243}, {"id": 429, "seek": 248200, "start": 2482.0, "end": 2508.48, "text": " information? And what are the inputs and the outputs for your different code gen projects? Like this is actually one that's very valuable and has some advantages over raw ISTs that are kind of huge, right? So it's like a few things one surface area way small, great. So it's very convenient to work on, you still have to do some recursive stuff. But this just the surface area of the recursive stuff you have to do probably not as big. Well, definitely not as big as a normal IST.", "tokens": [50364, 1589, 30, 400, 437, 366, 264, 15743, 293, 264, 23930, 337, 428, 819, 3089, 1049, 4455, 30, 1743, 341, 307, 767, 472, 300, 311, 588, 8263, 293, 575, 512, 14906, 670, 8936, 6205, 33424, 300, 366, 733, 295, 2603, 11, 558, 30, 407, 309, 311, 411, 257, 1326, 721, 472, 3753, 1859, 636, 1359, 11, 869, 13, 407, 309, 311, 588, 10851, 281, 589, 322, 11, 291, 920, 362, 281, 360, 512, 20560, 488, 1507, 13, 583, 341, 445, 264, 3753, 1859, 295, 264, 20560, 488, 1507, 291, 362, 281, 360, 1391, 406, 382, 955, 13, 1042, 11, 2138, 406, 382, 955, 382, 257, 2710, 6205, 51, 13, 51688, 51704, 708, 360, 291, 914, 30, 51766, 51794], "temperature": 0.0, "avg_logprob": -0.17051344158268777, "compression_ratio": 1.711340206185567, "no_caption_prob": 0.0063872309401631355}, {"id": 430, "seek": 248200, "start": 2508.8, "end": 2510.04, "text": " What do you mean?", "tokens": [50364, 1589, 30, 400, 437, 366, 264, 15743, 293, 264, 23930, 337, 428, 819, 3089, 1049, 4455, 30, 1743, 341, 307, 767, 472, 300, 311, 588, 8263, 293, 575, 512, 14906, 670, 8936, 6205, 33424, 300, 366, 733, 295, 2603, 11, 558, 30, 407, 309, 311, 411, 257, 1326, 721, 472, 3753, 1859, 636, 1359, 11, 869, 13, 407, 309, 311, 588, 10851, 281, 589, 322, 11, 291, 920, 362, 281, 360, 512, 20560, 488, 1507, 13, 583, 341, 445, 264, 3753, 1859, 295, 264, 20560, 488, 1507, 291, 362, 281, 360, 1391, 406, 382, 955, 13, 1042, 11, 2138, 406, 382, 955, 382, 257, 2710, 6205, 51, 13, 51688, 51704, 708, 360, 291, 914, 30, 51766, 51794], "temperature": 0.0, "avg_logprob": -0.17051344158268777, "compression_ratio": 1.711340206185567, "no_caption_prob": 0.0063872309401631355}, {"id": 431, "seek": 251004, "start": 2510.04, "end": 2539.64, "text": " Well, yeah, you have to like you have, like you'll to represent a function. It's like a lambda call. And then that's like a type and then another type, right? So whatever function you use to generate code using that elm type type, okay, is going to recurse on itself, but it's not going to be it's not going to be too crazy. So and separately, like there's this desire when you're doing code gen, possibly to know some types to operate on types.", "tokens": [50364, 1042, 11, 1338, 11, 291, 362, 281, 411, 291, 362, 11, 411, 291, 603, 281, 2906, 257, 2445, 13, 467, 311, 411, 257, 13607, 818, 13, 400, 550, 300, 311, 411, 257, 2010, 293, 550, 1071, 2010, 11, 558, 30, 407, 2035, 2445, 291, 764, 281, 8460, 3089, 1228, 300, 806, 76, 2010, 2010, 11, 1392, 11, 307, 516, 281, 18680, 405, 322, 2564, 11, 457, 309, 311, 406, 516, 281, 312, 309, 311, 406, 516, 281, 312, 886, 3219, 13, 407, 293, 14759, 11, 411, 456, 311, 341, 7516, 562, 291, 434, 884, 3089, 1049, 11, 6264, 281, 458, 512, 3467, 281, 9651, 322, 3467, 13, 51844], "temperature": 0.0, "avg_logprob": -0.18031262484463778, "compression_ratio": 1.8016194331983806, "no_caption_prob": 0.000273620942607522}, {"id": 432, "seek": 254004, "start": 2540.04, "end": 2555.24, "text": " Or at least like when you have access to it's like, okay, I know for sure that there is a value that has this type. And like, in fact, I know the whole bag of recipes to build these values from this module. Then you have everything you have everything you need to make a example cake, right?", "tokens": [50364, 1610, 412, 1935, 411, 562, 291, 362, 2105, 281, 309, 311, 411, 11, 1392, 11, 286, 458, 337, 988, 300, 456, 307, 257, 2158, 300, 575, 341, 2010, 13, 400, 411, 11, 294, 1186, 11, 286, 458, 264, 1379, 3411, 295, 13035, 281, 1322, 613, 4190, 490, 341, 10088, 13, 1396, 291, 362, 1203, 291, 362, 1203, 291, 643, 281, 652, 257, 1365, 5908, 11, 558, 30, 51124, 51138], "temperature": 0.0, "avg_logprob": -0.0952661608306455, "compression_ratio": 1.6077348066298343, "no_caption_prob": 0.0005357266054488719}, {"id": 433, "seek": 255524, "start": 2555.24, "end": 2583.3999999999996, "text": " Like you just you say you pick a starting point. And you say like, I'm gonna, and you could just pick every point and say like, I'm gonna start wherever and I want to end up, I want to end up with some HTML. Great. So I'm gonna start here. And of course, this thing may fail, right? Me and may not find a way to get to HTML. But it like, you can write an algorithm. And this algorithm is not very involved. 300 lines of code, maybe we say I'm going to start with this value. You're looking at your bag of recipes, you're gonna say like, okay,", "tokens": [50364, 1743, 291, 445, 291, 584, 291, 1888, 257, 2891, 935, 13, 400, 291, 584, 411, 11, 286, 478, 799, 11, 293, 291, 727, 445, 1888, 633, 935, 293, 584, 411, 11, 286, 478, 799, 722, 8660, 293, 286, 528, 281, 917, 493, 11, 286, 528, 281, 917, 493, 365, 512, 17995, 13, 3769, 13, 407, 286, 478, 799, 722, 510, 13, 400, 295, 1164, 11, 341, 551, 815, 3061, 11, 558, 30, 1923, 293, 815, 406, 915, 257, 636, 281, 483, 281, 17995, 13, 583, 309, 411, 11, 291, 393, 2464, 364, 9284, 13, 400, 341, 9284, 307, 406, 588, 3288, 13, 6641, 3876, 295, 3089, 11, 1310, 321, 584, 286, 478, 516, 281, 722, 365, 341, 2158, 13, 509, 434, 1237, 412, 428, 3411, 295, 13035, 11, 291, 434, 799, 584, 411, 11, 1392, 11, 51772, 51772], "temperature": 0.0, "avg_logprob": -0.15835917336600167, "compression_ratio": 1.8625429553264605, "no_caption_prob": 9.914297697832808e-05}, {"id": 434, "seek": 258340, "start": 2583.4, "end": 2585.56, "text": " okay, so you start with it, for instance, or something?", "tokens": [50364, 1392, 11, 370, 291, 722, 365, 309, 11, 337, 5197, 11, 420, 746, 30, 50472, 50476], "temperature": 0.0, "avg_logprob": -0.42614028188917374, "compression_ratio": 0.9166666666666666, "no_caption_prob": 9.313932969234884e-05}, {"id": 435, "seek": 258556, "start": 2585.56, "end": 2614.7599999999998, "text": " Yeah, you start with init. That's a, you know, that would be a natural place to start with some of these things. So like a UI button, right? So you say UI button in it, great. What that maybe, maybe your button module uses the builder pattern. So init does not create HTML, but it creates a button button type. So what you'd say is like, okay, my button takes a record, which has a string and a message, right? So like label and on click, cool, I'm going to make up a string. And I'm going to like, when I see something like message, and we have a little bit of like, just stuff, right?", "tokens": [50364, 865, 11, 291, 722, 365, 3157, 13, 663, 311, 257, 11, 291, 458, 11, 300, 576, 312, 257, 3303, 1081, 281, 722, 365, 512, 295, 613, 721, 13, 407, 411, 257, 15682, 2960, 11, 558, 30, 407, 291, 584, 15682, 2960, 294, 309, 11, 869, 13, 708, 300, 1310, 11, 1310, 428, 2960, 10088, 4960, 264, 27377, 5102, 13, 407, 3157, 775, 406, 1884, 17995, 11, 457, 309, 7829, 257, 2960, 2960, 2010, 13, 407, 437, 291, 1116, 584, 307, 411, 11, 1392, 11, 452, 2960, 2516, 257, 2136, 11, 597, 575, 257, 6798, 293, 257, 3636, 11, 558, 30, 407, 411, 7645, 293, 322, 2052, 11, 1627, 11, 286, 478, 516, 281, 652, 493, 257, 6798, 13, 400, 286, 478, 516, 281, 411, 11, 562, 286, 536, 746, 411, 3636, 11, 293, 321, 362, 257, 707, 857, 295, 411, 11, 445, 1507, 11, 558, 30, 51824], "temperature": 0.6, "avg_logprob": -0.18908754131137925, "compression_ratio": 1.803076923076923, "no_caption_prob": 0.001000130781903863}, {"id": 436, "seek": 261556, "start": 2615.56, "end": 2620.92, "text": " in this like messages, messages, a special case. Then you say like, okay, great, I've created a", "tokens": [50364, 294, 341, 411, 7897, 11, 7897, 11, 257, 2121, 1389, 13, 1396, 291, 584, 411, 11, 1392, 11, 869, 11, 286, 600, 2942, 257, 50632, 50632, 2960, 13, 823, 300, 286, 362, 257, 2960, 11, 437, 393, 286, 360, 30, 400, 550, 291, 2464, 257, 707, 857, 295, 3089, 281, 584, 11, 50872, 50872, 411, 11, 731, 11, 366, 456, 604, 36281, 300, 727, 747, 257, 2960, 293, 1310, 257, 2158, 293, 16927, 309, 30, 51188, 51188, 467, 311, 411, 11, 1392, 11, 300, 311, 1627, 13, 663, 311, 1627, 13, 467, 311, 406, 300, 1152, 13, 316, 27377, 307, 445, 257, 2445, 597, 51460, 51460, 2516, 512, 1507, 293, 550, 6284, 2516, 257, 551, 293, 11247, 257, 551, 11, 558, 30, 3769, 13, 4083, 1858, 281, 51684, 51684], "temperature": 0.0, "avg_logprob": -0.13533966413891044, "compression_ratio": 1.7285714285714286, "no_caption_prob": 0.016398778185248375}, {"id": 437, "seek": 261556, "start": 2620.92, "end": 2625.72, "text": " button. Now that I have a button, what can I do? And then you write a little bit of code to say,", "tokens": [50364, 294, 341, 411, 7897, 11, 7897, 11, 257, 2121, 1389, 13, 1396, 291, 584, 411, 11, 1392, 11, 869, 11, 286, 600, 2942, 257, 50632, 50632, 2960, 13, 823, 300, 286, 362, 257, 2960, 11, 437, 393, 286, 360, 30, 400, 550, 291, 2464, 257, 707, 857, 295, 3089, 281, 584, 11, 50872, 50872, 411, 11, 731, 11, 366, 456, 604, 36281, 300, 727, 747, 257, 2960, 293, 1310, 257, 2158, 293, 16927, 309, 30, 51188, 51188, 467, 311, 411, 11, 1392, 11, 300, 311, 1627, 13, 663, 311, 1627, 13, 467, 311, 406, 300, 1152, 13, 316, 27377, 307, 445, 257, 2445, 597, 51460, 51460, 2516, 512, 1507, 293, 550, 6284, 2516, 257, 551, 293, 11247, 257, 551, 11, 558, 30, 3769, 13, 4083, 1858, 281, 51684, 51684], "temperature": 0.0, "avg_logprob": -0.13533966413891044, "compression_ratio": 1.7285714285714286, "no_caption_prob": 0.016398778185248375}, {"id": 438, "seek": 261556, "start": 2625.72, "end": 2632.04, "text": " like, well, are there any builders that could take a button and maybe a value and modify it?", "tokens": [50364, 294, 341, 411, 7897, 11, 7897, 11, 257, 2121, 1389, 13, 1396, 291, 584, 411, 11, 1392, 11, 869, 11, 286, 600, 2942, 257, 50632, 50632, 2960, 13, 823, 300, 286, 362, 257, 2960, 11, 437, 393, 286, 360, 30, 400, 550, 291, 2464, 257, 707, 857, 295, 3089, 281, 584, 11, 50872, 50872, 411, 11, 731, 11, 366, 456, 604, 36281, 300, 727, 747, 257, 2960, 293, 1310, 257, 2158, 293, 16927, 309, 30, 51188, 51188, 467, 311, 411, 11, 1392, 11, 300, 311, 1627, 13, 663, 311, 1627, 13, 467, 311, 406, 300, 1152, 13, 316, 27377, 307, 445, 257, 2445, 597, 51460, 51460, 2516, 512, 1507, 293, 550, 6284, 2516, 257, 551, 293, 11247, 257, 551, 11, 558, 30, 3769, 13, 4083, 1858, 281, 51684, 51684], "temperature": 0.0, "avg_logprob": -0.13533966413891044, "compression_ratio": 1.7285714285714286, "no_caption_prob": 0.016398778185248375}, {"id": 439, "seek": 261556, "start": 2632.04, "end": 2637.48, "text": " It's like, okay, that's cool. That's cool. It's not that hard. A builder is just a function which", "tokens": [50364, 294, 341, 411, 7897, 11, 7897, 11, 257, 2121, 1389, 13, 1396, 291, 584, 411, 11, 1392, 11, 869, 11, 286, 600, 2942, 257, 50632, 50632, 2960, 13, 823, 300, 286, 362, 257, 2960, 11, 437, 393, 286, 360, 30, 400, 550, 291, 2464, 257, 707, 857, 295, 3089, 281, 584, 11, 50872, 50872, 411, 11, 731, 11, 366, 456, 604, 36281, 300, 727, 747, 257, 2960, 293, 1310, 257, 2158, 293, 16927, 309, 30, 51188, 51188, 467, 311, 411, 11, 1392, 11, 300, 311, 1627, 13, 663, 311, 1627, 13, 467, 311, 406, 300, 1152, 13, 316, 27377, 307, 445, 257, 2445, 597, 51460, 51460, 2516, 512, 1507, 293, 550, 6284, 2516, 257, 551, 293, 11247, 257, 551, 11, 558, 30, 3769, 13, 4083, 1858, 281, 51684, 51684], "temperature": 0.0, "avg_logprob": -0.13533966413891044, "compression_ratio": 1.7285714285714286, "no_caption_prob": 0.016398778185248375}, {"id": 440, "seek": 261556, "start": 2637.48, "end": 2641.96, "text": " takes some stuff and then ultimately takes a thing and returns a thing, right? Great. Really easy to", "tokens": [50364, 294, 341, 411, 7897, 11, 7897, 11, 257, 2121, 1389, 13, 1396, 291, 584, 411, 11, 1392, 11, 869, 11, 286, 600, 2942, 257, 50632, 50632, 2960, 13, 823, 300, 286, 362, 257, 2960, 11, 437, 393, 286, 360, 30, 400, 550, 291, 2464, 257, 707, 857, 295, 3089, 281, 584, 11, 50872, 50872, 411, 11, 731, 11, 366, 456, 604, 36281, 300, 727, 747, 257, 2960, 293, 1310, 257, 2158, 293, 16927, 309, 30, 51188, 51188, 467, 311, 411, 11, 1392, 11, 300, 311, 1627, 13, 663, 311, 1627, 13, 467, 311, 406, 300, 1152, 13, 316, 27377, 307, 445, 257, 2445, 597, 51460, 51460, 2516, 512, 1507, 293, 550, 6284, 2516, 257, 551, 293, 11247, 257, 551, 11, 558, 30, 3769, 13, 4083, 1858, 281, 51684, 51684], "temperature": 0.0, "avg_logprob": -0.13533966413891044, "compression_ratio": 1.7285714285714286, "no_caption_prob": 0.016398778185248375}, {"id": 441, "seek": 264196, "start": 2641.96, "end": 2647.2400000000002, "text": " detect when you have this. And then you're like, okay, well, do I have anything? Could I create", "tokens": [50364, 5531, 562, 291, 362, 341, 13, 400, 550, 291, 434, 411, 11, 1392, 11, 731, 11, 360, 286, 362, 1340, 30, 7497, 286, 1884, 50628, 50628, 1340, 300, 2516, 257, 2960, 293, 11247, 17995, 30, 876, 11, 456, 311, 2960, 13, 1759, 13, 3769, 13, 286, 603, 829, 300, 50928, 50928, 294, 264, 917, 293, 550, 286, 603, 3932, 2245, 13, 286, 47493, 264, 33032, 13, 1033, 13, 407, 3410, 671, 11, 286, 478, 365, 291, 51224, 51224, 466, 1940, 341, 2699, 76, 2010, 11, 597, 8855, 257, 1944, 2699, 76, 2010, 293, 300, 8855, 264, 551, 51656, 51656], "temperature": 0.0, "avg_logprob": -0.09011519781433709, "compression_ratio": 1.5833333333333333, "no_caption_prob": 2.1111603928147815e-05}, {"id": 442, "seek": 264196, "start": 2647.2400000000002, "end": 2653.2400000000002, "text": " anything that takes a button and returns HTML? Oh, there's button.view. Great. I'll put that", "tokens": [50364, 5531, 562, 291, 362, 341, 13, 400, 550, 291, 434, 411, 11, 1392, 11, 731, 11, 360, 286, 362, 1340, 30, 7497, 286, 1884, 50628, 50628, 1340, 300, 2516, 257, 2960, 293, 11247, 17995, 30, 876, 11, 456, 311, 2960, 13, 1759, 13, 3769, 13, 286, 603, 829, 300, 50928, 50928, 294, 264, 917, 293, 550, 286, 603, 3932, 2245, 13, 286, 47493, 264, 33032, 13, 1033, 13, 407, 3410, 671, 11, 286, 478, 365, 291, 51224, 51224, 466, 1940, 341, 2699, 76, 2010, 11, 597, 8855, 257, 1944, 2699, 76, 2010, 293, 300, 8855, 264, 551, 51656, 51656], "temperature": 0.0, "avg_logprob": -0.09011519781433709, "compression_ratio": 1.5833333333333333, "no_caption_prob": 2.1111603928147815e-05}, {"id": 443, "seek": 264196, "start": 2653.2400000000002, "end": 2659.16, "text": " in the end and then I'll claim success. I threaded the maze. Okay. So conceptually, I'm with you", "tokens": [50364, 5531, 562, 291, 362, 341, 13, 400, 550, 291, 434, 411, 11, 1392, 11, 731, 11, 360, 286, 362, 1340, 30, 7497, 286, 1884, 50628, 50628, 1340, 300, 2516, 257, 2960, 293, 11247, 17995, 30, 876, 11, 456, 311, 2960, 13, 1759, 13, 3769, 13, 286, 603, 829, 300, 50928, 50928, 294, 264, 917, 293, 550, 286, 603, 3932, 2245, 13, 286, 47493, 264, 33032, 13, 1033, 13, 407, 3410, 671, 11, 286, 478, 365, 291, 51224, 51224, 466, 1940, 341, 2699, 76, 2010, 11, 597, 8855, 257, 1944, 2699, 76, 2010, 293, 300, 8855, 264, 551, 51656, 51656], "temperature": 0.0, "avg_logprob": -0.09011519781433709, "compression_ratio": 1.5833333333333333, "no_caption_prob": 2.1111603928147815e-05}, {"id": 444, "seek": 264196, "start": 2659.16, "end": 2667.8, "text": " about taking this Elm type, which represents a possible Elm type and that represents the thing", "tokens": [50364, 5531, 562, 291, 362, 341, 13, 400, 550, 291, 434, 411, 11, 1392, 11, 731, 11, 360, 286, 362, 1340, 30, 7497, 286, 1884, 50628, 50628, 1340, 300, 2516, 257, 2960, 293, 11247, 17995, 30, 876, 11, 456, 311, 2960, 13, 1759, 13, 3769, 13, 286, 603, 829, 300, 50928, 50928, 294, 264, 917, 293, 550, 286, 603, 3932, 2245, 13, 286, 47493, 264, 33032, 13, 1033, 13, 407, 3410, 671, 11, 286, 478, 365, 291, 51224, 51224, 466, 1940, 341, 2699, 76, 2010, 11, 597, 8855, 257, 1944, 2699, 76, 2010, 293, 300, 8855, 264, 551, 51656, 51656], "temperature": 0.0, "avg_logprob": -0.09011519781433709, "compression_ratio": 1.5833333333333333, "no_caption_prob": 2.1111603928147815e-05}, {"id": 445, "seek": 266780, "start": 2667.8, "end": 2672.52, "text": " you see in the Elm package documentation that describes types and functions. And then taking", "tokens": [50364, 291, 536, 294, 264, 2699, 76, 7372, 14333, 300, 15626, 3467, 293, 6828, 13, 400, 550, 1940, 50600, 50600, 300, 293, 12606, 341, 12805, 281, 584, 11, 1392, 11, 286, 528, 281, 8460, 746, 295, 341, 2010, 13, 50796, 50848, 1692, 366, 439, 264, 721, 300, 366, 2435, 13, 1012, 360, 286, 1884, 746, 411, 300, 30, 708, 286, 478, 406, 51092, 51092, 3701, 307, 11, 307, 341, 746, 300, 291, 434, 445, 322, 428, 1065, 516, 293, 1940, 512, 45623, 13, 73, 3015, 51452, 51452, 293, 15213, 300, 484, 30, 1610, 775, 2699, 76, 3089, 1049, 362, 746, 281, 767, 854, 291, 365, 341, 30, 51684, 51684], "temperature": 0.0, "avg_logprob": -0.07513771057128907, "compression_ratio": 1.7100371747211895, "no_caption_prob": 6.921373278601095e-05}, {"id": 446, "seek": 266780, "start": 2672.52, "end": 2676.44, "text": " that and solving this puzzle to say, okay, I want to generate something of this type.", "tokens": [50364, 291, 536, 294, 264, 2699, 76, 7372, 14333, 300, 15626, 3467, 293, 6828, 13, 400, 550, 1940, 50600, 50600, 300, 293, 12606, 341, 12805, 281, 584, 11, 1392, 11, 286, 528, 281, 8460, 746, 295, 341, 2010, 13, 50796, 50848, 1692, 366, 439, 264, 721, 300, 366, 2435, 13, 1012, 360, 286, 1884, 746, 411, 300, 30, 708, 286, 478, 406, 51092, 51092, 3701, 307, 11, 307, 341, 746, 300, 291, 434, 445, 322, 428, 1065, 516, 293, 1940, 512, 45623, 13, 73, 3015, 51452, 51452, 293, 15213, 300, 484, 30, 1610, 775, 2699, 76, 3089, 1049, 362, 746, 281, 767, 854, 291, 365, 341, 30, 51684, 51684], "temperature": 0.0, "avg_logprob": -0.07513771057128907, "compression_ratio": 1.7100371747211895, "no_caption_prob": 6.921373278601095e-05}, {"id": 447, "seek": 266780, "start": 2677.48, "end": 2682.36, "text": " Here are all the things that are available. How do I create something like that? What I'm not", "tokens": [50364, 291, 536, 294, 264, 2699, 76, 7372, 14333, 300, 15626, 3467, 293, 6828, 13, 400, 550, 1940, 50600, 50600, 300, 293, 12606, 341, 12805, 281, 584, 11, 1392, 11, 286, 528, 281, 8460, 746, 295, 341, 2010, 13, 50796, 50848, 1692, 366, 439, 264, 721, 300, 366, 2435, 13, 1012, 360, 286, 1884, 746, 411, 300, 30, 708, 286, 478, 406, 51092, 51092, 3701, 307, 11, 307, 341, 746, 300, 291, 434, 445, 322, 428, 1065, 516, 293, 1940, 512, 45623, 13, 73, 3015, 51452, 51452, 293, 15213, 300, 484, 30, 1610, 775, 2699, 76, 3089, 1049, 362, 746, 281, 767, 854, 291, 365, 341, 30, 51684, 51684], "temperature": 0.0, "avg_logprob": -0.07513771057128907, "compression_ratio": 1.7100371747211895, "no_caption_prob": 6.921373278601095e-05}, {"id": 448, "seek": 266780, "start": 2682.36, "end": 2689.5600000000004, "text": " understanding is, is this something that you're just on your own going and taking some docs.json", "tokens": [50364, 291, 536, 294, 264, 2699, 76, 7372, 14333, 300, 15626, 3467, 293, 6828, 13, 400, 550, 1940, 50600, 50600, 300, 293, 12606, 341, 12805, 281, 584, 11, 1392, 11, 286, 528, 281, 8460, 746, 295, 341, 2010, 13, 50796, 50848, 1692, 366, 439, 264, 721, 300, 366, 2435, 13, 1012, 360, 286, 1884, 746, 411, 300, 30, 708, 286, 478, 406, 51092, 51092, 3701, 307, 11, 307, 341, 746, 300, 291, 434, 445, 322, 428, 1065, 516, 293, 1940, 512, 45623, 13, 73, 3015, 51452, 51452, 293, 15213, 300, 484, 30, 1610, 775, 2699, 76, 3089, 1049, 362, 746, 281, 767, 854, 291, 365, 341, 30, 51684, 51684], "temperature": 0.0, "avg_logprob": -0.07513771057128907, "compression_ratio": 1.7100371747211895, "no_caption_prob": 6.921373278601095e-05}, {"id": 449, "seek": 266780, "start": 2689.5600000000004, "end": 2694.2000000000003, "text": " and figuring that out? Or does Elm code gen have something to actually help you with this?", "tokens": [50364, 291, 536, 294, 264, 2699, 76, 7372, 14333, 300, 15626, 3467, 293, 6828, 13, 400, 550, 1940, 50600, 50600, 300, 293, 12606, 341, 12805, 281, 584, 11, 1392, 11, 286, 528, 281, 8460, 746, 295, 341, 2010, 13, 50796, 50848, 1692, 366, 439, 264, 721, 300, 366, 2435, 13, 1012, 360, 286, 1884, 746, 411, 300, 30, 708, 286, 478, 406, 51092, 51092, 3701, 307, 11, 307, 341, 746, 300, 291, 434, 445, 322, 428, 1065, 516, 293, 1940, 512, 45623, 13, 73, 3015, 51452, 51452, 293, 15213, 300, 484, 30, 1610, 775, 2699, 76, 3089, 1049, 362, 746, 281, 767, 854, 291, 365, 341, 30, 51684, 51684], "temperature": 0.0, "avg_logprob": -0.07513771057128907, "compression_ratio": 1.7100371747211895, "no_caption_prob": 6.921373278601095e-05}, {"id": 450, "seek": 269420, "start": 2694.2, "end": 2699.3999999999996, "text": " That's a wonderful question. So this is something that I'm using Elm code gen to help with. I'm", "tokens": [50364, 663, 311, 257, 3715, 1168, 13, 407, 341, 307, 746, 300, 286, 478, 1228, 2699, 76, 3089, 1049, 281, 854, 365, 13, 286, 478, 50624, 50624, 12736, 341, 13, 2699, 76, 3089, 1049, 775, 406, 360, 341, 558, 586, 13, 821, 1062, 312, 257, 551, 294, 264, 2027, 50936, 50936, 689, 309, 311, 411, 11, 1310, 341, 2909, 294, 2699, 76, 3089, 1049, 13, 639, 727, 312, 3094, 7696, 322, 1192, 295, 2699, 76, 3089, 51196, 51196, 1049, 13, 286, 519, 456, 311, 1825, 7115, 466, 2699, 76, 3089, 1049, 13, 467, 1177, 380, 643, 281, 589, 365, 2154, 1124, 51408, 51408, 420, 1340, 13, 407, 341, 307, 544, 364, 16197, 295, 437, 360, 286, 915, 4670, 466, 3089, 5125, 30, 51728, 51728], "temperature": 0.0, "avg_logprob": -0.08751374816894532, "compression_ratio": 1.8181818181818181, "no_caption_prob": 6.502158794319257e-05}, {"id": 451, "seek": 269420, "start": 2699.3999999999996, "end": 2705.64, "text": " exploring this. Elm code gen does not do this right now. There might be a thing in the future", "tokens": [50364, 663, 311, 257, 3715, 1168, 13, 407, 341, 307, 746, 300, 286, 478, 1228, 2699, 76, 3089, 1049, 281, 854, 365, 13, 286, 478, 50624, 50624, 12736, 341, 13, 2699, 76, 3089, 1049, 775, 406, 360, 341, 558, 586, 13, 821, 1062, 312, 257, 551, 294, 264, 2027, 50936, 50936, 689, 309, 311, 411, 11, 1310, 341, 2909, 294, 2699, 76, 3089, 1049, 13, 639, 727, 312, 3094, 7696, 322, 1192, 295, 2699, 76, 3089, 51196, 51196, 1049, 13, 286, 519, 456, 311, 1825, 7115, 466, 2699, 76, 3089, 1049, 13, 467, 1177, 380, 643, 281, 589, 365, 2154, 1124, 51408, 51408, 420, 1340, 13, 407, 341, 307, 544, 364, 16197, 295, 437, 360, 286, 915, 4670, 466, 3089, 5125, 30, 51728, 51728], "temperature": 0.0, "avg_logprob": -0.08751374816894532, "compression_ratio": 1.8181818181818181, "no_caption_prob": 6.502158794319257e-05}, {"id": 452, "seek": 269420, "start": 2705.64, "end": 2710.8399999999997, "text": " where it's like, maybe this lives in Elm code gen. This could be built entirely on top of Elm code", "tokens": [50364, 663, 311, 257, 3715, 1168, 13, 407, 341, 307, 746, 300, 286, 478, 1228, 2699, 76, 3089, 1049, 281, 854, 365, 13, 286, 478, 50624, 50624, 12736, 341, 13, 2699, 76, 3089, 1049, 775, 406, 360, 341, 558, 586, 13, 821, 1062, 312, 257, 551, 294, 264, 2027, 50936, 50936, 689, 309, 311, 411, 11, 1310, 341, 2909, 294, 2699, 76, 3089, 1049, 13, 639, 727, 312, 3094, 7696, 322, 1192, 295, 2699, 76, 3089, 51196, 51196, 1049, 13, 286, 519, 456, 311, 1825, 7115, 466, 2699, 76, 3089, 1049, 13, 467, 1177, 380, 643, 281, 589, 365, 2154, 1124, 51408, 51408, 420, 1340, 13, 407, 341, 307, 544, 364, 16197, 295, 437, 360, 286, 915, 4670, 466, 3089, 5125, 30, 51728, 51728], "temperature": 0.0, "avg_logprob": -0.08751374816894532, "compression_ratio": 1.8181818181818181, "no_caption_prob": 6.502158794319257e-05}, {"id": 453, "seek": 269420, "start": 2710.8399999999997, "end": 2715.08, "text": " gen. I think there's nothing essential about Elm code gen. It doesn't need to work with internals", "tokens": [50364, 663, 311, 257, 3715, 1168, 13, 407, 341, 307, 746, 300, 286, 478, 1228, 2699, 76, 3089, 1049, 281, 854, 365, 13, 286, 478, 50624, 50624, 12736, 341, 13, 2699, 76, 3089, 1049, 775, 406, 360, 341, 558, 586, 13, 821, 1062, 312, 257, 551, 294, 264, 2027, 50936, 50936, 689, 309, 311, 411, 11, 1310, 341, 2909, 294, 2699, 76, 3089, 1049, 13, 639, 727, 312, 3094, 7696, 322, 1192, 295, 2699, 76, 3089, 51196, 51196, 1049, 13, 286, 519, 456, 311, 1825, 7115, 466, 2699, 76, 3089, 1049, 13, 467, 1177, 380, 643, 281, 589, 365, 2154, 1124, 51408, 51408, 420, 1340, 13, 407, 341, 307, 544, 364, 16197, 295, 437, 360, 286, 915, 4670, 466, 3089, 5125, 30, 51728, 51728], "temperature": 0.0, "avg_logprob": -0.08751374816894532, "compression_ratio": 1.8181818181818181, "no_caption_prob": 6.502158794319257e-05}, {"id": 454, "seek": 269420, "start": 2715.08, "end": 2721.48, "text": " or anything. So this is more an exploration of what do I find exciting about code generation?", "tokens": [50364, 663, 311, 257, 3715, 1168, 13, 407, 341, 307, 746, 300, 286, 478, 1228, 2699, 76, 3089, 1049, 281, 854, 365, 13, 286, 478, 50624, 50624, 12736, 341, 13, 2699, 76, 3089, 1049, 775, 406, 360, 341, 558, 586, 13, 821, 1062, 312, 257, 551, 294, 264, 2027, 50936, 50936, 689, 309, 311, 411, 11, 1310, 341, 2909, 294, 2699, 76, 3089, 1049, 13, 639, 727, 312, 3094, 7696, 322, 1192, 295, 2699, 76, 3089, 51196, 51196, 1049, 13, 286, 519, 456, 311, 1825, 7115, 466, 2699, 76, 3089, 1049, 13, 467, 1177, 380, 643, 281, 589, 365, 2154, 1124, 51408, 51408, 420, 1340, 13, 407, 341, 307, 544, 364, 16197, 295, 437, 360, 286, 915, 4670, 466, 3089, 5125, 30, 51728, 51728], "temperature": 0.0, "avg_logprob": -0.08751374816894532, "compression_ratio": 1.8181818181818181, "no_caption_prob": 6.502158794319257e-05}, {"id": 455, "seek": 272148, "start": 2721.48, "end": 2725.08, "text": " And there's this whole territory that sort of opens up when you have something that is convenient.", "tokens": [50364, 400, 456, 311, 341, 1379, 11360, 300, 1333, 295, 9870, 493, 562, 291, 362, 746, 300, 307, 10851, 13, 50544, 50544, 467, 311, 411, 11, 286, 478, 406, 18788, 466, 41596, 11, 406, 18788, 466, 2010, 38253, 13, 876, 11, 321, 733, 295, 50756, 50756, 5298, 281, 2152, 2699, 76, 3089, 1049, 775, 362, 2010, 38253, 294, 309, 13, 1743, 2573, 484, 264, 2010, 13397, 13, 51060, 51060, 821, 366, 512, 15705, 281, 309, 13, 467, 311, 406, 382, 4069, 382, 264, 2699, 76, 31958, 11, 457, 300, 311, 2489, 570, 51276, 51276, 264, 2010, 38253, 456, 307, 257, 19283, 13, 509, 393, 670, 21561, 309, 498, 291, 458, 309, 13, 400, 309, 311, 767, 51564, 51564, 2673, 406, 300, 955, 295, 257, 2028, 281, 670, 21561, 309, 13, 961, 311, 9192, 666, 300, 257, 707, 857, 13, 407, 51780, 51808], "temperature": 0.0, "avg_logprob": -0.08895705296443059, "compression_ratio": 1.7788161993769471, "no_caption_prob": 3.2190288038691506e-05}, {"id": 456, "seek": 272148, "start": 2725.08, "end": 2729.32, "text": " It's like, I'm not worrying about imports, not worrying about type inference. Oh, we kind of", "tokens": [50364, 400, 456, 311, 341, 1379, 11360, 300, 1333, 295, 9870, 493, 562, 291, 362, 746, 300, 307, 10851, 13, 50544, 50544, 467, 311, 411, 11, 286, 478, 406, 18788, 466, 41596, 11, 406, 18788, 466, 2010, 38253, 13, 876, 11, 321, 733, 295, 50756, 50756, 5298, 281, 2152, 2699, 76, 3089, 1049, 775, 362, 2010, 38253, 294, 309, 13, 1743, 2573, 484, 264, 2010, 13397, 13, 51060, 51060, 821, 366, 512, 15705, 281, 309, 13, 467, 311, 406, 382, 4069, 382, 264, 2699, 76, 31958, 11, 457, 300, 311, 2489, 570, 51276, 51276, 264, 2010, 38253, 456, 307, 257, 19283, 13, 509, 393, 670, 21561, 309, 498, 291, 458, 309, 13, 400, 309, 311, 767, 51564, 51564, 2673, 406, 300, 955, 295, 257, 2028, 281, 670, 21561, 309, 13, 961, 311, 9192, 666, 300, 257, 707, 857, 13, 407, 51780, 51808], "temperature": 0.0, "avg_logprob": -0.08895705296443059, "compression_ratio": 1.7788161993769471, "no_caption_prob": 3.2190288038691506e-05}, {"id": 457, "seek": 272148, "start": 2729.32, "end": 2735.4, "text": " forgot to mention Elm code gen does have type inference in it. Like figure out the type signature.", "tokens": [50364, 400, 456, 311, 341, 1379, 11360, 300, 1333, 295, 9870, 493, 562, 291, 362, 746, 300, 307, 10851, 13, 50544, 50544, 467, 311, 411, 11, 286, 478, 406, 18788, 466, 41596, 11, 406, 18788, 466, 2010, 38253, 13, 876, 11, 321, 733, 295, 50756, 50756, 5298, 281, 2152, 2699, 76, 3089, 1049, 775, 362, 2010, 38253, 294, 309, 13, 1743, 2573, 484, 264, 2010, 13397, 13, 51060, 51060, 821, 366, 512, 15705, 281, 309, 13, 467, 311, 406, 382, 4069, 382, 264, 2699, 76, 31958, 11, 457, 300, 311, 2489, 570, 51276, 51276, 264, 2010, 38253, 456, 307, 257, 19283, 13, 509, 393, 670, 21561, 309, 498, 291, 458, 309, 13, 400, 309, 311, 767, 51564, 51564, 2673, 406, 300, 955, 295, 257, 2028, 281, 670, 21561, 309, 13, 961, 311, 9192, 666, 300, 257, 707, 857, 13, 407, 51780, 51808], "temperature": 0.0, "avg_logprob": -0.08895705296443059, "compression_ratio": 1.7788161993769471, "no_caption_prob": 3.2190288038691506e-05}, {"id": 458, "seek": 272148, "start": 2735.4, "end": 2739.72, "text": " There are some limitations to it. It's not as smart as the Elm compiler, but that's fine because", "tokens": [50364, 400, 456, 311, 341, 1379, 11360, 300, 1333, 295, 9870, 493, 562, 291, 362, 746, 300, 307, 10851, 13, 50544, 50544, 467, 311, 411, 11, 286, 478, 406, 18788, 466, 41596, 11, 406, 18788, 466, 2010, 38253, 13, 876, 11, 321, 733, 295, 50756, 50756, 5298, 281, 2152, 2699, 76, 3089, 1049, 775, 362, 2010, 38253, 294, 309, 13, 1743, 2573, 484, 264, 2010, 13397, 13, 51060, 51060, 821, 366, 512, 15705, 281, 309, 13, 467, 311, 406, 382, 4069, 382, 264, 2699, 76, 31958, 11, 457, 300, 311, 2489, 570, 51276, 51276, 264, 2010, 38253, 456, 307, 257, 19283, 13, 509, 393, 670, 21561, 309, 498, 291, 458, 309, 13, 400, 309, 311, 767, 51564, 51564, 2673, 406, 300, 955, 295, 257, 2028, 281, 670, 21561, 309, 13, 961, 311, 9192, 666, 300, 257, 707, 857, 13, 407, 51780, 51808], "temperature": 0.0, "avg_logprob": -0.08895705296443059, "compression_ratio": 1.7788161993769471, "no_caption_prob": 3.2190288038691506e-05}, {"id": 459, "seek": 272148, "start": 2739.72, "end": 2745.48, "text": " the type inference there is a convenience. You can overwrite it if you know it. And it's actually", "tokens": [50364, 400, 456, 311, 341, 1379, 11360, 300, 1333, 295, 9870, 493, 562, 291, 362, 746, 300, 307, 10851, 13, 50544, 50544, 467, 311, 411, 11, 286, 478, 406, 18788, 466, 41596, 11, 406, 18788, 466, 2010, 38253, 13, 876, 11, 321, 733, 295, 50756, 50756, 5298, 281, 2152, 2699, 76, 3089, 1049, 775, 362, 2010, 38253, 294, 309, 13, 1743, 2573, 484, 264, 2010, 13397, 13, 51060, 51060, 821, 366, 512, 15705, 281, 309, 13, 467, 311, 406, 382, 4069, 382, 264, 2699, 76, 31958, 11, 457, 300, 311, 2489, 570, 51276, 51276, 264, 2010, 38253, 456, 307, 257, 19283, 13, 509, 393, 670, 21561, 309, 498, 291, 458, 309, 13, 400, 309, 311, 767, 51564, 51564, 2673, 406, 300, 955, 295, 257, 2028, 281, 670, 21561, 309, 13, 961, 311, 9192, 666, 300, 257, 707, 857, 13, 407, 51780, 51808], "temperature": 0.0, "avg_logprob": -0.08895705296443059, "compression_ratio": 1.7788161993769471, "no_caption_prob": 3.2190288038691506e-05}, {"id": 460, "seek": 272148, "start": 2745.48, "end": 2749.8, "text": " usually not that big of a deal to overwrite it. Let's dive into that a little bit. So", "tokens": [50364, 400, 456, 311, 341, 1379, 11360, 300, 1333, 295, 9870, 493, 562, 291, 362, 746, 300, 307, 10851, 13, 50544, 50544, 467, 311, 411, 11, 286, 478, 406, 18788, 466, 41596, 11, 406, 18788, 466, 2010, 38253, 13, 876, 11, 321, 733, 295, 50756, 50756, 5298, 281, 2152, 2699, 76, 3089, 1049, 775, 362, 2010, 38253, 294, 309, 13, 1743, 2573, 484, 264, 2010, 13397, 13, 51060, 51060, 821, 366, 512, 15705, 281, 309, 13, 467, 311, 406, 382, 4069, 382, 264, 2699, 76, 31958, 11, 457, 300, 311, 2489, 570, 51276, 51276, 264, 2010, 38253, 456, 307, 257, 19283, 13, 509, 393, 670, 21561, 309, 498, 291, 458, 309, 13, 400, 309, 311, 767, 51564, 51564, 2673, 406, 300, 955, 295, 257, 2028, 281, 670, 21561, 309, 13, 961, 311, 9192, 666, 300, 257, 707, 857, 13, 407, 51780, 51808], "temperature": 0.0, "avg_logprob": -0.08895705296443059, "compression_ratio": 1.7788161993769471, "no_caption_prob": 3.2190288038691506e-05}, {"id": 461, "seek": 274980, "start": 2749.8, "end": 2758.36, "text": " at the base level, if you do in your Elm code gen generate module where you're generating some code,", "tokens": [50364, 412, 264, 3096, 1496, 11, 498, 291, 360, 294, 428, 2699, 76, 3089, 1049, 8460, 10088, 689, 291, 434, 17746, 512, 3089, 11, 50792, 50792, 498, 291, 6964, 257, 27606, 293, 550, 294, 300, 27606, 291, 445, 362, 257, 11, 291, 584, 11, 565, 4018, 51228, 51256, 6915, 565, 5893, 1728, 271, 732, 1366, 970, 4018, 11, 550, 309, 3255, 264, 2010, 295, 300, 11, 411, 264, 3089, 291, 10833, 51784, 51784], "temperature": 0.0, "avg_logprob": -0.21667312931370092, "compression_ratio": 1.6685714285714286, "no_caption_prob": 8.397974852414336e-06}, {"id": 462, "seek": 274980, "start": 2758.36, "end": 2767.0800000000004, "text": " if you define a declaration and then in that declaration you just have a, you say, time zero", "tokens": [50364, 412, 264, 3096, 1496, 11, 498, 291, 360, 294, 428, 2699, 76, 3089, 1049, 8460, 10088, 689, 291, 434, 17746, 512, 3089, 11, 50792, 50792, 498, 291, 6964, 257, 27606, 293, 550, 294, 300, 27606, 291, 445, 362, 257, 11, 291, 584, 11, 565, 4018, 51228, 51256, 6915, 565, 5893, 1728, 271, 732, 1366, 970, 4018, 11, 550, 309, 3255, 264, 2010, 295, 300, 11, 411, 264, 3089, 291, 10833, 51784, 51784], "temperature": 0.0, "avg_logprob": -0.21667312931370092, "compression_ratio": 1.6685714285714286, "no_caption_prob": 8.397974852414336e-06}, {"id": 463, "seek": 274980, "start": 2767.6400000000003, "end": 2778.2000000000003, "text": " equals time dot millis two posix zero, then it knows the type of that, like the code you generated", "tokens": [50364, 412, 264, 3096, 1496, 11, 498, 291, 360, 294, 428, 2699, 76, 3089, 1049, 8460, 10088, 689, 291, 434, 17746, 512, 3089, 11, 50792, 50792, 498, 291, 6964, 257, 27606, 293, 550, 294, 300, 27606, 291, 445, 362, 257, 11, 291, 584, 11, 565, 4018, 51228, 51256, 6915, 565, 5893, 1728, 271, 732, 1366, 970, 4018, 11, 550, 309, 3255, 264, 2010, 295, 300, 11, 411, 264, 3089, 291, 10833, 51784, 51784], "temperature": 0.0, "avg_logprob": -0.21667312931370092, "compression_ratio": 1.6685714285714286, "no_caption_prob": 8.397974852414336e-06}, {"id": 464, "seek": 277820, "start": 2778.2, "end": 2784.9199999999996, "text": " when you did Elm code gen install Elm slash time knows all of the types for those little generated", "tokens": [50364, 562, 291, 630, 2699, 76, 3089, 1049, 3625, 2699, 76, 17330, 565, 3255, 439, 295, 264, 3467, 337, 729, 707, 10833, 50700, 50700, 342, 5432, 281, 854, 291, 1322, 1228, 300, 7372, 13, 400, 4412, 300, 27606, 11, 562, 291, 8460, 309, 11, 51024, 51024, 309, 311, 516, 281, 584, 565, 4018, 8255, 565, 5893, 1366, 970, 11, 558, 30, 10865, 309, 13596, 986, 300, 13, 51208, 51208, 865, 11, 300, 311, 558, 13, 865, 13, 407, 411, 291, 603, 11, 291, 603, 909, 294, 707, 4190, 11, 2318, 411, 5141, 51476, 51476, 484, 281, 15148, 293, 1507, 13, 400, 6284, 562, 291, 15529, 300, 27606, 11, 309, 820, 362, 257, 51772, 51772], "temperature": 0.0, "avg_logprob": -0.08275014628534731, "compression_ratio": 1.7007299270072993, "no_caption_prob": 1.750233604980167e-05}, {"id": 465, "seek": 277820, "start": 2784.9199999999996, "end": 2791.3999999999996, "text": " stubs to help you build using that package. And therefore that declaration, when you generate it,", "tokens": [50364, 562, 291, 630, 2699, 76, 3089, 1049, 3625, 2699, 76, 17330, 565, 3255, 439, 295, 264, 3467, 337, 729, 707, 10833, 50700, 50700, 342, 5432, 281, 854, 291, 1322, 1228, 300, 7372, 13, 400, 4412, 300, 27606, 11, 562, 291, 8460, 309, 11, 51024, 51024, 309, 311, 516, 281, 584, 565, 4018, 8255, 565, 5893, 1366, 970, 11, 558, 30, 10865, 309, 13596, 986, 300, 13, 51208, 51208, 865, 11, 300, 311, 558, 13, 865, 13, 407, 411, 291, 603, 11, 291, 603, 909, 294, 707, 4190, 11, 2318, 411, 5141, 51476, 51476, 484, 281, 15148, 293, 1507, 13, 400, 6284, 562, 291, 15529, 300, 27606, 11, 309, 820, 362, 257, 51772, 51772], "temperature": 0.0, "avg_logprob": -0.08275014628534731, "compression_ratio": 1.7007299270072993, "no_caption_prob": 1.750233604980167e-05}, {"id": 466, "seek": 277820, "start": 2791.3999999999996, "end": 2795.08, "text": " it's going to say time zero colon time dot posix, right? Cause it inferred that.", "tokens": [50364, 562, 291, 630, 2699, 76, 3089, 1049, 3625, 2699, 76, 17330, 565, 3255, 439, 295, 264, 3467, 337, 729, 707, 10833, 50700, 50700, 342, 5432, 281, 854, 291, 1322, 1228, 300, 7372, 13, 400, 4412, 300, 27606, 11, 562, 291, 8460, 309, 11, 51024, 51024, 309, 311, 516, 281, 584, 565, 4018, 8255, 565, 5893, 1366, 970, 11, 558, 30, 10865, 309, 13596, 986, 300, 13, 51208, 51208, 865, 11, 300, 311, 558, 13, 865, 13, 407, 411, 291, 603, 11, 291, 603, 909, 294, 707, 4190, 11, 2318, 411, 5141, 51476, 51476, 484, 281, 15148, 293, 1507, 13, 400, 6284, 562, 291, 15529, 300, 27606, 11, 309, 820, 362, 257, 51772, 51772], "temperature": 0.0, "avg_logprob": -0.08275014628534731, "compression_ratio": 1.7007299270072993, "no_caption_prob": 1.750233604980167e-05}, {"id": 467, "seek": 277820, "start": 2795.08, "end": 2800.4399999999996, "text": " Yeah, that's right. Yeah. So like you'll, you'll add in little values, especially like calling", "tokens": [50364, 562, 291, 630, 2699, 76, 3089, 1049, 3625, 2699, 76, 17330, 565, 3255, 439, 295, 264, 3467, 337, 729, 707, 10833, 50700, 50700, 342, 5432, 281, 854, 291, 1322, 1228, 300, 7372, 13, 400, 4412, 300, 27606, 11, 562, 291, 8460, 309, 11, 51024, 51024, 309, 311, 516, 281, 584, 565, 4018, 8255, 565, 5893, 1366, 970, 11, 558, 30, 10865, 309, 13596, 986, 300, 13, 51208, 51208, 865, 11, 300, 311, 558, 13, 865, 13, 407, 411, 291, 603, 11, 291, 603, 909, 294, 707, 4190, 11, 2318, 411, 5141, 51476, 51476, 484, 281, 15148, 293, 1507, 13, 400, 6284, 562, 291, 15529, 300, 27606, 11, 309, 820, 362, 257, 51772, 51772], "temperature": 0.0, "avg_logprob": -0.08275014628534731, "compression_ratio": 1.7007299270072993, "no_caption_prob": 1.750233604980167e-05}, {"id": 468, "seek": 277820, "start": 2800.4399999999996, "end": 2806.3599999999997, "text": " out to libraries and stuff. And ultimately when you render that declaration, it should have a", "tokens": [50364, 562, 291, 630, 2699, 76, 3089, 1049, 3625, 2699, 76, 17330, 565, 3255, 439, 295, 264, 3467, 337, 729, 707, 10833, 50700, 50700, 342, 5432, 281, 854, 291, 1322, 1228, 300, 7372, 13, 400, 4412, 300, 27606, 11, 562, 291, 8460, 309, 11, 51024, 51024, 309, 311, 516, 281, 584, 565, 4018, 8255, 565, 5893, 1366, 970, 11, 558, 30, 10865, 309, 13596, 986, 300, 13, 51208, 51208, 865, 11, 300, 311, 558, 13, 865, 13, 407, 411, 291, 603, 11, 291, 603, 909, 294, 707, 4190, 11, 2318, 411, 5141, 51476, 51476, 484, 281, 15148, 293, 1507, 13, 400, 6284, 562, 291, 15529, 300, 27606, 11, 309, 820, 362, 257, 51772, 51772], "temperature": 0.0, "avg_logprob": -0.08275014628534731, "compression_ratio": 1.7007299270072993, "no_caption_prob": 1.750233604980167e-05}, {"id": 469, "seek": 280636, "start": 2806.36, "end": 2813.48, "text": " type signature, which is correct, except for a few cases. One, there are some nuances to building", "tokens": [50364, 2010, 13397, 11, 597, 307, 3006, 11, 3993, 337, 257, 1326, 3331, 13, 1485, 11, 456, 366, 512, 38775, 281, 2390, 50720, 50720, 2010, 38253, 13, 400, 370, 456, 366, 512, 11, 456, 366, 512, 3331, 300, 286, 643, 281, 2573, 484, 13, 286, 519, 294, 51068, 51068, 264, 2674, 11, 411, 281, 312, 3143, 294, 264, 2699, 76, 460, 13695, 11, 264, 6405, 286, 478, 1364, 322, 1228, 264, 24321, 11, 286, 589, 412, 51544, 51544], "temperature": 0.0, "avg_logprob": -0.1317850909655607, "compression_ratio": 1.544502617801047, "no_caption_prob": 0.00013133851462043822}, {"id": 470, "seek": 280636, "start": 2813.48, "end": 2820.44, "text": " type inference. And so there are some, there are some cases that I need to figure out. I think in", "tokens": [50364, 2010, 13397, 11, 597, 307, 3006, 11, 3993, 337, 257, 1326, 3331, 13, 1485, 11, 456, 366, 512, 38775, 281, 2390, 50720, 50720, 2010, 38253, 13, 400, 370, 456, 366, 512, 11, 456, 366, 512, 3331, 300, 286, 643, 281, 2573, 484, 13, 286, 519, 294, 51068, 51068, 264, 2674, 11, 411, 281, 312, 3143, 294, 264, 2699, 76, 460, 13695, 11, 264, 6405, 286, 478, 1364, 322, 1228, 264, 24321, 11, 286, 589, 412, 51544, 51544], "temperature": 0.0, "avg_logprob": -0.1317850909655607, "compression_ratio": 1.544502617801047, "no_caption_prob": 0.00013133851462043822}, {"id": 471, "seek": 280636, "start": 2820.44, "end": 2829.96, "text": " the general, like to be fair in the Elm GQL, the library I'm working on using the vendor, I work at", "tokens": [50364, 2010, 13397, 11, 597, 307, 3006, 11, 3993, 337, 257, 1326, 3331, 13, 1485, 11, 456, 366, 512, 38775, 281, 2390, 50720, 50720, 2010, 38253, 13, 400, 370, 456, 366, 512, 11, 456, 366, 512, 3331, 300, 286, 643, 281, 2573, 484, 13, 286, 519, 294, 51068, 51068, 264, 2674, 11, 411, 281, 312, 3143, 294, 264, 2699, 76, 460, 13695, 11, 264, 6405, 286, 478, 1364, 322, 1228, 264, 24321, 11, 286, 589, 412, 51544, 51544], "temperature": 0.0, "avg_logprob": -0.1317850909655607, "compression_ratio": 1.544502617801047, "no_caption_prob": 0.00013133851462043822}, {"id": 472, "seek": 282996, "start": 2829.96, "end": 2836.28, "text": " vendor, which uses, we have 600,000 lines of Elm code, FYI, 300,000 lines of them are generated.", "tokens": [50364, 24321, 11, 597, 4960, 11, 321, 362, 11849, 11, 1360, 3876, 295, 2699, 76, 3089, 11, 42730, 40, 11, 6641, 11, 1360, 3876, 295, 552, 366, 10833, 13, 50680, 50808, 583, 295, 264, 9714, 7098, 11, 420, 286, 519, 309, 311, 29139, 420, 370, 300, 366, 10833, 11, 597, 281, 312, 3143, 11, 51160, 51160, 321, 500, 380, 764, 439, 295, 552, 13, 400, 264, 2306, 321, 360, 764, 11, 291, 787, 5374, 4190, 300, 366, 1143, 11, 51384, 51384, 597, 307, 1021, 281, 1949, 562, 17746, 2699, 76, 3089, 13, 509, 483, 11, 291, 458, 11, 291, 434, 406, 516, 281, 51624, 51624], "temperature": 0.0, "avg_logprob": -0.1145616297451955, "compression_ratio": 1.6788990825688073, "no_caption_prob": 2.355122887820471e-05}, {"id": 473, "seek": 282996, "start": 2838.84, "end": 2845.88, "text": " But of the 1000 files, or I think it's 1200 or so that are generated, which to be fair,", "tokens": [50364, 24321, 11, 597, 4960, 11, 321, 362, 11849, 11, 1360, 3876, 295, 2699, 76, 3089, 11, 42730, 40, 11, 6641, 11, 1360, 3876, 295, 552, 366, 10833, 13, 50680, 50808, 583, 295, 264, 9714, 7098, 11, 420, 286, 519, 309, 311, 29139, 420, 370, 300, 366, 10833, 11, 597, 281, 312, 3143, 11, 51160, 51160, 321, 500, 380, 764, 439, 295, 552, 13, 400, 264, 2306, 321, 360, 764, 11, 291, 787, 5374, 4190, 300, 366, 1143, 11, 51384, 51384, 597, 307, 1021, 281, 1949, 562, 17746, 2699, 76, 3089, 13, 509, 483, 11, 291, 458, 11, 291, 434, 406, 516, 281, 51624, 51624], "temperature": 0.0, "avg_logprob": -0.1145616297451955, "compression_ratio": 1.6788990825688073, "no_caption_prob": 2.355122887820471e-05}, {"id": 474, "seek": 282996, "start": 2845.88, "end": 2850.36, "text": " we don't use all of them. And the ones we do use, you only ship values that are used,", "tokens": [50364, 24321, 11, 597, 4960, 11, 321, 362, 11849, 11, 1360, 3876, 295, 2699, 76, 3089, 11, 42730, 40, 11, 6641, 11, 1360, 3876, 295, 552, 366, 10833, 13, 50680, 50808, 583, 295, 264, 9714, 7098, 11, 420, 286, 519, 309, 311, 29139, 420, 370, 300, 366, 10833, 11, 597, 281, 312, 3143, 11, 51160, 51160, 321, 500, 380, 764, 439, 295, 552, 13, 400, 264, 2306, 321, 360, 764, 11, 291, 787, 5374, 4190, 300, 366, 1143, 11, 51384, 51384, 597, 307, 1021, 281, 1949, 562, 17746, 2699, 76, 3089, 13, 509, 483, 11, 291, 458, 11, 291, 434, 406, 516, 281, 51624, 51624], "temperature": 0.0, "avg_logprob": -0.1145616297451955, "compression_ratio": 1.6788990825688073, "no_caption_prob": 2.355122887820471e-05}, {"id": 475, "seek": 282996, "start": 2850.36, "end": 2855.16, "text": " which is important to consider when generating Elm code. You get, you know, you're not going to", "tokens": [50364, 24321, 11, 597, 4960, 11, 321, 362, 11849, 11, 1360, 3876, 295, 2699, 76, 3089, 11, 42730, 40, 11, 6641, 11, 1360, 3876, 295, 552, 366, 10833, 13, 50680, 50808, 583, 295, 264, 9714, 7098, 11, 420, 286, 519, 309, 311, 29139, 420, 370, 300, 366, 10833, 11, 597, 281, 312, 3143, 11, 51160, 51160, 321, 500, 380, 764, 439, 295, 552, 13, 400, 264, 2306, 321, 360, 764, 11, 291, 787, 5374, 4190, 300, 366, 1143, 11, 51384, 51384, 597, 307, 1021, 281, 1949, 562, 17746, 2699, 76, 3089, 13, 509, 483, 11, 291, 458, 11, 291, 434, 406, 516, 281, 51624, 51624], "temperature": 0.0, "avg_logprob": -0.1145616297451955, "compression_ratio": 1.6788990825688073, "no_caption_prob": 2.355122887820471e-05}, {"id": 476, "seek": 285516, "start": 2855.16, "end": 2862.44, "text": " bear the burden of a huge like asset size for the stuff that you generate and don't use. So", "tokens": [50364, 6155, 264, 12578, 295, 257, 2603, 411, 11999, 2744, 337, 264, 1507, 300, 291, 8460, 293, 500, 380, 764, 13, 407, 50728, 50728, 291, 445, 500, 380, 362, 281, 3292, 466, 300, 13, 583, 337, 729, 9714, 11, 29139, 7098, 300, 321, 8460, 11, 50984, 51012, 264, 2010, 32322, 645, 3006, 13, 1743, 309, 994, 380, 3507, 257, 2010, 13397, 6713, 337, 729, 13, 407, 300, 51244, 51244, 3417, 1238, 665, 13, 583, 456, 366, 3331, 689, 309, 2170, 9019, 13, 286, 519, 2318, 11, 286, 519, 264, 51528, 51528, 1389, 689, 456, 366, 516, 281, 312, 3331, 11, 597, 286, 478, 406, 754, 988, 300, 456, 311, 516, 281, 312, 257, 636, 926, 51776, 51776], "temperature": 0.0, "avg_logprob": -0.08512417744782011, "compression_ratio": 1.7527675276752768, "no_caption_prob": 5.738103936892003e-05}, {"id": 477, "seek": 285516, "start": 2862.44, "end": 2867.56, "text": " you just don't have to worry about that. But for those 1000, 1200 files that we generate,", "tokens": [50364, 6155, 264, 12578, 295, 257, 2603, 411, 11999, 2744, 337, 264, 1507, 300, 291, 8460, 293, 500, 380, 764, 13, 407, 50728, 50728, 291, 445, 500, 380, 362, 281, 3292, 466, 300, 13, 583, 337, 729, 9714, 11, 29139, 7098, 300, 321, 8460, 11, 50984, 51012, 264, 2010, 32322, 645, 3006, 13, 1743, 309, 994, 380, 3507, 257, 2010, 13397, 6713, 337, 729, 13, 407, 300, 51244, 51244, 3417, 1238, 665, 13, 583, 456, 366, 3331, 689, 309, 2170, 9019, 13, 286, 519, 2318, 11, 286, 519, 264, 51528, 51528, 1389, 689, 456, 366, 516, 281, 312, 3331, 11, 597, 286, 478, 406, 754, 988, 300, 456, 311, 516, 281, 312, 257, 636, 926, 51776, 51776], "temperature": 0.0, "avg_logprob": -0.08512417744782011, "compression_ratio": 1.7527675276752768, "no_caption_prob": 5.738103936892003e-05}, {"id": 478, "seek": 285516, "start": 2868.12, "end": 2872.7599999999998, "text": " the type signatures were correct. Like it didn't throw a type signature error for those. So that", "tokens": [50364, 6155, 264, 12578, 295, 257, 2603, 411, 11999, 2744, 337, 264, 1507, 300, 291, 8460, 293, 500, 380, 764, 13, 407, 50728, 50728, 291, 445, 500, 380, 362, 281, 3292, 466, 300, 13, 583, 337, 729, 9714, 11, 29139, 7098, 300, 321, 8460, 11, 50984, 51012, 264, 2010, 32322, 645, 3006, 13, 1743, 309, 994, 380, 3507, 257, 2010, 13397, 6713, 337, 729, 13, 407, 300, 51244, 51244, 3417, 1238, 665, 13, 583, 456, 366, 3331, 689, 309, 2170, 9019, 13, 286, 519, 2318, 11, 286, 519, 264, 51528, 51528, 1389, 689, 456, 366, 516, 281, 312, 3331, 11, 597, 286, 478, 406, 754, 988, 300, 456, 311, 516, 281, 312, 257, 636, 926, 51776, 51776], "temperature": 0.0, "avg_logprob": -0.08512417744782011, "compression_ratio": 1.7527675276752768, "no_caption_prob": 5.738103936892003e-05}, {"id": 479, "seek": 285516, "start": 2872.7599999999998, "end": 2878.44, "text": " feels pretty good. But there are cases where it gets confused. I think especially, I think the", "tokens": [50364, 6155, 264, 12578, 295, 257, 2603, 411, 11999, 2744, 337, 264, 1507, 300, 291, 8460, 293, 500, 380, 764, 13, 407, 50728, 50728, 291, 445, 500, 380, 362, 281, 3292, 466, 300, 13, 583, 337, 729, 9714, 11, 29139, 7098, 300, 321, 8460, 11, 50984, 51012, 264, 2010, 32322, 645, 3006, 13, 1743, 309, 994, 380, 3507, 257, 2010, 13397, 6713, 337, 729, 13, 407, 300, 51244, 51244, 3417, 1238, 665, 13, 583, 456, 366, 3331, 689, 309, 2170, 9019, 13, 286, 519, 2318, 11, 286, 519, 264, 51528, 51528, 1389, 689, 456, 366, 516, 281, 312, 3331, 11, 597, 286, 478, 406, 754, 988, 300, 456, 311, 516, 281, 312, 257, 636, 926, 51776, 51776], "temperature": 0.0, "avg_logprob": -0.08512417744782011, "compression_ratio": 1.7527675276752768, "no_caption_prob": 5.738103936892003e-05}, {"id": 480, "seek": 285516, "start": 2878.44, "end": 2883.3999999999996, "text": " case where there are going to be cases, which I'm not even sure that there's going to be a way around", "tokens": [50364, 6155, 264, 12578, 295, 257, 2603, 411, 11999, 2744, 337, 264, 1507, 300, 291, 8460, 293, 500, 380, 764, 13, 407, 50728, 50728, 291, 445, 500, 380, 362, 281, 3292, 466, 300, 13, 583, 337, 729, 9714, 11, 29139, 7098, 300, 321, 8460, 11, 50984, 51012, 264, 2010, 32322, 645, 3006, 13, 1743, 309, 994, 380, 3507, 257, 2010, 13397, 6713, 337, 729, 13, 407, 300, 51244, 51244, 3417, 1238, 665, 13, 583, 456, 366, 3331, 689, 309, 2170, 9019, 13, 286, 519, 2318, 11, 286, 519, 264, 51528, 51528, 1389, 689, 456, 366, 516, 281, 312, 3331, 11, 597, 286, 478, 406, 754, 988, 300, 456, 311, 516, 281, 312, 257, 636, 926, 51776, 51776], "temperature": 0.0, "avg_logprob": -0.08512417744782011, "compression_ratio": 1.7527675276752768, "no_caption_prob": 5.738103936892003e-05}, {"id": 481, "seek": 288340, "start": 2883.4, "end": 2892.6, "text": " it, which is when you're heavily using aliases to capture various states. Like it's just,", "tokens": [50364, 309, 11, 597, 307, 562, 291, 434, 10950, 1228, 10198, 1957, 281, 7983, 3683, 4368, 13, 1743, 309, 311, 445, 11, 50824, 50824, 264, 1168, 307, 11, 307, 445, 11, 309, 1177, 380, 4725, 11, 411, 264, 2699, 76, 31958, 3255, 439, 428, 10198, 1957, 13, 51084, 51084, 467, 3255, 309, 570, 309, 3255, 428, 2302, 1716, 13, 492, 500, 380, 360, 11, 411, 321, 360, 588, 13206, 2372, 295, 51300, 51300, 419, 4609, 11603, 11, 558, 30, 407, 472, 295, 264, 4455, 689, 341, 3110, 493, 300, 311, 7595, 307, 2699, 76, 51556, 51556], "temperature": 0.0, "avg_logprob": -0.10464981904963858, "compression_ratio": 1.5780590717299579, "no_caption_prob": 5.307015817379579e-05}, {"id": 482, "seek": 288340, "start": 2892.6, "end": 2897.8, "text": " the question is, is just, it doesn't necessarily, like the Elm compiler knows all your aliases.", "tokens": [50364, 309, 11, 597, 307, 562, 291, 434, 10950, 1228, 10198, 1957, 281, 7983, 3683, 4368, 13, 1743, 309, 311, 445, 11, 50824, 50824, 264, 1168, 307, 11, 307, 445, 11, 309, 1177, 380, 4725, 11, 411, 264, 2699, 76, 31958, 3255, 439, 428, 10198, 1957, 13, 51084, 51084, 467, 3255, 309, 570, 309, 3255, 428, 2302, 1716, 13, 492, 500, 380, 360, 11, 411, 321, 360, 588, 13206, 2372, 295, 51300, 51300, 419, 4609, 11603, 11, 558, 30, 407, 472, 295, 264, 4455, 689, 341, 3110, 493, 300, 311, 7595, 307, 2699, 76, 51556, 51556], "temperature": 0.0, "avg_logprob": -0.10464981904963858, "compression_ratio": 1.5780590717299579, "no_caption_prob": 5.307015817379579e-05}, {"id": 483, "seek": 288340, "start": 2897.8, "end": 2902.12, "text": " It knows it because it knows your entire project. We don't do, like we do very minimal amount of", "tokens": [50364, 309, 11, 597, 307, 562, 291, 434, 10950, 1228, 10198, 1957, 281, 7983, 3683, 4368, 13, 1743, 309, 311, 445, 11, 50824, 50824, 264, 1168, 307, 11, 307, 445, 11, 309, 1177, 380, 4725, 11, 411, 264, 2699, 76, 31958, 3255, 439, 428, 10198, 1957, 13, 51084, 51084, 467, 3255, 309, 570, 309, 3255, 428, 2302, 1716, 13, 492, 500, 380, 360, 11, 411, 321, 360, 588, 13206, 2372, 295, 51300, 51300, 419, 4609, 11603, 11, 558, 30, 407, 472, 295, 264, 4455, 689, 341, 3110, 493, 300, 311, 7595, 307, 2699, 76, 51556, 51556], "temperature": 0.0, "avg_logprob": -0.10464981904963858, "compression_ratio": 1.5780590717299579, "no_caption_prob": 5.307015817379579e-05}, {"id": 484, "seek": 288340, "start": 2902.12, "end": 2907.2400000000002, "text": " alias tracking, right? So one of the projects where this shows up that's challenging is Elm", "tokens": [50364, 309, 11, 597, 307, 562, 291, 434, 10950, 1228, 10198, 1957, 281, 7983, 3683, 4368, 13, 1743, 309, 311, 445, 11, 50824, 50824, 264, 1168, 307, 11, 307, 445, 11, 309, 1177, 380, 4725, 11, 411, 264, 2699, 76, 31958, 3255, 439, 428, 10198, 1957, 13, 51084, 51084, 467, 3255, 309, 570, 309, 3255, 428, 2302, 1716, 13, 492, 500, 380, 360, 11, 411, 321, 360, 588, 13206, 2372, 295, 51300, 51300, 419, 4609, 11603, 11, 558, 30, 407, 472, 295, 264, 4455, 689, 341, 3110, 493, 300, 311, 7595, 307, 2699, 76, 51556, 51556], "temperature": 0.0, "avg_logprob": -0.10464981904963858, "compression_ratio": 1.5780590717299579, "no_caption_prob": 5.307015817379579e-05}, {"id": 485, "seek": 290724, "start": 2907.24, "end": 2913.8799999999997, "text": " CSS because they use type aliases to mimic the constraints of CSS, which is challenging. So", "tokens": [50364, 24387, 570, 436, 764, 2010, 10198, 1957, 281, 31075, 264, 18491, 295, 24387, 11, 597, 307, 7595, 13, 407, 50696, 50696, 456, 11, 411, 264, 551, 291, 393, 360, 307, 291, 584, 411, 11, 1392, 11, 869, 13, 286, 603, 445, 980, 291, 437, 264, 2010, 307, 13, 51004, 51004, 286, 458, 437, 309, 307, 13, 467, 311, 767, 406, 300, 3288, 13, 407, 291, 393, 584, 11, 291, 458, 11, 337, 341, 27606, 11, 51228, 51228, 264, 2010, 307, 516, 281, 312, 341, 293, 550, 321, 603, 312, 2489, 13, 51356, 51444, 1033, 13, 400, 291, 2835, 364, 7615, 9972, 689, 291, 393, 854, 309, 2051, 498, 309, 775, 483, 9019, 13, 51728, 51728], "temperature": 0.0, "avg_logprob": -0.10682273929954594, "compression_ratio": 1.6553030303030303, "no_caption_prob": 0.000194087770069018}, {"id": 486, "seek": 290724, "start": 2913.8799999999997, "end": 2920.04, "text": " there, like the thing you can do is you say like, okay, great. I'll just tell you what the type is.", "tokens": [50364, 24387, 570, 436, 764, 2010, 10198, 1957, 281, 31075, 264, 18491, 295, 24387, 11, 597, 307, 7595, 13, 407, 50696, 50696, 456, 11, 411, 264, 551, 291, 393, 360, 307, 291, 584, 411, 11, 1392, 11, 869, 13, 286, 603, 445, 980, 291, 437, 264, 2010, 307, 13, 51004, 51004, 286, 458, 437, 309, 307, 13, 467, 311, 767, 406, 300, 3288, 13, 407, 291, 393, 584, 11, 291, 458, 11, 337, 341, 27606, 11, 51228, 51228, 264, 2010, 307, 516, 281, 312, 341, 293, 550, 321, 603, 312, 2489, 13, 51356, 51444, 1033, 13, 400, 291, 2835, 364, 7615, 9972, 689, 291, 393, 854, 309, 2051, 498, 309, 775, 483, 9019, 13, 51728, 51728], "temperature": 0.0, "avg_logprob": -0.10682273929954594, "compression_ratio": 1.6553030303030303, "no_caption_prob": 0.000194087770069018}, {"id": 487, "seek": 290724, "start": 2920.04, "end": 2924.52, "text": " I know what it is. It's actually not that involved. So you can say, you know, for this declaration,", "tokens": [50364, 24387, 570, 436, 764, 2010, 10198, 1957, 281, 31075, 264, 18491, 295, 24387, 11, 597, 307, 7595, 13, 407, 50696, 50696, 456, 11, 411, 264, 551, 291, 393, 360, 307, 291, 584, 411, 11, 1392, 11, 869, 13, 286, 603, 445, 980, 291, 437, 264, 2010, 307, 13, 51004, 51004, 286, 458, 437, 309, 307, 13, 467, 311, 767, 406, 300, 3288, 13, 407, 291, 393, 584, 11, 291, 458, 11, 337, 341, 27606, 11, 51228, 51228, 264, 2010, 307, 516, 281, 312, 341, 293, 550, 321, 603, 312, 2489, 13, 51356, 51444, 1033, 13, 400, 291, 2835, 364, 7615, 9972, 689, 291, 393, 854, 309, 2051, 498, 309, 775, 483, 9019, 13, 51728, 51728], "temperature": 0.0, "avg_logprob": -0.10682273929954594, "compression_ratio": 1.6553030303030303, "no_caption_prob": 0.000194087770069018}, {"id": 488, "seek": 290724, "start": 2924.52, "end": 2927.08, "text": " the type is going to be this and then we'll be fine.", "tokens": [50364, 24387, 570, 436, 764, 2010, 10198, 1957, 281, 31075, 264, 18491, 295, 24387, 11, 597, 307, 7595, 13, 407, 50696, 50696, 456, 11, 411, 264, 551, 291, 393, 360, 307, 291, 584, 411, 11, 1392, 11, 869, 13, 286, 603, 445, 980, 291, 437, 264, 2010, 307, 13, 51004, 51004, 286, 458, 437, 309, 307, 13, 467, 311, 767, 406, 300, 3288, 13, 407, 291, 393, 584, 11, 291, 458, 11, 337, 341, 27606, 11, 51228, 51228, 264, 2010, 307, 516, 281, 312, 341, 293, 550, 321, 603, 312, 2489, 13, 51356, 51444, 1033, 13, 400, 291, 2835, 364, 7615, 9972, 689, 291, 393, 854, 309, 2051, 498, 309, 775, 483, 9019, 13, 51728, 51728], "temperature": 0.0, "avg_logprob": -0.10682273929954594, "compression_ratio": 1.6553030303030303, "no_caption_prob": 0.000194087770069018}, {"id": 489, "seek": 290724, "start": 2928.8399999999997, "end": 2934.52, "text": " Okay. And you mentioned an escape patch where you can help it along if it does get confused.", "tokens": [50364, 24387, 570, 436, 764, 2010, 10198, 1957, 281, 31075, 264, 18491, 295, 24387, 11, 597, 307, 7595, 13, 407, 50696, 50696, 456, 11, 411, 264, 551, 291, 393, 360, 307, 291, 584, 411, 11, 1392, 11, 869, 13, 286, 603, 445, 980, 291, 437, 264, 2010, 307, 13, 51004, 51004, 286, 458, 437, 309, 307, 13, 467, 311, 767, 406, 300, 3288, 13, 407, 291, 393, 584, 11, 291, 458, 11, 337, 341, 27606, 11, 51228, 51228, 264, 2010, 307, 516, 281, 312, 341, 293, 550, 321, 603, 312, 2489, 13, 51356, 51444, 1033, 13, 400, 291, 2835, 364, 7615, 9972, 689, 291, 393, 854, 309, 2051, 498, 309, 775, 483, 9019, 13, 51728, 51728], "temperature": 0.0, "avg_logprob": -0.10682273929954594, "compression_ratio": 1.6553030303030303, "no_caption_prob": 0.000194087770069018}, {"id": 490, "seek": 293452, "start": 2934.52, "end": 2940.28, "text": " What is that? That's the with type. Like, yeah. So any expression you can basically say,", "tokens": [50364, 708, 307, 300, 30, 663, 311, 264, 365, 2010, 13, 1743, 11, 1338, 13, 407, 604, 6114, 291, 393, 1936, 584, 11, 50652, 50680, 11200, 437, 291, 645, 884, 13, 639, 307, 437, 291, 366, 13, 400, 550, 291, 434, 294, 4602, 13, 286, 914, 11, 50944, 50944, 291, 434, 920, 516, 281, 411, 11, 6284, 341, 3089, 307, 36548, 538, 2699, 76, 4033, 13, 407, 869, 13, 1743, 291, 603, 51204, 51204, 362, 281, 2573, 309, 484, 13, 1144, 291, 362, 364, 3614, 281, 406, 362, 257, 2010, 48654, 294, 1389, 411, 754, 291, 51512, 51512, 500, 380, 458, 577, 281, 11, 300, 311, 257, 665, 1168, 13, 286, 519, 370, 498, 309, 13603, 11, 309, 311, 406, 516, 281, 362, 257, 2010, 51804, 51804], "temperature": 0.0, "avg_logprob": -0.13628080487251282, "compression_ratio": 1.6823104693140793, "no_caption_prob": 7.484321395168081e-05}, {"id": 491, "seek": 293452, "start": 2940.84, "end": 2946.12, "text": " ignore what you were doing. This is what you are. And then you're in charge. I mean,", "tokens": [50364, 708, 307, 300, 30, 663, 311, 264, 365, 2010, 13, 1743, 11, 1338, 13, 407, 604, 6114, 291, 393, 1936, 584, 11, 50652, 50680, 11200, 437, 291, 645, 884, 13, 639, 307, 437, 291, 366, 13, 400, 550, 291, 434, 294, 4602, 13, 286, 914, 11, 50944, 50944, 291, 434, 920, 516, 281, 411, 11, 6284, 341, 3089, 307, 36548, 538, 2699, 76, 4033, 13, 407, 869, 13, 1743, 291, 603, 51204, 51204, 362, 281, 2573, 309, 484, 13, 1144, 291, 362, 364, 3614, 281, 406, 362, 257, 2010, 48654, 294, 1389, 411, 754, 291, 51512, 51512, 500, 380, 458, 577, 281, 11, 300, 311, 257, 665, 1168, 13, 286, 519, 370, 498, 309, 13603, 11, 309, 311, 406, 516, 281, 362, 257, 2010, 51804, 51804], "temperature": 0.0, "avg_logprob": -0.13628080487251282, "compression_ratio": 1.6823104693140793, "no_caption_prob": 7.484321395168081e-05}, {"id": 492, "seek": 293452, "start": 2946.12, "end": 2951.32, "text": " you're still going to like, ultimately this code is compiled by Elm anyway. So great. Like you'll", "tokens": [50364, 708, 307, 300, 30, 663, 311, 264, 365, 2010, 13, 1743, 11, 1338, 13, 407, 604, 6114, 291, 393, 1936, 584, 11, 50652, 50680, 11200, 437, 291, 645, 884, 13, 639, 307, 437, 291, 366, 13, 400, 550, 291, 434, 294, 4602, 13, 286, 914, 11, 50944, 50944, 291, 434, 920, 516, 281, 411, 11, 6284, 341, 3089, 307, 36548, 538, 2699, 76, 4033, 13, 407, 869, 13, 1743, 291, 603, 51204, 51204, 362, 281, 2573, 309, 484, 13, 1144, 291, 362, 364, 3614, 281, 406, 362, 257, 2010, 48654, 294, 1389, 411, 754, 291, 51512, 51512, 500, 380, 458, 577, 281, 11, 300, 311, 257, 665, 1168, 13, 286, 519, 370, 498, 309, 13603, 11, 309, 311, 406, 516, 281, 362, 257, 2010, 51804, 51804], "temperature": 0.0, "avg_logprob": -0.13628080487251282, "compression_ratio": 1.6823104693140793, "no_caption_prob": 7.484321395168081e-05}, {"id": 493, "seek": 293452, "start": 2951.32, "end": 2957.48, "text": " have to figure it out. Do you have an option to not have a type annotation in case like even you", "tokens": [50364, 708, 307, 300, 30, 663, 311, 264, 365, 2010, 13, 1743, 11, 1338, 13, 407, 604, 6114, 291, 393, 1936, 584, 11, 50652, 50680, 11200, 437, 291, 645, 884, 13, 639, 307, 437, 291, 366, 13, 400, 550, 291, 434, 294, 4602, 13, 286, 914, 11, 50944, 50944, 291, 434, 920, 516, 281, 411, 11, 6284, 341, 3089, 307, 36548, 538, 2699, 76, 4033, 13, 407, 869, 13, 1743, 291, 603, 51204, 51204, 362, 281, 2573, 309, 484, 13, 1144, 291, 362, 364, 3614, 281, 406, 362, 257, 2010, 48654, 294, 1389, 411, 754, 291, 51512, 51512, 500, 380, 458, 577, 281, 11, 300, 311, 257, 665, 1168, 13, 286, 519, 370, 498, 309, 13603, 11, 309, 311, 406, 516, 281, 362, 257, 2010, 51804, 51804], "temperature": 0.0, "avg_logprob": -0.13628080487251282, "compression_ratio": 1.6823104693140793, "no_caption_prob": 7.484321395168081e-05}, {"id": 494, "seek": 293452, "start": 2957.48, "end": 2963.32, "text": " don't know how to, that's a good question. I think so if it errors, it's not going to have a type", "tokens": [50364, 708, 307, 300, 30, 663, 311, 264, 365, 2010, 13, 1743, 11, 1338, 13, 407, 604, 6114, 291, 393, 1936, 584, 11, 50652, 50680, 11200, 437, 291, 645, 884, 13, 639, 307, 437, 291, 366, 13, 400, 550, 291, 434, 294, 4602, 13, 286, 914, 11, 50944, 50944, 291, 434, 920, 516, 281, 411, 11, 6284, 341, 3089, 307, 36548, 538, 2699, 76, 4033, 13, 407, 869, 13, 1743, 291, 603, 51204, 51204, 362, 281, 2573, 309, 484, 13, 1144, 291, 362, 364, 3614, 281, 406, 362, 257, 2010, 48654, 294, 1389, 411, 754, 291, 51512, 51512, 500, 380, 458, 577, 281, 11, 300, 311, 257, 665, 1168, 13, 286, 519, 370, 498, 309, 13603, 11, 309, 311, 406, 516, 281, 362, 257, 2010, 51804, 51804], "temperature": 0.0, "avg_logprob": -0.13628080487251282, "compression_ratio": 1.6823104693140793, "no_caption_prob": 7.484321395168081e-05}, {"id": 495, "seek": 296332, "start": 2963.32, "end": 2967.96, "text": " annotation or at least it shouldn't. There are a few maybe soft errors where the inference is wrong", "tokens": [50364, 48654, 420, 412, 1935, 309, 4659, 380, 13, 821, 366, 257, 1326, 1310, 2787, 13603, 689, 264, 38253, 307, 2085, 50596, 50596, 293, 309, 311, 2902, 264, 2085, 48654, 11, 457, 300, 311, 819, 13, 821, 311, 572, 636, 281, 1333, 295, 584, 411, 11, 50848, 50848, 500, 380, 2464, 604, 48654, 382, 364, 13691, 5629, 412, 264, 1623, 13, 407, 562, 264, 11, 562, 309, 393, 380, 13596, 51256, 51256, 264, 2010, 48654, 11, 291, 1582, 380, 362, 257, 2010, 48654, 13, 865, 13, 1133, 291, 808, 281, 915, 309, 11, 51500, 51500, 13596, 264, 2010, 11, 456, 1582, 380, 312, 257, 2010, 48654, 11, 457, 264, 2290, 1177, 380, 8252, 420, 264, 2290, 1177, 380, 51820, 51820], "temperature": 0.0, "avg_logprob": -0.12196917573282541, "compression_ratio": 1.9392712550607287, "no_caption_prob": 3.8830119592603296e-05}, {"id": 496, "seek": 296332, "start": 2967.96, "end": 2973.0, "text": " and it's giving the wrong annotation, but that's different. There's no way to sort of say like,", "tokens": [50364, 48654, 420, 412, 1935, 309, 4659, 380, 13, 821, 366, 257, 1326, 1310, 2787, 13603, 689, 264, 38253, 307, 2085, 50596, 50596, 293, 309, 311, 2902, 264, 2085, 48654, 11, 457, 300, 311, 819, 13, 821, 311, 572, 636, 281, 1333, 295, 584, 411, 11, 50848, 50848, 500, 380, 2464, 604, 48654, 382, 364, 13691, 5629, 412, 264, 1623, 13, 407, 562, 264, 11, 562, 309, 393, 380, 13596, 51256, 51256, 264, 2010, 48654, 11, 291, 1582, 380, 362, 257, 2010, 48654, 13, 865, 13, 1133, 291, 808, 281, 915, 309, 11, 51500, 51500, 13596, 264, 2010, 11, 456, 1582, 380, 312, 257, 2010, 48654, 11, 457, 264, 2290, 1177, 380, 8252, 420, 264, 2290, 1177, 380, 51820, 51820], "temperature": 0.0, "avg_logprob": -0.12196917573282541, "compression_ratio": 1.9392712550607287, "no_caption_prob": 3.8830119592603296e-05}, {"id": 497, "seek": 296332, "start": 2973.0, "end": 2981.1600000000003, "text": " don't write any annotation as an explicit statement at the moment. So when the, when it can't infer", "tokens": [50364, 48654, 420, 412, 1935, 309, 4659, 380, 13, 821, 366, 257, 1326, 1310, 2787, 13603, 689, 264, 38253, 307, 2085, 50596, 50596, 293, 309, 311, 2902, 264, 2085, 48654, 11, 457, 300, 311, 819, 13, 821, 311, 572, 636, 281, 1333, 295, 584, 411, 11, 50848, 50848, 500, 380, 2464, 604, 48654, 382, 364, 13691, 5629, 412, 264, 1623, 13, 407, 562, 264, 11, 562, 309, 393, 380, 13596, 51256, 51256, 264, 2010, 48654, 11, 291, 1582, 380, 362, 257, 2010, 48654, 13, 865, 13, 1133, 291, 808, 281, 915, 309, 11, 51500, 51500, 13596, 264, 2010, 11, 456, 1582, 380, 312, 257, 2010, 48654, 11, 457, 264, 2290, 1177, 380, 8252, 420, 264, 2290, 1177, 380, 51820, 51820], "temperature": 0.0, "avg_logprob": -0.12196917573282541, "compression_ratio": 1.9392712550607287, "no_caption_prob": 3.8830119592603296e-05}, {"id": 498, "seek": 296332, "start": 2981.1600000000003, "end": 2986.04, "text": " the type annotation, you won't have a type annotation. Yeah. When you come to find it,", "tokens": [50364, 48654, 420, 412, 1935, 309, 4659, 380, 13, 821, 366, 257, 1326, 1310, 2787, 13603, 689, 264, 38253, 307, 2085, 50596, 50596, 293, 309, 311, 2902, 264, 2085, 48654, 11, 457, 300, 311, 819, 13, 821, 311, 572, 636, 281, 1333, 295, 584, 411, 11, 50848, 50848, 500, 380, 2464, 604, 48654, 382, 364, 13691, 5629, 412, 264, 1623, 13, 407, 562, 264, 11, 562, 309, 393, 380, 13596, 51256, 51256, 264, 2010, 48654, 11, 291, 1582, 380, 362, 257, 2010, 48654, 13, 865, 13, 1133, 291, 808, 281, 915, 309, 11, 51500, 51500, 13596, 264, 2010, 11, 456, 1582, 380, 312, 257, 2010, 48654, 11, 457, 264, 2290, 1177, 380, 8252, 420, 264, 2290, 1177, 380, 51820, 51820], "temperature": 0.0, "avg_logprob": -0.12196917573282541, "compression_ratio": 1.9392712550607287, "no_caption_prob": 3.8830119592603296e-05}, {"id": 499, "seek": 296332, "start": 2986.04, "end": 2992.44, "text": " infer the type, there won't be a type annotation, but the tool doesn't crash or the tool doesn't", "tokens": [50364, 48654, 420, 412, 1935, 309, 4659, 380, 13, 821, 366, 257, 1326, 1310, 2787, 13603, 689, 264, 38253, 307, 2085, 50596, 50596, 293, 309, 311, 2902, 264, 2085, 48654, 11, 457, 300, 311, 819, 13, 821, 311, 572, 636, 281, 1333, 295, 584, 411, 11, 50848, 50848, 500, 380, 2464, 604, 48654, 382, 364, 13691, 5629, 412, 264, 1623, 13, 407, 562, 264, 11, 562, 309, 393, 380, 13596, 51256, 51256, 264, 2010, 48654, 11, 291, 1582, 380, 362, 257, 2010, 48654, 13, 865, 13, 1133, 291, 808, 281, 915, 309, 11, 51500, 51500, 13596, 264, 2010, 11, 456, 1582, 380, 312, 257, 2010, 48654, 11, 457, 264, 2290, 1177, 380, 8252, 420, 264, 2290, 1177, 380, 51820, 51820], "temperature": 0.0, "avg_logprob": -0.12196917573282541, "compression_ratio": 1.9392712550607287, "no_caption_prob": 3.8830119592603296e-05}, {"id": 500, "seek": 299244, "start": 2992.44, "end": 2997.88, "text": " say, sorry, I can't generate this code. That's right. We wanted it. Yeah. I think that's a right.", "tokens": [50364, 584, 11, 2597, 11, 286, 393, 380, 8460, 341, 3089, 13, 663, 311, 558, 13, 492, 1415, 309, 13, 865, 13, 286, 519, 300, 311, 257, 558, 13, 50636, 50636, 400, 341, 390, 746, 321, 645, 1953, 466, 307, 411, 11, 286, 994, 380, 528, 452, 10316, 707, 2010, 38253, 50860, 50860, 3089, 11, 597, 286, 478, 411, 11, 574, 11, 341, 307, 534, 445, 411, 11, 498, 309, 311, 11, 498, 309, 1985, 869, 13, 10328, 11, 51196, 51196, 1338, 11, 456, 311, 2098, 926, 505, 13, 467, 311, 406, 300, 955, 295, 257, 2028, 11, 457, 411, 286, 478, 1382, 281, 483, 281, 35194, 11, 51416, 51416, 457, 1338, 11, 19965, 291, 490, 17746, 428, 3089, 307, 406, 35194, 13, 407, 309, 486, 1009, 8460, 51740, 51740], "temperature": 0.0, "avg_logprob": -0.09543183741678718, "compression_ratio": 1.7147887323943662, "no_caption_prob": 5.3909228881821036e-05}, {"id": 501, "seek": 299244, "start": 2997.88, "end": 3002.36, "text": " And this was something we were thinking about is like, I didn't want my dumb little type inference", "tokens": [50364, 584, 11, 2597, 11, 286, 393, 380, 8460, 341, 3089, 13, 663, 311, 558, 13, 492, 1415, 309, 13, 865, 13, 286, 519, 300, 311, 257, 558, 13, 50636, 50636, 400, 341, 390, 746, 321, 645, 1953, 466, 307, 411, 11, 286, 994, 380, 528, 452, 10316, 707, 2010, 38253, 50860, 50860, 3089, 11, 597, 286, 478, 411, 11, 574, 11, 341, 307, 534, 445, 411, 11, 498, 309, 311, 11, 498, 309, 1985, 869, 13, 10328, 11, 51196, 51196, 1338, 11, 456, 311, 2098, 926, 505, 13, 467, 311, 406, 300, 955, 295, 257, 2028, 11, 457, 411, 286, 478, 1382, 281, 483, 281, 35194, 11, 51416, 51416, 457, 1338, 11, 19965, 291, 490, 17746, 428, 3089, 307, 406, 35194, 13, 407, 309, 486, 1009, 8460, 51740, 51740], "temperature": 0.0, "avg_logprob": -0.09543183741678718, "compression_ratio": 1.7147887323943662, "no_caption_prob": 5.3909228881821036e-05}, {"id": 502, "seek": 299244, "start": 3002.36, "end": 3009.08, "text": " code, which I'm like, look, this is really just like, if it's, if it works great. Otherwise,", "tokens": [50364, 584, 11, 2597, 11, 286, 393, 380, 8460, 341, 3089, 13, 663, 311, 558, 13, 492, 1415, 309, 13, 865, 13, 286, 519, 300, 311, 257, 558, 13, 50636, 50636, 400, 341, 390, 746, 321, 645, 1953, 466, 307, 411, 11, 286, 994, 380, 528, 452, 10316, 707, 2010, 38253, 50860, 50860, 3089, 11, 597, 286, 478, 411, 11, 574, 11, 341, 307, 534, 445, 411, 11, 498, 309, 311, 11, 498, 309, 1985, 869, 13, 10328, 11, 51196, 51196, 1338, 11, 456, 311, 2098, 926, 505, 13, 467, 311, 406, 300, 955, 295, 257, 2028, 11, 457, 411, 286, 478, 1382, 281, 483, 281, 35194, 11, 51416, 51416, 457, 1338, 11, 19965, 291, 490, 17746, 428, 3089, 307, 406, 35194, 13, 407, 309, 486, 1009, 8460, 51740, 51740], "temperature": 0.0, "avg_logprob": -0.09543183741678718, "compression_ratio": 1.7147887323943662, "no_caption_prob": 5.3909228881821036e-05}, {"id": 503, "seek": 299244, "start": 3009.08, "end": 3013.48, "text": " yeah, there's ways around us. It's not that big of a deal, but like I'm trying to get to delightful,", "tokens": [50364, 584, 11, 2597, 11, 286, 393, 380, 8460, 341, 3089, 13, 663, 311, 558, 13, 492, 1415, 309, 13, 865, 13, 286, 519, 300, 311, 257, 558, 13, 50636, 50636, 400, 341, 390, 746, 321, 645, 1953, 466, 307, 411, 11, 286, 994, 380, 528, 452, 10316, 707, 2010, 38253, 50860, 50860, 3089, 11, 597, 286, 478, 411, 11, 574, 11, 341, 307, 534, 445, 411, 11, 498, 309, 311, 11, 498, 309, 1985, 869, 13, 10328, 11, 51196, 51196, 1338, 11, 456, 311, 2098, 926, 505, 13, 467, 311, 406, 300, 955, 295, 257, 2028, 11, 457, 411, 286, 478, 1382, 281, 483, 281, 35194, 11, 51416, 51416, 457, 1338, 11, 19965, 291, 490, 17746, 428, 3089, 307, 406, 35194, 13, 407, 309, 486, 1009, 8460, 51740, 51740], "temperature": 0.0, "avg_logprob": -0.09543183741678718, "compression_ratio": 1.7147887323943662, "no_caption_prob": 5.3909228881821036e-05}, {"id": 504, "seek": 299244, "start": 3013.48, "end": 3019.96, "text": " but yeah, preventing you from generating your code is not delightful. So it will always generate", "tokens": [50364, 584, 11, 2597, 11, 286, 393, 380, 8460, 341, 3089, 13, 663, 311, 558, 13, 492, 1415, 309, 13, 865, 13, 286, 519, 300, 311, 257, 558, 13, 50636, 50636, 400, 341, 390, 746, 321, 645, 1953, 466, 307, 411, 11, 286, 994, 380, 528, 452, 10316, 707, 2010, 38253, 50860, 50860, 3089, 11, 597, 286, 478, 411, 11, 574, 11, 341, 307, 534, 445, 411, 11, 498, 309, 311, 11, 498, 309, 1985, 869, 13, 10328, 11, 51196, 51196, 1338, 11, 456, 311, 2098, 926, 505, 13, 467, 311, 406, 300, 955, 295, 257, 2028, 11, 457, 411, 286, 478, 1382, 281, 483, 281, 35194, 11, 51416, 51416, 457, 1338, 11, 19965, 291, 490, 17746, 428, 3089, 307, 406, 35194, 13, 407, 309, 486, 1009, 8460, 51740, 51740], "temperature": 0.0, "avg_logprob": -0.09543183741678718, "compression_ratio": 1.7147887323943662, "no_caption_prob": 5.3909228881821036e-05}, {"id": 505, "seek": 301996, "start": 3019.96, "end": 3025.16, "text": " code unless your code doesn't compile. Right. So the original generation code doesn't compile.", "tokens": [50364, 3089, 5969, 428, 3089, 1177, 380, 31413, 13, 1779, 13, 407, 264, 3380, 5125, 3089, 1177, 380, 31413, 13, 50624, 50652, 407, 264, 11, 1338, 13, 407, 291, 434, 15824, 990, 264, 2010, 8568, 644, 281, 264, 31958, 6284, 13, 865, 13, 50988, 50988, 286, 3172, 291, 362, 281, 11, 558, 30, 286, 914, 11, 411, 11, 286, 914, 11, 6284, 321, 434, 516, 281, 584, 411, 11, 51204, 51204, 321, 434, 516, 281, 853, 527, 1151, 11, 457, 498, 11, 1338, 11, 498, 321, 393, 380, 2573, 309, 484, 11, 321, 434, 406, 516, 281, 11, 51496, 51496, 321, 434, 406, 516, 281, 13, 400, 550, 456, 311, 11, 456, 390, 754, 257, 551, 411, 11, 286, 458, 300, 456, 311, 257, 7426, 11, 51720, 51720], "temperature": 0.0, "avg_logprob": -0.16478624269943828, "compression_ratio": 1.8724279835390947, "no_caption_prob": 1.8342620023759082e-05}, {"id": 506, "seek": 301996, "start": 3025.7200000000003, "end": 3032.44, "text": " So the, yeah. So you're delegating the type checking part to the compiler ultimately. Yeah.", "tokens": [50364, 3089, 5969, 428, 3089, 1177, 380, 31413, 13, 1779, 13, 407, 264, 3380, 5125, 3089, 1177, 380, 31413, 13, 50624, 50652, 407, 264, 11, 1338, 13, 407, 291, 434, 15824, 990, 264, 2010, 8568, 644, 281, 264, 31958, 6284, 13, 865, 13, 50988, 50988, 286, 3172, 291, 362, 281, 11, 558, 30, 286, 914, 11, 411, 11, 286, 914, 11, 6284, 321, 434, 516, 281, 584, 411, 11, 51204, 51204, 321, 434, 516, 281, 853, 527, 1151, 11, 457, 498, 11, 1338, 11, 498, 321, 393, 380, 2573, 309, 484, 11, 321, 434, 406, 516, 281, 11, 51496, 51496, 321, 434, 406, 516, 281, 13, 400, 550, 456, 311, 11, 456, 390, 754, 257, 551, 411, 11, 286, 458, 300, 456, 311, 257, 7426, 11, 51720, 51720], "temperature": 0.0, "avg_logprob": -0.16478624269943828, "compression_ratio": 1.8724279835390947, "no_caption_prob": 1.8342620023759082e-05}, {"id": 507, "seek": 301996, "start": 3032.44, "end": 3036.76, "text": " I wish you have to, right? I mean, like, I mean, ultimately we're going to say like,", "tokens": [50364, 3089, 5969, 428, 3089, 1177, 380, 31413, 13, 1779, 13, 407, 264, 3380, 5125, 3089, 1177, 380, 31413, 13, 50624, 50652, 407, 264, 11, 1338, 13, 407, 291, 434, 15824, 990, 264, 2010, 8568, 644, 281, 264, 31958, 6284, 13, 865, 13, 50988, 50988, 286, 3172, 291, 362, 281, 11, 558, 30, 286, 914, 11, 411, 11, 286, 914, 11, 6284, 321, 434, 516, 281, 584, 411, 11, 51204, 51204, 321, 434, 516, 281, 853, 527, 1151, 11, 457, 498, 11, 1338, 11, 498, 321, 393, 380, 2573, 309, 484, 11, 321, 434, 406, 516, 281, 11, 51496, 51496, 321, 434, 406, 516, 281, 13, 400, 550, 456, 311, 11, 456, 390, 754, 257, 551, 411, 11, 286, 458, 300, 456, 311, 257, 7426, 11, 51720, 51720], "temperature": 0.0, "avg_logprob": -0.16478624269943828, "compression_ratio": 1.8724279835390947, "no_caption_prob": 1.8342620023759082e-05}, {"id": 508, "seek": 301996, "start": 3036.76, "end": 3042.6, "text": " we're going to try our best, but if, yeah, if we can't figure it out, we're not going to,", "tokens": [50364, 3089, 5969, 428, 3089, 1177, 380, 31413, 13, 1779, 13, 407, 264, 3380, 5125, 3089, 1177, 380, 31413, 13, 50624, 50652, 407, 264, 11, 1338, 13, 407, 291, 434, 15824, 990, 264, 2010, 8568, 644, 281, 264, 31958, 6284, 13, 865, 13, 50988, 50988, 286, 3172, 291, 362, 281, 11, 558, 30, 286, 914, 11, 411, 11, 286, 914, 11, 6284, 321, 434, 516, 281, 584, 411, 11, 51204, 51204, 321, 434, 516, 281, 853, 527, 1151, 11, 457, 498, 11, 1338, 11, 498, 321, 393, 380, 2573, 309, 484, 11, 321, 434, 406, 516, 281, 11, 51496, 51496, 321, 434, 406, 516, 281, 13, 400, 550, 456, 311, 11, 456, 390, 754, 257, 551, 411, 11, 286, 458, 300, 456, 311, 257, 7426, 11, 51720, 51720], "temperature": 0.0, "avg_logprob": -0.16478624269943828, "compression_ratio": 1.8724279835390947, "no_caption_prob": 1.8342620023759082e-05}, {"id": 509, "seek": 301996, "start": 3042.6, "end": 3047.08, "text": " we're not going to. And then there's, there was even a thing like, I know that there's a bug,", "tokens": [50364, 3089, 5969, 428, 3089, 1177, 380, 31413, 13, 1779, 13, 407, 264, 3380, 5125, 3089, 1177, 380, 31413, 13, 50624, 50652, 407, 264, 11, 1338, 13, 407, 291, 434, 15824, 990, 264, 2010, 8568, 644, 281, 264, 31958, 6284, 13, 865, 13, 50988, 50988, 286, 3172, 291, 362, 281, 11, 558, 30, 286, 914, 11, 411, 11, 286, 914, 11, 6284, 321, 434, 516, 281, 584, 411, 11, 51204, 51204, 321, 434, 516, 281, 853, 527, 1151, 11, 457, 498, 11, 1338, 11, 498, 321, 393, 380, 2573, 309, 484, 11, 321, 434, 406, 516, 281, 11, 51496, 51496, 321, 434, 406, 516, 281, 13, 400, 550, 456, 311, 11, 456, 390, 754, 257, 551, 411, 11, 286, 458, 300, 456, 311, 257, 7426, 11, 51720, 51720], "temperature": 0.0, "avg_logprob": -0.16478624269943828, "compression_ratio": 1.8724279835390947, "no_caption_prob": 1.8342620023759082e-05}, {"id": 510, "seek": 304708, "start": 3047.08, "end": 3052.2799999999997, "text": " which Dylan ran into earlier today, which I'm so glad for, which I actually, in this line of", "tokens": [50364, 597, 28160, 5872, 666, 3071, 965, 11, 597, 286, 478, 370, 5404, 337, 11, 597, 286, 767, 11, 294, 341, 1622, 295, 50624, 50624, 1953, 295, 411, 11, 321, 528, 281, 8460, 428, 3089, 13, 1743, 754, 498, 321, 1333, 295, 519, 300, 456, 311, 50828, 50828, 746, 2085, 11, 309, 311, 411, 11, 321, 434, 406, 264, 3726, 3391, 295, 3494, 558, 586, 13, 441, 11, 264, 441, 715, 388, 433, 11, 456, 307, 51056, 51056, 257, 1389, 294, 264, 2010, 38253, 551, 689, 309, 486, 360, 364, 13785, 6367, 13, 4546, 309, 390, 364, 13785, 51276, 51276, 6367, 293, 309, 1116, 312, 411, 11, 291, 458, 11, 1954, 731, 13, 467, 311, 411, 11, 731, 11, 300, 311, 406, 869, 13, 407, 264, 636, 13785, 51532, 51532, 16121, 1051, 307, 562, 309, 311, 884, 2010, 38253, 11, 309, 311, 1237, 493, 411, 11, 1392, 11, 1954, 11, 341, 307, 257, 3636, 13, 51768, 51768], "temperature": 0.0, "avg_logprob": -0.11597061157226562, "compression_ratio": 1.8461538461538463, "no_caption_prob": 6.302411202341318e-05}, {"id": 511, "seek": 304708, "start": 3052.2799999999997, "end": 3056.36, "text": " thinking of like, we want to generate your code. Like even if we sort of think that there's", "tokens": [50364, 597, 28160, 5872, 666, 3071, 965, 11, 597, 286, 478, 370, 5404, 337, 11, 597, 286, 767, 11, 294, 341, 1622, 295, 50624, 50624, 1953, 295, 411, 11, 321, 528, 281, 8460, 428, 3089, 13, 1743, 754, 498, 321, 1333, 295, 519, 300, 456, 311, 50828, 50828, 746, 2085, 11, 309, 311, 411, 11, 321, 434, 406, 264, 3726, 3391, 295, 3494, 558, 586, 13, 441, 11, 264, 441, 715, 388, 433, 11, 456, 307, 51056, 51056, 257, 1389, 294, 264, 2010, 38253, 551, 689, 309, 486, 360, 364, 13785, 6367, 13, 4546, 309, 390, 364, 13785, 51276, 51276, 6367, 293, 309, 1116, 312, 411, 11, 291, 458, 11, 1954, 731, 13, 467, 311, 411, 11, 731, 11, 300, 311, 406, 869, 13, 407, 264, 636, 13785, 51532, 51532, 16121, 1051, 307, 562, 309, 311, 884, 2010, 38253, 11, 309, 311, 1237, 493, 411, 11, 1392, 11, 1954, 11, 341, 307, 257, 3636, 13, 51768, 51768], "temperature": 0.0, "avg_logprob": -0.11597061157226562, "compression_ratio": 1.8461538461538463, "no_caption_prob": 6.302411202341318e-05}, {"id": 512, "seek": 304708, "start": 3056.36, "end": 3060.92, "text": " something wrong, it's like, we're not the armators of truth right now. L, the L compilers, there is", "tokens": [50364, 597, 28160, 5872, 666, 3071, 965, 11, 597, 286, 478, 370, 5404, 337, 11, 597, 286, 767, 11, 294, 341, 1622, 295, 50624, 50624, 1953, 295, 411, 11, 321, 528, 281, 8460, 428, 3089, 13, 1743, 754, 498, 321, 1333, 295, 519, 300, 456, 311, 50828, 50828, 746, 2085, 11, 309, 311, 411, 11, 321, 434, 406, 264, 3726, 3391, 295, 3494, 558, 586, 13, 441, 11, 264, 441, 715, 388, 433, 11, 456, 307, 51056, 51056, 257, 1389, 294, 264, 2010, 38253, 551, 689, 309, 486, 360, 364, 13785, 6367, 13, 4546, 309, 390, 364, 13785, 51276, 51276, 6367, 293, 309, 1116, 312, 411, 11, 291, 458, 11, 1954, 731, 13, 467, 311, 411, 11, 731, 11, 300, 311, 406, 869, 13, 407, 264, 636, 13785, 51532, 51532, 16121, 1051, 307, 562, 309, 311, 884, 2010, 38253, 11, 309, 311, 1237, 493, 411, 11, 1392, 11, 1954, 11, 341, 307, 257, 3636, 13, 51768, 51768], "temperature": 0.0, "avg_logprob": -0.11597061157226562, "compression_ratio": 1.8461538461538463, "no_caption_prob": 6.302411202341318e-05}, {"id": 513, "seek": 304708, "start": 3060.92, "end": 3065.3199999999997, "text": " a case in the type inference thing where it will do an infinite loop. Before it was an infinite", "tokens": [50364, 597, 28160, 5872, 666, 3071, 965, 11, 597, 286, 478, 370, 5404, 337, 11, 597, 286, 767, 11, 294, 341, 1622, 295, 50624, 50624, 1953, 295, 411, 11, 321, 528, 281, 8460, 428, 3089, 13, 1743, 754, 498, 321, 1333, 295, 519, 300, 456, 311, 50828, 50828, 746, 2085, 11, 309, 311, 411, 11, 321, 434, 406, 264, 3726, 3391, 295, 3494, 558, 586, 13, 441, 11, 264, 441, 715, 388, 433, 11, 456, 307, 51056, 51056, 257, 1389, 294, 264, 2010, 38253, 551, 689, 309, 486, 360, 364, 13785, 6367, 13, 4546, 309, 390, 364, 13785, 51276, 51276, 6367, 293, 309, 1116, 312, 411, 11, 291, 458, 11, 1954, 731, 13, 467, 311, 411, 11, 731, 11, 300, 311, 406, 869, 13, 407, 264, 636, 13785, 51532, 51532, 16121, 1051, 307, 562, 309, 311, 884, 2010, 38253, 11, 309, 311, 1237, 493, 411, 11, 1392, 11, 1954, 11, 341, 307, 257, 3636, 13, 51768, 51768], "temperature": 0.0, "avg_logprob": -0.11597061157226562, "compression_ratio": 1.8461538461538463, "no_caption_prob": 6.302411202341318e-05}, {"id": 514, "seek": 304708, "start": 3065.3199999999997, "end": 3070.44, "text": " loop and it'd be like, you know, oh well. It's like, well, that's not great. So the way infinite", "tokens": [50364, 597, 28160, 5872, 666, 3071, 965, 11, 597, 286, 478, 370, 5404, 337, 11, 597, 286, 767, 11, 294, 341, 1622, 295, 50624, 50624, 1953, 295, 411, 11, 321, 528, 281, 8460, 428, 3089, 13, 1743, 754, 498, 321, 1333, 295, 519, 300, 456, 311, 50828, 50828, 746, 2085, 11, 309, 311, 411, 11, 321, 434, 406, 264, 3726, 3391, 295, 3494, 558, 586, 13, 441, 11, 264, 441, 715, 388, 433, 11, 456, 307, 51056, 51056, 257, 1389, 294, 264, 2010, 38253, 551, 689, 309, 486, 360, 364, 13785, 6367, 13, 4546, 309, 390, 364, 13785, 51276, 51276, 6367, 293, 309, 1116, 312, 411, 11, 291, 458, 11, 1954, 731, 13, 467, 311, 411, 11, 731, 11, 300, 311, 406, 869, 13, 407, 264, 636, 13785, 51532, 51532, 16121, 1051, 307, 562, 309, 311, 884, 2010, 38253, 11, 309, 311, 1237, 493, 411, 11, 1392, 11, 1954, 11, 341, 307, 257, 3636, 13, 51768, 51768], "temperature": 0.0, "avg_logprob": -0.11597061157226562, "compression_ratio": 1.8461538461538463, "no_caption_prob": 6.302411202341318e-05}, {"id": 515, "seek": 304708, "start": 3070.44, "end": 3075.16, "text": " loops happen is when it's doing type inference, it's looking up like, okay, oh, this is a message.", "tokens": [50364, 597, 28160, 5872, 666, 3071, 965, 11, 597, 286, 478, 370, 5404, 337, 11, 597, 286, 767, 11, 294, 341, 1622, 295, 50624, 50624, 1953, 295, 411, 11, 321, 528, 281, 8460, 428, 3089, 13, 1743, 754, 498, 321, 1333, 295, 519, 300, 456, 311, 50828, 50828, 746, 2085, 11, 309, 311, 411, 11, 321, 434, 406, 264, 3726, 3391, 295, 3494, 558, 586, 13, 441, 11, 264, 441, 715, 388, 433, 11, 456, 307, 51056, 51056, 257, 1389, 294, 264, 2010, 38253, 551, 689, 309, 486, 360, 364, 13785, 6367, 13, 4546, 309, 390, 364, 13785, 51276, 51276, 6367, 293, 309, 1116, 312, 411, 11, 291, 458, 11, 1954, 731, 13, 467, 311, 411, 11, 731, 11, 300, 311, 406, 869, 13, 407, 264, 636, 13785, 51532, 51532, 16121, 1051, 307, 562, 309, 311, 884, 2010, 38253, 11, 309, 311, 1237, 493, 411, 11, 1392, 11, 1954, 11, 341, 307, 257, 3636, 13, 51768, 51768], "temperature": 0.0, "avg_logprob": -0.11597061157226562, "compression_ratio": 1.8461538461538463, "no_caption_prob": 6.302411202341318e-05}, {"id": 516, "seek": 307516, "start": 3075.16, "end": 3079.96, "text": " What is a message? Oh, a message is an integer, right? So it does this sort of lookup of like,", "tokens": [50364, 708, 307, 257, 3636, 30, 876, 11, 257, 3636, 307, 364, 24922, 11, 558, 30, 407, 309, 775, 341, 1333, 295, 574, 1010, 295, 411, 11, 50604, 50604, 510, 311, 341, 2010, 7006, 13, 708, 360, 286, 458, 466, 341, 2010, 7006, 30, 286, 362, 257, 3411, 295, 9130, 466, 50848, 50848, 341, 2010, 7006, 293, 286, 478, 516, 281, 352, 293, 286, 478, 516, 281, 853, 281, 2573, 309, 484, 13, 440, 13785, 6367, 51064, 51064, 2314, 562, 291, 362, 257, 2010, 7006, 300, 16121, 926, 281, 2564, 13, 407, 309, 11, 309, 311, 257, 7006, 322, 309, 13, 51376, 51444, 1743, 11, 1954, 11, 437, 307, 264, 3636, 30, 1042, 11, 257, 3636, 307, 257, 3636, 13, 51580, 51580, 7580, 11, 1338, 13, 316, 3636, 307, 257, 3636, 307, 257, 3636, 307, 257, 3636, 13, 1743, 300, 390, 472, 295, 452, 51812, 51812], "temperature": 0.0, "avg_logprob": -0.14391178987464126, "compression_ratio": 2.011278195488722, "no_caption_prob": 1.1125445780635346e-05}, {"id": 517, "seek": 307516, "start": 3079.96, "end": 3084.8399999999997, "text": " here's this type variable. What do I know about this type variable? I have a bag of facts about", "tokens": [50364, 708, 307, 257, 3636, 30, 876, 11, 257, 3636, 307, 364, 24922, 11, 558, 30, 407, 309, 775, 341, 1333, 295, 574, 1010, 295, 411, 11, 50604, 50604, 510, 311, 341, 2010, 7006, 13, 708, 360, 286, 458, 466, 341, 2010, 7006, 30, 286, 362, 257, 3411, 295, 9130, 466, 50848, 50848, 341, 2010, 7006, 293, 286, 478, 516, 281, 352, 293, 286, 478, 516, 281, 853, 281, 2573, 309, 484, 13, 440, 13785, 6367, 51064, 51064, 2314, 562, 291, 362, 257, 2010, 7006, 300, 16121, 926, 281, 2564, 13, 407, 309, 11, 309, 311, 257, 7006, 322, 309, 13, 51376, 51444, 1743, 11, 1954, 11, 437, 307, 264, 3636, 30, 1042, 11, 257, 3636, 307, 257, 3636, 13, 51580, 51580, 7580, 11, 1338, 13, 316, 3636, 307, 257, 3636, 307, 257, 3636, 307, 257, 3636, 13, 1743, 300, 390, 472, 295, 452, 51812, 51812], "temperature": 0.0, "avg_logprob": -0.14391178987464126, "compression_ratio": 2.011278195488722, "no_caption_prob": 1.1125445780635346e-05}, {"id": 518, "seek": 307516, "start": 3084.8399999999997, "end": 3089.16, "text": " this type variable and I'm going to go and I'm going to try to figure it out. The infinite loop", "tokens": [50364, 708, 307, 257, 3636, 30, 876, 11, 257, 3636, 307, 364, 24922, 11, 558, 30, 407, 309, 775, 341, 1333, 295, 574, 1010, 295, 411, 11, 50604, 50604, 510, 311, 341, 2010, 7006, 13, 708, 360, 286, 458, 466, 341, 2010, 7006, 30, 286, 362, 257, 3411, 295, 9130, 466, 50848, 50848, 341, 2010, 7006, 293, 286, 478, 516, 281, 352, 293, 286, 478, 516, 281, 853, 281, 2573, 309, 484, 13, 440, 13785, 6367, 51064, 51064, 2314, 562, 291, 362, 257, 2010, 7006, 300, 16121, 926, 281, 2564, 13, 407, 309, 11, 309, 311, 257, 7006, 322, 309, 13, 51376, 51444, 1743, 11, 1954, 11, 437, 307, 264, 3636, 30, 1042, 11, 257, 3636, 307, 257, 3636, 13, 51580, 51580, 7580, 11, 1338, 13, 316, 3636, 307, 257, 3636, 307, 257, 3636, 307, 257, 3636, 13, 1743, 300, 390, 472, 295, 452, 51812, 51812], "temperature": 0.0, "avg_logprob": -0.14391178987464126, "compression_ratio": 2.011278195488722, "no_caption_prob": 1.1125445780635346e-05}, {"id": 519, "seek": 307516, "start": 3089.16, "end": 3095.3999999999996, "text": " happens when you have a type variable that loops around to itself. So it, it's a variable on it.", "tokens": [50364, 708, 307, 257, 3636, 30, 876, 11, 257, 3636, 307, 364, 24922, 11, 558, 30, 407, 309, 775, 341, 1333, 295, 574, 1010, 295, 411, 11, 50604, 50604, 510, 311, 341, 2010, 7006, 13, 708, 360, 286, 458, 466, 341, 2010, 7006, 30, 286, 362, 257, 3411, 295, 9130, 466, 50848, 50848, 341, 2010, 7006, 293, 286, 478, 516, 281, 352, 293, 286, 478, 516, 281, 853, 281, 2573, 309, 484, 13, 440, 13785, 6367, 51064, 51064, 2314, 562, 291, 362, 257, 2010, 7006, 300, 16121, 926, 281, 2564, 13, 407, 309, 11, 309, 311, 257, 7006, 322, 309, 13, 51376, 51444, 1743, 11, 1954, 11, 437, 307, 264, 3636, 30, 1042, 11, 257, 3636, 307, 257, 3636, 13, 51580, 51580, 7580, 11, 1338, 13, 316, 3636, 307, 257, 3636, 307, 257, 3636, 307, 257, 3636, 13, 1743, 300, 390, 472, 295, 452, 51812, 51812], "temperature": 0.0, "avg_logprob": -0.14391178987464126, "compression_ratio": 2.011278195488722, "no_caption_prob": 1.1125445780635346e-05}, {"id": 520, "seek": 307516, "start": 3096.7599999999998, "end": 3099.48, "text": " Like, oh, what is the message? Well, a message is a message.", "tokens": [50364, 708, 307, 257, 3636, 30, 876, 11, 257, 3636, 307, 364, 24922, 11, 558, 30, 407, 309, 775, 341, 1333, 295, 574, 1010, 295, 411, 11, 50604, 50604, 510, 311, 341, 2010, 7006, 13, 708, 360, 286, 458, 466, 341, 2010, 7006, 30, 286, 362, 257, 3411, 295, 9130, 466, 50848, 50848, 341, 2010, 7006, 293, 286, 478, 516, 281, 352, 293, 286, 478, 516, 281, 853, 281, 2573, 309, 484, 13, 440, 13785, 6367, 51064, 51064, 2314, 562, 291, 362, 257, 2010, 7006, 300, 16121, 926, 281, 2564, 13, 407, 309, 11, 309, 311, 257, 7006, 322, 309, 13, 51376, 51444, 1743, 11, 1954, 11, 437, 307, 264, 3636, 30, 1042, 11, 257, 3636, 307, 257, 3636, 13, 51580, 51580, 7580, 11, 1338, 13, 316, 3636, 307, 257, 3636, 307, 257, 3636, 307, 257, 3636, 13, 1743, 300, 390, 472, 295, 452, 51812, 51812], "temperature": 0.0, "avg_logprob": -0.14391178987464126, "compression_ratio": 2.011278195488722, "no_caption_prob": 1.1125445780635346e-05}, {"id": 521, "seek": 307516, "start": 3099.48, "end": 3104.12, "text": " Obviously, yeah. A message is a message is a message is a message. Like that was one of my", "tokens": [50364, 708, 307, 257, 3636, 30, 876, 11, 257, 3636, 307, 364, 24922, 11, 558, 30, 407, 309, 775, 341, 1333, 295, 574, 1010, 295, 411, 11, 50604, 50604, 510, 311, 341, 2010, 7006, 13, 708, 360, 286, 458, 466, 341, 2010, 7006, 30, 286, 362, 257, 3411, 295, 9130, 466, 50848, 50848, 341, 2010, 7006, 293, 286, 478, 516, 281, 352, 293, 286, 478, 516, 281, 853, 281, 2573, 309, 484, 13, 440, 13785, 6367, 51064, 51064, 2314, 562, 291, 362, 257, 2010, 7006, 300, 16121, 926, 281, 2564, 13, 407, 309, 11, 309, 311, 257, 7006, 322, 309, 13, 51376, 51444, 1743, 11, 1954, 11, 437, 307, 264, 3636, 30, 1042, 11, 257, 3636, 307, 257, 3636, 13, 51580, 51580, 7580, 11, 1338, 13, 316, 3636, 307, 257, 3636, 307, 257, 3636, 307, 257, 3636, 13, 1743, 300, 390, 472, 295, 452, 51812, 51812], "temperature": 0.0, "avg_logprob": -0.14391178987464126, "compression_ratio": 2.011278195488722, "no_caption_prob": 1.1125445780635346e-05}, {"id": 522, "seek": 310412, "start": 3104.12, "end": 3112.04, "text": " nightmares. So as if you weren't enough during this episode. Yeah. So, so basically what it", "tokens": [50364, 36911, 13, 407, 382, 498, 291, 4999, 380, 1547, 1830, 341, 3500, 13, 865, 13, 407, 11, 370, 1936, 437, 309, 50760, 50760, 486, 360, 586, 307, 309, 311, 767, 11603, 437, 2010, 7006, 5288, 11, 437, 4190, 309, 311, 1217, 51060, 51088, 1096, 257, 574, 1010, 337, 13, 400, 498, 309, 6676, 666, 309, 797, 11, 309, 311, 516, 281, 976, 291, 364, 6713, 3636, 300, 1619, 11, 51348, 51348, 1954, 572, 11, 286, 478, 406, 382, 4069, 382, 264, 624, 12224, 31958, 11, 457, 321, 434, 665, 1855, 13, 1743, 11, 293, 286, 2318, 483, 51700, 51700], "temperature": 0.0, "avg_logprob": -0.14252582398971708, "compression_ratio": 1.504, "no_caption_prob": 0.00011773178994189948}, {"id": 523, "seek": 310412, "start": 3112.04, "end": 3118.04, "text": " will do now is it's actually tracking what type variable names, what values it's already", "tokens": [50364, 36911, 13, 407, 382, 498, 291, 4999, 380, 1547, 1830, 341, 3500, 13, 865, 13, 407, 11, 370, 1936, 437, 309, 50760, 50760, 486, 360, 586, 307, 309, 311, 767, 11603, 437, 2010, 7006, 5288, 11, 437, 4190, 309, 311, 1217, 51060, 51088, 1096, 257, 574, 1010, 337, 13, 400, 498, 309, 6676, 666, 309, 797, 11, 309, 311, 516, 281, 976, 291, 364, 6713, 3636, 300, 1619, 11, 51348, 51348, 1954, 572, 11, 286, 478, 406, 382, 4069, 382, 264, 624, 12224, 31958, 11, 457, 321, 434, 665, 1855, 13, 1743, 11, 293, 286, 2318, 483, 51700, 51700], "temperature": 0.0, "avg_logprob": -0.14252582398971708, "compression_ratio": 1.504, "no_caption_prob": 0.00011773178994189948}, {"id": 524, "seek": 310412, "start": 3118.6, "end": 3123.7999999999997, "text": " done a lookup for. And if it runs into it again, it's going to give you an error message that says,", "tokens": [50364, 36911, 13, 407, 382, 498, 291, 4999, 380, 1547, 1830, 341, 3500, 13, 865, 13, 407, 11, 370, 1936, 437, 309, 50760, 50760, 486, 360, 586, 307, 309, 311, 767, 11603, 437, 2010, 7006, 5288, 11, 437, 4190, 309, 311, 1217, 51060, 51088, 1096, 257, 574, 1010, 337, 13, 400, 498, 309, 6676, 666, 309, 797, 11, 309, 311, 516, 281, 976, 291, 364, 6713, 3636, 300, 1619, 11, 51348, 51348, 1954, 572, 11, 286, 478, 406, 382, 4069, 382, 264, 624, 12224, 31958, 11, 457, 321, 434, 665, 1855, 13, 1743, 11, 293, 286, 2318, 483, 51700, 51700], "temperature": 0.0, "avg_logprob": -0.14252582398971708, "compression_ratio": 1.504, "no_caption_prob": 0.00011773178994189948}, {"id": 525, "seek": 310412, "start": 3123.7999999999997, "end": 3130.8399999999997, "text": " oh no, I'm not as smart as the UMP compiler, but we're good friends. Like, and I especially get", "tokens": [50364, 36911, 13, 407, 382, 498, 291, 4999, 380, 1547, 1830, 341, 3500, 13, 865, 13, 407, 11, 370, 1936, 437, 309, 50760, 50760, 486, 360, 586, 307, 309, 311, 767, 11603, 437, 2010, 7006, 5288, 11, 437, 4190, 309, 311, 1217, 51060, 51088, 1096, 257, 574, 1010, 337, 13, 400, 498, 309, 6676, 666, 309, 797, 11, 309, 311, 516, 281, 976, 291, 364, 6713, 3636, 300, 1619, 11, 51348, 51348, 1954, 572, 11, 286, 478, 406, 382, 4069, 382, 264, 624, 12224, 31958, 11, 457, 321, 434, 665, 1855, 13, 1743, 11, 293, 286, 2318, 483, 51700, 51700], "temperature": 0.0, "avg_logprob": -0.14252582398971708, "compression_ratio": 1.504, "no_caption_prob": 0.00011773178994189948}, {"id": 526, "seek": 313084, "start": 3130.84, "end": 3136.36, "text": " confused in these circumstances, but you know, try to be as like, Hey, this isn't that big of a deal.", "tokens": [50364, 9019, 294, 613, 9121, 11, 457, 291, 458, 11, 853, 281, 312, 382, 411, 11, 1911, 11, 341, 1943, 380, 300, 955, 295, 257, 2028, 13, 50640, 50640, 407, 341, 307, 411, 11, 341, 307, 406, 364, 6713, 13, 639, 307, 257, 11, 12120, 257, 9164, 11, 558, 30, 467, 311, 406, 516, 281, 50900, 50900, 1590, 291, 13, 467, 311, 445, 428, 2010, 13397, 337, 300, 27606, 307, 406, 516, 281, 855, 493, 11, 597, 6095, 51124, 51124, 307, 1391, 2489, 13, 865, 13, 400, 286, 362, 1612, 309, 611, 976, 11, 321, 434, 1417, 257, 688, 466, 411, 3331, 300, 51484, 51484, 309, 311, 406, 382, 4069, 382, 264, 2699, 76, 31958, 11, 597, 307, 11, 291, 458, 11, 955, 6654, 281, 2836, 11, 457, 11, 457, 611, 286, 600, 51768, 51768], "temperature": 0.0, "avg_logprob": -0.11116646317874684, "compression_ratio": 1.6768707482993197, "no_caption_prob": 1.147848252003314e-05}, {"id": 527, "seek": 313084, "start": 3136.36, "end": 3141.56, "text": " So this is like, this is not an error. This is a, technically a warning, right? It's not going to", "tokens": [50364, 9019, 294, 613, 9121, 11, 457, 291, 458, 11, 853, 281, 312, 382, 411, 11, 1911, 11, 341, 1943, 380, 300, 955, 295, 257, 2028, 13, 50640, 50640, 407, 341, 307, 411, 11, 341, 307, 406, 364, 6713, 13, 639, 307, 257, 11, 12120, 257, 9164, 11, 558, 30, 467, 311, 406, 516, 281, 50900, 50900, 1590, 291, 13, 467, 311, 445, 428, 2010, 13397, 337, 300, 27606, 307, 406, 516, 281, 855, 493, 11, 597, 6095, 51124, 51124, 307, 1391, 2489, 13, 865, 13, 400, 286, 362, 1612, 309, 611, 976, 11, 321, 434, 1417, 257, 688, 466, 411, 3331, 300, 51484, 51484, 309, 311, 406, 382, 4069, 382, 264, 2699, 76, 31958, 11, 597, 307, 11, 291, 458, 11, 955, 6654, 281, 2836, 11, 457, 11, 457, 611, 286, 600, 51768, 51768], "temperature": 0.0, "avg_logprob": -0.11116646317874684, "compression_ratio": 1.6768707482993197, "no_caption_prob": 1.147848252003314e-05}, {"id": 528, "seek": 313084, "start": 3141.56, "end": 3146.04, "text": " stop you. It's just your type signature for that declaration is not going to show up, which honestly", "tokens": [50364, 9019, 294, 613, 9121, 11, 457, 291, 458, 11, 853, 281, 312, 382, 411, 11, 1911, 11, 341, 1943, 380, 300, 955, 295, 257, 2028, 13, 50640, 50640, 407, 341, 307, 411, 11, 341, 307, 406, 364, 6713, 13, 639, 307, 257, 11, 12120, 257, 9164, 11, 558, 30, 467, 311, 406, 516, 281, 50900, 50900, 1590, 291, 13, 467, 311, 445, 428, 2010, 13397, 337, 300, 27606, 307, 406, 516, 281, 855, 493, 11, 597, 6095, 51124, 51124, 307, 1391, 2489, 13, 865, 13, 400, 286, 362, 1612, 309, 611, 976, 11, 321, 434, 1417, 257, 688, 466, 411, 3331, 300, 51484, 51484, 309, 311, 406, 382, 4069, 382, 264, 2699, 76, 31958, 11, 597, 307, 11, 291, 458, 11, 955, 6654, 281, 2836, 11, 457, 11, 457, 611, 286, 600, 51768, 51768], "temperature": 0.0, "avg_logprob": -0.11116646317874684, "compression_ratio": 1.6768707482993197, "no_caption_prob": 1.147848252003314e-05}, {"id": 529, "seek": 313084, "start": 3146.04, "end": 3153.2400000000002, "text": " is probably fine. Yeah. And I have seen it also give, we're talking a lot about like cases that", "tokens": [50364, 9019, 294, 613, 9121, 11, 457, 291, 458, 11, 853, 281, 312, 382, 411, 11, 1911, 11, 341, 1943, 380, 300, 955, 295, 257, 2028, 13, 50640, 50640, 407, 341, 307, 411, 11, 341, 307, 406, 364, 6713, 13, 639, 307, 257, 11, 12120, 257, 9164, 11, 558, 30, 467, 311, 406, 516, 281, 50900, 50900, 1590, 291, 13, 467, 311, 445, 428, 2010, 13397, 337, 300, 27606, 307, 406, 516, 281, 855, 493, 11, 597, 6095, 51124, 51124, 307, 1391, 2489, 13, 865, 13, 400, 286, 362, 1612, 309, 611, 976, 11, 321, 434, 1417, 257, 688, 466, 411, 3331, 300, 51484, 51484, 309, 311, 406, 382, 4069, 382, 264, 2699, 76, 31958, 11, 597, 307, 11, 291, 458, 11, 955, 6654, 281, 2836, 11, 457, 11, 457, 611, 286, 600, 51768, 51768], "temperature": 0.0, "avg_logprob": -0.11116646317874684, "compression_ratio": 1.6768707482993197, "no_caption_prob": 1.147848252003314e-05}, {"id": 530, "seek": 313084, "start": 3153.2400000000002, "end": 3158.92, "text": " it's not as smart as the Elm compiler, which is, you know, big shoes to fill, but, but also I've", "tokens": [50364, 9019, 294, 613, 9121, 11, 457, 291, 458, 11, 853, 281, 312, 382, 411, 11, 1911, 11, 341, 1943, 380, 300, 955, 295, 257, 2028, 13, 50640, 50640, 407, 341, 307, 411, 11, 341, 307, 406, 364, 6713, 13, 639, 307, 257, 11, 12120, 257, 9164, 11, 558, 30, 467, 311, 406, 516, 281, 50900, 50900, 1590, 291, 13, 467, 311, 445, 428, 2010, 13397, 337, 300, 27606, 307, 406, 516, 281, 855, 493, 11, 597, 6095, 51124, 51124, 307, 1391, 2489, 13, 865, 13, 400, 286, 362, 1612, 309, 611, 976, 11, 321, 434, 1417, 257, 688, 466, 411, 3331, 300, 51484, 51484, 309, 311, 406, 382, 4069, 382, 264, 2699, 76, 31958, 11, 597, 307, 11, 291, 458, 11, 955, 6654, 281, 2836, 11, 457, 11, 457, 611, 286, 600, 51768, 51768], "temperature": 0.0, "avg_logprob": -0.11116646317874684, "compression_ratio": 1.6768707482993197, "no_caption_prob": 1.147848252003314e-05}, {"id": 531, "seek": 315892, "start": 3158.92, "end": 3164.92, "text": " seen it tell me about failures where it's like, Hey, this is supposed to be type HTML, but you", "tokens": [50364, 1612, 309, 980, 385, 466, 20774, 689, 309, 311, 411, 11, 1911, 11, 341, 307, 3442, 281, 312, 2010, 17995, 11, 457, 291, 50664, 50664, 2729, 385, 257, 1329, 13, 286, 519, 746, 311, 766, 13, 1779, 13, 407, 11, 457, 6284, 11, 370, 309, 2709, 291, 257, 9164, 498, 50968, 50968, 309, 26310, 746, 411, 300, 293, 5112, 291, 437, 309, 7309, 264, 1154, 390, 13, 583, 550, 309, 1619, 11, 51188, 51188, 286, 478, 11, 286, 478, 406, 264, 25613, 1681, 295, 3494, 11, 411, 291, 848, 13, 407, 309, 920, 6653, 291, 8460, 264, 3089, 11, 51420, 51420, 457, 550, 291, 393, 1009, 747, 300, 3089, 300, 309, 10833, 293, 1190, 264, 31958, 322, 309, 281, 652, 988, 51712, 51712], "temperature": 0.0, "avg_logprob": -0.07717580413818359, "compression_ratio": 1.7184115523465704, "no_caption_prob": 5.225042696110904e-05}, {"id": 532, "seek": 315892, "start": 3164.92, "end": 3171.0, "text": " gave me a list. I think something's off. Right. So, but ultimately, so it gives you a warning if", "tokens": [50364, 1612, 309, 980, 385, 466, 20774, 689, 309, 311, 411, 11, 1911, 11, 341, 307, 3442, 281, 312, 2010, 17995, 11, 457, 291, 50664, 50664, 2729, 385, 257, 1329, 13, 286, 519, 746, 311, 766, 13, 1779, 13, 407, 11, 457, 6284, 11, 370, 309, 2709, 291, 257, 9164, 498, 50968, 50968, 309, 26310, 746, 411, 300, 293, 5112, 291, 437, 309, 7309, 264, 1154, 390, 13, 583, 550, 309, 1619, 11, 51188, 51188, 286, 478, 11, 286, 478, 406, 264, 25613, 1681, 295, 3494, 11, 411, 291, 848, 13, 407, 309, 920, 6653, 291, 8460, 264, 3089, 11, 51420, 51420, 457, 550, 291, 393, 1009, 747, 300, 3089, 300, 309, 10833, 293, 1190, 264, 31958, 322, 309, 281, 652, 988, 51712, 51712], "temperature": 0.0, "avg_logprob": -0.07717580413818359, "compression_ratio": 1.7184115523465704, "no_caption_prob": 5.225042696110904e-05}, {"id": 533, "seek": 315892, "start": 3171.0, "end": 3175.4, "text": " it encounters something like that and tells you what it thinks the problem was. But then it says,", "tokens": [50364, 1612, 309, 980, 385, 466, 20774, 689, 309, 311, 411, 11, 1911, 11, 341, 307, 3442, 281, 312, 2010, 17995, 11, 457, 291, 50664, 50664, 2729, 385, 257, 1329, 13, 286, 519, 746, 311, 766, 13, 1779, 13, 407, 11, 457, 6284, 11, 370, 309, 2709, 291, 257, 9164, 498, 50968, 50968, 309, 26310, 746, 411, 300, 293, 5112, 291, 437, 309, 7309, 264, 1154, 390, 13, 583, 550, 309, 1619, 11, 51188, 51188, 286, 478, 11, 286, 478, 406, 264, 25613, 1681, 295, 3494, 11, 411, 291, 848, 13, 407, 309, 920, 6653, 291, 8460, 264, 3089, 11, 51420, 51420, 457, 550, 291, 393, 1009, 747, 300, 3089, 300, 309, 10833, 293, 1190, 264, 31958, 322, 309, 281, 652, 988, 51712, 51712], "temperature": 0.0, "avg_logprob": -0.07717580413818359, "compression_ratio": 1.7184115523465704, "no_caption_prob": 5.225042696110904e-05}, {"id": 534, "seek": 315892, "start": 3175.4, "end": 3180.04, "text": " I'm, I'm not the arbiter of truth, like you said. So it still lets you generate the code,", "tokens": [50364, 1612, 309, 980, 385, 466, 20774, 689, 309, 311, 411, 11, 1911, 11, 341, 307, 3442, 281, 312, 2010, 17995, 11, 457, 291, 50664, 50664, 2729, 385, 257, 1329, 13, 286, 519, 746, 311, 766, 13, 1779, 13, 407, 11, 457, 6284, 11, 370, 309, 2709, 291, 257, 9164, 498, 50968, 50968, 309, 26310, 746, 411, 300, 293, 5112, 291, 437, 309, 7309, 264, 1154, 390, 13, 583, 550, 309, 1619, 11, 51188, 51188, 286, 478, 11, 286, 478, 406, 264, 25613, 1681, 295, 3494, 11, 411, 291, 848, 13, 407, 309, 920, 6653, 291, 8460, 264, 3089, 11, 51420, 51420, 457, 550, 291, 393, 1009, 747, 300, 3089, 300, 309, 10833, 293, 1190, 264, 31958, 322, 309, 281, 652, 988, 51712, 51712], "temperature": 0.0, "avg_logprob": -0.07717580413818359, "compression_ratio": 1.7184115523465704, "no_caption_prob": 5.225042696110904e-05}, {"id": 535, "seek": 315892, "start": 3180.04, "end": 3185.88, "text": " but then you can always take that code that it generated and run the compiler on it to make sure", "tokens": [50364, 1612, 309, 980, 385, 466, 20774, 689, 309, 311, 411, 11, 1911, 11, 341, 307, 3442, 281, 312, 2010, 17995, 11, 457, 291, 50664, 50664, 2729, 385, 257, 1329, 13, 286, 519, 746, 311, 766, 13, 1779, 13, 407, 11, 457, 6284, 11, 370, 309, 2709, 291, 257, 9164, 498, 50968, 50968, 309, 26310, 746, 411, 300, 293, 5112, 291, 437, 309, 7309, 264, 1154, 390, 13, 583, 550, 309, 1619, 11, 51188, 51188, 286, 478, 11, 286, 478, 406, 264, 25613, 1681, 295, 3494, 11, 411, 291, 848, 13, 407, 309, 920, 6653, 291, 8460, 264, 3089, 11, 51420, 51420, 457, 550, 291, 393, 1009, 747, 300, 3089, 300, 309, 10833, 293, 1190, 264, 31958, 322, 309, 281, 652, 988, 51712, 51712], "temperature": 0.0, "avg_logprob": -0.07717580413818359, "compression_ratio": 1.7184115523465704, "no_caption_prob": 5.225042696110904e-05}, {"id": 536, "seek": 318588, "start": 3185.88, "end": 3190.04, "text": " it that's, that's the ultimate source of truth. Right. Right. And then there's, yeah, there's a", "tokens": [50364, 309, 300, 311, 11, 300, 311, 264, 9705, 4009, 295, 3494, 13, 1779, 13, 1779, 13, 400, 550, 456, 311, 11, 1338, 11, 456, 311, 257, 50572, 50572, 3303, 411, 5824, 6367, 456, 295, 411, 11, 876, 11, 291, 458, 11, 286, 5872, 2699, 76, 3089, 1049, 322, 341, 3089, 13, 400, 281, 312, 50844, 50844, 588, 11, 309, 311, 787, 534, 2902, 291, 411, 10995, 2010, 38253, 2734, 420, 30009, 13, 759, 291, 434, 1333, 51108, 51108, 295, 294, 264, 1570, 9859, 1859, 293, 294, 264, 544, 12649, 1859, 11, 291, 434, 1228, 15277, 337, 51352, 51352, 1507, 13, 400, 370, 309, 603, 584, 411, 11, 286, 3031, 281, 517, 2505, 613, 732, 15277, 293, 411, 472, 311, 364, 24922, 51560, 51560], "temperature": 0.0, "avg_logprob": -0.09545990753173828, "compression_ratio": 1.7282608695652173, "no_caption_prob": 0.00014652061508968472}, {"id": 537, "seek": 318588, "start": 3190.04, "end": 3195.48, "text": " natural like feedback loop there of like, Oh, you know, I ran Elm code gen on this code. And to be", "tokens": [50364, 309, 300, 311, 11, 300, 311, 264, 9705, 4009, 295, 3494, 13, 1779, 13, 1779, 13, 400, 550, 456, 311, 11, 1338, 11, 456, 311, 257, 50572, 50572, 3303, 411, 5824, 6367, 456, 295, 411, 11, 876, 11, 291, 458, 11, 286, 5872, 2699, 76, 3089, 1049, 322, 341, 3089, 13, 400, 281, 312, 50844, 50844, 588, 11, 309, 311, 787, 534, 2902, 291, 411, 10995, 2010, 38253, 2734, 420, 30009, 13, 759, 291, 434, 1333, 51108, 51108, 295, 294, 264, 1570, 9859, 1859, 293, 294, 264, 544, 12649, 1859, 11, 291, 434, 1228, 15277, 337, 51352, 51352, 1507, 13, 400, 370, 309, 603, 584, 411, 11, 286, 3031, 281, 517, 2505, 613, 732, 15277, 293, 411, 472, 311, 364, 24922, 51560, 51560], "temperature": 0.0, "avg_logprob": -0.09545990753173828, "compression_ratio": 1.7282608695652173, "no_caption_prob": 0.00014652061508968472}, {"id": 538, "seek": 318588, "start": 3195.48, "end": 3200.76, "text": " very, it's only really giving you like meaningful type inference issue or warnings. If you're sort", "tokens": [50364, 309, 300, 311, 11, 300, 311, 264, 9705, 4009, 295, 3494, 13, 1779, 13, 1779, 13, 400, 550, 456, 311, 11, 1338, 11, 456, 311, 257, 50572, 50572, 3303, 411, 5824, 6367, 456, 295, 411, 11, 876, 11, 291, 458, 11, 286, 5872, 2699, 76, 3089, 1049, 322, 341, 3089, 13, 400, 281, 312, 50844, 50844, 588, 11, 309, 311, 787, 534, 2902, 291, 411, 10995, 2010, 38253, 2734, 420, 30009, 13, 759, 291, 434, 1333, 51108, 51108, 295, 294, 264, 1570, 9859, 1859, 293, 294, 264, 544, 12649, 1859, 11, 291, 434, 1228, 15277, 337, 51352, 51352, 1507, 13, 400, 370, 309, 603, 584, 411, 11, 286, 3031, 281, 517, 2505, 613, 732, 15277, 293, 411, 472, 311, 364, 24922, 51560, 51560], "temperature": 0.0, "avg_logprob": -0.09545990753173828, "compression_ratio": 1.7282608695652173, "no_caption_prob": 0.00014652061508968472}, {"id": 539, "seek": 318588, "start": 3200.76, "end": 3205.6400000000003, "text": " of in the less concrete area and in the more abstract area, you're using expressions for", "tokens": [50364, 309, 300, 311, 11, 300, 311, 264, 9705, 4009, 295, 3494, 13, 1779, 13, 1779, 13, 400, 550, 456, 311, 11, 1338, 11, 456, 311, 257, 50572, 50572, 3303, 411, 5824, 6367, 456, 295, 411, 11, 876, 11, 291, 458, 11, 286, 5872, 2699, 76, 3089, 1049, 322, 341, 3089, 13, 400, 281, 312, 50844, 50844, 588, 11, 309, 311, 787, 534, 2902, 291, 411, 10995, 2010, 38253, 2734, 420, 30009, 13, 759, 291, 434, 1333, 51108, 51108, 295, 294, 264, 1570, 9859, 1859, 293, 294, 264, 544, 12649, 1859, 11, 291, 434, 1228, 15277, 337, 51352, 51352, 1507, 13, 400, 370, 309, 603, 584, 411, 11, 286, 3031, 281, 517, 2505, 613, 732, 15277, 293, 411, 472, 311, 364, 24922, 51560, 51560], "temperature": 0.0, "avg_logprob": -0.09545990753173828, "compression_ratio": 1.7282608695652173, "no_caption_prob": 0.00014652061508968472}, {"id": 540, "seek": 318588, "start": 3205.6400000000003, "end": 3209.8, "text": " stuff. And so it'll say like, I tried to unify these two expressions and like one's an integer", "tokens": [50364, 309, 300, 311, 11, 300, 311, 264, 9705, 4009, 295, 3494, 13, 1779, 13, 1779, 13, 400, 550, 456, 311, 11, 1338, 11, 456, 311, 257, 50572, 50572, 3303, 411, 5824, 6367, 456, 295, 411, 11, 876, 11, 291, 458, 11, 286, 5872, 2699, 76, 3089, 1049, 322, 341, 3089, 13, 400, 281, 312, 50844, 50844, 588, 11, 309, 311, 787, 534, 2902, 291, 411, 10995, 2010, 38253, 2734, 420, 30009, 13, 759, 291, 434, 1333, 51108, 51108, 295, 294, 264, 1570, 9859, 1859, 293, 294, 264, 544, 12649, 1859, 11, 291, 434, 1228, 15277, 337, 51352, 51352, 1507, 13, 400, 370, 309, 603, 584, 411, 11, 286, 3031, 281, 517, 2505, 613, 732, 15277, 293, 411, 472, 311, 364, 24922, 51560, 51560], "temperature": 0.0, "avg_logprob": -0.09545990753173828, "compression_ratio": 1.7282608695652173, "no_caption_prob": 0.00014652061508968472}, {"id": 541, "seek": 320980, "start": 3209.8, "end": 3216.28, "text": " and one is, who knows. So when that, I lost my train of thought, where were they going? I don't", "tokens": [50364, 293, 472, 307, 11, 567, 3255, 13, 407, 562, 300, 11, 286, 2731, 452, 3847, 295, 1194, 11, 689, 645, 436, 516, 30, 286, 500, 380, 50688, 50688, 458, 13, 400, 498, 291, 818, 11, 498, 291, 818, 1049, 13, 3766, 13, 28674, 271, 17, 79, 772, 1167, 11, 300, 311, 11, 300, 311, 733, 295, 257, 1627, 1389, 51076, 51076, 570, 264, 2010, 8568, 307, 3094, 294, 689, 382, 257, 31413, 565, 10815, 11, 570, 309, 2516, 364, 560, 51428, 51428, 293, 4412, 498, 309, 715, 4680, 11, 309, 311, 11, 456, 311, 1825, 281, 754, 1520, 13, 467, 311, 406, 11, 309, 393, 380, 3061, 13, 51736, 51736], "temperature": 0.0, "avg_logprob": -0.17938901696886336, "compression_ratio": 1.6223175965665235, "no_caption_prob": 2.5866393116302788e-05}, {"id": 542, "seek": 320980, "start": 3216.28, "end": 3224.04, "text": " know. And if you call, if you call gen.time.milis2possics, that's, that's kind of a cool case", "tokens": [50364, 293, 472, 307, 11, 567, 3255, 13, 407, 562, 300, 11, 286, 2731, 452, 3847, 295, 1194, 11, 689, 645, 436, 516, 30, 286, 500, 380, 50688, 50688, 458, 13, 400, 498, 291, 818, 11, 498, 291, 818, 1049, 13, 3766, 13, 28674, 271, 17, 79, 772, 1167, 11, 300, 311, 11, 300, 311, 733, 295, 257, 1627, 1389, 51076, 51076, 570, 264, 2010, 8568, 307, 3094, 294, 689, 382, 257, 31413, 565, 10815, 11, 570, 309, 2516, 364, 560, 51428, 51428, 293, 4412, 498, 309, 715, 4680, 11, 309, 311, 11, 456, 311, 1825, 281, 754, 1520, 13, 467, 311, 406, 11, 309, 393, 380, 3061, 13, 51736, 51736], "temperature": 0.0, "avg_logprob": -0.17938901696886336, "compression_ratio": 1.6223175965665235, "no_caption_prob": 2.5866393116302788e-05}, {"id": 543, "seek": 320980, "start": 3224.04, "end": 3231.0800000000004, "text": " because the type checking is built in where as a compile time guarantee, because it takes an int", "tokens": [50364, 293, 472, 307, 11, 567, 3255, 13, 407, 562, 300, 11, 286, 2731, 452, 3847, 295, 1194, 11, 689, 645, 436, 516, 30, 286, 500, 380, 50688, 50688, 458, 13, 400, 498, 291, 818, 11, 498, 291, 818, 1049, 13, 3766, 13, 28674, 271, 17, 79, 772, 1167, 11, 300, 311, 11, 300, 311, 733, 295, 257, 1627, 1389, 51076, 51076, 570, 264, 2010, 8568, 307, 3094, 294, 689, 382, 257, 31413, 565, 10815, 11, 570, 309, 2516, 364, 560, 51428, 51428, 293, 4412, 498, 309, 715, 4680, 11, 309, 311, 11, 456, 311, 1825, 281, 754, 1520, 13, 467, 311, 406, 11, 309, 393, 380, 3061, 13, 51736, 51736], "temperature": 0.0, "avg_logprob": -0.17938901696886336, "compression_ratio": 1.6223175965665235, "no_caption_prob": 2.5866393116302788e-05}, {"id": 544, "seek": 320980, "start": 3231.0800000000004, "end": 3237.2400000000002, "text": " and therefore if it compiles, it's, there's nothing to even check. It's not, it can't fail.", "tokens": [50364, 293, 472, 307, 11, 567, 3255, 13, 407, 562, 300, 11, 286, 2731, 452, 3847, 295, 1194, 11, 689, 645, 436, 516, 30, 286, 500, 380, 50688, 50688, 458, 13, 400, 498, 291, 818, 11, 498, 291, 818, 1049, 13, 3766, 13, 28674, 271, 17, 79, 772, 1167, 11, 300, 311, 11, 300, 311, 733, 295, 257, 1627, 1389, 51076, 51076, 570, 264, 2010, 8568, 307, 3094, 294, 689, 382, 257, 31413, 565, 10815, 11, 570, 309, 2516, 364, 560, 51428, 51428, 293, 4412, 498, 309, 715, 4680, 11, 309, 311, 11, 456, 311, 1825, 281, 754, 1520, 13, 467, 311, 406, 11, 309, 393, 380, 3061, 13, 51736, 51736], "temperature": 0.0, "avg_logprob": -0.17938901696886336, "compression_ratio": 1.6223175965665235, "no_caption_prob": 2.5866393116302788e-05}, {"id": 545, "seek": 323724, "start": 3237.24, "end": 3242.12, "text": " Yeah, that's right. Maybe this is a good time to get into that can of worms that you alluded to", "tokens": [50364, 865, 11, 300, 311, 558, 13, 2704, 341, 307, 257, 665, 565, 281, 483, 666, 300, 393, 295, 28271, 300, 291, 33919, 281, 50608, 50608, 3071, 466, 983, 1177, 380, 309, 352, 2286, 293, 11, 293, 976, 411, 31413, 565, 32567, 300, 291, 486, 50964, 50964, 8460, 746, 689, 264, 3467, 1622, 493, 13, 286, 959, 309, 13, 1033, 13, 407, 286, 478, 1238, 6369, 466, 341, 13, 51272, 51272, 467, 311, 11, 309, 311, 1019, 13, 1033, 13, 407, 510, 11, 510, 311, 437, 321, 362, 13, 407, 5646, 294, 364, 316, 6840, 11, 291, 362, 264, 316, 6840, 2564, 307, 51640, 51640], "temperature": 0.0, "avg_logprob": -0.07841890263107587, "compression_ratio": 1.5731707317073171, "no_caption_prob": 3.535448558977805e-05}, {"id": 546, "seek": 323724, "start": 3242.12, "end": 3249.24, "text": " earlier about why doesn't it go ahead and, and give like compile time guarantees that you will", "tokens": [50364, 865, 11, 300, 311, 558, 13, 2704, 341, 307, 257, 665, 565, 281, 483, 666, 300, 393, 295, 28271, 300, 291, 33919, 281, 50608, 50608, 3071, 466, 983, 1177, 380, 309, 352, 2286, 293, 11, 293, 976, 411, 31413, 565, 32567, 300, 291, 486, 50964, 50964, 8460, 746, 689, 264, 3467, 1622, 493, 13, 286, 959, 309, 13, 1033, 13, 407, 286, 478, 1238, 6369, 466, 341, 13, 51272, 51272, 467, 311, 11, 309, 311, 1019, 13, 1033, 13, 407, 510, 11, 510, 311, 437, 321, 362, 13, 407, 5646, 294, 364, 316, 6840, 11, 291, 362, 264, 316, 6840, 2564, 307, 51640, 51640], "temperature": 0.0, "avg_logprob": -0.07841890263107587, "compression_ratio": 1.5731707317073171, "no_caption_prob": 3.535448558977805e-05}, {"id": 547, "seek": 323724, "start": 3249.24, "end": 3255.3999999999996, "text": " generate something where the types line up. I love it. Okay. So I'm pretty curious about this.", "tokens": [50364, 865, 11, 300, 311, 558, 13, 2704, 341, 307, 257, 665, 565, 281, 483, 666, 300, 393, 295, 28271, 300, 291, 33919, 281, 50608, 50608, 3071, 466, 983, 1177, 380, 309, 352, 2286, 293, 11, 293, 976, 411, 31413, 565, 32567, 300, 291, 486, 50964, 50964, 8460, 746, 689, 264, 3467, 1622, 493, 13, 286, 959, 309, 13, 1033, 13, 407, 286, 478, 1238, 6369, 466, 341, 13, 51272, 51272, 467, 311, 11, 309, 311, 1019, 13, 1033, 13, 407, 510, 11, 510, 311, 437, 321, 362, 13, 407, 5646, 294, 364, 316, 6840, 11, 291, 362, 264, 316, 6840, 2564, 307, 51640, 51640], "temperature": 0.0, "avg_logprob": -0.07841890263107587, "compression_ratio": 1.5731707317073171, "no_caption_prob": 3.535448558977805e-05}, {"id": 548, "seek": 323724, "start": 3255.3999999999996, "end": 3262.7599999999998, "text": " It's, it's fun. Okay. So here, here's what we have. So normally in an AST, you have the AST itself is", "tokens": [50364, 865, 11, 300, 311, 558, 13, 2704, 341, 307, 257, 665, 565, 281, 483, 666, 300, 393, 295, 28271, 300, 291, 33919, 281, 50608, 50608, 3071, 466, 983, 1177, 380, 309, 352, 2286, 293, 11, 293, 976, 411, 31413, 565, 32567, 300, 291, 486, 50964, 50964, 8460, 746, 689, 264, 3467, 1622, 493, 13, 286, 959, 309, 13, 1033, 13, 407, 286, 478, 1238, 6369, 466, 341, 13, 51272, 51272, 467, 311, 11, 309, 311, 1019, 13, 1033, 13, 407, 510, 11, 510, 311, 437, 321, 362, 13, 407, 5646, 294, 364, 316, 6840, 11, 291, 362, 264, 316, 6840, 2564, 307, 51640, 51640], "temperature": 0.0, "avg_logprob": -0.07841890263107587, "compression_ratio": 1.5731707317073171, "no_caption_prob": 3.535448558977805e-05}, {"id": 549, "seek": 326276, "start": 3262.76, "end": 3267.1600000000003, "text": " one type, ignoring the different differences between declarations and expressions. We're just", "tokens": [50364, 472, 2010, 11, 26258, 264, 819, 7300, 1296, 16694, 763, 293, 15277, 13, 492, 434, 445, 50584, 50584, 516, 281, 1879, 322, 6114, 558, 586, 11, 597, 307, 264, 16139, 295, 1507, 13, 407, 456, 311, 472, 2010, 293, 291, 362, 50820, 50848, 364, 6114, 293, 411, 510, 311, 6260, 365, 15277, 733, 295, 5315, 13, 823, 11, 437, 291, 51176, 51176, 727, 362, 7263, 307, 570, 411, 294, 11, 291, 393, 362, 257, 2010, 322, 1192, 295, 6114, 11, 597, 307, 437, 51628, 51628], "temperature": 0.0, "avg_logprob": -0.11041092050486598, "compression_ratio": 1.7934272300469483, "no_caption_prob": 5.0639337132452056e-05}, {"id": 550, "seek": 326276, "start": 3267.1600000000003, "end": 3271.88, "text": " going to focus on expression right now, which is the bulk of stuff. So there's one type and you have", "tokens": [50364, 472, 2010, 11, 26258, 264, 819, 7300, 1296, 16694, 763, 293, 15277, 13, 492, 434, 445, 50584, 50584, 516, 281, 1879, 322, 6114, 558, 586, 11, 597, 307, 264, 16139, 295, 1507, 13, 407, 456, 311, 472, 2010, 293, 291, 362, 50820, 50848, 364, 6114, 293, 411, 510, 311, 6260, 365, 15277, 733, 295, 5315, 13, 823, 11, 437, 291, 51176, 51176, 727, 362, 7263, 307, 570, 411, 294, 11, 291, 393, 362, 257, 2010, 322, 1192, 295, 6114, 11, 597, 307, 437, 51628, 51628], "temperature": 0.0, "avg_logprob": -0.11041092050486598, "compression_ratio": 1.7934272300469483, "no_caption_prob": 5.0639337132452056e-05}, {"id": 551, "seek": 326276, "start": 3272.44, "end": 3279.0, "text": " an expression and like here's dealing with expressions kind of everywhere. Now, what you", "tokens": [50364, 472, 2010, 11, 26258, 264, 819, 7300, 1296, 16694, 763, 293, 15277, 13, 492, 434, 445, 50584, 50584, 516, 281, 1879, 322, 6114, 558, 586, 11, 597, 307, 264, 16139, 295, 1507, 13, 407, 456, 311, 472, 2010, 293, 291, 362, 50820, 50848, 364, 6114, 293, 411, 510, 311, 6260, 365, 15277, 733, 295, 5315, 13, 823, 11, 437, 291, 51176, 51176, 727, 362, 7263, 307, 570, 411, 294, 11, 291, 393, 362, 257, 2010, 322, 1192, 295, 6114, 11, 597, 307, 437, 51628, 51628], "temperature": 0.0, "avg_logprob": -0.11041092050486598, "compression_ratio": 1.7934272300469483, "no_caption_prob": 5.0639337132452056e-05}, {"id": 552, "seek": 326276, "start": 3279.0, "end": 3288.0400000000004, "text": " could have potentially is because like in, you can have a type on top of expression, which is what", "tokens": [50364, 472, 2010, 11, 26258, 264, 819, 7300, 1296, 16694, 763, 293, 15277, 13, 492, 434, 445, 50584, 50584, 516, 281, 1879, 322, 6114, 558, 586, 11, 597, 307, 264, 16139, 295, 1507, 13, 407, 456, 311, 472, 2010, 293, 291, 362, 50820, 50848, 364, 6114, 293, 411, 510, 311, 6260, 365, 15277, 733, 295, 5315, 13, 823, 11, 437, 291, 51176, 51176, 727, 362, 7263, 307, 570, 411, 294, 11, 291, 393, 362, 257, 2010, 322, 1192, 295, 6114, 11, 597, 307, 437, 51628, 51628], "temperature": 0.0, "avg_logprob": -0.11041092050486598, "compression_ratio": 1.7934272300469483, "no_caption_prob": 5.0639337132452056e-05}, {"id": 553, "seek": 328804, "start": 3288.04, "end": 3294.2799999999997, "text": " Elm Cogen already has. The inner expression is from Elm syntax. There's an outer expression,", "tokens": [50364, 2699, 76, 383, 8799, 1217, 575, 13, 440, 7284, 6114, 307, 490, 2699, 76, 28431, 13, 821, 311, 364, 10847, 6114, 11, 50676, 50676, 597, 1936, 445, 575, 512, 26603, 466, 1507, 11, 558, 30, 407, 309, 311, 767, 733, 295, 23771, 50932, 50932, 257, 1329, 295, 41596, 300, 307, 294, 456, 11, 558, 30, 1449, 370, 309, 1177, 380, 362, 281, 24767, 264, 316, 6840, 281, 483, 552, 13, 51180, 51212, 400, 309, 575, 512, 661, 1333, 295, 2010, 8568, 1589, 322, 456, 300, 311, 406, 294, 264, 3380, 51436, 51436, 316, 6840, 13, 407, 456, 311, 732, 4358, 295, 15277, 11, 558, 30, 823, 412, 1192, 1496, 11, 264, 472, 300, 311, 9495, 300, 51708, 51708], "temperature": 0.0, "avg_logprob": -0.09109549522399903, "compression_ratio": 1.7216117216117217, "no_caption_prob": 1.6963591406238265e-05}, {"id": 554, "seek": 328804, "start": 3294.2799999999997, "end": 3299.4, "text": " which basically just has some metadata about stuff, right? So it's actually kind of grabbing", "tokens": [50364, 2699, 76, 383, 8799, 1217, 575, 13, 440, 7284, 6114, 307, 490, 2699, 76, 28431, 13, 821, 311, 364, 10847, 6114, 11, 50676, 50676, 597, 1936, 445, 575, 512, 26603, 466, 1507, 11, 558, 30, 407, 309, 311, 767, 733, 295, 23771, 50932, 50932, 257, 1329, 295, 41596, 300, 307, 294, 456, 11, 558, 30, 1449, 370, 309, 1177, 380, 362, 281, 24767, 264, 316, 6840, 281, 483, 552, 13, 51180, 51212, 400, 309, 575, 512, 661, 1333, 295, 2010, 8568, 1589, 322, 456, 300, 311, 406, 294, 264, 3380, 51436, 51436, 316, 6840, 13, 407, 456, 311, 732, 4358, 295, 15277, 11, 558, 30, 823, 412, 1192, 1496, 11, 264, 472, 300, 311, 9495, 300, 51708, 51708], "temperature": 0.0, "avg_logprob": -0.09109549522399903, "compression_ratio": 1.7216117216117217, "no_caption_prob": 1.6963591406238265e-05}, {"id": 555, "seek": 328804, "start": 3299.4, "end": 3304.36, "text": " a list of imports that is in there, right? Just so it doesn't have to crawl the AST to get them.", "tokens": [50364, 2699, 76, 383, 8799, 1217, 575, 13, 440, 7284, 6114, 307, 490, 2699, 76, 28431, 13, 821, 311, 364, 10847, 6114, 11, 50676, 50676, 597, 1936, 445, 575, 512, 26603, 466, 1507, 11, 558, 30, 407, 309, 311, 767, 733, 295, 23771, 50932, 50932, 257, 1329, 295, 41596, 300, 307, 294, 456, 11, 558, 30, 1449, 370, 309, 1177, 380, 362, 281, 24767, 264, 316, 6840, 281, 483, 552, 13, 51180, 51212, 400, 309, 575, 512, 661, 1333, 295, 2010, 8568, 1589, 322, 456, 300, 311, 406, 294, 264, 3380, 51436, 51436, 316, 6840, 13, 407, 456, 311, 732, 4358, 295, 15277, 11, 558, 30, 823, 412, 1192, 1496, 11, 264, 472, 300, 311, 9495, 300, 51708, 51708], "temperature": 0.0, "avg_logprob": -0.09109549522399903, "compression_ratio": 1.7216117216117217, "no_caption_prob": 1.6963591406238265e-05}, {"id": 556, "seek": 328804, "start": 3305.0, "end": 3309.48, "text": " And it has some other sort of type checking information on there that's not in the original", "tokens": [50364, 2699, 76, 383, 8799, 1217, 575, 13, 440, 7284, 6114, 307, 490, 2699, 76, 28431, 13, 821, 311, 364, 10847, 6114, 11, 50676, 50676, 597, 1936, 445, 575, 512, 26603, 466, 1507, 11, 558, 30, 407, 309, 311, 767, 733, 295, 23771, 50932, 50932, 257, 1329, 295, 41596, 300, 307, 294, 456, 11, 558, 30, 1449, 370, 309, 1177, 380, 362, 281, 24767, 264, 316, 6840, 281, 483, 552, 13, 51180, 51212, 400, 309, 575, 512, 661, 1333, 295, 2010, 8568, 1589, 322, 456, 300, 311, 406, 294, 264, 3380, 51436, 51436, 316, 6840, 13, 407, 456, 311, 732, 4358, 295, 15277, 11, 558, 30, 823, 412, 1192, 1496, 11, 264, 472, 300, 311, 9495, 300, 51708, 51708], "temperature": 0.0, "avg_logprob": -0.09109549522399903, "compression_ratio": 1.7216117216117217, "no_caption_prob": 1.6963591406238265e-05}, {"id": 557, "seek": 328804, "start": 3309.48, "end": 3314.92, "text": " AST. So there's two levels of expressions, right? Now at top level, the one that's exposed that", "tokens": [50364, 2699, 76, 383, 8799, 1217, 575, 13, 440, 7284, 6114, 307, 490, 2699, 76, 28431, 13, 821, 311, 364, 10847, 6114, 11, 50676, 50676, 597, 1936, 445, 575, 512, 26603, 466, 1507, 11, 558, 30, 407, 309, 311, 767, 733, 295, 23771, 50932, 50932, 257, 1329, 295, 41596, 300, 307, 294, 456, 11, 558, 30, 1449, 370, 309, 1177, 380, 362, 281, 24767, 264, 316, 6840, 281, 483, 552, 13, 51180, 51212, 400, 309, 575, 512, 661, 1333, 295, 2010, 8568, 1589, 322, 456, 300, 311, 406, 294, 264, 3380, 51436, 51436, 316, 6840, 13, 407, 456, 311, 732, 4358, 295, 15277, 11, 558, 30, 823, 412, 1192, 1496, 11, 264, 472, 300, 311, 9495, 300, 51708, 51708], "temperature": 0.0, "avg_logprob": -0.09109549522399903, "compression_ratio": 1.7216117216117217, "no_caption_prob": 1.6963591406238265e-05}, {"id": 558, "seek": 331492, "start": 3314.92, "end": 3318.6, "text": " you're most when you are working with Elm Cogen, you see expression. That's the one you're working", "tokens": [50364, 291, 434, 881, 562, 291, 366, 1364, 365, 2699, 76, 383, 8799, 11, 291, 536, 6114, 13, 663, 311, 264, 472, 291, 434, 1364, 50548, 50548, 322, 307, 300, 1192, 1496, 9226, 13, 440, 551, 300, 390, 1455, 452, 3567, 352, 10483, 307, 291, 727, 362, 50880, 50908, 6114, 293, 550, 291, 362, 257, 2010, 7006, 958, 281, 309, 11, 597, 307, 1936, 264, 551, 291, 528, 281, 51124, 51124, 8460, 13, 823, 11, 264, 1627, 644, 466, 309, 307, 291, 500, 380, 767, 643, 300, 551, 13, 639, 307, 257, 903, 25796, 2010, 13, 51404, 51404, 407, 291, 727, 584, 11, 420, 15706, 11, 291, 584, 2699, 76, 13, 43645, 267, 14725, 364, 6114, 295, 15706, 13, 1911, 11, 300, 311, 1627, 13, 51724, 51724], "temperature": 0.0, "avg_logprob": -0.09312902390956879, "compression_ratio": 1.7644927536231885, "no_caption_prob": 1.777788384060841e-05}, {"id": 559, "seek": 331492, "start": 3318.6, "end": 3325.2400000000002, "text": " on is that top level interface. The thing that was making my brain go nuts is you could have", "tokens": [50364, 291, 434, 881, 562, 291, 366, 1364, 365, 2699, 76, 383, 8799, 11, 291, 536, 6114, 13, 663, 311, 264, 472, 291, 434, 1364, 50548, 50548, 322, 307, 300, 1192, 1496, 9226, 13, 440, 551, 300, 390, 1455, 452, 3567, 352, 10483, 307, 291, 727, 362, 50880, 50908, 6114, 293, 550, 291, 362, 257, 2010, 7006, 958, 281, 309, 11, 597, 307, 1936, 264, 551, 291, 528, 281, 51124, 51124, 8460, 13, 823, 11, 264, 1627, 644, 466, 309, 307, 291, 500, 380, 767, 643, 300, 551, 13, 639, 307, 257, 903, 25796, 2010, 13, 51404, 51404, 407, 291, 727, 584, 11, 420, 15706, 11, 291, 584, 2699, 76, 13, 43645, 267, 14725, 364, 6114, 295, 15706, 13, 1911, 11, 300, 311, 1627, 13, 51724, 51724], "temperature": 0.0, "avg_logprob": -0.09312902390956879, "compression_ratio": 1.7644927536231885, "no_caption_prob": 1.777788384060841e-05}, {"id": 560, "seek": 331492, "start": 3325.8, "end": 3330.12, "text": " expression and then you have a type variable next to it, which is basically the thing you want to", "tokens": [50364, 291, 434, 881, 562, 291, 366, 1364, 365, 2699, 76, 383, 8799, 11, 291, 536, 6114, 13, 663, 311, 264, 472, 291, 434, 1364, 50548, 50548, 322, 307, 300, 1192, 1496, 9226, 13, 440, 551, 300, 390, 1455, 452, 3567, 352, 10483, 307, 291, 727, 362, 50880, 50908, 6114, 293, 550, 291, 362, 257, 2010, 7006, 958, 281, 309, 11, 597, 307, 1936, 264, 551, 291, 528, 281, 51124, 51124, 8460, 13, 823, 11, 264, 1627, 644, 466, 309, 307, 291, 500, 380, 767, 643, 300, 551, 13, 639, 307, 257, 903, 25796, 2010, 13, 51404, 51404, 407, 291, 727, 584, 11, 420, 15706, 11, 291, 584, 2699, 76, 13, 43645, 267, 14725, 364, 6114, 295, 15706, 13, 1911, 11, 300, 311, 1627, 13, 51724, 51724], "temperature": 0.0, "avg_logprob": -0.09312902390956879, "compression_ratio": 1.7644927536231885, "no_caption_prob": 1.777788384060841e-05}, {"id": 561, "seek": 331492, "start": 3330.12, "end": 3335.7200000000003, "text": " generate. Now, the cool part about it is you don't actually need that thing. This is a phantom type.", "tokens": [50364, 291, 434, 881, 562, 291, 366, 1364, 365, 2699, 76, 383, 8799, 11, 291, 536, 6114, 13, 663, 311, 264, 472, 291, 434, 1364, 50548, 50548, 322, 307, 300, 1192, 1496, 9226, 13, 440, 551, 300, 390, 1455, 452, 3567, 352, 10483, 307, 291, 727, 362, 50880, 50908, 6114, 293, 550, 291, 362, 257, 2010, 7006, 958, 281, 309, 11, 597, 307, 1936, 264, 551, 291, 528, 281, 51124, 51124, 8460, 13, 823, 11, 264, 1627, 644, 466, 309, 307, 291, 500, 380, 767, 643, 300, 551, 13, 639, 307, 257, 903, 25796, 2010, 13, 51404, 51404, 407, 291, 727, 584, 11, 420, 15706, 11, 291, 584, 2699, 76, 13, 43645, 267, 14725, 364, 6114, 295, 15706, 13, 1911, 11, 300, 311, 1627, 13, 51724, 51724], "temperature": 0.0, "avg_logprob": -0.09312902390956879, "compression_ratio": 1.7644927536231885, "no_caption_prob": 1.777788384060841e-05}, {"id": 562, "seek": 331492, "start": 3335.7200000000003, "end": 3342.12, "text": " So you could say, or float, you say Elm.float produces an expression of float. Hey, that's cool.", "tokens": [50364, 291, 434, 881, 562, 291, 366, 1364, 365, 2699, 76, 383, 8799, 11, 291, 536, 6114, 13, 663, 311, 264, 472, 291, 434, 1364, 50548, 50548, 322, 307, 300, 1192, 1496, 9226, 13, 440, 551, 300, 390, 1455, 452, 3567, 352, 10483, 307, 291, 727, 362, 50880, 50908, 6114, 293, 550, 291, 362, 257, 2010, 7006, 958, 281, 309, 11, 597, 307, 1936, 264, 551, 291, 528, 281, 51124, 51124, 8460, 13, 823, 11, 264, 1627, 644, 466, 309, 307, 291, 500, 380, 767, 643, 300, 551, 13, 639, 307, 257, 903, 25796, 2010, 13, 51404, 51404, 407, 291, 727, 584, 11, 420, 15706, 11, 291, 584, 2699, 76, 13, 43645, 267, 14725, 364, 6114, 295, 15706, 13, 1911, 11, 300, 311, 1627, 13, 51724, 51724], "temperature": 0.0, "avg_logprob": -0.09312902390956879, "compression_ratio": 1.7644927536231885, "no_caption_prob": 1.777788384060841e-05}, {"id": 563, "seek": 334212, "start": 3342.12, "end": 3346.68, "text": " And you could definitely create a function that is like add float. Of course, it'd have to be float,", "tokens": [50364, 400, 291, 727, 2138, 1884, 257, 2445, 300, 307, 411, 909, 15706, 13, 2720, 1164, 11, 309, 1116, 362, 281, 312, 15706, 11, 50592, 50592, 597, 307, 733, 295, 45971, 13, 22592, 1616, 366, 3657, 11, 457, 718, 311, 584, 456, 311, 406, 257, 2649, 1296, 50796, 50796, 264, 5267, 293, 15706, 13, 407, 291, 362, 909, 293, 309, 2516, 364, 6114, 15706, 11, 1071, 6114, 15706, 11, 51084, 51084, 293, 11247, 364, 6114, 15706, 13, 400, 550, 498, 291, 994, 380, 1320, 309, 11, 498, 291, 1320, 309, 411, 364, 6114, 51400, 51400, 1329, 295, 15706, 420, 2035, 11, 291, 1116, 483, 257, 31413, 565, 6713, 13, 467, 1116, 584, 411, 11, 731, 11, 291, 458, 11, 51688, 51716], "temperature": 0.0, "avg_logprob": -0.16013020374735848, "compression_ratio": 1.7720588235294117, "no_caption_prob": 1.4970496522437315e-05}, {"id": 564, "seek": 334212, "start": 3346.68, "end": 3350.7599999999998, "text": " which is kind of irritating. Numbers are weird, but let's say there's not a difference between", "tokens": [50364, 400, 291, 727, 2138, 1884, 257, 2445, 300, 307, 411, 909, 15706, 13, 2720, 1164, 11, 309, 1116, 362, 281, 312, 15706, 11, 50592, 50592, 597, 307, 733, 295, 45971, 13, 22592, 1616, 366, 3657, 11, 457, 718, 311, 584, 456, 311, 406, 257, 2649, 1296, 50796, 50796, 264, 5267, 293, 15706, 13, 407, 291, 362, 909, 293, 309, 2516, 364, 6114, 15706, 11, 1071, 6114, 15706, 11, 51084, 51084, 293, 11247, 364, 6114, 15706, 13, 400, 550, 498, 291, 994, 380, 1320, 309, 11, 498, 291, 1320, 309, 411, 364, 6114, 51400, 51400, 1329, 295, 15706, 420, 2035, 11, 291, 1116, 483, 257, 31413, 565, 6713, 13, 467, 1116, 584, 411, 11, 731, 11, 291, 458, 11, 51688, 51716], "temperature": 0.0, "avg_logprob": -0.16013020374735848, "compression_ratio": 1.7720588235294117, "no_caption_prob": 1.4970496522437315e-05}, {"id": 565, "seek": 334212, "start": 3350.7599999999998, "end": 3356.52, "text": " the images and float. So you have add and it takes an expression float, another expression float,", "tokens": [50364, 400, 291, 727, 2138, 1884, 257, 2445, 300, 307, 411, 909, 15706, 13, 2720, 1164, 11, 309, 1116, 362, 281, 312, 15706, 11, 50592, 50592, 597, 307, 733, 295, 45971, 13, 22592, 1616, 366, 3657, 11, 457, 718, 311, 584, 456, 311, 406, 257, 2649, 1296, 50796, 50796, 264, 5267, 293, 15706, 13, 407, 291, 362, 909, 293, 309, 2516, 364, 6114, 15706, 11, 1071, 6114, 15706, 11, 51084, 51084, 293, 11247, 364, 6114, 15706, 13, 400, 550, 498, 291, 994, 380, 1320, 309, 11, 498, 291, 1320, 309, 411, 364, 6114, 51400, 51400, 1329, 295, 15706, 420, 2035, 11, 291, 1116, 483, 257, 31413, 565, 6713, 13, 467, 1116, 584, 411, 11, 731, 11, 291, 458, 11, 51688, 51716], "temperature": 0.0, "avg_logprob": -0.16013020374735848, "compression_ratio": 1.7720588235294117, "no_caption_prob": 1.4970496522437315e-05}, {"id": 566, "seek": 334212, "start": 3356.52, "end": 3362.8399999999997, "text": " and returns an expression float. And then if you didn't pass it, if you pass it like an expression", "tokens": [50364, 400, 291, 727, 2138, 1884, 257, 2445, 300, 307, 411, 909, 15706, 13, 2720, 1164, 11, 309, 1116, 362, 281, 312, 15706, 11, 50592, 50592, 597, 307, 733, 295, 45971, 13, 22592, 1616, 366, 3657, 11, 457, 718, 311, 584, 456, 311, 406, 257, 2649, 1296, 50796, 50796, 264, 5267, 293, 15706, 13, 407, 291, 362, 909, 293, 309, 2516, 364, 6114, 15706, 11, 1071, 6114, 15706, 11, 51084, 51084, 293, 11247, 364, 6114, 15706, 13, 400, 550, 498, 291, 994, 380, 1320, 309, 11, 498, 291, 1320, 309, 411, 364, 6114, 51400, 51400, 1329, 295, 15706, 420, 2035, 11, 291, 1116, 483, 257, 31413, 565, 6713, 13, 467, 1116, 584, 411, 11, 731, 11, 291, 458, 11, 51688, 51716], "temperature": 0.0, "avg_logprob": -0.16013020374735848, "compression_ratio": 1.7720588235294117, "no_caption_prob": 1.4970496522437315e-05}, {"id": 567, "seek": 334212, "start": 3362.8399999999997, "end": 3368.6, "text": " list of float or whatever, you'd get a compile time error. It'd say like, well, you know,", "tokens": [50364, 400, 291, 727, 2138, 1884, 257, 2445, 300, 307, 411, 909, 15706, 13, 2720, 1164, 11, 309, 1116, 362, 281, 312, 15706, 11, 50592, 50592, 597, 307, 733, 295, 45971, 13, 22592, 1616, 366, 3657, 11, 457, 718, 311, 584, 456, 311, 406, 257, 2649, 1296, 50796, 50796, 264, 5267, 293, 15706, 13, 407, 291, 362, 909, 293, 309, 2516, 364, 6114, 15706, 11, 1071, 6114, 15706, 11, 51084, 51084, 293, 11247, 364, 6114, 15706, 13, 400, 550, 498, 291, 994, 380, 1320, 309, 11, 498, 291, 1320, 309, 411, 364, 6114, 51400, 51400, 1329, 295, 15706, 420, 2035, 11, 291, 1116, 483, 257, 31413, 565, 6713, 13, 467, 1116, 584, 411, 11, 731, 11, 291, 458, 11, 51688, 51716], "temperature": 0.0, "avg_logprob": -0.16013020374735848, "compression_ratio": 1.7720588235294117, "no_caption_prob": 1.4970496522437315e-05}, {"id": 568, "seek": 336860, "start": 3368.6, "end": 3374.2, "text": " I, and it would be like, you know, in that developer catnip kind of a way, like kind of", "tokens": [50364, 286, 11, 293, 309, 576, 312, 411, 11, 291, 458, 11, 294, 300, 10754, 3857, 77, 647, 733, 295, 257, 636, 11, 411, 733, 295, 50644, 50644, 8013, 278, 264, 3380, 6713, 295, 411, 11, 291, 458, 11, 341, 2445, 2516, 257, 15706, 293, 15706, 293, 291, 2729, 50944, 50944, 385, 257, 15706, 293, 291, 458, 11, 2035, 13, 708, 264, 12872, 30, 407, 286, 390, 411, 11, 1954, 452, 1265, 11, 341, 307, 10483, 13, 639, 307, 370, 51204, 51204, 1627, 13, 400, 370, 286, 390, 1953, 466, 309, 293, 286, 390, 411, 11, 1392, 13, 400, 286, 390, 411, 11, 291, 458, 11, 21475, 51400, 51400, 466, 341, 11, 1419, 36911, 466, 309, 11, 2035, 13, 509, 820, 1590, 8296, 11, 587, 13, 51688, 51792], "temperature": 0.0, "avg_logprob": -0.14424371349719145, "compression_ratio": 1.8704453441295548, "no_caption_prob": 2.468254024279304e-05}, {"id": 569, "seek": 336860, "start": 3374.2, "end": 3380.2, "text": " mirroring the original error of like, you know, this function takes a float and float and you gave", "tokens": [50364, 286, 11, 293, 309, 576, 312, 411, 11, 291, 458, 11, 294, 300, 10754, 3857, 77, 647, 733, 295, 257, 636, 11, 411, 733, 295, 50644, 50644, 8013, 278, 264, 3380, 6713, 295, 411, 11, 291, 458, 11, 341, 2445, 2516, 257, 15706, 293, 15706, 293, 291, 2729, 50944, 50944, 385, 257, 15706, 293, 291, 458, 11, 2035, 13, 708, 264, 12872, 30, 407, 286, 390, 411, 11, 1954, 452, 1265, 11, 341, 307, 10483, 13, 639, 307, 370, 51204, 51204, 1627, 13, 400, 370, 286, 390, 1953, 466, 309, 293, 286, 390, 411, 11, 1392, 13, 400, 286, 390, 411, 11, 291, 458, 11, 21475, 51400, 51400, 466, 341, 11, 1419, 36911, 466, 309, 11, 2035, 13, 509, 820, 1590, 8296, 11, 587, 13, 51688, 51792], "temperature": 0.0, "avg_logprob": -0.14424371349719145, "compression_ratio": 1.8704453441295548, "no_caption_prob": 2.468254024279304e-05}, {"id": 570, "seek": 336860, "start": 3380.2, "end": 3385.4, "text": " me a float and you know, whatever. What the heck? So I was like, oh my God, this is nuts. This is so", "tokens": [50364, 286, 11, 293, 309, 576, 312, 411, 11, 291, 458, 11, 294, 300, 10754, 3857, 77, 647, 733, 295, 257, 636, 11, 411, 733, 295, 50644, 50644, 8013, 278, 264, 3380, 6713, 295, 411, 11, 291, 458, 11, 341, 2445, 2516, 257, 15706, 293, 15706, 293, 291, 2729, 50944, 50944, 385, 257, 15706, 293, 291, 458, 11, 2035, 13, 708, 264, 12872, 30, 407, 286, 390, 411, 11, 1954, 452, 1265, 11, 341, 307, 10483, 13, 639, 307, 370, 51204, 51204, 1627, 13, 400, 370, 286, 390, 1953, 466, 309, 293, 286, 390, 411, 11, 1392, 13, 400, 286, 390, 411, 11, 291, 458, 11, 21475, 51400, 51400, 466, 341, 11, 1419, 36911, 466, 309, 11, 2035, 13, 509, 820, 1590, 8296, 11, 587, 13, 51688, 51792], "temperature": 0.0, "avg_logprob": -0.14424371349719145, "compression_ratio": 1.8704453441295548, "no_caption_prob": 2.468254024279304e-05}, {"id": 571, "seek": 336860, "start": 3385.4, "end": 3389.3199999999997, "text": " cool. And so I was thinking about it and I was like, okay. And I was like, you know, dreaming", "tokens": [50364, 286, 11, 293, 309, 576, 312, 411, 11, 291, 458, 11, 294, 300, 10754, 3857, 77, 647, 733, 295, 257, 636, 11, 411, 733, 295, 50644, 50644, 8013, 278, 264, 3380, 6713, 295, 411, 11, 291, 458, 11, 341, 2445, 2516, 257, 15706, 293, 15706, 293, 291, 2729, 50944, 50944, 385, 257, 15706, 293, 291, 458, 11, 2035, 13, 708, 264, 12872, 30, 407, 286, 390, 411, 11, 1954, 452, 1265, 11, 341, 307, 10483, 13, 639, 307, 370, 51204, 51204, 1627, 13, 400, 370, 286, 390, 1953, 466, 309, 293, 286, 390, 411, 11, 1392, 13, 400, 286, 390, 411, 11, 291, 458, 11, 21475, 51400, 51400, 466, 341, 11, 1419, 36911, 466, 309, 11, 2035, 13, 509, 820, 1590, 8296, 11, 587, 13, 51688, 51792], "temperature": 0.0, "avg_logprob": -0.14424371349719145, "compression_ratio": 1.8704453441295548, "no_caption_prob": 2.468254024279304e-05}, {"id": 572, "seek": 336860, "start": 3389.3199999999997, "end": 3395.08, "text": " about this, having nightmares about it, whatever. You should stop sleeping, man.", "tokens": [50364, 286, 11, 293, 309, 576, 312, 411, 11, 291, 458, 11, 294, 300, 10754, 3857, 77, 647, 733, 295, 257, 636, 11, 411, 733, 295, 50644, 50644, 8013, 278, 264, 3380, 6713, 295, 411, 11, 291, 458, 11, 341, 2445, 2516, 257, 15706, 293, 15706, 293, 291, 2729, 50944, 50944, 385, 257, 15706, 293, 291, 458, 11, 2035, 13, 708, 264, 12872, 30, 407, 286, 390, 411, 11, 1954, 452, 1265, 11, 341, 307, 10483, 13, 639, 307, 370, 51204, 51204, 1627, 13, 400, 370, 286, 390, 1953, 466, 309, 293, 286, 390, 411, 11, 1392, 13, 400, 286, 390, 411, 11, 291, 458, 11, 21475, 51400, 51400, 466, 341, 11, 1419, 36911, 466, 309, 11, 2035, 13, 509, 820, 1590, 8296, 11, 587, 13, 51688, 51792], "temperature": 0.0, "avg_logprob": -0.14424371349719145, "compression_ratio": 1.8704453441295548, "no_caption_prob": 2.468254024279304e-05}, {"id": 573, "seek": 339508, "start": 3395.08, "end": 3404.2, "text": " Oh no, that's not the answer. Type safety for convenience. You go the other way. We got more", "tokens": [50364, 876, 572, 11, 300, 311, 406, 264, 1867, 13, 15576, 4514, 337, 19283, 13, 509, 352, 264, 661, 636, 13, 492, 658, 544, 50820, 50820, 2817, 13, 5048, 36911, 13, 50964, 51064, 407, 286, 390, 1953, 466, 309, 293, 411, 11, 1392, 11, 731, 11, 689, 775, 341, 483, 3657, 30, 1485, 644, 689, 309, 2170, 51288, 51288, 3657, 307, 7724, 13, 1012, 360, 291, 652, 733, 295, 7724, 589, 30, 407, 7724, 11, 291, 643, 257, 11, 291, 393, 572, 2854, 51624, 51624], "temperature": 0.0, "avg_logprob": -0.15875450400419014, "compression_ratio": 1.5120772946859904, "no_caption_prob": 3.1200699595501646e-05}, {"id": 574, "seek": 339508, "start": 3404.2, "end": 3407.08, "text": " sleep. More nightmares.", "tokens": [50364, 876, 572, 11, 300, 311, 406, 264, 1867, 13, 15576, 4514, 337, 19283, 13, 509, 352, 264, 661, 636, 13, 492, 658, 544, 50820, 50820, 2817, 13, 5048, 36911, 13, 50964, 51064, 407, 286, 390, 1953, 466, 309, 293, 411, 11, 1392, 11, 731, 11, 689, 775, 341, 483, 3657, 30, 1485, 644, 689, 309, 2170, 51288, 51288, 3657, 307, 7724, 13, 1012, 360, 291, 652, 733, 295, 7724, 589, 30, 407, 7724, 11, 291, 643, 257, 11, 291, 393, 572, 2854, 51624, 51624], "temperature": 0.0, "avg_logprob": -0.15875450400419014, "compression_ratio": 1.5120772946859904, "no_caption_prob": 3.1200699595501646e-05}, {"id": 575, "seek": 339508, "start": 3409.08, "end": 3413.56, "text": " So I was thinking about it and like, okay, well, where does this get weird? One part where it gets", "tokens": [50364, 876, 572, 11, 300, 311, 406, 264, 1867, 13, 15576, 4514, 337, 19283, 13, 509, 352, 264, 661, 636, 13, 492, 658, 544, 50820, 50820, 2817, 13, 5048, 36911, 13, 50964, 51064, 407, 286, 390, 1953, 466, 309, 293, 411, 11, 1392, 11, 731, 11, 689, 775, 341, 483, 3657, 30, 1485, 644, 689, 309, 2170, 51288, 51288, 3657, 307, 7724, 13, 1012, 360, 291, 652, 733, 295, 7724, 589, 30, 407, 7724, 11, 291, 643, 257, 11, 291, 393, 572, 2854, 51624, 51624], "temperature": 0.0, "avg_logprob": -0.15875450400419014, "compression_ratio": 1.5120772946859904, "no_caption_prob": 3.1200699595501646e-05}, {"id": 576, "seek": 339508, "start": 3413.56, "end": 3420.2799999999997, "text": " weird is records. How do you make kind of records work? So records, you need a, you can no longer", "tokens": [50364, 876, 572, 11, 300, 311, 406, 264, 1867, 13, 15576, 4514, 337, 19283, 13, 509, 352, 264, 661, 636, 13, 492, 658, 544, 50820, 50820, 2817, 13, 5048, 36911, 13, 50964, 51064, 407, 286, 390, 1953, 466, 309, 293, 411, 11, 1392, 11, 731, 11, 689, 775, 341, 483, 3657, 30, 1485, 644, 689, 309, 2170, 51288, 51288, 3657, 307, 7724, 13, 1012, 360, 291, 652, 733, 295, 7724, 589, 30, 407, 7724, 11, 291, 643, 257, 11, 291, 393, 572, 2854, 51624, 51624], "temperature": 0.0, "avg_logprob": -0.15875450400419014, "compression_ratio": 1.5120772946859904, "no_caption_prob": 3.1200699595501646e-05}, {"id": 577, "seek": 342028, "start": 3420.28, "end": 3425.5600000000004, "text": " have a record to create a record. You like to create a record in Lmcogen, you have a list of", "tokens": [50364, 362, 257, 2136, 281, 1884, 257, 2136, 13, 509, 411, 281, 1884, 257, 2136, 294, 441, 76, 66, 8799, 11, 291, 362, 257, 1329, 295, 50628, 50628, 7909, 11, 597, 307, 1936, 264, 1315, 295, 264, 2519, 293, 264, 2158, 13, 663, 311, 257, 1154, 13, 467, 311, 406, 3879, 11, 51008, 51008, 370, 411, 11, 797, 11, 321, 434, 257, 21169, 4373, 295, 4514, 510, 13, 1743, 11, 293, 321, 434, 4619, 365, 300, 13, 492, 51252, 51252, 366, 406, 411, 11, 370, 309, 311, 411, 11, 321, 733, 295, 976, 493, 300, 411, 11, 1954, 11, 498, 309, 2010, 13834, 11, 309, 23815, 51508, 51508], "temperature": 0.0, "avg_logprob": -0.1263746384086959, "compression_ratio": 1.6536796536796536, "no_caption_prob": 4.985522900824435e-05}, {"id": 578, "seek": 342028, "start": 3425.5600000000004, "end": 3433.1600000000003, "text": " fields, which is basically the name of the field and the value. That's a problem. It's not totally,", "tokens": [50364, 362, 257, 2136, 281, 1884, 257, 2136, 13, 509, 411, 281, 1884, 257, 2136, 294, 441, 76, 66, 8799, 11, 291, 362, 257, 1329, 295, 50628, 50628, 7909, 11, 597, 307, 1936, 264, 1315, 295, 264, 2519, 293, 264, 2158, 13, 663, 311, 257, 1154, 13, 467, 311, 406, 3879, 11, 51008, 51008, 370, 411, 11, 797, 11, 321, 434, 257, 21169, 4373, 295, 4514, 510, 13, 1743, 11, 293, 321, 434, 4619, 365, 300, 13, 492, 51252, 51252, 366, 406, 411, 11, 370, 309, 311, 411, 11, 321, 733, 295, 976, 493, 300, 411, 11, 1954, 11, 498, 309, 2010, 13834, 11, 309, 23815, 51508, 51508], "temperature": 0.0, "avg_logprob": -0.1263746384086959, "compression_ratio": 1.6536796536796536, "no_caption_prob": 4.985522900824435e-05}, {"id": 579, "seek": 342028, "start": 3433.1600000000003, "end": 3438.0400000000004, "text": " so like, again, we're a sliding scale of safety here. Like, and we're comfortable with that. We", "tokens": [50364, 362, 257, 2136, 281, 1884, 257, 2136, 13, 509, 411, 281, 1884, 257, 2136, 294, 441, 76, 66, 8799, 11, 291, 362, 257, 1329, 295, 50628, 50628, 7909, 11, 597, 307, 1936, 264, 1315, 295, 264, 2519, 293, 264, 2158, 13, 663, 311, 257, 1154, 13, 467, 311, 406, 3879, 11, 51008, 51008, 370, 411, 11, 797, 11, 321, 434, 257, 21169, 4373, 295, 4514, 510, 13, 1743, 11, 293, 321, 434, 4619, 365, 300, 13, 492, 51252, 51252, 366, 406, 411, 11, 370, 309, 311, 411, 11, 321, 733, 295, 976, 493, 300, 411, 11, 1954, 11, 498, 309, 2010, 13834, 11, 309, 23815, 51508, 51508], "temperature": 0.0, "avg_logprob": -0.1263746384086959, "compression_ratio": 1.6536796536796536, "no_caption_prob": 4.985522900824435e-05}, {"id": 580, "seek": 342028, "start": 3438.0400000000004, "end": 3443.1600000000003, "text": " are not like, so it's like, we kind of give up that like, oh, if it type checks, it generates", "tokens": [50364, 362, 257, 2136, 281, 1884, 257, 2136, 13, 509, 411, 281, 1884, 257, 2136, 294, 441, 76, 66, 8799, 11, 291, 362, 257, 1329, 295, 50628, 50628, 7909, 11, 597, 307, 1936, 264, 1315, 295, 264, 2519, 293, 264, 2158, 13, 663, 311, 257, 1154, 13, 467, 311, 406, 3879, 11, 51008, 51008, 370, 411, 11, 797, 11, 321, 434, 257, 21169, 4373, 295, 4514, 510, 13, 1743, 11, 293, 321, 434, 4619, 365, 300, 13, 492, 51252, 51252, 366, 406, 411, 11, 370, 309, 311, 411, 11, 321, 733, 295, 976, 493, 300, 411, 11, 1954, 11, 498, 309, 2010, 13834, 11, 309, 23815, 51508, 51508], "temperature": 0.0, "avg_logprob": -0.1263746384086959, "compression_ratio": 1.6536796536796536, "no_caption_prob": 4.985522900824435e-05}, {"id": 581, "seek": 344316, "start": 3443.16, "end": 3451.56, "text": " type checked code. We know that that's probably not doable without some shenanigans or maybe not", "tokens": [50364, 2010, 10033, 3089, 13, 492, 458, 300, 300, 311, 1391, 406, 41183, 1553, 512, 402, 45008, 49088, 420, 1310, 406, 50784, 50784, 41183, 412, 439, 13, 286, 500, 380, 458, 13, 1545, 307, 300, 257, 1154, 30, 1119, 309, 570, 291, 434, 8437, 257, 1329, 295, 30, 51168, 51168, 865, 11, 370, 309, 311, 264, 1329, 644, 13, 407, 264, 1329, 575, 281, 312, 439, 472, 2158, 13, 407, 309, 311, 411, 11, 718, 311, 584, 286, 1415, 51372, 51372, 257, 2136, 293, 309, 632, 732, 7909, 13, 1485, 300, 307, 452, 24922, 293, 309, 311, 364, 6114, 24922, 13, 400, 1071, 51700, 51700], "temperature": 0.0, "avg_logprob": -0.12993263748456846, "compression_ratio": 1.5950413223140496, "no_caption_prob": 2.3551821868750267e-05}, {"id": 582, "seek": 344316, "start": 3451.56, "end": 3459.24, "text": " doable at all. I don't know. Why is that a problem? Is it because you're passing a list of?", "tokens": [50364, 2010, 10033, 3089, 13, 492, 458, 300, 300, 311, 1391, 406, 41183, 1553, 512, 402, 45008, 49088, 420, 1310, 406, 50784, 50784, 41183, 412, 439, 13, 286, 500, 380, 458, 13, 1545, 307, 300, 257, 1154, 30, 1119, 309, 570, 291, 434, 8437, 257, 1329, 295, 30, 51168, 51168, 865, 11, 370, 309, 311, 264, 1329, 644, 13, 407, 264, 1329, 575, 281, 312, 439, 472, 2158, 13, 407, 309, 311, 411, 11, 718, 311, 584, 286, 1415, 51372, 51372, 257, 2136, 293, 309, 632, 732, 7909, 13, 1485, 300, 307, 452, 24922, 293, 309, 311, 364, 6114, 24922, 13, 400, 1071, 51700, 51700], "temperature": 0.0, "avg_logprob": -0.12993263748456846, "compression_ratio": 1.5950413223140496, "no_caption_prob": 2.3551821868750267e-05}, {"id": 583, "seek": 344316, "start": 3459.24, "end": 3463.3199999999997, "text": " Yeah, so it's the list part. So the list has to be all one value. So it's like, let's say I wanted", "tokens": [50364, 2010, 10033, 3089, 13, 492, 458, 300, 300, 311, 1391, 406, 41183, 1553, 512, 402, 45008, 49088, 420, 1310, 406, 50784, 50784, 41183, 412, 439, 13, 286, 500, 380, 458, 13, 1545, 307, 300, 257, 1154, 30, 1119, 309, 570, 291, 434, 8437, 257, 1329, 295, 30, 51168, 51168, 865, 11, 370, 309, 311, 264, 1329, 644, 13, 407, 264, 1329, 575, 281, 312, 439, 472, 2158, 13, 407, 309, 311, 411, 11, 718, 311, 584, 286, 1415, 51372, 51372, 257, 2136, 293, 309, 632, 732, 7909, 13, 1485, 300, 307, 452, 24922, 293, 309, 311, 364, 6114, 24922, 13, 400, 1071, 51700, 51700], "temperature": 0.0, "avg_logprob": -0.12993263748456846, "compression_ratio": 1.5950413223140496, "no_caption_prob": 2.3551821868750267e-05}, {"id": 584, "seek": 344316, "start": 3463.3199999999997, "end": 3469.8799999999997, "text": " a record and it had two fields. One that is my integer and it's an expression integer. And another", "tokens": [50364, 2010, 10033, 3089, 13, 492, 458, 300, 300, 311, 1391, 406, 41183, 1553, 512, 402, 45008, 49088, 420, 1310, 406, 50784, 50784, 41183, 412, 439, 13, 286, 500, 380, 458, 13, 1545, 307, 300, 257, 1154, 30, 1119, 309, 570, 291, 434, 8437, 257, 1329, 295, 30, 51168, 51168, 865, 11, 370, 309, 311, 264, 1329, 644, 13, 407, 264, 1329, 575, 281, 312, 439, 472, 2158, 13, 407, 309, 311, 411, 11, 718, 311, 584, 286, 1415, 51372, 51372, 257, 2136, 293, 309, 632, 732, 7909, 13, 1485, 300, 307, 452, 24922, 293, 309, 311, 364, 6114, 24922, 13, 400, 1071, 51700, 51700], "temperature": 0.0, "avg_logprob": -0.12993263748456846, "compression_ratio": 1.5950413223140496, "no_caption_prob": 2.3551821868750267e-05}, {"id": 585, "seek": 346988, "start": 3469.88, "end": 3474.28, "text": " one, which is my float, which is expression float. All of a sudden that doesn't unify.", "tokens": [50364, 472, 11, 597, 307, 452, 15706, 11, 597, 307, 6114, 15706, 13, 1057, 295, 257, 3990, 300, 1177, 380, 517, 2505, 13, 50584, 50584, 286, 519, 321, 820, 17594, 886, 13, 1743, 11, 286, 519, 498, 291, 434, 1417, 466, 264, 1333, 295, 10833, 50836, 50836, 342, 5432, 300, 291, 362, 337, 411, 11, 337, 2570, 21445, 11, 337, 441, 76, 66, 8799, 3625, 512, 7372, 13, 51152, 51152, 663, 576, 13, 51200, 51200, 509, 727, 360, 300, 570, 291, 727, 362, 16945, 829, 264, 903, 25796, 2010, 294, 456, 13, 583, 498, 291, 434, 51484, 51484, 1566, 11, 731, 11, 286, 445, 528, 281, 1884, 452, 1065, 2136, 11, 309, 311, 406, 490, 604, 7372, 420, 1340, 13, 467, 311, 445, 51744, 51744], "temperature": 0.0, "avg_logprob": -0.11635376158214751, "compression_ratio": 1.6512455516014235, "no_caption_prob": 7.182994067989057e-06}, {"id": 586, "seek": 346988, "start": 3474.28, "end": 3479.32, "text": " I think we should clarify too. Like, I think if you're talking about the sort of generated", "tokens": [50364, 472, 11, 597, 307, 452, 15706, 11, 597, 307, 6114, 15706, 13, 1057, 295, 257, 3990, 300, 1177, 380, 517, 2505, 13, 50584, 50584, 286, 519, 321, 820, 17594, 886, 13, 1743, 11, 286, 519, 498, 291, 434, 1417, 466, 264, 1333, 295, 10833, 50836, 50836, 342, 5432, 300, 291, 362, 337, 411, 11, 337, 2570, 21445, 11, 337, 441, 76, 66, 8799, 3625, 512, 7372, 13, 51152, 51152, 663, 576, 13, 51200, 51200, 509, 727, 360, 300, 570, 291, 727, 362, 16945, 829, 264, 903, 25796, 2010, 294, 456, 13, 583, 498, 291, 434, 51484, 51484, 1566, 11, 731, 11, 286, 445, 528, 281, 1884, 452, 1065, 2136, 11, 309, 311, 406, 490, 604, 7372, 420, 1340, 13, 467, 311, 445, 51744, 51744], "temperature": 0.0, "avg_logprob": -0.11635376158214751, "compression_ratio": 1.6512455516014235, "no_caption_prob": 7.182994067989057e-06}, {"id": 587, "seek": 346988, "start": 3479.32, "end": 3485.6400000000003, "text": " stubs that you have for like, for known APIs, for Lmcogen install some package.", "tokens": [50364, 472, 11, 597, 307, 452, 15706, 11, 597, 307, 6114, 15706, 13, 1057, 295, 257, 3990, 300, 1177, 380, 517, 2505, 13, 50584, 50584, 286, 519, 321, 820, 17594, 886, 13, 1743, 11, 286, 519, 498, 291, 434, 1417, 466, 264, 1333, 295, 10833, 50836, 50836, 342, 5432, 300, 291, 362, 337, 411, 11, 337, 2570, 21445, 11, 337, 441, 76, 66, 8799, 3625, 512, 7372, 13, 51152, 51152, 663, 576, 13, 51200, 51200, 509, 727, 360, 300, 570, 291, 727, 362, 16945, 829, 264, 903, 25796, 2010, 294, 456, 13, 583, 498, 291, 434, 51484, 51484, 1566, 11, 731, 11, 286, 445, 528, 281, 1884, 452, 1065, 2136, 11, 309, 311, 406, 490, 604, 7372, 420, 1340, 13, 467, 311, 445, 51744, 51744], "temperature": 0.0, "avg_logprob": -0.11635376158214751, "compression_ratio": 1.6512455516014235, "no_caption_prob": 7.182994067989057e-06}, {"id": 588, "seek": 346988, "start": 3485.6400000000003, "end": 3486.6, "text": " That would.", "tokens": [50364, 472, 11, 597, 307, 452, 15706, 11, 597, 307, 6114, 15706, 13, 1057, 295, 257, 3990, 300, 1177, 380, 517, 2505, 13, 50584, 50584, 286, 519, 321, 820, 17594, 886, 13, 1743, 11, 286, 519, 498, 291, 434, 1417, 466, 264, 1333, 295, 10833, 50836, 50836, 342, 5432, 300, 291, 362, 337, 411, 11, 337, 2570, 21445, 11, 337, 441, 76, 66, 8799, 3625, 512, 7372, 13, 51152, 51152, 663, 576, 13, 51200, 51200, 509, 727, 360, 300, 570, 291, 727, 362, 16945, 829, 264, 903, 25796, 2010, 294, 456, 13, 583, 498, 291, 434, 51484, 51484, 1566, 11, 731, 11, 286, 445, 528, 281, 1884, 452, 1065, 2136, 11, 309, 311, 406, 490, 604, 7372, 420, 1340, 13, 467, 311, 445, 51744, 51744], "temperature": 0.0, "avg_logprob": -0.11635376158214751, "compression_ratio": 1.6512455516014235, "no_caption_prob": 7.182994067989057e-06}, {"id": 589, "seek": 346988, "start": 3486.6, "end": 3492.28, "text": " You could do that because you could have manually put the phantom type in there. But if you're", "tokens": [50364, 472, 11, 597, 307, 452, 15706, 11, 597, 307, 6114, 15706, 13, 1057, 295, 257, 3990, 300, 1177, 380, 517, 2505, 13, 50584, 50584, 286, 519, 321, 820, 17594, 886, 13, 1743, 11, 286, 519, 498, 291, 434, 1417, 466, 264, 1333, 295, 10833, 50836, 50836, 342, 5432, 300, 291, 362, 337, 411, 11, 337, 2570, 21445, 11, 337, 441, 76, 66, 8799, 3625, 512, 7372, 13, 51152, 51152, 663, 576, 13, 51200, 51200, 509, 727, 360, 300, 570, 291, 727, 362, 16945, 829, 264, 903, 25796, 2010, 294, 456, 13, 583, 498, 291, 434, 51484, 51484, 1566, 11, 731, 11, 286, 445, 528, 281, 1884, 452, 1065, 2136, 11, 309, 311, 406, 490, 604, 7372, 420, 1340, 13, 467, 311, 445, 51744, 51744], "temperature": 0.0, "avg_logprob": -0.11635376158214751, "compression_ratio": 1.6512455516014235, "no_caption_prob": 7.182994067989057e-06}, {"id": 590, "seek": 346988, "start": 3492.28, "end": 3497.48, "text": " saying, well, I just want to create my own record, it's not from any package or anything. It's just", "tokens": [50364, 472, 11, 597, 307, 452, 15706, 11, 597, 307, 6114, 15706, 13, 1057, 295, 257, 3990, 300, 1177, 380, 517, 2505, 13, 50584, 50584, 286, 519, 321, 820, 17594, 886, 13, 1743, 11, 286, 519, 498, 291, 434, 1417, 466, 264, 1333, 295, 10833, 50836, 50836, 342, 5432, 300, 291, 362, 337, 411, 11, 337, 2570, 21445, 11, 337, 441, 76, 66, 8799, 3625, 512, 7372, 13, 51152, 51152, 663, 576, 13, 51200, 51200, 509, 727, 360, 300, 570, 291, 727, 362, 16945, 829, 264, 903, 25796, 2010, 294, 456, 13, 583, 498, 291, 434, 51484, 51484, 1566, 11, 731, 11, 286, 445, 528, 281, 1884, 452, 1065, 2136, 11, 309, 311, 406, 490, 604, 7372, 420, 1340, 13, 467, 311, 445, 51744, 51744], "temperature": 0.0, "avg_logprob": -0.11635376158214751, "compression_ratio": 1.6512455516014235, "no_caption_prob": 7.182994067989057e-06}, {"id": 591, "seek": 349748, "start": 3497.48, "end": 3506.36, "text": " arbitrary types. Now, like in order to get that phantom type to be a specific thing, you have to", "tokens": [50364, 23211, 3467, 13, 823, 11, 411, 294, 1668, 281, 483, 300, 903, 25796, 2010, 281, 312, 257, 2685, 551, 11, 291, 362, 281, 50808, 50808, 1320, 309, 294, 746, 295, 300, 2010, 11, 457, 291, 434, 406, 11, 291, 434, 8437, 309, 257, 1329, 11, 406, 257, 2136, 13, 51040, 51128, 286, 519, 291, 727, 7263, 360, 309, 365, 257, 27377, 5102, 13, 51276, 51340, 876, 1338, 13, 51364, 51404, 865, 13, 407, 510, 311, 689, 13, 51468, 51468, 14711, 13, 51548, 51548, 583, 291, 2759, 380, 312, 1075, 281, 483, 264, 2519, 1315, 666, 264, 2010, 1315, 13, 51780, 51780], "temperature": 0.0, "avg_logprob": -0.1490797024328732, "compression_ratio": 1.609865470852018, "no_caption_prob": 2.318698534509167e-05}, {"id": 592, "seek": 349748, "start": 3506.36, "end": 3511.0, "text": " pass it in something of that type, but you're not, you're passing it a list, not a record.", "tokens": [50364, 23211, 3467, 13, 823, 11, 411, 294, 1668, 281, 483, 300, 903, 25796, 2010, 281, 312, 257, 2685, 551, 11, 291, 362, 281, 50808, 50808, 1320, 309, 294, 746, 295, 300, 2010, 11, 457, 291, 434, 406, 11, 291, 434, 8437, 309, 257, 1329, 11, 406, 257, 2136, 13, 51040, 51128, 286, 519, 291, 727, 7263, 360, 309, 365, 257, 27377, 5102, 13, 51276, 51340, 876, 1338, 13, 51364, 51404, 865, 13, 407, 510, 311, 689, 13, 51468, 51468, 14711, 13, 51548, 51548, 583, 291, 2759, 380, 312, 1075, 281, 483, 264, 2519, 1315, 666, 264, 2010, 1315, 13, 51780, 51780], "temperature": 0.0, "avg_logprob": -0.1490797024328732, "compression_ratio": 1.609865470852018, "no_caption_prob": 2.318698534509167e-05}, {"id": 593, "seek": 349748, "start": 3512.76, "end": 3515.72, "text": " I think you could potentially do it with a builder pattern.", "tokens": [50364, 23211, 3467, 13, 823, 11, 411, 294, 1668, 281, 483, 300, 903, 25796, 2010, 281, 312, 257, 2685, 551, 11, 291, 362, 281, 50808, 50808, 1320, 309, 294, 746, 295, 300, 2010, 11, 457, 291, 434, 406, 11, 291, 434, 8437, 309, 257, 1329, 11, 406, 257, 2136, 13, 51040, 51128, 286, 519, 291, 727, 7263, 360, 309, 365, 257, 27377, 5102, 13, 51276, 51340, 876, 1338, 13, 51364, 51404, 865, 13, 407, 510, 311, 689, 13, 51468, 51468, 14711, 13, 51548, 51548, 583, 291, 2759, 380, 312, 1075, 281, 483, 264, 2519, 1315, 666, 264, 2010, 1315, 13, 51780, 51780], "temperature": 0.0, "avg_logprob": -0.1490797024328732, "compression_ratio": 1.609865470852018, "no_caption_prob": 2.318698534509167e-05}, {"id": 594, "seek": 349748, "start": 3517.0, "end": 3517.48, "text": " Oh yeah.", "tokens": [50364, 23211, 3467, 13, 823, 11, 411, 294, 1668, 281, 483, 300, 903, 25796, 2010, 281, 312, 257, 2685, 551, 11, 291, 362, 281, 50808, 50808, 1320, 309, 294, 746, 295, 300, 2010, 11, 457, 291, 434, 406, 11, 291, 434, 8437, 309, 257, 1329, 11, 406, 257, 2136, 13, 51040, 51128, 286, 519, 291, 727, 7263, 360, 309, 365, 257, 27377, 5102, 13, 51276, 51340, 876, 1338, 13, 51364, 51404, 865, 13, 407, 510, 311, 689, 13, 51468, 51468, 14711, 13, 51548, 51548, 583, 291, 2759, 380, 312, 1075, 281, 483, 264, 2519, 1315, 666, 264, 2010, 1315, 13, 51780, 51780], "temperature": 0.0, "avg_logprob": -0.1490797024328732, "compression_ratio": 1.609865470852018, "no_caption_prob": 2.318698534509167e-05}, {"id": 595, "seek": 349748, "start": 3518.28, "end": 3519.56, "text": " Yeah. So here's where.", "tokens": [50364, 23211, 3467, 13, 823, 11, 411, 294, 1668, 281, 483, 300, 903, 25796, 2010, 281, 312, 257, 2685, 551, 11, 291, 362, 281, 50808, 50808, 1320, 309, 294, 746, 295, 300, 2010, 11, 457, 291, 434, 406, 11, 291, 434, 8437, 309, 257, 1329, 11, 406, 257, 2136, 13, 51040, 51128, 286, 519, 291, 727, 7263, 360, 309, 365, 257, 27377, 5102, 13, 51276, 51340, 876, 1338, 13, 51364, 51404, 865, 13, 407, 510, 311, 689, 13, 51468, 51468, 14711, 13, 51548, 51548, 583, 291, 2759, 380, 312, 1075, 281, 483, 264, 2519, 1315, 666, 264, 2010, 1315, 13, 51780, 51780], "temperature": 0.0, "avg_logprob": -0.1490797024328732, "compression_ratio": 1.609865470852018, "no_caption_prob": 2.318698534509167e-05}, {"id": 596, "seek": 349748, "start": 3519.56, "end": 3521.16, "text": " Interesting.", "tokens": [50364, 23211, 3467, 13, 823, 11, 411, 294, 1668, 281, 483, 300, 903, 25796, 2010, 281, 312, 257, 2685, 551, 11, 291, 362, 281, 50808, 50808, 1320, 309, 294, 746, 295, 300, 2010, 11, 457, 291, 434, 406, 11, 291, 434, 8437, 309, 257, 1329, 11, 406, 257, 2136, 13, 51040, 51128, 286, 519, 291, 727, 7263, 360, 309, 365, 257, 27377, 5102, 13, 51276, 51340, 876, 1338, 13, 51364, 51404, 865, 13, 407, 510, 311, 689, 13, 51468, 51468, 14711, 13, 51548, 51548, 583, 291, 2759, 380, 312, 1075, 281, 483, 264, 2519, 1315, 666, 264, 2010, 1315, 13, 51780, 51780], "temperature": 0.0, "avg_logprob": -0.1490797024328732, "compression_ratio": 1.609865470852018, "no_caption_prob": 2.318698534509167e-05}, {"id": 597, "seek": 349748, "start": 3521.16, "end": 3525.8, "text": " But you wouldn't be able to get the field name into the type name.", "tokens": [50364, 23211, 3467, 13, 823, 11, 411, 294, 1668, 281, 483, 300, 903, 25796, 2010, 281, 312, 257, 2685, 551, 11, 291, 362, 281, 50808, 50808, 1320, 309, 294, 746, 295, 300, 2010, 11, 457, 291, 434, 406, 11, 291, 434, 8437, 309, 257, 1329, 11, 406, 257, 2136, 13, 51040, 51128, 286, 519, 291, 727, 7263, 360, 309, 365, 257, 27377, 5102, 13, 51276, 51340, 876, 1338, 13, 51364, 51404, 865, 13, 407, 510, 311, 689, 13, 51468, 51468, 14711, 13, 51548, 51548, 583, 291, 2759, 380, 312, 1075, 281, 483, 264, 2519, 1315, 666, 264, 2010, 1315, 13, 51780, 51780], "temperature": 0.0, "avg_logprob": -0.1490797024328732, "compression_ratio": 1.609865470852018, "no_caption_prob": 2.318698534509167e-05}, {"id": 598, "seek": 352580, "start": 3525.8, "end": 3532.04, "text": " So, and you couldn't, you couldn't. So the thing that I think you'd have to do even on the builder", "tokens": [50364, 407, 11, 293, 291, 2809, 380, 11, 291, 2809, 380, 13, 407, 264, 551, 300, 286, 519, 291, 1116, 362, 281, 360, 754, 322, 264, 27377, 50676, 50676, 5102, 307, 286, 519, 291, 362, 281, 362, 257, 2010, 5458, 11, 597, 307, 4476, 689, 364, 7615, 17387, 337, 50980, 50980, 264, 3467, 13, 407, 437, 341, 576, 914, 11, 293, 341, 307, 983, 7993, 281, 909, 257, 2519, 281, 257, 2136, 11, 51256, 51256, 309, 2067, 380, 445, 257, 2604, 781, 295, 411, 257, 6798, 293, 364, 6114, 13, 467, 390, 767, 286, 362, 281, 584, 411, 51476, 51476, 806, 76, 13, 7610, 11335, 257, 6798, 293, 364, 6114, 13, 440, 1778, 983, 307, 309, 576, 7620, 309, 281, 51736, 51768], "temperature": 0.0, "avg_logprob": -0.13694879485339653, "compression_ratio": 1.830708661417323, "no_caption_prob": 8.013296792341862e-06}, {"id": 599, "seek": 352580, "start": 3532.04, "end": 3538.1200000000003, "text": " pattern is I think you have to have a type hole, which is essentially where an escape hatch for", "tokens": [50364, 407, 11, 293, 291, 2809, 380, 11, 291, 2809, 380, 13, 407, 264, 551, 300, 286, 519, 291, 1116, 362, 281, 360, 754, 322, 264, 27377, 50676, 50676, 5102, 307, 286, 519, 291, 362, 281, 362, 257, 2010, 5458, 11, 597, 307, 4476, 689, 364, 7615, 17387, 337, 50980, 50980, 264, 3467, 13, 407, 437, 341, 576, 914, 11, 293, 341, 307, 983, 7993, 281, 909, 257, 2519, 281, 257, 2136, 11, 51256, 51256, 309, 2067, 380, 445, 257, 2604, 781, 295, 411, 257, 6798, 293, 364, 6114, 13, 467, 390, 767, 286, 362, 281, 584, 411, 51476, 51476, 806, 76, 13, 7610, 11335, 257, 6798, 293, 364, 6114, 13, 440, 1778, 983, 307, 309, 576, 7620, 309, 281, 51736, 51768], "temperature": 0.0, "avg_logprob": -0.13694879485339653, "compression_ratio": 1.830708661417323, "no_caption_prob": 8.013296792341862e-06}, {"id": 600, "seek": 352580, "start": 3538.1200000000003, "end": 3543.6400000000003, "text": " the types. So what this would mean, and this is why originally to add a field to a record,", "tokens": [50364, 407, 11, 293, 291, 2809, 380, 11, 291, 2809, 380, 13, 407, 264, 551, 300, 286, 519, 291, 1116, 362, 281, 360, 754, 322, 264, 27377, 50676, 50676, 5102, 307, 286, 519, 291, 362, 281, 362, 257, 2010, 5458, 11, 597, 307, 4476, 689, 364, 7615, 17387, 337, 50980, 50980, 264, 3467, 13, 407, 437, 341, 576, 914, 11, 293, 341, 307, 983, 7993, 281, 909, 257, 2519, 281, 257, 2136, 11, 51256, 51256, 309, 2067, 380, 445, 257, 2604, 781, 295, 411, 257, 6798, 293, 364, 6114, 13, 467, 390, 767, 286, 362, 281, 584, 411, 51476, 51476, 806, 76, 13, 7610, 11335, 257, 6798, 293, 364, 6114, 13, 440, 1778, 983, 307, 309, 576, 7620, 309, 281, 51736, 51768], "temperature": 0.0, "avg_logprob": -0.13694879485339653, "compression_ratio": 1.830708661417323, "no_caption_prob": 8.013296792341862e-06}, {"id": 601, "seek": 352580, "start": 3543.6400000000003, "end": 3548.04, "text": " it wasn't just a tuple of like a string and an expression. It was actually I have to say like", "tokens": [50364, 407, 11, 293, 291, 2809, 380, 11, 291, 2809, 380, 13, 407, 264, 551, 300, 286, 519, 291, 1116, 362, 281, 360, 754, 322, 264, 27377, 50676, 50676, 5102, 307, 286, 519, 291, 362, 281, 362, 257, 2010, 5458, 11, 597, 307, 4476, 689, 364, 7615, 17387, 337, 50980, 50980, 264, 3467, 13, 407, 437, 341, 576, 914, 11, 293, 341, 307, 983, 7993, 281, 909, 257, 2519, 281, 257, 2136, 11, 51256, 51256, 309, 2067, 380, 445, 257, 2604, 781, 295, 411, 257, 6798, 293, 364, 6114, 13, 467, 390, 767, 286, 362, 281, 584, 411, 51476, 51476, 806, 76, 13, 7610, 11335, 257, 6798, 293, 364, 6114, 13, 440, 1778, 983, 307, 309, 576, 7620, 309, 281, 51736, 51768], "temperature": 0.0, "avg_logprob": -0.13694879485339653, "compression_ratio": 1.830708661417323, "no_caption_prob": 8.013296792341862e-06}, {"id": 602, "seek": 352580, "start": 3548.04, "end": 3553.2400000000002, "text": " elm.field passes a string and an expression. The reason why is it would convert it to", "tokens": [50364, 407, 11, 293, 291, 2809, 380, 11, 291, 2809, 380, 13, 407, 264, 551, 300, 286, 519, 291, 1116, 362, 281, 360, 754, 322, 264, 27377, 50676, 50676, 5102, 307, 286, 519, 291, 362, 281, 362, 257, 2010, 5458, 11, 597, 307, 4476, 689, 364, 7615, 17387, 337, 50980, 50980, 264, 3467, 13, 407, 437, 341, 576, 914, 11, 293, 341, 307, 983, 7993, 281, 909, 257, 2519, 281, 257, 2136, 11, 51256, 51256, 309, 2067, 380, 445, 257, 2604, 781, 295, 411, 257, 6798, 293, 364, 6114, 13, 467, 390, 767, 286, 362, 281, 584, 411, 51476, 51476, 806, 76, 13, 7610, 11335, 257, 6798, 293, 364, 6114, 13, 440, 1778, 983, 307, 309, 576, 7620, 309, 281, 51736, 51768], "temperature": 0.0, "avg_logprob": -0.13694879485339653, "compression_ratio": 1.830708661417323, "no_caption_prob": 8.013296792341862e-06}, {"id": 603, "seek": 355324, "start": 3553.24, "end": 3559.72, "text": " a special expression, which is expression field. And then you could have a list of those.", "tokens": [50364, 257, 2121, 6114, 11, 597, 307, 6114, 2519, 13, 400, 550, 291, 727, 362, 257, 1329, 295, 729, 13, 50688, 50716, 400, 291, 727, 767, 652, 309, 589, 484, 570, 291, 434, 1936, 1566, 11, 286, 478, 516, 281, 3507, 1314, 50996, 50996, 264, 2010, 1589, 510, 13, 400, 291, 434, 516, 281, 718, 385, 360, 1340, 13, 286, 519, 291, 1116, 362, 281, 360, 264, 51264, 51264, 912, 551, 365, 257, 27377, 5102, 13, 51332, 51332, 1779, 13, 1436, 5969, 291, 10833, 257, 2445, 337, 633, 1944, 2519, 1315, 11, 291, 2809, 380, 483, 51700, 51700], "temperature": 0.0, "avg_logprob": -0.16380911162405304, "compression_ratio": 1.6747967479674797, "no_caption_prob": 3.071578248636797e-05}, {"id": 604, "seek": 355324, "start": 3560.2799999999997, "end": 3565.8799999999997, "text": " And you could actually make it work out because you're basically saying, I'm going to throw away", "tokens": [50364, 257, 2121, 6114, 11, 597, 307, 6114, 2519, 13, 400, 550, 291, 727, 362, 257, 1329, 295, 729, 13, 50688, 50716, 400, 291, 727, 767, 652, 309, 589, 484, 570, 291, 434, 1936, 1566, 11, 286, 478, 516, 281, 3507, 1314, 50996, 50996, 264, 2010, 1589, 510, 13, 400, 291, 434, 516, 281, 718, 385, 360, 1340, 13, 286, 519, 291, 1116, 362, 281, 360, 264, 51264, 51264, 912, 551, 365, 257, 27377, 5102, 13, 51332, 51332, 1779, 13, 1436, 5969, 291, 10833, 257, 2445, 337, 633, 1944, 2519, 1315, 11, 291, 2809, 380, 483, 51700, 51700], "temperature": 0.0, "avg_logprob": -0.16380911162405304, "compression_ratio": 1.6747967479674797, "no_caption_prob": 3.071578248636797e-05}, {"id": 605, "seek": 355324, "start": 3565.8799999999997, "end": 3571.24, "text": " the type information here. And you're going to let me do anything. I think you'd have to do the", "tokens": [50364, 257, 2121, 6114, 11, 597, 307, 6114, 2519, 13, 400, 550, 291, 727, 362, 257, 1329, 295, 729, 13, 50688, 50716, 400, 291, 727, 767, 652, 309, 589, 484, 570, 291, 434, 1936, 1566, 11, 286, 478, 516, 281, 3507, 1314, 50996, 50996, 264, 2010, 1589, 510, 13, 400, 291, 434, 516, 281, 718, 385, 360, 1340, 13, 286, 519, 291, 1116, 362, 281, 360, 264, 51264, 51264, 912, 551, 365, 257, 27377, 5102, 13, 51332, 51332, 1779, 13, 1436, 5969, 291, 10833, 257, 2445, 337, 633, 1944, 2519, 1315, 11, 291, 2809, 380, 483, 51700, 51700], "temperature": 0.0, "avg_logprob": -0.16380911162405304, "compression_ratio": 1.6747967479674797, "no_caption_prob": 3.071578248636797e-05}, {"id": 606, "seek": 355324, "start": 3571.24, "end": 3572.6, "text": " same thing with a builder pattern.", "tokens": [50364, 257, 2121, 6114, 11, 597, 307, 6114, 2519, 13, 400, 550, 291, 727, 362, 257, 1329, 295, 729, 13, 50688, 50716, 400, 291, 727, 767, 652, 309, 589, 484, 570, 291, 434, 1936, 1566, 11, 286, 478, 516, 281, 3507, 1314, 50996, 50996, 264, 2010, 1589, 510, 13, 400, 291, 434, 516, 281, 718, 385, 360, 1340, 13, 286, 519, 291, 1116, 362, 281, 360, 264, 51264, 51264, 912, 551, 365, 257, 27377, 5102, 13, 51332, 51332, 1779, 13, 1436, 5969, 291, 10833, 257, 2445, 337, 633, 1944, 2519, 1315, 11, 291, 2809, 380, 483, 51700, 51700], "temperature": 0.0, "avg_logprob": -0.16380911162405304, "compression_ratio": 1.6747967479674797, "no_caption_prob": 3.071578248636797e-05}, {"id": 607, "seek": 355324, "start": 3572.6, "end": 3579.9599999999996, "text": " Right. Because unless you generated a function for every possible field name, you couldn't get", "tokens": [50364, 257, 2121, 6114, 11, 597, 307, 6114, 2519, 13, 400, 550, 291, 727, 362, 257, 1329, 295, 729, 13, 50688, 50716, 400, 291, 727, 767, 652, 309, 589, 484, 570, 291, 434, 1936, 1566, 11, 286, 478, 516, 281, 3507, 1314, 50996, 50996, 264, 2010, 1589, 510, 13, 400, 291, 434, 516, 281, 718, 385, 360, 1340, 13, 286, 519, 291, 1116, 362, 281, 360, 264, 51264, 51264, 912, 551, 365, 257, 27377, 5102, 13, 51332, 51332, 1779, 13, 1436, 5969, 291, 10833, 257, 2445, 337, 633, 1944, 2519, 1315, 11, 291, 2809, 380, 483, 51700, 51700], "temperature": 0.0, "avg_logprob": -0.16380911162405304, "compression_ratio": 1.6747967479674797, "no_caption_prob": 3.071578248636797e-05}, {"id": 608, "seek": 357996, "start": 3579.96, "end": 3583.64, "text": " the field names in that type variable.", "tokens": [50364, 264, 2519, 5288, 294, 300, 2010, 7006, 13, 50548, 50548, 663, 311, 558, 13, 400, 370, 309, 311, 411, 11, 1392, 11, 370, 286, 390, 411, 11, 1392, 11, 321, 362, 341, 11, 321, 362, 364, 3109, 13, 50820, 50820, 492, 393, 360, 264, 2519, 11, 321, 393, 362, 257, 707, 2010, 5458, 11, 300, 311, 2489, 13, 467, 311, 406, 257, 955, 2028, 13, 467, 311, 411, 11, 51012, 51012, 797, 11, 309, 820, 312, 544, 3273, 293, 7263, 411, 733, 295, 42735, 21401, 420, 2035, 13, 400, 550, 286, 5334, 51364, 51364, 456, 390, 1071, 551, 300, 1936, 286, 390, 445, 411, 11, 731, 11, 21892, 11, 286, 500, 380, 519, 300, 321, 393, 360, 51732, 51732], "temperature": 0.0, "avg_logprob": -0.17249328045805623, "compression_ratio": 1.716, "no_caption_prob": 7.527801244577859e-06}, {"id": 609, "seek": 357996, "start": 3583.64, "end": 3589.08, "text": " That's right. And so it's like, okay, so I was like, okay, we have this, we have an approach.", "tokens": [50364, 264, 2519, 5288, 294, 300, 2010, 7006, 13, 50548, 50548, 663, 311, 558, 13, 400, 370, 309, 311, 411, 11, 1392, 11, 370, 286, 390, 411, 11, 1392, 11, 321, 362, 341, 11, 321, 362, 364, 3109, 13, 50820, 50820, 492, 393, 360, 264, 2519, 11, 321, 393, 362, 257, 707, 2010, 5458, 11, 300, 311, 2489, 13, 467, 311, 406, 257, 955, 2028, 13, 467, 311, 411, 11, 51012, 51012, 797, 11, 309, 820, 312, 544, 3273, 293, 7263, 411, 733, 295, 42735, 21401, 420, 2035, 13, 400, 550, 286, 5334, 51364, 51364, 456, 390, 1071, 551, 300, 1936, 286, 390, 445, 411, 11, 731, 11, 21892, 11, 286, 500, 380, 519, 300, 321, 393, 360, 51732, 51732], "temperature": 0.0, "avg_logprob": -0.17249328045805623, "compression_ratio": 1.716, "no_caption_prob": 7.527801244577859e-06}, {"id": 610, "seek": 357996, "start": 3589.08, "end": 3592.92, "text": " We can do the field, we can have a little type hole, that's fine. It's not a big deal. It's like,", "tokens": [50364, 264, 2519, 5288, 294, 300, 2010, 7006, 13, 50548, 50548, 663, 311, 558, 13, 400, 370, 309, 311, 411, 11, 1392, 11, 370, 286, 390, 411, 11, 1392, 11, 321, 362, 341, 11, 321, 362, 364, 3109, 13, 50820, 50820, 492, 393, 360, 264, 2519, 11, 321, 393, 362, 257, 707, 2010, 5458, 11, 300, 311, 2489, 13, 467, 311, 406, 257, 955, 2028, 13, 467, 311, 411, 11, 51012, 51012, 797, 11, 309, 820, 312, 544, 3273, 293, 7263, 411, 733, 295, 42735, 21401, 420, 2035, 13, 400, 550, 286, 5334, 51364, 51364, 456, 390, 1071, 551, 300, 1936, 286, 390, 445, 411, 11, 731, 11, 21892, 11, 286, 500, 380, 519, 300, 321, 393, 360, 51732, 51732], "temperature": 0.0, "avg_logprob": -0.17249328045805623, "compression_ratio": 1.716, "no_caption_prob": 7.527801244577859e-06}, {"id": 611, "seek": 357996, "start": 3592.92, "end": 3599.96, "text": " again, it should be more safe and potentially like kind of ergonomic or whatever. And then I realized", "tokens": [50364, 264, 2519, 5288, 294, 300, 2010, 7006, 13, 50548, 50548, 663, 311, 558, 13, 400, 370, 309, 311, 411, 11, 1392, 11, 370, 286, 390, 411, 11, 1392, 11, 321, 362, 341, 11, 321, 362, 364, 3109, 13, 50820, 50820, 492, 393, 360, 264, 2519, 11, 321, 393, 362, 257, 707, 2010, 5458, 11, 300, 311, 2489, 13, 467, 311, 406, 257, 955, 2028, 13, 467, 311, 411, 11, 51012, 51012, 797, 11, 309, 820, 312, 544, 3273, 293, 7263, 411, 733, 295, 42735, 21401, 420, 2035, 13, 400, 550, 286, 5334, 51364, 51364, 456, 390, 1071, 551, 300, 1936, 286, 390, 445, 411, 11, 731, 11, 21892, 11, 286, 500, 380, 519, 300, 321, 393, 360, 51732, 51732], "temperature": 0.0, "avg_logprob": -0.17249328045805623, "compression_ratio": 1.716, "no_caption_prob": 7.527801244577859e-06}, {"id": 612, "seek": 357996, "start": 3599.96, "end": 3607.32, "text": " there was another thing that basically I was just like, well, dang, I don't think that we can do", "tokens": [50364, 264, 2519, 5288, 294, 300, 2010, 7006, 13, 50548, 50548, 663, 311, 558, 13, 400, 370, 309, 311, 411, 11, 1392, 11, 370, 286, 390, 411, 11, 1392, 11, 321, 362, 341, 11, 321, 362, 364, 3109, 13, 50820, 50820, 492, 393, 360, 264, 2519, 11, 321, 393, 362, 257, 707, 2010, 5458, 11, 300, 311, 2489, 13, 467, 311, 406, 257, 955, 2028, 13, 467, 311, 411, 11, 51012, 51012, 797, 11, 309, 820, 312, 544, 3273, 293, 7263, 411, 733, 295, 42735, 21401, 420, 2035, 13, 400, 550, 286, 5334, 51364, 51364, 456, 390, 1071, 551, 300, 1936, 286, 390, 445, 411, 11, 731, 11, 21892, 11, 286, 500, 380, 519, 300, 321, 393, 360, 51732, 51732], "temperature": 0.0, "avg_logprob": -0.17249328045805623, "compression_ratio": 1.716, "no_caption_prob": 7.527801244577859e-06}, {"id": 613, "seek": 360732, "start": 3607.32, "end": 3613.56, "text": " this, which is in the most abstract case, you're not going to know what types you're generating.", "tokens": [50364, 341, 11, 597, 307, 294, 264, 881, 12649, 1389, 11, 291, 434, 406, 516, 281, 458, 437, 3467, 291, 434, 17746, 13, 50676, 50676, 1743, 498, 291, 528, 281, 8460, 257, 2158, 295, 257, 2010, 300, 291, 500, 380, 458, 295, 1826, 5125, 565, 11, 50924, 50924, 721, 483, 3657, 13, 50984, 50984, 1144, 291, 362, 5110, 337, 300, 30, 51124, 51124, 407, 411, 11, 718, 311, 584, 286, 528, 281, 8460, 411, 257, 11, 689, 309, 311, 411, 11, 286, 500, 380, 458, 264, 3909, 295, 264, 2010, 51420, 51420, 293, 264, 1315, 295, 264, 2010, 420, 1340, 13, 1743, 370, 754, 382, 309, 1177, 380, 362, 281, 312, 588, 6179, 11, 51652, 51652], "temperature": 0.0, "avg_logprob": -0.17696576240735176, "compression_ratio": 1.7408906882591093, "no_caption_prob": 1.0451474736328237e-05}, {"id": 614, "seek": 360732, "start": 3613.56, "end": 3618.52, "text": " Like if you want to generate a value of a type that you don't know of until generation time,", "tokens": [50364, 341, 11, 597, 307, 294, 264, 881, 12649, 1389, 11, 291, 434, 406, 516, 281, 458, 437, 3467, 291, 434, 17746, 13, 50676, 50676, 1743, 498, 291, 528, 281, 8460, 257, 2158, 295, 257, 2010, 300, 291, 500, 380, 458, 295, 1826, 5125, 565, 11, 50924, 50924, 721, 483, 3657, 13, 50984, 50984, 1144, 291, 362, 5110, 337, 300, 30, 51124, 51124, 407, 411, 11, 718, 311, 584, 286, 528, 281, 8460, 411, 257, 11, 689, 309, 311, 411, 11, 286, 500, 380, 458, 264, 3909, 295, 264, 2010, 51420, 51420, 293, 264, 1315, 295, 264, 2010, 420, 1340, 13, 1743, 370, 754, 382, 309, 1177, 380, 362, 281, 312, 588, 6179, 11, 51652, 51652], "temperature": 0.0, "avg_logprob": -0.17696576240735176, "compression_ratio": 1.7408906882591093, "no_caption_prob": 1.0451474736328237e-05}, {"id": 615, "seek": 360732, "start": 3618.52, "end": 3619.7200000000003, "text": " things get weird.", "tokens": [50364, 341, 11, 597, 307, 294, 264, 881, 12649, 1389, 11, 291, 434, 406, 516, 281, 458, 437, 3467, 291, 434, 17746, 13, 50676, 50676, 1743, 498, 291, 528, 281, 8460, 257, 2158, 295, 257, 2010, 300, 291, 500, 380, 458, 295, 1826, 5125, 565, 11, 50924, 50924, 721, 483, 3657, 13, 50984, 50984, 1144, 291, 362, 5110, 337, 300, 30, 51124, 51124, 407, 411, 11, 718, 311, 584, 286, 528, 281, 8460, 411, 257, 11, 689, 309, 311, 411, 11, 286, 500, 380, 458, 264, 3909, 295, 264, 2010, 51420, 51420, 293, 264, 1315, 295, 264, 2010, 420, 1340, 13, 1743, 370, 754, 382, 309, 1177, 380, 362, 281, 312, 588, 6179, 11, 51652, 51652], "temperature": 0.0, "avg_logprob": -0.17696576240735176, "compression_ratio": 1.7408906882591093, "no_caption_prob": 1.0451474736328237e-05}, {"id": 616, "seek": 360732, "start": 3619.7200000000003, "end": 3622.52, "text": " Do you have examples for that?", "tokens": [50364, 341, 11, 597, 307, 294, 264, 881, 12649, 1389, 11, 291, 434, 406, 516, 281, 458, 437, 3467, 291, 434, 17746, 13, 50676, 50676, 1743, 498, 291, 528, 281, 8460, 257, 2158, 295, 257, 2010, 300, 291, 500, 380, 458, 295, 1826, 5125, 565, 11, 50924, 50924, 721, 483, 3657, 13, 50984, 50984, 1144, 291, 362, 5110, 337, 300, 30, 51124, 51124, 407, 411, 11, 718, 311, 584, 286, 528, 281, 8460, 411, 257, 11, 689, 309, 311, 411, 11, 286, 500, 380, 458, 264, 3909, 295, 264, 2010, 51420, 51420, 293, 264, 1315, 295, 264, 2010, 420, 1340, 13, 1743, 370, 754, 382, 309, 1177, 380, 362, 281, 312, 588, 6179, 11, 51652, 51652], "temperature": 0.0, "avg_logprob": -0.17696576240735176, "compression_ratio": 1.7408906882591093, "no_caption_prob": 1.0451474736328237e-05}, {"id": 617, "seek": 360732, "start": 3622.52, "end": 3628.44, "text": " So like, let's say I want to generate like a, where it's like, I don't know the shape of the type", "tokens": [50364, 341, 11, 597, 307, 294, 264, 881, 12649, 1389, 11, 291, 434, 406, 516, 281, 458, 437, 3467, 291, 434, 17746, 13, 50676, 50676, 1743, 498, 291, 528, 281, 8460, 257, 2158, 295, 257, 2010, 300, 291, 500, 380, 458, 295, 1826, 5125, 565, 11, 50924, 50924, 721, 483, 3657, 13, 50984, 50984, 1144, 291, 362, 5110, 337, 300, 30, 51124, 51124, 407, 411, 11, 718, 311, 584, 286, 528, 281, 8460, 411, 257, 11, 689, 309, 311, 411, 11, 286, 500, 380, 458, 264, 3909, 295, 264, 2010, 51420, 51420, 293, 264, 1315, 295, 264, 2010, 420, 1340, 13, 1743, 370, 754, 382, 309, 1177, 380, 362, 281, 312, 588, 6179, 11, 51652, 51652], "temperature": 0.0, "avg_logprob": -0.17696576240735176, "compression_ratio": 1.7408906882591093, "no_caption_prob": 1.0451474736328237e-05}, {"id": 618, "seek": 360732, "start": 3628.44, "end": 3633.0800000000004, "text": " and the name of the type or anything. Like so even as it doesn't have to be very complicated,", "tokens": [50364, 341, 11, 597, 307, 294, 264, 881, 12649, 1389, 11, 291, 434, 406, 516, 281, 458, 437, 3467, 291, 434, 17746, 13, 50676, 50676, 1743, 498, 291, 528, 281, 8460, 257, 2158, 295, 257, 2010, 300, 291, 500, 380, 458, 295, 1826, 5125, 565, 11, 50924, 50924, 721, 483, 3657, 13, 50984, 50984, 1144, 291, 362, 5110, 337, 300, 30, 51124, 51124, 407, 411, 11, 718, 311, 584, 286, 528, 281, 8460, 411, 257, 11, 689, 309, 311, 411, 11, 286, 500, 380, 458, 264, 3909, 295, 264, 2010, 51420, 51420, 293, 264, 1315, 295, 264, 2010, 420, 1340, 13, 1743, 370, 754, 382, 309, 1177, 380, 362, 281, 312, 588, 6179, 11, 51652, 51652], "temperature": 0.0, "avg_logprob": -0.17696576240735176, "compression_ratio": 1.7408906882591093, "no_caption_prob": 1.0451474736328237e-05}, {"id": 619, "seek": 363308, "start": 3633.08, "end": 3638.92, "text": " it could be like generating a message type or something. I would all of a sudden have to sort of", "tokens": [50364, 309, 727, 312, 411, 17746, 257, 3636, 2010, 420, 746, 13, 286, 576, 439, 295, 257, 3990, 362, 281, 1333, 295, 50656, 50656, 722, 281, 11, 437, 286, 576, 362, 281, 360, 307, 286, 576, 362, 281, 722, 281, 8013, 11, 286, 1116, 362, 281, 1884, 257, 903, 25796, 50956, 50956, 2158, 11, 411, 11, 1392, 11, 510, 11, 411, 286, 478, 17746, 257, 3636, 411, 2010, 13, 400, 322, 264, 5125, 3089, 11, 51356, 51356, 286, 478, 516, 281, 1884, 257, 2010, 3636, 2681, 11, 411, 2010, 10833, 3636, 6915, 10833, 3636, 13, 51604, 51604, 400, 286, 478, 516, 281, 20266, 300, 294, 382, 264, 903, 25796, 551, 337, 510, 370, 300, 309, 11, 457, 550, 51812, 51812], "temperature": 0.0, "avg_logprob": -0.17538160529018434, "compression_ratio": 2.099099099099099, "no_caption_prob": 4.9084068450611085e-05}, {"id": 620, "seek": 363308, "start": 3638.92, "end": 3644.92, "text": " start to, what I would have to do is I would have to start to mirror, I'd have to create a phantom", "tokens": [50364, 309, 727, 312, 411, 17746, 257, 3636, 2010, 420, 746, 13, 286, 576, 439, 295, 257, 3990, 362, 281, 1333, 295, 50656, 50656, 722, 281, 11, 437, 286, 576, 362, 281, 360, 307, 286, 576, 362, 281, 722, 281, 8013, 11, 286, 1116, 362, 281, 1884, 257, 903, 25796, 50956, 50956, 2158, 11, 411, 11, 1392, 11, 510, 11, 411, 286, 478, 17746, 257, 3636, 411, 2010, 13, 400, 322, 264, 5125, 3089, 11, 51356, 51356, 286, 478, 516, 281, 1884, 257, 2010, 3636, 2681, 11, 411, 2010, 10833, 3636, 6915, 10833, 3636, 13, 51604, 51604, 400, 286, 478, 516, 281, 20266, 300, 294, 382, 264, 903, 25796, 551, 337, 510, 370, 300, 309, 11, 457, 550, 51812, 51812], "temperature": 0.0, "avg_logprob": -0.17538160529018434, "compression_ratio": 2.099099099099099, "no_caption_prob": 4.9084068450611085e-05}, {"id": 621, "seek": 363308, "start": 3644.92, "end": 3652.92, "text": " value, like, okay, here, like I'm generating a message like type. And on the generation code,", "tokens": [50364, 309, 727, 312, 411, 17746, 257, 3636, 2010, 420, 746, 13, 286, 576, 439, 295, 257, 3990, 362, 281, 1333, 295, 50656, 50656, 722, 281, 11, 437, 286, 576, 362, 281, 360, 307, 286, 576, 362, 281, 722, 281, 8013, 11, 286, 1116, 362, 281, 1884, 257, 903, 25796, 50956, 50956, 2158, 11, 411, 11, 1392, 11, 510, 11, 411, 286, 478, 17746, 257, 3636, 411, 2010, 13, 400, 322, 264, 5125, 3089, 11, 51356, 51356, 286, 478, 516, 281, 1884, 257, 2010, 3636, 2681, 11, 411, 2010, 10833, 3636, 6915, 10833, 3636, 13, 51604, 51604, 400, 286, 478, 516, 281, 20266, 300, 294, 382, 264, 903, 25796, 551, 337, 510, 370, 300, 309, 11, 457, 550, 51812, 51812], "temperature": 0.0, "avg_logprob": -0.17538160529018434, "compression_ratio": 2.099099099099099, "no_caption_prob": 4.9084068450611085e-05}, {"id": 622, "seek": 363308, "start": 3652.92, "end": 3657.88, "text": " I'm going to create a type message equal, like type generated message equals generated message.", "tokens": [50364, 309, 727, 312, 411, 17746, 257, 3636, 2010, 420, 746, 13, 286, 576, 439, 295, 257, 3990, 362, 281, 1333, 295, 50656, 50656, 722, 281, 11, 437, 286, 576, 362, 281, 360, 307, 286, 576, 362, 281, 722, 281, 8013, 11, 286, 1116, 362, 281, 1884, 257, 903, 25796, 50956, 50956, 2158, 11, 411, 11, 1392, 11, 510, 11, 411, 286, 478, 17746, 257, 3636, 411, 2010, 13, 400, 322, 264, 5125, 3089, 11, 51356, 51356, 286, 478, 516, 281, 1884, 257, 2010, 3636, 2681, 11, 411, 2010, 10833, 3636, 6915, 10833, 3636, 13, 51604, 51604, 400, 286, 478, 516, 281, 20266, 300, 294, 382, 264, 903, 25796, 551, 337, 510, 370, 300, 309, 11, 457, 550, 51812, 51812], "temperature": 0.0, "avg_logprob": -0.17538160529018434, "compression_ratio": 2.099099099099099, "no_caption_prob": 4.9084068450611085e-05}, {"id": 623, "seek": 363308, "start": 3657.88, "end": 3662.04, "text": " And I'm going to stub that in as the phantom thing for here so that it, but then", "tokens": [50364, 309, 727, 312, 411, 17746, 257, 3636, 2010, 420, 746, 13, 286, 576, 439, 295, 257, 3990, 362, 281, 1333, 295, 50656, 50656, 722, 281, 11, 437, 286, 576, 362, 281, 360, 307, 286, 576, 362, 281, 722, 281, 8013, 11, 286, 1116, 362, 281, 1884, 257, 903, 25796, 50956, 50956, 2158, 11, 411, 11, 1392, 11, 510, 11, 411, 286, 478, 17746, 257, 3636, 411, 2010, 13, 400, 322, 264, 5125, 3089, 11, 51356, 51356, 286, 478, 516, 281, 1884, 257, 2010, 3636, 2681, 11, 411, 2010, 10833, 3636, 6915, 10833, 3636, 13, 51604, 51604, 400, 286, 478, 516, 281, 20266, 300, 294, 382, 264, 903, 25796, 551, 337, 510, 370, 300, 309, 11, 457, 550, 51812, 51812], "temperature": 0.0, "avg_logprob": -0.17538160529018434, "compression_ratio": 2.099099099099099, "no_caption_prob": 4.9084068450611085e-05}, {"id": 624, "seek": 366204, "start": 3662.04, "end": 3668.68, "text": " it just leads down this area where that level of abstraction, you have to start mirroring stuff", "tokens": [50364, 309, 445, 6689, 760, 341, 1859, 689, 300, 1496, 295, 37765, 11, 291, 362, 281, 722, 8013, 278, 1507, 50696, 50696, 300, 291, 434, 516, 281, 312, 17746, 13, 400, 286, 519, 6284, 291, 393, 380, 570, 291, 500, 380, 458, 437, 50964, 50964, 291, 434, 516, 281, 312, 17746, 1826, 291, 8460, 309, 11, 597, 1355, 291, 576, 362, 281, 767, 1310, 51188, 51188, 8460, 729, 3467, 700, 13, 400, 550, 309, 311, 411, 11, 689, 11, 411, 11, 498, 291, 434, 2731, 11, 286, 478, 2138, 2731, 13, 51548, 51600, 1743, 498, 291, 434, 411, 1419, 411, 11, 731, 11, 286, 478, 406, 754, 3480, 291, 13, 467, 311, 411, 11, 869, 11, 51780, 51780], "temperature": 0.0, "avg_logprob": -0.1640145277776638, "compression_ratio": 1.8404669260700388, "no_caption_prob": 4.069176793564111e-05}, {"id": 625, "seek": 366204, "start": 3668.68, "end": 3674.04, "text": " that you're going to be generating. And I think ultimately you can't because you don't know what", "tokens": [50364, 309, 445, 6689, 760, 341, 1859, 689, 300, 1496, 295, 37765, 11, 291, 362, 281, 722, 8013, 278, 1507, 50696, 50696, 300, 291, 434, 516, 281, 312, 17746, 13, 400, 286, 519, 6284, 291, 393, 380, 570, 291, 500, 380, 458, 437, 50964, 50964, 291, 434, 516, 281, 312, 17746, 1826, 291, 8460, 309, 11, 597, 1355, 291, 576, 362, 281, 767, 1310, 51188, 51188, 8460, 729, 3467, 700, 13, 400, 550, 309, 311, 411, 11, 689, 11, 411, 11, 498, 291, 434, 2731, 11, 286, 478, 2138, 2731, 13, 51548, 51600, 1743, 498, 291, 434, 411, 1419, 411, 11, 731, 11, 286, 478, 406, 754, 3480, 291, 13, 467, 311, 411, 11, 869, 11, 51780, 51780], "temperature": 0.0, "avg_logprob": -0.1640145277776638, "compression_ratio": 1.8404669260700388, "no_caption_prob": 4.069176793564111e-05}, {"id": 626, "seek": 366204, "start": 3674.04, "end": 3678.52, "text": " you're going to be generating until you generate it, which means you would have to actually maybe", "tokens": [50364, 309, 445, 6689, 760, 341, 1859, 689, 300, 1496, 295, 37765, 11, 291, 362, 281, 722, 8013, 278, 1507, 50696, 50696, 300, 291, 434, 516, 281, 312, 17746, 13, 400, 286, 519, 6284, 291, 393, 380, 570, 291, 500, 380, 458, 437, 50964, 50964, 291, 434, 516, 281, 312, 17746, 1826, 291, 8460, 309, 11, 597, 1355, 291, 576, 362, 281, 767, 1310, 51188, 51188, 8460, 729, 3467, 700, 13, 400, 550, 309, 311, 411, 11, 689, 11, 411, 11, 498, 291, 434, 2731, 11, 286, 478, 2138, 2731, 13, 51548, 51600, 1743, 498, 291, 434, 411, 1419, 411, 11, 731, 11, 286, 478, 406, 754, 3480, 291, 13, 467, 311, 411, 11, 869, 11, 51780, 51780], "temperature": 0.0, "avg_logprob": -0.1640145277776638, "compression_ratio": 1.8404669260700388, "no_caption_prob": 4.069176793564111e-05}, {"id": 627, "seek": 366204, "start": 3678.52, "end": 3685.72, "text": " generate those types first. And then it's like, where, like, if you're lost, I'm definitely lost.", "tokens": [50364, 309, 445, 6689, 760, 341, 1859, 689, 300, 1496, 295, 37765, 11, 291, 362, 281, 722, 8013, 278, 1507, 50696, 50696, 300, 291, 434, 516, 281, 312, 17746, 13, 400, 286, 519, 6284, 291, 393, 380, 570, 291, 500, 380, 458, 437, 50964, 50964, 291, 434, 516, 281, 312, 17746, 1826, 291, 8460, 309, 11, 597, 1355, 291, 576, 362, 281, 767, 1310, 51188, 51188, 8460, 729, 3467, 700, 13, 400, 550, 309, 311, 411, 11, 689, 11, 411, 11, 498, 291, 434, 2731, 11, 286, 478, 2138, 2731, 13, 51548, 51600, 1743, 498, 291, 434, 411, 1419, 411, 11, 731, 11, 286, 478, 406, 754, 3480, 291, 13, 467, 311, 411, 11, 869, 11, 51780, 51780], "temperature": 0.0, "avg_logprob": -0.1640145277776638, "compression_ratio": 1.8404669260700388, "no_caption_prob": 4.069176793564111e-05}, {"id": 628, "seek": 366204, "start": 3686.7599999999998, "end": 3690.36, "text": " Like if you're like having like, well, I'm not even following you. It's like, great,", "tokens": [50364, 309, 445, 6689, 760, 341, 1859, 689, 300, 1496, 295, 37765, 11, 291, 362, 281, 722, 8013, 278, 1507, 50696, 50696, 300, 291, 434, 516, 281, 312, 17746, 13, 400, 286, 519, 6284, 291, 393, 380, 570, 291, 500, 380, 458, 437, 50964, 50964, 291, 434, 516, 281, 312, 17746, 1826, 291, 8460, 309, 11, 597, 1355, 291, 576, 362, 281, 767, 1310, 51188, 51188, 8460, 729, 3467, 700, 13, 400, 550, 309, 311, 411, 11, 689, 11, 411, 11, 498, 291, 434, 2731, 11, 286, 478, 2138, 2731, 13, 51548, 51600, 1743, 498, 291, 434, 411, 1419, 411, 11, 731, 11, 286, 478, 406, 754, 3480, 291, 13, 467, 311, 411, 11, 869, 11, 51780, 51780], "temperature": 0.0, "avg_logprob": -0.1640145277776638, "compression_ratio": 1.8404669260700388, "no_caption_prob": 4.069176793564111e-05}, {"id": 629, "seek": 369036, "start": 3690.36, "end": 3699.96, "text": " then we're on the same page. And so then I'm like, oh, but you know, ultimately, and this is where I", "tokens": [50364, 550, 321, 434, 322, 264, 912, 3028, 13, 400, 370, 550, 286, 478, 411, 11, 1954, 11, 457, 291, 458, 11, 6284, 11, 293, 341, 307, 689, 286, 50844, 50844, 576, 411, 11, 797, 11, 498, 321, 645, 281, 10173, 264, 1192, 11, 1192, 1622, 551, 11, 393, 321, 13982, 4514, 337, 19283, 30, 51252, 51264, 400, 412, 341, 935, 11, 309, 1409, 281, 1813, 1850, 281, 385, 300, 300, 390, 257, 7283, 886, 1400, 293, 300, 456, 51528, 51528, 815, 312, 3956, 337, 512, 4514, 11, 457, 321, 576, 976, 493, 512, 5109, 8477, 13, 400, 321, 576, 611, 51824, 51824], "temperature": 0.0, "avg_logprob": -0.15486946472754845, "compression_ratio": 1.6512605042016806, "no_caption_prob": 4.198169335722923e-05}, {"id": 630, "seek": 369036, "start": 3699.96, "end": 3708.1200000000003, "text": " would like, again, if we were to nail the top, top line thing, can we leverage safety for convenience?", "tokens": [50364, 550, 321, 434, 322, 264, 912, 3028, 13, 400, 370, 550, 286, 478, 411, 11, 1954, 11, 457, 291, 458, 11, 6284, 11, 293, 341, 307, 689, 286, 50844, 50844, 576, 411, 11, 797, 11, 498, 321, 645, 281, 10173, 264, 1192, 11, 1192, 1622, 551, 11, 393, 321, 13982, 4514, 337, 19283, 30, 51252, 51264, 400, 412, 341, 935, 11, 309, 1409, 281, 1813, 1850, 281, 385, 300, 300, 390, 257, 7283, 886, 1400, 293, 300, 456, 51528, 51528, 815, 312, 3956, 337, 512, 4514, 11, 457, 321, 576, 976, 493, 512, 5109, 8477, 13, 400, 321, 576, 611, 51824, 51824], "temperature": 0.0, "avg_logprob": -0.15486946472754845, "compression_ratio": 1.6512605042016806, "no_caption_prob": 4.198169335722923e-05}, {"id": 631, "seek": 369036, "start": 3708.36, "end": 3713.6400000000003, "text": " And at this point, it started to become clear to me that that was a bridge too far and that there", "tokens": [50364, 550, 321, 434, 322, 264, 912, 3028, 13, 400, 370, 550, 286, 478, 411, 11, 1954, 11, 457, 291, 458, 11, 6284, 11, 293, 341, 307, 689, 286, 50844, 50844, 576, 411, 11, 797, 11, 498, 321, 645, 281, 10173, 264, 1192, 11, 1192, 1622, 551, 11, 393, 321, 13982, 4514, 337, 19283, 30, 51252, 51264, 400, 412, 341, 935, 11, 309, 1409, 281, 1813, 1850, 281, 385, 300, 300, 390, 257, 7283, 886, 1400, 293, 300, 456, 51528, 51528, 815, 312, 3956, 337, 512, 4514, 11, 457, 321, 576, 976, 493, 512, 5109, 8477, 13, 400, 321, 576, 611, 51824, 51824], "temperature": 0.0, "avg_logprob": -0.15486946472754845, "compression_ratio": 1.6512605042016806, "no_caption_prob": 4.198169335722923e-05}, {"id": 632, "seek": 369036, "start": 3713.6400000000003, "end": 3719.56, "text": " may be options for some safety, but we would give up some expressiveness. And we would also", "tokens": [50364, 550, 321, 434, 322, 264, 912, 3028, 13, 400, 370, 550, 286, 478, 411, 11, 1954, 11, 457, 291, 458, 11, 6284, 11, 293, 341, 307, 689, 286, 50844, 50844, 576, 411, 11, 797, 11, 498, 321, 645, 281, 10173, 264, 1192, 11, 1192, 1622, 551, 11, 393, 321, 13982, 4514, 337, 19283, 30, 51252, 51264, 400, 412, 341, 935, 11, 309, 1409, 281, 1813, 1850, 281, 385, 300, 300, 390, 257, 7283, 886, 1400, 293, 300, 456, 51528, 51528, 815, 312, 3956, 337, 512, 4514, 11, 457, 321, 576, 976, 493, 512, 5109, 8477, 13, 400, 321, 576, 611, 51824, 51824], "temperature": 0.0, "avg_logprob": -0.15486946472754845, "compression_ratio": 1.6512605042016806, "no_caption_prob": 4.198169335722923e-05}, {"id": 633, "seek": 371956, "start": 3719.56, "end": 3725.7999999999997, "text": " adopt a bucket of confusion. So like an example being like, if someone's coming to Elm, like,", "tokens": [50364, 6878, 257, 13058, 295, 15075, 13, 407, 411, 364, 1365, 885, 411, 11, 498, 1580, 311, 1348, 281, 2699, 76, 11, 411, 11, 50676, 50688, 291, 458, 11, 321, 820, 519, 295, 264, 1651, 300, 561, 5101, 1029, 562, 436, 808, 281, 2699, 76, 13, 1485, 295, 50892, 50892, 552, 11, 437, 307, 257, 979, 19866, 30, 708, 264, 12872, 30, 1743, 11, 437, 264, 12872, 30, 5736, 472, 11, 437, 307, 341, 707, 51156, 51156, 3636, 322, 17995, 30, 1779, 30, 286, 914, 11, 729, 366, 3143, 1651, 13, 1743, 11, 411, 729, 366, 11, 436, 434, 406, 10316, 13, 51568, 51568, 1743, 11, 436, 434, 445, 436, 434, 264, 700, 2306, 291, 820, 1190, 666, 13, 400, 370, 309, 311, 411, 11, 1392, 11, 731, 11, 51784, 51812], "temperature": 0.0, "avg_logprob": -0.17197584383415454, "compression_ratio": 1.7, "no_caption_prob": 1.341923689324176e-05}, {"id": 634, "seek": 371956, "start": 3726.04, "end": 3730.12, "text": " you know, we should think of the questions that people generally ask when they come to Elm. One of", "tokens": [50364, 6878, 257, 13058, 295, 15075, 13, 407, 411, 364, 1365, 885, 411, 11, 498, 1580, 311, 1348, 281, 2699, 76, 11, 411, 11, 50676, 50688, 291, 458, 11, 321, 820, 519, 295, 264, 1651, 300, 561, 5101, 1029, 562, 436, 808, 281, 2699, 76, 13, 1485, 295, 50892, 50892, 552, 11, 437, 307, 257, 979, 19866, 30, 708, 264, 12872, 30, 1743, 11, 437, 264, 12872, 30, 5736, 472, 11, 437, 307, 341, 707, 51156, 51156, 3636, 322, 17995, 30, 1779, 30, 286, 914, 11, 729, 366, 3143, 1651, 13, 1743, 11, 411, 729, 366, 11, 436, 434, 406, 10316, 13, 51568, 51568, 1743, 11, 436, 434, 445, 436, 434, 264, 700, 2306, 291, 820, 1190, 666, 13, 400, 370, 309, 311, 411, 11, 1392, 11, 731, 11, 51784, 51812], "temperature": 0.0, "avg_logprob": -0.17197584383415454, "compression_ratio": 1.7, "no_caption_prob": 1.341923689324176e-05}, {"id": 635, "seek": 371956, "start": 3730.12, "end": 3735.4, "text": " them, what is a decoder? What the heck? Like, what the heck? Second one, what is this little", "tokens": [50364, 6878, 257, 13058, 295, 15075, 13, 407, 411, 364, 1365, 885, 411, 11, 498, 1580, 311, 1348, 281, 2699, 76, 11, 411, 11, 50676, 50688, 291, 458, 11, 321, 820, 519, 295, 264, 1651, 300, 561, 5101, 1029, 562, 436, 808, 281, 2699, 76, 13, 1485, 295, 50892, 50892, 552, 11, 437, 307, 257, 979, 19866, 30, 708, 264, 12872, 30, 1743, 11, 437, 264, 12872, 30, 5736, 472, 11, 437, 307, 341, 707, 51156, 51156, 3636, 322, 17995, 30, 1779, 30, 286, 914, 11, 729, 366, 3143, 1651, 13, 1743, 11, 411, 729, 366, 11, 436, 434, 406, 10316, 13, 51568, 51568, 1743, 11, 436, 434, 445, 436, 434, 264, 700, 2306, 291, 820, 1190, 666, 13, 400, 370, 309, 311, 411, 11, 1392, 11, 731, 11, 51784, 51812], "temperature": 0.0, "avg_logprob": -0.17197584383415454, "compression_ratio": 1.7, "no_caption_prob": 1.341923689324176e-05}, {"id": 636, "seek": 371956, "start": 3735.4, "end": 3743.64, "text": " message on HTML? Right? I mean, those are fair questions. Like, like those are, they're not dumb.", "tokens": [50364, 6878, 257, 13058, 295, 15075, 13, 407, 411, 364, 1365, 885, 411, 11, 498, 1580, 311, 1348, 281, 2699, 76, 11, 411, 11, 50676, 50688, 291, 458, 11, 321, 820, 519, 295, 264, 1651, 300, 561, 5101, 1029, 562, 436, 808, 281, 2699, 76, 13, 1485, 295, 50892, 50892, 552, 11, 437, 307, 257, 979, 19866, 30, 708, 264, 12872, 30, 1743, 11, 437, 264, 12872, 30, 5736, 472, 11, 437, 307, 341, 707, 51156, 51156, 3636, 322, 17995, 30, 1779, 30, 286, 914, 11, 729, 366, 3143, 1651, 13, 1743, 11, 411, 729, 366, 11, 436, 434, 406, 10316, 13, 51568, 51568, 1743, 11, 436, 434, 445, 436, 434, 264, 700, 2306, 291, 820, 1190, 666, 13, 400, 370, 309, 311, 411, 11, 1392, 11, 731, 11, 51784, 51812], "temperature": 0.0, "avg_logprob": -0.17197584383415454, "compression_ratio": 1.7, "no_caption_prob": 1.341923689324176e-05}, {"id": 637, "seek": 371956, "start": 3743.64, "end": 3747.96, "text": " Like, they're just they're the first ones you should run into. And so it's like, okay, well,", "tokens": [50364, 6878, 257, 13058, 295, 15075, 13, 407, 411, 364, 1365, 885, 411, 11, 498, 1580, 311, 1348, 281, 2699, 76, 11, 411, 11, 50676, 50688, 291, 458, 11, 321, 820, 519, 295, 264, 1651, 300, 561, 5101, 1029, 562, 436, 808, 281, 2699, 76, 13, 1485, 295, 50892, 50892, 552, 11, 437, 307, 257, 979, 19866, 30, 708, 264, 12872, 30, 1743, 11, 437, 264, 12872, 30, 5736, 472, 11, 437, 307, 341, 707, 51156, 51156, 3636, 322, 17995, 30, 1779, 30, 286, 914, 11, 729, 366, 3143, 1651, 13, 1743, 11, 411, 729, 366, 11, 436, 434, 406, 10316, 13, 51568, 51568, 1743, 11, 436, 434, 445, 436, 434, 264, 700, 2306, 291, 820, 1190, 666, 13, 400, 370, 309, 311, 411, 11, 1392, 11, 731, 11, 51784, 51812], "temperature": 0.0, "avg_logprob": -0.17197584383415454, "compression_ratio": 1.7, "no_caption_prob": 1.341923689324176e-05}, {"id": 638, "seek": 374796, "start": 3747.96, "end": 3753.48, "text": " do I want do I want this library to be where it's like, oh, this is for Elm. If you're familiar with", "tokens": [50364, 360, 286, 528, 360, 286, 528, 341, 6405, 281, 312, 689, 309, 311, 411, 11, 1954, 11, 341, 307, 337, 2699, 76, 13, 759, 291, 434, 4963, 365, 50640, 50640, 341, 294, 7295, 6405, 11, 309, 307, 364, 7339, 6405, 11, 445, 570, 3089, 5125, 11, 286, 519, 11, 50824, 50844, 575, 281, 312, 733, 295, 457, 411, 11, 498, 11, 498, 456, 311, 257, 2931, 300, 2618, 300, 341, 727, 312, 641, 51108, 51108, 700, 12897, 281, 2699, 76, 11, 293, 436, 576, 767, 360, 746, 300, 436, 1310, 294, 1071, 2856, 11, 51324, 51324, 309, 390, 886, 6179, 337, 498, 436, 360, 300, 11, 300, 311, 1270, 257, 1627, 1752, 13, 663, 311, 370, 370, 370, 1627, 13, 51572, 51584], "temperature": 0.0, "avg_logprob": -0.1690073013305664, "compression_ratio": 1.758364312267658, "no_caption_prob": 0.00012728979345411062}, {"id": 639, "seek": 374796, "start": 3753.48, "end": 3757.16, "text": " this in advance library, it is an advanced library, just because code generation, I think,", "tokens": [50364, 360, 286, 528, 360, 286, 528, 341, 6405, 281, 312, 689, 309, 311, 411, 11, 1954, 11, 341, 307, 337, 2699, 76, 13, 759, 291, 434, 4963, 365, 50640, 50640, 341, 294, 7295, 6405, 11, 309, 307, 364, 7339, 6405, 11, 445, 570, 3089, 5125, 11, 286, 519, 11, 50824, 50844, 575, 281, 312, 733, 295, 457, 411, 11, 498, 11, 498, 456, 311, 257, 2931, 300, 2618, 300, 341, 727, 312, 641, 51108, 51108, 700, 12897, 281, 2699, 76, 11, 293, 436, 576, 767, 360, 746, 300, 436, 1310, 294, 1071, 2856, 11, 51324, 51324, 309, 390, 886, 6179, 337, 498, 436, 360, 300, 11, 300, 311, 1270, 257, 1627, 1752, 13, 663, 311, 370, 370, 370, 1627, 13, 51572, 51584], "temperature": 0.0, "avg_logprob": -0.1690073013305664, "compression_ratio": 1.758364312267658, "no_caption_prob": 0.00012728979345411062}, {"id": 640, "seek": 374796, "start": 3757.56, "end": 3762.84, "text": " has to be kind of but like, if, if there's a chance that somebody that this could be their", "tokens": [50364, 360, 286, 528, 360, 286, 528, 341, 6405, 281, 312, 689, 309, 311, 411, 11, 1954, 11, 341, 307, 337, 2699, 76, 13, 759, 291, 434, 4963, 365, 50640, 50640, 341, 294, 7295, 6405, 11, 309, 307, 364, 7339, 6405, 11, 445, 570, 3089, 5125, 11, 286, 519, 11, 50824, 50844, 575, 281, 312, 733, 295, 457, 411, 11, 498, 11, 498, 456, 311, 257, 2931, 300, 2618, 300, 341, 727, 312, 641, 51108, 51108, 700, 12897, 281, 2699, 76, 11, 293, 436, 576, 767, 360, 746, 300, 436, 1310, 294, 1071, 2856, 11, 51324, 51324, 309, 390, 886, 6179, 337, 498, 436, 360, 300, 11, 300, 311, 1270, 257, 1627, 1752, 13, 663, 311, 370, 370, 370, 1627, 13, 51572, 51584], "temperature": 0.0, "avg_logprob": -0.1690073013305664, "compression_ratio": 1.758364312267658, "no_caption_prob": 0.00012728979345411062}, {"id": 641, "seek": 374796, "start": 3762.84, "end": 3767.16, "text": " first intro to Elm, and they would actually do something that they maybe in another language,", "tokens": [50364, 360, 286, 528, 360, 286, 528, 341, 6405, 281, 312, 689, 309, 311, 411, 11, 1954, 11, 341, 307, 337, 2699, 76, 13, 759, 291, 434, 4963, 365, 50640, 50640, 341, 294, 7295, 6405, 11, 309, 307, 364, 7339, 6405, 11, 445, 570, 3089, 5125, 11, 286, 519, 11, 50824, 50844, 575, 281, 312, 733, 295, 457, 411, 11, 498, 11, 498, 456, 311, 257, 2931, 300, 2618, 300, 341, 727, 312, 641, 51108, 51108, 700, 12897, 281, 2699, 76, 11, 293, 436, 576, 767, 360, 746, 300, 436, 1310, 294, 1071, 2856, 11, 51324, 51324, 309, 390, 886, 6179, 337, 498, 436, 360, 300, 11, 300, 311, 1270, 257, 1627, 1752, 13, 663, 311, 370, 370, 370, 1627, 13, 51572, 51584], "temperature": 0.0, "avg_logprob": -0.1690073013305664, "compression_ratio": 1.758364312267658, "no_caption_prob": 0.00012728979345411062}, {"id": 642, "seek": 374796, "start": 3767.16, "end": 3772.12, "text": " it was too complicated for if they do that, that's such a cool experience. That's so so so cool.", "tokens": [50364, 360, 286, 528, 360, 286, 528, 341, 6405, 281, 312, 689, 309, 311, 411, 11, 1954, 11, 341, 307, 337, 2699, 76, 13, 759, 291, 434, 4963, 365, 50640, 50640, 341, 294, 7295, 6405, 11, 309, 307, 364, 7339, 6405, 11, 445, 570, 3089, 5125, 11, 286, 519, 11, 50824, 50844, 575, 281, 312, 733, 295, 457, 411, 11, 498, 11, 498, 456, 311, 257, 2931, 300, 2618, 300, 341, 727, 312, 641, 51108, 51108, 700, 12897, 281, 2699, 76, 11, 293, 436, 576, 767, 360, 746, 300, 436, 1310, 294, 1071, 2856, 11, 51324, 51324, 309, 390, 886, 6179, 337, 498, 436, 360, 300, 11, 300, 311, 1270, 257, 1627, 1752, 13, 663, 311, 370, 370, 370, 1627, 13, 51572, 51584], "temperature": 0.0, "avg_logprob": -0.1690073013305664, "compression_ratio": 1.758364312267658, "no_caption_prob": 0.00012728979345411062}, {"id": 643, "seek": 377212, "start": 3772.12, "end": 3778.12, "text": " And I wasn't, I wasn't willing to have a type variable, screw that up. I'm in favor of type", "tokens": [50364, 400, 286, 2067, 380, 11, 286, 2067, 380, 4950, 281, 362, 257, 2010, 7006, 11, 5630, 300, 493, 13, 286, 478, 294, 2294, 295, 2010, 50664, 50664, 9102, 294, 2674, 11, 445, 370, 309, 311, 1850, 13, 583, 411, 11, 498, 286, 500, 380, 362, 281, 362, 472, 11, 286, 4382, 406, 281, 13, 50944, 50944, 865, 11, 452, 700, 1752, 365, 2699, 76, 390, 1936, 2390, 257, 287, 5106, 13, 407, 2433, 365, 316, 6840, 82, 13, 51248, 51248, 286, 519, 6095, 11, 3892, 390, 21156, 433, 11, 558, 30, 3013, 366, 5324, 13, 865, 13, 865, 11, 457, 309, 390, 12606, 257, 955, 51640, 51640], "temperature": 0.0, "avg_logprob": -0.21272753794258886, "compression_ratio": 1.5473251028806585, "no_caption_prob": 0.0002913356584031135}, {"id": 644, "seek": 377212, "start": 3778.12, "end": 3783.72, "text": " variables in general, just so it's clear. But like, if I don't have to have one, I prefer not to.", "tokens": [50364, 400, 286, 2067, 380, 11, 286, 2067, 380, 4950, 281, 362, 257, 2010, 7006, 11, 5630, 300, 493, 13, 286, 478, 294, 2294, 295, 2010, 50664, 50664, 9102, 294, 2674, 11, 445, 370, 309, 311, 1850, 13, 583, 411, 11, 498, 286, 500, 380, 362, 281, 362, 472, 11, 286, 4382, 406, 281, 13, 50944, 50944, 865, 11, 452, 700, 1752, 365, 2699, 76, 390, 1936, 2390, 257, 287, 5106, 13, 407, 2433, 365, 316, 6840, 82, 13, 51248, 51248, 286, 519, 6095, 11, 3892, 390, 21156, 433, 11, 558, 30, 3013, 366, 5324, 13, 865, 13, 865, 11, 457, 309, 390, 12606, 257, 955, 51640, 51640], "temperature": 0.0, "avg_logprob": -0.21272753794258886, "compression_ratio": 1.5473251028806585, "no_caption_prob": 0.0002913356584031135}, {"id": 645, "seek": 377212, "start": 3783.72, "end": 3789.7999999999997, "text": " Yeah, my first experience with Elm was basically building a linter. So playing with ASTs.", "tokens": [50364, 400, 286, 2067, 380, 11, 286, 2067, 380, 4950, 281, 362, 257, 2010, 7006, 11, 5630, 300, 493, 13, 286, 478, 294, 2294, 295, 2010, 50664, 50664, 9102, 294, 2674, 11, 445, 370, 309, 311, 1850, 13, 583, 411, 11, 498, 286, 500, 380, 362, 281, 362, 472, 11, 286, 4382, 406, 281, 13, 50944, 50944, 865, 11, 452, 700, 1752, 365, 2699, 76, 390, 1936, 2390, 257, 287, 5106, 13, 407, 2433, 365, 316, 6840, 82, 13, 51248, 51248, 286, 519, 6095, 11, 3892, 390, 21156, 433, 11, 558, 30, 3013, 366, 5324, 13, 865, 13, 865, 11, 457, 309, 390, 12606, 257, 955, 51640, 51640], "temperature": 0.0, "avg_logprob": -0.21272753794258886, "compression_ratio": 1.5473251028806585, "no_caption_prob": 0.0002913356584031135}, {"id": 646, "seek": 377212, "start": 3789.7999999999997, "end": 3797.64, "text": " I think honestly, mine was parsers, right? Which are worse. Yeah. Yeah, but it was solving a big", "tokens": [50364, 400, 286, 2067, 380, 11, 286, 2067, 380, 4950, 281, 362, 257, 2010, 7006, 11, 5630, 300, 493, 13, 286, 478, 294, 2294, 295, 2010, 50664, 50664, 9102, 294, 2674, 11, 445, 370, 309, 311, 1850, 13, 583, 411, 11, 498, 286, 500, 380, 362, 281, 362, 472, 11, 286, 4382, 406, 281, 13, 50944, 50944, 865, 11, 452, 700, 1752, 365, 2699, 76, 390, 1936, 2390, 257, 287, 5106, 13, 407, 2433, 365, 316, 6840, 82, 13, 51248, 51248, 286, 519, 6095, 11, 3892, 390, 21156, 433, 11, 558, 30, 3013, 366, 5324, 13, 865, 13, 865, 11, 457, 309, 390, 12606, 257, 955, 51640, 51640], "temperature": 0.0, "avg_logprob": -0.21272753794258886, "compression_ratio": 1.5473251028806585, "no_caption_prob": 0.0002913356584031135}, {"id": 647, "seek": 379764, "start": 3797.64, "end": 3802.12, "text": " problem. Like I was trying to parse guitar tablature back in the day. And this is actually in", "tokens": [50364, 1154, 13, 1743, 286, 390, 1382, 281, 48377, 7531, 4421, 75, 1503, 646, 294, 264, 786, 13, 400, 341, 307, 767, 294, 50588, 50588, 287, 1794, 8646, 43723, 13, 407, 309, 390, 767, 498, 286, 576, 362, 2570, 2699, 76, 412, 300, 935, 11, 420, 411, 264, 2699, 76, 50784, 50784, 21156, 278, 6405, 11, 498, 309, 576, 362, 13135, 11, 300, 576, 362, 668, 2243, 13, 583, 341, 390, 300, 390, 50960, 50960, 2138, 689, 286, 390, 411, 11, 876, 11, 286, 478, 20410, 13, 639, 307, 2243, 13, 286, 632, 341, 955, 3411, 295, 3890, 51180, 51180, 15277, 949, 11, 457, 341, 307, 411, 11, 370, 370, 665, 13, 407, 561, 393, 362, 2452, 6191, 5235, 13, 51472, 51472, 400, 498, 321, 393, 20207, 552, 11, 456, 311, 257, 456, 311, 257, 2603, 2650, 337, 561, 281, 312, 411, 11, 876, 11, 51692, 51692], "temperature": 0.0, "avg_logprob": -0.1535160090472247, "compression_ratio": 1.7515527950310559, "no_caption_prob": 0.00020336214220151305}, {"id": 648, "seek": 379764, "start": 3802.12, "end": 3806.04, "text": " lering Haskell. So it was actually if I would have known Elm at that point, or like the Elm", "tokens": [50364, 1154, 13, 1743, 286, 390, 1382, 281, 48377, 7531, 4421, 75, 1503, 646, 294, 264, 786, 13, 400, 341, 307, 767, 294, 50588, 50588, 287, 1794, 8646, 43723, 13, 407, 309, 390, 767, 498, 286, 576, 362, 2570, 2699, 76, 412, 300, 935, 11, 420, 411, 264, 2699, 76, 50784, 50784, 21156, 278, 6405, 11, 498, 309, 576, 362, 13135, 11, 300, 576, 362, 668, 2243, 13, 583, 341, 390, 300, 390, 50960, 50960, 2138, 689, 286, 390, 411, 11, 876, 11, 286, 478, 20410, 13, 639, 307, 2243, 13, 286, 632, 341, 955, 3411, 295, 3890, 51180, 51180, 15277, 949, 11, 457, 341, 307, 411, 11, 370, 370, 665, 13, 407, 561, 393, 362, 2452, 6191, 5235, 13, 51472, 51472, 400, 498, 321, 393, 20207, 552, 11, 456, 311, 257, 456, 311, 257, 2603, 2650, 337, 561, 281, 312, 411, 11, 876, 11, 51692, 51692], "temperature": 0.0, "avg_logprob": -0.1535160090472247, "compression_ratio": 1.7515527950310559, "no_caption_prob": 0.00020336214220151305}, {"id": 649, "seek": 379764, "start": 3806.04, "end": 3809.56, "text": " parsing library, if it would have existed, that would have been amazing. But this was that was", "tokens": [50364, 1154, 13, 1743, 286, 390, 1382, 281, 48377, 7531, 4421, 75, 1503, 646, 294, 264, 786, 13, 400, 341, 307, 767, 294, 50588, 50588, 287, 1794, 8646, 43723, 13, 407, 309, 390, 767, 498, 286, 576, 362, 2570, 2699, 76, 412, 300, 935, 11, 420, 411, 264, 2699, 76, 50784, 50784, 21156, 278, 6405, 11, 498, 309, 576, 362, 13135, 11, 300, 576, 362, 668, 2243, 13, 583, 341, 390, 300, 390, 50960, 50960, 2138, 689, 286, 390, 411, 11, 876, 11, 286, 478, 20410, 13, 639, 307, 2243, 13, 286, 632, 341, 955, 3411, 295, 3890, 51180, 51180, 15277, 949, 11, 457, 341, 307, 411, 11, 370, 370, 665, 13, 407, 561, 393, 362, 2452, 6191, 5235, 13, 51472, 51472, 400, 498, 321, 393, 20207, 552, 11, 456, 311, 257, 456, 311, 257, 2603, 2650, 337, 561, 281, 312, 411, 11, 876, 11, 51692, 51692], "temperature": 0.0, "avg_logprob": -0.1535160090472247, "compression_ratio": 1.7515527950310559, "no_caption_prob": 0.00020336214220151305}, {"id": 650, "seek": 379764, "start": 3809.56, "end": 3813.96, "text": " definitely where I was like, Oh, I'm hooked. This is amazing. I had this big bag of regular", "tokens": [50364, 1154, 13, 1743, 286, 390, 1382, 281, 48377, 7531, 4421, 75, 1503, 646, 294, 264, 786, 13, 400, 341, 307, 767, 294, 50588, 50588, 287, 1794, 8646, 43723, 13, 407, 309, 390, 767, 498, 286, 576, 362, 2570, 2699, 76, 412, 300, 935, 11, 420, 411, 264, 2699, 76, 50784, 50784, 21156, 278, 6405, 11, 498, 309, 576, 362, 13135, 11, 300, 576, 362, 668, 2243, 13, 583, 341, 390, 300, 390, 50960, 50960, 2138, 689, 286, 390, 411, 11, 876, 11, 286, 478, 20410, 13, 639, 307, 2243, 13, 286, 632, 341, 955, 3411, 295, 3890, 51180, 51180, 15277, 949, 11, 457, 341, 307, 411, 11, 370, 370, 665, 13, 407, 561, 393, 362, 2452, 6191, 5235, 13, 51472, 51472, 400, 498, 321, 393, 20207, 552, 11, 456, 311, 257, 456, 311, 257, 2603, 2650, 337, 561, 281, 312, 411, 11, 876, 11, 51692, 51692], "temperature": 0.0, "avg_logprob": -0.1535160090472247, "compression_ratio": 1.7515527950310559, "no_caption_prob": 0.00020336214220151305}, {"id": 651, "seek": 379764, "start": 3813.96, "end": 3819.7999999999997, "text": " expressions before, but this is like, so so good. So people can have deep technical experiences.", "tokens": [50364, 1154, 13, 1743, 286, 390, 1382, 281, 48377, 7531, 4421, 75, 1503, 646, 294, 264, 786, 13, 400, 341, 307, 767, 294, 50588, 50588, 287, 1794, 8646, 43723, 13, 407, 309, 390, 767, 498, 286, 576, 362, 2570, 2699, 76, 412, 300, 935, 11, 420, 411, 264, 2699, 76, 50784, 50784, 21156, 278, 6405, 11, 498, 309, 576, 362, 13135, 11, 300, 576, 362, 668, 2243, 13, 583, 341, 390, 300, 390, 50960, 50960, 2138, 689, 286, 390, 411, 11, 876, 11, 286, 478, 20410, 13, 639, 307, 2243, 13, 286, 632, 341, 955, 3411, 295, 3890, 51180, 51180, 15277, 949, 11, 457, 341, 307, 411, 11, 370, 370, 665, 13, 407, 561, 393, 362, 2452, 6191, 5235, 13, 51472, 51472, 400, 498, 321, 393, 20207, 552, 11, 456, 311, 257, 456, 311, 257, 2603, 2650, 337, 561, 281, 312, 411, 11, 876, 11, 51692, 51692], "temperature": 0.0, "avg_logprob": -0.1535160090472247, "compression_ratio": 1.7515527950310559, "no_caption_prob": 0.00020336214220151305}, {"id": 652, "seek": 379764, "start": 3819.7999999999997, "end": 3824.2, "text": " And if we can facilitate them, there's a there's a huge opportunity for people to be like, Oh,", "tokens": [50364, 1154, 13, 1743, 286, 390, 1382, 281, 48377, 7531, 4421, 75, 1503, 646, 294, 264, 786, 13, 400, 341, 307, 767, 294, 50588, 50588, 287, 1794, 8646, 43723, 13, 407, 309, 390, 767, 498, 286, 576, 362, 2570, 2699, 76, 412, 300, 935, 11, 420, 411, 264, 2699, 76, 50784, 50784, 21156, 278, 6405, 11, 498, 309, 576, 362, 13135, 11, 300, 576, 362, 668, 2243, 13, 583, 341, 390, 300, 390, 50960, 50960, 2138, 689, 286, 390, 411, 11, 876, 11, 286, 478, 20410, 13, 639, 307, 2243, 13, 286, 632, 341, 955, 3411, 295, 3890, 51180, 51180, 15277, 949, 11, 457, 341, 307, 411, 11, 370, 370, 665, 13, 407, 561, 393, 362, 2452, 6191, 5235, 13, 51472, 51472, 400, 498, 321, 393, 20207, 552, 11, 456, 311, 257, 456, 311, 257, 2603, 2650, 337, 561, 281, 312, 411, 11, 876, 11, 51692, 51692], "temperature": 0.0, "avg_logprob": -0.1535160090472247, "compression_ratio": 1.7515527950310559, "no_caption_prob": 0.00020336214220151305}, {"id": 653, "seek": 382420, "start": 3824.2, "end": 3830.6, "text": " that's that was so good. Why? It is that trade off we talked about a lot with like, when you add this", "tokens": [50364, 300, 311, 300, 390, 370, 665, 13, 1545, 30, 467, 307, 300, 4923, 766, 321, 2825, 466, 257, 688, 365, 411, 11, 562, 291, 909, 341, 50684, 50684, 10815, 11, 411, 11, 498, 291, 360, 2107, 6707, 6798, 11, 307, 309, 534, 799, 411, 2371, 291, 300, 709, 30, 467, 311, 51084, 51084, 411, 11, 1238, 12713, 1616, 423, 13, 400, 309, 311, 5127, 411, 11, 420, 411, 264, 2699, 76, 17995, 7615, 17387, 279, 337, 819, 51452, 51452, 17995, 9984, 3467, 13, 467, 311, 411, 11, 731, 11, 747, 300, 437, 498, 291, 437, 498, 291, 2464, 364, 17995, 9984, 2010, 300, 311, 51756, 51756], "temperature": 0.0, "avg_logprob": -0.18093963905617041, "compression_ratio": 1.6624472573839661, "no_caption_prob": 5.06404358020518e-05}, {"id": 654, "seek": 382420, "start": 3830.6, "end": 3838.6, "text": " guarantee, like, if you do non empty string, is it really gonna like protect you that much? It's", "tokens": [50364, 300, 311, 300, 390, 370, 665, 13, 1545, 30, 467, 307, 300, 4923, 766, 321, 2825, 466, 257, 688, 365, 411, 11, 562, 291, 909, 341, 50684, 50684, 10815, 11, 411, 11, 498, 291, 360, 2107, 6707, 6798, 11, 307, 309, 534, 799, 411, 2371, 291, 300, 709, 30, 467, 311, 51084, 51084, 411, 11, 1238, 12713, 1616, 423, 13, 400, 309, 311, 5127, 411, 11, 420, 411, 264, 2699, 76, 17995, 7615, 17387, 279, 337, 819, 51452, 51452, 17995, 9984, 3467, 13, 467, 311, 411, 11, 731, 11, 747, 300, 437, 498, 291, 437, 498, 291, 2464, 364, 17995, 9984, 2010, 300, 311, 51756, 51756], "temperature": 0.0, "avg_logprob": -0.18093963905617041, "compression_ratio": 1.6624472573839661, "no_caption_prob": 5.06404358020518e-05}, {"id": 655, "seek": 382420, "start": 3838.6, "end": 3845.96, "text": " like, pretty cumbersome. And it's adding like, or like the Elm HTML escape hatches for different", "tokens": [50364, 300, 311, 300, 390, 370, 665, 13, 1545, 30, 467, 307, 300, 4923, 766, 321, 2825, 466, 257, 688, 365, 411, 11, 562, 291, 909, 341, 50684, 50684, 10815, 11, 411, 11, 498, 291, 360, 2107, 6707, 6798, 11, 307, 309, 534, 799, 411, 2371, 291, 300, 709, 30, 467, 311, 51084, 51084, 411, 11, 1238, 12713, 1616, 423, 13, 400, 309, 311, 5127, 411, 11, 420, 411, 264, 2699, 76, 17995, 7615, 17387, 279, 337, 819, 51452, 51452, 17995, 9984, 3467, 13, 467, 311, 411, 11, 731, 11, 747, 300, 437, 498, 291, 437, 498, 291, 2464, 364, 17995, 9984, 2010, 300, 311, 51756, 51756], "temperature": 0.0, "avg_logprob": -0.18093963905617041, "compression_ratio": 1.6624472573839661, "no_caption_prob": 5.06404358020518e-05}, {"id": 656, "seek": 382420, "start": 3845.96, "end": 3852.04, "text": " HTML node types. It's like, well, take that what if you what if you write an HTML node type that's", "tokens": [50364, 300, 311, 300, 390, 370, 665, 13, 1545, 30, 467, 307, 300, 4923, 766, 321, 2825, 466, 257, 688, 365, 411, 11, 562, 291, 909, 341, 50684, 50684, 10815, 11, 411, 11, 498, 291, 360, 2107, 6707, 6798, 11, 307, 309, 534, 799, 411, 2371, 291, 300, 709, 30, 467, 311, 51084, 51084, 411, 11, 1238, 12713, 1616, 423, 13, 400, 309, 311, 5127, 411, 11, 420, 411, 264, 2699, 76, 17995, 7615, 17387, 279, 337, 819, 51452, 51452, 17995, 9984, 3467, 13, 467, 311, 411, 11, 731, 11, 747, 300, 437, 498, 291, 437, 498, 291, 2464, 364, 17995, 9984, 2010, 300, 311, 51756, 51756], "temperature": 0.0, "avg_logprob": -0.18093963905617041, "compression_ratio": 1.6624472573839661, "no_caption_prob": 5.06404358020518e-05}, {"id": 657, "seek": 385204, "start": 3852.04, "end": 3859.4, "text": " not a valid HTML nodes? What if you write empty string for the HTML node type? Well, okay, but", "tokens": [50364, 406, 257, 7363, 17995, 13891, 30, 708, 498, 291, 2464, 6707, 6798, 337, 264, 17995, 9984, 2010, 30, 1042, 11, 1392, 11, 457, 50732, 50732, 412, 1935, 291, 458, 11, 498, 291, 764, 264, 4965, 6828, 11, 498, 291, 764, 276, 83, 15480, 13, 67, 592, 276, 83, 15480, 13, 4952, 282, 11, 291, 434, 516, 281, 312, 51044, 51044, 2489, 13, 400, 498, 291, 764, 9984, 11, 445, 500, 380, 1320, 309, 364, 6707, 6798, 307, 1391, 1392, 13, 865, 11, 286, 519, 51360, 51360, 456, 311, 456, 311, 341, 551, 295, 411, 11, 291, 519, 466, 264, 23996, 561, 362, 337, 3683, 721, 13, 51552, 51552, 286, 478, 406, 988, 300, 561, 808, 666, 2699, 76, 365, 257, 2603, 23996, 337, 4514, 13, 51780, 51780], "temperature": 0.0, "avg_logprob": -0.1685297174971233, "compression_ratio": 1.6925925925925926, "no_caption_prob": 2.468234561092686e-05}, {"id": 658, "seek": 385204, "start": 3859.4, "end": 3865.64, "text": " at least you know, if you use the core functions, if you use html.div html.span, you're going to be", "tokens": [50364, 406, 257, 7363, 17995, 13891, 30, 708, 498, 291, 2464, 6707, 6798, 337, 264, 17995, 9984, 2010, 30, 1042, 11, 1392, 11, 457, 50732, 50732, 412, 1935, 291, 458, 11, 498, 291, 764, 264, 4965, 6828, 11, 498, 291, 764, 276, 83, 15480, 13, 67, 592, 276, 83, 15480, 13, 4952, 282, 11, 291, 434, 516, 281, 312, 51044, 51044, 2489, 13, 400, 498, 291, 764, 9984, 11, 445, 500, 380, 1320, 309, 364, 6707, 6798, 307, 1391, 1392, 13, 865, 11, 286, 519, 51360, 51360, 456, 311, 456, 311, 341, 551, 295, 411, 11, 291, 519, 466, 264, 23996, 561, 362, 337, 3683, 721, 13, 51552, 51552, 286, 478, 406, 988, 300, 561, 808, 666, 2699, 76, 365, 257, 2603, 23996, 337, 4514, 13, 51780, 51780], "temperature": 0.0, "avg_logprob": -0.1685297174971233, "compression_ratio": 1.6925925925925926, "no_caption_prob": 2.468234561092686e-05}, {"id": 659, "seek": 385204, "start": 3865.64, "end": 3871.96, "text": " fine. And if you use node, just don't pass it an empty string is probably okay. Yeah, I think", "tokens": [50364, 406, 257, 7363, 17995, 13891, 30, 708, 498, 291, 2464, 6707, 6798, 337, 264, 17995, 9984, 2010, 30, 1042, 11, 1392, 11, 457, 50732, 50732, 412, 1935, 291, 458, 11, 498, 291, 764, 264, 4965, 6828, 11, 498, 291, 764, 276, 83, 15480, 13, 67, 592, 276, 83, 15480, 13, 4952, 282, 11, 291, 434, 516, 281, 312, 51044, 51044, 2489, 13, 400, 498, 291, 764, 9984, 11, 445, 500, 380, 1320, 309, 364, 6707, 6798, 307, 1391, 1392, 13, 865, 11, 286, 519, 51360, 51360, 456, 311, 456, 311, 341, 551, 295, 411, 11, 291, 519, 466, 264, 23996, 561, 362, 337, 3683, 721, 13, 51552, 51552, 286, 478, 406, 988, 300, 561, 808, 666, 2699, 76, 365, 257, 2603, 23996, 337, 4514, 13, 51780, 51780], "temperature": 0.0, "avg_logprob": -0.1685297174971233, "compression_ratio": 1.6925925925925926, "no_caption_prob": 2.468234561092686e-05}, {"id": 660, "seek": 385204, "start": 3871.96, "end": 3875.8, "text": " there's there's this thing of like, you think about the appetite people have for various things.", "tokens": [50364, 406, 257, 7363, 17995, 13891, 30, 708, 498, 291, 2464, 6707, 6798, 337, 264, 17995, 9984, 2010, 30, 1042, 11, 1392, 11, 457, 50732, 50732, 412, 1935, 291, 458, 11, 498, 291, 764, 264, 4965, 6828, 11, 498, 291, 764, 276, 83, 15480, 13, 67, 592, 276, 83, 15480, 13, 4952, 282, 11, 291, 434, 516, 281, 312, 51044, 51044, 2489, 13, 400, 498, 291, 764, 9984, 11, 445, 500, 380, 1320, 309, 364, 6707, 6798, 307, 1391, 1392, 13, 865, 11, 286, 519, 51360, 51360, 456, 311, 456, 311, 341, 551, 295, 411, 11, 291, 519, 466, 264, 23996, 561, 362, 337, 3683, 721, 13, 51552, 51552, 286, 478, 406, 988, 300, 561, 808, 666, 2699, 76, 365, 257, 2603, 23996, 337, 4514, 13, 51780, 51780], "temperature": 0.0, "avg_logprob": -0.1685297174971233, "compression_ratio": 1.6925925925925926, "no_caption_prob": 2.468234561092686e-05}, {"id": 661, "seek": 385204, "start": 3875.8, "end": 3880.36, "text": " I'm not sure that people come into Elm with a huge appetite for safety.", "tokens": [50364, 406, 257, 7363, 17995, 13891, 30, 708, 498, 291, 2464, 6707, 6798, 337, 264, 17995, 9984, 2010, 30, 1042, 11, 1392, 11, 457, 50732, 50732, 412, 1935, 291, 458, 11, 498, 291, 764, 264, 4965, 6828, 11, 498, 291, 764, 276, 83, 15480, 13, 67, 592, 276, 83, 15480, 13, 4952, 282, 11, 291, 434, 516, 281, 312, 51044, 51044, 2489, 13, 400, 498, 291, 764, 9984, 11, 445, 500, 380, 1320, 309, 364, 6707, 6798, 307, 1391, 1392, 13, 865, 11, 286, 519, 51360, 51360, 456, 311, 456, 311, 341, 551, 295, 411, 11, 291, 519, 466, 264, 23996, 561, 362, 337, 3683, 721, 13, 51552, 51552, 286, 478, 406, 988, 300, 561, 808, 666, 2699, 76, 365, 257, 2603, 23996, 337, 4514, 13, 51780, 51780], "temperature": 0.0, "avg_logprob": -0.1685297174971233, "compression_ratio": 1.6925925925925926, "no_caption_prob": 2.468234561092686e-05}, {"id": 662, "seek": 388036, "start": 3880.36, "end": 3887.96, "text": " I think they come into it for a big appetite for sanity, like clarity. I would say that's probably", "tokens": [50364, 286, 519, 436, 808, 666, 309, 337, 257, 955, 23996, 337, 47892, 11, 411, 16992, 13, 286, 576, 584, 300, 311, 1391, 50744, 50744, 264, 544, 264, 551, 293, 550, 411, 291, 1333, 295, 519, 466, 309, 10543, 11, 411, 11, 1954, 11, 1338, 11, 572, 50904, 50904, 34474, 13603, 13, 509, 500, 380, 519, 466, 572, 1190, 34474, 13603, 307, 411, 257, 551, 300, 311, 30533, 51096, 51096, 1826, 411, 291, 434, 294, 264, 10147, 295, 25763, 11, 411, 11139, 13603, 439, 264, 565, 13, 583, 411, 11, 309, 311, 51340, 51340, 406, 264, 551, 291, 23829, 337, 13, 23921, 11, 411, 264, 551, 307, 411, 291, 23829, 337, 286, 528, 281, 1322, 341, 51552, 51552, 2238, 551, 420, 411, 11, 574, 412, 341, 1627, 3089, 13, 286, 390, 1075, 281, 652, 341, 293, 309, 311, 411, 11, 286, 478, 406, 51836, 51836], "temperature": 0.0, "avg_logprob": -0.22957127714810305, "compression_ratio": 1.9326599326599327, "no_caption_prob": 0.00023047103604767472}, {"id": 663, "seek": 388036, "start": 3887.96, "end": 3891.1600000000003, "text": " the more the thing and then like you sort of think about it afterwards, like, oh, yeah, no", "tokens": [50364, 286, 519, 436, 808, 666, 309, 337, 257, 955, 23996, 337, 47892, 11, 411, 16992, 13, 286, 576, 584, 300, 311, 1391, 50744, 50744, 264, 544, 264, 551, 293, 550, 411, 291, 1333, 295, 519, 466, 309, 10543, 11, 411, 11, 1954, 11, 1338, 11, 572, 50904, 50904, 34474, 13603, 13, 509, 500, 380, 519, 466, 572, 1190, 34474, 13603, 307, 411, 257, 551, 300, 311, 30533, 51096, 51096, 1826, 411, 291, 434, 294, 264, 10147, 295, 25763, 11, 411, 11139, 13603, 439, 264, 565, 13, 583, 411, 11, 309, 311, 51340, 51340, 406, 264, 551, 291, 23829, 337, 13, 23921, 11, 411, 264, 551, 307, 411, 291, 23829, 337, 286, 528, 281, 1322, 341, 51552, 51552, 2238, 551, 420, 411, 11, 574, 412, 341, 1627, 3089, 13, 286, 390, 1075, 281, 652, 341, 293, 309, 311, 411, 11, 286, 478, 406, 51836, 51836], "temperature": 0.0, "avg_logprob": -0.22957127714810305, "compression_ratio": 1.9326599326599327, "no_caption_prob": 0.00023047103604767472}, {"id": 664, "seek": 388036, "start": 3891.1600000000003, "end": 3895.0, "text": " runtime errors. You don't think about no run runtime errors is like a thing that's desirable", "tokens": [50364, 286, 519, 436, 808, 666, 309, 337, 257, 955, 23996, 337, 47892, 11, 411, 16992, 13, 286, 576, 584, 300, 311, 1391, 50744, 50744, 264, 544, 264, 551, 293, 550, 411, 291, 1333, 295, 519, 466, 309, 10543, 11, 411, 11, 1954, 11, 1338, 11, 572, 50904, 50904, 34474, 13603, 13, 509, 500, 380, 519, 466, 572, 1190, 34474, 13603, 307, 411, 257, 551, 300, 311, 30533, 51096, 51096, 1826, 411, 291, 434, 294, 264, 10147, 295, 25763, 11, 411, 11139, 13603, 439, 264, 565, 13, 583, 411, 11, 309, 311, 51340, 51340, 406, 264, 551, 291, 23829, 337, 13, 23921, 11, 411, 264, 551, 307, 411, 291, 23829, 337, 286, 528, 281, 1322, 341, 51552, 51552, 2238, 551, 420, 411, 11, 574, 412, 341, 1627, 3089, 13, 286, 390, 1075, 281, 652, 341, 293, 309, 311, 411, 11, 286, 478, 406, 51836, 51836], "temperature": 0.0, "avg_logprob": -0.22957127714810305, "compression_ratio": 1.9326599326599327, "no_caption_prob": 0.00023047103604767472}, {"id": 665, "seek": 388036, "start": 3895.0, "end": 3899.88, "text": " until like you're in the pit of despair, like experiencing errors all the time. But like, it's", "tokens": [50364, 286, 519, 436, 808, 666, 309, 337, 257, 955, 23996, 337, 47892, 11, 411, 16992, 13, 286, 576, 584, 300, 311, 1391, 50744, 50744, 264, 544, 264, 551, 293, 550, 411, 291, 1333, 295, 519, 466, 309, 10543, 11, 411, 11, 1954, 11, 1338, 11, 572, 50904, 50904, 34474, 13603, 13, 509, 500, 380, 519, 466, 572, 1190, 34474, 13603, 307, 411, 257, 551, 300, 311, 30533, 51096, 51096, 1826, 411, 291, 434, 294, 264, 10147, 295, 25763, 11, 411, 11139, 13603, 439, 264, 565, 13, 583, 411, 11, 309, 311, 51340, 51340, 406, 264, 551, 291, 23829, 337, 13, 23921, 11, 411, 264, 551, 307, 411, 291, 23829, 337, 286, 528, 281, 1322, 341, 51552, 51552, 2238, 551, 420, 411, 11, 574, 412, 341, 1627, 3089, 13, 286, 390, 1075, 281, 652, 341, 293, 309, 311, 411, 11, 286, 478, 406, 51836, 51836], "temperature": 0.0, "avg_logprob": -0.22957127714810305, "compression_ratio": 1.9326599326599327, "no_caption_prob": 0.00023047103604767472}, {"id": 666, "seek": 388036, "start": 3899.88, "end": 3904.1200000000003, "text": " not the thing you strive for. Ultimately, like the thing is like you strive for I want to build this", "tokens": [50364, 286, 519, 436, 808, 666, 309, 337, 257, 955, 23996, 337, 47892, 11, 411, 16992, 13, 286, 576, 584, 300, 311, 1391, 50744, 50744, 264, 544, 264, 551, 293, 550, 411, 291, 1333, 295, 519, 466, 309, 10543, 11, 411, 11, 1954, 11, 1338, 11, 572, 50904, 50904, 34474, 13603, 13, 509, 500, 380, 519, 466, 572, 1190, 34474, 13603, 307, 411, 257, 551, 300, 311, 30533, 51096, 51096, 1826, 411, 291, 434, 294, 264, 10147, 295, 25763, 11, 411, 11139, 13603, 439, 264, 565, 13, 583, 411, 11, 309, 311, 51340, 51340, 406, 264, 551, 291, 23829, 337, 13, 23921, 11, 411, 264, 551, 307, 411, 291, 23829, 337, 286, 528, 281, 1322, 341, 51552, 51552, 2238, 551, 420, 411, 11, 574, 412, 341, 1627, 3089, 13, 286, 390, 1075, 281, 652, 341, 293, 309, 311, 411, 11, 286, 478, 406, 51836, 51836], "temperature": 0.0, "avg_logprob": -0.22957127714810305, "compression_ratio": 1.9326599326599327, "no_caption_prob": 0.00023047103604767472}, {"id": 667, "seek": 388036, "start": 3904.1200000000003, "end": 3909.8, "text": " beautiful thing or like, look at this cool code. I was able to make this and it's like, I'm not", "tokens": [50364, 286, 519, 436, 808, 666, 309, 337, 257, 955, 23996, 337, 47892, 11, 411, 16992, 13, 286, 576, 584, 300, 311, 1391, 50744, 50744, 264, 544, 264, 551, 293, 550, 411, 291, 1333, 295, 519, 466, 309, 10543, 11, 411, 11, 1954, 11, 1338, 11, 572, 50904, 50904, 34474, 13603, 13, 509, 500, 380, 519, 466, 572, 1190, 34474, 13603, 307, 411, 257, 551, 300, 311, 30533, 51096, 51096, 1826, 411, 291, 434, 294, 264, 10147, 295, 25763, 11, 411, 11139, 13603, 439, 264, 565, 13, 583, 411, 11, 309, 311, 51340, 51340, 406, 264, 551, 291, 23829, 337, 13, 23921, 11, 411, 264, 551, 307, 411, 291, 23829, 337, 286, 528, 281, 1322, 341, 51552, 51552, 2238, 551, 420, 411, 11, 574, 412, 341, 1627, 3089, 13, 286, 390, 1075, 281, 652, 341, 293, 309, 311, 411, 11, 286, 478, 406, 51836, 51836], "temperature": 0.0, "avg_logprob": -0.22957127714810305, "compression_ratio": 1.9326599326599327, "no_caption_prob": 0.00023047103604767472}, {"id": 668, "seek": 390980, "start": 3909.8, "end": 3915.0, "text": " able to make this and it I'm able to do what I could not do before. And it makes sense to me.", "tokens": [50364, 1075, 281, 652, 341, 293, 309, 286, 478, 1075, 281, 360, 437, 286, 727, 406, 360, 949, 13, 400, 309, 1669, 2020, 281, 385, 13, 50624, 50624, 286, 994, 380, 411, 352, 10483, 13, 400, 294, 341, 1389, 11, 6284, 11, 411, 291, 920, 362, 264, 2699, 76, 31958, 281, 1520, 337, 50976, 50976, 721, 13, 407, 1338, 11, 286, 519, 13601, 264, 2010, 7006, 281, 853, 293, 2010, 1520, 721, 1669, 257, 688, 51388, 51388, 295, 2020, 13, 5490, 13, 865, 11, 309, 390, 309, 390, 2138, 5370, 385, 337, 257, 1339, 13, 583, 411, 544, 293, 544, 51752, 51752], "temperature": 0.0, "avg_logprob": -0.1636042918973756, "compression_ratio": 1.6695652173913043, "no_caption_prob": 4.469188206712715e-05}, {"id": 669, "seek": 390980, "start": 3915.0, "end": 3922.04, "text": " I didn't like go nuts. And in this case, ultimately, like you still have the Elm compiler to check for", "tokens": [50364, 1075, 281, 652, 341, 293, 309, 286, 478, 1075, 281, 360, 437, 286, 727, 406, 360, 949, 13, 400, 309, 1669, 2020, 281, 385, 13, 50624, 50624, 286, 994, 380, 411, 352, 10483, 13, 400, 294, 341, 1389, 11, 6284, 11, 411, 291, 920, 362, 264, 2699, 76, 31958, 281, 1520, 337, 50976, 50976, 721, 13, 407, 1338, 11, 286, 519, 13601, 264, 2010, 7006, 281, 853, 293, 2010, 1520, 721, 1669, 257, 688, 51388, 51388, 295, 2020, 13, 5490, 13, 865, 11, 309, 390, 309, 390, 2138, 5370, 385, 337, 257, 1339, 13, 583, 411, 544, 293, 544, 51752, 51752], "temperature": 0.0, "avg_logprob": -0.1636042918973756, "compression_ratio": 1.6695652173913043, "no_caption_prob": 4.469188206712715e-05}, {"id": 670, "seek": 390980, "start": 3922.04, "end": 3930.28, "text": " things. So yeah, I think dropping the type variable to try and type check things makes a lot", "tokens": [50364, 1075, 281, 652, 341, 293, 309, 286, 478, 1075, 281, 360, 437, 286, 727, 406, 360, 949, 13, 400, 309, 1669, 2020, 281, 385, 13, 50624, 50624, 286, 994, 380, 411, 352, 10483, 13, 400, 294, 341, 1389, 11, 6284, 11, 411, 291, 920, 362, 264, 2699, 76, 31958, 281, 1520, 337, 50976, 50976, 721, 13, 407, 1338, 11, 286, 519, 13601, 264, 2010, 7006, 281, 853, 293, 2010, 1520, 721, 1669, 257, 688, 51388, 51388, 295, 2020, 13, 5490, 13, 865, 11, 309, 390, 309, 390, 2138, 5370, 385, 337, 257, 1339, 13, 583, 411, 544, 293, 544, 51752, 51752], "temperature": 0.0, "avg_logprob": -0.1636042918973756, "compression_ratio": 1.6695652173913043, "no_caption_prob": 4.469188206712715e-05}, {"id": 671, "seek": 390980, "start": 3930.28, "end": 3937.5600000000004, "text": " of sense. Nice. Yeah, it was it was definitely painting me for a while. But like more and more", "tokens": [50364, 1075, 281, 652, 341, 293, 309, 286, 478, 1075, 281, 360, 437, 286, 727, 406, 360, 949, 13, 400, 309, 1669, 2020, 281, 385, 13, 50624, 50624, 286, 994, 380, 411, 352, 10483, 13, 400, 294, 341, 1389, 11, 6284, 11, 411, 291, 920, 362, 264, 2699, 76, 31958, 281, 1520, 337, 50976, 50976, 721, 13, 407, 1338, 11, 286, 519, 13601, 264, 2010, 7006, 281, 853, 293, 2010, 1520, 721, 1669, 257, 688, 51388, 51388, 295, 2020, 13, 5490, 13, 865, 11, 309, 390, 309, 390, 2138, 5370, 385, 337, 257, 1339, 13, 583, 411, 544, 293, 544, 51752, 51752], "temperature": 0.0, "avg_logprob": -0.1636042918973756, "compression_ratio": 1.6695652173913043, "no_caption_prob": 4.469188206712715e-05}, {"id": 672, "seek": 393756, "start": 3937.56, "end": 3944.2799999999997, "text": " well, not more and more these days. I want to thread the needle on safety in service of", "tokens": [50364, 731, 11, 406, 544, 293, 544, 613, 1708, 13, 286, 528, 281, 7207, 264, 11037, 322, 4514, 294, 2643, 295, 50700, 50700, 19283, 13, 1779, 30, 865, 11, 286, 411, 264, 4772, 291, 600, 13159, 13, 286, 1415, 281, 2557, 322, 611, 411, 11, 50996, 50996, 291, 291, 2893, 364, 9362, 337, 337, 4084, 264, 8460, 4268, 300, 1333, 295, 1190, 428, 5125, 51412, 51412, 3089, 13, 407, 411, 264, 7576, 472, 11, 291, 445, 8460, 257, 1329, 295, 16679, 13, 407, 291, 976, 309, 16679, 597, 51800, 51800], "temperature": 0.0, "avg_logprob": -0.08451918193272182, "compression_ratio": 1.6415929203539823, "no_caption_prob": 1.750238698150497e-05}, {"id": 673, "seek": 393756, "start": 3944.2799999999997, "end": 3950.2, "text": " convenience. Right? Yeah, I like the balance you've struck. I wanted to touch on also like,", "tokens": [50364, 731, 11, 406, 544, 293, 544, 613, 1708, 13, 286, 528, 281, 7207, 264, 11037, 322, 4514, 294, 2643, 295, 50700, 50700, 19283, 13, 1779, 30, 865, 11, 286, 411, 264, 4772, 291, 600, 13159, 13, 286, 1415, 281, 2557, 322, 611, 411, 11, 50996, 50996, 291, 291, 2893, 364, 9362, 337, 337, 4084, 264, 8460, 4268, 300, 1333, 295, 1190, 428, 5125, 51412, 51412, 3089, 13, 407, 411, 264, 7576, 472, 11, 291, 445, 8460, 257, 1329, 295, 16679, 13, 407, 291, 976, 309, 16679, 597, 51800, 51800], "temperature": 0.0, "avg_logprob": -0.08451918193272182, "compression_ratio": 1.6415929203539823, "no_caption_prob": 1.750238698150497e-05}, {"id": 674, "seek": 393756, "start": 3950.2, "end": 3958.52, "text": " you you provide an API for for creating the generate programs that sort of run your generation", "tokens": [50364, 731, 11, 406, 544, 293, 544, 613, 1708, 13, 286, 528, 281, 7207, 264, 11037, 322, 4514, 294, 2643, 295, 50700, 50700, 19283, 13, 1779, 30, 865, 11, 286, 411, 264, 4772, 291, 600, 13159, 13, 286, 1415, 281, 2557, 322, 611, 411, 11, 50996, 50996, 291, 291, 2893, 364, 9362, 337, 337, 4084, 264, 8460, 4268, 300, 1333, 295, 1190, 428, 5125, 51412, 51412, 3089, 13, 407, 411, 264, 7576, 472, 11, 291, 445, 8460, 257, 1329, 295, 16679, 13, 407, 291, 976, 309, 16679, 597, 51800, 51800], "temperature": 0.0, "avg_logprob": -0.08451918193272182, "compression_ratio": 1.6415929203539823, "no_caption_prob": 1.750238698150497e-05}, {"id": 675, "seek": 393756, "start": 3958.52, "end": 3966.2799999999997, "text": " code. So like the default one, you just generate a list of modules. So you give it modules which", "tokens": [50364, 731, 11, 406, 544, 293, 544, 613, 1708, 13, 286, 528, 281, 7207, 264, 11037, 322, 4514, 294, 2643, 295, 50700, 50700, 19283, 13, 1779, 30, 865, 11, 286, 411, 264, 4772, 291, 600, 13159, 13, 286, 1415, 281, 2557, 322, 611, 411, 11, 50996, 50996, 291, 291, 2893, 364, 9362, 337, 337, 4084, 264, 8460, 4268, 300, 1333, 295, 1190, 428, 5125, 51412, 51412, 3089, 13, 407, 411, 264, 7576, 472, 11, 291, 445, 8460, 257, 1329, 295, 16679, 13, 407, 291, 976, 309, 16679, 597, 51800, 51800], "temperature": 0.0, "avg_logprob": -0.08451918193272182, "compression_ratio": 1.6415929203539823, "no_caption_prob": 1.750238698150497e-05}, {"id": 676, "seek": 396628, "start": 3966.28, "end": 3971.96, "text": " have declarations which have expressions in them and use all this Elm code gen goodness to", "tokens": [50364, 362, 16694, 763, 597, 362, 15277, 294, 552, 293, 764, 439, 341, 2699, 76, 3089, 1049, 8387, 281, 50648, 50680, 733, 295, 11750, 8460, 7098, 293, 309, 293, 309, 23930, 7098, 562, 291, 1190, 2699, 76, 3089, 1049, 1190, 13, 50920, 50920, 583, 550, 291, 600, 658, 512, 512, 2098, 281, 1884, 257, 1461, 300, 575, 23265, 13, 407, 411, 291, 600, 658, 51236, 51284, 490, 31828, 11, 597, 291, 976, 309, 257, 31828, 979, 19866, 11, 293, 550, 291, 483, 2105, 281, 729, 23265, 337, 51588, 51588, 17746, 428, 1461, 13, 407, 980, 505, 257, 707, 857, 466, 729, 733, 295, 854, 433, 13, 4894, 13, 51792, 51840], "temperature": 0.0, "avg_logprob": -0.08093101913864548, "compression_ratio": 1.743083003952569, "no_caption_prob": 1.6963444068096578e-05}, {"id": 677, "seek": 396628, "start": 3972.6000000000004, "end": 3977.4, "text": " kind of safely generate files and it and it outputs files when you run Elm code gen run.", "tokens": [50364, 362, 16694, 763, 597, 362, 15277, 294, 552, 293, 764, 439, 341, 2699, 76, 3089, 1049, 8387, 281, 50648, 50680, 733, 295, 11750, 8460, 7098, 293, 309, 293, 309, 23930, 7098, 562, 291, 1190, 2699, 76, 3089, 1049, 1190, 13, 50920, 50920, 583, 550, 291, 600, 658, 512, 512, 2098, 281, 1884, 257, 1461, 300, 575, 23265, 13, 407, 411, 291, 600, 658, 51236, 51284, 490, 31828, 11, 597, 291, 976, 309, 257, 31828, 979, 19866, 11, 293, 550, 291, 483, 2105, 281, 729, 23265, 337, 51588, 51588, 17746, 428, 1461, 13, 407, 980, 505, 257, 707, 857, 466, 729, 733, 295, 854, 433, 13, 4894, 13, 51792, 51840], "temperature": 0.0, "avg_logprob": -0.08093101913864548, "compression_ratio": 1.743083003952569, "no_caption_prob": 1.6963444068096578e-05}, {"id": 678, "seek": 396628, "start": 3977.4, "end": 3983.7200000000003, "text": " But then you've got some some ways to create a program that has flags. So like you've got", "tokens": [50364, 362, 16694, 763, 597, 362, 15277, 294, 552, 293, 764, 439, 341, 2699, 76, 3089, 1049, 8387, 281, 50648, 50680, 733, 295, 11750, 8460, 7098, 293, 309, 293, 309, 23930, 7098, 562, 291, 1190, 2699, 76, 3089, 1049, 1190, 13, 50920, 50920, 583, 550, 291, 600, 658, 512, 512, 2098, 281, 1884, 257, 1461, 300, 575, 23265, 13, 407, 411, 291, 600, 658, 51236, 51284, 490, 31828, 11, 597, 291, 976, 309, 257, 31828, 979, 19866, 11, 293, 550, 291, 483, 2105, 281, 729, 23265, 337, 51588, 51588, 17746, 428, 1461, 13, 407, 980, 505, 257, 707, 857, 466, 729, 733, 295, 854, 433, 13, 4894, 13, 51792, 51840], "temperature": 0.0, "avg_logprob": -0.08093101913864548, "compression_ratio": 1.743083003952569, "no_caption_prob": 1.6963444068096578e-05}, {"id": 679, "seek": 396628, "start": 3984.6800000000003, "end": 3990.76, "text": " from JSON, which you give it a JSON decoder, and then you get access to those flags for", "tokens": [50364, 362, 16694, 763, 597, 362, 15277, 294, 552, 293, 764, 439, 341, 2699, 76, 3089, 1049, 8387, 281, 50648, 50680, 733, 295, 11750, 8460, 7098, 293, 309, 293, 309, 23930, 7098, 562, 291, 1190, 2699, 76, 3089, 1049, 1190, 13, 50920, 50920, 583, 550, 291, 600, 658, 512, 512, 2098, 281, 1884, 257, 1461, 300, 575, 23265, 13, 407, 411, 291, 600, 658, 51236, 51284, 490, 31828, 11, 597, 291, 976, 309, 257, 31828, 979, 19866, 11, 293, 550, 291, 483, 2105, 281, 729, 23265, 337, 51588, 51588, 17746, 428, 1461, 13, 407, 980, 505, 257, 707, 857, 466, 729, 733, 295, 854, 433, 13, 4894, 13, 51792, 51840], "temperature": 0.0, "avg_logprob": -0.08093101913864548, "compression_ratio": 1.743083003952569, "no_caption_prob": 1.6963444068096578e-05}, {"id": 680, "seek": 396628, "start": 3990.76, "end": 3994.84, "text": " generating your program. So tell us a little bit about those kind of helpers. Sure.", "tokens": [50364, 362, 16694, 763, 597, 362, 15277, 294, 552, 293, 764, 439, 341, 2699, 76, 3089, 1049, 8387, 281, 50648, 50680, 733, 295, 11750, 8460, 7098, 293, 309, 293, 309, 23930, 7098, 562, 291, 1190, 2699, 76, 3089, 1049, 1190, 13, 50920, 50920, 583, 550, 291, 600, 658, 512, 512, 2098, 281, 1884, 257, 1461, 300, 575, 23265, 13, 407, 411, 291, 600, 658, 51236, 51284, 490, 31828, 11, 597, 291, 976, 309, 257, 31828, 979, 19866, 11, 293, 550, 291, 483, 2105, 281, 729, 23265, 337, 51588, 51588, 17746, 428, 1461, 13, 407, 980, 505, 257, 707, 857, 466, 729, 733, 295, 854, 433, 13, 4894, 13, 51792, 51840], "temperature": 0.0, "avg_logprob": -0.08093101913864548, "compression_ratio": 1.743083003952569, "no_caption_prob": 1.6963444068096578e-05}, {"id": 681, "seek": 399484, "start": 3994.84, "end": 4001.88, "text": " Yeah, so in the Elm code gen, the CLI, the thing that runs stuff, the CLI, there's some JavaScript,", "tokens": [50364, 865, 11, 370, 294, 264, 2699, 76, 3089, 1049, 11, 264, 12855, 40, 11, 264, 551, 300, 6676, 1507, 11, 264, 12855, 40, 11, 456, 311, 512, 15778, 11, 50716, 50716, 597, 307, 767, 588, 2199, 13, 759, 291, 528, 281, 1190, 364, 2699, 76, 724, 1228, 9984, 11, 498, 300, 8847, 291, 11, 51028, 51028, 309, 311, 17600, 2199, 13, 467, 311, 1936, 411, 11, 722, 341, 2699, 76, 3861, 13, 759, 291, 362, 18160, 11, 51284, 51284, 1310, 291, 751, 281, 309, 538, 18160, 13, 583, 370, 2261, 264, 8026, 11, 2699, 76, 3089, 1049, 307, 445, 11, 291, 458, 11, 2891, 51652, 51652], "temperature": 0.0, "avg_logprob": -0.1463361934379295, "compression_ratio": 1.6538461538461537, "no_caption_prob": 3.269719672971405e-05}, {"id": 682, "seek": 399484, "start": 4001.88, "end": 4008.1200000000003, "text": " which is actually very simple. If you want to run an Elm app using node, if that interests you,", "tokens": [50364, 865, 11, 370, 294, 264, 2699, 76, 3089, 1049, 11, 264, 12855, 40, 11, 264, 551, 300, 6676, 1507, 11, 264, 12855, 40, 11, 456, 311, 512, 15778, 11, 50716, 50716, 597, 307, 767, 588, 2199, 13, 759, 291, 528, 281, 1190, 364, 2699, 76, 724, 1228, 9984, 11, 498, 300, 8847, 291, 11, 51028, 51028, 309, 311, 17600, 2199, 13, 467, 311, 1936, 411, 11, 722, 341, 2699, 76, 3861, 13, 759, 291, 362, 18160, 11, 51284, 51284, 1310, 291, 751, 281, 309, 538, 18160, 13, 583, 370, 2261, 264, 8026, 11, 2699, 76, 3089, 1049, 307, 445, 11, 291, 458, 11, 2891, 51652, 51652], "temperature": 0.0, "avg_logprob": -0.1463361934379295, "compression_ratio": 1.6538461538461537, "no_caption_prob": 3.269719672971405e-05}, {"id": 683, "seek": 399484, "start": 4008.1200000000003, "end": 4013.2400000000002, "text": " it's surprisingly simple. It's basically like, start this Elm application. If you have ports,", "tokens": [50364, 865, 11, 370, 294, 264, 2699, 76, 3089, 1049, 11, 264, 12855, 40, 11, 264, 551, 300, 6676, 1507, 11, 264, 12855, 40, 11, 456, 311, 512, 15778, 11, 50716, 50716, 597, 307, 767, 588, 2199, 13, 759, 291, 528, 281, 1190, 364, 2699, 76, 724, 1228, 9984, 11, 498, 300, 8847, 291, 11, 51028, 51028, 309, 311, 17600, 2199, 13, 467, 311, 1936, 411, 11, 722, 341, 2699, 76, 3861, 13, 759, 291, 362, 18160, 11, 51284, 51284, 1310, 291, 751, 281, 309, 538, 18160, 13, 583, 370, 2261, 264, 8026, 11, 2699, 76, 3089, 1049, 307, 445, 11, 291, 458, 11, 2891, 51652, 51652], "temperature": 0.0, "avg_logprob": -0.1463361934379295, "compression_ratio": 1.6538461538461537, "no_caption_prob": 3.269719672971405e-05}, {"id": 684, "seek": 399484, "start": 4013.2400000000002, "end": 4020.6000000000004, "text": " maybe you talk to it by ports. But so behind the scenes, Elm code gen is just, you know, starting", "tokens": [50364, 865, 11, 370, 294, 264, 2699, 76, 3089, 1049, 11, 264, 12855, 40, 11, 264, 551, 300, 6676, 1507, 11, 264, 12855, 40, 11, 456, 311, 512, 15778, 11, 50716, 50716, 597, 307, 767, 588, 2199, 13, 759, 291, 528, 281, 1190, 364, 2699, 76, 724, 1228, 9984, 11, 498, 300, 8847, 291, 11, 51028, 51028, 309, 311, 17600, 2199, 13, 467, 311, 1936, 411, 11, 722, 341, 2699, 76, 3861, 13, 759, 291, 362, 18160, 11, 51284, 51284, 1310, 291, 751, 281, 309, 538, 18160, 13, 583, 370, 2261, 264, 8026, 11, 2699, 76, 3089, 1049, 307, 445, 11, 291, 458, 11, 2891, 51652, 51652], "temperature": 0.0, "avg_logprob": -0.1463361934379295, "compression_ratio": 1.6538461538461537, "no_caption_prob": 3.269719672971405e-05}, {"id": 685, "seek": 402060, "start": 4020.6, "end": 4025.3199999999997, "text": " your own application and sort of it has two ports, which is basically I think there's a success and", "tokens": [50364, 428, 1065, 3861, 293, 1333, 295, 309, 575, 732, 18160, 11, 597, 307, 1936, 286, 519, 456, 311, 257, 2245, 293, 50600, 50600, 257, 7763, 2436, 1391, 727, 362, 668, 411, 472, 295, 552, 13, 583, 293, 309, 311, 9650, 257, 1629, 3909, 295, 50892, 50892, 31828, 294, 1293, 4881, 13, 400, 291, 434, 611, 1075, 281, 1320, 1412, 807, 264, 23265, 13, 407, 437, 286, 1352, 294, 881, 51260, 51260, 3331, 11, 264, 551, 300, 291, 434, 264, 881, 2689, 1389, 300, 291, 434, 884, 307, 1940, 512, 8320, 4009, 51588, 51588], "temperature": 0.0, "avg_logprob": -0.17153011121247944, "compression_ratio": 1.5737051792828685, "no_caption_prob": 9.169269469566643e-05}, {"id": 686, "seek": 402060, "start": 4025.3199999999997, "end": 4031.16, "text": " a failure port probably could have been like one of them. But and it's expecting a certain shape of", "tokens": [50364, 428, 1065, 3861, 293, 1333, 295, 309, 575, 732, 18160, 11, 597, 307, 1936, 286, 519, 456, 311, 257, 2245, 293, 50600, 50600, 257, 7763, 2436, 1391, 727, 362, 668, 411, 472, 295, 552, 13, 583, 293, 309, 311, 9650, 257, 1629, 3909, 295, 50892, 50892, 31828, 294, 1293, 4881, 13, 400, 291, 434, 611, 1075, 281, 1320, 1412, 807, 264, 23265, 13, 407, 437, 286, 1352, 294, 881, 51260, 51260, 3331, 11, 264, 551, 300, 291, 434, 264, 881, 2689, 1389, 300, 291, 434, 884, 307, 1940, 512, 8320, 4009, 51588, 51588], "temperature": 0.0, "avg_logprob": -0.17153011121247944, "compression_ratio": 1.5737051792828685, "no_caption_prob": 9.169269469566643e-05}, {"id": 687, "seek": 402060, "start": 4031.16, "end": 4038.52, "text": " JSON in both sides. And you're also able to pass data through the flags. So what I found in most", "tokens": [50364, 428, 1065, 3861, 293, 1333, 295, 309, 575, 732, 18160, 11, 597, 307, 1936, 286, 519, 456, 311, 257, 2245, 293, 50600, 50600, 257, 7763, 2436, 1391, 727, 362, 668, 411, 472, 295, 552, 13, 583, 293, 309, 311, 9650, 257, 1629, 3909, 295, 50892, 50892, 31828, 294, 1293, 4881, 13, 400, 291, 434, 611, 1075, 281, 1320, 1412, 807, 264, 23265, 13, 407, 437, 286, 1352, 294, 881, 51260, 51260, 3331, 11, 264, 551, 300, 291, 434, 264, 881, 2689, 1389, 300, 291, 434, 884, 307, 1940, 512, 8320, 4009, 51588, 51588], "temperature": 0.0, "avg_logprob": -0.17153011121247944, "compression_ratio": 1.5737051792828685, "no_caption_prob": 9.169269469566643e-05}, {"id": 688, "seek": 402060, "start": 4038.52, "end": 4045.08, "text": " cases, the thing that you're the most common case that you're doing is taking some external source", "tokens": [50364, 428, 1065, 3861, 293, 1333, 295, 309, 575, 732, 18160, 11, 597, 307, 1936, 286, 519, 456, 311, 257, 2245, 293, 50600, 50600, 257, 7763, 2436, 1391, 727, 362, 668, 411, 472, 295, 552, 13, 583, 293, 309, 311, 9650, 257, 1629, 3909, 295, 50892, 50892, 31828, 294, 1293, 4881, 13, 400, 291, 434, 611, 1075, 281, 1320, 1412, 807, 264, 23265, 13, 407, 437, 286, 1352, 294, 881, 51260, 51260, 3331, 11, 264, 551, 300, 291, 434, 264, 881, 2689, 1389, 300, 291, 434, 884, 307, 1940, 512, 8320, 4009, 51588, 51588], "temperature": 0.0, "avg_logprob": -0.17153011121247944, "compression_ratio": 1.5737051792828685, "no_caption_prob": 9.169269469566643e-05}, {"id": 689, "seek": 404508, "start": 4045.08, "end": 4050.92, "text": " of data and you want to do something with it. So you may like the most convenient way to do that", "tokens": [50364, 295, 1412, 293, 291, 528, 281, 360, 746, 365, 309, 13, 407, 291, 815, 411, 264, 881, 10851, 636, 281, 360, 300, 50656, 50656, 307, 411, 286, 478, 516, 281, 652, 364, 9362, 818, 293, 483, 512, 31828, 293, 550, 286, 478, 516, 281, 1011, 300, 31828, 281, 50928, 50928, 2699, 76, 3089, 1049, 293, 309, 311, 516, 281, 360, 257, 551, 13, 407, 286, 1415, 281, 652, 300, 411, 445, 1687, 11, 1687, 10851, 13, 51220, 51220, 407, 411, 294, 264, 2699, 76, 3089, 1049, 12855, 40, 11, 291, 393, 1936, 445, 584, 411, 2699, 76, 3089, 1049, 1901, 1190, 1901, 23265, 11, 51628, 51628], "temperature": 0.0, "avg_logprob": -0.13921596385814525, "compression_ratio": 1.8333333333333333, "no_caption_prob": 0.0001419996697222814}, {"id": 690, "seek": 404508, "start": 4050.92, "end": 4056.36, "text": " is like I'm going to make an API call and get some JSON and then I'm going to hand that JSON to", "tokens": [50364, 295, 1412, 293, 291, 528, 281, 360, 746, 365, 309, 13, 407, 291, 815, 411, 264, 881, 10851, 636, 281, 360, 300, 50656, 50656, 307, 411, 286, 478, 516, 281, 652, 364, 9362, 818, 293, 483, 512, 31828, 293, 550, 286, 478, 516, 281, 1011, 300, 31828, 281, 50928, 50928, 2699, 76, 3089, 1049, 293, 309, 311, 516, 281, 360, 257, 551, 13, 407, 286, 1415, 281, 652, 300, 411, 445, 1687, 11, 1687, 10851, 13, 51220, 51220, 407, 411, 294, 264, 2699, 76, 3089, 1049, 12855, 40, 11, 291, 393, 1936, 445, 584, 411, 2699, 76, 3089, 1049, 1901, 1190, 1901, 23265, 11, 51628, 51628], "temperature": 0.0, "avg_logprob": -0.13921596385814525, "compression_ratio": 1.8333333333333333, "no_caption_prob": 0.0001419996697222814}, {"id": 691, "seek": 404508, "start": 4056.36, "end": 4062.2, "text": " Elm code gen and it's going to do a thing. So I wanted to make that like just super, super convenient.", "tokens": [50364, 295, 1412, 293, 291, 528, 281, 360, 746, 365, 309, 13, 407, 291, 815, 411, 264, 881, 10851, 636, 281, 360, 300, 50656, 50656, 307, 411, 286, 478, 516, 281, 652, 364, 9362, 818, 293, 483, 512, 31828, 293, 550, 286, 478, 516, 281, 1011, 300, 31828, 281, 50928, 50928, 2699, 76, 3089, 1049, 293, 309, 311, 516, 281, 360, 257, 551, 13, 407, 286, 1415, 281, 652, 300, 411, 445, 1687, 11, 1687, 10851, 13, 51220, 51220, 407, 411, 294, 264, 2699, 76, 3089, 1049, 12855, 40, 11, 291, 393, 1936, 445, 584, 411, 2699, 76, 3089, 1049, 1901, 1190, 1901, 23265, 11, 51628, 51628], "temperature": 0.0, "avg_logprob": -0.13921596385814525, "compression_ratio": 1.8333333333333333, "no_caption_prob": 0.0001419996697222814}, {"id": 692, "seek": 404508, "start": 4062.2, "end": 4070.36, "text": " So like in the Elm code gen CLI, you can basically just say like Elm code gen space run space flags,", "tokens": [50364, 295, 1412, 293, 291, 528, 281, 360, 746, 365, 309, 13, 407, 291, 815, 411, 264, 881, 10851, 636, 281, 360, 300, 50656, 50656, 307, 411, 286, 478, 516, 281, 652, 364, 9362, 818, 293, 483, 512, 31828, 293, 550, 286, 478, 516, 281, 1011, 300, 31828, 281, 50928, 50928, 2699, 76, 3089, 1049, 293, 309, 311, 516, 281, 360, 257, 551, 13, 407, 286, 1415, 281, 652, 300, 411, 445, 1687, 11, 1687, 10851, 13, 51220, 51220, 407, 411, 294, 264, 2699, 76, 3089, 1049, 12855, 40, 11, 291, 393, 1936, 445, 584, 411, 2699, 76, 3089, 1049, 1901, 1190, 1901, 23265, 11, 51628, 51628], "temperature": 0.0, "avg_logprob": -0.13921596385814525, "compression_ratio": 1.8333333333333333, "no_caption_prob": 0.0001419996697222814}, {"id": 693, "seek": 407036, "start": 4070.36, "end": 4077.56, "text": " and then you hand it a JSON file and it will read that. And then you'll have to have a decoder on", "tokens": [50364, 293, 550, 291, 1011, 309, 257, 31828, 3991, 293, 309, 486, 1401, 300, 13, 400, 550, 291, 603, 362, 281, 362, 257, 979, 19866, 322, 50724, 50724, 428, 979, 19866, 1252, 13, 583, 293, 550, 291, 393, 733, 295, 360, 2035, 13, 400, 550, 456, 307, 611, 512, 1507, 51068, 51108, 281, 312, 1075, 281, 689, 309, 311, 411, 1310, 264, 544, 7339, 3331, 291, 733, 295, 528, 341, 689, 309, 311, 51332, 51332, 411, 1310, 291, 528, 281, 312, 1075, 281, 3507, 309, 13, 1042, 11, 291, 2138, 528, 281, 312, 1075, 281, 3507, 13603, 11, 51520, 51520, 558, 30, 1743, 11, 411, 11, 731, 11, 291, 458, 11, 2147, 1696, 3105, 641, 9362, 11, 411, 294, 341, 2158, 307, 406, 2035, 13, 51800, 51836], "temperature": 0.0, "avg_logprob": -0.14800864458084106, "compression_ratio": 1.8932806324110671, "no_caption_prob": 7.140984234865755e-05}, {"id": 694, "seek": 407036, "start": 4077.56, "end": 4084.44, "text": " your decoder side. But and then you can kind of do whatever. And then there is also some stuff", "tokens": [50364, 293, 550, 291, 1011, 309, 257, 31828, 3991, 293, 309, 486, 1401, 300, 13, 400, 550, 291, 603, 362, 281, 362, 257, 979, 19866, 322, 50724, 50724, 428, 979, 19866, 1252, 13, 583, 293, 550, 291, 393, 733, 295, 360, 2035, 13, 400, 550, 456, 307, 611, 512, 1507, 51068, 51108, 281, 312, 1075, 281, 689, 309, 311, 411, 1310, 264, 544, 7339, 3331, 291, 733, 295, 528, 341, 689, 309, 311, 51332, 51332, 411, 1310, 291, 528, 281, 312, 1075, 281, 3507, 309, 13, 1042, 11, 291, 2138, 528, 281, 312, 1075, 281, 3507, 13603, 11, 51520, 51520, 558, 30, 1743, 11, 411, 11, 731, 11, 291, 458, 11, 2147, 1696, 3105, 641, 9362, 11, 411, 294, 341, 2158, 307, 406, 2035, 13, 51800, 51836], "temperature": 0.0, "avg_logprob": -0.14800864458084106, "compression_ratio": 1.8932806324110671, "no_caption_prob": 7.140984234865755e-05}, {"id": 695, "seek": 407036, "start": 4085.2400000000002, "end": 4089.7200000000003, "text": " to be able to where it's like maybe the more advanced cases you kind of want this where it's", "tokens": [50364, 293, 550, 291, 1011, 309, 257, 31828, 3991, 293, 309, 486, 1401, 300, 13, 400, 550, 291, 603, 362, 281, 362, 257, 979, 19866, 322, 50724, 50724, 428, 979, 19866, 1252, 13, 583, 293, 550, 291, 393, 733, 295, 360, 2035, 13, 400, 550, 456, 307, 611, 512, 1507, 51068, 51108, 281, 312, 1075, 281, 689, 309, 311, 411, 1310, 264, 544, 7339, 3331, 291, 733, 295, 528, 341, 689, 309, 311, 51332, 51332, 411, 1310, 291, 528, 281, 312, 1075, 281, 3507, 309, 13, 1042, 11, 291, 2138, 528, 281, 312, 1075, 281, 3507, 13603, 11, 51520, 51520, 558, 30, 1743, 11, 411, 11, 731, 11, 291, 458, 11, 2147, 1696, 3105, 641, 9362, 11, 411, 294, 341, 2158, 307, 406, 2035, 13, 51800, 51836], "temperature": 0.0, "avg_logprob": -0.14800864458084106, "compression_ratio": 1.8932806324110671, "no_caption_prob": 7.140984234865755e-05}, {"id": 696, "seek": 407036, "start": 4089.7200000000003, "end": 4093.48, "text": " like maybe you want to be able to throw it. Well, you definitely want to be able to throw errors,", "tokens": [50364, 293, 550, 291, 1011, 309, 257, 31828, 3991, 293, 309, 486, 1401, 300, 13, 400, 550, 291, 603, 362, 281, 362, 257, 979, 19866, 322, 50724, 50724, 428, 979, 19866, 1252, 13, 583, 293, 550, 291, 393, 733, 295, 360, 2035, 13, 400, 550, 456, 307, 611, 512, 1507, 51068, 51108, 281, 312, 1075, 281, 689, 309, 311, 411, 1310, 264, 544, 7339, 3331, 291, 733, 295, 528, 341, 689, 309, 311, 51332, 51332, 411, 1310, 291, 528, 281, 312, 1075, 281, 3507, 309, 13, 1042, 11, 291, 2138, 528, 281, 312, 1075, 281, 3507, 13603, 11, 51520, 51520, 558, 30, 1743, 11, 411, 11, 731, 11, 291, 458, 11, 2147, 1696, 3105, 641, 9362, 11, 411, 294, 341, 2158, 307, 406, 2035, 13, 51800, 51836], "temperature": 0.0, "avg_logprob": -0.14800864458084106, "compression_ratio": 1.8932806324110671, "no_caption_prob": 7.140984234865755e-05}, {"id": 697, "seek": 407036, "start": 4093.48, "end": 4099.08, "text": " right? Like, like, well, you know, figma changed their API, like in this value is not whatever.", "tokens": [50364, 293, 550, 291, 1011, 309, 257, 31828, 3991, 293, 309, 486, 1401, 300, 13, 400, 550, 291, 603, 362, 281, 362, 257, 979, 19866, 322, 50724, 50724, 428, 979, 19866, 1252, 13, 583, 293, 550, 291, 393, 733, 295, 360, 2035, 13, 400, 550, 456, 307, 611, 512, 1507, 51068, 51108, 281, 312, 1075, 281, 689, 309, 311, 411, 1310, 264, 544, 7339, 3331, 291, 733, 295, 528, 341, 689, 309, 311, 51332, 51332, 411, 1310, 291, 528, 281, 312, 1075, 281, 3507, 309, 13, 1042, 11, 291, 2138, 528, 281, 312, 1075, 281, 3507, 13603, 11, 51520, 51520, 558, 30, 1743, 11, 411, 11, 731, 11, 291, 458, 11, 2147, 1696, 3105, 641, 9362, 11, 411, 294, 341, 2158, 307, 406, 2035, 13, 51800, 51836], "temperature": 0.0, "avg_logprob": -0.14800864458084106, "compression_ratio": 1.8932806324110671, "no_caption_prob": 7.140984234865755e-05}, {"id": 698, "seek": 409908, "start": 4099.08, "end": 4105.88, "text": " Or in some cases, I believe there's an affordance for it, like just talking to the terminal saying", "tokens": [50364, 1610, 294, 512, 3331, 11, 286, 1697, 456, 311, 364, 6157, 719, 337, 309, 11, 411, 445, 1417, 281, 264, 14709, 1566, 50704, 50704, 411, 11, 510, 311, 257, 9164, 11, 510, 311, 2035, 13, 407, 309, 390, 534, 445, 1382, 281, 652, 915, 437, 366, 729, 50956, 50956, 534, 10851, 721, 293, 11, 293, 445, 652, 552, 10851, 13, 407, 264, 881, 881, 10851, 472, 390, 51272, 51272, 31828, 1412, 13, 759, 309, 311, 406, 11, 498, 309, 1177, 380, 362, 264, 31828, 3889, 970, 11, 309, 603, 445, 1320, 309, 294, 382, 257, 2487, 3991, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.13044108596502565, "compression_ratio": 1.7074235807860263, "no_caption_prob": 8.091854397207499e-05}, {"id": 699, "seek": 409908, "start": 4105.88, "end": 4110.92, "text": " like, here's a warning, here's whatever. So it was really just trying to make find what are those", "tokens": [50364, 1610, 294, 512, 3331, 11, 286, 1697, 456, 311, 364, 6157, 719, 337, 309, 11, 411, 445, 1417, 281, 264, 14709, 1566, 50704, 50704, 411, 11, 510, 311, 257, 9164, 11, 510, 311, 2035, 13, 407, 309, 390, 534, 445, 1382, 281, 652, 915, 437, 366, 729, 50956, 50956, 534, 10851, 721, 293, 11, 293, 445, 652, 552, 10851, 13, 407, 264, 881, 881, 10851, 472, 390, 51272, 51272, 31828, 1412, 13, 759, 309, 311, 406, 11, 498, 309, 1177, 380, 362, 264, 31828, 3889, 970, 11, 309, 603, 445, 1320, 309, 294, 382, 257, 2487, 3991, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.13044108596502565, "compression_ratio": 1.7074235807860263, "no_caption_prob": 8.091854397207499e-05}, {"id": 700, "seek": 409908, "start": 4110.92, "end": 4117.24, "text": " really convenient things and, and just make them convenient. So the most most convenient one was", "tokens": [50364, 1610, 294, 512, 3331, 11, 286, 1697, 456, 311, 364, 6157, 719, 337, 309, 11, 411, 445, 1417, 281, 264, 14709, 1566, 50704, 50704, 411, 11, 510, 311, 257, 9164, 11, 510, 311, 2035, 13, 407, 309, 390, 534, 445, 1382, 281, 652, 915, 437, 366, 729, 50956, 50956, 534, 10851, 721, 293, 11, 293, 445, 652, 552, 10851, 13, 407, 264, 881, 881, 10851, 472, 390, 51272, 51272, 31828, 1412, 13, 759, 309, 311, 406, 11, 498, 309, 1177, 380, 362, 264, 31828, 3889, 970, 11, 309, 603, 445, 1320, 309, 294, 382, 257, 2487, 3991, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.13044108596502565, "compression_ratio": 1.7074235807860263, "no_caption_prob": 8.091854397207499e-05}, {"id": 701, "seek": 409908, "start": 4117.24, "end": 4123.08, "text": " JSON data. If it's not, if it doesn't have the JSON suffix, it'll just pass it in as a text file.", "tokens": [50364, 1610, 294, 512, 3331, 11, 286, 1697, 456, 311, 364, 6157, 719, 337, 309, 11, 411, 445, 1417, 281, 264, 14709, 1566, 50704, 50704, 411, 11, 510, 311, 257, 9164, 11, 510, 311, 2035, 13, 407, 309, 390, 534, 445, 1382, 281, 652, 915, 437, 366, 729, 50956, 50956, 534, 10851, 721, 293, 11, 293, 445, 652, 552, 10851, 13, 407, 264, 881, 881, 10851, 472, 390, 51272, 51272, 31828, 1412, 13, 759, 309, 311, 406, 11, 498, 309, 1177, 380, 362, 264, 31828, 3889, 970, 11, 309, 603, 445, 1320, 309, 294, 382, 257, 2487, 3991, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.13044108596502565, "compression_ratio": 1.7074235807860263, "no_caption_prob": 8.091854397207499e-05}, {"id": 702, "seek": 412308, "start": 4123.08, "end": 4129.32, "text": " So markdown, great, you'll get a markdown file, like, you can do whatever. I think there's probably", "tokens": [50364, 407, 1491, 5093, 11, 869, 11, 291, 603, 483, 257, 1491, 5093, 3991, 11, 411, 11, 291, 393, 360, 2035, 13, 286, 519, 456, 311, 1391, 50676, 50676, 512, 4497, 1507, 321, 393, 360, 456, 13, 318, 2749, 295, 3494, 300, 366, 1880, 307, 411, 11, 411, 11, 286, 458, 50944, 50944, 9116, 365, 806, 76, 2117, 11, 597, 307, 257, 588, 1627, 4455, 11, 390, 1237, 412, 445, 428, 21120, 3877, 295, 51300, 51300, 428, 3028, 11, 293, 1228, 300, 281, 3332, 428, 18242, 13, 286, 519, 300, 311, 300, 311, 1687, 46401, 11, 558, 30, 51548, 51548, 663, 1355, 264, 4009, 295, 3494, 307, 264, 307, 264, 21120, 3877, 13, 400, 456, 311, 11, 456, 311, 572, 411, 11, 51744, 51744], "temperature": 0.0, "avg_logprob": -0.1326876983642578, "compression_ratio": 1.7428571428571429, "no_caption_prob": 0.0003249500587116927}, {"id": 703, "seek": 412308, "start": 4129.32, "end": 4134.68, "text": " some additional stuff we can do there. Sources of truth that are interesting is like, like, I know", "tokens": [50364, 407, 1491, 5093, 11, 869, 11, 291, 603, 483, 257, 1491, 5093, 3991, 11, 411, 11, 291, 393, 360, 2035, 13, 286, 519, 456, 311, 1391, 50676, 50676, 512, 4497, 1507, 321, 393, 360, 456, 13, 318, 2749, 295, 3494, 300, 366, 1880, 307, 411, 11, 411, 11, 286, 458, 50944, 50944, 9116, 365, 806, 76, 2117, 11, 597, 307, 257, 588, 1627, 4455, 11, 390, 1237, 412, 445, 428, 21120, 3877, 295, 51300, 51300, 428, 3028, 11, 293, 1228, 300, 281, 3332, 428, 18242, 13, 286, 519, 300, 311, 300, 311, 1687, 46401, 11, 558, 30, 51548, 51548, 663, 1355, 264, 4009, 295, 3494, 307, 264, 307, 264, 21120, 3877, 13, 400, 456, 311, 11, 456, 311, 572, 411, 11, 51744, 51744], "temperature": 0.0, "avg_logprob": -0.1326876983642578, "compression_ratio": 1.7428571428571429, "no_caption_prob": 0.0003249500587116927}, {"id": 704, "seek": 412308, "start": 4134.68, "end": 4141.8, "text": " Ryan with elm land, which is a very cool projects, was looking at just your directory structure of", "tokens": [50364, 407, 1491, 5093, 11, 869, 11, 291, 603, 483, 257, 1491, 5093, 3991, 11, 411, 11, 291, 393, 360, 2035, 13, 286, 519, 456, 311, 1391, 50676, 50676, 512, 4497, 1507, 321, 393, 360, 456, 13, 318, 2749, 295, 3494, 300, 366, 1880, 307, 411, 11, 411, 11, 286, 458, 50944, 50944, 9116, 365, 806, 76, 2117, 11, 597, 307, 257, 588, 1627, 4455, 11, 390, 1237, 412, 445, 428, 21120, 3877, 295, 51300, 51300, 428, 3028, 11, 293, 1228, 300, 281, 3332, 428, 18242, 13, 286, 519, 300, 311, 300, 311, 1687, 46401, 11, 558, 30, 51548, 51548, 663, 1355, 264, 4009, 295, 3494, 307, 264, 307, 264, 21120, 3877, 13, 400, 456, 311, 11, 456, 311, 572, 411, 11, 51744, 51744], "temperature": 0.0, "avg_logprob": -0.1326876983642578, "compression_ratio": 1.7428571428571429, "no_caption_prob": 0.0003249500587116927}, {"id": 705, "seek": 412308, "start": 4141.8, "end": 4146.76, "text": " your page, and using that to drive your routes. I think that's that's super insightful, right?", "tokens": [50364, 407, 1491, 5093, 11, 869, 11, 291, 603, 483, 257, 1491, 5093, 3991, 11, 411, 11, 291, 393, 360, 2035, 13, 286, 519, 456, 311, 1391, 50676, 50676, 512, 4497, 1507, 321, 393, 360, 456, 13, 318, 2749, 295, 3494, 300, 366, 1880, 307, 411, 11, 411, 11, 286, 458, 50944, 50944, 9116, 365, 806, 76, 2117, 11, 597, 307, 257, 588, 1627, 4455, 11, 390, 1237, 412, 445, 428, 21120, 3877, 295, 51300, 51300, 428, 3028, 11, 293, 1228, 300, 281, 3332, 428, 18242, 13, 286, 519, 300, 311, 300, 311, 1687, 46401, 11, 558, 30, 51548, 51548, 663, 1355, 264, 4009, 295, 3494, 307, 264, 307, 264, 21120, 3877, 13, 400, 456, 311, 11, 456, 311, 572, 411, 11, 51744, 51744], "temperature": 0.0, "avg_logprob": -0.1326876983642578, "compression_ratio": 1.7428571428571429, "no_caption_prob": 0.0003249500587116927}, {"id": 706, "seek": 412308, "start": 4146.76, "end": 4150.68, "text": " That means the source of truth is the is the directory structure. And there's, there's no like,", "tokens": [50364, 407, 1491, 5093, 11, 869, 11, 291, 603, 483, 257, 1491, 5093, 3991, 11, 411, 11, 291, 393, 360, 2035, 13, 286, 519, 456, 311, 1391, 50676, 50676, 512, 4497, 1507, 321, 393, 360, 456, 13, 318, 2749, 295, 3494, 300, 366, 1880, 307, 411, 11, 411, 11, 286, 458, 50944, 50944, 9116, 365, 806, 76, 2117, 11, 597, 307, 257, 588, 1627, 4455, 11, 390, 1237, 412, 445, 428, 21120, 3877, 295, 51300, 51300, 428, 3028, 11, 293, 1228, 300, 281, 3332, 428, 18242, 13, 286, 519, 300, 311, 300, 311, 1687, 46401, 11, 558, 30, 51548, 51548, 663, 1355, 264, 4009, 295, 3494, 307, 264, 307, 264, 21120, 3877, 13, 400, 456, 311, 11, 456, 311, 572, 411, 11, 51744, 51744], "temperature": 0.0, "avg_logprob": -0.1326876983642578, "compression_ratio": 1.7428571428571429, "no_caption_prob": 0.0003249500587116927}, {"id": 707, "seek": 415068, "start": 4150.68, "end": 4156.6, "text": " a built in way to grab that in elm code gen. But it's really not hard to just wrap that in JSON", "tokens": [50364, 257, 3094, 294, 636, 281, 4444, 300, 294, 806, 76, 3089, 1049, 13, 583, 309, 311, 534, 406, 1152, 281, 445, 7019, 300, 294, 31828, 50660, 50660, 293, 35648, 309, 294, 264, 3089, 1049, 13, 1779, 13, 407, 11, 370, 337, 5197, 11, 498, 291, 645, 498, 291, 1415, 281, 362, 2105, 50916, 50916, 281, 264, 15768, 295, 364, 806, 76, 3991, 11, 337, 5197, 11, 550, 291, 576, 1320, 300, 382, 257, 7166, 13, 400, 550, 291, 445, 51228, 51228, 362, 472, 7410, 6798, 13, 400, 498, 291, 1415, 281, 362, 2105, 281, 732, 806, 76, 7098, 11, 550, 291, 576, 7620, 51612, 51612], "temperature": 0.0, "avg_logprob": -0.1465607135095329, "compression_ratio": 1.853080568720379, "no_caption_prob": 0.00010553960601100698}, {"id": 708, "seek": 415068, "start": 4156.6, "end": 4161.72, "text": " and shove it in the code gen. Right. So, so for instance, if you were if you wanted to have access", "tokens": [50364, 257, 3094, 294, 636, 281, 4444, 300, 294, 806, 76, 3089, 1049, 13, 583, 309, 311, 534, 406, 1152, 281, 445, 7019, 300, 294, 31828, 50660, 50660, 293, 35648, 309, 294, 264, 3089, 1049, 13, 1779, 13, 407, 11, 370, 337, 5197, 11, 498, 291, 645, 498, 291, 1415, 281, 362, 2105, 50916, 50916, 281, 264, 15768, 295, 364, 806, 76, 3991, 11, 337, 5197, 11, 550, 291, 576, 1320, 300, 382, 257, 7166, 13, 400, 550, 291, 445, 51228, 51228, 362, 472, 7410, 6798, 13, 400, 498, 291, 1415, 281, 362, 2105, 281, 732, 806, 76, 7098, 11, 550, 291, 576, 7620, 51612, 51612], "temperature": 0.0, "avg_logprob": -0.1465607135095329, "compression_ratio": 1.853080568720379, "no_caption_prob": 0.00010553960601100698}, {"id": 709, "seek": 415068, "start": 4161.72, "end": 4167.96, "text": " to the contents of an elm file, for instance, then you would pass that as a flag. And then you just", "tokens": [50364, 257, 3094, 294, 636, 281, 4444, 300, 294, 806, 76, 3089, 1049, 13, 583, 309, 311, 534, 406, 1152, 281, 445, 7019, 300, 294, 31828, 50660, 50660, 293, 35648, 309, 294, 264, 3089, 1049, 13, 1779, 13, 407, 11, 370, 337, 5197, 11, 498, 291, 645, 498, 291, 1415, 281, 362, 2105, 50916, 50916, 281, 264, 15768, 295, 364, 806, 76, 3991, 11, 337, 5197, 11, 550, 291, 576, 1320, 300, 382, 257, 7166, 13, 400, 550, 291, 445, 51228, 51228, 362, 472, 7410, 6798, 13, 400, 498, 291, 1415, 281, 362, 2105, 281, 732, 806, 76, 7098, 11, 550, 291, 576, 7620, 51612, 51612], "temperature": 0.0, "avg_logprob": -0.1465607135095329, "compression_ratio": 1.853080568720379, "no_caption_prob": 0.00010553960601100698}, {"id": 710, "seek": 415068, "start": 4167.96, "end": 4175.64, "text": " have one giant string. And if you wanted to have access to two elm files, then you would convert", "tokens": [50364, 257, 3094, 294, 636, 281, 4444, 300, 294, 806, 76, 3089, 1049, 13, 583, 309, 311, 534, 406, 1152, 281, 445, 7019, 300, 294, 31828, 50660, 50660, 293, 35648, 309, 294, 264, 3089, 1049, 13, 1779, 13, 407, 11, 370, 337, 5197, 11, 498, 291, 645, 498, 291, 1415, 281, 362, 2105, 50916, 50916, 281, 264, 15768, 295, 364, 806, 76, 3991, 11, 337, 5197, 11, 550, 291, 576, 1320, 300, 382, 257, 7166, 13, 400, 550, 291, 445, 51228, 51228, 362, 472, 7410, 6798, 13, 400, 498, 291, 1415, 281, 362, 2105, 281, 732, 806, 76, 7098, 11, 550, 291, 576, 7620, 51612, 51612], "temperature": 0.0, "avg_logprob": -0.1465607135095329, "compression_ratio": 1.853080568720379, "no_caption_prob": 0.00010553960601100698}, {"id": 711, "seek": 417564, "start": 4175.64, "end": 4180.92, "text": " them to some JSON and possibly Yeah, okay. I think there's probably a few different ways to slice it", "tokens": [50364, 552, 281, 512, 31828, 293, 6264, 865, 11, 1392, 13, 286, 519, 456, 311, 1391, 257, 1326, 819, 2098, 281, 13153, 309, 50628, 50628, 411, 5413, 322, 309, 311, 1152, 281, 1936, 584, 11, 876, 11, 510, 311, 264, 636, 1553, 2577, 257, 2685, 1716, 11, 50924, 50924, 558, 30, 1018, 1400, 382, 437, 366, 264, 1151, 2098, 281, 360, 300, 11, 309, 727, 312, 689, 309, 311, 439, 13210, 294, 807, 51176, 51176, 23265, 11, 1310, 456, 311, 411, 257, 3219, 382, 34015, 551, 291, 362, 516, 689, 309, 311, 428, 291, 393, 920, 751, 281, 51444, 51444, 341, 551, 5766, 18160, 11, 558, 30, 467, 311, 264, 8747, 5102, 13, 407, 291, 727, 11, 291, 727, 362, 257, 551, 51632, 51632], "temperature": 0.0, "avg_logprob": -0.11504236602783204, "compression_ratio": 1.6758620689655173, "no_caption_prob": 0.00024152807600330561}, {"id": 712, "seek": 417564, "start": 4180.92, "end": 4186.84, "text": " like depending on it's hard to basically say, Oh, here's the way without seeing a specific project,", "tokens": [50364, 552, 281, 512, 31828, 293, 6264, 865, 11, 1392, 13, 286, 519, 456, 311, 1391, 257, 1326, 819, 2098, 281, 13153, 309, 50628, 50628, 411, 5413, 322, 309, 311, 1152, 281, 1936, 584, 11, 876, 11, 510, 311, 264, 636, 1553, 2577, 257, 2685, 1716, 11, 50924, 50924, 558, 30, 1018, 1400, 382, 437, 366, 264, 1151, 2098, 281, 360, 300, 11, 309, 727, 312, 689, 309, 311, 439, 13210, 294, 807, 51176, 51176, 23265, 11, 1310, 456, 311, 411, 257, 3219, 382, 34015, 551, 291, 362, 516, 689, 309, 311, 428, 291, 393, 920, 751, 281, 51444, 51444, 341, 551, 5766, 18160, 11, 558, 30, 467, 311, 264, 8747, 5102, 13, 407, 291, 727, 11, 291, 727, 362, 257, 551, 51632, 51632], "temperature": 0.0, "avg_logprob": -0.11504236602783204, "compression_ratio": 1.6758620689655173, "no_caption_prob": 0.00024152807600330561}, {"id": 713, "seek": 417564, "start": 4186.84, "end": 4191.88, "text": " right? As far as what are the best ways to do that, it could be where it's all loaded in through", "tokens": [50364, 552, 281, 512, 31828, 293, 6264, 865, 11, 1392, 13, 286, 519, 456, 311, 1391, 257, 1326, 819, 2098, 281, 13153, 309, 50628, 50628, 411, 5413, 322, 309, 311, 1152, 281, 1936, 584, 11, 876, 11, 510, 311, 264, 636, 1553, 2577, 257, 2685, 1716, 11, 50924, 50924, 558, 30, 1018, 1400, 382, 437, 366, 264, 1151, 2098, 281, 360, 300, 11, 309, 727, 312, 689, 309, 311, 439, 13210, 294, 807, 51176, 51176, 23265, 11, 1310, 456, 311, 411, 257, 3219, 382, 34015, 551, 291, 362, 516, 689, 309, 311, 428, 291, 393, 920, 751, 281, 51444, 51444, 341, 551, 5766, 18160, 11, 558, 30, 467, 311, 264, 8747, 5102, 13, 407, 291, 727, 11, 291, 727, 362, 257, 551, 51632, 51632], "temperature": 0.0, "avg_logprob": -0.11504236602783204, "compression_ratio": 1.6758620689655173, "no_caption_prob": 0.00024152807600330561}, {"id": 714, "seek": 417564, "start": 4191.88, "end": 4197.240000000001, "text": " flags, maybe there's like a crazy async thing you have going where it's your you can still talk to", "tokens": [50364, 552, 281, 512, 31828, 293, 6264, 865, 11, 1392, 13, 286, 519, 456, 311, 1391, 257, 1326, 819, 2098, 281, 13153, 309, 50628, 50628, 411, 5413, 322, 309, 311, 1152, 281, 1936, 584, 11, 876, 11, 510, 311, 264, 636, 1553, 2577, 257, 2685, 1716, 11, 50924, 50924, 558, 30, 1018, 1400, 382, 437, 366, 264, 1151, 2098, 281, 360, 300, 11, 309, 727, 312, 689, 309, 311, 439, 13210, 294, 807, 51176, 51176, 23265, 11, 1310, 456, 311, 411, 257, 3219, 382, 34015, 551, 291, 362, 516, 689, 309, 311, 428, 291, 393, 920, 751, 281, 51444, 51444, 341, 551, 5766, 18160, 11, 558, 30, 467, 311, 264, 8747, 5102, 13, 407, 291, 727, 11, 291, 727, 362, 257, 551, 51632, 51632], "temperature": 0.0, "avg_logprob": -0.11504236602783204, "compression_ratio": 1.6758620689655173, "no_caption_prob": 0.00024152807600330561}, {"id": 715, "seek": 417564, "start": 4197.240000000001, "end": 4201.0, "text": " this thing via ports, right? It's the actor pattern. So you could, you could have a thing", "tokens": [50364, 552, 281, 512, 31828, 293, 6264, 865, 11, 1392, 13, 286, 519, 456, 311, 1391, 257, 1326, 819, 2098, 281, 13153, 309, 50628, 50628, 411, 5413, 322, 309, 311, 1152, 281, 1936, 584, 11, 876, 11, 510, 311, 264, 636, 1553, 2577, 257, 2685, 1716, 11, 50924, 50924, 558, 30, 1018, 1400, 382, 437, 366, 264, 1151, 2098, 281, 360, 300, 11, 309, 727, 312, 689, 309, 311, 439, 13210, 294, 807, 51176, 51176, 23265, 11, 1310, 456, 311, 411, 257, 3219, 382, 34015, 551, 291, 362, 516, 689, 309, 311, 428, 291, 393, 920, 751, 281, 51444, 51444, 341, 551, 5766, 18160, 11, 558, 30, 467, 311, 264, 8747, 5102, 13, 407, 291, 727, 11, 291, 727, 362, 257, 551, 51632, 51632], "temperature": 0.0, "avg_logprob": -0.11504236602783204, "compression_ratio": 1.6758620689655173, "no_caption_prob": 0.00024152807600330561}, {"id": 716, "seek": 420100, "start": 4201.0, "end": 4207.16, "text": " where you're like feeding it files as you go, but you'd need to adjust the elm code gen utility. And", "tokens": [50364, 689, 291, 434, 411, 12919, 309, 7098, 382, 291, 352, 11, 457, 291, 1116, 643, 281, 4369, 264, 806, 76, 3089, 1049, 14877, 13, 400, 50672, 50672, 411, 11, 411, 558, 586, 300, 337, 806, 76, 460, 13695, 11, 281, 312, 1850, 11, 570, 806, 76, 3089, 1049, 994, 380, 362, 1080, 1065, 50932, 50932, 636, 295, 2614, 1507, 11, 806, 76, 460, 13695, 11, 445, 570, 300, 15778, 307, 406, 300, 1152, 281, 2464, 11, 51168, 51168, 445, 4114, 1080, 1065, 15778, 24376, 13, 1779, 13, 400, 370, 411, 11, 293, 393, 1936, 360, 2035, 309, 575, 1080, 51488, 51488, 1065, 12855, 40, 9226, 11, 411, 264, 7789, 365, 806, 76, 460, 13695, 307, 300, 309, 311, 1080, 1065, 551, 13, 407, 286, 500, 380, 528, 411, 11, 51812, 51852], "temperature": 0.0, "avg_logprob": -0.10514712512941289, "compression_ratio": 1.7712177121771218, "no_caption_prob": 0.00013762568414676934}, {"id": 717, "seek": 420100, "start": 4207.16, "end": 4212.36, "text": " like, like right now that for elm GQL, to be clear, because elm code gen didn't have its own", "tokens": [50364, 689, 291, 434, 411, 12919, 309, 7098, 382, 291, 352, 11, 457, 291, 1116, 643, 281, 4369, 264, 806, 76, 3089, 1049, 14877, 13, 400, 50672, 50672, 411, 11, 411, 558, 586, 300, 337, 806, 76, 460, 13695, 11, 281, 312, 1850, 11, 570, 806, 76, 3089, 1049, 994, 380, 362, 1080, 1065, 50932, 50932, 636, 295, 2614, 1507, 11, 806, 76, 460, 13695, 11, 445, 570, 300, 15778, 307, 406, 300, 1152, 281, 2464, 11, 51168, 51168, 445, 4114, 1080, 1065, 15778, 24376, 13, 1779, 13, 400, 370, 411, 11, 293, 393, 1936, 360, 2035, 309, 575, 1080, 51488, 51488, 1065, 12855, 40, 9226, 11, 411, 264, 7789, 365, 806, 76, 460, 13695, 307, 300, 309, 311, 1080, 1065, 551, 13, 407, 286, 500, 380, 528, 411, 11, 51812, 51852], "temperature": 0.0, "avg_logprob": -0.10514712512941289, "compression_ratio": 1.7712177121771218, "no_caption_prob": 0.00013762568414676934}, {"id": 718, "seek": 420100, "start": 4212.36, "end": 4217.08, "text": " way of running stuff, elm GQL, just because that JavaScript is not that hard to write,", "tokens": [50364, 689, 291, 434, 411, 12919, 309, 7098, 382, 291, 352, 11, 457, 291, 1116, 643, 281, 4369, 264, 806, 76, 3089, 1049, 14877, 13, 400, 50672, 50672, 411, 11, 411, 558, 586, 300, 337, 806, 76, 460, 13695, 11, 281, 312, 1850, 11, 570, 806, 76, 3089, 1049, 994, 380, 362, 1080, 1065, 50932, 50932, 636, 295, 2614, 1507, 11, 806, 76, 460, 13695, 11, 445, 570, 300, 15778, 307, 406, 300, 1152, 281, 2464, 11, 51168, 51168, 445, 4114, 1080, 1065, 15778, 24376, 13, 1779, 13, 400, 370, 411, 11, 293, 393, 1936, 360, 2035, 309, 575, 1080, 51488, 51488, 1065, 12855, 40, 9226, 11, 411, 264, 7789, 365, 806, 76, 460, 13695, 307, 300, 309, 311, 1080, 1065, 551, 13, 407, 286, 500, 380, 528, 411, 11, 51812, 51852], "temperature": 0.0, "avg_logprob": -0.10514712512941289, "compression_ratio": 1.7712177121771218, "no_caption_prob": 0.00013762568414676934}, {"id": 719, "seek": 420100, "start": 4217.08, "end": 4223.48, "text": " just wrote its own JavaScript runner. Right. And so like, and can basically do whatever it has its", "tokens": [50364, 689, 291, 434, 411, 12919, 309, 7098, 382, 291, 352, 11, 457, 291, 1116, 643, 281, 4369, 264, 806, 76, 3089, 1049, 14877, 13, 400, 50672, 50672, 411, 11, 411, 558, 586, 300, 337, 806, 76, 460, 13695, 11, 281, 312, 1850, 11, 570, 806, 76, 3089, 1049, 994, 380, 362, 1080, 1065, 50932, 50932, 636, 295, 2614, 1507, 11, 806, 76, 460, 13695, 11, 445, 570, 300, 15778, 307, 406, 300, 1152, 281, 2464, 11, 51168, 51168, 445, 4114, 1080, 1065, 15778, 24376, 13, 1779, 13, 400, 370, 411, 11, 293, 393, 1936, 360, 2035, 309, 575, 1080, 51488, 51488, 1065, 12855, 40, 9226, 11, 411, 264, 7789, 365, 806, 76, 460, 13695, 307, 300, 309, 311, 1080, 1065, 551, 13, 407, 286, 500, 380, 528, 411, 11, 51812, 51852], "temperature": 0.0, "avg_logprob": -0.10514712512941289, "compression_ratio": 1.7712177121771218, "no_caption_prob": 0.00013762568414676934}, {"id": 720, "seek": 420100, "start": 4223.48, "end": 4229.96, "text": " own CLI interface, like the intention with elm GQL is that it's its own thing. So I don't want like,", "tokens": [50364, 689, 291, 434, 411, 12919, 309, 7098, 382, 291, 352, 11, 457, 291, 1116, 643, 281, 4369, 264, 806, 76, 3089, 1049, 14877, 13, 400, 50672, 50672, 411, 11, 411, 558, 586, 300, 337, 806, 76, 460, 13695, 11, 281, 312, 1850, 11, 570, 806, 76, 3089, 1049, 994, 380, 362, 1080, 1065, 50932, 50932, 636, 295, 2614, 1507, 11, 806, 76, 460, 13695, 11, 445, 570, 300, 15778, 307, 406, 300, 1152, 281, 2464, 11, 51168, 51168, 445, 4114, 1080, 1065, 15778, 24376, 13, 1779, 13, 400, 370, 411, 11, 293, 393, 1936, 360, 2035, 309, 575, 1080, 51488, 51488, 1065, 12855, 40, 9226, 11, 411, 264, 7789, 365, 806, 76, 460, 13695, 307, 300, 309, 311, 1080, 1065, 551, 13, 407, 286, 500, 380, 528, 411, 11, 51812, 51852], "temperature": 0.0, "avg_logprob": -0.10514712512941289, "compression_ratio": 1.7712177121771218, "no_caption_prob": 0.00013762568414676934}, {"id": 721, "seek": 422996, "start": 4229.96, "end": 4234.12, "text": " I don't want someone to start up elm GQL and have it say like, welcome to elm code gen,", "tokens": [50364, 286, 500, 380, 528, 1580, 281, 722, 493, 806, 76, 460, 13695, 293, 362, 309, 584, 411, 11, 2928, 281, 806, 76, 3089, 1049, 11, 50572, 50572, 576, 291, 411, 281, 818, 806, 76, 17995, 293, 436, 434, 885, 411, 11, 437, 264, 12872, 366, 291, 1417, 466, 30, 50812, 50912, 407, 411, 11, 286, 519, 437, 498, 561, 366, 1237, 281, 1322, 3873, 322, 1192, 295, 806, 76, 3089, 1049, 11, 597, 11, 51176, 51176, 538, 264, 636, 11, 498, 291, 366, 11, 286, 478, 1687, 2919, 281, 1568, 466, 309, 13, 400, 498, 291, 1190, 666, 2663, 11, 51408, 51408, 2318, 558, 11, 293, 498, 291, 500, 380, 1190, 666, 2663, 754, 1101, 11, 457, 1391, 437, 286, 1116, 2748, 498, 51704, 51704], "temperature": 0.0, "avg_logprob": -0.17085171496774268, "compression_ratio": 1.6925925925925926, "no_caption_prob": 0.00012929268996231258}, {"id": 722, "seek": 422996, "start": 4234.12, "end": 4238.92, "text": " would you like to call elm HTML and they're being like, what the heck are you talking about?", "tokens": [50364, 286, 500, 380, 528, 1580, 281, 722, 493, 806, 76, 460, 13695, 293, 362, 309, 584, 411, 11, 2928, 281, 806, 76, 3089, 1049, 11, 50572, 50572, 576, 291, 411, 281, 818, 806, 76, 17995, 293, 436, 434, 885, 411, 11, 437, 264, 12872, 366, 291, 1417, 466, 30, 50812, 50912, 407, 411, 11, 286, 519, 437, 498, 561, 366, 1237, 281, 1322, 3873, 322, 1192, 295, 806, 76, 3089, 1049, 11, 597, 11, 51176, 51176, 538, 264, 636, 11, 498, 291, 366, 11, 286, 478, 1687, 2919, 281, 1568, 466, 309, 13, 400, 498, 291, 1190, 666, 2663, 11, 51408, 51408, 2318, 558, 11, 293, 498, 291, 500, 380, 1190, 666, 2663, 754, 1101, 11, 457, 1391, 437, 286, 1116, 2748, 498, 51704, 51704], "temperature": 0.0, "avg_logprob": -0.17085171496774268, "compression_ratio": 1.6925925925925926, "no_caption_prob": 0.00012929268996231258}, {"id": 723, "seek": 422996, "start": 4240.92, "end": 4246.2, "text": " So like, I think what if people are looking to build tools on top of elm code gen, which,", "tokens": [50364, 286, 500, 380, 528, 1580, 281, 722, 493, 806, 76, 460, 13695, 293, 362, 309, 584, 411, 11, 2928, 281, 806, 76, 3089, 1049, 11, 50572, 50572, 576, 291, 411, 281, 818, 806, 76, 17995, 293, 436, 434, 885, 411, 11, 437, 264, 12872, 366, 291, 1417, 466, 30, 50812, 50912, 407, 411, 11, 286, 519, 437, 498, 561, 366, 1237, 281, 1322, 3873, 322, 1192, 295, 806, 76, 3089, 1049, 11, 597, 11, 51176, 51176, 538, 264, 636, 11, 498, 291, 366, 11, 286, 478, 1687, 2919, 281, 1568, 466, 309, 13, 400, 498, 291, 1190, 666, 2663, 11, 51408, 51408, 2318, 558, 11, 293, 498, 291, 500, 380, 1190, 666, 2663, 754, 1101, 11, 457, 1391, 437, 286, 1116, 2748, 498, 51704, 51704], "temperature": 0.0, "avg_logprob": -0.17085171496774268, "compression_ratio": 1.6925925925925926, "no_caption_prob": 0.00012929268996231258}, {"id": 724, "seek": 422996, "start": 4246.2, "end": 4250.84, "text": " by the way, if you are, I'm super excited to hear about it. And if you run into issues,", "tokens": [50364, 286, 500, 380, 528, 1580, 281, 722, 493, 806, 76, 460, 13695, 293, 362, 309, 584, 411, 11, 2928, 281, 806, 76, 3089, 1049, 11, 50572, 50572, 576, 291, 411, 281, 818, 806, 76, 17995, 293, 436, 434, 885, 411, 11, 437, 264, 12872, 366, 291, 1417, 466, 30, 50812, 50912, 407, 411, 11, 286, 519, 437, 498, 561, 366, 1237, 281, 1322, 3873, 322, 1192, 295, 806, 76, 3089, 1049, 11, 597, 11, 51176, 51176, 538, 264, 636, 11, 498, 291, 366, 11, 286, 478, 1687, 2919, 281, 1568, 466, 309, 13, 400, 498, 291, 1190, 666, 2663, 11, 51408, 51408, 2318, 558, 11, 293, 498, 291, 500, 380, 1190, 666, 2663, 754, 1101, 11, 457, 1391, 437, 286, 1116, 2748, 498, 51704, 51704], "temperature": 0.0, "avg_logprob": -0.17085171496774268, "compression_ratio": 1.6925925925925926, "no_caption_prob": 0.00012929268996231258}, {"id": 725, "seek": 422996, "start": 4250.84, "end": 4256.76, "text": " especially right, and if you don't run into issues even better, but probably what I'd recommend if", "tokens": [50364, 286, 500, 380, 528, 1580, 281, 722, 493, 806, 76, 460, 13695, 293, 362, 309, 584, 411, 11, 2928, 281, 806, 76, 3089, 1049, 11, 50572, 50572, 576, 291, 411, 281, 818, 806, 76, 17995, 293, 436, 434, 885, 411, 11, 437, 264, 12872, 366, 291, 1417, 466, 30, 50812, 50912, 407, 411, 11, 286, 519, 437, 498, 561, 366, 1237, 281, 1322, 3873, 322, 1192, 295, 806, 76, 3089, 1049, 11, 597, 11, 51176, 51176, 538, 264, 636, 11, 498, 291, 366, 11, 286, 478, 1687, 2919, 281, 1568, 466, 309, 13, 400, 498, 291, 1190, 666, 2663, 11, 51408, 51408, 2318, 558, 11, 293, 498, 291, 500, 380, 1190, 666, 2663, 754, 1101, 11, 457, 1391, 437, 286, 1116, 2748, 498, 51704, 51704], "temperature": 0.0, "avg_logprob": -0.17085171496774268, "compression_ratio": 1.6925925925925926, "no_caption_prob": 0.00012929268996231258}, {"id": 726, "seek": 425676, "start": 4256.76, "end": 4264.92, "text": " you're looking into it is like, can you even copy elm code gen CLI as a starting point and adjust it", "tokens": [50364, 291, 434, 1237, 666, 309, 307, 411, 11, 393, 291, 754, 5055, 806, 76, 3089, 1049, 12855, 40, 382, 257, 2891, 935, 293, 4369, 309, 50772, 50772, 382, 1310, 291, 362, 819, 23265, 420, 411, 2035, 11, 291, 458, 11, 457, 360, 437, 411, 11, 360, 437, 9001, 337, 428, 51012, 51012, 4455, 293, 764, 806, 76, 3089, 1049, 12855, 40, 382, 257, 6408, 337, 437, 11, 577, 281, 751, 281, 1507, 11, 457, 312, 1238, 1858, 51400, 51400, 281, 10101, 309, 13, 286, 478, 767, 534, 1953, 466, 411, 11, 309, 576, 312, 1627, 498, 456, 390, 411, 364, 806, 76, 51704, 51716], "temperature": 0.0, "avg_logprob": -0.19557776541080116, "compression_ratio": 1.6835443037974684, "no_caption_prob": 5.738023537560366e-05}, {"id": 727, "seek": 425676, "start": 4264.92, "end": 4269.72, "text": " as maybe you have different flags or like whatever, you know, but do what like, do what fits for your", "tokens": [50364, 291, 434, 1237, 666, 309, 307, 411, 11, 393, 291, 754, 5055, 806, 76, 3089, 1049, 12855, 40, 382, 257, 2891, 935, 293, 4369, 309, 50772, 50772, 382, 1310, 291, 362, 819, 23265, 420, 411, 2035, 11, 291, 458, 11, 457, 360, 437, 411, 11, 360, 437, 9001, 337, 428, 51012, 51012, 4455, 293, 764, 806, 76, 3089, 1049, 12855, 40, 382, 257, 6408, 337, 437, 11, 577, 281, 751, 281, 1507, 11, 457, 312, 1238, 1858, 51400, 51400, 281, 10101, 309, 13, 286, 478, 767, 534, 1953, 466, 411, 11, 309, 576, 312, 1627, 498, 456, 390, 411, 364, 806, 76, 51704, 51716], "temperature": 0.0, "avg_logprob": -0.19557776541080116, "compression_ratio": 1.6835443037974684, "no_caption_prob": 5.738023537560366e-05}, {"id": 728, "seek": 425676, "start": 4269.72, "end": 4277.4800000000005, "text": " projects and use elm code gen CLI as a reference for what, how to talk to stuff, but be pretty easy", "tokens": [50364, 291, 434, 1237, 666, 309, 307, 411, 11, 393, 291, 754, 5055, 806, 76, 3089, 1049, 12855, 40, 382, 257, 2891, 935, 293, 4369, 309, 50772, 50772, 382, 1310, 291, 362, 819, 23265, 420, 411, 2035, 11, 291, 458, 11, 457, 360, 437, 411, 11, 360, 437, 9001, 337, 428, 51012, 51012, 4455, 293, 764, 806, 76, 3089, 1049, 12855, 40, 382, 257, 6408, 337, 437, 11, 577, 281, 751, 281, 1507, 11, 457, 312, 1238, 1858, 51400, 51400, 281, 10101, 309, 13, 286, 478, 767, 534, 1953, 466, 411, 11, 309, 576, 312, 1627, 498, 456, 390, 411, 364, 806, 76, 51704, 51716], "temperature": 0.0, "avg_logprob": -0.19557776541080116, "compression_ratio": 1.6835443037974684, "no_caption_prob": 5.738023537560366e-05}, {"id": 729, "seek": 425676, "start": 4277.4800000000005, "end": 4283.56, "text": " to extend it. I'm actually really thinking about like, it would be cool if there was like an elm", "tokens": [50364, 291, 434, 1237, 666, 309, 307, 411, 11, 393, 291, 754, 5055, 806, 76, 3089, 1049, 12855, 40, 382, 257, 2891, 935, 293, 4369, 309, 50772, 50772, 382, 1310, 291, 362, 819, 23265, 420, 411, 2035, 11, 291, 458, 11, 457, 360, 437, 411, 11, 360, 437, 9001, 337, 428, 51012, 51012, 4455, 293, 764, 806, 76, 3089, 1049, 12855, 40, 382, 257, 6408, 337, 437, 11, 577, 281, 751, 281, 1507, 11, 457, 312, 1238, 1858, 51400, 51400, 281, 10101, 309, 13, 286, 478, 767, 534, 1953, 466, 411, 11, 309, 576, 312, 1627, 498, 456, 390, 411, 364, 806, 76, 51704, 51716], "temperature": 0.0, "avg_logprob": -0.19557776541080116, "compression_ratio": 1.6835443037974684, "no_caption_prob": 5.738023537560366e-05}, {"id": 730, "seek": 428356, "start": 4283.56, "end": 4290.68, "text": " pages harness. So like, you know, elm pages is for like building static sites and with v3 for", "tokens": [50364, 7183, 19700, 13, 407, 411, 11, 291, 458, 11, 806, 76, 7183, 307, 337, 411, 2390, 13437, 7533, 293, 365, 371, 18, 337, 50720, 50720, 2390, 1333, 295, 7154, 28748, 7533, 13, 583, 264, 1917, 295, 806, 76, 7183, 307, 341, 1412, 4009, 37765, 11, 51052, 51052, 597, 307, 1936, 257, 636, 295, 411, 11, 3365, 9984, 33063, 281, 360, 721, 337, 291, 13, 4387, 364, 33283, 5308, 293, 51408, 51408, 976, 385, 300, 1412, 13, 17604, 341, 3991, 11, 979, 1429, 341, 3991, 382, 31828, 11, 2035, 11, 558, 13, 407, 16125, 11, 16125, 257, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.16622549057006836, "compression_ratio": 1.5958333333333334, "no_caption_prob": 3.882913733832538e-05}, {"id": 731, "seek": 428356, "start": 4290.68, "end": 4297.320000000001, "text": " building sort of server rendered sites. But the heart of elm pages is this data source abstraction,", "tokens": [50364, 7183, 19700, 13, 407, 411, 11, 291, 458, 11, 806, 76, 7183, 307, 337, 411, 2390, 13437, 7533, 293, 365, 371, 18, 337, 50720, 50720, 2390, 1333, 295, 7154, 28748, 7533, 13, 583, 264, 1917, 295, 806, 76, 7183, 307, 341, 1412, 4009, 37765, 11, 51052, 51052, 597, 307, 1936, 257, 636, 295, 411, 11, 3365, 9984, 33063, 281, 360, 721, 337, 291, 13, 4387, 364, 33283, 5308, 293, 51408, 51408, 976, 385, 300, 1412, 13, 17604, 341, 3991, 11, 979, 1429, 341, 3991, 382, 31828, 11, 2035, 11, 558, 13, 407, 16125, 11, 16125, 257, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.16622549057006836, "compression_ratio": 1.5958333333333334, "no_caption_prob": 3.882913733832538e-05}, {"id": 732, "seek": 428356, "start": 4297.320000000001, "end": 4304.4400000000005, "text": " which is basically a way of like, asking node JS to do things for you. Make an HTTP request and", "tokens": [50364, 7183, 19700, 13, 407, 411, 11, 291, 458, 11, 806, 76, 7183, 307, 337, 411, 2390, 13437, 7533, 293, 365, 371, 18, 337, 50720, 50720, 2390, 1333, 295, 7154, 28748, 7533, 13, 583, 264, 1917, 295, 806, 76, 7183, 307, 341, 1412, 4009, 37765, 11, 51052, 51052, 597, 307, 1936, 257, 636, 295, 411, 11, 3365, 9984, 33063, 281, 360, 721, 337, 291, 13, 4387, 364, 33283, 5308, 293, 51408, 51408, 976, 385, 300, 1412, 13, 17604, 341, 3991, 11, 979, 1429, 341, 3991, 382, 31828, 11, 2035, 11, 558, 13, 407, 16125, 11, 16125, 257, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.16622549057006836, "compression_ratio": 1.5958333333333334, "no_caption_prob": 3.882913733832538e-05}, {"id": 733, "seek": 428356, "start": 4304.4400000000005, "end": 4311.56, "text": " give me that data. Read this file, decode this file as JSON, whatever, right. So glob, glob a", "tokens": [50364, 7183, 19700, 13, 407, 411, 11, 291, 458, 11, 806, 76, 7183, 307, 337, 411, 2390, 13437, 7533, 293, 365, 371, 18, 337, 50720, 50720, 2390, 1333, 295, 7154, 28748, 7533, 13, 583, 264, 1917, 295, 806, 76, 7183, 307, 341, 1412, 4009, 37765, 11, 51052, 51052, 597, 307, 1936, 257, 636, 295, 411, 11, 3365, 9984, 33063, 281, 360, 721, 337, 291, 13, 4387, 364, 33283, 5308, 293, 51408, 51408, 976, 385, 300, 1412, 13, 17604, 341, 3991, 11, 979, 1429, 341, 3991, 382, 31828, 11, 2035, 11, 558, 13, 407, 16125, 11, 16125, 257, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.16622549057006836, "compression_ratio": 1.5958333333333334, "no_caption_prob": 3.882913733832538e-05}, {"id": 734, "seek": 431156, "start": 4311.56, "end": 4317.400000000001, "text": " list of file paths and get me that as the input, right. So it's communicating with node JS to like", "tokens": [50364, 1329, 295, 3991, 14518, 293, 483, 385, 300, 382, 264, 4846, 11, 558, 13, 407, 309, 311, 17559, 365, 9984, 33063, 281, 411, 50656, 50656, 360, 9984, 88, 721, 293, 550, 976, 291, 646, 806, 76, 1412, 294, 257, 3273, 636, 11, 558, 13, 407, 11, 293, 550, 291, 393, 4471, 300, 50980, 50980, 666, 2035, 13, 467, 576, 312, 534, 1627, 498, 291, 727, 411, 360, 11, 291, 458, 11, 1412, 4009, 33283, 5893, 483, 11, 51308, 51320, 483, 512, 31828, 1412, 11, 979, 1429, 300, 11, 8460, 512, 3089, 365, 445, 806, 76, 3089, 1049, 3467, 11, 293, 550, 291, 434, 51704, 51704], "temperature": 0.0, "avg_logprob": -0.18447408943532784, "compression_ratio": 1.6652542372881356, "no_caption_prob": 9.027411579154432e-05}, {"id": 735, "seek": 431156, "start": 4317.400000000001, "end": 4323.88, "text": " do nodey things and then give you back elm data in a safe way, right. So, and then you can map that", "tokens": [50364, 1329, 295, 3991, 14518, 293, 483, 385, 300, 382, 264, 4846, 11, 558, 13, 407, 309, 311, 17559, 365, 9984, 33063, 281, 411, 50656, 50656, 360, 9984, 88, 721, 293, 550, 976, 291, 646, 806, 76, 1412, 294, 257, 3273, 636, 11, 558, 13, 407, 11, 293, 550, 291, 393, 4471, 300, 50980, 50980, 666, 2035, 13, 467, 576, 312, 534, 1627, 498, 291, 727, 411, 360, 11, 291, 458, 11, 1412, 4009, 33283, 5893, 483, 11, 51308, 51320, 483, 512, 31828, 1412, 11, 979, 1429, 300, 11, 8460, 512, 3089, 365, 445, 806, 76, 3089, 1049, 3467, 11, 293, 550, 291, 434, 51704, 51704], "temperature": 0.0, "avg_logprob": -0.18447408943532784, "compression_ratio": 1.6652542372881356, "no_caption_prob": 9.027411579154432e-05}, {"id": 736, "seek": 431156, "start": 4323.88, "end": 4330.4400000000005, "text": " into whatever. It would be really cool if you could like do, you know, data source HTTP dot get,", "tokens": [50364, 1329, 295, 3991, 14518, 293, 483, 385, 300, 382, 264, 4846, 11, 558, 13, 407, 309, 311, 17559, 365, 9984, 33063, 281, 411, 50656, 50656, 360, 9984, 88, 721, 293, 550, 976, 291, 646, 806, 76, 1412, 294, 257, 3273, 636, 11, 558, 13, 407, 11, 293, 550, 291, 393, 4471, 300, 50980, 50980, 666, 2035, 13, 467, 576, 312, 534, 1627, 498, 291, 727, 411, 360, 11, 291, 458, 11, 1412, 4009, 33283, 5893, 483, 11, 51308, 51320, 483, 512, 31828, 1412, 11, 979, 1429, 300, 11, 8460, 512, 3089, 365, 445, 806, 76, 3089, 1049, 3467, 11, 293, 550, 291, 434, 51704, 51704], "temperature": 0.0, "avg_logprob": -0.18447408943532784, "compression_ratio": 1.6652542372881356, "no_caption_prob": 9.027411579154432e-05}, {"id": 737, "seek": 431156, "start": 4330.68, "end": 4338.360000000001, "text": " get some JSON data, decode that, generate some code with just elm code gen types, and then you're", "tokens": [50364, 1329, 295, 3991, 14518, 293, 483, 385, 300, 382, 264, 4846, 11, 558, 13, 407, 309, 311, 17559, 365, 9984, 33063, 281, 411, 50656, 50656, 360, 9984, 88, 721, 293, 550, 976, 291, 646, 806, 76, 1412, 294, 257, 3273, 636, 11, 558, 13, 407, 11, 293, 550, 291, 393, 4471, 300, 50980, 50980, 666, 2035, 13, 467, 576, 312, 534, 1627, 498, 291, 727, 411, 360, 11, 291, 458, 11, 1412, 4009, 33283, 5893, 483, 11, 51308, 51320, 483, 512, 31828, 1412, 11, 979, 1429, 300, 11, 8460, 512, 3089, 365, 445, 806, 76, 3089, 1049, 3467, 11, 293, 550, 291, 434, 51704, 51704], "temperature": 0.0, "avg_logprob": -0.18447408943532784, "compression_ratio": 1.6652542372881356, "no_caption_prob": 9.027411579154432e-05}, {"id": 738, "seek": 433836, "start": 4338.36, "end": 4343.96, "text": " up and running. And if that was like a little self encapsulated command line tool, that'd be so, so", "tokens": [50364, 493, 293, 2614, 13, 400, 498, 300, 390, 411, 257, 707, 2698, 38745, 6987, 5622, 1622, 2290, 11, 300, 1116, 312, 370, 11, 370, 50644, 50644, 4420, 13, 286, 576, 764, 300, 13, 50728, 50800, 865, 11, 286, 519, 286, 519, 456, 1062, 312, 364, 2650, 337, 806, 76, 3089, 1049, 1936, 382, 264, 6405, 11, 558, 30, 51036, 51036, 1743, 11, 558, 13, 400, 411, 11, 498, 291, 434, 1217, 884, 1880, 721, 365, 11, 291, 458, 11, 1412, 7139, 51288, 51288, 293, 7207, 278, 807, 1507, 11, 293, 286, 914, 11, 291, 434, 1217, 17746, 7098, 11, 558, 30, 1743, 11, 370, 341, 307, 51516, 51516, 445, 411, 11, 2293, 11, 411, 11, 291, 2759, 380, 754, 643, 281, 13, 865, 11, 291, 445, 411, 11, 829, 806, 76, 3089, 1049, 294, 51828, 51828], "temperature": 0.0, "avg_logprob": -0.23512494736823483, "compression_ratio": 1.7542662116040955, "no_caption_prob": 0.0001420033077010885}, {"id": 739, "seek": 433836, "start": 4343.96, "end": 4345.639999999999, "text": " useful. I would use that.", "tokens": [50364, 493, 293, 2614, 13, 400, 498, 300, 390, 411, 257, 707, 2698, 38745, 6987, 5622, 1622, 2290, 11, 300, 1116, 312, 370, 11, 370, 50644, 50644, 4420, 13, 286, 576, 764, 300, 13, 50728, 50800, 865, 11, 286, 519, 286, 519, 456, 1062, 312, 364, 2650, 337, 806, 76, 3089, 1049, 1936, 382, 264, 6405, 11, 558, 30, 51036, 51036, 1743, 11, 558, 13, 400, 411, 11, 498, 291, 434, 1217, 884, 1880, 721, 365, 11, 291, 458, 11, 1412, 7139, 51288, 51288, 293, 7207, 278, 807, 1507, 11, 293, 286, 914, 11, 291, 434, 1217, 17746, 7098, 11, 558, 30, 1743, 11, 370, 341, 307, 51516, 51516, 445, 411, 11, 2293, 11, 411, 11, 291, 2759, 380, 754, 643, 281, 13, 865, 11, 291, 445, 411, 11, 829, 806, 76, 3089, 1049, 294, 51828, 51828], "temperature": 0.0, "avg_logprob": -0.23512494736823483, "compression_ratio": 1.7542662116040955, "no_caption_prob": 0.0001420033077010885}, {"id": 740, "seek": 433836, "start": 4347.08, "end": 4351.799999999999, "text": " Yeah, I think I think there might be an opportunity for elm code gen basically as the library, right?", "tokens": [50364, 493, 293, 2614, 13, 400, 498, 300, 390, 411, 257, 707, 2698, 38745, 6987, 5622, 1622, 2290, 11, 300, 1116, 312, 370, 11, 370, 50644, 50644, 4420, 13, 286, 576, 764, 300, 13, 50728, 50800, 865, 11, 286, 519, 286, 519, 456, 1062, 312, 364, 2650, 337, 806, 76, 3089, 1049, 1936, 382, 264, 6405, 11, 558, 30, 51036, 51036, 1743, 11, 558, 13, 400, 411, 11, 498, 291, 434, 1217, 884, 1880, 721, 365, 11, 291, 458, 11, 1412, 7139, 51288, 51288, 293, 7207, 278, 807, 1507, 11, 293, 286, 914, 11, 291, 434, 1217, 17746, 7098, 11, 558, 30, 1743, 11, 370, 341, 307, 51516, 51516, 445, 411, 11, 2293, 11, 411, 11, 291, 2759, 380, 754, 643, 281, 13, 865, 11, 291, 445, 411, 11, 829, 806, 76, 3089, 1049, 294, 51828, 51828], "temperature": 0.0, "avg_logprob": -0.23512494736823483, "compression_ratio": 1.7542662116040955, "no_caption_prob": 0.0001420033077010885}, {"id": 741, "seek": 433836, "start": 4351.799999999999, "end": 4356.839999999999, "text": " Like, right. And like, if you're already doing interesting things with, you know, data sources", "tokens": [50364, 493, 293, 2614, 13, 400, 498, 300, 390, 411, 257, 707, 2698, 38745, 6987, 5622, 1622, 2290, 11, 300, 1116, 312, 370, 11, 370, 50644, 50644, 4420, 13, 286, 576, 764, 300, 13, 50728, 50800, 865, 11, 286, 519, 286, 519, 456, 1062, 312, 364, 2650, 337, 806, 76, 3089, 1049, 1936, 382, 264, 6405, 11, 558, 30, 51036, 51036, 1743, 11, 558, 13, 400, 411, 11, 498, 291, 434, 1217, 884, 1880, 721, 365, 11, 291, 458, 11, 1412, 7139, 51288, 51288, 293, 7207, 278, 807, 1507, 11, 293, 286, 914, 11, 291, 434, 1217, 17746, 7098, 11, 558, 30, 1743, 11, 370, 341, 307, 51516, 51516, 445, 411, 11, 2293, 11, 411, 11, 291, 2759, 380, 754, 643, 281, 13, 865, 11, 291, 445, 411, 11, 829, 806, 76, 3089, 1049, 294, 51828, 51828], "temperature": 0.0, "avg_logprob": -0.23512494736823483, "compression_ratio": 1.7542662116040955, "no_caption_prob": 0.0001420033077010885}, {"id": 742, "seek": 433836, "start": 4356.839999999999, "end": 4361.4, "text": " and threading through stuff, and I mean, you're already generating files, right? Like, so this is", "tokens": [50364, 493, 293, 2614, 13, 400, 498, 300, 390, 411, 257, 707, 2698, 38745, 6987, 5622, 1622, 2290, 11, 300, 1116, 312, 370, 11, 370, 50644, 50644, 4420, 13, 286, 576, 764, 300, 13, 50728, 50800, 865, 11, 286, 519, 286, 519, 456, 1062, 312, 364, 2650, 337, 806, 76, 3089, 1049, 1936, 382, 264, 6405, 11, 558, 30, 51036, 51036, 1743, 11, 558, 13, 400, 411, 11, 498, 291, 434, 1217, 884, 1880, 721, 365, 11, 291, 458, 11, 1412, 7139, 51288, 51288, 293, 7207, 278, 807, 1507, 11, 293, 286, 914, 11, 291, 434, 1217, 17746, 7098, 11, 558, 30, 1743, 11, 370, 341, 307, 51516, 51516, 445, 411, 11, 2293, 11, 411, 11, 291, 2759, 380, 754, 643, 281, 13, 865, 11, 291, 445, 411, 11, 829, 806, 76, 3089, 1049, 294, 51828, 51828], "temperature": 0.0, "avg_logprob": -0.23512494736823483, "compression_ratio": 1.7542662116040955, "no_caption_prob": 0.0001420033077010885}, {"id": 743, "seek": 433836, "start": 4361.4, "end": 4367.639999999999, "text": " just like, exactly, like, you wouldn't even need to. Yeah, you just like, put elm code gen in", "tokens": [50364, 493, 293, 2614, 13, 400, 498, 300, 390, 411, 257, 707, 2698, 38745, 6987, 5622, 1622, 2290, 11, 300, 1116, 312, 370, 11, 370, 50644, 50644, 4420, 13, 286, 576, 764, 300, 13, 50728, 50800, 865, 11, 286, 519, 286, 519, 456, 1062, 312, 364, 2650, 337, 806, 76, 3089, 1049, 1936, 382, 264, 6405, 11, 558, 30, 51036, 51036, 1743, 11, 558, 13, 400, 411, 11, 498, 291, 434, 1217, 884, 1880, 721, 365, 11, 291, 458, 11, 1412, 7139, 51288, 51288, 293, 7207, 278, 807, 1507, 11, 293, 286, 914, 11, 291, 434, 1217, 17746, 7098, 11, 558, 30, 1743, 11, 370, 341, 307, 51516, 51516, 445, 411, 11, 2293, 11, 411, 11, 291, 2759, 380, 754, 643, 281, 13, 865, 11, 291, 445, 411, 11, 829, 806, 76, 3089, 1049, 294, 51828, 51828], "temperature": 0.0, "avg_logprob": -0.23512494736823483, "compression_ratio": 1.7542662116040955, "no_caption_prob": 0.0001420033077010885}, {"id": 744, "seek": 436764, "start": 4367.64, "end": 4372.76, "text": " wherever you want to generate some stuff. I mean, ultimately, the vast majority of elm code gen is", "tokens": [50364, 8660, 291, 528, 281, 8460, 512, 1507, 13, 286, 914, 11, 6284, 11, 264, 8369, 6286, 295, 806, 76, 3089, 1049, 307, 50620, 50620, 445, 294, 806, 76, 13, 509, 393, 1190, 309, 294, 364, 476, 11, 558, 30, 1743, 11, 286, 534, 411, 300, 291, 393, 1190, 309, 13, 509, 393, 50960, 50960, 4088, 264, 10833, 3089, 281, 6798, 11, 293, 4412, 1455, 309, 2435, 281, 806, 76, 3131, 11, 51224, 51224, 597, 561, 393, 360, 1627, 721, 365, 309, 13, 1743, 11, 1954, 11, 1338, 11, 456, 321, 352, 13, 51612, 51612], "temperature": 0.0, "avg_logprob": -0.2840016881624858, "compression_ratio": 1.5954545454545455, "no_caption_prob": 6.30262729828246e-05}, {"id": 745, "seek": 436764, "start": 4372.76, "end": 4379.56, "text": " just in elm. You can run it in an le, right? Like, I really like that you can run it. You can", "tokens": [50364, 8660, 291, 528, 281, 8460, 512, 1507, 13, 286, 914, 11, 6284, 11, 264, 8369, 6286, 295, 806, 76, 3089, 1049, 307, 50620, 50620, 445, 294, 806, 76, 13, 509, 393, 1190, 309, 294, 364, 476, 11, 558, 30, 1743, 11, 286, 534, 411, 300, 291, 393, 1190, 309, 13, 509, 393, 50960, 50960, 4088, 264, 10833, 3089, 281, 6798, 11, 293, 4412, 1455, 309, 2435, 281, 806, 76, 3131, 11, 51224, 51224, 597, 561, 393, 360, 1627, 721, 365, 309, 13, 1743, 11, 1954, 11, 1338, 11, 456, 321, 352, 13, 51612, 51612], "temperature": 0.0, "avg_logprob": -0.2840016881624858, "compression_ratio": 1.5954545454545455, "no_caption_prob": 6.30262729828246e-05}, {"id": 746, "seek": 436764, "start": 4379.56, "end": 4384.84, "text": " transform the generated code to string, and therefore making it available to elm review,", "tokens": [50364, 8660, 291, 528, 281, 8460, 512, 1507, 13, 286, 914, 11, 6284, 11, 264, 8369, 6286, 295, 806, 76, 3089, 1049, 307, 50620, 50620, 445, 294, 806, 76, 13, 509, 393, 1190, 309, 294, 364, 476, 11, 558, 30, 1743, 11, 286, 534, 411, 300, 291, 393, 1190, 309, 13, 509, 393, 50960, 50960, 4088, 264, 10833, 3089, 281, 6798, 11, 293, 4412, 1455, 309, 2435, 281, 806, 76, 3131, 11, 51224, 51224, 597, 561, 393, 360, 1627, 721, 365, 309, 13, 1743, 11, 1954, 11, 1338, 11, 456, 321, 352, 13, 51612, 51612], "temperature": 0.0, "avg_logprob": -0.2840016881624858, "compression_ratio": 1.5954545454545455, "no_caption_prob": 6.30262729828246e-05}, {"id": 747, "seek": 436764, "start": 4384.84, "end": 4392.6, "text": " which people can do cool things with it. Like, oh, yeah, there we go.", "tokens": [50364, 8660, 291, 528, 281, 8460, 512, 1507, 13, 286, 914, 11, 6284, 11, 264, 8369, 6286, 295, 806, 76, 3089, 1049, 307, 50620, 50620, 445, 294, 806, 76, 13, 509, 393, 1190, 309, 294, 364, 476, 11, 558, 30, 1743, 11, 286, 534, 411, 300, 291, 393, 1190, 309, 13, 509, 393, 50960, 50960, 4088, 264, 10833, 3089, 281, 6798, 11, 293, 4412, 1455, 309, 2435, 281, 806, 76, 3131, 11, 51224, 51224, 597, 561, 393, 360, 1627, 721, 365, 309, 13, 1743, 11, 1954, 11, 1338, 11, 456, 321, 352, 13, 51612, 51612], "temperature": 0.0, "avg_logprob": -0.2840016881624858, "compression_ratio": 1.5954545454545455, "no_caption_prob": 6.30262729828246e-05}, {"id": 748, "seek": 439260, "start": 4392.6, "end": 4399.400000000001, "text": " If your review is you're generating elm code before it's generated, is that useful? Probably not.", "tokens": [50364, 759, 428, 3131, 307, 291, 434, 17746, 806, 76, 3089, 949, 309, 311, 10833, 11, 307, 300, 4420, 30, 9210, 406, 13, 50704, 50756, 883, 11, 731, 11, 9184, 1100, 1007, 293, 754, 28160, 4114, 512, 3131, 4474, 689, 291, 630, 584, 24083, 13, 1353, 360, 11, 51128, 51128, 293, 294, 341, 4875, 11, 291, 362, 17995, 3089, 11, 293, 300, 35592, 309, 281, 17995, 420, 31828, 979, 378, 433, 420, 51484, 51484, 2035, 13, 1033, 13, 51556, 51584], "temperature": 0.0, "avg_logprob": -0.2706389015103564, "compression_ratio": 1.4509803921568627, "no_caption_prob": 4.1985142161138356e-05}, {"id": 749, "seek": 439260, "start": 4400.4400000000005, "end": 4407.88, "text": " No, well, Martin Seward and even Dylan wrote some review rules where you did say debug.to do,", "tokens": [50364, 759, 428, 3131, 307, 291, 434, 17746, 806, 76, 3089, 949, 309, 311, 10833, 11, 307, 300, 4420, 30, 9210, 406, 13, 50704, 50756, 883, 11, 731, 11, 9184, 1100, 1007, 293, 754, 28160, 4114, 512, 3131, 4474, 689, 291, 630, 584, 24083, 13, 1353, 360, 11, 51128, 51128, 293, 294, 341, 4875, 11, 291, 362, 17995, 3089, 11, 293, 300, 35592, 309, 281, 17995, 420, 31828, 979, 378, 433, 420, 51484, 51484, 2035, 13, 1033, 13, 51556, 51584], "temperature": 0.0, "avg_logprob": -0.2706389015103564, "compression_ratio": 1.4509803921568627, "no_caption_prob": 4.1985142161138356e-05}, {"id": 750, "seek": 439260, "start": 4407.88, "end": 4415.0, "text": " and in this ring, you have HTML code, and that transforms it to HTML or JSON decoders or", "tokens": [50364, 759, 428, 3131, 307, 291, 434, 17746, 806, 76, 3089, 949, 309, 311, 10833, 11, 307, 300, 4420, 30, 9210, 406, 13, 50704, 50756, 883, 11, 731, 11, 9184, 1100, 1007, 293, 754, 28160, 4114, 512, 3131, 4474, 689, 291, 630, 584, 24083, 13, 1353, 360, 11, 51128, 51128, 293, 294, 341, 4875, 11, 291, 362, 17995, 3089, 11, 293, 300, 35592, 309, 281, 17995, 420, 31828, 979, 378, 433, 420, 51484, 51484, 2035, 13, 1033, 13, 51556, 51584], "temperature": 0.0, "avg_logprob": -0.2706389015103564, "compression_ratio": 1.4509803921568627, "no_caption_prob": 4.1985142161138356e-05}, {"id": 751, "seek": 439260, "start": 4415.0, "end": 4416.4400000000005, "text": " whatever. Okay.", "tokens": [50364, 759, 428, 3131, 307, 291, 434, 17746, 806, 76, 3089, 949, 309, 311, 10833, 11, 307, 300, 4420, 30, 9210, 406, 13, 50704, 50756, 883, 11, 731, 11, 9184, 1100, 1007, 293, 754, 28160, 4114, 512, 3131, 4474, 689, 291, 630, 584, 24083, 13, 1353, 360, 11, 51128, 51128, 293, 294, 341, 4875, 11, 291, 362, 17995, 3089, 11, 293, 300, 35592, 309, 281, 17995, 420, 31828, 979, 378, 433, 420, 51484, 51484, 2035, 13, 1033, 13, 51556, 51584], "temperature": 0.0, "avg_logprob": -0.2706389015103564, "compression_ratio": 1.4509803921568627, "no_caption_prob": 4.1985142161138356e-05}, {"id": 752, "seek": 441644, "start": 4416.44, "end": 4423.32, "text": " So there's definitely some uses for it. I don't know if it's easier to write it using strings,", "tokens": [50364, 407, 456, 311, 2138, 512, 4960, 337, 309, 13, 286, 500, 380, 458, 498, 309, 311, 3571, 281, 2464, 309, 1228, 13985, 11, 50708, 50708, 457, 1310, 806, 76, 3089, 1049, 576, 312, 2176, 510, 13, 467, 576, 312, 588, 1627, 13, 961, 311, 652, 806, 76, 7183, 3089, 51028, 51028, 1049, 3131, 293, 550, 818, 309, 257, 786, 13, 961, 311, 360, 309, 13, 10246, 13, 51224, 51352, 865, 11, 286, 767, 1143, 806, 76, 3089, 1049, 411, 257, 1339, 646, 337, 746, 562, 309, 390, 920, 806, 76, 18417, 455, 13, 51700, 51728], "temperature": 0.0, "avg_logprob": -0.16181545650836118, "compression_ratio": 1.5806451612903225, "no_caption_prob": 6.30234062555246e-05}, {"id": 753, "seek": 441644, "start": 4423.32, "end": 4429.719999999999, "text": " but maybe elm code gen would be perfect here. It would be very cool. Let's make elm pages code", "tokens": [50364, 407, 456, 311, 2138, 512, 4960, 337, 309, 13, 286, 500, 380, 458, 498, 309, 311, 3571, 281, 2464, 309, 1228, 13985, 11, 50708, 50708, 457, 1310, 806, 76, 3089, 1049, 576, 312, 2176, 510, 13, 467, 576, 312, 588, 1627, 13, 961, 311, 652, 806, 76, 7183, 3089, 51028, 51028, 1049, 3131, 293, 550, 818, 309, 257, 786, 13, 961, 311, 360, 309, 13, 10246, 13, 51224, 51352, 865, 11, 286, 767, 1143, 806, 76, 3089, 1049, 411, 257, 1339, 646, 337, 746, 562, 309, 390, 920, 806, 76, 18417, 455, 13, 51700, 51728], "temperature": 0.0, "avg_logprob": -0.16181545650836118, "compression_ratio": 1.5806451612903225, "no_caption_prob": 6.30234062555246e-05}, {"id": 754, "seek": 441644, "start": 4429.719999999999, "end": 4433.639999999999, "text": " gen review and then call it a day. Let's do it. Perfect.", "tokens": [50364, 407, 456, 311, 2138, 512, 4960, 337, 309, 13, 286, 500, 380, 458, 498, 309, 311, 3571, 281, 2464, 309, 1228, 13985, 11, 50708, 50708, 457, 1310, 806, 76, 3089, 1049, 576, 312, 2176, 510, 13, 467, 576, 312, 588, 1627, 13, 961, 311, 652, 806, 76, 7183, 3089, 51028, 51028, 1049, 3131, 293, 550, 818, 309, 257, 786, 13, 961, 311, 360, 309, 13, 10246, 13, 51224, 51352, 865, 11, 286, 767, 1143, 806, 76, 3089, 1049, 411, 257, 1339, 646, 337, 746, 562, 309, 390, 920, 806, 76, 18417, 455, 13, 51700, 51728], "temperature": 0.0, "avg_logprob": -0.16181545650836118, "compression_ratio": 1.5806451612903225, "no_caption_prob": 6.30234062555246e-05}, {"id": 755, "seek": 441644, "start": 4436.2, "end": 4443.16, "text": " Yeah, I actually used elm code gen like a while back for something when it was still elm prefab.", "tokens": [50364, 407, 456, 311, 2138, 512, 4960, 337, 309, 13, 286, 500, 380, 458, 498, 309, 311, 3571, 281, 2464, 309, 1228, 13985, 11, 50708, 50708, 457, 1310, 806, 76, 3089, 1049, 576, 312, 2176, 510, 13, 467, 576, 312, 588, 1627, 13, 961, 311, 652, 806, 76, 7183, 3089, 51028, 51028, 1049, 3131, 293, 550, 818, 309, 257, 786, 13, 961, 311, 360, 309, 13, 10246, 13, 51224, 51352, 865, 11, 286, 767, 1143, 806, 76, 3089, 1049, 411, 257, 1339, 646, 337, 746, 562, 309, 390, 920, 806, 76, 18417, 455, 13, 51700, 51728], "temperature": 0.0, "avg_logprob": -0.16181545650836118, "compression_ratio": 1.5806451612903225, "no_caption_prob": 6.30234062555246e-05}, {"id": 756, "seek": 444316, "start": 4443.16, "end": 4447.0, "text": " That was the original name. Yeah, I forgot about that.", "tokens": [50364, 663, 390, 264, 3380, 1315, 13, 865, 11, 286, 5298, 466, 300, 13, 50556, 50588, 286, 611, 1065, 806, 76, 3712, 69, 455, 13, 1112, 13, 50684, 50812, 467, 390, 1238, 17692, 382, 42310, 13, 440, 472, 551, 300, 286, 5872, 666, 11, 597, 307, 406, 428, 7441, 11, 51232, 51232, 457, 309, 311, 364, 17843, 27432, 11, 307, 300, 286, 3241, 439, 6357, 13, 51424, 51452, 1042, 11, 1338, 11, 498, 291, 528, 281, 11, 291, 393, 380, 829, 294, 1889, 3053, 294, 15277, 13, 51688, 51688, 663, 311, 558, 13, 51712, 51764], "temperature": 0.0, "avg_logprob": -0.15359169244766235, "compression_ratio": 1.5158371040723981, "no_caption_prob": 4.13336165365763e-05}, {"id": 757, "seek": 444316, "start": 4447.639999999999, "end": 4449.5599999999995, "text": " I also own elmprefab.com.", "tokens": [50364, 663, 390, 264, 3380, 1315, 13, 865, 11, 286, 5298, 466, 300, 13, 50556, 50588, 286, 611, 1065, 806, 76, 3712, 69, 455, 13, 1112, 13, 50684, 50812, 467, 390, 1238, 17692, 382, 42310, 13, 440, 472, 551, 300, 286, 5872, 666, 11, 597, 307, 406, 428, 7441, 11, 51232, 51232, 457, 309, 311, 364, 17843, 27432, 11, 307, 300, 286, 3241, 439, 6357, 13, 51424, 51452, 1042, 11, 1338, 11, 498, 291, 528, 281, 11, 291, 393, 380, 829, 294, 1889, 3053, 294, 15277, 13, 51688, 51688, 663, 311, 558, 13, 51712, 51764], "temperature": 0.0, "avg_logprob": -0.15359169244766235, "compression_ratio": 1.5158371040723981, "no_caption_prob": 4.13336165365763e-05}, {"id": 758, "seek": 444316, "start": 4452.12, "end": 4460.5199999999995, "text": " It was pretty fabulous as advertised. The one thing that I ran into, which is not your fault,", "tokens": [50364, 663, 390, 264, 3380, 1315, 13, 865, 11, 286, 5298, 466, 300, 13, 50556, 50588, 286, 611, 1065, 806, 76, 3712, 69, 455, 13, 1112, 13, 50684, 50812, 467, 390, 1238, 17692, 382, 42310, 13, 440, 472, 551, 300, 286, 5872, 666, 11, 597, 307, 406, 428, 7441, 11, 51232, 51232, 457, 309, 311, 364, 17843, 27432, 11, 307, 300, 286, 3241, 439, 6357, 13, 51424, 51452, 1042, 11, 1338, 11, 498, 291, 528, 281, 11, 291, 393, 380, 829, 294, 1889, 3053, 294, 15277, 13, 51688, 51688, 663, 311, 558, 13, 51712, 51764], "temperature": 0.0, "avg_logprob": -0.15359169244766235, "compression_ratio": 1.5158371040723981, "no_caption_prob": 4.13336165365763e-05}, {"id": 759, "seek": 444316, "start": 4460.5199999999995, "end": 4464.36, "text": " but it's an unfortunate limitation, is that I accept all responsibility.", "tokens": [50364, 663, 390, 264, 3380, 1315, 13, 865, 11, 286, 5298, 466, 300, 13, 50556, 50588, 286, 611, 1065, 806, 76, 3712, 69, 455, 13, 1112, 13, 50684, 50812, 467, 390, 1238, 17692, 382, 42310, 13, 440, 472, 551, 300, 286, 5872, 666, 11, 597, 307, 406, 428, 7441, 11, 51232, 51232, 457, 309, 311, 364, 17843, 27432, 11, 307, 300, 286, 3241, 439, 6357, 13, 51424, 51452, 1042, 11, 1338, 11, 498, 291, 528, 281, 11, 291, 393, 380, 829, 294, 1889, 3053, 294, 15277, 13, 51688, 51688, 663, 311, 558, 13, 51712, 51764], "temperature": 0.0, "avg_logprob": -0.15359169244766235, "compression_ratio": 1.5158371040723981, "no_caption_prob": 4.13336165365763e-05}, {"id": 760, "seek": 444316, "start": 4464.92, "end": 4469.639999999999, "text": " Well, yeah, if you want to, you can't put inline comments in expressions.", "tokens": [50364, 663, 390, 264, 3380, 1315, 13, 865, 11, 286, 5298, 466, 300, 13, 50556, 50588, 286, 611, 1065, 806, 76, 3712, 69, 455, 13, 1112, 13, 50684, 50812, 467, 390, 1238, 17692, 382, 42310, 13, 440, 472, 551, 300, 286, 5872, 666, 11, 597, 307, 406, 428, 7441, 11, 51232, 51232, 457, 309, 311, 364, 17843, 27432, 11, 307, 300, 286, 3241, 439, 6357, 13, 51424, 51452, 1042, 11, 1338, 11, 498, 291, 528, 281, 11, 291, 393, 380, 829, 294, 1889, 3053, 294, 15277, 13, 51688, 51688, 663, 311, 558, 13, 51712, 51764], "temperature": 0.0, "avg_logprob": -0.15359169244766235, "compression_ratio": 1.5158371040723981, "no_caption_prob": 4.13336165365763e-05}, {"id": 761, "seek": 444316, "start": 4469.639999999999, "end": 4470.12, "text": " That's right.", "tokens": [50364, 663, 390, 264, 3380, 1315, 13, 865, 11, 286, 5298, 466, 300, 13, 50556, 50588, 286, 611, 1065, 806, 76, 3712, 69, 455, 13, 1112, 13, 50684, 50812, 467, 390, 1238, 17692, 382, 42310, 13, 440, 472, 551, 300, 286, 5872, 666, 11, 597, 307, 406, 428, 7441, 11, 51232, 51232, 457, 309, 311, 364, 17843, 27432, 11, 307, 300, 286, 3241, 439, 6357, 13, 51424, 51452, 1042, 11, 1338, 11, 498, 291, 528, 281, 11, 291, 393, 380, 829, 294, 1889, 3053, 294, 15277, 13, 51688, 51688, 663, 311, 558, 13, 51712, 51764], "temperature": 0.0, "avg_logprob": -0.15359169244766235, "compression_ratio": 1.5158371040723981, "no_caption_prob": 4.13336165365763e-05}, {"id": 762, "seek": 447012, "start": 4470.12, "end": 4477.5599999999995, "text": " Yeah, I was trying to use it for a couple of things where I wanted to do for elm HTTP fusion,", "tokens": [50364, 865, 11, 286, 390, 1382, 281, 764, 309, 337, 257, 1916, 295, 721, 689, 286, 1415, 281, 360, 337, 806, 76, 33283, 23100, 11, 50736, 50736, 341, 724, 300, 9343, 293, 286, 362, 42463, 322, 257, 857, 11, 5240, 9343, 11, 457, 281, 733, 295, 44094, 484, 51096, 51096, 613, 979, 378, 433, 293, 1507, 2361, 322, 31828, 13019, 13, 583, 264, 44094, 292, 3089, 11, 2171, 291, 528, 281, 829, 51444, 51444, 294, 613, 707, 3053, 294, 264, 44094, 3089, 293, 300, 311, 257, 27432, 13, 51692, 51692, 865, 11, 286, 2138, 528, 309, 13, 51760, 51760], "temperature": 0.0, "avg_logprob": -0.18763134002685547, "compression_ratio": 1.6074380165289257, "no_caption_prob": 0.0001233874645549804}, {"id": 763, "seek": 447012, "start": 4477.5599999999995, "end": 4484.76, "text": " this app that Mario and I have collaborated on a bit, mostly Mario, but to kind of scaffold out", "tokens": [50364, 865, 11, 286, 390, 1382, 281, 764, 309, 337, 257, 1916, 295, 721, 689, 286, 1415, 281, 360, 337, 806, 76, 33283, 23100, 11, 50736, 50736, 341, 724, 300, 9343, 293, 286, 362, 42463, 322, 257, 857, 11, 5240, 9343, 11, 457, 281, 733, 295, 44094, 484, 51096, 51096, 613, 979, 378, 433, 293, 1507, 2361, 322, 31828, 13019, 13, 583, 264, 44094, 292, 3089, 11, 2171, 291, 528, 281, 829, 51444, 51444, 294, 613, 707, 3053, 294, 264, 44094, 3089, 293, 300, 311, 257, 27432, 13, 51692, 51692, 865, 11, 286, 2138, 528, 309, 13, 51760, 51760], "temperature": 0.0, "avg_logprob": -0.18763134002685547, "compression_ratio": 1.6074380165289257, "no_caption_prob": 0.0001233874645549804}, {"id": 764, "seek": 447012, "start": 4484.76, "end": 4491.72, "text": " these decoders and stuff based on JSON responses. But the scaffolded code, sometimes you want to put", "tokens": [50364, 865, 11, 286, 390, 1382, 281, 764, 309, 337, 257, 1916, 295, 721, 689, 286, 1415, 281, 360, 337, 806, 76, 33283, 23100, 11, 50736, 50736, 341, 724, 300, 9343, 293, 286, 362, 42463, 322, 257, 857, 11, 5240, 9343, 11, 457, 281, 733, 295, 44094, 484, 51096, 51096, 613, 979, 378, 433, 293, 1507, 2361, 322, 31828, 13019, 13, 583, 264, 44094, 292, 3089, 11, 2171, 291, 528, 281, 829, 51444, 51444, 294, 613, 707, 3053, 294, 264, 44094, 3089, 293, 300, 311, 257, 27432, 13, 51692, 51692, 865, 11, 286, 2138, 528, 309, 13, 51760, 51760], "temperature": 0.0, "avg_logprob": -0.18763134002685547, "compression_ratio": 1.6074380165289257, "no_caption_prob": 0.0001233874645549804}, {"id": 765, "seek": 447012, "start": 4491.72, "end": 4496.68, "text": " in these little comments in the scaffold code and that's a limitation.", "tokens": [50364, 865, 11, 286, 390, 1382, 281, 764, 309, 337, 257, 1916, 295, 721, 689, 286, 1415, 281, 360, 337, 806, 76, 33283, 23100, 11, 50736, 50736, 341, 724, 300, 9343, 293, 286, 362, 42463, 322, 257, 857, 11, 5240, 9343, 11, 457, 281, 733, 295, 44094, 484, 51096, 51096, 613, 979, 378, 433, 293, 1507, 2361, 322, 31828, 13019, 13, 583, 264, 44094, 292, 3089, 11, 2171, 291, 528, 281, 829, 51444, 51444, 294, 613, 707, 3053, 294, 264, 44094, 3089, 293, 300, 311, 257, 27432, 13, 51692, 51692, 865, 11, 286, 2138, 528, 309, 13, 51760, 51760], "temperature": 0.0, "avg_logprob": -0.18763134002685547, "compression_ratio": 1.6074380165289257, "no_caption_prob": 0.0001233874645549804}, {"id": 766, "seek": 447012, "start": 4496.68, "end": 4498.04, "text": " Yeah, I definitely want it.", "tokens": [50364, 865, 11, 286, 390, 1382, 281, 764, 309, 337, 257, 1916, 295, 721, 689, 286, 1415, 281, 360, 337, 806, 76, 33283, 23100, 11, 50736, 50736, 341, 724, 300, 9343, 293, 286, 362, 42463, 322, 257, 857, 11, 5240, 9343, 11, 457, 281, 733, 295, 44094, 484, 51096, 51096, 613, 979, 378, 433, 293, 1507, 2361, 322, 31828, 13019, 13, 583, 264, 44094, 292, 3089, 11, 2171, 291, 528, 281, 829, 51444, 51444, 294, 613, 707, 3053, 294, 264, 44094, 3089, 293, 300, 311, 257, 27432, 13, 51692, 51692, 865, 11, 286, 2138, 528, 309, 13, 51760, 51760], "temperature": 0.0, "avg_logprob": -0.18763134002685547, "compression_ratio": 1.6074380165289257, "no_caption_prob": 0.0001233874645549804}, {"id": 767, "seek": 449804, "start": 4498.04, "end": 4501.24, "text": " I'm guessing it's a limitation from elm syntax or something.", "tokens": [50364, 286, 478, 17939, 309, 311, 257, 27432, 490, 806, 76, 28431, 420, 746, 13, 50524, 50524, 663, 311, 558, 13, 663, 311, 558, 13, 407, 291, 393, 362, 3053, 11, 1192, 1496, 3053, 13, 50800, 50800, 509, 393, 362, 3211, 3053, 8570, 281, 16694, 763, 11, 558, 30, 407, 729, 366, 8104, 51052, 51052, 293, 820, 312, 869, 13, 440, 3430, 11, 341, 806, 76, 3089, 1049, 307, 3094, 322, 1192, 295, 257, 6405, 1219, 806, 76, 28431, 13, 51332, 51332, 400, 437, 806, 76, 28431, 775, 562, 309, 21156, 279, 806, 76, 3089, 11, 754, 1673, 321, 434, 406, 4725, 21156, 278, 806, 76, 3089, 51604, 51644], "temperature": 0.0, "avg_logprob": -0.11261677308516069, "compression_ratio": 1.7172131147540983, "no_caption_prob": 2.6273746698279865e-05}, {"id": 768, "seek": 449804, "start": 4501.24, "end": 4506.76, "text": " That's right. That's right. So you can have comments, top level comments.", "tokens": [50364, 286, 478, 17939, 309, 311, 257, 27432, 490, 806, 76, 28431, 420, 746, 13, 50524, 50524, 663, 311, 558, 13, 663, 311, 558, 13, 407, 291, 393, 362, 3053, 11, 1192, 1496, 3053, 13, 50800, 50800, 509, 393, 362, 3211, 3053, 8570, 281, 16694, 763, 11, 558, 30, 407, 729, 366, 8104, 51052, 51052, 293, 820, 312, 869, 13, 440, 3430, 11, 341, 806, 76, 3089, 1049, 307, 3094, 322, 1192, 295, 257, 6405, 1219, 806, 76, 28431, 13, 51332, 51332, 400, 437, 806, 76, 28431, 775, 562, 309, 21156, 279, 806, 76, 3089, 11, 754, 1673, 321, 434, 406, 4725, 21156, 278, 806, 76, 3089, 51604, 51644], "temperature": 0.0, "avg_logprob": -0.11261677308516069, "compression_ratio": 1.7172131147540983, "no_caption_prob": 2.6273746698279865e-05}, {"id": 769, "seek": 449804, "start": 4506.76, "end": 4511.8, "text": " You can have doc comments attached to declarations, right? So those are supported", "tokens": [50364, 286, 478, 17939, 309, 311, 257, 27432, 490, 806, 76, 28431, 420, 746, 13, 50524, 50524, 663, 311, 558, 13, 663, 311, 558, 13, 407, 291, 393, 362, 3053, 11, 1192, 1496, 3053, 13, 50800, 50800, 509, 393, 362, 3211, 3053, 8570, 281, 16694, 763, 11, 558, 30, 407, 729, 366, 8104, 51052, 51052, 293, 820, 312, 869, 13, 440, 3430, 11, 341, 806, 76, 3089, 1049, 307, 3094, 322, 1192, 295, 257, 6405, 1219, 806, 76, 28431, 13, 51332, 51332, 400, 437, 806, 76, 28431, 775, 562, 309, 21156, 279, 806, 76, 3089, 11, 754, 1673, 321, 434, 406, 4725, 21156, 278, 806, 76, 3089, 51604, 51644], "temperature": 0.0, "avg_logprob": -0.11261677308516069, "compression_ratio": 1.7172131147540983, "no_caption_prob": 2.6273746698279865e-05}, {"id": 770, "seek": 449804, "start": 4511.8, "end": 4517.4, "text": " and should be great. The challenge, this elm code gen is built on top of a library called elm syntax.", "tokens": [50364, 286, 478, 17939, 309, 311, 257, 27432, 490, 806, 76, 28431, 420, 746, 13, 50524, 50524, 663, 311, 558, 13, 663, 311, 558, 13, 407, 291, 393, 362, 3053, 11, 1192, 1496, 3053, 13, 50800, 50800, 509, 393, 362, 3211, 3053, 8570, 281, 16694, 763, 11, 558, 30, 407, 729, 366, 8104, 51052, 51052, 293, 820, 312, 869, 13, 440, 3430, 11, 341, 806, 76, 3089, 1049, 307, 3094, 322, 1192, 295, 257, 6405, 1219, 806, 76, 28431, 13, 51332, 51332, 400, 437, 806, 76, 28431, 775, 562, 309, 21156, 279, 806, 76, 3089, 11, 754, 1673, 321, 434, 406, 4725, 21156, 278, 806, 76, 3089, 51604, 51644], "temperature": 0.0, "avg_logprob": -0.11261677308516069, "compression_ratio": 1.7172131147540983, "no_caption_prob": 2.6273746698279865e-05}, {"id": 771, "seek": 449804, "start": 4517.4, "end": 4522.84, "text": " And what elm syntax does when it parses elm code, even though we're not necessarily parsing elm code", "tokens": [50364, 286, 478, 17939, 309, 311, 257, 27432, 490, 806, 76, 28431, 420, 746, 13, 50524, 50524, 663, 311, 558, 13, 663, 311, 558, 13, 407, 291, 393, 362, 3053, 11, 1192, 1496, 3053, 13, 50800, 50800, 509, 393, 362, 3211, 3053, 8570, 281, 16694, 763, 11, 558, 30, 407, 729, 366, 8104, 51052, 51052, 293, 820, 312, 869, 13, 440, 3430, 11, 341, 806, 76, 3089, 1049, 307, 3094, 322, 1192, 295, 257, 6405, 1219, 806, 76, 28431, 13, 51332, 51332, 400, 437, 806, 76, 28431, 775, 562, 309, 21156, 279, 806, 76, 3089, 11, 754, 1673, 321, 434, 406, 4725, 21156, 278, 806, 76, 3089, 51604, 51644], "temperature": 0.0, "avg_logprob": -0.11261677308516069, "compression_ratio": 1.7172131147540983, "no_caption_prob": 2.6273746698279865e-05}, {"id": 772, "seek": 452284, "start": 4522.84, "end": 4528.84, "text": " in elm code gen, except sometimes, is that it takes all the inline comments,", "tokens": [50364, 294, 806, 76, 3089, 1049, 11, 3993, 2171, 11, 307, 300, 309, 2516, 439, 264, 294, 1889, 3053, 11, 50664, 50684, 5570, 641, 4009, 2535, 11, 370, 641, 7738, 293, 1622, 11, 293, 550, 309, 5286, 82, 552, 493, 281, 257, 50956, 50992, 25890, 420, 406, 25890, 11, 257, 1329, 412, 264, 1192, 295, 264, 1412, 3877, 13, 407, 309, 2516, 552, 484, 295, 264, 51264, 51264, 316, 6840, 13, 400, 5101, 11, 291, 458, 11, 286, 914, 11, 456, 311, 257, 4829, 295, 5017, 337, 411, 11, 360, 3053, 1621, 294, 51540, 51540, 316, 6840, 82, 30, 286, 519, 6284, 11, 309, 5946, 437, 428, 4334, 295, 428, 316, 6840, 307, 13, 2699, 76, 28431, 11, 309, 311, 257, 51836, 51836], "temperature": 0.0, "avg_logprob": -0.2248017249568816, "compression_ratio": 1.6753731343283582, "no_caption_prob": 8.219000301323831e-05}, {"id": 773, "seek": 452284, "start": 4529.24, "end": 4534.68, "text": " notes their source position, so their column and line, and then it drags them up to a", "tokens": [50364, 294, 806, 76, 3089, 1049, 11, 3993, 2171, 11, 307, 300, 309, 2516, 439, 264, 294, 1889, 3053, 11, 50664, 50684, 5570, 641, 4009, 2535, 11, 370, 641, 7738, 293, 1622, 11, 293, 550, 309, 5286, 82, 552, 493, 281, 257, 50956, 50992, 25890, 420, 406, 25890, 11, 257, 1329, 412, 264, 1192, 295, 264, 1412, 3877, 13, 407, 309, 2516, 552, 484, 295, 264, 51264, 51264, 316, 6840, 13, 400, 5101, 11, 291, 458, 11, 286, 914, 11, 456, 311, 257, 4829, 295, 5017, 337, 411, 11, 360, 3053, 1621, 294, 51540, 51540, 316, 6840, 82, 30, 286, 519, 6284, 11, 309, 5946, 437, 428, 4334, 295, 428, 316, 6840, 307, 13, 2699, 76, 28431, 11, 309, 311, 257, 51836, 51836], "temperature": 0.0, "avg_logprob": -0.2248017249568816, "compression_ratio": 1.6753731343283582, "no_caption_prob": 8.219000301323831e-05}, {"id": 774, "seek": 452284, "start": 4535.400000000001, "end": 4540.84, "text": " dictionary or not dictionary, a list at the top of the data structure. So it takes them out of the", "tokens": [50364, 294, 806, 76, 3089, 1049, 11, 3993, 2171, 11, 307, 300, 309, 2516, 439, 264, 294, 1889, 3053, 11, 50664, 50684, 5570, 641, 4009, 2535, 11, 370, 641, 7738, 293, 1622, 11, 293, 550, 309, 5286, 82, 552, 493, 281, 257, 50956, 50992, 25890, 420, 406, 25890, 11, 257, 1329, 412, 264, 1192, 295, 264, 1412, 3877, 13, 407, 309, 2516, 552, 484, 295, 264, 51264, 51264, 316, 6840, 13, 400, 5101, 11, 291, 458, 11, 286, 914, 11, 456, 311, 257, 4829, 295, 5017, 337, 411, 11, 360, 3053, 1621, 294, 51540, 51540, 316, 6840, 82, 30, 286, 519, 6284, 11, 309, 5946, 437, 428, 4334, 295, 428, 316, 6840, 307, 13, 2699, 76, 28431, 11, 309, 311, 257, 51836, 51836], "temperature": 0.0, "avg_logprob": -0.2248017249568816, "compression_ratio": 1.6753731343283582, "no_caption_prob": 8.219000301323831e-05}, {"id": 775, "seek": 452284, "start": 4540.84, "end": 4546.360000000001, "text": " AST. And generally, you know, I mean, there's a topic of discussion for like, do comments live in", "tokens": [50364, 294, 806, 76, 3089, 1049, 11, 3993, 2171, 11, 307, 300, 309, 2516, 439, 264, 294, 1889, 3053, 11, 50664, 50684, 5570, 641, 4009, 2535, 11, 370, 641, 7738, 293, 1622, 11, 293, 550, 309, 5286, 82, 552, 493, 281, 257, 50956, 50992, 25890, 420, 406, 25890, 11, 257, 1329, 412, 264, 1192, 295, 264, 1412, 3877, 13, 407, 309, 2516, 552, 484, 295, 264, 51264, 51264, 316, 6840, 13, 400, 5101, 11, 291, 458, 11, 286, 914, 11, 456, 311, 257, 4829, 295, 5017, 337, 411, 11, 360, 3053, 1621, 294, 51540, 51540, 316, 6840, 82, 30, 286, 519, 6284, 11, 309, 5946, 437, 428, 4334, 295, 428, 316, 6840, 307, 13, 2699, 76, 28431, 11, 309, 311, 257, 51836, 51836], "temperature": 0.0, "avg_logprob": -0.2248017249568816, "compression_ratio": 1.6753731343283582, "no_caption_prob": 8.219000301323831e-05}, {"id": 776, "seek": 452284, "start": 4546.360000000001, "end": 4552.28, "text": " ASTs? I think ultimately, it depends what your purpose of your AST is. Elm syntax, it's a", "tokens": [50364, 294, 806, 76, 3089, 1049, 11, 3993, 2171, 11, 307, 300, 309, 2516, 439, 264, 294, 1889, 3053, 11, 50664, 50684, 5570, 641, 4009, 2535, 11, 370, 641, 7738, 293, 1622, 11, 293, 550, 309, 5286, 82, 552, 493, 281, 257, 50956, 50992, 25890, 420, 406, 25890, 11, 257, 1329, 412, 264, 1192, 295, 264, 1412, 3877, 13, 407, 309, 2516, 552, 484, 295, 264, 51264, 51264, 316, 6840, 13, 400, 5101, 11, 291, 458, 11, 286, 914, 11, 456, 311, 257, 4829, 295, 5017, 337, 411, 11, 360, 3053, 1621, 294, 51540, 51540, 316, 6840, 82, 30, 286, 519, 6284, 11, 309, 5946, 437, 428, 4334, 295, 428, 316, 6840, 307, 13, 2699, 76, 28431, 11, 309, 311, 257, 51836, 51836], "temperature": 0.0, "avg_logprob": -0.2248017249568816, "compression_ratio": 1.6753731343283582, "no_caption_prob": 8.219000301323831e-05}, {"id": 777, "seek": 455228, "start": 4552.28, "end": 4557.639999999999, "text": " question that's interesting to ask, what is the purpose of elm syntax? I almost think that it", "tokens": [50364, 1168, 300, 311, 1880, 281, 1029, 11, 437, 307, 264, 4334, 295, 806, 76, 28431, 30, 286, 1920, 519, 300, 309, 50632, 50632, 1669, 2020, 281, 767, 1066, 264, 3053, 294, 264, 316, 6840, 11, 754, 411, 294, 257, 636, 689, 309, 311, 406, 11, 1177, 380, 50900, 50900, 34702, 473, 428, 551, 13, 583, 300, 311, 264, 558, 586, 11, 286, 500, 380, 534, 528, 281, 483, 666, 411, 11, 731, 11, 309, 51236, 51236, 576, 312, 257, 2603, 5533, 337, 806, 76, 3089, 1049, 281, 2573, 484, 264, 5221, 295, 689, 264, 3053, 352, 11, 570, 806, 76, 51516, 51516, 3089, 1049, 4476, 1177, 380, 1127, 466, 4009, 2535, 11, 570, 309, 311, 406, 3760, 257, 3991, 11, 321, 434, 51800, 51800], "temperature": 0.0, "avg_logprob": -0.20890435718354725, "compression_ratio": 1.7178571428571427, "no_caption_prob": 0.0001634348591323942}, {"id": 778, "seek": 455228, "start": 4557.639999999999, "end": 4563.0, "text": " makes sense to actually keep the comments in the AST, even like in a way where it's not, doesn't", "tokens": [50364, 1168, 300, 311, 1880, 281, 1029, 11, 437, 307, 264, 4334, 295, 806, 76, 28431, 30, 286, 1920, 519, 300, 309, 50632, 50632, 1669, 2020, 281, 767, 1066, 264, 3053, 294, 264, 316, 6840, 11, 754, 411, 294, 257, 636, 689, 309, 311, 406, 11, 1177, 380, 50900, 50900, 34702, 473, 428, 551, 13, 583, 300, 311, 264, 558, 586, 11, 286, 500, 380, 534, 528, 281, 483, 666, 411, 11, 731, 11, 309, 51236, 51236, 576, 312, 257, 2603, 5533, 337, 806, 76, 3089, 1049, 281, 2573, 484, 264, 5221, 295, 689, 264, 3053, 352, 11, 570, 806, 76, 51516, 51516, 3089, 1049, 4476, 1177, 380, 1127, 466, 4009, 2535, 11, 570, 309, 311, 406, 3760, 257, 3991, 11, 321, 434, 51800, 51800], "temperature": 0.0, "avg_logprob": -0.20890435718354725, "compression_ratio": 1.7178571428571427, "no_caption_prob": 0.0001634348591323942}, {"id": 779, "seek": 455228, "start": 4563.0, "end": 4569.719999999999, "text": " invalidate your thing. But that's the right now, I don't really want to get into like, well, it", "tokens": [50364, 1168, 300, 311, 1880, 281, 1029, 11, 437, 307, 264, 4334, 295, 806, 76, 28431, 30, 286, 1920, 519, 300, 309, 50632, 50632, 1669, 2020, 281, 767, 1066, 264, 3053, 294, 264, 316, 6840, 11, 754, 411, 294, 257, 636, 689, 309, 311, 406, 11, 1177, 380, 50900, 50900, 34702, 473, 428, 551, 13, 583, 300, 311, 264, 558, 586, 11, 286, 500, 380, 534, 528, 281, 483, 666, 411, 11, 731, 11, 309, 51236, 51236, 576, 312, 257, 2603, 5533, 337, 806, 76, 3089, 1049, 281, 2573, 484, 264, 5221, 295, 689, 264, 3053, 352, 11, 570, 806, 76, 51516, 51516, 3089, 1049, 4476, 1177, 380, 1127, 466, 4009, 2535, 11, 570, 309, 311, 406, 3760, 257, 3991, 11, 321, 434, 51800, 51800], "temperature": 0.0, "avg_logprob": -0.20890435718354725, "compression_ratio": 1.7178571428571427, "no_caption_prob": 0.0001634348591323942}, {"id": 780, "seek": 455228, "start": 4569.719999999999, "end": 4575.32, "text": " would be a huge lift for elm code gen to figure out the math of where the comments go, because elm", "tokens": [50364, 1168, 300, 311, 1880, 281, 1029, 11, 437, 307, 264, 4334, 295, 806, 76, 28431, 30, 286, 1920, 519, 300, 309, 50632, 50632, 1669, 2020, 281, 767, 1066, 264, 3053, 294, 264, 316, 6840, 11, 754, 411, 294, 257, 636, 689, 309, 311, 406, 11, 1177, 380, 50900, 50900, 34702, 473, 428, 551, 13, 583, 300, 311, 264, 558, 586, 11, 286, 500, 380, 534, 528, 281, 483, 666, 411, 11, 731, 11, 309, 51236, 51236, 576, 312, 257, 2603, 5533, 337, 806, 76, 3089, 1049, 281, 2573, 484, 264, 5221, 295, 689, 264, 3053, 352, 11, 570, 806, 76, 51516, 51516, 3089, 1049, 4476, 1177, 380, 1127, 466, 4009, 2535, 11, 570, 309, 311, 406, 3760, 257, 3991, 11, 321, 434, 51800, 51800], "temperature": 0.0, "avg_logprob": -0.20890435718354725, "compression_ratio": 1.7178571428571427, "no_caption_prob": 0.0001634348591323942}, {"id": 781, "seek": 455228, "start": 4575.32, "end": 4581.0, "text": " code gen essentially doesn't care about source position, because it's not reading a file, we're", "tokens": [50364, 1168, 300, 311, 1880, 281, 1029, 11, 437, 307, 264, 4334, 295, 806, 76, 28431, 30, 286, 1920, 519, 300, 309, 50632, 50632, 1669, 2020, 281, 767, 1066, 264, 3053, 294, 264, 316, 6840, 11, 754, 411, 294, 257, 636, 689, 309, 311, 406, 11, 1177, 380, 50900, 50900, 34702, 473, 428, 551, 13, 583, 300, 311, 264, 558, 586, 11, 286, 500, 380, 534, 528, 281, 483, 666, 411, 11, 731, 11, 309, 51236, 51236, 576, 312, 257, 2603, 5533, 337, 806, 76, 3089, 1049, 281, 2573, 484, 264, 5221, 295, 689, 264, 3053, 352, 11, 570, 806, 76, 51516, 51516, 3089, 1049, 4476, 1177, 380, 1127, 466, 4009, 2535, 11, 570, 309, 311, 406, 3760, 257, 3991, 11, 321, 434, 51800, 51800], "temperature": 0.0, "avg_logprob": -0.20890435718354725, "compression_ratio": 1.7178571428571427, "no_caption_prob": 0.0001634348591323942}, {"id": 782, "seek": 458100, "start": 4581.0, "end": 4586.52, "text": " using like, we're so like all the source positions and elm code gen behind the scenes are like zero,", "tokens": [50364, 1228, 411, 11, 321, 434, 370, 411, 439, 264, 4009, 8432, 293, 806, 76, 3089, 1049, 2261, 264, 8026, 366, 411, 4018, 11, 50640, 50640, 4018, 13, 407, 309, 1116, 312, 411, 11, 1954, 11, 572, 11, 586, 321, 362, 281, 411, 360, 341, 5221, 13, 400, 498, 286, 498, 286, 5630, 493, 11, 550, 11, 50944, 50972, 550, 11, 291, 458, 11, 428, 3089, 3089, 307, 516, 281, 312, 5463, 13, 407, 286, 390, 411, 11, 1392, 11, 731, 11, 286, 478, 445, 516, 51192, 51192, 281, 1699, 337, 512, 4069, 954, 281, 2573, 309, 484, 294, 806, 76, 28431, 13, 400, 572, 11, 572, 11, 570, 286, 478, 264, 472, 365, 51552, 51552], "temperature": 0.0, "avg_logprob": -0.17497704986833099, "compression_ratio": 1.6738197424892705, "no_caption_prob": 5.738532854593359e-05}, {"id": 783, "seek": 458100, "start": 4586.52, "end": 4592.6, "text": " zero. So it'd be like, oh, no, now we have to like do this math. And if I if I screw up, then,", "tokens": [50364, 1228, 411, 11, 321, 434, 370, 411, 439, 264, 4009, 8432, 293, 806, 76, 3089, 1049, 2261, 264, 8026, 366, 411, 4018, 11, 50640, 50640, 4018, 13, 407, 309, 1116, 312, 411, 11, 1954, 11, 572, 11, 586, 321, 362, 281, 411, 360, 341, 5221, 13, 400, 498, 286, 498, 286, 5630, 493, 11, 550, 11, 50944, 50972, 550, 11, 291, 458, 11, 428, 3089, 3089, 307, 516, 281, 312, 5463, 13, 407, 286, 390, 411, 11, 1392, 11, 731, 11, 286, 478, 445, 516, 51192, 51192, 281, 1699, 337, 512, 4069, 954, 281, 2573, 309, 484, 294, 806, 76, 28431, 13, 400, 572, 11, 572, 11, 570, 286, 478, 264, 472, 365, 51552, 51552], "temperature": 0.0, "avg_logprob": -0.17497704986833099, "compression_ratio": 1.6738197424892705, "no_caption_prob": 5.738532854593359e-05}, {"id": 784, "seek": 458100, "start": 4593.16, "end": 4597.56, "text": " then, you know, your code code is going to be broken. So I was like, okay, well, I'm just going", "tokens": [50364, 1228, 411, 11, 321, 434, 370, 411, 439, 264, 4009, 8432, 293, 806, 76, 3089, 1049, 2261, 264, 8026, 366, 411, 4018, 11, 50640, 50640, 4018, 13, 407, 309, 1116, 312, 411, 11, 1954, 11, 572, 11, 586, 321, 362, 281, 411, 360, 341, 5221, 13, 400, 498, 286, 498, 286, 5630, 493, 11, 550, 11, 50944, 50972, 550, 11, 291, 458, 11, 428, 3089, 3089, 307, 516, 281, 312, 5463, 13, 407, 286, 390, 411, 11, 1392, 11, 731, 11, 286, 478, 445, 516, 51192, 51192, 281, 1699, 337, 512, 4069, 954, 281, 2573, 309, 484, 294, 806, 76, 28431, 13, 400, 572, 11, 572, 11, 570, 286, 478, 264, 472, 365, 51552, 51552], "temperature": 0.0, "avg_logprob": -0.17497704986833099, "compression_ratio": 1.6738197424892705, "no_caption_prob": 5.738532854593359e-05}, {"id": 785, "seek": 458100, "start": 4597.56, "end": 4604.76, "text": " to wait for some smart person to figure it out in elm syntax. And no, no, because I'm the one with", "tokens": [50364, 1228, 411, 11, 321, 434, 370, 411, 439, 264, 4009, 8432, 293, 806, 76, 3089, 1049, 2261, 264, 8026, 366, 411, 4018, 11, 50640, 50640, 4018, 13, 407, 309, 1116, 312, 411, 11, 1954, 11, 572, 11, 586, 321, 362, 281, 411, 360, 341, 5221, 13, 400, 498, 286, 498, 286, 5630, 493, 11, 550, 11, 50944, 50972, 550, 11, 291, 458, 11, 428, 3089, 3089, 307, 516, 281, 312, 5463, 13, 407, 286, 390, 411, 11, 1392, 11, 731, 11, 286, 478, 445, 516, 51192, 51192, 281, 1699, 337, 512, 4069, 954, 281, 2573, 309, 484, 294, 806, 76, 28431, 13, 400, 572, 11, 572, 11, 570, 286, 478, 264, 472, 365, 51552, 51552], "temperature": 0.0, "avg_logprob": -0.17497704986833099, "compression_ratio": 1.6738197424892705, "no_caption_prob": 5.738532854593359e-05}, {"id": 786, "seek": 460476, "start": 4604.76, "end": 4611.400000000001, "text": " published rights on the package. I know. And I have no clue how to do it. Like, I've actually", "tokens": [50364, 6572, 4601, 322, 264, 7372, 13, 286, 458, 13, 400, 286, 362, 572, 13602, 577, 281, 360, 309, 13, 1743, 11, 286, 600, 767, 50696, 50696, 2956, 412, 437, 819, 316, 6840, 82, 630, 294, 15778, 13, 400, 309, 390, 11, 286, 1352, 411, 945, 11, 597, 390, 257, 51024, 51024, 17600, 2416, 1230, 13, 400, 439, 295, 552, 2139, 19735, 3053, 420, 829, 552, 294, 257, 1329, 11, 445, 411, 51380, 51380, 806, 76, 28431, 775, 13, 400, 472, 295, 552, 829, 552, 294, 264, 316, 6840, 13, 583, 550, 456, 311, 257, 1168, 411, 11, 307, 341, 51688, 51752], "temperature": 0.0, "avg_logprob": -0.1478598696514241, "compression_ratio": 1.546938775510204, "no_caption_prob": 0.00016862728807609528}, {"id": 787, "seek": 460476, "start": 4611.400000000001, "end": 4617.96, "text": " looked at what different ASTs did in JavaScript. And it was, I found like 20, which was a", "tokens": [50364, 6572, 4601, 322, 264, 7372, 13, 286, 458, 13, 400, 286, 362, 572, 13602, 577, 281, 360, 309, 13, 1743, 11, 286, 600, 767, 50696, 50696, 2956, 412, 437, 819, 316, 6840, 82, 630, 294, 15778, 13, 400, 309, 390, 11, 286, 1352, 411, 945, 11, 597, 390, 257, 51024, 51024, 17600, 2416, 1230, 13, 400, 439, 295, 552, 2139, 19735, 3053, 420, 829, 552, 294, 257, 1329, 11, 445, 411, 51380, 51380, 806, 76, 28431, 775, 13, 400, 472, 295, 552, 829, 552, 294, 264, 316, 6840, 13, 583, 550, 456, 311, 257, 1168, 411, 11, 307, 341, 51688, 51752], "temperature": 0.0, "avg_logprob": -0.1478598696514241, "compression_ratio": 1.546938775510204, "no_caption_prob": 0.00016862728807609528}, {"id": 788, "seek": 460476, "start": 4617.96, "end": 4625.08, "text": " surprisingly large number. And all of them either ignored comments or put them in a list, just like", "tokens": [50364, 6572, 4601, 322, 264, 7372, 13, 286, 458, 13, 400, 286, 362, 572, 13602, 577, 281, 360, 309, 13, 1743, 11, 286, 600, 767, 50696, 50696, 2956, 412, 437, 819, 316, 6840, 82, 630, 294, 15778, 13, 400, 309, 390, 11, 286, 1352, 411, 945, 11, 597, 390, 257, 51024, 51024, 17600, 2416, 1230, 13, 400, 439, 295, 552, 2139, 19735, 3053, 420, 829, 552, 294, 257, 1329, 11, 445, 411, 51380, 51380, 806, 76, 28431, 775, 13, 400, 472, 295, 552, 829, 552, 294, 264, 316, 6840, 13, 583, 550, 456, 311, 257, 1168, 411, 11, 307, 341, 51688, 51752], "temperature": 0.0, "avg_logprob": -0.1478598696514241, "compression_ratio": 1.546938775510204, "no_caption_prob": 0.00016862728807609528}, {"id": 789, "seek": 460476, "start": 4625.08, "end": 4631.24, "text": " elm syntax does. And one of them put them in the AST. But then there's a question like, is this", "tokens": [50364, 6572, 4601, 322, 264, 7372, 13, 286, 458, 13, 400, 286, 362, 572, 13602, 577, 281, 360, 309, 13, 1743, 11, 286, 600, 767, 50696, 50696, 2956, 412, 437, 819, 316, 6840, 82, 630, 294, 15778, 13, 400, 309, 390, 11, 286, 1352, 411, 945, 11, 597, 390, 257, 51024, 51024, 17600, 2416, 1230, 13, 400, 439, 295, 552, 2139, 19735, 3053, 420, 829, 552, 294, 257, 1329, 11, 445, 411, 51380, 51380, 806, 76, 28431, 775, 13, 400, 472, 295, 552, 829, 552, 294, 264, 316, 6840, 13, 583, 550, 456, 311, 257, 1168, 411, 11, 307, 341, 51688, 51752], "temperature": 0.0, "avg_logprob": -0.1478598696514241, "compression_ratio": 1.546938775510204, "no_caption_prob": 0.00016862728807609528}, {"id": 790, "seek": 463124, "start": 4631.24, "end": 4637.5599999999995, "text": " is this AST node, the right one to attach the comment to? Do you want to put the comments before", "tokens": [50364, 307, 341, 316, 6840, 9984, 11, 264, 558, 472, 281, 5085, 264, 2871, 281, 30, 1144, 291, 528, 281, 829, 264, 3053, 949, 50680, 50680, 420, 934, 30, 663, 311, 611, 485, 50772, 50772, 663, 311, 437, 291, 576, 362, 307, 291, 1116, 362, 731, 11, 5942, 490, 264, 8103, 510, 11, 411, 11, 293, 286, 500, 380, 51084, 51124, 2066, 341, 281, 312, 3143, 11, 286, 362, 572, 7789, 295, 3372, 341, 322, 428, 5924, 13, 583, 411, 437, 286, 576, 51436, 51436, 2066, 307, 291, 1116, 362, 732, 7690, 830, 11, 472, 337, 2871, 949, 472, 337, 2871, 934, 13, 400, 11, 293, 309, 51788, 51788], "temperature": 0.0, "avg_logprob": -0.265648044239391, "compression_ratio": 1.7435897435897436, "no_caption_prob": 4.6836787078063935e-05}, {"id": 791, "seek": 463124, "start": 4637.5599999999995, "end": 4639.4, "text": " or after? That's also...", "tokens": [50364, 307, 341, 316, 6840, 9984, 11, 264, 558, 472, 281, 5085, 264, 2871, 281, 30, 1144, 291, 528, 281, 829, 264, 3053, 949, 50680, 50680, 420, 934, 30, 663, 311, 611, 485, 50772, 50772, 663, 311, 437, 291, 576, 362, 307, 291, 1116, 362, 731, 11, 5942, 490, 264, 8103, 510, 11, 411, 11, 293, 286, 500, 380, 51084, 51124, 2066, 341, 281, 312, 3143, 11, 286, 362, 572, 7789, 295, 3372, 341, 322, 428, 5924, 13, 583, 411, 437, 286, 576, 51436, 51436, 2066, 307, 291, 1116, 362, 732, 7690, 830, 11, 472, 337, 2871, 949, 472, 337, 2871, 934, 13, 400, 11, 293, 309, 51788, 51788], "temperature": 0.0, "avg_logprob": -0.265648044239391, "compression_ratio": 1.7435897435897436, "no_caption_prob": 4.6836787078063935e-05}, {"id": 792, "seek": 463124, "start": 4639.4, "end": 4645.639999999999, "text": " That's what you would have is you'd have well, shooting from the hip here, like, and I don't", "tokens": [50364, 307, 341, 316, 6840, 9984, 11, 264, 558, 472, 281, 5085, 264, 2871, 281, 30, 1144, 291, 528, 281, 829, 264, 3053, 949, 50680, 50680, 420, 934, 30, 663, 311, 611, 485, 50772, 50772, 663, 311, 437, 291, 576, 362, 307, 291, 1116, 362, 731, 11, 5942, 490, 264, 8103, 510, 11, 411, 11, 293, 286, 500, 380, 51084, 51124, 2066, 341, 281, 312, 3143, 11, 286, 362, 572, 7789, 295, 3372, 341, 322, 428, 5924, 13, 583, 411, 437, 286, 576, 51436, 51436, 2066, 307, 291, 1116, 362, 732, 7690, 830, 11, 472, 337, 2871, 949, 472, 337, 2871, 934, 13, 400, 11, 293, 309, 51788, 51788], "temperature": 0.0, "avg_logprob": -0.265648044239391, "compression_ratio": 1.7435897435897436, "no_caption_prob": 4.6836787078063935e-05}, {"id": 793, "seek": 463124, "start": 4646.44, "end": 4652.679999999999, "text": " expect this to be fair, I have no intention of putting this on your plate. But like what I would", "tokens": [50364, 307, 341, 316, 6840, 9984, 11, 264, 558, 472, 281, 5085, 264, 2871, 281, 30, 1144, 291, 528, 281, 829, 264, 3053, 949, 50680, 50680, 420, 934, 30, 663, 311, 611, 485, 50772, 50772, 663, 311, 437, 291, 576, 362, 307, 291, 1116, 362, 731, 11, 5942, 490, 264, 8103, 510, 11, 411, 11, 293, 286, 500, 380, 51084, 51124, 2066, 341, 281, 312, 3143, 11, 286, 362, 572, 7789, 295, 3372, 341, 322, 428, 5924, 13, 583, 411, 437, 286, 576, 51436, 51436, 2066, 307, 291, 1116, 362, 732, 7690, 830, 11, 472, 337, 2871, 949, 472, 337, 2871, 934, 13, 400, 11, 293, 309, 51788, 51788], "temperature": 0.0, "avg_logprob": -0.265648044239391, "compression_ratio": 1.7435897435897436, "no_caption_prob": 4.6836787078063935e-05}, {"id": 794, "seek": 463124, "start": 4652.679999999999, "end": 4659.719999999999, "text": " expect is you'd have two constructors, one for comment before one for comment after. And, and it", "tokens": [50364, 307, 341, 316, 6840, 9984, 11, 264, 558, 472, 281, 5085, 264, 2871, 281, 30, 1144, 291, 528, 281, 829, 264, 3053, 949, 50680, 50680, 420, 934, 30, 663, 311, 611, 485, 50772, 50772, 663, 311, 437, 291, 576, 362, 307, 291, 1116, 362, 731, 11, 5942, 490, 264, 8103, 510, 11, 411, 11, 293, 286, 500, 380, 51084, 51124, 2066, 341, 281, 312, 3143, 11, 286, 362, 572, 7789, 295, 3372, 341, 322, 428, 5924, 13, 583, 411, 437, 286, 576, 51436, 51436, 2066, 307, 291, 1116, 362, 732, 7690, 830, 11, 472, 337, 2871, 949, 472, 337, 2871, 934, 13, 400, 11, 293, 309, 51788, 51788], "temperature": 0.0, "avg_logprob": -0.265648044239391, "compression_ratio": 1.7435897435897436, "no_caption_prob": 4.6836787078063935e-05}, {"id": 795, "seek": 465972, "start": 4659.72, "end": 4664.12, "text": " is sort of like a function in that it's sort of like has to be attached to another expression. You", "tokens": [50364, 307, 1333, 295, 411, 257, 2445, 294, 300, 309, 311, 1333, 295, 411, 575, 281, 312, 8570, 281, 1071, 6114, 13, 509, 50584, 50584, 393, 380, 362, 257, 2871, 445, 11, 291, 458, 11, 8345, 484, 538, 2564, 13, 583, 485, 50756, 50792, 1042, 11, 3993, 498, 309, 311, 412, 1192, 1496, 13, 50892, 50932, 1779, 13, 1042, 11, 2837, 729, 14759, 11, 558, 30, 2704, 362, 257, 819, 6813, 295, 1192, 1496, 2871, 13, 51160, 51160, 583, 286, 458, 300, 311, 2699, 76, 7877, 611, 575, 257, 688, 295, 14024, 926, 3053, 13, 51432, 51460, 467, 311, 12414, 13, 467, 311, 257, 12414, 2590, 13, 400, 411, 11, 309, 311, 472, 295, 729, 721, 689, 309, 311, 411, 264, 764, 51656, 51656], "temperature": 0.0, "avg_logprob": -0.23043344116210937, "compression_ratio": 1.6714285714285715, "no_caption_prob": 1.952521961356979e-05}, {"id": 796, "seek": 465972, "start": 4664.12, "end": 4667.56, "text": " can't have a comment just, you know, hanging out by itself. But...", "tokens": [50364, 307, 1333, 295, 411, 257, 2445, 294, 300, 309, 311, 1333, 295, 411, 575, 281, 312, 8570, 281, 1071, 6114, 13, 509, 50584, 50584, 393, 380, 362, 257, 2871, 445, 11, 291, 458, 11, 8345, 484, 538, 2564, 13, 583, 485, 50756, 50792, 1042, 11, 3993, 498, 309, 311, 412, 1192, 1496, 13, 50892, 50932, 1779, 13, 1042, 11, 2837, 729, 14759, 11, 558, 30, 2704, 362, 257, 819, 6813, 295, 1192, 1496, 2871, 13, 51160, 51160, 583, 286, 458, 300, 311, 2699, 76, 7877, 611, 575, 257, 688, 295, 14024, 926, 3053, 13, 51432, 51460, 467, 311, 12414, 13, 467, 311, 257, 12414, 2590, 13, 400, 411, 11, 309, 311, 472, 295, 729, 721, 689, 309, 311, 411, 264, 764, 51656, 51656], "temperature": 0.0, "avg_logprob": -0.23043344116210937, "compression_ratio": 1.6714285714285715, "no_caption_prob": 1.952521961356979e-05}, {"id": 797, "seek": 465972, "start": 4668.280000000001, "end": 4670.280000000001, "text": " Well, except if it's at top level.", "tokens": [50364, 307, 1333, 295, 411, 257, 2445, 294, 300, 309, 311, 1333, 295, 411, 575, 281, 312, 8570, 281, 1071, 6114, 13, 509, 50584, 50584, 393, 380, 362, 257, 2871, 445, 11, 291, 458, 11, 8345, 484, 538, 2564, 13, 583, 485, 50756, 50792, 1042, 11, 3993, 498, 309, 311, 412, 1192, 1496, 13, 50892, 50932, 1779, 13, 1042, 11, 2837, 729, 14759, 11, 558, 30, 2704, 362, 257, 819, 6813, 295, 1192, 1496, 2871, 13, 51160, 51160, 583, 286, 458, 300, 311, 2699, 76, 7877, 611, 575, 257, 688, 295, 14024, 926, 3053, 13, 51432, 51460, 467, 311, 12414, 13, 467, 311, 257, 12414, 2590, 13, 400, 411, 11, 309, 311, 472, 295, 729, 721, 689, 309, 311, 411, 264, 764, 51656, 51656], "temperature": 0.0, "avg_logprob": -0.23043344116210937, "compression_ratio": 1.6714285714285715, "no_caption_prob": 1.952521961356979e-05}, {"id": 798, "seek": 465972, "start": 4671.08, "end": 4675.64, "text": " Right. Well, track those separately, right? Maybe have a different flavor of top level comment.", "tokens": [50364, 307, 1333, 295, 411, 257, 2445, 294, 300, 309, 311, 1333, 295, 411, 575, 281, 312, 8570, 281, 1071, 6114, 13, 509, 50584, 50584, 393, 380, 362, 257, 2871, 445, 11, 291, 458, 11, 8345, 484, 538, 2564, 13, 583, 485, 50756, 50792, 1042, 11, 3993, 498, 309, 311, 412, 1192, 1496, 13, 50892, 50932, 1779, 13, 1042, 11, 2837, 729, 14759, 11, 558, 30, 2704, 362, 257, 819, 6813, 295, 1192, 1496, 2871, 13, 51160, 51160, 583, 286, 458, 300, 311, 2699, 76, 7877, 611, 575, 257, 688, 295, 14024, 926, 3053, 13, 51432, 51460, 467, 311, 12414, 13, 467, 311, 257, 12414, 2590, 13, 400, 411, 11, 309, 311, 472, 295, 729, 721, 689, 309, 311, 411, 264, 764, 51656, 51656], "temperature": 0.0, "avg_logprob": -0.23043344116210937, "compression_ratio": 1.6714285714285715, "no_caption_prob": 1.952521961356979e-05}, {"id": 799, "seek": 465972, "start": 4675.64, "end": 4681.08, "text": " But I know that's Elm format also has a lot of complexity around comments.", "tokens": [50364, 307, 1333, 295, 411, 257, 2445, 294, 300, 309, 311, 1333, 295, 411, 575, 281, 312, 8570, 281, 1071, 6114, 13, 509, 50584, 50584, 393, 380, 362, 257, 2871, 445, 11, 291, 458, 11, 8345, 484, 538, 2564, 13, 583, 485, 50756, 50792, 1042, 11, 3993, 498, 309, 311, 412, 1192, 1496, 13, 50892, 50932, 1779, 13, 1042, 11, 2837, 729, 14759, 11, 558, 30, 2704, 362, 257, 819, 6813, 295, 1192, 1496, 2871, 13, 51160, 51160, 583, 286, 458, 300, 311, 2699, 76, 7877, 611, 575, 257, 688, 295, 14024, 926, 3053, 13, 51432, 51460, 467, 311, 12414, 13, 467, 311, 257, 12414, 2590, 13, 400, 411, 11, 309, 311, 472, 295, 729, 721, 689, 309, 311, 411, 264, 764, 51656, 51656], "temperature": 0.0, "avg_logprob": -0.23043344116210937, "compression_ratio": 1.6714285714285715, "no_caption_prob": 1.952521961356979e-05}, {"id": 800, "seek": 465972, "start": 4681.64, "end": 4685.56, "text": " It's tricky. It's a tricky situation. And like, it's one of those things where it's like the use", "tokens": [50364, 307, 1333, 295, 411, 257, 2445, 294, 300, 309, 311, 1333, 295, 411, 575, 281, 312, 8570, 281, 1071, 6114, 13, 509, 50584, 50584, 393, 380, 362, 257, 2871, 445, 11, 291, 458, 11, 8345, 484, 538, 2564, 13, 583, 485, 50756, 50792, 1042, 11, 3993, 498, 309, 311, 412, 1192, 1496, 13, 50892, 50932, 1779, 13, 1042, 11, 2837, 729, 14759, 11, 558, 30, 2704, 362, 257, 819, 6813, 295, 1192, 1496, 2871, 13, 51160, 51160, 583, 286, 458, 300, 311, 2699, 76, 7877, 611, 575, 257, 688, 295, 14024, 926, 3053, 13, 51432, 51460, 467, 311, 12414, 13, 467, 311, 257, 12414, 2590, 13, 400, 411, 11, 309, 311, 472, 295, 729, 721, 689, 309, 311, 411, 264, 764, 51656, 51656], "temperature": 0.0, "avg_logprob": -0.23043344116210937, "compression_ratio": 1.6714285714285715, "no_caption_prob": 1.952521961356979e-05}, {"id": 801, "seek": 468556, "start": 4685.56, "end": 4693.240000000001, "text": " case in this case is super clear. It's very clear in other cases that comments, it would be great to", "tokens": [50364, 1389, 294, 341, 1389, 307, 1687, 1850, 13, 467, 311, 588, 1850, 294, 661, 3331, 300, 3053, 11, 309, 576, 312, 869, 281, 50748, 50748, 445, 483, 3973, 295, 552, 13, 407, 411, 337, 31413, 11, 411, 498, 291, 1562, 574, 412, 264, 2699, 76, 31958, 11, 309, 311, 411, 11, 50952, 50952, 309, 1669, 2020, 300, 309, 311, 406, 31703, 456, 13, 1743, 39366, 11, 309, 775, 652, 2020, 13, 467, 311, 257, 1379, 551, 13, 51204, 51204, 400, 300, 311, 983, 286, 584, 562, 286, 411, 751, 466, 316, 6840, 82, 885, 3657, 11, 456, 311, 611, 411, 22984, 4358, 295, 51452, 51452, 1589, 5413, 322, 437, 291, 434, 767, 1382, 281, 360, 365, 257, 2212, 316, 6840, 13, 400, 498, 309, 311, 456, 11, 51692, 51692], "temperature": 0.0, "avg_logprob": -0.14116764796599177, "compression_ratio": 1.7083333333333333, "no_caption_prob": 4.757269562105648e-05}, {"id": 802, "seek": 468556, "start": 4693.240000000001, "end": 4697.320000000001, "text": " just get rid of them. So like for compile, like if you ever look at the Elm compiler, it's like,", "tokens": [50364, 1389, 294, 341, 1389, 307, 1687, 1850, 13, 467, 311, 588, 1850, 294, 661, 3331, 300, 3053, 11, 309, 576, 312, 869, 281, 50748, 50748, 445, 483, 3973, 295, 552, 13, 407, 411, 337, 31413, 11, 411, 498, 291, 1562, 574, 412, 264, 2699, 76, 31958, 11, 309, 311, 411, 11, 50952, 50952, 309, 1669, 2020, 300, 309, 311, 406, 31703, 456, 13, 1743, 39366, 11, 309, 775, 652, 2020, 13, 467, 311, 257, 1379, 551, 13, 51204, 51204, 400, 300, 311, 983, 286, 584, 562, 286, 411, 751, 466, 316, 6840, 82, 885, 3657, 11, 456, 311, 611, 411, 22984, 4358, 295, 51452, 51452, 1589, 5413, 322, 437, 291, 434, 767, 1382, 281, 360, 365, 257, 2212, 316, 6840, 13, 400, 498, 309, 311, 456, 11, 51692, 51692], "temperature": 0.0, "avg_logprob": -0.14116764796599177, "compression_ratio": 1.7083333333333333, "no_caption_prob": 4.757269562105648e-05}, {"id": 803, "seek": 468556, "start": 4697.320000000001, "end": 4702.360000000001, "text": " it makes sense that it's not tracked there. Like formatting, it does make sense. It's a whole thing.", "tokens": [50364, 1389, 294, 341, 1389, 307, 1687, 1850, 13, 467, 311, 588, 1850, 294, 661, 3331, 300, 3053, 11, 309, 576, 312, 869, 281, 50748, 50748, 445, 483, 3973, 295, 552, 13, 407, 411, 337, 31413, 11, 411, 498, 291, 1562, 574, 412, 264, 2699, 76, 31958, 11, 309, 311, 411, 11, 50952, 50952, 309, 1669, 2020, 300, 309, 311, 406, 31703, 456, 13, 1743, 39366, 11, 309, 775, 652, 2020, 13, 467, 311, 257, 1379, 551, 13, 51204, 51204, 400, 300, 311, 983, 286, 584, 562, 286, 411, 751, 466, 316, 6840, 82, 885, 3657, 11, 456, 311, 611, 411, 22984, 4358, 295, 51452, 51452, 1589, 5413, 322, 437, 291, 434, 767, 1382, 281, 360, 365, 257, 2212, 316, 6840, 13, 400, 498, 309, 311, 456, 11, 51692, 51692], "temperature": 0.0, "avg_logprob": -0.14116764796599177, "compression_ratio": 1.7083333333333333, "no_caption_prob": 4.757269562105648e-05}, {"id": 804, "seek": 468556, "start": 4702.360000000001, "end": 4707.320000000001, "text": " And that's why I say when I like talk about ASTs being weird, there's also like varying levels of", "tokens": [50364, 1389, 294, 341, 1389, 307, 1687, 1850, 13, 467, 311, 588, 1850, 294, 661, 3331, 300, 3053, 11, 309, 576, 312, 869, 281, 50748, 50748, 445, 483, 3973, 295, 552, 13, 407, 411, 337, 31413, 11, 411, 498, 291, 1562, 574, 412, 264, 2699, 76, 31958, 11, 309, 311, 411, 11, 50952, 50952, 309, 1669, 2020, 300, 309, 311, 406, 31703, 456, 13, 1743, 39366, 11, 309, 775, 652, 2020, 13, 467, 311, 257, 1379, 551, 13, 51204, 51204, 400, 300, 311, 983, 286, 584, 562, 286, 411, 751, 466, 316, 6840, 82, 885, 3657, 11, 456, 311, 611, 411, 22984, 4358, 295, 51452, 51452, 1589, 5413, 322, 437, 291, 434, 767, 1382, 281, 360, 365, 257, 2212, 316, 6840, 13, 400, 498, 309, 311, 456, 11, 51692, 51692], "temperature": 0.0, "avg_logprob": -0.14116764796599177, "compression_ratio": 1.7083333333333333, "no_caption_prob": 4.757269562105648e-05}, {"id": 805, "seek": 468556, "start": 4707.320000000001, "end": 4712.120000000001, "text": " information depending on what you're actually trying to do with a given AST. And if it's there,", "tokens": [50364, 1389, 294, 341, 1389, 307, 1687, 1850, 13, 467, 311, 588, 1850, 294, 661, 3331, 300, 3053, 11, 309, 576, 312, 869, 281, 50748, 50748, 445, 483, 3973, 295, 552, 13, 407, 411, 337, 31413, 11, 411, 498, 291, 1562, 574, 412, 264, 2699, 76, 31958, 11, 309, 311, 411, 11, 50952, 50952, 309, 1669, 2020, 300, 309, 311, 406, 31703, 456, 13, 1743, 39366, 11, 309, 775, 652, 2020, 13, 467, 311, 257, 1379, 551, 13, 51204, 51204, 400, 300, 311, 983, 286, 584, 562, 286, 411, 751, 466, 316, 6840, 82, 885, 3657, 11, 456, 311, 611, 411, 22984, 4358, 295, 51452, 51452, 1589, 5413, 322, 437, 291, 434, 767, 1382, 281, 360, 365, 257, 2212, 316, 6840, 13, 400, 498, 309, 311, 456, 11, 51692, 51692], "temperature": 0.0, "avg_logprob": -0.14116764796599177, "compression_ratio": 1.7083333333333333, "no_caption_prob": 4.757269562105648e-05}, {"id": 806, "seek": 471212, "start": 4712.12, "end": 4717.32, "text": " it's great. If it's not, it's challenging. And it's hard to possibly add in stuff later.", "tokens": [50364, 309, 311, 869, 13, 759, 309, 311, 406, 11, 309, 311, 7595, 13, 400, 309, 311, 1152, 281, 6264, 909, 294, 1507, 1780, 13, 50624, 50624, 865, 13, 865, 13, 583, 7359, 490, 300, 27432, 11, 411, 309, 534, 2544, 411, 11, 291, 458, 11, 286, 914, 11, 50904, 50932, 291, 393, 1190, 264, 2010, 8568, 1803, 13038, 291, 528, 281, 934, 291, 8460, 746, 13, 400, 51160, 51184, 5911, 11, 309, 311, 445, 257, 7496, 2290, 13, 407, 1309, 291, 337, 15424, 309, 281, 264, 1768, 13, 51472, 51472, 865, 11, 300, 311, 3715, 13, 286, 478, 588, 2919, 337, 309, 281, 312, 484, 13, 51704, 51704], "temperature": 0.0, "avg_logprob": -0.18352916023947977, "compression_ratio": 1.6147859922178989, "no_caption_prob": 7.601715333294123e-05}, {"id": 807, "seek": 471212, "start": 4717.32, "end": 4722.92, "text": " Yeah. Yeah. But aside from that limitation, like it really seems like, you know, I mean,", "tokens": [50364, 309, 311, 869, 13, 759, 309, 311, 406, 11, 309, 311, 7595, 13, 400, 309, 311, 1152, 281, 6264, 909, 294, 1507, 1780, 13, 50624, 50624, 865, 13, 865, 13, 583, 7359, 490, 300, 27432, 11, 411, 309, 534, 2544, 411, 11, 291, 458, 11, 286, 914, 11, 50904, 50932, 291, 393, 1190, 264, 2010, 8568, 1803, 13038, 291, 528, 281, 934, 291, 8460, 746, 13, 400, 51160, 51184, 5911, 11, 309, 311, 445, 257, 7496, 2290, 13, 407, 1309, 291, 337, 15424, 309, 281, 264, 1768, 13, 51472, 51472, 865, 11, 300, 311, 3715, 13, 286, 478, 588, 2919, 337, 309, 281, 312, 484, 13, 51704, 51704], "temperature": 0.0, "avg_logprob": -0.18352916023947977, "compression_ratio": 1.6147859922178989, "no_caption_prob": 7.601715333294123e-05}, {"id": 808, "seek": 471212, "start": 4723.48, "end": 4728.04, "text": " you can run the type checking yourself anytime you want to after you generate something. And", "tokens": [50364, 309, 311, 869, 13, 759, 309, 311, 406, 11, 309, 311, 7595, 13, 400, 309, 311, 1152, 281, 6264, 909, 294, 1507, 1780, 13, 50624, 50624, 865, 13, 865, 13, 583, 7359, 490, 300, 27432, 11, 411, 309, 534, 2544, 411, 11, 291, 458, 11, 286, 914, 11, 50904, 50932, 291, 393, 1190, 264, 2010, 8568, 1803, 13038, 291, 528, 281, 934, 291, 8460, 746, 13, 400, 51160, 51184, 5911, 11, 309, 311, 445, 257, 7496, 2290, 13, 407, 1309, 291, 337, 15424, 309, 281, 264, 1768, 13, 51472, 51472, 865, 11, 300, 311, 3715, 13, 286, 478, 588, 2919, 337, 309, 281, 312, 484, 13, 51704, 51704], "temperature": 0.0, "avg_logprob": -0.18352916023947977, "compression_ratio": 1.6147859922178989, "no_caption_prob": 7.601715333294123e-05}, {"id": 809, "seek": 471212, "start": 4728.5199999999995, "end": 4734.28, "text": " otherwise, it's just a lovely tool. So thank you for introducing it to the community.", "tokens": [50364, 309, 311, 869, 13, 759, 309, 311, 406, 11, 309, 311, 7595, 13, 400, 309, 311, 1152, 281, 6264, 909, 294, 1507, 1780, 13, 50624, 50624, 865, 13, 865, 13, 583, 7359, 490, 300, 27432, 11, 411, 309, 534, 2544, 411, 11, 291, 458, 11, 286, 914, 11, 50904, 50932, 291, 393, 1190, 264, 2010, 8568, 1803, 13038, 291, 528, 281, 934, 291, 8460, 746, 13, 400, 51160, 51184, 5911, 11, 309, 311, 445, 257, 7496, 2290, 13, 407, 1309, 291, 337, 15424, 309, 281, 264, 1768, 13, 51472, 51472, 865, 11, 300, 311, 3715, 13, 286, 478, 588, 2919, 337, 309, 281, 312, 484, 13, 51704, 51704], "temperature": 0.0, "avg_logprob": -0.18352916023947977, "compression_ratio": 1.6147859922178989, "no_caption_prob": 7.601715333294123e-05}, {"id": 810, "seek": 471212, "start": 4734.28, "end": 4738.92, "text": " Yeah, that's wonderful. I'm very excited for it to be out.", "tokens": [50364, 309, 311, 869, 13, 759, 309, 311, 406, 11, 309, 311, 7595, 13, 400, 309, 311, 1152, 281, 6264, 909, 294, 1507, 1780, 13, 50624, 50624, 865, 13, 865, 13, 583, 7359, 490, 300, 27432, 11, 411, 309, 534, 2544, 411, 11, 291, 458, 11, 286, 914, 11, 50904, 50932, 291, 393, 1190, 264, 2010, 8568, 1803, 13038, 291, 528, 281, 934, 291, 8460, 746, 13, 400, 51160, 51184, 5911, 11, 309, 311, 445, 257, 7496, 2290, 13, 407, 1309, 291, 337, 15424, 309, 281, 264, 1768, 13, 51472, 51472, 865, 11, 300, 311, 3715, 13, 286, 478, 588, 2919, 337, 309, 281, 312, 484, 13, 51704, 51704], "temperature": 0.0, "avg_logprob": -0.18352916023947977, "compression_ratio": 1.6147859922178989, "no_caption_prob": 7.601715333294123e-05}, {"id": 811, "seek": 473892, "start": 4738.92, "end": 4742.28, "text": " I'm looking forward to what people make with it.", "tokens": [50364, 286, 478, 1237, 2128, 281, 437, 561, 652, 365, 309, 13, 50532, 50532, 865, 11, 2293, 13, 1923, 886, 13, 865, 11, 2243, 1507, 13, 708, 820, 561, 574, 412, 498, 436, 498, 436, 528, 281, 483, 1409, 30, 50832, 50832, 865, 11, 370, 264, 2135, 551, 281, 1520, 484, 307, 516, 281, 312, 264, 23331, 49040, 11, 597, 307, 445, 275, 67, 861, 3661, 355, 17330, 806, 76, 66, 8799, 13, 51244, 51244, 821, 311, 611, 257, 2183, 322, 264, 23938, 11, 264, 2699, 76, 23938, 295, 300, 1333, 295, 2709, 1310, 257, 544, 3288, 12335, 13, 51732, 51732], "temperature": 0.0, "avg_logprob": -0.24021260878619025, "compression_ratio": 1.5555555555555556, "no_caption_prob": 0.00012929641525261104}, {"id": 812, "seek": 473892, "start": 4742.28, "end": 4748.28, "text": " Yeah, exactly. Me too. Yeah, amazing stuff. What should people look at if they if they want to get started?", "tokens": [50364, 286, 478, 1237, 2128, 281, 437, 561, 652, 365, 309, 13, 50532, 50532, 865, 11, 2293, 13, 1923, 886, 13, 865, 11, 2243, 1507, 13, 708, 820, 561, 574, 412, 498, 436, 498, 436, 528, 281, 483, 1409, 30, 50832, 50832, 865, 11, 370, 264, 2135, 551, 281, 1520, 484, 307, 516, 281, 312, 264, 23331, 49040, 11, 597, 307, 445, 275, 67, 861, 3661, 355, 17330, 806, 76, 66, 8799, 13, 51244, 51244, 821, 311, 611, 257, 2183, 322, 264, 23938, 11, 264, 2699, 76, 23938, 295, 300, 1333, 295, 2709, 1310, 257, 544, 3288, 12335, 13, 51732, 51732], "temperature": 0.0, "avg_logprob": -0.24021260878619025, "compression_ratio": 1.5555555555555556, "no_caption_prob": 0.00012929641525261104}, {"id": 813, "seek": 473892, "start": 4748.28, "end": 4756.52, "text": " Yeah, so the main thing to check out is going to be the GitHub repo, which is just mdgriffith slash elmcogen.", "tokens": [50364, 286, 478, 1237, 2128, 281, 437, 561, 652, 365, 309, 13, 50532, 50532, 865, 11, 2293, 13, 1923, 886, 13, 865, 11, 2243, 1507, 13, 708, 820, 561, 574, 412, 498, 436, 498, 436, 528, 281, 483, 1409, 30, 50832, 50832, 865, 11, 370, 264, 2135, 551, 281, 1520, 484, 307, 516, 281, 312, 264, 23331, 49040, 11, 597, 307, 445, 275, 67, 861, 3661, 355, 17330, 806, 76, 66, 8799, 13, 51244, 51244, 821, 311, 611, 257, 2183, 322, 264, 23938, 11, 264, 2699, 76, 23938, 295, 300, 1333, 295, 2709, 1310, 257, 544, 3288, 12335, 13, 51732, 51732], "temperature": 0.0, "avg_logprob": -0.24021260878619025, "compression_ratio": 1.5555555555555556, "no_caption_prob": 0.00012929641525261104}, {"id": 814, "seek": 473892, "start": 4756.52, "end": 4766.28, "text": " There's also a post on the discourse, the Elm discourse of that sort of gives maybe a more involved motivation.", "tokens": [50364, 286, 478, 1237, 2128, 281, 437, 561, 652, 365, 309, 13, 50532, 50532, 865, 11, 2293, 13, 1923, 886, 13, 865, 11, 2243, 1507, 13, 708, 820, 561, 574, 412, 498, 436, 498, 436, 528, 281, 483, 1409, 30, 50832, 50832, 865, 11, 370, 264, 2135, 551, 281, 1520, 484, 307, 516, 281, 312, 264, 23331, 49040, 11, 597, 307, 445, 275, 67, 861, 3661, 355, 17330, 806, 76, 66, 8799, 13, 51244, 51244, 821, 311, 611, 257, 2183, 322, 264, 23938, 11, 264, 2699, 76, 23938, 295, 300, 1333, 295, 2709, 1310, 257, 544, 3288, 12335, 13, 51732, 51732], "temperature": 0.0, "avg_logprob": -0.24021260878619025, "compression_ratio": 1.5555555555555556, "no_caption_prob": 0.00012929641525261104}, {"id": 815, "seek": 476628, "start": 4766.28, "end": 4774.28, "text": " But I think most of that's captured in the readme. There should be like, just a few examples there to naturally like get started with.", "tokens": [50364, 583, 286, 519, 881, 295, 300, 311, 11828, 294, 264, 1401, 1398, 13, 821, 820, 312, 411, 11, 445, 257, 1326, 5110, 456, 281, 8195, 411, 483, 1409, 365, 13, 50764, 50764, 286, 1391, 643, 281, 909, 544, 13, 821, 366, 17007, 322, 300, 49040, 300, 1333, 295, 1477, 291, 807, 264, 3683, 411, 49834, 4358, 295, 3089, 5125, 11, 2891, 484, 9859, 293, 2684, 281, 544, 12649, 13, 51508, 51508, 286, 519, 281, 483, 1409, 11, 286, 519, 309, 311, 534, 4420, 11, 420, 309, 311, 1238, 1019, 281, 767, 445, 2082, 926, 365, 364, 27151, 13, 51848, 51848], "temperature": 0.0, "avg_logprob": -0.2061449499691234, "compression_ratio": 1.6716981132075472, "no_caption_prob": 5.6489676353521645e-05}, {"id": 816, "seek": 476628, "start": 4774.28, "end": 4789.16, "text": " I probably need to add more. There are guides on that repo that sort of lead you through the various like inception levels of code generation, starting out concrete and moving to more abstract.", "tokens": [50364, 583, 286, 519, 881, 295, 300, 311, 11828, 294, 264, 1401, 1398, 13, 821, 820, 312, 411, 11, 445, 257, 1326, 5110, 456, 281, 8195, 411, 483, 1409, 365, 13, 50764, 50764, 286, 1391, 643, 281, 909, 544, 13, 821, 366, 17007, 322, 300, 49040, 300, 1333, 295, 1477, 291, 807, 264, 3683, 411, 49834, 4358, 295, 3089, 5125, 11, 2891, 484, 9859, 293, 2684, 281, 544, 12649, 13, 51508, 51508, 286, 519, 281, 483, 1409, 11, 286, 519, 309, 311, 534, 4420, 11, 420, 309, 311, 1238, 1019, 281, 767, 445, 2082, 926, 365, 364, 27151, 13, 51848, 51848], "temperature": 0.0, "avg_logprob": -0.2061449499691234, "compression_ratio": 1.6716981132075472, "no_caption_prob": 5.6489676353521645e-05}, {"id": 817, "seek": 476628, "start": 4789.16, "end": 4795.96, "text": " I think to get started, I think it's really useful, or it's pretty fun to actually just mess around with an Ellie.", "tokens": [50364, 583, 286, 519, 881, 295, 300, 311, 11828, 294, 264, 1401, 1398, 13, 821, 820, 312, 411, 11, 445, 257, 1326, 5110, 456, 281, 8195, 411, 483, 1409, 365, 13, 50764, 50764, 286, 1391, 643, 281, 909, 544, 13, 821, 366, 17007, 322, 300, 49040, 300, 1333, 295, 1477, 291, 807, 264, 3683, 411, 49834, 4358, 295, 3089, 5125, 11, 2891, 484, 9859, 293, 2684, 281, 544, 12649, 13, 51508, 51508, 286, 519, 281, 483, 1409, 11, 286, 519, 309, 311, 534, 4420, 11, 420, 309, 311, 1238, 1019, 281, 767, 445, 2082, 926, 365, 364, 27151, 13, 51848, 51848], "temperature": 0.0, "avg_logprob": -0.2061449499691234, "compression_ratio": 1.6716981132075472, "no_caption_prob": 5.6489676353521645e-05}, {"id": 818, "seek": 479596, "start": 4795.96, "end": 4804.36, "text": " And just install it and just get a feel for it. I should probably have that set up on the readme as far as like to really get people started.", "tokens": [50364, 400, 445, 3625, 309, 293, 445, 483, 257, 841, 337, 309, 13, 286, 820, 1391, 362, 300, 992, 493, 322, 264, 1401, 1398, 382, 1400, 382, 411, 281, 534, 483, 561, 1409, 13, 50784, 50784, 583, 293, 550, 1564, 291, 733, 295, 483, 257, 707, 857, 295, 264, 6813, 295, 309, 11, 309, 393, 312, 1391, 264, 958, 1823, 307, 3287, 493, 257, 1716, 293, 17990, 437, 307, 428, 4009, 295, 3494, 293, 437, 360, 291, 528, 281, 8460, 30, 51444, 51444, 3950, 366, 264, 732, 955, 5327, 11, 6095, 13, 51592, 51592], "temperature": 0.0, "avg_logprob": -0.11701933208264803, "compression_ratio": 1.6244725738396624, "no_caption_prob": 5.649449667544104e-05}, {"id": 819, "seek": 479596, "start": 4804.36, "end": 4817.56, "text": " But and then once you kind of get a little bit of the flavor of it, it can be probably the next step is setting up a project and deciding what is your source of truth and what do you want to generate?", "tokens": [50364, 400, 445, 3625, 309, 293, 445, 483, 257, 841, 337, 309, 13, 286, 820, 1391, 362, 300, 992, 493, 322, 264, 1401, 1398, 382, 1400, 382, 411, 281, 534, 483, 561, 1409, 13, 50784, 50784, 583, 293, 550, 1564, 291, 733, 295, 483, 257, 707, 857, 295, 264, 6813, 295, 309, 11, 309, 393, 312, 1391, 264, 958, 1823, 307, 3287, 493, 257, 1716, 293, 17990, 437, 307, 428, 4009, 295, 3494, 293, 437, 360, 291, 528, 281, 8460, 30, 51444, 51444, 3950, 366, 264, 732, 955, 5327, 11, 6095, 13, 51592, 51592], "temperature": 0.0, "avg_logprob": -0.11701933208264803, "compression_ratio": 1.6244725738396624, "no_caption_prob": 5.649449667544104e-05}, {"id": 820, "seek": 479596, "start": 4817.56, "end": 4820.52, "text": " Those are the two big decisions, honestly.", "tokens": [50364, 400, 445, 3625, 309, 293, 445, 483, 257, 841, 337, 309, 13, 286, 820, 1391, 362, 300, 992, 493, 322, 264, 1401, 1398, 382, 1400, 382, 411, 281, 534, 483, 561, 1409, 13, 50784, 50784, 583, 293, 550, 1564, 291, 733, 295, 483, 257, 707, 857, 295, 264, 6813, 295, 309, 11, 309, 393, 312, 1391, 264, 958, 1823, 307, 3287, 493, 257, 1716, 293, 17990, 437, 307, 428, 4009, 295, 3494, 293, 437, 360, 291, 528, 281, 8460, 30, 51444, 51444, 3950, 366, 264, 732, 955, 5327, 11, 6095, 13, 51592, 51592], "temperature": 0.0, "avg_logprob": -0.11701933208264803, "compression_ratio": 1.6244725738396624, "no_caption_prob": 5.649449667544104e-05}, {"id": 821, "seek": 482052, "start": 4820.52, "end": 4828.120000000001, "text": " Yeah, or npm install elm codegen review pages and coming soon.", "tokens": [50364, 865, 11, 420, 297, 14395, 3625, 806, 76, 3089, 1766, 3131, 7183, 293, 1348, 2321, 13, 50744, 50744, 865, 13, 865, 13, 14165, 13, 400, 321, 603, 574, 484, 337, 428, 8251, 14282, 15812, 751, 382, 731, 13, 4548, 2919, 13, 51044, 51044, 1044, 291, 13, 865, 11, 309, 311, 799, 312, 665, 13, 51176, 51176, 14165, 1507, 13, 1057, 558, 13, 1044, 291, 370, 709, 337, 5549, 11, 7397, 13, 467, 390, 257, 6834, 13, 51328, 51328, 865, 11, 1309, 291, 13, 51388, 51388, 400, 508, 2032, 268, 13, 9088, 958, 565, 13, 51488, 51488, 9088, 958, 565, 13, 51528], "temperature": 0.0, "avg_logprob": -0.2956257607172994, "compression_ratio": 1.5754716981132075, "no_caption_prob": 0.00014876038767397404}, {"id": 822, "seek": 482052, "start": 4828.120000000001, "end": 4834.120000000001, "text": " Yeah. Yeah. Amazing. And we'll look out for your Strangeloop talk as well. Super excited.", "tokens": [50364, 865, 11, 420, 297, 14395, 3625, 806, 76, 3089, 1766, 3131, 7183, 293, 1348, 2321, 13, 50744, 50744, 865, 13, 865, 13, 14165, 13, 400, 321, 603, 574, 484, 337, 428, 8251, 14282, 15812, 751, 382, 731, 13, 4548, 2919, 13, 51044, 51044, 1044, 291, 13, 865, 11, 309, 311, 799, 312, 665, 13, 51176, 51176, 14165, 1507, 13, 1057, 558, 13, 1044, 291, 370, 709, 337, 5549, 11, 7397, 13, 467, 390, 257, 6834, 13, 51328, 51328, 865, 11, 1309, 291, 13, 51388, 51388, 400, 508, 2032, 268, 13, 9088, 958, 565, 13, 51488, 51488, 9088, 958, 565, 13, 51528], "temperature": 0.0, "avg_logprob": -0.2956257607172994, "compression_ratio": 1.5754716981132075, "no_caption_prob": 0.00014876038767397404}, {"id": 823, "seek": 482052, "start": 4834.120000000001, "end": 4836.76, "text": " Thank you. Yeah, it's gonna be good.", "tokens": [50364, 865, 11, 420, 297, 14395, 3625, 806, 76, 3089, 1766, 3131, 7183, 293, 1348, 2321, 13, 50744, 50744, 865, 13, 865, 13, 14165, 13, 400, 321, 603, 574, 484, 337, 428, 8251, 14282, 15812, 751, 382, 731, 13, 4548, 2919, 13, 51044, 51044, 1044, 291, 13, 865, 11, 309, 311, 799, 312, 665, 13, 51176, 51176, 14165, 1507, 13, 1057, 558, 13, 1044, 291, 370, 709, 337, 5549, 11, 7397, 13, 467, 390, 257, 6834, 13, 51328, 51328, 865, 11, 1309, 291, 13, 51388, 51388, 400, 508, 2032, 268, 13, 9088, 958, 565, 13, 51488, 51488, 9088, 958, 565, 13, 51528], "temperature": 0.0, "avg_logprob": -0.2956257607172994, "compression_ratio": 1.5754716981132075, "no_caption_prob": 0.00014876038767397404}, {"id": 824, "seek": 482052, "start": 4836.76, "end": 4839.8, "text": " Amazing stuff. All right. Thank you so much for joining, Matt. It was a pleasure.", "tokens": [50364, 865, 11, 420, 297, 14395, 3625, 806, 76, 3089, 1766, 3131, 7183, 293, 1348, 2321, 13, 50744, 50744, 865, 13, 865, 13, 14165, 13, 400, 321, 603, 574, 484, 337, 428, 8251, 14282, 15812, 751, 382, 731, 13, 4548, 2919, 13, 51044, 51044, 1044, 291, 13, 865, 11, 309, 311, 799, 312, 665, 13, 51176, 51176, 14165, 1507, 13, 1057, 558, 13, 1044, 291, 370, 709, 337, 5549, 11, 7397, 13, 467, 390, 257, 6834, 13, 51328, 51328, 865, 11, 1309, 291, 13, 51388, 51388, 400, 508, 2032, 268, 13, 9088, 958, 565, 13, 51488, 51488, 9088, 958, 565, 13, 51528], "temperature": 0.0, "avg_logprob": -0.2956257607172994, "compression_ratio": 1.5754716981132075, "no_caption_prob": 0.00014876038767397404}, {"id": 825, "seek": 482052, "start": 4839.8, "end": 4841.0, "text": " Yeah, thank you.", "tokens": [50364, 865, 11, 420, 297, 14395, 3625, 806, 76, 3089, 1766, 3131, 7183, 293, 1348, 2321, 13, 50744, 50744, 865, 13, 865, 13, 14165, 13, 400, 321, 603, 574, 484, 337, 428, 8251, 14282, 15812, 751, 382, 731, 13, 4548, 2919, 13, 51044, 51044, 1044, 291, 13, 865, 11, 309, 311, 799, 312, 665, 13, 51176, 51176, 14165, 1507, 13, 1057, 558, 13, 1044, 291, 370, 709, 337, 5549, 11, 7397, 13, 467, 390, 257, 6834, 13, 51328, 51328, 865, 11, 1309, 291, 13, 51388, 51388, 400, 508, 2032, 268, 13, 9088, 958, 565, 13, 51488, 51488, 9088, 958, 565, 13, 51528], "temperature": 0.0, "avg_logprob": -0.2956257607172994, "compression_ratio": 1.5754716981132075, "no_caption_prob": 0.00014876038767397404}, {"id": 826, "seek": 482052, "start": 4841.0, "end": 4843.0, "text": " And Jeroen. Until next time.", "tokens": [50364, 865, 11, 420, 297, 14395, 3625, 806, 76, 3089, 1766, 3131, 7183, 293, 1348, 2321, 13, 50744, 50744, 865, 13, 865, 13, 14165, 13, 400, 321, 603, 574, 484, 337, 428, 8251, 14282, 15812, 751, 382, 731, 13, 4548, 2919, 13, 51044, 51044, 1044, 291, 13, 865, 11, 309, 311, 799, 312, 665, 13, 51176, 51176, 14165, 1507, 13, 1057, 558, 13, 1044, 291, 370, 709, 337, 5549, 11, 7397, 13, 467, 390, 257, 6834, 13, 51328, 51328, 865, 11, 1309, 291, 13, 51388, 51388, 400, 508, 2032, 268, 13, 9088, 958, 565, 13, 51488, 51488, 9088, 958, 565, 13, 51528], "temperature": 0.0, "avg_logprob": -0.2956257607172994, "compression_ratio": 1.5754716981132075, "no_caption_prob": 0.00014876038767397404}, {"id": 827, "seek": 484300, "start": 4843.0, "end": 4864.12, "text": " Until next time.", "tokens": [50364, 9088, 958, 565, 13, 51420], "temperature": 0.0, "avg_logprob": -0.5942437308175224, "compression_ratio": 0.6666666666666666, "no_caption_prob": 0.00022282375721260905}], "language": "en"}