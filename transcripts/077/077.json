{"text": " Hello, Jeroen. Hello, Dillon. Well, I thought about talking about the subject just the two of us, but I thought it would be a lot better if we brought in a domain expert. What do you think? I think that sounds great. And that domain expert is Simon Lydell. Simon, thank you so much for coming back on the podcast. Hello. Glad to be here and great to be back. Yeah, you are our domain expert. So are you trying to force a pun? Never. Me? No, you. Yes. Simon, what are we talking about today? Today we're talking about elmappurl, which is a new package that I made, which is related to a domain, but it's also exactly what it isn't. Right. Yes. So it was a bad pun. Yeah. So what exactly does it do? elmappurl is an alternative slash complement to the standard elm slash URL package, and it attempts to be simpler and easier to use. Right. Yeah. So you talked about, you've got a really nice short intro video that I definitely recommend people take a look at. We talked about this blog post that sort of went into all of the types behind the elm URL parsing, and you completely bypassed that with your design here. Yeah. So the way I'd like to see it is there are like three main things that they're dissatisfied with the official elm slash URL package. And they are more or less a design flaw and escape incident and the Jurassic Park anti-pattern. I'm intrigued. Okay. Me too. And we probably need to keep that one for last since you mentioned it last. So let's get started with the rest. I actually think it makes sense to start with a Jurassic Park. Oh, great. Awesome. It's the most interesting part and it ties back to what Dillon said with the intro in the readme. Is it that our scientists stopped to ask if they could, but not whether they should? Yeah, exactly. That's the whole thing. Awesome. Okay. So in my opinion, URL.parser in the standard elm URL package, in hindsight, maybe just should have been a blog post and not a package. And what I mean by that is like, I read a tweet, like, I don't know, a year ago, where someone said, like, did you know that all URLs are also valid JavaScript code? And then they explained like, if you start with the HTTP colon, that's a labeled statement in JavaScript. Oh, no. And then you have slash slash, and that's a comment. And the rest of it is just the rest of the comments. So like, that's a fun thing. That's something I could see myself waking up thinking like, I never thought about that before. I'm going to try if that works. And maybe it does. And I learned something. And I like to imagine, this is of course not true. This is just my imagination. What if Evan woke up one day and was like, could I like take a URL and have it be valid code? And if you think about it, if you have like a URL, let's say HTTP colon slash slash example.com slash A slash B, and you only take like the last part slash A slash B, you get rid of the first slash, then you only have A slash B. And like, that looks like division. So you could probably make that work as code, define A and define B, set them to floats. And when you do the division, you get another number as the result, right? And then you could like take it one step further in Python, you could do operator overloading. So if you make a class in Python and define a certain method, then you can like decide what it means to do division with two such classes, for example. And then you could like decide that, okay, division means that I'm going to return not a number, but maybe a function. And that function could do something interesting, like parse a URL that looks like A slash B and tell you like, it was A slash B or it wasn't. But then in Elm, we don't have operator overloading. But before Elm 0.19, we had custom operators. So you can define your own, which is exactly what Elm slash URL package does. And slash was occupied for division, it like added less than and greater than around the slash sign. And now you have an operator that kind of looks like a slash. And then you could like create a parser type and define some small functions that you could use with this slash. And then you can like kind of take a URL, paste it in your Elm code, tweak it a little bit and then you have like a working parser for that URL. And that is a really cool idea in my opinion. But now we have talked about like, let's think about if we could do it. But should we do it? Right. And in my opinion, like you could have written a blog post, how you came up with this, how you implemented it, what you learned, and then also pros and cons of the approach. And the pros is maybe that perhaps you could take a URL and turn it into code quite easily. But the cons in my opinion is that there is quite a lot of type trickery involved to make this work. That is fairly non obvious to work with, at least as a beginner, I think. And also for me. Yeah, so you're mostly talking about parsing a URL, right? So you have a string and you give it a specification, three parser type, and then you run it and the types that are involved in that are very complex. Yeah, there is a parser type in the package. And it takes a, or it makes sense if it takes a type variable, because if you're parsing something, you want to decide like what type should it parse to, what type have I chosen to represent all my routes in an app with. But if you look at the actual parser type, it doesn't take just one type variable, it takes two of them. And every time I try to write a type annotation for a URL parser, I can start out quite easily. I type like URL dot parser space, and then I'm stuck. And I can't figure it out. So I just erase all of that, and then I use my editor action instead, infer type, and it puts it in for me. And the first type variable is a function that like takes my type and returns an A. And the second one is also an A. And I have no clue what the function is doing there and what the A is. Yeah. So having been through this process yourself, can you, in simple language, explain what that extra type variable actually means? Because I still find it extremely confusing. No. I read the blog post about it, but I just don't remember. It's just gone. We will then link to the blog post and we can all get out of having to put that into simple words. Is it kind of like monads? Whenever you read about them and you understand, then you can't explain it again. In this case, you read it, you don't understand it, and you still can't explain it. And then you design a whole package so that you don't have to deal with that anymore. And then you're invited on a podcast and asked to explain it. And then your name is Simon. Whoa, that's very specific. Classic scenario. So you designed a Jurassic Park version that's the well there it is version of the Jurassic Park takeaway. And so what were the... You talked about the pros and cons. So the cons are you have this challenging type to deal with. The pro is it kind of looks like a URL, but it's not necessarily... See that's an interesting question is, does that make it easier to understand what it's doing because it looks like a URL? And I would say, if you step back and look at Elm's history a little bit, in the earlier days, there was, I think there were more roots in kind of Haskell design and a little bit like in the ecosystem of Ruby design. Like Richard Feldman's Elm CSS early on was trying to use a syntax where you design these style sheets that looked like CSS syntax. So you could have a custom operator for hashes and a custom operator for dots. And there were like a few things that didn't quite work out neatly. So you had to use some special trick for that. And then eventually he just got rid of all of them and he said, this actually, like, yes, it makes it kind of look like CSS syntax, which is kind of cool. And in the Ruby community, people really liked making DSLs that looked like the thing they're supposed to be. But then he moved to a more straightforward design that focused on making it really easy to understand how the pieces fit together and making it more maintainable. And I think like a lot of the Elm design instincts have moved in that direction too. And to me, your design for Elm app URL feels like that as well. So should we explain how parsing was done before? Like how did the code look and how it's done in your solution? Sure. So we need some kind of example URL to talk about. And maybe we can do like slash product slash, and then like a product ID or a product slug. We can go with a product slug. So we have a hard coded part, which is always product and then slash and then a dynamic part. And then the official package, you would, you would use this function called just S. I think it's for segment. Oh, I thought it was for string, segment makes sense. I think so. At least I think the point is that it's supposed to be short. Yeah. So the code looks more like a URL and less like code. And the segment function, it takes a string and there we would give it a product as a string. And that's how you say that I want a hard coded piece, which is product. And then you use this custom slash looking operator to join that with the next piece of the URL, which will be the dynamic part. And then there's a function called string, which means that this segment can be any string. And then finally, you usually pipe all of that to URL or parser dot map to turn that into like a custom type variant. I guess the most common thing. But what I tried to do was to like, I wanted elm app URL to be more of an anti package. I want to be a small and as little of a package as possible, just to be a stark contrast to the official package. I was thinking like, do we need a parser at all? Can we can we just do it some simple way? And what is the like the simplest way I could think of? Well, we could take the path of a URL and just split by slash and then do pattern matching on it with a case of expression. So try that without a package. I just like made a little example and wanted to see what I can do with it. And the first thing I noticed was that it's kind of annoying to split by slash yourself, because the path always starts with a slash, which means that you get a list with an empty string. And then the first thing you're actually interested in, which would be the string product in this case, and then all of the rest of the things. And also, I noticed that the parsers in the official package, they also ignore a trailing slash for you, which is kind of common that sometimes you end up with a trailing slash and maybe your application uses it, maybe it doesn't. And then you have to handle that as well in the pattern match, like add an extra case for an empty string at the end. So that was kind of annoying. But then I thought, like, the official package has a URL type, which is just a record with all the pieces of a URL and one of them is called path. And that is like the slash product slash product slug piece. I was thinking like, why is that just a string? Couldn't you have parsed that for me into a list of segments already? That would have been so much easier. So I thought like, that would be the first change I would make to this package. So then I like create a little helper function in my example that did that. And now my parsing function got really nice because it's just all I'm doing in the function is case URL dot path of, and then I match different string, different list patterns. So to take our example, the pattern we're looking for is a list with just two elements. The first one is the string product. The second one is any string. So you can just type the name of a variable there. And in inside the pattern, all you need to do is return just whatever you want. And that's it. That's all there is to it. That is much simpler. Yeah. So you need to have a default case for any other routes that you're trying to parse. And I'm guessing that would return a 404 custom variant, usually? Yeah, I've seen different ways of doing it. So that's one way of doing it. If you have a custom type with all your routes, you can just one more alternative, which is not found or 404. You can also choose to return a maybe in this function. So either just some route that exists or nothing, which means that nothing matched and you can handle that one level above and turn it into a 404 page. Yeah, so this package is really a pattern as much as anything. And the code is just to support that pattern. And so in a nutshell, that pattern is like you've got a nice example showing your product example here. It's just a function that takes an app URL, and it returns a maybe route. Or if you wanted to have a 404 route, be a variant, it could just be a route. But that's all it is. Maybe we should just explain what an app URL is. You said the function took the app URL. Yes. So app URL is the central type of my package. The difference to the URL type in the official package is that an app URL is a subset of a whole URL. It is only the path, the query parameters and the fragment. So it is not the scheme like HTTP, and it is not the domain, not the port. And the reason for that is that that is the part that you are actually interested in when writing an Elm application. Your app is going to be hosted on some domain, but you don't really care about that in your Elm code. It doesn't matter. So it's kind of annoying to have to... Like if you ever want to create an app URL because a function needs one, you don't want to specify a fake scheme, a fake domain and so on, just to be able to satisfy the type. And I read through specifications for URLs, and there is no name just for path plus query plus fragment. So I had to invent something. And eventually I came up with app URL. It's kind of short, and it also shows that it's like designed to be used for an Elm app. Yeah, that's my thinking. And this type or this package is only designed for parsing and stringifying routes in your application, right? It's not designed to represent any URL like the Elm URL package is supposed to. Exactly. So the way you use this, walk us through how you would wire this in compared to how you would wire in an Elm URL parser. So in an Elm application where you use browser.application, there are a couple of places where you get a URL in the init function, and also in URL changed, like the URL change message that you get. And what you do there is instead of giving that URL to a URL parser, you run a function called app URL dot from URL, which turns a full URL into only the app URL parts. And then you give that to your function that does the pattern match on the path. And then you have basically replaced the parser based stuff you had from before. Right. So the app URL type, so it gives you these values that are easier to deal with in a pattern match. So you have path is list of string, query parameters is a dict of string to list of string, and then the fragment is a maybe string. I'm guessing the fragment is probably not used that often in this context, but query parameters are used commonly. So how do you use the query parameters to in Elm app URL to parse into part of your route? That ties back to one of those three issues that I had with the official package. And this is the design flaw one, in my opinion. So the official URL type, it has a field called query, I think, and that is just a string, which means that the query parameters, the stuff that is from the question mark to the end or to the fragment, if you have one, it's just a string. I've tried to think of like, why is that? There is a link in the Elm URL package to an RFC, you know, one of those like monospaced formatted specification lucky thingies, which is like a specification for a URL. And in that one, for some reason, they just say that the query is the part from the question mark to the fragment. And usually the query is the part from the question mark. Yeah, kind of. But for some reason, they just say like, yeah, and people typically put key value pairs in there. Right. Yeah. So I'm wondering if like, Evan decided that, okay, I'm going to follow this RFC. And if someone complains, like, why is the query string? Well, it's in the RFC. I followed it. Right. But in practice, like everyone uses the query string the same way. It's key value pairs separated by ampersands. Right. With equals separating the keys and values. Yeah. Yeah. So that is not in the spec. As far as I can understand, specifications for URLs are pretty weird. I read a tweet from Daniel Stenberg, the creator of Curl. He tweeted something, someone responded and they responded with a question like, something, something URL specification. And Daniel's answer was just like, which specification question? Yeah, that's a bit too highly. These days, there is one from the WG committee. They're the ones making the HTML specification these days. They have like a URL specification that is a bit focused to JavaScript, because JavaScript has a nice URL class these days with the parsed query parameters in it and stuff like that. Right. Isn't there like a URL params constructor or something like that? Yeah, I think it's URL search params or something. URL search params, right. Yeah. So I had the luxury of being able to piggyback from that. Like whenever I thought like, hmm, how should this be handled in query parameters? I could look that up and see, like, how did they do it? Does it make sense? Should I copy that? And the answer was always yes. So I decided that in an app URL query, it's not just a string, it's a dictionary. So the whole thing is parsed for you. Right. So the one piece of information that might have meaning in a somewhat normal use of URL query params would be the order, which you have the order, if you use the same query param name multiple times, you have the order that those come in, but you don't have the order of the relative keys. But I mean, usually people just use them as key value pairs. So I guess that would be kind of non standard. Maybe we should clarify, so I chose a dict to store the parameters. And when you use a dict, you get the side effect that all of the things in the dict are always sorted by key alphabetically. So if you really cared about the order of your params, then that's not really possible with my package. But I don't think that's a real use case. Yeah, the only use case that I can see where this could be a problem is if you're trying to compare the URL you had at the beginning with the stringified version of your app URL, then if the order of keys are different, then you're gonna say, Oh, well, these are different. Let's refresh the page or something. I don't know. And in that case, you have a problem. But other than that, yeah. Yeah. But if you wanted to do something like having only ampersand, having five ampersands in a row in a query parameter, that's a valid URL. According to the URL spec, but not meaningful for your package. Exactly. I tried to like think of every edge case. It's like if you have a lot of ampersands in a row, what does that mean? And there are two possible interpretations. One is that you just ignore all of the extra ampersands, like they like don't contribute to anything. You could also see it as they contain a key that is the empty string, and the value is also the empty string. So you have like an empty parameter between each ampersand. But that's not really useful. So a list of dict key is empty string and value is a list of five empty strings. Perfect. Love that. So how many ampersands do you need to have so that ampersand becomes a key? Right. I do support like ampersand equals ampersand, which is like key is empty string, value is empty string. Because that's what the JavaScript version did and that's what WG spec said. That seems very wise to use like these sort of JavaScript standards because there are just so many people using this that it supported their main use cases. So it seems like a smart thing to piggyback on. I mean, as far as like the elm URL type being extremely unopinionated and as you say, just saying there is no standard, so here's a string. It seems reasonable because if it didn't do that, then you get sort of backed into a corner as a user where those use cases are impossible. Whereas if your user land package, elm app URL has a strong and very reasonable opinion about that, then people don't need to use it if it doesn't support their use case. So I think it's a nice state of things. And it's also kind of nice that elm doesn't have any built in assumptions about you using the official core elm URL package, except for the URL type, which is just the sort of raw URL value. You don't need to use a URL parser if you don't want to, which is quite nice. That is pretty nice. So if you wanted to grab those query parameters and parse them into your route in your sort of parsing function that you write as a user, pulling off values from your app URL record, what would that look like? There are two different use cases for query parameters, in my opinion. Either you have just a couple of them that you support. You could have one called sort to decide in which way a product listing is sorted and one called size, if you want to filter your products by size and so on. Or you could have a more dynamic use case where you kind of want to take all of the parameters as a dictionary, look them up dynamically according to something defined in the backend or whatever. So that latter use case where you take all of them, that's quite easy. You just take URL dot query parameters and then off you go. But if you just want to pluck off a couple of them, then in this function where you do your pattern match on the path, we talked about what you should return. Should you return a route or should you return a maybe route? And I recommend returning a maybe route because that fits really well with doing dictionary lookups in this query parameters dictionary. So then you could do like dic dot get and then the name of the parameter like sort or size. And then you say URL dot query parameters and then you get maybe list of strings because there's nothing stopping you adding like multiple sort parameters in the URL. And then my recommendation is to always pipe to maybe and then list dot head, which is a somewhat convenient way of just deciding that, okay, we're going to take the first one in case there are multiple. Now finally, I have this maybe string, which is like the sorting order or whatever. And you can choose what you want to do with that string. You could like store it in your route or page type, or you could parse it further. You could switch on it or case on it. Is it the string descending? Then it's okay. Is it ascending? It's okay. If it's something else, then you could like decide to drop it or whatever makes sense. Right. You could turn it into a default value. If you needed a default value, you could take it from a string to a custom type if you wanted to have ascending and descending as custom types. And in which case you have to say, if it's something I don't understand, then probably go with the default option because URL parsing is a little bit interesting because the concept of parsing implies that something could fail to parse, in which case there are some errors. But there's not really a way to show errors to the user. At least that's not usually what you want. Like if you say sort equals D, but it's supposed to be D-E-S-C, you probably just want to ignore that. Although I suppose if you wanted to like parse into a result type and say something that's wrong with the error, you could. But I guess the way users are using the URL is they're usually not hand editing it. So you don't necessarily want to give them error feedback. They're like clicking links. So you just want to assume they're probably going to have a valid URL and just fall back if not. It's only power users that edit URLs, I think. So I think it's fine to drop bad values and like arbitrarily choose to take the first one if there are duplicates, because power users will like understand that, hmm, okay, it's ambiguous if I do two of these. So it doesn't really matter what you do. It is kind of cool how this pattern is like, the code is so simple and easy to understand. Like in my opinion, it's easier to understand than an Elm URL parser. Not even thinking about like the parser type with the two type variables, like the code itself is easier for me to follow. But at the same time, it's more powerful. Like for example, if you wanted to parse it into a result type and give some error with messages saying, you know, sort was an invalid value, and then send that in your bug tracker to just say like, just for your information, this is something that went wrong in the URL, and then fall back to no URL, you could do that. Whereas I wouldn't know what to do with the Elm URL parser for a more sophisticated use case. But like really, my imagination just starts firing at all these possibilities with this simple pattern. I remember that with Elm URL, you can put parsers for the query using the operators. So you have this less than question mark, greater than symbol or operator, and then you can put a query parser, right? And I'm guessing that you can map that one, you can use parser and then, and that means that you can fail the query or the felt this parsing, if it doesn't match descending or ascending, right? Yeah, that's totally possible. Yeah. But the thing is, usually you do parser that one off. So if this thing fails, then it just goes on and tries a following parser. And in which case you don't have an error message, because you just says, okay, well, this one doesn't match. Let's go to the next one. So yeah, with with an Elm app URLs approach, it is easier to make nicer error messages, if you want to. I could also imagine I'm trying to think of a use case where you would want this, but I could imagine combining certain combinations of query parameters with with path segments to say, these two combinations, go together and kind of pull out the the maybes from from types and turn them into more nuanced variants that they tell you exactly the types that go together. Of course, like, again, the problem is that you don't want URLs to be able to fail easily, you want them to be very resilient and fault tolerant. So usually, we, we actually do end up having maybes often in things like query parameters, because the segments need to match us, we tend to be strict about segments and say, hey, if, if you go to slash products with a Z, instead of products with an S, then we're not going to handle that. But with query parameters, you want to just gracefully fall back to default. So yeah, for instance, I can imagine that in some cases, that's not true. For instance, like we like to say product slash and then a product slack or product ID, but you can also have imagine that there's a query parameter for the product ID or for a user. So imagine you have slash user, question mark, ID equals something. And that like, for some reason, like maybe legacy reasons, because this needs to support some URL pattern that was meant that was designed years ago, like this ID should never be absent. So if you don't have it, then you probably want to lead the user to an error page saying, hey, the ID is necessary. And that would be easier with Elm app URL compared to Elm URL. So another thing, I've thought a lot about URL parsing stuff in the context of Elm pages, Elm pages has file based router and, and Elm, Elm pages supports sort of like splat routes like catch all routes and, and optional route segments. As I was designing, you know, the approach for that, one of the things I was looking at with like the Elm URL parser was, well, how would I do catch all routes. And what I ended up realizing is that it doesn't support catch all routes. And so essentially, like under the hood for for the file based router I built into Elm pages, I was not able to use Elm URL to parse the URLs because it didn't support what to me seems like this very common standard use case of having a catch all route like having, you know, github.com slash repo, user slash repo slash branch slash blob slash some file path, which is a, an arbitrary number of segments that seems like very normal. But with your pattern in Elm app URL, it's pretty trivial, you just use these standard pattern matching tools of list pattern matching. That is a good point. I'm not sure if I've ever made an app with like any number of segments at the end or something. But now that you say it, I wouldn't know how to do it with the URL parsers. I think you would have to go back to the URL type, right and do it yourself. Yep, that's that's a that's a good experience. Yeah, I actually so I think I saw Simon posting something maybe this was like the seed of this design for you. But I think I saw you posting in response to somebody's question on slack about Oh, you could actually like, handle URL parsing with this simple trick, you could just do a simple pattern match. And I was like, Oh, yeah, you could couldn't you. And then I quickly went in and cut out all of these regexes from the Elm pages generated code for URL parsing and just turned it into a pattern match in the generated code. And it's great. So thanks for that. So one thing where I think Elm app URL is maybe not as nice or like, it chooses a different way of doing things. In Elm URL, you could have segments, which are parsers, right? And you can map them, right? So you just like JSON decoding, you can map it, you just like maybe you can map it. And for instance, you could have a custom type for a product ID or product slug, which would not just be a string. And that you would have to do yourself in the patterns in the pattern matching, right, you would extract the product slug, and then it's just a string. So you would need to not forget to convert it to a product slug. That is correct. Except that you can't really forget it, since it won't compile if you exactly type. But yeah, you would need to do it wrongly in a few places, like in the type in the route. And yeah, so that is a good point. Yeah, I don't think it's a big deal breaker at all. Like, yeah, not at all, actually. My take on it is that so Elm URL, it has parsers for string and int by default, and then you can make your own. And in my experience, I use string almost all the time, int very rarely. And when I use a string, it's usually like, this is supposed to become a product ID or a product slug or a user ID or something. And they are like, opaque anyway, I don't need to like do much to turn a string into a potential product ID. All I need to do, basically is to wrap it in a type. And of course, that might not be a valid product ID. But you'll notice that very quickly, because the first thing you're going to do on your product page is trying to fetch that product. And if that gives a 404 from your API, then you need to display like a product does not exist page. Yeah, wait a second, like, so if you say that the product slug or product ID is an integer, and it starts with 000, and it's like 0001234. And you say it's an int, then the product ID is 1234 and not 0001234. So when you go out and ask the server, like, can you give me the product, it will say like, I don't know this one. I know one that starts with 000. But I don't know 1234. So that's like, kind of scary, actually. Actually unsure what the int parsers in Elm say about leading zeros. But the point here is that if you are typing your IDs as ints, then you could ask yourself, why am I doing that? Why does it matter that it's an int? You're not supposed to do math with IDs, you're supposed to like just check are things equal and stuff like that. Unless your IDs are sequential, which for security reasons, you shouldn't do anyway. Unless they're Pokemon. The Pokedex number is a meaningful number. Fair, fair. Should we go ahead and talk about the third of my issues list, which is the escape incident. The escape incident. Is this also related to Jurassic Park? Yeah, the dinosaurs escape. That's true. So in the Elm URL package, there is a module called URL.builder. And it has functions like the one I use the most called absolute, and there are like relative, I think, and cross origin and stuff like that. But they're pretty similar, all of them. They take two lists. One list is for the path, and one is for parameters. And if we just focus on the first list, which is the path, then you can write something like the string A comma the string B. The result will be slash A slash B, which is quite handy for generating URLs. But if you type a slash inside of one of those strings, what is going to happen? What should happen? What should happen is it should get URL encoded. But I'm guessing that's not what happens. Exactly. It is not. And that is usually fine. But it can also result in some really weird code. I've seen people using this absolute function where they have written one segment as a string, like A by itself, and then the next hardcoded string, B, and then maybe comma and a variable, which is something dynamic, and then comma, more hardcoded things. But this time, they chose to use slashes inside the string instead. And at the very end, they even do plus plus something other dynamic, which is like now you have mixed all the different ways that you can. Oh, I don't like that. But that's just, it's fine. It's just confusing code. But it could have more severe consequences if, for example, if you have like a URL slash blog slash a slug of a blog, and your blog post is called like A B testing. And that's usually written as A slash B testing and your slug function or whatever, allows slashes in a slug, which might be pretty uncommon, but let's pretend that happened. If you then try to create a URL, and you put that slug in there, then you're accidentally gonna create a URL with three segments instead of two like you expected, which probably results in a 404 if you try to use that link. So the approach I wanted to take with the app URL is that it should feel more like the HTML package. When you put in a string in HTML in Elm, I never think about what that string looks like, like, will there be less than signs? Will there be ampersands? Could this be treated as HTML? No, it never happens. So I make sure that you can put any string anywhere, and it will represent that string exactly and not be treated as URL syntax. Okay, so if you if you put a slash in A B testing, then the slash would be escaped as a percentage sign and something else. Exactly. Okay, that feels very Elmy to me in the best possible way like it because to me like the feeling of working in Elm that I love is number one, like, not feeling like there are foot guns all around me that I'm going to set off by mistake, like just that peace of mind of using something and being like, yeah, it's going to be fine. And then secondly, when I'm trying to like follow a code path and understand what it's doing, or what it might do, or what might be causing a bug, having fewer places to look for, for the source of the bug, fewer special cases to think about, or like fewer possibilities, like the type is more narrowed, or what this can possibly do is more narrowed, or side effects can't be coming from here. So this is like, could this segment that's coming from user input or something be causing this weird URL thing? Like, no, it's like, it's going to be escaped. So you can just cross that off the list of things to look for for a specific type of problem from. Yeah, very, very nice. And this escaping stuff was actually useful at work. We had a bug, like before we used app URL, where we have like a search function in our app. And you can search by a person's phone number, for example. And someone wanted to search for their like full phone number with the counter code, which starts with a plus. So in Sweden, it's like plus four, six, and then the real phone number. And that always gave zero matches. And we were like, why doesn't that work? What's happening here? And when you, we send the phone number in a query parameter, and we were using the standard elm slash URL, like URL dot builder dot absolute. And then the second list of that function, you can specify your query parameters. It does not escape the plus. And for some reason, only in query parameters, a plus means space. So our server, by default, just unescaped that for us and says like, oh, it's a space for six and the phone number. And we don't have any phone number that starts with a space. So we had to like in the elm code go and manually use the URL dot percent and code function to make sure it's escaped. But now with app URL, we don't need to think about it. We could like remove that and just put the phone number in as is and it's going to work. Perfect. So when you mentioned that there's an absolute and a relative function in your builder, you said the second argument is a list. And I was like, why is it a list? Because the in the URL, the query is just a string, right? So why for query builder, do we have a list? So it looks like it's taking a list of query parameters. And those query parameters are basically key values, like you can say string, which with a key and a value, which is a string, or int with a key again, and an int value. So like, it's weirdly, the writing of the building of a URL doesn't match how it is parsed. So that's kind of weird. I agree. Parser and builder are very, like almost different universes in the same package. Yes. So the URL builder is like, oh, yeah, sure. Of course, queries are like, they're a dictionary and for parsing, like, no, it's just a string. People can do whatever. Okay. And the fun thing with a parser is that, like when you run a parser, you give it a URL, the URL type. And the first thing it does is pre-process the query parameters into like a dictionary kind of structure. And then the parsers that you write, like work on that pre-parsed type. So it's like, couldn't really decide which way to go or I don't know. Yeah. And also when you when you think about the URL builder in the elm-url package, and the way you create these query parameters, there's like a query parameter type, which you have a list of. And if it's a string, then you give string with the key and the value. If it's an int, you give an int with the key and the value. But so what is the like query parameter type and the int and string builders for the URL type, query parameter type giving you? It's really giving you string.fromInt. That's what it's bought you. So like, it seems so much more natural to just remove that level of abstraction. It feels kind of similar when I use like the headers in elm-http. And you build up a list of headers, but you have to do a header constructor to do, you know, http.header and give it the key and value. Why can't I just give it a list of tuples? Like that would have the same effect. So it just seems like, again, the Jurassic Park principle here. It's like, you could do that, but what value is it really giving you? And it's that much more that you have to like, look up and hold in your head when you're navigating this API. So I really like the simplicity you've arrived at. I'm very curious. I'm sure it's difficult to answer as a package author because you do your best to not have any cons. But we've talked about a lot of pros. Are there cons? Are there downsides? Are there common use cases that your package might not be a good fit for? I think that if you use query parameters like a lot on every page, quite a lot of them, it might be annoying to work with a dictionary type that I went with. And my reasoning when designing the query parameters was that like in none of the apps that I work with, we have that many query parameters. So it was hard to come up with something nice because I use it so little that like just a little bit of extra code here and there was simpler than trying to figure out a nice API for working with them. So basically the thing that I'm the most excited about in the package is the pattern matching on the path pattern, which is easy with this package. And then the query parameters that I just wanted to like, here is a structure that represents them quite well. And it's kind of easy to work with, but it might require a line or two or extra of extra code here and there. Yeah, I mentioned that you rarely use query parameters in practice, but also even less multiple times the same one. So you have a dictionary of list string as values, but in practice it's always just a single value, right? That must be the most common. Yeah, sure. I actually really like this thing I noticed happening a lot in Elm where something that like in other language ecosystems, I noticed tends to be like a library to help you do something. In Elm, sometimes it's just, well, it's actually pretty straightforward to do it. And it ends up being like a pattern rather than a library. And really it feels like that's what Elm app URL is. It's like a, it's three functions to help you use a pattern, but the pattern is the bigger thing. And if you wanted to, if you have very heavy processing of query parameters in your application, you can create your own domain specific query parameter parsing API and use that with the dict string list string. So it's like ultimate flexibility and simplicity, and you can build your own thing to, you know, to address your own internal needs if you outgrow what this pattern allows. Speaking about patterns, there is one pattern I would like to bring up, which is dry, the dry principle. Don't repeat yourself. I've learned something there when using this package and that is to don't worry too much about repeating yourself in this case. What did you say? Don't worry too much about repeating yourself. Oh, now I did it. Did you set me up? But did you worry about it? You didn't worry. You're good. Oh, nice. So it's very common that you have URLs that all start with the same pieces. Like you could have slash product slash slug. And on top of that, you could have like slash specs, slash reviews, slash whatever. And for reviews, maybe have like slash reviews slash and then review ID or something. And you might be tempted to like write your code so that you mentioned the string product just once or like you mentioned the whole piece product slash slug slash reviews just once so that if you need to change that URL, there will be just one string to change. But when I have written my code like that, like nested pattern matching or like having sub functions for parsing deeper and deeper, that's so much harder to understand and results in so much more code. So what I like to do is to simply type out every pattern in my pattern match, even if it means I write product like 10 times, it's so much easier to read. And you also get this like nice overview of all your pages in one place. And what I'm thinking here is that you need to repeat it once anyway, because you're going to need to be able to create these URLs as well. So you can't just mention product, the string product in a pattern match, you also need to have it in a function that can create those URLs. And on top of that, like, how often do you change your URLs? It's usually an anti pattern to change your URLs, but because people are going to have them in their history and stuff, and if they don't work, your, your app is broken, right? Yeah, if you're if you're really worried about it, maybe write some unit tests for it. There's someone named Arlo Belshi has a concept he talks about, I'll link to the blog post where he makes the argument that for for tests that you write, people overuse the concept of dry, and he proposes for testing using a concept called wet, which he he says is write explicit tests. Because sometimes what happens is, you almost need a test for your tests, because you use so many levels of abstraction for writing your tests that you don't know if it's actually doing what you expect. So his argument is, you should be able to look at a test and know exactly what it's doing. And having extra boilerplate and repetition is not a bad thing if it makes it very easy to understand exactly what it's doing without having to second guess it. And I think a similar concept would apply here. Don't be too clever, you know, and especially don't be too clever where it doesn't matter, which URLs is a good example, in my opinion, because like, how many URLs are you going to have in your app? In every app that I worked with, it's like 10 or 20 or 30. But we don't add a new one like every day. So to me, it makes sense to have like a dumber, simpler solution for such things. Yeah, actually, Elm has changed my understanding of what maintainable code looks like. And I something is stuck with me that I heard Richard Feldman say about, like, how we talk about boilerplate in these things. And of course, like, there's certain types of boilerplate that make code harder to understand and maintain. And that's not good. You know, you want code to be very straightforward and clear and easy to understand. And you want things to be less error prone and fewer places for human error. But boilerplate that doesn't have the possibility of human error that doesn't introduce another possible point of failure is not such a bad thing. It's not necessarily what's slowing down your ability to maintain code. And so that's kind of stuck with me is like, when you're trying to simplify something, you have to think about like, why are you simplifying it for some aesthetic purpose that doesn't actually change how easy something is to maintain and work with and how bug prone it is or not, you know, so I think that's a that's a really good nugget of wisdom. What really surprised me with this solution with LmapURL is how simple it is. And then I'm wondering, like, why did we put up with LMURL's approach for so long? Like, I mean, it works. So it's not something that we have to reinvent on purpose, because maybe it works pretty fine. But like, how, how come we stuck with it for so long? I think the key here is that the elm slash URL package works. There are like some annoyances with it, but it doesn't stop you from doing what you're supposed to. And once you are a bit familiar with elm, like you figure it out, you're able to set up the URLs you need. And then you don't think about it and move on with more interesting things. Yeah. And also, it's a core package, right? So, oh, it has to be good or this has to be the way. Yeah. I guess that's like judging by the quality of elm itself and all the core packages, you have that expectation on all of them. But if you think about it, like, of course, there's going to be one package that isn't as good as the others. It's like impossible to be perfect in every single one of them. And it took us long to realize, I guess. But I bet that beginners might appreciate a simpler way because that is like one less hurdle to do an elm application. Right. So in your opinion, should we get rid of the two operators that elm URL defines? Yes. I think that if you take the stance that there shouldn't be custom operators, then there shouldn't be any operators to import from any package. It's like a weird extra thing to learn that, oh, wait, what? In the URL package, you can import operators? What does that mean? Like, it's so foreign. You're not used to from other languages that you can import an operator. They just exist. And it feels like if we're going to have extra custom operators, don't waste them on URL parsing. Like, you could choose anything and you chose URLs. That's not what I would do. I'm guessing the only remaining ones that are not in the basics module are the ones from URL parser. Just parser. Just parser. Elm parser. Yeah. Yeah. Which I've always thought kind of trips people up a little bit. And I've always thought, how about keep and skip for those two operators? Because it says what it does explicitly, and it reduces having to explain some cute thing about an animal like eating your parsing input or something. I just think it would, I think it reads more easily and intuitively, and it would kind of ease the learning curve there a bit. And it would reduce the number of custom operators in published packages. Also like just the, sometimes you use pipes, and sometimes you use those symbols that look like pipes, but the way that you have to move those instructions, like that there, it's a bit weird. Like, oh, if you now want to keep this, then you need to move things around. I found it pretty confusing when I was working with parsers at least. And also like if we can remove the importance of parsers, of operators, that would make my life easier with Elm Review. So I'm fine with that change. So is there where you're going to tackle next parsers? To be honest, like I've used the Elm slash parser package exactly once, I think, in like one Advent of Code puzzle, where I didn't even need it. I just used it because I wanted to try it out. When it comes to like real applications, I've either been using other people's parsers from packages on the packages site, or I've just gone over, or I've just like used a RegEx or string splitting or something, and that has been just fine. Actually RegEx might be next on the chopping block, in my opinion, of something. I think there's a saner way to do a RegEx API in Elm. That's something in between needing a full on parser package and needing to use some kind of loosely typed wrapper around the JavaScript RegEx API. I have some thoughts there. That's for a different episode. That might be for a different episode. But Simon, this is a very interesting package, and it's really unique in the sense that it is seems like far more design attention and documentation and examples than code, which is kind of cool. What was it like designing this package? Was it just having a bunch of open tabs and doing a bunch of reading and research? A lot of that and a lot of, I mean, it actually took many months because I started using it or like trying it in a branch at work. And then every time I was like, no, now I have the API nailed. And then I tried to use it and like, nah, this was a bit annoying. Or like, I didn't think about this use case. So I think the key was to actually use it in several real projects to learn what is important and what is easy to use. Did the scope of it and the amount of code shrink over time? I get the sense that maybe you realized how simple it could be over time, or did you kind of have that sense from the beginning? It changed a bit over time. I like removed some query parameter helper function that I realized didn't really improve things. And I got some feedback on Discord and that helped a lot too. For the query parameters, was it like piping into list.head? That idea that how do you get like a single value for the query parameter? Yeah, I was debating if I should have a function for getting just a single value since that is the most common use case. But it was very difficult naming it and also deciding which way should it work. Should I take the first one? And I looked at like some other programming languages. I think I don't remember which one it was that took the first one, maybe Go? Or should I take the last one? That's what Django in Python does. Or there is actually one more option, which is what elm.slash.url does. If there is more than one, you get none of them. Really? I'm not sure like what the intention is, if it's a mistake or if it's like, this is ambiguous, you get none of them. Right, it failed to parse. That, see, the thing is that if you can present error messages, then that makes a lot of sense. But when you can't, like it seems like one of those instances where you want to be, what's the what's the phrase, you know, like accept a wide range of input, but then be very precise in how you build URLs in your application, but accept a wide variety of possible inputs with possible oddities from the user. Something I realized was that if no one really has noticed that for so many years, I don't think it matters which one you take. You just choose one approach, and that's going to be fine. But in the end, I decided not to make that decision in the package and just promote the pattern of using list.head instead. Yeah. Honestly, if I see a query pattern that is duplicated in my URL, I consider that to be a bug. Like, if I see one, I'm gonna like, yeah, we'll probably need to do something else than that, like, separated by comma, whatever. Yeah, and you have the added benefit of not having an O of N query parameter lookup if you do the last one and someone put 50 query parameters of the same name. So that's good. It's a DDoS attempt factor. Yeah. Well, Simon, what should people look at if they want to get started? I made a little video that very quickly explains the core concept. But other than that, you can go to the package on the package site, the readme, like, shows you the main thing immediately. And then I have some examples for every function as well in the documentation. Amazing. Well, thank you for the thoughtfully designed package. Thank you for the conversation. Thanks so much for coming back on the show. Thanks for having me. It was great. And Jeroen, until next time. Until next time.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 1.0, "text": " Hello, Jeroen.", "tokens": [2425, 11, 508, 2032, 268, 13], "temperature": 0.0, "avg_logprob": -0.31273250579833983, "compression_ratio": 1.6595744680851063, "no_speech_prob": 0.28226402401924133}, {"id": 1, "seek": 0, "start": 1.0, "end": 2.0, "text": " Hello, Dillon.", "tokens": [2425, 11, 28160, 13], "temperature": 0.0, "avg_logprob": -0.31273250579833983, "compression_ratio": 1.6595744680851063, "no_speech_prob": 0.28226402401924133}, {"id": 2, "seek": 0, "start": 2.0, "end": 8.48, "text": " Well, I thought about talking about the subject just the two of us, but I thought it would", "tokens": [1042, 11, 286, 1194, 466, 1417, 466, 264, 3983, 445, 264, 732, 295, 505, 11, 457, 286, 1194, 309, 576], "temperature": 0.0, "avg_logprob": -0.31273250579833983, "compression_ratio": 1.6595744680851063, "no_speech_prob": 0.28226402401924133}, {"id": 3, "seek": 0, "start": 8.48, "end": 11.4, "text": " be a lot better if we brought in a domain expert.", "tokens": [312, 257, 688, 1101, 498, 321, 3038, 294, 257, 9274, 5844, 13], "temperature": 0.0, "avg_logprob": -0.31273250579833983, "compression_ratio": 1.6595744680851063, "no_speech_prob": 0.28226402401924133}, {"id": 4, "seek": 0, "start": 11.4, "end": 12.4, "text": " What do you think?", "tokens": [708, 360, 291, 519, 30], "temperature": 0.0, "avg_logprob": -0.31273250579833983, "compression_ratio": 1.6595744680851063, "no_speech_prob": 0.28226402401924133}, {"id": 5, "seek": 0, "start": 12.4, "end": 15.52, "text": " I think that sounds great.", "tokens": [286, 519, 300, 3263, 869, 13], "temperature": 0.0, "avg_logprob": -0.31273250579833983, "compression_ratio": 1.6595744680851063, "no_speech_prob": 0.28226402401924133}, {"id": 6, "seek": 0, "start": 15.52, "end": 19.04, "text": " And that domain expert is Simon Lydell.", "tokens": [400, 300, 9274, 5844, 307, 13193, 441, 6655, 898, 13], "temperature": 0.0, "avg_logprob": -0.31273250579833983, "compression_ratio": 1.6595744680851063, "no_speech_prob": 0.28226402401924133}, {"id": 7, "seek": 0, "start": 19.04, "end": 22.080000000000002, "text": " Simon, thank you so much for coming back on the podcast.", "tokens": [13193, 11, 1309, 291, 370, 709, 337, 1348, 646, 322, 264, 7367, 13], "temperature": 0.0, "avg_logprob": -0.31273250579833983, "compression_ratio": 1.6595744680851063, "no_speech_prob": 0.28226402401924133}, {"id": 8, "seek": 0, "start": 22.080000000000002, "end": 23.080000000000002, "text": " Hello.", "tokens": [2425, 13], "temperature": 0.0, "avg_logprob": -0.31273250579833983, "compression_ratio": 1.6595744680851063, "no_speech_prob": 0.28226402401924133}, {"id": 9, "seek": 0, "start": 23.080000000000002, "end": 26.0, "text": " Glad to be here and great to be back.", "tokens": [28301, 281, 312, 510, 293, 869, 281, 312, 646, 13], "temperature": 0.0, "avg_logprob": -0.31273250579833983, "compression_ratio": 1.6595744680851063, "no_speech_prob": 0.28226402401924133}, {"id": 10, "seek": 0, "start": 26.0, "end": 29.76, "text": " Yeah, you are our domain expert.", "tokens": [865, 11, 291, 366, 527, 9274, 5844, 13], "temperature": 0.0, "avg_logprob": -0.31273250579833983, "compression_ratio": 1.6595744680851063, "no_speech_prob": 0.28226402401924133}, {"id": 11, "seek": 2976, "start": 29.76, "end": 33.32, "text": " So are you trying to force a pun?", "tokens": [407, 366, 291, 1382, 281, 3464, 257, 4468, 30], "temperature": 0.0, "avg_logprob": -0.3236685562133789, "compression_ratio": 1.4648648648648648, "no_speech_prob": 0.00010859125904971734}, {"id": 12, "seek": 2976, "start": 33.32, "end": 34.32, "text": " Never.", "tokens": [7344, 13], "temperature": 0.0, "avg_logprob": -0.3236685562133789, "compression_ratio": 1.4648648648648648, "no_speech_prob": 0.00010859125904971734}, {"id": 13, "seek": 2976, "start": 34.32, "end": 35.32, "text": " Me?", "tokens": [1923, 30], "temperature": 0.0, "avg_logprob": -0.3236685562133789, "compression_ratio": 1.4648648648648648, "no_speech_prob": 0.00010859125904971734}, {"id": 14, "seek": 2976, "start": 35.32, "end": 36.32, "text": " No, you.", "tokens": [883, 11, 291, 13], "temperature": 0.0, "avg_logprob": -0.3236685562133789, "compression_ratio": 1.4648648648648648, "no_speech_prob": 0.00010859125904971734}, {"id": 15, "seek": 2976, "start": 36.32, "end": 37.32, "text": " Yes.", "tokens": [1079, 13], "temperature": 0.0, "avg_logprob": -0.3236685562133789, "compression_ratio": 1.4648648648648648, "no_speech_prob": 0.00010859125904971734}, {"id": 16, "seek": 2976, "start": 37.32, "end": 42.800000000000004, "text": " Simon, what are we talking about today?", "tokens": [13193, 11, 437, 366, 321, 1417, 466, 965, 30], "temperature": 0.0, "avg_logprob": -0.3236685562133789, "compression_ratio": 1.4648648648648648, "no_speech_prob": 0.00010859125904971734}, {"id": 17, "seek": 2976, "start": 42.800000000000004, "end": 50.28, "text": " Today we're talking about elmappurl, which is a new package that I made, which is related", "tokens": [2692, 321, 434, 1417, 466, 806, 76, 1746, 374, 75, 11, 597, 307, 257, 777, 7372, 300, 286, 1027, 11, 597, 307, 4077], "temperature": 0.0, "avg_logprob": -0.3236685562133789, "compression_ratio": 1.4648648648648648, "no_speech_prob": 0.00010859125904971734}, {"id": 18, "seek": 2976, "start": 50.28, "end": 54.24, "text": " to a domain, but it's also exactly what it isn't.", "tokens": [281, 257, 9274, 11, 457, 309, 311, 611, 2293, 437, 309, 1943, 380, 13], "temperature": 0.0, "avg_logprob": -0.3236685562133789, "compression_ratio": 1.4648648648648648, "no_speech_prob": 0.00010859125904971734}, {"id": 19, "seek": 2976, "start": 54.24, "end": 55.24, "text": " Right.", "tokens": [1779, 13], "temperature": 0.0, "avg_logprob": -0.3236685562133789, "compression_ratio": 1.4648648648648648, "no_speech_prob": 0.00010859125904971734}, {"id": 20, "seek": 2976, "start": 55.24, "end": 56.24, "text": " Yes.", "tokens": [1079, 13], "temperature": 0.0, "avg_logprob": -0.3236685562133789, "compression_ratio": 1.4648648648648648, "no_speech_prob": 0.00010859125904971734}, {"id": 21, "seek": 2976, "start": 56.24, "end": 59.24, "text": " So it was a bad pun.", "tokens": [407, 309, 390, 257, 1578, 4468, 13], "temperature": 0.0, "avg_logprob": -0.3236685562133789, "compression_ratio": 1.4648648648648648, "no_speech_prob": 0.00010859125904971734}, {"id": 22, "seek": 5924, "start": 59.24, "end": 60.24, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.3329912522259881, "compression_ratio": 1.4482758620689655, "no_speech_prob": 2.4261118596768938e-05}, {"id": 23, "seek": 5924, "start": 60.24, "end": 66.64, "text": " So what exactly does it do?", "tokens": [407, 437, 2293, 775, 309, 360, 30], "temperature": 0.0, "avg_logprob": -0.3329912522259881, "compression_ratio": 1.4482758620689655, "no_speech_prob": 2.4261118596768938e-05}, {"id": 24, "seek": 5924, "start": 66.64, "end": 75.8, "text": " elmappurl is an alternative slash complement to the standard elm slash URL package, and", "tokens": [806, 76, 1746, 374, 75, 307, 364, 8535, 17330, 17103, 281, 264, 3832, 806, 76, 17330, 12905, 7372, 11, 293], "temperature": 0.0, "avg_logprob": -0.3329912522259881, "compression_ratio": 1.4482758620689655, "no_speech_prob": 2.4261118596768938e-05}, {"id": 25, "seek": 5924, "start": 75.8, "end": 79.76, "text": " it attempts to be simpler and easier to use.", "tokens": [309, 15257, 281, 312, 18587, 293, 3571, 281, 764, 13], "temperature": 0.0, "avg_logprob": -0.3329912522259881, "compression_ratio": 1.4482758620689655, "no_speech_prob": 2.4261118596768938e-05}, {"id": 26, "seek": 5924, "start": 79.76, "end": 80.76, "text": " Right.", "tokens": [1779, 13], "temperature": 0.0, "avg_logprob": -0.3329912522259881, "compression_ratio": 1.4482758620689655, "no_speech_prob": 2.4261118596768938e-05}, {"id": 27, "seek": 5924, "start": 80.76, "end": 81.76, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.3329912522259881, "compression_ratio": 1.4482758620689655, "no_speech_prob": 2.4261118596768938e-05}, {"id": 28, "seek": 5924, "start": 81.76, "end": 85.72, "text": " So you talked about, you've got a really nice short intro video that I definitely recommend", "tokens": [407, 291, 2825, 466, 11, 291, 600, 658, 257, 534, 1481, 2099, 12897, 960, 300, 286, 2138, 2748], "temperature": 0.0, "avg_logprob": -0.3329912522259881, "compression_ratio": 1.4482758620689655, "no_speech_prob": 2.4261118596768938e-05}, {"id": 29, "seek": 5924, "start": 85.72, "end": 86.72, "text": " people take a look at.", "tokens": [561, 747, 257, 574, 412, 13], "temperature": 0.0, "avg_logprob": -0.3329912522259881, "compression_ratio": 1.4482758620689655, "no_speech_prob": 2.4261118596768938e-05}, {"id": 30, "seek": 8672, "start": 86.72, "end": 94.08, "text": " We talked about this blog post that sort of went into all of the types behind the elm", "tokens": [492, 2825, 466, 341, 6968, 2183, 300, 1333, 295, 1437, 666, 439, 295, 264, 3467, 2261, 264, 806, 76], "temperature": 0.0, "avg_logprob": -0.3223004463391426, "compression_ratio": 1.5025641025641026, "no_speech_prob": 2.5212380023731384e-06}, {"id": 31, "seek": 8672, "start": 94.08, "end": 99.12, "text": " URL parsing, and you completely bypassed that with your design here.", "tokens": [12905, 21156, 278, 11, 293, 291, 2584, 24996, 292, 300, 365, 428, 1715, 510, 13], "temperature": 0.0, "avg_logprob": -0.3223004463391426, "compression_ratio": 1.5025641025641026, "no_speech_prob": 2.5212380023731384e-06}, {"id": 32, "seek": 8672, "start": 99.12, "end": 100.16, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.3223004463391426, "compression_ratio": 1.5025641025641026, "no_speech_prob": 2.5212380023731384e-06}, {"id": 33, "seek": 8672, "start": 100.16, "end": 107.28, "text": " So the way I'd like to see it is there are like three main things that they're dissatisfied", "tokens": [407, 264, 636, 286, 1116, 411, 281, 536, 309, 307, 456, 366, 411, 1045, 2135, 721, 300, 436, 434, 7802, 38502], "temperature": 0.0, "avg_logprob": -0.3223004463391426, "compression_ratio": 1.5025641025641026, "no_speech_prob": 2.5212380023731384e-06}, {"id": 34, "seek": 8672, "start": 107.28, "end": 111.28, "text": " with the official elm slash URL package.", "tokens": [365, 264, 4783, 806, 76, 17330, 12905, 7372, 13], "temperature": 0.0, "avg_logprob": -0.3223004463391426, "compression_ratio": 1.5025641025641026, "no_speech_prob": 2.5212380023731384e-06}, {"id": 35, "seek": 11128, "start": 111.28, "end": 120.52, "text": " And they are more or less a design flaw and escape incident and the Jurassic Park anti-pattern.", "tokens": [400, 436, 366, 544, 420, 1570, 257, 1715, 13717, 293, 7615, 9348, 293, 264, 44730, 4964, 6061, 12, 79, 1161, 77, 13], "temperature": 0.0, "avg_logprob": -0.33800189369603206, "compression_ratio": 1.5118483412322274, "no_speech_prob": 8.005127710930537e-06}, {"id": 36, "seek": 11128, "start": 120.52, "end": 121.52, "text": " I'm intrigued.", "tokens": [286, 478, 35140, 13], "temperature": 0.0, "avg_logprob": -0.33800189369603206, "compression_ratio": 1.5118483412322274, "no_speech_prob": 8.005127710930537e-06}, {"id": 37, "seek": 11128, "start": 121.52, "end": 122.52, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.33800189369603206, "compression_ratio": 1.5118483412322274, "no_speech_prob": 8.005127710930537e-06}, {"id": 38, "seek": 11128, "start": 122.52, "end": 123.52, "text": " Me too.", "tokens": [1923, 886, 13], "temperature": 0.0, "avg_logprob": -0.33800189369603206, "compression_ratio": 1.5118483412322274, "no_speech_prob": 8.005127710930537e-06}, {"id": 39, "seek": 11128, "start": 123.52, "end": 129.32, "text": " And we probably need to keep that one for last since you mentioned it last.", "tokens": [400, 321, 1391, 643, 281, 1066, 300, 472, 337, 1036, 1670, 291, 2835, 309, 1036, 13], "temperature": 0.0, "avg_logprob": -0.33800189369603206, "compression_ratio": 1.5118483412322274, "no_speech_prob": 8.005127710930537e-06}, {"id": 40, "seek": 11128, "start": 129.32, "end": 133.4, "text": " So let's get started with the rest.", "tokens": [407, 718, 311, 483, 1409, 365, 264, 1472, 13], "temperature": 0.0, "avg_logprob": -0.33800189369603206, "compression_ratio": 1.5118483412322274, "no_speech_prob": 8.005127710930537e-06}, {"id": 41, "seek": 11128, "start": 133.4, "end": 137.6, "text": " I actually think it makes sense to start with a Jurassic Park.", "tokens": [286, 767, 519, 309, 1669, 2020, 281, 722, 365, 257, 44730, 4964, 13], "temperature": 0.0, "avg_logprob": -0.33800189369603206, "compression_ratio": 1.5118483412322274, "no_speech_prob": 8.005127710930537e-06}, {"id": 42, "seek": 11128, "start": 137.6, "end": 139.6, "text": " Oh, great.", "tokens": [876, 11, 869, 13], "temperature": 0.0, "avg_logprob": -0.33800189369603206, "compression_ratio": 1.5118483412322274, "no_speech_prob": 8.005127710930537e-06}, {"id": 43, "seek": 11128, "start": 139.6, "end": 141.16, "text": " Awesome.", "tokens": [10391, 13], "temperature": 0.0, "avg_logprob": -0.33800189369603206, "compression_ratio": 1.5118483412322274, "no_speech_prob": 8.005127710930537e-06}, {"id": 44, "seek": 14116, "start": 141.16, "end": 148.07999999999998, "text": " It's the most interesting part and it ties back to what Dillon said with the intro in", "tokens": [467, 311, 264, 881, 1880, 644, 293, 309, 14039, 646, 281, 437, 28160, 848, 365, 264, 12897, 294], "temperature": 0.0, "avg_logprob": -0.32132393686394944, "compression_ratio": 1.4570135746606334, "no_speech_prob": 5.222624895395711e-05}, {"id": 45, "seek": 14116, "start": 148.07999999999998, "end": 149.07999999999998, "text": " the readme.", "tokens": [264, 1401, 1398, 13], "temperature": 0.0, "avg_logprob": -0.32132393686394944, "compression_ratio": 1.4570135746606334, "no_speech_prob": 5.222624895395711e-05}, {"id": 46, "seek": 14116, "start": 149.07999999999998, "end": 154.72, "text": " Is it that our scientists stopped to ask if they could, but not whether they should?", "tokens": [1119, 309, 300, 527, 7708, 5936, 281, 1029, 498, 436, 727, 11, 457, 406, 1968, 436, 820, 30], "temperature": 0.0, "avg_logprob": -0.32132393686394944, "compression_ratio": 1.4570135746606334, "no_speech_prob": 5.222624895395711e-05}, {"id": 47, "seek": 14116, "start": 154.72, "end": 155.96, "text": " Yeah, exactly.", "tokens": [865, 11, 2293, 13], "temperature": 0.0, "avg_logprob": -0.32132393686394944, "compression_ratio": 1.4570135746606334, "no_speech_prob": 5.222624895395711e-05}, {"id": 48, "seek": 14116, "start": 155.96, "end": 158.96, "text": " That's the whole thing.", "tokens": [663, 311, 264, 1379, 551, 13], "temperature": 0.0, "avg_logprob": -0.32132393686394944, "compression_ratio": 1.4570135746606334, "no_speech_prob": 5.222624895395711e-05}, {"id": 49, "seek": 14116, "start": 158.96, "end": 159.96, "text": " Awesome.", "tokens": [10391, 13], "temperature": 0.0, "avg_logprob": -0.32132393686394944, "compression_ratio": 1.4570135746606334, "no_speech_prob": 5.222624895395711e-05}, {"id": 50, "seek": 14116, "start": 159.96, "end": 160.96, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.32132393686394944, "compression_ratio": 1.4570135746606334, "no_speech_prob": 5.222624895395711e-05}, {"id": 51, "seek": 14116, "start": 160.96, "end": 170.64, "text": " So in my opinion, URL.parser in the standard elm URL package, in hindsight, maybe just", "tokens": [407, 294, 452, 4800, 11, 12905, 13, 79, 685, 260, 294, 264, 3832, 806, 76, 12905, 7372, 11, 294, 44357, 11, 1310, 445], "temperature": 0.0, "avg_logprob": -0.32132393686394944, "compression_ratio": 1.4570135746606334, "no_speech_prob": 5.222624895395711e-05}, {"id": 52, "seek": 17064, "start": 170.64, "end": 174.2, "text": " should have been a blog post and not a package.", "tokens": [820, 362, 668, 257, 6968, 2183, 293, 406, 257, 7372, 13], "temperature": 0.0, "avg_logprob": -0.26374584163000825, "compression_ratio": 1.6033755274261603, "no_speech_prob": 3.218596611986868e-05}, {"id": 53, "seek": 17064, "start": 174.2, "end": 180.27999999999997, "text": " And what I mean by that is like, I read a tweet, like, I don't know, a year ago, where", "tokens": [400, 437, 286, 914, 538, 300, 307, 411, 11, 286, 1401, 257, 15258, 11, 411, 11, 286, 500, 380, 458, 11, 257, 1064, 2057, 11, 689], "temperature": 0.0, "avg_logprob": -0.26374584163000825, "compression_ratio": 1.6033755274261603, "no_speech_prob": 3.218596611986868e-05}, {"id": 54, "seek": 17064, "start": 180.27999999999997, "end": 187.0, "text": " someone said, like, did you know that all URLs are also valid JavaScript code?", "tokens": [1580, 848, 11, 411, 11, 630, 291, 458, 300, 439, 43267, 366, 611, 7363, 15778, 3089, 30], "temperature": 0.0, "avg_logprob": -0.26374584163000825, "compression_ratio": 1.6033755274261603, "no_speech_prob": 3.218596611986868e-05}, {"id": 55, "seek": 17064, "start": 187.0, "end": 194.38, "text": " And then they explained like, if you start with the HTTP colon, that's a labeled statement", "tokens": [400, 550, 436, 8825, 411, 11, 498, 291, 722, 365, 264, 33283, 8255, 11, 300, 311, 257, 21335, 5629], "temperature": 0.0, "avg_logprob": -0.26374584163000825, "compression_ratio": 1.6033755274261603, "no_speech_prob": 3.218596611986868e-05}, {"id": 56, "seek": 17064, "start": 194.38, "end": 195.38, "text": " in JavaScript.", "tokens": [294, 15778, 13], "temperature": 0.0, "avg_logprob": -0.26374584163000825, "compression_ratio": 1.6033755274261603, "no_speech_prob": 3.218596611986868e-05}, {"id": 57, "seek": 17064, "start": 195.38, "end": 196.42, "text": " Oh, no.", "tokens": [876, 11, 572, 13], "temperature": 0.0, "avg_logprob": -0.26374584163000825, "compression_ratio": 1.6033755274261603, "no_speech_prob": 3.218596611986868e-05}, {"id": 58, "seek": 17064, "start": 196.42, "end": 198.95999999999998, "text": " And then you have slash slash, and that's a comment.", "tokens": [400, 550, 291, 362, 17330, 17330, 11, 293, 300, 311, 257, 2871, 13], "temperature": 0.0, "avg_logprob": -0.26374584163000825, "compression_ratio": 1.6033755274261603, "no_speech_prob": 3.218596611986868e-05}, {"id": 59, "seek": 19896, "start": 198.96, "end": 203.12, "text": " And the rest of it is just the rest of the comments.", "tokens": [400, 264, 1472, 295, 309, 307, 445, 264, 1472, 295, 264, 3053, 13], "temperature": 0.0, "avg_logprob": -0.22858787164455507, "compression_ratio": 1.6975806451612903, "no_speech_prob": 8.663042535772547e-06}, {"id": 60, "seek": 19896, "start": 203.12, "end": 205.12, "text": " So like, that's a fun thing.", "tokens": [407, 411, 11, 300, 311, 257, 1019, 551, 13], "temperature": 0.0, "avg_logprob": -0.22858787164455507, "compression_ratio": 1.6975806451612903, "no_speech_prob": 8.663042535772547e-06}, {"id": 61, "seek": 19896, "start": 205.12, "end": 210.08, "text": " That's something I could see myself waking up thinking like, I never thought about that", "tokens": [663, 311, 746, 286, 727, 536, 2059, 20447, 493, 1953, 411, 11, 286, 1128, 1194, 466, 300], "temperature": 0.0, "avg_logprob": -0.22858787164455507, "compression_ratio": 1.6975806451612903, "no_speech_prob": 8.663042535772547e-06}, {"id": 62, "seek": 19896, "start": 210.08, "end": 211.08, "text": " before.", "tokens": [949, 13], "temperature": 0.0, "avg_logprob": -0.22858787164455507, "compression_ratio": 1.6975806451612903, "no_speech_prob": 8.663042535772547e-06}, {"id": 63, "seek": 19896, "start": 211.08, "end": 212.08, "text": " I'm going to try if that works.", "tokens": [286, 478, 516, 281, 853, 498, 300, 1985, 13], "temperature": 0.0, "avg_logprob": -0.22858787164455507, "compression_ratio": 1.6975806451612903, "no_speech_prob": 8.663042535772547e-06}, {"id": 64, "seek": 19896, "start": 212.08, "end": 213.08, "text": " And maybe it does.", "tokens": [400, 1310, 309, 775, 13], "temperature": 0.0, "avg_logprob": -0.22858787164455507, "compression_ratio": 1.6975806451612903, "no_speech_prob": 8.663042535772547e-06}, {"id": 65, "seek": 19896, "start": 213.08, "end": 214.32, "text": " And I learned something.", "tokens": [400, 286, 3264, 746, 13], "temperature": 0.0, "avg_logprob": -0.22858787164455507, "compression_ratio": 1.6975806451612903, "no_speech_prob": 8.663042535772547e-06}, {"id": 66, "seek": 19896, "start": 214.32, "end": 218.20000000000002, "text": " And I like to imagine, this is of course not true.", "tokens": [400, 286, 411, 281, 3811, 11, 341, 307, 295, 1164, 406, 2074, 13], "temperature": 0.0, "avg_logprob": -0.22858787164455507, "compression_ratio": 1.6975806451612903, "no_speech_prob": 8.663042535772547e-06}, {"id": 67, "seek": 19896, "start": 218.20000000000002, "end": 220.64000000000001, "text": " This is just my imagination.", "tokens": [639, 307, 445, 452, 12938, 13], "temperature": 0.0, "avg_logprob": -0.22858787164455507, "compression_ratio": 1.6975806451612903, "no_speech_prob": 8.663042535772547e-06}, {"id": 68, "seek": 19896, "start": 220.64000000000001, "end": 228.60000000000002, "text": " What if Evan woke up one day and was like, could I like take a URL and have it be valid", "tokens": [708, 498, 22613, 12852, 493, 472, 786, 293, 390, 411, 11, 727, 286, 411, 747, 257, 12905, 293, 362, 309, 312, 7363], "temperature": 0.0, "avg_logprob": -0.22858787164455507, "compression_ratio": 1.6975806451612903, "no_speech_prob": 8.663042535772547e-06}, {"id": 69, "seek": 22860, "start": 228.6, "end": 229.92, "text": " code?", "tokens": [3089, 30], "temperature": 0.0, "avg_logprob": -0.235347049071057, "compression_ratio": 1.6775700934579438, "no_speech_prob": 2.280695662193466e-05}, {"id": 70, "seek": 22860, "start": 229.92, "end": 237.0, "text": " And if you think about it, if you have like a URL, let's say HTTP colon slash slash example.com", "tokens": [400, 498, 291, 519, 466, 309, 11, 498, 291, 362, 411, 257, 12905, 11, 718, 311, 584, 33283, 8255, 17330, 17330, 1365, 13, 1112], "temperature": 0.0, "avg_logprob": -0.235347049071057, "compression_ratio": 1.6775700934579438, "no_speech_prob": 2.280695662193466e-05}, {"id": 71, "seek": 22860, "start": 237.0, "end": 242.68, "text": " slash A slash B, and you only take like the last part slash A slash B, you get rid of", "tokens": [17330, 316, 17330, 363, 11, 293, 291, 787, 747, 411, 264, 1036, 644, 17330, 316, 17330, 363, 11, 291, 483, 3973, 295], "temperature": 0.0, "avg_logprob": -0.235347049071057, "compression_ratio": 1.6775700934579438, "no_speech_prob": 2.280695662193466e-05}, {"id": 72, "seek": 22860, "start": 242.68, "end": 248.04, "text": " the first slash, then you only have A slash B. And like, that looks like division.", "tokens": [264, 700, 17330, 11, 550, 291, 787, 362, 316, 17330, 363, 13, 400, 411, 11, 300, 1542, 411, 10044, 13], "temperature": 0.0, "avg_logprob": -0.235347049071057, "compression_ratio": 1.6775700934579438, "no_speech_prob": 2.280695662193466e-05}, {"id": 73, "seek": 22860, "start": 248.04, "end": 254.28, "text": " So you could probably make that work as code, define A and define B, set them to floats.", "tokens": [407, 291, 727, 1391, 652, 300, 589, 382, 3089, 11, 6964, 316, 293, 6964, 363, 11, 992, 552, 281, 37878, 13], "temperature": 0.0, "avg_logprob": -0.235347049071057, "compression_ratio": 1.6775700934579438, "no_speech_prob": 2.280695662193466e-05}, {"id": 74, "seek": 25428, "start": 254.28, "end": 259.24, "text": " And when you do the division, you get another number as the result, right?", "tokens": [400, 562, 291, 360, 264, 10044, 11, 291, 483, 1071, 1230, 382, 264, 1874, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.20064135714694187, "compression_ratio": 1.752988047808765, "no_speech_prob": 4.353334134066245e-06}, {"id": 75, "seek": 25428, "start": 259.24, "end": 266.8, "text": " And then you could like take it one step further in Python, you could do operator overloading.", "tokens": [400, 550, 291, 727, 411, 747, 309, 472, 1823, 3052, 294, 15329, 11, 291, 727, 360, 12973, 28777, 278, 13], "temperature": 0.0, "avg_logprob": -0.20064135714694187, "compression_ratio": 1.752988047808765, "no_speech_prob": 4.353334134066245e-06}, {"id": 76, "seek": 25428, "start": 266.8, "end": 271.16, "text": " So if you make a class in Python and define a certain method, then you can like decide", "tokens": [407, 498, 291, 652, 257, 1508, 294, 15329, 293, 6964, 257, 1629, 3170, 11, 550, 291, 393, 411, 4536], "temperature": 0.0, "avg_logprob": -0.20064135714694187, "compression_ratio": 1.752988047808765, "no_speech_prob": 4.353334134066245e-06}, {"id": 77, "seek": 25428, "start": 271.16, "end": 275.76, "text": " what it means to do division with two such classes, for example.", "tokens": [437, 309, 1355, 281, 360, 10044, 365, 732, 1270, 5359, 11, 337, 1365, 13], "temperature": 0.0, "avg_logprob": -0.20064135714694187, "compression_ratio": 1.752988047808765, "no_speech_prob": 4.353334134066245e-06}, {"id": 78, "seek": 25428, "start": 275.76, "end": 280.88, "text": " And then you could like decide that, okay, division means that I'm going to return not", "tokens": [400, 550, 291, 727, 411, 4536, 300, 11, 1392, 11, 10044, 1355, 300, 286, 478, 516, 281, 2736, 406], "temperature": 0.0, "avg_logprob": -0.20064135714694187, "compression_ratio": 1.752988047808765, "no_speech_prob": 4.353334134066245e-06}, {"id": 79, "seek": 25428, "start": 280.88, "end": 283.2, "text": " a number, but maybe a function.", "tokens": [257, 1230, 11, 457, 1310, 257, 2445, 13], "temperature": 0.0, "avg_logprob": -0.20064135714694187, "compression_ratio": 1.752988047808765, "no_speech_prob": 4.353334134066245e-06}, {"id": 80, "seek": 28320, "start": 283.2, "end": 288.84, "text": " And that function could do something interesting, like parse a URL that looks like A slash B", "tokens": [400, 300, 2445, 727, 360, 746, 1880, 11, 411, 48377, 257, 12905, 300, 1542, 411, 316, 17330, 363], "temperature": 0.0, "avg_logprob": -0.25496090783013237, "compression_ratio": 1.519047619047619, "no_speech_prob": 2.0749719624291174e-05}, {"id": 81, "seek": 28320, "start": 288.84, "end": 293.02, "text": " and tell you like, it was A slash B or it wasn't.", "tokens": [293, 980, 291, 411, 11, 309, 390, 316, 17330, 363, 420, 309, 2067, 380, 13], "temperature": 0.0, "avg_logprob": -0.25496090783013237, "compression_ratio": 1.519047619047619, "no_speech_prob": 2.0749719624291174e-05}, {"id": 82, "seek": 28320, "start": 293.02, "end": 296.59999999999997, "text": " But then in Elm, we don't have operator overloading.", "tokens": [583, 550, 294, 2699, 76, 11, 321, 500, 380, 362, 12973, 28777, 278, 13], "temperature": 0.0, "avg_logprob": -0.25496090783013237, "compression_ratio": 1.519047619047619, "no_speech_prob": 2.0749719624291174e-05}, {"id": 83, "seek": 28320, "start": 296.59999999999997, "end": 302.59999999999997, "text": " But before Elm 0.19, we had custom operators.", "tokens": [583, 949, 2699, 76, 1958, 13, 3405, 11, 321, 632, 2375, 19077, 13], "temperature": 0.0, "avg_logprob": -0.25496090783013237, "compression_ratio": 1.519047619047619, "no_speech_prob": 2.0749719624291174e-05}, {"id": 84, "seek": 28320, "start": 302.59999999999997, "end": 308.84, "text": " So you can define your own, which is exactly what Elm slash URL package does.", "tokens": [407, 291, 393, 6964, 428, 1065, 11, 597, 307, 2293, 437, 2699, 76, 17330, 12905, 7372, 775, 13], "temperature": 0.0, "avg_logprob": -0.25496090783013237, "compression_ratio": 1.519047619047619, "no_speech_prob": 2.0749719624291174e-05}, {"id": 85, "seek": 30884, "start": 308.84, "end": 315.35999999999996, "text": " And slash was occupied for division, it like added less than and greater than around the", "tokens": [400, 17330, 390, 19629, 337, 10044, 11, 309, 411, 3869, 1570, 813, 293, 5044, 813, 926, 264], "temperature": 0.0, "avg_logprob": -0.22274655428799717, "compression_ratio": 1.794871794871795, "no_speech_prob": 4.672494833357632e-05}, {"id": 86, "seek": 30884, "start": 315.35999999999996, "end": 316.35999999999996, "text": " slash sign.", "tokens": [17330, 1465, 13], "temperature": 0.0, "avg_logprob": -0.22274655428799717, "compression_ratio": 1.794871794871795, "no_speech_prob": 4.672494833357632e-05}, {"id": 87, "seek": 30884, "start": 316.35999999999996, "end": 319.71999999999997, "text": " And now you have an operator that kind of looks like a slash.", "tokens": [400, 586, 291, 362, 364, 12973, 300, 733, 295, 1542, 411, 257, 17330, 13], "temperature": 0.0, "avg_logprob": -0.22274655428799717, "compression_ratio": 1.794871794871795, "no_speech_prob": 4.672494833357632e-05}, {"id": 88, "seek": 30884, "start": 319.71999999999997, "end": 325.15999999999997, "text": " And then you could like create a parser type and define some small functions that you could", "tokens": [400, 550, 291, 727, 411, 1884, 257, 21156, 260, 2010, 293, 6964, 512, 1359, 6828, 300, 291, 727], "temperature": 0.0, "avg_logprob": -0.22274655428799717, "compression_ratio": 1.794871794871795, "no_speech_prob": 4.672494833357632e-05}, {"id": 89, "seek": 30884, "start": 325.15999999999997, "end": 326.55999999999995, "text": " use with this slash.", "tokens": [764, 365, 341, 17330, 13], "temperature": 0.0, "avg_logprob": -0.22274655428799717, "compression_ratio": 1.794871794871795, "no_speech_prob": 4.672494833357632e-05}, {"id": 90, "seek": 30884, "start": 326.55999999999995, "end": 332.91999999999996, "text": " And then you can like kind of take a URL, paste it in your Elm code, tweak it a little", "tokens": [400, 550, 291, 393, 411, 733, 295, 747, 257, 12905, 11, 9163, 309, 294, 428, 2699, 76, 3089, 11, 29879, 309, 257, 707], "temperature": 0.0, "avg_logprob": -0.22274655428799717, "compression_ratio": 1.794871794871795, "no_speech_prob": 4.672494833357632e-05}, {"id": 91, "seek": 30884, "start": 332.91999999999996, "end": 336.08, "text": " bit and then you have like a working parser for that URL.", "tokens": [857, 293, 550, 291, 362, 411, 257, 1364, 21156, 260, 337, 300, 12905, 13], "temperature": 0.0, "avg_logprob": -0.22274655428799717, "compression_ratio": 1.794871794871795, "no_speech_prob": 4.672494833357632e-05}, {"id": 92, "seek": 33608, "start": 336.08, "end": 339.52, "text": " And that is a really cool idea in my opinion.", "tokens": [400, 300, 307, 257, 534, 1627, 1558, 294, 452, 4800, 13], "temperature": 0.0, "avg_logprob": -0.24048335735614484, "compression_ratio": 1.6111111111111112, "no_speech_prob": 2.694904469535686e-05}, {"id": 93, "seek": 33608, "start": 339.52, "end": 345.96, "text": " But now we have talked about like, let's think about if we could do it.", "tokens": [583, 586, 321, 362, 2825, 466, 411, 11, 718, 311, 519, 466, 498, 321, 727, 360, 309, 13], "temperature": 0.0, "avg_logprob": -0.24048335735614484, "compression_ratio": 1.6111111111111112, "no_speech_prob": 2.694904469535686e-05}, {"id": 94, "seek": 33608, "start": 345.96, "end": 347.76, "text": " But should we do it?", "tokens": [583, 820, 321, 360, 309, 30], "temperature": 0.0, "avg_logprob": -0.24048335735614484, "compression_ratio": 1.6111111111111112, "no_speech_prob": 2.694904469535686e-05}, {"id": 95, "seek": 33608, "start": 347.76, "end": 348.76, "text": " Right.", "tokens": [1779, 13], "temperature": 0.0, "avg_logprob": -0.24048335735614484, "compression_ratio": 1.6111111111111112, "no_speech_prob": 2.694904469535686e-05}, {"id": 96, "seek": 33608, "start": 348.76, "end": 354.2, "text": " And in my opinion, like you could have written a blog post, how you came up with this, how", "tokens": [400, 294, 452, 4800, 11, 411, 291, 727, 362, 3720, 257, 6968, 2183, 11, 577, 291, 1361, 493, 365, 341, 11, 577], "temperature": 0.0, "avg_logprob": -0.24048335735614484, "compression_ratio": 1.6111111111111112, "no_speech_prob": 2.694904469535686e-05}, {"id": 97, "seek": 33608, "start": 354.2, "end": 360.47999999999996, "text": " you implemented it, what you learned, and then also pros and cons of the approach.", "tokens": [291, 12270, 309, 11, 437, 291, 3264, 11, 293, 550, 611, 6267, 293, 1014, 295, 264, 3109, 13], "temperature": 0.0, "avg_logprob": -0.24048335735614484, "compression_ratio": 1.6111111111111112, "no_speech_prob": 2.694904469535686e-05}, {"id": 98, "seek": 36048, "start": 360.48, "end": 367.28000000000003, "text": " And the pros is maybe that perhaps you could take a URL and turn it into code quite easily.", "tokens": [400, 264, 6267, 307, 1310, 300, 4317, 291, 727, 747, 257, 12905, 293, 1261, 309, 666, 3089, 1596, 3612, 13], "temperature": 0.0, "avg_logprob": -0.2549490677682977, "compression_ratio": 1.4934497816593886, "no_speech_prob": 2.5736235329532064e-05}, {"id": 99, "seek": 36048, "start": 367.28000000000003, "end": 373.04, "text": " But the cons in my opinion is that there is quite a lot of type trickery involved to make", "tokens": [583, 264, 1014, 294, 452, 4800, 307, 300, 456, 307, 1596, 257, 688, 295, 2010, 4282, 2109, 3288, 281, 652], "temperature": 0.0, "avg_logprob": -0.2549490677682977, "compression_ratio": 1.4934497816593886, "no_speech_prob": 2.5736235329532064e-05}, {"id": 100, "seek": 36048, "start": 373.04, "end": 374.24, "text": " this work.", "tokens": [341, 589, 13], "temperature": 0.0, "avg_logprob": -0.2549490677682977, "compression_ratio": 1.4934497816593886, "no_speech_prob": 2.5736235329532064e-05}, {"id": 101, "seek": 36048, "start": 374.24, "end": 380.96000000000004, "text": " That is fairly non obvious to work with, at least as a beginner, I think.", "tokens": [663, 307, 6457, 2107, 6322, 281, 589, 365, 11, 412, 1935, 382, 257, 22080, 11, 286, 519, 13], "temperature": 0.0, "avg_logprob": -0.2549490677682977, "compression_ratio": 1.4934497816593886, "no_speech_prob": 2.5736235329532064e-05}, {"id": 102, "seek": 36048, "start": 380.96000000000004, "end": 382.44, "text": " And also for me.", "tokens": [400, 611, 337, 385, 13], "temperature": 0.0, "avg_logprob": -0.2549490677682977, "compression_ratio": 1.4934497816593886, "no_speech_prob": 2.5736235329532064e-05}, {"id": 103, "seek": 36048, "start": 382.44, "end": 387.24, "text": " Yeah, so you're mostly talking about parsing a URL, right?", "tokens": [865, 11, 370, 291, 434, 5240, 1417, 466, 21156, 278, 257, 12905, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.2549490677682977, "compression_ratio": 1.4934497816593886, "no_speech_prob": 2.5736235329532064e-05}, {"id": 104, "seek": 38724, "start": 387.24, "end": 395.0, "text": " So you have a string and you give it a specification, three parser type, and then you run it and", "tokens": [407, 291, 362, 257, 6798, 293, 291, 976, 309, 257, 31256, 11, 1045, 21156, 260, 2010, 11, 293, 550, 291, 1190, 309, 293], "temperature": 0.0, "avg_logprob": -0.3149764128405638, "compression_ratio": 1.7511737089201878, "no_speech_prob": 3.0268606678873766e-06}, {"id": 105, "seek": 38724, "start": 395.0, "end": 398.28000000000003, "text": " the types that are involved in that are very complex.", "tokens": [264, 3467, 300, 366, 3288, 294, 300, 366, 588, 3997, 13], "temperature": 0.0, "avg_logprob": -0.3149764128405638, "compression_ratio": 1.7511737089201878, "no_speech_prob": 3.0268606678873766e-06}, {"id": 106, "seek": 38724, "start": 398.28000000000003, "end": 403.0, "text": " Yeah, there is a parser type in the package.", "tokens": [865, 11, 456, 307, 257, 21156, 260, 2010, 294, 264, 7372, 13], "temperature": 0.0, "avg_logprob": -0.3149764128405638, "compression_ratio": 1.7511737089201878, "no_speech_prob": 3.0268606678873766e-06}, {"id": 107, "seek": 38724, "start": 403.0, "end": 409.72, "text": " And it takes a, or it makes sense if it takes a type variable, because if you're parsing", "tokens": [400, 309, 2516, 257, 11, 420, 309, 1669, 2020, 498, 309, 2516, 257, 2010, 7006, 11, 570, 498, 291, 434, 21156, 278], "temperature": 0.0, "avg_logprob": -0.3149764128405638, "compression_ratio": 1.7511737089201878, "no_speech_prob": 3.0268606678873766e-06}, {"id": 108, "seek": 38724, "start": 409.72, "end": 415.92, "text": " something, you want to decide like what type should it parse to, what type have I chosen", "tokens": [746, 11, 291, 528, 281, 4536, 411, 437, 2010, 820, 309, 48377, 281, 11, 437, 2010, 362, 286, 8614], "temperature": 0.0, "avg_logprob": -0.3149764128405638, "compression_ratio": 1.7511737089201878, "no_speech_prob": 3.0268606678873766e-06}, {"id": 109, "seek": 41592, "start": 415.92, "end": 419.96000000000004, "text": " to represent all my routes in an app with.", "tokens": [281, 2906, 439, 452, 18242, 294, 364, 724, 365, 13], "temperature": 0.0, "avg_logprob": -0.2582883636156718, "compression_ratio": 1.5211267605633803, "no_speech_prob": 4.135781273362227e-05}, {"id": 110, "seek": 41592, "start": 419.96000000000004, "end": 425.2, "text": " But if you look at the actual parser type, it doesn't take just one type variable, it", "tokens": [583, 498, 291, 574, 412, 264, 3539, 21156, 260, 2010, 11, 309, 1177, 380, 747, 445, 472, 2010, 7006, 11, 309], "temperature": 0.0, "avg_logprob": -0.2582883636156718, "compression_ratio": 1.5211267605633803, "no_speech_prob": 4.135781273362227e-05}, {"id": 111, "seek": 41592, "start": 425.2, "end": 427.36, "text": " takes two of them.", "tokens": [2516, 732, 295, 552, 13], "temperature": 0.0, "avg_logprob": -0.2582883636156718, "compression_ratio": 1.5211267605633803, "no_speech_prob": 4.135781273362227e-05}, {"id": 112, "seek": 41592, "start": 427.36, "end": 434.52000000000004, "text": " And every time I try to write a type annotation for a URL parser, I can start out quite easily.", "tokens": [400, 633, 565, 286, 853, 281, 2464, 257, 2010, 48654, 337, 257, 12905, 21156, 260, 11, 286, 393, 722, 484, 1596, 3612, 13], "temperature": 0.0, "avg_logprob": -0.2582883636156718, "compression_ratio": 1.5211267605633803, "no_speech_prob": 4.135781273362227e-05}, {"id": 113, "seek": 41592, "start": 434.52000000000004, "end": 439.28000000000003, "text": " I type like URL dot parser space, and then I'm stuck.", "tokens": [286, 2010, 411, 12905, 5893, 21156, 260, 1901, 11, 293, 550, 286, 478, 5541, 13], "temperature": 0.0, "avg_logprob": -0.2582883636156718, "compression_ratio": 1.5211267605633803, "no_speech_prob": 4.135781273362227e-05}, {"id": 114, "seek": 41592, "start": 439.28000000000003, "end": 441.76, "text": " And I can't figure it out.", "tokens": [400, 286, 393, 380, 2573, 309, 484, 13], "temperature": 0.0, "avg_logprob": -0.2582883636156718, "compression_ratio": 1.5211267605633803, "no_speech_prob": 4.135781273362227e-05}, {"id": 115, "seek": 44176, "start": 441.76, "end": 447.68, "text": " So I just erase all of that, and then I use my editor action instead, infer type, and", "tokens": [407, 286, 445, 23525, 439, 295, 300, 11, 293, 550, 286, 764, 452, 9839, 3069, 2602, 11, 13596, 2010, 11, 293], "temperature": 0.0, "avg_logprob": -0.2423610037023371, "compression_ratio": 1.6538461538461537, "no_speech_prob": 3.0212813726393506e-05}, {"id": 116, "seek": 44176, "start": 447.68, "end": 449.2, "text": " it puts it in for me.", "tokens": [309, 8137, 309, 294, 337, 385, 13], "temperature": 0.0, "avg_logprob": -0.2423610037023371, "compression_ratio": 1.6538461538461537, "no_speech_prob": 3.0212813726393506e-05}, {"id": 117, "seek": 44176, "start": 449.2, "end": 456.44, "text": " And the first type variable is a function that like takes my type and returns an A.", "tokens": [400, 264, 700, 2010, 7006, 307, 257, 2445, 300, 411, 2516, 452, 2010, 293, 11247, 364, 316, 13], "temperature": 0.0, "avg_logprob": -0.2423610037023371, "compression_ratio": 1.6538461538461537, "no_speech_prob": 3.0212813726393506e-05}, {"id": 118, "seek": 44176, "start": 456.44, "end": 461.8, "text": " And the second one is also an A. And I have no clue what the function is doing there and", "tokens": [400, 264, 1150, 472, 307, 611, 364, 316, 13, 400, 286, 362, 572, 13602, 437, 264, 2445, 307, 884, 456, 293], "temperature": 0.0, "avg_logprob": -0.2423610037023371, "compression_ratio": 1.6538461538461537, "no_speech_prob": 3.0212813726393506e-05}, {"id": 119, "seek": 44176, "start": 461.8, "end": 463.71999999999997, "text": " what the A is.", "tokens": [437, 264, 316, 307, 13], "temperature": 0.0, "avg_logprob": -0.2423610037023371, "compression_ratio": 1.6538461538461537, "no_speech_prob": 3.0212813726393506e-05}, {"id": 120, "seek": 44176, "start": 463.71999999999997, "end": 464.71999999999997, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.2423610037023371, "compression_ratio": 1.6538461538461537, "no_speech_prob": 3.0212813726393506e-05}, {"id": 121, "seek": 46472, "start": 464.72, "end": 472.8, "text": " So having been through this process yourself, can you, in simple language, explain what", "tokens": [407, 1419, 668, 807, 341, 1399, 1803, 11, 393, 291, 11, 294, 2199, 2856, 11, 2903, 437], "temperature": 0.0, "avg_logprob": -0.3038473553127713, "compression_ratio": 1.5272727272727273, "no_speech_prob": 8.315224704347202e-07}, {"id": 122, "seek": 46472, "start": 472.8, "end": 475.40000000000003, "text": " that extra type variable actually means?", "tokens": [300, 2857, 2010, 7006, 767, 1355, 30], "temperature": 0.0, "avg_logprob": -0.3038473553127713, "compression_ratio": 1.5272727272727273, "no_speech_prob": 8.315224704347202e-07}, {"id": 123, "seek": 46472, "start": 475.40000000000003, "end": 478.68, "text": " Because I still find it extremely confusing.", "tokens": [1436, 286, 920, 915, 309, 4664, 13181, 13], "temperature": 0.0, "avg_logprob": -0.3038473553127713, "compression_ratio": 1.5272727272727273, "no_speech_prob": 8.315224704347202e-07}, {"id": 124, "seek": 46472, "start": 478.68, "end": 479.68, "text": " No.", "tokens": [883, 13], "temperature": 0.0, "avg_logprob": -0.3038473553127713, "compression_ratio": 1.5272727272727273, "no_speech_prob": 8.315224704347202e-07}, {"id": 125, "seek": 46472, "start": 479.68, "end": 485.52000000000004, "text": " I read the blog post about it, but I just don't remember.", "tokens": [286, 1401, 264, 6968, 2183, 466, 309, 11, 457, 286, 445, 500, 380, 1604, 13], "temperature": 0.0, "avg_logprob": -0.3038473553127713, "compression_ratio": 1.5272727272727273, "no_speech_prob": 8.315224704347202e-07}, {"id": 126, "seek": 46472, "start": 485.52000000000004, "end": 487.44000000000005, "text": " It's just gone.", "tokens": [467, 311, 445, 2780, 13], "temperature": 0.0, "avg_logprob": -0.3038473553127713, "compression_ratio": 1.5272727272727273, "no_speech_prob": 8.315224704347202e-07}, {"id": 127, "seek": 46472, "start": 487.44000000000005, "end": 492.90000000000003, "text": " We will then link to the blog post and we can all get out of having to put that into", "tokens": [492, 486, 550, 2113, 281, 264, 6968, 2183, 293, 321, 393, 439, 483, 484, 295, 1419, 281, 829, 300, 666], "temperature": 0.0, "avg_logprob": -0.3038473553127713, "compression_ratio": 1.5272727272727273, "no_speech_prob": 8.315224704347202e-07}, {"id": 128, "seek": 49290, "start": 492.9, "end": 494.96, "text": " simple words.", "tokens": [2199, 2283, 13], "temperature": 0.0, "avg_logprob": -0.2733862355070294, "compression_ratio": 1.8066037735849056, "no_speech_prob": 3.446530399742187e-06}, {"id": 129, "seek": 49290, "start": 494.96, "end": 496.64, "text": " Is it kind of like monads?", "tokens": [1119, 309, 733, 295, 411, 1108, 5834, 30], "temperature": 0.0, "avg_logprob": -0.2733862355070294, "compression_ratio": 1.8066037735849056, "no_speech_prob": 3.446530399742187e-06}, {"id": 130, "seek": 49290, "start": 496.64, "end": 502.03999999999996, "text": " Whenever you read about them and you understand, then you can't explain it again.", "tokens": [14159, 291, 1401, 466, 552, 293, 291, 1223, 11, 550, 291, 393, 380, 2903, 309, 797, 13], "temperature": 0.0, "avg_logprob": -0.2733862355070294, "compression_ratio": 1.8066037735849056, "no_speech_prob": 3.446530399742187e-06}, {"id": 131, "seek": 49290, "start": 502.03999999999996, "end": 506.4, "text": " In this case, you read it, you don't understand it, and you still can't explain it.", "tokens": [682, 341, 1389, 11, 291, 1401, 309, 11, 291, 500, 380, 1223, 309, 11, 293, 291, 920, 393, 380, 2903, 309, 13], "temperature": 0.0, "avg_logprob": -0.2733862355070294, "compression_ratio": 1.8066037735849056, "no_speech_prob": 3.446530399742187e-06}, {"id": 132, "seek": 49290, "start": 506.4, "end": 511.67999999999995, "text": " And then you design a whole package so that you don't have to deal with that anymore.", "tokens": [400, 550, 291, 1715, 257, 1379, 7372, 370, 300, 291, 500, 380, 362, 281, 2028, 365, 300, 3602, 13], "temperature": 0.0, "avg_logprob": -0.2733862355070294, "compression_ratio": 1.8066037735849056, "no_speech_prob": 3.446530399742187e-06}, {"id": 133, "seek": 49290, "start": 511.67999999999995, "end": 515.4399999999999, "text": " And then you're invited on a podcast and asked to explain it.", "tokens": [400, 550, 291, 434, 9185, 322, 257, 7367, 293, 2351, 281, 2903, 309, 13], "temperature": 0.0, "avg_logprob": -0.2733862355070294, "compression_ratio": 1.8066037735849056, "no_speech_prob": 3.446530399742187e-06}, {"id": 134, "seek": 49290, "start": 515.4399999999999, "end": 517.4399999999999, "text": " And then your name is Simon.", "tokens": [400, 550, 428, 1315, 307, 13193, 13], "temperature": 0.0, "avg_logprob": -0.2733862355070294, "compression_ratio": 1.8066037735849056, "no_speech_prob": 3.446530399742187e-06}, {"id": 135, "seek": 51744, "start": 517.44, "end": 524.0, "text": " Whoa, that's very specific.", "tokens": [7521, 11, 300, 311, 588, 2685, 13], "temperature": 0.0, "avg_logprob": -0.3187820846970017, "compression_ratio": 1.4918032786885247, "no_speech_prob": 1.0782325261970982e-05}, {"id": 136, "seek": 51744, "start": 524.0, "end": 527.6800000000001, "text": " Classic scenario.", "tokens": [25008, 9005, 13], "temperature": 0.0, "avg_logprob": -0.3187820846970017, "compression_ratio": 1.4918032786885247, "no_speech_prob": 1.0782325261970982e-05}, {"id": 137, "seek": 51744, "start": 527.6800000000001, "end": 534.0400000000001, "text": " So you designed a Jurassic Park version that's the well there it is version of the Jurassic", "tokens": [407, 291, 4761, 257, 44730, 4964, 3037, 300, 311, 264, 731, 456, 309, 307, 3037, 295, 264, 44730], "temperature": 0.0, "avg_logprob": -0.3187820846970017, "compression_ratio": 1.4918032786885247, "no_speech_prob": 1.0782325261970982e-05}, {"id": 138, "seek": 51744, "start": 534.0400000000001, "end": 535.44, "text": " Park takeaway.", "tokens": [4964, 30681, 13], "temperature": 0.0, "avg_logprob": -0.3187820846970017, "compression_ratio": 1.4918032786885247, "no_speech_prob": 1.0782325261970982e-05}, {"id": 139, "seek": 51744, "start": 535.44, "end": 538.2800000000001, "text": " And so what were the...", "tokens": [400, 370, 437, 645, 264, 485], "temperature": 0.0, "avg_logprob": -0.3187820846970017, "compression_ratio": 1.4918032786885247, "no_speech_prob": 1.0782325261970982e-05}, {"id": 140, "seek": 51744, "start": 538.2800000000001, "end": 540.0, "text": " You talked about the pros and cons.", "tokens": [509, 2825, 466, 264, 6267, 293, 1014, 13], "temperature": 0.0, "avg_logprob": -0.3187820846970017, "compression_ratio": 1.4918032786885247, "no_speech_prob": 1.0782325261970982e-05}, {"id": 141, "seek": 51744, "start": 540.0, "end": 545.32, "text": " So the cons are you have this challenging type to deal with.", "tokens": [407, 264, 1014, 366, 291, 362, 341, 7595, 2010, 281, 2028, 365, 13], "temperature": 0.0, "avg_logprob": -0.3187820846970017, "compression_ratio": 1.4918032786885247, "no_speech_prob": 1.0782325261970982e-05}, {"id": 142, "seek": 54532, "start": 545.32, "end": 551.4000000000001, "text": " The pro is it kind of looks like a URL, but it's not necessarily...", "tokens": [440, 447, 307, 309, 733, 295, 1542, 411, 257, 12905, 11, 457, 309, 311, 406, 4725, 485], "temperature": 0.0, "avg_logprob": -0.2581308730924972, "compression_ratio": 1.611353711790393, "no_speech_prob": 9.721399010231835e-07}, {"id": 143, "seek": 54532, "start": 551.4000000000001, "end": 555.48, "text": " See that's an interesting question is, does that make it easier to understand what it's", "tokens": [3008, 300, 311, 364, 1880, 1168, 307, 11, 775, 300, 652, 309, 3571, 281, 1223, 437, 309, 311], "temperature": 0.0, "avg_logprob": -0.2581308730924972, "compression_ratio": 1.611353711790393, "no_speech_prob": 9.721399010231835e-07}, {"id": 144, "seek": 54532, "start": 555.48, "end": 558.2, "text": " doing because it looks like a URL?", "tokens": [884, 570, 309, 1542, 411, 257, 12905, 30], "temperature": 0.0, "avg_logprob": -0.2581308730924972, "compression_ratio": 1.611353711790393, "no_speech_prob": 9.721399010231835e-07}, {"id": 145, "seek": 54532, "start": 558.2, "end": 564.8000000000001, "text": " And I would say, if you step back and look at Elm's history a little bit, in the earlier", "tokens": [400, 286, 576, 584, 11, 498, 291, 1823, 646, 293, 574, 412, 2699, 76, 311, 2503, 257, 707, 857, 11, 294, 264, 3071], "temperature": 0.0, "avg_logprob": -0.2581308730924972, "compression_ratio": 1.611353711790393, "no_speech_prob": 9.721399010231835e-07}, {"id": 146, "seek": 54532, "start": 564.8000000000001, "end": 573.34, "text": " days, there was, I think there were more roots in kind of Haskell design and a little bit", "tokens": [1708, 11, 456, 390, 11, 286, 519, 456, 645, 544, 10669, 294, 733, 295, 8646, 43723, 1715, 293, 257, 707, 857], "temperature": 0.0, "avg_logprob": -0.2581308730924972, "compression_ratio": 1.611353711790393, "no_speech_prob": 9.721399010231835e-07}, {"id": 147, "seek": 57334, "start": 573.34, "end": 576.1600000000001, "text": " like in the ecosystem of Ruby design.", "tokens": [411, 294, 264, 11311, 295, 19907, 1715, 13], "temperature": 0.0, "avg_logprob": -0.22362132738995297, "compression_ratio": 1.635135135135135, "no_speech_prob": 6.681443665002007e-07}, {"id": 148, "seek": 57334, "start": 576.1600000000001, "end": 585.3000000000001, "text": " Like Richard Feldman's Elm CSS early on was trying to use a syntax where you design these", "tokens": [1743, 9809, 42677, 1601, 311, 2699, 76, 24387, 2440, 322, 390, 1382, 281, 764, 257, 28431, 689, 291, 1715, 613], "temperature": 0.0, "avg_logprob": -0.22362132738995297, "compression_ratio": 1.635135135135135, "no_speech_prob": 6.681443665002007e-07}, {"id": 149, "seek": 57334, "start": 585.3000000000001, "end": 588.74, "text": " style sheets that looked like CSS syntax.", "tokens": [3758, 15421, 300, 2956, 411, 24387, 28431, 13], "temperature": 0.0, "avg_logprob": -0.22362132738995297, "compression_ratio": 1.635135135135135, "no_speech_prob": 6.681443665002007e-07}, {"id": 150, "seek": 57334, "start": 588.74, "end": 593.62, "text": " So you could have a custom operator for hashes and a custom operator for dots.", "tokens": [407, 291, 727, 362, 257, 2375, 12973, 337, 575, 8076, 293, 257, 2375, 12973, 337, 15026, 13], "temperature": 0.0, "avg_logprob": -0.22362132738995297, "compression_ratio": 1.635135135135135, "no_speech_prob": 6.681443665002007e-07}, {"id": 151, "seek": 57334, "start": 593.62, "end": 597.46, "text": " And there were like a few things that didn't quite work out neatly.", "tokens": [400, 456, 645, 411, 257, 1326, 721, 300, 994, 380, 1596, 589, 484, 36634, 13], "temperature": 0.0, "avg_logprob": -0.22362132738995297, "compression_ratio": 1.635135135135135, "no_speech_prob": 6.681443665002007e-07}, {"id": 152, "seek": 57334, "start": 597.46, "end": 601.1600000000001, "text": " So you had to use some special trick for that.", "tokens": [407, 291, 632, 281, 764, 512, 2121, 4282, 337, 300, 13], "temperature": 0.0, "avg_logprob": -0.22362132738995297, "compression_ratio": 1.635135135135135, "no_speech_prob": 6.681443665002007e-07}, {"id": 153, "seek": 60116, "start": 601.16, "end": 604.6999999999999, "text": " And then eventually he just got rid of all of them and he said, this actually, like,", "tokens": [400, 550, 4728, 415, 445, 658, 3973, 295, 439, 295, 552, 293, 415, 848, 11, 341, 767, 11, 411, 11], "temperature": 0.0, "avg_logprob": -0.2200515315217792, "compression_ratio": 1.6525096525096525, "no_speech_prob": 4.965237394571886e-07}, {"id": 154, "seek": 60116, "start": 604.6999999999999, "end": 609.2199999999999, "text": " yes, it makes it kind of look like CSS syntax, which is kind of cool.", "tokens": [2086, 11, 309, 1669, 309, 733, 295, 574, 411, 24387, 28431, 11, 597, 307, 733, 295, 1627, 13], "temperature": 0.0, "avg_logprob": -0.2200515315217792, "compression_ratio": 1.6525096525096525, "no_speech_prob": 4.965237394571886e-07}, {"id": 155, "seek": 60116, "start": 609.2199999999999, "end": 614.66, "text": " And in the Ruby community, people really liked making DSLs that looked like the thing they're", "tokens": [400, 294, 264, 19907, 1768, 11, 561, 534, 4501, 1455, 15816, 43, 82, 300, 2956, 411, 264, 551, 436, 434], "temperature": 0.0, "avg_logprob": -0.2200515315217792, "compression_ratio": 1.6525096525096525, "no_speech_prob": 4.965237394571886e-07}, {"id": 156, "seek": 60116, "start": 614.66, "end": 616.06, "text": " supposed to be.", "tokens": [3442, 281, 312, 13], "temperature": 0.0, "avg_logprob": -0.2200515315217792, "compression_ratio": 1.6525096525096525, "no_speech_prob": 4.965237394571886e-07}, {"id": 157, "seek": 60116, "start": 616.06, "end": 622.66, "text": " But then he moved to a more straightforward design that focused on making it really easy", "tokens": [583, 550, 415, 4259, 281, 257, 544, 15325, 1715, 300, 5178, 322, 1455, 309, 534, 1858], "temperature": 0.0, "avg_logprob": -0.2200515315217792, "compression_ratio": 1.6525096525096525, "no_speech_prob": 4.965237394571886e-07}, {"id": 158, "seek": 60116, "start": 622.66, "end": 626.5, "text": " to understand how the pieces fit together and making it more maintainable.", "tokens": [281, 1223, 577, 264, 3755, 3318, 1214, 293, 1455, 309, 544, 6909, 712, 13], "temperature": 0.0, "avg_logprob": -0.2200515315217792, "compression_ratio": 1.6525096525096525, "no_speech_prob": 4.965237394571886e-07}, {"id": 159, "seek": 62650, "start": 626.5, "end": 633.1, "text": " And I think like a lot of the Elm design instincts have moved in that direction too.", "tokens": [400, 286, 519, 411, 257, 688, 295, 264, 2699, 76, 1715, 38997, 362, 4259, 294, 300, 3513, 886, 13], "temperature": 0.0, "avg_logprob": -0.2306935840182834, "compression_ratio": 1.4790697674418605, "no_speech_prob": 1.9637716377474135e-06}, {"id": 160, "seek": 62650, "start": 633.1, "end": 638.88, "text": " And to me, your design for Elm app URL feels like that as well.", "tokens": [400, 281, 385, 11, 428, 1715, 337, 2699, 76, 724, 12905, 3417, 411, 300, 382, 731, 13], "temperature": 0.0, "avg_logprob": -0.2306935840182834, "compression_ratio": 1.4790697674418605, "no_speech_prob": 1.9637716377474135e-06}, {"id": 161, "seek": 62650, "start": 638.88, "end": 642.78, "text": " So should we explain how parsing was done before?", "tokens": [407, 820, 321, 2903, 577, 21156, 278, 390, 1096, 949, 30], "temperature": 0.0, "avg_logprob": -0.2306935840182834, "compression_ratio": 1.4790697674418605, "no_speech_prob": 1.9637716377474135e-06}, {"id": 162, "seek": 62650, "start": 642.78, "end": 647.46, "text": " Like how did the code look and how it's done in your solution?", "tokens": [1743, 577, 630, 264, 3089, 574, 293, 577, 309, 311, 1096, 294, 428, 3827, 30], "temperature": 0.0, "avg_logprob": -0.2306935840182834, "compression_ratio": 1.4790697674418605, "no_speech_prob": 1.9637716377474135e-06}, {"id": 163, "seek": 62650, "start": 647.46, "end": 648.46, "text": " Sure.", "tokens": [4894, 13], "temperature": 0.0, "avg_logprob": -0.2306935840182834, "compression_ratio": 1.4790697674418605, "no_speech_prob": 1.9637716377474135e-06}, {"id": 164, "seek": 62650, "start": 648.46, "end": 652.58, "text": " So we need some kind of example URL to talk about.", "tokens": [407, 321, 643, 512, 733, 295, 1365, 12905, 281, 751, 466, 13], "temperature": 0.0, "avg_logprob": -0.2306935840182834, "compression_ratio": 1.4790697674418605, "no_speech_prob": 1.9637716377474135e-06}, {"id": 165, "seek": 65258, "start": 652.58, "end": 661.86, "text": " And maybe we can do like slash product slash, and then like a product ID or a product slug.", "tokens": [400, 1310, 321, 393, 360, 411, 17330, 1674, 17330, 11, 293, 550, 411, 257, 1674, 7348, 420, 257, 1674, 1061, 697, 13], "temperature": 0.0, "avg_logprob": -0.3234525408063616, "compression_ratio": 1.676923076923077, "no_speech_prob": 5.4214369811234064e-06}, {"id": 166, "seek": 65258, "start": 661.86, "end": 664.22, "text": " We can go with a product slug.", "tokens": [492, 393, 352, 365, 257, 1674, 1061, 697, 13], "temperature": 0.0, "avg_logprob": -0.3234525408063616, "compression_ratio": 1.676923076923077, "no_speech_prob": 5.4214369811234064e-06}, {"id": 167, "seek": 65258, "start": 664.22, "end": 669.34, "text": " So we have a hard coded part, which is always product and then slash and then a dynamic", "tokens": [407, 321, 362, 257, 1152, 34874, 644, 11, 597, 307, 1009, 1674, 293, 550, 17330, 293, 550, 257, 8546], "temperature": 0.0, "avg_logprob": -0.3234525408063616, "compression_ratio": 1.676923076923077, "no_speech_prob": 5.4214369811234064e-06}, {"id": 168, "seek": 65258, "start": 669.34, "end": 670.34, "text": " part.", "tokens": [644, 13], "temperature": 0.0, "avg_logprob": -0.3234525408063616, "compression_ratio": 1.676923076923077, "no_speech_prob": 5.4214369811234064e-06}, {"id": 169, "seek": 65258, "start": 670.34, "end": 678.22, "text": " And then the official package, you would, you would use this function called just S.", "tokens": [400, 550, 264, 4783, 7372, 11, 291, 576, 11, 291, 576, 764, 341, 2445, 1219, 445, 318, 13], "temperature": 0.0, "avg_logprob": -0.3234525408063616, "compression_ratio": 1.676923076923077, "no_speech_prob": 5.4214369811234064e-06}, {"id": 170, "seek": 65258, "start": 678.22, "end": 679.22, "text": " I think it's for segment.", "tokens": [286, 519, 309, 311, 337, 9469, 13], "temperature": 0.0, "avg_logprob": -0.3234525408063616, "compression_ratio": 1.676923076923077, "no_speech_prob": 5.4214369811234064e-06}, {"id": 171, "seek": 67922, "start": 679.22, "end": 683.1800000000001, "text": " Oh, I thought it was for string, segment makes sense.", "tokens": [876, 11, 286, 1194, 309, 390, 337, 6798, 11, 9469, 1669, 2020, 13], "temperature": 0.0, "avg_logprob": -0.28851547608008754, "compression_ratio": 1.5945945945945945, "no_speech_prob": 3.2354475933971116e-06}, {"id": 172, "seek": 67922, "start": 683.1800000000001, "end": 684.1800000000001, "text": " I think so.", "tokens": [286, 519, 370, 13], "temperature": 0.0, "avg_logprob": -0.28851547608008754, "compression_ratio": 1.5945945945945945, "no_speech_prob": 3.2354475933971116e-06}, {"id": 173, "seek": 67922, "start": 684.1800000000001, "end": 687.58, "text": " At least I think the point is that it's supposed to be short.", "tokens": [1711, 1935, 286, 519, 264, 935, 307, 300, 309, 311, 3442, 281, 312, 2099, 13], "temperature": 0.0, "avg_logprob": -0.28851547608008754, "compression_ratio": 1.5945945945945945, "no_speech_prob": 3.2354475933971116e-06}, {"id": 174, "seek": 67922, "start": 687.58, "end": 688.58, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.28851547608008754, "compression_ratio": 1.5945945945945945, "no_speech_prob": 3.2354475933971116e-06}, {"id": 175, "seek": 67922, "start": 688.58, "end": 693.7, "text": " So the code looks more like a URL and less like code.", "tokens": [407, 264, 3089, 1542, 544, 411, 257, 12905, 293, 1570, 411, 3089, 13], "temperature": 0.0, "avg_logprob": -0.28851547608008754, "compression_ratio": 1.5945945945945945, "no_speech_prob": 3.2354475933971116e-06}, {"id": 176, "seek": 67922, "start": 693.7, "end": 699.22, "text": " And the segment function, it takes a string and there we would give it a product as a", "tokens": [400, 264, 9469, 2445, 11, 309, 2516, 257, 6798, 293, 456, 321, 576, 976, 309, 257, 1674, 382, 257], "temperature": 0.0, "avg_logprob": -0.28851547608008754, "compression_ratio": 1.5945945945945945, "no_speech_prob": 3.2354475933971116e-06}, {"id": 177, "seek": 67922, "start": 699.22, "end": 700.22, "text": " string.", "tokens": [6798, 13], "temperature": 0.0, "avg_logprob": -0.28851547608008754, "compression_ratio": 1.5945945945945945, "no_speech_prob": 3.2354475933971116e-06}, {"id": 178, "seek": 67922, "start": 700.22, "end": 705.58, "text": " And that's how you say that I want a hard coded piece, which is product.", "tokens": [400, 300, 311, 577, 291, 584, 300, 286, 528, 257, 1152, 34874, 2522, 11, 597, 307, 1674, 13], "temperature": 0.0, "avg_logprob": -0.28851547608008754, "compression_ratio": 1.5945945945945945, "no_speech_prob": 3.2354475933971116e-06}, {"id": 179, "seek": 70558, "start": 705.58, "end": 711.38, "text": " And then you use this custom slash looking operator to join that with the next piece", "tokens": [400, 550, 291, 764, 341, 2375, 17330, 1237, 12973, 281, 3917, 300, 365, 264, 958, 2522], "temperature": 0.0, "avg_logprob": -0.2688767453457447, "compression_ratio": 1.618421052631579, "no_speech_prob": 4.283066573407268e-06}, {"id": 180, "seek": 70558, "start": 711.38, "end": 714.86, "text": " of the URL, which will be the dynamic part.", "tokens": [295, 264, 12905, 11, 597, 486, 312, 264, 8546, 644, 13], "temperature": 0.0, "avg_logprob": -0.2688767453457447, "compression_ratio": 1.618421052631579, "no_speech_prob": 4.283066573407268e-06}, {"id": 181, "seek": 70558, "start": 714.86, "end": 719.98, "text": " And then there's a function called string, which means that this segment can be any string.", "tokens": [400, 550, 456, 311, 257, 2445, 1219, 6798, 11, 597, 1355, 300, 341, 9469, 393, 312, 604, 6798, 13], "temperature": 0.0, "avg_logprob": -0.2688767453457447, "compression_ratio": 1.618421052631579, "no_speech_prob": 4.283066573407268e-06}, {"id": 182, "seek": 70558, "start": 719.98, "end": 726.46, "text": " And then finally, you usually pipe all of that to URL or parser dot map to turn that", "tokens": [400, 550, 2721, 11, 291, 2673, 11240, 439, 295, 300, 281, 12905, 420, 21156, 260, 5893, 4471, 281, 1261, 300], "temperature": 0.0, "avg_logprob": -0.2688767453457447, "compression_ratio": 1.618421052631579, "no_speech_prob": 4.283066573407268e-06}, {"id": 183, "seek": 70558, "start": 726.46, "end": 729.6600000000001, "text": " into like a custom type variant.", "tokens": [666, 411, 257, 2375, 2010, 17501, 13], "temperature": 0.0, "avg_logprob": -0.2688767453457447, "compression_ratio": 1.618421052631579, "no_speech_prob": 4.283066573407268e-06}, {"id": 184, "seek": 70558, "start": 729.6600000000001, "end": 732.82, "text": " I guess the most common thing.", "tokens": [286, 2041, 264, 881, 2689, 551, 13], "temperature": 0.0, "avg_logprob": -0.2688767453457447, "compression_ratio": 1.618421052631579, "no_speech_prob": 4.283066573407268e-06}, {"id": 185, "seek": 73282, "start": 732.82, "end": 740.1, "text": " But what I tried to do was to like, I wanted elm app URL to be more of an anti package.", "tokens": [583, 437, 286, 3031, 281, 360, 390, 281, 411, 11, 286, 1415, 806, 76, 724, 12905, 281, 312, 544, 295, 364, 6061, 7372, 13], "temperature": 0.0, "avg_logprob": -0.2696045707253849, "compression_ratio": 1.6571428571428573, "no_speech_prob": 1.0948730050586164e-05}, {"id": 186, "seek": 73282, "start": 740.1, "end": 748.3000000000001, "text": " I want to be a small and as little of a package as possible, just to be a stark contrast to", "tokens": [286, 528, 281, 312, 257, 1359, 293, 382, 707, 295, 257, 7372, 382, 1944, 11, 445, 281, 312, 257, 17417, 8712, 281], "temperature": 0.0, "avg_logprob": -0.2696045707253849, "compression_ratio": 1.6571428571428573, "no_speech_prob": 1.0948730050586164e-05}, {"id": 187, "seek": 73282, "start": 748.3000000000001, "end": 750.5400000000001, "text": " the official package.", "tokens": [264, 4783, 7372, 13], "temperature": 0.0, "avg_logprob": -0.2696045707253849, "compression_ratio": 1.6571428571428573, "no_speech_prob": 1.0948730050586164e-05}, {"id": 188, "seek": 73282, "start": 750.5400000000001, "end": 753.86, "text": " I was thinking like, do we need a parser at all?", "tokens": [286, 390, 1953, 411, 11, 360, 321, 643, 257, 21156, 260, 412, 439, 30], "temperature": 0.0, "avg_logprob": -0.2696045707253849, "compression_ratio": 1.6571428571428573, "no_speech_prob": 1.0948730050586164e-05}, {"id": 189, "seek": 73282, "start": 753.86, "end": 756.62, "text": " Can we can we just do it some simple way?", "tokens": [1664, 321, 393, 321, 445, 360, 309, 512, 2199, 636, 30], "temperature": 0.0, "avg_logprob": -0.2696045707253849, "compression_ratio": 1.6571428571428573, "no_speech_prob": 1.0948730050586164e-05}, {"id": 190, "seek": 73282, "start": 756.62, "end": 759.3800000000001, "text": " And what is the like the simplest way I could think of?", "tokens": [400, 437, 307, 264, 411, 264, 22811, 636, 286, 727, 519, 295, 30], "temperature": 0.0, "avg_logprob": -0.2696045707253849, "compression_ratio": 1.6571428571428573, "no_speech_prob": 1.0948730050586164e-05}, {"id": 191, "seek": 75938, "start": 759.38, "end": 765.1, "text": " Well, we could take the path of a URL and just split by slash and then do pattern matching", "tokens": [1042, 11, 321, 727, 747, 264, 3100, 295, 257, 12905, 293, 445, 7472, 538, 17330, 293, 550, 360, 5102, 14324], "temperature": 0.0, "avg_logprob": -0.2266338166736421, "compression_ratio": 1.6558704453441295, "no_speech_prob": 8.389477443415672e-06}, {"id": 192, "seek": 75938, "start": 765.1, "end": 767.42, "text": " on it with a case of expression.", "tokens": [322, 309, 365, 257, 1389, 295, 6114, 13], "temperature": 0.0, "avg_logprob": -0.2266338166736421, "compression_ratio": 1.6558704453441295, "no_speech_prob": 8.389477443415672e-06}, {"id": 193, "seek": 75938, "start": 767.42, "end": 769.54, "text": " So try that without a package.", "tokens": [407, 853, 300, 1553, 257, 7372, 13], "temperature": 0.0, "avg_logprob": -0.2266338166736421, "compression_ratio": 1.6558704453441295, "no_speech_prob": 8.389477443415672e-06}, {"id": 194, "seek": 75938, "start": 769.54, "end": 775.46, "text": " I just like made a little example and wanted to see what I can do with it.", "tokens": [286, 445, 411, 1027, 257, 707, 1365, 293, 1415, 281, 536, 437, 286, 393, 360, 365, 309, 13], "temperature": 0.0, "avg_logprob": -0.2266338166736421, "compression_ratio": 1.6558704453441295, "no_speech_prob": 8.389477443415672e-06}, {"id": 195, "seek": 75938, "start": 775.46, "end": 782.18, "text": " And the first thing I noticed was that it's kind of annoying to split by slash yourself,", "tokens": [400, 264, 700, 551, 286, 5694, 390, 300, 309, 311, 733, 295, 11304, 281, 7472, 538, 17330, 1803, 11], "temperature": 0.0, "avg_logprob": -0.2266338166736421, "compression_ratio": 1.6558704453441295, "no_speech_prob": 8.389477443415672e-06}, {"id": 196, "seek": 75938, "start": 782.18, "end": 788.14, "text": " because the path always starts with a slash, which means that you get a list with an empty", "tokens": [570, 264, 3100, 1009, 3719, 365, 257, 17330, 11, 597, 1355, 300, 291, 483, 257, 1329, 365, 364, 6707], "temperature": 0.0, "avg_logprob": -0.2266338166736421, "compression_ratio": 1.6558704453441295, "no_speech_prob": 8.389477443415672e-06}, {"id": 197, "seek": 78814, "start": 788.14, "end": 789.46, "text": " string.", "tokens": [6798, 13], "temperature": 0.0, "avg_logprob": -0.21987091192678243, "compression_ratio": 1.7727272727272727, "no_speech_prob": 2.428381412755698e-05}, {"id": 198, "seek": 78814, "start": 789.46, "end": 793.54, "text": " And then the first thing you're actually interested in, which would be the string product in this", "tokens": [400, 550, 264, 700, 551, 291, 434, 767, 3102, 294, 11, 597, 576, 312, 264, 6798, 1674, 294, 341], "temperature": 0.0, "avg_logprob": -0.21987091192678243, "compression_ratio": 1.7727272727272727, "no_speech_prob": 2.428381412755698e-05}, {"id": 199, "seek": 78814, "start": 793.54, "end": 796.74, "text": " case, and then all of the rest of the things.", "tokens": [1389, 11, 293, 550, 439, 295, 264, 1472, 295, 264, 721, 13], "temperature": 0.0, "avg_logprob": -0.21987091192678243, "compression_ratio": 1.7727272727272727, "no_speech_prob": 2.428381412755698e-05}, {"id": 200, "seek": 78814, "start": 796.74, "end": 803.36, "text": " And also, I noticed that the parsers in the official package, they also ignore a trailing", "tokens": [400, 611, 11, 286, 5694, 300, 264, 21156, 433, 294, 264, 4783, 7372, 11, 436, 611, 11200, 257, 944, 4883], "temperature": 0.0, "avg_logprob": -0.21987091192678243, "compression_ratio": 1.7727272727272727, "no_speech_prob": 2.428381412755698e-05}, {"id": 201, "seek": 78814, "start": 803.36, "end": 808.9399999999999, "text": " slash for you, which is kind of common that sometimes you end up with a trailing slash", "tokens": [17330, 337, 291, 11, 597, 307, 733, 295, 2689, 300, 2171, 291, 917, 493, 365, 257, 944, 4883, 17330], "temperature": 0.0, "avg_logprob": -0.21987091192678243, "compression_ratio": 1.7727272727272727, "no_speech_prob": 2.428381412755698e-05}, {"id": 202, "seek": 78814, "start": 808.9399999999999, "end": 812.54, "text": " and maybe your application uses it, maybe it doesn't.", "tokens": [293, 1310, 428, 3861, 4960, 309, 11, 1310, 309, 1177, 380, 13], "temperature": 0.0, "avg_logprob": -0.21987091192678243, "compression_ratio": 1.7727272727272727, "no_speech_prob": 2.428381412755698e-05}, {"id": 203, "seek": 78814, "start": 812.54, "end": 816.46, "text": " And then you have to handle that as well in the pattern match, like add an extra case", "tokens": [400, 550, 291, 362, 281, 4813, 300, 382, 731, 294, 264, 5102, 2995, 11, 411, 909, 364, 2857, 1389], "temperature": 0.0, "avg_logprob": -0.21987091192678243, "compression_ratio": 1.7727272727272727, "no_speech_prob": 2.428381412755698e-05}, {"id": 204, "seek": 81646, "start": 816.46, "end": 818.22, "text": " for an empty string at the end.", "tokens": [337, 364, 6707, 6798, 412, 264, 917, 13], "temperature": 0.0, "avg_logprob": -0.259870838915181, "compression_ratio": 1.6245210727969348, "no_speech_prob": 2.625958586577326e-05}, {"id": 205, "seek": 81646, "start": 818.22, "end": 820.7800000000001, "text": " So that was kind of annoying.", "tokens": [407, 300, 390, 733, 295, 11304, 13], "temperature": 0.0, "avg_logprob": -0.259870838915181, "compression_ratio": 1.6245210727969348, "no_speech_prob": 2.625958586577326e-05}, {"id": 206, "seek": 81646, "start": 820.7800000000001, "end": 826.72, "text": " But then I thought, like, the official package has a URL type, which is just a record with", "tokens": [583, 550, 286, 1194, 11, 411, 11, 264, 4783, 7372, 575, 257, 12905, 2010, 11, 597, 307, 445, 257, 2136, 365], "temperature": 0.0, "avg_logprob": -0.259870838915181, "compression_ratio": 1.6245210727969348, "no_speech_prob": 2.625958586577326e-05}, {"id": 207, "seek": 81646, "start": 826.72, "end": 830.34, "text": " all the pieces of a URL and one of them is called path.", "tokens": [439, 264, 3755, 295, 257, 12905, 293, 472, 295, 552, 307, 1219, 3100, 13], "temperature": 0.0, "avg_logprob": -0.259870838915181, "compression_ratio": 1.6245210727969348, "no_speech_prob": 2.625958586577326e-05}, {"id": 208, "seek": 81646, "start": 830.34, "end": 835.74, "text": " And that is like the slash product slash product slug piece.", "tokens": [400, 300, 307, 411, 264, 17330, 1674, 17330, 1674, 1061, 697, 2522, 13], "temperature": 0.0, "avg_logprob": -0.259870838915181, "compression_ratio": 1.6245210727969348, "no_speech_prob": 2.625958586577326e-05}, {"id": 209, "seek": 81646, "start": 835.74, "end": 838.9000000000001, "text": " I was thinking like, why is that just a string?", "tokens": [286, 390, 1953, 411, 11, 983, 307, 300, 445, 257, 6798, 30], "temperature": 0.0, "avg_logprob": -0.259870838915181, "compression_ratio": 1.6245210727969348, "no_speech_prob": 2.625958586577326e-05}, {"id": 210, "seek": 81646, "start": 838.9000000000001, "end": 843.44, "text": " Couldn't you have parsed that for me into a list of segments already?", "tokens": [35800, 380, 291, 362, 21156, 292, 300, 337, 385, 666, 257, 1329, 295, 19904, 1217, 30], "temperature": 0.0, "avg_logprob": -0.259870838915181, "compression_ratio": 1.6245210727969348, "no_speech_prob": 2.625958586577326e-05}, {"id": 211, "seek": 81646, "start": 843.44, "end": 845.36, "text": " That would have been so much easier.", "tokens": [663, 576, 362, 668, 370, 709, 3571, 13], "temperature": 0.0, "avg_logprob": -0.259870838915181, "compression_ratio": 1.6245210727969348, "no_speech_prob": 2.625958586577326e-05}, {"id": 212, "seek": 84536, "start": 845.36, "end": 851.22, "text": " So I thought like, that would be the first change I would make to this package.", "tokens": [407, 286, 1194, 411, 11, 300, 576, 312, 264, 700, 1319, 286, 576, 652, 281, 341, 7372, 13], "temperature": 0.0, "avg_logprob": -0.22216827113453935, "compression_ratio": 1.5809523809523809, "no_speech_prob": 3.7359761336119846e-05}, {"id": 213, "seek": 84536, "start": 851.22, "end": 855.86, "text": " So then I like create a little helper function in my example that did that.", "tokens": [407, 550, 286, 411, 1884, 257, 707, 36133, 2445, 294, 452, 1365, 300, 630, 300, 13], "temperature": 0.0, "avg_logprob": -0.22216827113453935, "compression_ratio": 1.5809523809523809, "no_speech_prob": 3.7359761336119846e-05}, {"id": 214, "seek": 84536, "start": 855.86, "end": 862.7, "text": " And now my parsing function got really nice because it's just all I'm doing in the function", "tokens": [400, 586, 452, 21156, 278, 2445, 658, 534, 1481, 570, 309, 311, 445, 439, 286, 478, 884, 294, 264, 2445], "temperature": 0.0, "avg_logprob": -0.22216827113453935, "compression_ratio": 1.5809523809523809, "no_speech_prob": 3.7359761336119846e-05}, {"id": 215, "seek": 84536, "start": 862.7, "end": 872.5600000000001, "text": " is case URL dot path of, and then I match different string, different list patterns.", "tokens": [307, 1389, 12905, 5893, 3100, 295, 11, 293, 550, 286, 2995, 819, 6798, 11, 819, 1329, 8294, 13], "temperature": 0.0, "avg_logprob": -0.22216827113453935, "compression_ratio": 1.5809523809523809, "no_speech_prob": 3.7359761336119846e-05}, {"id": 216, "seek": 87256, "start": 872.56, "end": 879.64, "text": " So to take our example, the pattern we're looking for is a list with just two elements.", "tokens": [407, 281, 747, 527, 1365, 11, 264, 5102, 321, 434, 1237, 337, 307, 257, 1329, 365, 445, 732, 4959, 13], "temperature": 0.0, "avg_logprob": -0.20890444800967262, "compression_ratio": 1.6511627906976745, "no_speech_prob": 1.0269197446177714e-05}, {"id": 217, "seek": 87256, "start": 879.64, "end": 882.8199999999999, "text": " The first one is the string product.", "tokens": [440, 700, 472, 307, 264, 6798, 1674, 13], "temperature": 0.0, "avg_logprob": -0.20890444800967262, "compression_ratio": 1.6511627906976745, "no_speech_prob": 1.0269197446177714e-05}, {"id": 218, "seek": 87256, "start": 882.8199999999999, "end": 885.9799999999999, "text": " The second one is any string.", "tokens": [440, 1150, 472, 307, 604, 6798, 13], "temperature": 0.0, "avg_logprob": -0.20890444800967262, "compression_ratio": 1.6511627906976745, "no_speech_prob": 1.0269197446177714e-05}, {"id": 219, "seek": 87256, "start": 885.9799999999999, "end": 889.54, "text": " So you can just type the name of a variable there.", "tokens": [407, 291, 393, 445, 2010, 264, 1315, 295, 257, 7006, 456, 13], "temperature": 0.0, "avg_logprob": -0.20890444800967262, "compression_ratio": 1.6511627906976745, "no_speech_prob": 1.0269197446177714e-05}, {"id": 220, "seek": 87256, "start": 889.54, "end": 896.9, "text": " And in inside the pattern, all you need to do is return just whatever you want.", "tokens": [400, 294, 1854, 264, 5102, 11, 439, 291, 643, 281, 360, 307, 2736, 445, 2035, 291, 528, 13], "temperature": 0.0, "avg_logprob": -0.20890444800967262, "compression_ratio": 1.6511627906976745, "no_speech_prob": 1.0269197446177714e-05}, {"id": 221, "seek": 87256, "start": 896.9, "end": 897.9, "text": " And that's it.", "tokens": [400, 300, 311, 309, 13], "temperature": 0.0, "avg_logprob": -0.20890444800967262, "compression_ratio": 1.6511627906976745, "no_speech_prob": 1.0269197446177714e-05}, {"id": 222, "seek": 87256, "start": 897.9, "end": 899.4599999999999, "text": " That's all there is to it.", "tokens": [663, 311, 439, 456, 307, 281, 309, 13], "temperature": 0.0, "avg_logprob": -0.20890444800967262, "compression_ratio": 1.6511627906976745, "no_speech_prob": 1.0269197446177714e-05}, {"id": 223, "seek": 87256, "start": 899.4599999999999, "end": 901.0999999999999, "text": " That is much simpler.", "tokens": [663, 307, 709, 18587, 13], "temperature": 0.0, "avg_logprob": -0.20890444800967262, "compression_ratio": 1.6511627906976745, "no_speech_prob": 1.0269197446177714e-05}, {"id": 224, "seek": 87256, "start": 901.0999999999999, "end": 902.0999999999999, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.20890444800967262, "compression_ratio": 1.6511627906976745, "no_speech_prob": 1.0269197446177714e-05}, {"id": 225, "seek": 90210, "start": 902.1, "end": 909.0600000000001, "text": " So you need to have a default case for any other routes that you're trying to parse.", "tokens": [407, 291, 643, 281, 362, 257, 7576, 1389, 337, 604, 661, 18242, 300, 291, 434, 1382, 281, 48377, 13], "temperature": 0.0, "avg_logprob": -0.28047800064086914, "compression_ratio": 1.6024590163934427, "no_speech_prob": 1.9483773940009996e-05}, {"id": 226, "seek": 90210, "start": 909.0600000000001, "end": 912.94, "text": " And I'm guessing that would return a 404 custom variant, usually?", "tokens": [400, 286, 478, 17939, 300, 576, 2736, 257, 3356, 19, 2375, 17501, 11, 2673, 30], "temperature": 0.0, "avg_logprob": -0.28047800064086914, "compression_ratio": 1.6024590163934427, "no_speech_prob": 1.9483773940009996e-05}, {"id": 227, "seek": 90210, "start": 912.94, "end": 917.62, "text": " Yeah, I've seen different ways of doing it.", "tokens": [865, 11, 286, 600, 1612, 819, 2098, 295, 884, 309, 13], "temperature": 0.0, "avg_logprob": -0.28047800064086914, "compression_ratio": 1.6024590163934427, "no_speech_prob": 1.9483773940009996e-05}, {"id": 228, "seek": 90210, "start": 917.62, "end": 919.5400000000001, "text": " So that's one way of doing it.", "tokens": [407, 300, 311, 472, 636, 295, 884, 309, 13], "temperature": 0.0, "avg_logprob": -0.28047800064086914, "compression_ratio": 1.6024590163934427, "no_speech_prob": 1.9483773940009996e-05}, {"id": 229, "seek": 90210, "start": 919.5400000000001, "end": 924.82, "text": " If you have a custom type with all your routes, you can just one more alternative, which is", "tokens": [759, 291, 362, 257, 2375, 2010, 365, 439, 428, 18242, 11, 291, 393, 445, 472, 544, 8535, 11, 597, 307], "temperature": 0.0, "avg_logprob": -0.28047800064086914, "compression_ratio": 1.6024590163934427, "no_speech_prob": 1.9483773940009996e-05}, {"id": 230, "seek": 90210, "start": 924.82, "end": 926.6600000000001, "text": " not found or 404.", "tokens": [406, 1352, 420, 3356, 19, 13], "temperature": 0.0, "avg_logprob": -0.28047800064086914, "compression_ratio": 1.6024590163934427, "no_speech_prob": 1.9483773940009996e-05}, {"id": 231, "seek": 90210, "start": 926.6600000000001, "end": 930.5400000000001, "text": " You can also choose to return a maybe in this function.", "tokens": [509, 393, 611, 2826, 281, 2736, 257, 1310, 294, 341, 2445, 13], "temperature": 0.0, "avg_logprob": -0.28047800064086914, "compression_ratio": 1.6024590163934427, "no_speech_prob": 1.9483773940009996e-05}, {"id": 232, "seek": 93054, "start": 930.54, "end": 937.2199999999999, "text": " So either just some route that exists or nothing, which means that nothing matched and you can", "tokens": [407, 2139, 445, 512, 7955, 300, 8198, 420, 1825, 11, 597, 1355, 300, 1825, 21447, 293, 291, 393], "temperature": 0.0, "avg_logprob": -0.23975774516230045, "compression_ratio": 1.6106194690265487, "no_speech_prob": 1.0444623512739781e-05}, {"id": 233, "seek": 93054, "start": 937.2199999999999, "end": 942.2199999999999, "text": " handle that one level above and turn it into a 404 page.", "tokens": [4813, 300, 472, 1496, 3673, 293, 1261, 309, 666, 257, 3356, 19, 3028, 13], "temperature": 0.0, "avg_logprob": -0.23975774516230045, "compression_ratio": 1.6106194690265487, "no_speech_prob": 1.0444623512739781e-05}, {"id": 234, "seek": 93054, "start": 942.2199999999999, "end": 948.3, "text": " Yeah, so this package is really a pattern as much as anything.", "tokens": [865, 11, 370, 341, 7372, 307, 534, 257, 5102, 382, 709, 382, 1340, 13], "temperature": 0.0, "avg_logprob": -0.23975774516230045, "compression_ratio": 1.6106194690265487, "no_speech_prob": 1.0444623512739781e-05}, {"id": 235, "seek": 93054, "start": 948.3, "end": 950.9399999999999, "text": " And the code is just to support that pattern.", "tokens": [400, 264, 3089, 307, 445, 281, 1406, 300, 5102, 13], "temperature": 0.0, "avg_logprob": -0.23975774516230045, "compression_ratio": 1.6106194690265487, "no_speech_prob": 1.0444623512739781e-05}, {"id": 236, "seek": 93054, "start": 950.9399999999999, "end": 956.5799999999999, "text": " And so in a nutshell, that pattern is like you've got a nice example showing your product", "tokens": [400, 370, 294, 257, 37711, 11, 300, 5102, 307, 411, 291, 600, 658, 257, 1481, 1365, 4099, 428, 1674], "temperature": 0.0, "avg_logprob": -0.23975774516230045, "compression_ratio": 1.6106194690265487, "no_speech_prob": 1.0444623512739781e-05}, {"id": 237, "seek": 93054, "start": 956.5799999999999, "end": 958.52, "text": " example here.", "tokens": [1365, 510, 13], "temperature": 0.0, "avg_logprob": -0.23975774516230045, "compression_ratio": 1.6106194690265487, "no_speech_prob": 1.0444623512739781e-05}, {"id": 238, "seek": 95852, "start": 958.52, "end": 963.86, "text": " It's just a function that takes an app URL, and it returns a maybe route.", "tokens": [467, 311, 445, 257, 2445, 300, 2516, 364, 724, 12905, 11, 293, 309, 11247, 257, 1310, 7955, 13], "temperature": 0.0, "avg_logprob": -0.299482266108195, "compression_ratio": 1.5728643216080402, "no_speech_prob": 1.1478481610538438e-05}, {"id": 239, "seek": 95852, "start": 963.86, "end": 969.5, "text": " Or if you wanted to have a 404 route, be a variant, it could just be a route.", "tokens": [1610, 498, 291, 1415, 281, 362, 257, 3356, 19, 7955, 11, 312, 257, 17501, 11, 309, 727, 445, 312, 257, 7955, 13], "temperature": 0.0, "avg_logprob": -0.299482266108195, "compression_ratio": 1.5728643216080402, "no_speech_prob": 1.1478481610538438e-05}, {"id": 240, "seek": 95852, "start": 969.5, "end": 971.8, "text": " But that's all it is.", "tokens": [583, 300, 311, 439, 309, 307, 13], "temperature": 0.0, "avg_logprob": -0.299482266108195, "compression_ratio": 1.5728643216080402, "no_speech_prob": 1.1478481610538438e-05}, {"id": 241, "seek": 95852, "start": 971.8, "end": 974.6999999999999, "text": " Maybe we should just explain what an app URL is.", "tokens": [2704, 321, 820, 445, 2903, 437, 364, 724, 12905, 307, 13], "temperature": 0.0, "avg_logprob": -0.299482266108195, "compression_ratio": 1.5728643216080402, "no_speech_prob": 1.1478481610538438e-05}, {"id": 242, "seek": 95852, "start": 974.6999999999999, "end": 977.6999999999999, "text": " You said the function took the app URL.", "tokens": [509, 848, 264, 2445, 1890, 264, 724, 12905, 13], "temperature": 0.0, "avg_logprob": -0.299482266108195, "compression_ratio": 1.5728643216080402, "no_speech_prob": 1.1478481610538438e-05}, {"id": 243, "seek": 95852, "start": 977.6999999999999, "end": 978.6999999999999, "text": " Yes.", "tokens": [1079, 13], "temperature": 0.0, "avg_logprob": -0.299482266108195, "compression_ratio": 1.5728643216080402, "no_speech_prob": 1.1478481610538438e-05}, {"id": 244, "seek": 95852, "start": 978.6999999999999, "end": 982.54, "text": " So app URL is the central type of my package.", "tokens": [407, 724, 12905, 307, 264, 5777, 2010, 295, 452, 7372, 13], "temperature": 0.0, "avg_logprob": -0.299482266108195, "compression_ratio": 1.5728643216080402, "no_speech_prob": 1.1478481610538438e-05}, {"id": 245, "seek": 98254, "start": 982.54, "end": 989.2199999999999, "text": " The difference to the URL type in the official package is that an app URL is a subset of", "tokens": [440, 2649, 281, 264, 12905, 2010, 294, 264, 4783, 7372, 307, 300, 364, 724, 12905, 307, 257, 25993, 295], "temperature": 0.0, "avg_logprob": -0.22720466776097076, "compression_ratio": 1.631336405529954, "no_speech_prob": 2.746293648669962e-05}, {"id": 246, "seek": 98254, "start": 989.2199999999999, "end": 990.54, "text": " a whole URL.", "tokens": [257, 1379, 12905, 13], "temperature": 0.0, "avg_logprob": -0.22720466776097076, "compression_ratio": 1.631336405529954, "no_speech_prob": 2.746293648669962e-05}, {"id": 247, "seek": 98254, "start": 990.54, "end": 995.3399999999999, "text": " It is only the path, the query parameters and the fragment.", "tokens": [467, 307, 787, 264, 3100, 11, 264, 14581, 9834, 293, 264, 26424, 13], "temperature": 0.0, "avg_logprob": -0.22720466776097076, "compression_ratio": 1.631336405529954, "no_speech_prob": 2.746293648669962e-05}, {"id": 248, "seek": 98254, "start": 995.3399999999999, "end": 1002.02, "text": " So it is not the scheme like HTTP, and it is not the domain, not the port.", "tokens": [407, 309, 307, 406, 264, 12232, 411, 33283, 11, 293, 309, 307, 406, 264, 9274, 11, 406, 264, 2436, 13], "temperature": 0.0, "avg_logprob": -0.22720466776097076, "compression_ratio": 1.631336405529954, "no_speech_prob": 2.746293648669962e-05}, {"id": 249, "seek": 98254, "start": 1002.02, "end": 1007.2199999999999, "text": " And the reason for that is that that is the part that you are actually interested in when", "tokens": [400, 264, 1778, 337, 300, 307, 300, 300, 307, 264, 644, 300, 291, 366, 767, 3102, 294, 562], "temperature": 0.0, "avg_logprob": -0.22720466776097076, "compression_ratio": 1.631336405529954, "no_speech_prob": 2.746293648669962e-05}, {"id": 250, "seek": 98254, "start": 1007.2199999999999, "end": 1009.5, "text": " writing an Elm application.", "tokens": [3579, 364, 2699, 76, 3861, 13], "temperature": 0.0, "avg_logprob": -0.22720466776097076, "compression_ratio": 1.631336405529954, "no_speech_prob": 2.746293648669962e-05}, {"id": 251, "seek": 100950, "start": 1009.5, "end": 1013.62, "text": " Your app is going to be hosted on some domain, but you don't really care about that in your", "tokens": [2260, 724, 307, 516, 281, 312, 19204, 322, 512, 9274, 11, 457, 291, 500, 380, 534, 1127, 466, 300, 294, 428], "temperature": 0.0, "avg_logprob": -0.23677732924784511, "compression_ratio": 1.6058394160583942, "no_speech_prob": 1.7460741219110787e-05}, {"id": 252, "seek": 100950, "start": 1013.62, "end": 1014.62, "text": " Elm code.", "tokens": [2699, 76, 3089, 13], "temperature": 0.0, "avg_logprob": -0.23677732924784511, "compression_ratio": 1.6058394160583942, "no_speech_prob": 1.7460741219110787e-05}, {"id": 253, "seek": 100950, "start": 1014.62, "end": 1015.62, "text": " It doesn't matter.", "tokens": [467, 1177, 380, 1871, 13], "temperature": 0.0, "avg_logprob": -0.23677732924784511, "compression_ratio": 1.6058394160583942, "no_speech_prob": 1.7460741219110787e-05}, {"id": 254, "seek": 100950, "start": 1015.62, "end": 1017.98, "text": " So it's kind of annoying to have to...", "tokens": [407, 309, 311, 733, 295, 11304, 281, 362, 281, 485], "temperature": 0.0, "avg_logprob": -0.23677732924784511, "compression_ratio": 1.6058394160583942, "no_speech_prob": 1.7460741219110787e-05}, {"id": 255, "seek": 100950, "start": 1017.98, "end": 1022.44, "text": " Like if you ever want to create an app URL because a function needs one, you don't want", "tokens": [1743, 498, 291, 1562, 528, 281, 1884, 364, 724, 12905, 570, 257, 2445, 2203, 472, 11, 291, 500, 380, 528], "temperature": 0.0, "avg_logprob": -0.23677732924784511, "compression_ratio": 1.6058394160583942, "no_speech_prob": 1.7460741219110787e-05}, {"id": 256, "seek": 100950, "start": 1022.44, "end": 1029.62, "text": " to specify a fake scheme, a fake domain and so on, just to be able to satisfy the type.", "tokens": [281, 16500, 257, 7592, 12232, 11, 257, 7592, 9274, 293, 370, 322, 11, 445, 281, 312, 1075, 281, 19319, 264, 2010, 13], "temperature": 0.0, "avg_logprob": -0.23677732924784511, "compression_ratio": 1.6058394160583942, "no_speech_prob": 1.7460741219110787e-05}, {"id": 257, "seek": 100950, "start": 1029.62, "end": 1036.96, "text": " And I read through specifications for URLs, and there is no name just for path plus query", "tokens": [400, 286, 1401, 807, 29448, 337, 43267, 11, 293, 456, 307, 572, 1315, 445, 337, 3100, 1804, 14581], "temperature": 0.0, "avg_logprob": -0.23677732924784511, "compression_ratio": 1.6058394160583942, "no_speech_prob": 1.7460741219110787e-05}, {"id": 258, "seek": 100950, "start": 1036.96, "end": 1038.42, "text": " plus fragment.", "tokens": [1804, 26424, 13], "temperature": 0.0, "avg_logprob": -0.23677732924784511, "compression_ratio": 1.6058394160583942, "no_speech_prob": 1.7460741219110787e-05}, {"id": 259, "seek": 103842, "start": 1038.42, "end": 1040.3600000000001, "text": " So I had to invent something.", "tokens": [407, 286, 632, 281, 7962, 746, 13], "temperature": 0.0, "avg_logprob": -0.3027448208532601, "compression_ratio": 1.6160337552742616, "no_speech_prob": 5.771384621766629e-06}, {"id": 260, "seek": 103842, "start": 1040.3600000000001, "end": 1043.24, "text": " And eventually I came up with app URL.", "tokens": [400, 4728, 286, 1361, 493, 365, 724, 12905, 13], "temperature": 0.0, "avg_logprob": -0.3027448208532601, "compression_ratio": 1.6160337552742616, "no_speech_prob": 5.771384621766629e-06}, {"id": 261, "seek": 103842, "start": 1043.24, "end": 1050.14, "text": " It's kind of short, and it also shows that it's like designed to be used for an Elm app.", "tokens": [467, 311, 733, 295, 2099, 11, 293, 309, 611, 3110, 300, 309, 311, 411, 4761, 281, 312, 1143, 337, 364, 2699, 76, 724, 13], "temperature": 0.0, "avg_logprob": -0.3027448208532601, "compression_ratio": 1.6160337552742616, "no_speech_prob": 5.771384621766629e-06}, {"id": 262, "seek": 103842, "start": 1050.14, "end": 1052.8600000000001, "text": " Yeah, that's my thinking.", "tokens": [865, 11, 300, 311, 452, 1953, 13], "temperature": 0.0, "avg_logprob": -0.3027448208532601, "compression_ratio": 1.6160337552742616, "no_speech_prob": 5.771384621766629e-06}, {"id": 263, "seek": 103842, "start": 1052.8600000000001, "end": 1060.26, "text": " And this type or this package is only designed for parsing and stringifying routes in your", "tokens": [400, 341, 2010, 420, 341, 7372, 307, 787, 4761, 337, 21156, 278, 293, 6798, 5489, 18242, 294, 428], "temperature": 0.0, "avg_logprob": -0.3027448208532601, "compression_ratio": 1.6160337552742616, "no_speech_prob": 5.771384621766629e-06}, {"id": 264, "seek": 103842, "start": 1060.26, "end": 1061.26, "text": " application, right?", "tokens": [3861, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.3027448208532601, "compression_ratio": 1.6160337552742616, "no_speech_prob": 5.771384621766629e-06}, {"id": 265, "seek": 103842, "start": 1061.26, "end": 1066.8200000000002, "text": " It's not designed to represent any URL like the Elm URL package is supposed to.", "tokens": [467, 311, 406, 4761, 281, 2906, 604, 12905, 411, 264, 2699, 76, 12905, 7372, 307, 3442, 281, 13], "temperature": 0.0, "avg_logprob": -0.3027448208532601, "compression_ratio": 1.6160337552742616, "no_speech_prob": 5.771384621766629e-06}, {"id": 266, "seek": 103842, "start": 1066.8200000000002, "end": 1068.04, "text": " Exactly.", "tokens": [7587, 13], "temperature": 0.0, "avg_logprob": -0.3027448208532601, "compression_ratio": 1.6160337552742616, "no_speech_prob": 5.771384621766629e-06}, {"id": 267, "seek": 106804, "start": 1068.04, "end": 1073.3799999999999, "text": " So the way you use this, walk us through how you would wire this in compared to how you", "tokens": [407, 264, 636, 291, 764, 341, 11, 1792, 505, 807, 577, 291, 576, 6234, 341, 294, 5347, 281, 577, 291], "temperature": 0.0, "avg_logprob": -0.25044300339438696, "compression_ratio": 1.7377049180327868, "no_speech_prob": 3.392935695956112e-06}, {"id": 268, "seek": 106804, "start": 1073.3799999999999, "end": 1076.8, "text": " would wire in an Elm URL parser.", "tokens": [576, 6234, 294, 364, 2699, 76, 12905, 21156, 260, 13], "temperature": 0.0, "avg_logprob": -0.25044300339438696, "compression_ratio": 1.7377049180327868, "no_speech_prob": 3.392935695956112e-06}, {"id": 269, "seek": 106804, "start": 1076.8, "end": 1085.06, "text": " So in an Elm application where you use browser.application, there are a couple of places where you get", "tokens": [407, 294, 364, 2699, 76, 3861, 689, 291, 764, 11185, 13, 1746, 1050, 399, 11, 456, 366, 257, 1916, 295, 3190, 689, 291, 483], "temperature": 0.0, "avg_logprob": -0.25044300339438696, "compression_ratio": 1.7377049180327868, "no_speech_prob": 3.392935695956112e-06}, {"id": 270, "seek": 106804, "start": 1085.06, "end": 1093.46, "text": " a URL in the init function, and also in URL changed, like the URL change message that", "tokens": [257, 12905, 294, 264, 3157, 2445, 11, 293, 611, 294, 12905, 3105, 11, 411, 264, 12905, 1319, 3636, 300], "temperature": 0.0, "avg_logprob": -0.25044300339438696, "compression_ratio": 1.7377049180327868, "no_speech_prob": 3.392935695956112e-06}, {"id": 271, "seek": 106804, "start": 1093.46, "end": 1094.46, "text": " you get.", "tokens": [291, 483, 13], "temperature": 0.0, "avg_logprob": -0.25044300339438696, "compression_ratio": 1.7377049180327868, "no_speech_prob": 3.392935695956112e-06}, {"id": 272, "seek": 109446, "start": 1094.46, "end": 1102.22, "text": " And what you do there is instead of giving that URL to a URL parser, you run a function", "tokens": [400, 437, 291, 360, 456, 307, 2602, 295, 2902, 300, 12905, 281, 257, 12905, 21156, 260, 11, 291, 1190, 257, 2445], "temperature": 0.0, "avg_logprob": -0.24546162835482893, "compression_ratio": 1.7106598984771573, "no_speech_prob": 3.9053757063811645e-06}, {"id": 273, "seek": 109446, "start": 1102.22, "end": 1109.78, "text": " called app URL dot from URL, which turns a full URL into only the app URL parts.", "tokens": [1219, 724, 12905, 5893, 490, 12905, 11, 597, 4523, 257, 1577, 12905, 666, 787, 264, 724, 12905, 3166, 13], "temperature": 0.0, "avg_logprob": -0.24546162835482893, "compression_ratio": 1.7106598984771573, "no_speech_prob": 3.9053757063811645e-06}, {"id": 274, "seek": 109446, "start": 1109.78, "end": 1115.26, "text": " And then you give that to your function that does the pattern match on the path.", "tokens": [400, 550, 291, 976, 300, 281, 428, 2445, 300, 775, 264, 5102, 2995, 322, 264, 3100, 13], "temperature": 0.0, "avg_logprob": -0.24546162835482893, "compression_ratio": 1.7106598984771573, "no_speech_prob": 3.9053757063811645e-06}, {"id": 275, "seek": 109446, "start": 1115.26, "end": 1120.7, "text": " And then you have basically replaced the parser based stuff you had from before.", "tokens": [400, 550, 291, 362, 1936, 10772, 264, 21156, 260, 2361, 1507, 291, 632, 490, 949, 13], "temperature": 0.0, "avg_logprob": -0.24546162835482893, "compression_ratio": 1.7106598984771573, "no_speech_prob": 3.9053757063811645e-06}, {"id": 276, "seek": 109446, "start": 1120.7, "end": 1121.7, "text": " Right.", "tokens": [1779, 13], "temperature": 0.0, "avg_logprob": -0.24546162835482893, "compression_ratio": 1.7106598984771573, "no_speech_prob": 3.9053757063811645e-06}, {"id": 277, "seek": 112170, "start": 1121.7, "end": 1127.14, "text": " So the app URL type, so it gives you these values that are easier to deal with in a pattern", "tokens": [407, 264, 724, 12905, 2010, 11, 370, 309, 2709, 291, 613, 4190, 300, 366, 3571, 281, 2028, 365, 294, 257, 5102], "temperature": 0.0, "avg_logprob": -0.23948272962248726, "compression_ratio": 1.696078431372549, "no_speech_prob": 2.3454246900200815e-07}, {"id": 278, "seek": 112170, "start": 1127.14, "end": 1128.14, "text": " match.", "tokens": [2995, 13], "temperature": 0.0, "avg_logprob": -0.23948272962248726, "compression_ratio": 1.696078431372549, "no_speech_prob": 2.3454246900200815e-07}, {"id": 279, "seek": 112170, "start": 1128.14, "end": 1134.8600000000001, "text": " So you have path is list of string, query parameters is a dict of string to list of", "tokens": [407, 291, 362, 3100, 307, 1329, 295, 6798, 11, 14581, 9834, 307, 257, 12569, 295, 6798, 281, 1329, 295], "temperature": 0.0, "avg_logprob": -0.23948272962248726, "compression_ratio": 1.696078431372549, "no_speech_prob": 2.3454246900200815e-07}, {"id": 280, "seek": 112170, "start": 1134.8600000000001, "end": 1137.8600000000001, "text": " string, and then the fragment is a maybe string.", "tokens": [6798, 11, 293, 550, 264, 26424, 307, 257, 1310, 6798, 13], "temperature": 0.0, "avg_logprob": -0.23948272962248726, "compression_ratio": 1.696078431372549, "no_speech_prob": 2.3454246900200815e-07}, {"id": 281, "seek": 112170, "start": 1137.8600000000001, "end": 1143.42, "text": " I'm guessing the fragment is probably not used that often in this context, but query", "tokens": [286, 478, 17939, 264, 26424, 307, 1391, 406, 1143, 300, 2049, 294, 341, 4319, 11, 457, 14581], "temperature": 0.0, "avg_logprob": -0.23948272962248726, "compression_ratio": 1.696078431372549, "no_speech_prob": 2.3454246900200815e-07}, {"id": 282, "seek": 112170, "start": 1143.42, "end": 1146.26, "text": " parameters are used commonly.", "tokens": [9834, 366, 1143, 12719, 13], "temperature": 0.0, "avg_logprob": -0.23948272962248726, "compression_ratio": 1.696078431372549, "no_speech_prob": 2.3454246900200815e-07}, {"id": 283, "seek": 114626, "start": 1146.26, "end": 1152.54, "text": " So how do you use the query parameters to in Elm app URL to parse into part of your", "tokens": [407, 577, 360, 291, 764, 264, 14581, 9834, 281, 294, 2699, 76, 724, 12905, 281, 48377, 666, 644, 295, 428], "temperature": 0.0, "avg_logprob": -0.2312414701594863, "compression_ratio": 1.5170731707317073, "no_speech_prob": 5.6810295063769445e-06}, {"id": 284, "seek": 114626, "start": 1152.54, "end": 1153.54, "text": " route?", "tokens": [7955, 30], "temperature": 0.0, "avg_logprob": -0.2312414701594863, "compression_ratio": 1.5170731707317073, "no_speech_prob": 5.6810295063769445e-06}, {"id": 285, "seek": 114626, "start": 1153.54, "end": 1160.54, "text": " That ties back to one of those three issues that I had with the official package.", "tokens": [663, 14039, 646, 281, 472, 295, 729, 1045, 2663, 300, 286, 632, 365, 264, 4783, 7372, 13], "temperature": 0.0, "avg_logprob": -0.2312414701594863, "compression_ratio": 1.5170731707317073, "no_speech_prob": 5.6810295063769445e-06}, {"id": 286, "seek": 114626, "start": 1160.54, "end": 1164.26, "text": " And this is the design flaw one, in my opinion.", "tokens": [400, 341, 307, 264, 1715, 13717, 472, 11, 294, 452, 4800, 13], "temperature": 0.0, "avg_logprob": -0.2312414701594863, "compression_ratio": 1.5170731707317073, "no_speech_prob": 5.6810295063769445e-06}, {"id": 287, "seek": 114626, "start": 1164.26, "end": 1171.86, "text": " So the official URL type, it has a field called query, I think, and that is just a string,", "tokens": [407, 264, 4783, 12905, 2010, 11, 309, 575, 257, 2519, 1219, 14581, 11, 286, 519, 11, 293, 300, 307, 445, 257, 6798, 11], "temperature": 0.0, "avg_logprob": -0.2312414701594863, "compression_ratio": 1.5170731707317073, "no_speech_prob": 5.6810295063769445e-06}, {"id": 288, "seek": 117186, "start": 1171.86, "end": 1178.2199999999998, "text": " which means that the query parameters, the stuff that is from the question mark to the", "tokens": [597, 1355, 300, 264, 14581, 9834, 11, 264, 1507, 300, 307, 490, 264, 1168, 1491, 281, 264], "temperature": 0.0, "avg_logprob": -0.248368086638274, "compression_ratio": 1.455497382198953, "no_speech_prob": 3.842336809611879e-06}, {"id": 289, "seek": 117186, "start": 1178.2199999999998, "end": 1182.1799999999998, "text": " end or to the fragment, if you have one, it's just a string.", "tokens": [917, 420, 281, 264, 26424, 11, 498, 291, 362, 472, 11, 309, 311, 445, 257, 6798, 13], "temperature": 0.0, "avg_logprob": -0.248368086638274, "compression_ratio": 1.455497382198953, "no_speech_prob": 3.842336809611879e-06}, {"id": 290, "seek": 117186, "start": 1182.1799999999998, "end": 1185.3, "text": " I've tried to think of like, why is that?", "tokens": [286, 600, 3031, 281, 519, 295, 411, 11, 983, 307, 300, 30], "temperature": 0.0, "avg_logprob": -0.248368086638274, "compression_ratio": 1.455497382198953, "no_speech_prob": 3.842336809611879e-06}, {"id": 291, "seek": 117186, "start": 1185.3, "end": 1195.26, "text": " There is a link in the Elm URL package to an RFC, you know, one of those like monospaced", "tokens": [821, 307, 257, 2113, 294, 264, 2699, 76, 12905, 7372, 281, 364, 497, 18671, 11, 291, 458, 11, 472, 295, 729, 411, 1108, 2763, 3839], "temperature": 0.0, "avg_logprob": -0.248368086638274, "compression_ratio": 1.455497382198953, "no_speech_prob": 3.842336809611879e-06}, {"id": 292, "seek": 119526, "start": 1195.26, "end": 1202.42, "text": " formatted specification lucky thingies, which is like a specification for a URL.", "tokens": [1254, 32509, 31256, 6356, 551, 530, 11, 597, 307, 411, 257, 31256, 337, 257, 12905, 13], "temperature": 0.0, "avg_logprob": -0.319307006231629, "compression_ratio": 1.855721393034826, "no_speech_prob": 5.25336281498312e-06}, {"id": 293, "seek": 119526, "start": 1202.42, "end": 1208.14, "text": " And in that one, for some reason, they just say that the query is the part from the question", "tokens": [400, 294, 300, 472, 11, 337, 512, 1778, 11, 436, 445, 584, 300, 264, 14581, 307, 264, 644, 490, 264, 1168], "temperature": 0.0, "avg_logprob": -0.319307006231629, "compression_ratio": 1.855721393034826, "no_speech_prob": 5.25336281498312e-06}, {"id": 294, "seek": 119526, "start": 1208.14, "end": 1210.5, "text": " mark to the fragment.", "tokens": [1491, 281, 264, 26424, 13], "temperature": 0.0, "avg_logprob": -0.319307006231629, "compression_ratio": 1.855721393034826, "no_speech_prob": 5.25336281498312e-06}, {"id": 295, "seek": 119526, "start": 1210.5, "end": 1216.02, "text": " And usually the query is the part from the question mark.", "tokens": [400, 2673, 264, 14581, 307, 264, 644, 490, 264, 1168, 1491, 13], "temperature": 0.0, "avg_logprob": -0.319307006231629, "compression_ratio": 1.855721393034826, "no_speech_prob": 5.25336281498312e-06}, {"id": 296, "seek": 119526, "start": 1216.02, "end": 1217.02, "text": " Yeah, kind of.", "tokens": [865, 11, 733, 295, 13], "temperature": 0.0, "avg_logprob": -0.319307006231629, "compression_ratio": 1.855721393034826, "no_speech_prob": 5.25336281498312e-06}, {"id": 297, "seek": 119526, "start": 1217.02, "end": 1222.5, "text": " But for some reason, they just say like, yeah, and people typically put key value pairs in", "tokens": [583, 337, 512, 1778, 11, 436, 445, 584, 411, 11, 1338, 11, 293, 561, 5850, 829, 2141, 2158, 15494, 294], "temperature": 0.0, "avg_logprob": -0.319307006231629, "compression_ratio": 1.855721393034826, "no_speech_prob": 5.25336281498312e-06}, {"id": 298, "seek": 119526, "start": 1222.5, "end": 1223.5, "text": " there.", "tokens": [456, 13], "temperature": 0.0, "avg_logprob": -0.319307006231629, "compression_ratio": 1.855721393034826, "no_speech_prob": 5.25336281498312e-06}, {"id": 299, "seek": 119526, "start": 1223.5, "end": 1224.5, "text": " Right.", "tokens": [1779, 13], "temperature": 0.0, "avg_logprob": -0.319307006231629, "compression_ratio": 1.855721393034826, "no_speech_prob": 5.25336281498312e-06}, {"id": 300, "seek": 122450, "start": 1224.5, "end": 1225.5, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.30666056275367737, "compression_ratio": 1.6333333333333333, "no_speech_prob": 6.143569407868199e-06}, {"id": 301, "seek": 122450, "start": 1225.5, "end": 1231.94, "text": " So I'm wondering if like, Evan decided that, okay, I'm going to follow this RFC.", "tokens": [407, 286, 478, 6359, 498, 411, 11, 22613, 3047, 300, 11, 1392, 11, 286, 478, 516, 281, 1524, 341, 497, 18671, 13], "temperature": 0.0, "avg_logprob": -0.30666056275367737, "compression_ratio": 1.6333333333333333, "no_speech_prob": 6.143569407868199e-06}, {"id": 302, "seek": 122450, "start": 1231.94, "end": 1234.58, "text": " And if someone complains, like, why is the query string?", "tokens": [400, 498, 1580, 1209, 2315, 11, 411, 11, 983, 307, 264, 14581, 6798, 30], "temperature": 0.0, "avg_logprob": -0.30666056275367737, "compression_ratio": 1.6333333333333333, "no_speech_prob": 6.143569407868199e-06}, {"id": 303, "seek": 122450, "start": 1234.58, "end": 1236.34, "text": " Well, it's in the RFC.", "tokens": [1042, 11, 309, 311, 294, 264, 497, 18671, 13], "temperature": 0.0, "avg_logprob": -0.30666056275367737, "compression_ratio": 1.6333333333333333, "no_speech_prob": 6.143569407868199e-06}, {"id": 304, "seek": 122450, "start": 1236.34, "end": 1237.82, "text": " I followed it.", "tokens": [286, 6263, 309, 13], "temperature": 0.0, "avg_logprob": -0.30666056275367737, "compression_ratio": 1.6333333333333333, "no_speech_prob": 6.143569407868199e-06}, {"id": 305, "seek": 122450, "start": 1237.82, "end": 1238.82, "text": " Right.", "tokens": [1779, 13], "temperature": 0.0, "avg_logprob": -0.30666056275367737, "compression_ratio": 1.6333333333333333, "no_speech_prob": 6.143569407868199e-06}, {"id": 306, "seek": 122450, "start": 1238.82, "end": 1242.86, "text": " But in practice, like everyone uses the query string the same way.", "tokens": [583, 294, 3124, 11, 411, 1518, 4960, 264, 14581, 6798, 264, 912, 636, 13], "temperature": 0.0, "avg_logprob": -0.30666056275367737, "compression_ratio": 1.6333333333333333, "no_speech_prob": 6.143569407868199e-06}, {"id": 307, "seek": 122450, "start": 1242.86, "end": 1246.66, "text": " It's key value pairs separated by ampersands.", "tokens": [467, 311, 2141, 2158, 15494, 12005, 538, 18648, 433, 2967, 13], "temperature": 0.0, "avg_logprob": -0.30666056275367737, "compression_ratio": 1.6333333333333333, "no_speech_prob": 6.143569407868199e-06}, {"id": 308, "seek": 122450, "start": 1246.66, "end": 1247.66, "text": " Right.", "tokens": [1779, 13], "temperature": 0.0, "avg_logprob": -0.30666056275367737, "compression_ratio": 1.6333333333333333, "no_speech_prob": 6.143569407868199e-06}, {"id": 309, "seek": 122450, "start": 1247.66, "end": 1250.9, "text": " With equals separating the keys and values.", "tokens": [2022, 6915, 29279, 264, 9317, 293, 4190, 13], "temperature": 0.0, "avg_logprob": -0.30666056275367737, "compression_ratio": 1.6333333333333333, "no_speech_prob": 6.143569407868199e-06}, {"id": 310, "seek": 122450, "start": 1250.9, "end": 1251.9, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.30666056275367737, "compression_ratio": 1.6333333333333333, "no_speech_prob": 6.143569407868199e-06}, {"id": 311, "seek": 122450, "start": 1251.9, "end": 1252.9, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.30666056275367737, "compression_ratio": 1.6333333333333333, "no_speech_prob": 6.143569407868199e-06}, {"id": 312, "seek": 122450, "start": 1252.9, "end": 1253.9, "text": " So that is not in the spec.", "tokens": [407, 300, 307, 406, 294, 264, 1608, 13], "temperature": 0.0, "avg_logprob": -0.30666056275367737, "compression_ratio": 1.6333333333333333, "no_speech_prob": 6.143569407868199e-06}, {"id": 313, "seek": 125390, "start": 1253.9, "end": 1258.98, "text": " As far as I can understand, specifications for URLs are pretty weird.", "tokens": [1018, 1400, 382, 286, 393, 1223, 11, 29448, 337, 43267, 366, 1238, 3657, 13], "temperature": 0.0, "avg_logprob": -0.4085604951188371, "compression_ratio": 1.6051282051282052, "no_speech_prob": 2.7722615413949825e-05}, {"id": 314, "seek": 125390, "start": 1258.98, "end": 1265.5, "text": " I read a tweet from Daniel Stenberg, the creator of Curl.", "tokens": [286, 1401, 257, 15258, 490, 8033, 745, 268, 6873, 11, 264, 14181, 295, 7907, 75, 13], "temperature": 0.0, "avg_logprob": -0.4085604951188371, "compression_ratio": 1.6051282051282052, "no_speech_prob": 2.7722615413949825e-05}, {"id": 315, "seek": 125390, "start": 1265.5, "end": 1273.1000000000001, "text": " He tweeted something, someone responded and they responded with a question like, something,", "tokens": [634, 25646, 746, 11, 1580, 15806, 293, 436, 15806, 365, 257, 1168, 411, 11, 746, 11], "temperature": 0.0, "avg_logprob": -0.4085604951188371, "compression_ratio": 1.6051282051282052, "no_speech_prob": 2.7722615413949825e-05}, {"id": 316, "seek": 125390, "start": 1273.1000000000001, "end": 1275.38, "text": " something URL specification.", "tokens": [746, 12905, 31256, 13], "temperature": 0.0, "avg_logprob": -0.4085604951188371, "compression_ratio": 1.6051282051282052, "no_speech_prob": 2.7722615413949825e-05}, {"id": 317, "seek": 125390, "start": 1275.38, "end": 1282.42, "text": " And Daniel's answer was just like, which specification question?", "tokens": [400, 8033, 311, 1867, 390, 445, 411, 11, 597, 31256, 1168, 30], "temperature": 0.0, "avg_logprob": -0.4085604951188371, "compression_ratio": 1.6051282051282052, "no_speech_prob": 2.7722615413949825e-05}, {"id": 318, "seek": 128242, "start": 1282.42, "end": 1287.18, "text": " Yeah, that's a bit too highly.", "tokens": [865, 11, 300, 311, 257, 857, 220, 32599, 5405, 13], "temperature": 0.4, "avg_logprob": -0.6794951392001793, "compression_ratio": 1.4901960784313726, "no_speech_prob": 2.9724604246439412e-05}, {"id": 319, "seek": 128242, "start": 1287.18, "end": 1293.92, "text": " These days, there is one from the WG committee.", "tokens": [1981, 1708, 11, 456, 307, 472, 490, 264, 343, 38, 7482, 13], "temperature": 0.4, "avg_logprob": -0.6794951392001793, "compression_ratio": 1.4901960784313726, "no_speech_prob": 2.9724604246439412e-05}, {"id": 320, "seek": 128242, "start": 1293.92, "end": 1298.1000000000001, "text": " They're the ones making the HTML specification these days.", "tokens": [814, 434, 264, 2306, 1455, 264, 17995, 1608, 3774, 258, 1130, 1708, 13], "temperature": 0.4, "avg_logprob": -0.6794951392001793, "compression_ratio": 1.4901960784313726, "no_speech_prob": 2.9724604246439412e-05}, {"id": 321, "seek": 128242, "start": 1298.1000000000001, "end": 1305.18, "text": " They have like a URL specification that is a bit focused to JavaScript, because JavaScript", "tokens": [814, 362, 411, 257, 12905, 31256, 300, 307, 257, 857, 5178, 281, 15778, 11, 570, 15778], "temperature": 0.4, "avg_logprob": -0.6794951392001793, "compression_ratio": 1.4901960784313726, "no_speech_prob": 2.9724604246439412e-05}, {"id": 322, "seek": 130518, "start": 1305.18, "end": 1312.46, "text": " has a nice URL class these days with the parsed query parameters in it and stuff like that.", "tokens": [575, 257, 1481, 12905, 1508, 613, 1708, 365, 264, 21156, 292, 14581, 9834, 294, 309, 293, 1507, 411, 300, 13], "temperature": 0.0, "avg_logprob": -0.2909901342659353, "compression_ratio": 1.6724137931034482, "no_speech_prob": 1.8735458979790565e-06}, {"id": 323, "seek": 130518, "start": 1312.46, "end": 1313.46, "text": " Right.", "tokens": [1779, 13], "temperature": 0.0, "avg_logprob": -0.2909901342659353, "compression_ratio": 1.6724137931034482, "no_speech_prob": 1.8735458979790565e-06}, {"id": 324, "seek": 130518, "start": 1313.46, "end": 1317.8600000000001, "text": " Isn't there like a URL params constructor or something like that?", "tokens": [6998, 380, 456, 411, 257, 12905, 971, 4070, 47479, 420, 746, 411, 300, 30], "temperature": 0.0, "avg_logprob": -0.2909901342659353, "compression_ratio": 1.6724137931034482, "no_speech_prob": 1.8735458979790565e-06}, {"id": 325, "seek": 130518, "start": 1317.8600000000001, "end": 1320.54, "text": " Yeah, I think it's URL search params or something.", "tokens": [865, 11, 286, 519, 309, 311, 12905, 3164, 971, 4070, 420, 746, 13], "temperature": 0.0, "avg_logprob": -0.2909901342659353, "compression_ratio": 1.6724137931034482, "no_speech_prob": 1.8735458979790565e-06}, {"id": 326, "seek": 130518, "start": 1320.54, "end": 1321.8200000000002, "text": " URL search params, right.", "tokens": [12905, 3164, 971, 4070, 11, 558, 13], "temperature": 0.0, "avg_logprob": -0.2909901342659353, "compression_ratio": 1.6724137931034482, "no_speech_prob": 1.8735458979790565e-06}, {"id": 327, "seek": 130518, "start": 1321.8200000000002, "end": 1322.8200000000002, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.2909901342659353, "compression_ratio": 1.6724137931034482, "no_speech_prob": 1.8735458979790565e-06}, {"id": 328, "seek": 130518, "start": 1322.8200000000002, "end": 1326.02, "text": " So I had the luxury of being able to piggyback from that.", "tokens": [407, 286, 632, 264, 15558, 295, 885, 1075, 281, 39349, 3207, 490, 300, 13], "temperature": 0.0, "avg_logprob": -0.2909901342659353, "compression_ratio": 1.6724137931034482, "no_speech_prob": 1.8735458979790565e-06}, {"id": 329, "seek": 130518, "start": 1326.02, "end": 1331.1000000000001, "text": " Like whenever I thought like, hmm, how should this be handled in query parameters?", "tokens": [1743, 5699, 286, 1194, 411, 11, 16478, 11, 577, 820, 341, 312, 18033, 294, 14581, 9834, 30], "temperature": 0.0, "avg_logprob": -0.2909901342659353, "compression_ratio": 1.6724137931034482, "no_speech_prob": 1.8735458979790565e-06}, {"id": 330, "seek": 133110, "start": 1331.1, "end": 1336.1399999999999, "text": " I could look that up and see, like, how did they do it?", "tokens": [286, 727, 574, 300, 493, 293, 536, 11, 411, 11, 577, 630, 436, 360, 309, 30], "temperature": 0.0, "avg_logprob": -0.22018140769866576, "compression_ratio": 1.39010989010989, "no_speech_prob": 1.4043553164810874e-05}, {"id": 331, "seek": 133110, "start": 1336.1399999999999, "end": 1337.54, "text": " Does it make sense?", "tokens": [4402, 309, 652, 2020, 30], "temperature": 0.0, "avg_logprob": -0.22018140769866576, "compression_ratio": 1.39010989010989, "no_speech_prob": 1.4043553164810874e-05}, {"id": 332, "seek": 133110, "start": 1337.54, "end": 1338.74, "text": " Should I copy that?", "tokens": [6454, 286, 5055, 300, 30], "temperature": 0.0, "avg_logprob": -0.22018140769866576, "compression_ratio": 1.39010989010989, "no_speech_prob": 1.4043553164810874e-05}, {"id": 333, "seek": 133110, "start": 1338.74, "end": 1342.5, "text": " And the answer was always yes.", "tokens": [400, 264, 1867, 390, 1009, 2086, 13], "temperature": 0.0, "avg_logprob": -0.22018140769866576, "compression_ratio": 1.39010989010989, "no_speech_prob": 1.4043553164810874e-05}, {"id": 334, "seek": 133110, "start": 1342.5, "end": 1350.5, "text": " So I decided that in an app URL query, it's not just a string, it's a dictionary.", "tokens": [407, 286, 3047, 300, 294, 364, 724, 12905, 14581, 11, 309, 311, 406, 445, 257, 6798, 11, 309, 311, 257, 25890, 13], "temperature": 0.0, "avg_logprob": -0.22018140769866576, "compression_ratio": 1.39010989010989, "no_speech_prob": 1.4043553164810874e-05}, {"id": 335, "seek": 133110, "start": 1350.5, "end": 1353.06, "text": " So the whole thing is parsed for you.", "tokens": [407, 264, 1379, 551, 307, 21156, 292, 337, 291, 13], "temperature": 0.0, "avg_logprob": -0.22018140769866576, "compression_ratio": 1.39010989010989, "no_speech_prob": 1.4043553164810874e-05}, {"id": 336, "seek": 133110, "start": 1353.06, "end": 1354.06, "text": " Right.", "tokens": [1779, 13], "temperature": 0.0, "avg_logprob": -0.22018140769866576, "compression_ratio": 1.39010989010989, "no_speech_prob": 1.4043553164810874e-05}, {"id": 337, "seek": 135406, "start": 1354.06, "end": 1362.46, "text": " So the one piece of information that might have meaning in a somewhat normal use of URL", "tokens": [407, 264, 472, 2522, 295, 1589, 300, 1062, 362, 3620, 294, 257, 8344, 2710, 764, 295, 12905], "temperature": 0.0, "avg_logprob": -0.2701762704288258, "compression_ratio": 1.7186147186147187, "no_speech_prob": 5.771723408543039e-06}, {"id": 338, "seek": 135406, "start": 1362.46, "end": 1370.46, "text": " query params would be the order, which you have the order, if you use the same query", "tokens": [14581, 971, 4070, 576, 312, 264, 1668, 11, 597, 291, 362, 264, 1668, 11, 498, 291, 764, 264, 912, 14581], "temperature": 0.0, "avg_logprob": -0.2701762704288258, "compression_ratio": 1.7186147186147187, "no_speech_prob": 5.771723408543039e-06}, {"id": 339, "seek": 135406, "start": 1370.46, "end": 1374.58, "text": " param name multiple times, you have the order that those come in, but you don't have the", "tokens": [6220, 1315, 3866, 1413, 11, 291, 362, 264, 1668, 300, 729, 808, 294, 11, 457, 291, 500, 380, 362, 264], "temperature": 0.0, "avg_logprob": -0.2701762704288258, "compression_ratio": 1.7186147186147187, "no_speech_prob": 5.771723408543039e-06}, {"id": 340, "seek": 135406, "start": 1374.58, "end": 1376.26, "text": " order of the relative keys.", "tokens": [1668, 295, 264, 4972, 9317, 13], "temperature": 0.0, "avg_logprob": -0.2701762704288258, "compression_ratio": 1.7186147186147187, "no_speech_prob": 5.771723408543039e-06}, {"id": 341, "seek": 135406, "start": 1376.26, "end": 1379.1399999999999, "text": " But I mean, usually people just use them as key value pairs.", "tokens": [583, 286, 914, 11, 2673, 561, 445, 764, 552, 382, 2141, 2158, 15494, 13], "temperature": 0.0, "avg_logprob": -0.2701762704288258, "compression_ratio": 1.7186147186147187, "no_speech_prob": 5.771723408543039e-06}, {"id": 342, "seek": 135406, "start": 1379.1399999999999, "end": 1381.78, "text": " So I guess that would be kind of non standard.", "tokens": [407, 286, 2041, 300, 576, 312, 733, 295, 2107, 3832, 13], "temperature": 0.0, "avg_logprob": -0.2701762704288258, "compression_ratio": 1.7186147186147187, "no_speech_prob": 5.771723408543039e-06}, {"id": 343, "seek": 138178, "start": 1381.78, "end": 1387.3, "text": " Maybe we should clarify, so I chose a dict to store the parameters.", "tokens": [2704, 321, 820, 17594, 11, 370, 286, 5111, 257, 12569, 281, 3531, 264, 9834, 13], "temperature": 0.0, "avg_logprob": -0.2055109106976053, "compression_ratio": 1.6944444444444444, "no_speech_prob": 1.1420378541515674e-05}, {"id": 344, "seek": 138178, "start": 1387.3, "end": 1393.34, "text": " And when you use a dict, you get the side effect that all of the things in the dict", "tokens": [400, 562, 291, 764, 257, 12569, 11, 291, 483, 264, 1252, 1802, 300, 439, 295, 264, 721, 294, 264, 12569], "temperature": 0.0, "avg_logprob": -0.2055109106976053, "compression_ratio": 1.6944444444444444, "no_speech_prob": 1.1420378541515674e-05}, {"id": 345, "seek": 138178, "start": 1393.34, "end": 1396.7, "text": " are always sorted by key alphabetically.", "tokens": [366, 1009, 25462, 538, 2141, 23339, 984, 13], "temperature": 0.0, "avg_logprob": -0.2055109106976053, "compression_ratio": 1.6944444444444444, "no_speech_prob": 1.1420378541515674e-05}, {"id": 346, "seek": 138178, "start": 1396.7, "end": 1402.1, "text": " So if you really cared about the order of your params, then that's not really possible", "tokens": [407, 498, 291, 534, 19779, 466, 264, 1668, 295, 428, 971, 4070, 11, 550, 300, 311, 406, 534, 1944], "temperature": 0.0, "avg_logprob": -0.2055109106976053, "compression_ratio": 1.6944444444444444, "no_speech_prob": 1.1420378541515674e-05}, {"id": 347, "seek": 138178, "start": 1402.1, "end": 1403.1, "text": " with my package.", "tokens": [365, 452, 7372, 13], "temperature": 0.0, "avg_logprob": -0.2055109106976053, "compression_ratio": 1.6944444444444444, "no_speech_prob": 1.1420378541515674e-05}, {"id": 348, "seek": 138178, "start": 1403.1, "end": 1405.66, "text": " But I don't think that's a real use case.", "tokens": [583, 286, 500, 380, 519, 300, 311, 257, 957, 764, 1389, 13], "temperature": 0.0, "avg_logprob": -0.2055109106976053, "compression_ratio": 1.6944444444444444, "no_speech_prob": 1.1420378541515674e-05}, {"id": 349, "seek": 138178, "start": 1405.66, "end": 1410.36, "text": " Yeah, the only use case that I can see where this could be a problem is if you're trying", "tokens": [865, 11, 264, 787, 764, 1389, 300, 286, 393, 536, 689, 341, 727, 312, 257, 1154, 307, 498, 291, 434, 1382], "temperature": 0.0, "avg_logprob": -0.2055109106976053, "compression_ratio": 1.6944444444444444, "no_speech_prob": 1.1420378541515674e-05}, {"id": 350, "seek": 141036, "start": 1410.36, "end": 1416.8999999999999, "text": " to compare the URL you had at the beginning with the stringified version of your app URL,", "tokens": [281, 6794, 264, 12905, 291, 632, 412, 264, 2863, 365, 264, 6798, 2587, 3037, 295, 428, 724, 12905, 11], "temperature": 0.0, "avg_logprob": -0.26464660524383304, "compression_ratio": 1.6616541353383458, "no_speech_prob": 1.9947274267906323e-06}, {"id": 351, "seek": 141036, "start": 1416.8999999999999, "end": 1421.82, "text": " then if the order of keys are different, then you're gonna say, Oh, well, these are different.", "tokens": [550, 498, 264, 1668, 295, 9317, 366, 819, 11, 550, 291, 434, 799, 584, 11, 876, 11, 731, 11, 613, 366, 819, 13], "temperature": 0.0, "avg_logprob": -0.26464660524383304, "compression_ratio": 1.6616541353383458, "no_speech_prob": 1.9947274267906323e-06}, {"id": 352, "seek": 141036, "start": 1421.82, "end": 1424.1, "text": " Let's refresh the page or something.", "tokens": [961, 311, 15134, 264, 3028, 420, 746, 13], "temperature": 0.0, "avg_logprob": -0.26464660524383304, "compression_ratio": 1.6616541353383458, "no_speech_prob": 1.9947274267906323e-06}, {"id": 353, "seek": 141036, "start": 1424.1, "end": 1425.1, "text": " I don't know.", "tokens": [286, 500, 380, 458, 13], "temperature": 0.0, "avg_logprob": -0.26464660524383304, "compression_ratio": 1.6616541353383458, "no_speech_prob": 1.9947274267906323e-06}, {"id": 354, "seek": 141036, "start": 1425.1, "end": 1426.34, "text": " And in that case, you have a problem.", "tokens": [400, 294, 300, 1389, 11, 291, 362, 257, 1154, 13], "temperature": 0.0, "avg_logprob": -0.26464660524383304, "compression_ratio": 1.6616541353383458, "no_speech_prob": 1.9947274267906323e-06}, {"id": 355, "seek": 141036, "start": 1426.34, "end": 1428.3799999999999, "text": " But other than that, yeah.", "tokens": [583, 661, 813, 300, 11, 1338, 13], "temperature": 0.0, "avg_logprob": -0.26464660524383304, "compression_ratio": 1.6616541353383458, "no_speech_prob": 1.9947274267906323e-06}, {"id": 356, "seek": 141036, "start": 1428.3799999999999, "end": 1429.3799999999999, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.26464660524383304, "compression_ratio": 1.6616541353383458, "no_speech_prob": 1.9947274267906323e-06}, {"id": 357, "seek": 141036, "start": 1429.3799999999999, "end": 1434.9799999999998, "text": " But if you wanted to do something like having only ampersand, having five ampersands in", "tokens": [583, 498, 291, 1415, 281, 360, 746, 411, 1419, 787, 18648, 433, 474, 11, 1419, 1732, 18648, 433, 2967, 294], "temperature": 0.0, "avg_logprob": -0.26464660524383304, "compression_ratio": 1.6616541353383458, "no_speech_prob": 1.9947274267906323e-06}, {"id": 358, "seek": 141036, "start": 1434.9799999999998, "end": 1439.26, "text": " a row in a query parameter, that's a valid URL.", "tokens": [257, 5386, 294, 257, 14581, 13075, 11, 300, 311, 257, 7363, 12905, 13], "temperature": 0.0, "avg_logprob": -0.26464660524383304, "compression_ratio": 1.6616541353383458, "no_speech_prob": 1.9947274267906323e-06}, {"id": 359, "seek": 143926, "start": 1439.26, "end": 1445.86, "text": " According to the URL spec, but not meaningful for your package.", "tokens": [7328, 281, 264, 12905, 1608, 11, 457, 406, 10995, 337, 428, 7372, 13], "temperature": 0.0, "avg_logprob": -0.3165679599927819, "compression_ratio": 1.5, "no_speech_prob": 5.223448897595517e-05}, {"id": 360, "seek": 143926, "start": 1445.86, "end": 1448.3, "text": " Exactly.", "tokens": [7587, 13], "temperature": 0.0, "avg_logprob": -0.3165679599927819, "compression_ratio": 1.5, "no_speech_prob": 5.223448897595517e-05}, {"id": 361, "seek": 143926, "start": 1448.3, "end": 1452.22, "text": " I tried to like think of every edge case.", "tokens": [286, 3031, 281, 411, 519, 295, 633, 4691, 1389, 13], "temperature": 0.0, "avg_logprob": -0.3165679599927819, "compression_ratio": 1.5, "no_speech_prob": 5.223448897595517e-05}, {"id": 362, "seek": 143926, "start": 1452.22, "end": 1458.78, "text": " It's like if you have a lot of ampersands in a row, what does that mean?", "tokens": [467, 311, 411, 498, 291, 362, 257, 688, 295, 18648, 433, 2967, 294, 257, 5386, 11, 437, 775, 300, 914, 30], "temperature": 0.0, "avg_logprob": -0.3165679599927819, "compression_ratio": 1.5, "no_speech_prob": 5.223448897595517e-05}, {"id": 363, "seek": 143926, "start": 1458.78, "end": 1462.7, "text": " And there are two possible interpretations.", "tokens": [400, 456, 366, 732, 1944, 37547, 13], "temperature": 0.0, "avg_logprob": -0.3165679599927819, "compression_ratio": 1.5, "no_speech_prob": 5.223448897595517e-05}, {"id": 364, "seek": 143926, "start": 1462.7, "end": 1468.22, "text": " One is that you just ignore all of the extra ampersands, like they like don't contribute", "tokens": [1485, 307, 300, 291, 445, 11200, 439, 295, 264, 2857, 18648, 433, 2967, 11, 411, 436, 411, 500, 380, 10586], "temperature": 0.0, "avg_logprob": -0.3165679599927819, "compression_ratio": 1.5, "no_speech_prob": 5.223448897595517e-05}, {"id": 365, "seek": 143926, "start": 1468.22, "end": 1469.22, "text": " to anything.", "tokens": [281, 1340, 13], "temperature": 0.0, "avg_logprob": -0.3165679599927819, "compression_ratio": 1.5, "no_speech_prob": 5.223448897595517e-05}, {"id": 366, "seek": 146922, "start": 1469.22, "end": 1474.98, "text": " You could also see it as they contain a key that is the empty string, and the value is", "tokens": [509, 727, 611, 536, 309, 382, 436, 5304, 257, 2141, 300, 307, 264, 6707, 6798, 11, 293, 264, 2158, 307], "temperature": 0.0, "avg_logprob": -0.32900056278004364, "compression_ratio": 1.675977653631285, "no_speech_prob": 3.6685296436189674e-06}, {"id": 367, "seek": 146922, "start": 1474.98, "end": 1476.46, "text": " also the empty string.", "tokens": [611, 264, 6707, 6798, 13], "temperature": 0.0, "avg_logprob": -0.32900056278004364, "compression_ratio": 1.675977653631285, "no_speech_prob": 3.6685296436189674e-06}, {"id": 368, "seek": 146922, "start": 1476.46, "end": 1482.18, "text": " So you have like an empty parameter between each ampersand.", "tokens": [407, 291, 362, 411, 364, 6707, 13075, 1296, 1184, 18648, 433, 474, 13], "temperature": 0.0, "avg_logprob": -0.32900056278004364, "compression_ratio": 1.675977653631285, "no_speech_prob": 3.6685296436189674e-06}, {"id": 369, "seek": 146922, "start": 1482.18, "end": 1484.5, "text": " But that's not really useful.", "tokens": [583, 300, 311, 406, 534, 4420, 13], "temperature": 0.0, "avg_logprob": -0.32900056278004364, "compression_ratio": 1.675977653631285, "no_speech_prob": 3.6685296436189674e-06}, {"id": 370, "seek": 146922, "start": 1484.5, "end": 1491.3, "text": " So a list of dict key is empty string and value is a list of five empty strings.", "tokens": [407, 257, 1329, 295, 12569, 2141, 307, 6707, 6798, 293, 2158, 307, 257, 1329, 295, 1732, 6707, 13985, 13], "temperature": 0.0, "avg_logprob": -0.32900056278004364, "compression_ratio": 1.675977653631285, "no_speech_prob": 3.6685296436189674e-06}, {"id": 371, "seek": 146922, "start": 1491.3, "end": 1492.3, "text": " Perfect.", "tokens": [10246, 13], "temperature": 0.0, "avg_logprob": -0.32900056278004364, "compression_ratio": 1.675977653631285, "no_speech_prob": 3.6685296436189674e-06}, {"id": 372, "seek": 146922, "start": 1492.3, "end": 1493.3, "text": " Love that.", "tokens": [5956, 300, 13], "temperature": 0.0, "avg_logprob": -0.32900056278004364, "compression_ratio": 1.675977653631285, "no_speech_prob": 3.6685296436189674e-06}, {"id": 373, "seek": 149330, "start": 1493.3, "end": 1499.3799999999999, "text": " So how many ampersands do you need to have so that ampersand becomes a key?", "tokens": [407, 577, 867, 18648, 433, 2967, 360, 291, 643, 281, 362, 370, 300, 18648, 433, 474, 3643, 257, 2141, 30], "temperature": 0.0, "avg_logprob": -0.3520448082371762, "compression_ratio": 1.5654761904761905, "no_speech_prob": 5.490751391334925e-06}, {"id": 374, "seek": 149330, "start": 1499.3799999999999, "end": 1501.02, "text": " Right.", "tokens": [1779, 13], "temperature": 0.0, "avg_logprob": -0.3520448082371762, "compression_ratio": 1.5654761904761905, "no_speech_prob": 5.490751391334925e-06}, {"id": 375, "seek": 149330, "start": 1501.02, "end": 1509.98, "text": " I do support like ampersand equals ampersand, which is like key is empty string, value is", "tokens": [286, 360, 1406, 411, 18648, 433, 474, 6915, 18648, 433, 474, 11, 597, 307, 411, 2141, 307, 6707, 6798, 11, 2158, 307], "temperature": 0.0, "avg_logprob": -0.3520448082371762, "compression_ratio": 1.5654761904761905, "no_speech_prob": 5.490751391334925e-06}, {"id": 376, "seek": 149330, "start": 1509.98, "end": 1511.34, "text": " empty string.", "tokens": [6707, 6798, 13], "temperature": 0.0, "avg_logprob": -0.3520448082371762, "compression_ratio": 1.5654761904761905, "no_speech_prob": 5.490751391334925e-06}, {"id": 377, "seek": 149330, "start": 1511.34, "end": 1522.22, "text": " Because that's what the JavaScript version did and that's what WG spec said.", "tokens": [1436, 300, 311, 437, 264, 15778, 3037, 630, 293, 300, 311, 437, 343, 38, 1608, 848, 13], "temperature": 0.0, "avg_logprob": -0.3520448082371762, "compression_ratio": 1.5654761904761905, "no_speech_prob": 5.490751391334925e-06}, {"id": 378, "seek": 152222, "start": 1522.22, "end": 1529.5, "text": " That seems very wise to use like these sort of JavaScript standards because there are", "tokens": [663, 2544, 588, 10829, 281, 764, 411, 613, 1333, 295, 15778, 7787, 570, 456, 366], "temperature": 0.0, "avg_logprob": -0.26333050198025176, "compression_ratio": 1.5565610859728507, "no_speech_prob": 2.6425479973113397e-06}, {"id": 379, "seek": 152222, "start": 1529.5, "end": 1533.78, "text": " just so many people using this that it supported their main use cases.", "tokens": [445, 370, 867, 561, 1228, 341, 300, 309, 8104, 641, 2135, 764, 3331, 13], "temperature": 0.0, "avg_logprob": -0.26333050198025176, "compression_ratio": 1.5565610859728507, "no_speech_prob": 2.6425479973113397e-06}, {"id": 380, "seek": 152222, "start": 1533.78, "end": 1536.26, "text": " So it seems like a smart thing to piggyback on.", "tokens": [407, 309, 2544, 411, 257, 4069, 551, 281, 39349, 3207, 322, 13], "temperature": 0.0, "avg_logprob": -0.26333050198025176, "compression_ratio": 1.5565610859728507, "no_speech_prob": 2.6425479973113397e-06}, {"id": 381, "seek": 152222, "start": 1536.26, "end": 1544.02, "text": " I mean, as far as like the elm URL type being extremely unopinionated and as you say, just", "tokens": [286, 914, 11, 382, 1400, 382, 411, 264, 806, 76, 12905, 2010, 885, 4664, 517, 404, 259, 313, 770, 293, 382, 291, 584, 11, 445], "temperature": 0.0, "avg_logprob": -0.26333050198025176, "compression_ratio": 1.5565610859728507, "no_speech_prob": 2.6425479973113397e-06}, {"id": 382, "seek": 152222, "start": 1544.02, "end": 1547.26, "text": " saying there is no standard, so here's a string.", "tokens": [1566, 456, 307, 572, 3832, 11, 370, 510, 311, 257, 6798, 13], "temperature": 0.0, "avg_logprob": -0.26333050198025176, "compression_ratio": 1.5565610859728507, "no_speech_prob": 2.6425479973113397e-06}, {"id": 383, "seek": 154726, "start": 1547.26, "end": 1553.18, "text": " It seems reasonable because if it didn't do that, then you get sort of backed into a corner", "tokens": [467, 2544, 10585, 570, 498, 309, 994, 380, 360, 300, 11, 550, 291, 483, 1333, 295, 20391, 666, 257, 4538], "temperature": 0.0, "avg_logprob": -0.20689431913606413, "compression_ratio": 1.6129032258064515, "no_speech_prob": 2.0580321233865106e-06}, {"id": 384, "seek": 154726, "start": 1553.18, "end": 1556.34, "text": " as a user where those use cases are impossible.", "tokens": [382, 257, 4195, 689, 729, 764, 3331, 366, 6243, 13], "temperature": 0.0, "avg_logprob": -0.20689431913606413, "compression_ratio": 1.6129032258064515, "no_speech_prob": 2.0580321233865106e-06}, {"id": 385, "seek": 154726, "start": 1556.34, "end": 1565.26, "text": " Whereas if your user land package, elm app URL has a strong and very reasonable opinion", "tokens": [13813, 498, 428, 4195, 2117, 7372, 11, 806, 76, 724, 12905, 575, 257, 2068, 293, 588, 10585, 4800], "temperature": 0.0, "avg_logprob": -0.20689431913606413, "compression_ratio": 1.6129032258064515, "no_speech_prob": 2.0580321233865106e-06}, {"id": 386, "seek": 154726, "start": 1565.26, "end": 1569.78, "text": " about that, then people don't need to use it if it doesn't support their use case.", "tokens": [466, 300, 11, 550, 561, 500, 380, 643, 281, 764, 309, 498, 309, 1177, 380, 1406, 641, 764, 1389, 13], "temperature": 0.0, "avg_logprob": -0.20689431913606413, "compression_ratio": 1.6129032258064515, "no_speech_prob": 2.0580321233865106e-06}, {"id": 387, "seek": 154726, "start": 1569.78, "end": 1571.9, "text": " So I think it's a nice state of things.", "tokens": [407, 286, 519, 309, 311, 257, 1481, 1785, 295, 721, 13], "temperature": 0.0, "avg_logprob": -0.20689431913606413, "compression_ratio": 1.6129032258064515, "no_speech_prob": 2.0580321233865106e-06}, {"id": 388, "seek": 157190, "start": 1571.9, "end": 1577.42, "text": " And it's also kind of nice that elm doesn't have any built in assumptions about you using", "tokens": [400, 309, 311, 611, 733, 295, 1481, 300, 806, 76, 1177, 380, 362, 604, 3094, 294, 17695, 466, 291, 1228], "temperature": 0.0, "avg_logprob": -0.19705263156335331, "compression_ratio": 1.6075949367088607, "no_speech_prob": 1.0348474006605102e-06}, {"id": 389, "seek": 157190, "start": 1577.42, "end": 1585.3000000000002, "text": " the official core elm URL package, except for the URL type, which is just the sort of", "tokens": [264, 4783, 4965, 806, 76, 12905, 7372, 11, 3993, 337, 264, 12905, 2010, 11, 597, 307, 445, 264, 1333, 295], "temperature": 0.0, "avg_logprob": -0.19705263156335331, "compression_ratio": 1.6075949367088607, "no_speech_prob": 1.0348474006605102e-06}, {"id": 390, "seek": 157190, "start": 1585.3000000000002, "end": 1586.88, "text": " raw URL value.", "tokens": [8936, 12905, 2158, 13], "temperature": 0.0, "avg_logprob": -0.19705263156335331, "compression_ratio": 1.6075949367088607, "no_speech_prob": 1.0348474006605102e-06}, {"id": 391, "seek": 157190, "start": 1586.88, "end": 1590.3400000000001, "text": " You don't need to use a URL parser if you don't want to, which is quite nice.", "tokens": [509, 500, 380, 643, 281, 764, 257, 12905, 21156, 260, 498, 291, 500, 380, 528, 281, 11, 597, 307, 1596, 1481, 13], "temperature": 0.0, "avg_logprob": -0.19705263156335331, "compression_ratio": 1.6075949367088607, "no_speech_prob": 1.0348474006605102e-06}, {"id": 392, "seek": 157190, "start": 1590.3400000000001, "end": 1592.3400000000001, "text": " That is pretty nice.", "tokens": [663, 307, 1238, 1481, 13], "temperature": 0.0, "avg_logprob": -0.19705263156335331, "compression_ratio": 1.6075949367088607, "no_speech_prob": 1.0348474006605102e-06}, {"id": 393, "seek": 157190, "start": 1592.3400000000001, "end": 1599.74, "text": " So if you wanted to grab those query parameters and parse them into your route in your sort", "tokens": [407, 498, 291, 1415, 281, 4444, 729, 14581, 9834, 293, 48377, 552, 666, 428, 7955, 294, 428, 1333], "temperature": 0.0, "avg_logprob": -0.19705263156335331, "compression_ratio": 1.6075949367088607, "no_speech_prob": 1.0348474006605102e-06}, {"id": 394, "seek": 159974, "start": 1599.74, "end": 1606.3, "text": " of parsing function that you write as a user, pulling off values from your app URL record,", "tokens": [295, 21156, 278, 2445, 300, 291, 2464, 382, 257, 4195, 11, 8407, 766, 4190, 490, 428, 724, 12905, 2136, 11], "temperature": 0.0, "avg_logprob": -0.2793116392912688, "compression_ratio": 1.5, "no_speech_prob": 4.784603788721142e-06}, {"id": 395, "seek": 159974, "start": 1606.3, "end": 1608.42, "text": " what would that look like?", "tokens": [437, 576, 300, 574, 411, 30], "temperature": 0.0, "avg_logprob": -0.2793116392912688, "compression_ratio": 1.5, "no_speech_prob": 4.784603788721142e-06}, {"id": 396, "seek": 159974, "start": 1608.42, "end": 1614.38, "text": " There are two different use cases for query parameters, in my opinion.", "tokens": [821, 366, 732, 819, 764, 3331, 337, 14581, 9834, 11, 294, 452, 4800, 13], "temperature": 0.0, "avg_logprob": -0.2793116392912688, "compression_ratio": 1.5, "no_speech_prob": 4.784603788721142e-06}, {"id": 397, "seek": 159974, "start": 1614.38, "end": 1618.86, "text": " Either you have just a couple of them that you support.", "tokens": [13746, 291, 362, 445, 257, 1916, 295, 552, 300, 291, 1406, 13], "temperature": 0.0, "avg_logprob": -0.2793116392912688, "compression_ratio": 1.5, "no_speech_prob": 4.784603788721142e-06}, {"id": 398, "seek": 159974, "start": 1618.86, "end": 1626.18, "text": " You could have one called sort to decide in which way a product listing is sorted and", "tokens": [509, 727, 362, 472, 1219, 1333, 281, 4536, 294, 597, 636, 257, 1674, 22161, 307, 25462, 293], "temperature": 0.0, "avg_logprob": -0.2793116392912688, "compression_ratio": 1.5, "no_speech_prob": 4.784603788721142e-06}, {"id": 399, "seek": 162618, "start": 1626.18, "end": 1633.22, "text": " one called size, if you want to filter your products by size and so on.", "tokens": [472, 1219, 2744, 11, 498, 291, 528, 281, 6608, 428, 3383, 538, 2744, 293, 370, 322, 13], "temperature": 0.0, "avg_logprob": -0.253947689419701, "compression_ratio": 1.6407766990291262, "no_speech_prob": 3.4114600566681474e-05}, {"id": 400, "seek": 162618, "start": 1633.22, "end": 1637.98, "text": " Or you could have a more dynamic use case where you kind of want to take all of the", "tokens": [1610, 291, 727, 362, 257, 544, 8546, 764, 1389, 689, 291, 733, 295, 528, 281, 747, 439, 295, 264], "temperature": 0.0, "avg_logprob": -0.253947689419701, "compression_ratio": 1.6407766990291262, "no_speech_prob": 3.4114600566681474e-05}, {"id": 401, "seek": 162618, "start": 1637.98, "end": 1647.18, "text": " parameters as a dictionary, look them up dynamically according to something defined in the backend", "tokens": [9834, 382, 257, 25890, 11, 574, 552, 493, 43492, 4650, 281, 746, 7642, 294, 264, 38087], "temperature": 0.0, "avg_logprob": -0.253947689419701, "compression_ratio": 1.6407766990291262, "no_speech_prob": 3.4114600566681474e-05}, {"id": 402, "seek": 162618, "start": 1647.18, "end": 1648.54, "text": " or whatever.", "tokens": [420, 2035, 13], "temperature": 0.0, "avg_logprob": -0.253947689419701, "compression_ratio": 1.6407766990291262, "no_speech_prob": 3.4114600566681474e-05}, {"id": 403, "seek": 162618, "start": 1648.54, "end": 1651.5800000000002, "text": " So that latter use case where you take all of them, that's quite easy.", "tokens": [407, 300, 18481, 764, 1389, 689, 291, 747, 439, 295, 552, 11, 300, 311, 1596, 1858, 13], "temperature": 0.0, "avg_logprob": -0.253947689419701, "compression_ratio": 1.6407766990291262, "no_speech_prob": 3.4114600566681474e-05}, {"id": 404, "seek": 165158, "start": 1651.58, "end": 1657.78, "text": " You just take URL dot query parameters and then off you go.", "tokens": [509, 445, 747, 12905, 5893, 14581, 9834, 293, 550, 766, 291, 352, 13], "temperature": 0.0, "avg_logprob": -0.26572157631457693, "compression_ratio": 1.5469613259668509, "no_speech_prob": 4.1764247725950554e-05}, {"id": 405, "seek": 165158, "start": 1657.78, "end": 1664.3, "text": " But if you just want to pluck off a couple of them, then in this function where you do", "tokens": [583, 498, 291, 445, 528, 281, 41514, 766, 257, 1916, 295, 552, 11, 550, 294, 341, 2445, 689, 291, 360], "temperature": 0.0, "avg_logprob": -0.26572157631457693, "compression_ratio": 1.5469613259668509, "no_speech_prob": 4.1764247725950554e-05}, {"id": 406, "seek": 165158, "start": 1664.3, "end": 1670.36, "text": " your pattern match on the path, we talked about what you should return.", "tokens": [428, 5102, 2995, 322, 264, 3100, 11, 321, 2825, 466, 437, 291, 820, 2736, 13], "temperature": 0.0, "avg_logprob": -0.26572157631457693, "compression_ratio": 1.5469613259668509, "no_speech_prob": 4.1764247725950554e-05}, {"id": 407, "seek": 165158, "start": 1670.36, "end": 1675.62, "text": " Should you return a route or should you return a maybe route?", "tokens": [6454, 291, 2736, 257, 7955, 420, 820, 291, 2736, 257, 1310, 7955, 30], "temperature": 0.0, "avg_logprob": -0.26572157631457693, "compression_ratio": 1.5469613259668509, "no_speech_prob": 4.1764247725950554e-05}, {"id": 408, "seek": 167562, "start": 1675.62, "end": 1681.58, "text": " And I recommend returning a maybe route because that fits really well with doing dictionary", "tokens": [400, 286, 2748, 12678, 257, 1310, 7955, 570, 300, 9001, 534, 731, 365, 884, 25890], "temperature": 0.0, "avg_logprob": -0.28886304276712826, "compression_ratio": 1.7713004484304933, "no_speech_prob": 1.1619459655776154e-05}, {"id": 409, "seek": 167562, "start": 1681.58, "end": 1684.78, "text": " lookups in this query parameters dictionary.", "tokens": [574, 7528, 294, 341, 14581, 9834, 25890, 13], "temperature": 0.0, "avg_logprob": -0.28886304276712826, "compression_ratio": 1.7713004484304933, "no_speech_prob": 1.1619459655776154e-05}, {"id": 410, "seek": 167562, "start": 1684.78, "end": 1691.9399999999998, "text": " So then you could do like dic dot get and then the name of the parameter like sort or", "tokens": [407, 550, 291, 727, 360, 411, 14285, 5893, 483, 293, 550, 264, 1315, 295, 264, 13075, 411, 1333, 420], "temperature": 0.0, "avg_logprob": -0.28886304276712826, "compression_ratio": 1.7713004484304933, "no_speech_prob": 1.1619459655776154e-05}, {"id": 411, "seek": 167562, "start": 1691.9399999999998, "end": 1693.4399999999998, "text": " size.", "tokens": [2744, 13], "temperature": 0.0, "avg_logprob": -0.28886304276712826, "compression_ratio": 1.7713004484304933, "no_speech_prob": 1.1619459655776154e-05}, {"id": 412, "seek": 167562, "start": 1693.4399999999998, "end": 1699.7199999999998, "text": " And then you say URL dot query parameters and then you get maybe list of strings because", "tokens": [400, 550, 291, 584, 12905, 5893, 14581, 9834, 293, 550, 291, 483, 1310, 1329, 295, 13985, 570], "temperature": 0.0, "avg_logprob": -0.28886304276712826, "compression_ratio": 1.7713004484304933, "no_speech_prob": 1.1619459655776154e-05}, {"id": 413, "seek": 167562, "start": 1699.7199999999998, "end": 1704.54, "text": " there's nothing stopping you adding like multiple sort parameters in the URL.", "tokens": [456, 311, 1825, 12767, 291, 5127, 411, 3866, 1333, 9834, 294, 264, 12905, 13], "temperature": 0.0, "avg_logprob": -0.28886304276712826, "compression_ratio": 1.7713004484304933, "no_speech_prob": 1.1619459655776154e-05}, {"id": 414, "seek": 170454, "start": 1704.54, "end": 1711.74, "text": " And then my recommendation is to always pipe to maybe and then list dot head, which is", "tokens": [400, 550, 452, 11879, 307, 281, 1009, 11240, 281, 1310, 293, 550, 1329, 5893, 1378, 11, 597, 307], "temperature": 0.0, "avg_logprob": -0.25969373399966234, "compression_ratio": 1.66796875, "no_speech_prob": 1.3394973393587861e-05}, {"id": 415, "seek": 170454, "start": 1711.74, "end": 1717.02, "text": " a somewhat convenient way of just deciding that, okay, we're going to take the first", "tokens": [257, 8344, 10851, 636, 295, 445, 17990, 300, 11, 1392, 11, 321, 434, 516, 281, 747, 264, 700], "temperature": 0.0, "avg_logprob": -0.25969373399966234, "compression_ratio": 1.66796875, "no_speech_prob": 1.3394973393587861e-05}, {"id": 416, "seek": 170454, "start": 1717.02, "end": 1719.1399999999999, "text": " one in case there are multiple.", "tokens": [472, 294, 1389, 456, 366, 3866, 13], "temperature": 0.0, "avg_logprob": -0.25969373399966234, "compression_ratio": 1.66796875, "no_speech_prob": 1.3394973393587861e-05}, {"id": 417, "seek": 170454, "start": 1719.1399999999999, "end": 1725.62, "text": " Now finally, I have this maybe string, which is like the sorting order or whatever.", "tokens": [823, 2721, 11, 286, 362, 341, 1310, 6798, 11, 597, 307, 411, 264, 32411, 1668, 420, 2035, 13], "temperature": 0.0, "avg_logprob": -0.25969373399966234, "compression_ratio": 1.66796875, "no_speech_prob": 1.3394973393587861e-05}, {"id": 418, "seek": 170454, "start": 1725.62, "end": 1728.12, "text": " And you can choose what you want to do with that string.", "tokens": [400, 291, 393, 2826, 437, 291, 528, 281, 360, 365, 300, 6798, 13], "temperature": 0.0, "avg_logprob": -0.25969373399966234, "compression_ratio": 1.66796875, "no_speech_prob": 1.3394973393587861e-05}, {"id": 419, "seek": 170454, "start": 1728.12, "end": 1734.3, "text": " You could like store it in your route or page type, or you could parse it further.", "tokens": [509, 727, 411, 3531, 309, 294, 428, 7955, 420, 3028, 2010, 11, 420, 291, 727, 48377, 309, 3052, 13], "temperature": 0.0, "avg_logprob": -0.25969373399966234, "compression_ratio": 1.66796875, "no_speech_prob": 1.3394973393587861e-05}, {"id": 420, "seek": 173430, "start": 1734.3, "end": 1738.1, "text": " You could switch on it or case on it.", "tokens": [509, 727, 3679, 322, 309, 420, 1389, 322, 309, 13], "temperature": 0.0, "avg_logprob": -0.2308722133130099, "compression_ratio": 1.838862559241706, "no_speech_prob": 4.092046310688602e-06}, {"id": 421, "seek": 173430, "start": 1738.1, "end": 1740.74, "text": " Is it the string descending?", "tokens": [1119, 309, 264, 6798, 40182, 30], "temperature": 0.0, "avg_logprob": -0.2308722133130099, "compression_ratio": 1.838862559241706, "no_speech_prob": 4.092046310688602e-06}, {"id": 422, "seek": 173430, "start": 1740.74, "end": 1741.74, "text": " Then it's okay.", "tokens": [1396, 309, 311, 1392, 13], "temperature": 0.0, "avg_logprob": -0.2308722133130099, "compression_ratio": 1.838862559241706, "no_speech_prob": 4.092046310688602e-06}, {"id": 423, "seek": 173430, "start": 1741.74, "end": 1742.74, "text": " Is it ascending?", "tokens": [1119, 309, 15526, 2029, 30], "temperature": 0.0, "avg_logprob": -0.2308722133130099, "compression_ratio": 1.838862559241706, "no_speech_prob": 4.092046310688602e-06}, {"id": 424, "seek": 173430, "start": 1742.74, "end": 1743.74, "text": " It's okay.", "tokens": [467, 311, 1392, 13], "temperature": 0.0, "avg_logprob": -0.2308722133130099, "compression_ratio": 1.838862559241706, "no_speech_prob": 4.092046310688602e-06}, {"id": 425, "seek": 173430, "start": 1743.74, "end": 1749.06, "text": " If it's something else, then you could like decide to drop it or whatever makes sense.", "tokens": [759, 309, 311, 746, 1646, 11, 550, 291, 727, 411, 4536, 281, 3270, 309, 420, 2035, 1669, 2020, 13], "temperature": 0.0, "avg_logprob": -0.2308722133130099, "compression_ratio": 1.838862559241706, "no_speech_prob": 4.092046310688602e-06}, {"id": 426, "seek": 173430, "start": 1749.06, "end": 1750.06, "text": " Right.", "tokens": [1779, 13], "temperature": 0.0, "avg_logprob": -0.2308722133130099, "compression_ratio": 1.838862559241706, "no_speech_prob": 4.092046310688602e-06}, {"id": 427, "seek": 173430, "start": 1750.06, "end": 1751.8, "text": " You could turn it into a default value.", "tokens": [509, 727, 1261, 309, 666, 257, 7576, 2158, 13], "temperature": 0.0, "avg_logprob": -0.2308722133130099, "compression_ratio": 1.838862559241706, "no_speech_prob": 4.092046310688602e-06}, {"id": 428, "seek": 173430, "start": 1751.8, "end": 1758.1399999999999, "text": " If you needed a default value, you could take it from a string to a custom type if you wanted", "tokens": [759, 291, 2978, 257, 7576, 2158, 11, 291, 727, 747, 309, 490, 257, 6798, 281, 257, 2375, 2010, 498, 291, 1415], "temperature": 0.0, "avg_logprob": -0.2308722133130099, "compression_ratio": 1.838862559241706, "no_speech_prob": 4.092046310688602e-06}, {"id": 429, "seek": 173430, "start": 1758.1399999999999, "end": 1761.86, "text": " to have ascending and descending as custom types.", "tokens": [281, 362, 15526, 2029, 293, 40182, 382, 2375, 3467, 13], "temperature": 0.0, "avg_logprob": -0.2308722133130099, "compression_ratio": 1.838862559241706, "no_speech_prob": 4.092046310688602e-06}, {"id": 430, "seek": 176186, "start": 1761.86, "end": 1767.1, "text": " And in which case you have to say, if it's something I don't understand, then probably", "tokens": [400, 294, 597, 1389, 291, 362, 281, 584, 11, 498, 309, 311, 746, 286, 500, 380, 1223, 11, 550, 1391], "temperature": 0.0, "avg_logprob": -0.20597992772641388, "compression_ratio": 1.6288209606986899, "no_speech_prob": 3.6326716212897736e-07}, {"id": 431, "seek": 176186, "start": 1767.1, "end": 1771.78, "text": " go with the default option because URL parsing is a little bit interesting because the concept", "tokens": [352, 365, 264, 7576, 3614, 570, 12905, 21156, 278, 307, 257, 707, 857, 1880, 570, 264, 3410], "temperature": 0.0, "avg_logprob": -0.20597992772641388, "compression_ratio": 1.6288209606986899, "no_speech_prob": 3.6326716212897736e-07}, {"id": 432, "seek": 176186, "start": 1771.78, "end": 1780.86, "text": " of parsing implies that something could fail to parse, in which case there are some errors.", "tokens": [295, 21156, 278, 18779, 300, 746, 727, 3061, 281, 48377, 11, 294, 597, 1389, 456, 366, 512, 13603, 13], "temperature": 0.0, "avg_logprob": -0.20597992772641388, "compression_ratio": 1.6288209606986899, "no_speech_prob": 3.6326716212897736e-07}, {"id": 433, "seek": 176186, "start": 1780.86, "end": 1784.78, "text": " But there's not really a way to show errors to the user.", "tokens": [583, 456, 311, 406, 534, 257, 636, 281, 855, 13603, 281, 264, 4195, 13], "temperature": 0.0, "avg_logprob": -0.20597992772641388, "compression_ratio": 1.6288209606986899, "no_speech_prob": 3.6326716212897736e-07}, {"id": 434, "seek": 176186, "start": 1784.78, "end": 1786.86, "text": " At least that's not usually what you want.", "tokens": [1711, 1935, 300, 311, 406, 2673, 437, 291, 528, 13], "temperature": 0.0, "avg_logprob": -0.20597992772641388, "compression_ratio": 1.6288209606986899, "no_speech_prob": 3.6326716212897736e-07}, {"id": 435, "seek": 178686, "start": 1786.86, "end": 1796.78, "text": " Like if you say sort equals D, but it's supposed to be D-E-S-C, you probably just want to ignore", "tokens": [1743, 498, 291, 584, 1333, 6915, 413, 11, 457, 309, 311, 3442, 281, 312, 413, 12, 36, 12, 50, 12, 34, 11, 291, 1391, 445, 528, 281, 11200], "temperature": 0.0, "avg_logprob": -0.20780838082689757, "compression_ratio": 1.5856573705179282, "no_speech_prob": 1.3925388202551403e-06}, {"id": 436, "seek": 178686, "start": 1796.78, "end": 1797.78, "text": " that.", "tokens": [300, 13], "temperature": 0.0, "avg_logprob": -0.20780838082689757, "compression_ratio": 1.5856573705179282, "no_speech_prob": 1.3925388202551403e-06}, {"id": 437, "seek": 178686, "start": 1797.78, "end": 1802.3799999999999, "text": " Although I suppose if you wanted to like parse into a result type and say something that's", "tokens": [5780, 286, 7297, 498, 291, 1415, 281, 411, 48377, 666, 257, 1874, 2010, 293, 584, 746, 300, 311], "temperature": 0.0, "avg_logprob": -0.20780838082689757, "compression_ratio": 1.5856573705179282, "no_speech_prob": 1.3925388202551403e-06}, {"id": 438, "seek": 178686, "start": 1802.3799999999999, "end": 1804.5, "text": " wrong with the error, you could.", "tokens": [2085, 365, 264, 6713, 11, 291, 727, 13], "temperature": 0.0, "avg_logprob": -0.20780838082689757, "compression_ratio": 1.5856573705179282, "no_speech_prob": 1.3925388202551403e-06}, {"id": 439, "seek": 178686, "start": 1804.5, "end": 1811.1399999999999, "text": " But I guess the way users are using the URL is they're usually not hand editing it.", "tokens": [583, 286, 2041, 264, 636, 5022, 366, 1228, 264, 12905, 307, 436, 434, 2673, 406, 1011, 10000, 309, 13], "temperature": 0.0, "avg_logprob": -0.20780838082689757, "compression_ratio": 1.5856573705179282, "no_speech_prob": 1.3925388202551403e-06}, {"id": 440, "seek": 178686, "start": 1811.1399999999999, "end": 1813.4599999999998, "text": " So you don't necessarily want to give them error feedback.", "tokens": [407, 291, 500, 380, 4725, 528, 281, 976, 552, 6713, 5824, 13], "temperature": 0.0, "avg_logprob": -0.20780838082689757, "compression_ratio": 1.5856573705179282, "no_speech_prob": 1.3925388202551403e-06}, {"id": 441, "seek": 178686, "start": 1813.4599999999998, "end": 1815.28, "text": " They're like clicking links.", "tokens": [814, 434, 411, 9697, 6123, 13], "temperature": 0.0, "avg_logprob": -0.20780838082689757, "compression_ratio": 1.5856573705179282, "no_speech_prob": 1.3925388202551403e-06}, {"id": 442, "seek": 181528, "start": 1815.28, "end": 1820.7, "text": " So you just want to assume they're probably going to have a valid URL and just fall back", "tokens": [407, 291, 445, 528, 281, 6552, 436, 434, 1391, 516, 281, 362, 257, 7363, 12905, 293, 445, 2100, 646], "temperature": 0.0, "avg_logprob": -0.2629797546951859, "compression_ratio": 1.5887096774193548, "no_speech_prob": 1.2288664947845973e-06}, {"id": 443, "seek": 181528, "start": 1820.7, "end": 1821.78, "text": " if not.", "tokens": [498, 406, 13], "temperature": 0.0, "avg_logprob": -0.2629797546951859, "compression_ratio": 1.5887096774193548, "no_speech_prob": 1.2288664947845973e-06}, {"id": 444, "seek": 181528, "start": 1821.78, "end": 1826.02, "text": " It's only power users that edit URLs, I think.", "tokens": [467, 311, 787, 1347, 5022, 300, 8129, 43267, 11, 286, 519, 13], "temperature": 0.0, "avg_logprob": -0.2629797546951859, "compression_ratio": 1.5887096774193548, "no_speech_prob": 1.2288664947845973e-06}, {"id": 445, "seek": 181528, "start": 1826.02, "end": 1832.86, "text": " So I think it's fine to drop bad values and like arbitrarily choose to take the first", "tokens": [407, 286, 519, 309, 311, 2489, 281, 3270, 1578, 4190, 293, 411, 19071, 3289, 2826, 281, 747, 264, 700], "temperature": 0.0, "avg_logprob": -0.2629797546951859, "compression_ratio": 1.5887096774193548, "no_speech_prob": 1.2288664947845973e-06}, {"id": 446, "seek": 181528, "start": 1832.86, "end": 1838.3799999999999, "text": " one if there are duplicates, because power users will like understand that, hmm, okay,", "tokens": [472, 498, 456, 366, 17154, 1024, 11, 570, 1347, 5022, 486, 411, 1223, 300, 11, 16478, 11, 1392, 11], "temperature": 0.0, "avg_logprob": -0.2629797546951859, "compression_ratio": 1.5887096774193548, "no_speech_prob": 1.2288664947845973e-06}, {"id": 447, "seek": 181528, "start": 1838.3799999999999, "end": 1841.26, "text": " it's ambiguous if I do two of these.", "tokens": [309, 311, 39465, 498, 286, 360, 732, 295, 613, 13], "temperature": 0.0, "avg_logprob": -0.2629797546951859, "compression_ratio": 1.5887096774193548, "no_speech_prob": 1.2288664947845973e-06}, {"id": 448, "seek": 181528, "start": 1841.26, "end": 1844.1399999999999, "text": " So it doesn't really matter what you do.", "tokens": [407, 309, 1177, 380, 534, 1871, 437, 291, 360, 13], "temperature": 0.0, "avg_logprob": -0.2629797546951859, "compression_ratio": 1.5887096774193548, "no_speech_prob": 1.2288664947845973e-06}, {"id": 449, "seek": 184414, "start": 1844.14, "end": 1851.74, "text": " It is kind of cool how this pattern is like, the code is so simple and easy to understand.", "tokens": [467, 307, 733, 295, 1627, 577, 341, 5102, 307, 411, 11, 264, 3089, 307, 370, 2199, 293, 1858, 281, 1223, 13], "temperature": 0.0, "avg_logprob": -0.22469156597732404, "compression_ratio": 1.6788617886178863, "no_speech_prob": 3.4663011660995835e-07}, {"id": 450, "seek": 184414, "start": 1851.74, "end": 1855.8000000000002, "text": " Like in my opinion, it's easier to understand than an Elm URL parser.", "tokens": [1743, 294, 452, 4800, 11, 309, 311, 3571, 281, 1223, 813, 364, 2699, 76, 12905, 21156, 260, 13], "temperature": 0.0, "avg_logprob": -0.22469156597732404, "compression_ratio": 1.6788617886178863, "no_speech_prob": 3.4663011660995835e-07}, {"id": 451, "seek": 184414, "start": 1855.8000000000002, "end": 1861.26, "text": " Not even thinking about like the parser type with the two type variables, like the code", "tokens": [1726, 754, 1953, 466, 411, 264, 21156, 260, 2010, 365, 264, 732, 2010, 9102, 11, 411, 264, 3089], "temperature": 0.0, "avg_logprob": -0.22469156597732404, "compression_ratio": 1.6788617886178863, "no_speech_prob": 3.4663011660995835e-07}, {"id": 452, "seek": 184414, "start": 1861.26, "end": 1864.3000000000002, "text": " itself is easier for me to follow.", "tokens": [2564, 307, 3571, 337, 385, 281, 1524, 13], "temperature": 0.0, "avg_logprob": -0.22469156597732404, "compression_ratio": 1.6788617886178863, "no_speech_prob": 3.4663011660995835e-07}, {"id": 453, "seek": 184414, "start": 1864.3000000000002, "end": 1868.0200000000002, "text": " But at the same time, it's more powerful.", "tokens": [583, 412, 264, 912, 565, 11, 309, 311, 544, 4005, 13], "temperature": 0.0, "avg_logprob": -0.22469156597732404, "compression_ratio": 1.6788617886178863, "no_speech_prob": 3.4663011660995835e-07}, {"id": 454, "seek": 184414, "start": 1868.0200000000002, "end": 1873.7800000000002, "text": " Like for example, if you wanted to parse it into a result type and give some error with", "tokens": [1743, 337, 1365, 11, 498, 291, 1415, 281, 48377, 309, 666, 257, 1874, 2010, 293, 976, 512, 6713, 365], "temperature": 0.0, "avg_logprob": -0.22469156597732404, "compression_ratio": 1.6788617886178863, "no_speech_prob": 3.4663011660995835e-07}, {"id": 455, "seek": 187378, "start": 1873.78, "end": 1881.1, "text": " messages saying, you know, sort was an invalid value, and then send that in your bug tracker", "tokens": [7897, 1566, 11, 291, 458, 11, 1333, 390, 364, 34702, 2158, 11, 293, 550, 2845, 300, 294, 428, 7426, 37516], "temperature": 0.0, "avg_logprob": -0.24000845042937394, "compression_ratio": 1.6226415094339623, "no_speech_prob": 1.8162178321290412e-06}, {"id": 456, "seek": 187378, "start": 1881.1, "end": 1886.42, "text": " to just say like, just for your information, this is something that went wrong in the URL,", "tokens": [281, 445, 584, 411, 11, 445, 337, 428, 1589, 11, 341, 307, 746, 300, 1437, 2085, 294, 264, 12905, 11], "temperature": 0.0, "avg_logprob": -0.24000845042937394, "compression_ratio": 1.6226415094339623, "no_speech_prob": 1.8162178321290412e-06}, {"id": 457, "seek": 187378, "start": 1886.42, "end": 1889.54, "text": " and then fall back to no URL, you could do that.", "tokens": [293, 550, 2100, 646, 281, 572, 12905, 11, 291, 727, 360, 300, 13], "temperature": 0.0, "avg_logprob": -0.24000845042937394, "compression_ratio": 1.6226415094339623, "no_speech_prob": 1.8162178321290412e-06}, {"id": 458, "seek": 187378, "start": 1889.54, "end": 1895.1399999999999, "text": " Whereas I wouldn't know what to do with the Elm URL parser for a more sophisticated use", "tokens": [13813, 286, 2759, 380, 458, 437, 281, 360, 365, 264, 2699, 76, 12905, 21156, 260, 337, 257, 544, 16950, 764], "temperature": 0.0, "avg_logprob": -0.24000845042937394, "compression_ratio": 1.6226415094339623, "no_speech_prob": 1.8162178321290412e-06}, {"id": 459, "seek": 187378, "start": 1895.1399999999999, "end": 1896.1399999999999, "text": " case.", "tokens": [1389, 13], "temperature": 0.0, "avg_logprob": -0.24000845042937394, "compression_ratio": 1.6226415094339623, "no_speech_prob": 1.8162178321290412e-06}, {"id": 460, "seek": 187378, "start": 1896.1399999999999, "end": 1900.66, "text": " But like really, my imagination just starts firing at all these possibilities with this", "tokens": [583, 411, 534, 11, 452, 12938, 445, 3719, 16045, 412, 439, 613, 12178, 365, 341], "temperature": 0.0, "avg_logprob": -0.24000845042937394, "compression_ratio": 1.6226415094339623, "no_speech_prob": 1.8162178321290412e-06}, {"id": 461, "seek": 187378, "start": 1900.66, "end": 1901.66, "text": " simple pattern.", "tokens": [2199, 5102, 13], "temperature": 0.0, "avg_logprob": -0.24000845042937394, "compression_ratio": 1.6226415094339623, "no_speech_prob": 1.8162178321290412e-06}, {"id": 462, "seek": 190166, "start": 1901.66, "end": 1913.9, "text": " I remember that with Elm URL, you can put parsers for the query using the operators.", "tokens": [286, 1604, 300, 365, 2699, 76, 12905, 11, 291, 393, 829, 21156, 433, 337, 264, 14581, 1228, 264, 19077, 13], "temperature": 0.0, "avg_logprob": -0.30038860176183, "compression_ratio": 1.6440677966101696, "no_speech_prob": 1.328764028585283e-06}, {"id": 463, "seek": 190166, "start": 1913.9, "end": 1920.9, "text": " So you have this less than question mark, greater than symbol or operator, and then", "tokens": [407, 291, 362, 341, 1570, 813, 1168, 1491, 11, 5044, 813, 5986, 420, 12973, 11, 293, 550], "temperature": 0.0, "avg_logprob": -0.30038860176183, "compression_ratio": 1.6440677966101696, "no_speech_prob": 1.328764028585283e-06}, {"id": 464, "seek": 190166, "start": 1920.9, "end": 1923.5, "text": " you can put a query parser, right?", "tokens": [291, 393, 829, 257, 14581, 21156, 260, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.30038860176183, "compression_ratio": 1.6440677966101696, "no_speech_prob": 1.328764028585283e-06}, {"id": 465, "seek": 190166, "start": 1923.5, "end": 1928.26, "text": " And I'm guessing that you can map that one, you can use parser and then, and that means", "tokens": [400, 286, 478, 17939, 300, 291, 393, 4471, 300, 472, 11, 291, 393, 764, 21156, 260, 293, 550, 11, 293, 300, 1355], "temperature": 0.0, "avg_logprob": -0.30038860176183, "compression_ratio": 1.6440677966101696, "no_speech_prob": 1.328764028585283e-06}, {"id": 466, "seek": 192826, "start": 1928.26, "end": 1934.46, "text": " that you can fail the query or the felt this parsing, if it doesn't match descending or", "tokens": [300, 291, 393, 3061, 264, 14581, 420, 264, 2762, 341, 21156, 278, 11, 498, 309, 1177, 380, 2995, 40182, 420], "temperature": 0.0, "avg_logprob": -0.3107154467874322, "compression_ratio": 1.6544715447154472, "no_speech_prob": 2.0261234112695092e-06}, {"id": 467, "seek": 192826, "start": 1934.46, "end": 1936.02, "text": " ascending, right?", "tokens": [15526, 2029, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.3107154467874322, "compression_ratio": 1.6544715447154472, "no_speech_prob": 2.0261234112695092e-06}, {"id": 468, "seek": 192826, "start": 1936.02, "end": 1938.3799999999999, "text": " Yeah, that's totally possible.", "tokens": [865, 11, 300, 311, 3879, 1944, 13], "temperature": 0.0, "avg_logprob": -0.3107154467874322, "compression_ratio": 1.6544715447154472, "no_speech_prob": 2.0261234112695092e-06}, {"id": 469, "seek": 192826, "start": 1938.3799999999999, "end": 1939.3799999999999, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.3107154467874322, "compression_ratio": 1.6544715447154472, "no_speech_prob": 2.0261234112695092e-06}, {"id": 470, "seek": 192826, "start": 1939.3799999999999, "end": 1942.28, "text": " But the thing is, usually you do parser that one off.", "tokens": [583, 264, 551, 307, 11, 2673, 291, 360, 21156, 260, 300, 472, 766, 13], "temperature": 0.0, "avg_logprob": -0.3107154467874322, "compression_ratio": 1.6544715447154472, "no_speech_prob": 2.0261234112695092e-06}, {"id": 471, "seek": 192826, "start": 1942.28, "end": 1947.78, "text": " So if this thing fails, then it just goes on and tries a following parser.", "tokens": [407, 498, 341, 551, 18199, 11, 550, 309, 445, 1709, 322, 293, 9898, 257, 3480, 21156, 260, 13], "temperature": 0.0, "avg_logprob": -0.3107154467874322, "compression_ratio": 1.6544715447154472, "no_speech_prob": 2.0261234112695092e-06}, {"id": 472, "seek": 192826, "start": 1947.78, "end": 1952.5, "text": " And in which case you don't have an error message, because you just says, okay, well,", "tokens": [400, 294, 597, 1389, 291, 500, 380, 362, 364, 6713, 3636, 11, 570, 291, 445, 1619, 11, 1392, 11, 731, 11], "temperature": 0.0, "avg_logprob": -0.3107154467874322, "compression_ratio": 1.6544715447154472, "no_speech_prob": 2.0261234112695092e-06}, {"id": 473, "seek": 192826, "start": 1952.5, "end": 1953.5, "text": " this one doesn't match.", "tokens": [341, 472, 1177, 380, 2995, 13], "temperature": 0.0, "avg_logprob": -0.3107154467874322, "compression_ratio": 1.6544715447154472, "no_speech_prob": 2.0261234112695092e-06}, {"id": 474, "seek": 192826, "start": 1953.5, "end": 1954.92, "text": " Let's go to the next one.", "tokens": [961, 311, 352, 281, 264, 958, 472, 13], "temperature": 0.0, "avg_logprob": -0.3107154467874322, "compression_ratio": 1.6544715447154472, "no_speech_prob": 2.0261234112695092e-06}, {"id": 475, "seek": 195492, "start": 1954.92, "end": 1962.8400000000001, "text": " So yeah, with with an Elm app URLs approach, it is easier to make nicer error messages,", "tokens": [407, 1338, 11, 365, 365, 364, 2699, 76, 724, 43267, 3109, 11, 309, 307, 3571, 281, 652, 22842, 6713, 7897, 11], "temperature": 0.0, "avg_logprob": -0.24886370229197072, "compression_ratio": 1.6228070175438596, "no_speech_prob": 6.786721655771544e-07}, {"id": 476, "seek": 195492, "start": 1962.8400000000001, "end": 1963.94, "text": " if you want to.", "tokens": [498, 291, 528, 281, 13], "temperature": 0.0, "avg_logprob": -0.24886370229197072, "compression_ratio": 1.6228070175438596, "no_speech_prob": 6.786721655771544e-07}, {"id": 477, "seek": 195492, "start": 1963.94, "end": 1968.46, "text": " I could also imagine I'm trying to think of a use case where you would want this, but", "tokens": [286, 727, 611, 3811, 286, 478, 1382, 281, 519, 295, 257, 764, 1389, 689, 291, 576, 528, 341, 11, 457], "temperature": 0.0, "avg_logprob": -0.24886370229197072, "compression_ratio": 1.6228070175438596, "no_speech_prob": 6.786721655771544e-07}, {"id": 478, "seek": 195492, "start": 1968.46, "end": 1975.66, "text": " I could imagine combining certain combinations of query parameters with with path segments", "tokens": [286, 727, 3811, 21928, 1629, 21267, 295, 14581, 9834, 365, 365, 3100, 19904], "temperature": 0.0, "avg_logprob": -0.24886370229197072, "compression_ratio": 1.6228070175438596, "no_speech_prob": 6.786721655771544e-07}, {"id": 479, "seek": 195492, "start": 1975.66, "end": 1982.78, "text": " to say, these two combinations, go together and kind of pull out the the maybes from from", "tokens": [281, 584, 11, 613, 732, 21267, 11, 352, 1214, 293, 733, 295, 2235, 484, 264, 264, 815, 6446, 490, 490], "temperature": 0.0, "avg_logprob": -0.24886370229197072, "compression_ratio": 1.6228070175438596, "no_speech_prob": 6.786721655771544e-07}, {"id": 480, "seek": 198278, "start": 1982.78, "end": 1989.1, "text": " types and turn them into more nuanced variants that they tell you exactly the types that", "tokens": [3467, 293, 1261, 552, 666, 544, 45115, 21669, 300, 436, 980, 291, 2293, 264, 3467, 300], "temperature": 0.0, "avg_logprob": -0.22281363351004466, "compression_ratio": 1.6420233463035019, "no_speech_prob": 1.7061776134141837e-06}, {"id": 481, "seek": 198278, "start": 1989.1, "end": 1990.1, "text": " go together.", "tokens": [352, 1214, 13], "temperature": 0.0, "avg_logprob": -0.22281363351004466, "compression_ratio": 1.6420233463035019, "no_speech_prob": 1.7061776134141837e-06}, {"id": 482, "seek": 198278, "start": 1990.1, "end": 1995.8999999999999, "text": " Of course, like, again, the problem is that you don't want URLs to be able to fail easily,", "tokens": [2720, 1164, 11, 411, 11, 797, 11, 264, 1154, 307, 300, 291, 500, 380, 528, 43267, 281, 312, 1075, 281, 3061, 3612, 11], "temperature": 0.0, "avg_logprob": -0.22281363351004466, "compression_ratio": 1.6420233463035019, "no_speech_prob": 1.7061776134141837e-06}, {"id": 483, "seek": 198278, "start": 1995.8999999999999, "end": 1999.8999999999999, "text": " you want them to be very resilient and fault tolerant.", "tokens": [291, 528, 552, 281, 312, 588, 23699, 293, 7441, 45525, 13], "temperature": 0.0, "avg_logprob": -0.22281363351004466, "compression_ratio": 1.6420233463035019, "no_speech_prob": 1.7061776134141837e-06}, {"id": 484, "seek": 198278, "start": 1999.8999999999999, "end": 2006.1, "text": " So usually, we, we actually do end up having maybes often in things like query parameters,", "tokens": [407, 2673, 11, 321, 11, 321, 767, 360, 917, 493, 1419, 815, 6446, 2049, 294, 721, 411, 14581, 9834, 11], "temperature": 0.0, "avg_logprob": -0.22281363351004466, "compression_ratio": 1.6420233463035019, "no_speech_prob": 1.7061776134141837e-06}, {"id": 485, "seek": 198278, "start": 2006.1, "end": 2012.54, "text": " because the segments need to match us, we tend to be strict about segments and say,", "tokens": [570, 264, 19904, 643, 281, 2995, 505, 11, 321, 3928, 281, 312, 10910, 466, 19904, 293, 584, 11], "temperature": 0.0, "avg_logprob": -0.22281363351004466, "compression_ratio": 1.6420233463035019, "no_speech_prob": 1.7061776134141837e-06}, {"id": 486, "seek": 201254, "start": 2012.54, "end": 2019.1, "text": " hey, if, if you go to slash products with a Z, instead of products with an S, then we're", "tokens": [4177, 11, 498, 11, 498, 291, 352, 281, 17330, 3383, 365, 257, 1176, 11, 2602, 295, 3383, 365, 364, 318, 11, 550, 321, 434], "temperature": 0.0, "avg_logprob": -0.24821689281057804, "compression_ratio": 1.6540284360189574, "no_speech_prob": 2.0261184090486495e-06}, {"id": 487, "seek": 201254, "start": 2019.1, "end": 2020.82, "text": " not going to handle that.", "tokens": [406, 516, 281, 4813, 300, 13], "temperature": 0.0, "avg_logprob": -0.24821689281057804, "compression_ratio": 1.6540284360189574, "no_speech_prob": 2.0261184090486495e-06}, {"id": 488, "seek": 201254, "start": 2020.82, "end": 2025.6599999999999, "text": " But with query parameters, you want to just gracefully fall back to default.", "tokens": [583, 365, 14581, 9834, 11, 291, 528, 281, 445, 10042, 2277, 2100, 646, 281, 7576, 13], "temperature": 0.0, "avg_logprob": -0.24821689281057804, "compression_ratio": 1.6540284360189574, "no_speech_prob": 2.0261184090486495e-06}, {"id": 489, "seek": 201254, "start": 2025.6599999999999, "end": 2031.18, "text": " So yeah, for instance, I can imagine that in some cases, that's not true.", "tokens": [407, 1338, 11, 337, 5197, 11, 286, 393, 3811, 300, 294, 512, 3331, 11, 300, 311, 406, 2074, 13], "temperature": 0.0, "avg_logprob": -0.24821689281057804, "compression_ratio": 1.6540284360189574, "no_speech_prob": 2.0261184090486495e-06}, {"id": 490, "seek": 201254, "start": 2031.18, "end": 2035.5, "text": " For instance, like we like to say product slash and then a product slack or product", "tokens": [1171, 5197, 11, 411, 321, 411, 281, 584, 1674, 17330, 293, 550, 257, 1674, 29767, 420, 1674], "temperature": 0.0, "avg_logprob": -0.24821689281057804, "compression_ratio": 1.6540284360189574, "no_speech_prob": 2.0261184090486495e-06}, {"id": 491, "seek": 203550, "start": 2035.5, "end": 2043.66, "text": " ID, but you can also have imagine that there's a query parameter for the product ID or for", "tokens": [7348, 11, 457, 291, 393, 611, 362, 3811, 300, 456, 311, 257, 14581, 13075, 337, 264, 1674, 7348, 420, 337], "temperature": 0.0, "avg_logprob": -0.24894622276569234, "compression_ratio": 1.5619469026548674, "no_speech_prob": 2.4824450974847423e-06}, {"id": 492, "seek": 203550, "start": 2043.66, "end": 2044.66, "text": " a user.", "tokens": [257, 4195, 13], "temperature": 0.0, "avg_logprob": -0.24894622276569234, "compression_ratio": 1.5619469026548674, "no_speech_prob": 2.4824450974847423e-06}, {"id": 493, "seek": 203550, "start": 2044.66, "end": 2050.26, "text": " So imagine you have slash user, question mark, ID equals something.", "tokens": [407, 3811, 291, 362, 17330, 4195, 11, 1168, 1491, 11, 7348, 6915, 746, 13], "temperature": 0.0, "avg_logprob": -0.24894622276569234, "compression_ratio": 1.5619469026548674, "no_speech_prob": 2.4824450974847423e-06}, {"id": 494, "seek": 203550, "start": 2050.26, "end": 2055.22, "text": " And that like, for some reason, like maybe legacy reasons, because this needs to support", "tokens": [400, 300, 411, 11, 337, 512, 1778, 11, 411, 1310, 11711, 4112, 11, 570, 341, 2203, 281, 1406], "temperature": 0.0, "avg_logprob": -0.24894622276569234, "compression_ratio": 1.5619469026548674, "no_speech_prob": 2.4824450974847423e-06}, {"id": 495, "seek": 203550, "start": 2055.22, "end": 2063.78, "text": " some URL pattern that was meant that was designed years ago, like this ID should never be absent.", "tokens": [512, 12905, 5102, 300, 390, 4140, 300, 390, 4761, 924, 2057, 11, 411, 341, 7348, 820, 1128, 312, 25185, 13], "temperature": 0.0, "avg_logprob": -0.24894622276569234, "compression_ratio": 1.5619469026548674, "no_speech_prob": 2.4824450974847423e-06}, {"id": 496, "seek": 206378, "start": 2063.78, "end": 2069.6600000000003, "text": " So if you don't have it, then you probably want to lead the user to an error page saying,", "tokens": [407, 498, 291, 500, 380, 362, 309, 11, 550, 291, 1391, 528, 281, 1477, 264, 4195, 281, 364, 6713, 3028, 1566, 11], "temperature": 0.0, "avg_logprob": -0.2649897033093022, "compression_ratio": 1.5608695652173914, "no_speech_prob": 5.989263058836514e-07}, {"id": 497, "seek": 206378, "start": 2069.6600000000003, "end": 2072.46, "text": " hey, the ID is necessary.", "tokens": [4177, 11, 264, 7348, 307, 4818, 13], "temperature": 0.0, "avg_logprob": -0.2649897033093022, "compression_ratio": 1.5608695652173914, "no_speech_prob": 5.989263058836514e-07}, {"id": 498, "seek": 206378, "start": 2072.46, "end": 2076.78, "text": " And that would be easier with Elm app URL compared to Elm URL.", "tokens": [400, 300, 576, 312, 3571, 365, 2699, 76, 724, 12905, 5347, 281, 2699, 76, 12905, 13], "temperature": 0.0, "avg_logprob": -0.2649897033093022, "compression_ratio": 1.5608695652173914, "no_speech_prob": 5.989263058836514e-07}, {"id": 499, "seek": 206378, "start": 2076.78, "end": 2084.42, "text": " So another thing, I've thought a lot about URL parsing stuff in the context of Elm pages,", "tokens": [407, 1071, 551, 11, 286, 600, 1194, 257, 688, 466, 12905, 21156, 278, 1507, 294, 264, 4319, 295, 2699, 76, 7183, 11], "temperature": 0.0, "avg_logprob": -0.2649897033093022, "compression_ratio": 1.5608695652173914, "no_speech_prob": 5.989263058836514e-07}, {"id": 500, "seek": 206378, "start": 2084.42, "end": 2093.38, "text": " Elm pages has file based router and, and Elm, Elm pages supports sort of like splat routes", "tokens": [2699, 76, 7183, 575, 3991, 2361, 22492, 293, 11, 293, 2699, 76, 11, 2699, 76, 7183, 9346, 1333, 295, 411, 4732, 267, 18242], "temperature": 0.0, "avg_logprob": -0.2649897033093022, "compression_ratio": 1.5608695652173914, "no_speech_prob": 5.989263058836514e-07}, {"id": 501, "seek": 209338, "start": 2093.38, "end": 2097.98, "text": " like catch all routes and, and optional route segments.", "tokens": [411, 3745, 439, 18242, 293, 11, 293, 17312, 7955, 19904, 13], "temperature": 0.0, "avg_logprob": -0.22078884009158972, "compression_ratio": 1.6578947368421053, "no_speech_prob": 9.721471769807977e-07}, {"id": 502, "seek": 209338, "start": 2097.98, "end": 2103.02, "text": " As I was designing, you know, the approach for that, one of the things I was looking", "tokens": [1018, 286, 390, 14685, 11, 291, 458, 11, 264, 3109, 337, 300, 11, 472, 295, 264, 721, 286, 390, 1237], "temperature": 0.0, "avg_logprob": -0.22078884009158972, "compression_ratio": 1.6578947368421053, "no_speech_prob": 9.721471769807977e-07}, {"id": 503, "seek": 209338, "start": 2103.02, "end": 2108.62, "text": " at with like the Elm URL parser was, well, how would I do catch all routes.", "tokens": [412, 365, 411, 264, 2699, 76, 12905, 21156, 260, 390, 11, 731, 11, 577, 576, 286, 360, 3745, 439, 18242, 13], "temperature": 0.0, "avg_logprob": -0.22078884009158972, "compression_ratio": 1.6578947368421053, "no_speech_prob": 9.721471769807977e-07}, {"id": 504, "seek": 209338, "start": 2108.62, "end": 2113.6600000000003, "text": " And what I ended up realizing is that it doesn't support catch all routes.", "tokens": [400, 437, 286, 4590, 493, 16734, 307, 300, 309, 1177, 380, 1406, 3745, 439, 18242, 13], "temperature": 0.0, "avg_logprob": -0.22078884009158972, "compression_ratio": 1.6578947368421053, "no_speech_prob": 9.721471769807977e-07}, {"id": 505, "seek": 209338, "start": 2113.6600000000003, "end": 2118.54, "text": " And so essentially, like under the hood for for the file based router I built into Elm", "tokens": [400, 370, 4476, 11, 411, 833, 264, 13376, 337, 337, 264, 3991, 2361, 22492, 286, 3094, 666, 2699, 76], "temperature": 0.0, "avg_logprob": -0.22078884009158972, "compression_ratio": 1.6578947368421053, "no_speech_prob": 9.721471769807977e-07}, {"id": 506, "seek": 211854, "start": 2118.54, "end": 2124.86, "text": " pages, I was not able to use Elm URL to parse the URLs because it didn't support what to", "tokens": [7183, 11, 286, 390, 406, 1075, 281, 764, 2699, 76, 12905, 281, 48377, 264, 43267, 570, 309, 994, 380, 1406, 437, 281], "temperature": 0.0, "avg_logprob": -0.24588116732510654, "compression_ratio": 1.5799086757990868, "no_speech_prob": 1.7603385913389502e-06}, {"id": 507, "seek": 211854, "start": 2124.86, "end": 2131.3, "text": " me seems like this very common standard use case of having a catch all route like having,", "tokens": [385, 2544, 411, 341, 588, 2689, 3832, 764, 1389, 295, 1419, 257, 3745, 439, 7955, 411, 1419, 11], "temperature": 0.0, "avg_logprob": -0.24588116732510654, "compression_ratio": 1.5799086757990868, "no_speech_prob": 1.7603385913389502e-06}, {"id": 508, "seek": 211854, "start": 2131.3, "end": 2141.9, "text": " you know, github.com slash repo, user slash repo slash branch slash blob slash some file", "tokens": [291, 458, 11, 290, 355, 836, 13, 1112, 17330, 49040, 11, 4195, 17330, 49040, 17330, 9819, 17330, 46115, 17330, 512, 3991], "temperature": 0.0, "avg_logprob": -0.24588116732510654, "compression_ratio": 1.5799086757990868, "no_speech_prob": 1.7603385913389502e-06}, {"id": 509, "seek": 211854, "start": 2141.9, "end": 2147.66, "text": " path, which is a, an arbitrary number of segments that seems like very normal.", "tokens": [3100, 11, 597, 307, 257, 11, 364, 23211, 1230, 295, 19904, 300, 2544, 411, 588, 2710, 13], "temperature": 0.0, "avg_logprob": -0.24588116732510654, "compression_ratio": 1.5799086757990868, "no_speech_prob": 1.7603385913389502e-06}, {"id": 510, "seek": 214766, "start": 2147.66, "end": 2154.7, "text": " But with your pattern in Elm app URL, it's pretty trivial, you just use these standard", "tokens": [583, 365, 428, 5102, 294, 2699, 76, 724, 12905, 11, 309, 311, 1238, 26703, 11, 291, 445, 764, 613, 3832], "temperature": 0.0, "avg_logprob": -0.2572362319282863, "compression_ratio": 1.5373831775700935, "no_speech_prob": 4.565897597785806e-06}, {"id": 511, "seek": 214766, "start": 2154.7, "end": 2158.06, "text": " pattern matching tools of list pattern matching.", "tokens": [5102, 14324, 3873, 295, 1329, 5102, 14324, 13], "temperature": 0.0, "avg_logprob": -0.2572362319282863, "compression_ratio": 1.5373831775700935, "no_speech_prob": 4.565897597785806e-06}, {"id": 512, "seek": 214766, "start": 2158.06, "end": 2159.06, "text": " That is a good point.", "tokens": [663, 307, 257, 665, 935, 13], "temperature": 0.0, "avg_logprob": -0.2572362319282863, "compression_ratio": 1.5373831775700935, "no_speech_prob": 4.565897597785806e-06}, {"id": 513, "seek": 214766, "start": 2159.06, "end": 2165.2599999999998, "text": " I'm not sure if I've ever made an app with like any number of segments at the end or", "tokens": [286, 478, 406, 988, 498, 286, 600, 1562, 1027, 364, 724, 365, 411, 604, 1230, 295, 19904, 412, 264, 917, 420], "temperature": 0.0, "avg_logprob": -0.2572362319282863, "compression_ratio": 1.5373831775700935, "no_speech_prob": 4.565897597785806e-06}, {"id": 514, "seek": 214766, "start": 2165.2599999999998, "end": 2166.2599999999998, "text": " something.", "tokens": [746, 13], "temperature": 0.0, "avg_logprob": -0.2572362319282863, "compression_ratio": 1.5373831775700935, "no_speech_prob": 4.565897597785806e-06}, {"id": 515, "seek": 214766, "start": 2166.2599999999998, "end": 2171.5, "text": " But now that you say it, I wouldn't know how to do it with the URL parsers.", "tokens": [583, 586, 300, 291, 584, 309, 11, 286, 2759, 380, 458, 577, 281, 360, 309, 365, 264, 12905, 21156, 433, 13], "temperature": 0.0, "avg_logprob": -0.2572362319282863, "compression_ratio": 1.5373831775700935, "no_speech_prob": 4.565897597785806e-06}, {"id": 516, "seek": 217150, "start": 2171.5, "end": 2177.86, "text": " I think you would have to go back to the URL type, right and do it yourself.", "tokens": [286, 519, 291, 576, 362, 281, 352, 646, 281, 264, 12905, 2010, 11, 558, 293, 360, 309, 1803, 13], "temperature": 0.0, "avg_logprob": -0.2877430536050712, "compression_ratio": 1.671875, "no_speech_prob": 7.112308821888291e-07}, {"id": 517, "seek": 217150, "start": 2177.86, "end": 2180.34, "text": " Yep, that's that's a that's a good experience.", "tokens": [7010, 11, 300, 311, 300, 311, 257, 300, 311, 257, 665, 1752, 13], "temperature": 0.0, "avg_logprob": -0.2877430536050712, "compression_ratio": 1.671875, "no_speech_prob": 7.112308821888291e-07}, {"id": 518, "seek": 217150, "start": 2180.34, "end": 2187.22, "text": " Yeah, I actually so I think I saw Simon posting something maybe this was like the seed of", "tokens": [865, 11, 286, 767, 370, 286, 519, 286, 1866, 13193, 15978, 746, 1310, 341, 390, 411, 264, 8871, 295], "temperature": 0.0, "avg_logprob": -0.2877430536050712, "compression_ratio": 1.671875, "no_speech_prob": 7.112308821888291e-07}, {"id": 519, "seek": 217150, "start": 2187.22, "end": 2188.78, "text": " this design for you.", "tokens": [341, 1715, 337, 291, 13], "temperature": 0.0, "avg_logprob": -0.2877430536050712, "compression_ratio": 1.671875, "no_speech_prob": 7.112308821888291e-07}, {"id": 520, "seek": 217150, "start": 2188.78, "end": 2194.5, "text": " But I think I saw you posting in response to somebody's question on slack about Oh,", "tokens": [583, 286, 519, 286, 1866, 291, 15978, 294, 4134, 281, 2618, 311, 1168, 322, 29767, 466, 876, 11], "temperature": 0.0, "avg_logprob": -0.2877430536050712, "compression_ratio": 1.671875, "no_speech_prob": 7.112308821888291e-07}, {"id": 521, "seek": 217150, "start": 2194.5, "end": 2198.58, "text": " you could actually like, handle URL parsing with this simple trick, you could just do", "tokens": [291, 727, 767, 411, 11, 4813, 12905, 21156, 278, 365, 341, 2199, 4282, 11, 291, 727, 445, 360], "temperature": 0.0, "avg_logprob": -0.2877430536050712, "compression_ratio": 1.671875, "no_speech_prob": 7.112308821888291e-07}, {"id": 522, "seek": 217150, "start": 2198.58, "end": 2199.78, "text": " a simple pattern match.", "tokens": [257, 2199, 5102, 2995, 13], "temperature": 0.0, "avg_logprob": -0.2877430536050712, "compression_ratio": 1.671875, "no_speech_prob": 7.112308821888291e-07}, {"id": 523, "seek": 219978, "start": 2199.78, "end": 2202.38, "text": " And I was like, Oh, yeah, you could couldn't you.", "tokens": [400, 286, 390, 411, 11, 876, 11, 1338, 11, 291, 727, 2809, 380, 291, 13], "temperature": 0.0, "avg_logprob": -0.2962507622264256, "compression_ratio": 1.578723404255319, "no_speech_prob": 1.505696900494513e-06}, {"id": 524, "seek": 219978, "start": 2202.38, "end": 2209.78, "text": " And then I quickly went in and cut out all of these regexes from the Elm pages generated", "tokens": [400, 550, 286, 2661, 1437, 294, 293, 1723, 484, 439, 295, 613, 1121, 3121, 279, 490, 264, 2699, 76, 7183, 10833], "temperature": 0.0, "avg_logprob": -0.2962507622264256, "compression_ratio": 1.578723404255319, "no_speech_prob": 1.505696900494513e-06}, {"id": 525, "seek": 219978, "start": 2209.78, "end": 2214.1800000000003, "text": " code for URL parsing and just turned it into a pattern match in the generated code.", "tokens": [3089, 337, 12905, 21156, 278, 293, 445, 3574, 309, 666, 257, 5102, 2995, 294, 264, 10833, 3089, 13], "temperature": 0.0, "avg_logprob": -0.2962507622264256, "compression_ratio": 1.578723404255319, "no_speech_prob": 1.505696900494513e-06}, {"id": 526, "seek": 219978, "start": 2214.1800000000003, "end": 2215.6200000000003, "text": " And it's great.", "tokens": [400, 309, 311, 869, 13], "temperature": 0.0, "avg_logprob": -0.2962507622264256, "compression_ratio": 1.578723404255319, "no_speech_prob": 1.505696900494513e-06}, {"id": 527, "seek": 219978, "start": 2215.6200000000003, "end": 2217.94, "text": " So thanks for that.", "tokens": [407, 3231, 337, 300, 13], "temperature": 0.0, "avg_logprob": -0.2962507622264256, "compression_ratio": 1.578723404255319, "no_speech_prob": 1.505696900494513e-06}, {"id": 528, "seek": 219978, "start": 2217.94, "end": 2226.34, "text": " So one thing where I think Elm app URL is maybe not as nice or like, it chooses a different", "tokens": [407, 472, 551, 689, 286, 519, 2699, 76, 724, 12905, 307, 1310, 406, 382, 1481, 420, 411, 11, 309, 25963, 257, 819], "temperature": 0.0, "avg_logprob": -0.2962507622264256, "compression_ratio": 1.578723404255319, "no_speech_prob": 1.505696900494513e-06}, {"id": 529, "seek": 219978, "start": 2226.34, "end": 2227.34, "text": " way of doing things.", "tokens": [636, 295, 884, 721, 13], "temperature": 0.0, "avg_logprob": -0.2962507622264256, "compression_ratio": 1.578723404255319, "no_speech_prob": 1.505696900494513e-06}, {"id": 530, "seek": 222734, "start": 2227.34, "end": 2231.7000000000003, "text": " In Elm URL, you could have segments, which are parsers, right?", "tokens": [682, 2699, 76, 12905, 11, 291, 727, 362, 19904, 11, 597, 366, 21156, 433, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.282507320619979, "compression_ratio": 1.7867298578199051, "no_speech_prob": 1.328768121311441e-06}, {"id": 531, "seek": 222734, "start": 2231.7000000000003, "end": 2233.5, "text": " And you can map them, right?", "tokens": [400, 291, 393, 4471, 552, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.282507320619979, "compression_ratio": 1.7867298578199051, "no_speech_prob": 1.328768121311441e-06}, {"id": 532, "seek": 222734, "start": 2233.5, "end": 2240.98, "text": " So you just like JSON decoding, you can map it, you just like maybe you can map it.", "tokens": [407, 291, 445, 411, 31828, 979, 8616, 11, 291, 393, 4471, 309, 11, 291, 445, 411, 1310, 291, 393, 4471, 309, 13], "temperature": 0.0, "avg_logprob": -0.282507320619979, "compression_ratio": 1.7867298578199051, "no_speech_prob": 1.328768121311441e-06}, {"id": 533, "seek": 222734, "start": 2240.98, "end": 2246.7000000000003, "text": " And for instance, you could have a custom type for a product ID or product slug, which", "tokens": [400, 337, 5197, 11, 291, 727, 362, 257, 2375, 2010, 337, 257, 1674, 7348, 420, 1674, 1061, 697, 11, 597], "temperature": 0.0, "avg_logprob": -0.282507320619979, "compression_ratio": 1.7867298578199051, "no_speech_prob": 1.328768121311441e-06}, {"id": 534, "seek": 222734, "start": 2246.7000000000003, "end": 2248.42, "text": " would not just be a string.", "tokens": [576, 406, 445, 312, 257, 6798, 13], "temperature": 0.0, "avg_logprob": -0.282507320619979, "compression_ratio": 1.7867298578199051, "no_speech_prob": 1.328768121311441e-06}, {"id": 535, "seek": 222734, "start": 2248.42, "end": 2253.9, "text": " And that you would have to do yourself in the patterns in the pattern matching, right,", "tokens": [400, 300, 291, 576, 362, 281, 360, 1803, 294, 264, 8294, 294, 264, 5102, 14324, 11, 558, 11], "temperature": 0.0, "avg_logprob": -0.282507320619979, "compression_ratio": 1.7867298578199051, "no_speech_prob": 1.328768121311441e-06}, {"id": 536, "seek": 225390, "start": 2253.9, "end": 2258.06, "text": " you would extract the product slug, and then it's just a string.", "tokens": [291, 576, 8947, 264, 1674, 1061, 697, 11, 293, 550, 309, 311, 445, 257, 6798, 13], "temperature": 0.0, "avg_logprob": -0.33283337343086317, "compression_ratio": 1.6511627906976745, "no_speech_prob": 9.074170520761982e-06}, {"id": 537, "seek": 225390, "start": 2258.06, "end": 2263.02, "text": " So you would need to not forget to convert it to a product slug.", "tokens": [407, 291, 576, 643, 281, 406, 2870, 281, 7620, 309, 281, 257, 1674, 1061, 697, 13], "temperature": 0.0, "avg_logprob": -0.33283337343086317, "compression_ratio": 1.6511627906976745, "no_speech_prob": 9.074170520761982e-06}, {"id": 538, "seek": 225390, "start": 2263.02, "end": 2264.7400000000002, "text": " That is correct.", "tokens": [663, 307, 3006, 13], "temperature": 0.0, "avg_logprob": -0.33283337343086317, "compression_ratio": 1.6511627906976745, "no_speech_prob": 9.074170520761982e-06}, {"id": 539, "seek": 225390, "start": 2264.7400000000002, "end": 2270.46, "text": " Except that you can't really forget it, since it won't compile if you exactly type.", "tokens": [16192, 300, 291, 393, 380, 534, 2870, 309, 11, 1670, 309, 1582, 380, 31413, 498, 291, 2293, 2010, 13], "temperature": 0.0, "avg_logprob": -0.33283337343086317, "compression_ratio": 1.6511627906976745, "no_speech_prob": 9.074170520761982e-06}, {"id": 540, "seek": 225390, "start": 2270.46, "end": 2276.98, "text": " But yeah, you would need to do it wrongly in a few places, like in the type in the route.", "tokens": [583, 1338, 11, 291, 576, 643, 281, 360, 309, 2085, 356, 294, 257, 1326, 3190, 11, 411, 294, 264, 2010, 294, 264, 7955, 13], "temperature": 0.0, "avg_logprob": -0.33283337343086317, "compression_ratio": 1.6511627906976745, "no_speech_prob": 9.074170520761982e-06}, {"id": 541, "seek": 225390, "start": 2276.98, "end": 2280.1800000000003, "text": " And yeah, so that is a good point.", "tokens": [400, 1338, 11, 370, 300, 307, 257, 665, 935, 13], "temperature": 0.0, "avg_logprob": -0.33283337343086317, "compression_ratio": 1.6511627906976745, "no_speech_prob": 9.074170520761982e-06}, {"id": 542, "seek": 228018, "start": 2280.18, "end": 2283.94, "text": " Yeah, I don't think it's a big deal breaker at all.", "tokens": [865, 11, 286, 500, 380, 519, 309, 311, 257, 955, 2028, 35375, 412, 439, 13], "temperature": 0.0, "avg_logprob": -0.22743638653621495, "compression_ratio": 1.5521739130434782, "no_speech_prob": 9.9709377536783e-06}, {"id": 543, "seek": 228018, "start": 2283.94, "end": 2286.5, "text": " Like, yeah, not at all, actually.", "tokens": [1743, 11, 1338, 11, 406, 412, 439, 11, 767, 13], "temperature": 0.0, "avg_logprob": -0.22743638653621495, "compression_ratio": 1.5521739130434782, "no_speech_prob": 9.9709377536783e-06}, {"id": 544, "seek": 228018, "start": 2286.5, "end": 2293.74, "text": " My take on it is that so Elm URL, it has parsers for string and int by default, and then you", "tokens": [1222, 747, 322, 309, 307, 300, 370, 2699, 76, 12905, 11, 309, 575, 21156, 433, 337, 6798, 293, 560, 538, 7576, 11, 293, 550, 291], "temperature": 0.0, "avg_logprob": -0.22743638653621495, "compression_ratio": 1.5521739130434782, "no_speech_prob": 9.9709377536783e-06}, {"id": 545, "seek": 228018, "start": 2293.74, "end": 2294.74, "text": " can make your own.", "tokens": [393, 652, 428, 1065, 13], "temperature": 0.0, "avg_logprob": -0.22743638653621495, "compression_ratio": 1.5521739130434782, "no_speech_prob": 9.9709377536783e-06}, {"id": 546, "seek": 228018, "start": 2294.74, "end": 2302.3799999999997, "text": " And in my experience, I use string almost all the time, int very rarely.", "tokens": [400, 294, 452, 1752, 11, 286, 764, 6798, 1920, 439, 264, 565, 11, 560, 588, 13752, 13], "temperature": 0.0, "avg_logprob": -0.22743638653621495, "compression_ratio": 1.5521739130434782, "no_speech_prob": 9.9709377536783e-06}, {"id": 547, "seek": 228018, "start": 2302.3799999999997, "end": 2308.18, "text": " And when I use a string, it's usually like, this is supposed to become a product ID or", "tokens": [400, 562, 286, 764, 257, 6798, 11, 309, 311, 2673, 411, 11, 341, 307, 3442, 281, 1813, 257, 1674, 7348, 420], "temperature": 0.0, "avg_logprob": -0.22743638653621495, "compression_ratio": 1.5521739130434782, "no_speech_prob": 9.9709377536783e-06}, {"id": 548, "seek": 230818, "start": 2308.18, "end": 2311.14, "text": " a product slug or a user ID or something.", "tokens": [257, 1674, 1061, 697, 420, 257, 4195, 7348, 420, 746, 13], "temperature": 0.0, "avg_logprob": -0.22095288267923058, "compression_ratio": 1.6595744680851063, "no_speech_prob": 1.66970603459049e-05}, {"id": 549, "seek": 230818, "start": 2311.14, "end": 2316.98, "text": " And they are like, opaque anyway, I don't need to like do much to turn a string into", "tokens": [400, 436, 366, 411, 11, 42687, 4033, 11, 286, 500, 380, 643, 281, 411, 360, 709, 281, 1261, 257, 6798, 666], "temperature": 0.0, "avg_logprob": -0.22095288267923058, "compression_ratio": 1.6595744680851063, "no_speech_prob": 1.66970603459049e-05}, {"id": 550, "seek": 230818, "start": 2316.98, "end": 2319.7, "text": " a potential product ID.", "tokens": [257, 3995, 1674, 7348, 13], "temperature": 0.0, "avg_logprob": -0.22095288267923058, "compression_ratio": 1.6595744680851063, "no_speech_prob": 1.66970603459049e-05}, {"id": 551, "seek": 230818, "start": 2319.7, "end": 2323.3399999999997, "text": " All I need to do, basically is to wrap it in a type.", "tokens": [1057, 286, 643, 281, 360, 11, 1936, 307, 281, 7019, 309, 294, 257, 2010, 13], "temperature": 0.0, "avg_logprob": -0.22095288267923058, "compression_ratio": 1.6595744680851063, "no_speech_prob": 1.66970603459049e-05}, {"id": 552, "seek": 230818, "start": 2323.3399999999997, "end": 2327.3799999999997, "text": " And of course, that might not be a valid product ID.", "tokens": [400, 295, 1164, 11, 300, 1062, 406, 312, 257, 7363, 1674, 7348, 13], "temperature": 0.0, "avg_logprob": -0.22095288267923058, "compression_ratio": 1.6595744680851063, "no_speech_prob": 1.66970603459049e-05}, {"id": 553, "seek": 230818, "start": 2327.3799999999997, "end": 2330.46, "text": " But you'll notice that very quickly, because the first thing you're going to do on your", "tokens": [583, 291, 603, 3449, 300, 588, 2661, 11, 570, 264, 700, 551, 291, 434, 516, 281, 360, 322, 428], "temperature": 0.0, "avg_logprob": -0.22095288267923058, "compression_ratio": 1.6595744680851063, "no_speech_prob": 1.66970603459049e-05}, {"id": 554, "seek": 230818, "start": 2330.46, "end": 2333.1, "text": " product page is trying to fetch that product.", "tokens": [1674, 3028, 307, 1382, 281, 23673, 300, 1674, 13], "temperature": 0.0, "avg_logprob": -0.22095288267923058, "compression_ratio": 1.6595744680851063, "no_speech_prob": 1.66970603459049e-05}, {"id": 555, "seek": 233310, "start": 2333.1, "end": 2339.2599999999998, "text": " And if that gives a 404 from your API, then you need to display like a product does not", "tokens": [400, 498, 300, 2709, 257, 3356, 19, 490, 428, 9362, 11, 550, 291, 643, 281, 4674, 411, 257, 1674, 775, 406], "temperature": 0.0, "avg_logprob": -0.30083897239283514, "compression_ratio": 1.6041666666666667, "no_speech_prob": 6.43846760794986e-06}, {"id": 556, "seek": 233310, "start": 2339.2599999999998, "end": 2340.7799999999997, "text": " exist page.", "tokens": [2514, 3028, 13], "temperature": 0.0, "avg_logprob": -0.30083897239283514, "compression_ratio": 1.6041666666666667, "no_speech_prob": 6.43846760794986e-06}, {"id": 557, "seek": 233310, "start": 2340.7799999999997, "end": 2348.22, "text": " Yeah, wait a second, like, so if you say that the product slug or product ID is an integer,", "tokens": [865, 11, 1699, 257, 1150, 11, 411, 11, 370, 498, 291, 584, 300, 264, 1674, 1061, 697, 420, 1674, 7348, 307, 364, 24922, 11], "temperature": 0.0, "avg_logprob": -0.30083897239283514, "compression_ratio": 1.6041666666666667, "no_speech_prob": 6.43846760794986e-06}, {"id": 558, "seek": 233310, "start": 2348.22, "end": 2353.66, "text": " and it starts with 000, and it's like 0001234.", "tokens": [293, 309, 3719, 365, 13711, 11, 293, 309, 311, 411, 13711, 4762, 12249, 13], "temperature": 0.0, "avg_logprob": -0.30083897239283514, "compression_ratio": 1.6041666666666667, "no_speech_prob": 6.43846760794986e-06}, {"id": 559, "seek": 233310, "start": 2353.66, "end": 2361.58, "text": " And you say it's an int, then the product ID is 1234 and not 0001234.", "tokens": [400, 291, 584, 309, 311, 364, 560, 11, 550, 264, 1674, 7348, 307, 2272, 12249, 293, 406, 13711, 4762, 12249, 13], "temperature": 0.0, "avg_logprob": -0.30083897239283514, "compression_ratio": 1.6041666666666667, "no_speech_prob": 6.43846760794986e-06}, {"id": 560, "seek": 236158, "start": 2361.58, "end": 2368.06, "text": " So when you go out and ask the server, like, can you give me the product, it will say like,", "tokens": [407, 562, 291, 352, 484, 293, 1029, 264, 7154, 11, 411, 11, 393, 291, 976, 385, 264, 1674, 11, 309, 486, 584, 411, 11], "temperature": 0.0, "avg_logprob": -0.24916554356480505, "compression_ratio": 1.5897435897435896, "no_speech_prob": 6.853039849374909e-06}, {"id": 561, "seek": 236158, "start": 2368.06, "end": 2369.18, "text": " I don't know this one.", "tokens": [286, 500, 380, 458, 341, 472, 13], "temperature": 0.0, "avg_logprob": -0.24916554356480505, "compression_ratio": 1.5897435897435896, "no_speech_prob": 6.853039849374909e-06}, {"id": 562, "seek": 236158, "start": 2369.18, "end": 2371.46, "text": " I know one that starts with 000.", "tokens": [286, 458, 472, 300, 3719, 365, 13711, 13], "temperature": 0.0, "avg_logprob": -0.24916554356480505, "compression_ratio": 1.5897435897435896, "no_speech_prob": 6.853039849374909e-06}, {"id": 563, "seek": 236158, "start": 2371.46, "end": 2374.06, "text": " But I don't know 1234.", "tokens": [583, 286, 500, 380, 458, 2272, 12249, 13], "temperature": 0.0, "avg_logprob": -0.24916554356480505, "compression_ratio": 1.5897435897435896, "no_speech_prob": 6.853039849374909e-06}, {"id": 564, "seek": 236158, "start": 2374.06, "end": 2377.62, "text": " So that's like, kind of scary, actually.", "tokens": [407, 300, 311, 411, 11, 733, 295, 6958, 11, 767, 13], "temperature": 0.0, "avg_logprob": -0.24916554356480505, "compression_ratio": 1.5897435897435896, "no_speech_prob": 6.853039849374909e-06}, {"id": 565, "seek": 236158, "start": 2377.62, "end": 2383.18, "text": " Actually unsure what the int parsers in Elm say about leading zeros.", "tokens": [5135, 32486, 437, 264, 560, 21156, 433, 294, 2699, 76, 584, 466, 5775, 35193, 13], "temperature": 0.0, "avg_logprob": -0.24916554356480505, "compression_ratio": 1.5897435897435896, "no_speech_prob": 6.853039849374909e-06}, {"id": 566, "seek": 236158, "start": 2383.18, "end": 2391.06, "text": " But the point here is that if you are typing your IDs as ints, then you could ask yourself,", "tokens": [583, 264, 935, 510, 307, 300, 498, 291, 366, 18444, 428, 48212, 382, 560, 82, 11, 550, 291, 727, 1029, 1803, 11], "temperature": 0.0, "avg_logprob": -0.24916554356480505, "compression_ratio": 1.5897435897435896, "no_speech_prob": 6.853039849374909e-06}, {"id": 567, "seek": 239106, "start": 2391.06, "end": 2392.2599999999998, "text": " why am I doing that?", "tokens": [983, 669, 286, 884, 300, 30], "temperature": 0.0, "avg_logprob": -0.2981400339226974, "compression_ratio": 1.5296803652968036, "no_speech_prob": 7.888460459071212e-06}, {"id": 568, "seek": 239106, "start": 2392.2599999999998, "end": 2394.66, "text": " Why does it matter that it's an int?", "tokens": [1545, 775, 309, 1871, 300, 309, 311, 364, 560, 30], "temperature": 0.0, "avg_logprob": -0.2981400339226974, "compression_ratio": 1.5296803652968036, "no_speech_prob": 7.888460459071212e-06}, {"id": 569, "seek": 239106, "start": 2394.66, "end": 2399.9, "text": " You're not supposed to do math with IDs, you're supposed to like just check are things equal", "tokens": [509, 434, 406, 3442, 281, 360, 5221, 365, 48212, 11, 291, 434, 3442, 281, 411, 445, 1520, 366, 721, 2681], "temperature": 0.0, "avg_logprob": -0.2981400339226974, "compression_ratio": 1.5296803652968036, "no_speech_prob": 7.888460459071212e-06}, {"id": 570, "seek": 239106, "start": 2399.9, "end": 2401.86, "text": " and stuff like that.", "tokens": [293, 1507, 411, 300, 13], "temperature": 0.0, "avg_logprob": -0.2981400339226974, "compression_ratio": 1.5296803652968036, "no_speech_prob": 7.888460459071212e-06}, {"id": 571, "seek": 239106, "start": 2401.86, "end": 2407.86, "text": " Unless your IDs are sequential, which for security reasons, you shouldn't do anyway.", "tokens": [16581, 428, 48212, 366, 42881, 11, 597, 337, 3825, 4112, 11, 291, 4659, 380, 360, 4033, 13], "temperature": 0.0, "avg_logprob": -0.2981400339226974, "compression_ratio": 1.5296803652968036, "no_speech_prob": 7.888460459071212e-06}, {"id": 572, "seek": 239106, "start": 2407.86, "end": 2409.9, "text": " Unless they're Pokemon.", "tokens": [16581, 436, 434, 13796, 13], "temperature": 0.0, "avg_logprob": -0.2981400339226974, "compression_ratio": 1.5296803652968036, "no_speech_prob": 7.888460459071212e-06}, {"id": 573, "seek": 239106, "start": 2409.9, "end": 2413.02, "text": " The Pokedex number is a meaningful number.", "tokens": [440, 430, 9511, 3121, 1230, 307, 257, 10995, 1230, 13], "temperature": 0.0, "avg_logprob": -0.2981400339226974, "compression_ratio": 1.5296803652968036, "no_speech_prob": 7.888460459071212e-06}, {"id": 574, "seek": 239106, "start": 2413.02, "end": 2417.2599999999998, "text": " Fair, fair.", "tokens": [12157, 11, 3143, 13], "temperature": 0.0, "avg_logprob": -0.2981400339226974, "compression_ratio": 1.5296803652968036, "no_speech_prob": 7.888460459071212e-06}, {"id": 575, "seek": 241726, "start": 2417.26, "end": 2426.2200000000003, "text": " Should we go ahead and talk about the third of my issues list, which is the escape incident.", "tokens": [6454, 321, 352, 2286, 293, 751, 466, 264, 2636, 295, 452, 2663, 1329, 11, 597, 307, 264, 7615, 9348, 13], "temperature": 0.0, "avg_logprob": -0.3357928765786661, "compression_ratio": 1.441340782122905, "no_speech_prob": 4.154981525061885e-06}, {"id": 576, "seek": 241726, "start": 2426.2200000000003, "end": 2427.2200000000003, "text": " The escape incident.", "tokens": [440, 7615, 9348, 13], "temperature": 0.0, "avg_logprob": -0.3357928765786661, "compression_ratio": 1.441340782122905, "no_speech_prob": 4.154981525061885e-06}, {"id": 577, "seek": 241726, "start": 2427.2200000000003, "end": 2429.94, "text": " Is this also related to Jurassic Park?", "tokens": [1119, 341, 611, 4077, 281, 44730, 4964, 30], "temperature": 0.0, "avg_logprob": -0.3357928765786661, "compression_ratio": 1.441340782122905, "no_speech_prob": 4.154981525061885e-06}, {"id": 578, "seek": 241726, "start": 2429.94, "end": 2432.98, "text": " Yeah, the dinosaurs escape.", "tokens": [865, 11, 264, 25851, 7615, 13], "temperature": 0.0, "avg_logprob": -0.3357928765786661, "compression_ratio": 1.441340782122905, "no_speech_prob": 4.154981525061885e-06}, {"id": 579, "seek": 241726, "start": 2432.98, "end": 2435.94, "text": " That's true.", "tokens": [663, 311, 2074, 13], "temperature": 0.0, "avg_logprob": -0.3357928765786661, "compression_ratio": 1.441340782122905, "no_speech_prob": 4.154981525061885e-06}, {"id": 580, "seek": 241726, "start": 2435.94, "end": 2442.1800000000003, "text": " So in the Elm URL package, there is a module called URL.builder.", "tokens": [407, 294, 264, 2699, 76, 12905, 7372, 11, 456, 307, 257, 10088, 1219, 12905, 13, 11516, 260, 13], "temperature": 0.0, "avg_logprob": -0.3357928765786661, "compression_ratio": 1.441340782122905, "no_speech_prob": 4.154981525061885e-06}, {"id": 581, "seek": 244218, "start": 2442.18, "end": 2448.94, "text": " And it has functions like the one I use the most called absolute, and there are like relative,", "tokens": [400, 309, 575, 6828, 411, 264, 472, 286, 764, 264, 881, 1219, 8236, 11, 293, 456, 366, 411, 4972, 11], "temperature": 0.0, "avg_logprob": -0.2672186264624962, "compression_ratio": 1.646551724137931, "no_speech_prob": 5.332527962309541e-06}, {"id": 582, "seek": 244218, "start": 2448.94, "end": 2451.14, "text": " I think, and cross origin and stuff like that.", "tokens": [286, 519, 11, 293, 3278, 4957, 293, 1507, 411, 300, 13], "temperature": 0.0, "avg_logprob": -0.2672186264624962, "compression_ratio": 1.646551724137931, "no_speech_prob": 5.332527962309541e-06}, {"id": 583, "seek": 244218, "start": 2451.14, "end": 2453.2599999999998, "text": " But they're pretty similar, all of them.", "tokens": [583, 436, 434, 1238, 2531, 11, 439, 295, 552, 13], "temperature": 0.0, "avg_logprob": -0.2672186264624962, "compression_ratio": 1.646551724137931, "no_speech_prob": 5.332527962309541e-06}, {"id": 584, "seek": 244218, "start": 2453.2599999999998, "end": 2455.7799999999997, "text": " They take two lists.", "tokens": [814, 747, 732, 14511, 13], "temperature": 0.0, "avg_logprob": -0.2672186264624962, "compression_ratio": 1.646551724137931, "no_speech_prob": 5.332527962309541e-06}, {"id": 585, "seek": 244218, "start": 2455.7799999999997, "end": 2460.62, "text": " One list is for the path, and one is for parameters.", "tokens": [1485, 1329, 307, 337, 264, 3100, 11, 293, 472, 307, 337, 9834, 13], "temperature": 0.0, "avg_logprob": -0.2672186264624962, "compression_ratio": 1.646551724137931, "no_speech_prob": 5.332527962309541e-06}, {"id": 586, "seek": 244218, "start": 2460.62, "end": 2466.96, "text": " And if we just focus on the first list, which is the path, then you can write something", "tokens": [400, 498, 321, 445, 1879, 322, 264, 700, 1329, 11, 597, 307, 264, 3100, 11, 550, 291, 393, 2464, 746], "temperature": 0.0, "avg_logprob": -0.2672186264624962, "compression_ratio": 1.646551724137931, "no_speech_prob": 5.332527962309541e-06}, {"id": 587, "seek": 244218, "start": 2466.96, "end": 2470.02, "text": " like the string A comma the string B.", "tokens": [411, 264, 6798, 316, 22117, 264, 6798, 363, 13], "temperature": 0.0, "avg_logprob": -0.2672186264624962, "compression_ratio": 1.646551724137931, "no_speech_prob": 5.332527962309541e-06}, {"id": 588, "seek": 247002, "start": 2470.02, "end": 2476.7, "text": " The result will be slash A slash B, which is quite handy for generating URLs.", "tokens": [440, 1874, 486, 312, 17330, 316, 17330, 363, 11, 597, 307, 1596, 13239, 337, 17746, 43267, 13], "temperature": 0.0, "avg_logprob": -0.26364078291927473, "compression_ratio": 1.5706521739130435, "no_speech_prob": 9.570538850312005e-07}, {"id": 589, "seek": 247002, "start": 2476.7, "end": 2485.02, "text": " But if you type a slash inside of one of those strings, what is going to happen?", "tokens": [583, 498, 291, 2010, 257, 17330, 1854, 295, 472, 295, 729, 13985, 11, 437, 307, 516, 281, 1051, 30], "temperature": 0.0, "avg_logprob": -0.26364078291927473, "compression_ratio": 1.5706521739130435, "no_speech_prob": 9.570538850312005e-07}, {"id": 590, "seek": 247002, "start": 2485.02, "end": 2488.22, "text": " What should happen?", "tokens": [708, 820, 1051, 30], "temperature": 0.0, "avg_logprob": -0.26364078291927473, "compression_ratio": 1.5706521739130435, "no_speech_prob": 9.570538850312005e-07}, {"id": 591, "seek": 247002, "start": 2488.22, "end": 2491.7, "text": " What should happen is it should get URL encoded.", "tokens": [708, 820, 1051, 307, 309, 820, 483, 12905, 2058, 12340, 13], "temperature": 0.0, "avg_logprob": -0.26364078291927473, "compression_ratio": 1.5706521739130435, "no_speech_prob": 9.570538850312005e-07}, {"id": 592, "seek": 247002, "start": 2491.7, "end": 2494.5, "text": " But I'm guessing that's not what happens.", "tokens": [583, 286, 478, 17939, 300, 311, 406, 437, 2314, 13], "temperature": 0.0, "avg_logprob": -0.26364078291927473, "compression_ratio": 1.5706521739130435, "no_speech_prob": 9.570538850312005e-07}, {"id": 593, "seek": 247002, "start": 2494.5, "end": 2495.5, "text": " Exactly.", "tokens": [7587, 13], "temperature": 0.0, "avg_logprob": -0.26364078291927473, "compression_ratio": 1.5706521739130435, "no_speech_prob": 9.570538850312005e-07}, {"id": 594, "seek": 247002, "start": 2495.5, "end": 2497.74, "text": " It is not.", "tokens": [467, 307, 406, 13], "temperature": 0.0, "avg_logprob": -0.26364078291927473, "compression_ratio": 1.5706521739130435, "no_speech_prob": 9.570538850312005e-07}, {"id": 595, "seek": 249774, "start": 2497.74, "end": 2501.4199999999996, "text": " And that is usually fine.", "tokens": [400, 300, 307, 2673, 2489, 13], "temperature": 0.0, "avg_logprob": -0.23514862947685775, "compression_ratio": 1.6067961165048543, "no_speech_prob": 1.3829742783855181e-05}, {"id": 596, "seek": 249774, "start": 2501.4199999999996, "end": 2503.7, "text": " But it can also result in some really weird code.", "tokens": [583, 309, 393, 611, 1874, 294, 512, 534, 3657, 3089, 13], "temperature": 0.0, "avg_logprob": -0.23514862947685775, "compression_ratio": 1.6067961165048543, "no_speech_prob": 1.3829742783855181e-05}, {"id": 597, "seek": 249774, "start": 2503.7, "end": 2513.3399999999997, "text": " I've seen people using this absolute function where they have written one segment as a string,", "tokens": [286, 600, 1612, 561, 1228, 341, 8236, 2445, 689, 436, 362, 3720, 472, 9469, 382, 257, 6798, 11], "temperature": 0.0, "avg_logprob": -0.23514862947685775, "compression_ratio": 1.6067961165048543, "no_speech_prob": 1.3829742783855181e-05}, {"id": 598, "seek": 249774, "start": 2513.3399999999997, "end": 2522.4599999999996, "text": " like A by itself, and then the next hardcoded string, B, and then maybe comma and a variable,", "tokens": [411, 316, 538, 2564, 11, 293, 550, 264, 958, 1152, 66, 12340, 6798, 11, 363, 11, 293, 550, 1310, 22117, 293, 257, 7006, 11], "temperature": 0.0, "avg_logprob": -0.23514862947685775, "compression_ratio": 1.6067961165048543, "no_speech_prob": 1.3829742783855181e-05}, {"id": 599, "seek": 249774, "start": 2522.4599999999996, "end": 2527.06, "text": " which is something dynamic, and then comma, more hardcoded things.", "tokens": [597, 307, 746, 8546, 11, 293, 550, 22117, 11, 544, 1152, 66, 12340, 721, 13], "temperature": 0.0, "avg_logprob": -0.23514862947685775, "compression_ratio": 1.6067961165048543, "no_speech_prob": 1.3829742783855181e-05}, {"id": 600, "seek": 252706, "start": 2527.06, "end": 2531.46, "text": " But this time, they chose to use slashes inside the string instead.", "tokens": [583, 341, 565, 11, 436, 5111, 281, 764, 1061, 12808, 1854, 264, 6798, 2602, 13], "temperature": 0.0, "avg_logprob": -0.3174901124907703, "compression_ratio": 1.4894736842105263, "no_speech_prob": 1.4025681593921036e-05}, {"id": 601, "seek": 252706, "start": 2531.46, "end": 2537.06, "text": " And at the very end, they even do plus plus something other dynamic, which is like now", "tokens": [400, 412, 264, 588, 917, 11, 436, 754, 360, 1804, 1804, 746, 661, 8546, 11, 597, 307, 411, 586], "temperature": 0.0, "avg_logprob": -0.3174901124907703, "compression_ratio": 1.4894736842105263, "no_speech_prob": 1.4025681593921036e-05}, {"id": 602, "seek": 252706, "start": 2537.06, "end": 2540.5, "text": " you have mixed all the different ways that you can.", "tokens": [291, 362, 7467, 439, 264, 819, 2098, 300, 291, 393, 13], "temperature": 0.0, "avg_logprob": -0.3174901124907703, "compression_ratio": 1.4894736842105263, "no_speech_prob": 1.4025681593921036e-05}, {"id": 603, "seek": 252706, "start": 2540.5, "end": 2544.2599999999998, "text": " Oh, I don't like that.", "tokens": [876, 11, 286, 500, 380, 411, 300, 13], "temperature": 0.0, "avg_logprob": -0.3174901124907703, "compression_ratio": 1.4894736842105263, "no_speech_prob": 1.4025681593921036e-05}, {"id": 604, "seek": 252706, "start": 2544.2599999999998, "end": 2546.42, "text": " But that's just, it's fine.", "tokens": [583, 300, 311, 445, 11, 309, 311, 2489, 13], "temperature": 0.0, "avg_logprob": -0.3174901124907703, "compression_ratio": 1.4894736842105263, "no_speech_prob": 1.4025681593921036e-05}, {"id": 605, "seek": 252706, "start": 2546.42, "end": 2548.9, "text": " It's just confusing code.", "tokens": [467, 311, 445, 13181, 3089, 13], "temperature": 0.0, "avg_logprob": -0.3174901124907703, "compression_ratio": 1.4894736842105263, "no_speech_prob": 1.4025681593921036e-05}, {"id": 606, "seek": 254890, "start": 2548.9, "end": 2558.7000000000003, "text": " But it could have more severe consequences if, for example, if you have like a URL slash", "tokens": [583, 309, 727, 362, 544, 8922, 10098, 498, 11, 337, 1365, 11, 498, 291, 362, 411, 257, 12905, 17330], "temperature": 0.0, "avg_logprob": -0.2609390200990619, "compression_ratio": 1.5178571428571428, "no_speech_prob": 2.008682713494636e-05}, {"id": 607, "seek": 254890, "start": 2558.7000000000003, "end": 2566.7400000000002, "text": " blog slash a slug of a blog, and your blog post is called like A B testing.", "tokens": [6968, 17330, 257, 1061, 697, 295, 257, 6968, 11, 293, 428, 6968, 2183, 307, 1219, 411, 316, 363, 4997, 13], "temperature": 0.0, "avg_logprob": -0.2609390200990619, "compression_ratio": 1.5178571428571428, "no_speech_prob": 2.008682713494636e-05}, {"id": 608, "seek": 254890, "start": 2566.7400000000002, "end": 2574.2200000000003, "text": " And that's usually written as A slash B testing and your slug function or whatever, allows", "tokens": [400, 300, 311, 2673, 3720, 382, 316, 17330, 363, 4997, 293, 428, 1061, 697, 2445, 420, 2035, 11, 4045], "temperature": 0.0, "avg_logprob": -0.2609390200990619, "compression_ratio": 1.5178571428571428, "no_speech_prob": 2.008682713494636e-05}, {"id": 609, "seek": 257422, "start": 2574.22, "end": 2580.2599999999998, "text": " slashes in a slug, which might be pretty uncommon, but let's pretend that happened.", "tokens": [1061, 12808, 294, 257, 1061, 697, 11, 597, 1062, 312, 1238, 29289, 11, 457, 718, 311, 11865, 300, 2011, 13], "temperature": 0.0, "avg_logprob": -0.2045151719423098, "compression_ratio": 1.6126482213438735, "no_speech_prob": 2.0138528270763345e-05}, {"id": 610, "seek": 257422, "start": 2580.2599999999998, "end": 2586.3399999999997, "text": " If you then try to create a URL, and you put that slug in there, then you're accidentally", "tokens": [759, 291, 550, 853, 281, 1884, 257, 12905, 11, 293, 291, 829, 300, 1061, 697, 294, 456, 11, 550, 291, 434, 15715], "temperature": 0.0, "avg_logprob": -0.2045151719423098, "compression_ratio": 1.6126482213438735, "no_speech_prob": 2.0138528270763345e-05}, {"id": 611, "seek": 257422, "start": 2586.3399999999997, "end": 2592.14, "text": " gonna create a URL with three segments instead of two like you expected, which probably results", "tokens": [799, 1884, 257, 12905, 365, 1045, 19904, 2602, 295, 732, 411, 291, 5176, 11, 597, 1391, 3542], "temperature": 0.0, "avg_logprob": -0.2045151719423098, "compression_ratio": 1.6126482213438735, "no_speech_prob": 2.0138528270763345e-05}, {"id": 612, "seek": 257422, "start": 2592.14, "end": 2594.7999999999997, "text": " in a 404 if you try to use that link.", "tokens": [294, 257, 3356, 19, 498, 291, 853, 281, 764, 300, 2113, 13], "temperature": 0.0, "avg_logprob": -0.2045151719423098, "compression_ratio": 1.6126482213438735, "no_speech_prob": 2.0138528270763345e-05}, {"id": 613, "seek": 257422, "start": 2594.7999999999997, "end": 2600.4599999999996, "text": " So the approach I wanted to take with the app URL is that it should feel more like the", "tokens": [407, 264, 3109, 286, 1415, 281, 747, 365, 264, 724, 12905, 307, 300, 309, 820, 841, 544, 411, 264], "temperature": 0.0, "avg_logprob": -0.2045151719423098, "compression_ratio": 1.6126482213438735, "no_speech_prob": 2.0138528270763345e-05}, {"id": 614, "seek": 257422, "start": 2600.4599999999996, "end": 2602.06, "text": " HTML package.", "tokens": [17995, 7372, 13], "temperature": 0.0, "avg_logprob": -0.2045151719423098, "compression_ratio": 1.6126482213438735, "no_speech_prob": 2.0138528270763345e-05}, {"id": 615, "seek": 260206, "start": 2602.06, "end": 2607.7, "text": " When you put in a string in HTML in Elm, I never think about what that string looks like,", "tokens": [1133, 291, 829, 294, 257, 6798, 294, 17995, 294, 2699, 76, 11, 286, 1128, 519, 466, 437, 300, 6798, 1542, 411, 11], "temperature": 0.0, "avg_logprob": -0.2890379073772025, "compression_ratio": 1.6057692307692308, "no_speech_prob": 1.5662408259231597e-05}, {"id": 616, "seek": 260206, "start": 2607.7, "end": 2609.62, "text": " like, will there be less than signs?", "tokens": [411, 11, 486, 456, 312, 1570, 813, 7880, 30], "temperature": 0.0, "avg_logprob": -0.2890379073772025, "compression_ratio": 1.6057692307692308, "no_speech_prob": 1.5662408259231597e-05}, {"id": 617, "seek": 260206, "start": 2609.62, "end": 2611.22, "text": " Will there be ampersands?", "tokens": [3099, 456, 312, 18648, 433, 2967, 30], "temperature": 0.0, "avg_logprob": -0.2890379073772025, "compression_ratio": 1.6057692307692308, "no_speech_prob": 1.5662408259231597e-05}, {"id": 618, "seek": 260206, "start": 2611.22, "end": 2612.98, "text": " Could this be treated as HTML?", "tokens": [7497, 341, 312, 8668, 382, 17995, 30], "temperature": 0.0, "avg_logprob": -0.2890379073772025, "compression_ratio": 1.6057692307692308, "no_speech_prob": 1.5662408259231597e-05}, {"id": 619, "seek": 260206, "start": 2612.98, "end": 2615.22, "text": " No, it never happens.", "tokens": [883, 11, 309, 1128, 2314, 13], "temperature": 0.0, "avg_logprob": -0.2890379073772025, "compression_ratio": 1.6057692307692308, "no_speech_prob": 1.5662408259231597e-05}, {"id": 620, "seek": 260206, "start": 2615.22, "end": 2622.42, "text": " So I make sure that you can put any string anywhere, and it will represent that string", "tokens": [407, 286, 652, 988, 300, 291, 393, 829, 604, 6798, 4992, 11, 293, 309, 486, 2906, 300, 6798], "temperature": 0.0, "avg_logprob": -0.2890379073772025, "compression_ratio": 1.6057692307692308, "no_speech_prob": 1.5662408259231597e-05}, {"id": 621, "seek": 260206, "start": 2622.42, "end": 2628.02, "text": " exactly and not be treated as URL syntax.", "tokens": [2293, 293, 406, 312, 8668, 382, 12905, 28431, 13], "temperature": 0.0, "avg_logprob": -0.2890379073772025, "compression_ratio": 1.6057692307692308, "no_speech_prob": 1.5662408259231597e-05}, {"id": 622, "seek": 262802, "start": 2628.02, "end": 2635.06, "text": " Okay, so if you if you put a slash in A B testing, then the slash would be escaped as", "tokens": [1033, 11, 370, 498, 291, 498, 291, 829, 257, 17330, 294, 316, 363, 4997, 11, 550, 264, 17330, 576, 312, 20397, 382], "temperature": 0.0, "avg_logprob": -0.3228756399715648, "compression_ratio": 1.5757575757575757, "no_speech_prob": 3.747947232568549e-07}, {"id": 623, "seek": 262802, "start": 2635.06, "end": 2638.14, "text": " a percentage sign and something else.", "tokens": [257, 9668, 1465, 293, 746, 1646, 13], "temperature": 0.0, "avg_logprob": -0.3228756399715648, "compression_ratio": 1.5757575757575757, "no_speech_prob": 3.747947232568549e-07}, {"id": 624, "seek": 262802, "start": 2638.14, "end": 2639.14, "text": " Exactly.", "tokens": [7587, 13], "temperature": 0.0, "avg_logprob": -0.3228756399715648, "compression_ratio": 1.5757575757575757, "no_speech_prob": 3.747947232568549e-07}, {"id": 625, "seek": 262802, "start": 2639.14, "end": 2644.82, "text": " Okay, that feels very Elmy to me in the best possible way like it because to me like the", "tokens": [1033, 11, 300, 3417, 588, 2699, 2226, 281, 385, 294, 264, 1151, 1944, 636, 411, 309, 570, 281, 385, 411, 264], "temperature": 0.0, "avg_logprob": -0.3228756399715648, "compression_ratio": 1.5757575757575757, "no_speech_prob": 3.747947232568549e-07}, {"id": 626, "seek": 262802, "start": 2644.82, "end": 2653.34, "text": " feeling of working in Elm that I love is number one, like, not feeling like there are foot", "tokens": [2633, 295, 1364, 294, 2699, 76, 300, 286, 959, 307, 1230, 472, 11, 411, 11, 406, 2633, 411, 456, 366, 2671], "temperature": 0.0, "avg_logprob": -0.3228756399715648, "compression_ratio": 1.5757575757575757, "no_speech_prob": 3.747947232568549e-07}, {"id": 627, "seek": 265334, "start": 2653.34, "end": 2658.54, "text": " guns all around me that I'm going to set off by mistake, like just that peace of mind of", "tokens": [10153, 439, 926, 385, 300, 286, 478, 516, 281, 992, 766, 538, 6146, 11, 411, 445, 300, 4336, 295, 1575, 295], "temperature": 0.0, "avg_logprob": -0.2049483552985235, "compression_ratio": 1.7541666666666667, "no_speech_prob": 5.955037977400934e-06}, {"id": 628, "seek": 265334, "start": 2658.54, "end": 2661.34, "text": " using something and being like, yeah, it's going to be fine.", "tokens": [1228, 746, 293, 885, 411, 11, 1338, 11, 309, 311, 516, 281, 312, 2489, 13], "temperature": 0.0, "avg_logprob": -0.2049483552985235, "compression_ratio": 1.7541666666666667, "no_speech_prob": 5.955037977400934e-06}, {"id": 629, "seek": 265334, "start": 2661.34, "end": 2666.38, "text": " And then secondly, when I'm trying to like follow a code path and understand what it's", "tokens": [400, 550, 26246, 11, 562, 286, 478, 1382, 281, 411, 1524, 257, 3089, 3100, 293, 1223, 437, 309, 311], "temperature": 0.0, "avg_logprob": -0.2049483552985235, "compression_ratio": 1.7541666666666667, "no_speech_prob": 5.955037977400934e-06}, {"id": 630, "seek": 265334, "start": 2666.38, "end": 2672.38, "text": " doing, or what it might do, or what might be causing a bug, having fewer places to look", "tokens": [884, 11, 420, 437, 309, 1062, 360, 11, 420, 437, 1062, 312, 9853, 257, 7426, 11, 1419, 13366, 3190, 281, 574], "temperature": 0.0, "avg_logprob": -0.2049483552985235, "compression_ratio": 1.7541666666666667, "no_speech_prob": 5.955037977400934e-06}, {"id": 631, "seek": 265334, "start": 2672.38, "end": 2678.9, "text": " for, for the source of the bug, fewer special cases to think about, or like fewer possibilities,", "tokens": [337, 11, 337, 264, 4009, 295, 264, 7426, 11, 13366, 2121, 3331, 281, 519, 466, 11, 420, 411, 13366, 12178, 11], "temperature": 0.0, "avg_logprob": -0.2049483552985235, "compression_ratio": 1.7541666666666667, "no_speech_prob": 5.955037977400934e-06}, {"id": 632, "seek": 267890, "start": 2678.9, "end": 2683.42, "text": " like the type is more narrowed, or what this can possibly do is more narrowed, or side", "tokens": [411, 264, 2010, 307, 544, 9432, 292, 11, 420, 437, 341, 393, 6264, 360, 307, 544, 9432, 292, 11, 420, 1252], "temperature": 0.0, "avg_logprob": -0.22939324757409474, "compression_ratio": 1.7300380228136882, "no_speech_prob": 1.267904622181959e-06}, {"id": 633, "seek": 267890, "start": 2683.42, "end": 2684.58, "text": " effects can't be coming from here.", "tokens": [5065, 393, 380, 312, 1348, 490, 510, 13], "temperature": 0.0, "avg_logprob": -0.22939324757409474, "compression_ratio": 1.7300380228136882, "no_speech_prob": 1.267904622181959e-06}, {"id": 634, "seek": 267890, "start": 2684.58, "end": 2689.7400000000002, "text": " So this is like, could this segment that's coming from user input or something be causing", "tokens": [407, 341, 307, 411, 11, 727, 341, 9469, 300, 311, 1348, 490, 4195, 4846, 420, 746, 312, 9853], "temperature": 0.0, "avg_logprob": -0.22939324757409474, "compression_ratio": 1.7300380228136882, "no_speech_prob": 1.267904622181959e-06}, {"id": 635, "seek": 267890, "start": 2689.7400000000002, "end": 2690.98, "text": " this weird URL thing?", "tokens": [341, 3657, 12905, 551, 30], "temperature": 0.0, "avg_logprob": -0.22939324757409474, "compression_ratio": 1.7300380228136882, "no_speech_prob": 1.267904622181959e-06}, {"id": 636, "seek": 267890, "start": 2690.98, "end": 2693.04, "text": " Like, no, it's like, it's going to be escaped.", "tokens": [1743, 11, 572, 11, 309, 311, 411, 11, 309, 311, 516, 281, 312, 20397, 13], "temperature": 0.0, "avg_logprob": -0.22939324757409474, "compression_ratio": 1.7300380228136882, "no_speech_prob": 1.267904622181959e-06}, {"id": 637, "seek": 267890, "start": 2693.04, "end": 2698.82, "text": " So you can just cross that off the list of things to look for for a specific type of", "tokens": [407, 291, 393, 445, 3278, 300, 766, 264, 1329, 295, 721, 281, 574, 337, 337, 257, 2685, 2010, 295], "temperature": 0.0, "avg_logprob": -0.22939324757409474, "compression_ratio": 1.7300380228136882, "no_speech_prob": 1.267904622181959e-06}, {"id": 638, "seek": 267890, "start": 2698.82, "end": 2699.82, "text": " problem from.", "tokens": [1154, 490, 13], "temperature": 0.0, "avg_logprob": -0.22939324757409474, "compression_ratio": 1.7300380228136882, "no_speech_prob": 1.267904622181959e-06}, {"id": 639, "seek": 267890, "start": 2699.82, "end": 2701.38, "text": " Yeah, very, very nice.", "tokens": [865, 11, 588, 11, 588, 1481, 13], "temperature": 0.0, "avg_logprob": -0.22939324757409474, "compression_ratio": 1.7300380228136882, "no_speech_prob": 1.267904622181959e-06}, {"id": 640, "seek": 267890, "start": 2701.38, "end": 2705.2200000000003, "text": " And this escaping stuff was actually useful at work.", "tokens": [400, 341, 32554, 1507, 390, 767, 4420, 412, 589, 13], "temperature": 0.0, "avg_logprob": -0.22939324757409474, "compression_ratio": 1.7300380228136882, "no_speech_prob": 1.267904622181959e-06}, {"id": 641, "seek": 270522, "start": 2705.22, "end": 2713.5, "text": " We had a bug, like before we used app URL, where we have like a search function in our", "tokens": [492, 632, 257, 7426, 11, 411, 949, 321, 1143, 724, 12905, 11, 689, 321, 362, 411, 257, 3164, 2445, 294, 527], "temperature": 0.0, "avg_logprob": -0.26516151428222656, "compression_ratio": 1.64, "no_speech_prob": 1.831847293942701e-05}, {"id": 642, "seek": 270522, "start": 2713.5, "end": 2714.58, "text": " app.", "tokens": [724, 13], "temperature": 0.0, "avg_logprob": -0.26516151428222656, "compression_ratio": 1.64, "no_speech_prob": 1.831847293942701e-05}, {"id": 643, "seek": 270522, "start": 2714.58, "end": 2718.5, "text": " And you can search by a person's phone number, for example.", "tokens": [400, 291, 393, 3164, 538, 257, 954, 311, 2593, 1230, 11, 337, 1365, 13], "temperature": 0.0, "avg_logprob": -0.26516151428222656, "compression_ratio": 1.64, "no_speech_prob": 1.831847293942701e-05}, {"id": 644, "seek": 270522, "start": 2718.5, "end": 2724.14, "text": " And someone wanted to search for their like full phone number with the counter code, which", "tokens": [400, 1580, 1415, 281, 3164, 337, 641, 411, 1577, 2593, 1230, 365, 264, 5682, 3089, 11, 597], "temperature": 0.0, "avg_logprob": -0.26516151428222656, "compression_ratio": 1.64, "no_speech_prob": 1.831847293942701e-05}, {"id": 645, "seek": 270522, "start": 2724.14, "end": 2725.9399999999996, "text": " starts with a plus.", "tokens": [3719, 365, 257, 1804, 13], "temperature": 0.0, "avg_logprob": -0.26516151428222656, "compression_ratio": 1.64, "no_speech_prob": 1.831847293942701e-05}, {"id": 646, "seek": 270522, "start": 2725.9399999999996, "end": 2730.9399999999996, "text": " So in Sweden, it's like plus four, six, and then the real phone number.", "tokens": [407, 294, 17727, 11, 309, 311, 411, 1804, 1451, 11, 2309, 11, 293, 550, 264, 957, 2593, 1230, 13], "temperature": 0.0, "avg_logprob": -0.26516151428222656, "compression_ratio": 1.64, "no_speech_prob": 1.831847293942701e-05}, {"id": 647, "seek": 270522, "start": 2730.9399999999996, "end": 2732.62, "text": " And that always gave zero matches.", "tokens": [400, 300, 1009, 2729, 4018, 10676, 13], "temperature": 0.0, "avg_logprob": -0.26516151428222656, "compression_ratio": 1.64, "no_speech_prob": 1.831847293942701e-05}, {"id": 648, "seek": 273262, "start": 2732.62, "end": 2735.98, "text": " And we were like, why doesn't that work?", "tokens": [400, 321, 645, 411, 11, 983, 1177, 380, 300, 589, 30], "temperature": 0.0, "avg_logprob": -0.2516903970755783, "compression_ratio": 1.6437768240343347, "no_speech_prob": 1.3590881280833855e-05}, {"id": 649, "seek": 273262, "start": 2735.98, "end": 2738.02, "text": " What's happening here?", "tokens": [708, 311, 2737, 510, 30], "temperature": 0.0, "avg_logprob": -0.2516903970755783, "compression_ratio": 1.6437768240343347, "no_speech_prob": 1.3590881280833855e-05}, {"id": 650, "seek": 273262, "start": 2738.02, "end": 2744.9, "text": " And when you, we send the phone number in a query parameter, and we were using the standard", "tokens": [400, 562, 291, 11, 321, 2845, 264, 2593, 1230, 294, 257, 14581, 13075, 11, 293, 321, 645, 1228, 264, 3832], "temperature": 0.0, "avg_logprob": -0.2516903970755783, "compression_ratio": 1.6437768240343347, "no_speech_prob": 1.3590881280833855e-05}, {"id": 651, "seek": 273262, "start": 2744.9, "end": 2751.06, "text": " elm slash URL, like URL dot builder dot absolute.", "tokens": [806, 76, 17330, 12905, 11, 411, 12905, 5893, 27377, 5893, 8236, 13], "temperature": 0.0, "avg_logprob": -0.2516903970755783, "compression_ratio": 1.6437768240343347, "no_speech_prob": 1.3590881280833855e-05}, {"id": 652, "seek": 273262, "start": 2751.06, "end": 2755.7799999999997, "text": " And then the second list of that function, you can specify your query parameters.", "tokens": [400, 550, 264, 1150, 1329, 295, 300, 2445, 11, 291, 393, 16500, 428, 14581, 9834, 13], "temperature": 0.0, "avg_logprob": -0.2516903970755783, "compression_ratio": 1.6437768240343347, "no_speech_prob": 1.3590881280833855e-05}, {"id": 653, "seek": 273262, "start": 2755.7799999999997, "end": 2758.22, "text": " It does not escape the plus.", "tokens": [467, 775, 406, 7615, 264, 1804, 13], "temperature": 0.0, "avg_logprob": -0.2516903970755783, "compression_ratio": 1.6437768240343347, "no_speech_prob": 1.3590881280833855e-05}, {"id": 654, "seek": 273262, "start": 2758.22, "end": 2762.4, "text": " And for some reason, only in query parameters, a plus means space.", "tokens": [400, 337, 512, 1778, 11, 787, 294, 14581, 9834, 11, 257, 1804, 1355, 1901, 13], "temperature": 0.0, "avg_logprob": -0.2516903970755783, "compression_ratio": 1.6437768240343347, "no_speech_prob": 1.3590881280833855e-05}, {"id": 655, "seek": 276240, "start": 2762.4, "end": 2768.3, "text": " So our server, by default, just unescaped that for us and says like, oh, it's a space", "tokens": [407, 527, 7154, 11, 538, 7576, 11, 445, 517, 279, 496, 3452, 300, 337, 505, 293, 1619, 411, 11, 1954, 11, 309, 311, 257, 1901], "temperature": 0.0, "avg_logprob": -0.2615848420158265, "compression_ratio": 1.7283464566929134, "no_speech_prob": 2.1687346816179343e-05}, {"id": 656, "seek": 276240, "start": 2768.3, "end": 2770.54, "text": " for six and the phone number.", "tokens": [337, 2309, 293, 264, 2593, 1230, 13], "temperature": 0.0, "avg_logprob": -0.2615848420158265, "compression_ratio": 1.7283464566929134, "no_speech_prob": 2.1687346816179343e-05}, {"id": 657, "seek": 276240, "start": 2770.54, "end": 2775.2200000000003, "text": " And we don't have any phone number that starts with a space.", "tokens": [400, 321, 500, 380, 362, 604, 2593, 1230, 300, 3719, 365, 257, 1901, 13], "temperature": 0.0, "avg_logprob": -0.2615848420158265, "compression_ratio": 1.7283464566929134, "no_speech_prob": 2.1687346816179343e-05}, {"id": 658, "seek": 276240, "start": 2775.2200000000003, "end": 2781.62, "text": " So we had to like in the elm code go and manually use the URL dot percent and code function", "tokens": [407, 321, 632, 281, 411, 294, 264, 806, 76, 3089, 352, 293, 16945, 764, 264, 12905, 5893, 3043, 293, 3089, 2445], "temperature": 0.0, "avg_logprob": -0.2615848420158265, "compression_ratio": 1.7283464566929134, "no_speech_prob": 2.1687346816179343e-05}, {"id": 659, "seek": 276240, "start": 2781.62, "end": 2783.6, "text": " to make sure it's escaped.", "tokens": [281, 652, 988, 309, 311, 20397, 13], "temperature": 0.0, "avg_logprob": -0.2615848420158265, "compression_ratio": 1.7283464566929134, "no_speech_prob": 2.1687346816179343e-05}, {"id": 660, "seek": 276240, "start": 2783.6, "end": 2786.42, "text": " But now with app URL, we don't need to think about it.", "tokens": [583, 586, 365, 724, 12905, 11, 321, 500, 380, 643, 281, 519, 466, 309, 13], "temperature": 0.0, "avg_logprob": -0.2615848420158265, "compression_ratio": 1.7283464566929134, "no_speech_prob": 2.1687346816179343e-05}, {"id": 661, "seek": 276240, "start": 2786.42, "end": 2791.42, "text": " We could like remove that and just put the phone number in as is and it's going to work.", "tokens": [492, 727, 411, 4159, 300, 293, 445, 829, 264, 2593, 1230, 294, 382, 307, 293, 309, 311, 516, 281, 589, 13], "temperature": 0.0, "avg_logprob": -0.2615848420158265, "compression_ratio": 1.7283464566929134, "no_speech_prob": 2.1687346816179343e-05}, {"id": 662, "seek": 279142, "start": 2791.42, "end": 2792.42, "text": " Perfect.", "tokens": [10246, 13], "temperature": 0.0, "avg_logprob": -0.31455453571520353, "compression_ratio": 1.5761904761904761, "no_speech_prob": 1.5056918982736534e-06}, {"id": 663, "seek": 279142, "start": 2792.42, "end": 2799.78, "text": " So when you mentioned that there's an absolute and a relative function in your builder, you", "tokens": [407, 562, 291, 2835, 300, 456, 311, 364, 8236, 293, 257, 4972, 2445, 294, 428, 27377, 11, 291], "temperature": 0.0, "avg_logprob": -0.31455453571520353, "compression_ratio": 1.5761904761904761, "no_speech_prob": 1.5056918982736534e-06}, {"id": 664, "seek": 279142, "start": 2799.78, "end": 2801.98, "text": " said the second argument is a list.", "tokens": [848, 264, 1150, 6770, 307, 257, 1329, 13], "temperature": 0.0, "avg_logprob": -0.31455453571520353, "compression_ratio": 1.5761904761904761, "no_speech_prob": 1.5056918982736534e-06}, {"id": 665, "seek": 279142, "start": 2801.98, "end": 2804.94, "text": " And I was like, why is it a list?", "tokens": [400, 286, 390, 411, 11, 983, 307, 309, 257, 1329, 30], "temperature": 0.0, "avg_logprob": -0.31455453571520353, "compression_ratio": 1.5761904761904761, "no_speech_prob": 1.5056918982736534e-06}, {"id": 666, "seek": 279142, "start": 2804.94, "end": 2808.98, "text": " Because the in the URL, the query is just a string, right?", "tokens": [1436, 264, 294, 264, 12905, 11, 264, 14581, 307, 445, 257, 6798, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.31455453571520353, "compression_ratio": 1.5761904761904761, "no_speech_prob": 1.5056918982736534e-06}, {"id": 667, "seek": 279142, "start": 2808.98, "end": 2812.82, "text": " So why for query builder, do we have a list?", "tokens": [407, 983, 337, 14581, 27377, 11, 360, 321, 362, 257, 1329, 30], "temperature": 0.0, "avg_logprob": -0.31455453571520353, "compression_ratio": 1.5761904761904761, "no_speech_prob": 1.5056918982736534e-06}, {"id": 668, "seek": 279142, "start": 2812.82, "end": 2815.82, "text": " So it looks like it's taking a list of query parameters.", "tokens": [407, 309, 1542, 411, 309, 311, 1940, 257, 1329, 295, 14581, 9834, 13], "temperature": 0.0, "avg_logprob": -0.31455453571520353, "compression_ratio": 1.5761904761904761, "no_speech_prob": 1.5056918982736534e-06}, {"id": 669, "seek": 281582, "start": 2815.82, "end": 2821.34, "text": " And those query parameters are basically key values, like you can say string, which with", "tokens": [400, 729, 14581, 9834, 366, 1936, 2141, 4190, 11, 411, 291, 393, 584, 6798, 11, 597, 365], "temperature": 0.0, "avg_logprob": -0.29767636819319293, "compression_ratio": 1.5691489361702127, "no_speech_prob": 5.3380663302959874e-06}, {"id": 670, "seek": 281582, "start": 2821.34, "end": 2828.82, "text": " a key and a value, which is a string, or int with a key again, and an int value.", "tokens": [257, 2141, 293, 257, 2158, 11, 597, 307, 257, 6798, 11, 420, 560, 365, 257, 2141, 797, 11, 293, 364, 560, 2158, 13], "temperature": 0.0, "avg_logprob": -0.29767636819319293, "compression_ratio": 1.5691489361702127, "no_speech_prob": 5.3380663302959874e-06}, {"id": 671, "seek": 281582, "start": 2828.82, "end": 2837.26, "text": " So like, it's weirdly, the writing of the building of a URL doesn't match how it is", "tokens": [407, 411, 11, 309, 311, 48931, 11, 264, 3579, 295, 264, 2390, 295, 257, 12905, 1177, 380, 2995, 577, 309, 307], "temperature": 0.0, "avg_logprob": -0.29767636819319293, "compression_ratio": 1.5691489361702127, "no_speech_prob": 5.3380663302959874e-06}, {"id": 672, "seek": 281582, "start": 2837.26, "end": 2838.46, "text": " parsed.", "tokens": [21156, 292, 13], "temperature": 0.0, "avg_logprob": -0.29767636819319293, "compression_ratio": 1.5691489361702127, "no_speech_prob": 5.3380663302959874e-06}, {"id": 673, "seek": 281582, "start": 2838.46, "end": 2839.94, "text": " So that's kind of weird.", "tokens": [407, 300, 311, 733, 295, 3657, 13], "temperature": 0.0, "avg_logprob": -0.29767636819319293, "compression_ratio": 1.5691489361702127, "no_speech_prob": 5.3380663302959874e-06}, {"id": 674, "seek": 281582, "start": 2839.94, "end": 2841.46, "text": " I agree.", "tokens": [286, 3986, 13], "temperature": 0.0, "avg_logprob": -0.29767636819319293, "compression_ratio": 1.5691489361702127, "no_speech_prob": 5.3380663302959874e-06}, {"id": 675, "seek": 284146, "start": 2841.46, "end": 2847.7, "text": " Parser and builder are very, like almost different universes in the same package.", "tokens": [3457, 12484, 293, 27377, 366, 588, 11, 411, 1920, 819, 50168, 294, 264, 912, 7372, 13], "temperature": 0.0, "avg_logprob": -0.33320548942497186, "compression_ratio": 1.5541125541125542, "no_speech_prob": 6.2400117712968495e-06}, {"id": 676, "seek": 284146, "start": 2847.7, "end": 2848.7, "text": " Yes.", "tokens": [1079, 13], "temperature": 0.0, "avg_logprob": -0.33320548942497186, "compression_ratio": 1.5541125541125542, "no_speech_prob": 6.2400117712968495e-06}, {"id": 677, "seek": 284146, "start": 2848.7, "end": 2852.06, "text": " So the URL builder is like, oh, yeah, sure.", "tokens": [407, 264, 12905, 27377, 307, 411, 11, 1954, 11, 1338, 11, 988, 13], "temperature": 0.0, "avg_logprob": -0.33320548942497186, "compression_ratio": 1.5541125541125542, "no_speech_prob": 6.2400117712968495e-06}, {"id": 678, "seek": 284146, "start": 2852.06, "end": 2858.2400000000002, "text": " Of course, queries are like, they're a dictionary and for parsing, like, no, it's just a string.", "tokens": [2720, 1164, 11, 24109, 366, 411, 11, 436, 434, 257, 25890, 293, 337, 21156, 278, 11, 411, 11, 572, 11, 309, 311, 445, 257, 6798, 13], "temperature": 0.0, "avg_logprob": -0.33320548942497186, "compression_ratio": 1.5541125541125542, "no_speech_prob": 6.2400117712968495e-06}, {"id": 679, "seek": 284146, "start": 2858.2400000000002, "end": 2859.7400000000002, "text": " People can do whatever.", "tokens": [3432, 393, 360, 2035, 13], "temperature": 0.0, "avg_logprob": -0.33320548942497186, "compression_ratio": 1.5541125541125542, "no_speech_prob": 6.2400117712968495e-06}, {"id": 680, "seek": 284146, "start": 2859.7400000000002, "end": 2861.1, "text": " Okay.", "tokens": [1033, 13], "temperature": 0.0, "avg_logprob": -0.33320548942497186, "compression_ratio": 1.5541125541125542, "no_speech_prob": 6.2400117712968495e-06}, {"id": 681, "seek": 284146, "start": 2861.1, "end": 2868.3, "text": " And the fun thing with a parser is that, like when you run a parser, you give it a URL,", "tokens": [400, 264, 1019, 551, 365, 257, 21156, 260, 307, 300, 11, 411, 562, 291, 1190, 257, 21156, 260, 11, 291, 976, 309, 257, 12905, 11], "temperature": 0.0, "avg_logprob": -0.33320548942497186, "compression_ratio": 1.5541125541125542, "no_speech_prob": 6.2400117712968495e-06}, {"id": 682, "seek": 284146, "start": 2868.3, "end": 2869.62, "text": " the URL type.", "tokens": [264, 12905, 2010, 13], "temperature": 0.0, "avg_logprob": -0.33320548942497186, "compression_ratio": 1.5541125541125542, "no_speech_prob": 6.2400117712968495e-06}, {"id": 683, "seek": 286962, "start": 2869.62, "end": 2875.54, "text": " And the first thing it does is pre-process the query parameters into like a dictionary", "tokens": [400, 264, 700, 551, 309, 775, 307, 659, 12, 41075, 264, 14581, 9834, 666, 411, 257, 25890], "temperature": 0.0, "avg_logprob": -0.27577708922710614, "compression_ratio": 1.5384615384615385, "no_speech_prob": 8.936728590924758e-06}, {"id": 684, "seek": 286962, "start": 2875.54, "end": 2877.54, "text": " kind of structure.", "tokens": [733, 295, 3877, 13], "temperature": 0.0, "avg_logprob": -0.27577708922710614, "compression_ratio": 1.5384615384615385, "no_speech_prob": 8.936728590924758e-06}, {"id": 685, "seek": 286962, "start": 2877.54, "end": 2884.9, "text": " And then the parsers that you write, like work on that pre-parsed type.", "tokens": [400, 550, 264, 21156, 433, 300, 291, 2464, 11, 411, 589, 322, 300, 659, 12, 2181, 45036, 2010, 13], "temperature": 0.0, "avg_logprob": -0.27577708922710614, "compression_ratio": 1.5384615384615385, "no_speech_prob": 8.936728590924758e-06}, {"id": 686, "seek": 286962, "start": 2884.9, "end": 2889.46, "text": " So it's like, couldn't really decide which way to go or I don't know.", "tokens": [407, 309, 311, 411, 11, 2809, 380, 534, 4536, 597, 636, 281, 352, 420, 286, 500, 380, 458, 13], "temperature": 0.0, "avg_logprob": -0.27577708922710614, "compression_ratio": 1.5384615384615385, "no_speech_prob": 8.936728590924758e-06}, {"id": 687, "seek": 286962, "start": 2889.46, "end": 2890.46, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.27577708922710614, "compression_ratio": 1.5384615384615385, "no_speech_prob": 8.936728590924758e-06}, {"id": 688, "seek": 286962, "start": 2890.46, "end": 2898.22, "text": " And also when you when you think about the URL builder in the elm-url package, and the", "tokens": [400, 611, 562, 291, 562, 291, 519, 466, 264, 12905, 27377, 294, 264, 806, 76, 12, 374, 75, 7372, 11, 293, 264], "temperature": 0.0, "avg_logprob": -0.27577708922710614, "compression_ratio": 1.5384615384615385, "no_speech_prob": 8.936728590924758e-06}, {"id": 689, "seek": 289822, "start": 2898.22, "end": 2903.3399999999997, "text": " way you create these query parameters, there's like a query parameter type, which you have", "tokens": [636, 291, 1884, 613, 14581, 9834, 11, 456, 311, 411, 257, 14581, 13075, 2010, 11, 597, 291, 362], "temperature": 0.0, "avg_logprob": -0.2323071776317949, "compression_ratio": 1.9543378995433789, "no_speech_prob": 1.414464122717618e-06}, {"id": 690, "seek": 289822, "start": 2903.3399999999997, "end": 2904.8199999999997, "text": " a list of.", "tokens": [257, 1329, 295, 13], "temperature": 0.0, "avg_logprob": -0.2323071776317949, "compression_ratio": 1.9543378995433789, "no_speech_prob": 1.414464122717618e-06}, {"id": 691, "seek": 289822, "start": 2904.8199999999997, "end": 2909.66, "text": " And if it's a string, then you give string with the key and the value.", "tokens": [400, 498, 309, 311, 257, 6798, 11, 550, 291, 976, 6798, 365, 264, 2141, 293, 264, 2158, 13], "temperature": 0.0, "avg_logprob": -0.2323071776317949, "compression_ratio": 1.9543378995433789, "no_speech_prob": 1.414464122717618e-06}, {"id": 692, "seek": 289822, "start": 2909.66, "end": 2912.54, "text": " If it's an int, you give an int with the key and the value.", "tokens": [759, 309, 311, 364, 560, 11, 291, 976, 364, 560, 365, 264, 2141, 293, 264, 2158, 13], "temperature": 0.0, "avg_logprob": -0.2323071776317949, "compression_ratio": 1.9543378995433789, "no_speech_prob": 1.414464122717618e-06}, {"id": 693, "seek": 289822, "start": 2912.54, "end": 2920.4199999999996, "text": " But so what is the like query parameter type and the int and string builders for the URL", "tokens": [583, 370, 437, 307, 264, 411, 14581, 13075, 2010, 293, 264, 560, 293, 6798, 36281, 337, 264, 12905], "temperature": 0.0, "avg_logprob": -0.2323071776317949, "compression_ratio": 1.9543378995433789, "no_speech_prob": 1.414464122717618e-06}, {"id": 694, "seek": 289822, "start": 2920.4199999999996, "end": 2922.8599999999997, "text": " type, query parameter type giving you?", "tokens": [2010, 11, 14581, 13075, 2010, 2902, 291, 30], "temperature": 0.0, "avg_logprob": -0.2323071776317949, "compression_ratio": 1.9543378995433789, "no_speech_prob": 1.414464122717618e-06}, {"id": 695, "seek": 289822, "start": 2922.8599999999997, "end": 2926.4599999999996, "text": " It's really giving you string.fromInt.", "tokens": [467, 311, 534, 2902, 291, 6798, 13, 20579, 25597, 13], "temperature": 0.0, "avg_logprob": -0.2323071776317949, "compression_ratio": 1.9543378995433789, "no_speech_prob": 1.414464122717618e-06}, {"id": 696, "seek": 289822, "start": 2926.4599999999996, "end": 2927.8999999999996, "text": " That's what it's bought you.", "tokens": [663, 311, 437, 309, 311, 4243, 291, 13], "temperature": 0.0, "avg_logprob": -0.2323071776317949, "compression_ratio": 1.9543378995433789, "no_speech_prob": 1.414464122717618e-06}, {"id": 697, "seek": 292790, "start": 2927.9, "end": 2933.78, "text": " So like, it seems so much more natural to just remove that level of abstraction.", "tokens": [407, 411, 11, 309, 2544, 370, 709, 544, 3303, 281, 445, 4159, 300, 1496, 295, 37765, 13], "temperature": 0.0, "avg_logprob": -0.23576182239460494, "compression_ratio": 1.5921052631578947, "no_speech_prob": 1.24825373859494e-06}, {"id": 698, "seek": 292790, "start": 2933.78, "end": 2941.2200000000003, "text": " It feels kind of similar when I use like the headers in elm-http.", "tokens": [467, 3417, 733, 295, 2531, 562, 286, 764, 411, 264, 45101, 294, 806, 76, 12, 357, 83, 79, 13], "temperature": 0.0, "avg_logprob": -0.23576182239460494, "compression_ratio": 1.5921052631578947, "no_speech_prob": 1.24825373859494e-06}, {"id": 699, "seek": 292790, "start": 2941.2200000000003, "end": 2947.6600000000003, "text": " And you build up a list of headers, but you have to do a header constructor to do, you", "tokens": [400, 291, 1322, 493, 257, 1329, 295, 45101, 11, 457, 291, 362, 281, 360, 257, 23117, 47479, 281, 360, 11, 291], "temperature": 0.0, "avg_logprob": -0.23576182239460494, "compression_ratio": 1.5921052631578947, "no_speech_prob": 1.24825373859494e-06}, {"id": 700, "seek": 292790, "start": 2947.6600000000003, "end": 2951.38, "text": " know, http.header and give it the key and value.", "tokens": [458, 11, 37428, 13, 1934, 260, 293, 976, 309, 264, 2141, 293, 2158, 13], "temperature": 0.0, "avg_logprob": -0.23576182239460494, "compression_ratio": 1.5921052631578947, "no_speech_prob": 1.24825373859494e-06}, {"id": 701, "seek": 292790, "start": 2951.38, "end": 2954.3, "text": " Why can't I just give it a list of tuples?", "tokens": [1545, 393, 380, 286, 445, 976, 309, 257, 1329, 295, 2604, 2622, 30], "temperature": 0.0, "avg_logprob": -0.23576182239460494, "compression_ratio": 1.5921052631578947, "no_speech_prob": 1.24825373859494e-06}, {"id": 702, "seek": 292790, "start": 2954.3, "end": 2956.7000000000003, "text": " Like that would have the same effect.", "tokens": [1743, 300, 576, 362, 264, 912, 1802, 13], "temperature": 0.0, "avg_logprob": -0.23576182239460494, "compression_ratio": 1.5921052631578947, "no_speech_prob": 1.24825373859494e-06}, {"id": 703, "seek": 295670, "start": 2956.7, "end": 2961.8199999999997, "text": " So it just seems like, again, the Jurassic Park principle here.", "tokens": [407, 309, 445, 2544, 411, 11, 797, 11, 264, 44730, 4964, 8665, 510, 13], "temperature": 0.0, "avg_logprob": -0.2059101104736328, "compression_ratio": 1.5884615384615384, "no_speech_prob": 1.0676944839360658e-06}, {"id": 704, "seek": 295670, "start": 2961.8199999999997, "end": 2966.1, "text": " It's like, you could do that, but what value is it really giving you?", "tokens": [467, 311, 411, 11, 291, 727, 360, 300, 11, 457, 437, 2158, 307, 309, 534, 2902, 291, 30], "temperature": 0.0, "avg_logprob": -0.2059101104736328, "compression_ratio": 1.5884615384615384, "no_speech_prob": 1.0676944839360658e-06}, {"id": 705, "seek": 295670, "start": 2966.1, "end": 2970.66, "text": " And it's that much more that you have to like, look up and hold in your head when you're", "tokens": [400, 309, 311, 300, 709, 544, 300, 291, 362, 281, 411, 11, 574, 493, 293, 1797, 294, 428, 1378, 562, 291, 434], "temperature": 0.0, "avg_logprob": -0.2059101104736328, "compression_ratio": 1.5884615384615384, "no_speech_prob": 1.0676944839360658e-06}, {"id": 706, "seek": 295670, "start": 2970.66, "end": 2972.8599999999997, "text": " navigating this API.", "tokens": [32054, 341, 9362, 13], "temperature": 0.0, "avg_logprob": -0.2059101104736328, "compression_ratio": 1.5884615384615384, "no_speech_prob": 1.0676944839360658e-06}, {"id": 707, "seek": 295670, "start": 2972.8599999999997, "end": 2976.46, "text": " So I really like the simplicity you've arrived at.", "tokens": [407, 286, 534, 411, 264, 25632, 291, 600, 6678, 412, 13], "temperature": 0.0, "avg_logprob": -0.2059101104736328, "compression_ratio": 1.5884615384615384, "no_speech_prob": 1.0676944839360658e-06}, {"id": 708, "seek": 295670, "start": 2976.46, "end": 2978.3799999999997, "text": " I'm very curious.", "tokens": [286, 478, 588, 6369, 13], "temperature": 0.0, "avg_logprob": -0.2059101104736328, "compression_ratio": 1.5884615384615384, "no_speech_prob": 1.0676944839360658e-06}, {"id": 709, "seek": 295670, "start": 2978.3799999999997, "end": 2984.2999999999997, "text": " I'm sure it's difficult to answer as a package author because you do your best to not have", "tokens": [286, 478, 988, 309, 311, 2252, 281, 1867, 382, 257, 7372, 3793, 570, 291, 360, 428, 1151, 281, 406, 362], "temperature": 0.0, "avg_logprob": -0.2059101104736328, "compression_ratio": 1.5884615384615384, "no_speech_prob": 1.0676944839360658e-06}, {"id": 710, "seek": 295670, "start": 2984.2999999999997, "end": 2985.7, "text": " any cons.", "tokens": [604, 1014, 13], "temperature": 0.0, "avg_logprob": -0.2059101104736328, "compression_ratio": 1.5884615384615384, "no_speech_prob": 1.0676944839360658e-06}, {"id": 711, "seek": 298570, "start": 2985.7, "end": 2987.62, "text": " But we've talked about a lot of pros.", "tokens": [583, 321, 600, 2825, 466, 257, 688, 295, 6267, 13], "temperature": 0.0, "avg_logprob": -0.2015051980620449, "compression_ratio": 1.7161572052401746, "no_speech_prob": 2.045497421931941e-05}, {"id": 712, "seek": 298570, "start": 2987.62, "end": 2988.62, "text": " Are there cons?", "tokens": [2014, 456, 1014, 30], "temperature": 0.0, "avg_logprob": -0.2015051980620449, "compression_ratio": 1.7161572052401746, "no_speech_prob": 2.045497421931941e-05}, {"id": 713, "seek": 298570, "start": 2988.62, "end": 2989.62, "text": " Are there downsides?", "tokens": [2014, 456, 21554, 1875, 30], "temperature": 0.0, "avg_logprob": -0.2015051980620449, "compression_ratio": 1.7161572052401746, "no_speech_prob": 2.045497421931941e-05}, {"id": 714, "seek": 298570, "start": 2989.62, "end": 2993.8599999999997, "text": " Are there common use cases that your package might not be a good fit for?", "tokens": [2014, 456, 2689, 764, 3331, 300, 428, 7372, 1062, 406, 312, 257, 665, 3318, 337, 30], "temperature": 0.0, "avg_logprob": -0.2015051980620449, "compression_ratio": 1.7161572052401746, "no_speech_prob": 2.045497421931941e-05}, {"id": 715, "seek": 298570, "start": 2993.8599999999997, "end": 3000.46, "text": " I think that if you use query parameters like a lot on every page, quite a lot of them,", "tokens": [286, 519, 300, 498, 291, 764, 14581, 9834, 411, 257, 688, 322, 633, 3028, 11, 1596, 257, 688, 295, 552, 11], "temperature": 0.0, "avg_logprob": -0.2015051980620449, "compression_ratio": 1.7161572052401746, "no_speech_prob": 2.045497421931941e-05}, {"id": 716, "seek": 298570, "start": 3000.46, "end": 3006.7799999999997, "text": " it might be annoying to work with a dictionary type that I went with.", "tokens": [309, 1062, 312, 11304, 281, 589, 365, 257, 25890, 2010, 300, 286, 1437, 365, 13], "temperature": 0.0, "avg_logprob": -0.2015051980620449, "compression_ratio": 1.7161572052401746, "no_speech_prob": 2.045497421931941e-05}, {"id": 717, "seek": 298570, "start": 3006.7799999999997, "end": 3013.2599999999998, "text": " And my reasoning when designing the query parameters was that like in none of the apps", "tokens": [400, 452, 21577, 562, 14685, 264, 14581, 9834, 390, 300, 411, 294, 6022, 295, 264, 7733], "temperature": 0.0, "avg_logprob": -0.2015051980620449, "compression_ratio": 1.7161572052401746, "no_speech_prob": 2.045497421931941e-05}, {"id": 718, "seek": 301326, "start": 3013.26, "end": 3016.86, "text": " that I work with, we have that many query parameters.", "tokens": [300, 286, 589, 365, 11, 321, 362, 300, 867, 14581, 9834, 13], "temperature": 0.0, "avg_logprob": -0.24468969094632853, "compression_ratio": 1.6791666666666667, "no_speech_prob": 7.886569619586226e-06}, {"id": 719, "seek": 301326, "start": 3016.86, "end": 3023.38, "text": " So it was hard to come up with something nice because I use it so little that like just", "tokens": [407, 309, 390, 1152, 281, 808, 493, 365, 746, 1481, 570, 286, 764, 309, 370, 707, 300, 411, 445], "temperature": 0.0, "avg_logprob": -0.24468969094632853, "compression_ratio": 1.6791666666666667, "no_speech_prob": 7.886569619586226e-06}, {"id": 720, "seek": 301326, "start": 3023.38, "end": 3029.6200000000003, "text": " a little bit of extra code here and there was simpler than trying to figure out a nice", "tokens": [257, 707, 857, 295, 2857, 3089, 510, 293, 456, 390, 18587, 813, 1382, 281, 2573, 484, 257, 1481], "temperature": 0.0, "avg_logprob": -0.24468969094632853, "compression_ratio": 1.6791666666666667, "no_speech_prob": 7.886569619586226e-06}, {"id": 721, "seek": 301326, "start": 3029.6200000000003, "end": 3031.6400000000003, "text": " API for working with them.", "tokens": [9362, 337, 1364, 365, 552, 13], "temperature": 0.0, "avg_logprob": -0.24468969094632853, "compression_ratio": 1.6791666666666667, "no_speech_prob": 7.886569619586226e-06}, {"id": 722, "seek": 301326, "start": 3031.6400000000003, "end": 3039.0600000000004, "text": " So basically the thing that I'm the most excited about in the package is the pattern matching", "tokens": [407, 1936, 264, 551, 300, 286, 478, 264, 881, 2919, 466, 294, 264, 7372, 307, 264, 5102, 14324], "temperature": 0.0, "avg_logprob": -0.24468969094632853, "compression_ratio": 1.6791666666666667, "no_speech_prob": 7.886569619586226e-06}, {"id": 723, "seek": 301326, "start": 3039.0600000000004, "end": 3042.76, "text": " on the path pattern, which is easy with this package.", "tokens": [322, 264, 3100, 5102, 11, 597, 307, 1858, 365, 341, 7372, 13], "temperature": 0.0, "avg_logprob": -0.24468969094632853, "compression_ratio": 1.6791666666666667, "no_speech_prob": 7.886569619586226e-06}, {"id": 724, "seek": 304276, "start": 3042.76, "end": 3049.2200000000003, "text": " And then the query parameters that I just wanted to like, here is a structure that represents", "tokens": [400, 550, 264, 14581, 9834, 300, 286, 445, 1415, 281, 411, 11, 510, 307, 257, 3877, 300, 8855], "temperature": 0.0, "avg_logprob": -0.24886319803637127, "compression_ratio": 1.6153846153846154, "no_speech_prob": 3.3695559977786615e-05}, {"id": 725, "seek": 304276, "start": 3049.2200000000003, "end": 3051.2200000000003, "text": " them quite well.", "tokens": [552, 1596, 731, 13], "temperature": 0.0, "avg_logprob": -0.24886319803637127, "compression_ratio": 1.6153846153846154, "no_speech_prob": 3.3695559977786615e-05}, {"id": 726, "seek": 304276, "start": 3051.2200000000003, "end": 3060.0200000000004, "text": " And it's kind of easy to work with, but it might require a line or two or extra of extra", "tokens": [400, 309, 311, 733, 295, 1858, 281, 589, 365, 11, 457, 309, 1062, 3651, 257, 1622, 420, 732, 420, 2857, 295, 2857], "temperature": 0.0, "avg_logprob": -0.24886319803637127, "compression_ratio": 1.6153846153846154, "no_speech_prob": 3.3695559977786615e-05}, {"id": 727, "seek": 304276, "start": 3060.0200000000004, "end": 3061.6200000000003, "text": " code here and there.", "tokens": [3089, 510, 293, 456, 13], "temperature": 0.0, "avg_logprob": -0.24886319803637127, "compression_ratio": 1.6153846153846154, "no_speech_prob": 3.3695559977786615e-05}, {"id": 728, "seek": 304276, "start": 3061.6200000000003, "end": 3069.0600000000004, "text": " Yeah, I mentioned that you rarely use query parameters in practice, but also even less", "tokens": [865, 11, 286, 2835, 300, 291, 13752, 764, 14581, 9834, 294, 3124, 11, 457, 611, 754, 1570], "temperature": 0.0, "avg_logprob": -0.24886319803637127, "compression_ratio": 1.6153846153846154, "no_speech_prob": 3.3695559977786615e-05}, {"id": 729, "seek": 304276, "start": 3069.0600000000004, "end": 3071.7400000000002, "text": " multiple times the same one.", "tokens": [3866, 1413, 264, 912, 472, 13], "temperature": 0.0, "avg_logprob": -0.24886319803637127, "compression_ratio": 1.6153846153846154, "no_speech_prob": 3.3695559977786615e-05}, {"id": 730, "seek": 307174, "start": 3071.74, "end": 3078.14, "text": " So you have a dictionary of list string as values, but in practice it's always just a", "tokens": [407, 291, 362, 257, 25890, 295, 1329, 6798, 382, 4190, 11, 457, 294, 3124, 309, 311, 1009, 445, 257], "temperature": 0.0, "avg_logprob": -0.32029745795510034, "compression_ratio": 1.5534883720930233, "no_speech_prob": 2.947893108284916e-06}, {"id": 731, "seek": 307174, "start": 3078.14, "end": 3079.8999999999996, "text": " single value, right?", "tokens": [2167, 2158, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.32029745795510034, "compression_ratio": 1.5534883720930233, "no_speech_prob": 2.947893108284916e-06}, {"id": 732, "seek": 307174, "start": 3079.8999999999996, "end": 3081.8599999999997, "text": " That must be the most common.", "tokens": [663, 1633, 312, 264, 881, 2689, 13], "temperature": 0.0, "avg_logprob": -0.32029745795510034, "compression_ratio": 1.5534883720930233, "no_speech_prob": 2.947893108284916e-06}, {"id": 733, "seek": 307174, "start": 3081.8599999999997, "end": 3082.8599999999997, "text": " Yeah, sure.", "tokens": [865, 11, 988, 13], "temperature": 0.0, "avg_logprob": -0.32029745795510034, "compression_ratio": 1.5534883720930233, "no_speech_prob": 2.947893108284916e-06}, {"id": 734, "seek": 307174, "start": 3082.8599999999997, "end": 3088.54, "text": " I actually really like this thing I noticed happening a lot in Elm where something that", "tokens": [286, 767, 534, 411, 341, 551, 286, 5694, 2737, 257, 688, 294, 2699, 76, 689, 746, 300], "temperature": 0.0, "avg_logprob": -0.32029745795510034, "compression_ratio": 1.5534883720930233, "no_speech_prob": 2.947893108284916e-06}, {"id": 735, "seek": 307174, "start": 3088.54, "end": 3096.8199999999997, "text": " like in other language ecosystems, I noticed tends to be like a library to help you do", "tokens": [411, 294, 661, 2856, 32647, 11, 286, 5694, 12258, 281, 312, 411, 257, 6405, 281, 854, 291, 360], "temperature": 0.0, "avg_logprob": -0.32029745795510034, "compression_ratio": 1.5534883720930233, "no_speech_prob": 2.947893108284916e-06}, {"id": 736, "seek": 307174, "start": 3096.8199999999997, "end": 3098.3799999999997, "text": " something.", "tokens": [746, 13], "temperature": 0.0, "avg_logprob": -0.32029745795510034, "compression_ratio": 1.5534883720930233, "no_speech_prob": 2.947893108284916e-06}, {"id": 737, "seek": 309838, "start": 3098.38, "end": 3103.42, "text": " In Elm, sometimes it's just, well, it's actually pretty straightforward to do it.", "tokens": [682, 2699, 76, 11, 2171, 309, 311, 445, 11, 731, 11, 309, 311, 767, 1238, 15325, 281, 360, 309, 13], "temperature": 0.0, "avg_logprob": -0.23141606037433332, "compression_ratio": 1.6099585062240664, "no_speech_prob": 4.812479232896294e-07}, {"id": 738, "seek": 309838, "start": 3103.42, "end": 3106.58, "text": " And it ends up being like a pattern rather than a library.", "tokens": [400, 309, 5314, 493, 885, 411, 257, 5102, 2831, 813, 257, 6405, 13], "temperature": 0.0, "avg_logprob": -0.23141606037433332, "compression_ratio": 1.6099585062240664, "no_speech_prob": 4.812479232896294e-07}, {"id": 739, "seek": 309838, "start": 3106.58, "end": 3109.82, "text": " And really it feels like that's what Elm app URL is.", "tokens": [400, 534, 309, 3417, 411, 300, 311, 437, 2699, 76, 724, 12905, 307, 13], "temperature": 0.0, "avg_logprob": -0.23141606037433332, "compression_ratio": 1.6099585062240664, "no_speech_prob": 4.812479232896294e-07}, {"id": 740, "seek": 309838, "start": 3109.82, "end": 3116.5, "text": " It's like a, it's three functions to help you use a pattern, but the pattern is the", "tokens": [467, 311, 411, 257, 11, 309, 311, 1045, 6828, 281, 854, 291, 764, 257, 5102, 11, 457, 264, 5102, 307, 264], "temperature": 0.0, "avg_logprob": -0.23141606037433332, "compression_ratio": 1.6099585062240664, "no_speech_prob": 4.812479232896294e-07}, {"id": 741, "seek": 309838, "start": 3116.5, "end": 3117.5, "text": " bigger thing.", "tokens": [3801, 551, 13], "temperature": 0.0, "avg_logprob": -0.23141606037433332, "compression_ratio": 1.6099585062240664, "no_speech_prob": 4.812479232896294e-07}, {"id": 742, "seek": 309838, "start": 3117.5, "end": 3125.6600000000003, "text": " And if you wanted to, if you have very heavy processing of query parameters in your application,", "tokens": [400, 498, 291, 1415, 281, 11, 498, 291, 362, 588, 4676, 9007, 295, 14581, 9834, 294, 428, 3861, 11], "temperature": 0.0, "avg_logprob": -0.23141606037433332, "compression_ratio": 1.6099585062240664, "no_speech_prob": 4.812479232896294e-07}, {"id": 743, "seek": 312566, "start": 3125.66, "end": 3134.14, "text": " you can create your own domain specific query parameter parsing API and use that with the", "tokens": [291, 393, 1884, 428, 1065, 9274, 2685, 14581, 13075, 21156, 278, 9362, 293, 764, 300, 365, 264], "temperature": 0.0, "avg_logprob": -0.272817145453559, "compression_ratio": 1.6535087719298245, "no_speech_prob": 1.4823280025666463e-06}, {"id": 744, "seek": 312566, "start": 3134.14, "end": 3136.14, "text": " dict string list string.", "tokens": [12569, 6798, 1329, 6798, 13], "temperature": 0.0, "avg_logprob": -0.272817145453559, "compression_ratio": 1.6535087719298245, "no_speech_prob": 1.4823280025666463e-06}, {"id": 745, "seek": 312566, "start": 3136.14, "end": 3143.94, "text": " So it's like ultimate flexibility and simplicity, and you can build your own thing to, you know,", "tokens": [407, 309, 311, 411, 9705, 12635, 293, 25632, 11, 293, 291, 393, 1322, 428, 1065, 551, 281, 11, 291, 458, 11], "temperature": 0.0, "avg_logprob": -0.272817145453559, "compression_ratio": 1.6535087719298245, "no_speech_prob": 1.4823280025666463e-06}, {"id": 746, "seek": 312566, "start": 3143.94, "end": 3149.1, "text": " to address your own internal needs if you outgrow what this pattern allows.", "tokens": [281, 2985, 428, 1065, 6920, 2203, 498, 291, 484, 26685, 437, 341, 5102, 4045, 13], "temperature": 0.0, "avg_logprob": -0.272817145453559, "compression_ratio": 1.6535087719298245, "no_speech_prob": 1.4823280025666463e-06}, {"id": 747, "seek": 312566, "start": 3149.1, "end": 3154.7799999999997, "text": " Speaking about patterns, there is one pattern I would like to bring up, which is dry, the", "tokens": [13069, 466, 8294, 11, 456, 307, 472, 5102, 286, 576, 411, 281, 1565, 493, 11, 597, 307, 4016, 11, 264], "temperature": 0.0, "avg_logprob": -0.272817145453559, "compression_ratio": 1.6535087719298245, "no_speech_prob": 1.4823280025666463e-06}, {"id": 748, "seek": 315478, "start": 3154.78, "end": 3155.98, "text": " dry principle.", "tokens": [4016, 8665, 13], "temperature": 0.0, "avg_logprob": -0.3950508045700361, "compression_ratio": 1.768421052631579, "no_speech_prob": 3.9388498407788575e-05}, {"id": 749, "seek": 315478, "start": 3155.98, "end": 3157.1800000000003, "text": " Don't repeat yourself.", "tokens": [1468, 380, 7149, 1803, 13], "temperature": 0.0, "avg_logprob": -0.3950508045700361, "compression_ratio": 1.768421052631579, "no_speech_prob": 3.9388498407788575e-05}, {"id": 750, "seek": 315478, "start": 3157.1800000000003, "end": 3164.4, "text": " I've learned something there when using this package and that is to don't worry too much", "tokens": [286, 600, 3264, 746, 456, 562, 1228, 341, 7372, 293, 300, 307, 281, 500, 380, 3292, 886, 709], "temperature": 0.0, "avg_logprob": -0.3950508045700361, "compression_ratio": 1.768421052631579, "no_speech_prob": 3.9388498407788575e-05}, {"id": 751, "seek": 315478, "start": 3164.4, "end": 3167.9, "text": " about repeating yourself in this case.", "tokens": [466, 18617, 1803, 294, 341, 1389, 13], "temperature": 0.0, "avg_logprob": -0.3950508045700361, "compression_ratio": 1.768421052631579, "no_speech_prob": 3.9388498407788575e-05}, {"id": 752, "seek": 315478, "start": 3167.9, "end": 3169.0400000000004, "text": " What did you say?", "tokens": [708, 630, 291, 584, 30], "temperature": 0.0, "avg_logprob": -0.3950508045700361, "compression_ratio": 1.768421052631579, "no_speech_prob": 3.9388498407788575e-05}, {"id": 753, "seek": 315478, "start": 3169.0400000000004, "end": 3171.46, "text": " Don't worry too much about repeating yourself.", "tokens": [1468, 380, 3292, 886, 709, 466, 18617, 1803, 13], "temperature": 0.0, "avg_logprob": -0.3950508045700361, "compression_ratio": 1.768421052631579, "no_speech_prob": 3.9388498407788575e-05}, {"id": 754, "seek": 315478, "start": 3171.46, "end": 3173.1000000000004, "text": " Oh, now I did it.", "tokens": [876, 11, 586, 286, 630, 309, 13], "temperature": 0.0, "avg_logprob": -0.3950508045700361, "compression_ratio": 1.768421052631579, "no_speech_prob": 3.9388498407788575e-05}, {"id": 755, "seek": 315478, "start": 3173.1000000000004, "end": 3174.94, "text": " Did you set me up?", "tokens": [2589, 291, 992, 385, 493, 30], "temperature": 0.0, "avg_logprob": -0.3950508045700361, "compression_ratio": 1.768421052631579, "no_speech_prob": 3.9388498407788575e-05}, {"id": 756, "seek": 315478, "start": 3174.94, "end": 3176.7400000000002, "text": " But did you worry about it?", "tokens": [583, 630, 291, 3292, 466, 309, 30], "temperature": 0.0, "avg_logprob": -0.3950508045700361, "compression_ratio": 1.768421052631579, "no_speech_prob": 3.9388498407788575e-05}, {"id": 757, "seek": 315478, "start": 3176.7400000000002, "end": 3179.34, "text": " You didn't worry.", "tokens": [509, 994, 380, 3292, 13], "temperature": 0.0, "avg_logprob": -0.3950508045700361, "compression_ratio": 1.768421052631579, "no_speech_prob": 3.9388498407788575e-05}, {"id": 758, "seek": 315478, "start": 3179.34, "end": 3181.34, "text": " You're good.", "tokens": [509, 434, 665, 13], "temperature": 0.0, "avg_logprob": -0.3950508045700361, "compression_ratio": 1.768421052631579, "no_speech_prob": 3.9388498407788575e-05}, {"id": 759, "seek": 315478, "start": 3181.34, "end": 3183.34, "text": " Oh, nice.", "tokens": [876, 11, 1481, 13], "temperature": 0.0, "avg_logprob": -0.3950508045700361, "compression_ratio": 1.768421052631579, "no_speech_prob": 3.9388498407788575e-05}, {"id": 760, "seek": 318334, "start": 3183.34, "end": 3192.1400000000003, "text": " So it's very common that you have URLs that all start with the same pieces.", "tokens": [407, 309, 311, 588, 2689, 300, 291, 362, 43267, 300, 439, 722, 365, 264, 912, 3755, 13], "temperature": 0.0, "avg_logprob": -0.30590689672182686, "compression_ratio": 1.7117647058823529, "no_speech_prob": 8.526007150067016e-06}, {"id": 761, "seek": 318334, "start": 3192.1400000000003, "end": 3195.6800000000003, "text": " Like you could have slash product slash slug.", "tokens": [1743, 291, 727, 362, 17330, 1674, 17330, 1061, 697, 13], "temperature": 0.0, "avg_logprob": -0.30590689672182686, "compression_ratio": 1.7117647058823529, "no_speech_prob": 8.526007150067016e-06}, {"id": 762, "seek": 318334, "start": 3195.6800000000003, "end": 3202.4, "text": " And on top of that, you could have like slash specs, slash reviews, slash whatever.", "tokens": [400, 322, 1192, 295, 300, 11, 291, 727, 362, 411, 17330, 27911, 11, 17330, 10229, 11, 17330, 2035, 13], "temperature": 0.0, "avg_logprob": -0.30590689672182686, "compression_ratio": 1.7117647058823529, "no_speech_prob": 8.526007150067016e-06}, {"id": 763, "seek": 318334, "start": 3202.4, "end": 3208.7400000000002, "text": " And for reviews, maybe have like slash reviews slash and then review ID or something.", "tokens": [400, 337, 10229, 11, 1310, 362, 411, 17330, 10229, 17330, 293, 550, 3131, 7348, 420, 746, 13], "temperature": 0.0, "avg_logprob": -0.30590689672182686, "compression_ratio": 1.7117647058823529, "no_speech_prob": 8.526007150067016e-06}, {"id": 764, "seek": 320874, "start": 3208.74, "end": 3214.2599999999998, "text": " And you might be tempted to like write your code so that you mentioned the string product", "tokens": [400, 291, 1062, 312, 29941, 281, 411, 2464, 428, 3089, 370, 300, 291, 2835, 264, 6798, 1674], "temperature": 0.0, "avg_logprob": -0.26627283920476463, "compression_ratio": 1.766497461928934, "no_speech_prob": 1.4423347238334827e-05}, {"id": 765, "seek": 320874, "start": 3214.2599999999998, "end": 3222.54, "text": " just once or like you mentioned the whole piece product slash slug slash reviews just", "tokens": [445, 1564, 420, 411, 291, 2835, 264, 1379, 2522, 1674, 17330, 1061, 697, 17330, 10229, 445], "temperature": 0.0, "avg_logprob": -0.26627283920476463, "compression_ratio": 1.766497461928934, "no_speech_prob": 1.4423347238334827e-05}, {"id": 766, "seek": 320874, "start": 3222.54, "end": 3228.22, "text": " once so that if you need to change that URL, there will be just one string to change.", "tokens": [1564, 370, 300, 498, 291, 643, 281, 1319, 300, 12905, 11, 456, 486, 312, 445, 472, 6798, 281, 1319, 13], "temperature": 0.0, "avg_logprob": -0.26627283920476463, "compression_ratio": 1.766497461928934, "no_speech_prob": 1.4423347238334827e-05}, {"id": 767, "seek": 320874, "start": 3228.22, "end": 3234.2599999999998, "text": " But when I have written my code like that, like nested pattern matching or like having", "tokens": [583, 562, 286, 362, 3720, 452, 3089, 411, 300, 11, 411, 15646, 292, 5102, 14324, 420, 411, 1419], "temperature": 0.0, "avg_logprob": -0.26627283920476463, "compression_ratio": 1.766497461928934, "no_speech_prob": 1.4423347238334827e-05}, {"id": 768, "seek": 323426, "start": 3234.26, "end": 3240.5800000000004, "text": " sub functions for parsing deeper and deeper, that's so much harder to understand and results", "tokens": [1422, 6828, 337, 21156, 278, 7731, 293, 7731, 11, 300, 311, 370, 709, 6081, 281, 1223, 293, 3542], "temperature": 0.0, "avg_logprob": -0.18801361255431442, "compression_ratio": 1.576036866359447, "no_speech_prob": 4.7973582695703954e-05}, {"id": 769, "seek": 323426, "start": 3240.5800000000004, "end": 3242.42, "text": " in so much more code.", "tokens": [294, 370, 709, 544, 3089, 13], "temperature": 0.0, "avg_logprob": -0.18801361255431442, "compression_ratio": 1.576036866359447, "no_speech_prob": 4.7973582695703954e-05}, {"id": 770, "seek": 323426, "start": 3242.42, "end": 3249.1400000000003, "text": " So what I like to do is to simply type out every pattern in my pattern match, even if", "tokens": [407, 437, 286, 411, 281, 360, 307, 281, 2935, 2010, 484, 633, 5102, 294, 452, 5102, 2995, 11, 754, 498], "temperature": 0.0, "avg_logprob": -0.18801361255431442, "compression_ratio": 1.576036866359447, "no_speech_prob": 4.7973582695703954e-05}, {"id": 771, "seek": 323426, "start": 3249.1400000000003, "end": 3253.42, "text": " it means I write product like 10 times, it's so much easier to read.", "tokens": [309, 1355, 286, 2464, 1674, 411, 1266, 1413, 11, 309, 311, 370, 709, 3571, 281, 1401, 13], "temperature": 0.0, "avg_logprob": -0.18801361255431442, "compression_ratio": 1.576036866359447, "no_speech_prob": 4.7973582695703954e-05}, {"id": 772, "seek": 323426, "start": 3253.42, "end": 3258.82, "text": " And you also get this like nice overview of all your pages in one place.", "tokens": [400, 291, 611, 483, 341, 411, 1481, 12492, 295, 439, 428, 7183, 294, 472, 1081, 13], "temperature": 0.0, "avg_logprob": -0.18801361255431442, "compression_ratio": 1.576036866359447, "no_speech_prob": 4.7973582695703954e-05}, {"id": 773, "seek": 325882, "start": 3258.82, "end": 3265.34, "text": " And what I'm thinking here is that you need to repeat it once anyway, because you're going", "tokens": [400, 437, 286, 478, 1953, 510, 307, 300, 291, 643, 281, 7149, 309, 1564, 4033, 11, 570, 291, 434, 516], "temperature": 0.0, "avg_logprob": -0.2061116158425271, "compression_ratio": 1.7327935222672064, "no_speech_prob": 6.443527672672644e-05}, {"id": 774, "seek": 325882, "start": 3265.34, "end": 3268.54, "text": " to need to be able to create these URLs as well.", "tokens": [281, 643, 281, 312, 1075, 281, 1884, 613, 43267, 382, 731, 13], "temperature": 0.0, "avg_logprob": -0.2061116158425271, "compression_ratio": 1.7327935222672064, "no_speech_prob": 6.443527672672644e-05}, {"id": 775, "seek": 325882, "start": 3268.54, "end": 3274.32, "text": " So you can't just mention product, the string product in a pattern match, you also need", "tokens": [407, 291, 393, 380, 445, 2152, 1674, 11, 264, 6798, 1674, 294, 257, 5102, 2995, 11, 291, 611, 643], "temperature": 0.0, "avg_logprob": -0.2061116158425271, "compression_ratio": 1.7327935222672064, "no_speech_prob": 6.443527672672644e-05}, {"id": 776, "seek": 325882, "start": 3274.32, "end": 3278.82, "text": " to have it in a function that can create those URLs.", "tokens": [281, 362, 309, 294, 257, 2445, 300, 393, 1884, 729, 43267, 13], "temperature": 0.0, "avg_logprob": -0.2061116158425271, "compression_ratio": 1.7327935222672064, "no_speech_prob": 6.443527672672644e-05}, {"id": 777, "seek": 325882, "start": 3278.82, "end": 3282.94, "text": " And on top of that, like, how often do you change your URLs?", "tokens": [400, 322, 1192, 295, 300, 11, 411, 11, 577, 2049, 360, 291, 1319, 428, 43267, 30], "temperature": 0.0, "avg_logprob": -0.2061116158425271, "compression_ratio": 1.7327935222672064, "no_speech_prob": 6.443527672672644e-05}, {"id": 778, "seek": 325882, "start": 3282.94, "end": 3287.1000000000004, "text": " It's usually an anti pattern to change your URLs, but because people are going to have", "tokens": [467, 311, 2673, 364, 6061, 5102, 281, 1319, 428, 43267, 11, 457, 570, 561, 366, 516, 281, 362], "temperature": 0.0, "avg_logprob": -0.2061116158425271, "compression_ratio": 1.7327935222672064, "no_speech_prob": 6.443527672672644e-05}, {"id": 779, "seek": 328710, "start": 3287.1, "end": 3291.74, "text": " them in their history and stuff, and if they don't work, your, your app is broken, right?", "tokens": [552, 294, 641, 2503, 293, 1507, 11, 293, 498, 436, 500, 380, 589, 11, 428, 11, 428, 724, 307, 5463, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.25721429523668793, "compression_ratio": 1.579646017699115, "no_speech_prob": 1.8342370822210796e-05}, {"id": 780, "seek": 328710, "start": 3291.74, "end": 3298.7, "text": " Yeah, if you're if you're really worried about it, maybe write some unit tests for it.", "tokens": [865, 11, 498, 291, 434, 498, 291, 434, 534, 5804, 466, 309, 11, 1310, 2464, 512, 4985, 6921, 337, 309, 13], "temperature": 0.0, "avg_logprob": -0.25721429523668793, "compression_ratio": 1.579646017699115, "no_speech_prob": 1.8342370822210796e-05}, {"id": 781, "seek": 328710, "start": 3298.7, "end": 3305.54, "text": " There's someone named Arlo Belshi has a concept he talks about, I'll link to the blog post", "tokens": [821, 311, 1580, 4926, 1587, 752, 363, 1625, 4954, 575, 257, 3410, 415, 6686, 466, 11, 286, 603, 2113, 281, 264, 6968, 2183], "temperature": 0.0, "avg_logprob": -0.25721429523668793, "compression_ratio": 1.579646017699115, "no_speech_prob": 1.8342370822210796e-05}, {"id": 782, "seek": 328710, "start": 3305.54, "end": 3312.54, "text": " where he makes the argument that for for tests that you write, people overuse the concept", "tokens": [689, 415, 1669, 264, 6770, 300, 337, 337, 6921, 300, 291, 2464, 11, 561, 670, 438, 264, 3410], "temperature": 0.0, "avg_logprob": -0.25721429523668793, "compression_ratio": 1.579646017699115, "no_speech_prob": 1.8342370822210796e-05}, {"id": 783, "seek": 331254, "start": 3312.54, "end": 3321.22, "text": " of dry, and he proposes for testing using a concept called wet, which he he says is", "tokens": [295, 4016, 11, 293, 415, 2365, 4201, 337, 4997, 1228, 257, 3410, 1219, 6630, 11, 597, 415, 415, 1619, 307], "temperature": 0.0, "avg_logprob": -0.20073649859187578, "compression_ratio": 1.6752136752136753, "no_speech_prob": 2.3687794055149425e-06}, {"id": 784, "seek": 331254, "start": 3321.22, "end": 3323.22, "text": " write explicit tests.", "tokens": [2464, 13691, 6921, 13], "temperature": 0.0, "avg_logprob": -0.20073649859187578, "compression_ratio": 1.6752136752136753, "no_speech_prob": 2.3687794055149425e-06}, {"id": 785, "seek": 331254, "start": 3323.22, "end": 3329.74, "text": " Because sometimes what happens is, you almost need a test for your tests, because you use", "tokens": [1436, 2171, 437, 2314, 307, 11, 291, 1920, 643, 257, 1500, 337, 428, 6921, 11, 570, 291, 764], "temperature": 0.0, "avg_logprob": -0.20073649859187578, "compression_ratio": 1.6752136752136753, "no_speech_prob": 2.3687794055149425e-06}, {"id": 786, "seek": 331254, "start": 3329.74, "end": 3335.18, "text": " so many levels of abstraction for writing your tests that you don't know if it's actually", "tokens": [370, 867, 4358, 295, 37765, 337, 3579, 428, 6921, 300, 291, 500, 380, 458, 498, 309, 311, 767], "temperature": 0.0, "avg_logprob": -0.20073649859187578, "compression_ratio": 1.6752136752136753, "no_speech_prob": 2.3687794055149425e-06}, {"id": 787, "seek": 331254, "start": 3335.18, "end": 3336.66, "text": " doing what you expect.", "tokens": [884, 437, 291, 2066, 13], "temperature": 0.0, "avg_logprob": -0.20073649859187578, "compression_ratio": 1.6752136752136753, "no_speech_prob": 2.3687794055149425e-06}, {"id": 788, "seek": 331254, "start": 3336.66, "end": 3341.06, "text": " So his argument is, you should be able to look at a test and know exactly what it's", "tokens": [407, 702, 6770, 307, 11, 291, 820, 312, 1075, 281, 574, 412, 257, 1500, 293, 458, 2293, 437, 309, 311], "temperature": 0.0, "avg_logprob": -0.20073649859187578, "compression_ratio": 1.6752136752136753, "no_speech_prob": 2.3687794055149425e-06}, {"id": 789, "seek": 334106, "start": 3341.06, "end": 3342.54, "text": " doing.", "tokens": [884, 13], "temperature": 0.0, "avg_logprob": -0.24041712725604023, "compression_ratio": 1.5984555984555984, "no_speech_prob": 8.529870683560148e-06}, {"id": 790, "seek": 334106, "start": 3342.54, "end": 3350.02, "text": " And having extra boilerplate and repetition is not a bad thing if it makes it very easy", "tokens": [400, 1419, 2857, 39228, 37008, 293, 30432, 307, 406, 257, 1578, 551, 498, 309, 1669, 309, 588, 1858], "temperature": 0.0, "avg_logprob": -0.24041712725604023, "compression_ratio": 1.5984555984555984, "no_speech_prob": 8.529870683560148e-06}, {"id": 791, "seek": 334106, "start": 3350.02, "end": 3353.38, "text": " to understand exactly what it's doing without having to second guess it.", "tokens": [281, 1223, 2293, 437, 309, 311, 884, 1553, 1419, 281, 1150, 2041, 309, 13], "temperature": 0.0, "avg_logprob": -0.24041712725604023, "compression_ratio": 1.5984555984555984, "no_speech_prob": 8.529870683560148e-06}, {"id": 792, "seek": 334106, "start": 3353.38, "end": 3356.74, "text": " And I think a similar concept would apply here.", "tokens": [400, 286, 519, 257, 2531, 3410, 576, 3079, 510, 13], "temperature": 0.0, "avg_logprob": -0.24041712725604023, "compression_ratio": 1.5984555984555984, "no_speech_prob": 8.529870683560148e-06}, {"id": 793, "seek": 334106, "start": 3356.74, "end": 3361.74, "text": " Don't be too clever, you know, and especially don't be too clever where it doesn't matter,", "tokens": [1468, 380, 312, 886, 13494, 11, 291, 458, 11, 293, 2318, 500, 380, 312, 886, 13494, 689, 309, 1177, 380, 1871, 11], "temperature": 0.0, "avg_logprob": -0.24041712725604023, "compression_ratio": 1.5984555984555984, "no_speech_prob": 8.529870683560148e-06}, {"id": 794, "seek": 334106, "start": 3361.74, "end": 3368.2999999999997, "text": " which URLs is a good example, in my opinion, because like, how many URLs are you going", "tokens": [597, 43267, 307, 257, 665, 1365, 11, 294, 452, 4800, 11, 570, 411, 11, 577, 867, 43267, 366, 291, 516], "temperature": 0.0, "avg_logprob": -0.24041712725604023, "compression_ratio": 1.5984555984555984, "no_speech_prob": 8.529870683560148e-06}, {"id": 795, "seek": 334106, "start": 3368.2999999999997, "end": 3369.82, "text": " to have in your app?", "tokens": [281, 362, 294, 428, 724, 30], "temperature": 0.0, "avg_logprob": -0.24041712725604023, "compression_ratio": 1.5984555984555984, "no_speech_prob": 8.529870683560148e-06}, {"id": 796, "seek": 336982, "start": 3369.82, "end": 3374.1800000000003, "text": " In every app that I worked with, it's like 10 or 20 or 30.", "tokens": [682, 633, 724, 300, 286, 2732, 365, 11, 309, 311, 411, 1266, 420, 945, 420, 2217, 13], "temperature": 0.0, "avg_logprob": -0.25343490740574826, "compression_ratio": 1.523076923076923, "no_speech_prob": 1.9513166989781894e-05}, {"id": 797, "seek": 336982, "start": 3374.1800000000003, "end": 3377.42, "text": " But we don't add a new one like every day.", "tokens": [583, 321, 500, 380, 909, 257, 777, 472, 411, 633, 786, 13], "temperature": 0.0, "avg_logprob": -0.25343490740574826, "compression_ratio": 1.523076923076923, "no_speech_prob": 1.9513166989781894e-05}, {"id": 798, "seek": 336982, "start": 3377.42, "end": 3384.5800000000004, "text": " So to me, it makes sense to have like a dumber, simpler solution for such things.", "tokens": [407, 281, 385, 11, 309, 1669, 2020, 281, 362, 411, 257, 274, 4182, 11, 18587, 3827, 337, 1270, 721, 13], "temperature": 0.0, "avg_logprob": -0.25343490740574826, "compression_ratio": 1.523076923076923, "no_speech_prob": 1.9513166989781894e-05}, {"id": 799, "seek": 336982, "start": 3384.5800000000004, "end": 3391.2200000000003, "text": " Yeah, actually, Elm has changed my understanding of what maintainable code looks like.", "tokens": [865, 11, 767, 11, 2699, 76, 575, 3105, 452, 3701, 295, 437, 6909, 712, 3089, 1542, 411, 13], "temperature": 0.0, "avg_logprob": -0.25343490740574826, "compression_ratio": 1.523076923076923, "no_speech_prob": 1.9513166989781894e-05}, {"id": 800, "seek": 336982, "start": 3391.2200000000003, "end": 3396.6200000000003, "text": " And I something is stuck with me that I heard Richard Feldman say about, like, how we talk", "tokens": [400, 286, 746, 307, 5541, 365, 385, 300, 286, 2198, 9809, 42677, 1601, 584, 466, 11, 411, 11, 577, 321, 751], "temperature": 0.0, "avg_logprob": -0.25343490740574826, "compression_ratio": 1.523076923076923, "no_speech_prob": 1.9513166989781894e-05}, {"id": 801, "seek": 336982, "start": 3396.6200000000003, "end": 3399.1400000000003, "text": " about boilerplate in these things.", "tokens": [466, 39228, 37008, 294, 613, 721, 13], "temperature": 0.0, "avg_logprob": -0.25343490740574826, "compression_ratio": 1.523076923076923, "no_speech_prob": 1.9513166989781894e-05}, {"id": 802, "seek": 339914, "start": 3399.14, "end": 3404.8599999999997, "text": " And of course, like, there's certain types of boilerplate that make code harder to understand", "tokens": [400, 295, 1164, 11, 411, 11, 456, 311, 1629, 3467, 295, 39228, 37008, 300, 652, 3089, 6081, 281, 1223], "temperature": 0.0, "avg_logprob": -0.17900183541434153, "compression_ratio": 1.7764227642276422, "no_speech_prob": 2.2603030629397836e-06}, {"id": 803, "seek": 339914, "start": 3404.8599999999997, "end": 3405.8599999999997, "text": " and maintain.", "tokens": [293, 6909, 13], "temperature": 0.0, "avg_logprob": -0.17900183541434153, "compression_ratio": 1.7764227642276422, "no_speech_prob": 2.2603030629397836e-06}, {"id": 804, "seek": 339914, "start": 3405.8599999999997, "end": 3406.8599999999997, "text": " And that's not good.", "tokens": [400, 300, 311, 406, 665, 13], "temperature": 0.0, "avg_logprob": -0.17900183541434153, "compression_ratio": 1.7764227642276422, "no_speech_prob": 2.2603030629397836e-06}, {"id": 805, "seek": 339914, "start": 3406.8599999999997, "end": 3411.7, "text": " You know, you want code to be very straightforward and clear and easy to understand.", "tokens": [509, 458, 11, 291, 528, 3089, 281, 312, 588, 15325, 293, 1850, 293, 1858, 281, 1223, 13], "temperature": 0.0, "avg_logprob": -0.17900183541434153, "compression_ratio": 1.7764227642276422, "no_speech_prob": 2.2603030629397836e-06}, {"id": 806, "seek": 339914, "start": 3411.7, "end": 3417.18, "text": " And you want things to be less error prone and fewer places for human error.", "tokens": [400, 291, 528, 721, 281, 312, 1570, 6713, 25806, 293, 13366, 3190, 337, 1952, 6713, 13], "temperature": 0.0, "avg_logprob": -0.17900183541434153, "compression_ratio": 1.7764227642276422, "no_speech_prob": 2.2603030629397836e-06}, {"id": 807, "seek": 339914, "start": 3417.18, "end": 3423.2999999999997, "text": " But boilerplate that doesn't have the possibility of human error that doesn't introduce another", "tokens": [583, 39228, 37008, 300, 1177, 380, 362, 264, 7959, 295, 1952, 6713, 300, 1177, 380, 5366, 1071], "temperature": 0.0, "avg_logprob": -0.17900183541434153, "compression_ratio": 1.7764227642276422, "no_speech_prob": 2.2603030629397836e-06}, {"id": 808, "seek": 339914, "start": 3423.2999999999997, "end": 3426.74, "text": " possible point of failure is not such a bad thing.", "tokens": [1944, 935, 295, 7763, 307, 406, 1270, 257, 1578, 551, 13], "temperature": 0.0, "avg_logprob": -0.17900183541434153, "compression_ratio": 1.7764227642276422, "no_speech_prob": 2.2603030629397836e-06}, {"id": 809, "seek": 342674, "start": 3426.74, "end": 3432.18, "text": " It's not necessarily what's slowing down your ability to maintain code.", "tokens": [467, 311, 406, 4725, 437, 311, 26958, 760, 428, 3485, 281, 6909, 3089, 13], "temperature": 0.0, "avg_logprob": -0.21859781174432663, "compression_ratio": 1.7142857142857142, "no_speech_prob": 4.425456154422136e-06}, {"id": 810, "seek": 342674, "start": 3432.18, "end": 3437.14, "text": " And so that's kind of stuck with me is like, when you're trying to simplify something,", "tokens": [400, 370, 300, 311, 733, 295, 5541, 365, 385, 307, 411, 11, 562, 291, 434, 1382, 281, 20460, 746, 11], "temperature": 0.0, "avg_logprob": -0.21859781174432663, "compression_ratio": 1.7142857142857142, "no_speech_prob": 4.425456154422136e-06}, {"id": 811, "seek": 342674, "start": 3437.14, "end": 3442.06, "text": " you have to think about like, why are you simplifying it for some aesthetic purpose", "tokens": [291, 362, 281, 519, 466, 411, 11, 983, 366, 291, 6883, 5489, 309, 337, 512, 20092, 4334], "temperature": 0.0, "avg_logprob": -0.21859781174432663, "compression_ratio": 1.7142857142857142, "no_speech_prob": 4.425456154422136e-06}, {"id": 812, "seek": 342674, "start": 3442.06, "end": 3447.7, "text": " that doesn't actually change how easy something is to maintain and work with and how bug prone", "tokens": [300, 1177, 380, 767, 1319, 577, 1858, 746, 307, 281, 6909, 293, 589, 365, 293, 577, 7426, 25806], "temperature": 0.0, "avg_logprob": -0.21859781174432663, "compression_ratio": 1.7142857142857142, "no_speech_prob": 4.425456154422136e-06}, {"id": 813, "seek": 342674, "start": 3447.7, "end": 3453.22, "text": " it is or not, you know, so I think that's a that's a really good nugget of wisdom.", "tokens": [309, 307, 420, 406, 11, 291, 458, 11, 370, 286, 519, 300, 311, 257, 300, 311, 257, 534, 665, 30279, 847, 295, 10712, 13], "temperature": 0.0, "avg_logprob": -0.21859781174432663, "compression_ratio": 1.7142857142857142, "no_speech_prob": 4.425456154422136e-06}, {"id": 814, "seek": 345322, "start": 3453.22, "end": 3459.98, "text": " What really surprised me with this solution with LmapURL is how simple it is.", "tokens": [708, 534, 6100, 385, 365, 341, 3827, 365, 441, 24223, 7932, 43, 307, 577, 2199, 309, 307, 13], "temperature": 0.0, "avg_logprob": -0.2658891003541272, "compression_ratio": 1.4866071428571428, "no_speech_prob": 7.645612640772015e-06}, {"id": 815, "seek": 345322, "start": 3459.98, "end": 3466.1, "text": " And then I'm wondering, like, why did we put up with LMURL's approach for so long?", "tokens": [400, 550, 286, 478, 6359, 11, 411, 11, 983, 630, 321, 829, 493, 365, 441, 44, 7932, 43, 311, 3109, 337, 370, 938, 30], "temperature": 0.0, "avg_logprob": -0.2658891003541272, "compression_ratio": 1.4866071428571428, "no_speech_prob": 7.645612640772015e-06}, {"id": 816, "seek": 345322, "start": 3466.1, "end": 3468.7799999999997, "text": " Like, I mean, it works.", "tokens": [1743, 11, 286, 914, 11, 309, 1985, 13], "temperature": 0.0, "avg_logprob": -0.2658891003541272, "compression_ratio": 1.4866071428571428, "no_speech_prob": 7.645612640772015e-06}, {"id": 817, "seek": 345322, "start": 3468.7799999999997, "end": 3474.2999999999997, "text": " So it's not something that we have to reinvent on purpose, because maybe it works pretty", "tokens": [407, 309, 311, 406, 746, 300, 321, 362, 281, 33477, 322, 4334, 11, 570, 1310, 309, 1985, 1238], "temperature": 0.0, "avg_logprob": -0.2658891003541272, "compression_ratio": 1.4866071428571428, "no_speech_prob": 7.645612640772015e-06}, {"id": 818, "seek": 345322, "start": 3474.2999999999997, "end": 3475.2999999999997, "text": " fine.", "tokens": [2489, 13], "temperature": 0.0, "avg_logprob": -0.2658891003541272, "compression_ratio": 1.4866071428571428, "no_speech_prob": 7.645612640772015e-06}, {"id": 819, "seek": 345322, "start": 3475.2999999999997, "end": 3479.74, "text": " But like, how, how come we stuck with it for so long?", "tokens": [583, 411, 11, 577, 11, 577, 808, 321, 5541, 365, 309, 337, 370, 938, 30], "temperature": 0.0, "avg_logprob": -0.2658891003541272, "compression_ratio": 1.4866071428571428, "no_speech_prob": 7.645612640772015e-06}, {"id": 820, "seek": 347974, "start": 3479.74, "end": 3485.9399999999996, "text": " I think the key here is that the elm slash URL package works.", "tokens": [286, 519, 264, 2141, 510, 307, 300, 264, 806, 76, 17330, 12905, 7372, 1985, 13], "temperature": 0.0, "avg_logprob": -0.23006621504251937, "compression_ratio": 1.6234309623430963, "no_speech_prob": 3.286615992692532e-06}, {"id": 821, "seek": 347974, "start": 3485.9399999999996, "end": 3490.22, "text": " There are like some annoyances with it, but it doesn't stop you from doing what you're", "tokens": [821, 366, 411, 512, 8759, 2676, 365, 309, 11, 457, 309, 1177, 380, 1590, 291, 490, 884, 437, 291, 434], "temperature": 0.0, "avg_logprob": -0.23006621504251937, "compression_ratio": 1.6234309623430963, "no_speech_prob": 3.286615992692532e-06}, {"id": 822, "seek": 347974, "start": 3490.22, "end": 3491.7799999999997, "text": " supposed to.", "tokens": [3442, 281, 13], "temperature": 0.0, "avg_logprob": -0.23006621504251937, "compression_ratio": 1.6234309623430963, "no_speech_prob": 3.286615992692532e-06}, {"id": 823, "seek": 347974, "start": 3491.7799999999997, "end": 3499.02, "text": " And once you are a bit familiar with elm, like you figure it out, you're able to set", "tokens": [400, 1564, 291, 366, 257, 857, 4963, 365, 806, 76, 11, 411, 291, 2573, 309, 484, 11, 291, 434, 1075, 281, 992], "temperature": 0.0, "avg_logprob": -0.23006621504251937, "compression_ratio": 1.6234309623430963, "no_speech_prob": 3.286615992692532e-06}, {"id": 824, "seek": 347974, "start": 3499.02, "end": 3501.06, "text": " up the URLs you need.", "tokens": [493, 264, 43267, 291, 643, 13], "temperature": 0.0, "avg_logprob": -0.23006621504251937, "compression_ratio": 1.6234309623430963, "no_speech_prob": 3.286615992692532e-06}, {"id": 825, "seek": 347974, "start": 3501.06, "end": 3504.9399999999996, "text": " And then you don't think about it and move on with more interesting things.", "tokens": [400, 550, 291, 500, 380, 519, 466, 309, 293, 1286, 322, 365, 544, 1880, 721, 13], "temperature": 0.0, "avg_logprob": -0.23006621504251937, "compression_ratio": 1.6234309623430963, "no_speech_prob": 3.286615992692532e-06}, {"id": 826, "seek": 347974, "start": 3504.9399999999996, "end": 3505.9399999999996, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.23006621504251937, "compression_ratio": 1.6234309623430963, "no_speech_prob": 3.286615992692532e-06}, {"id": 827, "seek": 347974, "start": 3505.9399999999996, "end": 3508.4199999999996, "text": " And also, it's a core package, right?", "tokens": [400, 611, 11, 309, 311, 257, 4965, 7372, 11, 558, 30], "temperature": 0.0, "avg_logprob": -0.23006621504251937, "compression_ratio": 1.6234309623430963, "no_speech_prob": 3.286615992692532e-06}, {"id": 828, "seek": 350842, "start": 3508.42, "end": 3513.58, "text": " So, oh, it has to be good or this has to be the way.", "tokens": [407, 11, 1954, 11, 309, 575, 281, 312, 665, 420, 341, 575, 281, 312, 264, 636, 13], "temperature": 0.0, "avg_logprob": -0.28327469906564484, "compression_ratio": 1.6487603305785123, "no_speech_prob": 1.3201381079852581e-05}, {"id": 829, "seek": 350842, "start": 3513.58, "end": 3514.58, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.28327469906564484, "compression_ratio": 1.6487603305785123, "no_speech_prob": 1.3201381079852581e-05}, {"id": 830, "seek": 350842, "start": 3514.58, "end": 3521.26, "text": " I guess that's like judging by the quality of elm itself and all the core packages, you", "tokens": [286, 2041, 300, 311, 411, 23587, 538, 264, 3125, 295, 806, 76, 2564, 293, 439, 264, 4965, 17401, 11, 291], "temperature": 0.0, "avg_logprob": -0.28327469906564484, "compression_ratio": 1.6487603305785123, "no_speech_prob": 1.3201381079852581e-05}, {"id": 831, "seek": 350842, "start": 3521.26, "end": 3523.76, "text": " have that expectation on all of them.", "tokens": [362, 300, 14334, 322, 439, 295, 552, 13], "temperature": 0.0, "avg_logprob": -0.28327469906564484, "compression_ratio": 1.6487603305785123, "no_speech_prob": 1.3201381079852581e-05}, {"id": 832, "seek": 350842, "start": 3523.76, "end": 3527.82, "text": " But if you think about it, like, of course, there's going to be one package that isn't", "tokens": [583, 498, 291, 519, 466, 309, 11, 411, 11, 295, 1164, 11, 456, 311, 516, 281, 312, 472, 7372, 300, 1943, 380], "temperature": 0.0, "avg_logprob": -0.28327469906564484, "compression_ratio": 1.6487603305785123, "no_speech_prob": 1.3201381079852581e-05}, {"id": 833, "seek": 350842, "start": 3527.82, "end": 3529.14, "text": " as good as the others.", "tokens": [382, 665, 382, 264, 2357, 13], "temperature": 0.0, "avg_logprob": -0.28327469906564484, "compression_ratio": 1.6487603305785123, "no_speech_prob": 1.3201381079852581e-05}, {"id": 834, "seek": 350842, "start": 3529.14, "end": 3533.42, "text": " It's like impossible to be perfect in every single one of them.", "tokens": [467, 311, 411, 6243, 281, 312, 2176, 294, 633, 2167, 472, 295, 552, 13], "temperature": 0.0, "avg_logprob": -0.28327469906564484, "compression_ratio": 1.6487603305785123, "no_speech_prob": 1.3201381079852581e-05}, {"id": 835, "seek": 350842, "start": 3533.42, "end": 3537.46, "text": " And it took us long to realize, I guess.", "tokens": [400, 309, 1890, 505, 938, 281, 4325, 11, 286, 2041, 13], "temperature": 0.0, "avg_logprob": -0.28327469906564484, "compression_ratio": 1.6487603305785123, "no_speech_prob": 1.3201381079852581e-05}, {"id": 836, "seek": 353746, "start": 3537.46, "end": 3543.8, "text": " But I bet that beginners might appreciate a simpler way because that is like one less", "tokens": [583, 286, 778, 300, 26992, 1062, 4449, 257, 18587, 636, 570, 300, 307, 411, 472, 1570], "temperature": 0.0, "avg_logprob": -0.26370145963585895, "compression_ratio": 1.6136363636363635, "no_speech_prob": 2.3505359422415495e-05}, {"id": 837, "seek": 353746, "start": 3543.8, "end": 3547.02, "text": " hurdle to do an elm application.", "tokens": [47423, 281, 360, 364, 806, 76, 3861, 13], "temperature": 0.0, "avg_logprob": -0.26370145963585895, "compression_ratio": 1.6136363636363635, "no_speech_prob": 2.3505359422415495e-05}, {"id": 838, "seek": 353746, "start": 3547.02, "end": 3548.02, "text": " Right.", "tokens": [1779, 13], "temperature": 0.0, "avg_logprob": -0.26370145963585895, "compression_ratio": 1.6136363636363635, "no_speech_prob": 2.3505359422415495e-05}, {"id": 839, "seek": 353746, "start": 3548.02, "end": 3553.94, "text": " So in your opinion, should we get rid of the two operators that elm URL defines?", "tokens": [407, 294, 428, 4800, 11, 820, 321, 483, 3973, 295, 264, 732, 19077, 300, 806, 76, 12905, 23122, 30], "temperature": 0.0, "avg_logprob": -0.26370145963585895, "compression_ratio": 1.6136363636363635, "no_speech_prob": 2.3505359422415495e-05}, {"id": 840, "seek": 353746, "start": 3553.94, "end": 3554.94, "text": " Yes.", "tokens": [1079, 13], "temperature": 0.0, "avg_logprob": -0.26370145963585895, "compression_ratio": 1.6136363636363635, "no_speech_prob": 2.3505359422415495e-05}, {"id": 841, "seek": 353746, "start": 3554.94, "end": 3561.86, "text": " I think that if you take the stance that there shouldn't be custom operators, then there", "tokens": [286, 519, 300, 498, 291, 747, 264, 21033, 300, 456, 4659, 380, 312, 2375, 19077, 11, 550, 456], "temperature": 0.0, "avg_logprob": -0.26370145963585895, "compression_ratio": 1.6136363636363635, "no_speech_prob": 2.3505359422415495e-05}, {"id": 842, "seek": 353746, "start": 3561.86, "end": 3566.5, "text": " shouldn't be any operators to import from any package.", "tokens": [4659, 380, 312, 604, 19077, 281, 974, 490, 604, 7372, 13], "temperature": 0.0, "avg_logprob": -0.26370145963585895, "compression_ratio": 1.6136363636363635, "no_speech_prob": 2.3505359422415495e-05}, {"id": 843, "seek": 356650, "start": 3566.5, "end": 3570.42, "text": " It's like a weird extra thing to learn that, oh, wait, what?", "tokens": [467, 311, 411, 257, 3657, 2857, 551, 281, 1466, 300, 11, 1954, 11, 1699, 11, 437, 30], "temperature": 0.0, "avg_logprob": -0.2672710759299142, "compression_ratio": 1.625, "no_speech_prob": 2.7933851015404798e-05}, {"id": 844, "seek": 356650, "start": 3570.42, "end": 3573.82, "text": " In the URL package, you can import operators?", "tokens": [682, 264, 12905, 7372, 11, 291, 393, 974, 19077, 30], "temperature": 0.0, "avg_logprob": -0.2672710759299142, "compression_ratio": 1.625, "no_speech_prob": 2.7933851015404798e-05}, {"id": 845, "seek": 356650, "start": 3573.82, "end": 3574.82, "text": " What does that mean?", "tokens": [708, 775, 300, 914, 30], "temperature": 0.0, "avg_logprob": -0.2672710759299142, "compression_ratio": 1.625, "no_speech_prob": 2.7933851015404798e-05}, {"id": 846, "seek": 356650, "start": 3574.82, "end": 3576.9, "text": " Like, it's so foreign.", "tokens": [1743, 11, 309, 311, 370, 5329, 13], "temperature": 0.0, "avg_logprob": -0.2672710759299142, "compression_ratio": 1.625, "no_speech_prob": 2.7933851015404798e-05}, {"id": 847, "seek": 356650, "start": 3576.9, "end": 3581.66, "text": " You're not used to from other languages that you can import an operator.", "tokens": [509, 434, 406, 1143, 281, 490, 661, 8650, 300, 291, 393, 974, 364, 12973, 13], "temperature": 0.0, "avg_logprob": -0.2672710759299142, "compression_ratio": 1.625, "no_speech_prob": 2.7933851015404798e-05}, {"id": 848, "seek": 356650, "start": 3581.66, "end": 3584.02, "text": " They just exist.", "tokens": [814, 445, 2514, 13], "temperature": 0.0, "avg_logprob": -0.2672710759299142, "compression_ratio": 1.625, "no_speech_prob": 2.7933851015404798e-05}, {"id": 849, "seek": 356650, "start": 3584.02, "end": 3590.58, "text": " And it feels like if we're going to have extra custom operators, don't waste them on URL", "tokens": [400, 309, 3417, 411, 498, 321, 434, 516, 281, 362, 2857, 2375, 19077, 11, 500, 380, 5964, 552, 322, 12905], "temperature": 0.0, "avg_logprob": -0.2672710759299142, "compression_ratio": 1.625, "no_speech_prob": 2.7933851015404798e-05}, {"id": 850, "seek": 356650, "start": 3590.58, "end": 3591.58, "text": " parsing.", "tokens": [21156, 278, 13], "temperature": 0.0, "avg_logprob": -0.2672710759299142, "compression_ratio": 1.625, "no_speech_prob": 2.7933851015404798e-05}, {"id": 851, "seek": 356650, "start": 3591.58, "end": 3595.22, "text": " Like, you could choose anything and you chose URLs.", "tokens": [1743, 11, 291, 727, 2826, 1340, 293, 291, 5111, 43267, 13], "temperature": 0.0, "avg_logprob": -0.2672710759299142, "compression_ratio": 1.625, "no_speech_prob": 2.7933851015404798e-05}, {"id": 852, "seek": 359522, "start": 3595.22, "end": 3597.7799999999997, "text": " That's not what I would do.", "tokens": [663, 311, 406, 437, 286, 576, 360, 13], "temperature": 0.0, "avg_logprob": -0.25891993744204744, "compression_ratio": 1.572139303482587, "no_speech_prob": 4.356846602604492e-06}, {"id": 853, "seek": 359522, "start": 3597.7799999999997, "end": 3603.8199999999997, "text": " I'm guessing the only remaining ones that are not in the basics module are the ones", "tokens": [286, 478, 17939, 264, 787, 8877, 2306, 300, 366, 406, 294, 264, 14688, 10088, 366, 264, 2306], "temperature": 0.0, "avg_logprob": -0.25891993744204744, "compression_ratio": 1.572139303482587, "no_speech_prob": 4.356846602604492e-06}, {"id": 854, "seek": 359522, "start": 3603.8199999999997, "end": 3606.3399999999997, "text": " from URL parser.", "tokens": [490, 12905, 21156, 260, 13], "temperature": 0.0, "avg_logprob": -0.25891993744204744, "compression_ratio": 1.572139303482587, "no_speech_prob": 4.356846602604492e-06}, {"id": 855, "seek": 359522, "start": 3606.3399999999997, "end": 3607.3399999999997, "text": " Just parser.", "tokens": [1449, 21156, 260, 13], "temperature": 0.0, "avg_logprob": -0.25891993744204744, "compression_ratio": 1.572139303482587, "no_speech_prob": 4.356846602604492e-06}, {"id": 856, "seek": 359522, "start": 3607.3399999999997, "end": 3608.3399999999997, "text": " Just parser.", "tokens": [1449, 21156, 260, 13], "temperature": 0.0, "avg_logprob": -0.25891993744204744, "compression_ratio": 1.572139303482587, "no_speech_prob": 4.356846602604492e-06}, {"id": 857, "seek": 359522, "start": 3608.3399999999997, "end": 3609.3399999999997, "text": " Elm parser.", "tokens": [2699, 76, 21156, 260, 13], "temperature": 0.0, "avg_logprob": -0.25891993744204744, "compression_ratio": 1.572139303482587, "no_speech_prob": 4.356846602604492e-06}, {"id": 858, "seek": 359522, "start": 3609.3399999999997, "end": 3610.3399999999997, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.25891993744204744, "compression_ratio": 1.572139303482587, "no_speech_prob": 4.356846602604492e-06}, {"id": 859, "seek": 359522, "start": 3610.3399999999997, "end": 3611.3399999999997, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.25891993744204744, "compression_ratio": 1.572139303482587, "no_speech_prob": 4.356846602604492e-06}, {"id": 860, "seek": 359522, "start": 3611.3399999999997, "end": 3614.4199999999996, "text": " Which I've always thought kind of trips people up a little bit.", "tokens": [3013, 286, 600, 1009, 1194, 733, 295, 16051, 561, 493, 257, 707, 857, 13], "temperature": 0.0, "avg_logprob": -0.25891993744204744, "compression_ratio": 1.572139303482587, "no_speech_prob": 4.356846602604492e-06}, {"id": 861, "seek": 359522, "start": 3614.4199999999996, "end": 3620.3399999999997, "text": " And I've always thought, how about keep and skip for those two operators?", "tokens": [400, 286, 600, 1009, 1194, 11, 577, 466, 1066, 293, 10023, 337, 729, 732, 19077, 30], "temperature": 0.0, "avg_logprob": -0.25891993744204744, "compression_ratio": 1.572139303482587, "no_speech_prob": 4.356846602604492e-06}, {"id": 862, "seek": 362034, "start": 3620.34, "end": 3627.3, "text": " Because it says what it does explicitly, and it reduces having to explain some cute thing", "tokens": [1436, 309, 1619, 437, 309, 775, 20803, 11, 293, 309, 18081, 1419, 281, 2903, 512, 4052, 551], "temperature": 0.0, "avg_logprob": -0.2679587345497281, "compression_ratio": 1.7609561752988048, "no_speech_prob": 1.3081598808639683e-06}, {"id": 863, "seek": 362034, "start": 3627.3, "end": 3632.38, "text": " about an animal like eating your parsing input or something.", "tokens": [466, 364, 5496, 411, 3936, 428, 21156, 278, 4846, 420, 746, 13], "temperature": 0.0, "avg_logprob": -0.2679587345497281, "compression_ratio": 1.7609561752988048, "no_speech_prob": 1.3081598808639683e-06}, {"id": 864, "seek": 362034, "start": 3632.38, "end": 3637.46, "text": " I just think it would, I think it reads more easily and intuitively, and it would kind", "tokens": [286, 445, 519, 309, 576, 11, 286, 519, 309, 15700, 544, 3612, 293, 46506, 11, 293, 309, 576, 733], "temperature": 0.0, "avg_logprob": -0.2679587345497281, "compression_ratio": 1.7609561752988048, "no_speech_prob": 1.3081598808639683e-06}, {"id": 865, "seek": 362034, "start": 3637.46, "end": 3639.94, "text": " of ease the learning curve there a bit.", "tokens": [295, 12708, 264, 2539, 7605, 456, 257, 857, 13], "temperature": 0.0, "avg_logprob": -0.2679587345497281, "compression_ratio": 1.7609561752988048, "no_speech_prob": 1.3081598808639683e-06}, {"id": 866, "seek": 362034, "start": 3639.94, "end": 3644.7000000000003, "text": " And it would reduce the number of custom operators in published packages.", "tokens": [400, 309, 576, 5407, 264, 1230, 295, 2375, 19077, 294, 6572, 17401, 13], "temperature": 0.0, "avg_logprob": -0.2679587345497281, "compression_ratio": 1.7609561752988048, "no_speech_prob": 1.3081598808639683e-06}, {"id": 867, "seek": 362034, "start": 3644.7000000000003, "end": 3650.1400000000003, "text": " Also like just the, sometimes you use pipes, and sometimes you use those symbols that look", "tokens": [2743, 411, 445, 264, 11, 2171, 291, 764, 21882, 11, 293, 2171, 291, 764, 729, 16944, 300, 574], "temperature": 0.0, "avg_logprob": -0.2679587345497281, "compression_ratio": 1.7609561752988048, "no_speech_prob": 1.3081598808639683e-06}, {"id": 868, "seek": 365014, "start": 3650.14, "end": 3656.74, "text": " like pipes, but the way that you have to move those instructions, like that there, it's", "tokens": [411, 21882, 11, 457, 264, 636, 300, 291, 362, 281, 1286, 729, 9415, 11, 411, 300, 456, 11, 309, 311], "temperature": 0.0, "avg_logprob": -0.32300671664151276, "compression_ratio": 1.620408163265306, "no_speech_prob": 2.9479970180545934e-06}, {"id": 869, "seek": 365014, "start": 3656.74, "end": 3657.74, "text": " a bit weird.", "tokens": [257, 857, 3657, 13], "temperature": 0.0, "avg_logprob": -0.32300671664151276, "compression_ratio": 1.620408163265306, "no_speech_prob": 2.9479970180545934e-06}, {"id": 870, "seek": 365014, "start": 3657.74, "end": 3662.22, "text": " Like, oh, if you now want to keep this, then you need to move things around.", "tokens": [1743, 11, 1954, 11, 498, 291, 586, 528, 281, 1066, 341, 11, 550, 291, 643, 281, 1286, 721, 926, 13], "temperature": 0.0, "avg_logprob": -0.32300671664151276, "compression_ratio": 1.620408163265306, "no_speech_prob": 2.9479970180545934e-06}, {"id": 871, "seek": 365014, "start": 3662.22, "end": 3667.62, "text": " I found it pretty confusing when I was working with parsers at least.", "tokens": [286, 1352, 309, 1238, 13181, 562, 286, 390, 1364, 365, 21156, 433, 412, 1935, 13], "temperature": 0.0, "avg_logprob": -0.32300671664151276, "compression_ratio": 1.620408163265306, "no_speech_prob": 2.9479970180545934e-06}, {"id": 872, "seek": 365014, "start": 3667.62, "end": 3672.8199999999997, "text": " And also like if we can remove the importance of parsers, of operators, that would make", "tokens": [400, 611, 411, 498, 321, 393, 4159, 264, 7379, 295, 21156, 433, 11, 295, 19077, 11, 300, 576, 652], "temperature": 0.0, "avg_logprob": -0.32300671664151276, "compression_ratio": 1.620408163265306, "no_speech_prob": 2.9479970180545934e-06}, {"id": 873, "seek": 365014, "start": 3672.8199999999997, "end": 3674.3399999999997, "text": " my life easier with Elm Review.", "tokens": [452, 993, 3571, 365, 2699, 76, 19954, 13], "temperature": 0.0, "avg_logprob": -0.32300671664151276, "compression_ratio": 1.620408163265306, "no_speech_prob": 2.9479970180545934e-06}, {"id": 874, "seek": 365014, "start": 3674.3399999999997, "end": 3678.3799999999997, "text": " So I'm fine with that change.", "tokens": [407, 286, 478, 2489, 365, 300, 1319, 13], "temperature": 0.0, "avg_logprob": -0.32300671664151276, "compression_ratio": 1.620408163265306, "no_speech_prob": 2.9479970180545934e-06}, {"id": 875, "seek": 367838, "start": 3678.38, "end": 3683.1400000000003, "text": " So is there where you're going to tackle next parsers?", "tokens": [407, 307, 456, 689, 291, 434, 516, 281, 14896, 958, 21156, 433, 30], "temperature": 0.0, "avg_logprob": -0.2505780086722425, "compression_ratio": 1.5022222222222221, "no_speech_prob": 3.5515429317456437e-06}, {"id": 876, "seek": 367838, "start": 3683.1400000000003, "end": 3689.86, "text": " To be honest, like I've used the Elm slash parser package exactly once, I think, in like", "tokens": [1407, 312, 3245, 11, 411, 286, 600, 1143, 264, 2699, 76, 17330, 21156, 260, 7372, 2293, 1564, 11, 286, 519, 11, 294, 411], "temperature": 0.0, "avg_logprob": -0.2505780086722425, "compression_ratio": 1.5022222222222221, "no_speech_prob": 3.5515429317456437e-06}, {"id": 877, "seek": 367838, "start": 3689.86, "end": 3693.58, "text": " one Advent of Code puzzle, where I didn't even need it.", "tokens": [472, 17856, 295, 15549, 12805, 11, 689, 286, 994, 380, 754, 643, 309, 13], "temperature": 0.0, "avg_logprob": -0.2505780086722425, "compression_ratio": 1.5022222222222221, "no_speech_prob": 3.5515429317456437e-06}, {"id": 878, "seek": 367838, "start": 3693.58, "end": 3698.02, "text": " I just used it because I wanted to try it out.", "tokens": [286, 445, 1143, 309, 570, 286, 1415, 281, 853, 309, 484, 13], "temperature": 0.0, "avg_logprob": -0.2505780086722425, "compression_ratio": 1.5022222222222221, "no_speech_prob": 3.5515429317456437e-06}, {"id": 879, "seek": 367838, "start": 3698.02, "end": 3704.5, "text": " When it comes to like real applications, I've either been using other people's parsers from", "tokens": [1133, 309, 1487, 281, 411, 957, 5821, 11, 286, 600, 2139, 668, 1228, 661, 561, 311, 21156, 433, 490], "temperature": 0.0, "avg_logprob": -0.2505780086722425, "compression_ratio": 1.5022222222222221, "no_speech_prob": 3.5515429317456437e-06}, {"id": 880, "seek": 370450, "start": 3704.5, "end": 3711.06, "text": " packages on the packages site, or I've just gone over, or I've just like used a RegEx", "tokens": [17401, 322, 264, 17401, 3621, 11, 420, 286, 600, 445, 2780, 670, 11, 420, 286, 600, 445, 411, 1143, 257, 4791, 11149], "temperature": 0.0, "avg_logprob": -0.295225715637207, "compression_ratio": 1.6502242152466369, "no_speech_prob": 2.4815346932882676e-06}, {"id": 881, "seek": 370450, "start": 3711.06, "end": 3715.06, "text": " or string splitting or something, and that has been just fine.", "tokens": [420, 6798, 30348, 420, 746, 11, 293, 300, 575, 668, 445, 2489, 13], "temperature": 0.0, "avg_logprob": -0.295225715637207, "compression_ratio": 1.6502242152466369, "no_speech_prob": 2.4815346932882676e-06}, {"id": 882, "seek": 370450, "start": 3715.06, "end": 3719.66, "text": " Actually RegEx might be next on the chopping block, in my opinion, of something.", "tokens": [5135, 4791, 11149, 1062, 312, 958, 322, 264, 35205, 3461, 11, 294, 452, 4800, 11, 295, 746, 13], "temperature": 0.0, "avg_logprob": -0.295225715637207, "compression_ratio": 1.6502242152466369, "no_speech_prob": 2.4815346932882676e-06}, {"id": 883, "seek": 370450, "start": 3719.66, "end": 3724.02, "text": " I think there's a saner way to do a RegEx API in Elm.", "tokens": [286, 519, 456, 311, 257, 6645, 260, 636, 281, 360, 257, 4791, 11149, 9362, 294, 2699, 76, 13], "temperature": 0.0, "avg_logprob": -0.295225715637207, "compression_ratio": 1.6502242152466369, "no_speech_prob": 2.4815346932882676e-06}, {"id": 884, "seek": 370450, "start": 3724.02, "end": 3729.66, "text": " That's something in between needing a full on parser package and needing to use some", "tokens": [663, 311, 746, 294, 1296, 18006, 257, 1577, 322, 21156, 260, 7372, 293, 18006, 281, 764, 512], "temperature": 0.0, "avg_logprob": -0.295225715637207, "compression_ratio": 1.6502242152466369, "no_speech_prob": 2.4815346932882676e-06}, {"id": 885, "seek": 372966, "start": 3729.66, "end": 3735.2599999999998, "text": " kind of loosely typed wrapper around the JavaScript RegEx API.", "tokens": [733, 295, 37966, 33941, 46906, 926, 264, 15778, 4791, 11149, 9362, 13], "temperature": 0.0, "avg_logprob": -0.28124864985433856, "compression_ratio": 1.5454545454545454, "no_speech_prob": 1.0348443311158917e-06}, {"id": 886, "seek": 372966, "start": 3735.2599999999998, "end": 3738.5, "text": " I have some thoughts there.", "tokens": [286, 362, 512, 4598, 456, 13], "temperature": 0.0, "avg_logprob": -0.28124864985433856, "compression_ratio": 1.5454545454545454, "no_speech_prob": 1.0348443311158917e-06}, {"id": 887, "seek": 372966, "start": 3738.5, "end": 3740.1, "text": " That's for a different episode.", "tokens": [663, 311, 337, 257, 819, 3500, 13], "temperature": 0.0, "avg_logprob": -0.28124864985433856, "compression_ratio": 1.5454545454545454, "no_speech_prob": 1.0348443311158917e-06}, {"id": 888, "seek": 372966, "start": 3740.1, "end": 3741.74, "text": " That might be for a different episode.", "tokens": [663, 1062, 312, 337, 257, 819, 3500, 13], "temperature": 0.0, "avg_logprob": -0.28124864985433856, "compression_ratio": 1.5454545454545454, "no_speech_prob": 1.0348443311158917e-06}, {"id": 889, "seek": 372966, "start": 3741.74, "end": 3747.2599999999998, "text": " But Simon, this is a very interesting package, and it's really unique in the sense that it", "tokens": [583, 13193, 11, 341, 307, 257, 588, 1880, 7372, 11, 293, 309, 311, 534, 3845, 294, 264, 2020, 300, 309], "temperature": 0.0, "avg_logprob": -0.28124864985433856, "compression_ratio": 1.5454545454545454, "no_speech_prob": 1.0348443311158917e-06}, {"id": 890, "seek": 372966, "start": 3747.2599999999998, "end": 3754.7799999999997, "text": " is seems like far more design attention and documentation and examples than code, which", "tokens": [307, 2544, 411, 1400, 544, 1715, 3202, 293, 14333, 293, 5110, 813, 3089, 11, 597], "temperature": 0.0, "avg_logprob": -0.28124864985433856, "compression_ratio": 1.5454545454545454, "no_speech_prob": 1.0348443311158917e-06}, {"id": 891, "seek": 372966, "start": 3754.7799999999997, "end": 3756.46, "text": " is kind of cool.", "tokens": [307, 733, 295, 1627, 13], "temperature": 0.0, "avg_logprob": -0.28124864985433856, "compression_ratio": 1.5454545454545454, "no_speech_prob": 1.0348443311158917e-06}, {"id": 892, "seek": 375646, "start": 3756.46, "end": 3759.86, "text": " What was it like designing this package?", "tokens": [708, 390, 309, 411, 14685, 341, 7372, 30], "temperature": 0.0, "avg_logprob": -0.25152932090320806, "compression_ratio": 1.585, "no_speech_prob": 1.4707286027260125e-05}, {"id": 893, "seek": 375646, "start": 3759.86, "end": 3763.9, "text": " Was it just having a bunch of open tabs and doing a bunch of reading and research?", "tokens": [3027, 309, 445, 1419, 257, 3840, 295, 1269, 20743, 293, 884, 257, 3840, 295, 3760, 293, 2132, 30], "temperature": 0.0, "avg_logprob": -0.25152932090320806, "compression_ratio": 1.585, "no_speech_prob": 1.4707286027260125e-05}, {"id": 894, "seek": 375646, "start": 3763.9, "end": 3772.86, "text": " A lot of that and a lot of, I mean, it actually took many months because I started using it", "tokens": [316, 688, 295, 300, 293, 257, 688, 295, 11, 286, 914, 11, 309, 767, 1890, 867, 2493, 570, 286, 1409, 1228, 309], "temperature": 0.0, "avg_logprob": -0.25152932090320806, "compression_ratio": 1.585, "no_speech_prob": 1.4707286027260125e-05}, {"id": 895, "seek": 375646, "start": 3772.86, "end": 3776.86, "text": " or like trying it in a branch at work.", "tokens": [420, 411, 1382, 309, 294, 257, 9819, 412, 589, 13], "temperature": 0.0, "avg_logprob": -0.25152932090320806, "compression_ratio": 1.585, "no_speech_prob": 1.4707286027260125e-05}, {"id": 896, "seek": 375646, "start": 3776.86, "end": 3782.56, "text": " And then every time I was like, no, now I have the API nailed.", "tokens": [400, 550, 633, 565, 286, 390, 411, 11, 572, 11, 586, 286, 362, 264, 9362, 30790, 13], "temperature": 0.0, "avg_logprob": -0.25152932090320806, "compression_ratio": 1.585, "no_speech_prob": 1.4707286027260125e-05}, {"id": 897, "seek": 378256, "start": 3782.56, "end": 3786.94, "text": " And then I tried to use it and like, nah, this was a bit annoying.", "tokens": [400, 550, 286, 3031, 281, 764, 309, 293, 411, 11, 17170, 11, 341, 390, 257, 857, 11304, 13], "temperature": 0.0, "avg_logprob": -0.22736184413616473, "compression_ratio": 1.6351931330472103, "no_speech_prob": 5.419778062787373e-06}, {"id": 898, "seek": 378256, "start": 3786.94, "end": 3790.18, "text": " Or like, I didn't think about this use case.", "tokens": [1610, 411, 11, 286, 994, 380, 519, 466, 341, 764, 1389, 13], "temperature": 0.0, "avg_logprob": -0.22736184413616473, "compression_ratio": 1.6351931330472103, "no_speech_prob": 5.419778062787373e-06}, {"id": 899, "seek": 378256, "start": 3790.18, "end": 3798.34, "text": " So I think the key was to actually use it in several real projects to learn what is", "tokens": [407, 286, 519, 264, 2141, 390, 281, 767, 764, 309, 294, 2940, 957, 4455, 281, 1466, 437, 307], "temperature": 0.0, "avg_logprob": -0.22736184413616473, "compression_ratio": 1.6351931330472103, "no_speech_prob": 5.419778062787373e-06}, {"id": 900, "seek": 378256, "start": 3798.34, "end": 3801.7, "text": " important and what is easy to use.", "tokens": [1021, 293, 437, 307, 1858, 281, 764, 13], "temperature": 0.0, "avg_logprob": -0.22736184413616473, "compression_ratio": 1.6351931330472103, "no_speech_prob": 5.419778062787373e-06}, {"id": 901, "seek": 378256, "start": 3801.7, "end": 3805.42, "text": " Did the scope of it and the amount of code shrink over time?", "tokens": [2589, 264, 11923, 295, 309, 293, 264, 2372, 295, 3089, 23060, 670, 565, 30], "temperature": 0.0, "avg_logprob": -0.22736184413616473, "compression_ratio": 1.6351931330472103, "no_speech_prob": 5.419778062787373e-06}, {"id": 902, "seek": 378256, "start": 3805.42, "end": 3810.7799999999997, "text": " I get the sense that maybe you realized how simple it could be over time, or did you kind", "tokens": [286, 483, 264, 2020, 300, 1310, 291, 5334, 577, 2199, 309, 727, 312, 670, 565, 11, 420, 630, 291, 733], "temperature": 0.0, "avg_logprob": -0.22736184413616473, "compression_ratio": 1.6351931330472103, "no_speech_prob": 5.419778062787373e-06}, {"id": 903, "seek": 381078, "start": 3810.78, "end": 3813.1400000000003, "text": " of have that sense from the beginning?", "tokens": [295, 362, 300, 2020, 490, 264, 2863, 30], "temperature": 0.0, "avg_logprob": -0.29520890519425674, "compression_ratio": 1.4947916666666667, "no_speech_prob": 2.7000360205420293e-05}, {"id": 904, "seek": 381078, "start": 3813.1400000000003, "end": 3814.82, "text": " It changed a bit over time.", "tokens": [467, 3105, 257, 857, 670, 565, 13], "temperature": 0.0, "avg_logprob": -0.29520890519425674, "compression_ratio": 1.4947916666666667, "no_speech_prob": 2.7000360205420293e-05}, {"id": 905, "seek": 381078, "start": 3814.82, "end": 3821.6600000000003, "text": " I like removed some query parameter helper function that I realized didn't really improve", "tokens": [286, 411, 7261, 512, 14581, 13075, 36133, 2445, 300, 286, 5334, 994, 380, 534, 3470], "temperature": 0.0, "avg_logprob": -0.29520890519425674, "compression_ratio": 1.4947916666666667, "no_speech_prob": 2.7000360205420293e-05}, {"id": 906, "seek": 381078, "start": 3821.6600000000003, "end": 3824.1000000000004, "text": " things.", "tokens": [721, 13], "temperature": 0.0, "avg_logprob": -0.29520890519425674, "compression_ratio": 1.4947916666666667, "no_speech_prob": 2.7000360205420293e-05}, {"id": 907, "seek": 381078, "start": 3824.1000000000004, "end": 3830.5, "text": " And I got some feedback on Discord and that helped a lot too.", "tokens": [400, 286, 658, 512, 5824, 322, 32623, 293, 300, 4254, 257, 688, 886, 13], "temperature": 0.0, "avg_logprob": -0.29520890519425674, "compression_ratio": 1.4947916666666667, "no_speech_prob": 2.7000360205420293e-05}, {"id": 908, "seek": 381078, "start": 3830.5, "end": 3835.42, "text": " For the query parameters, was it like piping into list.head?", "tokens": [1171, 264, 14581, 9834, 11, 390, 309, 411, 35204, 666, 1329, 13, 1934, 30], "temperature": 0.0, "avg_logprob": -0.29520890519425674, "compression_ratio": 1.4947916666666667, "no_speech_prob": 2.7000360205420293e-05}, {"id": 909, "seek": 383542, "start": 3835.42, "end": 3840.9, "text": " That idea that how do you get like a single value for the query parameter?", "tokens": [663, 1558, 300, 577, 360, 291, 483, 411, 257, 2167, 2158, 337, 264, 14581, 13075, 30], "temperature": 0.0, "avg_logprob": -0.2412805210460316, "compression_ratio": 1.6641221374045803, "no_speech_prob": 2.1707579435314983e-05}, {"id": 910, "seek": 383542, "start": 3840.9, "end": 3846.34, "text": " Yeah, I was debating if I should have a function for getting just a single value since that", "tokens": [865, 11, 286, 390, 40647, 498, 286, 820, 362, 257, 2445, 337, 1242, 445, 257, 2167, 2158, 1670, 300], "temperature": 0.0, "avg_logprob": -0.2412805210460316, "compression_ratio": 1.6641221374045803, "no_speech_prob": 2.1707579435314983e-05}, {"id": 911, "seek": 383542, "start": 3846.34, "end": 3849.66, "text": " is the most common use case.", "tokens": [307, 264, 881, 2689, 764, 1389, 13], "temperature": 0.0, "avg_logprob": -0.2412805210460316, "compression_ratio": 1.6641221374045803, "no_speech_prob": 2.1707579435314983e-05}, {"id": 912, "seek": 383542, "start": 3849.66, "end": 3855.7400000000002, "text": " But it was very difficult naming it and also deciding which way should it work.", "tokens": [583, 309, 390, 588, 2252, 25290, 309, 293, 611, 17990, 597, 636, 820, 309, 589, 13], "temperature": 0.0, "avg_logprob": -0.2412805210460316, "compression_ratio": 1.6641221374045803, "no_speech_prob": 2.1707579435314983e-05}, {"id": 913, "seek": 383542, "start": 3855.7400000000002, "end": 3857.26, "text": " Should I take the first one?", "tokens": [6454, 286, 747, 264, 700, 472, 30], "temperature": 0.0, "avg_logprob": -0.2412805210460316, "compression_ratio": 1.6641221374045803, "no_speech_prob": 2.1707579435314983e-05}, {"id": 914, "seek": 383542, "start": 3857.26, "end": 3859.58, "text": " And I looked at like some other programming languages.", "tokens": [400, 286, 2956, 412, 411, 512, 661, 9410, 8650, 13], "temperature": 0.0, "avg_logprob": -0.2412805210460316, "compression_ratio": 1.6641221374045803, "no_speech_prob": 2.1707579435314983e-05}, {"id": 915, "seek": 383542, "start": 3859.58, "end": 3864.62, "text": " I think I don't remember which one it was that took the first one, maybe Go?", "tokens": [286, 519, 286, 500, 380, 1604, 597, 472, 309, 390, 300, 1890, 264, 700, 472, 11, 1310, 1037, 30], "temperature": 0.0, "avg_logprob": -0.2412805210460316, "compression_ratio": 1.6641221374045803, "no_speech_prob": 2.1707579435314983e-05}, {"id": 916, "seek": 386462, "start": 3864.62, "end": 3866.7, "text": " Or should I take the last one?", "tokens": [1610, 820, 286, 747, 264, 1036, 472, 30], "temperature": 0.0, "avg_logprob": -0.27694223887884795, "compression_ratio": 1.7086614173228347, "no_speech_prob": 1.2606509699253365e-05}, {"id": 917, "seek": 386462, "start": 3866.7, "end": 3870.02, "text": " That's what Django in Python does.", "tokens": [663, 311, 437, 33464, 17150, 294, 15329, 775, 13], "temperature": 0.0, "avg_logprob": -0.27694223887884795, "compression_ratio": 1.7086614173228347, "no_speech_prob": 1.2606509699253365e-05}, {"id": 918, "seek": 386462, "start": 3870.02, "end": 3873.9, "text": " Or there is actually one more option, which is what elm.slash.url does.", "tokens": [1610, 456, 307, 767, 472, 544, 3614, 11, 597, 307, 437, 806, 76, 13, 10418, 1299, 13, 374, 75, 775, 13], "temperature": 0.0, "avg_logprob": -0.27694223887884795, "compression_ratio": 1.7086614173228347, "no_speech_prob": 1.2606509699253365e-05}, {"id": 919, "seek": 386462, "start": 3873.9, "end": 3877.06, "text": " If there is more than one, you get none of them.", "tokens": [759, 456, 307, 544, 813, 472, 11, 291, 483, 6022, 295, 552, 13], "temperature": 0.0, "avg_logprob": -0.27694223887884795, "compression_ratio": 1.7086614173228347, "no_speech_prob": 1.2606509699253365e-05}, {"id": 920, "seek": 386462, "start": 3877.06, "end": 3878.06, "text": " Really?", "tokens": [4083, 30], "temperature": 0.0, "avg_logprob": -0.27694223887884795, "compression_ratio": 1.7086614173228347, "no_speech_prob": 1.2606509699253365e-05}, {"id": 921, "seek": 386462, "start": 3878.06, "end": 3883.98, "text": " I'm not sure like what the intention is, if it's a mistake or if it's like, this is ambiguous,", "tokens": [286, 478, 406, 988, 411, 437, 264, 7789, 307, 11, 498, 309, 311, 257, 6146, 420, 498, 309, 311, 411, 11, 341, 307, 39465, 11], "temperature": 0.0, "avg_logprob": -0.27694223887884795, "compression_ratio": 1.7086614173228347, "no_speech_prob": 1.2606509699253365e-05}, {"id": 922, "seek": 386462, "start": 3883.98, "end": 3884.98, "text": " you get none of them.", "tokens": [291, 483, 6022, 295, 552, 13], "temperature": 0.0, "avg_logprob": -0.27694223887884795, "compression_ratio": 1.7086614173228347, "no_speech_prob": 1.2606509699253365e-05}, {"id": 923, "seek": 386462, "start": 3884.98, "end": 3886.9, "text": " Right, it failed to parse.", "tokens": [1779, 11, 309, 7612, 281, 48377, 13], "temperature": 0.0, "avg_logprob": -0.27694223887884795, "compression_ratio": 1.7086614173228347, "no_speech_prob": 1.2606509699253365e-05}, {"id": 924, "seek": 386462, "start": 3886.9, "end": 3894.14, "text": " That, see, the thing is that if you can present error messages, then that makes a lot of sense.", "tokens": [663, 11, 536, 11, 264, 551, 307, 300, 498, 291, 393, 1974, 6713, 7897, 11, 550, 300, 1669, 257, 688, 295, 2020, 13], "temperature": 0.0, "avg_logprob": -0.27694223887884795, "compression_ratio": 1.7086614173228347, "no_speech_prob": 1.2606509699253365e-05}, {"id": 925, "seek": 389414, "start": 3894.14, "end": 3898.3399999999997, "text": " But when you can't, like it seems like one of those instances where you want to be, what's", "tokens": [583, 562, 291, 393, 380, 11, 411, 309, 2544, 411, 472, 295, 729, 14519, 689, 291, 528, 281, 312, 11, 437, 311], "temperature": 0.0, "avg_logprob": -0.22975498921162374, "compression_ratio": 1.661596958174905, "no_speech_prob": 1.9222461560275406e-05}, {"id": 926, "seek": 389414, "start": 3898.3399999999997, "end": 3904.7, "text": " the what's the phrase, you know, like accept a wide range of input, but then be very precise", "tokens": [264, 437, 311, 264, 9535, 11, 291, 458, 11, 411, 3241, 257, 4874, 3613, 295, 4846, 11, 457, 550, 312, 588, 13600], "temperature": 0.0, "avg_logprob": -0.22975498921162374, "compression_ratio": 1.661596958174905, "no_speech_prob": 1.9222461560275406e-05}, {"id": 927, "seek": 389414, "start": 3904.7, "end": 3910.54, "text": " in how you build URLs in your application, but accept a wide variety of possible inputs", "tokens": [294, 577, 291, 1322, 43267, 294, 428, 3861, 11, 457, 3241, 257, 4874, 5673, 295, 1944, 15743], "temperature": 0.0, "avg_logprob": -0.22975498921162374, "compression_ratio": 1.661596958174905, "no_speech_prob": 1.9222461560275406e-05}, {"id": 928, "seek": 389414, "start": 3910.54, "end": 3913.62, "text": " with possible oddities from the user.", "tokens": [365, 1944, 7401, 1088, 490, 264, 4195, 13], "temperature": 0.0, "avg_logprob": -0.22975498921162374, "compression_ratio": 1.661596958174905, "no_speech_prob": 1.9222461560275406e-05}, {"id": 929, "seek": 389414, "start": 3913.62, "end": 3918.74, "text": " Something I realized was that if no one really has noticed that for so many years, I don't", "tokens": [6595, 286, 5334, 390, 300, 498, 572, 472, 534, 575, 5694, 300, 337, 370, 867, 924, 11, 286, 500, 380], "temperature": 0.0, "avg_logprob": -0.22975498921162374, "compression_ratio": 1.661596958174905, "no_speech_prob": 1.9222461560275406e-05}, {"id": 930, "seek": 389414, "start": 3918.74, "end": 3920.7799999999997, "text": " think it matters which one you take.", "tokens": [519, 309, 7001, 597, 472, 291, 747, 13], "temperature": 0.0, "avg_logprob": -0.22975498921162374, "compression_ratio": 1.661596958174905, "no_speech_prob": 1.9222461560275406e-05}, {"id": 931, "seek": 392078, "start": 3920.78, "end": 3924.1400000000003, "text": " You just choose one approach, and that's going to be fine.", "tokens": [509, 445, 2826, 472, 3109, 11, 293, 300, 311, 516, 281, 312, 2489, 13], "temperature": 0.0, "avg_logprob": -0.30770139934635965, "compression_ratio": 1.609375, "no_speech_prob": 8.93876040208852e-06}, {"id": 932, "seek": 392078, "start": 3924.1400000000003, "end": 3930.5800000000004, "text": " But in the end, I decided not to make that decision in the package and just promote the", "tokens": [583, 294, 264, 917, 11, 286, 3047, 406, 281, 652, 300, 3537, 294, 264, 7372, 293, 445, 9773, 264], "temperature": 0.0, "avg_logprob": -0.30770139934635965, "compression_ratio": 1.609375, "no_speech_prob": 8.93876040208852e-06}, {"id": 933, "seek": 392078, "start": 3930.5800000000004, "end": 3933.1400000000003, "text": " pattern of using list.head instead.", "tokens": [5102, 295, 1228, 1329, 13, 1934, 2602, 13], "temperature": 0.0, "avg_logprob": -0.30770139934635965, "compression_ratio": 1.609375, "no_speech_prob": 8.93876040208852e-06}, {"id": 934, "seek": 392078, "start": 3933.1400000000003, "end": 3934.1400000000003, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.30770139934635965, "compression_ratio": 1.609375, "no_speech_prob": 8.93876040208852e-06}, {"id": 935, "seek": 392078, "start": 3934.1400000000003, "end": 3939.98, "text": " Honestly, if I see a query pattern that is duplicated in my URL, I consider that to be", "tokens": [12348, 11, 498, 286, 536, 257, 14581, 5102, 300, 307, 1581, 564, 3587, 294, 452, 12905, 11, 286, 1949, 300, 281, 312], "temperature": 0.0, "avg_logprob": -0.30770139934635965, "compression_ratio": 1.609375, "no_speech_prob": 8.93876040208852e-06}, {"id": 936, "seek": 392078, "start": 3939.98, "end": 3940.98, "text": " a bug.", "tokens": [257, 7426, 13], "temperature": 0.0, "avg_logprob": -0.30770139934635965, "compression_ratio": 1.609375, "no_speech_prob": 8.93876040208852e-06}, {"id": 937, "seek": 392078, "start": 3940.98, "end": 3945.5400000000004, "text": " Like, if I see one, I'm gonna like, yeah, we'll probably need to do something else than", "tokens": [1743, 11, 498, 286, 536, 472, 11, 286, 478, 799, 411, 11, 1338, 11, 321, 603, 1391, 643, 281, 360, 746, 1646, 813], "temperature": 0.0, "avg_logprob": -0.30770139934635965, "compression_ratio": 1.609375, "no_speech_prob": 8.93876040208852e-06}, {"id": 938, "seek": 392078, "start": 3945.5400000000004, "end": 3948.82, "text": " that, like, separated by comma, whatever.", "tokens": [300, 11, 411, 11, 12005, 538, 22117, 11, 2035, 13], "temperature": 0.0, "avg_logprob": -0.30770139934635965, "compression_ratio": 1.609375, "no_speech_prob": 8.93876040208852e-06}, {"id": 939, "seek": 394882, "start": 3948.82, "end": 3954.1400000000003, "text": " Yeah, and you have the added benefit of not having an O of N query parameter lookup if", "tokens": [865, 11, 293, 291, 362, 264, 3869, 5121, 295, 406, 1419, 364, 422, 295, 426, 14581, 13075, 574, 1010, 498], "temperature": 0.0, "avg_logprob": -0.3395056291060014, "compression_ratio": 1.5109170305676856, "no_speech_prob": 1.034827050716558e-06}, {"id": 940, "seek": 394882, "start": 3954.1400000000003, "end": 3958.6200000000003, "text": " you do the last one and someone put 50 query parameters of the same name.", "tokens": [291, 360, 264, 1036, 472, 293, 1580, 829, 2625, 14581, 9834, 295, 264, 912, 1315, 13], "temperature": 0.0, "avg_logprob": -0.3395056291060014, "compression_ratio": 1.5109170305676856, "no_speech_prob": 1.034827050716558e-06}, {"id": 941, "seek": 394882, "start": 3958.6200000000003, "end": 3959.6200000000003, "text": " So that's good.", "tokens": [407, 300, 311, 665, 13], "temperature": 0.0, "avg_logprob": -0.3395056291060014, "compression_ratio": 1.5109170305676856, "no_speech_prob": 1.034827050716558e-06}, {"id": 942, "seek": 394882, "start": 3959.6200000000003, "end": 3964.6200000000003, "text": " It's a DDoS attempt factor.", "tokens": [467, 311, 257, 413, 7653, 50, 220, 1591, 4543, 5952, 13], "temperature": 0.0, "avg_logprob": -0.3395056291060014, "compression_ratio": 1.5109170305676856, "no_speech_prob": 1.034827050716558e-06}, {"id": 943, "seek": 394882, "start": 3964.6200000000003, "end": 3965.6200000000003, "text": " Yeah.", "tokens": [865, 13], "temperature": 0.0, "avg_logprob": -0.3395056291060014, "compression_ratio": 1.5109170305676856, "no_speech_prob": 1.034827050716558e-06}, {"id": 944, "seek": 394882, "start": 3965.6200000000003, "end": 3970.1000000000004, "text": " Well, Simon, what should people look at if they want to get started?", "tokens": [1042, 11, 13193, 11, 437, 820, 561, 574, 412, 498, 436, 528, 281, 483, 1409, 30], "temperature": 0.0, "avg_logprob": -0.3395056291060014, "compression_ratio": 1.5109170305676856, "no_speech_prob": 1.034827050716558e-06}, {"id": 945, "seek": 394882, "start": 3970.1000000000004, "end": 3975.9, "text": " I made a little video that very quickly explains the core concept.", "tokens": [286, 1027, 257, 707, 960, 300, 588, 2661, 13948, 264, 4965, 3410, 13], "temperature": 0.0, "avg_logprob": -0.3395056291060014, "compression_ratio": 1.5109170305676856, "no_speech_prob": 1.034827050716558e-06}, {"id": 946, "seek": 397590, "start": 3975.9, "end": 3981.78, "text": " But other than that, you can go to the package on the package site, the readme, like, shows", "tokens": [583, 661, 813, 300, 11, 291, 393, 352, 281, 264, 7372, 322, 264, 7372, 3621, 11, 264, 1401, 1398, 11, 411, 11, 3110], "temperature": 0.0, "avg_logprob": -0.2662322480799788, "compression_ratio": 1.7306122448979593, "no_speech_prob": 3.96533687307965e-06}, {"id": 947, "seek": 397590, "start": 3981.78, "end": 3984.26, "text": " you the main thing immediately.", "tokens": [291, 264, 2135, 551, 4258, 13], "temperature": 0.0, "avg_logprob": -0.2662322480799788, "compression_ratio": 1.7306122448979593, "no_speech_prob": 3.96533687307965e-06}, {"id": 948, "seek": 397590, "start": 3984.26, "end": 3989.7000000000003, "text": " And then I have some examples for every function as well in the documentation.", "tokens": [400, 550, 286, 362, 512, 5110, 337, 633, 2445, 382, 731, 294, 264, 14333, 13], "temperature": 0.0, "avg_logprob": -0.2662322480799788, "compression_ratio": 1.7306122448979593, "no_speech_prob": 3.96533687307965e-06}, {"id": 949, "seek": 397590, "start": 3989.7000000000003, "end": 3990.7000000000003, "text": " Amazing.", "tokens": [14165, 13], "temperature": 0.0, "avg_logprob": -0.2662322480799788, "compression_ratio": 1.7306122448979593, "no_speech_prob": 3.96533687307965e-06}, {"id": 950, "seek": 397590, "start": 3990.7000000000003, "end": 3995.0, "text": " Well, thank you for the thoughtfully designed package.", "tokens": [1042, 11, 1309, 291, 337, 264, 1194, 2277, 4761, 7372, 13], "temperature": 0.0, "avg_logprob": -0.2662322480799788, "compression_ratio": 1.7306122448979593, "no_speech_prob": 3.96533687307965e-06}, {"id": 951, "seek": 397590, "start": 3995.0, "end": 3996.0, "text": " Thank you for the conversation.", "tokens": [1044, 291, 337, 264, 3761, 13], "temperature": 0.0, "avg_logprob": -0.2662322480799788, "compression_ratio": 1.7306122448979593, "no_speech_prob": 3.96533687307965e-06}, {"id": 952, "seek": 397590, "start": 3996.0, "end": 3998.02, "text": " Thanks so much for coming back on the show.", "tokens": [2561, 370, 709, 337, 1348, 646, 322, 264, 855, 13], "temperature": 0.0, "avg_logprob": -0.2662322480799788, "compression_ratio": 1.7306122448979593, "no_speech_prob": 3.96533687307965e-06}, {"id": 953, "seek": 397590, "start": 3998.02, "end": 3999.02, "text": " Thanks for having me.", "tokens": [2561, 337, 1419, 385, 13], "temperature": 0.0, "avg_logprob": -0.2662322480799788, "compression_ratio": 1.7306122448979593, "no_speech_prob": 3.96533687307965e-06}, {"id": 954, "seek": 397590, "start": 3999.02, "end": 4000.02, "text": " It was great.", "tokens": [467, 390, 869, 13], "temperature": 0.0, "avg_logprob": -0.2662322480799788, "compression_ratio": 1.7306122448979593, "no_speech_prob": 3.96533687307965e-06}, {"id": 955, "seek": 397590, "start": 4000.02, "end": 4001.02, "text": " And Jeroen, until next time.", "tokens": [400, 508, 2032, 268, 11, 1826, 958, 565, 13], "temperature": 0.0, "avg_logprob": -0.2662322480799788, "compression_ratio": 1.7306122448979593, "no_speech_prob": 3.96533687307965e-06}, {"id": 956, "seek": 400102, "start": 4001.02, "end": 4009.7, "text": " Until next time.", "tokens": [50364, 9088, 958, 565, 13, 50798], "temperature": 0.0, "avg_logprob": -0.5153742858341762, "compression_ratio": 0.6666666666666666, "no_speech_prob": 3.4800279991031857e-06}], "language": "en"}