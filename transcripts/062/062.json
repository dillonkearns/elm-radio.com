{"text": " Hello Jeroen. Hello Dylan. Did you feel like something was missing last episode? Yeah, like, it was a nice episode, but it felt like we didn't have like a, what do you call it? A Martin. A Martin! Exactly! Hey, wouldn't it be nice? Actually, we've got another Martin here today. Martin Janacek back with us again. Thanks so much for coming back on, Martin. Hey there, hello. Nice to be back here. So soon. Ready for another Martin episode. Let's do it. Yeah, well, thanks for joining us. And so you've been hard at work for a while on this pretty ambitious project, getting a new fuzzing approach in the Elm testing library. So first of all, congratulations on getting like completing the project and getting that merged in. That is quite ambitious and impressive. Yeah, thank you. It is quite a good feeling to finish a project because I have so many unfinished projects. Yeah, and that's a lot of coordination to like actually convince people that this is like a good official approach to switch over to. And, you know, I mean, so this fuzzing approach, like there's like a lot of interesting theory behind it that you had to really, I think, do a lot of reading about to compare these different approaches. And but yeah, it's a really fascinating idea. So, yeah, great, great job on that. Well, we did talk about fuzzing in the episode dedicated to Elm tests, but would you like us to, but could you explain what fuzzing is again? I think what you're trying to say, Jeroen, is that your memory is a little fuzzy on that. There it is. Yeah, sure. I can definitely try to describe fuzzing and why use it and so on. So I think I think of fuzz tests or as it's more well known in the functional programming world as property based tests. I think of them as like a continuation of the line from unit tests through parameterized tests to to infinity. So let me explain that. So unit tests usually have just like one example, right? You hard coded one value and you are trying to assert something about it. Either you are trying to check the result of calling a function with like equals, right? So adding one to three is four or you are trying to learn something else about it. Let's say, I don't know, like multiplying by two makes it even or something like that. So it doesn't have to be a value that you like an output value that you want to check against. But you you usually have one specific input example that you are trying to test. Then the next step is parameterized tests. So you could think of them as a list of tuples, let's say. So list of inputs and their corresponding outputs. And so that's usually helpful. In my experience, it's helpful with parsers because it's hard to stay sane and like have everything nailed down when you are creating a parser for some language. So that's I think those tests definitely speak the most to me about like why tests are good. Because I just want to make sure that I didn't break something when trying to implement this new feature. So parameterized tests are a great way to just check the same property or check the function in the same way with lots of different examples, lots of different hardcoded inputs. And then just to clarify, Elm test does not have support for parameterized tests, but you can emulate it using like list on map. Exactly. Yeah. So you would have a list of these inputs and outputs and you would just pass it to list map. You would create tests out of that and you would just give them to test.describe or test.concat or something. Describe. Describe. Yeah, test.describe. Yeah, you can still do it in Elm even though it doesn't have this kind of like annotation style that let's say Java JUnit has and so on. What's nice about parameterized tests is that when you specify more inputs, so if your function has, let's say, three arguments and you have tables for each of these, you get all the combinations, right? So it's a nice way to cover a lot of area quickly. But all of these, like unit tests and parameterized tests, they have the problem of only checking what you can think about, right? So you know about edge cases like zero and minus one and so on, but perhaps you didn't think about what happens with max integer or something. So that's what property based tests or fast tests as Elm calls them. That's what those are really good about because they generate the inputs randomly. And so that's nice, but it has its own issues, right? Because if you can't hard code the inputs, suddenly you can't hard code the outputs either. So it can't be just a simple input transform, expect equals some output because it's random. So you can't really do that. And so you need to change your thinking a little bit about it. You need to change your mindset and you need to go more general. So instead of just checking for equals, let's say you have to think about what invariants does your function, what invariants hold for your function? Which properties hold for it? Yeah, which properties? What is always true, right? No matter what input is going to be there. And so suddenly, let's say if I, this is really like insultingly stupid example, but for the add function, you would want to check that a plus b is the same as b plus a. You would want to check that zero plus anything equals that something, right? That you gave it. And so there are these like laws, mathematical laws that you have for addition that you can check with random integers. And in a similar vein, there are different other properties that you can check for. Let's say JSON encoders and decoders, they are each other's inverses. So you can do that kind of round trip where you generate the value, encode it, decode it and check that is the same, right? That you didn't lose any kind of data. And so there's a lot of these properties that you can check, but it's definitely shift in your mindset. So it may not come to you as easily as just writing unit tests. Yeah, definitely. It definitely seems like a different workflow because this test driven development approach is so based on like fake it till you make it, hard coding something. You know, you say I expect, you know, this function to combine parts of a URL path. And when I have this input, this is the output and then you hard code the function to return that output. And now it's green. And then you you go case by case with with specific concrete hard coded cases, hard coding pieces of it into the implementation. That's like the TDD, the classic TDD approach. So how does it change the workflow if you're doing like TDD with fuzzing? Or is it just a separate workflow? Right. I'm not really sure myself if it's still TDD because in your example, as you said, you hard code the output into the implementation because that's the easiest way to get the test green. Right. And then you have three of those examples and it just becomes like if this then that, if this and that else is this third answer. And it could go infinitely long. Right. You could have like 20 inputs in your test and then you make like switch with 20 cases in the implementation. And that's not what you want. Right. So there needs to be a moment where you switch and say, OK, it's actually easier to do the right thing. Right. And do the actual implementation. And I feel like when you add the fuzz tests into the mix, if you say, let's say, let's say A plus B equals B plus A. And let's say the associativity law, like A plus B plus C in parenthesis equals A plus B in parenthesis plus C and so on. If you add all of these laws, you kind of define how the implementation should behave. And suddenly, because the tests are random, you have no way of keeping that switch statement or like the case of statement in case of L. Right. You have no way of keeping that implementation because the values, the inputs are going to be random each time. And so either you just, you know, you have to give up on that lazy implementation mindset in a way. And so I think it kind of forces you to go to do like, OK, let's let's do the actual implementation step. If you add fuzz tests in there, you just have to do the right thing. Do you typically do it in your workflow as like, you know, as you're building the implementation, driving the tests in this TDD style? Or do you typically do fuzz testing after as a like, let's make sure we covered all the cases? Yeah, I usually do my tests after, but it might not be. It might be just because I am not very principled TDD practitioner. So what about for vanilla unit tests? Do you do do you do those first or I do streams where you do them first? Yeah, but it's that's mostly for like Advent of Code and nice, simple examples like that. Yeah, yeah. It's honestly it's not how I do stuff at work. Yeah, so so far, I don't know if it's really nice because they give you the test cases right away. Right. So it's it's nice to just put them in and check the correctness of your solution early. But usually I am not so principled about it and I just write my implementation and write tests afterwards. I realize that my code might be much better and cleaner and like more testable if I start with tests. So that's something I try to do. But even for unit tests, I usually do them after. OK, I see. I wonder because I have to say I do not I do not do very much fuzz testing. And but my instinct is that I would probably do fuzz testing after, whereas I like to do regular unit testing, driving the implementation. But yeah, and it seems to be the sweet spot, I think. Yeah, that's where I would like to get. Yeah, I think I would do the same. It also kind of feels like when you fake it until you make it, you hard code everything. Well, the unit test is still a hard version. Right. And then you end up with the fuzz test. That is the real one. Oh, interesting. I see. So you're saying you could like generalize your unit test, start with like the unit test being the hard coded one. And then the fuzz version would be generalizing that. Yeah, that's a cool idea. I like that. In a way, you could say you're not done until you have done fuzz testing. But I mean, fuzz testing is not what you always will end up with. So that's not entirely true. There are applications and there are places where unit tests are more appropriate. But it's, you know, you can have both. And unit tests are great for understanding. Let's say you have a new colleague and they look at the test and suddenly they see how you are using your functions and so on. And property based tests are more for getting the confidence that your functions are really correct. Right. It approaches a proof, right? It approaches a proof as your sample size approaches infinity. So it's and since it's random. Yeah, I think it was Dijkstra who said that tests can only prove that there's a bug, but they cannot prove that there's no bugs. Right. I'm not sure of the correct wording, but that's the gist of it. And yeah, so you can almost infinitely increase your confidence, but you can never get there. That's where like formal methods come in and proofs and so on. Type checkers, static analysis. Definitely. It definitely feels like it's more in the category of proofs. Than just tests. I will say like when I've coached people on these incremental approaches to writing code, which I think hopefully people think of me as a broken record talking about incremental things. If so, then I've achieved my mission, which is to... You might be broken, but at least you're immutable. No record updates for me. Exactly. But when I'm coaching people and like doing a TDD example, like one of the things I notice is that people want to jump to the generalized implementation first. And I want to untrain that habit of trying to go straight to the generalized solution and instead say, let's talk about one case at a time, because I think our brains are actually more effective at thinking about one case and building code for one case. Otherwise we overengineer and our brain gets overwhelmed. It's like too large of a problem to bite off at once. So it gives us these manageable incremental chunks to work on. So I definitely think there's like value to this TDD approach. And I definitely like the idea of doing fuzzing after. And I think that's a great way to do it. And I think it's good for people to keep in mind that like balancing that incremental approach with the fuzzing, which will pull you more in the generalized implementation direction. Also, now that you talk about it, I think fuzzing is great for when you can't hold the whole state in your head when there's too many options. So this is more for, let's say application state and messages. So, you want to make sure that no matter what messages you get, something will always be true because you can't really think through it. One example that I am now thinking of is the text editor, like Elm editor that I tried to make, which was totally from scratch, no text area, no custom JavaScript. So it was just like each character was its own thing. Each character was its own div and all the cursor manipulation and selection. It was all done from scratch. And so there were a lot of situations where I thought the implementation is correct because the way that I tested the application, everything seemed to be fine. So if I am on the last line and I click the down arrow, it should move me to the end of the line, right? It shouldn't move it down because there's no other line. This was the last one. And all these cases, I could think of some, but I had no idea if that's all of them or if there is some behavior that I am forgetting. And so what property based tests were really good about was saying no matter what happens, no matter what keys I press, no matter what selection is currently active, no matter where a cursor is, if I do this, this will happen, right? And so it was great letting the computer just throw random messages at it and tell me, hey, no, if you do, I don't know, up arrow, down arrow, left arrow, this happens. And you said it shouldn't, right? And I wouldn't have thought of that example. So I think really fast tests are great after the fact, after you implement your program. Yeah. It's really nice that you write these unit tests and the fastest almost the same way, especially in the same tool, because you can switch from one to the other much easier than if you had to write a end to end test, for instance, where you go for Cypress or Puppeteer. Like, okay, now you have to write everything in a different language and using a different framework. But here's just like a few characters, few lines of change and you're good. Yep. Yeah. I need to dust off this branch I have. But I've got a branch in my LMarkdown parser that the parser, in Markdown, there's no such thing as invalid Markdown. It's just Markdown that won't have the effect you expected. An incomplete link in Markdown is just plain text, but it's not invalid Markdown. So I have a fuzz test that you throw any random string at it and there should be nothing that has an Elm parser error. Right. That's a pretty straightforward, just throw a lot of input at it. You can imagine sort of doing it in a little bit of a more sophisticated way where you try to construct more meaningful inputs that might be better at fleshing out. You can increase the chance of something weird happening. Yeah. Right. If you know what to look for. If you know, right, exactly. But at the same time, you could also bias it towards the things you're already looking for, which you're trying to avoid. So, I mean, I guess you could do both. You could say, here's just a totally random string. And then you could have another fuzz test that says, here is a set of known characters that could cause problems in unfinished HTML tag, unfinished link tag. Yeah. Yeah. And we have tools for that, right? We do have like this one of function and it's like derivatives like frequencies and weighted and however those are called where you can say, OK, 90% of the time give me this random string and 10% of the time give me this like carefully constructed, like tricky string. And you can switch the weights. You can change that. You know, something is you can switch the weights and you can find a balance where it's doing useful work, but you can still be sure that it will try all the crazy random things that you didn't think of with the totally random, uniformly random string. Yeah. How much confidence do you have that fuzz test will discover something if there is something to be found? Because I think by default, they run like 100 different inputs. So for instance, for finding errors in a mock down parser, like Shirk will find something sometimes, but hundreds might be low. So you might not trust it in the first run at least. Yeah. Yeah. 100 might be a little bit too low for that markdown example because strings are like collections and or at least with total random string generator, 100 might be too little. But if you had this kind of like, let's create my string from like, this is a normal world. This is a link. This is, you know, with missing parentheses and like all these different stuff where these chunks are bigger, then you might cover the space better. And so you might need less tests, but definitely depending on what you are testing, you can say, okay, let's run these fuzz tests. You know, let's run a million of them instead of 100. Right. And some people, this is now going into like testing and trying to break C programs, libraries like PNG libraries and so on. People do keep running them nonstop, right? They run them 24 seven and every now and then, you know, it finds something. So this possibly something we could do with elntest, like let it run for a specified amount of time or let it run indefinitely instead of just saying, here's, you know, try 100 times and then stop. Yeah. So you can choose how many monkeys you want and what these monkeys can write. Yeah, exactly. Yeah. And you're like, oh no, they wrote Harry Potter again. We have to throw it out. Yeah. I think this is a very interesting topic of how you produce inputs that essentially meaningfully represent the cases that you want to be testing. Because I mean, in the case of the markdown input, you're actually probably going to have an overrepresentation of, for example, cases with without matching closing tags, right? Because the odds of getting a valid matching closing tag is very low. That's going to produce a certain class of errors more. It's going to represent that class of errors more. But maybe there's a class of errors where you have a valid matching tag, but within that there's an invalid one. Or maybe there's a, you know, maybe there's something meaningful that happens when you do nesting. Maybe there's something meaningful that happens when you have something within a block quote, which you can have all sorts of nested, these nested markdown block structures that can have other markdown within them, which can have other markdown within them. You're not going to represent those cases, which means you are looking at more of a monkey typing Shakespeare situation where sure, theoretically, you're representing that input because you're representing an infinite space that's not constrained. But realistically, statistically, you're not representing that well enough to trust that you're getting coverage of that case. Yeah, I think what might work really well in that case is, well, not going with total random string, not going with valid SAT that you would convert to string and then test, but going in the middle in like the tokens. Right. So from implementing the parser, you know that, let's say left brace or the left square bracket, those are special or indentation is special or the exclamation mark is special. And so you can use those weights in the one of function. You can tweak that and you can say, OK, let's try what happens if I have an image tag and inside is something else. Right. So you can say with probability this and that, generate a string that is those tokens. So like exclamation mark, square bracket, something in them, then open question, then open parenthesis and try to run the whole thing again inside. Right. So you can try to create these cases. You can try to go based on the tokens. So the tokens are a little bit like bigger unit than just a character. But suddenly you are trying the interesting stuff more often than just, let's say, alphabetical characters because those do not. Yeah, it seems like there are a lot of approaches you could use. Like another one that comes to mind is you could, you know, if you construct the input from an AST, then you know you're constructing valid input and you turn that into a string. I mean, obviously, you know, you could do the reversible approach. Reversible is always an interesting thing to try with fuzzing if there is such a concept in the problem you're looking at. But beyond like reversible, you can take a build a random AST. You can wait certain things that, you know, to make sure there's an even distribution of like things like nesting, for example. And then you could go and change random characters or you could change, you could look for specific characters that have meaning and either add or remove them. That's another thing that might bring out some interesting cases. And of course, you could just go and build your own totally custom generator that's going to build up inputs that represent these different cases. Yeah, exactly. All right. I feel like we've talked about fuzz testing in general. I think people know what they are. Should we talk about what you've done, Martin? Like what is new in your implementation? What is different? All right. Yeah. So my changes to elm test and what's going to come out in elm test v2 is a re implementation of the shrinking process. So just to quickly summarize it, elm test will generate random inputs to your function. And if it finds that input fails the test, it will try to simplify it. Right. So it might turn 512, it might turn it into zero or it might divide it by two. It might subtract one from it. It just tries to make it smaller somehow or simpler. And there... If your sorting function fails on a list with a thousand items, but it also fails to sort correctly on a list, there's an input with two items that also fails. You don't want your error message to say, hey, I found a failing example. You want it to show you the simplest example. It can show you the fails. Yeah. It's not very helpful if it gives you something that takes two screens just to base the value. Right. So definitely... Thank you, elm test. Yeah. Like, I guess this is wrong. Okay. But it's really like when you see a failure from a property based test and it is shrunk down to its minimal failing value, a lot of the times the bug is obvious, right? Because you see, oh, like that's, that's that. Because it is small and you can kind of like guess as to what happens. But if really, if it's like, let's say for my editor, if it's a list of 500 messages, I have no idea which of these are just like fluff and which of these are really important. And similarly for the margramparcer, you could have a huge string, huge document and somewhere in there is going to be the failing part. Like let's say the image tag that is not closed or something. And if the shrinker can remove everything else and just give you that image tag, that's going to be much clearer for you. And so we do this shrinking process and there are two ways, or at least in the currently known open source world, there are two ways to do shrinking and we are using one of them. And it has some, it has some problems. When you say we. Do you mean? Elm test. The current Elm test. Yeah, right. The current Elm test, let's say Elm test v1 is using value based shrinking. So let's, let's name those two approaches. Value based shrinking kind of knows how to shrink a value, but it doesn't know any kind of context about it. And so you could think about it as function from the value, let's say from integer to many possible ways, how to make it smaller. So from integer to a list of integers. So giving that shrink integer function five would give you a list with four zero two, things like that. And when you say that it needs to return a list of integers, those are the list of things to try out the list of possible simplifications. Because you can simplify things in different ways. Yes. Yes. You want it to represent like zeroness is an interesting thing to shrink and evenness is an interesting thing to shrink. So, so two and zero are meaningful and smaller numbers. So they would be interesting to shrink. It's I wouldn't say it's, it's about evenness, but it's just trying to make the values simpler in some way. So for integers, it might, you know, you might try to shrink to zero. You might try to shrink to some negative number for strings. You might change the character from B to A, or you might also just make the string shorter. Right. And for different types, the way to shrink the type will be different. But it starts with random, right? This, this value based or type based shrinking approach, it says, here's a random value I'm starting with. Now, let me, once I find a failing case, let me see if I can create another failing case by shrinking that failing case. Yeah. So it will kind of follow the process of here's a value that's for some reason it's interesting because it fails the test. I will give you smaller values or simpler values. And you tell me if any of those fails the test also. Right. And so it kind of follows this process and it shrinks. If it finds a smaller value that still fails the test, it will run the like the candidates function again. Right. It will try to see, okay, how can I shrink this one? And so it will follow that process until it can't shrink anymore according to the test because, you know, values from one test wouldn't necessarily be failing some other test. So it needs to shrink with regards to the current failing test. Yeah, absolutely. And so that's, that's the value based shrinking. It has no context of how the value would generate it, whether it was mapped somehow, right? It doesn't know anything about a generator and that creates certain problems. Let's say if you had the end then function, which, you know, with random generation, it's often useful. Or if you had, let's say a filter function where you would say generate integer, but I don't want it to be even, you would shrink the failing value, but you have no way of running those filters on it again. So it loses some of those invariants that you generated with. Right. And so that's the issue. That's the issue with shrinking purely based on the value because you have no context about the generation. I've definitely run into this problem before and been confused as to why before I read about the changes you were working on, where, you know, I basically want to say, you know, as we talked about when you're, when you're building up a fuzz test, you can't check against concrete expected outputs. You have to check properties. But so often you want to prune down your input list to say, well, these properties should hold for this subset of inputs. You know, for even numbers or and so you have to get clever. You can't really filter it down. But what I recall is you can map so you can get even numbers by doing an int fuzzer and then map and then times two, which works very neatly for that case. But you can't really say give me random input and then filter out invalid values. Yeah. Yeah, and so there's this history of Elm test, like in way in the 018 days. It actually had like and then and a way to fail the test and so on. But we removed it because it has these issues with shrinking. But you know, you do want to have these functions. Sometimes they really are useful. And sometimes you can't really just like map arbitrary integer to be even. That's, you know, that's that's a motivating example of why you don't want to use filter and why you want to like construct right values rather than throw them out. But sometimes it's really it would be really nice to have the and then function and to have the filter function. And the other approach, which I'm trying to get to the way it will work in Elm test P2. Doesn't have those issues because we are shrinking something else than the value itself. We are shrinking the PRNG history. So PRNG is the random number generation algorithm. And so we are is the P pseudo pseudo pseudo random. Yeah, exactly. Right. So in V2 Elm test will remember the context of the generation. And it will try to shrink that context that let's say list of dice rolls. So, you know, the PRNG dice gave you five, gave you three, gave you two. And from that, you somehow generated a value. Right. That's the that's the role of the fuzzer library to kind of transform those integers to your values, custom types, whatever. Right. So you're and you're talking about the dice rolled being the seeds that we started with to generate our input values. Yeah, maybe maybe not exactly seeds because seed does have like a meaning for the random number generation. But the values that the PRNG algorithm produced, we do remember those. We know that if we generate a value from those, we will get that failing value. And now, instead of having a shrink function for the resulting value, we are shrinking the PRNG history. And suddenly, suddenly, not only you as the user do not have to care about shrinkers at all because because previously you sometimes needed to write your own shrinkers. Yeah. Yeah. OK, and so you as the user do not need to use shrinkers anymore. These are internal to library and the library has many ways to try and shrink that list of dice rolls. Right. So it can zero some of them. It can delete chunks. It can try to sort values in a chunk. It has all these different strategies. And it is fine tuned to the combinators that the fuzzer library gives you. Right. So the shrinkers know that the list fuzzer is written in such a way that the shrinking strategy will work really well with that. And this also gives you the benefit of generating the values after shrinking. Right. So suddenly you do filter after you have shrunk the PRNG history. You are doing the end then function after you have shrunk. And so all these invariants now hold because you are running those functions on the new alternative history. So you generate a list of integers. That's your basis from a C. You generate a lot of values. And for each value you derive those. Well, one value or multiple value. You derive those into a value that you want to test. Right. And I'm guessing that in some cases you could have you could shrink it to the same value. So for instance, if I if my generator generates a number between zero and 256, like that's that's how this library works. But all I want is a coin flip. So it could have it could generate 232 and it could then simplify to 231. But those would return both in heads or tails. And that would not be very interesting. Yeah. So is it? So sometimes you can get the same value from different PRNG histories and that's fine. We mostly care about simplifying the PRNG history as much as we can. So making it shorter and making it smaller. And there's this convention between the shrinking process and between the generators that if the PRNG history is smaller, the resulting value of your type that you want to test will be simpler. So the shrinker just doesn't care if it was 230 or 228 that generated the zero. It will just pick the smaller one. And if the generator has done its job well and maps simpler maps smaller histories to simpler values, then you will shrink towards simpler values. And so it might go from one to zero in your final value. It might go from zero to zero as long as we have shrunk the history a little bit. It counts. Yeah. OK. And also from a user's point of view, it doesn't really matter all that much whether it does a few cycles extra. It's not like you're generating duplicate use cases. Right. Yeah, and with Elm being pure, you don't really care about running functions again and again. Maybe a mocked on parser, but... So, OK, you mentioned that in an Elm 18 version of Elm test, there were these and then and filter functions for fuzzing. What would have happened if you encountered a failing test from using filter? I'm not sure if like generating an even set of even numbers would be a good example of that to do, you know, fuzz.int and then filter out only even ones. But what would happen with the shrinking if you were to use those with the older version? So the test would fail with a generated free, let's say, and then it would try to shrink. But a shrinker wouldn't know about this like this predicate, right, that you were filtering by. And so it would shrink to a value that doesn't where the predicate doesn't hold. So, right. Even if the generator would always give you like one, three, five, seven, after shrinking you could get it to. And that's not very helpful, right? Because you only cared about the other class of values. That makes sense. I think I recall trying to do some problem like this, I think with Elm 19, encountering something where I had to be careful not to create like an unresolvable shrinker or something where I could potentially run out of things to try and then just, you know, just run out and just hang or crash. Yeah, that's very much still like an issue that you can run into with the Elm test V2 because that's just like, you know, that's just how filter works. If you generate even values and then filter those to only keep odd values, you are never going to see a value, right? And so it could endlessly spin. We are, I think the implementation that got merged has like 15 tries and after 15 tries, it just says it's impossible to generate a value that would where this filter would hold. So we just give up. And so, yeah, we are like adding runtime failures into like the fastest world. I don't know how to say it, but with Elm test V1, you couldn't filter. And so you couldn't really have this class of errors, right? But right now you can. And that's, I think it's a good enough compromise to have these errors if we get the end then function in return. So the type based shrinking, it's looking at the actual values before it shrinks the result, which would mean like if you say fuzz.int, it's shrinking those ints. And then if you do fuzz.map, you know, you're mapping the values, but it shrank them before it gave them to you to map. Whereas with the... Well, no, in the value based shrinking approach, it shrinks after everything is generated and mapped and filtered. I see. So if you map it, it shrinks based on the actual mapped value. Yeah, it shrinks right at the end of everything. What if you map it to a different type? How does it know how to shrink that? To a different type, didn't it? It's always going to be the same type. Well, no, you can definitely map values to be a different type. You can create custom type based on integer or something. And then it's still the same type. Well, then it's a custom type. If you do fuzz.int and then you do fuzz.map and take an int and turn it into a custom type constructor to call? Yeah, then you have a different variant, but you still have the same type. But different from the original type of the fuzz generator. Oh, yeah. Okay. Yeah. So how does it know how to reduce your custom type? Right. So this is something that's been called integrated shrinking. And that's why you are not using random generators. That's why you are using fuzzers. And so each of those fuzzer combinators has two parts. One is about generating. So presumably it's doing like this random map with the function that you gave it. And then the second part is the shrinking information. And I'm not really sure about the details, but I believe it kind of knows that it was made from an integer. And so it tries to shrink those integers. And there's the mapping between the integer and your custom type. And so it still kind of knows how to shrink because it was created from integer. But it doesn't have any information about your type, right? You would have to create, you would have to use something like fuzz custom where you give it generator for your type and a shrinker for your type. So it kind of feels like what is V2 doing? So V2 is different in that the fuzzers are mostly just concerned about generating. And there's no three of possible ways to shrink the whole thing down. There are no shrink value to different value function. It basically just goes one layer deeper. And the shrinking is concerned with the inputs to the PRNG, right? And so it tries to generate a different PRNG history and then tries to generate a value from that. It doesn't have to succeed all the time because let's say if you have a list of three items that might need because of how the list generator, how the list fuzzer is written, it might need, let's say three or four values, like three or four dice rolls. And if you shrink that history into a list of two dice rolls, then you can never generate a list of four values out of that. There's just too little information, right? And so it doesn't need to succeed every time. But if it doesn't succeed, it just throws that shrinking attempt away. And it keeps those that are somehow simpler, but still generate a value and that value still fails. And so you are running your generator all the time. You are, that's the difference. So in the v1 approach, you generate a value and then you run the shrinker and the test a lot of times. But in the v2 approach, you are generating a lot of times when you find a failing value, you run the shrinker. And after every shrink, you run the generator again. And so all the invariants are still kept. So you've written an upgrade guide for running your fuzzers or your fuzz tests. And in the v1 API, I see a lot of uses of random generators. And in the v2, you use a lot of fuzzers instead. So this feels like it's a simplification to the API. It's a lot more consistent. And I'm guessing you also get a few benefits out of it. Yeah. So for you as the user, I believe it's nice that you can stay in one module and just use one module fully and express everything you want just with fuzzers. And from the perspective of the library, it's needed because we need to track the PRNG history ourselves. So if we gave you a function to create a fuzzer from generator, which we do, but it's an escape hedge and it will not shrink well at all. So please don't use it. But if you don't use what? Sorry? Don't use what? Don't use fuzz from generator. Okay, I think it's the equivalent of the current fuzz custom with no shrinking, with shrinking disabled. Basically, we need to... The fuzz library is built on top of random generator for integers and nothing else. Right? That's a simplification, but basically that's it. And we build the whole like how to do floats out of integers, how to do strings out of integers, how to do everything else from integers. We do that ourselves because we need to be able to hold that list of generated integers to shrink it. Right? And so if we give you a function where you can provide generator of your custom type, we have no way of running it other than just generating a random integer, using that as a seed and remembering that seed. But it's just like a meaningless number, right? That's the point of seeds. Yeah, you can try and simplify it. Yeah, there's no structure that we could try to somehow shrink down. It's just one big integer and yeah, for the library it's a black box. Yeah, you could try different inputs, but you wouldn't know if they were simpler or not. So what's the point? Yeah. So I guess that's the price of it. That now you don't need to use the random library, but we really strongly urge you not to use it, not to use the escape page. Right? So sometimes you might need, if for example, if your library is exposing generators, it might now be a good idea to expose fuzzers also. And you have no other choice than to write them from scratch using the fuzzer API. But we have tried to make it really simple to do so. And I know of no cases where you could do something with the random module, but couldn't do it with the fuzzer module. Okay. So you just added this escape hatch just in case, basically. Yeah. Just in case somebody wants to use third party generator, right? You don't want to clone Elm geometry and like see how the generator is created just so that you can create fuzzer based on that. You could just use the escape page, but you are not going to get nice shrinking because it's a black box. Yeah. It makes sense that it somehow like loses semantic information when you just have a generator because there are bits of state and semantics that the fuzzer keeps track of. I mean, I could imagine a world where the Elm random generator is just a random generator implementation is actually just a fuzzer under the hood. So you define it using the same thing. And now you say fuzzer from generator and hey, what do you know? It actually is a fuzzer. It's just that we hid that from you or, you know. Yeah. You can go that way. So we could create a function fuzzer to generator and that's fine because we don't need to define because we just throw away the history that we needed for shrinking. You don't need it if you just want to generate the value. So we could give you the function. And if that was the underlying representation of random numbers or Elm random library, we could have a nice, very well shrinking from generator function. But it would need, you know, it would need changes to the Elm random package. So these inputs, could you like shed a little light on how you take like these basic generators, which are conceptually generating ints as the input and how you derive these, you know, kind of baseline generators for other types of values in a meaningful way, like the list generator and pool generators and things like that. How do you ensure that the baseline generator values map to, you know, reduce down to simpler primitive values with these core generators or core fuzzers? Yeah. So, so integers are easy. Integers just map to integers. There's a little bit more complication around that where we prefer some ranges of integers and then, you know, with smaller probability, we give you larger and larger integers. There's also some things where we just take, let's say the most significant bit of the integer to mean the sign bit so that, so that we prefer positive values to negative values. Right. So if, if, if both minus two and two would fail the test, we are going to give you the two because it's just nicer. So there are some, the world is more complicated than that, but integers are pretty easy. And so what can we build from that? You could build characters. So you have the function character for code, which just uses the, it's not ASCII, right? It's UTF 16 or something. You just build, build a character from a number. So you have characters. We can have lists or just like generally collections by flipping your coin. So this is the approach we chose to generate lists where you flip a coin. If it's zero, then you don't create any more elements. If you get one, you try to generate again. So that's where and then comes in. Right. So you have these like recursive algorithm, which is building the list. And so that leaves a trail of, of the PRNCh history, right? And then some value that's mapping to the integer, then there's going to be one. And again, history for the second value, then there's going to be zero and that's it. Right. Because that's when we start generating the list. And so, so it always reduces to smaller. Yeah. So you can, if you delete the first two values from the PRNCh history, it's going to leave you with a valid list. Right. So if one something, one something zero shrinks down to one something zero, that's going to be fine because the list accepts that. And so this shrinks better than if we tried to generate a number for the count of how many values we want and then just generating those in line because you would have to decrement the number and delete some other chunk after it. So it's just kind of weird, you know, with the internal representation, it's kind of not very simple way to shrink those lists. So we opted for the nicely chunkable flip a coin approach. And then you have multiple histories for each list elements, right? Is that what you said? Oh, one history for each slot. One history. Well, one history gives you one final value. So one PRNCh history will give you, let's say a list of characters or something, but each of those characters in there, it might not be composed of just one dice roll. It might be composed of multiple, right? So each fuzzer can draw arbitrarily many random values. And so you could think about it as of a tree or of some kind of released of nested lists where a given sub branch is created by this specific fuzzer, but in the end, it's all flattened out and the shrinking library doesn't really know which dice roll is related to which value, right? It is kind of blind to that and it just tries different stuff, zeroing, decrementing, removing and just sees, just throws it at the wall and sees what sticks. Okay. And that might result in a few things that don't make sense and which may fail, but it will find something which will work out. Yeah. So does it create a new branch every time you call and then? Is that it? So, and then just runs another fuzzer. And so fuzzers have state inside them, right? They do have the current history and you can think of those like base fuzzers, like integer or flip a coin or whatever. You can think of them as generating value and giving, letting you do something with that, but also appending to the state. Right. And so that's kind of like this monadic dance of keeping a state around where you only exposed the value, but basically there are no like concurrent different histories. There's just one history. But as you go through the function and as you call these L functions recursively, they are going to append to that state and in the end you end up with both the created value of your type and with the PRNG history. So fuzzer is a monad. Yeah. It has an end. So yes. That's the definition, right? Right. And so, and so, right, we have, we have integers, characters, lists, all these things like map, map to, and then those can be done without the specific values. Those are just like way to combine those. And now that you have lists, you can do all kinds of stuff. You can do strings, which are just conceptually just lists of characters. You can do sets, dictionaries with the filter function. Well, I want to say with a filter function, but it's different. It's defined differently. You can do lists of certain length and so on. That's actually pretty, pretty smart. We have this, this flip a coin fuzzer that gives you one with certain probability. So you give it a float. And so sometimes these lists of certain length fuzzers, if they see they have enough stuff, they will say, okay, the next flip of a coin will be with probability zero, right? And so it will, it will not generate stuff in advance and then just like throw it out. It will just like stop, like I'm giving you this biased coin. And so there is, there are tricks like that, but it works out pretty well and it's all pretty, pretty optimized and optimal. There's one fuzzer that is really, really, really, really complex. And that's for floats because we can't really use a float generator, right? We can only use generators for integers. And we are inspired by the library hypothesis, which is this like property based distinct library for Python, which started with this let's say internal shrinking approach. And they gave a lot of care to shrinking floats nicely. So, you know, with the current LN test, you could have the test that fails for some kind of float. And of course it will generate some random number in the like 10 millions and so on with all these different like digits. And it will shrink down to some really unreadable integer next to zero, right? So 0.00008135, whatever. And this is not very nice because if the test would fail with zero or with one, why not give you that, right? It would be just much nicer for the user. And so we can't really do some kind of trick where we take two integers and divide, do some bit magic and just divide things by the maximal float and give you flows in the uniform distribution. There will be a really easy way out, a really easy way to generate floats, but it doesn't shrink well, right? And so what hypothesis did and what LN test now does is we reorder the bits in the IEEE 754 float representation to kind of follow the rule from the shrinkers, right? So if the random integer is smaller, it will result in a simpler float. And so there's a lot of like bitwise masking and oring and shifting and it's really crazy. And that's the part that I was most stressed about. But the result is floats will shrink beautifully and it will give you, so it will prefer positive numbers, it will prefer smaller numbers, but it will prefer integers over decimals, right? So it will prefer numbers like one over 1.5, but also it will prefer smaller fractions over huge fractions. So it will give you 1.5 instead of 1.76543215, right? And so I'm pretty happy about that. And I'm curious to see if this like different distribution of floats, if it will find some bugs easier than the V1 version of LN test. I'm not really sure about that, but I'm curious to see. And we are also adding the not the numbers in there. We are adding the infinities in there, which is probably going to be what finds the most bugs, but also, you know, sometimes your library or application doesn't really care about those. And you are just like, okay, if you give me garbage, I will give you garbage no matter. So next to like fast.float, we also have fast.nicefloat, which is just numbers. So, you know, if suddenly you have like 30 failure tests because of infinities that will not happen in your code, who knows? Will they not? Right? That you hope won't happen. Yeah. But you can pick the easy way out and you can just switch from floats to nice floats. And those tests, those test failures will go away, but perhaps keep them in. Perhaps somehow guard against these values in your application code, right? It's also an option you can take. I have to say, I still haven't encountered a NAN in Elm code, like in JavaScript. Sure. But I have never counted one. So I think I'm just going to go with nice floats always. Yeah. I mean, maybe, maybe, maybe I'll try it. And yeah, I did. I did encounter them at work recently. I can't remember what specific scenario that was, but I was just getting NANs all around and I was like, why? These are like, there's no reason. It's always something about like, by dividing by zero, you get infinities and then you do something about the infinities and suddenly it's a NAN. So yeah, it's, yeah. All you need to do is write a fuzztest to make sure that no code returns a NAN. That's it. Do it everywhere and you can go to go. Perhaps that's also something Elm review could do. Like, Hey, what are you doing with that zero? Put it down. Sure. You could check for division by zero at least. Yeah. I mean, with fuzzers, like why not just do a fuzz test? Like, why not just throw more inputs at it? If you can get meaningful test results, it's really cool how much thought you put into, you know, all of these little details for, I mean, essentially this is kind of the user experience, the usability of fuzzers and their errors and how meaningful they are. Right? Because if you write a fuzzer that fails, then you have a failing test, but it's a question of how useful is the reduction it's able to give you this simplified value. Yeah. Yeah. I think this is like the red line going through the whole release, like making stuff nicer for the user and like giving you more power, but also giving you better results. Yeah. Right. And making it map more intuitively and yeah, this definitely is giving me a lot of motivation to like throw some more fuzzers in my projects. I definitely have some, but I feel that I'm not doing a good enough job identifying those opportunities and keeping my eye out for where I need to test a property and where it would be helpful to have a lot of inputs exercised, which there are really a lot of cases. Most of my tests are Elm review tests, so I would have to generate some Elm code and then I would have to make sure that it's reports an error in this kind of case. Like, yeah, I feel like fuzzers are very appropriate there, but I could learn something. I could imagine fuzz testing with Elm review where you could say something like, you know, with import as, and then you use that import as to generate your strings. So you use a module a certain way because like often that's something I'll miss in Elm review fixes or rules is I won't check for a hard coded module and maybe do fixes with that hard coded module or without checking the way it's imported. So if you fuzz that, you know, that would be the challenge is now, you know, you have to write the tests and consume that instead of just writing a hard coded string. So there's certainly a trade off there. Also Elm review asks you to write the expected fixed code. So you would also have to generate that based on the same input. So basically you're redoing this, the implementation. Yeah, that's always the issue of like, how do you stop from just writing the implementation in the test? Yeah. And that's kind of, kind of really the one tricky thing about property based tests, like thinking of the properties and there's an awesome blog post. I can't recall the author, but it's about property based tests in F sharp. I think it is like F sharp for fun and profit is the name of the blog. Oh, Scott Walsh. Oh yeah. So he has some great blog posts about what types of properties are there, right? So there's this like mathematical laws. You can check that like appending an empty string to anything will be that string and so on. But there's also these like round trips and like Oracle testing where let's say you are implementing your own optimized sort function. You can always check it against the standard library list dot sort, right? And so there are these things where you know kind of what the expected output should be and you can test against like the reference implementation and so on. There's all these different types of properties that you can use and he's really great about like showing examples and kind of walking you through it, building intuition. And yeah, so that's, I think we could put that into show notes. That's really good intro into how to think about property based tests. That sounds amazing. Yeah, that sounds very helpful. I would love to have like a, you know, just a set of categories to think about of different types of properties to check for in my brain when I'm writing code. That seems like that would help me motivate me to actually reach for that tool more often. Yeah, as you say, it's a problem of identifying when to use it. So those categories seem like a great trick for that. And that's basically what the blog post is about, those types of categories. So go for it. That's great. I see there's a video associated with it too. That's perfect. Also, like the amount of care that you put into shrinking to nicer values and making that intuitive is like really changed the way I think about fuzzing and made me think like, wow, you know, both think more deeply about like, how do I want to generate fuzz inputs to make sure I'm meaningfully exercising the relevant cases? And then how do I reduce those down in a meaningful way? Like, I was thinking, you know, I'm sure you have to think carefully about the semantics if you want to produce a fuzzer that really reduces values down meaningfully. Now, again, if you get a fuzz test that fails, it's failing no matter how well you've reduced it. So you don't necessarily need to worry about that for just getting an error message. And it's more how nice do we want to make the fuzz out? Yeah, it's all about the UX. Right, right. But for the input, that's a different story because you do want to make sure that you're exercising the important cases. You want to be sure that you are kind of spread over the input space properly so that given enough time, you will find the failing value. Yeah. It's like a question of, you know, in a unit test, it's pretty common that in TDD, I always try to encourage people that the error message is part of the failure and part of the test driven part in TDD. So you don't just go make it green. Like, see the error message, improve the error message if it doesn't tell you what to do and then do the thing it tells you to do. But so it would be the equivalent of like, yeah, you have a failing test, your CI is going to break, but now you don't know why because you don't have meaningful information. So those things are both important. It's probably more important that it just fails in general. But if you can make it nice output, that's great, too. So this is this has not been released yet. This is still in a beta version of the untest CLI. Right, but it has a command to make sure that you can to allow you to try it out. So this is still in a testing period, a testing period. So how can people try it out and what do you expect to hear from people? Right. Yeah, we have posted some discourse posts about both the new version of the untest CLI that allows you to try it and also call for testing, call for kind of like, please help us find if there's anything horribly wrong before we make the 2.0.0 version. So, yeah, so in the new CLI, I believe starting from revision 8, you have this command. Let's say what it was, install unstable test master, something like that. It's going to be that if you do like untest help. Yeah, you got it right. Yeah, yeah. Great. Wow. We also linked to it in the show notes anyway. So yes. Thank you. So it basically just pretends that your 1.2.2 version, which is the current untest version, it just pretends that it contains the code from 2.0. Right. So it rewrites your elm home, which is usually in like the home slash dot elm slash something. And so we are essentially rewriting your cache and on the next untest run, it will pick up the new library. Right. And you can undo that either by just removing the cache, so removing the dot elm directory, or you can use uninstall unstable test master command in elm test. And yeah, so after you install that, after it kind of tempers with your cache, you can run elm test or elm test RS, I believe, and it will use the new library. And so there are some API changes, right? So you can expect to see some failures from like test code not compiling, but that's going to be, I believe, mostly the true and false functions being gone from the expect module and also the tuple and triple functions changing to like pair or the other way around. Basically tuple fuzzers got a little bit of, again, user experience improvement, I believe, where you don't have to structure the inner fuzzers into a tuple. Yeah, right. Yeah, you don't have to pass in a tuple of fuzzers. You pass in two arguments for the tuple and it's not called fuzz dot tuple. It's called fuzz dot pair. It's not called fuzz dot tuple three. It's called fuzz dot triple, which I much prefer, especially if you're using a tuple with the Elm syntax actually only having those two kinds now. Yeah. And so there is a document about basically API changes. And so I have tried to do a good job of like listing them all out. I actually used Elm div command to get that and saying what you can do instead. And it should be quite non problematic. It should be really just like those tuple changes and expect true and false being gone, where again, there's the explanation of what you can do instead. It's one to one, so all cases should be covered. So you can test it out. You can change your test suite and see whether there is some problem that we didn't think about that we should fix before releasing 2.0. And you can also tell us if it caught any new bugs or if you are happy about a fault fuzzer, I would be very happy to hear that. Do you expect that it could find less problems than before as well? It's possible. I think the distribution definitely changed. Right, so Elm test one and Elm test two will try different points with different probability. But we didn't really change all that much. We will still trigger like the whole space as before. It might be just the probabilities that change. So again, if you run your tests enough, you should see the same errors and hopefully you will see them sooner because we are preferring small inputs than larger inputs and so on. It is not totally uniform. All right, great. So there are some really nice videos you put together kind of walking through some of the design, so people should definitely check those out. We'll link to those in the show notes. Are there any other resources we should point people to? I think we should mention that for feedback, you should go to the testing channel on Slack or maybe open a GitHub issue. Yeah, you can do that. We are, or at least I am monitoring the testing channel, so I will definitely be there. You can post on this course in the post or create your own. You can definitely raise an issue on GitHub. As for the resources, I'm not sure about any fundamental resources. I definitely take a lot of inspiration from how the library Hypothesis does things in the Python world and they have a blog with a lot of these like why do that and how to think about it and let's say testing stateful programs, which we don't really have in like, we don't have like side effects, but we still do have those like updated messages and so on. So you can, you can glean a little bit from that. It's not always going to be applicable because we just don't have certain kinds of problems, but yeah, I like their approach of putting the user experience or like the developer experience as a priority. And so we are actually in talks with Jakub Hampel, a gamble man on Slack. We are kind of toying with the idea of, let's say a failure database. So if the fastest we'll find a bug, it will remember it. And the next time you run the test, it will try it first, right? Just so that you can, you don't need to like randomly find it again, but it will try it straight away. And forever from now on or something. Yeah. Yeah. I guess until you clear the cache or whatever. But yeah. So I think, I think we can still steal a lot of nice ideas from the ecosystem in different languages. And so hopefully the testing story in Elm is going to be nicer and nicer. Yeah. Which already it's so nice just by using a language like Elm with pure functions and not having implicit state in these things. So testing is such a fun thing. Yeah. Yeah. Add fuzzing to the mix and you get potentially some flakiness back, but maybe the database thing, it's a good kind of flakiness, but hopefully. Yeah. Yeah. Hopefully your inputs are well distributed enough to not be flaky though. Yeah. All right. Well, Martin, thank you so much for coming back on. It was a pleasure. And again, congratulations on getting this merged in. Thank you. Thanks for having me. It was a pleasure. And your rune until next time. Until next time.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 3.2800000000000002, "text": " Hello Jeroen. Hello Dylan.", "tokens": [50364, 2425, 508, 2032, 268, 13, 2425, 28160, 13, 50528, 50528, 2589, 291, 841, 411, 746, 390, 5361, 1036, 3500, 30, 50680, 50680, 865, 11, 411, 11, 309, 390, 257, 1481, 3500, 11, 457, 309, 2762, 411, 321, 994, 380, 362, 411, 257, 11, 437, 360, 291, 818, 309, 30, 316, 9184, 13, 51050, 51050, 316, 9184, 0, 7587, 0, 1911, 11, 2759, 380, 309, 312, 1481, 30, 5135, 11, 321, 600, 658, 1071, 9184, 510, 965, 13, 9184, 4956, 617, 74, 646, 365, 505, 797, 13, 2561, 370, 709, 337, 1348, 646, 322, 11, 9184, 13, 51534, 51534, 1911, 456, 11, 7751, 13, 5490, 281, 312, 646, 510, 13, 51658, 51658, 407, 2321, 13, 9944, 337, 1071, 9184, 3500, 13, 961, 311, 360, 309, 13, 51858, 51858], "temperature": 0.0, "avg_logprob": -0.320233426352804, "compression_ratio": 1.6496350364963503, "no_caption_prob": 0.49377724528312683}, {"id": 1, "seek": 0, "start": 3.2800000000000002, "end": 6.32, "text": " Did you feel like something was missing last episode?", "tokens": [50364, 2425, 508, 2032, 268, 13, 2425, 28160, 13, 50528, 50528, 2589, 291, 841, 411, 746, 390, 5361, 1036, 3500, 30, 50680, 50680, 865, 11, 411, 11, 309, 390, 257, 1481, 3500, 11, 457, 309, 2762, 411, 321, 994, 380, 362, 411, 257, 11, 437, 360, 291, 818, 309, 30, 316, 9184, 13, 51050, 51050, 316, 9184, 0, 7587, 0, 1911, 11, 2759, 380, 309, 312, 1481, 30, 5135, 11, 321, 600, 658, 1071, 9184, 510, 965, 13, 9184, 4956, 617, 74, 646, 365, 505, 797, 13, 2561, 370, 709, 337, 1348, 646, 322, 11, 9184, 13, 51534, 51534, 1911, 456, 11, 7751, 13, 5490, 281, 312, 646, 510, 13, 51658, 51658, 407, 2321, 13, 9944, 337, 1071, 9184, 3500, 13, 961, 311, 360, 309, 13, 51858, 51858], "temperature": 0.0, "avg_logprob": -0.320233426352804, "compression_ratio": 1.6496350364963503, "no_caption_prob": 0.49377724528312683}, {"id": 2, "seek": 0, "start": 6.32, "end": 13.72, "text": " Yeah, like, it was a nice episode, but it felt like we didn't have like a, what do you call it? A Martin.", "tokens": [50364, 2425, 508, 2032, 268, 13, 2425, 28160, 13, 50528, 50528, 2589, 291, 841, 411, 746, 390, 5361, 1036, 3500, 30, 50680, 50680, 865, 11, 411, 11, 309, 390, 257, 1481, 3500, 11, 457, 309, 2762, 411, 321, 994, 380, 362, 411, 257, 11, 437, 360, 291, 818, 309, 30, 316, 9184, 13, 51050, 51050, 316, 9184, 0, 7587, 0, 1911, 11, 2759, 380, 309, 312, 1481, 30, 5135, 11, 321, 600, 658, 1071, 9184, 510, 965, 13, 9184, 4956, 617, 74, 646, 365, 505, 797, 13, 2561, 370, 709, 337, 1348, 646, 322, 11, 9184, 13, 51534, 51534, 1911, 456, 11, 7751, 13, 5490, 281, 312, 646, 510, 13, 51658, 51658, 407, 2321, 13, 9944, 337, 1071, 9184, 3500, 13, 961, 311, 360, 309, 13, 51858, 51858], "temperature": 0.0, "avg_logprob": -0.320233426352804, "compression_ratio": 1.6496350364963503, "no_caption_prob": 0.49377724528312683}, {"id": 3, "seek": 0, "start": 13.72, "end": 23.400000000000002, "text": " A Martin! Exactly! Hey, wouldn't it be nice? Actually, we've got another Martin here today. Martin Janacek back with us again. Thanks so much for coming back on, Martin.", "tokens": [50364, 2425, 508, 2032, 268, 13, 2425, 28160, 13, 50528, 50528, 2589, 291, 841, 411, 746, 390, 5361, 1036, 3500, 30, 50680, 50680, 865, 11, 411, 11, 309, 390, 257, 1481, 3500, 11, 457, 309, 2762, 411, 321, 994, 380, 362, 411, 257, 11, 437, 360, 291, 818, 309, 30, 316, 9184, 13, 51050, 51050, 316, 9184, 0, 7587, 0, 1911, 11, 2759, 380, 309, 312, 1481, 30, 5135, 11, 321, 600, 658, 1071, 9184, 510, 965, 13, 9184, 4956, 617, 74, 646, 365, 505, 797, 13, 2561, 370, 709, 337, 1348, 646, 322, 11, 9184, 13, 51534, 51534, 1911, 456, 11, 7751, 13, 5490, 281, 312, 646, 510, 13, 51658, 51658, 407, 2321, 13, 9944, 337, 1071, 9184, 3500, 13, 961, 311, 360, 309, 13, 51858, 51858], "temperature": 0.0, "avg_logprob": -0.320233426352804, "compression_ratio": 1.6496350364963503, "no_caption_prob": 0.49377724528312683}, {"id": 4, "seek": 0, "start": 23.400000000000002, "end": 25.88, "text": " Hey there, hello. Nice to be back here.", "tokens": [50364, 2425, 508, 2032, 268, 13, 2425, 28160, 13, 50528, 50528, 2589, 291, 841, 411, 746, 390, 5361, 1036, 3500, 30, 50680, 50680, 865, 11, 411, 11, 309, 390, 257, 1481, 3500, 11, 457, 309, 2762, 411, 321, 994, 380, 362, 411, 257, 11, 437, 360, 291, 818, 309, 30, 316, 9184, 13, 51050, 51050, 316, 9184, 0, 7587, 0, 1911, 11, 2759, 380, 309, 312, 1481, 30, 5135, 11, 321, 600, 658, 1071, 9184, 510, 965, 13, 9184, 4956, 617, 74, 646, 365, 505, 797, 13, 2561, 370, 709, 337, 1348, 646, 322, 11, 9184, 13, 51534, 51534, 1911, 456, 11, 7751, 13, 5490, 281, 312, 646, 510, 13, 51658, 51658, 407, 2321, 13, 9944, 337, 1071, 9184, 3500, 13, 961, 311, 360, 309, 13, 51858, 51858], "temperature": 0.0, "avg_logprob": -0.320233426352804, "compression_ratio": 1.6496350364963503, "no_caption_prob": 0.49377724528312683}, {"id": 5, "seek": 0, "start": 25.88, "end": 29.88, "text": " So soon. Ready for another Martin episode. Let's do it.", "tokens": [50364, 2425, 508, 2032, 268, 13, 2425, 28160, 13, 50528, 50528, 2589, 291, 841, 411, 746, 390, 5361, 1036, 3500, 30, 50680, 50680, 865, 11, 411, 11, 309, 390, 257, 1481, 3500, 11, 457, 309, 2762, 411, 321, 994, 380, 362, 411, 257, 11, 437, 360, 291, 818, 309, 30, 316, 9184, 13, 51050, 51050, 316, 9184, 0, 7587, 0, 1911, 11, 2759, 380, 309, 312, 1481, 30, 5135, 11, 321, 600, 658, 1071, 9184, 510, 965, 13, 9184, 4956, 617, 74, 646, 365, 505, 797, 13, 2561, 370, 709, 337, 1348, 646, 322, 11, 9184, 13, 51534, 51534, 1911, 456, 11, 7751, 13, 5490, 281, 312, 646, 510, 13, 51658, 51658, 407, 2321, 13, 9944, 337, 1071, 9184, 3500, 13, 961, 311, 360, 309, 13, 51858, 51858], "temperature": 0.0, "avg_logprob": -0.320233426352804, "compression_ratio": 1.6496350364963503, "no_caption_prob": 0.49377724528312683}, {"id": 6, "seek": 2988, "start": 29.88, "end": 45.0, "text": " Yeah, well, thanks for joining us. And so you've been hard at work for a while on this pretty ambitious project, getting a new fuzzing approach in the Elm testing library.", "tokens": [50364, 865, 11, 731, 11, 3231, 337, 5549, 505, 13, 400, 370, 291, 600, 668, 1152, 412, 589, 337, 257, 1339, 322, 341, 1238, 20239, 1716, 11, 1242, 257, 777, 283, 3334, 8781, 3109, 294, 264, 2699, 76, 4997, 6405, 13, 51120, 51120, 407, 700, 295, 439, 11, 13568, 322, 1242, 411, 19472, 264, 1716, 293, 1242, 300, 36427, 294, 13, 663, 307, 1596, 20239, 293, 8992, 13, 51548, 51548], "temperature": 0.0, "avg_logprob": -0.13511783975950428, "compression_ratio": 1.5245098039215685, "no_caption_prob": 0.0014258791925385594}, {"id": 7, "seek": 2988, "start": 45.0, "end": 53.56, "text": " So first of all, congratulations on getting like completing the project and getting that merged in. That is quite ambitious and impressive.", "tokens": [50364, 865, 11, 731, 11, 3231, 337, 5549, 505, 13, 400, 370, 291, 600, 668, 1152, 412, 589, 337, 257, 1339, 322, 341, 1238, 20239, 1716, 11, 1242, 257, 777, 283, 3334, 8781, 3109, 294, 264, 2699, 76, 4997, 6405, 13, 51120, 51120, 407, 700, 295, 439, 11, 13568, 322, 1242, 411, 19472, 264, 1716, 293, 1242, 300, 36427, 294, 13, 663, 307, 1596, 20239, 293, 8992, 13, 51548, 51548], "temperature": 0.0, "avg_logprob": -0.13511783975950428, "compression_ratio": 1.5245098039215685, "no_caption_prob": 0.0014258791925385594}, {"id": 8, "seek": 5356, "start": 53.56, "end": 63.96, "text": " Yeah, thank you. It is quite a good feeling to finish a project because I have so many unfinished projects.", "tokens": [50364, 865, 11, 1309, 291, 13, 467, 307, 1596, 257, 665, 2633, 281, 2413, 257, 1716, 570, 286, 362, 370, 867, 41037, 4455, 13, 50884, 50884, 865, 11, 293, 300, 311, 257, 688, 295, 21252, 281, 411, 767, 13447, 561, 300, 341, 307, 411, 257, 665, 4783, 3109, 281, 3679, 670, 281, 13, 51416, 51416], "temperature": 0.0, "avg_logprob": -0.16965530599866593, "compression_ratio": 1.4606060606060607, "no_caption_prob": 0.00033925686147995293}, {"id": 9, "seek": 5356, "start": 63.96, "end": 74.6, "text": " Yeah, and that's a lot of coordination to like actually convince people that this is like a good official approach to switch over to.", "tokens": [50364, 865, 11, 1309, 291, 13, 467, 307, 1596, 257, 665, 2633, 281, 2413, 257, 1716, 570, 286, 362, 370, 867, 41037, 4455, 13, 50884, 50884, 865, 11, 293, 300, 311, 257, 688, 295, 21252, 281, 411, 767, 13447, 561, 300, 341, 307, 411, 257, 665, 4783, 3109, 281, 3679, 670, 281, 13, 51416, 51416], "temperature": 0.0, "avg_logprob": -0.16965530599866593, "compression_ratio": 1.4606060606060607, "no_caption_prob": 0.00033925686147995293}, {"id": 10, "seek": 7460, "start": 74.6, "end": 88.39999999999999, "text": " And, you know, I mean, so this fuzzing approach, like there's like a lot of interesting theory behind it that you had to really, I think, do a lot of reading about to compare these different approaches.", "tokens": [50364, 400, 11, 291, 458, 11, 286, 914, 11, 370, 341, 283, 3334, 8781, 3109, 11, 411, 456, 311, 411, 257, 688, 295, 1880, 5261, 2261, 309, 300, 291, 632, 281, 534, 11, 286, 519, 11, 360, 257, 688, 295, 3760, 466, 281, 6794, 613, 819, 11587, 13, 51054, 51054, 400, 457, 1338, 11, 309, 311, 257, 534, 10343, 1558, 13, 407, 11, 1338, 11, 869, 11, 869, 1691, 322, 300, 13, 51312, 51312, 1042, 11, 321, 630, 751, 466, 283, 3334, 8781, 294, 264, 3500, 8374, 281, 2699, 76, 6921, 11, 457, 576, 291, 411, 505, 281, 11, 457, 727, 291, 2903, 437, 283, 3334, 8781, 307, 797, 30, 51812, 51812], "temperature": 0.0, "avg_logprob": -0.1524582921931174, "compression_ratio": 1.697211155378486, "no_caption_prob": 0.00019710591004695743}, {"id": 11, "seek": 7460, "start": 88.39999999999999, "end": 93.56, "text": " And but yeah, it's a really fascinating idea. So, yeah, great, great job on that.", "tokens": [50364, 400, 11, 291, 458, 11, 286, 914, 11, 370, 341, 283, 3334, 8781, 3109, 11, 411, 456, 311, 411, 257, 688, 295, 1880, 5261, 2261, 309, 300, 291, 632, 281, 534, 11, 286, 519, 11, 360, 257, 688, 295, 3760, 466, 281, 6794, 613, 819, 11587, 13, 51054, 51054, 400, 457, 1338, 11, 309, 311, 257, 534, 10343, 1558, 13, 407, 11, 1338, 11, 869, 11, 869, 1691, 322, 300, 13, 51312, 51312, 1042, 11, 321, 630, 751, 466, 283, 3334, 8781, 294, 264, 3500, 8374, 281, 2699, 76, 6921, 11, 457, 576, 291, 411, 505, 281, 11, 457, 727, 291, 2903, 437, 283, 3334, 8781, 307, 797, 30, 51812, 51812], "temperature": 0.0, "avg_logprob": -0.1524582921931174, "compression_ratio": 1.697211155378486, "no_caption_prob": 0.00019710591004695743}, {"id": 12, "seek": 7460, "start": 93.56, "end": 103.56, "text": " Well, we did talk about fuzzing in the episode dedicated to Elm tests, but would you like us to, but could you explain what fuzzing is again?", "tokens": [50364, 400, 11, 291, 458, 11, 286, 914, 11, 370, 341, 283, 3334, 8781, 3109, 11, 411, 456, 311, 411, 257, 688, 295, 1880, 5261, 2261, 309, 300, 291, 632, 281, 534, 11, 286, 519, 11, 360, 257, 688, 295, 3760, 466, 281, 6794, 613, 819, 11587, 13, 51054, 51054, 400, 457, 1338, 11, 309, 311, 257, 534, 10343, 1558, 13, 407, 11, 1338, 11, 869, 11, 869, 1691, 322, 300, 13, 51312, 51312, 1042, 11, 321, 630, 751, 466, 283, 3334, 8781, 294, 264, 3500, 8374, 281, 2699, 76, 6921, 11, 457, 576, 291, 411, 505, 281, 11, 457, 727, 291, 2903, 437, 283, 3334, 8781, 307, 797, 30, 51812, 51812], "temperature": 0.0, "avg_logprob": -0.1524582921931174, "compression_ratio": 1.697211155378486, "no_caption_prob": 0.00019710591004695743}, {"id": 13, "seek": 10356, "start": 103.56, "end": 111.4, "text": " I think what you're trying to say, Jeroen, is that your memory is a little fuzzy on that.", "tokens": [50364, 286, 519, 437, 291, 434, 1382, 281, 584, 11, 508, 2032, 268, 11, 307, 300, 428, 4675, 307, 257, 707, 34710, 322, 300, 13, 50756, 50756, 821, 309, 307, 13, 865, 11, 988, 13, 286, 393, 2138, 853, 281, 6786, 283, 3334, 8781, 293, 983, 764, 309, 293, 370, 322, 13, 51238, 51238], "temperature": 0.0, "avg_logprob": -0.1478505394675515, "compression_ratio": 1.3507462686567164, "no_caption_prob": 4.26208607677836e-05}, {"id": 14, "seek": 10356, "start": 111.4, "end": 121.04, "text": " There it is. Yeah, sure. I can definitely try to describe fuzzing and why use it and so on.", "tokens": [50364, 286, 519, 437, 291, 434, 1382, 281, 584, 11, 508, 2032, 268, 11, 307, 300, 428, 4675, 307, 257, 707, 34710, 322, 300, 13, 50756, 50756, 821, 309, 307, 13, 865, 11, 988, 13, 286, 393, 2138, 853, 281, 6786, 283, 3334, 8781, 293, 983, 764, 309, 293, 370, 322, 13, 51238, 51238], "temperature": 0.0, "avg_logprob": -0.1478505394675515, "compression_ratio": 1.3507462686567164, "no_caption_prob": 4.26208607677836e-05}, {"id": 15, "seek": 12104, "start": 121.04, "end": 134.04000000000002, "text": " So I think I think of fuzz tests or as it's more well known in the functional programming world as property based tests.", "tokens": [50364, 407, 286, 519, 286, 519, 295, 283, 16740, 6921, 420, 382, 309, 311, 544, 731, 2570, 294, 264, 11745, 9410, 1002, 382, 4707, 2361, 6921, 13, 51014, 51014, 286, 519, 295, 552, 382, 411, 257, 29357, 295, 264, 1622, 490, 4985, 6921, 807, 13075, 1602, 6921, 281, 281, 13202, 13, 51536, 51536, 407, 718, 385, 2903, 300, 13, 407, 4985, 6921, 2673, 362, 445, 411, 472, 1365, 11, 558, 30, 51838, 51838], "temperature": 0.0, "avg_logprob": -0.097246891743428, "compression_ratio": 1.5918367346938775, "no_caption_prob": 4.0010672819335014e-05}, {"id": 16, "seek": 12104, "start": 134.04000000000002, "end": 144.48000000000002, "text": " I think of them as like a continuation of the line from unit tests through parameterized tests to to infinity.", "tokens": [50364, 407, 286, 519, 286, 519, 295, 283, 16740, 6921, 420, 382, 309, 311, 544, 731, 2570, 294, 264, 11745, 9410, 1002, 382, 4707, 2361, 6921, 13, 51014, 51014, 286, 519, 295, 552, 382, 411, 257, 29357, 295, 264, 1622, 490, 4985, 6921, 807, 13075, 1602, 6921, 281, 281, 13202, 13, 51536, 51536, 407, 718, 385, 2903, 300, 13, 407, 4985, 6921, 2673, 362, 445, 411, 472, 1365, 11, 558, 30, 51838, 51838], "temperature": 0.0, "avg_logprob": -0.097246891743428, "compression_ratio": 1.5918367346938775, "no_caption_prob": 4.0010672819335014e-05}, {"id": 17, "seek": 12104, "start": 144.48000000000002, "end": 150.52, "text": " So let me explain that. So unit tests usually have just like one example, right?", "tokens": [50364, 407, 286, 519, 286, 519, 295, 283, 16740, 6921, 420, 382, 309, 311, 544, 731, 2570, 294, 264, 11745, 9410, 1002, 382, 4707, 2361, 6921, 13, 51014, 51014, 286, 519, 295, 552, 382, 411, 257, 29357, 295, 264, 1622, 490, 4985, 6921, 807, 13075, 1602, 6921, 281, 281, 13202, 13, 51536, 51536, 407, 718, 385, 2903, 300, 13, 407, 4985, 6921, 2673, 362, 445, 411, 472, 1365, 11, 558, 30, 51838, 51838], "temperature": 0.0, "avg_logprob": -0.097246891743428, "compression_ratio": 1.5918367346938775, "no_caption_prob": 4.0010672819335014e-05}, {"id": 18, "seek": 15052, "start": 150.52, "end": 156.8, "text": " You hard coded one value and you are trying to assert something about it.", "tokens": [50364, 509, 1152, 34874, 472, 2158, 293, 291, 366, 1382, 281, 19810, 746, 466, 309, 13, 50678, 50678, 13746, 291, 366, 1382, 281, 1520, 264, 1874, 295, 5141, 257, 2445, 365, 411, 6915, 11, 558, 30, 50980, 50980, 407, 5127, 472, 281, 1045, 307, 1451, 420, 291, 366, 1382, 281, 1466, 746, 1646, 466, 309, 13, 51330, 51330, 961, 311, 584, 11, 286, 500, 380, 458, 11, 411, 30955, 538, 732, 1669, 309, 754, 420, 746, 411, 300, 13, 51562, 51562], "temperature": 0.0, "avg_logprob": -0.10067225665580935, "compression_ratio": 1.6767676767676767, "no_caption_prob": 3.479501901892945e-05}, {"id": 19, "seek": 15052, "start": 156.8, "end": 162.84, "text": " Either you are trying to check the result of calling a function with like equals, right?", "tokens": [50364, 509, 1152, 34874, 472, 2158, 293, 291, 366, 1382, 281, 19810, 746, 466, 309, 13, 50678, 50678, 13746, 291, 366, 1382, 281, 1520, 264, 1874, 295, 5141, 257, 2445, 365, 411, 6915, 11, 558, 30, 50980, 50980, 407, 5127, 472, 281, 1045, 307, 1451, 420, 291, 366, 1382, 281, 1466, 746, 1646, 466, 309, 13, 51330, 51330, 961, 311, 584, 11, 286, 500, 380, 458, 11, 411, 30955, 538, 732, 1669, 309, 754, 420, 746, 411, 300, 13, 51562, 51562], "temperature": 0.0, "avg_logprob": -0.10067225665580935, "compression_ratio": 1.6767676767676767, "no_caption_prob": 3.479501901892945e-05}, {"id": 20, "seek": 15052, "start": 162.84, "end": 169.84, "text": " So adding one to three is four or you are trying to learn something else about it.", "tokens": [50364, 509, 1152, 34874, 472, 2158, 293, 291, 366, 1382, 281, 19810, 746, 466, 309, 13, 50678, 50678, 13746, 291, 366, 1382, 281, 1520, 264, 1874, 295, 5141, 257, 2445, 365, 411, 6915, 11, 558, 30, 50980, 50980, 407, 5127, 472, 281, 1045, 307, 1451, 420, 291, 366, 1382, 281, 1466, 746, 1646, 466, 309, 13, 51330, 51330, 961, 311, 584, 11, 286, 500, 380, 458, 11, 411, 30955, 538, 732, 1669, 309, 754, 420, 746, 411, 300, 13, 51562, 51562], "temperature": 0.0, "avg_logprob": -0.10067225665580935, "compression_ratio": 1.6767676767676767, "no_caption_prob": 3.479501901892945e-05}, {"id": 21, "seek": 15052, "start": 169.84, "end": 174.48000000000002, "text": " Let's say, I don't know, like multiplying by two makes it even or something like that.", "tokens": [50364, 509, 1152, 34874, 472, 2158, 293, 291, 366, 1382, 281, 19810, 746, 466, 309, 13, 50678, 50678, 13746, 291, 366, 1382, 281, 1520, 264, 1874, 295, 5141, 257, 2445, 365, 411, 6915, 11, 558, 30, 50980, 50980, 407, 5127, 472, 281, 1045, 307, 1451, 420, 291, 366, 1382, 281, 1466, 746, 1646, 466, 309, 13, 51330, 51330, 961, 311, 584, 11, 286, 500, 380, 458, 11, 411, 30955, 538, 732, 1669, 309, 754, 420, 746, 411, 300, 13, 51562, 51562], "temperature": 0.0, "avg_logprob": -0.10067225665580935, "compression_ratio": 1.6767676767676767, "no_caption_prob": 3.479501901892945e-05}, {"id": 22, "seek": 17448, "start": 174.48, "end": 180.64, "text": " So it doesn't have to be a value that you like an output value that you want to check against.", "tokens": [50364, 407, 309, 1177, 380, 362, 281, 312, 257, 2158, 300, 291, 411, 364, 5598, 2158, 300, 291, 528, 281, 1520, 1970, 13, 50672, 50672, 583, 291, 291, 2673, 362, 472, 2685, 4846, 1365, 300, 291, 366, 1382, 281, 1500, 13, 51024, 51024, 1396, 264, 958, 1823, 307, 13075, 1602, 6921, 13, 51264, 51264, 407, 291, 727, 519, 295, 552, 382, 257, 1329, 295, 2604, 2622, 11, 718, 311, 584, 13, 51528, 51528, 407, 1329, 295, 15743, 293, 641, 11760, 23930, 13, 51708, 51708], "temperature": 0.0, "avg_logprob": -0.12251961651970358, "compression_ratio": 1.6157635467980296, "no_caption_prob": 2.4466035029035993e-05}, {"id": 23, "seek": 17448, "start": 180.64, "end": 187.67999999999998, "text": " But you you usually have one specific input example that you are trying to test.", "tokens": [50364, 407, 309, 1177, 380, 362, 281, 312, 257, 2158, 300, 291, 411, 364, 5598, 2158, 300, 291, 528, 281, 1520, 1970, 13, 50672, 50672, 583, 291, 291, 2673, 362, 472, 2685, 4846, 1365, 300, 291, 366, 1382, 281, 1500, 13, 51024, 51024, 1396, 264, 958, 1823, 307, 13075, 1602, 6921, 13, 51264, 51264, 407, 291, 727, 519, 295, 552, 382, 257, 1329, 295, 2604, 2622, 11, 718, 311, 584, 13, 51528, 51528, 407, 1329, 295, 15743, 293, 641, 11760, 23930, 13, 51708, 51708], "temperature": 0.0, "avg_logprob": -0.12251961651970358, "compression_ratio": 1.6157635467980296, "no_caption_prob": 2.4466035029035993e-05}, {"id": 24, "seek": 17448, "start": 187.67999999999998, "end": 192.48, "text": " Then the next step is parameterized tests.", "tokens": [50364, 407, 309, 1177, 380, 362, 281, 312, 257, 2158, 300, 291, 411, 364, 5598, 2158, 300, 291, 528, 281, 1520, 1970, 13, 50672, 50672, 583, 291, 291, 2673, 362, 472, 2685, 4846, 1365, 300, 291, 366, 1382, 281, 1500, 13, 51024, 51024, 1396, 264, 958, 1823, 307, 13075, 1602, 6921, 13, 51264, 51264, 407, 291, 727, 519, 295, 552, 382, 257, 1329, 295, 2604, 2622, 11, 718, 311, 584, 13, 51528, 51528, 407, 1329, 295, 15743, 293, 641, 11760, 23930, 13, 51708, 51708], "temperature": 0.0, "avg_logprob": -0.12251961651970358, "compression_ratio": 1.6157635467980296, "no_caption_prob": 2.4466035029035993e-05}, {"id": 25, "seek": 17448, "start": 192.48, "end": 197.76, "text": " So you could think of them as a list of tuples, let's say.", "tokens": [50364, 407, 309, 1177, 380, 362, 281, 312, 257, 2158, 300, 291, 411, 364, 5598, 2158, 300, 291, 528, 281, 1520, 1970, 13, 50672, 50672, 583, 291, 291, 2673, 362, 472, 2685, 4846, 1365, 300, 291, 366, 1382, 281, 1500, 13, 51024, 51024, 1396, 264, 958, 1823, 307, 13075, 1602, 6921, 13, 51264, 51264, 407, 291, 727, 519, 295, 552, 382, 257, 1329, 295, 2604, 2622, 11, 718, 311, 584, 13, 51528, 51528, 407, 1329, 295, 15743, 293, 641, 11760, 23930, 13, 51708, 51708], "temperature": 0.0, "avg_logprob": -0.12251961651970358, "compression_ratio": 1.6157635467980296, "no_caption_prob": 2.4466035029035993e-05}, {"id": 26, "seek": 17448, "start": 197.76, "end": 201.35999999999999, "text": " So list of inputs and their corresponding outputs.", "tokens": [50364, 407, 309, 1177, 380, 362, 281, 312, 257, 2158, 300, 291, 411, 364, 5598, 2158, 300, 291, 528, 281, 1520, 1970, 13, 50672, 50672, 583, 291, 291, 2673, 362, 472, 2685, 4846, 1365, 300, 291, 366, 1382, 281, 1500, 13, 51024, 51024, 1396, 264, 958, 1823, 307, 13075, 1602, 6921, 13, 51264, 51264, 407, 291, 727, 519, 295, 552, 382, 257, 1329, 295, 2604, 2622, 11, 718, 311, 584, 13, 51528, 51528, 407, 1329, 295, 15743, 293, 641, 11760, 23930, 13, 51708, 51708], "temperature": 0.0, "avg_logprob": -0.12251961651970358, "compression_ratio": 1.6157635467980296, "no_caption_prob": 2.4466035029035993e-05}, {"id": 27, "seek": 20136, "start": 201.36, "end": 218.4, "text": " And so that's usually helpful. In my experience, it's helpful with parsers because it's hard to stay sane and like have everything nailed down when you are creating a parser for some language.", "tokens": [50364, 400, 370, 300, 311, 2673, 4961, 13, 682, 452, 1752, 11, 309, 311, 4961, 365, 21156, 433, 570, 309, 311, 1152, 281, 1754, 45610, 293, 411, 362, 1203, 30790, 760, 562, 291, 366, 4084, 257, 21156, 260, 337, 512, 2856, 13, 51216, 51216, 407, 300, 311, 286, 519, 729, 6921, 2138, 1710, 264, 881, 281, 385, 466, 411, 983, 6921, 366, 665, 13, 51616, 51616], "temperature": 0.0, "avg_logprob": -0.1615868326443345, "compression_ratio": 1.5240641711229947, "no_caption_prob": 3.2129632018040866e-05}, {"id": 28, "seek": 20136, "start": 218.4, "end": 226.4, "text": " So that's I think those tests definitely speak the most to me about like why tests are good.", "tokens": [50364, 400, 370, 300, 311, 2673, 4961, 13, 682, 452, 1752, 11, 309, 311, 4961, 365, 21156, 433, 570, 309, 311, 1152, 281, 1754, 45610, 293, 411, 362, 1203, 30790, 760, 562, 291, 366, 4084, 257, 21156, 260, 337, 512, 2856, 13, 51216, 51216, 407, 300, 311, 286, 519, 729, 6921, 2138, 1710, 264, 881, 281, 385, 466, 411, 983, 6921, 366, 665, 13, 51616, 51616], "temperature": 0.0, "avg_logprob": -0.1615868326443345, "compression_ratio": 1.5240641711229947, "no_caption_prob": 3.2129632018040866e-05}, {"id": 29, "seek": 22640, "start": 226.4, "end": 233.52, "text": " Because I just want to make sure that I didn't break something when trying to implement this new feature.", "tokens": [50364, 1436, 286, 445, 528, 281, 652, 988, 300, 286, 994, 380, 1821, 746, 562, 1382, 281, 4445, 341, 777, 4111, 13, 50720, 50720, 407, 13075, 1602, 6921, 366, 257, 869, 636, 281, 445, 1520, 264, 912, 4707, 420, 1520, 264, 2445, 294, 264, 912, 636, 365, 3195, 295, 819, 5110, 11, 3195, 295, 819, 1152, 66, 12340, 15743, 13, 51356, 51356, 400, 550, 445, 281, 17594, 11, 2699, 76, 1500, 775, 406, 362, 1406, 337, 13075, 1602, 6921, 11, 457, 291, 393, 45497, 309, 1228, 411, 1329, 322, 4471, 13, 51860, 51860], "temperature": 0.0, "avg_logprob": -0.12569244871748256, "compression_ratio": 1.6680161943319838, "no_caption_prob": 1.9213437553844415e-05}, {"id": 30, "seek": 22640, "start": 233.52, "end": 246.24, "text": " So parameterized tests are a great way to just check the same property or check the function in the same way with lots of different examples, lots of different hardcoded inputs.", "tokens": [50364, 1436, 286, 445, 528, 281, 652, 988, 300, 286, 994, 380, 1821, 746, 562, 1382, 281, 4445, 341, 777, 4111, 13, 50720, 50720, 407, 13075, 1602, 6921, 366, 257, 869, 636, 281, 445, 1520, 264, 912, 4707, 420, 1520, 264, 2445, 294, 264, 912, 636, 365, 3195, 295, 819, 5110, 11, 3195, 295, 819, 1152, 66, 12340, 15743, 13, 51356, 51356, 400, 550, 445, 281, 17594, 11, 2699, 76, 1500, 775, 406, 362, 1406, 337, 13075, 1602, 6921, 11, 457, 291, 393, 45497, 309, 1228, 411, 1329, 322, 4471, 13, 51860, 51860], "temperature": 0.0, "avg_logprob": -0.12569244871748256, "compression_ratio": 1.6680161943319838, "no_caption_prob": 1.9213437553844415e-05}, {"id": 31, "seek": 22640, "start": 246.24, "end": 256.32, "text": " And then just to clarify, Elm test does not have support for parameterized tests, but you can emulate it using like list on map.", "tokens": [50364, 1436, 286, 445, 528, 281, 652, 988, 300, 286, 994, 380, 1821, 746, 562, 1382, 281, 4445, 341, 777, 4111, 13, 50720, 50720, 407, 13075, 1602, 6921, 366, 257, 869, 636, 281, 445, 1520, 264, 912, 4707, 420, 1520, 264, 2445, 294, 264, 912, 636, 365, 3195, 295, 819, 5110, 11, 3195, 295, 819, 1152, 66, 12340, 15743, 13, 51356, 51356, 400, 550, 445, 281, 17594, 11, 2699, 76, 1500, 775, 406, 362, 1406, 337, 13075, 1602, 6921, 11, 457, 291, 393, 45497, 309, 1228, 411, 1329, 322, 4471, 13, 51860, 51860], "temperature": 0.0, "avg_logprob": -0.12569244871748256, "compression_ratio": 1.6680161943319838, "no_caption_prob": 1.9213437553844415e-05}, {"id": 32, "seek": 25632, "start": 256.32, "end": 258.32, "text": " Exactly.", "tokens": [50364, 7587, 13, 50464, 50464, 865, 13, 407, 291, 576, 362, 257, 1329, 295, 613, 15743, 293, 23930, 293, 291, 576, 445, 1320, 309, 281, 1329, 4471, 13, 50868, 50868, 509, 576, 1884, 6921, 484, 295, 300, 293, 291, 576, 445, 976, 552, 281, 1500, 13, 14792, 8056, 420, 1500, 13, 1671, 18035, 420, 746, 13, 51360, 51360, 3885, 8056, 13, 3885, 8056, 13, 51460, 51460, 865, 11, 1500, 13, 14792, 8056, 13, 51560, 51560], "temperature": 0.0, "avg_logprob": -0.2396070831700375, "compression_ratio": 1.72, "no_caption_prob": 7.246609311550856e-05}, {"id": 33, "seek": 25632, "start": 258.32, "end": 266.4, "text": " Yeah. So you would have a list of these inputs and outputs and you would just pass it to list map.", "tokens": [50364, 7587, 13, 50464, 50464, 865, 13, 407, 291, 576, 362, 257, 1329, 295, 613, 15743, 293, 23930, 293, 291, 576, 445, 1320, 309, 281, 1329, 4471, 13, 50868, 50868, 509, 576, 1884, 6921, 484, 295, 300, 293, 291, 576, 445, 976, 552, 281, 1500, 13, 14792, 8056, 420, 1500, 13, 1671, 18035, 420, 746, 13, 51360, 51360, 3885, 8056, 13, 3885, 8056, 13, 51460, 51460, 865, 11, 1500, 13, 14792, 8056, 13, 51560, 51560], "temperature": 0.0, "avg_logprob": -0.2396070831700375, "compression_ratio": 1.72, "no_caption_prob": 7.246609311550856e-05}, {"id": 34, "seek": 25632, "start": 266.4, "end": 276.24, "text": " You would create tests out of that and you would just give them to test.describe or test.concat or something.", "tokens": [50364, 7587, 13, 50464, 50464, 865, 13, 407, 291, 576, 362, 257, 1329, 295, 613, 15743, 293, 23930, 293, 291, 576, 445, 1320, 309, 281, 1329, 4471, 13, 50868, 50868, 509, 576, 1884, 6921, 484, 295, 300, 293, 291, 576, 445, 976, 552, 281, 1500, 13, 14792, 8056, 420, 1500, 13, 1671, 18035, 420, 746, 13, 51360, 51360, 3885, 8056, 13, 3885, 8056, 13, 51460, 51460, 865, 11, 1500, 13, 14792, 8056, 13, 51560, 51560], "temperature": 0.0, "avg_logprob": -0.2396070831700375, "compression_ratio": 1.72, "no_caption_prob": 7.246609311550856e-05}, {"id": 35, "seek": 25632, "start": 276.24, "end": 278.24, "text": " Describe. Describe.", "tokens": [50364, 7587, 13, 50464, 50464, 865, 13, 407, 291, 576, 362, 257, 1329, 295, 613, 15743, 293, 23930, 293, 291, 576, 445, 1320, 309, 281, 1329, 4471, 13, 50868, 50868, 509, 576, 1884, 6921, 484, 295, 300, 293, 291, 576, 445, 976, 552, 281, 1500, 13, 14792, 8056, 420, 1500, 13, 1671, 18035, 420, 746, 13, 51360, 51360, 3885, 8056, 13, 3885, 8056, 13, 51460, 51460, 865, 11, 1500, 13, 14792, 8056, 13, 51560, 51560], "temperature": 0.0, "avg_logprob": -0.2396070831700375, "compression_ratio": 1.72, "no_caption_prob": 7.246609311550856e-05}, {"id": 36, "seek": 25632, "start": 278.24, "end": 280.24, "text": " Yeah, test.describe.", "tokens": [50364, 7587, 13, 50464, 50464, 865, 13, 407, 291, 576, 362, 257, 1329, 295, 613, 15743, 293, 23930, 293, 291, 576, 445, 1320, 309, 281, 1329, 4471, 13, 50868, 50868, 509, 576, 1884, 6921, 484, 295, 300, 293, 291, 576, 445, 976, 552, 281, 1500, 13, 14792, 8056, 420, 1500, 13, 1671, 18035, 420, 746, 13, 51360, 51360, 3885, 8056, 13, 3885, 8056, 13, 51460, 51460, 865, 11, 1500, 13, 14792, 8056, 13, 51560, 51560], "temperature": 0.0, "avg_logprob": -0.2396070831700375, "compression_ratio": 1.72, "no_caption_prob": 7.246609311550856e-05}, {"id": 37, "seek": 28024, "start": 280.24, "end": 291.76, "text": " Yeah, you can still do it in Elm even though it doesn't have this kind of like annotation style that let's say Java JUnit has and so on.", "tokens": [50364, 865, 11, 291, 393, 920, 360, 309, 294, 2699, 76, 754, 1673, 309, 1177, 380, 362, 341, 733, 295, 411, 48654, 3758, 300, 718, 311, 584, 10745, 508, 12405, 270, 575, 293, 370, 322, 13, 50940, 50940, 708, 311, 1481, 466, 13075, 1602, 6921, 307, 300, 562, 291, 16500, 544, 15743, 11, 370, 498, 428, 2445, 575, 11, 718, 311, 584, 11, 1045, 12869, 293, 291, 362, 8020, 337, 1184, 295, 613, 11, 291, 483, 439, 264, 21267, 11, 558, 30, 51692, 51692], "temperature": 0.0, "avg_logprob": -0.13313361897188075, "compression_ratio": 1.5315315315315314, "no_caption_prob": 3.421149085625075e-05}, {"id": 38, "seek": 28024, "start": 291.76, "end": 306.8, "text": " What's nice about parameterized tests is that when you specify more inputs, so if your function has, let's say, three arguments and you have tables for each of these, you get all the combinations, right?", "tokens": [50364, 865, 11, 291, 393, 920, 360, 309, 294, 2699, 76, 754, 1673, 309, 1177, 380, 362, 341, 733, 295, 411, 48654, 3758, 300, 718, 311, 584, 10745, 508, 12405, 270, 575, 293, 370, 322, 13, 50940, 50940, 708, 311, 1481, 466, 13075, 1602, 6921, 307, 300, 562, 291, 16500, 544, 15743, 11, 370, 498, 428, 2445, 575, 11, 718, 311, 584, 11, 1045, 12869, 293, 291, 362, 8020, 337, 1184, 295, 613, 11, 291, 483, 439, 264, 21267, 11, 558, 30, 51692, 51692], "temperature": 0.0, "avg_logprob": -0.13313361897188075, "compression_ratio": 1.5315315315315314, "no_caption_prob": 3.421149085625075e-05}, {"id": 39, "seek": 30680, "start": 306.8, "end": 313.84000000000003, "text": " So it's a nice way to cover a lot of area quickly.", "tokens": [50364, 407, 309, 311, 257, 1481, 636, 281, 2060, 257, 688, 295, 1859, 2661, 13, 50716, 50716, 583, 439, 295, 613, 11, 411, 4985, 6921, 293, 13075, 1602, 6921, 11, 436, 362, 264, 1154, 295, 787, 8568, 437, 291, 393, 519, 466, 11, 558, 30, 51380, 51380], "temperature": 0.0, "avg_logprob": -0.12127973635991414, "compression_ratio": 1.3115942028985508, "no_caption_prob": 3.4168901038356125e-05}, {"id": 40, "seek": 30680, "start": 313.84000000000003, "end": 327.12, "text": " But all of these, like unit tests and parameterized tests, they have the problem of only checking what you can think about, right?", "tokens": [50364, 407, 309, 311, 257, 1481, 636, 281, 2060, 257, 688, 295, 1859, 2661, 13, 50716, 50716, 583, 439, 295, 613, 11, 411, 4985, 6921, 293, 13075, 1602, 6921, 11, 436, 362, 264, 1154, 295, 787, 8568, 437, 291, 393, 519, 466, 11, 558, 30, 51380, 51380], "temperature": 0.0, "avg_logprob": -0.12127973635991414, "compression_ratio": 1.3115942028985508, "no_caption_prob": 3.4168901038356125e-05}, {"id": 41, "seek": 32712, "start": 327.12, "end": 338.32, "text": " So you know about edge cases like zero and minus one and so on, but perhaps you didn't think about what happens with max integer or something.", "tokens": [50364, 407, 291, 458, 466, 4691, 3331, 411, 4018, 293, 3175, 472, 293, 370, 322, 11, 457, 4317, 291, 994, 380, 519, 466, 437, 2314, 365, 11469, 24922, 420, 746, 13, 50924, 50924, 407, 300, 311, 437, 4707, 2361, 6921, 420, 2370, 6921, 382, 2699, 76, 5498, 552, 13, 51324, 51324, 663, 311, 437, 729, 366, 534, 665, 466, 570, 436, 8460, 264, 15743, 16979, 13, 51588, 51588], "temperature": 0.0, "avg_logprob": -0.10936796492424564, "compression_ratio": 1.5392670157068062, "no_caption_prob": 1.5424169760080986e-05}, {"id": 42, "seek": 32712, "start": 338.32, "end": 346.32, "text": " So that's what property based tests or fast tests as Elm calls them.", "tokens": [50364, 407, 291, 458, 466, 4691, 3331, 411, 4018, 293, 3175, 472, 293, 370, 322, 11, 457, 4317, 291, 994, 380, 519, 466, 437, 2314, 365, 11469, 24922, 420, 746, 13, 50924, 50924, 407, 300, 311, 437, 4707, 2361, 6921, 420, 2370, 6921, 382, 2699, 76, 5498, 552, 13, 51324, 51324, 663, 311, 437, 729, 366, 534, 665, 466, 570, 436, 8460, 264, 15743, 16979, 13, 51588, 51588], "temperature": 0.0, "avg_logprob": -0.10936796492424564, "compression_ratio": 1.5392670157068062, "no_caption_prob": 1.5424169760080986e-05}, {"id": 43, "seek": 32712, "start": 346.32, "end": 351.6, "text": " That's what those are really good about because they generate the inputs randomly.", "tokens": [50364, 407, 291, 458, 466, 4691, 3331, 411, 4018, 293, 3175, 472, 293, 370, 322, 11, 457, 4317, 291, 994, 380, 519, 466, 437, 2314, 365, 11469, 24922, 420, 746, 13, 50924, 50924, 407, 300, 311, 437, 4707, 2361, 6921, 420, 2370, 6921, 382, 2699, 76, 5498, 552, 13, 51324, 51324, 663, 311, 437, 729, 366, 534, 665, 466, 570, 436, 8460, 264, 15743, 16979, 13, 51588, 51588], "temperature": 0.0, "avg_logprob": -0.10936796492424564, "compression_ratio": 1.5392670157068062, "no_caption_prob": 1.5424169760080986e-05}, {"id": 44, "seek": 35160, "start": 351.6, "end": 358.96000000000004, "text": " And so that's nice, but it has its own issues, right?", "tokens": [50364, 400, 370, 300, 311, 1481, 11, 457, 309, 575, 1080, 1065, 2663, 11, 558, 30, 50732, 50732, 1436, 498, 291, 393, 380, 1152, 3089, 264, 15743, 11, 5800, 291, 393, 380, 1152, 3089, 264, 23930, 2139, 13, 51092, 51092, 407, 309, 393, 380, 312, 445, 257, 2199, 4846, 4088, 11, 2066, 6915, 512, 5598, 570, 309, 311, 4974, 13, 51548, 51548, 407, 291, 393, 380, 534, 360, 300, 13, 51640, 51640, 400, 370, 291, 643, 281, 1319, 428, 1953, 257, 707, 857, 466, 309, 13, 51852, 51852], "temperature": 0.0, "avg_logprob": -0.1245417327023624, "compression_ratio": 1.6336633663366336, "no_caption_prob": 2.0290148313506506e-05}, {"id": 45, "seek": 35160, "start": 358.96000000000004, "end": 366.16, "text": " Because if you can't hard code the inputs, suddenly you can't hard code the outputs either.", "tokens": [50364, 400, 370, 300, 311, 1481, 11, 457, 309, 575, 1080, 1065, 2663, 11, 558, 30, 50732, 50732, 1436, 498, 291, 393, 380, 1152, 3089, 264, 15743, 11, 5800, 291, 393, 380, 1152, 3089, 264, 23930, 2139, 13, 51092, 51092, 407, 309, 393, 380, 312, 445, 257, 2199, 4846, 4088, 11, 2066, 6915, 512, 5598, 570, 309, 311, 4974, 13, 51548, 51548, 407, 291, 393, 380, 534, 360, 300, 13, 51640, 51640, 400, 370, 291, 643, 281, 1319, 428, 1953, 257, 707, 857, 466, 309, 13, 51852, 51852], "temperature": 0.0, "avg_logprob": -0.1245417327023624, "compression_ratio": 1.6336633663366336, "no_caption_prob": 2.0290148313506506e-05}, {"id": 46, "seek": 35160, "start": 366.16, "end": 375.28000000000003, "text": " So it can't be just a simple input transform, expect equals some output because it's random.", "tokens": [50364, 400, 370, 300, 311, 1481, 11, 457, 309, 575, 1080, 1065, 2663, 11, 558, 30, 50732, 50732, 1436, 498, 291, 393, 380, 1152, 3089, 264, 15743, 11, 5800, 291, 393, 380, 1152, 3089, 264, 23930, 2139, 13, 51092, 51092, 407, 309, 393, 380, 312, 445, 257, 2199, 4846, 4088, 11, 2066, 6915, 512, 5598, 570, 309, 311, 4974, 13, 51548, 51548, 407, 291, 393, 380, 534, 360, 300, 13, 51640, 51640, 400, 370, 291, 643, 281, 1319, 428, 1953, 257, 707, 857, 466, 309, 13, 51852, 51852], "temperature": 0.0, "avg_logprob": -0.1245417327023624, "compression_ratio": 1.6336633663366336, "no_caption_prob": 2.0290148313506506e-05}, {"id": 47, "seek": 35160, "start": 375.28000000000003, "end": 377.12, "text": " So you can't really do that.", "tokens": [50364, 400, 370, 300, 311, 1481, 11, 457, 309, 575, 1080, 1065, 2663, 11, 558, 30, 50732, 50732, 1436, 498, 291, 393, 380, 1152, 3089, 264, 15743, 11, 5800, 291, 393, 380, 1152, 3089, 264, 23930, 2139, 13, 51092, 51092, 407, 309, 393, 380, 312, 445, 257, 2199, 4846, 4088, 11, 2066, 6915, 512, 5598, 570, 309, 311, 4974, 13, 51548, 51548, 407, 291, 393, 380, 534, 360, 300, 13, 51640, 51640, 400, 370, 291, 643, 281, 1319, 428, 1953, 257, 707, 857, 466, 309, 13, 51852, 51852], "temperature": 0.0, "avg_logprob": -0.1245417327023624, "compression_ratio": 1.6336633663366336, "no_caption_prob": 2.0290148313506506e-05}, {"id": 48, "seek": 35160, "start": 377.12, "end": 381.36, "text": " And so you need to change your thinking a little bit about it.", "tokens": [50364, 400, 370, 300, 311, 1481, 11, 457, 309, 575, 1080, 1065, 2663, 11, 558, 30, 50732, 50732, 1436, 498, 291, 393, 380, 1152, 3089, 264, 15743, 11, 5800, 291, 393, 380, 1152, 3089, 264, 23930, 2139, 13, 51092, 51092, 407, 309, 393, 380, 312, 445, 257, 2199, 4846, 4088, 11, 2066, 6915, 512, 5598, 570, 309, 311, 4974, 13, 51548, 51548, 407, 291, 393, 380, 534, 360, 300, 13, 51640, 51640, 400, 370, 291, 643, 281, 1319, 428, 1953, 257, 707, 857, 466, 309, 13, 51852, 51852], "temperature": 0.0, "avg_logprob": -0.1245417327023624, "compression_ratio": 1.6336633663366336, "no_caption_prob": 2.0290148313506506e-05}, {"id": 49, "seek": 38136, "start": 381.36, "end": 386.56, "text": " You need to change your mindset and you need to go more general.", "tokens": [50364, 509, 643, 281, 1319, 428, 12543, 293, 291, 643, 281, 352, 544, 2674, 13, 50624, 50624, 407, 2602, 295, 445, 8568, 337, 6915, 11, 718, 311, 584, 291, 362, 281, 519, 466, 437, 33270, 1719, 775, 428, 2445, 11, 437, 33270, 1719, 1797, 337, 428, 2445, 30, 51396, 51396, 3013, 7221, 1797, 337, 309, 30, 51468, 51468, 865, 11, 597, 7221, 30, 51552, 51552, 708, 307, 1009, 2074, 11, 558, 30, 51644, 51644, 883, 1871, 437, 4846, 307, 516, 281, 312, 456, 13, 51760, 51760], "temperature": 0.0, "avg_logprob": -0.1433544597406497, "compression_ratio": 1.661764705882353, "no_caption_prob": 6.437955107685411e-06}, {"id": 50, "seek": 38136, "start": 386.56, "end": 402.0, "text": " So instead of just checking for equals, let's say you have to think about what invariants does your function, what invariants hold for your function?", "tokens": [50364, 509, 643, 281, 1319, 428, 12543, 293, 291, 643, 281, 352, 544, 2674, 13, 50624, 50624, 407, 2602, 295, 445, 8568, 337, 6915, 11, 718, 311, 584, 291, 362, 281, 519, 466, 437, 33270, 1719, 775, 428, 2445, 11, 437, 33270, 1719, 1797, 337, 428, 2445, 30, 51396, 51396, 3013, 7221, 1797, 337, 309, 30, 51468, 51468, 865, 11, 597, 7221, 30, 51552, 51552, 708, 307, 1009, 2074, 11, 558, 30, 51644, 51644, 883, 1871, 437, 4846, 307, 516, 281, 312, 456, 13, 51760, 51760], "temperature": 0.0, "avg_logprob": -0.1433544597406497, "compression_ratio": 1.661764705882353, "no_caption_prob": 6.437955107685411e-06}, {"id": 51, "seek": 38136, "start": 402.0, "end": 403.44, "text": " Which properties hold for it?", "tokens": [50364, 509, 643, 281, 1319, 428, 12543, 293, 291, 643, 281, 352, 544, 2674, 13, 50624, 50624, 407, 2602, 295, 445, 8568, 337, 6915, 11, 718, 311, 584, 291, 362, 281, 519, 466, 437, 33270, 1719, 775, 428, 2445, 11, 437, 33270, 1719, 1797, 337, 428, 2445, 30, 51396, 51396, 3013, 7221, 1797, 337, 309, 30, 51468, 51468, 865, 11, 597, 7221, 30, 51552, 51552, 708, 307, 1009, 2074, 11, 558, 30, 51644, 51644, 883, 1871, 437, 4846, 307, 516, 281, 312, 456, 13, 51760, 51760], "temperature": 0.0, "avg_logprob": -0.1433544597406497, "compression_ratio": 1.661764705882353, "no_caption_prob": 6.437955107685411e-06}, {"id": 52, "seek": 38136, "start": 403.44, "end": 405.12, "text": " Yeah, which properties?", "tokens": [50364, 509, 643, 281, 1319, 428, 12543, 293, 291, 643, 281, 352, 544, 2674, 13, 50624, 50624, 407, 2602, 295, 445, 8568, 337, 6915, 11, 718, 311, 584, 291, 362, 281, 519, 466, 437, 33270, 1719, 775, 428, 2445, 11, 437, 33270, 1719, 1797, 337, 428, 2445, 30, 51396, 51396, 3013, 7221, 1797, 337, 309, 30, 51468, 51468, 865, 11, 597, 7221, 30, 51552, 51552, 708, 307, 1009, 2074, 11, 558, 30, 51644, 51644, 883, 1871, 437, 4846, 307, 516, 281, 312, 456, 13, 51760, 51760], "temperature": 0.0, "avg_logprob": -0.1433544597406497, "compression_ratio": 1.661764705882353, "no_caption_prob": 6.437955107685411e-06}, {"id": 53, "seek": 38136, "start": 405.12, "end": 406.96000000000004, "text": " What is always true, right?", "tokens": [50364, 509, 643, 281, 1319, 428, 12543, 293, 291, 643, 281, 352, 544, 2674, 13, 50624, 50624, 407, 2602, 295, 445, 8568, 337, 6915, 11, 718, 311, 584, 291, 362, 281, 519, 466, 437, 33270, 1719, 775, 428, 2445, 11, 437, 33270, 1719, 1797, 337, 428, 2445, 30, 51396, 51396, 3013, 7221, 1797, 337, 309, 30, 51468, 51468, 865, 11, 597, 7221, 30, 51552, 51552, 708, 307, 1009, 2074, 11, 558, 30, 51644, 51644, 883, 1871, 437, 4846, 307, 516, 281, 312, 456, 13, 51760, 51760], "temperature": 0.0, "avg_logprob": -0.1433544597406497, "compression_ratio": 1.661764705882353, "no_caption_prob": 6.437955107685411e-06}, {"id": 54, "seek": 38136, "start": 406.96000000000004, "end": 409.28000000000003, "text": " No matter what input is going to be there.", "tokens": [50364, 509, 643, 281, 1319, 428, 12543, 293, 291, 643, 281, 352, 544, 2674, 13, 50624, 50624, 407, 2602, 295, 445, 8568, 337, 6915, 11, 718, 311, 584, 291, 362, 281, 519, 466, 437, 33270, 1719, 775, 428, 2445, 11, 437, 33270, 1719, 1797, 337, 428, 2445, 30, 51396, 51396, 3013, 7221, 1797, 337, 309, 30, 51468, 51468, 865, 11, 597, 7221, 30, 51552, 51552, 708, 307, 1009, 2074, 11, 558, 30, 51644, 51644, 883, 1871, 437, 4846, 307, 516, 281, 312, 456, 13, 51760, 51760], "temperature": 0.0, "avg_logprob": -0.1433544597406497, "compression_ratio": 1.661764705882353, "no_caption_prob": 6.437955107685411e-06}, {"id": 55, "seek": 40928, "start": 409.28, "end": 424.79999999999995, "text": " And so suddenly, let's say if I, this is really like insultingly stupid example, but for the add function, you would want to check that a plus b is the same as b plus a.", "tokens": [50364, 400, 370, 5800, 11, 718, 311, 584, 498, 286, 11, 341, 307, 534, 411, 44463, 356, 6631, 1365, 11, 457, 337, 264, 909, 2445, 11, 291, 576, 528, 281, 1520, 300, 257, 1804, 272, 307, 264, 912, 382, 272, 1804, 257, 13, 51140, 51140, 509, 576, 528, 281, 1520, 300, 4018, 1804, 1340, 6915, 300, 746, 11, 558, 30, 51372, 51372, 663, 291, 2729, 309, 13, 51428, 51428, 400, 370, 456, 366, 613, 411, 6064, 11, 18894, 6064, 300, 291, 362, 337, 4500, 300, 291, 393, 1520, 365, 4974, 41674, 13, 51808, 51808], "temperature": 0.0, "avg_logprob": -0.09990105879934211, "compression_ratio": 1.6594827586206897, "no_caption_prob": 7.409458703477867e-06}, {"id": 56, "seek": 40928, "start": 424.79999999999995, "end": 429.44, "text": " You would want to check that zero plus anything equals that something, right?", "tokens": [50364, 400, 370, 5800, 11, 718, 311, 584, 498, 286, 11, 341, 307, 534, 411, 44463, 356, 6631, 1365, 11, 457, 337, 264, 909, 2445, 11, 291, 576, 528, 281, 1520, 300, 257, 1804, 272, 307, 264, 912, 382, 272, 1804, 257, 13, 51140, 51140, 509, 576, 528, 281, 1520, 300, 4018, 1804, 1340, 6915, 300, 746, 11, 558, 30, 51372, 51372, 663, 291, 2729, 309, 13, 51428, 51428, 400, 370, 456, 366, 613, 411, 6064, 11, 18894, 6064, 300, 291, 362, 337, 4500, 300, 291, 393, 1520, 365, 4974, 41674, 13, 51808, 51808], "temperature": 0.0, "avg_logprob": -0.09990105879934211, "compression_ratio": 1.6594827586206897, "no_caption_prob": 7.409458703477867e-06}, {"id": 57, "seek": 40928, "start": 429.44, "end": 430.55999999999995, "text": " That you gave it.", "tokens": [50364, 400, 370, 5800, 11, 718, 311, 584, 498, 286, 11, 341, 307, 534, 411, 44463, 356, 6631, 1365, 11, 457, 337, 264, 909, 2445, 11, 291, 576, 528, 281, 1520, 300, 257, 1804, 272, 307, 264, 912, 382, 272, 1804, 257, 13, 51140, 51140, 509, 576, 528, 281, 1520, 300, 4018, 1804, 1340, 6915, 300, 746, 11, 558, 30, 51372, 51372, 663, 291, 2729, 309, 13, 51428, 51428, 400, 370, 456, 366, 613, 411, 6064, 11, 18894, 6064, 300, 291, 362, 337, 4500, 300, 291, 393, 1520, 365, 4974, 41674, 13, 51808, 51808], "temperature": 0.0, "avg_logprob": -0.09990105879934211, "compression_ratio": 1.6594827586206897, "no_caption_prob": 7.409458703477867e-06}, {"id": 58, "seek": 40928, "start": 430.55999999999995, "end": 438.15999999999997, "text": " And so there are these like laws, mathematical laws that you have for addition that you can check with random integers.", "tokens": [50364, 400, 370, 5800, 11, 718, 311, 584, 498, 286, 11, 341, 307, 534, 411, 44463, 356, 6631, 1365, 11, 457, 337, 264, 909, 2445, 11, 291, 576, 528, 281, 1520, 300, 257, 1804, 272, 307, 264, 912, 382, 272, 1804, 257, 13, 51140, 51140, 509, 576, 528, 281, 1520, 300, 4018, 1804, 1340, 6915, 300, 746, 11, 558, 30, 51372, 51372, 663, 291, 2729, 309, 13, 51428, 51428, 400, 370, 456, 366, 613, 411, 6064, 11, 18894, 6064, 300, 291, 362, 337, 4500, 300, 291, 393, 1520, 365, 4974, 41674, 13, 51808, 51808], "temperature": 0.0, "avg_logprob": -0.09990105879934211, "compression_ratio": 1.6594827586206897, "no_caption_prob": 7.409458703477867e-06}, {"id": 59, "seek": 43816, "start": 438.16, "end": 445.84000000000003, "text": " And in a similar vein, there are different other properties that you can check for.", "tokens": [50364, 400, 294, 257, 2531, 30669, 11, 456, 366, 819, 661, 7221, 300, 291, 393, 1520, 337, 13, 50748, 50748, 961, 311, 584, 31828, 2058, 378, 433, 293, 979, 378, 433, 11, 436, 366, 1184, 661, 311, 21378, 279, 13, 51004, 51004, 407, 291, 393, 360, 300, 733, 295, 3098, 4931, 689, 291, 8460, 264, 2158, 11, 2058, 1429, 309, 11, 979, 1429, 309, 293, 1520, 300, 307, 264, 912, 11, 558, 30, 51316, 51316, 663, 291, 994, 380, 3624, 604, 733, 295, 1412, 13, 51428, 51428, 400, 370, 456, 311, 257, 688, 295, 613, 7221, 300, 291, 393, 1520, 11, 457, 309, 311, 2138, 5513, 294, 428, 12543, 13, 51804, 51804], "temperature": 0.0, "avg_logprob": -0.08827244918958276, "compression_ratio": 1.728395061728395, "no_caption_prob": 4.2223564378218725e-06}, {"id": 60, "seek": 43816, "start": 445.84000000000003, "end": 450.96000000000004, "text": " Let's say JSON encoders and decoders, they are each other's inverses.", "tokens": [50364, 400, 294, 257, 2531, 30669, 11, 456, 366, 819, 661, 7221, 300, 291, 393, 1520, 337, 13, 50748, 50748, 961, 311, 584, 31828, 2058, 378, 433, 293, 979, 378, 433, 11, 436, 366, 1184, 661, 311, 21378, 279, 13, 51004, 51004, 407, 291, 393, 360, 300, 733, 295, 3098, 4931, 689, 291, 8460, 264, 2158, 11, 2058, 1429, 309, 11, 979, 1429, 309, 293, 1520, 300, 307, 264, 912, 11, 558, 30, 51316, 51316, 663, 291, 994, 380, 3624, 604, 733, 295, 1412, 13, 51428, 51428, 400, 370, 456, 311, 257, 688, 295, 613, 7221, 300, 291, 393, 1520, 11, 457, 309, 311, 2138, 5513, 294, 428, 12543, 13, 51804, 51804], "temperature": 0.0, "avg_logprob": -0.08827244918958276, "compression_ratio": 1.728395061728395, "no_caption_prob": 4.2223564378218725e-06}, {"id": 61, "seek": 43816, "start": 450.96000000000004, "end": 457.20000000000005, "text": " So you can do that kind of round trip where you generate the value, encode it, decode it and check that is the same, right?", "tokens": [50364, 400, 294, 257, 2531, 30669, 11, 456, 366, 819, 661, 7221, 300, 291, 393, 1520, 337, 13, 50748, 50748, 961, 311, 584, 31828, 2058, 378, 433, 293, 979, 378, 433, 11, 436, 366, 1184, 661, 311, 21378, 279, 13, 51004, 51004, 407, 291, 393, 360, 300, 733, 295, 3098, 4931, 689, 291, 8460, 264, 2158, 11, 2058, 1429, 309, 11, 979, 1429, 309, 293, 1520, 300, 307, 264, 912, 11, 558, 30, 51316, 51316, 663, 291, 994, 380, 3624, 604, 733, 295, 1412, 13, 51428, 51428, 400, 370, 456, 311, 257, 688, 295, 613, 7221, 300, 291, 393, 1520, 11, 457, 309, 311, 2138, 5513, 294, 428, 12543, 13, 51804, 51804], "temperature": 0.0, "avg_logprob": -0.08827244918958276, "compression_ratio": 1.728395061728395, "no_caption_prob": 4.2223564378218725e-06}, {"id": 62, "seek": 43816, "start": 457.20000000000005, "end": 459.44000000000005, "text": " That you didn't lose any kind of data.", "tokens": [50364, 400, 294, 257, 2531, 30669, 11, 456, 366, 819, 661, 7221, 300, 291, 393, 1520, 337, 13, 50748, 50748, 961, 311, 584, 31828, 2058, 378, 433, 293, 979, 378, 433, 11, 436, 366, 1184, 661, 311, 21378, 279, 13, 51004, 51004, 407, 291, 393, 360, 300, 733, 295, 3098, 4931, 689, 291, 8460, 264, 2158, 11, 2058, 1429, 309, 11, 979, 1429, 309, 293, 1520, 300, 307, 264, 912, 11, 558, 30, 51316, 51316, 663, 291, 994, 380, 3624, 604, 733, 295, 1412, 13, 51428, 51428, 400, 370, 456, 311, 257, 688, 295, 613, 7221, 300, 291, 393, 1520, 11, 457, 309, 311, 2138, 5513, 294, 428, 12543, 13, 51804, 51804], "temperature": 0.0, "avg_logprob": -0.08827244918958276, "compression_ratio": 1.728395061728395, "no_caption_prob": 4.2223564378218725e-06}, {"id": 63, "seek": 43816, "start": 459.44000000000005, "end": 466.96000000000004, "text": " And so there's a lot of these properties that you can check, but it's definitely shift in your mindset.", "tokens": [50364, 400, 294, 257, 2531, 30669, 11, 456, 366, 819, 661, 7221, 300, 291, 393, 1520, 337, 13, 50748, 50748, 961, 311, 584, 31828, 2058, 378, 433, 293, 979, 378, 433, 11, 436, 366, 1184, 661, 311, 21378, 279, 13, 51004, 51004, 407, 291, 393, 360, 300, 733, 295, 3098, 4931, 689, 291, 8460, 264, 2158, 11, 2058, 1429, 309, 11, 979, 1429, 309, 293, 1520, 300, 307, 264, 912, 11, 558, 30, 51316, 51316, 663, 291, 994, 380, 3624, 604, 733, 295, 1412, 13, 51428, 51428, 400, 370, 456, 311, 257, 688, 295, 613, 7221, 300, 291, 393, 1520, 11, 457, 309, 311, 2138, 5513, 294, 428, 12543, 13, 51804, 51804], "temperature": 0.0, "avg_logprob": -0.08827244918958276, "compression_ratio": 1.728395061728395, "no_caption_prob": 4.2223564378218725e-06}, {"id": 64, "seek": 46696, "start": 466.96, "end": 472.08, "text": " So it may not come to you as easily as just writing unit tests.", "tokens": [50364, 407, 309, 815, 406, 808, 281, 291, 382, 3612, 382, 445, 3579, 4985, 6921, 13, 50620, 50620, 865, 11, 2138, 13, 50656, 50656, 467, 2138, 2544, 411, 257, 819, 20993, 570, 341, 1500, 9555, 3250, 3109, 307, 370, 2361, 322, 411, 7592, 309, 4288, 291, 652, 309, 11, 1152, 17720, 746, 13, 51172, 51172, 509, 458, 11, 291, 584, 286, 2066, 11, 291, 458, 11, 341, 2445, 281, 10432, 3166, 295, 257, 12905, 3100, 13, 51576, 51576], "temperature": 0.0, "avg_logprob": -0.12095598631267306, "compression_ratio": 1.5233644859813085, "no_caption_prob": 8.911149961932097e-06}, {"id": 65, "seek": 46696, "start": 472.08, "end": 472.79999999999995, "text": " Yeah, definitely.", "tokens": [50364, 407, 309, 815, 406, 808, 281, 291, 382, 3612, 382, 445, 3579, 4985, 6921, 13, 50620, 50620, 865, 11, 2138, 13, 50656, 50656, 467, 2138, 2544, 411, 257, 819, 20993, 570, 341, 1500, 9555, 3250, 3109, 307, 370, 2361, 322, 411, 7592, 309, 4288, 291, 652, 309, 11, 1152, 17720, 746, 13, 51172, 51172, 509, 458, 11, 291, 584, 286, 2066, 11, 291, 458, 11, 341, 2445, 281, 10432, 3166, 295, 257, 12905, 3100, 13, 51576, 51576], "temperature": 0.0, "avg_logprob": -0.12095598631267306, "compression_ratio": 1.5233644859813085, "no_caption_prob": 8.911149961932097e-06}, {"id": 66, "seek": 46696, "start": 472.79999999999995, "end": 483.12, "text": " It definitely seems like a different workflow because this test driven development approach is so based on like fake it till you make it, hard coding something.", "tokens": [50364, 407, 309, 815, 406, 808, 281, 291, 382, 3612, 382, 445, 3579, 4985, 6921, 13, 50620, 50620, 865, 11, 2138, 13, 50656, 50656, 467, 2138, 2544, 411, 257, 819, 20993, 570, 341, 1500, 9555, 3250, 3109, 307, 370, 2361, 322, 411, 7592, 309, 4288, 291, 652, 309, 11, 1152, 17720, 746, 13, 51172, 51172, 509, 458, 11, 291, 584, 286, 2066, 11, 291, 458, 11, 341, 2445, 281, 10432, 3166, 295, 257, 12905, 3100, 13, 51576, 51576], "temperature": 0.0, "avg_logprob": -0.12095598631267306, "compression_ratio": 1.5233644859813085, "no_caption_prob": 8.911149961932097e-06}, {"id": 67, "seek": 46696, "start": 483.12, "end": 491.2, "text": " You know, you say I expect, you know, this function to combine parts of a URL path.", "tokens": [50364, 407, 309, 815, 406, 808, 281, 291, 382, 3612, 382, 445, 3579, 4985, 6921, 13, 50620, 50620, 865, 11, 2138, 13, 50656, 50656, 467, 2138, 2544, 411, 257, 819, 20993, 570, 341, 1500, 9555, 3250, 3109, 307, 370, 2361, 322, 411, 7592, 309, 4288, 291, 652, 309, 11, 1152, 17720, 746, 13, 51172, 51172, 509, 458, 11, 291, 584, 286, 2066, 11, 291, 458, 11, 341, 2445, 281, 10432, 3166, 295, 257, 12905, 3100, 13, 51576, 51576], "temperature": 0.0, "avg_logprob": -0.12095598631267306, "compression_ratio": 1.5233644859813085, "no_caption_prob": 8.911149961932097e-06}, {"id": 68, "seek": 49120, "start": 491.2, "end": 498.08, "text": " And when I have this input, this is the output and then you hard code the function to return that output.", "tokens": [50364, 400, 562, 286, 362, 341, 4846, 11, 341, 307, 264, 5598, 293, 550, 291, 1152, 3089, 264, 2445, 281, 2736, 300, 5598, 13, 50708, 50708, 400, 586, 309, 311, 3092, 13, 50756, 50756, 400, 550, 291, 291, 352, 1389, 538, 1389, 365, 365, 2685, 9859, 1152, 34874, 3331, 11, 1152, 17720, 3755, 295, 309, 666, 264, 11420, 13, 51228, 51228, 663, 311, 411, 264, 314, 20818, 11, 264, 7230, 314, 20818, 3109, 13, 51424, 51424, 407, 577, 775, 309, 1319, 264, 20993, 498, 291, 434, 884, 411, 314, 20818, 365, 283, 3334, 8781, 30, 51760, 51760], "temperature": 0.0, "avg_logprob": -0.08825519133587273, "compression_ratio": 1.644736842105263, "no_caption_prob": 8.61344306031242e-05}, {"id": 69, "seek": 49120, "start": 498.08, "end": 499.03999999999996, "text": " And now it's green.", "tokens": [50364, 400, 562, 286, 362, 341, 4846, 11, 341, 307, 264, 5598, 293, 550, 291, 1152, 3089, 264, 2445, 281, 2736, 300, 5598, 13, 50708, 50708, 400, 586, 309, 311, 3092, 13, 50756, 50756, 400, 550, 291, 291, 352, 1389, 538, 1389, 365, 365, 2685, 9859, 1152, 34874, 3331, 11, 1152, 17720, 3755, 295, 309, 666, 264, 11420, 13, 51228, 51228, 663, 311, 411, 264, 314, 20818, 11, 264, 7230, 314, 20818, 3109, 13, 51424, 51424, 407, 577, 775, 309, 1319, 264, 20993, 498, 291, 434, 884, 411, 314, 20818, 365, 283, 3334, 8781, 30, 51760, 51760], "temperature": 0.0, "avg_logprob": -0.08825519133587273, "compression_ratio": 1.644736842105263, "no_caption_prob": 8.61344306031242e-05}, {"id": 70, "seek": 49120, "start": 499.03999999999996, "end": 508.48, "text": " And then you you go case by case with with specific concrete hard coded cases, hard coding pieces of it into the implementation.", "tokens": [50364, 400, 562, 286, 362, 341, 4846, 11, 341, 307, 264, 5598, 293, 550, 291, 1152, 3089, 264, 2445, 281, 2736, 300, 5598, 13, 50708, 50708, 400, 586, 309, 311, 3092, 13, 50756, 50756, 400, 550, 291, 291, 352, 1389, 538, 1389, 365, 365, 2685, 9859, 1152, 34874, 3331, 11, 1152, 17720, 3755, 295, 309, 666, 264, 11420, 13, 51228, 51228, 663, 311, 411, 264, 314, 20818, 11, 264, 7230, 314, 20818, 3109, 13, 51424, 51424, 407, 577, 775, 309, 1319, 264, 20993, 498, 291, 434, 884, 411, 314, 20818, 365, 283, 3334, 8781, 30, 51760, 51760], "temperature": 0.0, "avg_logprob": -0.08825519133587273, "compression_ratio": 1.644736842105263, "no_caption_prob": 8.61344306031242e-05}, {"id": 71, "seek": 49120, "start": 508.48, "end": 512.4, "text": " That's like the TDD, the classic TDD approach.", "tokens": [50364, 400, 562, 286, 362, 341, 4846, 11, 341, 307, 264, 5598, 293, 550, 291, 1152, 3089, 264, 2445, 281, 2736, 300, 5598, 13, 50708, 50708, 400, 586, 309, 311, 3092, 13, 50756, 50756, 400, 550, 291, 291, 352, 1389, 538, 1389, 365, 365, 2685, 9859, 1152, 34874, 3331, 11, 1152, 17720, 3755, 295, 309, 666, 264, 11420, 13, 51228, 51228, 663, 311, 411, 264, 314, 20818, 11, 264, 7230, 314, 20818, 3109, 13, 51424, 51424, 407, 577, 775, 309, 1319, 264, 20993, 498, 291, 434, 884, 411, 314, 20818, 365, 283, 3334, 8781, 30, 51760, 51760], "temperature": 0.0, "avg_logprob": -0.08825519133587273, "compression_ratio": 1.644736842105263, "no_caption_prob": 8.61344306031242e-05}, {"id": 72, "seek": 49120, "start": 512.4, "end": 519.12, "text": " So how does it change the workflow if you're doing like TDD with fuzzing?", "tokens": [50364, 400, 562, 286, 362, 341, 4846, 11, 341, 307, 264, 5598, 293, 550, 291, 1152, 3089, 264, 2445, 281, 2736, 300, 5598, 13, 50708, 50708, 400, 586, 309, 311, 3092, 13, 50756, 50756, 400, 550, 291, 291, 352, 1389, 538, 1389, 365, 365, 2685, 9859, 1152, 34874, 3331, 11, 1152, 17720, 3755, 295, 309, 666, 264, 11420, 13, 51228, 51228, 663, 311, 411, 264, 314, 20818, 11, 264, 7230, 314, 20818, 3109, 13, 51424, 51424, 407, 577, 775, 309, 1319, 264, 20993, 498, 291, 434, 884, 411, 314, 20818, 365, 283, 3334, 8781, 30, 51760, 51760], "temperature": 0.0, "avg_logprob": -0.08825519133587273, "compression_ratio": 1.644736842105263, "no_caption_prob": 8.61344306031242e-05}, {"id": 73, "seek": 51912, "start": 519.12, "end": 521.36, "text": " Or is it just a separate workflow?", "tokens": [50364, 1610, 307, 309, 445, 257, 4994, 20993, 30, 50476, 50476, 1779, 13, 50552, 50552, 286, 478, 406, 534, 988, 2059, 498, 309, 311, 920, 314, 20818, 570, 294, 428, 1365, 11, 382, 291, 848, 11, 291, 1152, 3089, 264, 5598, 666, 264, 11420, 570, 300, 311, 264, 12889, 636, 281, 483, 264, 1500, 3092, 13, 51284, 51284, 1779, 13, 51316, 51316, 400, 550, 291, 362, 1045, 295, 729, 5110, 293, 309, 445, 3643, 411, 498, 341, 550, 300, 11, 498, 341, 293, 300, 1646, 307, 341, 2636, 1867, 13, 51680, 51680, 400, 309, 727, 352, 36227, 938, 13, 51816, 51816], "temperature": 0.0, "avg_logprob": -0.1754312702253753, "compression_ratio": 1.6337448559670782, "no_caption_prob": 1.045038879965432e-05}, {"id": 74, "seek": 51912, "start": 521.36, "end": 522.88, "text": " Right.", "tokens": [50364, 1610, 307, 309, 445, 257, 4994, 20993, 30, 50476, 50476, 1779, 13, 50552, 50552, 286, 478, 406, 534, 988, 2059, 498, 309, 311, 920, 314, 20818, 570, 294, 428, 1365, 11, 382, 291, 848, 11, 291, 1152, 3089, 264, 5598, 666, 264, 11420, 570, 300, 311, 264, 12889, 636, 281, 483, 264, 1500, 3092, 13, 51284, 51284, 1779, 13, 51316, 51316, 400, 550, 291, 362, 1045, 295, 729, 5110, 293, 309, 445, 3643, 411, 498, 341, 550, 300, 11, 498, 341, 293, 300, 1646, 307, 341, 2636, 1867, 13, 51680, 51680, 400, 309, 727, 352, 36227, 938, 13, 51816, 51816], "temperature": 0.0, "avg_logprob": -0.1754312702253753, "compression_ratio": 1.6337448559670782, "no_caption_prob": 1.045038879965432e-05}, {"id": 75, "seek": 51912, "start": 522.88, "end": 537.52, "text": " I'm not really sure myself if it's still TDD because in your example, as you said, you hard code the output into the implementation because that's the easiest way to get the test green.", "tokens": [50364, 1610, 307, 309, 445, 257, 4994, 20993, 30, 50476, 50476, 1779, 13, 50552, 50552, 286, 478, 406, 534, 988, 2059, 498, 309, 311, 920, 314, 20818, 570, 294, 428, 1365, 11, 382, 291, 848, 11, 291, 1152, 3089, 264, 5598, 666, 264, 11420, 570, 300, 311, 264, 12889, 636, 281, 483, 264, 1500, 3092, 13, 51284, 51284, 1779, 13, 51316, 51316, 400, 550, 291, 362, 1045, 295, 729, 5110, 293, 309, 445, 3643, 411, 498, 341, 550, 300, 11, 498, 341, 293, 300, 1646, 307, 341, 2636, 1867, 13, 51680, 51680, 400, 309, 727, 352, 36227, 938, 13, 51816, 51816], "temperature": 0.0, "avg_logprob": -0.1754312702253753, "compression_ratio": 1.6337448559670782, "no_caption_prob": 1.045038879965432e-05}, {"id": 76, "seek": 51912, "start": 537.52, "end": 538.16, "text": " Right.", "tokens": [50364, 1610, 307, 309, 445, 257, 4994, 20993, 30, 50476, 50476, 1779, 13, 50552, 50552, 286, 478, 406, 534, 988, 2059, 498, 309, 311, 920, 314, 20818, 570, 294, 428, 1365, 11, 382, 291, 848, 11, 291, 1152, 3089, 264, 5598, 666, 264, 11420, 570, 300, 311, 264, 12889, 636, 281, 483, 264, 1500, 3092, 13, 51284, 51284, 1779, 13, 51316, 51316, 400, 550, 291, 362, 1045, 295, 729, 5110, 293, 309, 445, 3643, 411, 498, 341, 550, 300, 11, 498, 341, 293, 300, 1646, 307, 341, 2636, 1867, 13, 51680, 51680, 400, 309, 727, 352, 36227, 938, 13, 51816, 51816], "temperature": 0.0, "avg_logprob": -0.1754312702253753, "compression_ratio": 1.6337448559670782, "no_caption_prob": 1.045038879965432e-05}, {"id": 77, "seek": 51912, "start": 538.16, "end": 545.44, "text": " And then you have three of those examples and it just becomes like if this then that, if this and that else is this third answer.", "tokens": [50364, 1610, 307, 309, 445, 257, 4994, 20993, 30, 50476, 50476, 1779, 13, 50552, 50552, 286, 478, 406, 534, 988, 2059, 498, 309, 311, 920, 314, 20818, 570, 294, 428, 1365, 11, 382, 291, 848, 11, 291, 1152, 3089, 264, 5598, 666, 264, 11420, 570, 300, 311, 264, 12889, 636, 281, 483, 264, 1500, 3092, 13, 51284, 51284, 1779, 13, 51316, 51316, 400, 550, 291, 362, 1045, 295, 729, 5110, 293, 309, 445, 3643, 411, 498, 341, 550, 300, 11, 498, 341, 293, 300, 1646, 307, 341, 2636, 1867, 13, 51680, 51680, 400, 309, 727, 352, 36227, 938, 13, 51816, 51816], "temperature": 0.0, "avg_logprob": -0.1754312702253753, "compression_ratio": 1.6337448559670782, "no_caption_prob": 1.045038879965432e-05}, {"id": 78, "seek": 51912, "start": 545.44, "end": 548.16, "text": " And it could go infinitely long.", "tokens": [50364, 1610, 307, 309, 445, 257, 4994, 20993, 30, 50476, 50476, 1779, 13, 50552, 50552, 286, 478, 406, 534, 988, 2059, 498, 309, 311, 920, 314, 20818, 570, 294, 428, 1365, 11, 382, 291, 848, 11, 291, 1152, 3089, 264, 5598, 666, 264, 11420, 570, 300, 311, 264, 12889, 636, 281, 483, 264, 1500, 3092, 13, 51284, 51284, 1779, 13, 51316, 51316, 400, 550, 291, 362, 1045, 295, 729, 5110, 293, 309, 445, 3643, 411, 498, 341, 550, 300, 11, 498, 341, 293, 300, 1646, 307, 341, 2636, 1867, 13, 51680, 51680, 400, 309, 727, 352, 36227, 938, 13, 51816, 51816], "temperature": 0.0, "avg_logprob": -0.1754312702253753, "compression_ratio": 1.6337448559670782, "no_caption_prob": 1.045038879965432e-05}, {"id": 79, "seek": 54816, "start": 548.16, "end": 558.56, "text": " Right. You could have like 20 inputs in your test and then you make like switch with 20 cases in the implementation.", "tokens": [50364, 1779, 13, 509, 727, 362, 411, 945, 15743, 294, 428, 1500, 293, 550, 291, 652, 411, 3679, 365, 945, 3331, 294, 264, 11420, 13, 50884, 50884, 400, 300, 311, 406, 437, 291, 528, 13, 50936, 50936, 1779, 13, 407, 456, 2203, 281, 312, 257, 1623, 689, 291, 3679, 293, 584, 11, 2264, 11, 309, 311, 767, 3571, 281, 360, 264, 558, 551, 13, 51308, 51308, 1779, 13, 400, 360, 264, 3539, 11420, 13, 51412, 51412], "temperature": 0.0, "avg_logprob": -0.13975786233877208, "compression_ratio": 1.6195652173913044, "no_caption_prob": 1.2400665582390502e-05}, {"id": 80, "seek": 54816, "start": 558.56, "end": 559.6, "text": " And that's not what you want.", "tokens": [50364, 1779, 13, 509, 727, 362, 411, 945, 15743, 294, 428, 1500, 293, 550, 291, 652, 411, 3679, 365, 945, 3331, 294, 264, 11420, 13, 50884, 50884, 400, 300, 311, 406, 437, 291, 528, 13, 50936, 50936, 1779, 13, 407, 456, 2203, 281, 312, 257, 1623, 689, 291, 3679, 293, 584, 11, 2264, 11, 309, 311, 767, 3571, 281, 360, 264, 558, 551, 13, 51308, 51308, 1779, 13, 400, 360, 264, 3539, 11420, 13, 51412, 51412], "temperature": 0.0, "avg_logprob": -0.13975786233877208, "compression_ratio": 1.6195652173913044, "no_caption_prob": 1.2400665582390502e-05}, {"id": 81, "seek": 54816, "start": 559.6, "end": 567.04, "text": " Right. So there needs to be a moment where you switch and say, OK, it's actually easier to do the right thing.", "tokens": [50364, 1779, 13, 509, 727, 362, 411, 945, 15743, 294, 428, 1500, 293, 550, 291, 652, 411, 3679, 365, 945, 3331, 294, 264, 11420, 13, 50884, 50884, 400, 300, 311, 406, 437, 291, 528, 13, 50936, 50936, 1779, 13, 407, 456, 2203, 281, 312, 257, 1623, 689, 291, 3679, 293, 584, 11, 2264, 11, 309, 311, 767, 3571, 281, 360, 264, 558, 551, 13, 51308, 51308, 1779, 13, 400, 360, 264, 3539, 11420, 13, 51412, 51412], "temperature": 0.0, "avg_logprob": -0.13975786233877208, "compression_ratio": 1.6195652173913044, "no_caption_prob": 1.2400665582390502e-05}, {"id": 82, "seek": 54816, "start": 567.04, "end": 569.12, "text": " Right. And do the actual implementation.", "tokens": [50364, 1779, 13, 509, 727, 362, 411, 945, 15743, 294, 428, 1500, 293, 550, 291, 652, 411, 3679, 365, 945, 3331, 294, 264, 11420, 13, 50884, 50884, 400, 300, 311, 406, 437, 291, 528, 13, 50936, 50936, 1779, 13, 407, 456, 2203, 281, 312, 257, 1623, 689, 291, 3679, 293, 584, 11, 2264, 11, 309, 311, 767, 3571, 281, 360, 264, 558, 551, 13, 51308, 51308, 1779, 13, 400, 360, 264, 3539, 11420, 13, 51412, 51412], "temperature": 0.0, "avg_logprob": -0.13975786233877208, "compression_ratio": 1.6195652173913044, "no_caption_prob": 1.2400665582390502e-05}, {"id": 83, "seek": 56912, "start": 569.12, "end": 579.84, "text": " And I feel like when you add the fuzz tests into the mix, if you say, let's say, let's say A plus B equals B plus A.", "tokens": [50364, 400, 286, 841, 411, 562, 291, 909, 264, 283, 16740, 6921, 666, 264, 2890, 11, 498, 291, 584, 11, 718, 311, 584, 11, 718, 311, 584, 316, 1804, 363, 6915, 363, 1804, 316, 13, 50900, 50900, 400, 718, 311, 584, 264, 4180, 30142, 2101, 11, 411, 316, 1804, 363, 1804, 383, 294, 23350, 9374, 6915, 316, 1804, 363, 294, 23350, 9374, 1804, 383, 293, 370, 322, 13, 51452, 51452], "temperature": 0.0, "avg_logprob": -0.13108802849138287, "compression_ratio": 1.6879432624113475, "no_caption_prob": 1.696069557510782e-05}, {"id": 84, "seek": 56912, "start": 579.84, "end": 590.88, "text": " And let's say the associativity law, like A plus B plus C in parenthesis equals A plus B in parenthesis plus C and so on.", "tokens": [50364, 400, 286, 841, 411, 562, 291, 909, 264, 283, 16740, 6921, 666, 264, 2890, 11, 498, 291, 584, 11, 718, 311, 584, 11, 718, 311, 584, 316, 1804, 363, 6915, 363, 1804, 316, 13, 50900, 50900, 400, 718, 311, 584, 264, 4180, 30142, 2101, 11, 411, 316, 1804, 363, 1804, 383, 294, 23350, 9374, 6915, 316, 1804, 363, 294, 23350, 9374, 1804, 383, 293, 370, 322, 13, 51452, 51452], "temperature": 0.0, "avg_logprob": -0.13108802849138287, "compression_ratio": 1.6879432624113475, "no_caption_prob": 1.696069557510782e-05}, {"id": 85, "seek": 59088, "start": 590.88, "end": 599.28, "text": " If you add all of these laws, you kind of define how the implementation should behave.", "tokens": [50364, 759, 291, 909, 439, 295, 613, 6064, 11, 291, 733, 295, 6964, 577, 264, 11420, 820, 15158, 13, 50784, 50784, 400, 5800, 11, 570, 264, 6921, 366, 4974, 11, 291, 362, 572, 636, 295, 5145, 300, 3679, 5629, 420, 411, 264, 1389, 295, 5629, 294, 1389, 295, 441, 13, 51256, 51256, 1779, 13, 509, 362, 572, 636, 295, 5145, 300, 11420, 570, 264, 4190, 11, 264, 15743, 366, 516, 281, 312, 4974, 1184, 565, 13, 51668, 51668], "temperature": 0.0, "avg_logprob": -0.09964315197135828, "compression_ratio": 1.7538461538461538, "no_caption_prob": 3.23741664942645e-06}, {"id": 86, "seek": 59088, "start": 599.28, "end": 608.72, "text": " And suddenly, because the tests are random, you have no way of keeping that switch statement or like the case of statement in case of L.", "tokens": [50364, 759, 291, 909, 439, 295, 613, 6064, 11, 291, 733, 295, 6964, 577, 264, 11420, 820, 15158, 13, 50784, 50784, 400, 5800, 11, 570, 264, 6921, 366, 4974, 11, 291, 362, 572, 636, 295, 5145, 300, 3679, 5629, 420, 411, 264, 1389, 295, 5629, 294, 1389, 295, 441, 13, 51256, 51256, 1779, 13, 509, 362, 572, 636, 295, 5145, 300, 11420, 570, 264, 4190, 11, 264, 15743, 366, 516, 281, 312, 4974, 1184, 565, 13, 51668, 51668], "temperature": 0.0, "avg_logprob": -0.09964315197135828, "compression_ratio": 1.7538461538461538, "no_caption_prob": 3.23741664942645e-06}, {"id": 87, "seek": 59088, "start": 608.72, "end": 616.96, "text": " Right. You have no way of keeping that implementation because the values, the inputs are going to be random each time.", "tokens": [50364, 759, 291, 909, 439, 295, 613, 6064, 11, 291, 733, 295, 6964, 577, 264, 11420, 820, 15158, 13, 50784, 50784, 400, 5800, 11, 570, 264, 6921, 366, 4974, 11, 291, 362, 572, 636, 295, 5145, 300, 3679, 5629, 420, 411, 264, 1389, 295, 5629, 294, 1389, 295, 441, 13, 51256, 51256, 1779, 13, 509, 362, 572, 636, 295, 5145, 300, 11420, 570, 264, 4190, 11, 264, 15743, 366, 516, 281, 312, 4974, 1184, 565, 13, 51668, 51668], "temperature": 0.0, "avg_logprob": -0.09964315197135828, "compression_ratio": 1.7538461538461538, "no_caption_prob": 3.23741664942645e-06}, {"id": 88, "seek": 61696, "start": 616.96, "end": 625.9200000000001, "text": " And so either you just, you know, you have to give up on that lazy implementation mindset in a way.", "tokens": [50364, 400, 370, 2139, 291, 445, 11, 291, 458, 11, 291, 362, 281, 976, 493, 322, 300, 14847, 11420, 12543, 294, 257, 636, 13, 50812, 50812, 400, 370, 286, 519, 309, 733, 295, 5874, 291, 281, 352, 281, 360, 411, 11, 2264, 11, 718, 311, 718, 311, 360, 264, 3539, 11420, 1823, 13, 51292, 51292, 759, 291, 909, 283, 16740, 6921, 294, 456, 11, 291, 445, 362, 281, 360, 264, 558, 551, 13, 51524, 51524], "temperature": 0.0, "avg_logprob": -0.10213818048176013, "compression_ratio": 1.583815028901734, "no_caption_prob": 6.5399058257753495e-06}, {"id": 89, "seek": 61696, "start": 625.9200000000001, "end": 635.52, "text": " And so I think it kind of forces you to go to do like, OK, let's let's do the actual implementation step.", "tokens": [50364, 400, 370, 2139, 291, 445, 11, 291, 458, 11, 291, 362, 281, 976, 493, 322, 300, 14847, 11420, 12543, 294, 257, 636, 13, 50812, 50812, 400, 370, 286, 519, 309, 733, 295, 5874, 291, 281, 352, 281, 360, 411, 11, 2264, 11, 718, 311, 718, 311, 360, 264, 3539, 11420, 1823, 13, 51292, 51292, 759, 291, 909, 283, 16740, 6921, 294, 456, 11, 291, 445, 362, 281, 360, 264, 558, 551, 13, 51524, 51524], "temperature": 0.0, "avg_logprob": -0.10213818048176013, "compression_ratio": 1.583815028901734, "no_caption_prob": 6.5399058257753495e-06}, {"id": 90, "seek": 61696, "start": 635.52, "end": 640.1600000000001, "text": " If you add fuzz tests in there, you just have to do the right thing.", "tokens": [50364, 400, 370, 2139, 291, 445, 11, 291, 458, 11, 291, 362, 281, 976, 493, 322, 300, 14847, 11420, 12543, 294, 257, 636, 13, 50812, 50812, 400, 370, 286, 519, 309, 733, 295, 5874, 291, 281, 352, 281, 360, 411, 11, 2264, 11, 718, 311, 718, 311, 360, 264, 3539, 11420, 1823, 13, 51292, 51292, 759, 291, 909, 283, 16740, 6921, 294, 456, 11, 291, 445, 362, 281, 360, 264, 558, 551, 13, 51524, 51524], "temperature": 0.0, "avg_logprob": -0.10213818048176013, "compression_ratio": 1.583815028901734, "no_caption_prob": 6.5399058257753495e-06}, {"id": 91, "seek": 64016, "start": 640.16, "end": 650.0, "text": " Do you typically do it in your workflow as like, you know, as you're building the implementation, driving the tests in this TDD style?", "tokens": [50364, 1144, 291, 5850, 360, 309, 294, 428, 20993, 382, 411, 11, 291, 458, 11, 382, 291, 434, 2390, 264, 11420, 11, 4840, 264, 6921, 294, 341, 314, 20818, 3758, 30, 50856, 50856, 1610, 360, 291, 5850, 360, 283, 16740, 4997, 934, 382, 257, 411, 11, 718, 311, 652, 988, 321, 5343, 439, 264, 3331, 30, 51244, 51244, 865, 11, 286, 2673, 360, 452, 6921, 934, 11, 457, 309, 1062, 406, 312, 13, 51560, 51560], "temperature": 0.0, "avg_logprob": -0.11436629295349121, "compression_ratio": 1.532258064516129, "no_caption_prob": 9.758391388459131e-05}, {"id": 92, "seek": 64016, "start": 650.0, "end": 657.76, "text": " Or do you typically do fuzz testing after as a like, let's make sure we covered all the cases?", "tokens": [50364, 1144, 291, 5850, 360, 309, 294, 428, 20993, 382, 411, 11, 291, 458, 11, 382, 291, 434, 2390, 264, 11420, 11, 4840, 264, 6921, 294, 341, 314, 20818, 3758, 30, 50856, 50856, 1610, 360, 291, 5850, 360, 283, 16740, 4997, 934, 382, 257, 411, 11, 718, 311, 652, 988, 321, 5343, 439, 264, 3331, 30, 51244, 51244, 865, 11, 286, 2673, 360, 452, 6921, 934, 11, 457, 309, 1062, 406, 312, 13, 51560, 51560], "temperature": 0.0, "avg_logprob": -0.11436629295349121, "compression_ratio": 1.532258064516129, "no_caption_prob": 9.758391388459131e-05}, {"id": 93, "seek": 64016, "start": 657.76, "end": 664.0799999999999, "text": " Yeah, I usually do my tests after, but it might not be.", "tokens": [50364, 1144, 291, 5850, 360, 309, 294, 428, 20993, 382, 411, 11, 291, 458, 11, 382, 291, 434, 2390, 264, 11420, 11, 4840, 264, 6921, 294, 341, 314, 20818, 3758, 30, 50856, 50856, 1610, 360, 291, 5850, 360, 283, 16740, 4997, 934, 382, 257, 411, 11, 718, 311, 652, 988, 321, 5343, 439, 264, 3331, 30, 51244, 51244, 865, 11, 286, 2673, 360, 452, 6921, 934, 11, 457, 309, 1062, 406, 312, 13, 51560, 51560], "temperature": 0.0, "avg_logprob": -0.11436629295349121, "compression_ratio": 1.532258064516129, "no_caption_prob": 9.758391388459131e-05}, {"id": 94, "seek": 66408, "start": 664.08, "end": 670.48, "text": " It might be just because I am not very principled TDD practitioner.", "tokens": [50364, 467, 1062, 312, 445, 570, 286, 669, 406, 588, 3681, 15551, 314, 20818, 32125, 13, 50684, 50684, 407, 437, 466, 337, 17528, 4985, 6921, 30, 50844, 50844, 1144, 291, 360, 360, 291, 360, 729, 700, 420, 286, 360, 15842, 689, 291, 360, 552, 700, 30, 51132, 51132, 865, 11, 457, 309, 311, 300, 311, 5240, 337, 411, 17856, 295, 15549, 293, 1481, 11, 2199, 5110, 411, 300, 13, 51520, 51520, 865, 11, 1338, 13, 467, 311, 6095, 309, 311, 406, 577, 286, 360, 1507, 412, 589, 13, 51760, 51760], "temperature": 0.0, "avg_logprob": -0.16435492169726026, "compression_ratio": 1.5138888888888888, "no_caption_prob": 4.975610499968752e-05}, {"id": 95, "seek": 66408, "start": 670.48, "end": 673.6800000000001, "text": " So what about for vanilla unit tests?", "tokens": [50364, 467, 1062, 312, 445, 570, 286, 669, 406, 588, 3681, 15551, 314, 20818, 32125, 13, 50684, 50684, 407, 437, 466, 337, 17528, 4985, 6921, 30, 50844, 50844, 1144, 291, 360, 360, 291, 360, 729, 700, 420, 286, 360, 15842, 689, 291, 360, 552, 700, 30, 51132, 51132, 865, 11, 457, 309, 311, 300, 311, 5240, 337, 411, 17856, 295, 15549, 293, 1481, 11, 2199, 5110, 411, 300, 13, 51520, 51520, 865, 11, 1338, 13, 467, 311, 6095, 309, 311, 406, 577, 286, 360, 1507, 412, 589, 13, 51760, 51760], "temperature": 0.0, "avg_logprob": -0.16435492169726026, "compression_ratio": 1.5138888888888888, "no_caption_prob": 4.975610499968752e-05}, {"id": 96, "seek": 66408, "start": 673.6800000000001, "end": 679.44, "text": " Do you do do you do those first or I do streams where you do them first?", "tokens": [50364, 467, 1062, 312, 445, 570, 286, 669, 406, 588, 3681, 15551, 314, 20818, 32125, 13, 50684, 50684, 407, 437, 466, 337, 17528, 4985, 6921, 30, 50844, 50844, 1144, 291, 360, 360, 291, 360, 729, 700, 420, 286, 360, 15842, 689, 291, 360, 552, 700, 30, 51132, 51132, 865, 11, 457, 309, 311, 300, 311, 5240, 337, 411, 17856, 295, 15549, 293, 1481, 11, 2199, 5110, 411, 300, 13, 51520, 51520, 865, 11, 1338, 13, 467, 311, 6095, 309, 311, 406, 577, 286, 360, 1507, 412, 589, 13, 51760, 51760], "temperature": 0.0, "avg_logprob": -0.16435492169726026, "compression_ratio": 1.5138888888888888, "no_caption_prob": 4.975610499968752e-05}, {"id": 97, "seek": 66408, "start": 679.44, "end": 687.2, "text": " Yeah, but it's that's mostly for like Advent of Code and nice, simple examples like that.", "tokens": [50364, 467, 1062, 312, 445, 570, 286, 669, 406, 588, 3681, 15551, 314, 20818, 32125, 13, 50684, 50684, 407, 437, 466, 337, 17528, 4985, 6921, 30, 50844, 50844, 1144, 291, 360, 360, 291, 360, 729, 700, 420, 286, 360, 15842, 689, 291, 360, 552, 700, 30, 51132, 51132, 865, 11, 457, 309, 311, 300, 311, 5240, 337, 411, 17856, 295, 15549, 293, 1481, 11, 2199, 5110, 411, 300, 13, 51520, 51520, 865, 11, 1338, 13, 467, 311, 6095, 309, 311, 406, 577, 286, 360, 1507, 412, 589, 13, 51760, 51760], "temperature": 0.0, "avg_logprob": -0.16435492169726026, "compression_ratio": 1.5138888888888888, "no_caption_prob": 4.975610499968752e-05}, {"id": 98, "seek": 66408, "start": 687.2, "end": 692.0, "text": " Yeah, yeah. It's honestly it's not how I do stuff at work.", "tokens": [50364, 467, 1062, 312, 445, 570, 286, 669, 406, 588, 3681, 15551, 314, 20818, 32125, 13, 50684, 50684, 407, 437, 466, 337, 17528, 4985, 6921, 30, 50844, 50844, 1144, 291, 360, 360, 291, 360, 729, 700, 420, 286, 360, 15842, 689, 291, 360, 552, 700, 30, 51132, 51132, 865, 11, 457, 309, 311, 300, 311, 5240, 337, 411, 17856, 295, 15549, 293, 1481, 11, 2199, 5110, 411, 300, 13, 51520, 51520, 865, 11, 1338, 13, 467, 311, 6095, 309, 311, 406, 577, 286, 360, 1507, 412, 589, 13, 51760, 51760], "temperature": 0.0, "avg_logprob": -0.16435492169726026, "compression_ratio": 1.5138888888888888, "no_caption_prob": 4.975610499968752e-05}, {"id": 99, "seek": 69200, "start": 692.0, "end": 696.4, "text": " Yeah, so so far, I don't know if it's really nice because they give you the test cases right away.", "tokens": [50364, 865, 11, 370, 370, 1400, 11, 286, 500, 380, 458, 498, 309, 311, 534, 1481, 570, 436, 976, 291, 264, 1500, 3331, 558, 1314, 13, 50584, 50584, 1779, 13, 407, 309, 311, 309, 311, 1481, 281, 445, 829, 552, 294, 293, 1520, 264, 3006, 1287, 295, 428, 3827, 2440, 13, 50972, 50972, 583, 2673, 286, 669, 406, 370, 3681, 15551, 466, 309, 293, 286, 445, 2464, 452, 11420, 293, 2464, 6921, 10543, 13, 51436, 51436], "temperature": 0.0, "avg_logprob": -0.13372153740424614, "compression_ratio": 1.5075376884422111, "no_caption_prob": 3.318942981422879e-05}, {"id": 100, "seek": 69200, "start": 696.4, "end": 704.16, "text": " Right. So it's it's nice to just put them in and check the correctness of your solution early.", "tokens": [50364, 865, 11, 370, 370, 1400, 11, 286, 500, 380, 458, 498, 309, 311, 534, 1481, 570, 436, 976, 291, 264, 1500, 3331, 558, 1314, 13, 50584, 50584, 1779, 13, 407, 309, 311, 309, 311, 1481, 281, 445, 829, 552, 294, 293, 1520, 264, 3006, 1287, 295, 428, 3827, 2440, 13, 50972, 50972, 583, 2673, 286, 669, 406, 370, 3681, 15551, 466, 309, 293, 286, 445, 2464, 452, 11420, 293, 2464, 6921, 10543, 13, 51436, 51436], "temperature": 0.0, "avg_logprob": -0.13372153740424614, "compression_ratio": 1.5075376884422111, "no_caption_prob": 3.318942981422879e-05}, {"id": 101, "seek": 69200, "start": 704.16, "end": 713.44, "text": " But usually I am not so principled about it and I just write my implementation and write tests afterwards.", "tokens": [50364, 865, 11, 370, 370, 1400, 11, 286, 500, 380, 458, 498, 309, 311, 534, 1481, 570, 436, 976, 291, 264, 1500, 3331, 558, 1314, 13, 50584, 50584, 1779, 13, 407, 309, 311, 309, 311, 1481, 281, 445, 829, 552, 294, 293, 1520, 264, 3006, 1287, 295, 428, 3827, 2440, 13, 50972, 50972, 583, 2673, 286, 669, 406, 370, 3681, 15551, 466, 309, 293, 286, 445, 2464, 452, 11420, 293, 2464, 6921, 10543, 13, 51436, 51436], "temperature": 0.0, "avg_logprob": -0.13372153740424614, "compression_ratio": 1.5075376884422111, "no_caption_prob": 3.318942981422879e-05}, {"id": 102, "seek": 71344, "start": 713.44, "end": 722.1600000000001, "text": " I realize that my code might be much better and cleaner and like more testable if I start with tests.", "tokens": [50364, 286, 4325, 300, 452, 3089, 1062, 312, 709, 1101, 293, 16532, 293, 411, 544, 1500, 712, 498, 286, 722, 365, 6921, 13, 50800, 50800, 407, 300, 311, 746, 286, 853, 281, 360, 13, 583, 754, 337, 4985, 6921, 11, 286, 2673, 360, 552, 934, 13, 51084, 51084, 2264, 11, 286, 536, 13, 286, 2441, 570, 286, 362, 281, 584, 286, 360, 406, 286, 360, 406, 360, 588, 709, 283, 16740, 4997, 13, 51488, 51488], "temperature": 0.0, "avg_logprob": -0.10014288048995168, "compression_ratio": 1.4728260869565217, "no_caption_prob": 2.7529096769285388e-05}, {"id": 103, "seek": 71344, "start": 722.1600000000001, "end": 727.84, "text": " So that's something I try to do. But even for unit tests, I usually do them after.", "tokens": [50364, 286, 4325, 300, 452, 3089, 1062, 312, 709, 1101, 293, 16532, 293, 411, 544, 1500, 712, 498, 286, 722, 365, 6921, 13, 50800, 50800, 407, 300, 311, 746, 286, 853, 281, 360, 13, 583, 754, 337, 4985, 6921, 11, 286, 2673, 360, 552, 934, 13, 51084, 51084, 2264, 11, 286, 536, 13, 286, 2441, 570, 286, 362, 281, 584, 286, 360, 406, 286, 360, 406, 360, 588, 709, 283, 16740, 4997, 13, 51488, 51488], "temperature": 0.0, "avg_logprob": -0.10014288048995168, "compression_ratio": 1.4728260869565217, "no_caption_prob": 2.7529096769285388e-05}, {"id": 104, "seek": 71344, "start": 727.84, "end": 735.9200000000001, "text": " OK, I see. I wonder because I have to say I do not I do not do very much fuzz testing.", "tokens": [50364, 286, 4325, 300, 452, 3089, 1062, 312, 709, 1101, 293, 16532, 293, 411, 544, 1500, 712, 498, 286, 722, 365, 6921, 13, 50800, 50800, 407, 300, 311, 746, 286, 853, 281, 360, 13, 583, 754, 337, 4985, 6921, 11, 286, 2673, 360, 552, 934, 13, 51084, 51084, 2264, 11, 286, 536, 13, 286, 2441, 570, 286, 362, 281, 584, 286, 360, 406, 286, 360, 406, 360, 588, 709, 283, 16740, 4997, 13, 51488, 51488], "temperature": 0.0, "avg_logprob": -0.10014288048995168, "compression_ratio": 1.4728260869565217, "no_caption_prob": 2.7529096769285388e-05}, {"id": 105, "seek": 73592, "start": 735.92, "end": 746.0799999999999, "text": " And but my instinct is that I would probably do fuzz testing after, whereas I like to do", "tokens": [50364, 400, 457, 452, 16556, 307, 300, 286, 576, 1391, 360, 283, 16740, 4997, 934, 11, 9735, 286, 411, 281, 360, 50872, 50908, 3890, 4985, 4997, 11, 4840, 264, 11420, 13, 51104, 51104, 583, 1338, 11, 293, 309, 2544, 281, 312, 264, 3844, 4008, 11, 286, 519, 13, 51312, 51312, 865, 11, 300, 311, 689, 286, 576, 411, 281, 483, 13, 51412, 51412, 865, 11, 286, 519, 286, 576, 360, 264, 912, 13, 467, 611, 733, 295, 3417, 411, 562, 291, 7592, 309, 1826, 291, 652, 309, 11, 51692, 51692], "temperature": 0.0, "avg_logprob": -0.12694530696659298, "compression_ratio": 1.6336633663366336, "no_caption_prob": 1.696308027021587e-05}, {"id": 106, "seek": 73592, "start": 746.8, "end": 750.7199999999999, "text": " regular unit testing, driving the implementation.", "tokens": [50364, 400, 457, 452, 16556, 307, 300, 286, 576, 1391, 360, 283, 16740, 4997, 934, 11, 9735, 286, 411, 281, 360, 50872, 50908, 3890, 4985, 4997, 11, 4840, 264, 11420, 13, 51104, 51104, 583, 1338, 11, 293, 309, 2544, 281, 312, 264, 3844, 4008, 11, 286, 519, 13, 51312, 51312, 865, 11, 300, 311, 689, 286, 576, 411, 281, 483, 13, 51412, 51412, 865, 11, 286, 519, 286, 576, 360, 264, 912, 13, 467, 611, 733, 295, 3417, 411, 562, 291, 7592, 309, 1826, 291, 652, 309, 11, 51692, 51692], "temperature": 0.0, "avg_logprob": -0.12694530696659298, "compression_ratio": 1.6336633663366336, "no_caption_prob": 1.696308027021587e-05}, {"id": 107, "seek": 73592, "start": 750.7199999999999, "end": 754.88, "text": " But yeah, and it seems to be the sweet spot, I think.", "tokens": [50364, 400, 457, 452, 16556, 307, 300, 286, 576, 1391, 360, 283, 16740, 4997, 934, 11, 9735, 286, 411, 281, 360, 50872, 50908, 3890, 4985, 4997, 11, 4840, 264, 11420, 13, 51104, 51104, 583, 1338, 11, 293, 309, 2544, 281, 312, 264, 3844, 4008, 11, 286, 519, 13, 51312, 51312, 865, 11, 300, 311, 689, 286, 576, 411, 281, 483, 13, 51412, 51412, 865, 11, 286, 519, 286, 576, 360, 264, 912, 13, 467, 611, 733, 295, 3417, 411, 562, 291, 7592, 309, 1826, 291, 652, 309, 11, 51692, 51692], "temperature": 0.0, "avg_logprob": -0.12694530696659298, "compression_ratio": 1.6336633663366336, "no_caption_prob": 1.696308027021587e-05}, {"id": 108, "seek": 73592, "start": 754.88, "end": 756.88, "text": " Yeah, that's where I would like to get.", "tokens": [50364, 400, 457, 452, 16556, 307, 300, 286, 576, 1391, 360, 283, 16740, 4997, 934, 11, 9735, 286, 411, 281, 360, 50872, 50908, 3890, 4985, 4997, 11, 4840, 264, 11420, 13, 51104, 51104, 583, 1338, 11, 293, 309, 2544, 281, 312, 264, 3844, 4008, 11, 286, 519, 13, 51312, 51312, 865, 11, 300, 311, 689, 286, 576, 411, 281, 483, 13, 51412, 51412, 865, 11, 286, 519, 286, 576, 360, 264, 912, 13, 467, 611, 733, 295, 3417, 411, 562, 291, 7592, 309, 1826, 291, 652, 309, 11, 51692, 51692], "temperature": 0.0, "avg_logprob": -0.12694530696659298, "compression_ratio": 1.6336633663366336, "no_caption_prob": 1.696308027021587e-05}, {"id": 109, "seek": 73592, "start": 756.88, "end": 762.48, "text": " Yeah, I think I would do the same. It also kind of feels like when you fake it until you make it,", "tokens": [50364, 400, 457, 452, 16556, 307, 300, 286, 576, 1391, 360, 283, 16740, 4997, 934, 11, 9735, 286, 411, 281, 360, 50872, 50908, 3890, 4985, 4997, 11, 4840, 264, 11420, 13, 51104, 51104, 583, 1338, 11, 293, 309, 2544, 281, 312, 264, 3844, 4008, 11, 286, 519, 13, 51312, 51312, 865, 11, 300, 311, 689, 286, 576, 411, 281, 483, 13, 51412, 51412, 865, 11, 286, 519, 286, 576, 360, 264, 912, 13, 467, 611, 733, 295, 3417, 411, 562, 291, 7592, 309, 1826, 291, 652, 309, 11, 51692, 51692], "temperature": 0.0, "avg_logprob": -0.12694530696659298, "compression_ratio": 1.6336633663366336, "no_caption_prob": 1.696308027021587e-05}, {"id": 110, "seek": 76248, "start": 762.48, "end": 767.84, "text": " you hard code everything. Well, the unit test is still a hard version.", "tokens": [50364, 291, 1152, 3089, 1203, 13, 1042, 11, 264, 4985, 1500, 307, 920, 257, 1152, 3037, 13, 50632, 50660, 1779, 13, 400, 550, 291, 917, 493, 365, 264, 283, 16740, 1500, 13, 663, 307, 264, 957, 472, 13, 50840, 50840, 876, 11, 1880, 13, 286, 536, 13, 407, 291, 434, 1566, 291, 727, 411, 2674, 1125, 428, 4985, 1500, 11, 51140, 51140, 722, 365, 411, 264, 4985, 1500, 885, 264, 1152, 34874, 472, 13, 51288, 51288, 400, 550, 264, 283, 16740, 3037, 576, 312, 2674, 3319, 300, 13, 51484, 51484, 865, 11, 300, 311, 257, 1627, 1558, 13, 286, 411, 300, 13, 51600, 51600, 682, 257, 636, 11, 291, 727, 584, 291, 434, 406, 1096, 1826, 291, 362, 1096, 283, 16740, 4997, 13, 51760, 51760], "temperature": 0.0, "avg_logprob": -0.12598585704016307, "compression_ratio": 1.8237704918032787, "no_caption_prob": 6.204834789969027e-05}, {"id": 111, "seek": 76248, "start": 768.4, "end": 772.0, "text": " Right. And then you end up with the fuzz test. That is the real one.", "tokens": [50364, 291, 1152, 3089, 1203, 13, 1042, 11, 264, 4985, 1500, 307, 920, 257, 1152, 3037, 13, 50632, 50660, 1779, 13, 400, 550, 291, 917, 493, 365, 264, 283, 16740, 1500, 13, 663, 307, 264, 957, 472, 13, 50840, 50840, 876, 11, 1880, 13, 286, 536, 13, 407, 291, 434, 1566, 291, 727, 411, 2674, 1125, 428, 4985, 1500, 11, 51140, 51140, 722, 365, 411, 264, 4985, 1500, 885, 264, 1152, 34874, 472, 13, 51288, 51288, 400, 550, 264, 283, 16740, 3037, 576, 312, 2674, 3319, 300, 13, 51484, 51484, 865, 11, 300, 311, 257, 1627, 1558, 13, 286, 411, 300, 13, 51600, 51600, 682, 257, 636, 11, 291, 727, 584, 291, 434, 406, 1096, 1826, 291, 362, 1096, 283, 16740, 4997, 13, 51760, 51760], "temperature": 0.0, "avg_logprob": -0.12598585704016307, "compression_ratio": 1.8237704918032787, "no_caption_prob": 6.204834789969027e-05}, {"id": 112, "seek": 76248, "start": 772.0, "end": 778.0, "text": " Oh, interesting. I see. So you're saying you could like generalize your unit test,", "tokens": [50364, 291, 1152, 3089, 1203, 13, 1042, 11, 264, 4985, 1500, 307, 920, 257, 1152, 3037, 13, 50632, 50660, 1779, 13, 400, 550, 291, 917, 493, 365, 264, 283, 16740, 1500, 13, 663, 307, 264, 957, 472, 13, 50840, 50840, 876, 11, 1880, 13, 286, 536, 13, 407, 291, 434, 1566, 291, 727, 411, 2674, 1125, 428, 4985, 1500, 11, 51140, 51140, 722, 365, 411, 264, 4985, 1500, 885, 264, 1152, 34874, 472, 13, 51288, 51288, 400, 550, 264, 283, 16740, 3037, 576, 312, 2674, 3319, 300, 13, 51484, 51484, 865, 11, 300, 311, 257, 1627, 1558, 13, 286, 411, 300, 13, 51600, 51600, 682, 257, 636, 11, 291, 727, 584, 291, 434, 406, 1096, 1826, 291, 362, 1096, 283, 16740, 4997, 13, 51760, 51760], "temperature": 0.0, "avg_logprob": -0.12598585704016307, "compression_ratio": 1.8237704918032787, "no_caption_prob": 6.204834789969027e-05}, {"id": 113, "seek": 76248, "start": 778.0, "end": 780.96, "text": " start with like the unit test being the hard coded one.", "tokens": [50364, 291, 1152, 3089, 1203, 13, 1042, 11, 264, 4985, 1500, 307, 920, 257, 1152, 3037, 13, 50632, 50660, 1779, 13, 400, 550, 291, 917, 493, 365, 264, 283, 16740, 1500, 13, 663, 307, 264, 957, 472, 13, 50840, 50840, 876, 11, 1880, 13, 286, 536, 13, 407, 291, 434, 1566, 291, 727, 411, 2674, 1125, 428, 4985, 1500, 11, 51140, 51140, 722, 365, 411, 264, 4985, 1500, 885, 264, 1152, 34874, 472, 13, 51288, 51288, 400, 550, 264, 283, 16740, 3037, 576, 312, 2674, 3319, 300, 13, 51484, 51484, 865, 11, 300, 311, 257, 1627, 1558, 13, 286, 411, 300, 13, 51600, 51600, 682, 257, 636, 11, 291, 727, 584, 291, 434, 406, 1096, 1826, 291, 362, 1096, 283, 16740, 4997, 13, 51760, 51760], "temperature": 0.0, "avg_logprob": -0.12598585704016307, "compression_ratio": 1.8237704918032787, "no_caption_prob": 6.204834789969027e-05}, {"id": 114, "seek": 76248, "start": 780.96, "end": 784.88, "text": " And then the fuzz version would be generalizing that.", "tokens": [50364, 291, 1152, 3089, 1203, 13, 1042, 11, 264, 4985, 1500, 307, 920, 257, 1152, 3037, 13, 50632, 50660, 1779, 13, 400, 550, 291, 917, 493, 365, 264, 283, 16740, 1500, 13, 663, 307, 264, 957, 472, 13, 50840, 50840, 876, 11, 1880, 13, 286, 536, 13, 407, 291, 434, 1566, 291, 727, 411, 2674, 1125, 428, 4985, 1500, 11, 51140, 51140, 722, 365, 411, 264, 4985, 1500, 885, 264, 1152, 34874, 472, 13, 51288, 51288, 400, 550, 264, 283, 16740, 3037, 576, 312, 2674, 3319, 300, 13, 51484, 51484, 865, 11, 300, 311, 257, 1627, 1558, 13, 286, 411, 300, 13, 51600, 51600, 682, 257, 636, 11, 291, 727, 584, 291, 434, 406, 1096, 1826, 291, 362, 1096, 283, 16740, 4997, 13, 51760, 51760], "temperature": 0.0, "avg_logprob": -0.12598585704016307, "compression_ratio": 1.8237704918032787, "no_caption_prob": 6.204834789969027e-05}, {"id": 115, "seek": 76248, "start": 784.88, "end": 787.2, "text": " Yeah, that's a cool idea. I like that.", "tokens": [50364, 291, 1152, 3089, 1203, 13, 1042, 11, 264, 4985, 1500, 307, 920, 257, 1152, 3037, 13, 50632, 50660, 1779, 13, 400, 550, 291, 917, 493, 365, 264, 283, 16740, 1500, 13, 663, 307, 264, 957, 472, 13, 50840, 50840, 876, 11, 1880, 13, 286, 536, 13, 407, 291, 434, 1566, 291, 727, 411, 2674, 1125, 428, 4985, 1500, 11, 51140, 51140, 722, 365, 411, 264, 4985, 1500, 885, 264, 1152, 34874, 472, 13, 51288, 51288, 400, 550, 264, 283, 16740, 3037, 576, 312, 2674, 3319, 300, 13, 51484, 51484, 865, 11, 300, 311, 257, 1627, 1558, 13, 286, 411, 300, 13, 51600, 51600, 682, 257, 636, 11, 291, 727, 584, 291, 434, 406, 1096, 1826, 291, 362, 1096, 283, 16740, 4997, 13, 51760, 51760], "temperature": 0.0, "avg_logprob": -0.12598585704016307, "compression_ratio": 1.8237704918032787, "no_caption_prob": 6.204834789969027e-05}, {"id": 116, "seek": 76248, "start": 787.2, "end": 790.4, "text": " In a way, you could say you're not done until you have done fuzz testing.", "tokens": [50364, 291, 1152, 3089, 1203, 13, 1042, 11, 264, 4985, 1500, 307, 920, 257, 1152, 3037, 13, 50632, 50660, 1779, 13, 400, 550, 291, 917, 493, 365, 264, 283, 16740, 1500, 13, 663, 307, 264, 957, 472, 13, 50840, 50840, 876, 11, 1880, 13, 286, 536, 13, 407, 291, 434, 1566, 291, 727, 411, 2674, 1125, 428, 4985, 1500, 11, 51140, 51140, 722, 365, 411, 264, 4985, 1500, 885, 264, 1152, 34874, 472, 13, 51288, 51288, 400, 550, 264, 283, 16740, 3037, 576, 312, 2674, 3319, 300, 13, 51484, 51484, 865, 11, 300, 311, 257, 1627, 1558, 13, 286, 411, 300, 13, 51600, 51600, 682, 257, 636, 11, 291, 727, 584, 291, 434, 406, 1096, 1826, 291, 362, 1096, 283, 16740, 4997, 13, 51760, 51760], "temperature": 0.0, "avg_logprob": -0.12598585704016307, "compression_ratio": 1.8237704918032787, "no_caption_prob": 6.204834789969027e-05}, {"id": 117, "seek": 79040, "start": 790.4, "end": 796.64, "text": " But I mean, fuzz testing is not what you always will end up with. So that's not entirely true.", "tokens": [50364, 583, 286, 914, 11, 283, 16740, 4997, 307, 406, 437, 291, 1009, 486, 917, 493, 365, 13, 407, 300, 311, 406, 7696, 2074, 13, 50676, 50776, 821, 366, 5821, 293, 456, 366, 3190, 689, 4985, 6921, 366, 544, 6854, 13, 50960, 51020, 583, 309, 311, 11, 291, 458, 11, 291, 393, 362, 1293, 13, 400, 4985, 6921, 366, 869, 337, 3701, 13, 51288, 51288, 961, 311, 584, 291, 362, 257, 777, 13532, 293, 436, 574, 412, 264, 1500, 293, 5800, 436, 536, 51512, 51512, 577, 291, 366, 1228, 428, 6828, 293, 370, 322, 13, 51616, 51652], "temperature": 0.0, "avg_logprob": -0.1173302494749731, "compression_ratio": 1.6538461538461537, "no_caption_prob": 2.884428067773115e-05}, {"id": 118, "seek": 79040, "start": 798.64, "end": 802.3199999999999, "text": " There are applications and there are places where unit tests are more appropriate.", "tokens": [50364, 583, 286, 914, 11, 283, 16740, 4997, 307, 406, 437, 291, 1009, 486, 917, 493, 365, 13, 407, 300, 311, 406, 7696, 2074, 13, 50676, 50776, 821, 366, 5821, 293, 456, 366, 3190, 689, 4985, 6921, 366, 544, 6854, 13, 50960, 51020, 583, 309, 311, 11, 291, 458, 11, 291, 393, 362, 1293, 13, 400, 4985, 6921, 366, 869, 337, 3701, 13, 51288, 51288, 961, 311, 584, 291, 362, 257, 777, 13532, 293, 436, 574, 412, 264, 1500, 293, 5800, 436, 536, 51512, 51512, 577, 291, 366, 1228, 428, 6828, 293, 370, 322, 13, 51616, 51652], "temperature": 0.0, "avg_logprob": -0.1173302494749731, "compression_ratio": 1.6538461538461537, "no_caption_prob": 2.884428067773115e-05}, {"id": 119, "seek": 79040, "start": 803.52, "end": 808.88, "text": " But it's, you know, you can have both. And unit tests are great for understanding.", "tokens": [50364, 583, 286, 914, 11, 283, 16740, 4997, 307, 406, 437, 291, 1009, 486, 917, 493, 365, 13, 407, 300, 311, 406, 7696, 2074, 13, 50676, 50776, 821, 366, 5821, 293, 456, 366, 3190, 689, 4985, 6921, 366, 544, 6854, 13, 50960, 51020, 583, 309, 311, 11, 291, 458, 11, 291, 393, 362, 1293, 13, 400, 4985, 6921, 366, 869, 337, 3701, 13, 51288, 51288, 961, 311, 584, 291, 362, 257, 777, 13532, 293, 436, 574, 412, 264, 1500, 293, 5800, 436, 536, 51512, 51512, 577, 291, 366, 1228, 428, 6828, 293, 370, 322, 13, 51616, 51652], "temperature": 0.0, "avg_logprob": -0.1173302494749731, "compression_ratio": 1.6538461538461537, "no_caption_prob": 2.884428067773115e-05}, {"id": 120, "seek": 79040, "start": 808.88, "end": 813.36, "text": " Let's say you have a new colleague and they look at the test and suddenly they see", "tokens": [50364, 583, 286, 914, 11, 283, 16740, 4997, 307, 406, 437, 291, 1009, 486, 917, 493, 365, 13, 407, 300, 311, 406, 7696, 2074, 13, 50676, 50776, 821, 366, 5821, 293, 456, 366, 3190, 689, 4985, 6921, 366, 544, 6854, 13, 50960, 51020, 583, 309, 311, 11, 291, 458, 11, 291, 393, 362, 1293, 13, 400, 4985, 6921, 366, 869, 337, 3701, 13, 51288, 51288, 961, 311, 584, 291, 362, 257, 777, 13532, 293, 436, 574, 412, 264, 1500, 293, 5800, 436, 536, 51512, 51512, 577, 291, 366, 1228, 428, 6828, 293, 370, 322, 13, 51616, 51652], "temperature": 0.0, "avg_logprob": -0.1173302494749731, "compression_ratio": 1.6538461538461537, "no_caption_prob": 2.884428067773115e-05}, {"id": 121, "seek": 79040, "start": 813.36, "end": 815.4399999999999, "text": " how you are using your functions and so on.", "tokens": [50364, 583, 286, 914, 11, 283, 16740, 4997, 307, 406, 437, 291, 1009, 486, 917, 493, 365, 13, 407, 300, 311, 406, 7696, 2074, 13, 50676, 50776, 821, 366, 5821, 293, 456, 366, 3190, 689, 4985, 6921, 366, 544, 6854, 13, 50960, 51020, 583, 309, 311, 11, 291, 458, 11, 291, 393, 362, 1293, 13, 400, 4985, 6921, 366, 869, 337, 3701, 13, 51288, 51288, 961, 311, 584, 291, 362, 257, 777, 13532, 293, 436, 574, 412, 264, 1500, 293, 5800, 436, 536, 51512, 51512, 577, 291, 366, 1228, 428, 6828, 293, 370, 322, 13, 51616, 51652], "temperature": 0.0, "avg_logprob": -0.1173302494749731, "compression_ratio": 1.6538461538461537, "no_caption_prob": 2.884428067773115e-05}, {"id": 122, "seek": 81544, "start": 815.44, "end": 825.0400000000001, "text": " And property based tests are more for getting the confidence that your functions are really correct.", "tokens": [50364, 400, 4707, 2361, 6921, 366, 544, 337, 1242, 264, 6687, 300, 428, 6828, 366, 534, 3006, 13, 50844, 50844, 1779, 13, 467, 11587, 257, 8177, 11, 558, 30, 467, 11587, 257, 8177, 382, 428, 6889, 2744, 11587, 13202, 13, 51180, 51180, 407, 309, 311, 293, 1670, 309, 311, 4974, 13, 51316, 51316, 865, 11, 286, 519, 309, 390, 413, 6940, 19639, 567, 848, 300, 6921, 393, 787, 7081, 300, 456, 311, 257, 7426, 11, 51732, 51732], "temperature": 0.0, "avg_logprob": -0.16997298216208434, "compression_ratio": 1.5566502463054188, "no_caption_prob": 3.321093390695751e-05}, {"id": 123, "seek": 81544, "start": 825.0400000000001, "end": 831.7600000000001, "text": " Right. It approaches a proof, right? It approaches a proof as your sample size approaches infinity.", "tokens": [50364, 400, 4707, 2361, 6921, 366, 544, 337, 1242, 264, 6687, 300, 428, 6828, 366, 534, 3006, 13, 50844, 50844, 1779, 13, 467, 11587, 257, 8177, 11, 558, 30, 467, 11587, 257, 8177, 382, 428, 6889, 2744, 11587, 13202, 13, 51180, 51180, 407, 309, 311, 293, 1670, 309, 311, 4974, 13, 51316, 51316, 865, 11, 286, 519, 309, 390, 413, 6940, 19639, 567, 848, 300, 6921, 393, 787, 7081, 300, 456, 311, 257, 7426, 11, 51732, 51732], "temperature": 0.0, "avg_logprob": -0.16997298216208434, "compression_ratio": 1.5566502463054188, "no_caption_prob": 3.321093390695751e-05}, {"id": 124, "seek": 81544, "start": 831.7600000000001, "end": 834.48, "text": " So it's and since it's random.", "tokens": [50364, 400, 4707, 2361, 6921, 366, 544, 337, 1242, 264, 6687, 300, 428, 6828, 366, 534, 3006, 13, 50844, 50844, 1779, 13, 467, 11587, 257, 8177, 11, 558, 30, 467, 11587, 257, 8177, 382, 428, 6889, 2744, 11587, 13202, 13, 51180, 51180, 407, 309, 311, 293, 1670, 309, 311, 4974, 13, 51316, 51316, 865, 11, 286, 519, 309, 390, 413, 6940, 19639, 567, 848, 300, 6921, 393, 787, 7081, 300, 456, 311, 257, 7426, 11, 51732, 51732], "temperature": 0.0, "avg_logprob": -0.16997298216208434, "compression_ratio": 1.5566502463054188, "no_caption_prob": 3.321093390695751e-05}, {"id": 125, "seek": 81544, "start": 834.48, "end": 842.8000000000001, "text": " Yeah, I think it was Dijkstra who said that tests can only prove that there's a bug,", "tokens": [50364, 400, 4707, 2361, 6921, 366, 544, 337, 1242, 264, 6687, 300, 428, 6828, 366, 534, 3006, 13, 50844, 50844, 1779, 13, 467, 11587, 257, 8177, 11, 558, 30, 467, 11587, 257, 8177, 382, 428, 6889, 2744, 11587, 13202, 13, 51180, 51180, 407, 309, 311, 293, 1670, 309, 311, 4974, 13, 51316, 51316, 865, 11, 286, 519, 309, 390, 413, 6940, 19639, 567, 848, 300, 6921, 393, 787, 7081, 300, 456, 311, 257, 7426, 11, 51732, 51732], "temperature": 0.0, "avg_logprob": -0.16997298216208434, "compression_ratio": 1.5566502463054188, "no_caption_prob": 3.321093390695751e-05}, {"id": 126, "seek": 84280, "start": 842.8, "end": 845.52, "text": " but they cannot prove that there's no bugs. Right.", "tokens": [50364, 457, 436, 2644, 7081, 300, 456, 311, 572, 15120, 13, 1779, 13, 50500, 50500, 286, 478, 406, 988, 295, 264, 3006, 47602, 11, 457, 300, 311, 264, 290, 468, 295, 309, 13, 50684, 50684, 400, 1338, 11, 370, 291, 393, 1920, 36227, 3488, 428, 6687, 11, 457, 291, 393, 1128, 483, 456, 13, 51096, 51096, 663, 311, 689, 411, 9860, 7150, 808, 294, 293, 8177, 82, 293, 370, 322, 13, 51316, 51316, 15576, 1520, 433, 11, 13437, 5215, 13, 51452, 51452, 12151, 13, 51480, 51612, 467, 2138, 3417, 411, 309, 311, 544, 294, 264, 7719, 295, 8177, 82, 13, 51816, 51816], "temperature": 0.0, "avg_logprob": -0.2521691183442051, "compression_ratio": 1.632034632034632, "no_caption_prob": 6.921408203197643e-05}, {"id": 127, "seek": 84280, "start": 845.52, "end": 849.1999999999999, "text": " I'm not sure of the correct wording, but that's the gist of it.", "tokens": [50364, 457, 436, 2644, 7081, 300, 456, 311, 572, 15120, 13, 1779, 13, 50500, 50500, 286, 478, 406, 988, 295, 264, 3006, 47602, 11, 457, 300, 311, 264, 290, 468, 295, 309, 13, 50684, 50684, 400, 1338, 11, 370, 291, 393, 1920, 36227, 3488, 428, 6687, 11, 457, 291, 393, 1128, 483, 456, 13, 51096, 51096, 663, 311, 689, 411, 9860, 7150, 808, 294, 293, 8177, 82, 293, 370, 322, 13, 51316, 51316, 15576, 1520, 433, 11, 13437, 5215, 13, 51452, 51452, 12151, 13, 51480, 51612, 467, 2138, 3417, 411, 309, 311, 544, 294, 264, 7719, 295, 8177, 82, 13, 51816, 51816], "temperature": 0.0, "avg_logprob": -0.2521691183442051, "compression_ratio": 1.632034632034632, "no_caption_prob": 6.921408203197643e-05}, {"id": 128, "seek": 84280, "start": 849.1999999999999, "end": 857.4399999999999, "text": " And yeah, so you can almost infinitely increase your confidence, but you can never get there.", "tokens": [50364, 457, 436, 2644, 7081, 300, 456, 311, 572, 15120, 13, 1779, 13, 50500, 50500, 286, 478, 406, 988, 295, 264, 3006, 47602, 11, 457, 300, 311, 264, 290, 468, 295, 309, 13, 50684, 50684, 400, 1338, 11, 370, 291, 393, 1920, 36227, 3488, 428, 6687, 11, 457, 291, 393, 1128, 483, 456, 13, 51096, 51096, 663, 311, 689, 411, 9860, 7150, 808, 294, 293, 8177, 82, 293, 370, 322, 13, 51316, 51316, 15576, 1520, 433, 11, 13437, 5215, 13, 51452, 51452, 12151, 13, 51480, 51612, 467, 2138, 3417, 411, 309, 311, 544, 294, 264, 7719, 295, 8177, 82, 13, 51816, 51816], "temperature": 0.0, "avg_logprob": -0.2521691183442051, "compression_ratio": 1.632034632034632, "no_caption_prob": 6.921408203197643e-05}, {"id": 129, "seek": 84280, "start": 857.4399999999999, "end": 861.8399999999999, "text": " That's where like formal methods come in and proofs and so on.", "tokens": [50364, 457, 436, 2644, 7081, 300, 456, 311, 572, 15120, 13, 1779, 13, 50500, 50500, 286, 478, 406, 988, 295, 264, 3006, 47602, 11, 457, 300, 311, 264, 290, 468, 295, 309, 13, 50684, 50684, 400, 1338, 11, 370, 291, 393, 1920, 36227, 3488, 428, 6687, 11, 457, 291, 393, 1128, 483, 456, 13, 51096, 51096, 663, 311, 689, 411, 9860, 7150, 808, 294, 293, 8177, 82, 293, 370, 322, 13, 51316, 51316, 15576, 1520, 433, 11, 13437, 5215, 13, 51452, 51452, 12151, 13, 51480, 51612, 467, 2138, 3417, 411, 309, 311, 544, 294, 264, 7719, 295, 8177, 82, 13, 51816, 51816], "temperature": 0.0, "avg_logprob": -0.2521691183442051, "compression_ratio": 1.632034632034632, "no_caption_prob": 6.921408203197643e-05}, {"id": 130, "seek": 84280, "start": 861.8399999999999, "end": 864.56, "text": " Type checkers, static analysis.", "tokens": [50364, 457, 436, 2644, 7081, 300, 456, 311, 572, 15120, 13, 1779, 13, 50500, 50500, 286, 478, 406, 988, 295, 264, 3006, 47602, 11, 457, 300, 311, 264, 290, 468, 295, 309, 13, 50684, 50684, 400, 1338, 11, 370, 291, 393, 1920, 36227, 3488, 428, 6687, 11, 457, 291, 393, 1128, 483, 456, 13, 51096, 51096, 663, 311, 689, 411, 9860, 7150, 808, 294, 293, 8177, 82, 293, 370, 322, 13, 51316, 51316, 15576, 1520, 433, 11, 13437, 5215, 13, 51452, 51452, 12151, 13, 51480, 51612, 467, 2138, 3417, 411, 309, 311, 544, 294, 264, 7719, 295, 8177, 82, 13, 51816, 51816], "temperature": 0.0, "avg_logprob": -0.2521691183442051, "compression_ratio": 1.632034632034632, "no_caption_prob": 6.921408203197643e-05}, {"id": 131, "seek": 84280, "start": 864.56, "end": 865.12, "text": " Definitely.", "tokens": [50364, 457, 436, 2644, 7081, 300, 456, 311, 572, 15120, 13, 1779, 13, 50500, 50500, 286, 478, 406, 988, 295, 264, 3006, 47602, 11, 457, 300, 311, 264, 290, 468, 295, 309, 13, 50684, 50684, 400, 1338, 11, 370, 291, 393, 1920, 36227, 3488, 428, 6687, 11, 457, 291, 393, 1128, 483, 456, 13, 51096, 51096, 663, 311, 689, 411, 9860, 7150, 808, 294, 293, 8177, 82, 293, 370, 322, 13, 51316, 51316, 15576, 1520, 433, 11, 13437, 5215, 13, 51452, 51452, 12151, 13, 51480, 51612, 467, 2138, 3417, 411, 309, 311, 544, 294, 264, 7719, 295, 8177, 82, 13, 51816, 51816], "temperature": 0.0, "avg_logprob": -0.2521691183442051, "compression_ratio": 1.632034632034632, "no_caption_prob": 6.921408203197643e-05}, {"id": 132, "seek": 84280, "start": 867.76, "end": 871.8399999999999, "text": " It definitely feels like it's more in the category of proofs.", "tokens": [50364, 457, 436, 2644, 7081, 300, 456, 311, 572, 15120, 13, 1779, 13, 50500, 50500, 286, 478, 406, 988, 295, 264, 3006, 47602, 11, 457, 300, 311, 264, 290, 468, 295, 309, 13, 50684, 50684, 400, 1338, 11, 370, 291, 393, 1920, 36227, 3488, 428, 6687, 11, 457, 291, 393, 1128, 483, 456, 13, 51096, 51096, 663, 311, 689, 411, 9860, 7150, 808, 294, 293, 8177, 82, 293, 370, 322, 13, 51316, 51316, 15576, 1520, 433, 11, 13437, 5215, 13, 51452, 51452, 12151, 13, 51480, 51612, 467, 2138, 3417, 411, 309, 311, 544, 294, 264, 7719, 295, 8177, 82, 13, 51816, 51816], "temperature": 0.0, "avg_logprob": -0.2521691183442051, "compression_ratio": 1.632034632034632, "no_caption_prob": 6.921408203197643e-05}, {"id": 133, "seek": 87184, "start": 871.84, "end": 875.0400000000001, "text": " Than just tests.", "tokens": [50364, 18289, 445, 6921, 13, 50524, 50524, 286, 486, 584, 411, 562, 286, 600, 6560, 292, 561, 322, 613, 35759, 11587, 281, 3579, 3089, 11, 50848, 50848, 597, 286, 519, 4696, 561, 519, 295, 385, 382, 257, 5463, 2136, 1417, 466, 35759, 721, 13, 51276, 51276, 759, 370, 11, 550, 286, 600, 11042, 452, 4447, 11, 597, 307, 281, 485, 51400, 51512, 509, 1062, 312, 5463, 11, 457, 412, 1935, 291, 434, 3397, 32148, 13, 51616, 51776, 883, 2136, 9205, 337, 385, 13, 51840], "temperature": 0.0, "avg_logprob": -0.1509407492244945, "compression_ratio": 1.5633802816901408, "no_caption_prob": 1.3209292774263304e-05}, {"id": 134, "seek": 87184, "start": 875.0400000000001, "end": 881.52, "text": " I will say like when I've coached people on these incremental approaches to writing code,", "tokens": [50364, 18289, 445, 6921, 13, 50524, 50524, 286, 486, 584, 411, 562, 286, 600, 6560, 292, 561, 322, 613, 35759, 11587, 281, 3579, 3089, 11, 50848, 50848, 597, 286, 519, 4696, 561, 519, 295, 385, 382, 257, 5463, 2136, 1417, 466, 35759, 721, 13, 51276, 51276, 759, 370, 11, 550, 286, 600, 11042, 452, 4447, 11, 597, 307, 281, 485, 51400, 51512, 509, 1062, 312, 5463, 11, 457, 412, 1935, 291, 434, 3397, 32148, 13, 51616, 51776, 883, 2136, 9205, 337, 385, 13, 51840], "temperature": 0.0, "avg_logprob": -0.1509407492244945, "compression_ratio": 1.5633802816901408, "no_caption_prob": 1.3209292774263304e-05}, {"id": 135, "seek": 87184, "start": 881.52, "end": 890.08, "text": " which I think hopefully people think of me as a broken record talking about incremental things.", "tokens": [50364, 18289, 445, 6921, 13, 50524, 50524, 286, 486, 584, 411, 562, 286, 600, 6560, 292, 561, 322, 613, 35759, 11587, 281, 3579, 3089, 11, 50848, 50848, 597, 286, 519, 4696, 561, 519, 295, 385, 382, 257, 5463, 2136, 1417, 466, 35759, 721, 13, 51276, 51276, 759, 370, 11, 550, 286, 600, 11042, 452, 4447, 11, 597, 307, 281, 485, 51400, 51512, 509, 1062, 312, 5463, 11, 457, 412, 1935, 291, 434, 3397, 32148, 13, 51616, 51776, 883, 2136, 9205, 337, 385, 13, 51840], "temperature": 0.0, "avg_logprob": -0.1509407492244945, "compression_ratio": 1.5633802816901408, "no_caption_prob": 1.3209292774263304e-05}, {"id": 136, "seek": 87184, "start": 890.08, "end": 892.5600000000001, "text": " If so, then I've achieved my mission, which is to...", "tokens": [50364, 18289, 445, 6921, 13, 50524, 50524, 286, 486, 584, 411, 562, 286, 600, 6560, 292, 561, 322, 613, 35759, 11587, 281, 3579, 3089, 11, 50848, 50848, 597, 286, 519, 4696, 561, 519, 295, 385, 382, 257, 5463, 2136, 1417, 466, 35759, 721, 13, 51276, 51276, 759, 370, 11, 550, 286, 600, 11042, 452, 4447, 11, 597, 307, 281, 485, 51400, 51512, 509, 1062, 312, 5463, 11, 457, 412, 1935, 291, 434, 3397, 32148, 13, 51616, 51776, 883, 2136, 9205, 337, 385, 13, 51840], "temperature": 0.0, "avg_logprob": -0.1509407492244945, "compression_ratio": 1.5633802816901408, "no_caption_prob": 1.3209292774263304e-05}, {"id": 137, "seek": 87184, "start": 894.8000000000001, "end": 896.88, "text": " You might be broken, but at least you're immutable.", "tokens": [50364, 18289, 445, 6921, 13, 50524, 50524, 286, 486, 584, 411, 562, 286, 600, 6560, 292, 561, 322, 613, 35759, 11587, 281, 3579, 3089, 11, 50848, 50848, 597, 286, 519, 4696, 561, 519, 295, 385, 382, 257, 5463, 2136, 1417, 466, 35759, 721, 13, 51276, 51276, 759, 370, 11, 550, 286, 600, 11042, 452, 4447, 11, 597, 307, 281, 485, 51400, 51512, 509, 1062, 312, 5463, 11, 457, 412, 1935, 291, 434, 3397, 32148, 13, 51616, 51776, 883, 2136, 9205, 337, 385, 13, 51840], "temperature": 0.0, "avg_logprob": -0.1509407492244945, "compression_ratio": 1.5633802816901408, "no_caption_prob": 1.3209292774263304e-05}, {"id": 138, "seek": 89688, "start": 896.88, "end": 898.88, "text": " No record updates for me.", "tokens": [50364, 883, 2136, 9205, 337, 385, 13, 50464, 50464, 7587, 13, 50492, 50532, 583, 562, 286, 478, 15818, 561, 293, 411, 884, 257, 314, 20818, 1365, 11, 411, 472, 295, 264, 721, 286, 3449, 307, 300, 50868, 50904, 561, 528, 281, 3012, 281, 264, 44498, 11420, 700, 13, 51076, 51076, 400, 286, 528, 281, 1701, 7146, 300, 7164, 295, 1382, 281, 352, 2997, 281, 264, 44498, 3827, 51480, 51480, 293, 2602, 584, 11, 718, 311, 751, 466, 472, 1389, 412, 257, 565, 11, 570, 286, 519, 527, 15442, 366, 767, 51700, 51740], "temperature": 0.0, "avg_logprob": -0.2008335974908644, "compression_ratio": 1.5780590717299579, "no_caption_prob": 5.5618209444219247e-05}, {"id": 139, "seek": 89688, "start": 898.88, "end": 899.4399999999999, "text": " Exactly.", "tokens": [50364, 883, 2136, 9205, 337, 385, 13, 50464, 50464, 7587, 13, 50492, 50532, 583, 562, 286, 478, 15818, 561, 293, 411, 884, 257, 314, 20818, 1365, 11, 411, 472, 295, 264, 721, 286, 3449, 307, 300, 50868, 50904, 561, 528, 281, 3012, 281, 264, 44498, 11420, 700, 13, 51076, 51076, 400, 286, 528, 281, 1701, 7146, 300, 7164, 295, 1382, 281, 352, 2997, 281, 264, 44498, 3827, 51480, 51480, 293, 2602, 584, 11, 718, 311, 751, 466, 472, 1389, 412, 257, 565, 11, 570, 286, 519, 527, 15442, 366, 767, 51700, 51740], "temperature": 0.0, "avg_logprob": -0.2008335974908644, "compression_ratio": 1.5780590717299579, "no_caption_prob": 5.5618209444219247e-05}, {"id": 140, "seek": 89688, "start": 900.24, "end": 906.96, "text": " But when I'm coaching people and like doing a TDD example, like one of the things I notice is that", "tokens": [50364, 883, 2136, 9205, 337, 385, 13, 50464, 50464, 7587, 13, 50492, 50532, 583, 562, 286, 478, 15818, 561, 293, 411, 884, 257, 314, 20818, 1365, 11, 411, 472, 295, 264, 721, 286, 3449, 307, 300, 50868, 50904, 561, 528, 281, 3012, 281, 264, 44498, 11420, 700, 13, 51076, 51076, 400, 286, 528, 281, 1701, 7146, 300, 7164, 295, 1382, 281, 352, 2997, 281, 264, 44498, 3827, 51480, 51480, 293, 2602, 584, 11, 718, 311, 751, 466, 472, 1389, 412, 257, 565, 11, 570, 286, 519, 527, 15442, 366, 767, 51700, 51740], "temperature": 0.0, "avg_logprob": -0.2008335974908644, "compression_ratio": 1.5780590717299579, "no_caption_prob": 5.5618209444219247e-05}, {"id": 141, "seek": 89688, "start": 907.68, "end": 911.12, "text": " people want to jump to the generalized implementation first.", "tokens": [50364, 883, 2136, 9205, 337, 385, 13, 50464, 50464, 7587, 13, 50492, 50532, 583, 562, 286, 478, 15818, 561, 293, 411, 884, 257, 314, 20818, 1365, 11, 411, 472, 295, 264, 721, 286, 3449, 307, 300, 50868, 50904, 561, 528, 281, 3012, 281, 264, 44498, 11420, 700, 13, 51076, 51076, 400, 286, 528, 281, 1701, 7146, 300, 7164, 295, 1382, 281, 352, 2997, 281, 264, 44498, 3827, 51480, 51480, 293, 2602, 584, 11, 718, 311, 751, 466, 472, 1389, 412, 257, 565, 11, 570, 286, 519, 527, 15442, 366, 767, 51700, 51740], "temperature": 0.0, "avg_logprob": -0.2008335974908644, "compression_ratio": 1.5780590717299579, "no_caption_prob": 5.5618209444219247e-05}, {"id": 142, "seek": 89688, "start": 911.12, "end": 919.2, "text": " And I want to untrain that habit of trying to go straight to the generalized solution", "tokens": [50364, 883, 2136, 9205, 337, 385, 13, 50464, 50464, 7587, 13, 50492, 50532, 583, 562, 286, 478, 15818, 561, 293, 411, 884, 257, 314, 20818, 1365, 11, 411, 472, 295, 264, 721, 286, 3449, 307, 300, 50868, 50904, 561, 528, 281, 3012, 281, 264, 44498, 11420, 700, 13, 51076, 51076, 400, 286, 528, 281, 1701, 7146, 300, 7164, 295, 1382, 281, 352, 2997, 281, 264, 44498, 3827, 51480, 51480, 293, 2602, 584, 11, 718, 311, 751, 466, 472, 1389, 412, 257, 565, 11, 570, 286, 519, 527, 15442, 366, 767, 51700, 51740], "temperature": 0.0, "avg_logprob": -0.2008335974908644, "compression_ratio": 1.5780590717299579, "no_caption_prob": 5.5618209444219247e-05}, {"id": 143, "seek": 89688, "start": 919.2, "end": 923.6, "text": " and instead say, let's talk about one case at a time, because I think our brains are actually", "tokens": [50364, 883, 2136, 9205, 337, 385, 13, 50464, 50464, 7587, 13, 50492, 50532, 583, 562, 286, 478, 15818, 561, 293, 411, 884, 257, 314, 20818, 1365, 11, 411, 472, 295, 264, 721, 286, 3449, 307, 300, 50868, 50904, 561, 528, 281, 3012, 281, 264, 44498, 11420, 700, 13, 51076, 51076, 400, 286, 528, 281, 1701, 7146, 300, 7164, 295, 1382, 281, 352, 2997, 281, 264, 44498, 3827, 51480, 51480, 293, 2602, 584, 11, 718, 311, 751, 466, 472, 1389, 412, 257, 565, 11, 570, 286, 519, 527, 15442, 366, 767, 51700, 51740], "temperature": 0.0, "avg_logprob": -0.2008335974908644, "compression_ratio": 1.5780590717299579, "no_caption_prob": 5.5618209444219247e-05}, {"id": 144, "seek": 92360, "start": 923.6, "end": 929.12, "text": " more effective at thinking about one case and building code for one case.", "tokens": [50364, 544, 4942, 412, 1953, 466, 472, 1389, 293, 2390, 3089, 337, 472, 1389, 13, 50640, 50640, 10328, 321, 670, 25609, 260, 293, 527, 3567, 2170, 19042, 13, 50796, 50796, 467, 311, 411, 886, 2416, 295, 257, 1154, 281, 7988, 766, 412, 1564, 13, 50964, 50964, 407, 309, 2709, 505, 613, 38798, 35759, 24004, 281, 589, 322, 13, 51132, 51212, 407, 286, 2138, 519, 456, 311, 411, 2158, 281, 341, 314, 20818, 3109, 13, 51468, 51468, 400, 286, 2138, 411, 264, 1558, 295, 884, 283, 3334, 8781, 934, 13, 51616, 51616, 400, 286, 519, 300, 311, 257, 869, 636, 281, 360, 309, 13, 51772, 51772], "temperature": 0.0, "avg_logprob": -0.3088273102382444, "compression_ratio": 1.628, "no_caption_prob": 0.00013549828145187348}, {"id": 145, "seek": 92360, "start": 929.12, "end": 932.24, "text": " Otherwise we overengineer and our brain gets overwhelmed.", "tokens": [50364, 544, 4942, 412, 1953, 466, 472, 1389, 293, 2390, 3089, 337, 472, 1389, 13, 50640, 50640, 10328, 321, 670, 25609, 260, 293, 527, 3567, 2170, 19042, 13, 50796, 50796, 467, 311, 411, 886, 2416, 295, 257, 1154, 281, 7988, 766, 412, 1564, 13, 50964, 50964, 407, 309, 2709, 505, 613, 38798, 35759, 24004, 281, 589, 322, 13, 51132, 51212, 407, 286, 2138, 519, 456, 311, 411, 2158, 281, 341, 314, 20818, 3109, 13, 51468, 51468, 400, 286, 2138, 411, 264, 1558, 295, 884, 283, 3334, 8781, 934, 13, 51616, 51616, 400, 286, 519, 300, 311, 257, 869, 636, 281, 360, 309, 13, 51772, 51772], "temperature": 0.0, "avg_logprob": -0.3088273102382444, "compression_ratio": 1.628, "no_caption_prob": 0.00013549828145187348}, {"id": 146, "seek": 92360, "start": 932.24, "end": 935.6, "text": " It's like too large of a problem to bite off at once.", "tokens": [50364, 544, 4942, 412, 1953, 466, 472, 1389, 293, 2390, 3089, 337, 472, 1389, 13, 50640, 50640, 10328, 321, 670, 25609, 260, 293, 527, 3567, 2170, 19042, 13, 50796, 50796, 467, 311, 411, 886, 2416, 295, 257, 1154, 281, 7988, 766, 412, 1564, 13, 50964, 50964, 407, 309, 2709, 505, 613, 38798, 35759, 24004, 281, 589, 322, 13, 51132, 51212, 407, 286, 2138, 519, 456, 311, 411, 2158, 281, 341, 314, 20818, 3109, 13, 51468, 51468, 400, 286, 2138, 411, 264, 1558, 295, 884, 283, 3334, 8781, 934, 13, 51616, 51616, 400, 286, 519, 300, 311, 257, 869, 636, 281, 360, 309, 13, 51772, 51772], "temperature": 0.0, "avg_logprob": -0.3088273102382444, "compression_ratio": 1.628, "no_caption_prob": 0.00013549828145187348}, {"id": 147, "seek": 92360, "start": 935.6, "end": 938.96, "text": " So it gives us these manageable incremental chunks to work on.", "tokens": [50364, 544, 4942, 412, 1953, 466, 472, 1389, 293, 2390, 3089, 337, 472, 1389, 13, 50640, 50640, 10328, 321, 670, 25609, 260, 293, 527, 3567, 2170, 19042, 13, 50796, 50796, 467, 311, 411, 886, 2416, 295, 257, 1154, 281, 7988, 766, 412, 1564, 13, 50964, 50964, 407, 309, 2709, 505, 613, 38798, 35759, 24004, 281, 589, 322, 13, 51132, 51212, 407, 286, 2138, 519, 456, 311, 411, 2158, 281, 341, 314, 20818, 3109, 13, 51468, 51468, 400, 286, 2138, 411, 264, 1558, 295, 884, 283, 3334, 8781, 934, 13, 51616, 51616, 400, 286, 519, 300, 311, 257, 869, 636, 281, 360, 309, 13, 51772, 51772], "temperature": 0.0, "avg_logprob": -0.3088273102382444, "compression_ratio": 1.628, "no_caption_prob": 0.00013549828145187348}, {"id": 148, "seek": 92360, "start": 940.5600000000001, "end": 945.6800000000001, "text": " So I definitely think there's like value to this TDD approach.", "tokens": [50364, 544, 4942, 412, 1953, 466, 472, 1389, 293, 2390, 3089, 337, 472, 1389, 13, 50640, 50640, 10328, 321, 670, 25609, 260, 293, 527, 3567, 2170, 19042, 13, 50796, 50796, 467, 311, 411, 886, 2416, 295, 257, 1154, 281, 7988, 766, 412, 1564, 13, 50964, 50964, 407, 309, 2709, 505, 613, 38798, 35759, 24004, 281, 589, 322, 13, 51132, 51212, 407, 286, 2138, 519, 456, 311, 411, 2158, 281, 341, 314, 20818, 3109, 13, 51468, 51468, 400, 286, 2138, 411, 264, 1558, 295, 884, 283, 3334, 8781, 934, 13, 51616, 51616, 400, 286, 519, 300, 311, 257, 869, 636, 281, 360, 309, 13, 51772, 51772], "temperature": 0.0, "avg_logprob": -0.3088273102382444, "compression_ratio": 1.628, "no_caption_prob": 0.00013549828145187348}, {"id": 149, "seek": 92360, "start": 945.6800000000001, "end": 948.64, "text": " And I definitely like the idea of doing fuzzing after.", "tokens": [50364, 544, 4942, 412, 1953, 466, 472, 1389, 293, 2390, 3089, 337, 472, 1389, 13, 50640, 50640, 10328, 321, 670, 25609, 260, 293, 527, 3567, 2170, 19042, 13, 50796, 50796, 467, 311, 411, 886, 2416, 295, 257, 1154, 281, 7988, 766, 412, 1564, 13, 50964, 50964, 407, 309, 2709, 505, 613, 38798, 35759, 24004, 281, 589, 322, 13, 51132, 51212, 407, 286, 2138, 519, 456, 311, 411, 2158, 281, 341, 314, 20818, 3109, 13, 51468, 51468, 400, 286, 2138, 411, 264, 1558, 295, 884, 283, 3334, 8781, 934, 13, 51616, 51616, 400, 286, 519, 300, 311, 257, 869, 636, 281, 360, 309, 13, 51772, 51772], "temperature": 0.0, "avg_logprob": -0.3088273102382444, "compression_ratio": 1.628, "no_caption_prob": 0.00013549828145187348}, {"id": 150, "seek": 92360, "start": 948.64, "end": 951.76, "text": " And I think that's a great way to do it.", "tokens": [50364, 544, 4942, 412, 1953, 466, 472, 1389, 293, 2390, 3089, 337, 472, 1389, 13, 50640, 50640, 10328, 321, 670, 25609, 260, 293, 527, 3567, 2170, 19042, 13, 50796, 50796, 467, 311, 411, 886, 2416, 295, 257, 1154, 281, 7988, 766, 412, 1564, 13, 50964, 50964, 407, 309, 2709, 505, 613, 38798, 35759, 24004, 281, 589, 322, 13, 51132, 51212, 407, 286, 2138, 519, 456, 311, 411, 2158, 281, 341, 314, 20818, 3109, 13, 51468, 51468, 400, 286, 2138, 411, 264, 1558, 295, 884, 283, 3334, 8781, 934, 13, 51616, 51616, 400, 286, 519, 300, 311, 257, 869, 636, 281, 360, 309, 13, 51772, 51772], "temperature": 0.0, "avg_logprob": -0.3088273102382444, "compression_ratio": 1.628, "no_caption_prob": 0.00013549828145187348}, {"id": 151, "seek": 95176, "start": 951.76, "end": 957.76, "text": " And I think it's good for people to keep in mind that like balancing that incremental", "tokens": [50364, 400, 286, 519, 309, 311, 665, 337, 561, 281, 1066, 294, 1575, 300, 411, 22495, 300, 35759, 50664, 50664, 3109, 365, 264, 283, 3334, 8781, 11, 597, 486, 2235, 291, 544, 294, 264, 44498, 11420, 3513, 13, 50944, 50984, 2743, 11, 586, 300, 291, 751, 466, 309, 11, 286, 519, 283, 3334, 8781, 307, 869, 337, 562, 291, 393, 380, 1797, 51364, 51364, 264, 1379, 1785, 294, 428, 1378, 562, 456, 311, 886, 867, 3956, 13, 51548, 51548, 407, 341, 307, 544, 337, 11, 718, 311, 584, 3861, 1785, 293, 7897, 13, 51764, 51812], "temperature": 0.0, "avg_logprob": -0.16833869616190592, "compression_ratio": 1.6166666666666667, "no_caption_prob": 2.7530819352250546e-05}, {"id": 152, "seek": 95176, "start": 957.76, "end": 963.36, "text": " approach with the fuzzing, which will pull you more in the generalized implementation direction.", "tokens": [50364, 400, 286, 519, 309, 311, 665, 337, 561, 281, 1066, 294, 1575, 300, 411, 22495, 300, 35759, 50664, 50664, 3109, 365, 264, 283, 3334, 8781, 11, 597, 486, 2235, 291, 544, 294, 264, 44498, 11420, 3513, 13, 50944, 50984, 2743, 11, 586, 300, 291, 751, 466, 309, 11, 286, 519, 283, 3334, 8781, 307, 869, 337, 562, 291, 393, 380, 1797, 51364, 51364, 264, 1379, 1785, 294, 428, 1378, 562, 456, 311, 886, 867, 3956, 13, 51548, 51548, 407, 341, 307, 544, 337, 11, 718, 311, 584, 3861, 1785, 293, 7897, 13, 51764, 51812], "temperature": 0.0, "avg_logprob": -0.16833869616190592, "compression_ratio": 1.6166666666666667, "no_caption_prob": 2.7530819352250546e-05}, {"id": 153, "seek": 95176, "start": 964.16, "end": 971.76, "text": " Also, now that you talk about it, I think fuzzing is great for when you can't hold", "tokens": [50364, 400, 286, 519, 309, 311, 665, 337, 561, 281, 1066, 294, 1575, 300, 411, 22495, 300, 35759, 50664, 50664, 3109, 365, 264, 283, 3334, 8781, 11, 597, 486, 2235, 291, 544, 294, 264, 44498, 11420, 3513, 13, 50944, 50984, 2743, 11, 586, 300, 291, 751, 466, 309, 11, 286, 519, 283, 3334, 8781, 307, 869, 337, 562, 291, 393, 380, 1797, 51364, 51364, 264, 1379, 1785, 294, 428, 1378, 562, 456, 311, 886, 867, 3956, 13, 51548, 51548, 407, 341, 307, 544, 337, 11, 718, 311, 584, 3861, 1785, 293, 7897, 13, 51764, 51812], "temperature": 0.0, "avg_logprob": -0.16833869616190592, "compression_ratio": 1.6166666666666667, "no_caption_prob": 2.7530819352250546e-05}, {"id": 154, "seek": 95176, "start": 971.76, "end": 975.4399999999999, "text": " the whole state in your head when there's too many options.", "tokens": [50364, 400, 286, 519, 309, 311, 665, 337, 561, 281, 1066, 294, 1575, 300, 411, 22495, 300, 35759, 50664, 50664, 3109, 365, 264, 283, 3334, 8781, 11, 597, 486, 2235, 291, 544, 294, 264, 44498, 11420, 3513, 13, 50944, 50984, 2743, 11, 586, 300, 291, 751, 466, 309, 11, 286, 519, 283, 3334, 8781, 307, 869, 337, 562, 291, 393, 380, 1797, 51364, 51364, 264, 1379, 1785, 294, 428, 1378, 562, 456, 311, 886, 867, 3956, 13, 51548, 51548, 407, 341, 307, 544, 337, 11, 718, 311, 584, 3861, 1785, 293, 7897, 13, 51764, 51812], "temperature": 0.0, "avg_logprob": -0.16833869616190592, "compression_ratio": 1.6166666666666667, "no_caption_prob": 2.7530819352250546e-05}, {"id": 155, "seek": 95176, "start": 975.4399999999999, "end": 979.76, "text": " So this is more for, let's say application state and messages.", "tokens": [50364, 400, 286, 519, 309, 311, 665, 337, 561, 281, 1066, 294, 1575, 300, 411, 22495, 300, 35759, 50664, 50664, 3109, 365, 264, 283, 3334, 8781, 11, 597, 486, 2235, 291, 544, 294, 264, 44498, 11420, 3513, 13, 50944, 50984, 2743, 11, 586, 300, 291, 751, 466, 309, 11, 286, 519, 283, 3334, 8781, 307, 869, 337, 562, 291, 393, 380, 1797, 51364, 51364, 264, 1379, 1785, 294, 428, 1378, 562, 456, 311, 886, 867, 3956, 13, 51548, 51548, 407, 341, 307, 544, 337, 11, 718, 311, 584, 3861, 1785, 293, 7897, 13, 51764, 51812], "temperature": 0.0, "avg_logprob": -0.16833869616190592, "compression_ratio": 1.6166666666666667, "no_caption_prob": 2.7530819352250546e-05}, {"id": 156, "seek": 97976, "start": 979.76, "end": 985.28, "text": " So, you want to make sure that no matter what messages you get,", "tokens": [50364, 407, 11, 291, 528, 281, 652, 988, 300, 572, 1871, 437, 7897, 291, 483, 11, 50640, 50640, 746, 486, 1009, 312, 2074, 570, 291, 393, 380, 534, 519, 807, 309, 13, 50896, 50896, 1485, 1365, 300, 286, 669, 586, 1953, 295, 307, 264, 2487, 9839, 11, 411, 2699, 76, 9839, 300, 286, 3031, 281, 652, 11, 51300, 51352, 597, 390, 3879, 490, 8459, 11, 572, 2487, 1859, 11, 572, 2375, 15778, 13, 51584, 51584, 407, 309, 390, 445, 411, 1184, 2517, 390, 1080, 1065, 551, 13, 51804, 51804], "temperature": 0.0, "avg_logprob": -0.22543989817301432, "compression_ratio": 1.6018099547511313, "no_caption_prob": 6.691487942589447e-05}, {"id": 157, "seek": 97976, "start": 985.28, "end": 990.4, "text": " something will always be true because you can't really think through it.", "tokens": [50364, 407, 11, 291, 528, 281, 652, 988, 300, 572, 1871, 437, 7897, 291, 483, 11, 50640, 50640, 746, 486, 1009, 312, 2074, 570, 291, 393, 380, 534, 519, 807, 309, 13, 50896, 50896, 1485, 1365, 300, 286, 669, 586, 1953, 295, 307, 264, 2487, 9839, 11, 411, 2699, 76, 9839, 300, 286, 3031, 281, 652, 11, 51300, 51352, 597, 390, 3879, 490, 8459, 11, 572, 2487, 1859, 11, 572, 2375, 15778, 13, 51584, 51584, 407, 309, 390, 445, 411, 1184, 2517, 390, 1080, 1065, 551, 13, 51804, 51804], "temperature": 0.0, "avg_logprob": -0.22543989817301432, "compression_ratio": 1.6018099547511313, "no_caption_prob": 6.691487942589447e-05}, {"id": 158, "seek": 97976, "start": 990.4, "end": 998.48, "text": " One example that I am now thinking of is the text editor, like Elm editor that I tried to make,", "tokens": [50364, 407, 11, 291, 528, 281, 652, 988, 300, 572, 1871, 437, 7897, 291, 483, 11, 50640, 50640, 746, 486, 1009, 312, 2074, 570, 291, 393, 380, 534, 519, 807, 309, 13, 50896, 50896, 1485, 1365, 300, 286, 669, 586, 1953, 295, 307, 264, 2487, 9839, 11, 411, 2699, 76, 9839, 300, 286, 3031, 281, 652, 11, 51300, 51352, 597, 390, 3879, 490, 8459, 11, 572, 2487, 1859, 11, 572, 2375, 15778, 13, 51584, 51584, 407, 309, 390, 445, 411, 1184, 2517, 390, 1080, 1065, 551, 13, 51804, 51804], "temperature": 0.0, "avg_logprob": -0.22543989817301432, "compression_ratio": 1.6018099547511313, "no_caption_prob": 6.691487942589447e-05}, {"id": 159, "seek": 97976, "start": 999.52, "end": 1004.16, "text": " which was totally from scratch, no text area, no custom JavaScript.", "tokens": [50364, 407, 11, 291, 528, 281, 652, 988, 300, 572, 1871, 437, 7897, 291, 483, 11, 50640, 50640, 746, 486, 1009, 312, 2074, 570, 291, 393, 380, 534, 519, 807, 309, 13, 50896, 50896, 1485, 1365, 300, 286, 669, 586, 1953, 295, 307, 264, 2487, 9839, 11, 411, 2699, 76, 9839, 300, 286, 3031, 281, 652, 11, 51300, 51352, 597, 390, 3879, 490, 8459, 11, 572, 2487, 1859, 11, 572, 2375, 15778, 13, 51584, 51584, 407, 309, 390, 445, 411, 1184, 2517, 390, 1080, 1065, 551, 13, 51804, 51804], "temperature": 0.0, "avg_logprob": -0.22543989817301432, "compression_ratio": 1.6018099547511313, "no_caption_prob": 6.691487942589447e-05}, {"id": 160, "seek": 97976, "start": 1004.16, "end": 1008.56, "text": " So it was just like each character was its own thing.", "tokens": [50364, 407, 11, 291, 528, 281, 652, 988, 300, 572, 1871, 437, 7897, 291, 483, 11, 50640, 50640, 746, 486, 1009, 312, 2074, 570, 291, 393, 380, 534, 519, 807, 309, 13, 50896, 50896, 1485, 1365, 300, 286, 669, 586, 1953, 295, 307, 264, 2487, 9839, 11, 411, 2699, 76, 9839, 300, 286, 3031, 281, 652, 11, 51300, 51352, 597, 390, 3879, 490, 8459, 11, 572, 2487, 1859, 11, 572, 2375, 15778, 13, 51584, 51584, 407, 309, 390, 445, 411, 1184, 2517, 390, 1080, 1065, 551, 13, 51804, 51804], "temperature": 0.0, "avg_logprob": -0.22543989817301432, "compression_ratio": 1.6018099547511313, "no_caption_prob": 6.691487942589447e-05}, {"id": 161, "seek": 100856, "start": 1008.56, "end": 1014.7199999999999, "text": " Each character was its own div and all the cursor manipulation and selection.", "tokens": [50364, 6947, 2517, 390, 1080, 1065, 3414, 293, 439, 264, 28169, 26475, 293, 9450, 13, 50672, 50672, 467, 390, 439, 1096, 490, 8459, 13, 50744, 50744, 400, 370, 456, 645, 257, 688, 295, 6851, 689, 286, 1194, 264, 11420, 307, 3006, 570, 51140, 51176, 264, 636, 300, 286, 8246, 264, 3861, 11, 1203, 6576, 281, 312, 2489, 13, 51500, 51500], "temperature": 0.0, "avg_logprob": -0.14187406321040918, "compression_ratio": 1.5227272727272727, "no_caption_prob": 5.252024948276812e-06}, {"id": 162, "seek": 100856, "start": 1014.7199999999999, "end": 1016.16, "text": " It was all done from scratch.", "tokens": [50364, 6947, 2517, 390, 1080, 1065, 3414, 293, 439, 264, 28169, 26475, 293, 9450, 13, 50672, 50672, 467, 390, 439, 1096, 490, 8459, 13, 50744, 50744, 400, 370, 456, 645, 257, 688, 295, 6851, 689, 286, 1194, 264, 11420, 307, 3006, 570, 51140, 51176, 264, 636, 300, 286, 8246, 264, 3861, 11, 1203, 6576, 281, 312, 2489, 13, 51500, 51500], "temperature": 0.0, "avg_logprob": -0.14187406321040918, "compression_ratio": 1.5227272727272727, "no_caption_prob": 5.252024948276812e-06}, {"id": 163, "seek": 100856, "start": 1016.16, "end": 1024.08, "text": " And so there were a lot of situations where I thought the implementation is correct because", "tokens": [50364, 6947, 2517, 390, 1080, 1065, 3414, 293, 439, 264, 28169, 26475, 293, 9450, 13, 50672, 50672, 467, 390, 439, 1096, 490, 8459, 13, 50744, 50744, 400, 370, 456, 645, 257, 688, 295, 6851, 689, 286, 1194, 264, 11420, 307, 3006, 570, 51140, 51176, 264, 636, 300, 286, 8246, 264, 3861, 11, 1203, 6576, 281, 312, 2489, 13, 51500, 51500], "temperature": 0.0, "avg_logprob": -0.14187406321040918, "compression_ratio": 1.5227272727272727, "no_caption_prob": 5.252024948276812e-06}, {"id": 164, "seek": 100856, "start": 1024.8, "end": 1031.28, "text": " the way that I tested the application, everything seemed to be fine.", "tokens": [50364, 6947, 2517, 390, 1080, 1065, 3414, 293, 439, 264, 28169, 26475, 293, 9450, 13, 50672, 50672, 467, 390, 439, 1096, 490, 8459, 13, 50744, 50744, 400, 370, 456, 645, 257, 688, 295, 6851, 689, 286, 1194, 264, 11420, 307, 3006, 570, 51140, 51176, 264, 636, 300, 286, 8246, 264, 3861, 11, 1203, 6576, 281, 312, 2489, 13, 51500, 51500], "temperature": 0.0, "avg_logprob": -0.14187406321040918, "compression_ratio": 1.5227272727272727, "no_caption_prob": 5.252024948276812e-06}, {"id": 165, "seek": 103128, "start": 1031.28, "end": 1039.68, "text": " So if I am on the last line and I click the down arrow, it should move me to the end of", "tokens": [50364, 407, 498, 286, 669, 322, 264, 1036, 1622, 293, 286, 2052, 264, 760, 11610, 11, 309, 820, 1286, 385, 281, 264, 917, 295, 50784, 50784, 264, 1622, 11, 558, 30, 50828, 50828, 467, 4659, 380, 1286, 309, 760, 570, 456, 311, 572, 661, 1622, 13, 50972, 50972, 639, 390, 264, 1036, 472, 13, 51016, 51016, 400, 439, 613, 3331, 11, 286, 727, 519, 295, 512, 11, 457, 286, 632, 572, 1558, 498, 300, 311, 439, 295, 552, 420, 51360, 51360, 498, 456, 307, 512, 5223, 300, 286, 669, 25428, 13, 51496, 51524], "temperature": 0.0, "avg_logprob": -0.08425796285588691, "compression_ratio": 1.6111111111111112, "no_caption_prob": 3.2681793527444825e-05}, {"id": 166, "seek": 103128, "start": 1039.68, "end": 1040.56, "text": " the line, right?", "tokens": [50364, 407, 498, 286, 669, 322, 264, 1036, 1622, 293, 286, 2052, 264, 760, 11610, 11, 309, 820, 1286, 385, 281, 264, 917, 295, 50784, 50784, 264, 1622, 11, 558, 30, 50828, 50828, 467, 4659, 380, 1286, 309, 760, 570, 456, 311, 572, 661, 1622, 13, 50972, 50972, 639, 390, 264, 1036, 472, 13, 51016, 51016, 400, 439, 613, 3331, 11, 286, 727, 519, 295, 512, 11, 457, 286, 632, 572, 1558, 498, 300, 311, 439, 295, 552, 420, 51360, 51360, 498, 456, 307, 512, 5223, 300, 286, 669, 25428, 13, 51496, 51524], "temperature": 0.0, "avg_logprob": -0.08425796285588691, "compression_ratio": 1.6111111111111112, "no_caption_prob": 3.2681793527444825e-05}, {"id": 167, "seek": 103128, "start": 1040.56, "end": 1043.44, "text": " It shouldn't move it down because there's no other line.", "tokens": [50364, 407, 498, 286, 669, 322, 264, 1036, 1622, 293, 286, 2052, 264, 760, 11610, 11, 309, 820, 1286, 385, 281, 264, 917, 295, 50784, 50784, 264, 1622, 11, 558, 30, 50828, 50828, 467, 4659, 380, 1286, 309, 760, 570, 456, 311, 572, 661, 1622, 13, 50972, 50972, 639, 390, 264, 1036, 472, 13, 51016, 51016, 400, 439, 613, 3331, 11, 286, 727, 519, 295, 512, 11, 457, 286, 632, 572, 1558, 498, 300, 311, 439, 295, 552, 420, 51360, 51360, 498, 456, 307, 512, 5223, 300, 286, 669, 25428, 13, 51496, 51524], "temperature": 0.0, "avg_logprob": -0.08425796285588691, "compression_ratio": 1.6111111111111112, "no_caption_prob": 3.2681793527444825e-05}, {"id": 168, "seek": 103128, "start": 1043.44, "end": 1044.32, "text": " This was the last one.", "tokens": [50364, 407, 498, 286, 669, 322, 264, 1036, 1622, 293, 286, 2052, 264, 760, 11610, 11, 309, 820, 1286, 385, 281, 264, 917, 295, 50784, 50784, 264, 1622, 11, 558, 30, 50828, 50828, 467, 4659, 380, 1286, 309, 760, 570, 456, 311, 572, 661, 1622, 13, 50972, 50972, 639, 390, 264, 1036, 472, 13, 51016, 51016, 400, 439, 613, 3331, 11, 286, 727, 519, 295, 512, 11, 457, 286, 632, 572, 1558, 498, 300, 311, 439, 295, 552, 420, 51360, 51360, 498, 456, 307, 512, 5223, 300, 286, 669, 25428, 13, 51496, 51524], "temperature": 0.0, "avg_logprob": -0.08425796285588691, "compression_ratio": 1.6111111111111112, "no_caption_prob": 3.2681793527444825e-05}, {"id": 169, "seek": 103128, "start": 1044.32, "end": 1051.2, "text": " And all these cases, I could think of some, but I had no idea if that's all of them or", "tokens": [50364, 407, 498, 286, 669, 322, 264, 1036, 1622, 293, 286, 2052, 264, 760, 11610, 11, 309, 820, 1286, 385, 281, 264, 917, 295, 50784, 50784, 264, 1622, 11, 558, 30, 50828, 50828, 467, 4659, 380, 1286, 309, 760, 570, 456, 311, 572, 661, 1622, 13, 50972, 50972, 639, 390, 264, 1036, 472, 13, 51016, 51016, 400, 439, 613, 3331, 11, 286, 727, 519, 295, 512, 11, 457, 286, 632, 572, 1558, 498, 300, 311, 439, 295, 552, 420, 51360, 51360, 498, 456, 307, 512, 5223, 300, 286, 669, 25428, 13, 51496, 51524], "temperature": 0.0, "avg_logprob": -0.08425796285588691, "compression_ratio": 1.6111111111111112, "no_caption_prob": 3.2681793527444825e-05}, {"id": 170, "seek": 103128, "start": 1051.2, "end": 1053.92, "text": " if there is some behavior that I am forgetting.", "tokens": [50364, 407, 498, 286, 669, 322, 264, 1036, 1622, 293, 286, 2052, 264, 760, 11610, 11, 309, 820, 1286, 385, 281, 264, 917, 295, 50784, 50784, 264, 1622, 11, 558, 30, 50828, 50828, 467, 4659, 380, 1286, 309, 760, 570, 456, 311, 572, 661, 1622, 13, 50972, 50972, 639, 390, 264, 1036, 472, 13, 51016, 51016, 400, 439, 613, 3331, 11, 286, 727, 519, 295, 512, 11, 457, 286, 632, 572, 1558, 498, 300, 311, 439, 295, 552, 420, 51360, 51360, 498, 456, 307, 512, 5223, 300, 286, 669, 25428, 13, 51496, 51524], "temperature": 0.0, "avg_logprob": -0.08425796285588691, "compression_ratio": 1.6111111111111112, "no_caption_prob": 3.2681793527444825e-05}, {"id": 171, "seek": 105392, "start": 1053.92, "end": 1062.3200000000002, "text": " And so what property based tests were really good about was saying no matter what happens,", "tokens": [50364, 400, 370, 437, 4707, 2361, 6921, 645, 534, 665, 466, 390, 1566, 572, 1871, 437, 2314, 11, 50784, 50784, 572, 1871, 437, 9317, 286, 1886, 11, 572, 1871, 437, 9450, 307, 4362, 4967, 11, 572, 1871, 689, 51076, 51076, 257, 28169, 307, 11, 498, 286, 360, 341, 11, 341, 486, 1051, 11, 558, 30, 51300, 51300, 400, 370, 309, 390, 869, 8295, 264, 3820, 445, 3507, 4974, 7897, 412, 309, 293, 980, 385, 11, 51752, 51752], "temperature": 0.0, "avg_logprob": -0.10384612205700997, "compression_ratio": 1.6842105263157894, "no_caption_prob": 7.95978048699908e-05}, {"id": 172, "seek": 105392, "start": 1062.3200000000002, "end": 1068.16, "text": " no matter what keys I press, no matter what selection is currently active, no matter where", "tokens": [50364, 400, 370, 437, 4707, 2361, 6921, 645, 534, 665, 466, 390, 1566, 572, 1871, 437, 2314, 11, 50784, 50784, 572, 1871, 437, 9317, 286, 1886, 11, 572, 1871, 437, 9450, 307, 4362, 4967, 11, 572, 1871, 689, 51076, 51076, 257, 28169, 307, 11, 498, 286, 360, 341, 11, 341, 486, 1051, 11, 558, 30, 51300, 51300, 400, 370, 309, 390, 869, 8295, 264, 3820, 445, 3507, 4974, 7897, 412, 309, 293, 980, 385, 11, 51752, 51752], "temperature": 0.0, "avg_logprob": -0.10384612205700997, "compression_ratio": 1.6842105263157894, "no_caption_prob": 7.95978048699908e-05}, {"id": 173, "seek": 105392, "start": 1068.16, "end": 1072.64, "text": " a cursor is, if I do this, this will happen, right?", "tokens": [50364, 400, 370, 437, 4707, 2361, 6921, 645, 534, 665, 466, 390, 1566, 572, 1871, 437, 2314, 11, 50784, 50784, 572, 1871, 437, 9317, 286, 1886, 11, 572, 1871, 437, 9450, 307, 4362, 4967, 11, 572, 1871, 689, 51076, 51076, 257, 28169, 307, 11, 498, 286, 360, 341, 11, 341, 486, 1051, 11, 558, 30, 51300, 51300, 400, 370, 309, 390, 869, 8295, 264, 3820, 445, 3507, 4974, 7897, 412, 309, 293, 980, 385, 11, 51752, 51752], "temperature": 0.0, "avg_logprob": -0.10384612205700997, "compression_ratio": 1.6842105263157894, "no_caption_prob": 7.95978048699908e-05}, {"id": 174, "seek": 105392, "start": 1072.64, "end": 1081.68, "text": " And so it was great letting the computer just throw random messages at it and tell me,", "tokens": [50364, 400, 370, 437, 4707, 2361, 6921, 645, 534, 665, 466, 390, 1566, 572, 1871, 437, 2314, 11, 50784, 50784, 572, 1871, 437, 9317, 286, 1886, 11, 572, 1871, 437, 9450, 307, 4362, 4967, 11, 572, 1871, 689, 51076, 51076, 257, 28169, 307, 11, 498, 286, 360, 341, 11, 341, 486, 1051, 11, 558, 30, 51300, 51300, 400, 370, 309, 390, 869, 8295, 264, 3820, 445, 3507, 4974, 7897, 412, 309, 293, 980, 385, 11, 51752, 51752], "temperature": 0.0, "avg_logprob": -0.10384612205700997, "compression_ratio": 1.6842105263157894, "no_caption_prob": 7.95978048699908e-05}, {"id": 175, "seek": 108168, "start": 1081.68, "end": 1089.3600000000001, "text": " hey, no, if you do, I don't know, up arrow, down arrow, left arrow, this happens.", "tokens": [50364, 4177, 11, 572, 11, 498, 291, 360, 11, 286, 500, 380, 458, 11, 493, 11610, 11, 760, 11610, 11, 1411, 11610, 11, 341, 2314, 13, 50748, 50748, 400, 291, 848, 309, 4659, 380, 11, 558, 30, 50812, 50812, 400, 286, 2759, 380, 362, 1194, 295, 300, 1365, 13, 50928, 50928, 407, 286, 519, 534, 2370, 6921, 366, 869, 934, 264, 1186, 11, 934, 291, 4445, 428, 1461, 13, 51304, 51304, 865, 13, 51332, 51332, 467, 311, 534, 1481, 300, 291, 2464, 613, 4985, 6921, 293, 264, 14573, 1920, 264, 912, 636, 11, 51652, 51652], "temperature": 0.0, "avg_logprob": -0.2075683275858561, "compression_ratio": 1.6161137440758293, "no_caption_prob": 0.00010389580711489543}, {"id": 176, "seek": 108168, "start": 1089.3600000000001, "end": 1090.64, "text": " And you said it shouldn't, right?", "tokens": [50364, 4177, 11, 572, 11, 498, 291, 360, 11, 286, 500, 380, 458, 11, 493, 11610, 11, 760, 11610, 11, 1411, 11610, 11, 341, 2314, 13, 50748, 50748, 400, 291, 848, 309, 4659, 380, 11, 558, 30, 50812, 50812, 400, 286, 2759, 380, 362, 1194, 295, 300, 1365, 13, 50928, 50928, 407, 286, 519, 534, 2370, 6921, 366, 869, 934, 264, 1186, 11, 934, 291, 4445, 428, 1461, 13, 51304, 51304, 865, 13, 51332, 51332, 467, 311, 534, 1481, 300, 291, 2464, 613, 4985, 6921, 293, 264, 14573, 1920, 264, 912, 636, 11, 51652, 51652], "temperature": 0.0, "avg_logprob": -0.2075683275858561, "compression_ratio": 1.6161137440758293, "no_caption_prob": 0.00010389580711489543}, {"id": 177, "seek": 108168, "start": 1090.64, "end": 1092.96, "text": " And I wouldn't have thought of that example.", "tokens": [50364, 4177, 11, 572, 11, 498, 291, 360, 11, 286, 500, 380, 458, 11, 493, 11610, 11, 760, 11610, 11, 1411, 11610, 11, 341, 2314, 13, 50748, 50748, 400, 291, 848, 309, 4659, 380, 11, 558, 30, 50812, 50812, 400, 286, 2759, 380, 362, 1194, 295, 300, 1365, 13, 50928, 50928, 407, 286, 519, 534, 2370, 6921, 366, 869, 934, 264, 1186, 11, 934, 291, 4445, 428, 1461, 13, 51304, 51304, 865, 13, 51332, 51332, 467, 311, 534, 1481, 300, 291, 2464, 613, 4985, 6921, 293, 264, 14573, 1920, 264, 912, 636, 11, 51652, 51652], "temperature": 0.0, "avg_logprob": -0.2075683275858561, "compression_ratio": 1.6161137440758293, "no_caption_prob": 0.00010389580711489543}, {"id": 178, "seek": 108168, "start": 1092.96, "end": 1100.48, "text": " So I think really fast tests are great after the fact, after you implement your program.", "tokens": [50364, 4177, 11, 572, 11, 498, 291, 360, 11, 286, 500, 380, 458, 11, 493, 11610, 11, 760, 11610, 11, 1411, 11610, 11, 341, 2314, 13, 50748, 50748, 400, 291, 848, 309, 4659, 380, 11, 558, 30, 50812, 50812, 400, 286, 2759, 380, 362, 1194, 295, 300, 1365, 13, 50928, 50928, 407, 286, 519, 534, 2370, 6921, 366, 869, 934, 264, 1186, 11, 934, 291, 4445, 428, 1461, 13, 51304, 51304, 865, 13, 51332, 51332, 467, 311, 534, 1481, 300, 291, 2464, 613, 4985, 6921, 293, 264, 14573, 1920, 264, 912, 636, 11, 51652, 51652], "temperature": 0.0, "avg_logprob": -0.2075683275858561, "compression_ratio": 1.6161137440758293, "no_caption_prob": 0.00010389580711489543}, {"id": 179, "seek": 108168, "start": 1100.48, "end": 1101.04, "text": " Yeah.", "tokens": [50364, 4177, 11, 572, 11, 498, 291, 360, 11, 286, 500, 380, 458, 11, 493, 11610, 11, 760, 11610, 11, 1411, 11610, 11, 341, 2314, 13, 50748, 50748, 400, 291, 848, 309, 4659, 380, 11, 558, 30, 50812, 50812, 400, 286, 2759, 380, 362, 1194, 295, 300, 1365, 13, 50928, 50928, 407, 286, 519, 534, 2370, 6921, 366, 869, 934, 264, 1186, 11, 934, 291, 4445, 428, 1461, 13, 51304, 51304, 865, 13, 51332, 51332, 467, 311, 534, 1481, 300, 291, 2464, 613, 4985, 6921, 293, 264, 14573, 1920, 264, 912, 636, 11, 51652, 51652], "temperature": 0.0, "avg_logprob": -0.2075683275858561, "compression_ratio": 1.6161137440758293, "no_caption_prob": 0.00010389580711489543}, {"id": 180, "seek": 108168, "start": 1101.04, "end": 1107.44, "text": " It's really nice that you write these unit tests and the fastest almost the same way,", "tokens": [50364, 4177, 11, 572, 11, 498, 291, 360, 11, 286, 500, 380, 458, 11, 493, 11610, 11, 760, 11610, 11, 1411, 11610, 11, 341, 2314, 13, 50748, 50748, 400, 291, 848, 309, 4659, 380, 11, 558, 30, 50812, 50812, 400, 286, 2759, 380, 362, 1194, 295, 300, 1365, 13, 50928, 50928, 407, 286, 519, 534, 2370, 6921, 366, 869, 934, 264, 1186, 11, 934, 291, 4445, 428, 1461, 13, 51304, 51304, 865, 13, 51332, 51332, 467, 311, 534, 1481, 300, 291, 2464, 613, 4985, 6921, 293, 264, 14573, 1920, 264, 912, 636, 11, 51652, 51652], "temperature": 0.0, "avg_logprob": -0.2075683275858561, "compression_ratio": 1.6161137440758293, "no_caption_prob": 0.00010389580711489543}, {"id": 181, "seek": 110744, "start": 1107.44, "end": 1111.92, "text": " especially in the same tool, because you can switch from one to the other much easier than", "tokens": [50364, 2318, 294, 264, 912, 2290, 11, 570, 291, 393, 3679, 490, 472, 281, 264, 661, 709, 3571, 813, 50588, 50588, 498, 291, 632, 281, 2464, 257, 917, 281, 917, 1500, 11, 337, 5197, 11, 689, 291, 352, 337, 10295, 11637, 420, 430, 10504, 3498, 260, 13, 50876, 50876, 1743, 11, 1392, 11, 586, 291, 362, 281, 2464, 1203, 294, 257, 819, 2856, 293, 1228, 257, 819, 51212, 51212, 8388, 13, 51260, 51260, 583, 510, 311, 445, 411, 257, 1326, 4342, 11, 1326, 3876, 295, 1319, 293, 291, 434, 665, 13, 51488, 51488, 7010, 13, 51516, 51516, 865, 13, 51540, 51540, 286, 643, 281, 8634, 766, 341, 9819, 286, 362, 13, 51744, 51744], "temperature": 0.0, "avg_logprob": -0.23032840929533305, "compression_ratio": 1.6141732283464567, "no_caption_prob": 0.00015116232680156827}, {"id": 182, "seek": 110744, "start": 1111.92, "end": 1117.68, "text": " if you had to write a end to end test, for instance, where you go for Cypress or Puppeteer.", "tokens": [50364, 2318, 294, 264, 912, 2290, 11, 570, 291, 393, 3679, 490, 472, 281, 264, 661, 709, 3571, 813, 50588, 50588, 498, 291, 632, 281, 2464, 257, 917, 281, 917, 1500, 11, 337, 5197, 11, 689, 291, 352, 337, 10295, 11637, 420, 430, 10504, 3498, 260, 13, 50876, 50876, 1743, 11, 1392, 11, 586, 291, 362, 281, 2464, 1203, 294, 257, 819, 2856, 293, 1228, 257, 819, 51212, 51212, 8388, 13, 51260, 51260, 583, 510, 311, 445, 411, 257, 1326, 4342, 11, 1326, 3876, 295, 1319, 293, 291, 434, 665, 13, 51488, 51488, 7010, 13, 51516, 51516, 865, 13, 51540, 51540, 286, 643, 281, 8634, 766, 341, 9819, 286, 362, 13, 51744, 51744], "temperature": 0.0, "avg_logprob": -0.23032840929533305, "compression_ratio": 1.6141732283464567, "no_caption_prob": 0.00015116232680156827}, {"id": 183, "seek": 110744, "start": 1117.68, "end": 1124.4, "text": " Like, okay, now you have to write everything in a different language and using a different", "tokens": [50364, 2318, 294, 264, 912, 2290, 11, 570, 291, 393, 3679, 490, 472, 281, 264, 661, 709, 3571, 813, 50588, 50588, 498, 291, 632, 281, 2464, 257, 917, 281, 917, 1500, 11, 337, 5197, 11, 689, 291, 352, 337, 10295, 11637, 420, 430, 10504, 3498, 260, 13, 50876, 50876, 1743, 11, 1392, 11, 586, 291, 362, 281, 2464, 1203, 294, 257, 819, 2856, 293, 1228, 257, 819, 51212, 51212, 8388, 13, 51260, 51260, 583, 510, 311, 445, 411, 257, 1326, 4342, 11, 1326, 3876, 295, 1319, 293, 291, 434, 665, 13, 51488, 51488, 7010, 13, 51516, 51516, 865, 13, 51540, 51540, 286, 643, 281, 8634, 766, 341, 9819, 286, 362, 13, 51744, 51744], "temperature": 0.0, "avg_logprob": -0.23032840929533305, "compression_ratio": 1.6141732283464567, "no_caption_prob": 0.00015116232680156827}, {"id": 184, "seek": 110744, "start": 1124.4, "end": 1125.3600000000001, "text": " framework.", "tokens": [50364, 2318, 294, 264, 912, 2290, 11, 570, 291, 393, 3679, 490, 472, 281, 264, 661, 709, 3571, 813, 50588, 50588, 498, 291, 632, 281, 2464, 257, 917, 281, 917, 1500, 11, 337, 5197, 11, 689, 291, 352, 337, 10295, 11637, 420, 430, 10504, 3498, 260, 13, 50876, 50876, 1743, 11, 1392, 11, 586, 291, 362, 281, 2464, 1203, 294, 257, 819, 2856, 293, 1228, 257, 819, 51212, 51212, 8388, 13, 51260, 51260, 583, 510, 311, 445, 411, 257, 1326, 4342, 11, 1326, 3876, 295, 1319, 293, 291, 434, 665, 13, 51488, 51488, 7010, 13, 51516, 51516, 865, 13, 51540, 51540, 286, 643, 281, 8634, 766, 341, 9819, 286, 362, 13, 51744, 51744], "temperature": 0.0, "avg_logprob": -0.23032840929533305, "compression_ratio": 1.6141732283464567, "no_caption_prob": 0.00015116232680156827}, {"id": 185, "seek": 110744, "start": 1125.3600000000001, "end": 1129.92, "text": " But here's just like a few characters, few lines of change and you're good.", "tokens": [50364, 2318, 294, 264, 912, 2290, 11, 570, 291, 393, 3679, 490, 472, 281, 264, 661, 709, 3571, 813, 50588, 50588, 498, 291, 632, 281, 2464, 257, 917, 281, 917, 1500, 11, 337, 5197, 11, 689, 291, 352, 337, 10295, 11637, 420, 430, 10504, 3498, 260, 13, 50876, 50876, 1743, 11, 1392, 11, 586, 291, 362, 281, 2464, 1203, 294, 257, 819, 2856, 293, 1228, 257, 819, 51212, 51212, 8388, 13, 51260, 51260, 583, 510, 311, 445, 411, 257, 1326, 4342, 11, 1326, 3876, 295, 1319, 293, 291, 434, 665, 13, 51488, 51488, 7010, 13, 51516, 51516, 865, 13, 51540, 51540, 286, 643, 281, 8634, 766, 341, 9819, 286, 362, 13, 51744, 51744], "temperature": 0.0, "avg_logprob": -0.23032840929533305, "compression_ratio": 1.6141732283464567, "no_caption_prob": 0.00015116232680156827}, {"id": 186, "seek": 110744, "start": 1129.92, "end": 1130.48, "text": " Yep.", "tokens": [50364, 2318, 294, 264, 912, 2290, 11, 570, 291, 393, 3679, 490, 472, 281, 264, 661, 709, 3571, 813, 50588, 50588, 498, 291, 632, 281, 2464, 257, 917, 281, 917, 1500, 11, 337, 5197, 11, 689, 291, 352, 337, 10295, 11637, 420, 430, 10504, 3498, 260, 13, 50876, 50876, 1743, 11, 1392, 11, 586, 291, 362, 281, 2464, 1203, 294, 257, 819, 2856, 293, 1228, 257, 819, 51212, 51212, 8388, 13, 51260, 51260, 583, 510, 311, 445, 411, 257, 1326, 4342, 11, 1326, 3876, 295, 1319, 293, 291, 434, 665, 13, 51488, 51488, 7010, 13, 51516, 51516, 865, 13, 51540, 51540, 286, 643, 281, 8634, 766, 341, 9819, 286, 362, 13, 51744, 51744], "temperature": 0.0, "avg_logprob": -0.23032840929533305, "compression_ratio": 1.6141732283464567, "no_caption_prob": 0.00015116232680156827}, {"id": 187, "seek": 110744, "start": 1130.48, "end": 1130.96, "text": " Yeah.", "tokens": [50364, 2318, 294, 264, 912, 2290, 11, 570, 291, 393, 3679, 490, 472, 281, 264, 661, 709, 3571, 813, 50588, 50588, 498, 291, 632, 281, 2464, 257, 917, 281, 917, 1500, 11, 337, 5197, 11, 689, 291, 352, 337, 10295, 11637, 420, 430, 10504, 3498, 260, 13, 50876, 50876, 1743, 11, 1392, 11, 586, 291, 362, 281, 2464, 1203, 294, 257, 819, 2856, 293, 1228, 257, 819, 51212, 51212, 8388, 13, 51260, 51260, 583, 510, 311, 445, 411, 257, 1326, 4342, 11, 1326, 3876, 295, 1319, 293, 291, 434, 665, 13, 51488, 51488, 7010, 13, 51516, 51516, 865, 13, 51540, 51540, 286, 643, 281, 8634, 766, 341, 9819, 286, 362, 13, 51744, 51744], "temperature": 0.0, "avg_logprob": -0.23032840929533305, "compression_ratio": 1.6141732283464567, "no_caption_prob": 0.00015116232680156827}, {"id": 188, "seek": 110744, "start": 1130.96, "end": 1135.04, "text": " I need to dust off this branch I have.", "tokens": [50364, 2318, 294, 264, 912, 2290, 11, 570, 291, 393, 3679, 490, 472, 281, 264, 661, 709, 3571, 813, 50588, 50588, 498, 291, 632, 281, 2464, 257, 917, 281, 917, 1500, 11, 337, 5197, 11, 689, 291, 352, 337, 10295, 11637, 420, 430, 10504, 3498, 260, 13, 50876, 50876, 1743, 11, 1392, 11, 586, 291, 362, 281, 2464, 1203, 294, 257, 819, 2856, 293, 1228, 257, 819, 51212, 51212, 8388, 13, 51260, 51260, 583, 510, 311, 445, 411, 257, 1326, 4342, 11, 1326, 3876, 295, 1319, 293, 291, 434, 665, 13, 51488, 51488, 7010, 13, 51516, 51516, 865, 13, 51540, 51540, 286, 643, 281, 8634, 766, 341, 9819, 286, 362, 13, 51744, 51744], "temperature": 0.0, "avg_logprob": -0.23032840929533305, "compression_ratio": 1.6141732283464567, "no_caption_prob": 0.00015116232680156827}, {"id": 189, "seek": 113504, "start": 1135.04, "end": 1144.6399999999999, "text": " But I've got a branch in my LMarkdown parser that the parser, in Markdown, there's no such", "tokens": [50364, 583, 286, 600, 658, 257, 9819, 294, 452, 441, 15168, 5093, 21156, 260, 300, 264, 21156, 260, 11, 294, 3934, 5093, 11, 456, 311, 572, 1270, 50844, 50844, 551, 382, 34702, 3934, 5093, 13, 50928, 50928, 467, 311, 445, 3934, 5093, 300, 1582, 380, 362, 264, 1802, 291, 5176, 13, 51228, 51228, 1107, 31709, 2113, 294, 3934, 5093, 307, 445, 11121, 2487, 11, 457, 309, 311, 406, 34702, 3934, 5093, 13, 51636, 51636], "temperature": 0.0, "avg_logprob": -0.16481783548990886, "compression_ratio": 1.5889570552147239, "no_caption_prob": 0.00019714196969289333}, {"id": 190, "seek": 113504, "start": 1144.6399999999999, "end": 1146.32, "text": " thing as invalid Markdown.", "tokens": [50364, 583, 286, 600, 658, 257, 9819, 294, 452, 441, 15168, 5093, 21156, 260, 300, 264, 21156, 260, 11, 294, 3934, 5093, 11, 456, 311, 572, 1270, 50844, 50844, 551, 382, 34702, 3934, 5093, 13, 50928, 50928, 467, 311, 445, 3934, 5093, 300, 1582, 380, 362, 264, 1802, 291, 5176, 13, 51228, 51228, 1107, 31709, 2113, 294, 3934, 5093, 307, 445, 11121, 2487, 11, 457, 309, 311, 406, 34702, 3934, 5093, 13, 51636, 51636], "temperature": 0.0, "avg_logprob": -0.16481783548990886, "compression_ratio": 1.5889570552147239, "no_caption_prob": 0.00019714196969289333}, {"id": 191, "seek": 113504, "start": 1146.32, "end": 1152.32, "text": " It's just Markdown that won't have the effect you expected.", "tokens": [50364, 583, 286, 600, 658, 257, 9819, 294, 452, 441, 15168, 5093, 21156, 260, 300, 264, 21156, 260, 11, 294, 3934, 5093, 11, 456, 311, 572, 1270, 50844, 50844, 551, 382, 34702, 3934, 5093, 13, 50928, 50928, 467, 311, 445, 3934, 5093, 300, 1582, 380, 362, 264, 1802, 291, 5176, 13, 51228, 51228, 1107, 31709, 2113, 294, 3934, 5093, 307, 445, 11121, 2487, 11, 457, 309, 311, 406, 34702, 3934, 5093, 13, 51636, 51636], "temperature": 0.0, "avg_logprob": -0.16481783548990886, "compression_ratio": 1.5889570552147239, "no_caption_prob": 0.00019714196969289333}, {"id": 192, "seek": 113504, "start": 1152.32, "end": 1160.48, "text": " An incomplete link in Markdown is just plain text, but it's not invalid Markdown.", "tokens": [50364, 583, 286, 600, 658, 257, 9819, 294, 452, 441, 15168, 5093, 21156, 260, 300, 264, 21156, 260, 11, 294, 3934, 5093, 11, 456, 311, 572, 1270, 50844, 50844, 551, 382, 34702, 3934, 5093, 13, 50928, 50928, 467, 311, 445, 3934, 5093, 300, 1582, 380, 362, 264, 1802, 291, 5176, 13, 51228, 51228, 1107, 31709, 2113, 294, 3934, 5093, 307, 445, 11121, 2487, 11, 457, 309, 311, 406, 34702, 3934, 5093, 13, 51636, 51636], "temperature": 0.0, "avg_logprob": -0.16481783548990886, "compression_ratio": 1.5889570552147239, "no_caption_prob": 0.00019714196969289333}, {"id": 193, "seek": 116048, "start": 1160.48, "end": 1168.0, "text": " So I have a fuzz test that you throw any random string at it and there should be nothing that", "tokens": [50364, 407, 286, 362, 257, 283, 16740, 1500, 300, 291, 3507, 604, 4974, 6798, 412, 309, 293, 456, 820, 312, 1825, 300, 50740, 50740, 575, 364, 2699, 76, 21156, 260, 6713, 13, 50852, 50852, 1779, 13, 50892, 50892, 663, 311, 257, 1238, 15325, 11, 445, 3507, 257, 688, 295, 4846, 412, 309, 13, 51068, 51068, 509, 393, 3811, 1333, 295, 884, 309, 294, 257, 707, 857, 295, 257, 544, 16950, 636, 689, 291, 51428, 51428, 853, 281, 7690, 544, 10995, 15743, 300, 1062, 312, 1101, 412, 283, 904, 571, 484, 13, 51652, 51652], "temperature": 0.0, "avg_logprob": -0.20313822969477227, "compression_ratio": 1.575221238938053, "no_caption_prob": 1.8342092516832054e-05}, {"id": 194, "seek": 116048, "start": 1168.0, "end": 1170.24, "text": " has an Elm parser error.", "tokens": [50364, 407, 286, 362, 257, 283, 16740, 1500, 300, 291, 3507, 604, 4974, 6798, 412, 309, 293, 456, 820, 312, 1825, 300, 50740, 50740, 575, 364, 2699, 76, 21156, 260, 6713, 13, 50852, 50852, 1779, 13, 50892, 50892, 663, 311, 257, 1238, 15325, 11, 445, 3507, 257, 688, 295, 4846, 412, 309, 13, 51068, 51068, 509, 393, 3811, 1333, 295, 884, 309, 294, 257, 707, 857, 295, 257, 544, 16950, 636, 689, 291, 51428, 51428, 853, 281, 7690, 544, 10995, 15743, 300, 1062, 312, 1101, 412, 283, 904, 571, 484, 13, 51652, 51652], "temperature": 0.0, "avg_logprob": -0.20313822969477227, "compression_ratio": 1.575221238938053, "no_caption_prob": 1.8342092516832054e-05}, {"id": 195, "seek": 116048, "start": 1170.24, "end": 1171.04, "text": " Right.", "tokens": [50364, 407, 286, 362, 257, 283, 16740, 1500, 300, 291, 3507, 604, 4974, 6798, 412, 309, 293, 456, 820, 312, 1825, 300, 50740, 50740, 575, 364, 2699, 76, 21156, 260, 6713, 13, 50852, 50852, 1779, 13, 50892, 50892, 663, 311, 257, 1238, 15325, 11, 445, 3507, 257, 688, 295, 4846, 412, 309, 13, 51068, 51068, 509, 393, 3811, 1333, 295, 884, 309, 294, 257, 707, 857, 295, 257, 544, 16950, 636, 689, 291, 51428, 51428, 853, 281, 7690, 544, 10995, 15743, 300, 1062, 312, 1101, 412, 283, 904, 571, 484, 13, 51652, 51652], "temperature": 0.0, "avg_logprob": -0.20313822969477227, "compression_ratio": 1.575221238938053, "no_caption_prob": 1.8342092516832054e-05}, {"id": 196, "seek": 116048, "start": 1171.04, "end": 1174.56, "text": " That's a pretty straightforward, just throw a lot of input at it.", "tokens": [50364, 407, 286, 362, 257, 283, 16740, 1500, 300, 291, 3507, 604, 4974, 6798, 412, 309, 293, 456, 820, 312, 1825, 300, 50740, 50740, 575, 364, 2699, 76, 21156, 260, 6713, 13, 50852, 50852, 1779, 13, 50892, 50892, 663, 311, 257, 1238, 15325, 11, 445, 3507, 257, 688, 295, 4846, 412, 309, 13, 51068, 51068, 509, 393, 3811, 1333, 295, 884, 309, 294, 257, 707, 857, 295, 257, 544, 16950, 636, 689, 291, 51428, 51428, 853, 281, 7690, 544, 10995, 15743, 300, 1062, 312, 1101, 412, 283, 904, 571, 484, 13, 51652, 51652], "temperature": 0.0, "avg_logprob": -0.20313822969477227, "compression_ratio": 1.575221238938053, "no_caption_prob": 1.8342092516832054e-05}, {"id": 197, "seek": 116048, "start": 1174.56, "end": 1181.76, "text": " You can imagine sort of doing it in a little bit of a more sophisticated way where you", "tokens": [50364, 407, 286, 362, 257, 283, 16740, 1500, 300, 291, 3507, 604, 4974, 6798, 412, 309, 293, 456, 820, 312, 1825, 300, 50740, 50740, 575, 364, 2699, 76, 21156, 260, 6713, 13, 50852, 50852, 1779, 13, 50892, 50892, 663, 311, 257, 1238, 15325, 11, 445, 3507, 257, 688, 295, 4846, 412, 309, 13, 51068, 51068, 509, 393, 3811, 1333, 295, 884, 309, 294, 257, 707, 857, 295, 257, 544, 16950, 636, 689, 291, 51428, 51428, 853, 281, 7690, 544, 10995, 15743, 300, 1062, 312, 1101, 412, 283, 904, 571, 484, 13, 51652, 51652], "temperature": 0.0, "avg_logprob": -0.20313822969477227, "compression_ratio": 1.575221238938053, "no_caption_prob": 1.8342092516832054e-05}, {"id": 198, "seek": 116048, "start": 1181.76, "end": 1186.24, "text": " try to construct more meaningful inputs that might be better at fleshing out.", "tokens": [50364, 407, 286, 362, 257, 283, 16740, 1500, 300, 291, 3507, 604, 4974, 6798, 412, 309, 293, 456, 820, 312, 1825, 300, 50740, 50740, 575, 364, 2699, 76, 21156, 260, 6713, 13, 50852, 50852, 1779, 13, 50892, 50892, 663, 311, 257, 1238, 15325, 11, 445, 3507, 257, 688, 295, 4846, 412, 309, 13, 51068, 51068, 509, 393, 3811, 1333, 295, 884, 309, 294, 257, 707, 857, 295, 257, 544, 16950, 636, 689, 291, 51428, 51428, 853, 281, 7690, 544, 10995, 15743, 300, 1062, 312, 1101, 412, 283, 904, 571, 484, 13, 51652, 51652], "temperature": 0.0, "avg_logprob": -0.20313822969477227, "compression_ratio": 1.575221238938053, "no_caption_prob": 1.8342092516832054e-05}, {"id": 199, "seek": 118624, "start": 1186.24, "end": 1191.28, "text": " You can increase the chance of something weird happening.", "tokens": [50364, 509, 393, 3488, 264, 2931, 295, 746, 3657, 2737, 13, 50616, 50616, 865, 13, 50640, 50640, 1779, 13, 50676, 50676, 759, 291, 458, 437, 281, 574, 337, 13, 50760, 50760, 759, 291, 458, 11, 558, 11, 2293, 13, 50832, 50832, 583, 412, 264, 912, 565, 11, 291, 727, 611, 12577, 309, 3030, 264, 721, 291, 434, 1217, 1237, 51044, 51044, 337, 11, 597, 291, 434, 1382, 281, 5042, 13, 51168, 51168, 407, 11, 286, 914, 11, 286, 2041, 291, 727, 360, 1293, 13, 51280, 51280, 509, 727, 584, 11, 510, 311, 445, 257, 3879, 4974, 6798, 13, 51456, 51456, 400, 550, 291, 727, 362, 1071, 283, 16740, 1500, 300, 1619, 11, 510, 307, 257, 992, 295, 2570, 4342, 51760, 51760], "temperature": 0.0, "avg_logprob": -0.14295856288222017, "compression_ratio": 1.6311787072243347, "no_caption_prob": 7.368129445239902e-05}, {"id": 200, "seek": 118624, "start": 1191.28, "end": 1191.76, "text": " Yeah.", "tokens": [50364, 509, 393, 3488, 264, 2931, 295, 746, 3657, 2737, 13, 50616, 50616, 865, 13, 50640, 50640, 1779, 13, 50676, 50676, 759, 291, 458, 437, 281, 574, 337, 13, 50760, 50760, 759, 291, 458, 11, 558, 11, 2293, 13, 50832, 50832, 583, 412, 264, 912, 565, 11, 291, 727, 611, 12577, 309, 3030, 264, 721, 291, 434, 1217, 1237, 51044, 51044, 337, 11, 597, 291, 434, 1382, 281, 5042, 13, 51168, 51168, 407, 11, 286, 914, 11, 286, 2041, 291, 727, 360, 1293, 13, 51280, 51280, 509, 727, 584, 11, 510, 311, 445, 257, 3879, 4974, 6798, 13, 51456, 51456, 400, 550, 291, 727, 362, 1071, 283, 16740, 1500, 300, 1619, 11, 510, 307, 257, 992, 295, 2570, 4342, 51760, 51760], "temperature": 0.0, "avg_logprob": -0.14295856288222017, "compression_ratio": 1.6311787072243347, "no_caption_prob": 7.368129445239902e-05}, {"id": 201, "seek": 118624, "start": 1191.76, "end": 1192.48, "text": " Right.", "tokens": [50364, 509, 393, 3488, 264, 2931, 295, 746, 3657, 2737, 13, 50616, 50616, 865, 13, 50640, 50640, 1779, 13, 50676, 50676, 759, 291, 458, 437, 281, 574, 337, 13, 50760, 50760, 759, 291, 458, 11, 558, 11, 2293, 13, 50832, 50832, 583, 412, 264, 912, 565, 11, 291, 727, 611, 12577, 309, 3030, 264, 721, 291, 434, 1217, 1237, 51044, 51044, 337, 11, 597, 291, 434, 1382, 281, 5042, 13, 51168, 51168, 407, 11, 286, 914, 11, 286, 2041, 291, 727, 360, 1293, 13, 51280, 51280, 509, 727, 584, 11, 510, 311, 445, 257, 3879, 4974, 6798, 13, 51456, 51456, 400, 550, 291, 727, 362, 1071, 283, 16740, 1500, 300, 1619, 11, 510, 307, 257, 992, 295, 2570, 4342, 51760, 51760], "temperature": 0.0, "avg_logprob": -0.14295856288222017, "compression_ratio": 1.6311787072243347, "no_caption_prob": 7.368129445239902e-05}, {"id": 202, "seek": 118624, "start": 1192.48, "end": 1194.16, "text": " If you know what to look for.", "tokens": [50364, 509, 393, 3488, 264, 2931, 295, 746, 3657, 2737, 13, 50616, 50616, 865, 13, 50640, 50640, 1779, 13, 50676, 50676, 759, 291, 458, 437, 281, 574, 337, 13, 50760, 50760, 759, 291, 458, 11, 558, 11, 2293, 13, 50832, 50832, 583, 412, 264, 912, 565, 11, 291, 727, 611, 12577, 309, 3030, 264, 721, 291, 434, 1217, 1237, 51044, 51044, 337, 11, 597, 291, 434, 1382, 281, 5042, 13, 51168, 51168, 407, 11, 286, 914, 11, 286, 2041, 291, 727, 360, 1293, 13, 51280, 51280, 509, 727, 584, 11, 510, 311, 445, 257, 3879, 4974, 6798, 13, 51456, 51456, 400, 550, 291, 727, 362, 1071, 283, 16740, 1500, 300, 1619, 11, 510, 307, 257, 992, 295, 2570, 4342, 51760, 51760], "temperature": 0.0, "avg_logprob": -0.14295856288222017, "compression_ratio": 1.6311787072243347, "no_caption_prob": 7.368129445239902e-05}, {"id": 203, "seek": 118624, "start": 1194.16, "end": 1195.6, "text": " If you know, right, exactly.", "tokens": [50364, 509, 393, 3488, 264, 2931, 295, 746, 3657, 2737, 13, 50616, 50616, 865, 13, 50640, 50640, 1779, 13, 50676, 50676, 759, 291, 458, 437, 281, 574, 337, 13, 50760, 50760, 759, 291, 458, 11, 558, 11, 2293, 13, 50832, 50832, 583, 412, 264, 912, 565, 11, 291, 727, 611, 12577, 309, 3030, 264, 721, 291, 434, 1217, 1237, 51044, 51044, 337, 11, 597, 291, 434, 1382, 281, 5042, 13, 51168, 51168, 407, 11, 286, 914, 11, 286, 2041, 291, 727, 360, 1293, 13, 51280, 51280, 509, 727, 584, 11, 510, 311, 445, 257, 3879, 4974, 6798, 13, 51456, 51456, 400, 550, 291, 727, 362, 1071, 283, 16740, 1500, 300, 1619, 11, 510, 307, 257, 992, 295, 2570, 4342, 51760, 51760], "temperature": 0.0, "avg_logprob": -0.14295856288222017, "compression_ratio": 1.6311787072243347, "no_caption_prob": 7.368129445239902e-05}, {"id": 204, "seek": 118624, "start": 1195.6, "end": 1199.84, "text": " But at the same time, you could also bias it towards the things you're already looking", "tokens": [50364, 509, 393, 3488, 264, 2931, 295, 746, 3657, 2737, 13, 50616, 50616, 865, 13, 50640, 50640, 1779, 13, 50676, 50676, 759, 291, 458, 437, 281, 574, 337, 13, 50760, 50760, 759, 291, 458, 11, 558, 11, 2293, 13, 50832, 50832, 583, 412, 264, 912, 565, 11, 291, 727, 611, 12577, 309, 3030, 264, 721, 291, 434, 1217, 1237, 51044, 51044, 337, 11, 597, 291, 434, 1382, 281, 5042, 13, 51168, 51168, 407, 11, 286, 914, 11, 286, 2041, 291, 727, 360, 1293, 13, 51280, 51280, 509, 727, 584, 11, 510, 311, 445, 257, 3879, 4974, 6798, 13, 51456, 51456, 400, 550, 291, 727, 362, 1071, 283, 16740, 1500, 300, 1619, 11, 510, 307, 257, 992, 295, 2570, 4342, 51760, 51760], "temperature": 0.0, "avg_logprob": -0.14295856288222017, "compression_ratio": 1.6311787072243347, "no_caption_prob": 7.368129445239902e-05}, {"id": 205, "seek": 118624, "start": 1199.84, "end": 1202.32, "text": " for, which you're trying to avoid.", "tokens": [50364, 509, 393, 3488, 264, 2931, 295, 746, 3657, 2737, 13, 50616, 50616, 865, 13, 50640, 50640, 1779, 13, 50676, 50676, 759, 291, 458, 437, 281, 574, 337, 13, 50760, 50760, 759, 291, 458, 11, 558, 11, 2293, 13, 50832, 50832, 583, 412, 264, 912, 565, 11, 291, 727, 611, 12577, 309, 3030, 264, 721, 291, 434, 1217, 1237, 51044, 51044, 337, 11, 597, 291, 434, 1382, 281, 5042, 13, 51168, 51168, 407, 11, 286, 914, 11, 286, 2041, 291, 727, 360, 1293, 13, 51280, 51280, 509, 727, 584, 11, 510, 311, 445, 257, 3879, 4974, 6798, 13, 51456, 51456, 400, 550, 291, 727, 362, 1071, 283, 16740, 1500, 300, 1619, 11, 510, 307, 257, 992, 295, 2570, 4342, 51760, 51760], "temperature": 0.0, "avg_logprob": -0.14295856288222017, "compression_ratio": 1.6311787072243347, "no_caption_prob": 7.368129445239902e-05}, {"id": 206, "seek": 118624, "start": 1202.32, "end": 1204.56, "text": " So, I mean, I guess you could do both.", "tokens": [50364, 509, 393, 3488, 264, 2931, 295, 746, 3657, 2737, 13, 50616, 50616, 865, 13, 50640, 50640, 1779, 13, 50676, 50676, 759, 291, 458, 437, 281, 574, 337, 13, 50760, 50760, 759, 291, 458, 11, 558, 11, 2293, 13, 50832, 50832, 583, 412, 264, 912, 565, 11, 291, 727, 611, 12577, 309, 3030, 264, 721, 291, 434, 1217, 1237, 51044, 51044, 337, 11, 597, 291, 434, 1382, 281, 5042, 13, 51168, 51168, 407, 11, 286, 914, 11, 286, 2041, 291, 727, 360, 1293, 13, 51280, 51280, 509, 727, 584, 11, 510, 311, 445, 257, 3879, 4974, 6798, 13, 51456, 51456, 400, 550, 291, 727, 362, 1071, 283, 16740, 1500, 300, 1619, 11, 510, 307, 257, 992, 295, 2570, 4342, 51760, 51760], "temperature": 0.0, "avg_logprob": -0.14295856288222017, "compression_ratio": 1.6311787072243347, "no_caption_prob": 7.368129445239902e-05}, {"id": 207, "seek": 118624, "start": 1204.56, "end": 1208.08, "text": " You could say, here's just a totally random string.", "tokens": [50364, 509, 393, 3488, 264, 2931, 295, 746, 3657, 2737, 13, 50616, 50616, 865, 13, 50640, 50640, 1779, 13, 50676, 50676, 759, 291, 458, 437, 281, 574, 337, 13, 50760, 50760, 759, 291, 458, 11, 558, 11, 2293, 13, 50832, 50832, 583, 412, 264, 912, 565, 11, 291, 727, 611, 12577, 309, 3030, 264, 721, 291, 434, 1217, 1237, 51044, 51044, 337, 11, 597, 291, 434, 1382, 281, 5042, 13, 51168, 51168, 407, 11, 286, 914, 11, 286, 2041, 291, 727, 360, 1293, 13, 51280, 51280, 509, 727, 584, 11, 510, 311, 445, 257, 3879, 4974, 6798, 13, 51456, 51456, 400, 550, 291, 727, 362, 1071, 283, 16740, 1500, 300, 1619, 11, 510, 307, 257, 992, 295, 2570, 4342, 51760, 51760], "temperature": 0.0, "avg_logprob": -0.14295856288222017, "compression_ratio": 1.6311787072243347, "no_caption_prob": 7.368129445239902e-05}, {"id": 208, "seek": 118624, "start": 1208.08, "end": 1214.16, "text": " And then you could have another fuzz test that says, here is a set of known characters", "tokens": [50364, 509, 393, 3488, 264, 2931, 295, 746, 3657, 2737, 13, 50616, 50616, 865, 13, 50640, 50640, 1779, 13, 50676, 50676, 759, 291, 458, 437, 281, 574, 337, 13, 50760, 50760, 759, 291, 458, 11, 558, 11, 2293, 13, 50832, 50832, 583, 412, 264, 912, 565, 11, 291, 727, 611, 12577, 309, 3030, 264, 721, 291, 434, 1217, 1237, 51044, 51044, 337, 11, 597, 291, 434, 1382, 281, 5042, 13, 51168, 51168, 407, 11, 286, 914, 11, 286, 2041, 291, 727, 360, 1293, 13, 51280, 51280, 509, 727, 584, 11, 510, 311, 445, 257, 3879, 4974, 6798, 13, 51456, 51456, 400, 550, 291, 727, 362, 1071, 283, 16740, 1500, 300, 1619, 11, 510, 307, 257, 992, 295, 2570, 4342, 51760, 51760], "temperature": 0.0, "avg_logprob": -0.14295856288222017, "compression_ratio": 1.6311787072243347, "no_caption_prob": 7.368129445239902e-05}, {"id": 209, "seek": 121416, "start": 1214.16, "end": 1220.0800000000002, "text": " that could cause problems in unfinished HTML tag, unfinished link tag.", "tokens": [50364, 300, 727, 3082, 2740, 294, 41037, 17995, 6162, 11, 41037, 2113, 6162, 13, 50660, 50660, 865, 13, 50696, 50696, 865, 13, 50728, 50728, 400, 321, 362, 3873, 337, 300, 11, 558, 30, 50816, 50816, 492, 360, 362, 411, 341, 472, 295, 2445, 293, 309, 311, 411, 33733, 411, 20250, 293, 32807, 51180, 51180, 293, 4461, 729, 366, 1219, 689, 291, 393, 584, 11, 2264, 11, 4289, 4, 295, 264, 565, 976, 385, 341, 4974, 51536, 51536], "temperature": 0.0, "avg_logprob": -0.16823519193209135, "compression_ratio": 1.4536585365853658, "no_caption_prob": 1.9524750314303674e-05}, {"id": 210, "seek": 121416, "start": 1220.0800000000002, "end": 1220.8000000000002, "text": " Yeah.", "tokens": [50364, 300, 727, 3082, 2740, 294, 41037, 17995, 6162, 11, 41037, 2113, 6162, 13, 50660, 50660, 865, 13, 50696, 50696, 865, 13, 50728, 50728, 400, 321, 362, 3873, 337, 300, 11, 558, 30, 50816, 50816, 492, 360, 362, 411, 341, 472, 295, 2445, 293, 309, 311, 411, 33733, 411, 20250, 293, 32807, 51180, 51180, 293, 4461, 729, 366, 1219, 689, 291, 393, 584, 11, 2264, 11, 4289, 4, 295, 264, 565, 976, 385, 341, 4974, 51536, 51536], "temperature": 0.0, "avg_logprob": -0.16823519193209135, "compression_ratio": 1.4536585365853658, "no_caption_prob": 1.9524750314303674e-05}, {"id": 211, "seek": 121416, "start": 1220.8000000000002, "end": 1221.44, "text": " Yeah.", "tokens": [50364, 300, 727, 3082, 2740, 294, 41037, 17995, 6162, 11, 41037, 2113, 6162, 13, 50660, 50660, 865, 13, 50696, 50696, 865, 13, 50728, 50728, 400, 321, 362, 3873, 337, 300, 11, 558, 30, 50816, 50816, 492, 360, 362, 411, 341, 472, 295, 2445, 293, 309, 311, 411, 33733, 411, 20250, 293, 32807, 51180, 51180, 293, 4461, 729, 366, 1219, 689, 291, 393, 584, 11, 2264, 11, 4289, 4, 295, 264, 565, 976, 385, 341, 4974, 51536, 51536], "temperature": 0.0, "avg_logprob": -0.16823519193209135, "compression_ratio": 1.4536585365853658, "no_caption_prob": 1.9524750314303674e-05}, {"id": 212, "seek": 121416, "start": 1221.44, "end": 1223.2, "text": " And we have tools for that, right?", "tokens": [50364, 300, 727, 3082, 2740, 294, 41037, 17995, 6162, 11, 41037, 2113, 6162, 13, 50660, 50660, 865, 13, 50696, 50696, 865, 13, 50728, 50728, 400, 321, 362, 3873, 337, 300, 11, 558, 30, 50816, 50816, 492, 360, 362, 411, 341, 472, 295, 2445, 293, 309, 311, 411, 33733, 411, 20250, 293, 32807, 51180, 51180, 293, 4461, 729, 366, 1219, 689, 291, 393, 584, 11, 2264, 11, 4289, 4, 295, 264, 565, 976, 385, 341, 4974, 51536, 51536], "temperature": 0.0, "avg_logprob": -0.16823519193209135, "compression_ratio": 1.4536585365853658, "no_caption_prob": 1.9524750314303674e-05}, {"id": 213, "seek": 121416, "start": 1223.2, "end": 1230.48, "text": " We do have like this one of function and it's like derivatives like frequencies and weighted", "tokens": [50364, 300, 727, 3082, 2740, 294, 41037, 17995, 6162, 11, 41037, 2113, 6162, 13, 50660, 50660, 865, 13, 50696, 50696, 865, 13, 50728, 50728, 400, 321, 362, 3873, 337, 300, 11, 558, 30, 50816, 50816, 492, 360, 362, 411, 341, 472, 295, 2445, 293, 309, 311, 411, 33733, 411, 20250, 293, 32807, 51180, 51180, 293, 4461, 729, 366, 1219, 689, 291, 393, 584, 11, 2264, 11, 4289, 4, 295, 264, 565, 976, 385, 341, 4974, 51536, 51536], "temperature": 0.0, "avg_logprob": -0.16823519193209135, "compression_ratio": 1.4536585365853658, "no_caption_prob": 1.9524750314303674e-05}, {"id": 214, "seek": 121416, "start": 1230.48, "end": 1237.6000000000001, "text": " and however those are called where you can say, OK, 90% of the time give me this random", "tokens": [50364, 300, 727, 3082, 2740, 294, 41037, 17995, 6162, 11, 41037, 2113, 6162, 13, 50660, 50660, 865, 13, 50696, 50696, 865, 13, 50728, 50728, 400, 321, 362, 3873, 337, 300, 11, 558, 30, 50816, 50816, 492, 360, 362, 411, 341, 472, 295, 2445, 293, 309, 311, 411, 33733, 411, 20250, 293, 32807, 51180, 51180, 293, 4461, 729, 366, 1219, 689, 291, 393, 584, 11, 2264, 11, 4289, 4, 295, 264, 565, 976, 385, 341, 4974, 51536, 51536], "temperature": 0.0, "avg_logprob": -0.16823519193209135, "compression_ratio": 1.4536585365853658, "no_caption_prob": 1.9524750314303674e-05}, {"id": 215, "seek": 123760, "start": 1237.6, "end": 1244.7199999999998, "text": " string and 10% of the time give me this like carefully constructed, like tricky string.", "tokens": [50364, 6798, 293, 1266, 4, 295, 264, 565, 976, 385, 341, 411, 7500, 17083, 11, 411, 12414, 6798, 13, 50720, 50752, 400, 291, 393, 3679, 264, 17443, 13, 50944, 50944, 509, 393, 1319, 300, 13, 50992, 51040, 509, 458, 11, 746, 307, 291, 393, 3679, 264, 17443, 293, 291, 393, 915, 257, 4772, 689, 309, 311, 51392, 51392, 884, 4420, 589, 11, 457, 291, 393, 920, 312, 988, 300, 309, 486, 853, 439, 264, 3219, 4974, 721, 51752, 51752], "temperature": 0.0, "avg_logprob": -0.16126089096069335, "compression_ratio": 1.6476683937823835, "no_caption_prob": 5.387431519920938e-05}, {"id": 216, "seek": 123760, "start": 1245.36, "end": 1249.1999999999998, "text": " And you can switch the weights.", "tokens": [50364, 6798, 293, 1266, 4, 295, 264, 565, 976, 385, 341, 411, 7500, 17083, 11, 411, 12414, 6798, 13, 50720, 50752, 400, 291, 393, 3679, 264, 17443, 13, 50944, 50944, 509, 393, 1319, 300, 13, 50992, 51040, 509, 458, 11, 746, 307, 291, 393, 3679, 264, 17443, 293, 291, 393, 915, 257, 4772, 689, 309, 311, 51392, 51392, 884, 4420, 589, 11, 457, 291, 393, 920, 312, 988, 300, 309, 486, 853, 439, 264, 3219, 4974, 721, 51752, 51752], "temperature": 0.0, "avg_logprob": -0.16126089096069335, "compression_ratio": 1.6476683937823835, "no_caption_prob": 5.387431519920938e-05}, {"id": 217, "seek": 123760, "start": 1249.1999999999998, "end": 1250.1599999999999, "text": " You can change that.", "tokens": [50364, 6798, 293, 1266, 4, 295, 264, 565, 976, 385, 341, 411, 7500, 17083, 11, 411, 12414, 6798, 13, 50720, 50752, 400, 291, 393, 3679, 264, 17443, 13, 50944, 50944, 509, 393, 1319, 300, 13, 50992, 51040, 509, 458, 11, 746, 307, 291, 393, 3679, 264, 17443, 293, 291, 393, 915, 257, 4772, 689, 309, 311, 51392, 51392, 884, 4420, 589, 11, 457, 291, 393, 920, 312, 988, 300, 309, 486, 853, 439, 264, 3219, 4974, 721, 51752, 51752], "temperature": 0.0, "avg_logprob": -0.16126089096069335, "compression_ratio": 1.6476683937823835, "no_caption_prob": 5.387431519920938e-05}, {"id": 218, "seek": 123760, "start": 1251.12, "end": 1258.1599999999999, "text": " You know, something is you can switch the weights and you can find a balance where it's", "tokens": [50364, 6798, 293, 1266, 4, 295, 264, 565, 976, 385, 341, 411, 7500, 17083, 11, 411, 12414, 6798, 13, 50720, 50752, 400, 291, 393, 3679, 264, 17443, 13, 50944, 50944, 509, 393, 1319, 300, 13, 50992, 51040, 509, 458, 11, 746, 307, 291, 393, 3679, 264, 17443, 293, 291, 393, 915, 257, 4772, 689, 309, 311, 51392, 51392, 884, 4420, 589, 11, 457, 291, 393, 920, 312, 988, 300, 309, 486, 853, 439, 264, 3219, 4974, 721, 51752, 51752], "temperature": 0.0, "avg_logprob": -0.16126089096069335, "compression_ratio": 1.6476683937823835, "no_caption_prob": 5.387431519920938e-05}, {"id": 219, "seek": 123760, "start": 1258.1599999999999, "end": 1265.36, "text": " doing useful work, but you can still be sure that it will try all the crazy random things", "tokens": [50364, 6798, 293, 1266, 4, 295, 264, 565, 976, 385, 341, 411, 7500, 17083, 11, 411, 12414, 6798, 13, 50720, 50752, 400, 291, 393, 3679, 264, 17443, 13, 50944, 50944, 509, 393, 1319, 300, 13, 50992, 51040, 509, 458, 11, 746, 307, 291, 393, 3679, 264, 17443, 293, 291, 393, 915, 257, 4772, 689, 309, 311, 51392, 51392, 884, 4420, 589, 11, 457, 291, 393, 920, 312, 988, 300, 309, 486, 853, 439, 264, 3219, 4974, 721, 51752, 51752], "temperature": 0.0, "avg_logprob": -0.16126089096069335, "compression_ratio": 1.6476683937823835, "no_caption_prob": 5.387431519920938e-05}, {"id": 220, "seek": 126536, "start": 1265.36, "end": 1270.56, "text": " that you didn't think of with the totally random, uniformly random string.", "tokens": [50364, 300, 291, 994, 380, 519, 295, 365, 264, 3879, 4974, 11, 48806, 4974, 6798, 13, 50624, 50624, 865, 13, 50636, 50664, 1012, 709, 6687, 360, 291, 362, 300, 283, 16740, 1500, 486, 4411, 746, 498, 456, 307, 746, 50952, 50992, 281, 312, 1352, 30, 51040, 51040, 1436, 286, 519, 538, 7576, 11, 436, 1190, 411, 2319, 819, 15743, 13, 51240, 51268, 407, 337, 5197, 11, 337, 5006, 13603, 294, 257, 17362, 760, 21156, 260, 11, 411, 1160, 18610, 486, 915, 746, 51584, 51584, 2171, 11, 457, 6779, 1062, 312, 2295, 13, 51812, 51812], "temperature": 0.0, "avg_logprob": -0.16634612836335835, "compression_ratio": 1.5555555555555556, "no_caption_prob": 2.5864015697152354e-05}, {"id": 221, "seek": 126536, "start": 1270.56, "end": 1270.8, "text": " Yeah.", "tokens": [50364, 300, 291, 994, 380, 519, 295, 365, 264, 3879, 4974, 11, 48806, 4974, 6798, 13, 50624, 50624, 865, 13, 50636, 50664, 1012, 709, 6687, 360, 291, 362, 300, 283, 16740, 1500, 486, 4411, 746, 498, 456, 307, 746, 50952, 50992, 281, 312, 1352, 30, 51040, 51040, 1436, 286, 519, 538, 7576, 11, 436, 1190, 411, 2319, 819, 15743, 13, 51240, 51268, 407, 337, 5197, 11, 337, 5006, 13603, 294, 257, 17362, 760, 21156, 260, 11, 411, 1160, 18610, 486, 915, 746, 51584, 51584, 2171, 11, 457, 6779, 1062, 312, 2295, 13, 51812, 51812], "temperature": 0.0, "avg_logprob": -0.16634612836335835, "compression_ratio": 1.5555555555555556, "no_caption_prob": 2.5864015697152354e-05}, {"id": 222, "seek": 126536, "start": 1271.36, "end": 1277.12, "text": " How much confidence do you have that fuzz test will discover something if there is something", "tokens": [50364, 300, 291, 994, 380, 519, 295, 365, 264, 3879, 4974, 11, 48806, 4974, 6798, 13, 50624, 50624, 865, 13, 50636, 50664, 1012, 709, 6687, 360, 291, 362, 300, 283, 16740, 1500, 486, 4411, 746, 498, 456, 307, 746, 50952, 50992, 281, 312, 1352, 30, 51040, 51040, 1436, 286, 519, 538, 7576, 11, 436, 1190, 411, 2319, 819, 15743, 13, 51240, 51268, 407, 337, 5197, 11, 337, 5006, 13603, 294, 257, 17362, 760, 21156, 260, 11, 411, 1160, 18610, 486, 915, 746, 51584, 51584, 2171, 11, 457, 6779, 1062, 312, 2295, 13, 51812, 51812], "temperature": 0.0, "avg_logprob": -0.16634612836335835, "compression_ratio": 1.5555555555555556, "no_caption_prob": 2.5864015697152354e-05}, {"id": 223, "seek": 126536, "start": 1277.9199999999998, "end": 1278.8799999999999, "text": " to be found?", "tokens": [50364, 300, 291, 994, 380, 519, 295, 365, 264, 3879, 4974, 11, 48806, 4974, 6798, 13, 50624, 50624, 865, 13, 50636, 50664, 1012, 709, 6687, 360, 291, 362, 300, 283, 16740, 1500, 486, 4411, 746, 498, 456, 307, 746, 50952, 50992, 281, 312, 1352, 30, 51040, 51040, 1436, 286, 519, 538, 7576, 11, 436, 1190, 411, 2319, 819, 15743, 13, 51240, 51268, 407, 337, 5197, 11, 337, 5006, 13603, 294, 257, 17362, 760, 21156, 260, 11, 411, 1160, 18610, 486, 915, 746, 51584, 51584, 2171, 11, 457, 6779, 1062, 312, 2295, 13, 51812, 51812], "temperature": 0.0, "avg_logprob": -0.16634612836335835, "compression_ratio": 1.5555555555555556, "no_caption_prob": 2.5864015697152354e-05}, {"id": 224, "seek": 126536, "start": 1278.8799999999999, "end": 1282.8799999999999, "text": " Because I think by default, they run like 100 different inputs.", "tokens": [50364, 300, 291, 994, 380, 519, 295, 365, 264, 3879, 4974, 11, 48806, 4974, 6798, 13, 50624, 50624, 865, 13, 50636, 50664, 1012, 709, 6687, 360, 291, 362, 300, 283, 16740, 1500, 486, 4411, 746, 498, 456, 307, 746, 50952, 50992, 281, 312, 1352, 30, 51040, 51040, 1436, 286, 519, 538, 7576, 11, 436, 1190, 411, 2319, 819, 15743, 13, 51240, 51268, 407, 337, 5197, 11, 337, 5006, 13603, 294, 257, 17362, 760, 21156, 260, 11, 411, 1160, 18610, 486, 915, 746, 51584, 51584, 2171, 11, 457, 6779, 1062, 312, 2295, 13, 51812, 51812], "temperature": 0.0, "avg_logprob": -0.16634612836335835, "compression_ratio": 1.5555555555555556, "no_caption_prob": 2.5864015697152354e-05}, {"id": 225, "seek": 126536, "start": 1283.4399999999998, "end": 1289.76, "text": " So for instance, for finding errors in a mock down parser, like Shirk will find something", "tokens": [50364, 300, 291, 994, 380, 519, 295, 365, 264, 3879, 4974, 11, 48806, 4974, 6798, 13, 50624, 50624, 865, 13, 50636, 50664, 1012, 709, 6687, 360, 291, 362, 300, 283, 16740, 1500, 486, 4411, 746, 498, 456, 307, 746, 50952, 50992, 281, 312, 1352, 30, 51040, 51040, 1436, 286, 519, 538, 7576, 11, 436, 1190, 411, 2319, 819, 15743, 13, 51240, 51268, 407, 337, 5197, 11, 337, 5006, 13603, 294, 257, 17362, 760, 21156, 260, 11, 411, 1160, 18610, 486, 915, 746, 51584, 51584, 2171, 11, 457, 6779, 1062, 312, 2295, 13, 51812, 51812], "temperature": 0.0, "avg_logprob": -0.16634612836335835, "compression_ratio": 1.5555555555555556, "no_caption_prob": 2.5864015697152354e-05}, {"id": 226, "seek": 126536, "start": 1289.76, "end": 1294.32, "text": " sometimes, but hundreds might be low.", "tokens": [50364, 300, 291, 994, 380, 519, 295, 365, 264, 3879, 4974, 11, 48806, 4974, 6798, 13, 50624, 50624, 865, 13, 50636, 50664, 1012, 709, 6687, 360, 291, 362, 300, 283, 16740, 1500, 486, 4411, 746, 498, 456, 307, 746, 50952, 50992, 281, 312, 1352, 30, 51040, 51040, 1436, 286, 519, 538, 7576, 11, 436, 1190, 411, 2319, 819, 15743, 13, 51240, 51268, 407, 337, 5197, 11, 337, 5006, 13603, 294, 257, 17362, 760, 21156, 260, 11, 411, 1160, 18610, 486, 915, 746, 51584, 51584, 2171, 11, 457, 6779, 1062, 312, 2295, 13, 51812, 51812], "temperature": 0.0, "avg_logprob": -0.16634612836335835, "compression_ratio": 1.5555555555555556, "no_caption_prob": 2.5864015697152354e-05}, {"id": 227, "seek": 129432, "start": 1294.32, "end": 1297.2, "text": " So you might not trust it in the first run at least.", "tokens": [50364, 407, 291, 1062, 406, 3361, 309, 294, 264, 700, 1190, 412, 1935, 13, 50508, 50540, 865, 13, 50556, 50556, 865, 13, 50568, 50604, 2319, 1062, 312, 257, 707, 857, 886, 2295, 337, 300, 1491, 5093, 1365, 570, 13985, 366, 411, 50832, 50832, 16641, 293, 420, 412, 1935, 365, 3217, 4974, 6798, 19265, 11, 2319, 1062, 312, 886, 707, 13, 51196, 51196, 583, 498, 291, 632, 341, 733, 295, 411, 11, 718, 311, 1884, 452, 6798, 490, 411, 11, 341, 307, 257, 2710, 1002, 13, 51580, 51580, 639, 307, 257, 2113, 13, 51620, 51620, 639, 307, 11, 291, 458, 11, 2113, 365, 5361, 34153, 293, 411, 439, 613, 819, 1507, 13, 51856], "temperature": 0.0, "avg_logprob": -0.1717991955512393, "compression_ratio": 1.724, "no_caption_prob": 8.478337986161932e-05}, {"id": 228, "seek": 129432, "start": 1297.84, "end": 1298.1599999999999, "text": " Yeah.", "tokens": [50364, 407, 291, 1062, 406, 3361, 309, 294, 264, 700, 1190, 412, 1935, 13, 50508, 50540, 865, 13, 50556, 50556, 865, 13, 50568, 50604, 2319, 1062, 312, 257, 707, 857, 886, 2295, 337, 300, 1491, 5093, 1365, 570, 13985, 366, 411, 50832, 50832, 16641, 293, 420, 412, 1935, 365, 3217, 4974, 6798, 19265, 11, 2319, 1062, 312, 886, 707, 13, 51196, 51196, 583, 498, 291, 632, 341, 733, 295, 411, 11, 718, 311, 1884, 452, 6798, 490, 411, 11, 341, 307, 257, 2710, 1002, 13, 51580, 51580, 639, 307, 257, 2113, 13, 51620, 51620, 639, 307, 11, 291, 458, 11, 2113, 365, 5361, 34153, 293, 411, 439, 613, 819, 1507, 13, 51856], "temperature": 0.0, "avg_logprob": -0.1717991955512393, "compression_ratio": 1.724, "no_caption_prob": 8.478337986161932e-05}, {"id": 229, "seek": 129432, "start": 1298.1599999999999, "end": 1298.3999999999999, "text": " Yeah.", "tokens": [50364, 407, 291, 1062, 406, 3361, 309, 294, 264, 700, 1190, 412, 1935, 13, 50508, 50540, 865, 13, 50556, 50556, 865, 13, 50568, 50604, 2319, 1062, 312, 257, 707, 857, 886, 2295, 337, 300, 1491, 5093, 1365, 570, 13985, 366, 411, 50832, 50832, 16641, 293, 420, 412, 1935, 365, 3217, 4974, 6798, 19265, 11, 2319, 1062, 312, 886, 707, 13, 51196, 51196, 583, 498, 291, 632, 341, 733, 295, 411, 11, 718, 311, 1884, 452, 6798, 490, 411, 11, 341, 307, 257, 2710, 1002, 13, 51580, 51580, 639, 307, 257, 2113, 13, 51620, 51620, 639, 307, 11, 291, 458, 11, 2113, 365, 5361, 34153, 293, 411, 439, 613, 819, 1507, 13, 51856], "temperature": 0.0, "avg_logprob": -0.1717991955512393, "compression_ratio": 1.724, "no_caption_prob": 8.478337986161932e-05}, {"id": 230, "seek": 129432, "start": 1299.12, "end": 1303.6799999999998, "text": " 100 might be a little bit too low for that markdown example because strings are like", "tokens": [50364, 407, 291, 1062, 406, 3361, 309, 294, 264, 700, 1190, 412, 1935, 13, 50508, 50540, 865, 13, 50556, 50556, 865, 13, 50568, 50604, 2319, 1062, 312, 257, 707, 857, 886, 2295, 337, 300, 1491, 5093, 1365, 570, 13985, 366, 411, 50832, 50832, 16641, 293, 420, 412, 1935, 365, 3217, 4974, 6798, 19265, 11, 2319, 1062, 312, 886, 707, 13, 51196, 51196, 583, 498, 291, 632, 341, 733, 295, 411, 11, 718, 311, 1884, 452, 6798, 490, 411, 11, 341, 307, 257, 2710, 1002, 13, 51580, 51580, 639, 307, 257, 2113, 13, 51620, 51620, 639, 307, 11, 291, 458, 11, 2113, 365, 5361, 34153, 293, 411, 439, 613, 819, 1507, 13, 51856], "temperature": 0.0, "avg_logprob": -0.1717991955512393, "compression_ratio": 1.724, "no_caption_prob": 8.478337986161932e-05}, {"id": 231, "seek": 129432, "start": 1303.6799999999998, "end": 1310.96, "text": " collections and or at least with total random string generator, 100 might be too little.", "tokens": [50364, 407, 291, 1062, 406, 3361, 309, 294, 264, 700, 1190, 412, 1935, 13, 50508, 50540, 865, 13, 50556, 50556, 865, 13, 50568, 50604, 2319, 1062, 312, 257, 707, 857, 886, 2295, 337, 300, 1491, 5093, 1365, 570, 13985, 366, 411, 50832, 50832, 16641, 293, 420, 412, 1935, 365, 3217, 4974, 6798, 19265, 11, 2319, 1062, 312, 886, 707, 13, 51196, 51196, 583, 498, 291, 632, 341, 733, 295, 411, 11, 718, 311, 1884, 452, 6798, 490, 411, 11, 341, 307, 257, 2710, 1002, 13, 51580, 51580, 639, 307, 257, 2113, 13, 51620, 51620, 639, 307, 11, 291, 458, 11, 2113, 365, 5361, 34153, 293, 411, 439, 613, 819, 1507, 13, 51856], "temperature": 0.0, "avg_logprob": -0.1717991955512393, "compression_ratio": 1.724, "no_caption_prob": 8.478337986161932e-05}, {"id": 232, "seek": 129432, "start": 1310.96, "end": 1318.6399999999999, "text": " But if you had this kind of like, let's create my string from like, this is a normal world.", "tokens": [50364, 407, 291, 1062, 406, 3361, 309, 294, 264, 700, 1190, 412, 1935, 13, 50508, 50540, 865, 13, 50556, 50556, 865, 13, 50568, 50604, 2319, 1062, 312, 257, 707, 857, 886, 2295, 337, 300, 1491, 5093, 1365, 570, 13985, 366, 411, 50832, 50832, 16641, 293, 420, 412, 1935, 365, 3217, 4974, 6798, 19265, 11, 2319, 1062, 312, 886, 707, 13, 51196, 51196, 583, 498, 291, 632, 341, 733, 295, 411, 11, 718, 311, 1884, 452, 6798, 490, 411, 11, 341, 307, 257, 2710, 1002, 13, 51580, 51580, 639, 307, 257, 2113, 13, 51620, 51620, 639, 307, 11, 291, 458, 11, 2113, 365, 5361, 34153, 293, 411, 439, 613, 819, 1507, 13, 51856], "temperature": 0.0, "avg_logprob": -0.1717991955512393, "compression_ratio": 1.724, "no_caption_prob": 8.478337986161932e-05}, {"id": 233, "seek": 129432, "start": 1318.6399999999999, "end": 1319.4399999999998, "text": " This is a link.", "tokens": [50364, 407, 291, 1062, 406, 3361, 309, 294, 264, 700, 1190, 412, 1935, 13, 50508, 50540, 865, 13, 50556, 50556, 865, 13, 50568, 50604, 2319, 1062, 312, 257, 707, 857, 886, 2295, 337, 300, 1491, 5093, 1365, 570, 13985, 366, 411, 50832, 50832, 16641, 293, 420, 412, 1935, 365, 3217, 4974, 6798, 19265, 11, 2319, 1062, 312, 886, 707, 13, 51196, 51196, 583, 498, 291, 632, 341, 733, 295, 411, 11, 718, 311, 1884, 452, 6798, 490, 411, 11, 341, 307, 257, 2710, 1002, 13, 51580, 51580, 639, 307, 257, 2113, 13, 51620, 51620, 639, 307, 11, 291, 458, 11, 2113, 365, 5361, 34153, 293, 411, 439, 613, 819, 1507, 13, 51856], "temperature": 0.0, "avg_logprob": -0.1717991955512393, "compression_ratio": 1.724, "no_caption_prob": 8.478337986161932e-05}, {"id": 234, "seek": 131944, "start": 1319.44, "end": 1325.44, "text": " This is, you know, with missing parentheses and like all these different stuff where these", "tokens": [50364, 639, 307, 11, 291, 458, 11, 365, 5361, 34153, 293, 411, 439, 613, 819, 1507, 689, 613, 50664, 50664, 24004, 366, 3801, 11, 550, 291, 1062, 2060, 264, 1901, 1101, 13, 50976, 50976, 400, 370, 291, 1062, 643, 1570, 6921, 11, 457, 2138, 5413, 322, 437, 291, 366, 4997, 11, 291, 393, 51264, 51264, 584, 11, 1392, 11, 718, 311, 1190, 613, 283, 16740, 6921, 13, 51416, 51416, 509, 458, 11, 718, 311, 1190, 257, 2459, 295, 552, 2602, 295, 2319, 13, 51612, 51612, 1779, 13, 51644, 51644], "temperature": 0.0, "avg_logprob": -0.11094838248358832, "compression_ratio": 1.5813953488372092, "no_caption_prob": 7.12125183781609e-05}, {"id": 235, "seek": 131944, "start": 1325.44, "end": 1331.68, "text": " chunks are bigger, then you might cover the space better.", "tokens": [50364, 639, 307, 11, 291, 458, 11, 365, 5361, 34153, 293, 411, 439, 613, 819, 1507, 689, 613, 50664, 50664, 24004, 366, 3801, 11, 550, 291, 1062, 2060, 264, 1901, 1101, 13, 50976, 50976, 400, 370, 291, 1062, 643, 1570, 6921, 11, 457, 2138, 5413, 322, 437, 291, 366, 4997, 11, 291, 393, 51264, 51264, 584, 11, 1392, 11, 718, 311, 1190, 613, 283, 16740, 6921, 13, 51416, 51416, 509, 458, 11, 718, 311, 1190, 257, 2459, 295, 552, 2602, 295, 2319, 13, 51612, 51612, 1779, 13, 51644, 51644], "temperature": 0.0, "avg_logprob": -0.11094838248358832, "compression_ratio": 1.5813953488372092, "no_caption_prob": 7.12125183781609e-05}, {"id": 236, "seek": 131944, "start": 1331.68, "end": 1337.44, "text": " And so you might need less tests, but definitely depending on what you are testing, you can", "tokens": [50364, 639, 307, 11, 291, 458, 11, 365, 5361, 34153, 293, 411, 439, 613, 819, 1507, 689, 613, 50664, 50664, 24004, 366, 3801, 11, 550, 291, 1062, 2060, 264, 1901, 1101, 13, 50976, 50976, 400, 370, 291, 1062, 643, 1570, 6921, 11, 457, 2138, 5413, 322, 437, 291, 366, 4997, 11, 291, 393, 51264, 51264, 584, 11, 1392, 11, 718, 311, 1190, 613, 283, 16740, 6921, 13, 51416, 51416, 509, 458, 11, 718, 311, 1190, 257, 2459, 295, 552, 2602, 295, 2319, 13, 51612, 51612, 1779, 13, 51644, 51644], "temperature": 0.0, "avg_logprob": -0.11094838248358832, "compression_ratio": 1.5813953488372092, "no_caption_prob": 7.12125183781609e-05}, {"id": 237, "seek": 131944, "start": 1337.44, "end": 1340.48, "text": " say, okay, let's run these fuzz tests.", "tokens": [50364, 639, 307, 11, 291, 458, 11, 365, 5361, 34153, 293, 411, 439, 613, 819, 1507, 689, 613, 50664, 50664, 24004, 366, 3801, 11, 550, 291, 1062, 2060, 264, 1901, 1101, 13, 50976, 50976, 400, 370, 291, 1062, 643, 1570, 6921, 11, 457, 2138, 5413, 322, 437, 291, 366, 4997, 11, 291, 393, 51264, 51264, 584, 11, 1392, 11, 718, 311, 1190, 613, 283, 16740, 6921, 13, 51416, 51416, 509, 458, 11, 718, 311, 1190, 257, 2459, 295, 552, 2602, 295, 2319, 13, 51612, 51612, 1779, 13, 51644, 51644], "temperature": 0.0, "avg_logprob": -0.11094838248358832, "compression_ratio": 1.5813953488372092, "no_caption_prob": 7.12125183781609e-05}, {"id": 238, "seek": 131944, "start": 1340.48, "end": 1344.4, "text": " You know, let's run a million of them instead of 100.", "tokens": [50364, 639, 307, 11, 291, 458, 11, 365, 5361, 34153, 293, 411, 439, 613, 819, 1507, 689, 613, 50664, 50664, 24004, 366, 3801, 11, 550, 291, 1062, 2060, 264, 1901, 1101, 13, 50976, 50976, 400, 370, 291, 1062, 643, 1570, 6921, 11, 457, 2138, 5413, 322, 437, 291, 366, 4997, 11, 291, 393, 51264, 51264, 584, 11, 1392, 11, 718, 311, 1190, 613, 283, 16740, 6921, 13, 51416, 51416, 509, 458, 11, 718, 311, 1190, 257, 2459, 295, 552, 2602, 295, 2319, 13, 51612, 51612, 1779, 13, 51644, 51644], "temperature": 0.0, "avg_logprob": -0.11094838248358832, "compression_ratio": 1.5813953488372092, "no_caption_prob": 7.12125183781609e-05}, {"id": 239, "seek": 131944, "start": 1344.4, "end": 1345.04, "text": " Right.", "tokens": [50364, 639, 307, 11, 291, 458, 11, 365, 5361, 34153, 293, 411, 439, 613, 819, 1507, 689, 613, 50664, 50664, 24004, 366, 3801, 11, 550, 291, 1062, 2060, 264, 1901, 1101, 13, 50976, 50976, 400, 370, 291, 1062, 643, 1570, 6921, 11, 457, 2138, 5413, 322, 437, 291, 366, 4997, 11, 291, 393, 51264, 51264, 584, 11, 1392, 11, 718, 311, 1190, 613, 283, 16740, 6921, 13, 51416, 51416, 509, 458, 11, 718, 311, 1190, 257, 2459, 295, 552, 2602, 295, 2319, 13, 51612, 51612, 1779, 13, 51644, 51644], "temperature": 0.0, "avg_logprob": -0.11094838248358832, "compression_ratio": 1.5813953488372092, "no_caption_prob": 7.12125183781609e-05}, {"id": 240, "seek": 134504, "start": 1345.04, "end": 1353.76, "text": " And some people, this is now going into like testing and trying to break C programs, libraries", "tokens": [50364, 400, 512, 561, 11, 341, 307, 586, 516, 666, 411, 4997, 293, 1382, 281, 1821, 383, 4268, 11, 15148, 50800, 50800, 411, 430, 30237, 15148, 293, 370, 322, 13, 50916, 50916, 3432, 360, 1066, 2614, 552, 2107, 13559, 11, 558, 30, 51200, 51200, 814, 1190, 552, 4022, 3407, 293, 633, 586, 293, 550, 11, 291, 458, 11, 309, 10704, 746, 13, 51464, 51492, 407, 341, 6264, 746, 321, 727, 360, 365, 806, 580, 377, 11, 411, 718, 309, 1190, 337, 257, 22206, 2372, 51772, 51772], "temperature": 0.0, "avg_logprob": -0.11220400360808976, "compression_ratio": 1.5601851851851851, "no_caption_prob": 2.2822307073511183e-05}, {"id": 241, "seek": 134504, "start": 1353.76, "end": 1356.08, "text": " like PNG libraries and so on.", "tokens": [50364, 400, 512, 561, 11, 341, 307, 586, 516, 666, 411, 4997, 293, 1382, 281, 1821, 383, 4268, 11, 15148, 50800, 50800, 411, 430, 30237, 15148, 293, 370, 322, 13, 50916, 50916, 3432, 360, 1066, 2614, 552, 2107, 13559, 11, 558, 30, 51200, 51200, 814, 1190, 552, 4022, 3407, 293, 633, 586, 293, 550, 11, 291, 458, 11, 309, 10704, 746, 13, 51464, 51492, 407, 341, 6264, 746, 321, 727, 360, 365, 806, 580, 377, 11, 411, 718, 309, 1190, 337, 257, 22206, 2372, 51772, 51772], "temperature": 0.0, "avg_logprob": -0.11220400360808976, "compression_ratio": 1.5601851851851851, "no_caption_prob": 2.2822307073511183e-05}, {"id": 242, "seek": 134504, "start": 1356.08, "end": 1361.76, "text": " People do keep running them nonstop, right?", "tokens": [50364, 400, 512, 561, 11, 341, 307, 586, 516, 666, 411, 4997, 293, 1382, 281, 1821, 383, 4268, 11, 15148, 50800, 50800, 411, 430, 30237, 15148, 293, 370, 322, 13, 50916, 50916, 3432, 360, 1066, 2614, 552, 2107, 13559, 11, 558, 30, 51200, 51200, 814, 1190, 552, 4022, 3407, 293, 633, 586, 293, 550, 11, 291, 458, 11, 309, 10704, 746, 13, 51464, 51492, 407, 341, 6264, 746, 321, 727, 360, 365, 806, 580, 377, 11, 411, 718, 309, 1190, 337, 257, 22206, 2372, 51772, 51772], "temperature": 0.0, "avg_logprob": -0.11220400360808976, "compression_ratio": 1.5601851851851851, "no_caption_prob": 2.2822307073511183e-05}, {"id": 243, "seek": 134504, "start": 1361.76, "end": 1367.04, "text": " They run them 24 seven and every now and then, you know, it finds something.", "tokens": [50364, 400, 512, 561, 11, 341, 307, 586, 516, 666, 411, 4997, 293, 1382, 281, 1821, 383, 4268, 11, 15148, 50800, 50800, 411, 430, 30237, 15148, 293, 370, 322, 13, 50916, 50916, 3432, 360, 1066, 2614, 552, 2107, 13559, 11, 558, 30, 51200, 51200, 814, 1190, 552, 4022, 3407, 293, 633, 586, 293, 550, 11, 291, 458, 11, 309, 10704, 746, 13, 51464, 51492, 407, 341, 6264, 746, 321, 727, 360, 365, 806, 580, 377, 11, 411, 718, 309, 1190, 337, 257, 22206, 2372, 51772, 51772], "temperature": 0.0, "avg_logprob": -0.11220400360808976, "compression_ratio": 1.5601851851851851, "no_caption_prob": 2.2822307073511183e-05}, {"id": 244, "seek": 134504, "start": 1367.6, "end": 1373.2, "text": " So this possibly something we could do with elntest, like let it run for a specified amount", "tokens": [50364, 400, 512, 561, 11, 341, 307, 586, 516, 666, 411, 4997, 293, 1382, 281, 1821, 383, 4268, 11, 15148, 50800, 50800, 411, 430, 30237, 15148, 293, 370, 322, 13, 50916, 50916, 3432, 360, 1066, 2614, 552, 2107, 13559, 11, 558, 30, 51200, 51200, 814, 1190, 552, 4022, 3407, 293, 633, 586, 293, 550, 11, 291, 458, 11, 309, 10704, 746, 13, 51464, 51492, 407, 341, 6264, 746, 321, 727, 360, 365, 806, 580, 377, 11, 411, 718, 309, 1190, 337, 257, 22206, 2372, 51772, 51772], "temperature": 0.0, "avg_logprob": -0.11220400360808976, "compression_ratio": 1.5601851851851851, "no_caption_prob": 2.2822307073511183e-05}, {"id": 245, "seek": 137320, "start": 1373.2, "end": 1380.0, "text": " of time or let it run indefinitely instead of just saying, here's, you know, try 100", "tokens": [50364, 295, 565, 420, 718, 309, 1190, 24162, 10925, 2602, 295, 445, 1566, 11, 510, 311, 11, 291, 458, 11, 853, 2319, 50704, 50736, 1413, 293, 550, 1590, 13, 50812, 50852, 865, 13, 50868, 50868, 407, 291, 393, 2826, 577, 867, 29534, 291, 528, 293, 437, 613, 29534, 393, 2464, 13, 51092, 51120, 865, 11, 2293, 13, 51172, 51260, 865, 13, 51268, 51268, 400, 291, 434, 411, 11, 1954, 572, 11, 436, 4114, 9378, 18115, 797, 13, 51392, 51392, 492, 362, 281, 3507, 309, 484, 13, 51440, 51640, 865, 13, 51656, 51688], "temperature": 0.0, "avg_logprob": -0.18518999571441322, "compression_ratio": 1.48, "no_caption_prob": 7.483696390409023e-05}, {"id": 246, "seek": 137320, "start": 1380.64, "end": 1382.16, "text": " times and then stop.", "tokens": [50364, 295, 565, 420, 718, 309, 1190, 24162, 10925, 2602, 295, 445, 1566, 11, 510, 311, 11, 291, 458, 11, 853, 2319, 50704, 50736, 1413, 293, 550, 1590, 13, 50812, 50852, 865, 13, 50868, 50868, 407, 291, 393, 2826, 577, 867, 29534, 291, 528, 293, 437, 613, 29534, 393, 2464, 13, 51092, 51120, 865, 11, 2293, 13, 51172, 51260, 865, 13, 51268, 51268, 400, 291, 434, 411, 11, 1954, 572, 11, 436, 4114, 9378, 18115, 797, 13, 51392, 51392, 492, 362, 281, 3507, 309, 484, 13, 51440, 51640, 865, 13, 51656, 51688], "temperature": 0.0, "avg_logprob": -0.18518999571441322, "compression_ratio": 1.48, "no_caption_prob": 7.483696390409023e-05}, {"id": 247, "seek": 137320, "start": 1382.96, "end": 1383.28, "text": " Yeah.", "tokens": [50364, 295, 565, 420, 718, 309, 1190, 24162, 10925, 2602, 295, 445, 1566, 11, 510, 311, 11, 291, 458, 11, 853, 2319, 50704, 50736, 1413, 293, 550, 1590, 13, 50812, 50852, 865, 13, 50868, 50868, 407, 291, 393, 2826, 577, 867, 29534, 291, 528, 293, 437, 613, 29534, 393, 2464, 13, 51092, 51120, 865, 11, 2293, 13, 51172, 51260, 865, 13, 51268, 51268, 400, 291, 434, 411, 11, 1954, 572, 11, 436, 4114, 9378, 18115, 797, 13, 51392, 51392, 492, 362, 281, 3507, 309, 484, 13, 51440, 51640, 865, 13, 51656, 51688], "temperature": 0.0, "avg_logprob": -0.18518999571441322, "compression_ratio": 1.48, "no_caption_prob": 7.483696390409023e-05}, {"id": 248, "seek": 137320, "start": 1383.28, "end": 1387.76, "text": " So you can choose how many monkeys you want and what these monkeys can write.", "tokens": [50364, 295, 565, 420, 718, 309, 1190, 24162, 10925, 2602, 295, 445, 1566, 11, 510, 311, 11, 291, 458, 11, 853, 2319, 50704, 50736, 1413, 293, 550, 1590, 13, 50812, 50852, 865, 13, 50868, 50868, 407, 291, 393, 2826, 577, 867, 29534, 291, 528, 293, 437, 613, 29534, 393, 2464, 13, 51092, 51120, 865, 11, 2293, 13, 51172, 51260, 865, 13, 51268, 51268, 400, 291, 434, 411, 11, 1954, 572, 11, 436, 4114, 9378, 18115, 797, 13, 51392, 51392, 492, 362, 281, 3507, 309, 484, 13, 51440, 51640, 865, 13, 51656, 51688], "temperature": 0.0, "avg_logprob": -0.18518999571441322, "compression_ratio": 1.48, "no_caption_prob": 7.483696390409023e-05}, {"id": 249, "seek": 137320, "start": 1388.32, "end": 1389.3600000000001, "text": " Yeah, exactly.", "tokens": [50364, 295, 565, 420, 718, 309, 1190, 24162, 10925, 2602, 295, 445, 1566, 11, 510, 311, 11, 291, 458, 11, 853, 2319, 50704, 50736, 1413, 293, 550, 1590, 13, 50812, 50852, 865, 13, 50868, 50868, 407, 291, 393, 2826, 577, 867, 29534, 291, 528, 293, 437, 613, 29534, 393, 2464, 13, 51092, 51120, 865, 11, 2293, 13, 51172, 51260, 865, 13, 51268, 51268, 400, 291, 434, 411, 11, 1954, 572, 11, 436, 4114, 9378, 18115, 797, 13, 51392, 51392, 492, 362, 281, 3507, 309, 484, 13, 51440, 51640, 865, 13, 51656, 51688], "temperature": 0.0, "avg_logprob": -0.18518999571441322, "compression_ratio": 1.48, "no_caption_prob": 7.483696390409023e-05}, {"id": 250, "seek": 137320, "start": 1391.1200000000001, "end": 1391.28, "text": " Yeah.", "tokens": [50364, 295, 565, 420, 718, 309, 1190, 24162, 10925, 2602, 295, 445, 1566, 11, 510, 311, 11, 291, 458, 11, 853, 2319, 50704, 50736, 1413, 293, 550, 1590, 13, 50812, 50852, 865, 13, 50868, 50868, 407, 291, 393, 2826, 577, 867, 29534, 291, 528, 293, 437, 613, 29534, 393, 2464, 13, 51092, 51120, 865, 11, 2293, 13, 51172, 51260, 865, 13, 51268, 51268, 400, 291, 434, 411, 11, 1954, 572, 11, 436, 4114, 9378, 18115, 797, 13, 51392, 51392, 492, 362, 281, 3507, 309, 484, 13, 51440, 51640, 865, 13, 51656, 51688], "temperature": 0.0, "avg_logprob": -0.18518999571441322, "compression_ratio": 1.48, "no_caption_prob": 7.483696390409023e-05}, {"id": 251, "seek": 137320, "start": 1391.28, "end": 1393.76, "text": " And you're like, oh no, they wrote Harry Potter again.", "tokens": [50364, 295, 565, 420, 718, 309, 1190, 24162, 10925, 2602, 295, 445, 1566, 11, 510, 311, 11, 291, 458, 11, 853, 2319, 50704, 50736, 1413, 293, 550, 1590, 13, 50812, 50852, 865, 13, 50868, 50868, 407, 291, 393, 2826, 577, 867, 29534, 291, 528, 293, 437, 613, 29534, 393, 2464, 13, 51092, 51120, 865, 11, 2293, 13, 51172, 51260, 865, 13, 51268, 51268, 400, 291, 434, 411, 11, 1954, 572, 11, 436, 4114, 9378, 18115, 797, 13, 51392, 51392, 492, 362, 281, 3507, 309, 484, 13, 51440, 51640, 865, 13, 51656, 51688], "temperature": 0.0, "avg_logprob": -0.18518999571441322, "compression_ratio": 1.48, "no_caption_prob": 7.483696390409023e-05}, {"id": 252, "seek": 137320, "start": 1393.76, "end": 1394.72, "text": " We have to throw it out.", "tokens": [50364, 295, 565, 420, 718, 309, 1190, 24162, 10925, 2602, 295, 445, 1566, 11, 510, 311, 11, 291, 458, 11, 853, 2319, 50704, 50736, 1413, 293, 550, 1590, 13, 50812, 50852, 865, 13, 50868, 50868, 407, 291, 393, 2826, 577, 867, 29534, 291, 528, 293, 437, 613, 29534, 393, 2464, 13, 51092, 51120, 865, 11, 2293, 13, 51172, 51260, 865, 13, 51268, 51268, 400, 291, 434, 411, 11, 1954, 572, 11, 436, 4114, 9378, 18115, 797, 13, 51392, 51392, 492, 362, 281, 3507, 309, 484, 13, 51440, 51640, 865, 13, 51656, 51688], "temperature": 0.0, "avg_logprob": -0.18518999571441322, "compression_ratio": 1.48, "no_caption_prob": 7.483696390409023e-05}, {"id": 253, "seek": 137320, "start": 1398.72, "end": 1399.04, "text": " Yeah.", "tokens": [50364, 295, 565, 420, 718, 309, 1190, 24162, 10925, 2602, 295, 445, 1566, 11, 510, 311, 11, 291, 458, 11, 853, 2319, 50704, 50736, 1413, 293, 550, 1590, 13, 50812, 50852, 865, 13, 50868, 50868, 407, 291, 393, 2826, 577, 867, 29534, 291, 528, 293, 437, 613, 29534, 393, 2464, 13, 51092, 51120, 865, 11, 2293, 13, 51172, 51260, 865, 13, 51268, 51268, 400, 291, 434, 411, 11, 1954, 572, 11, 436, 4114, 9378, 18115, 797, 13, 51392, 51392, 492, 362, 281, 3507, 309, 484, 13, 51440, 51640, 865, 13, 51656, 51688], "temperature": 0.0, "avg_logprob": -0.18518999571441322, "compression_ratio": 1.48, "no_caption_prob": 7.483696390409023e-05}, {"id": 254, "seek": 139904, "start": 1399.04, "end": 1406.08, "text": " I think this is a very interesting topic of how you produce inputs that essentially meaningfully", "tokens": [50364, 286, 519, 341, 307, 257, 588, 1880, 4829, 295, 577, 291, 5258, 15743, 300, 4476, 3620, 2277, 50716, 50716, 2906, 264, 3331, 300, 291, 528, 281, 312, 4997, 13, 50884, 50884, 1436, 286, 914, 11, 294, 264, 1389, 295, 264, 1491, 5093, 4846, 11, 291, 434, 767, 1391, 516, 281, 362, 51204, 51204, 364, 670, 19919, 11662, 399, 295, 11, 337, 1365, 11, 3331, 365, 1553, 14324, 10377, 18632, 11, 558, 30, 51552, 51552, 1436, 264, 17439, 295, 1242, 257, 7363, 14324, 10377, 6162, 307, 588, 2295, 13, 51796, 51796], "temperature": 0.0, "avg_logprob": -0.15802640500275986, "compression_ratio": 1.708695652173913, "no_caption_prob": 1.2804961443180218e-05}, {"id": 255, "seek": 139904, "start": 1406.08, "end": 1409.44, "text": " represent the cases that you want to be testing.", "tokens": [50364, 286, 519, 341, 307, 257, 588, 1880, 4829, 295, 577, 291, 5258, 15743, 300, 4476, 3620, 2277, 50716, 50716, 2906, 264, 3331, 300, 291, 528, 281, 312, 4997, 13, 50884, 50884, 1436, 286, 914, 11, 294, 264, 1389, 295, 264, 1491, 5093, 4846, 11, 291, 434, 767, 1391, 516, 281, 362, 51204, 51204, 364, 670, 19919, 11662, 399, 295, 11, 337, 1365, 11, 3331, 365, 1553, 14324, 10377, 18632, 11, 558, 30, 51552, 51552, 1436, 264, 17439, 295, 1242, 257, 7363, 14324, 10377, 6162, 307, 588, 2295, 13, 51796, 51796], "temperature": 0.0, "avg_logprob": -0.15802640500275986, "compression_ratio": 1.708695652173913, "no_caption_prob": 1.2804961443180218e-05}, {"id": 256, "seek": 139904, "start": 1409.44, "end": 1415.84, "text": " Because I mean, in the case of the markdown input, you're actually probably going to have", "tokens": [50364, 286, 519, 341, 307, 257, 588, 1880, 4829, 295, 577, 291, 5258, 15743, 300, 4476, 3620, 2277, 50716, 50716, 2906, 264, 3331, 300, 291, 528, 281, 312, 4997, 13, 50884, 50884, 1436, 286, 914, 11, 294, 264, 1389, 295, 264, 1491, 5093, 4846, 11, 291, 434, 767, 1391, 516, 281, 362, 51204, 51204, 364, 670, 19919, 11662, 399, 295, 11, 337, 1365, 11, 3331, 365, 1553, 14324, 10377, 18632, 11, 558, 30, 51552, 51552, 1436, 264, 17439, 295, 1242, 257, 7363, 14324, 10377, 6162, 307, 588, 2295, 13, 51796, 51796], "temperature": 0.0, "avg_logprob": -0.15802640500275986, "compression_ratio": 1.708695652173913, "no_caption_prob": 1.2804961443180218e-05}, {"id": 257, "seek": 139904, "start": 1415.84, "end": 1422.8, "text": " an overrepresentation of, for example, cases with without matching closing tags, right?", "tokens": [50364, 286, 519, 341, 307, 257, 588, 1880, 4829, 295, 577, 291, 5258, 15743, 300, 4476, 3620, 2277, 50716, 50716, 2906, 264, 3331, 300, 291, 528, 281, 312, 4997, 13, 50884, 50884, 1436, 286, 914, 11, 294, 264, 1389, 295, 264, 1491, 5093, 4846, 11, 291, 434, 767, 1391, 516, 281, 362, 51204, 51204, 364, 670, 19919, 11662, 399, 295, 11, 337, 1365, 11, 3331, 365, 1553, 14324, 10377, 18632, 11, 558, 30, 51552, 51552, 1436, 264, 17439, 295, 1242, 257, 7363, 14324, 10377, 6162, 307, 588, 2295, 13, 51796, 51796], "temperature": 0.0, "avg_logprob": -0.15802640500275986, "compression_ratio": 1.708695652173913, "no_caption_prob": 1.2804961443180218e-05}, {"id": 258, "seek": 139904, "start": 1422.8, "end": 1427.68, "text": " Because the odds of getting a valid matching closing tag is very low.", "tokens": [50364, 286, 519, 341, 307, 257, 588, 1880, 4829, 295, 577, 291, 5258, 15743, 300, 4476, 3620, 2277, 50716, 50716, 2906, 264, 3331, 300, 291, 528, 281, 312, 4997, 13, 50884, 50884, 1436, 286, 914, 11, 294, 264, 1389, 295, 264, 1491, 5093, 4846, 11, 291, 434, 767, 1391, 516, 281, 362, 51204, 51204, 364, 670, 19919, 11662, 399, 295, 11, 337, 1365, 11, 3331, 365, 1553, 14324, 10377, 18632, 11, 558, 30, 51552, 51552, 1436, 264, 17439, 295, 1242, 257, 7363, 14324, 10377, 6162, 307, 588, 2295, 13, 51796, 51796], "temperature": 0.0, "avg_logprob": -0.15802640500275986, "compression_ratio": 1.708695652173913, "no_caption_prob": 1.2804961443180218e-05}, {"id": 259, "seek": 142768, "start": 1427.68, "end": 1430.96, "text": " That's going to produce a certain class of errors more.", "tokens": [50364, 663, 311, 516, 281, 5258, 257, 1629, 1508, 295, 13603, 544, 13, 50528, 50528, 467, 311, 516, 281, 2906, 300, 1508, 295, 13603, 544, 13, 50620, 50620, 583, 1310, 456, 311, 257, 1508, 295, 13603, 689, 291, 362, 257, 7363, 14324, 6162, 11, 457, 1951, 50932, 50932, 300, 456, 311, 364, 34702, 472, 13, 51028, 51028, 1610, 1310, 456, 311, 257, 11, 291, 458, 11, 1310, 456, 311, 746, 10995, 300, 2314, 562, 291, 51208, 51208, 360, 297, 8714, 13, 51240, 51240, 2704, 456, 311, 746, 10995, 300, 2314, 562, 291, 362, 746, 1951, 257, 3461, 6513, 11, 51508, 51508, 597, 291, 393, 362, 439, 7527, 295, 15646, 292, 11, 613, 15646, 292, 1491, 5093, 3461, 9227, 300, 393, 51816, 51816], "temperature": 0.0, "avg_logprob": -0.13970157964442803, "compression_ratio": 2.1186440677966103, "no_caption_prob": 0.00016602218965999782}, {"id": 260, "seek": 142768, "start": 1430.96, "end": 1432.8, "text": " It's going to represent that class of errors more.", "tokens": [50364, 663, 311, 516, 281, 5258, 257, 1629, 1508, 295, 13603, 544, 13, 50528, 50528, 467, 311, 516, 281, 2906, 300, 1508, 295, 13603, 544, 13, 50620, 50620, 583, 1310, 456, 311, 257, 1508, 295, 13603, 689, 291, 362, 257, 7363, 14324, 6162, 11, 457, 1951, 50932, 50932, 300, 456, 311, 364, 34702, 472, 13, 51028, 51028, 1610, 1310, 456, 311, 257, 11, 291, 458, 11, 1310, 456, 311, 746, 10995, 300, 2314, 562, 291, 51208, 51208, 360, 297, 8714, 13, 51240, 51240, 2704, 456, 311, 746, 10995, 300, 2314, 562, 291, 362, 746, 1951, 257, 3461, 6513, 11, 51508, 51508, 597, 291, 393, 362, 439, 7527, 295, 15646, 292, 11, 613, 15646, 292, 1491, 5093, 3461, 9227, 300, 393, 51816, 51816], "temperature": 0.0, "avg_logprob": -0.13970157964442803, "compression_ratio": 2.1186440677966103, "no_caption_prob": 0.00016602218965999782}, {"id": 261, "seek": 142768, "start": 1432.8, "end": 1439.04, "text": " But maybe there's a class of errors where you have a valid matching tag, but within", "tokens": [50364, 663, 311, 516, 281, 5258, 257, 1629, 1508, 295, 13603, 544, 13, 50528, 50528, 467, 311, 516, 281, 2906, 300, 1508, 295, 13603, 544, 13, 50620, 50620, 583, 1310, 456, 311, 257, 1508, 295, 13603, 689, 291, 362, 257, 7363, 14324, 6162, 11, 457, 1951, 50932, 50932, 300, 456, 311, 364, 34702, 472, 13, 51028, 51028, 1610, 1310, 456, 311, 257, 11, 291, 458, 11, 1310, 456, 311, 746, 10995, 300, 2314, 562, 291, 51208, 51208, 360, 297, 8714, 13, 51240, 51240, 2704, 456, 311, 746, 10995, 300, 2314, 562, 291, 362, 746, 1951, 257, 3461, 6513, 11, 51508, 51508, 597, 291, 393, 362, 439, 7527, 295, 15646, 292, 11, 613, 15646, 292, 1491, 5093, 3461, 9227, 300, 393, 51816, 51816], "temperature": 0.0, "avg_logprob": -0.13970157964442803, "compression_ratio": 2.1186440677966103, "no_caption_prob": 0.00016602218965999782}, {"id": 262, "seek": 142768, "start": 1439.04, "end": 1440.96, "text": " that there's an invalid one.", "tokens": [50364, 663, 311, 516, 281, 5258, 257, 1629, 1508, 295, 13603, 544, 13, 50528, 50528, 467, 311, 516, 281, 2906, 300, 1508, 295, 13603, 544, 13, 50620, 50620, 583, 1310, 456, 311, 257, 1508, 295, 13603, 689, 291, 362, 257, 7363, 14324, 6162, 11, 457, 1951, 50932, 50932, 300, 456, 311, 364, 34702, 472, 13, 51028, 51028, 1610, 1310, 456, 311, 257, 11, 291, 458, 11, 1310, 456, 311, 746, 10995, 300, 2314, 562, 291, 51208, 51208, 360, 297, 8714, 13, 51240, 51240, 2704, 456, 311, 746, 10995, 300, 2314, 562, 291, 362, 746, 1951, 257, 3461, 6513, 11, 51508, 51508, 597, 291, 393, 362, 439, 7527, 295, 15646, 292, 11, 613, 15646, 292, 1491, 5093, 3461, 9227, 300, 393, 51816, 51816], "temperature": 0.0, "avg_logprob": -0.13970157964442803, "compression_ratio": 2.1186440677966103, "no_caption_prob": 0.00016602218965999782}, {"id": 263, "seek": 142768, "start": 1440.96, "end": 1444.5600000000002, "text": " Or maybe there's a, you know, maybe there's something meaningful that happens when you", "tokens": [50364, 663, 311, 516, 281, 5258, 257, 1629, 1508, 295, 13603, 544, 13, 50528, 50528, 467, 311, 516, 281, 2906, 300, 1508, 295, 13603, 544, 13, 50620, 50620, 583, 1310, 456, 311, 257, 1508, 295, 13603, 689, 291, 362, 257, 7363, 14324, 6162, 11, 457, 1951, 50932, 50932, 300, 456, 311, 364, 34702, 472, 13, 51028, 51028, 1610, 1310, 456, 311, 257, 11, 291, 458, 11, 1310, 456, 311, 746, 10995, 300, 2314, 562, 291, 51208, 51208, 360, 297, 8714, 13, 51240, 51240, 2704, 456, 311, 746, 10995, 300, 2314, 562, 291, 362, 746, 1951, 257, 3461, 6513, 11, 51508, 51508, 597, 291, 393, 362, 439, 7527, 295, 15646, 292, 11, 613, 15646, 292, 1491, 5093, 3461, 9227, 300, 393, 51816, 51816], "temperature": 0.0, "avg_logprob": -0.13970157964442803, "compression_ratio": 2.1186440677966103, "no_caption_prob": 0.00016602218965999782}, {"id": 264, "seek": 142768, "start": 1444.5600000000002, "end": 1445.2, "text": " do nesting.", "tokens": [50364, 663, 311, 516, 281, 5258, 257, 1629, 1508, 295, 13603, 544, 13, 50528, 50528, 467, 311, 516, 281, 2906, 300, 1508, 295, 13603, 544, 13, 50620, 50620, 583, 1310, 456, 311, 257, 1508, 295, 13603, 689, 291, 362, 257, 7363, 14324, 6162, 11, 457, 1951, 50932, 50932, 300, 456, 311, 364, 34702, 472, 13, 51028, 51028, 1610, 1310, 456, 311, 257, 11, 291, 458, 11, 1310, 456, 311, 746, 10995, 300, 2314, 562, 291, 51208, 51208, 360, 297, 8714, 13, 51240, 51240, 2704, 456, 311, 746, 10995, 300, 2314, 562, 291, 362, 746, 1951, 257, 3461, 6513, 11, 51508, 51508, 597, 291, 393, 362, 439, 7527, 295, 15646, 292, 11, 613, 15646, 292, 1491, 5093, 3461, 9227, 300, 393, 51816, 51816], "temperature": 0.0, "avg_logprob": -0.13970157964442803, "compression_ratio": 2.1186440677966103, "no_caption_prob": 0.00016602218965999782}, {"id": 265, "seek": 142768, "start": 1445.2, "end": 1450.5600000000002, "text": " Maybe there's something meaningful that happens when you have something within a block quote,", "tokens": [50364, 663, 311, 516, 281, 5258, 257, 1629, 1508, 295, 13603, 544, 13, 50528, 50528, 467, 311, 516, 281, 2906, 300, 1508, 295, 13603, 544, 13, 50620, 50620, 583, 1310, 456, 311, 257, 1508, 295, 13603, 689, 291, 362, 257, 7363, 14324, 6162, 11, 457, 1951, 50932, 50932, 300, 456, 311, 364, 34702, 472, 13, 51028, 51028, 1610, 1310, 456, 311, 257, 11, 291, 458, 11, 1310, 456, 311, 746, 10995, 300, 2314, 562, 291, 51208, 51208, 360, 297, 8714, 13, 51240, 51240, 2704, 456, 311, 746, 10995, 300, 2314, 562, 291, 362, 746, 1951, 257, 3461, 6513, 11, 51508, 51508, 597, 291, 393, 362, 439, 7527, 295, 15646, 292, 11, 613, 15646, 292, 1491, 5093, 3461, 9227, 300, 393, 51816, 51816], "temperature": 0.0, "avg_logprob": -0.13970157964442803, "compression_ratio": 2.1186440677966103, "no_caption_prob": 0.00016602218965999782}, {"id": 266, "seek": 142768, "start": 1450.5600000000002, "end": 1456.72, "text": " which you can have all sorts of nested, these nested markdown block structures that can", "tokens": [50364, 663, 311, 516, 281, 5258, 257, 1629, 1508, 295, 13603, 544, 13, 50528, 50528, 467, 311, 516, 281, 2906, 300, 1508, 295, 13603, 544, 13, 50620, 50620, 583, 1310, 456, 311, 257, 1508, 295, 13603, 689, 291, 362, 257, 7363, 14324, 6162, 11, 457, 1951, 50932, 50932, 300, 456, 311, 364, 34702, 472, 13, 51028, 51028, 1610, 1310, 456, 311, 257, 11, 291, 458, 11, 1310, 456, 311, 746, 10995, 300, 2314, 562, 291, 51208, 51208, 360, 297, 8714, 13, 51240, 51240, 2704, 456, 311, 746, 10995, 300, 2314, 562, 291, 362, 746, 1951, 257, 3461, 6513, 11, 51508, 51508, 597, 291, 393, 362, 439, 7527, 295, 15646, 292, 11, 613, 15646, 292, 1491, 5093, 3461, 9227, 300, 393, 51816, 51816], "temperature": 0.0, "avg_logprob": -0.13970157964442803, "compression_ratio": 2.1186440677966103, "no_caption_prob": 0.00016602218965999782}, {"id": 267, "seek": 145672, "start": 1456.72, "end": 1459.84, "text": " have other markdown within them, which can have other markdown within them.", "tokens": [50364, 362, 661, 1491, 5093, 1951, 552, 11, 597, 393, 362, 661, 1491, 5093, 1951, 552, 13, 50520, 50564, 509, 434, 406, 516, 281, 2906, 729, 3331, 11, 597, 1355, 291, 366, 1237, 412, 544, 295, 257, 17847, 50892, 50892, 18444, 22825, 2590, 689, 988, 11, 29400, 11, 291, 434, 13460, 300, 4846, 51228, 51228, 570, 291, 434, 13460, 364, 13785, 1901, 300, 311, 406, 38901, 13, 51424, 51424, 583, 40734, 11, 36478, 11, 291, 434, 406, 13460, 300, 731, 1547, 281, 3361, 300, 51820, 51820], "temperature": 0.0, "avg_logprob": -0.1577719217059256, "compression_ratio": 1.8558558558558558, "no_caption_prob": 4.0062295738607645e-05}, {"id": 268, "seek": 145672, "start": 1460.72, "end": 1467.28, "text": " You're not going to represent those cases, which means you are looking at more of a monkey", "tokens": [50364, 362, 661, 1491, 5093, 1951, 552, 11, 597, 393, 362, 661, 1491, 5093, 1951, 552, 13, 50520, 50564, 509, 434, 406, 516, 281, 2906, 729, 3331, 11, 597, 1355, 291, 366, 1237, 412, 544, 295, 257, 17847, 50892, 50892, 18444, 22825, 2590, 689, 988, 11, 29400, 11, 291, 434, 13460, 300, 4846, 51228, 51228, 570, 291, 434, 13460, 364, 13785, 1901, 300, 311, 406, 38901, 13, 51424, 51424, 583, 40734, 11, 36478, 11, 291, 434, 406, 13460, 300, 731, 1547, 281, 3361, 300, 51820, 51820], "temperature": 0.0, "avg_logprob": -0.1577719217059256, "compression_ratio": 1.8558558558558558, "no_caption_prob": 4.0062295738607645e-05}, {"id": 269, "seek": 145672, "start": 1467.28, "end": 1474.0, "text": " typing Shakespeare situation where sure, theoretically, you're representing that input", "tokens": [50364, 362, 661, 1491, 5093, 1951, 552, 11, 597, 393, 362, 661, 1491, 5093, 1951, 552, 13, 50520, 50564, 509, 434, 406, 516, 281, 2906, 729, 3331, 11, 597, 1355, 291, 366, 1237, 412, 544, 295, 257, 17847, 50892, 50892, 18444, 22825, 2590, 689, 988, 11, 29400, 11, 291, 434, 13460, 300, 4846, 51228, 51228, 570, 291, 434, 13460, 364, 13785, 1901, 300, 311, 406, 38901, 13, 51424, 51424, 583, 40734, 11, 36478, 11, 291, 434, 406, 13460, 300, 731, 1547, 281, 3361, 300, 51820, 51820], "temperature": 0.0, "avg_logprob": -0.1577719217059256, "compression_ratio": 1.8558558558558558, "no_caption_prob": 4.0062295738607645e-05}, {"id": 270, "seek": 145672, "start": 1474.0, "end": 1477.92, "text": " because you're representing an infinite space that's not constrained.", "tokens": [50364, 362, 661, 1491, 5093, 1951, 552, 11, 597, 393, 362, 661, 1491, 5093, 1951, 552, 13, 50520, 50564, 509, 434, 406, 516, 281, 2906, 729, 3331, 11, 597, 1355, 291, 366, 1237, 412, 544, 295, 257, 17847, 50892, 50892, 18444, 22825, 2590, 689, 988, 11, 29400, 11, 291, 434, 13460, 300, 4846, 51228, 51228, 570, 291, 434, 13460, 364, 13785, 1901, 300, 311, 406, 38901, 13, 51424, 51424, 583, 40734, 11, 36478, 11, 291, 434, 406, 13460, 300, 731, 1547, 281, 3361, 300, 51820, 51820], "temperature": 0.0, "avg_logprob": -0.1577719217059256, "compression_ratio": 1.8558558558558558, "no_caption_prob": 4.0062295738607645e-05}, {"id": 271, "seek": 145672, "start": 1477.92, "end": 1485.84, "text": " But realistically, statistically, you're not representing that well enough to trust that", "tokens": [50364, 362, 661, 1491, 5093, 1951, 552, 11, 597, 393, 362, 661, 1491, 5093, 1951, 552, 13, 50520, 50564, 509, 434, 406, 516, 281, 2906, 729, 3331, 11, 597, 1355, 291, 366, 1237, 412, 544, 295, 257, 17847, 50892, 50892, 18444, 22825, 2590, 689, 988, 11, 29400, 11, 291, 434, 13460, 300, 4846, 51228, 51228, 570, 291, 434, 13460, 364, 13785, 1901, 300, 311, 406, 38901, 13, 51424, 51424, 583, 40734, 11, 36478, 11, 291, 434, 406, 13460, 300, 731, 1547, 281, 3361, 300, 51820, 51820], "temperature": 0.0, "avg_logprob": -0.1577719217059256, "compression_ratio": 1.8558558558558558, "no_caption_prob": 4.0062295738607645e-05}, {"id": 272, "seek": 148584, "start": 1485.84, "end": 1487.1999999999998, "text": " you're getting coverage of that case.", "tokens": [50364, 291, 434, 1242, 9645, 295, 300, 1389, 13, 50432, 50432, 865, 11, 286, 519, 437, 1062, 589, 534, 731, 294, 300, 1389, 307, 11, 731, 11, 406, 516, 365, 3217, 50796, 50796, 4974, 6798, 11, 406, 516, 365, 7363, 31536, 300, 291, 576, 7620, 281, 6798, 293, 550, 1500, 11, 51160, 51160, 457, 516, 294, 264, 2808, 294, 411, 264, 22667, 13, 51332, 51360, 1779, 13, 51384, 51384, 407, 490, 18114, 264, 21156, 260, 11, 291, 458, 300, 11, 718, 311, 584, 1411, 38458, 420, 264, 1411, 3732, 51756, 51756], "temperature": 0.0, "avg_logprob": -0.22968426994655444, "compression_ratio": 1.6129032258064515, "no_caption_prob": 2.6679943402996287e-05}, {"id": 273, "seek": 148584, "start": 1487.1999999999998, "end": 1494.48, "text": " Yeah, I think what might work really well in that case is, well, not going with total", "tokens": [50364, 291, 434, 1242, 9645, 295, 300, 1389, 13, 50432, 50432, 865, 11, 286, 519, 437, 1062, 589, 534, 731, 294, 300, 1389, 307, 11, 731, 11, 406, 516, 365, 3217, 50796, 50796, 4974, 6798, 11, 406, 516, 365, 7363, 31536, 300, 291, 576, 7620, 281, 6798, 293, 550, 1500, 11, 51160, 51160, 457, 516, 294, 264, 2808, 294, 411, 264, 22667, 13, 51332, 51360, 1779, 13, 51384, 51384, 407, 490, 18114, 264, 21156, 260, 11, 291, 458, 300, 11, 718, 311, 584, 1411, 38458, 420, 264, 1411, 3732, 51756, 51756], "temperature": 0.0, "avg_logprob": -0.22968426994655444, "compression_ratio": 1.6129032258064515, "no_caption_prob": 2.6679943402996287e-05}, {"id": 274, "seek": 148584, "start": 1494.48, "end": 1501.76, "text": " random string, not going with valid SAT that you would convert to string and then test,", "tokens": [50364, 291, 434, 1242, 9645, 295, 300, 1389, 13, 50432, 50432, 865, 11, 286, 519, 437, 1062, 589, 534, 731, 294, 300, 1389, 307, 11, 731, 11, 406, 516, 365, 3217, 50796, 50796, 4974, 6798, 11, 406, 516, 365, 7363, 31536, 300, 291, 576, 7620, 281, 6798, 293, 550, 1500, 11, 51160, 51160, 457, 516, 294, 264, 2808, 294, 411, 264, 22667, 13, 51332, 51360, 1779, 13, 51384, 51384, 407, 490, 18114, 264, 21156, 260, 11, 291, 458, 300, 11, 718, 311, 584, 1411, 38458, 420, 264, 1411, 3732, 51756, 51756], "temperature": 0.0, "avg_logprob": -0.22968426994655444, "compression_ratio": 1.6129032258064515, "no_caption_prob": 2.6679943402996287e-05}, {"id": 275, "seek": 148584, "start": 1501.76, "end": 1505.1999999999998, "text": " but going in the middle in like the tokens.", "tokens": [50364, 291, 434, 1242, 9645, 295, 300, 1389, 13, 50432, 50432, 865, 11, 286, 519, 437, 1062, 589, 534, 731, 294, 300, 1389, 307, 11, 731, 11, 406, 516, 365, 3217, 50796, 50796, 4974, 6798, 11, 406, 516, 365, 7363, 31536, 300, 291, 576, 7620, 281, 6798, 293, 550, 1500, 11, 51160, 51160, 457, 516, 294, 264, 2808, 294, 411, 264, 22667, 13, 51332, 51360, 1779, 13, 51384, 51384, 407, 490, 18114, 264, 21156, 260, 11, 291, 458, 300, 11, 718, 311, 584, 1411, 38458, 420, 264, 1411, 3732, 51756, 51756], "temperature": 0.0, "avg_logprob": -0.22968426994655444, "compression_ratio": 1.6129032258064515, "no_caption_prob": 2.6679943402996287e-05}, {"id": 276, "seek": 148584, "start": 1505.76, "end": 1506.24, "text": " Right.", "tokens": [50364, 291, 434, 1242, 9645, 295, 300, 1389, 13, 50432, 50432, 865, 11, 286, 519, 437, 1062, 589, 534, 731, 294, 300, 1389, 307, 11, 731, 11, 406, 516, 365, 3217, 50796, 50796, 4974, 6798, 11, 406, 516, 365, 7363, 31536, 300, 291, 576, 7620, 281, 6798, 293, 550, 1500, 11, 51160, 51160, 457, 516, 294, 264, 2808, 294, 411, 264, 22667, 13, 51332, 51360, 1779, 13, 51384, 51384, 407, 490, 18114, 264, 21156, 260, 11, 291, 458, 300, 11, 718, 311, 584, 1411, 38458, 420, 264, 1411, 3732, 51756, 51756], "temperature": 0.0, "avg_logprob": -0.22968426994655444, "compression_ratio": 1.6129032258064515, "no_caption_prob": 2.6679943402996287e-05}, {"id": 277, "seek": 148584, "start": 1506.24, "end": 1513.6799999999998, "text": " So from implementing the parser, you know that, let's say left brace or the left square", "tokens": [50364, 291, 434, 1242, 9645, 295, 300, 1389, 13, 50432, 50432, 865, 11, 286, 519, 437, 1062, 589, 534, 731, 294, 300, 1389, 307, 11, 731, 11, 406, 516, 365, 3217, 50796, 50796, 4974, 6798, 11, 406, 516, 365, 7363, 31536, 300, 291, 576, 7620, 281, 6798, 293, 550, 1500, 11, 51160, 51160, 457, 516, 294, 264, 2808, 294, 411, 264, 22667, 13, 51332, 51360, 1779, 13, 51384, 51384, 407, 490, 18114, 264, 21156, 260, 11, 291, 458, 300, 11, 718, 311, 584, 1411, 38458, 420, 264, 1411, 3732, 51756, 51756], "temperature": 0.0, "avg_logprob": -0.22968426994655444, "compression_ratio": 1.6129032258064515, "no_caption_prob": 2.6679943402996287e-05}, {"id": 278, "seek": 151368, "start": 1513.68, "end": 1520.8, "text": " bracket, those are special or indentation is special or the exclamation mark is special.", "tokens": [50364, 16904, 11, 729, 366, 2121, 420, 44494, 399, 307, 2121, 420, 264, 1624, 43233, 1491, 307, 2121, 13, 50720, 50720, 400, 370, 291, 393, 764, 729, 17443, 294, 264, 472, 295, 2445, 13, 51032, 51032, 509, 393, 29879, 300, 293, 291, 393, 584, 11, 2264, 11, 718, 311, 853, 437, 2314, 498, 286, 362, 364, 3256, 6162, 293, 51452, 51452, 1854, 307, 746, 1646, 13, 51520, 51520, 1779, 13, 51524, 51524], "temperature": 0.0, "avg_logprob": -0.19134286331803832, "compression_ratio": 1.5141242937853108, "no_caption_prob": 9.221889740729239e-06}, {"id": 279, "seek": 151368, "start": 1520.8, "end": 1527.04, "text": " And so you can use those weights in the one of function.", "tokens": [50364, 16904, 11, 729, 366, 2121, 420, 44494, 399, 307, 2121, 420, 264, 1624, 43233, 1491, 307, 2121, 13, 50720, 50720, 400, 370, 291, 393, 764, 729, 17443, 294, 264, 472, 295, 2445, 13, 51032, 51032, 509, 393, 29879, 300, 293, 291, 393, 584, 11, 2264, 11, 718, 311, 853, 437, 2314, 498, 286, 362, 364, 3256, 6162, 293, 51452, 51452, 1854, 307, 746, 1646, 13, 51520, 51520, 1779, 13, 51524, 51524], "temperature": 0.0, "avg_logprob": -0.19134286331803832, "compression_ratio": 1.5141242937853108, "no_caption_prob": 9.221889740729239e-06}, {"id": 280, "seek": 151368, "start": 1527.04, "end": 1535.44, "text": " You can tweak that and you can say, OK, let's try what happens if I have an image tag and", "tokens": [50364, 16904, 11, 729, 366, 2121, 420, 44494, 399, 307, 2121, 420, 264, 1624, 43233, 1491, 307, 2121, 13, 50720, 50720, 400, 370, 291, 393, 764, 729, 17443, 294, 264, 472, 295, 2445, 13, 51032, 51032, 509, 393, 29879, 300, 293, 291, 393, 584, 11, 2264, 11, 718, 311, 853, 437, 2314, 498, 286, 362, 364, 3256, 6162, 293, 51452, 51452, 1854, 307, 746, 1646, 13, 51520, 51520, 1779, 13, 51524, 51524], "temperature": 0.0, "avg_logprob": -0.19134286331803832, "compression_ratio": 1.5141242937853108, "no_caption_prob": 9.221889740729239e-06}, {"id": 281, "seek": 151368, "start": 1535.44, "end": 1536.8, "text": " inside is something else.", "tokens": [50364, 16904, 11, 729, 366, 2121, 420, 44494, 399, 307, 2121, 420, 264, 1624, 43233, 1491, 307, 2121, 13, 50720, 50720, 400, 370, 291, 393, 764, 729, 17443, 294, 264, 472, 295, 2445, 13, 51032, 51032, 509, 393, 29879, 300, 293, 291, 393, 584, 11, 2264, 11, 718, 311, 853, 437, 2314, 498, 286, 362, 364, 3256, 6162, 293, 51452, 51452, 1854, 307, 746, 1646, 13, 51520, 51520, 1779, 13, 51524, 51524], "temperature": 0.0, "avg_logprob": -0.19134286331803832, "compression_ratio": 1.5141242937853108, "no_caption_prob": 9.221889740729239e-06}, {"id": 282, "seek": 151368, "start": 1536.8, "end": 1536.88, "text": " Right.", "tokens": [50364, 16904, 11, 729, 366, 2121, 420, 44494, 399, 307, 2121, 420, 264, 1624, 43233, 1491, 307, 2121, 13, 50720, 50720, 400, 370, 291, 393, 764, 729, 17443, 294, 264, 472, 295, 2445, 13, 51032, 51032, 509, 393, 29879, 300, 293, 291, 393, 584, 11, 2264, 11, 718, 311, 853, 437, 2314, 498, 286, 362, 364, 3256, 6162, 293, 51452, 51452, 1854, 307, 746, 1646, 13, 51520, 51520, 1779, 13, 51524, 51524], "temperature": 0.0, "avg_logprob": -0.19134286331803832, "compression_ratio": 1.5141242937853108, "no_caption_prob": 9.221889740729239e-06}, {"id": 283, "seek": 153688, "start": 1536.88, "end": 1544.96, "text": " So you can say with probability this and that, generate a string that is those tokens.", "tokens": [50364, 407, 291, 393, 584, 365, 8482, 341, 293, 300, 11, 8460, 257, 6798, 300, 307, 729, 22667, 13, 50768, 50796, 407, 411, 1624, 43233, 1491, 11, 3732, 16904, 11, 746, 294, 552, 11, 550, 1269, 1168, 11, 550, 51180, 51180, 1269, 23350, 9374, 293, 853, 281, 1190, 264, 1379, 551, 797, 1854, 13, 51460, 51460, 1779, 13, 51468, 51468, 407, 291, 393, 853, 281, 1884, 613, 3331, 13, 51644, 51668], "temperature": 0.0, "avg_logprob": -0.24442479345533583, "compression_ratio": 1.5852272727272727, "no_caption_prob": 6.810537888668478e-05}, {"id": 284, "seek": 153688, "start": 1545.5200000000002, "end": 1553.2, "text": " So like exclamation mark, square bracket, something in them, then open question, then", "tokens": [50364, 407, 291, 393, 584, 365, 8482, 341, 293, 300, 11, 8460, 257, 6798, 300, 307, 729, 22667, 13, 50768, 50796, 407, 411, 1624, 43233, 1491, 11, 3732, 16904, 11, 746, 294, 552, 11, 550, 1269, 1168, 11, 550, 51180, 51180, 1269, 23350, 9374, 293, 853, 281, 1190, 264, 1379, 551, 797, 1854, 13, 51460, 51460, 1779, 13, 51468, 51468, 407, 291, 393, 853, 281, 1884, 613, 3331, 13, 51644, 51668], "temperature": 0.0, "avg_logprob": -0.24442479345533583, "compression_ratio": 1.5852272727272727, "no_caption_prob": 6.810537888668478e-05}, {"id": 285, "seek": 153688, "start": 1553.2, "end": 1558.8000000000002, "text": " open parenthesis and try to run the whole thing again inside.", "tokens": [50364, 407, 291, 393, 584, 365, 8482, 341, 293, 300, 11, 8460, 257, 6798, 300, 307, 729, 22667, 13, 50768, 50796, 407, 411, 1624, 43233, 1491, 11, 3732, 16904, 11, 746, 294, 552, 11, 550, 1269, 1168, 11, 550, 51180, 51180, 1269, 23350, 9374, 293, 853, 281, 1190, 264, 1379, 551, 797, 1854, 13, 51460, 51460, 1779, 13, 51468, 51468, 407, 291, 393, 853, 281, 1884, 613, 3331, 13, 51644, 51668], "temperature": 0.0, "avg_logprob": -0.24442479345533583, "compression_ratio": 1.5852272727272727, "no_caption_prob": 6.810537888668478e-05}, {"id": 286, "seek": 153688, "start": 1558.8000000000002, "end": 1558.96, "text": " Right.", "tokens": [50364, 407, 291, 393, 584, 365, 8482, 341, 293, 300, 11, 8460, 257, 6798, 300, 307, 729, 22667, 13, 50768, 50796, 407, 411, 1624, 43233, 1491, 11, 3732, 16904, 11, 746, 294, 552, 11, 550, 1269, 1168, 11, 550, 51180, 51180, 1269, 23350, 9374, 293, 853, 281, 1190, 264, 1379, 551, 797, 1854, 13, 51460, 51460, 1779, 13, 51468, 51468, 407, 291, 393, 853, 281, 1884, 613, 3331, 13, 51644, 51668], "temperature": 0.0, "avg_logprob": -0.24442479345533583, "compression_ratio": 1.5852272727272727, "no_caption_prob": 6.810537888668478e-05}, {"id": 287, "seek": 153688, "start": 1558.96, "end": 1562.48, "text": " So you can try to create these cases.", "tokens": [50364, 407, 291, 393, 584, 365, 8482, 341, 293, 300, 11, 8460, 257, 6798, 300, 307, 729, 22667, 13, 50768, 50796, 407, 411, 1624, 43233, 1491, 11, 3732, 16904, 11, 746, 294, 552, 11, 550, 1269, 1168, 11, 550, 51180, 51180, 1269, 23350, 9374, 293, 853, 281, 1190, 264, 1379, 551, 797, 1854, 13, 51460, 51460, 1779, 13, 51468, 51468, 407, 291, 393, 853, 281, 1884, 613, 3331, 13, 51644, 51668], "temperature": 0.0, "avg_logprob": -0.24442479345533583, "compression_ratio": 1.5852272727272727, "no_caption_prob": 6.810537888668478e-05}, {"id": 288, "seek": 156248, "start": 1562.48, "end": 1566.4, "text": " You can try to go based on the tokens.", "tokens": [50364, 509, 393, 853, 281, 352, 2361, 322, 264, 22667, 13, 50560, 50560, 407, 264, 22667, 366, 257, 707, 857, 411, 3801, 4985, 813, 445, 257, 2517, 13, 50764, 50784, 583, 5800, 291, 366, 1382, 264, 1880, 1507, 544, 2049, 813, 445, 11, 718, 311, 584, 11, 23339, 804, 51196, 51196, 4342, 570, 729, 360, 406, 13, 51292, 51292, 865, 11, 309, 2544, 411, 456, 366, 257, 688, 295, 11587, 291, 727, 764, 13, 51436, 51436, 1743, 1071, 472, 300, 1487, 281, 1575, 307, 291, 727, 11, 291, 458, 11, 498, 291, 7690, 264, 4846, 51740, 51740], "temperature": 0.0, "avg_logprob": -0.22001642110396405, "compression_ratio": 1.6666666666666667, "no_caption_prob": 0.00013131780724506825}, {"id": 289, "seek": 156248, "start": 1566.4, "end": 1570.48, "text": " So the tokens are a little bit like bigger unit than just a character.", "tokens": [50364, 509, 393, 853, 281, 352, 2361, 322, 264, 22667, 13, 50560, 50560, 407, 264, 22667, 366, 257, 707, 857, 411, 3801, 4985, 813, 445, 257, 2517, 13, 50764, 50784, 583, 5800, 291, 366, 1382, 264, 1880, 1507, 544, 2049, 813, 445, 11, 718, 311, 584, 11, 23339, 804, 51196, 51196, 4342, 570, 729, 360, 406, 13, 51292, 51292, 865, 11, 309, 2544, 411, 456, 366, 257, 688, 295, 11587, 291, 727, 764, 13, 51436, 51436, 1743, 1071, 472, 300, 1487, 281, 1575, 307, 291, 727, 11, 291, 458, 11, 498, 291, 7690, 264, 4846, 51740, 51740], "temperature": 0.0, "avg_logprob": -0.22001642110396405, "compression_ratio": 1.6666666666666667, "no_caption_prob": 0.00013131780724506825}, {"id": 290, "seek": 156248, "start": 1570.88, "end": 1579.1200000000001, "text": " But suddenly you are trying the interesting stuff more often than just, let's say, alphabetical", "tokens": [50364, 509, 393, 853, 281, 352, 2361, 322, 264, 22667, 13, 50560, 50560, 407, 264, 22667, 366, 257, 707, 857, 411, 3801, 4985, 813, 445, 257, 2517, 13, 50764, 50784, 583, 5800, 291, 366, 1382, 264, 1880, 1507, 544, 2049, 813, 445, 11, 718, 311, 584, 11, 23339, 804, 51196, 51196, 4342, 570, 729, 360, 406, 13, 51292, 51292, 865, 11, 309, 2544, 411, 456, 366, 257, 688, 295, 11587, 291, 727, 764, 13, 51436, 51436, 1743, 1071, 472, 300, 1487, 281, 1575, 307, 291, 727, 11, 291, 458, 11, 498, 291, 7690, 264, 4846, 51740, 51740], "temperature": 0.0, "avg_logprob": -0.22001642110396405, "compression_ratio": 1.6666666666666667, "no_caption_prob": 0.00013131780724506825}, {"id": 291, "seek": 156248, "start": 1579.1200000000001, "end": 1581.04, "text": " characters because those do not.", "tokens": [50364, 509, 393, 853, 281, 352, 2361, 322, 264, 22667, 13, 50560, 50560, 407, 264, 22667, 366, 257, 707, 857, 411, 3801, 4985, 813, 445, 257, 2517, 13, 50764, 50784, 583, 5800, 291, 366, 1382, 264, 1880, 1507, 544, 2049, 813, 445, 11, 718, 311, 584, 11, 23339, 804, 51196, 51196, 4342, 570, 729, 360, 406, 13, 51292, 51292, 865, 11, 309, 2544, 411, 456, 366, 257, 688, 295, 11587, 291, 727, 764, 13, 51436, 51436, 1743, 1071, 472, 300, 1487, 281, 1575, 307, 291, 727, 11, 291, 458, 11, 498, 291, 7690, 264, 4846, 51740, 51740], "temperature": 0.0, "avg_logprob": -0.22001642110396405, "compression_ratio": 1.6666666666666667, "no_caption_prob": 0.00013131780724506825}, {"id": 292, "seek": 156248, "start": 1581.04, "end": 1583.92, "text": " Yeah, it seems like there are a lot of approaches you could use.", "tokens": [50364, 509, 393, 853, 281, 352, 2361, 322, 264, 22667, 13, 50560, 50560, 407, 264, 22667, 366, 257, 707, 857, 411, 3801, 4985, 813, 445, 257, 2517, 13, 50764, 50784, 583, 5800, 291, 366, 1382, 264, 1880, 1507, 544, 2049, 813, 445, 11, 718, 311, 584, 11, 23339, 804, 51196, 51196, 4342, 570, 729, 360, 406, 13, 51292, 51292, 865, 11, 309, 2544, 411, 456, 366, 257, 688, 295, 11587, 291, 727, 764, 13, 51436, 51436, 1743, 1071, 472, 300, 1487, 281, 1575, 307, 291, 727, 11, 291, 458, 11, 498, 291, 7690, 264, 4846, 51740, 51740], "temperature": 0.0, "avg_logprob": -0.22001642110396405, "compression_ratio": 1.6666666666666667, "no_caption_prob": 0.00013131780724506825}, {"id": 293, "seek": 156248, "start": 1583.92, "end": 1590.0, "text": " Like another one that comes to mind is you could, you know, if you construct the input", "tokens": [50364, 509, 393, 853, 281, 352, 2361, 322, 264, 22667, 13, 50560, 50560, 407, 264, 22667, 366, 257, 707, 857, 411, 3801, 4985, 813, 445, 257, 2517, 13, 50764, 50784, 583, 5800, 291, 366, 1382, 264, 1880, 1507, 544, 2049, 813, 445, 11, 718, 311, 584, 11, 23339, 804, 51196, 51196, 4342, 570, 729, 360, 406, 13, 51292, 51292, 865, 11, 309, 2544, 411, 456, 366, 257, 688, 295, 11587, 291, 727, 764, 13, 51436, 51436, 1743, 1071, 472, 300, 1487, 281, 1575, 307, 291, 727, 11, 291, 458, 11, 498, 291, 7690, 264, 4846, 51740, 51740], "temperature": 0.0, "avg_logprob": -0.22001642110396405, "compression_ratio": 1.6666666666666667, "no_caption_prob": 0.00013131780724506825}, {"id": 294, "seek": 159000, "start": 1590.0, "end": 1595.92, "text": " from an AST, then you know you're constructing valid input and you turn that into a string.", "tokens": [50364, 490, 364, 316, 6840, 11, 550, 291, 458, 291, 434, 39969, 7363, 4846, 293, 291, 1261, 300, 666, 257, 6798, 13, 50660, 50660, 286, 914, 11, 2745, 11, 291, 458, 11, 291, 727, 360, 264, 44788, 3109, 13, 50864, 50864, 1300, 840, 964, 307, 1009, 364, 1880, 551, 281, 853, 365, 283, 3334, 8781, 498, 456, 307, 1270, 257, 3410, 51208, 51208, 294, 264, 1154, 291, 434, 1237, 412, 13, 51284, 51284, 583, 4399, 411, 44788, 11, 291, 393, 747, 257, 1322, 257, 4974, 316, 6840, 13, 51660, 51660], "temperature": 0.0, "avg_logprob": -0.1664118190388103, "compression_ratio": 1.5925925925925926, "no_caption_prob": 0.00021651822316925973}, {"id": 295, "seek": 159000, "start": 1595.92, "end": 1600.0, "text": " I mean, obviously, you know, you could do the reversible approach.", "tokens": [50364, 490, 364, 316, 6840, 11, 550, 291, 458, 291, 434, 39969, 7363, 4846, 293, 291, 1261, 300, 666, 257, 6798, 13, 50660, 50660, 286, 914, 11, 2745, 11, 291, 458, 11, 291, 727, 360, 264, 44788, 3109, 13, 50864, 50864, 1300, 840, 964, 307, 1009, 364, 1880, 551, 281, 853, 365, 283, 3334, 8781, 498, 456, 307, 1270, 257, 3410, 51208, 51208, 294, 264, 1154, 291, 434, 1237, 412, 13, 51284, 51284, 583, 4399, 411, 44788, 11, 291, 393, 747, 257, 1322, 257, 4974, 316, 6840, 13, 51660, 51660], "temperature": 0.0, "avg_logprob": -0.1664118190388103, "compression_ratio": 1.5925925925925926, "no_caption_prob": 0.00021651822316925973}, {"id": 296, "seek": 159000, "start": 1600.0, "end": 1606.88, "text": " Reversible is always an interesting thing to try with fuzzing if there is such a concept", "tokens": [50364, 490, 364, 316, 6840, 11, 550, 291, 458, 291, 434, 39969, 7363, 4846, 293, 291, 1261, 300, 666, 257, 6798, 13, 50660, 50660, 286, 914, 11, 2745, 11, 291, 458, 11, 291, 727, 360, 264, 44788, 3109, 13, 50864, 50864, 1300, 840, 964, 307, 1009, 364, 1880, 551, 281, 853, 365, 283, 3334, 8781, 498, 456, 307, 1270, 257, 3410, 51208, 51208, 294, 264, 1154, 291, 434, 1237, 412, 13, 51284, 51284, 583, 4399, 411, 44788, 11, 291, 393, 747, 257, 1322, 257, 4974, 316, 6840, 13, 51660, 51660], "temperature": 0.0, "avg_logprob": -0.1664118190388103, "compression_ratio": 1.5925925925925926, "no_caption_prob": 0.00021651822316925973}, {"id": 297, "seek": 159000, "start": 1606.88, "end": 1608.4, "text": " in the problem you're looking at.", "tokens": [50364, 490, 364, 316, 6840, 11, 550, 291, 458, 291, 434, 39969, 7363, 4846, 293, 291, 1261, 300, 666, 257, 6798, 13, 50660, 50660, 286, 914, 11, 2745, 11, 291, 458, 11, 291, 727, 360, 264, 44788, 3109, 13, 50864, 50864, 1300, 840, 964, 307, 1009, 364, 1880, 551, 281, 853, 365, 283, 3334, 8781, 498, 456, 307, 1270, 257, 3410, 51208, 51208, 294, 264, 1154, 291, 434, 1237, 412, 13, 51284, 51284, 583, 4399, 411, 44788, 11, 291, 393, 747, 257, 1322, 257, 4974, 316, 6840, 13, 51660, 51660], "temperature": 0.0, "avg_logprob": -0.1664118190388103, "compression_ratio": 1.5925925925925926, "no_caption_prob": 0.00021651822316925973}, {"id": 298, "seek": 159000, "start": 1608.4, "end": 1615.92, "text": " But beyond like reversible, you can take a build a random AST.", "tokens": [50364, 490, 364, 316, 6840, 11, 550, 291, 458, 291, 434, 39969, 7363, 4846, 293, 291, 1261, 300, 666, 257, 6798, 13, 50660, 50660, 286, 914, 11, 2745, 11, 291, 458, 11, 291, 727, 360, 264, 44788, 3109, 13, 50864, 50864, 1300, 840, 964, 307, 1009, 364, 1880, 551, 281, 853, 365, 283, 3334, 8781, 498, 456, 307, 1270, 257, 3410, 51208, 51208, 294, 264, 1154, 291, 434, 1237, 412, 13, 51284, 51284, 583, 4399, 411, 44788, 11, 291, 393, 747, 257, 1322, 257, 4974, 316, 6840, 13, 51660, 51660], "temperature": 0.0, "avg_logprob": -0.1664118190388103, "compression_ratio": 1.5925925925925926, "no_caption_prob": 0.00021651822316925973}, {"id": 299, "seek": 161592, "start": 1615.92, "end": 1620.16, "text": " You can wait certain things that, you know, to make sure there's an even distribution", "tokens": [50364, 509, 393, 1699, 1629, 721, 300, 11, 291, 458, 11, 281, 652, 988, 456, 311, 364, 754, 7316, 50576, 50576, 295, 411, 721, 411, 297, 8714, 11, 337, 1365, 13, 50724, 50724, 400, 550, 291, 727, 352, 293, 1319, 4974, 4342, 420, 291, 727, 1319, 11, 291, 727, 574, 337, 2685, 50984, 50984, 4342, 300, 362, 3620, 293, 2139, 909, 420, 4159, 552, 13, 51212, 51212, 663, 311, 1071, 551, 300, 1062, 1565, 484, 512, 1880, 3331, 13, 51420, 51452, 400, 295, 1164, 11, 291, 727, 445, 352, 293, 1322, 428, 1065, 3879, 2375, 19265, 300, 311, 516, 51692, 51692], "temperature": 0.0, "avg_logprob": -0.16271119959214153, "compression_ratio": 1.7372549019607844, "no_caption_prob": 7.484098750865087e-05}, {"id": 300, "seek": 161592, "start": 1620.16, "end": 1623.1200000000001, "text": " of like things like nesting, for example.", "tokens": [50364, 509, 393, 1699, 1629, 721, 300, 11, 291, 458, 11, 281, 652, 988, 456, 311, 364, 754, 7316, 50576, 50576, 295, 411, 721, 411, 297, 8714, 11, 337, 1365, 13, 50724, 50724, 400, 550, 291, 727, 352, 293, 1319, 4974, 4342, 420, 291, 727, 1319, 11, 291, 727, 574, 337, 2685, 50984, 50984, 4342, 300, 362, 3620, 293, 2139, 909, 420, 4159, 552, 13, 51212, 51212, 663, 311, 1071, 551, 300, 1062, 1565, 484, 512, 1880, 3331, 13, 51420, 51452, 400, 295, 1164, 11, 291, 727, 445, 352, 293, 1322, 428, 1065, 3879, 2375, 19265, 300, 311, 516, 51692, 51692], "temperature": 0.0, "avg_logprob": -0.16271119959214153, "compression_ratio": 1.7372549019607844, "no_caption_prob": 7.484098750865087e-05}, {"id": 301, "seek": 161592, "start": 1623.1200000000001, "end": 1628.3200000000002, "text": " And then you could go and change random characters or you could change, you could look for specific", "tokens": [50364, 509, 393, 1699, 1629, 721, 300, 11, 291, 458, 11, 281, 652, 988, 456, 311, 364, 754, 7316, 50576, 50576, 295, 411, 721, 411, 297, 8714, 11, 337, 1365, 13, 50724, 50724, 400, 550, 291, 727, 352, 293, 1319, 4974, 4342, 420, 291, 727, 1319, 11, 291, 727, 574, 337, 2685, 50984, 50984, 4342, 300, 362, 3620, 293, 2139, 909, 420, 4159, 552, 13, 51212, 51212, 663, 311, 1071, 551, 300, 1062, 1565, 484, 512, 1880, 3331, 13, 51420, 51452, 400, 295, 1164, 11, 291, 727, 445, 352, 293, 1322, 428, 1065, 3879, 2375, 19265, 300, 311, 516, 51692, 51692], "temperature": 0.0, "avg_logprob": -0.16271119959214153, "compression_ratio": 1.7372549019607844, "no_caption_prob": 7.484098750865087e-05}, {"id": 302, "seek": 161592, "start": 1628.3200000000002, "end": 1632.88, "text": " characters that have meaning and either add or remove them.", "tokens": [50364, 509, 393, 1699, 1629, 721, 300, 11, 291, 458, 11, 281, 652, 988, 456, 311, 364, 754, 7316, 50576, 50576, 295, 411, 721, 411, 297, 8714, 11, 337, 1365, 13, 50724, 50724, 400, 550, 291, 727, 352, 293, 1319, 4974, 4342, 420, 291, 727, 1319, 11, 291, 727, 574, 337, 2685, 50984, 50984, 4342, 300, 362, 3620, 293, 2139, 909, 420, 4159, 552, 13, 51212, 51212, 663, 311, 1071, 551, 300, 1062, 1565, 484, 512, 1880, 3331, 13, 51420, 51452, 400, 295, 1164, 11, 291, 727, 445, 352, 293, 1322, 428, 1065, 3879, 2375, 19265, 300, 311, 516, 51692, 51692], "temperature": 0.0, "avg_logprob": -0.16271119959214153, "compression_ratio": 1.7372549019607844, "no_caption_prob": 7.484098750865087e-05}, {"id": 303, "seek": 161592, "start": 1632.88, "end": 1637.04, "text": " That's another thing that might bring out some interesting cases.", "tokens": [50364, 509, 393, 1699, 1629, 721, 300, 11, 291, 458, 11, 281, 652, 988, 456, 311, 364, 754, 7316, 50576, 50576, 295, 411, 721, 411, 297, 8714, 11, 337, 1365, 13, 50724, 50724, 400, 550, 291, 727, 352, 293, 1319, 4974, 4342, 420, 291, 727, 1319, 11, 291, 727, 574, 337, 2685, 50984, 50984, 4342, 300, 362, 3620, 293, 2139, 909, 420, 4159, 552, 13, 51212, 51212, 663, 311, 1071, 551, 300, 1062, 1565, 484, 512, 1880, 3331, 13, 51420, 51452, 400, 295, 1164, 11, 291, 727, 445, 352, 293, 1322, 428, 1065, 3879, 2375, 19265, 300, 311, 516, 51692, 51692], "temperature": 0.0, "avg_logprob": -0.16271119959214153, "compression_ratio": 1.7372549019607844, "no_caption_prob": 7.484098750865087e-05}, {"id": 304, "seek": 161592, "start": 1637.68, "end": 1642.48, "text": " And of course, you could just go and build your own totally custom generator that's going", "tokens": [50364, 509, 393, 1699, 1629, 721, 300, 11, 291, 458, 11, 281, 652, 988, 456, 311, 364, 754, 7316, 50576, 50576, 295, 411, 721, 411, 297, 8714, 11, 337, 1365, 13, 50724, 50724, 400, 550, 291, 727, 352, 293, 1319, 4974, 4342, 420, 291, 727, 1319, 11, 291, 727, 574, 337, 2685, 50984, 50984, 4342, 300, 362, 3620, 293, 2139, 909, 420, 4159, 552, 13, 51212, 51212, 663, 311, 1071, 551, 300, 1062, 1565, 484, 512, 1880, 3331, 13, 51420, 51452, 400, 295, 1164, 11, 291, 727, 445, 352, 293, 1322, 428, 1065, 3879, 2375, 19265, 300, 311, 516, 51692, 51692], "temperature": 0.0, "avg_logprob": -0.16271119959214153, "compression_ratio": 1.7372549019607844, "no_caption_prob": 7.484098750865087e-05}, {"id": 305, "seek": 164248, "start": 1642.48, "end": 1646.96, "text": " to build up inputs that represent these different cases.", "tokens": [50364, 281, 1322, 493, 15743, 300, 2906, 613, 819, 3331, 13, 50588, 50588, 865, 11, 2293, 13, 50688, 50688, 1057, 558, 13, 50716, 50716, 286, 841, 411, 321, 600, 2825, 466, 283, 16740, 4997, 294, 2674, 13, 50908, 50908, 286, 519, 561, 458, 437, 436, 366, 13, 51056, 51056, 6454, 321, 751, 466, 437, 291, 600, 1096, 11, 9184, 30, 51228, 51228, 1743, 437, 307, 777, 294, 428, 11420, 30, 51400, 51400, 708, 307, 819, 30, 51452, 51452, 1057, 558, 13, 51492, 51492, 865, 13, 51516, 51516], "temperature": 0.0, "avg_logprob": -0.3183992559259588, "compression_ratio": 1.4776119402985075, "no_caption_prob": 4.7553716285619885e-05}, {"id": 306, "seek": 164248, "start": 1646.96, "end": 1648.96, "text": " Yeah, exactly.", "tokens": [50364, 281, 1322, 493, 15743, 300, 2906, 613, 819, 3331, 13, 50588, 50588, 865, 11, 2293, 13, 50688, 50688, 1057, 558, 13, 50716, 50716, 286, 841, 411, 321, 600, 2825, 466, 283, 16740, 4997, 294, 2674, 13, 50908, 50908, 286, 519, 561, 458, 437, 436, 366, 13, 51056, 51056, 6454, 321, 751, 466, 437, 291, 600, 1096, 11, 9184, 30, 51228, 51228, 1743, 437, 307, 777, 294, 428, 11420, 30, 51400, 51400, 708, 307, 819, 30, 51452, 51452, 1057, 558, 13, 51492, 51492, 865, 13, 51516, 51516], "temperature": 0.0, "avg_logprob": -0.3183992559259588, "compression_ratio": 1.4776119402985075, "no_caption_prob": 4.7553716285619885e-05}, {"id": 307, "seek": 164248, "start": 1648.96, "end": 1649.52, "text": " All right.", "tokens": [50364, 281, 1322, 493, 15743, 300, 2906, 613, 819, 3331, 13, 50588, 50588, 865, 11, 2293, 13, 50688, 50688, 1057, 558, 13, 50716, 50716, 286, 841, 411, 321, 600, 2825, 466, 283, 16740, 4997, 294, 2674, 13, 50908, 50908, 286, 519, 561, 458, 437, 436, 366, 13, 51056, 51056, 6454, 321, 751, 466, 437, 291, 600, 1096, 11, 9184, 30, 51228, 51228, 1743, 437, 307, 777, 294, 428, 11420, 30, 51400, 51400, 708, 307, 819, 30, 51452, 51452, 1057, 558, 13, 51492, 51492, 865, 13, 51516, 51516], "temperature": 0.0, "avg_logprob": -0.3183992559259588, "compression_ratio": 1.4776119402985075, "no_caption_prob": 4.7553716285619885e-05}, {"id": 308, "seek": 164248, "start": 1649.52, "end": 1653.3600000000001, "text": " I feel like we've talked about fuzz testing in general.", "tokens": [50364, 281, 1322, 493, 15743, 300, 2906, 613, 819, 3331, 13, 50588, 50588, 865, 11, 2293, 13, 50688, 50688, 1057, 558, 13, 50716, 50716, 286, 841, 411, 321, 600, 2825, 466, 283, 16740, 4997, 294, 2674, 13, 50908, 50908, 286, 519, 561, 458, 437, 436, 366, 13, 51056, 51056, 6454, 321, 751, 466, 437, 291, 600, 1096, 11, 9184, 30, 51228, 51228, 1743, 437, 307, 777, 294, 428, 11420, 30, 51400, 51400, 708, 307, 819, 30, 51452, 51452, 1057, 558, 13, 51492, 51492, 865, 13, 51516, 51516], "temperature": 0.0, "avg_logprob": -0.3183992559259588, "compression_ratio": 1.4776119402985075, "no_caption_prob": 4.7553716285619885e-05}, {"id": 309, "seek": 164248, "start": 1653.3600000000001, "end": 1656.32, "text": " I think people know what they are.", "tokens": [50364, 281, 1322, 493, 15743, 300, 2906, 613, 819, 3331, 13, 50588, 50588, 865, 11, 2293, 13, 50688, 50688, 1057, 558, 13, 50716, 50716, 286, 841, 411, 321, 600, 2825, 466, 283, 16740, 4997, 294, 2674, 13, 50908, 50908, 286, 519, 561, 458, 437, 436, 366, 13, 51056, 51056, 6454, 321, 751, 466, 437, 291, 600, 1096, 11, 9184, 30, 51228, 51228, 1743, 437, 307, 777, 294, 428, 11420, 30, 51400, 51400, 708, 307, 819, 30, 51452, 51452, 1057, 558, 13, 51492, 51492, 865, 13, 51516, 51516], "temperature": 0.0, "avg_logprob": -0.3183992559259588, "compression_ratio": 1.4776119402985075, "no_caption_prob": 4.7553716285619885e-05}, {"id": 310, "seek": 164248, "start": 1656.32, "end": 1659.76, "text": " Should we talk about what you've done, Martin?", "tokens": [50364, 281, 1322, 493, 15743, 300, 2906, 613, 819, 3331, 13, 50588, 50588, 865, 11, 2293, 13, 50688, 50688, 1057, 558, 13, 50716, 50716, 286, 841, 411, 321, 600, 2825, 466, 283, 16740, 4997, 294, 2674, 13, 50908, 50908, 286, 519, 561, 458, 437, 436, 366, 13, 51056, 51056, 6454, 321, 751, 466, 437, 291, 600, 1096, 11, 9184, 30, 51228, 51228, 1743, 437, 307, 777, 294, 428, 11420, 30, 51400, 51400, 708, 307, 819, 30, 51452, 51452, 1057, 558, 13, 51492, 51492, 865, 13, 51516, 51516], "temperature": 0.0, "avg_logprob": -0.3183992559259588, "compression_ratio": 1.4776119402985075, "no_caption_prob": 4.7553716285619885e-05}, {"id": 311, "seek": 164248, "start": 1659.76, "end": 1663.2, "text": " Like what is new in your implementation?", "tokens": [50364, 281, 1322, 493, 15743, 300, 2906, 613, 819, 3331, 13, 50588, 50588, 865, 11, 2293, 13, 50688, 50688, 1057, 558, 13, 50716, 50716, 286, 841, 411, 321, 600, 2825, 466, 283, 16740, 4997, 294, 2674, 13, 50908, 50908, 286, 519, 561, 458, 437, 436, 366, 13, 51056, 51056, 6454, 321, 751, 466, 437, 291, 600, 1096, 11, 9184, 30, 51228, 51228, 1743, 437, 307, 777, 294, 428, 11420, 30, 51400, 51400, 708, 307, 819, 30, 51452, 51452, 1057, 558, 13, 51492, 51492, 865, 13, 51516, 51516], "temperature": 0.0, "avg_logprob": -0.3183992559259588, "compression_ratio": 1.4776119402985075, "no_caption_prob": 4.7553716285619885e-05}, {"id": 312, "seek": 164248, "start": 1663.2, "end": 1664.24, "text": " What is different?", "tokens": [50364, 281, 1322, 493, 15743, 300, 2906, 613, 819, 3331, 13, 50588, 50588, 865, 11, 2293, 13, 50688, 50688, 1057, 558, 13, 50716, 50716, 286, 841, 411, 321, 600, 2825, 466, 283, 16740, 4997, 294, 2674, 13, 50908, 50908, 286, 519, 561, 458, 437, 436, 366, 13, 51056, 51056, 6454, 321, 751, 466, 437, 291, 600, 1096, 11, 9184, 30, 51228, 51228, 1743, 437, 307, 777, 294, 428, 11420, 30, 51400, 51400, 708, 307, 819, 30, 51452, 51452, 1057, 558, 13, 51492, 51492, 865, 13, 51516, 51516], "temperature": 0.0, "avg_logprob": -0.3183992559259588, "compression_ratio": 1.4776119402985075, "no_caption_prob": 4.7553716285619885e-05}, {"id": 313, "seek": 164248, "start": 1664.24, "end": 1665.04, "text": " All right.", "tokens": [50364, 281, 1322, 493, 15743, 300, 2906, 613, 819, 3331, 13, 50588, 50588, 865, 11, 2293, 13, 50688, 50688, 1057, 558, 13, 50716, 50716, 286, 841, 411, 321, 600, 2825, 466, 283, 16740, 4997, 294, 2674, 13, 50908, 50908, 286, 519, 561, 458, 437, 436, 366, 13, 51056, 51056, 6454, 321, 751, 466, 437, 291, 600, 1096, 11, 9184, 30, 51228, 51228, 1743, 437, 307, 777, 294, 428, 11420, 30, 51400, 51400, 708, 307, 819, 30, 51452, 51452, 1057, 558, 13, 51492, 51492, 865, 13, 51516, 51516], "temperature": 0.0, "avg_logprob": -0.3183992559259588, "compression_ratio": 1.4776119402985075, "no_caption_prob": 4.7553716285619885e-05}, {"id": 314, "seek": 164248, "start": 1665.04, "end": 1665.52, "text": " Yeah.", "tokens": [50364, 281, 1322, 493, 15743, 300, 2906, 613, 819, 3331, 13, 50588, 50588, 865, 11, 2293, 13, 50688, 50688, 1057, 558, 13, 50716, 50716, 286, 841, 411, 321, 600, 2825, 466, 283, 16740, 4997, 294, 2674, 13, 50908, 50908, 286, 519, 561, 458, 437, 436, 366, 13, 51056, 51056, 6454, 321, 751, 466, 437, 291, 600, 1096, 11, 9184, 30, 51228, 51228, 1743, 437, 307, 777, 294, 428, 11420, 30, 51400, 51400, 708, 307, 819, 30, 51452, 51452, 1057, 558, 13, 51492, 51492, 865, 13, 51516, 51516], "temperature": 0.0, "avg_logprob": -0.3183992559259588, "compression_ratio": 1.4776119402985075, "no_caption_prob": 4.7553716285619885e-05}, {"id": 315, "seek": 166552, "start": 1665.52, "end": 1676.56, "text": " So my changes to elm test and what's going to come out in elm test v2 is a re implementation", "tokens": [50364, 407, 452, 2962, 281, 806, 76, 1500, 293, 437, 311, 516, 281, 808, 484, 294, 806, 76, 1500, 371, 17, 307, 257, 319, 11420, 50916, 50916, 295, 264, 41684, 1399, 13, 51016, 51016, 407, 445, 281, 2661, 20858, 309, 11, 806, 76, 1500, 486, 8460, 4974, 15743, 281, 428, 2445, 13, 51388, 51388, 400, 498, 309, 10704, 300, 4846, 18199, 264, 1500, 11, 309, 486, 853, 281, 20460, 309, 13, 51668, 51668, 1779, 13, 51692, 51692], "temperature": 0.0, "avg_logprob": -0.23128071809426332, "compression_ratio": 1.5026455026455026, "no_caption_prob": 1.7775942978914827e-05}, {"id": 316, "seek": 166552, "start": 1676.56, "end": 1678.56, "text": " of the shrinking process.", "tokens": [50364, 407, 452, 2962, 281, 806, 76, 1500, 293, 437, 311, 516, 281, 808, 484, 294, 806, 76, 1500, 371, 17, 307, 257, 319, 11420, 50916, 50916, 295, 264, 41684, 1399, 13, 51016, 51016, 407, 445, 281, 2661, 20858, 309, 11, 806, 76, 1500, 486, 8460, 4974, 15743, 281, 428, 2445, 13, 51388, 51388, 400, 498, 309, 10704, 300, 4846, 18199, 264, 1500, 11, 309, 486, 853, 281, 20460, 309, 13, 51668, 51668, 1779, 13, 51692, 51692], "temperature": 0.0, "avg_logprob": -0.23128071809426332, "compression_ratio": 1.5026455026455026, "no_caption_prob": 1.7775942978914827e-05}, {"id": 317, "seek": 166552, "start": 1678.56, "end": 1686.0, "text": " So just to quickly summarize it, elm test will generate random inputs to your function.", "tokens": [50364, 407, 452, 2962, 281, 806, 76, 1500, 293, 437, 311, 516, 281, 808, 484, 294, 806, 76, 1500, 371, 17, 307, 257, 319, 11420, 50916, 50916, 295, 264, 41684, 1399, 13, 51016, 51016, 407, 445, 281, 2661, 20858, 309, 11, 806, 76, 1500, 486, 8460, 4974, 15743, 281, 428, 2445, 13, 51388, 51388, 400, 498, 309, 10704, 300, 4846, 18199, 264, 1500, 11, 309, 486, 853, 281, 20460, 309, 13, 51668, 51668, 1779, 13, 51692, 51692], "temperature": 0.0, "avg_logprob": -0.23128071809426332, "compression_ratio": 1.5026455026455026, "no_caption_prob": 1.7775942978914827e-05}, {"id": 318, "seek": 166552, "start": 1686.0, "end": 1691.6, "text": " And if it finds that input fails the test, it will try to simplify it.", "tokens": [50364, 407, 452, 2962, 281, 806, 76, 1500, 293, 437, 311, 516, 281, 808, 484, 294, 806, 76, 1500, 371, 17, 307, 257, 319, 11420, 50916, 50916, 295, 264, 41684, 1399, 13, 51016, 51016, 407, 445, 281, 2661, 20858, 309, 11, 806, 76, 1500, 486, 8460, 4974, 15743, 281, 428, 2445, 13, 51388, 51388, 400, 498, 309, 10704, 300, 4846, 18199, 264, 1500, 11, 309, 486, 853, 281, 20460, 309, 13, 51668, 51668, 1779, 13, 51692, 51692], "temperature": 0.0, "avg_logprob": -0.23128071809426332, "compression_ratio": 1.5026455026455026, "no_caption_prob": 1.7775942978914827e-05}, {"id": 319, "seek": 166552, "start": 1691.6, "end": 1692.08, "text": " Right.", "tokens": [50364, 407, 452, 2962, 281, 806, 76, 1500, 293, 437, 311, 516, 281, 808, 484, 294, 806, 76, 1500, 371, 17, 307, 257, 319, 11420, 50916, 50916, 295, 264, 41684, 1399, 13, 51016, 51016, 407, 445, 281, 2661, 20858, 309, 11, 806, 76, 1500, 486, 8460, 4974, 15743, 281, 428, 2445, 13, 51388, 51388, 400, 498, 309, 10704, 300, 4846, 18199, 264, 1500, 11, 309, 486, 853, 281, 20460, 309, 13, 51668, 51668, 1779, 13, 51692, 51692], "temperature": 0.0, "avg_logprob": -0.23128071809426332, "compression_ratio": 1.5026455026455026, "no_caption_prob": 1.7775942978914827e-05}, {"id": 320, "seek": 169208, "start": 1692.08, "end": 1701.4399999999998, "text": " So it might turn 512, it might turn it into zero or it might divide it by two.", "tokens": [50364, 407, 309, 1062, 1261, 1025, 4762, 11, 309, 1062, 1261, 309, 666, 4018, 420, 309, 1062, 9845, 309, 538, 732, 13, 50832, 50832, 467, 1062, 16390, 472, 490, 309, 13, 50932, 50932, 467, 445, 9898, 281, 652, 309, 4356, 6063, 420, 18587, 13, 51068, 51068, 400, 456, 485, 51208, 51208, 759, 428, 32411, 2445, 18199, 322, 257, 1329, 365, 257, 4714, 4754, 11, 457, 309, 611, 18199, 281, 1333, 51632, 51632], "temperature": 0.0, "avg_logprob": -0.2510734976154484, "compression_ratio": 1.497175141242938, "no_caption_prob": 3.590261985664256e-05}, {"id": 321, "seek": 169208, "start": 1701.4399999999998, "end": 1703.4399999999998, "text": " It might subtract one from it.", "tokens": [50364, 407, 309, 1062, 1261, 1025, 4762, 11, 309, 1062, 1261, 309, 666, 4018, 420, 309, 1062, 9845, 309, 538, 732, 13, 50832, 50832, 467, 1062, 16390, 472, 490, 309, 13, 50932, 50932, 467, 445, 9898, 281, 652, 309, 4356, 6063, 420, 18587, 13, 51068, 51068, 400, 456, 485, 51208, 51208, 759, 428, 32411, 2445, 18199, 322, 257, 1329, 365, 257, 4714, 4754, 11, 457, 309, 611, 18199, 281, 1333, 51632, 51632], "temperature": 0.0, "avg_logprob": -0.2510734976154484, "compression_ratio": 1.497175141242938, "no_caption_prob": 3.590261985664256e-05}, {"id": 322, "seek": 169208, "start": 1703.4399999999998, "end": 1706.1599999999999, "text": " It just tries to make it smaller somehow or simpler.", "tokens": [50364, 407, 309, 1062, 1261, 1025, 4762, 11, 309, 1062, 1261, 309, 666, 4018, 420, 309, 1062, 9845, 309, 538, 732, 13, 50832, 50832, 467, 1062, 16390, 472, 490, 309, 13, 50932, 50932, 467, 445, 9898, 281, 652, 309, 4356, 6063, 420, 18587, 13, 51068, 51068, 400, 456, 485, 51208, 51208, 759, 428, 32411, 2445, 18199, 322, 257, 1329, 365, 257, 4714, 4754, 11, 457, 309, 611, 18199, 281, 1333, 51632, 51632], "temperature": 0.0, "avg_logprob": -0.2510734976154484, "compression_ratio": 1.497175141242938, "no_caption_prob": 3.590261985664256e-05}, {"id": 323, "seek": 169208, "start": 1706.1599999999999, "end": 1708.96, "text": " And there...", "tokens": [50364, 407, 309, 1062, 1261, 1025, 4762, 11, 309, 1062, 1261, 309, 666, 4018, 420, 309, 1062, 9845, 309, 538, 732, 13, 50832, 50832, 467, 1062, 16390, 472, 490, 309, 13, 50932, 50932, 467, 445, 9898, 281, 652, 309, 4356, 6063, 420, 18587, 13, 51068, 51068, 400, 456, 485, 51208, 51208, 759, 428, 32411, 2445, 18199, 322, 257, 1329, 365, 257, 4714, 4754, 11, 457, 309, 611, 18199, 281, 1333, 51632, 51632], "temperature": 0.0, "avg_logprob": -0.2510734976154484, "compression_ratio": 1.497175141242938, "no_caption_prob": 3.590261985664256e-05}, {"id": 324, "seek": 169208, "start": 1708.96, "end": 1717.4399999999998, "text": " If your sorting function fails on a list with a thousand items, but it also fails to sort", "tokens": [50364, 407, 309, 1062, 1261, 1025, 4762, 11, 309, 1062, 1261, 309, 666, 4018, 420, 309, 1062, 9845, 309, 538, 732, 13, 50832, 50832, 467, 1062, 16390, 472, 490, 309, 13, 50932, 50932, 467, 445, 9898, 281, 652, 309, 4356, 6063, 420, 18587, 13, 51068, 51068, 400, 456, 485, 51208, 51208, 759, 428, 32411, 2445, 18199, 322, 257, 1329, 365, 257, 4714, 4754, 11, 457, 309, 611, 18199, 281, 1333, 51632, 51632], "temperature": 0.0, "avg_logprob": -0.2510734976154484, "compression_ratio": 1.497175141242938, "no_caption_prob": 3.590261985664256e-05}, {"id": 325, "seek": 171744, "start": 1717.44, "end": 1722.16, "text": " correctly on a list, there's an input with two items that also fails.", "tokens": [50364, 8944, 322, 257, 1329, 11, 456, 311, 364, 4846, 365, 732, 4754, 300, 611, 18199, 13, 50600, 50600, 509, 500, 380, 528, 428, 6713, 3636, 281, 584, 11, 4177, 11, 286, 1352, 257, 18223, 1365, 13, 50780, 50780, 509, 528, 309, 281, 855, 291, 264, 22811, 1365, 13, 50884, 50884, 467, 393, 855, 291, 264, 18199, 13, 50960, 50960, 865, 13, 50984, 50984, 467, 311, 406, 588, 4961, 498, 309, 2709, 291, 746, 300, 2516, 732, 11171, 445, 281, 3096, 264, 2158, 13, 51240, 51240, 1779, 13, 51264, 51264, 407, 2138, 485, 51340, 51340, 1044, 291, 11, 806, 76, 1500, 13, 51464, 51464, 865, 13, 51500, 51500, 1743, 11, 286, 2041, 341, 307, 2085, 13, 51584, 51584, 1033, 13, 51608, 51608], "temperature": 0.0, "avg_logprob": -0.27667217719845655, "compression_ratio": 1.592885375494071, "no_caption_prob": 0.00022685877047479153}, {"id": 326, "seek": 171744, "start": 1722.16, "end": 1725.76, "text": " You don't want your error message to say, hey, I found a failing example.", "tokens": [50364, 8944, 322, 257, 1329, 11, 456, 311, 364, 4846, 365, 732, 4754, 300, 611, 18199, 13, 50600, 50600, 509, 500, 380, 528, 428, 6713, 3636, 281, 584, 11, 4177, 11, 286, 1352, 257, 18223, 1365, 13, 50780, 50780, 509, 528, 309, 281, 855, 291, 264, 22811, 1365, 13, 50884, 50884, 467, 393, 855, 291, 264, 18199, 13, 50960, 50960, 865, 13, 50984, 50984, 467, 311, 406, 588, 4961, 498, 309, 2709, 291, 746, 300, 2516, 732, 11171, 445, 281, 3096, 264, 2158, 13, 51240, 51240, 1779, 13, 51264, 51264, 407, 2138, 485, 51340, 51340, 1044, 291, 11, 806, 76, 1500, 13, 51464, 51464, 865, 13, 51500, 51500, 1743, 11, 286, 2041, 341, 307, 2085, 13, 51584, 51584, 1033, 13, 51608, 51608], "temperature": 0.0, "avg_logprob": -0.27667217719845655, "compression_ratio": 1.592885375494071, "no_caption_prob": 0.00022685877047479153}, {"id": 327, "seek": 171744, "start": 1725.76, "end": 1727.8400000000001, "text": " You want it to show you the simplest example.", "tokens": [50364, 8944, 322, 257, 1329, 11, 456, 311, 364, 4846, 365, 732, 4754, 300, 611, 18199, 13, 50600, 50600, 509, 500, 380, 528, 428, 6713, 3636, 281, 584, 11, 4177, 11, 286, 1352, 257, 18223, 1365, 13, 50780, 50780, 509, 528, 309, 281, 855, 291, 264, 22811, 1365, 13, 50884, 50884, 467, 393, 855, 291, 264, 18199, 13, 50960, 50960, 865, 13, 50984, 50984, 467, 311, 406, 588, 4961, 498, 309, 2709, 291, 746, 300, 2516, 732, 11171, 445, 281, 3096, 264, 2158, 13, 51240, 51240, 1779, 13, 51264, 51264, 407, 2138, 485, 51340, 51340, 1044, 291, 11, 806, 76, 1500, 13, 51464, 51464, 865, 13, 51500, 51500, 1743, 11, 286, 2041, 341, 307, 2085, 13, 51584, 51584, 1033, 13, 51608, 51608], "temperature": 0.0, "avg_logprob": -0.27667217719845655, "compression_ratio": 1.592885375494071, "no_caption_prob": 0.00022685877047479153}, {"id": 328, "seek": 171744, "start": 1727.8400000000001, "end": 1729.3600000000001, "text": " It can show you the fails.", "tokens": [50364, 8944, 322, 257, 1329, 11, 456, 311, 364, 4846, 365, 732, 4754, 300, 611, 18199, 13, 50600, 50600, 509, 500, 380, 528, 428, 6713, 3636, 281, 584, 11, 4177, 11, 286, 1352, 257, 18223, 1365, 13, 50780, 50780, 509, 528, 309, 281, 855, 291, 264, 22811, 1365, 13, 50884, 50884, 467, 393, 855, 291, 264, 18199, 13, 50960, 50960, 865, 13, 50984, 50984, 467, 311, 406, 588, 4961, 498, 309, 2709, 291, 746, 300, 2516, 732, 11171, 445, 281, 3096, 264, 2158, 13, 51240, 51240, 1779, 13, 51264, 51264, 407, 2138, 485, 51340, 51340, 1044, 291, 11, 806, 76, 1500, 13, 51464, 51464, 865, 13, 51500, 51500, 1743, 11, 286, 2041, 341, 307, 2085, 13, 51584, 51584, 1033, 13, 51608, 51608], "temperature": 0.0, "avg_logprob": -0.27667217719845655, "compression_ratio": 1.592885375494071, "no_caption_prob": 0.00022685877047479153}, {"id": 329, "seek": 171744, "start": 1729.3600000000001, "end": 1729.8400000000001, "text": " Yeah.", "tokens": [50364, 8944, 322, 257, 1329, 11, 456, 311, 364, 4846, 365, 732, 4754, 300, 611, 18199, 13, 50600, 50600, 509, 500, 380, 528, 428, 6713, 3636, 281, 584, 11, 4177, 11, 286, 1352, 257, 18223, 1365, 13, 50780, 50780, 509, 528, 309, 281, 855, 291, 264, 22811, 1365, 13, 50884, 50884, 467, 393, 855, 291, 264, 18199, 13, 50960, 50960, 865, 13, 50984, 50984, 467, 311, 406, 588, 4961, 498, 309, 2709, 291, 746, 300, 2516, 732, 11171, 445, 281, 3096, 264, 2158, 13, 51240, 51240, 1779, 13, 51264, 51264, 407, 2138, 485, 51340, 51340, 1044, 291, 11, 806, 76, 1500, 13, 51464, 51464, 865, 13, 51500, 51500, 1743, 11, 286, 2041, 341, 307, 2085, 13, 51584, 51584, 1033, 13, 51608, 51608], "temperature": 0.0, "avg_logprob": -0.27667217719845655, "compression_ratio": 1.592885375494071, "no_caption_prob": 0.00022685877047479153}, {"id": 330, "seek": 171744, "start": 1729.8400000000001, "end": 1734.96, "text": " It's not very helpful if it gives you something that takes two screens just to base the value.", "tokens": [50364, 8944, 322, 257, 1329, 11, 456, 311, 364, 4846, 365, 732, 4754, 300, 611, 18199, 13, 50600, 50600, 509, 500, 380, 528, 428, 6713, 3636, 281, 584, 11, 4177, 11, 286, 1352, 257, 18223, 1365, 13, 50780, 50780, 509, 528, 309, 281, 855, 291, 264, 22811, 1365, 13, 50884, 50884, 467, 393, 855, 291, 264, 18199, 13, 50960, 50960, 865, 13, 50984, 50984, 467, 311, 406, 588, 4961, 498, 309, 2709, 291, 746, 300, 2516, 732, 11171, 445, 281, 3096, 264, 2158, 13, 51240, 51240, 1779, 13, 51264, 51264, 407, 2138, 485, 51340, 51340, 1044, 291, 11, 806, 76, 1500, 13, 51464, 51464, 865, 13, 51500, 51500, 1743, 11, 286, 2041, 341, 307, 2085, 13, 51584, 51584, 1033, 13, 51608, 51608], "temperature": 0.0, "avg_logprob": -0.27667217719845655, "compression_ratio": 1.592885375494071, "no_caption_prob": 0.00022685877047479153}, {"id": 331, "seek": 171744, "start": 1734.96, "end": 1735.44, "text": " Right.", "tokens": [50364, 8944, 322, 257, 1329, 11, 456, 311, 364, 4846, 365, 732, 4754, 300, 611, 18199, 13, 50600, 50600, 509, 500, 380, 528, 428, 6713, 3636, 281, 584, 11, 4177, 11, 286, 1352, 257, 18223, 1365, 13, 50780, 50780, 509, 528, 309, 281, 855, 291, 264, 22811, 1365, 13, 50884, 50884, 467, 393, 855, 291, 264, 18199, 13, 50960, 50960, 865, 13, 50984, 50984, 467, 311, 406, 588, 4961, 498, 309, 2709, 291, 746, 300, 2516, 732, 11171, 445, 281, 3096, 264, 2158, 13, 51240, 51240, 1779, 13, 51264, 51264, 407, 2138, 485, 51340, 51340, 1044, 291, 11, 806, 76, 1500, 13, 51464, 51464, 865, 13, 51500, 51500, 1743, 11, 286, 2041, 341, 307, 2085, 13, 51584, 51584, 1033, 13, 51608, 51608], "temperature": 0.0, "avg_logprob": -0.27667217719845655, "compression_ratio": 1.592885375494071, "no_caption_prob": 0.00022685877047479153}, {"id": 332, "seek": 171744, "start": 1735.44, "end": 1736.96, "text": " So definitely...", "tokens": [50364, 8944, 322, 257, 1329, 11, 456, 311, 364, 4846, 365, 732, 4754, 300, 611, 18199, 13, 50600, 50600, 509, 500, 380, 528, 428, 6713, 3636, 281, 584, 11, 4177, 11, 286, 1352, 257, 18223, 1365, 13, 50780, 50780, 509, 528, 309, 281, 855, 291, 264, 22811, 1365, 13, 50884, 50884, 467, 393, 855, 291, 264, 18199, 13, 50960, 50960, 865, 13, 50984, 50984, 467, 311, 406, 588, 4961, 498, 309, 2709, 291, 746, 300, 2516, 732, 11171, 445, 281, 3096, 264, 2158, 13, 51240, 51240, 1779, 13, 51264, 51264, 407, 2138, 485, 51340, 51340, 1044, 291, 11, 806, 76, 1500, 13, 51464, 51464, 865, 13, 51500, 51500, 1743, 11, 286, 2041, 341, 307, 2085, 13, 51584, 51584, 1033, 13, 51608, 51608], "temperature": 0.0, "avg_logprob": -0.27667217719845655, "compression_ratio": 1.592885375494071, "no_caption_prob": 0.00022685877047479153}, {"id": 333, "seek": 171744, "start": 1736.96, "end": 1739.44, "text": " Thank you, elm test.", "tokens": [50364, 8944, 322, 257, 1329, 11, 456, 311, 364, 4846, 365, 732, 4754, 300, 611, 18199, 13, 50600, 50600, 509, 500, 380, 528, 428, 6713, 3636, 281, 584, 11, 4177, 11, 286, 1352, 257, 18223, 1365, 13, 50780, 50780, 509, 528, 309, 281, 855, 291, 264, 22811, 1365, 13, 50884, 50884, 467, 393, 855, 291, 264, 18199, 13, 50960, 50960, 865, 13, 50984, 50984, 467, 311, 406, 588, 4961, 498, 309, 2709, 291, 746, 300, 2516, 732, 11171, 445, 281, 3096, 264, 2158, 13, 51240, 51240, 1779, 13, 51264, 51264, 407, 2138, 485, 51340, 51340, 1044, 291, 11, 806, 76, 1500, 13, 51464, 51464, 865, 13, 51500, 51500, 1743, 11, 286, 2041, 341, 307, 2085, 13, 51584, 51584, 1033, 13, 51608, 51608], "temperature": 0.0, "avg_logprob": -0.27667217719845655, "compression_ratio": 1.592885375494071, "no_caption_prob": 0.00022685877047479153}, {"id": 334, "seek": 171744, "start": 1739.44, "end": 1740.16, "text": " Yeah.", "tokens": [50364, 8944, 322, 257, 1329, 11, 456, 311, 364, 4846, 365, 732, 4754, 300, 611, 18199, 13, 50600, 50600, 509, 500, 380, 528, 428, 6713, 3636, 281, 584, 11, 4177, 11, 286, 1352, 257, 18223, 1365, 13, 50780, 50780, 509, 528, 309, 281, 855, 291, 264, 22811, 1365, 13, 50884, 50884, 467, 393, 855, 291, 264, 18199, 13, 50960, 50960, 865, 13, 50984, 50984, 467, 311, 406, 588, 4961, 498, 309, 2709, 291, 746, 300, 2516, 732, 11171, 445, 281, 3096, 264, 2158, 13, 51240, 51240, 1779, 13, 51264, 51264, 407, 2138, 485, 51340, 51340, 1044, 291, 11, 806, 76, 1500, 13, 51464, 51464, 865, 13, 51500, 51500, 1743, 11, 286, 2041, 341, 307, 2085, 13, 51584, 51584, 1033, 13, 51608, 51608], "temperature": 0.0, "avg_logprob": -0.27667217719845655, "compression_ratio": 1.592885375494071, "no_caption_prob": 0.00022685877047479153}, {"id": 335, "seek": 171744, "start": 1740.16, "end": 1741.8400000000001, "text": " Like, I guess this is wrong.", "tokens": [50364, 8944, 322, 257, 1329, 11, 456, 311, 364, 4846, 365, 732, 4754, 300, 611, 18199, 13, 50600, 50600, 509, 500, 380, 528, 428, 6713, 3636, 281, 584, 11, 4177, 11, 286, 1352, 257, 18223, 1365, 13, 50780, 50780, 509, 528, 309, 281, 855, 291, 264, 22811, 1365, 13, 50884, 50884, 467, 393, 855, 291, 264, 18199, 13, 50960, 50960, 865, 13, 50984, 50984, 467, 311, 406, 588, 4961, 498, 309, 2709, 291, 746, 300, 2516, 732, 11171, 445, 281, 3096, 264, 2158, 13, 51240, 51240, 1779, 13, 51264, 51264, 407, 2138, 485, 51340, 51340, 1044, 291, 11, 806, 76, 1500, 13, 51464, 51464, 865, 13, 51500, 51500, 1743, 11, 286, 2041, 341, 307, 2085, 13, 51584, 51584, 1033, 13, 51608, 51608], "temperature": 0.0, "avg_logprob": -0.27667217719845655, "compression_ratio": 1.592885375494071, "no_caption_prob": 0.00022685877047479153}, {"id": 336, "seek": 171744, "start": 1741.8400000000001, "end": 1742.3200000000002, "text": " Okay.", "tokens": [50364, 8944, 322, 257, 1329, 11, 456, 311, 364, 4846, 365, 732, 4754, 300, 611, 18199, 13, 50600, 50600, 509, 500, 380, 528, 428, 6713, 3636, 281, 584, 11, 4177, 11, 286, 1352, 257, 18223, 1365, 13, 50780, 50780, 509, 528, 309, 281, 855, 291, 264, 22811, 1365, 13, 50884, 50884, 467, 393, 855, 291, 264, 18199, 13, 50960, 50960, 865, 13, 50984, 50984, 467, 311, 406, 588, 4961, 498, 309, 2709, 291, 746, 300, 2516, 732, 11171, 445, 281, 3096, 264, 2158, 13, 51240, 51240, 1779, 13, 51264, 51264, 407, 2138, 485, 51340, 51340, 1044, 291, 11, 806, 76, 1500, 13, 51464, 51464, 865, 13, 51500, 51500, 1743, 11, 286, 2041, 341, 307, 2085, 13, 51584, 51584, 1033, 13, 51608, 51608], "temperature": 0.0, "avg_logprob": -0.27667217719845655, "compression_ratio": 1.592885375494071, "no_caption_prob": 0.00022685877047479153}, {"id": 337, "seek": 174232, "start": 1742.32, "end": 1751.4399999999998, "text": " But it's really like when you see a failure from a property based test and it is shrunk", "tokens": [50364, 583, 309, 311, 534, 411, 562, 291, 536, 257, 7763, 490, 257, 4707, 2361, 1500, 293, 309, 307, 9884, 3197, 50820, 50820, 760, 281, 1080, 13206, 18223, 2158, 11, 257, 688, 295, 264, 1413, 264, 7426, 307, 6322, 11, 558, 30, 51128, 51128, 1436, 291, 536, 11, 1954, 11, 411, 300, 311, 11, 300, 311, 300, 13, 51284, 51312, 1436, 309, 307, 1359, 293, 291, 393, 733, 295, 411, 2041, 382, 281, 437, 2314, 13, 51516, 51556], "temperature": 0.0, "avg_logprob": -0.1422315066373801, "compression_ratio": 1.5543478260869565, "no_caption_prob": 0.00011057477240683511}, {"id": 338, "seek": 174232, "start": 1751.4399999999998, "end": 1757.6, "text": " down to its minimal failing value, a lot of the times the bug is obvious, right?", "tokens": [50364, 583, 309, 311, 534, 411, 562, 291, 536, 257, 7763, 490, 257, 4707, 2361, 1500, 293, 309, 307, 9884, 3197, 50820, 50820, 760, 281, 1080, 13206, 18223, 2158, 11, 257, 688, 295, 264, 1413, 264, 7426, 307, 6322, 11, 558, 30, 51128, 51128, 1436, 291, 536, 11, 1954, 11, 411, 300, 311, 11, 300, 311, 300, 13, 51284, 51312, 1436, 309, 307, 1359, 293, 291, 393, 733, 295, 411, 2041, 382, 281, 437, 2314, 13, 51516, 51556], "temperature": 0.0, "avg_logprob": -0.1422315066373801, "compression_ratio": 1.5543478260869565, "no_caption_prob": 0.00011057477240683511}, {"id": 339, "seek": 174232, "start": 1757.6, "end": 1760.72, "text": " Because you see, oh, like that's, that's that.", "tokens": [50364, 583, 309, 311, 534, 411, 562, 291, 536, 257, 7763, 490, 257, 4707, 2361, 1500, 293, 309, 307, 9884, 3197, 50820, 50820, 760, 281, 1080, 13206, 18223, 2158, 11, 257, 688, 295, 264, 1413, 264, 7426, 307, 6322, 11, 558, 30, 51128, 51128, 1436, 291, 536, 11, 1954, 11, 411, 300, 311, 11, 300, 311, 300, 13, 51284, 51312, 1436, 309, 307, 1359, 293, 291, 393, 733, 295, 411, 2041, 382, 281, 437, 2314, 13, 51516, 51556], "temperature": 0.0, "avg_logprob": -0.1422315066373801, "compression_ratio": 1.5543478260869565, "no_caption_prob": 0.00011057477240683511}, {"id": 340, "seek": 174232, "start": 1761.28, "end": 1765.36, "text": " Because it is small and you can kind of like guess as to what happens.", "tokens": [50364, 583, 309, 311, 534, 411, 562, 291, 536, 257, 7763, 490, 257, 4707, 2361, 1500, 293, 309, 307, 9884, 3197, 50820, 50820, 760, 281, 1080, 13206, 18223, 2158, 11, 257, 688, 295, 264, 1413, 264, 7426, 307, 6322, 11, 558, 30, 51128, 51128, 1436, 291, 536, 11, 1954, 11, 411, 300, 311, 11, 300, 311, 300, 13, 51284, 51312, 1436, 309, 307, 1359, 293, 291, 393, 733, 295, 411, 2041, 382, 281, 437, 2314, 13, 51516, 51556], "temperature": 0.0, "avg_logprob": -0.1422315066373801, "compression_ratio": 1.5543478260869565, "no_caption_prob": 0.00011057477240683511}, {"id": 341, "seek": 176536, "start": 1765.36, "end": 1773.76, "text": " But if really, if it's like, let's say for my editor, if it's a list of 500 messages,", "tokens": [50364, 583, 498, 534, 11, 498, 309, 311, 411, 11, 718, 311, 584, 337, 452, 9839, 11, 498, 309, 311, 257, 1329, 295, 5923, 7897, 11, 50784, 50784, 286, 362, 572, 1558, 597, 295, 613, 366, 445, 411, 41533, 293, 597, 295, 613, 366, 534, 1021, 13, 51052, 51052, 400, 14138, 337, 264, 1849, 861, 1215, 289, 1776, 11, 291, 727, 362, 257, 2603, 6798, 11, 2603, 4166, 293, 4079, 51376, 51376, 294, 456, 307, 516, 281, 312, 264, 18223, 644, 13, 51504, 51504, 1743, 718, 311, 584, 264, 3256, 6162, 300, 307, 406, 5395, 420, 746, 13, 51676, 51692], "temperature": 0.0, "avg_logprob": -0.19670473230947363, "compression_ratio": 1.6519823788546255, "no_caption_prob": 4.609999814420007e-05}, {"id": 342, "seek": 176536, "start": 1773.76, "end": 1779.12, "text": " I have no idea which of these are just like fluff and which of these are really important.", "tokens": [50364, 583, 498, 534, 11, 498, 309, 311, 411, 11, 718, 311, 584, 337, 452, 9839, 11, 498, 309, 311, 257, 1329, 295, 5923, 7897, 11, 50784, 50784, 286, 362, 572, 1558, 597, 295, 613, 366, 445, 411, 41533, 293, 597, 295, 613, 366, 534, 1021, 13, 51052, 51052, 400, 14138, 337, 264, 1849, 861, 1215, 289, 1776, 11, 291, 727, 362, 257, 2603, 6798, 11, 2603, 4166, 293, 4079, 51376, 51376, 294, 456, 307, 516, 281, 312, 264, 18223, 644, 13, 51504, 51504, 1743, 718, 311, 584, 264, 3256, 6162, 300, 307, 406, 5395, 420, 746, 13, 51676, 51692], "temperature": 0.0, "avg_logprob": -0.19670473230947363, "compression_ratio": 1.6519823788546255, "no_caption_prob": 4.609999814420007e-05}, {"id": 343, "seek": 176536, "start": 1779.12, "end": 1785.6, "text": " And similarly for the margramparcer, you could have a huge string, huge document and somewhere", "tokens": [50364, 583, 498, 534, 11, 498, 309, 311, 411, 11, 718, 311, 584, 337, 452, 9839, 11, 498, 309, 311, 257, 1329, 295, 5923, 7897, 11, 50784, 50784, 286, 362, 572, 1558, 597, 295, 613, 366, 445, 411, 41533, 293, 597, 295, 613, 366, 534, 1021, 13, 51052, 51052, 400, 14138, 337, 264, 1849, 861, 1215, 289, 1776, 11, 291, 727, 362, 257, 2603, 6798, 11, 2603, 4166, 293, 4079, 51376, 51376, 294, 456, 307, 516, 281, 312, 264, 18223, 644, 13, 51504, 51504, 1743, 718, 311, 584, 264, 3256, 6162, 300, 307, 406, 5395, 420, 746, 13, 51676, 51692], "temperature": 0.0, "avg_logprob": -0.19670473230947363, "compression_ratio": 1.6519823788546255, "no_caption_prob": 4.609999814420007e-05}, {"id": 344, "seek": 176536, "start": 1785.6, "end": 1788.1599999999999, "text": " in there is going to be the failing part.", "tokens": [50364, 583, 498, 534, 11, 498, 309, 311, 411, 11, 718, 311, 584, 337, 452, 9839, 11, 498, 309, 311, 257, 1329, 295, 5923, 7897, 11, 50784, 50784, 286, 362, 572, 1558, 597, 295, 613, 366, 445, 411, 41533, 293, 597, 295, 613, 366, 534, 1021, 13, 51052, 51052, 400, 14138, 337, 264, 1849, 861, 1215, 289, 1776, 11, 291, 727, 362, 257, 2603, 6798, 11, 2603, 4166, 293, 4079, 51376, 51376, 294, 456, 307, 516, 281, 312, 264, 18223, 644, 13, 51504, 51504, 1743, 718, 311, 584, 264, 3256, 6162, 300, 307, 406, 5395, 420, 746, 13, 51676, 51692], "temperature": 0.0, "avg_logprob": -0.19670473230947363, "compression_ratio": 1.6519823788546255, "no_caption_prob": 4.609999814420007e-05}, {"id": 345, "seek": 176536, "start": 1788.1599999999999, "end": 1791.6, "text": " Like let's say the image tag that is not closed or something.", "tokens": [50364, 583, 498, 534, 11, 498, 309, 311, 411, 11, 718, 311, 584, 337, 452, 9839, 11, 498, 309, 311, 257, 1329, 295, 5923, 7897, 11, 50784, 50784, 286, 362, 572, 1558, 597, 295, 613, 366, 445, 411, 41533, 293, 597, 295, 613, 366, 534, 1021, 13, 51052, 51052, 400, 14138, 337, 264, 1849, 861, 1215, 289, 1776, 11, 291, 727, 362, 257, 2603, 6798, 11, 2603, 4166, 293, 4079, 51376, 51376, 294, 456, 307, 516, 281, 312, 264, 18223, 644, 13, 51504, 51504, 1743, 718, 311, 584, 264, 3256, 6162, 300, 307, 406, 5395, 420, 746, 13, 51676, 51692], "temperature": 0.0, "avg_logprob": -0.19670473230947363, "compression_ratio": 1.6519823788546255, "no_caption_prob": 4.609999814420007e-05}, {"id": 346, "seek": 179160, "start": 1791.6, "end": 1798.0, "text": " And if the shrinker can remove everything else and just give you that image tag, that's", "tokens": [50364, 400, 498, 264, 23060, 260, 393, 4159, 1203, 1646, 293, 445, 976, 291, 300, 3256, 6162, 11, 300, 311, 50684, 50684, 516, 281, 312, 709, 26131, 337, 291, 13, 50816, 50816, 400, 370, 321, 360, 341, 41684, 1399, 293, 456, 366, 732, 2098, 11, 420, 412, 1935, 294, 264, 4362, 51300, 51300, 2570, 1269, 4009, 1002, 11, 456, 366, 732, 2098, 281, 360, 41684, 293, 321, 366, 1228, 472, 295, 552, 13, 51576, 51576, 400, 309, 575, 512, 11, 309, 575, 512, 2740, 13, 51700, 51700, 1133, 291, 584, 321, 13, 51776, 51776], "temperature": 0.0, "avg_logprob": -0.18902234529194079, "compression_ratio": 1.6635514018691588, "no_caption_prob": 6.501338066300377e-05}, {"id": 347, "seek": 179160, "start": 1798.0, "end": 1800.6399999999999, "text": " going to be much clearer for you.", "tokens": [50364, 400, 498, 264, 23060, 260, 393, 4159, 1203, 1646, 293, 445, 976, 291, 300, 3256, 6162, 11, 300, 311, 50684, 50684, 516, 281, 312, 709, 26131, 337, 291, 13, 50816, 50816, 400, 370, 321, 360, 341, 41684, 1399, 293, 456, 366, 732, 2098, 11, 420, 412, 1935, 294, 264, 4362, 51300, 51300, 2570, 1269, 4009, 1002, 11, 456, 366, 732, 2098, 281, 360, 41684, 293, 321, 366, 1228, 472, 295, 552, 13, 51576, 51576, 400, 309, 575, 512, 11, 309, 575, 512, 2740, 13, 51700, 51700, 1133, 291, 584, 321, 13, 51776, 51776], "temperature": 0.0, "avg_logprob": -0.18902234529194079, "compression_ratio": 1.6635514018691588, "no_caption_prob": 6.501338066300377e-05}, {"id": 348, "seek": 179160, "start": 1800.6399999999999, "end": 1810.32, "text": " And so we do this shrinking process and there are two ways, or at least in the currently", "tokens": [50364, 400, 498, 264, 23060, 260, 393, 4159, 1203, 1646, 293, 445, 976, 291, 300, 3256, 6162, 11, 300, 311, 50684, 50684, 516, 281, 312, 709, 26131, 337, 291, 13, 50816, 50816, 400, 370, 321, 360, 341, 41684, 1399, 293, 456, 366, 732, 2098, 11, 420, 412, 1935, 294, 264, 4362, 51300, 51300, 2570, 1269, 4009, 1002, 11, 456, 366, 732, 2098, 281, 360, 41684, 293, 321, 366, 1228, 472, 295, 552, 13, 51576, 51576, 400, 309, 575, 512, 11, 309, 575, 512, 2740, 13, 51700, 51700, 1133, 291, 584, 321, 13, 51776, 51776], "temperature": 0.0, "avg_logprob": -0.18902234529194079, "compression_ratio": 1.6635514018691588, "no_caption_prob": 6.501338066300377e-05}, {"id": 349, "seek": 179160, "start": 1810.32, "end": 1815.84, "text": " known open source world, there are two ways to do shrinking and we are using one of them.", "tokens": [50364, 400, 498, 264, 23060, 260, 393, 4159, 1203, 1646, 293, 445, 976, 291, 300, 3256, 6162, 11, 300, 311, 50684, 50684, 516, 281, 312, 709, 26131, 337, 291, 13, 50816, 50816, 400, 370, 321, 360, 341, 41684, 1399, 293, 456, 366, 732, 2098, 11, 420, 412, 1935, 294, 264, 4362, 51300, 51300, 2570, 1269, 4009, 1002, 11, 456, 366, 732, 2098, 281, 360, 41684, 293, 321, 366, 1228, 472, 295, 552, 13, 51576, 51576, 400, 309, 575, 512, 11, 309, 575, 512, 2740, 13, 51700, 51700, 1133, 291, 584, 321, 13, 51776, 51776], "temperature": 0.0, "avg_logprob": -0.18902234529194079, "compression_ratio": 1.6635514018691588, "no_caption_prob": 6.501338066300377e-05}, {"id": 350, "seek": 179160, "start": 1815.84, "end": 1818.32, "text": " And it has some, it has some problems.", "tokens": [50364, 400, 498, 264, 23060, 260, 393, 4159, 1203, 1646, 293, 445, 976, 291, 300, 3256, 6162, 11, 300, 311, 50684, 50684, 516, 281, 312, 709, 26131, 337, 291, 13, 50816, 50816, 400, 370, 321, 360, 341, 41684, 1399, 293, 456, 366, 732, 2098, 11, 420, 412, 1935, 294, 264, 4362, 51300, 51300, 2570, 1269, 4009, 1002, 11, 456, 366, 732, 2098, 281, 360, 41684, 293, 321, 366, 1228, 472, 295, 552, 13, 51576, 51576, 400, 309, 575, 512, 11, 309, 575, 512, 2740, 13, 51700, 51700, 1133, 291, 584, 321, 13, 51776, 51776], "temperature": 0.0, "avg_logprob": -0.18902234529194079, "compression_ratio": 1.6635514018691588, "no_caption_prob": 6.501338066300377e-05}, {"id": 351, "seek": 179160, "start": 1818.32, "end": 1819.84, "text": " When you say we.", "tokens": [50364, 400, 498, 264, 23060, 260, 393, 4159, 1203, 1646, 293, 445, 976, 291, 300, 3256, 6162, 11, 300, 311, 50684, 50684, 516, 281, 312, 709, 26131, 337, 291, 13, 50816, 50816, 400, 370, 321, 360, 341, 41684, 1399, 293, 456, 366, 732, 2098, 11, 420, 412, 1935, 294, 264, 4362, 51300, 51300, 2570, 1269, 4009, 1002, 11, 456, 366, 732, 2098, 281, 360, 41684, 293, 321, 366, 1228, 472, 295, 552, 13, 51576, 51576, 400, 309, 575, 512, 11, 309, 575, 512, 2740, 13, 51700, 51700, 1133, 291, 584, 321, 13, 51776, 51776], "temperature": 0.0, "avg_logprob": -0.18902234529194079, "compression_ratio": 1.6635514018691588, "no_caption_prob": 6.501338066300377e-05}, {"id": 352, "seek": 181984, "start": 1819.84, "end": 1821.84, "text": " Do you mean?", "tokens": [50364, 1144, 291, 914, 30, 50464, 50464, 2699, 76, 1500, 13, 50564, 50564, 440, 2190, 2699, 76, 1500, 13, 50628, 50628, 865, 11, 558, 13, 50652, 50652, 440, 2190, 2699, 76, 1500, 11, 718, 311, 584, 2699, 76, 1500, 371, 16, 307, 1228, 2158, 2361, 41684, 13, 50964, 50964, 407, 718, 311, 11, 718, 311, 1315, 729, 732, 11587, 13, 51088, 51120, 39352, 2361, 41684, 733, 295, 3255, 577, 281, 23060, 257, 2158, 11, 457, 309, 1177, 380, 458, 604, 733, 51404, 51404, 295, 4319, 466, 309, 13, 51472, 51472, 400, 370, 291, 727, 519, 466, 309, 382, 2445, 490, 264, 2158, 11, 718, 311, 584, 490, 24922, 281, 51792, 51836], "temperature": 0.0, "avg_logprob": -0.1683217797960554, "compression_ratio": 1.7751196172248804, "no_caption_prob": 2.8302998543949798e-05}, {"id": 353, "seek": 181984, "start": 1821.84, "end": 1823.84, "text": " Elm test.", "tokens": [50364, 1144, 291, 914, 30, 50464, 50464, 2699, 76, 1500, 13, 50564, 50564, 440, 2190, 2699, 76, 1500, 13, 50628, 50628, 865, 11, 558, 13, 50652, 50652, 440, 2190, 2699, 76, 1500, 11, 718, 311, 584, 2699, 76, 1500, 371, 16, 307, 1228, 2158, 2361, 41684, 13, 50964, 50964, 407, 718, 311, 11, 718, 311, 1315, 729, 732, 11587, 13, 51088, 51120, 39352, 2361, 41684, 733, 295, 3255, 577, 281, 23060, 257, 2158, 11, 457, 309, 1177, 380, 458, 604, 733, 51404, 51404, 295, 4319, 466, 309, 13, 51472, 51472, 400, 370, 291, 727, 519, 466, 309, 382, 2445, 490, 264, 2158, 11, 718, 311, 584, 490, 24922, 281, 51792, 51836], "temperature": 0.0, "avg_logprob": -0.1683217797960554, "compression_ratio": 1.7751196172248804, "no_caption_prob": 2.8302998543949798e-05}, {"id": 354, "seek": 181984, "start": 1823.84, "end": 1825.12, "text": " The current Elm test.", "tokens": [50364, 1144, 291, 914, 30, 50464, 50464, 2699, 76, 1500, 13, 50564, 50564, 440, 2190, 2699, 76, 1500, 13, 50628, 50628, 865, 11, 558, 13, 50652, 50652, 440, 2190, 2699, 76, 1500, 11, 718, 311, 584, 2699, 76, 1500, 371, 16, 307, 1228, 2158, 2361, 41684, 13, 50964, 50964, 407, 718, 311, 11, 718, 311, 1315, 729, 732, 11587, 13, 51088, 51120, 39352, 2361, 41684, 733, 295, 3255, 577, 281, 23060, 257, 2158, 11, 457, 309, 1177, 380, 458, 604, 733, 51404, 51404, 295, 4319, 466, 309, 13, 51472, 51472, 400, 370, 291, 727, 519, 466, 309, 382, 2445, 490, 264, 2158, 11, 718, 311, 584, 490, 24922, 281, 51792, 51836], "temperature": 0.0, "avg_logprob": -0.1683217797960554, "compression_ratio": 1.7751196172248804, "no_caption_prob": 2.8302998543949798e-05}, {"id": 355, "seek": 181984, "start": 1825.12, "end": 1825.6, "text": " Yeah, right.", "tokens": [50364, 1144, 291, 914, 30, 50464, 50464, 2699, 76, 1500, 13, 50564, 50564, 440, 2190, 2699, 76, 1500, 13, 50628, 50628, 865, 11, 558, 13, 50652, 50652, 440, 2190, 2699, 76, 1500, 11, 718, 311, 584, 2699, 76, 1500, 371, 16, 307, 1228, 2158, 2361, 41684, 13, 50964, 50964, 407, 718, 311, 11, 718, 311, 1315, 729, 732, 11587, 13, 51088, 51120, 39352, 2361, 41684, 733, 295, 3255, 577, 281, 23060, 257, 2158, 11, 457, 309, 1177, 380, 458, 604, 733, 51404, 51404, 295, 4319, 466, 309, 13, 51472, 51472, 400, 370, 291, 727, 519, 466, 309, 382, 2445, 490, 264, 2158, 11, 718, 311, 584, 490, 24922, 281, 51792, 51836], "temperature": 0.0, "avg_logprob": -0.1683217797960554, "compression_ratio": 1.7751196172248804, "no_caption_prob": 2.8302998543949798e-05}, {"id": 356, "seek": 181984, "start": 1825.6, "end": 1831.84, "text": " The current Elm test, let's say Elm test v1 is using value based shrinking.", "tokens": [50364, 1144, 291, 914, 30, 50464, 50464, 2699, 76, 1500, 13, 50564, 50564, 440, 2190, 2699, 76, 1500, 13, 50628, 50628, 865, 11, 558, 13, 50652, 50652, 440, 2190, 2699, 76, 1500, 11, 718, 311, 584, 2699, 76, 1500, 371, 16, 307, 1228, 2158, 2361, 41684, 13, 50964, 50964, 407, 718, 311, 11, 718, 311, 1315, 729, 732, 11587, 13, 51088, 51120, 39352, 2361, 41684, 733, 295, 3255, 577, 281, 23060, 257, 2158, 11, 457, 309, 1177, 380, 458, 604, 733, 51404, 51404, 295, 4319, 466, 309, 13, 51472, 51472, 400, 370, 291, 727, 519, 466, 309, 382, 2445, 490, 264, 2158, 11, 718, 311, 584, 490, 24922, 281, 51792, 51836], "temperature": 0.0, "avg_logprob": -0.1683217797960554, "compression_ratio": 1.7751196172248804, "no_caption_prob": 2.8302998543949798e-05}, {"id": 357, "seek": 181984, "start": 1831.84, "end": 1834.32, "text": " So let's, let's name those two approaches.", "tokens": [50364, 1144, 291, 914, 30, 50464, 50464, 2699, 76, 1500, 13, 50564, 50564, 440, 2190, 2699, 76, 1500, 13, 50628, 50628, 865, 11, 558, 13, 50652, 50652, 440, 2190, 2699, 76, 1500, 11, 718, 311, 584, 2699, 76, 1500, 371, 16, 307, 1228, 2158, 2361, 41684, 13, 50964, 50964, 407, 718, 311, 11, 718, 311, 1315, 729, 732, 11587, 13, 51088, 51120, 39352, 2361, 41684, 733, 295, 3255, 577, 281, 23060, 257, 2158, 11, 457, 309, 1177, 380, 458, 604, 733, 51404, 51404, 295, 4319, 466, 309, 13, 51472, 51472, 400, 370, 291, 727, 519, 466, 309, 382, 2445, 490, 264, 2158, 11, 718, 311, 584, 490, 24922, 281, 51792, 51836], "temperature": 0.0, "avg_logprob": -0.1683217797960554, "compression_ratio": 1.7751196172248804, "no_caption_prob": 2.8302998543949798e-05}, {"id": 358, "seek": 181984, "start": 1834.9599999999998, "end": 1840.6399999999999, "text": " Value based shrinking kind of knows how to shrink a value, but it doesn't know any kind", "tokens": [50364, 1144, 291, 914, 30, 50464, 50464, 2699, 76, 1500, 13, 50564, 50564, 440, 2190, 2699, 76, 1500, 13, 50628, 50628, 865, 11, 558, 13, 50652, 50652, 440, 2190, 2699, 76, 1500, 11, 718, 311, 584, 2699, 76, 1500, 371, 16, 307, 1228, 2158, 2361, 41684, 13, 50964, 50964, 407, 718, 311, 11, 718, 311, 1315, 729, 732, 11587, 13, 51088, 51120, 39352, 2361, 41684, 733, 295, 3255, 577, 281, 23060, 257, 2158, 11, 457, 309, 1177, 380, 458, 604, 733, 51404, 51404, 295, 4319, 466, 309, 13, 51472, 51472, 400, 370, 291, 727, 519, 466, 309, 382, 2445, 490, 264, 2158, 11, 718, 311, 584, 490, 24922, 281, 51792, 51836], "temperature": 0.0, "avg_logprob": -0.1683217797960554, "compression_ratio": 1.7751196172248804, "no_caption_prob": 2.8302998543949798e-05}, {"id": 359, "seek": 181984, "start": 1840.6399999999999, "end": 1842.0, "text": " of context about it.", "tokens": [50364, 1144, 291, 914, 30, 50464, 50464, 2699, 76, 1500, 13, 50564, 50564, 440, 2190, 2699, 76, 1500, 13, 50628, 50628, 865, 11, 558, 13, 50652, 50652, 440, 2190, 2699, 76, 1500, 11, 718, 311, 584, 2699, 76, 1500, 371, 16, 307, 1228, 2158, 2361, 41684, 13, 50964, 50964, 407, 718, 311, 11, 718, 311, 1315, 729, 732, 11587, 13, 51088, 51120, 39352, 2361, 41684, 733, 295, 3255, 577, 281, 23060, 257, 2158, 11, 457, 309, 1177, 380, 458, 604, 733, 51404, 51404, 295, 4319, 466, 309, 13, 51472, 51472, 400, 370, 291, 727, 519, 466, 309, 382, 2445, 490, 264, 2158, 11, 718, 311, 584, 490, 24922, 281, 51792, 51836], "temperature": 0.0, "avg_logprob": -0.1683217797960554, "compression_ratio": 1.7751196172248804, "no_caption_prob": 2.8302998543949798e-05}, {"id": 360, "seek": 181984, "start": 1842.0, "end": 1848.3999999999999, "text": " And so you could think about it as function from the value, let's say from integer to", "tokens": [50364, 1144, 291, 914, 30, 50464, 50464, 2699, 76, 1500, 13, 50564, 50564, 440, 2190, 2699, 76, 1500, 13, 50628, 50628, 865, 11, 558, 13, 50652, 50652, 440, 2190, 2699, 76, 1500, 11, 718, 311, 584, 2699, 76, 1500, 371, 16, 307, 1228, 2158, 2361, 41684, 13, 50964, 50964, 407, 718, 311, 11, 718, 311, 1315, 729, 732, 11587, 13, 51088, 51120, 39352, 2361, 41684, 733, 295, 3255, 577, 281, 23060, 257, 2158, 11, 457, 309, 1177, 380, 458, 604, 733, 51404, 51404, 295, 4319, 466, 309, 13, 51472, 51472, 400, 370, 291, 727, 519, 466, 309, 382, 2445, 490, 264, 2158, 11, 718, 311, 584, 490, 24922, 281, 51792, 51836], "temperature": 0.0, "avg_logprob": -0.1683217797960554, "compression_ratio": 1.7751196172248804, "no_caption_prob": 2.8302998543949798e-05}, {"id": 361, "seek": 184840, "start": 1848.4, "end": 1851.2, "text": " many possible ways, how to make it smaller.", "tokens": [50364, 867, 1944, 2098, 11, 577, 281, 652, 309, 4356, 13, 50504, 50532, 407, 490, 24922, 281, 257, 1329, 295, 41674, 13, 50676, 50676, 407, 2902, 300, 23060, 24922, 2445, 1732, 576, 976, 291, 257, 1329, 365, 1451, 4018, 732, 11, 51056, 51084, 721, 411, 300, 13, 51124, 51148, 400, 562, 291, 584, 300, 309, 2203, 281, 2736, 257, 1329, 295, 41674, 11, 729, 366, 264, 1329, 295, 721, 51452, 51452, 281, 853, 484, 264, 1329, 295, 1944, 6883, 7833, 13, 51616, 51616, 1436, 291, 393, 20460, 721, 294, 819, 2098, 13, 51784, 51816], "temperature": 0.0, "avg_logprob": -0.2959215465344881, "compression_ratio": 1.7735849056603774, "no_caption_prob": 5.812274685013108e-05}, {"id": 362, "seek": 184840, "start": 1851.76, "end": 1854.64, "text": " So from integer to a list of integers.", "tokens": [50364, 867, 1944, 2098, 11, 577, 281, 652, 309, 4356, 13, 50504, 50532, 407, 490, 24922, 281, 257, 1329, 295, 41674, 13, 50676, 50676, 407, 2902, 300, 23060, 24922, 2445, 1732, 576, 976, 291, 257, 1329, 365, 1451, 4018, 732, 11, 51056, 51084, 721, 411, 300, 13, 51124, 51148, 400, 562, 291, 584, 300, 309, 2203, 281, 2736, 257, 1329, 295, 41674, 11, 729, 366, 264, 1329, 295, 721, 51452, 51452, 281, 853, 484, 264, 1329, 295, 1944, 6883, 7833, 13, 51616, 51616, 1436, 291, 393, 20460, 721, 294, 819, 2098, 13, 51784, 51816], "temperature": 0.0, "avg_logprob": -0.2959215465344881, "compression_ratio": 1.7735849056603774, "no_caption_prob": 5.812274685013108e-05}, {"id": 363, "seek": 184840, "start": 1854.64, "end": 1862.24, "text": " So giving that shrink integer function five would give you a list with four zero two,", "tokens": [50364, 867, 1944, 2098, 11, 577, 281, 652, 309, 4356, 13, 50504, 50532, 407, 490, 24922, 281, 257, 1329, 295, 41674, 13, 50676, 50676, 407, 2902, 300, 23060, 24922, 2445, 1732, 576, 976, 291, 257, 1329, 365, 1451, 4018, 732, 11, 51056, 51084, 721, 411, 300, 13, 51124, 51148, 400, 562, 291, 584, 300, 309, 2203, 281, 2736, 257, 1329, 295, 41674, 11, 729, 366, 264, 1329, 295, 721, 51452, 51452, 281, 853, 484, 264, 1329, 295, 1944, 6883, 7833, 13, 51616, 51616, 1436, 291, 393, 20460, 721, 294, 819, 2098, 13, 51784, 51816], "temperature": 0.0, "avg_logprob": -0.2959215465344881, "compression_ratio": 1.7735849056603774, "no_caption_prob": 5.812274685013108e-05}, {"id": 364, "seek": 184840, "start": 1862.8000000000002, "end": 1863.6000000000001, "text": " things like that.", "tokens": [50364, 867, 1944, 2098, 11, 577, 281, 652, 309, 4356, 13, 50504, 50532, 407, 490, 24922, 281, 257, 1329, 295, 41674, 13, 50676, 50676, 407, 2902, 300, 23060, 24922, 2445, 1732, 576, 976, 291, 257, 1329, 365, 1451, 4018, 732, 11, 51056, 51084, 721, 411, 300, 13, 51124, 51148, 400, 562, 291, 584, 300, 309, 2203, 281, 2736, 257, 1329, 295, 41674, 11, 729, 366, 264, 1329, 295, 721, 51452, 51452, 281, 853, 484, 264, 1329, 295, 1944, 6883, 7833, 13, 51616, 51616, 1436, 291, 393, 20460, 721, 294, 819, 2098, 13, 51784, 51816], "temperature": 0.0, "avg_logprob": -0.2959215465344881, "compression_ratio": 1.7735849056603774, "no_caption_prob": 5.812274685013108e-05}, {"id": 365, "seek": 184840, "start": 1864.0800000000002, "end": 1870.16, "text": " And when you say that it needs to return a list of integers, those are the list of things", "tokens": [50364, 867, 1944, 2098, 11, 577, 281, 652, 309, 4356, 13, 50504, 50532, 407, 490, 24922, 281, 257, 1329, 295, 41674, 13, 50676, 50676, 407, 2902, 300, 23060, 24922, 2445, 1732, 576, 976, 291, 257, 1329, 365, 1451, 4018, 732, 11, 51056, 51084, 721, 411, 300, 13, 51124, 51148, 400, 562, 291, 584, 300, 309, 2203, 281, 2736, 257, 1329, 295, 41674, 11, 729, 366, 264, 1329, 295, 721, 51452, 51452, 281, 853, 484, 264, 1329, 295, 1944, 6883, 7833, 13, 51616, 51616, 1436, 291, 393, 20460, 721, 294, 819, 2098, 13, 51784, 51816], "temperature": 0.0, "avg_logprob": -0.2959215465344881, "compression_ratio": 1.7735849056603774, "no_caption_prob": 5.812274685013108e-05}, {"id": 366, "seek": 184840, "start": 1870.16, "end": 1873.44, "text": " to try out the list of possible simplifications.", "tokens": [50364, 867, 1944, 2098, 11, 577, 281, 652, 309, 4356, 13, 50504, 50532, 407, 490, 24922, 281, 257, 1329, 295, 41674, 13, 50676, 50676, 407, 2902, 300, 23060, 24922, 2445, 1732, 576, 976, 291, 257, 1329, 365, 1451, 4018, 732, 11, 51056, 51084, 721, 411, 300, 13, 51124, 51148, 400, 562, 291, 584, 300, 309, 2203, 281, 2736, 257, 1329, 295, 41674, 11, 729, 366, 264, 1329, 295, 721, 51452, 51452, 281, 853, 484, 264, 1329, 295, 1944, 6883, 7833, 13, 51616, 51616, 1436, 291, 393, 20460, 721, 294, 819, 2098, 13, 51784, 51816], "temperature": 0.0, "avg_logprob": -0.2959215465344881, "compression_ratio": 1.7735849056603774, "no_caption_prob": 5.812274685013108e-05}, {"id": 367, "seek": 184840, "start": 1873.44, "end": 1876.8000000000002, "text": " Because you can simplify things in different ways.", "tokens": [50364, 867, 1944, 2098, 11, 577, 281, 652, 309, 4356, 13, 50504, 50532, 407, 490, 24922, 281, 257, 1329, 295, 41674, 13, 50676, 50676, 407, 2902, 300, 23060, 24922, 2445, 1732, 576, 976, 291, 257, 1329, 365, 1451, 4018, 732, 11, 51056, 51084, 721, 411, 300, 13, 51124, 51148, 400, 562, 291, 584, 300, 309, 2203, 281, 2736, 257, 1329, 295, 41674, 11, 729, 366, 264, 1329, 295, 721, 51452, 51452, 281, 853, 484, 264, 1329, 295, 1944, 6883, 7833, 13, 51616, 51616, 1436, 291, 393, 20460, 721, 294, 819, 2098, 13, 51784, 51816], "temperature": 0.0, "avg_logprob": -0.2959215465344881, "compression_ratio": 1.7735849056603774, "no_caption_prob": 5.812274685013108e-05}, {"id": 368, "seek": 187680, "start": 1876.8, "end": 1878.1599999999999, "text": " Yes.", "tokens": [50364, 1079, 13, 50432, 50432, 1079, 13, 50472, 50472, 509, 528, 309, 281, 2906, 411, 4018, 1287, 307, 364, 1880, 551, 281, 23060, 293, 754, 1287, 50784, 50784, 307, 364, 1880, 551, 281, 23060, 13, 50860, 50860, 407, 11, 370, 732, 293, 4018, 366, 10995, 293, 4356, 3547, 13, 51064, 51064, 407, 436, 576, 312, 1880, 281, 23060, 13, 51184, 51184, 467, 311, 286, 2759, 380, 584, 309, 311, 11, 309, 311, 466, 754, 1287, 11, 457, 309, 311, 445, 1382, 281, 652, 264, 4190, 18587, 51640, 51640, 294, 512, 636, 13, 51688, 51708], "temperature": 0.0, "avg_logprob": -0.25204837196751645, "compression_ratio": 1.7578947368421052, "no_caption_prob": 1.9208662706660107e-05}, {"id": 369, "seek": 187680, "start": 1878.1599999999999, "end": 1878.96, "text": " Yes.", "tokens": [50364, 1079, 13, 50432, 50432, 1079, 13, 50472, 50472, 509, 528, 309, 281, 2906, 411, 4018, 1287, 307, 364, 1880, 551, 281, 23060, 293, 754, 1287, 50784, 50784, 307, 364, 1880, 551, 281, 23060, 13, 50860, 50860, 407, 11, 370, 732, 293, 4018, 366, 10995, 293, 4356, 3547, 13, 51064, 51064, 407, 436, 576, 312, 1880, 281, 23060, 13, 51184, 51184, 467, 311, 286, 2759, 380, 584, 309, 311, 11, 309, 311, 466, 754, 1287, 11, 457, 309, 311, 445, 1382, 281, 652, 264, 4190, 18587, 51640, 51640, 294, 512, 636, 13, 51688, 51708], "temperature": 0.0, "avg_logprob": -0.25204837196751645, "compression_ratio": 1.7578947368421052, "no_caption_prob": 1.9208662706660107e-05}, {"id": 370, "seek": 187680, "start": 1878.96, "end": 1885.2, "text": " You want it to represent like zeroness is an interesting thing to shrink and evenness", "tokens": [50364, 1079, 13, 50432, 50432, 1079, 13, 50472, 50472, 509, 528, 309, 281, 2906, 411, 4018, 1287, 307, 364, 1880, 551, 281, 23060, 293, 754, 1287, 50784, 50784, 307, 364, 1880, 551, 281, 23060, 13, 50860, 50860, 407, 11, 370, 732, 293, 4018, 366, 10995, 293, 4356, 3547, 13, 51064, 51064, 407, 436, 576, 312, 1880, 281, 23060, 13, 51184, 51184, 467, 311, 286, 2759, 380, 584, 309, 311, 11, 309, 311, 466, 754, 1287, 11, 457, 309, 311, 445, 1382, 281, 652, 264, 4190, 18587, 51640, 51640, 294, 512, 636, 13, 51688, 51708], "temperature": 0.0, "avg_logprob": -0.25204837196751645, "compression_ratio": 1.7578947368421052, "no_caption_prob": 1.9208662706660107e-05}, {"id": 371, "seek": 187680, "start": 1885.2, "end": 1886.72, "text": " is an interesting thing to shrink.", "tokens": [50364, 1079, 13, 50432, 50432, 1079, 13, 50472, 50472, 509, 528, 309, 281, 2906, 411, 4018, 1287, 307, 364, 1880, 551, 281, 23060, 293, 754, 1287, 50784, 50784, 307, 364, 1880, 551, 281, 23060, 13, 50860, 50860, 407, 11, 370, 732, 293, 4018, 366, 10995, 293, 4356, 3547, 13, 51064, 51064, 407, 436, 576, 312, 1880, 281, 23060, 13, 51184, 51184, 467, 311, 286, 2759, 380, 584, 309, 311, 11, 309, 311, 466, 754, 1287, 11, 457, 309, 311, 445, 1382, 281, 652, 264, 4190, 18587, 51640, 51640, 294, 512, 636, 13, 51688, 51708], "temperature": 0.0, "avg_logprob": -0.25204837196751645, "compression_ratio": 1.7578947368421052, "no_caption_prob": 1.9208662706660107e-05}, {"id": 372, "seek": 187680, "start": 1886.72, "end": 1890.8, "text": " So, so two and zero are meaningful and smaller numbers.", "tokens": [50364, 1079, 13, 50432, 50432, 1079, 13, 50472, 50472, 509, 528, 309, 281, 2906, 411, 4018, 1287, 307, 364, 1880, 551, 281, 23060, 293, 754, 1287, 50784, 50784, 307, 364, 1880, 551, 281, 23060, 13, 50860, 50860, 407, 11, 370, 732, 293, 4018, 366, 10995, 293, 4356, 3547, 13, 51064, 51064, 407, 436, 576, 312, 1880, 281, 23060, 13, 51184, 51184, 467, 311, 286, 2759, 380, 584, 309, 311, 11, 309, 311, 466, 754, 1287, 11, 457, 309, 311, 445, 1382, 281, 652, 264, 4190, 18587, 51640, 51640, 294, 512, 636, 13, 51688, 51708], "temperature": 0.0, "avg_logprob": -0.25204837196751645, "compression_ratio": 1.7578947368421052, "no_caption_prob": 1.9208662706660107e-05}, {"id": 373, "seek": 187680, "start": 1890.8, "end": 1893.2, "text": " So they would be interesting to shrink.", "tokens": [50364, 1079, 13, 50432, 50432, 1079, 13, 50472, 50472, 509, 528, 309, 281, 2906, 411, 4018, 1287, 307, 364, 1880, 551, 281, 23060, 293, 754, 1287, 50784, 50784, 307, 364, 1880, 551, 281, 23060, 13, 50860, 50860, 407, 11, 370, 732, 293, 4018, 366, 10995, 293, 4356, 3547, 13, 51064, 51064, 407, 436, 576, 312, 1880, 281, 23060, 13, 51184, 51184, 467, 311, 286, 2759, 380, 584, 309, 311, 11, 309, 311, 466, 754, 1287, 11, 457, 309, 311, 445, 1382, 281, 652, 264, 4190, 18587, 51640, 51640, 294, 512, 636, 13, 51688, 51708], "temperature": 0.0, "avg_logprob": -0.25204837196751645, "compression_ratio": 1.7578947368421052, "no_caption_prob": 1.9208662706660107e-05}, {"id": 374, "seek": 187680, "start": 1893.2, "end": 1902.32, "text": " It's I wouldn't say it's, it's about evenness, but it's just trying to make the values simpler", "tokens": [50364, 1079, 13, 50432, 50432, 1079, 13, 50472, 50472, 509, 528, 309, 281, 2906, 411, 4018, 1287, 307, 364, 1880, 551, 281, 23060, 293, 754, 1287, 50784, 50784, 307, 364, 1880, 551, 281, 23060, 13, 50860, 50860, 407, 11, 370, 732, 293, 4018, 366, 10995, 293, 4356, 3547, 13, 51064, 51064, 407, 436, 576, 312, 1880, 281, 23060, 13, 51184, 51184, 467, 311, 286, 2759, 380, 584, 309, 311, 11, 309, 311, 466, 754, 1287, 11, 457, 309, 311, 445, 1382, 281, 652, 264, 4190, 18587, 51640, 51640, 294, 512, 636, 13, 51688, 51708], "temperature": 0.0, "avg_logprob": -0.25204837196751645, "compression_ratio": 1.7578947368421052, "no_caption_prob": 1.9208662706660107e-05}, {"id": 375, "seek": 187680, "start": 1902.32, "end": 1903.28, "text": " in some way.", "tokens": [50364, 1079, 13, 50432, 50432, 1079, 13, 50472, 50472, 509, 528, 309, 281, 2906, 411, 4018, 1287, 307, 364, 1880, 551, 281, 23060, 293, 754, 1287, 50784, 50784, 307, 364, 1880, 551, 281, 23060, 13, 50860, 50860, 407, 11, 370, 732, 293, 4018, 366, 10995, 293, 4356, 3547, 13, 51064, 51064, 407, 436, 576, 312, 1880, 281, 23060, 13, 51184, 51184, 467, 311, 286, 2759, 380, 584, 309, 311, 11, 309, 311, 466, 754, 1287, 11, 457, 309, 311, 445, 1382, 281, 652, 264, 4190, 18587, 51640, 51640, 294, 512, 636, 13, 51688, 51708], "temperature": 0.0, "avg_logprob": -0.25204837196751645, "compression_ratio": 1.7578947368421052, "no_caption_prob": 1.9208662706660107e-05}, {"id": 376, "seek": 190328, "start": 1903.28, "end": 1907.84, "text": " So for integers, it might, you know, you might try to shrink to zero.", "tokens": [50364, 407, 337, 41674, 11, 309, 1062, 11, 291, 458, 11, 291, 1062, 853, 281, 23060, 281, 4018, 13, 50592, 50592, 509, 1062, 853, 281, 23060, 281, 512, 3671, 1230, 337, 13985, 13, 50788, 50788, 509, 1062, 1319, 264, 2517, 490, 363, 281, 316, 11, 420, 291, 1062, 611, 445, 652, 264, 6798, 11639, 13, 51108, 51108, 1779, 13, 51136, 51136, 400, 337, 819, 3467, 11, 264, 636, 281, 23060, 264, 2010, 486, 312, 819, 13, 51452, 51452, 583, 309, 3719, 365, 4974, 11, 558, 30, 51644, 51644], "temperature": 0.0, "avg_logprob": -0.21897834606384964, "compression_ratio": 1.7128205128205127, "no_caption_prob": 1.8620898117660545e-05}, {"id": 377, "seek": 190328, "start": 1907.84, "end": 1911.76, "text": " You might try to shrink to some negative number for strings.", "tokens": [50364, 407, 337, 41674, 11, 309, 1062, 11, 291, 458, 11, 291, 1062, 853, 281, 23060, 281, 4018, 13, 50592, 50592, 509, 1062, 853, 281, 23060, 281, 512, 3671, 1230, 337, 13985, 13, 50788, 50788, 509, 1062, 1319, 264, 2517, 490, 363, 281, 316, 11, 420, 291, 1062, 611, 445, 652, 264, 6798, 11639, 13, 51108, 51108, 1779, 13, 51136, 51136, 400, 337, 819, 3467, 11, 264, 636, 281, 23060, 264, 2010, 486, 312, 819, 13, 51452, 51452, 583, 309, 3719, 365, 4974, 11, 558, 30, 51644, 51644], "temperature": 0.0, "avg_logprob": -0.21897834606384964, "compression_ratio": 1.7128205128205127, "no_caption_prob": 1.8620898117660545e-05}, {"id": 378, "seek": 190328, "start": 1911.76, "end": 1918.16, "text": " You might change the character from B to A, or you might also just make the string shorter.", "tokens": [50364, 407, 337, 41674, 11, 309, 1062, 11, 291, 458, 11, 291, 1062, 853, 281, 23060, 281, 4018, 13, 50592, 50592, 509, 1062, 853, 281, 23060, 281, 512, 3671, 1230, 337, 13985, 13, 50788, 50788, 509, 1062, 1319, 264, 2517, 490, 363, 281, 316, 11, 420, 291, 1062, 611, 445, 652, 264, 6798, 11639, 13, 51108, 51108, 1779, 13, 51136, 51136, 400, 337, 819, 3467, 11, 264, 636, 281, 23060, 264, 2010, 486, 312, 819, 13, 51452, 51452, 583, 309, 3719, 365, 4974, 11, 558, 30, 51644, 51644], "temperature": 0.0, "avg_logprob": -0.21897834606384964, "compression_ratio": 1.7128205128205127, "no_caption_prob": 1.8620898117660545e-05}, {"id": 379, "seek": 190328, "start": 1918.16, "end": 1918.72, "text": " Right.", "tokens": [50364, 407, 337, 41674, 11, 309, 1062, 11, 291, 458, 11, 291, 1062, 853, 281, 23060, 281, 4018, 13, 50592, 50592, 509, 1062, 853, 281, 23060, 281, 512, 3671, 1230, 337, 13985, 13, 50788, 50788, 509, 1062, 1319, 264, 2517, 490, 363, 281, 316, 11, 420, 291, 1062, 611, 445, 652, 264, 6798, 11639, 13, 51108, 51108, 1779, 13, 51136, 51136, 400, 337, 819, 3467, 11, 264, 636, 281, 23060, 264, 2010, 486, 312, 819, 13, 51452, 51452, 583, 309, 3719, 365, 4974, 11, 558, 30, 51644, 51644], "temperature": 0.0, "avg_logprob": -0.21897834606384964, "compression_ratio": 1.7128205128205127, "no_caption_prob": 1.8620898117660545e-05}, {"id": 380, "seek": 190328, "start": 1918.72, "end": 1925.04, "text": " And for different types, the way to shrink the type will be different.", "tokens": [50364, 407, 337, 41674, 11, 309, 1062, 11, 291, 458, 11, 291, 1062, 853, 281, 23060, 281, 4018, 13, 50592, 50592, 509, 1062, 853, 281, 23060, 281, 512, 3671, 1230, 337, 13985, 13, 50788, 50788, 509, 1062, 1319, 264, 2517, 490, 363, 281, 316, 11, 420, 291, 1062, 611, 445, 652, 264, 6798, 11639, 13, 51108, 51108, 1779, 13, 51136, 51136, 400, 337, 819, 3467, 11, 264, 636, 281, 23060, 264, 2010, 486, 312, 819, 13, 51452, 51452, 583, 309, 3719, 365, 4974, 11, 558, 30, 51644, 51644], "temperature": 0.0, "avg_logprob": -0.21897834606384964, "compression_ratio": 1.7128205128205127, "no_caption_prob": 1.8620898117660545e-05}, {"id": 381, "seek": 190328, "start": 1925.04, "end": 1928.8799999999999, "text": " But it starts with random, right?", "tokens": [50364, 407, 337, 41674, 11, 309, 1062, 11, 291, 458, 11, 291, 1062, 853, 281, 23060, 281, 4018, 13, 50592, 50592, 509, 1062, 853, 281, 23060, 281, 512, 3671, 1230, 337, 13985, 13, 50788, 50788, 509, 1062, 1319, 264, 2517, 490, 363, 281, 316, 11, 420, 291, 1062, 611, 445, 652, 264, 6798, 11639, 13, 51108, 51108, 1779, 13, 51136, 51136, 400, 337, 819, 3467, 11, 264, 636, 281, 23060, 264, 2010, 486, 312, 819, 13, 51452, 51452, 583, 309, 3719, 365, 4974, 11, 558, 30, 51644, 51644], "temperature": 0.0, "avg_logprob": -0.21897834606384964, "compression_ratio": 1.7128205128205127, "no_caption_prob": 1.8620898117660545e-05}, {"id": 382, "seek": 192888, "start": 1928.88, "end": 1934.8000000000002, "text": " This, this value based or type based shrinking approach, it says, here's a random value I'm", "tokens": [50364, 639, 11, 341, 2158, 2361, 420, 2010, 2361, 41684, 3109, 11, 309, 1619, 11, 510, 311, 257, 4974, 2158, 286, 478, 50660, 50660, 2891, 365, 13, 50712, 50712, 823, 11, 718, 385, 11, 1564, 286, 915, 257, 18223, 1389, 11, 718, 385, 536, 498, 286, 393, 1884, 1071, 18223, 1389, 51028, 51028, 538, 41684, 300, 18223, 1389, 13, 51172, 51172, 865, 13, 51200, 51200, 407, 309, 486, 733, 295, 1524, 264, 1399, 295, 510, 311, 257, 2158, 300, 311, 337, 512, 1778, 309, 311, 1880, 51596, 51596, 570, 309, 18199, 264, 1500, 13, 51668, 51668], "temperature": 0.0, "avg_logprob": -0.19609569274273114, "compression_ratio": 1.6872037914691944, "no_caption_prob": 1.1125238415843341e-05}, {"id": 383, "seek": 192888, "start": 1934.8000000000002, "end": 1935.8400000000001, "text": " starting with.", "tokens": [50364, 639, 11, 341, 2158, 2361, 420, 2010, 2361, 41684, 3109, 11, 309, 1619, 11, 510, 311, 257, 4974, 2158, 286, 478, 50660, 50660, 2891, 365, 13, 50712, 50712, 823, 11, 718, 385, 11, 1564, 286, 915, 257, 18223, 1389, 11, 718, 385, 536, 498, 286, 393, 1884, 1071, 18223, 1389, 51028, 51028, 538, 41684, 300, 18223, 1389, 13, 51172, 51172, 865, 13, 51200, 51200, 407, 309, 486, 733, 295, 1524, 264, 1399, 295, 510, 311, 257, 2158, 300, 311, 337, 512, 1778, 309, 311, 1880, 51596, 51596, 570, 309, 18199, 264, 1500, 13, 51668, 51668], "temperature": 0.0, "avg_logprob": -0.19609569274273114, "compression_ratio": 1.6872037914691944, "no_caption_prob": 1.1125238415843341e-05}, {"id": 384, "seek": 192888, "start": 1935.8400000000001, "end": 1942.16, "text": " Now, let me, once I find a failing case, let me see if I can create another failing case", "tokens": [50364, 639, 11, 341, 2158, 2361, 420, 2010, 2361, 41684, 3109, 11, 309, 1619, 11, 510, 311, 257, 4974, 2158, 286, 478, 50660, 50660, 2891, 365, 13, 50712, 50712, 823, 11, 718, 385, 11, 1564, 286, 915, 257, 18223, 1389, 11, 718, 385, 536, 498, 286, 393, 1884, 1071, 18223, 1389, 51028, 51028, 538, 41684, 300, 18223, 1389, 13, 51172, 51172, 865, 13, 51200, 51200, 407, 309, 486, 733, 295, 1524, 264, 1399, 295, 510, 311, 257, 2158, 300, 311, 337, 512, 1778, 309, 311, 1880, 51596, 51596, 570, 309, 18199, 264, 1500, 13, 51668, 51668], "temperature": 0.0, "avg_logprob": -0.19609569274273114, "compression_ratio": 1.6872037914691944, "no_caption_prob": 1.1125238415843341e-05}, {"id": 385, "seek": 192888, "start": 1942.16, "end": 1945.0400000000002, "text": " by shrinking that failing case.", "tokens": [50364, 639, 11, 341, 2158, 2361, 420, 2010, 2361, 41684, 3109, 11, 309, 1619, 11, 510, 311, 257, 4974, 2158, 286, 478, 50660, 50660, 2891, 365, 13, 50712, 50712, 823, 11, 718, 385, 11, 1564, 286, 915, 257, 18223, 1389, 11, 718, 385, 536, 498, 286, 393, 1884, 1071, 18223, 1389, 51028, 51028, 538, 41684, 300, 18223, 1389, 13, 51172, 51172, 865, 13, 51200, 51200, 407, 309, 486, 733, 295, 1524, 264, 1399, 295, 510, 311, 257, 2158, 300, 311, 337, 512, 1778, 309, 311, 1880, 51596, 51596, 570, 309, 18199, 264, 1500, 13, 51668, 51668], "temperature": 0.0, "avg_logprob": -0.19609569274273114, "compression_ratio": 1.6872037914691944, "no_caption_prob": 1.1125238415843341e-05}, {"id": 386, "seek": 192888, "start": 1945.0400000000002, "end": 1945.6000000000001, "text": " Yeah.", "tokens": [50364, 639, 11, 341, 2158, 2361, 420, 2010, 2361, 41684, 3109, 11, 309, 1619, 11, 510, 311, 257, 4974, 2158, 286, 478, 50660, 50660, 2891, 365, 13, 50712, 50712, 823, 11, 718, 385, 11, 1564, 286, 915, 257, 18223, 1389, 11, 718, 385, 536, 498, 286, 393, 1884, 1071, 18223, 1389, 51028, 51028, 538, 41684, 300, 18223, 1389, 13, 51172, 51172, 865, 13, 51200, 51200, 407, 309, 486, 733, 295, 1524, 264, 1399, 295, 510, 311, 257, 2158, 300, 311, 337, 512, 1778, 309, 311, 1880, 51596, 51596, 570, 309, 18199, 264, 1500, 13, 51668, 51668], "temperature": 0.0, "avg_logprob": -0.19609569274273114, "compression_ratio": 1.6872037914691944, "no_caption_prob": 1.1125238415843341e-05}, {"id": 387, "seek": 192888, "start": 1945.6000000000001, "end": 1953.5200000000002, "text": " So it will kind of follow the process of here's a value that's for some reason it's interesting", "tokens": [50364, 639, 11, 341, 2158, 2361, 420, 2010, 2361, 41684, 3109, 11, 309, 1619, 11, 510, 311, 257, 4974, 2158, 286, 478, 50660, 50660, 2891, 365, 13, 50712, 50712, 823, 11, 718, 385, 11, 1564, 286, 915, 257, 18223, 1389, 11, 718, 385, 536, 498, 286, 393, 1884, 1071, 18223, 1389, 51028, 51028, 538, 41684, 300, 18223, 1389, 13, 51172, 51172, 865, 13, 51200, 51200, 407, 309, 486, 733, 295, 1524, 264, 1399, 295, 510, 311, 257, 2158, 300, 311, 337, 512, 1778, 309, 311, 1880, 51596, 51596, 570, 309, 18199, 264, 1500, 13, 51668, 51668], "temperature": 0.0, "avg_logprob": -0.19609569274273114, "compression_ratio": 1.6872037914691944, "no_caption_prob": 1.1125238415843341e-05}, {"id": 388, "seek": 192888, "start": 1953.5200000000002, "end": 1954.96, "text": " because it fails the test.", "tokens": [50364, 639, 11, 341, 2158, 2361, 420, 2010, 2361, 41684, 3109, 11, 309, 1619, 11, 510, 311, 257, 4974, 2158, 286, 478, 50660, 50660, 2891, 365, 13, 50712, 50712, 823, 11, 718, 385, 11, 1564, 286, 915, 257, 18223, 1389, 11, 718, 385, 536, 498, 286, 393, 1884, 1071, 18223, 1389, 51028, 51028, 538, 41684, 300, 18223, 1389, 13, 51172, 51172, 865, 13, 51200, 51200, 407, 309, 486, 733, 295, 1524, 264, 1399, 295, 510, 311, 257, 2158, 300, 311, 337, 512, 1778, 309, 311, 1880, 51596, 51596, 570, 309, 18199, 264, 1500, 13, 51668, 51668], "temperature": 0.0, "avg_logprob": -0.19609569274273114, "compression_ratio": 1.6872037914691944, "no_caption_prob": 1.1125238415843341e-05}, {"id": 389, "seek": 195496, "start": 1954.96, "end": 1959.3600000000001, "text": " I will give you smaller values or simpler values.", "tokens": [50364, 286, 486, 976, 291, 4356, 4190, 420, 18587, 4190, 13, 50584, 50584, 400, 291, 980, 385, 498, 604, 295, 729, 18199, 264, 1500, 611, 13, 50776, 50776, 1779, 13, 50800, 50800, 400, 370, 309, 733, 295, 10002, 341, 1399, 293, 309, 9884, 16431, 13, 51024, 51024, 759, 309, 10704, 257, 4356, 2158, 300, 920, 18199, 264, 1500, 11, 309, 486, 1190, 264, 411, 264, 11255, 51452, 51452, 2445, 797, 13, 51500, 51500, 1779, 13, 51512, 51512, 467, 486, 853, 281, 536, 11, 1392, 11, 577, 393, 286, 23060, 341, 472, 30, 51684, 51684], "temperature": 0.0, "avg_logprob": -0.19897139699835525, "compression_ratio": 1.7061855670103092, "no_caption_prob": 9.363616300106514e-06}, {"id": 390, "seek": 195496, "start": 1959.3600000000001, "end": 1963.2, "text": " And you tell me if any of those fails the test also.", "tokens": [50364, 286, 486, 976, 291, 4356, 4190, 420, 18587, 4190, 13, 50584, 50584, 400, 291, 980, 385, 498, 604, 295, 729, 18199, 264, 1500, 611, 13, 50776, 50776, 1779, 13, 50800, 50800, 400, 370, 309, 733, 295, 10002, 341, 1399, 293, 309, 9884, 16431, 13, 51024, 51024, 759, 309, 10704, 257, 4356, 2158, 300, 920, 18199, 264, 1500, 11, 309, 486, 1190, 264, 411, 264, 11255, 51452, 51452, 2445, 797, 13, 51500, 51500, 1779, 13, 51512, 51512, 467, 486, 853, 281, 536, 11, 1392, 11, 577, 393, 286, 23060, 341, 472, 30, 51684, 51684], "temperature": 0.0, "avg_logprob": -0.19897139699835525, "compression_ratio": 1.7061855670103092, "no_caption_prob": 9.363616300106514e-06}, {"id": 391, "seek": 195496, "start": 1963.2, "end": 1963.68, "text": " Right.", "tokens": [50364, 286, 486, 976, 291, 4356, 4190, 420, 18587, 4190, 13, 50584, 50584, 400, 291, 980, 385, 498, 604, 295, 729, 18199, 264, 1500, 611, 13, 50776, 50776, 1779, 13, 50800, 50800, 400, 370, 309, 733, 295, 10002, 341, 1399, 293, 309, 9884, 16431, 13, 51024, 51024, 759, 309, 10704, 257, 4356, 2158, 300, 920, 18199, 264, 1500, 11, 309, 486, 1190, 264, 411, 264, 11255, 51452, 51452, 2445, 797, 13, 51500, 51500, 1779, 13, 51512, 51512, 467, 486, 853, 281, 536, 11, 1392, 11, 577, 393, 286, 23060, 341, 472, 30, 51684, 51684], "temperature": 0.0, "avg_logprob": -0.19897139699835525, "compression_ratio": 1.7061855670103092, "no_caption_prob": 9.363616300106514e-06}, {"id": 392, "seek": 195496, "start": 1963.68, "end": 1968.16, "text": " And so it kind of follows this process and it shrinks.", "tokens": [50364, 286, 486, 976, 291, 4356, 4190, 420, 18587, 4190, 13, 50584, 50584, 400, 291, 980, 385, 498, 604, 295, 729, 18199, 264, 1500, 611, 13, 50776, 50776, 1779, 13, 50800, 50800, 400, 370, 309, 733, 295, 10002, 341, 1399, 293, 309, 9884, 16431, 13, 51024, 51024, 759, 309, 10704, 257, 4356, 2158, 300, 920, 18199, 264, 1500, 11, 309, 486, 1190, 264, 411, 264, 11255, 51452, 51452, 2445, 797, 13, 51500, 51500, 1779, 13, 51512, 51512, 467, 486, 853, 281, 536, 11, 1392, 11, 577, 393, 286, 23060, 341, 472, 30, 51684, 51684], "temperature": 0.0, "avg_logprob": -0.19897139699835525, "compression_ratio": 1.7061855670103092, "no_caption_prob": 9.363616300106514e-06}, {"id": 393, "seek": 195496, "start": 1968.16, "end": 1976.72, "text": " If it finds a smaller value that still fails the test, it will run the like the candidates", "tokens": [50364, 286, 486, 976, 291, 4356, 4190, 420, 18587, 4190, 13, 50584, 50584, 400, 291, 980, 385, 498, 604, 295, 729, 18199, 264, 1500, 611, 13, 50776, 50776, 1779, 13, 50800, 50800, 400, 370, 309, 733, 295, 10002, 341, 1399, 293, 309, 9884, 16431, 13, 51024, 51024, 759, 309, 10704, 257, 4356, 2158, 300, 920, 18199, 264, 1500, 11, 309, 486, 1190, 264, 411, 264, 11255, 51452, 51452, 2445, 797, 13, 51500, 51500, 1779, 13, 51512, 51512, 467, 486, 853, 281, 536, 11, 1392, 11, 577, 393, 286, 23060, 341, 472, 30, 51684, 51684], "temperature": 0.0, "avg_logprob": -0.19897139699835525, "compression_ratio": 1.7061855670103092, "no_caption_prob": 9.363616300106514e-06}, {"id": 394, "seek": 195496, "start": 1976.72, "end": 1977.68, "text": " function again.", "tokens": [50364, 286, 486, 976, 291, 4356, 4190, 420, 18587, 4190, 13, 50584, 50584, 400, 291, 980, 385, 498, 604, 295, 729, 18199, 264, 1500, 611, 13, 50776, 50776, 1779, 13, 50800, 50800, 400, 370, 309, 733, 295, 10002, 341, 1399, 293, 309, 9884, 16431, 13, 51024, 51024, 759, 309, 10704, 257, 4356, 2158, 300, 920, 18199, 264, 1500, 11, 309, 486, 1190, 264, 411, 264, 11255, 51452, 51452, 2445, 797, 13, 51500, 51500, 1779, 13, 51512, 51512, 467, 486, 853, 281, 536, 11, 1392, 11, 577, 393, 286, 23060, 341, 472, 30, 51684, 51684], "temperature": 0.0, "avg_logprob": -0.19897139699835525, "compression_ratio": 1.7061855670103092, "no_caption_prob": 9.363616300106514e-06}, {"id": 395, "seek": 195496, "start": 1977.68, "end": 1977.92, "text": " Right.", "tokens": [50364, 286, 486, 976, 291, 4356, 4190, 420, 18587, 4190, 13, 50584, 50584, 400, 291, 980, 385, 498, 604, 295, 729, 18199, 264, 1500, 611, 13, 50776, 50776, 1779, 13, 50800, 50800, 400, 370, 309, 733, 295, 10002, 341, 1399, 293, 309, 9884, 16431, 13, 51024, 51024, 759, 309, 10704, 257, 4356, 2158, 300, 920, 18199, 264, 1500, 11, 309, 486, 1190, 264, 411, 264, 11255, 51452, 51452, 2445, 797, 13, 51500, 51500, 1779, 13, 51512, 51512, 467, 486, 853, 281, 536, 11, 1392, 11, 577, 393, 286, 23060, 341, 472, 30, 51684, 51684], "temperature": 0.0, "avg_logprob": -0.19897139699835525, "compression_ratio": 1.7061855670103092, "no_caption_prob": 9.363616300106514e-06}, {"id": 396, "seek": 195496, "start": 1977.92, "end": 1981.3600000000001, "text": " It will try to see, okay, how can I shrink this one?", "tokens": [50364, 286, 486, 976, 291, 4356, 4190, 420, 18587, 4190, 13, 50584, 50584, 400, 291, 980, 385, 498, 604, 295, 729, 18199, 264, 1500, 611, 13, 50776, 50776, 1779, 13, 50800, 50800, 400, 370, 309, 733, 295, 10002, 341, 1399, 293, 309, 9884, 16431, 13, 51024, 51024, 759, 309, 10704, 257, 4356, 2158, 300, 920, 18199, 264, 1500, 11, 309, 486, 1190, 264, 411, 264, 11255, 51452, 51452, 2445, 797, 13, 51500, 51500, 1779, 13, 51512, 51512, 467, 486, 853, 281, 536, 11, 1392, 11, 577, 393, 286, 23060, 341, 472, 30, 51684, 51684], "temperature": 0.0, "avg_logprob": -0.19897139699835525, "compression_ratio": 1.7061855670103092, "no_caption_prob": 9.363616300106514e-06}, {"id": 397, "seek": 198136, "start": 1981.36, "end": 1987.76, "text": " And so it will follow that process until it can't shrink anymore according to the test", "tokens": [50364, 400, 370, 309, 486, 1524, 300, 1399, 1826, 309, 393, 380, 23060, 3602, 4650, 281, 264, 1500, 50684, 50684, 570, 11, 291, 458, 11, 4190, 490, 472, 1500, 2759, 380, 4725, 312, 18223, 512, 661, 1500, 13, 51024, 51024, 407, 309, 2203, 281, 23060, 365, 14258, 281, 264, 2190, 18223, 1500, 13, 51308, 51308, 865, 11, 3122, 13, 51360, 51360, 400, 370, 300, 311, 11, 300, 311, 264, 2158, 2361, 41684, 13, 51552, 51552], "temperature": 0.0, "avg_logprob": -0.20650552448473478, "compression_ratio": 1.5854922279792747, "no_caption_prob": 2.2202984837349504e-05}, {"id": 398, "seek": 198136, "start": 1987.76, "end": 1994.56, "text": " because, you know, values from one test wouldn't necessarily be failing some other test.", "tokens": [50364, 400, 370, 309, 486, 1524, 300, 1399, 1826, 309, 393, 380, 23060, 3602, 4650, 281, 264, 1500, 50684, 50684, 570, 11, 291, 458, 11, 4190, 490, 472, 1500, 2759, 380, 4725, 312, 18223, 512, 661, 1500, 13, 51024, 51024, 407, 309, 2203, 281, 23060, 365, 14258, 281, 264, 2190, 18223, 1500, 13, 51308, 51308, 865, 11, 3122, 13, 51360, 51360, 400, 370, 300, 311, 11, 300, 311, 264, 2158, 2361, 41684, 13, 51552, 51552], "temperature": 0.0, "avg_logprob": -0.20650552448473478, "compression_ratio": 1.5854922279792747, "no_caption_prob": 2.2202984837349504e-05}, {"id": 399, "seek": 198136, "start": 1994.56, "end": 2000.24, "text": " So it needs to shrink with regards to the current failing test.", "tokens": [50364, 400, 370, 309, 486, 1524, 300, 1399, 1826, 309, 393, 380, 23060, 3602, 4650, 281, 264, 1500, 50684, 50684, 570, 11, 291, 458, 11, 4190, 490, 472, 1500, 2759, 380, 4725, 312, 18223, 512, 661, 1500, 13, 51024, 51024, 407, 309, 2203, 281, 23060, 365, 14258, 281, 264, 2190, 18223, 1500, 13, 51308, 51308, 865, 11, 3122, 13, 51360, 51360, 400, 370, 300, 311, 11, 300, 311, 264, 2158, 2361, 41684, 13, 51552, 51552], "temperature": 0.0, "avg_logprob": -0.20650552448473478, "compression_ratio": 1.5854922279792747, "no_caption_prob": 2.2202984837349504e-05}, {"id": 400, "seek": 198136, "start": 2000.24, "end": 2001.28, "text": " Yeah, absolutely.", "tokens": [50364, 400, 370, 309, 486, 1524, 300, 1399, 1826, 309, 393, 380, 23060, 3602, 4650, 281, 264, 1500, 50684, 50684, 570, 11, 291, 458, 11, 4190, 490, 472, 1500, 2759, 380, 4725, 312, 18223, 512, 661, 1500, 13, 51024, 51024, 407, 309, 2203, 281, 23060, 365, 14258, 281, 264, 2190, 18223, 1500, 13, 51308, 51308, 865, 11, 3122, 13, 51360, 51360, 400, 370, 300, 311, 11, 300, 311, 264, 2158, 2361, 41684, 13, 51552, 51552], "temperature": 0.0, "avg_logprob": -0.20650552448473478, "compression_ratio": 1.5854922279792747, "no_caption_prob": 2.2202984837349504e-05}, {"id": 401, "seek": 198136, "start": 2001.28, "end": 2005.12, "text": " And so that's, that's the value based shrinking.", "tokens": [50364, 400, 370, 309, 486, 1524, 300, 1399, 1826, 309, 393, 380, 23060, 3602, 4650, 281, 264, 1500, 50684, 50684, 570, 11, 291, 458, 11, 4190, 490, 472, 1500, 2759, 380, 4725, 312, 18223, 512, 661, 1500, 13, 51024, 51024, 407, 309, 2203, 281, 23060, 365, 14258, 281, 264, 2190, 18223, 1500, 13, 51308, 51308, 865, 11, 3122, 13, 51360, 51360, 400, 370, 300, 311, 11, 300, 311, 264, 2158, 2361, 41684, 13, 51552, 51552], "temperature": 0.0, "avg_logprob": -0.20650552448473478, "compression_ratio": 1.5854922279792747, "no_caption_prob": 2.2202984837349504e-05}, {"id": 402, "seek": 200512, "start": 2005.12, "end": 2013.76, "text": " It has no context of how the value would generate it, whether it was mapped somehow, right?", "tokens": [50364, 467, 575, 572, 4319, 295, 577, 264, 2158, 576, 8460, 309, 11, 1968, 309, 390, 33318, 6063, 11, 558, 30, 50796, 50796, 467, 1177, 380, 458, 1340, 466, 257, 19265, 293, 300, 7829, 1629, 2740, 13, 51052, 51052, 961, 311, 584, 498, 291, 632, 264, 917, 550, 2445, 11, 597, 11, 291, 458, 11, 365, 4974, 5125, 11, 309, 311, 51376, 51376, 2049, 4420, 13, 51452, 51452, 1610, 498, 291, 632, 11, 718, 311, 584, 257, 6608, 2445, 689, 291, 576, 584, 8460, 24922, 11, 457, 51740, 51740], "temperature": 0.0, "avg_logprob": -0.2122332043117947, "compression_ratio": 1.6199095022624435, "no_caption_prob": 1.8337574147153646e-05}, {"id": 403, "seek": 200512, "start": 2013.76, "end": 2018.8799999999999, "text": " It doesn't know anything about a generator and that creates certain problems.", "tokens": [50364, 467, 575, 572, 4319, 295, 577, 264, 2158, 576, 8460, 309, 11, 1968, 309, 390, 33318, 6063, 11, 558, 30, 50796, 50796, 467, 1177, 380, 458, 1340, 466, 257, 19265, 293, 300, 7829, 1629, 2740, 13, 51052, 51052, 961, 311, 584, 498, 291, 632, 264, 917, 550, 2445, 11, 597, 11, 291, 458, 11, 365, 4974, 5125, 11, 309, 311, 51376, 51376, 2049, 4420, 13, 51452, 51452, 1610, 498, 291, 632, 11, 718, 311, 584, 257, 6608, 2445, 689, 291, 576, 584, 8460, 24922, 11, 457, 51740, 51740], "temperature": 0.0, "avg_logprob": -0.2122332043117947, "compression_ratio": 1.6199095022624435, "no_caption_prob": 1.8337574147153646e-05}, {"id": 404, "seek": 200512, "start": 2018.8799999999999, "end": 2025.36, "text": " Let's say if you had the end then function, which, you know, with random generation, it's", "tokens": [50364, 467, 575, 572, 4319, 295, 577, 264, 2158, 576, 8460, 309, 11, 1968, 309, 390, 33318, 6063, 11, 558, 30, 50796, 50796, 467, 1177, 380, 458, 1340, 466, 257, 19265, 293, 300, 7829, 1629, 2740, 13, 51052, 51052, 961, 311, 584, 498, 291, 632, 264, 917, 550, 2445, 11, 597, 11, 291, 458, 11, 365, 4974, 5125, 11, 309, 311, 51376, 51376, 2049, 4420, 13, 51452, 51452, 1610, 498, 291, 632, 11, 718, 311, 584, 257, 6608, 2445, 689, 291, 576, 584, 8460, 24922, 11, 457, 51740, 51740], "temperature": 0.0, "avg_logprob": -0.2122332043117947, "compression_ratio": 1.6199095022624435, "no_caption_prob": 1.8337574147153646e-05}, {"id": 405, "seek": 200512, "start": 2025.36, "end": 2026.8799999999999, "text": " often useful.", "tokens": [50364, 467, 575, 572, 4319, 295, 577, 264, 2158, 576, 8460, 309, 11, 1968, 309, 390, 33318, 6063, 11, 558, 30, 50796, 50796, 467, 1177, 380, 458, 1340, 466, 257, 19265, 293, 300, 7829, 1629, 2740, 13, 51052, 51052, 961, 311, 584, 498, 291, 632, 264, 917, 550, 2445, 11, 597, 11, 291, 458, 11, 365, 4974, 5125, 11, 309, 311, 51376, 51376, 2049, 4420, 13, 51452, 51452, 1610, 498, 291, 632, 11, 718, 311, 584, 257, 6608, 2445, 689, 291, 576, 584, 8460, 24922, 11, 457, 51740, 51740], "temperature": 0.0, "avg_logprob": -0.2122332043117947, "compression_ratio": 1.6199095022624435, "no_caption_prob": 1.8337574147153646e-05}, {"id": 406, "seek": 200512, "start": 2026.8799999999999, "end": 2032.6399999999999, "text": " Or if you had, let's say a filter function where you would say generate integer, but", "tokens": [50364, 467, 575, 572, 4319, 295, 577, 264, 2158, 576, 8460, 309, 11, 1968, 309, 390, 33318, 6063, 11, 558, 30, 50796, 50796, 467, 1177, 380, 458, 1340, 466, 257, 19265, 293, 300, 7829, 1629, 2740, 13, 51052, 51052, 961, 311, 584, 498, 291, 632, 264, 917, 550, 2445, 11, 597, 11, 291, 458, 11, 365, 4974, 5125, 11, 309, 311, 51376, 51376, 2049, 4420, 13, 51452, 51452, 1610, 498, 291, 632, 11, 718, 311, 584, 257, 6608, 2445, 689, 291, 576, 584, 8460, 24922, 11, 457, 51740, 51740], "temperature": 0.0, "avg_logprob": -0.2122332043117947, "compression_ratio": 1.6199095022624435, "no_caption_prob": 1.8337574147153646e-05}, {"id": 407, "seek": 203264, "start": 2032.64, "end": 2039.3600000000001, "text": " I don't want it to be even, you would shrink the failing value, but you have no way of", "tokens": [50364, 286, 500, 380, 528, 309, 281, 312, 754, 11, 291, 576, 23060, 264, 18223, 2158, 11, 457, 291, 362, 572, 636, 295, 50700, 50700, 2614, 729, 15995, 322, 309, 797, 13, 50816, 50816, 407, 309, 18293, 512, 295, 729, 33270, 1719, 300, 291, 10833, 365, 13, 51248, 51248, 1779, 13, 51260, 51260, 400, 370, 300, 311, 264, 2734, 13, 51348, 51348, 663, 311, 264, 2734, 365, 41684, 17491, 2361, 322, 264, 2158, 570, 291, 362, 572, 4319, 466, 51644, 51644, 264, 5125, 13, 51700, 51700], "temperature": 0.0, "avg_logprob": -0.21051735713564115, "compression_ratio": 1.615, "no_caption_prob": 4.609237294062041e-05}, {"id": 408, "seek": 203264, "start": 2039.3600000000001, "end": 2041.68, "text": " running those filters on it again.", "tokens": [50364, 286, 500, 380, 528, 309, 281, 312, 754, 11, 291, 576, 23060, 264, 18223, 2158, 11, 457, 291, 362, 572, 636, 295, 50700, 50700, 2614, 729, 15995, 322, 309, 797, 13, 50816, 50816, 407, 309, 18293, 512, 295, 729, 33270, 1719, 300, 291, 10833, 365, 13, 51248, 51248, 1779, 13, 51260, 51260, 400, 370, 300, 311, 264, 2734, 13, 51348, 51348, 663, 311, 264, 2734, 365, 41684, 17491, 2361, 322, 264, 2158, 570, 291, 362, 572, 4319, 466, 51644, 51644, 264, 5125, 13, 51700, 51700], "temperature": 0.0, "avg_logprob": -0.21051735713564115, "compression_ratio": 1.615, "no_caption_prob": 4.609237294062041e-05}, {"id": 409, "seek": 203264, "start": 2041.68, "end": 2050.32, "text": " So it loses some of those invariants that you generated with.", "tokens": [50364, 286, 500, 380, 528, 309, 281, 312, 754, 11, 291, 576, 23060, 264, 18223, 2158, 11, 457, 291, 362, 572, 636, 295, 50700, 50700, 2614, 729, 15995, 322, 309, 797, 13, 50816, 50816, 407, 309, 18293, 512, 295, 729, 33270, 1719, 300, 291, 10833, 365, 13, 51248, 51248, 1779, 13, 51260, 51260, 400, 370, 300, 311, 264, 2734, 13, 51348, 51348, 663, 311, 264, 2734, 365, 41684, 17491, 2361, 322, 264, 2158, 570, 291, 362, 572, 4319, 466, 51644, 51644, 264, 5125, 13, 51700, 51700], "temperature": 0.0, "avg_logprob": -0.21051735713564115, "compression_ratio": 1.615, "no_caption_prob": 4.609237294062041e-05}, {"id": 410, "seek": 203264, "start": 2050.32, "end": 2050.56, "text": " Right.", "tokens": [50364, 286, 500, 380, 528, 309, 281, 312, 754, 11, 291, 576, 23060, 264, 18223, 2158, 11, 457, 291, 362, 572, 636, 295, 50700, 50700, 2614, 729, 15995, 322, 309, 797, 13, 50816, 50816, 407, 309, 18293, 512, 295, 729, 33270, 1719, 300, 291, 10833, 365, 13, 51248, 51248, 1779, 13, 51260, 51260, 400, 370, 300, 311, 264, 2734, 13, 51348, 51348, 663, 311, 264, 2734, 365, 41684, 17491, 2361, 322, 264, 2158, 570, 291, 362, 572, 4319, 466, 51644, 51644, 264, 5125, 13, 51700, 51700], "temperature": 0.0, "avg_logprob": -0.21051735713564115, "compression_ratio": 1.615, "no_caption_prob": 4.609237294062041e-05}, {"id": 411, "seek": 203264, "start": 2050.56, "end": 2052.32, "text": " And so that's the issue.", "tokens": [50364, 286, 500, 380, 528, 309, 281, 312, 754, 11, 291, 576, 23060, 264, 18223, 2158, 11, 457, 291, 362, 572, 636, 295, 50700, 50700, 2614, 729, 15995, 322, 309, 797, 13, 50816, 50816, 407, 309, 18293, 512, 295, 729, 33270, 1719, 300, 291, 10833, 365, 13, 51248, 51248, 1779, 13, 51260, 51260, 400, 370, 300, 311, 264, 2734, 13, 51348, 51348, 663, 311, 264, 2734, 365, 41684, 17491, 2361, 322, 264, 2158, 570, 291, 362, 572, 4319, 466, 51644, 51644, 264, 5125, 13, 51700, 51700], "temperature": 0.0, "avg_logprob": -0.21051735713564115, "compression_ratio": 1.615, "no_caption_prob": 4.609237294062041e-05}, {"id": 412, "seek": 203264, "start": 2052.32, "end": 2058.2400000000002, "text": " That's the issue with shrinking purely based on the value because you have no context about", "tokens": [50364, 286, 500, 380, 528, 309, 281, 312, 754, 11, 291, 576, 23060, 264, 18223, 2158, 11, 457, 291, 362, 572, 636, 295, 50700, 50700, 2614, 729, 15995, 322, 309, 797, 13, 50816, 50816, 407, 309, 18293, 512, 295, 729, 33270, 1719, 300, 291, 10833, 365, 13, 51248, 51248, 1779, 13, 51260, 51260, 400, 370, 300, 311, 264, 2734, 13, 51348, 51348, 663, 311, 264, 2734, 365, 41684, 17491, 2361, 322, 264, 2158, 570, 291, 362, 572, 4319, 466, 51644, 51644, 264, 5125, 13, 51700, 51700], "temperature": 0.0, "avg_logprob": -0.21051735713564115, "compression_ratio": 1.615, "no_caption_prob": 4.609237294062041e-05}, {"id": 413, "seek": 203264, "start": 2058.2400000000002, "end": 2059.36, "text": " the generation.", "tokens": [50364, 286, 500, 380, 528, 309, 281, 312, 754, 11, 291, 576, 23060, 264, 18223, 2158, 11, 457, 291, 362, 572, 636, 295, 50700, 50700, 2614, 729, 15995, 322, 309, 797, 13, 50816, 50816, 407, 309, 18293, 512, 295, 729, 33270, 1719, 300, 291, 10833, 365, 13, 51248, 51248, 1779, 13, 51260, 51260, 400, 370, 300, 311, 264, 2734, 13, 51348, 51348, 663, 311, 264, 2734, 365, 41684, 17491, 2361, 322, 264, 2158, 570, 291, 362, 572, 4319, 466, 51644, 51644, 264, 5125, 13, 51700, 51700], "temperature": 0.0, "avg_logprob": -0.21051735713564115, "compression_ratio": 1.615, "no_caption_prob": 4.609237294062041e-05}, {"id": 414, "seek": 205936, "start": 2059.36, "end": 2064.88, "text": " I've definitely run into this problem before and been confused as to why before I read", "tokens": [50364, 286, 600, 2138, 1190, 666, 341, 1154, 949, 293, 668, 9019, 382, 281, 983, 949, 286, 1401, 50640, 50640, 466, 264, 2962, 291, 645, 1364, 322, 11, 689, 11, 291, 458, 11, 286, 1936, 528, 281, 584, 11, 291, 458, 11, 50924, 50924, 382, 321, 2825, 466, 562, 291, 434, 11, 562, 291, 434, 2390, 493, 257, 283, 16740, 1500, 11, 291, 393, 380, 1520, 1970, 51148, 51148, 9859, 5176, 23930, 13, 51248, 51248, 509, 362, 281, 1520, 7221, 13, 51328, 51328, 583, 370, 2049, 291, 528, 281, 582, 2613, 760, 428, 4846, 1329, 281, 584, 11, 731, 11, 613, 7221, 820, 51644, 51644, 1797, 337, 341, 25993, 295, 15743, 13, 51772, 51772], "temperature": 0.0, "avg_logprob": -0.15573375536047895, "compression_ratio": 1.7007575757575757, "no_caption_prob": 2.5865048883133568e-05}, {"id": 415, "seek": 205936, "start": 2064.88, "end": 2070.56, "text": " about the changes you were working on, where, you know, I basically want to say, you know,", "tokens": [50364, 286, 600, 2138, 1190, 666, 341, 1154, 949, 293, 668, 9019, 382, 281, 983, 949, 286, 1401, 50640, 50640, 466, 264, 2962, 291, 645, 1364, 322, 11, 689, 11, 291, 458, 11, 286, 1936, 528, 281, 584, 11, 291, 458, 11, 50924, 50924, 382, 321, 2825, 466, 562, 291, 434, 11, 562, 291, 434, 2390, 493, 257, 283, 16740, 1500, 11, 291, 393, 380, 1520, 1970, 51148, 51148, 9859, 5176, 23930, 13, 51248, 51248, 509, 362, 281, 1520, 7221, 13, 51328, 51328, 583, 370, 2049, 291, 528, 281, 582, 2613, 760, 428, 4846, 1329, 281, 584, 11, 731, 11, 613, 7221, 820, 51644, 51644, 1797, 337, 341, 25993, 295, 15743, 13, 51772, 51772], "temperature": 0.0, "avg_logprob": -0.15573375536047895, "compression_ratio": 1.7007575757575757, "no_caption_prob": 2.5865048883133568e-05}, {"id": 416, "seek": 205936, "start": 2070.56, "end": 2075.04, "text": " as we talked about when you're, when you're building up a fuzz test, you can't check against", "tokens": [50364, 286, 600, 2138, 1190, 666, 341, 1154, 949, 293, 668, 9019, 382, 281, 983, 949, 286, 1401, 50640, 50640, 466, 264, 2962, 291, 645, 1364, 322, 11, 689, 11, 291, 458, 11, 286, 1936, 528, 281, 584, 11, 291, 458, 11, 50924, 50924, 382, 321, 2825, 466, 562, 291, 434, 11, 562, 291, 434, 2390, 493, 257, 283, 16740, 1500, 11, 291, 393, 380, 1520, 1970, 51148, 51148, 9859, 5176, 23930, 13, 51248, 51248, 509, 362, 281, 1520, 7221, 13, 51328, 51328, 583, 370, 2049, 291, 528, 281, 582, 2613, 760, 428, 4846, 1329, 281, 584, 11, 731, 11, 613, 7221, 820, 51644, 51644, 1797, 337, 341, 25993, 295, 15743, 13, 51772, 51772], "temperature": 0.0, "avg_logprob": -0.15573375536047895, "compression_ratio": 1.7007575757575757, "no_caption_prob": 2.5865048883133568e-05}, {"id": 417, "seek": 205936, "start": 2075.04, "end": 2077.04, "text": " concrete expected outputs.", "tokens": [50364, 286, 600, 2138, 1190, 666, 341, 1154, 949, 293, 668, 9019, 382, 281, 983, 949, 286, 1401, 50640, 50640, 466, 264, 2962, 291, 645, 1364, 322, 11, 689, 11, 291, 458, 11, 286, 1936, 528, 281, 584, 11, 291, 458, 11, 50924, 50924, 382, 321, 2825, 466, 562, 291, 434, 11, 562, 291, 434, 2390, 493, 257, 283, 16740, 1500, 11, 291, 393, 380, 1520, 1970, 51148, 51148, 9859, 5176, 23930, 13, 51248, 51248, 509, 362, 281, 1520, 7221, 13, 51328, 51328, 583, 370, 2049, 291, 528, 281, 582, 2613, 760, 428, 4846, 1329, 281, 584, 11, 731, 11, 613, 7221, 820, 51644, 51644, 1797, 337, 341, 25993, 295, 15743, 13, 51772, 51772], "temperature": 0.0, "avg_logprob": -0.15573375536047895, "compression_ratio": 1.7007575757575757, "no_caption_prob": 2.5865048883133568e-05}, {"id": 418, "seek": 205936, "start": 2077.04, "end": 2078.6400000000003, "text": " You have to check properties.", "tokens": [50364, 286, 600, 2138, 1190, 666, 341, 1154, 949, 293, 668, 9019, 382, 281, 983, 949, 286, 1401, 50640, 50640, 466, 264, 2962, 291, 645, 1364, 322, 11, 689, 11, 291, 458, 11, 286, 1936, 528, 281, 584, 11, 291, 458, 11, 50924, 50924, 382, 321, 2825, 466, 562, 291, 434, 11, 562, 291, 434, 2390, 493, 257, 283, 16740, 1500, 11, 291, 393, 380, 1520, 1970, 51148, 51148, 9859, 5176, 23930, 13, 51248, 51248, 509, 362, 281, 1520, 7221, 13, 51328, 51328, 583, 370, 2049, 291, 528, 281, 582, 2613, 760, 428, 4846, 1329, 281, 584, 11, 731, 11, 613, 7221, 820, 51644, 51644, 1797, 337, 341, 25993, 295, 15743, 13, 51772, 51772], "temperature": 0.0, "avg_logprob": -0.15573375536047895, "compression_ratio": 1.7007575757575757, "no_caption_prob": 2.5865048883133568e-05}, {"id": 419, "seek": 205936, "start": 2078.6400000000003, "end": 2084.96, "text": " But so often you want to prune down your input list to say, well, these properties should", "tokens": [50364, 286, 600, 2138, 1190, 666, 341, 1154, 949, 293, 668, 9019, 382, 281, 983, 949, 286, 1401, 50640, 50640, 466, 264, 2962, 291, 645, 1364, 322, 11, 689, 11, 291, 458, 11, 286, 1936, 528, 281, 584, 11, 291, 458, 11, 50924, 50924, 382, 321, 2825, 466, 562, 291, 434, 11, 562, 291, 434, 2390, 493, 257, 283, 16740, 1500, 11, 291, 393, 380, 1520, 1970, 51148, 51148, 9859, 5176, 23930, 13, 51248, 51248, 509, 362, 281, 1520, 7221, 13, 51328, 51328, 583, 370, 2049, 291, 528, 281, 582, 2613, 760, 428, 4846, 1329, 281, 584, 11, 731, 11, 613, 7221, 820, 51644, 51644, 1797, 337, 341, 25993, 295, 15743, 13, 51772, 51772], "temperature": 0.0, "avg_logprob": -0.15573375536047895, "compression_ratio": 1.7007575757575757, "no_caption_prob": 2.5865048883133568e-05}, {"id": 420, "seek": 205936, "start": 2084.96, "end": 2087.52, "text": " hold for this subset of inputs.", "tokens": [50364, 286, 600, 2138, 1190, 666, 341, 1154, 949, 293, 668, 9019, 382, 281, 983, 949, 286, 1401, 50640, 50640, 466, 264, 2962, 291, 645, 1364, 322, 11, 689, 11, 291, 458, 11, 286, 1936, 528, 281, 584, 11, 291, 458, 11, 50924, 50924, 382, 321, 2825, 466, 562, 291, 434, 11, 562, 291, 434, 2390, 493, 257, 283, 16740, 1500, 11, 291, 393, 380, 1520, 1970, 51148, 51148, 9859, 5176, 23930, 13, 51248, 51248, 509, 362, 281, 1520, 7221, 13, 51328, 51328, 583, 370, 2049, 291, 528, 281, 582, 2613, 760, 428, 4846, 1329, 281, 584, 11, 731, 11, 613, 7221, 820, 51644, 51644, 1797, 337, 341, 25993, 295, 15743, 13, 51772, 51772], "temperature": 0.0, "avg_logprob": -0.15573375536047895, "compression_ratio": 1.7007575757575757, "no_caption_prob": 2.5865048883133568e-05}, {"id": 421, "seek": 208752, "start": 2087.52, "end": 2093.04, "text": " You know, for even numbers or and so you have to get clever.", "tokens": [50364, 509, 458, 11, 337, 754, 3547, 420, 293, 370, 291, 362, 281, 483, 13494, 13, 50640, 50640, 509, 393, 380, 534, 6608, 309, 760, 13, 50764, 50764, 583, 437, 286, 9901, 307, 291, 393, 4471, 370, 291, 393, 483, 754, 3547, 538, 884, 364, 560, 283, 3334, 4527, 293, 51064, 51064, 550, 4471, 293, 550, 1413, 732, 11, 597, 1985, 588, 36634, 337, 300, 1389, 13, 51340, 51340, 583, 291, 393, 380, 534, 584, 976, 385, 4974, 4846, 293, 550, 6608, 484, 34702, 4190, 13, 51680, 51680, 865, 13, 51720, 51720], "temperature": 0.0, "avg_logprob": -0.1995260997485089, "compression_ratio": 1.6359223300970873, "no_caption_prob": 2.3186265025287867e-05}, {"id": 422, "seek": 208752, "start": 2093.04, "end": 2095.52, "text": " You can't really filter it down.", "tokens": [50364, 509, 458, 11, 337, 754, 3547, 420, 293, 370, 291, 362, 281, 483, 13494, 13, 50640, 50640, 509, 393, 380, 534, 6608, 309, 760, 13, 50764, 50764, 583, 437, 286, 9901, 307, 291, 393, 4471, 370, 291, 393, 483, 754, 3547, 538, 884, 364, 560, 283, 3334, 4527, 293, 51064, 51064, 550, 4471, 293, 550, 1413, 732, 11, 597, 1985, 588, 36634, 337, 300, 1389, 13, 51340, 51340, 583, 291, 393, 380, 534, 584, 976, 385, 4974, 4846, 293, 550, 6608, 484, 34702, 4190, 13, 51680, 51680, 865, 13, 51720, 51720], "temperature": 0.0, "avg_logprob": -0.1995260997485089, "compression_ratio": 1.6359223300970873, "no_caption_prob": 2.3186265025287867e-05}, {"id": 423, "seek": 208752, "start": 2095.52, "end": 2101.52, "text": " But what I recall is you can map so you can get even numbers by doing an int fuzzer and", "tokens": [50364, 509, 458, 11, 337, 754, 3547, 420, 293, 370, 291, 362, 281, 483, 13494, 13, 50640, 50640, 509, 393, 380, 534, 6608, 309, 760, 13, 50764, 50764, 583, 437, 286, 9901, 307, 291, 393, 4471, 370, 291, 393, 483, 754, 3547, 538, 884, 364, 560, 283, 3334, 4527, 293, 51064, 51064, 550, 4471, 293, 550, 1413, 732, 11, 597, 1985, 588, 36634, 337, 300, 1389, 13, 51340, 51340, 583, 291, 393, 380, 534, 584, 976, 385, 4974, 4846, 293, 550, 6608, 484, 34702, 4190, 13, 51680, 51680, 865, 13, 51720, 51720], "temperature": 0.0, "avg_logprob": -0.1995260997485089, "compression_ratio": 1.6359223300970873, "no_caption_prob": 2.3186265025287867e-05}, {"id": 424, "seek": 208752, "start": 2101.52, "end": 2107.04, "text": " then map and then times two, which works very neatly for that case.", "tokens": [50364, 509, 458, 11, 337, 754, 3547, 420, 293, 370, 291, 362, 281, 483, 13494, 13, 50640, 50640, 509, 393, 380, 534, 6608, 309, 760, 13, 50764, 50764, 583, 437, 286, 9901, 307, 291, 393, 4471, 370, 291, 393, 483, 754, 3547, 538, 884, 364, 560, 283, 3334, 4527, 293, 51064, 51064, 550, 4471, 293, 550, 1413, 732, 11, 597, 1985, 588, 36634, 337, 300, 1389, 13, 51340, 51340, 583, 291, 393, 380, 534, 584, 976, 385, 4974, 4846, 293, 550, 6608, 484, 34702, 4190, 13, 51680, 51680, 865, 13, 51720, 51720], "temperature": 0.0, "avg_logprob": -0.1995260997485089, "compression_ratio": 1.6359223300970873, "no_caption_prob": 2.3186265025287867e-05}, {"id": 425, "seek": 208752, "start": 2107.04, "end": 2113.84, "text": " But you can't really say give me random input and then filter out invalid values.", "tokens": [50364, 509, 458, 11, 337, 754, 3547, 420, 293, 370, 291, 362, 281, 483, 13494, 13, 50640, 50640, 509, 393, 380, 534, 6608, 309, 760, 13, 50764, 50764, 583, 437, 286, 9901, 307, 291, 393, 4471, 370, 291, 393, 483, 754, 3547, 538, 884, 364, 560, 283, 3334, 4527, 293, 51064, 51064, 550, 4471, 293, 550, 1413, 732, 11, 597, 1985, 588, 36634, 337, 300, 1389, 13, 51340, 51340, 583, 291, 393, 380, 534, 584, 976, 385, 4974, 4846, 293, 550, 6608, 484, 34702, 4190, 13, 51680, 51680, 865, 13, 51720, 51720], "temperature": 0.0, "avg_logprob": -0.1995260997485089, "compression_ratio": 1.6359223300970873, "no_caption_prob": 2.3186265025287867e-05}, {"id": 426, "seek": 208752, "start": 2113.84, "end": 2114.64, "text": " Yeah.", "tokens": [50364, 509, 458, 11, 337, 754, 3547, 420, 293, 370, 291, 362, 281, 483, 13494, 13, 50640, 50640, 509, 393, 380, 534, 6608, 309, 760, 13, 50764, 50764, 583, 437, 286, 9901, 307, 291, 393, 4471, 370, 291, 393, 483, 754, 3547, 538, 884, 364, 560, 283, 3334, 4527, 293, 51064, 51064, 550, 4471, 293, 550, 1413, 732, 11, 597, 1985, 588, 36634, 337, 300, 1389, 13, 51340, 51340, 583, 291, 393, 380, 534, 584, 976, 385, 4974, 4846, 293, 550, 6608, 484, 34702, 4190, 13, 51680, 51680, 865, 13, 51720, 51720], "temperature": 0.0, "avg_logprob": -0.1995260997485089, "compression_ratio": 1.6359223300970873, "no_caption_prob": 2.3186265025287867e-05}, {"id": 427, "seek": 211464, "start": 2114.64, "end": 2124.24, "text": " Yeah, and so there's this history of Elm test, like in way in the 018 days.", "tokens": [50364, 865, 11, 293, 370, 456, 311, 341, 2503, 295, 2699, 76, 1500, 11, 411, 294, 636, 294, 264, 1958, 6494, 1708, 13, 50844, 50844, 467, 767, 632, 411, 293, 550, 293, 257, 636, 281, 3061, 264, 1500, 293, 370, 322, 13, 51044, 51044, 583, 321, 7261, 309, 570, 309, 575, 613, 2663, 365, 41684, 13, 51272, 51272, 583, 291, 458, 11, 291, 360, 528, 281, 362, 613, 6828, 13, 51424, 51424, 4803, 436, 534, 366, 4420, 13, 51524, 51524, 400, 2171, 291, 393, 380, 534, 445, 411, 4471, 23211, 24922, 281, 312, 754, 13, 51804, 51804], "temperature": 0.0, "avg_logprob": -0.2683760389989736, "compression_ratio": 1.6008771929824561, "no_caption_prob": 1.1658447874651756e-05}, {"id": 428, "seek": 211464, "start": 2124.24, "end": 2128.24, "text": " It actually had like and then and a way to fail the test and so on.", "tokens": [50364, 865, 11, 293, 370, 456, 311, 341, 2503, 295, 2699, 76, 1500, 11, 411, 294, 636, 294, 264, 1958, 6494, 1708, 13, 50844, 50844, 467, 767, 632, 411, 293, 550, 293, 257, 636, 281, 3061, 264, 1500, 293, 370, 322, 13, 51044, 51044, 583, 321, 7261, 309, 570, 309, 575, 613, 2663, 365, 41684, 13, 51272, 51272, 583, 291, 458, 11, 291, 360, 528, 281, 362, 613, 6828, 13, 51424, 51424, 4803, 436, 534, 366, 4420, 13, 51524, 51524, 400, 2171, 291, 393, 380, 534, 445, 411, 4471, 23211, 24922, 281, 312, 754, 13, 51804, 51804], "temperature": 0.0, "avg_logprob": -0.2683760389989736, "compression_ratio": 1.6008771929824561, "no_caption_prob": 1.1658447874651756e-05}, {"id": 429, "seek": 211464, "start": 2128.24, "end": 2132.7999999999997, "text": " But we removed it because it has these issues with shrinking.", "tokens": [50364, 865, 11, 293, 370, 456, 311, 341, 2503, 295, 2699, 76, 1500, 11, 411, 294, 636, 294, 264, 1958, 6494, 1708, 13, 50844, 50844, 467, 767, 632, 411, 293, 550, 293, 257, 636, 281, 3061, 264, 1500, 293, 370, 322, 13, 51044, 51044, 583, 321, 7261, 309, 570, 309, 575, 613, 2663, 365, 41684, 13, 51272, 51272, 583, 291, 458, 11, 291, 360, 528, 281, 362, 613, 6828, 13, 51424, 51424, 4803, 436, 534, 366, 4420, 13, 51524, 51524, 400, 2171, 291, 393, 380, 534, 445, 411, 4471, 23211, 24922, 281, 312, 754, 13, 51804, 51804], "temperature": 0.0, "avg_logprob": -0.2683760389989736, "compression_ratio": 1.6008771929824561, "no_caption_prob": 1.1658447874651756e-05}, {"id": 430, "seek": 211464, "start": 2132.7999999999997, "end": 2135.8399999999997, "text": " But you know, you do want to have these functions.", "tokens": [50364, 865, 11, 293, 370, 456, 311, 341, 2503, 295, 2699, 76, 1500, 11, 411, 294, 636, 294, 264, 1958, 6494, 1708, 13, 50844, 50844, 467, 767, 632, 411, 293, 550, 293, 257, 636, 281, 3061, 264, 1500, 293, 370, 322, 13, 51044, 51044, 583, 321, 7261, 309, 570, 309, 575, 613, 2663, 365, 41684, 13, 51272, 51272, 583, 291, 458, 11, 291, 360, 528, 281, 362, 613, 6828, 13, 51424, 51424, 4803, 436, 534, 366, 4420, 13, 51524, 51524, 400, 2171, 291, 393, 380, 534, 445, 411, 4471, 23211, 24922, 281, 312, 754, 13, 51804, 51804], "temperature": 0.0, "avg_logprob": -0.2683760389989736, "compression_ratio": 1.6008771929824561, "no_caption_prob": 1.1658447874651756e-05}, {"id": 431, "seek": 211464, "start": 2135.8399999999997, "end": 2137.8399999999997, "text": " Sometimes they really are useful.", "tokens": [50364, 865, 11, 293, 370, 456, 311, 341, 2503, 295, 2699, 76, 1500, 11, 411, 294, 636, 294, 264, 1958, 6494, 1708, 13, 50844, 50844, 467, 767, 632, 411, 293, 550, 293, 257, 636, 281, 3061, 264, 1500, 293, 370, 322, 13, 51044, 51044, 583, 321, 7261, 309, 570, 309, 575, 613, 2663, 365, 41684, 13, 51272, 51272, 583, 291, 458, 11, 291, 360, 528, 281, 362, 613, 6828, 13, 51424, 51424, 4803, 436, 534, 366, 4420, 13, 51524, 51524, 400, 2171, 291, 393, 380, 534, 445, 411, 4471, 23211, 24922, 281, 312, 754, 13, 51804, 51804], "temperature": 0.0, "avg_logprob": -0.2683760389989736, "compression_ratio": 1.6008771929824561, "no_caption_prob": 1.1658447874651756e-05}, {"id": 432, "seek": 211464, "start": 2137.8399999999997, "end": 2143.44, "text": " And sometimes you can't really just like map arbitrary integer to be even.", "tokens": [50364, 865, 11, 293, 370, 456, 311, 341, 2503, 295, 2699, 76, 1500, 11, 411, 294, 636, 294, 264, 1958, 6494, 1708, 13, 50844, 50844, 467, 767, 632, 411, 293, 550, 293, 257, 636, 281, 3061, 264, 1500, 293, 370, 322, 13, 51044, 51044, 583, 321, 7261, 309, 570, 309, 575, 613, 2663, 365, 41684, 13, 51272, 51272, 583, 291, 458, 11, 291, 360, 528, 281, 362, 613, 6828, 13, 51424, 51424, 4803, 436, 534, 366, 4420, 13, 51524, 51524, 400, 2171, 291, 393, 380, 534, 445, 411, 4471, 23211, 24922, 281, 312, 754, 13, 51804, 51804], "temperature": 0.0, "avg_logprob": -0.2683760389989736, "compression_ratio": 1.6008771929824561, "no_caption_prob": 1.1658447874651756e-05}, {"id": 433, "seek": 214344, "start": 2143.44, "end": 2148.2400000000002, "text": " That's, you know, that's that's a motivating example of why you don't want to use filter", "tokens": [50364, 663, 311, 11, 291, 458, 11, 300, 311, 300, 311, 257, 41066, 1365, 295, 983, 291, 500, 380, 528, 281, 764, 6608, 50604, 50604, 293, 983, 291, 528, 281, 411, 7690, 558, 4190, 2831, 813, 3507, 552, 484, 13, 50864, 50864, 583, 2171, 309, 311, 534, 309, 576, 312, 534, 1481, 281, 362, 264, 293, 550, 2445, 293, 281, 51184, 51184, 362, 264, 6608, 2445, 13, 51264, 51264, 400, 264, 661, 3109, 11, 597, 286, 478, 1382, 281, 483, 281, 264, 636, 309, 486, 589, 294, 2699, 76, 1500, 430, 17, 13, 51744, 51744], "temperature": 0.0, "avg_logprob": -0.2290745178858439, "compression_ratio": 1.6222222222222222, "no_caption_prob": 2.8837515856139362e-05}, {"id": 434, "seek": 214344, "start": 2148.2400000000002, "end": 2153.44, "text": " and why you want to like construct right values rather than throw them out.", "tokens": [50364, 663, 311, 11, 291, 458, 11, 300, 311, 300, 311, 257, 41066, 1365, 295, 983, 291, 500, 380, 528, 281, 764, 6608, 50604, 50604, 293, 983, 291, 528, 281, 411, 7690, 558, 4190, 2831, 813, 3507, 552, 484, 13, 50864, 50864, 583, 2171, 309, 311, 534, 309, 576, 312, 534, 1481, 281, 362, 264, 293, 550, 2445, 293, 281, 51184, 51184, 362, 264, 6608, 2445, 13, 51264, 51264, 400, 264, 661, 3109, 11, 597, 286, 478, 1382, 281, 483, 281, 264, 636, 309, 486, 589, 294, 2699, 76, 1500, 430, 17, 13, 51744, 51744], "temperature": 0.0, "avg_logprob": -0.2290745178858439, "compression_ratio": 1.6222222222222222, "no_caption_prob": 2.8837515856139362e-05}, {"id": 435, "seek": 214344, "start": 2153.44, "end": 2159.84, "text": " But sometimes it's really it would be really nice to have the and then function and to", "tokens": [50364, 663, 311, 11, 291, 458, 11, 300, 311, 300, 311, 257, 41066, 1365, 295, 983, 291, 500, 380, 528, 281, 764, 6608, 50604, 50604, 293, 983, 291, 528, 281, 411, 7690, 558, 4190, 2831, 813, 3507, 552, 484, 13, 50864, 50864, 583, 2171, 309, 311, 534, 309, 576, 312, 534, 1481, 281, 362, 264, 293, 550, 2445, 293, 281, 51184, 51184, 362, 264, 6608, 2445, 13, 51264, 51264, 400, 264, 661, 3109, 11, 597, 286, 478, 1382, 281, 483, 281, 264, 636, 309, 486, 589, 294, 2699, 76, 1500, 430, 17, 13, 51744, 51744], "temperature": 0.0, "avg_logprob": -0.2290745178858439, "compression_ratio": 1.6222222222222222, "no_caption_prob": 2.8837515856139362e-05}, {"id": 436, "seek": 214344, "start": 2159.84, "end": 2161.44, "text": " have the filter function.", "tokens": [50364, 663, 311, 11, 291, 458, 11, 300, 311, 300, 311, 257, 41066, 1365, 295, 983, 291, 500, 380, 528, 281, 764, 6608, 50604, 50604, 293, 983, 291, 528, 281, 411, 7690, 558, 4190, 2831, 813, 3507, 552, 484, 13, 50864, 50864, 583, 2171, 309, 311, 534, 309, 576, 312, 534, 1481, 281, 362, 264, 293, 550, 2445, 293, 281, 51184, 51184, 362, 264, 6608, 2445, 13, 51264, 51264, 400, 264, 661, 3109, 11, 597, 286, 478, 1382, 281, 483, 281, 264, 636, 309, 486, 589, 294, 2699, 76, 1500, 430, 17, 13, 51744, 51744], "temperature": 0.0, "avg_logprob": -0.2290745178858439, "compression_ratio": 1.6222222222222222, "no_caption_prob": 2.8837515856139362e-05}, {"id": 437, "seek": 214344, "start": 2161.44, "end": 2171.04, "text": " And the other approach, which I'm trying to get to the way it will work in Elm test P2.", "tokens": [50364, 663, 311, 11, 291, 458, 11, 300, 311, 300, 311, 257, 41066, 1365, 295, 983, 291, 500, 380, 528, 281, 764, 6608, 50604, 50604, 293, 983, 291, 528, 281, 411, 7690, 558, 4190, 2831, 813, 3507, 552, 484, 13, 50864, 50864, 583, 2171, 309, 311, 534, 309, 576, 312, 534, 1481, 281, 362, 264, 293, 550, 2445, 293, 281, 51184, 51184, 362, 264, 6608, 2445, 13, 51264, 51264, 400, 264, 661, 3109, 11, 597, 286, 478, 1382, 281, 483, 281, 264, 636, 309, 486, 589, 294, 2699, 76, 1500, 430, 17, 13, 51744, 51744], "temperature": 0.0, "avg_logprob": -0.2290745178858439, "compression_ratio": 1.6222222222222222, "no_caption_prob": 2.8837515856139362e-05}, {"id": 438, "seek": 217104, "start": 2171.04, "end": 2177.44, "text": " Doesn't have those issues because we are shrinking something else than the value itself.", "tokens": [50364, 12955, 380, 362, 729, 2663, 570, 321, 366, 41684, 746, 1646, 813, 264, 2158, 2564, 13, 50684, 50684, 492, 366, 41684, 264, 11568, 30237, 2503, 13, 50844, 50844, 407, 11568, 30237, 307, 264, 4974, 1230, 5125, 9284, 13, 51084, 51084, 400, 370, 321, 366, 307, 264, 430, 35899, 35899, 35899, 4974, 13, 51304, 51304, 865, 11, 2293, 13, 51364, 51364, 1779, 13, 51404, 51404, 407, 294, 691, 17, 2699, 76, 1500, 486, 1604, 264, 4319, 295, 264, 5125, 13, 51744, 51744], "temperature": 0.0, "avg_logprob": -0.1890533401305417, "compression_ratio": 1.5707070707070707, "no_caption_prob": 1.4964565707487054e-05}, {"id": 439, "seek": 217104, "start": 2177.44, "end": 2180.64, "text": " We are shrinking the PRNG history.", "tokens": [50364, 12955, 380, 362, 729, 2663, 570, 321, 366, 41684, 746, 1646, 813, 264, 2158, 2564, 13, 50684, 50684, 492, 366, 41684, 264, 11568, 30237, 2503, 13, 50844, 50844, 407, 11568, 30237, 307, 264, 4974, 1230, 5125, 9284, 13, 51084, 51084, 400, 370, 321, 366, 307, 264, 430, 35899, 35899, 35899, 4974, 13, 51304, 51304, 865, 11, 2293, 13, 51364, 51364, 1779, 13, 51404, 51404, 407, 294, 691, 17, 2699, 76, 1500, 486, 1604, 264, 4319, 295, 264, 5125, 13, 51744, 51744], "temperature": 0.0, "avg_logprob": -0.1890533401305417, "compression_ratio": 1.5707070707070707, "no_caption_prob": 1.4964565707487054e-05}, {"id": 440, "seek": 217104, "start": 2180.64, "end": 2185.44, "text": " So PRNG is the random number generation algorithm.", "tokens": [50364, 12955, 380, 362, 729, 2663, 570, 321, 366, 41684, 746, 1646, 813, 264, 2158, 2564, 13, 50684, 50684, 492, 366, 41684, 264, 11568, 30237, 2503, 13, 50844, 50844, 407, 11568, 30237, 307, 264, 4974, 1230, 5125, 9284, 13, 51084, 51084, 400, 370, 321, 366, 307, 264, 430, 35899, 35899, 35899, 4974, 13, 51304, 51304, 865, 11, 2293, 13, 51364, 51364, 1779, 13, 51404, 51404, 407, 294, 691, 17, 2699, 76, 1500, 486, 1604, 264, 4319, 295, 264, 5125, 13, 51744, 51744], "temperature": 0.0, "avg_logprob": -0.1890533401305417, "compression_ratio": 1.5707070707070707, "no_caption_prob": 1.4964565707487054e-05}, {"id": 441, "seek": 217104, "start": 2185.44, "end": 2189.84, "text": " And so we are is the P pseudo pseudo pseudo random.", "tokens": [50364, 12955, 380, 362, 729, 2663, 570, 321, 366, 41684, 746, 1646, 813, 264, 2158, 2564, 13, 50684, 50684, 492, 366, 41684, 264, 11568, 30237, 2503, 13, 50844, 50844, 407, 11568, 30237, 307, 264, 4974, 1230, 5125, 9284, 13, 51084, 51084, 400, 370, 321, 366, 307, 264, 430, 35899, 35899, 35899, 4974, 13, 51304, 51304, 865, 11, 2293, 13, 51364, 51364, 1779, 13, 51404, 51404, 407, 294, 691, 17, 2699, 76, 1500, 486, 1604, 264, 4319, 295, 264, 5125, 13, 51744, 51744], "temperature": 0.0, "avg_logprob": -0.1890533401305417, "compression_ratio": 1.5707070707070707, "no_caption_prob": 1.4964565707487054e-05}, {"id": 442, "seek": 217104, "start": 2189.84, "end": 2191.04, "text": " Yeah, exactly.", "tokens": [50364, 12955, 380, 362, 729, 2663, 570, 321, 366, 41684, 746, 1646, 813, 264, 2158, 2564, 13, 50684, 50684, 492, 366, 41684, 264, 11568, 30237, 2503, 13, 50844, 50844, 407, 11568, 30237, 307, 264, 4974, 1230, 5125, 9284, 13, 51084, 51084, 400, 370, 321, 366, 307, 264, 430, 35899, 35899, 35899, 4974, 13, 51304, 51304, 865, 11, 2293, 13, 51364, 51364, 1779, 13, 51404, 51404, 407, 294, 691, 17, 2699, 76, 1500, 486, 1604, 264, 4319, 295, 264, 5125, 13, 51744, 51744], "temperature": 0.0, "avg_logprob": -0.1890533401305417, "compression_ratio": 1.5707070707070707, "no_caption_prob": 1.4964565707487054e-05}, {"id": 443, "seek": 217104, "start": 2191.04, "end": 2191.84, "text": " Right.", "tokens": [50364, 12955, 380, 362, 729, 2663, 570, 321, 366, 41684, 746, 1646, 813, 264, 2158, 2564, 13, 50684, 50684, 492, 366, 41684, 264, 11568, 30237, 2503, 13, 50844, 50844, 407, 11568, 30237, 307, 264, 4974, 1230, 5125, 9284, 13, 51084, 51084, 400, 370, 321, 366, 307, 264, 430, 35899, 35899, 35899, 4974, 13, 51304, 51304, 865, 11, 2293, 13, 51364, 51364, 1779, 13, 51404, 51404, 407, 294, 691, 17, 2699, 76, 1500, 486, 1604, 264, 4319, 295, 264, 5125, 13, 51744, 51744], "temperature": 0.0, "avg_logprob": -0.1890533401305417, "compression_ratio": 1.5707070707070707, "no_caption_prob": 1.4964565707487054e-05}, {"id": 444, "seek": 217104, "start": 2191.84, "end": 2198.64, "text": " So in V2 Elm test will remember the context of the generation.", "tokens": [50364, 12955, 380, 362, 729, 2663, 570, 321, 366, 41684, 746, 1646, 813, 264, 2158, 2564, 13, 50684, 50684, 492, 366, 41684, 264, 11568, 30237, 2503, 13, 50844, 50844, 407, 11568, 30237, 307, 264, 4974, 1230, 5125, 9284, 13, 51084, 51084, 400, 370, 321, 366, 307, 264, 430, 35899, 35899, 35899, 4974, 13, 51304, 51304, 865, 11, 2293, 13, 51364, 51364, 1779, 13, 51404, 51404, 407, 294, 691, 17, 2699, 76, 1500, 486, 1604, 264, 4319, 295, 264, 5125, 13, 51744, 51744], "temperature": 0.0, "avg_logprob": -0.1890533401305417, "compression_ratio": 1.5707070707070707, "no_caption_prob": 1.4964565707487054e-05}, {"id": 445, "seek": 219864, "start": 2198.64, "end": 2205.44, "text": " And it will try to shrink that context that let's say list of dice rolls.", "tokens": [50364, 400, 309, 486, 853, 281, 23060, 300, 4319, 300, 718, 311, 584, 1329, 295, 10313, 15767, 13, 50704, 50704, 407, 11, 291, 458, 11, 264, 11568, 30237, 10313, 2729, 291, 1732, 11, 2729, 291, 1045, 11, 2729, 291, 732, 13, 51044, 51044, 400, 490, 300, 11, 291, 6063, 10833, 257, 2158, 13, 51164, 51164, 1779, 13, 51184, 51184, 663, 311, 264, 300, 311, 264, 3090, 295, 264, 283, 3334, 4527, 6405, 281, 733, 295, 4088, 729, 41674, 281, 428, 51564, 51564, 4190, 11, 2375, 3467, 11, 2035, 13, 51644, 51644, 1779, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.1395823856194814, "compression_ratio": 1.5990338164251208, "no_caption_prob": 1.0450774425407872e-05}, {"id": 446, "seek": 219864, "start": 2205.44, "end": 2212.24, "text": " So, you know, the PRNG dice gave you five, gave you three, gave you two.", "tokens": [50364, 400, 309, 486, 853, 281, 23060, 300, 4319, 300, 718, 311, 584, 1329, 295, 10313, 15767, 13, 50704, 50704, 407, 11, 291, 458, 11, 264, 11568, 30237, 10313, 2729, 291, 1732, 11, 2729, 291, 1045, 11, 2729, 291, 732, 13, 51044, 51044, 400, 490, 300, 11, 291, 6063, 10833, 257, 2158, 13, 51164, 51164, 1779, 13, 51184, 51184, 663, 311, 264, 300, 311, 264, 3090, 295, 264, 283, 3334, 4527, 6405, 281, 733, 295, 4088, 729, 41674, 281, 428, 51564, 51564, 4190, 11, 2375, 3467, 11, 2035, 13, 51644, 51644, 1779, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.1395823856194814, "compression_ratio": 1.5990338164251208, "no_caption_prob": 1.0450774425407872e-05}, {"id": 447, "seek": 219864, "start": 2212.24, "end": 2214.64, "text": " And from that, you somehow generated a value.", "tokens": [50364, 400, 309, 486, 853, 281, 23060, 300, 4319, 300, 718, 311, 584, 1329, 295, 10313, 15767, 13, 50704, 50704, 407, 11, 291, 458, 11, 264, 11568, 30237, 10313, 2729, 291, 1732, 11, 2729, 291, 1045, 11, 2729, 291, 732, 13, 51044, 51044, 400, 490, 300, 11, 291, 6063, 10833, 257, 2158, 13, 51164, 51164, 1779, 13, 51184, 51184, 663, 311, 264, 300, 311, 264, 3090, 295, 264, 283, 3334, 4527, 6405, 281, 733, 295, 4088, 729, 41674, 281, 428, 51564, 51564, 4190, 11, 2375, 3467, 11, 2035, 13, 51644, 51644, 1779, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.1395823856194814, "compression_ratio": 1.5990338164251208, "no_caption_prob": 1.0450774425407872e-05}, {"id": 448, "seek": 219864, "start": 2214.64, "end": 2215.04, "text": " Right.", "tokens": [50364, 400, 309, 486, 853, 281, 23060, 300, 4319, 300, 718, 311, 584, 1329, 295, 10313, 15767, 13, 50704, 50704, 407, 11, 291, 458, 11, 264, 11568, 30237, 10313, 2729, 291, 1732, 11, 2729, 291, 1045, 11, 2729, 291, 732, 13, 51044, 51044, 400, 490, 300, 11, 291, 6063, 10833, 257, 2158, 13, 51164, 51164, 1779, 13, 51184, 51184, 663, 311, 264, 300, 311, 264, 3090, 295, 264, 283, 3334, 4527, 6405, 281, 733, 295, 4088, 729, 41674, 281, 428, 51564, 51564, 4190, 11, 2375, 3467, 11, 2035, 13, 51644, 51644, 1779, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.1395823856194814, "compression_ratio": 1.5990338164251208, "no_caption_prob": 1.0450774425407872e-05}, {"id": 449, "seek": 219864, "start": 2215.04, "end": 2222.64, "text": " That's the that's the role of the fuzzer library to kind of transform those integers to your", "tokens": [50364, 400, 309, 486, 853, 281, 23060, 300, 4319, 300, 718, 311, 584, 1329, 295, 10313, 15767, 13, 50704, 50704, 407, 11, 291, 458, 11, 264, 11568, 30237, 10313, 2729, 291, 1732, 11, 2729, 291, 1045, 11, 2729, 291, 732, 13, 51044, 51044, 400, 490, 300, 11, 291, 6063, 10833, 257, 2158, 13, 51164, 51164, 1779, 13, 51184, 51184, 663, 311, 264, 300, 311, 264, 3090, 295, 264, 283, 3334, 4527, 6405, 281, 733, 295, 4088, 729, 41674, 281, 428, 51564, 51564, 4190, 11, 2375, 3467, 11, 2035, 13, 51644, 51644, 1779, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.1395823856194814, "compression_ratio": 1.5990338164251208, "no_caption_prob": 1.0450774425407872e-05}, {"id": 450, "seek": 219864, "start": 2222.64, "end": 2224.24, "text": " values, custom types, whatever.", "tokens": [50364, 400, 309, 486, 853, 281, 23060, 300, 4319, 300, 718, 311, 584, 1329, 295, 10313, 15767, 13, 50704, 50704, 407, 11, 291, 458, 11, 264, 11568, 30237, 10313, 2729, 291, 1732, 11, 2729, 291, 1045, 11, 2729, 291, 732, 13, 51044, 51044, 400, 490, 300, 11, 291, 6063, 10833, 257, 2158, 13, 51164, 51164, 1779, 13, 51184, 51184, 663, 311, 264, 300, 311, 264, 3090, 295, 264, 283, 3334, 4527, 6405, 281, 733, 295, 4088, 729, 41674, 281, 428, 51564, 51564, 4190, 11, 2375, 3467, 11, 2035, 13, 51644, 51644, 1779, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.1395823856194814, "compression_ratio": 1.5990338164251208, "no_caption_prob": 1.0450774425407872e-05}, {"id": 451, "seek": 219864, "start": 2224.24, "end": 2224.64, "text": " Right.", "tokens": [50364, 400, 309, 486, 853, 281, 23060, 300, 4319, 300, 718, 311, 584, 1329, 295, 10313, 15767, 13, 50704, 50704, 407, 11, 291, 458, 11, 264, 11568, 30237, 10313, 2729, 291, 1732, 11, 2729, 291, 1045, 11, 2729, 291, 732, 13, 51044, 51044, 400, 490, 300, 11, 291, 6063, 10833, 257, 2158, 13, 51164, 51164, 1779, 13, 51184, 51184, 663, 311, 264, 300, 311, 264, 3090, 295, 264, 283, 3334, 4527, 6405, 281, 733, 295, 4088, 729, 41674, 281, 428, 51564, 51564, 4190, 11, 2375, 3467, 11, 2035, 13, 51644, 51644, 1779, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.1395823856194814, "compression_ratio": 1.5990338164251208, "no_caption_prob": 1.0450774425407872e-05}, {"id": 452, "seek": 222464, "start": 2224.64, "end": 2229.44, "text": " So you're and you're talking about the dice rolled being the seeds that we started with", "tokens": [50364, 407, 291, 434, 293, 291, 434, 1417, 466, 264, 10313, 14306, 885, 264, 9203, 300, 321, 1409, 365, 50604, 50604, 281, 8460, 527, 4846, 4190, 13, 50724, 50724, 865, 11, 1310, 1310, 406, 2293, 9203, 570, 8871, 775, 362, 411, 257, 3620, 337, 264, 4974, 51104, 51104, 1230, 5125, 13, 51144, 51144, 583, 264, 4190, 300, 264, 11568, 30237, 9284, 7126, 11, 321, 360, 1604, 729, 13, 51484, 51484, 492, 458, 300, 498, 321, 8460, 257, 2158, 490, 729, 11, 321, 486, 483, 300, 18223, 2158, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.1321848355806791, "compression_ratio": 1.6347826086956523, "no_caption_prob": 5.648345540976152e-05}, {"id": 453, "seek": 222464, "start": 2229.44, "end": 2231.8399999999997, "text": " to generate our input values.", "tokens": [50364, 407, 291, 434, 293, 291, 434, 1417, 466, 264, 10313, 14306, 885, 264, 9203, 300, 321, 1409, 365, 50604, 50604, 281, 8460, 527, 4846, 4190, 13, 50724, 50724, 865, 11, 1310, 1310, 406, 2293, 9203, 570, 8871, 775, 362, 411, 257, 3620, 337, 264, 4974, 51104, 51104, 1230, 5125, 13, 51144, 51144, 583, 264, 4190, 300, 264, 11568, 30237, 9284, 7126, 11, 321, 360, 1604, 729, 13, 51484, 51484, 492, 458, 300, 498, 321, 8460, 257, 2158, 490, 729, 11, 321, 486, 483, 300, 18223, 2158, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.1321848355806791, "compression_ratio": 1.6347826086956523, "no_caption_prob": 5.648345540976152e-05}, {"id": 454, "seek": 222464, "start": 2231.8399999999997, "end": 2239.44, "text": " Yeah, maybe maybe not exactly seeds because seed does have like a meaning for the random", "tokens": [50364, 407, 291, 434, 293, 291, 434, 1417, 466, 264, 10313, 14306, 885, 264, 9203, 300, 321, 1409, 365, 50604, 50604, 281, 8460, 527, 4846, 4190, 13, 50724, 50724, 865, 11, 1310, 1310, 406, 2293, 9203, 570, 8871, 775, 362, 411, 257, 3620, 337, 264, 4974, 51104, 51104, 1230, 5125, 13, 51144, 51144, 583, 264, 4190, 300, 264, 11568, 30237, 9284, 7126, 11, 321, 360, 1604, 729, 13, 51484, 51484, 492, 458, 300, 498, 321, 8460, 257, 2158, 490, 729, 11, 321, 486, 483, 300, 18223, 2158, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.1321848355806791, "compression_ratio": 1.6347826086956523, "no_caption_prob": 5.648345540976152e-05}, {"id": 455, "seek": 222464, "start": 2239.44, "end": 2240.24, "text": " number generation.", "tokens": [50364, 407, 291, 434, 293, 291, 434, 1417, 466, 264, 10313, 14306, 885, 264, 9203, 300, 321, 1409, 365, 50604, 50604, 281, 8460, 527, 4846, 4190, 13, 50724, 50724, 865, 11, 1310, 1310, 406, 2293, 9203, 570, 8871, 775, 362, 411, 257, 3620, 337, 264, 4974, 51104, 51104, 1230, 5125, 13, 51144, 51144, 583, 264, 4190, 300, 264, 11568, 30237, 9284, 7126, 11, 321, 360, 1604, 729, 13, 51484, 51484, 492, 458, 300, 498, 321, 8460, 257, 2158, 490, 729, 11, 321, 486, 483, 300, 18223, 2158, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.1321848355806791, "compression_ratio": 1.6347826086956523, "no_caption_prob": 5.648345540976152e-05}, {"id": 456, "seek": 222464, "start": 2240.24, "end": 2247.04, "text": " But the values that the PRNG algorithm produced, we do remember those.", "tokens": [50364, 407, 291, 434, 293, 291, 434, 1417, 466, 264, 10313, 14306, 885, 264, 9203, 300, 321, 1409, 365, 50604, 50604, 281, 8460, 527, 4846, 4190, 13, 50724, 50724, 865, 11, 1310, 1310, 406, 2293, 9203, 570, 8871, 775, 362, 411, 257, 3620, 337, 264, 4974, 51104, 51104, 1230, 5125, 13, 51144, 51144, 583, 264, 4190, 300, 264, 11568, 30237, 9284, 7126, 11, 321, 360, 1604, 729, 13, 51484, 51484, 492, 458, 300, 498, 321, 8460, 257, 2158, 490, 729, 11, 321, 486, 483, 300, 18223, 2158, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.1321848355806791, "compression_ratio": 1.6347826086956523, "no_caption_prob": 5.648345540976152e-05}, {"id": 457, "seek": 222464, "start": 2247.04, "end": 2252.64, "text": " We know that if we generate a value from those, we will get that failing value.", "tokens": [50364, 407, 291, 434, 293, 291, 434, 1417, 466, 264, 10313, 14306, 885, 264, 9203, 300, 321, 1409, 365, 50604, 50604, 281, 8460, 527, 4846, 4190, 13, 50724, 50724, 865, 11, 1310, 1310, 406, 2293, 9203, 570, 8871, 775, 362, 411, 257, 3620, 337, 264, 4974, 51104, 51104, 1230, 5125, 13, 51144, 51144, 583, 264, 4190, 300, 264, 11568, 30237, 9284, 7126, 11, 321, 360, 1604, 729, 13, 51484, 51484, 492, 458, 300, 498, 321, 8460, 257, 2158, 490, 729, 11, 321, 486, 483, 300, 18223, 2158, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.1321848355806791, "compression_ratio": 1.6347826086956523, "no_caption_prob": 5.648345540976152e-05}, {"id": 458, "seek": 225264, "start": 2252.64, "end": 2262.24, "text": " And now, instead of having a shrink function for the resulting value, we are shrinking", "tokens": [50364, 400, 586, 11, 2602, 295, 1419, 257, 23060, 2445, 337, 264, 16505, 2158, 11, 321, 366, 41684, 50844, 50844, 264, 11568, 30237, 2503, 13, 50924, 50924, 400, 5800, 11, 5800, 11, 406, 787, 291, 382, 264, 4195, 360, 406, 362, 281, 1127, 466, 23060, 433, 412, 51324, 51324, 439, 570, 570, 8046, 291, 2171, 2978, 281, 2464, 428, 1065, 23060, 433, 13, 51624, 51624, 865, 13, 51664, 51664, 865, 13, 51704, 51704], "temperature": 0.0, "avg_logprob": -0.17785475705121015, "compression_ratio": 1.5921787709497206, "no_caption_prob": 8.128531590045895e-06}, {"id": 459, "seek": 225264, "start": 2262.24, "end": 2263.8399999999997, "text": " the PRNG history.", "tokens": [50364, 400, 586, 11, 2602, 295, 1419, 257, 23060, 2445, 337, 264, 16505, 2158, 11, 321, 366, 41684, 50844, 50844, 264, 11568, 30237, 2503, 13, 50924, 50924, 400, 5800, 11, 5800, 11, 406, 787, 291, 382, 264, 4195, 360, 406, 362, 281, 1127, 466, 23060, 433, 412, 51324, 51324, 439, 570, 570, 8046, 291, 2171, 2978, 281, 2464, 428, 1065, 23060, 433, 13, 51624, 51624, 865, 13, 51664, 51664, 865, 13, 51704, 51704], "temperature": 0.0, "avg_logprob": -0.17785475705121015, "compression_ratio": 1.5921787709497206, "no_caption_prob": 8.128531590045895e-06}, {"id": 460, "seek": 225264, "start": 2263.8399999999997, "end": 2271.8399999999997, "text": " And suddenly, suddenly, not only you as the user do not have to care about shrinkers at", "tokens": [50364, 400, 586, 11, 2602, 295, 1419, 257, 23060, 2445, 337, 264, 16505, 2158, 11, 321, 366, 41684, 50844, 50844, 264, 11568, 30237, 2503, 13, 50924, 50924, 400, 5800, 11, 5800, 11, 406, 787, 291, 382, 264, 4195, 360, 406, 362, 281, 1127, 466, 23060, 433, 412, 51324, 51324, 439, 570, 570, 8046, 291, 2171, 2978, 281, 2464, 428, 1065, 23060, 433, 13, 51624, 51624, 865, 13, 51664, 51664, 865, 13, 51704, 51704], "temperature": 0.0, "avg_logprob": -0.17785475705121015, "compression_ratio": 1.5921787709497206, "no_caption_prob": 8.128531590045895e-06}, {"id": 461, "seek": 225264, "start": 2271.8399999999997, "end": 2277.8399999999997, "text": " all because because previously you sometimes needed to write your own shrinkers.", "tokens": [50364, 400, 586, 11, 2602, 295, 1419, 257, 23060, 2445, 337, 264, 16505, 2158, 11, 321, 366, 41684, 50844, 50844, 264, 11568, 30237, 2503, 13, 50924, 50924, 400, 5800, 11, 5800, 11, 406, 787, 291, 382, 264, 4195, 360, 406, 362, 281, 1127, 466, 23060, 433, 412, 51324, 51324, 439, 570, 570, 8046, 291, 2171, 2978, 281, 2464, 428, 1065, 23060, 433, 13, 51624, 51624, 865, 13, 51664, 51664, 865, 13, 51704, 51704], "temperature": 0.0, "avg_logprob": -0.17785475705121015, "compression_ratio": 1.5921787709497206, "no_caption_prob": 8.128531590045895e-06}, {"id": 462, "seek": 225264, "start": 2277.8399999999997, "end": 2278.64, "text": " Yeah.", "tokens": [50364, 400, 586, 11, 2602, 295, 1419, 257, 23060, 2445, 337, 264, 16505, 2158, 11, 321, 366, 41684, 50844, 50844, 264, 11568, 30237, 2503, 13, 50924, 50924, 400, 5800, 11, 5800, 11, 406, 787, 291, 382, 264, 4195, 360, 406, 362, 281, 1127, 466, 23060, 433, 412, 51324, 51324, 439, 570, 570, 8046, 291, 2171, 2978, 281, 2464, 428, 1065, 23060, 433, 13, 51624, 51624, 865, 13, 51664, 51664, 865, 13, 51704, 51704], "temperature": 0.0, "avg_logprob": -0.17785475705121015, "compression_ratio": 1.5921787709497206, "no_caption_prob": 8.128531590045895e-06}, {"id": 463, "seek": 225264, "start": 2278.64, "end": 2279.44, "text": " Yeah.", "tokens": [50364, 400, 586, 11, 2602, 295, 1419, 257, 23060, 2445, 337, 264, 16505, 2158, 11, 321, 366, 41684, 50844, 50844, 264, 11568, 30237, 2503, 13, 50924, 50924, 400, 5800, 11, 5800, 11, 406, 787, 291, 382, 264, 4195, 360, 406, 362, 281, 1127, 466, 23060, 433, 412, 51324, 51324, 439, 570, 570, 8046, 291, 2171, 2978, 281, 2464, 428, 1065, 23060, 433, 13, 51624, 51624, 865, 13, 51664, 51664, 865, 13, 51704, 51704], "temperature": 0.0, "avg_logprob": -0.17785475705121015, "compression_ratio": 1.5921787709497206, "no_caption_prob": 8.128531590045895e-06}, {"id": 464, "seek": 227944, "start": 2279.44, "end": 2285.84, "text": " OK, and so you as the user do not need to use shrinkers anymore.", "tokens": [50364, 2264, 11, 293, 370, 291, 382, 264, 4195, 360, 406, 643, 281, 764, 23060, 433, 3602, 13, 50684, 50684, 1981, 366, 6920, 281, 6405, 293, 264, 6405, 575, 867, 2098, 281, 853, 293, 23060, 300, 1329, 51044, 51044, 295, 10313, 15767, 13, 51124, 51124, 1779, 13, 51144, 51144, 407, 309, 393, 4018, 512, 295, 552, 13, 51244, 51244, 467, 393, 12097, 24004, 13, 51364, 51364, 467, 393, 853, 281, 1333, 4190, 294, 257, 16635, 13, 51564, 51564, 467, 575, 439, 613, 819, 9029, 13, 51684, 51684], "temperature": 0.0, "avg_logprob": -0.1047423319383101, "compression_ratio": 1.581151832460733, "no_caption_prob": 2.58569089055527e-05}, {"id": 465, "seek": 227944, "start": 2285.84, "end": 2293.04, "text": " These are internal to library and the library has many ways to try and shrink that list", "tokens": [50364, 2264, 11, 293, 370, 291, 382, 264, 4195, 360, 406, 643, 281, 764, 23060, 433, 3602, 13, 50684, 50684, 1981, 366, 6920, 281, 6405, 293, 264, 6405, 575, 867, 2098, 281, 853, 293, 23060, 300, 1329, 51044, 51044, 295, 10313, 15767, 13, 51124, 51124, 1779, 13, 51144, 51144, 407, 309, 393, 4018, 512, 295, 552, 13, 51244, 51244, 467, 393, 12097, 24004, 13, 51364, 51364, 467, 393, 853, 281, 1333, 4190, 294, 257, 16635, 13, 51564, 51564, 467, 575, 439, 613, 819, 9029, 13, 51684, 51684], "temperature": 0.0, "avg_logprob": -0.1047423319383101, "compression_ratio": 1.581151832460733, "no_caption_prob": 2.58569089055527e-05}, {"id": 466, "seek": 227944, "start": 2293.04, "end": 2294.64, "text": " of dice rolls.", "tokens": [50364, 2264, 11, 293, 370, 291, 382, 264, 4195, 360, 406, 643, 281, 764, 23060, 433, 3602, 13, 50684, 50684, 1981, 366, 6920, 281, 6405, 293, 264, 6405, 575, 867, 2098, 281, 853, 293, 23060, 300, 1329, 51044, 51044, 295, 10313, 15767, 13, 51124, 51124, 1779, 13, 51144, 51144, 407, 309, 393, 4018, 512, 295, 552, 13, 51244, 51244, 467, 393, 12097, 24004, 13, 51364, 51364, 467, 393, 853, 281, 1333, 4190, 294, 257, 16635, 13, 51564, 51564, 467, 575, 439, 613, 819, 9029, 13, 51684, 51684], "temperature": 0.0, "avg_logprob": -0.1047423319383101, "compression_ratio": 1.581151832460733, "no_caption_prob": 2.58569089055527e-05}, {"id": 467, "seek": 227944, "start": 2294.64, "end": 2295.04, "text": " Right.", "tokens": [50364, 2264, 11, 293, 370, 291, 382, 264, 4195, 360, 406, 643, 281, 764, 23060, 433, 3602, 13, 50684, 50684, 1981, 366, 6920, 281, 6405, 293, 264, 6405, 575, 867, 2098, 281, 853, 293, 23060, 300, 1329, 51044, 51044, 295, 10313, 15767, 13, 51124, 51124, 1779, 13, 51144, 51144, 407, 309, 393, 4018, 512, 295, 552, 13, 51244, 51244, 467, 393, 12097, 24004, 13, 51364, 51364, 467, 393, 853, 281, 1333, 4190, 294, 257, 16635, 13, 51564, 51564, 467, 575, 439, 613, 819, 9029, 13, 51684, 51684], "temperature": 0.0, "avg_logprob": -0.1047423319383101, "compression_ratio": 1.581151832460733, "no_caption_prob": 2.58569089055527e-05}, {"id": 468, "seek": 227944, "start": 2295.04, "end": 2297.04, "text": " So it can zero some of them.", "tokens": [50364, 2264, 11, 293, 370, 291, 382, 264, 4195, 360, 406, 643, 281, 764, 23060, 433, 3602, 13, 50684, 50684, 1981, 366, 6920, 281, 6405, 293, 264, 6405, 575, 867, 2098, 281, 853, 293, 23060, 300, 1329, 51044, 51044, 295, 10313, 15767, 13, 51124, 51124, 1779, 13, 51144, 51144, 407, 309, 393, 4018, 512, 295, 552, 13, 51244, 51244, 467, 393, 12097, 24004, 13, 51364, 51364, 467, 393, 853, 281, 1333, 4190, 294, 257, 16635, 13, 51564, 51564, 467, 575, 439, 613, 819, 9029, 13, 51684, 51684], "temperature": 0.0, "avg_logprob": -0.1047423319383101, "compression_ratio": 1.581151832460733, "no_caption_prob": 2.58569089055527e-05}, {"id": 469, "seek": 227944, "start": 2297.04, "end": 2299.44, "text": " It can delete chunks.", "tokens": [50364, 2264, 11, 293, 370, 291, 382, 264, 4195, 360, 406, 643, 281, 764, 23060, 433, 3602, 13, 50684, 50684, 1981, 366, 6920, 281, 6405, 293, 264, 6405, 575, 867, 2098, 281, 853, 293, 23060, 300, 1329, 51044, 51044, 295, 10313, 15767, 13, 51124, 51124, 1779, 13, 51144, 51144, 407, 309, 393, 4018, 512, 295, 552, 13, 51244, 51244, 467, 393, 12097, 24004, 13, 51364, 51364, 467, 393, 853, 281, 1333, 4190, 294, 257, 16635, 13, 51564, 51564, 467, 575, 439, 613, 819, 9029, 13, 51684, 51684], "temperature": 0.0, "avg_logprob": -0.1047423319383101, "compression_ratio": 1.581151832460733, "no_caption_prob": 2.58569089055527e-05}, {"id": 470, "seek": 227944, "start": 2299.44, "end": 2303.44, "text": " It can try to sort values in a chunk.", "tokens": [50364, 2264, 11, 293, 370, 291, 382, 264, 4195, 360, 406, 643, 281, 764, 23060, 433, 3602, 13, 50684, 50684, 1981, 366, 6920, 281, 6405, 293, 264, 6405, 575, 867, 2098, 281, 853, 293, 23060, 300, 1329, 51044, 51044, 295, 10313, 15767, 13, 51124, 51124, 1779, 13, 51144, 51144, 407, 309, 393, 4018, 512, 295, 552, 13, 51244, 51244, 467, 393, 12097, 24004, 13, 51364, 51364, 467, 393, 853, 281, 1333, 4190, 294, 257, 16635, 13, 51564, 51564, 467, 575, 439, 613, 819, 9029, 13, 51684, 51684], "temperature": 0.0, "avg_logprob": -0.1047423319383101, "compression_ratio": 1.581151832460733, "no_caption_prob": 2.58569089055527e-05}, {"id": 471, "seek": 227944, "start": 2303.44, "end": 2305.84, "text": " It has all these different strategies.", "tokens": [50364, 2264, 11, 293, 370, 291, 382, 264, 4195, 360, 406, 643, 281, 764, 23060, 433, 3602, 13, 50684, 50684, 1981, 366, 6920, 281, 6405, 293, 264, 6405, 575, 867, 2098, 281, 853, 293, 23060, 300, 1329, 51044, 51044, 295, 10313, 15767, 13, 51124, 51124, 1779, 13, 51144, 51144, 407, 309, 393, 4018, 512, 295, 552, 13, 51244, 51244, 467, 393, 12097, 24004, 13, 51364, 51364, 467, 393, 853, 281, 1333, 4190, 294, 257, 16635, 13, 51564, 51564, 467, 575, 439, 613, 819, 9029, 13, 51684, 51684], "temperature": 0.0, "avg_logprob": -0.1047423319383101, "compression_ratio": 1.581151832460733, "no_caption_prob": 2.58569089055527e-05}, {"id": 472, "seek": 230584, "start": 2305.84, "end": 2313.04, "text": " And it is fine tuned to the combinators that the fuzzer library gives you.", "tokens": [50364, 400, 309, 307, 2489, 10870, 281, 264, 38514, 3391, 300, 264, 283, 3334, 4527, 6405, 2709, 291, 13, 50724, 50724, 1779, 13, 50744, 50744, 407, 264, 23060, 433, 458, 300, 264, 1329, 283, 3334, 4527, 307, 3720, 294, 1270, 257, 636, 300, 264, 41684, 51184, 51184, 5206, 486, 589, 534, 731, 365, 300, 13, 51304, 51304, 400, 341, 611, 2709, 291, 264, 5121, 295, 17746, 264, 4190, 934, 41684, 13, 51664, 51664, 1779, 13, 51684, 51684], "temperature": 0.0, "avg_logprob": -0.07623522709577511, "compression_ratio": 1.6480446927374302, "no_caption_prob": 1.0613071026455145e-05}, {"id": 473, "seek": 230584, "start": 2313.04, "end": 2313.44, "text": " Right.", "tokens": [50364, 400, 309, 307, 2489, 10870, 281, 264, 38514, 3391, 300, 264, 283, 3334, 4527, 6405, 2709, 291, 13, 50724, 50724, 1779, 13, 50744, 50744, 407, 264, 23060, 433, 458, 300, 264, 1329, 283, 3334, 4527, 307, 3720, 294, 1270, 257, 636, 300, 264, 41684, 51184, 51184, 5206, 486, 589, 534, 731, 365, 300, 13, 51304, 51304, 400, 341, 611, 2709, 291, 264, 5121, 295, 17746, 264, 4190, 934, 41684, 13, 51664, 51664, 1779, 13, 51684, 51684], "temperature": 0.0, "avg_logprob": -0.07623522709577511, "compression_ratio": 1.6480446927374302, "no_caption_prob": 1.0613071026455145e-05}, {"id": 474, "seek": 230584, "start": 2313.44, "end": 2322.2400000000002, "text": " So the shrinkers know that the list fuzzer is written in such a way that the shrinking", "tokens": [50364, 400, 309, 307, 2489, 10870, 281, 264, 38514, 3391, 300, 264, 283, 3334, 4527, 6405, 2709, 291, 13, 50724, 50724, 1779, 13, 50744, 50744, 407, 264, 23060, 433, 458, 300, 264, 1329, 283, 3334, 4527, 307, 3720, 294, 1270, 257, 636, 300, 264, 41684, 51184, 51184, 5206, 486, 589, 534, 731, 365, 300, 13, 51304, 51304, 400, 341, 611, 2709, 291, 264, 5121, 295, 17746, 264, 4190, 934, 41684, 13, 51664, 51664, 1779, 13, 51684, 51684], "temperature": 0.0, "avg_logprob": -0.07623522709577511, "compression_ratio": 1.6480446927374302, "no_caption_prob": 1.0613071026455145e-05}, {"id": 475, "seek": 230584, "start": 2322.2400000000002, "end": 2324.6400000000003, "text": " strategy will work really well with that.", "tokens": [50364, 400, 309, 307, 2489, 10870, 281, 264, 38514, 3391, 300, 264, 283, 3334, 4527, 6405, 2709, 291, 13, 50724, 50724, 1779, 13, 50744, 50744, 407, 264, 23060, 433, 458, 300, 264, 1329, 283, 3334, 4527, 307, 3720, 294, 1270, 257, 636, 300, 264, 41684, 51184, 51184, 5206, 486, 589, 534, 731, 365, 300, 13, 51304, 51304, 400, 341, 611, 2709, 291, 264, 5121, 295, 17746, 264, 4190, 934, 41684, 13, 51664, 51664, 1779, 13, 51684, 51684], "temperature": 0.0, "avg_logprob": -0.07623522709577511, "compression_ratio": 1.6480446927374302, "no_caption_prob": 1.0613071026455145e-05}, {"id": 476, "seek": 230584, "start": 2324.6400000000003, "end": 2331.84, "text": " And this also gives you the benefit of generating the values after shrinking.", "tokens": [50364, 400, 309, 307, 2489, 10870, 281, 264, 38514, 3391, 300, 264, 283, 3334, 4527, 6405, 2709, 291, 13, 50724, 50724, 1779, 13, 50744, 50744, 407, 264, 23060, 433, 458, 300, 264, 1329, 283, 3334, 4527, 307, 3720, 294, 1270, 257, 636, 300, 264, 41684, 51184, 51184, 5206, 486, 589, 534, 731, 365, 300, 13, 51304, 51304, 400, 341, 611, 2709, 291, 264, 5121, 295, 17746, 264, 4190, 934, 41684, 13, 51664, 51664, 1779, 13, 51684, 51684], "temperature": 0.0, "avg_logprob": -0.07623522709577511, "compression_ratio": 1.6480446927374302, "no_caption_prob": 1.0613071026455145e-05}, {"id": 477, "seek": 230584, "start": 2331.84, "end": 2332.2400000000002, "text": " Right.", "tokens": [50364, 400, 309, 307, 2489, 10870, 281, 264, 38514, 3391, 300, 264, 283, 3334, 4527, 6405, 2709, 291, 13, 50724, 50724, 1779, 13, 50744, 50744, 407, 264, 23060, 433, 458, 300, 264, 1329, 283, 3334, 4527, 307, 3720, 294, 1270, 257, 636, 300, 264, 41684, 51184, 51184, 5206, 486, 589, 534, 731, 365, 300, 13, 51304, 51304, 400, 341, 611, 2709, 291, 264, 5121, 295, 17746, 264, 4190, 934, 41684, 13, 51664, 51664, 1779, 13, 51684, 51684], "temperature": 0.0, "avg_logprob": -0.07623522709577511, "compression_ratio": 1.6480446927374302, "no_caption_prob": 1.0613071026455145e-05}, {"id": 478, "seek": 233224, "start": 2332.24, "end": 2339.8399999999997, "text": " So suddenly you do filter after you have shrunk the PRNG history.", "tokens": [50364, 407, 5800, 291, 360, 6608, 934, 291, 362, 9884, 3197, 264, 11568, 30237, 2503, 13, 50744, 50744, 509, 366, 884, 264, 917, 550, 2445, 934, 291, 362, 9884, 3197, 13, 50944, 50944, 400, 370, 439, 613, 33270, 1719, 586, 1797, 570, 291, 366, 2614, 729, 6828, 322, 264, 777, 51324, 51324, 8535, 2503, 13, 51424, 51424, 407, 291, 8460, 257, 1329, 295, 41674, 13, 51584, 51584, 663, 311, 428, 5143, 490, 257, 383, 13, 51704, 51704, 509, 8460, 257, 688, 295, 4190, 13, 51784, 51784], "temperature": 0.0, "avg_logprob": -0.12195811874565037, "compression_ratio": 1.64321608040201, "no_caption_prob": 2.9306431315490045e-05}, {"id": 479, "seek": 233224, "start": 2339.8399999999997, "end": 2343.8399999999997, "text": " You are doing the end then function after you have shrunk.", "tokens": [50364, 407, 5800, 291, 360, 6608, 934, 291, 362, 9884, 3197, 264, 11568, 30237, 2503, 13, 50744, 50744, 509, 366, 884, 264, 917, 550, 2445, 934, 291, 362, 9884, 3197, 13, 50944, 50944, 400, 370, 439, 613, 33270, 1719, 586, 1797, 570, 291, 366, 2614, 729, 6828, 322, 264, 777, 51324, 51324, 8535, 2503, 13, 51424, 51424, 407, 291, 8460, 257, 1329, 295, 41674, 13, 51584, 51584, 663, 311, 428, 5143, 490, 257, 383, 13, 51704, 51704, 509, 8460, 257, 688, 295, 4190, 13, 51784, 51784], "temperature": 0.0, "avg_logprob": -0.12195811874565037, "compression_ratio": 1.64321608040201, "no_caption_prob": 2.9306431315490045e-05}, {"id": 480, "seek": 233224, "start": 2343.8399999999997, "end": 2351.4399999999996, "text": " And so all these invariants now hold because you are running those functions on the new", "tokens": [50364, 407, 5800, 291, 360, 6608, 934, 291, 362, 9884, 3197, 264, 11568, 30237, 2503, 13, 50744, 50744, 509, 366, 884, 264, 917, 550, 2445, 934, 291, 362, 9884, 3197, 13, 50944, 50944, 400, 370, 439, 613, 33270, 1719, 586, 1797, 570, 291, 366, 2614, 729, 6828, 322, 264, 777, 51324, 51324, 8535, 2503, 13, 51424, 51424, 407, 291, 8460, 257, 1329, 295, 41674, 13, 51584, 51584, 663, 311, 428, 5143, 490, 257, 383, 13, 51704, 51704, 509, 8460, 257, 688, 295, 4190, 13, 51784, 51784], "temperature": 0.0, "avg_logprob": -0.12195811874565037, "compression_ratio": 1.64321608040201, "no_caption_prob": 2.9306431315490045e-05}, {"id": 481, "seek": 233224, "start": 2351.4399999999996, "end": 2353.4399999999996, "text": " alternative history.", "tokens": [50364, 407, 5800, 291, 360, 6608, 934, 291, 362, 9884, 3197, 264, 11568, 30237, 2503, 13, 50744, 50744, 509, 366, 884, 264, 917, 550, 2445, 934, 291, 362, 9884, 3197, 13, 50944, 50944, 400, 370, 439, 613, 33270, 1719, 586, 1797, 570, 291, 366, 2614, 729, 6828, 322, 264, 777, 51324, 51324, 8535, 2503, 13, 51424, 51424, 407, 291, 8460, 257, 1329, 295, 41674, 13, 51584, 51584, 663, 311, 428, 5143, 490, 257, 383, 13, 51704, 51704, 509, 8460, 257, 688, 295, 4190, 13, 51784, 51784], "temperature": 0.0, "avg_logprob": -0.12195811874565037, "compression_ratio": 1.64321608040201, "no_caption_prob": 2.9306431315490045e-05}, {"id": 482, "seek": 233224, "start": 2353.4399999999996, "end": 2356.64, "text": " So you generate a list of integers.", "tokens": [50364, 407, 5800, 291, 360, 6608, 934, 291, 362, 9884, 3197, 264, 11568, 30237, 2503, 13, 50744, 50744, 509, 366, 884, 264, 917, 550, 2445, 934, 291, 362, 9884, 3197, 13, 50944, 50944, 400, 370, 439, 613, 33270, 1719, 586, 1797, 570, 291, 366, 2614, 729, 6828, 322, 264, 777, 51324, 51324, 8535, 2503, 13, 51424, 51424, 407, 291, 8460, 257, 1329, 295, 41674, 13, 51584, 51584, 663, 311, 428, 5143, 490, 257, 383, 13, 51704, 51704, 509, 8460, 257, 688, 295, 4190, 13, 51784, 51784], "temperature": 0.0, "avg_logprob": -0.12195811874565037, "compression_ratio": 1.64321608040201, "no_caption_prob": 2.9306431315490045e-05}, {"id": 483, "seek": 233224, "start": 2356.64, "end": 2359.04, "text": " That's your basis from a C.", "tokens": [50364, 407, 5800, 291, 360, 6608, 934, 291, 362, 9884, 3197, 264, 11568, 30237, 2503, 13, 50744, 50744, 509, 366, 884, 264, 917, 550, 2445, 934, 291, 362, 9884, 3197, 13, 50944, 50944, 400, 370, 439, 613, 33270, 1719, 586, 1797, 570, 291, 366, 2614, 729, 6828, 322, 264, 777, 51324, 51324, 8535, 2503, 13, 51424, 51424, 407, 291, 8460, 257, 1329, 295, 41674, 13, 51584, 51584, 663, 311, 428, 5143, 490, 257, 383, 13, 51704, 51704, 509, 8460, 257, 688, 295, 4190, 13, 51784, 51784], "temperature": 0.0, "avg_logprob": -0.12195811874565037, "compression_ratio": 1.64321608040201, "no_caption_prob": 2.9306431315490045e-05}, {"id": 484, "seek": 233224, "start": 2359.04, "end": 2360.64, "text": " You generate a lot of values.", "tokens": [50364, 407, 5800, 291, 360, 6608, 934, 291, 362, 9884, 3197, 264, 11568, 30237, 2503, 13, 50744, 50744, 509, 366, 884, 264, 917, 550, 2445, 934, 291, 362, 9884, 3197, 13, 50944, 50944, 400, 370, 439, 613, 33270, 1719, 586, 1797, 570, 291, 366, 2614, 729, 6828, 322, 264, 777, 51324, 51324, 8535, 2503, 13, 51424, 51424, 407, 291, 8460, 257, 1329, 295, 41674, 13, 51584, 51584, 663, 311, 428, 5143, 490, 257, 383, 13, 51704, 51704, 509, 8460, 257, 688, 295, 4190, 13, 51784, 51784], "temperature": 0.0, "avg_logprob": -0.12195811874565037, "compression_ratio": 1.64321608040201, "no_caption_prob": 2.9306431315490045e-05}, {"id": 485, "seek": 236064, "start": 2360.64, "end": 2364.24, "text": " And for each value you derive those.", "tokens": [50364, 400, 337, 1184, 2158, 291, 28446, 729, 13, 50544, 50544, 1042, 11, 472, 2158, 420, 3866, 2158, 13, 50644, 50644, 509, 28446, 729, 666, 257, 2158, 300, 291, 528, 281, 1500, 13, 50884, 50884, 1779, 13, 50924, 50924, 400, 286, 478, 17939, 300, 294, 512, 3331, 291, 727, 362, 291, 727, 23060, 309, 281, 264, 912, 2158, 13, 51164, 51164, 407, 337, 5197, 11, 498, 286, 498, 452, 19265, 23815, 257, 1230, 1296, 4018, 293, 38882, 11, 411, 300, 311, 51504, 51504, 300, 311, 577, 341, 6405, 1985, 13, 51624, 51624, 583, 439, 286, 528, 307, 257, 11464, 7929, 13, 51704, 51704], "temperature": 0.0, "avg_logprob": -0.14133946712200457, "compression_ratio": 1.619047619047619, "no_caption_prob": 9.314016642747447e-05}, {"id": 486, "seek": 236064, "start": 2364.24, "end": 2366.24, "text": " Well, one value or multiple value.", "tokens": [50364, 400, 337, 1184, 2158, 291, 28446, 729, 13, 50544, 50544, 1042, 11, 472, 2158, 420, 3866, 2158, 13, 50644, 50644, 509, 28446, 729, 666, 257, 2158, 300, 291, 528, 281, 1500, 13, 50884, 50884, 1779, 13, 50924, 50924, 400, 286, 478, 17939, 300, 294, 512, 3331, 291, 727, 362, 291, 727, 23060, 309, 281, 264, 912, 2158, 13, 51164, 51164, 407, 337, 5197, 11, 498, 286, 498, 452, 19265, 23815, 257, 1230, 1296, 4018, 293, 38882, 11, 411, 300, 311, 51504, 51504, 300, 311, 577, 341, 6405, 1985, 13, 51624, 51624, 583, 439, 286, 528, 307, 257, 11464, 7929, 13, 51704, 51704], "temperature": 0.0, "avg_logprob": -0.14133946712200457, "compression_ratio": 1.619047619047619, "no_caption_prob": 9.314016642747447e-05}, {"id": 487, "seek": 236064, "start": 2366.24, "end": 2371.04, "text": " You derive those into a value that you want to test.", "tokens": [50364, 400, 337, 1184, 2158, 291, 28446, 729, 13, 50544, 50544, 1042, 11, 472, 2158, 420, 3866, 2158, 13, 50644, 50644, 509, 28446, 729, 666, 257, 2158, 300, 291, 528, 281, 1500, 13, 50884, 50884, 1779, 13, 50924, 50924, 400, 286, 478, 17939, 300, 294, 512, 3331, 291, 727, 362, 291, 727, 23060, 309, 281, 264, 912, 2158, 13, 51164, 51164, 407, 337, 5197, 11, 498, 286, 498, 452, 19265, 23815, 257, 1230, 1296, 4018, 293, 38882, 11, 411, 300, 311, 51504, 51504, 300, 311, 577, 341, 6405, 1985, 13, 51624, 51624, 583, 439, 286, 528, 307, 257, 11464, 7929, 13, 51704, 51704], "temperature": 0.0, "avg_logprob": -0.14133946712200457, "compression_ratio": 1.619047619047619, "no_caption_prob": 9.314016642747447e-05}, {"id": 488, "seek": 236064, "start": 2371.04, "end": 2371.8399999999997, "text": " Right.", "tokens": [50364, 400, 337, 1184, 2158, 291, 28446, 729, 13, 50544, 50544, 1042, 11, 472, 2158, 420, 3866, 2158, 13, 50644, 50644, 509, 28446, 729, 666, 257, 2158, 300, 291, 528, 281, 1500, 13, 50884, 50884, 1779, 13, 50924, 50924, 400, 286, 478, 17939, 300, 294, 512, 3331, 291, 727, 362, 291, 727, 23060, 309, 281, 264, 912, 2158, 13, 51164, 51164, 407, 337, 5197, 11, 498, 286, 498, 452, 19265, 23815, 257, 1230, 1296, 4018, 293, 38882, 11, 411, 300, 311, 51504, 51504, 300, 311, 577, 341, 6405, 1985, 13, 51624, 51624, 583, 439, 286, 528, 307, 257, 11464, 7929, 13, 51704, 51704], "temperature": 0.0, "avg_logprob": -0.14133946712200457, "compression_ratio": 1.619047619047619, "no_caption_prob": 9.314016642747447e-05}, {"id": 489, "seek": 236064, "start": 2371.8399999999997, "end": 2376.64, "text": " And I'm guessing that in some cases you could have you could shrink it to the same value.", "tokens": [50364, 400, 337, 1184, 2158, 291, 28446, 729, 13, 50544, 50544, 1042, 11, 472, 2158, 420, 3866, 2158, 13, 50644, 50644, 509, 28446, 729, 666, 257, 2158, 300, 291, 528, 281, 1500, 13, 50884, 50884, 1779, 13, 50924, 50924, 400, 286, 478, 17939, 300, 294, 512, 3331, 291, 727, 362, 291, 727, 23060, 309, 281, 264, 912, 2158, 13, 51164, 51164, 407, 337, 5197, 11, 498, 286, 498, 452, 19265, 23815, 257, 1230, 1296, 4018, 293, 38882, 11, 411, 300, 311, 51504, 51504, 300, 311, 577, 341, 6405, 1985, 13, 51624, 51624, 583, 439, 286, 528, 307, 257, 11464, 7929, 13, 51704, 51704], "temperature": 0.0, "avg_logprob": -0.14133946712200457, "compression_ratio": 1.619047619047619, "no_caption_prob": 9.314016642747447e-05}, {"id": 490, "seek": 236064, "start": 2376.64, "end": 2383.44, "text": " So for instance, if I if my generator generates a number between zero and 256, like that's", "tokens": [50364, 400, 337, 1184, 2158, 291, 28446, 729, 13, 50544, 50544, 1042, 11, 472, 2158, 420, 3866, 2158, 13, 50644, 50644, 509, 28446, 729, 666, 257, 2158, 300, 291, 528, 281, 1500, 13, 50884, 50884, 1779, 13, 50924, 50924, 400, 286, 478, 17939, 300, 294, 512, 3331, 291, 727, 362, 291, 727, 23060, 309, 281, 264, 912, 2158, 13, 51164, 51164, 407, 337, 5197, 11, 498, 286, 498, 452, 19265, 23815, 257, 1230, 1296, 4018, 293, 38882, 11, 411, 300, 311, 51504, 51504, 300, 311, 577, 341, 6405, 1985, 13, 51624, 51624, 583, 439, 286, 528, 307, 257, 11464, 7929, 13, 51704, 51704], "temperature": 0.0, "avg_logprob": -0.14133946712200457, "compression_ratio": 1.619047619047619, "no_caption_prob": 9.314016642747447e-05}, {"id": 491, "seek": 236064, "start": 2383.44, "end": 2385.8399999999997, "text": " that's how this library works.", "tokens": [50364, 400, 337, 1184, 2158, 291, 28446, 729, 13, 50544, 50544, 1042, 11, 472, 2158, 420, 3866, 2158, 13, 50644, 50644, 509, 28446, 729, 666, 257, 2158, 300, 291, 528, 281, 1500, 13, 50884, 50884, 1779, 13, 50924, 50924, 400, 286, 478, 17939, 300, 294, 512, 3331, 291, 727, 362, 291, 727, 23060, 309, 281, 264, 912, 2158, 13, 51164, 51164, 407, 337, 5197, 11, 498, 286, 498, 452, 19265, 23815, 257, 1230, 1296, 4018, 293, 38882, 11, 411, 300, 311, 51504, 51504, 300, 311, 577, 341, 6405, 1985, 13, 51624, 51624, 583, 439, 286, 528, 307, 257, 11464, 7929, 13, 51704, 51704], "temperature": 0.0, "avg_logprob": -0.14133946712200457, "compression_ratio": 1.619047619047619, "no_caption_prob": 9.314016642747447e-05}, {"id": 492, "seek": 236064, "start": 2385.8399999999997, "end": 2387.44, "text": " But all I want is a coin flip.", "tokens": [50364, 400, 337, 1184, 2158, 291, 28446, 729, 13, 50544, 50544, 1042, 11, 472, 2158, 420, 3866, 2158, 13, 50644, 50644, 509, 28446, 729, 666, 257, 2158, 300, 291, 528, 281, 1500, 13, 50884, 50884, 1779, 13, 50924, 50924, 400, 286, 478, 17939, 300, 294, 512, 3331, 291, 727, 362, 291, 727, 23060, 309, 281, 264, 912, 2158, 13, 51164, 51164, 407, 337, 5197, 11, 498, 286, 498, 452, 19265, 23815, 257, 1230, 1296, 4018, 293, 38882, 11, 411, 300, 311, 51504, 51504, 300, 311, 577, 341, 6405, 1985, 13, 51624, 51624, 583, 439, 286, 528, 307, 257, 11464, 7929, 13, 51704, 51704], "temperature": 0.0, "avg_logprob": -0.14133946712200457, "compression_ratio": 1.619047619047619, "no_caption_prob": 9.314016642747447e-05}, {"id": 493, "seek": 238744, "start": 2387.44, "end": 2394.2400000000002, "text": " So it could have it could generate 232 and it could then simplify to 231.", "tokens": [50364, 407, 309, 727, 362, 309, 727, 8460, 6673, 17, 293, 309, 727, 550, 20460, 281, 6673, 16, 13, 50704, 50704, 583, 729, 576, 2736, 1293, 294, 8050, 420, 28537, 13, 50904, 50904, 400, 300, 576, 406, 312, 588, 1880, 13, 51044, 51044, 865, 13, 51064, 51064, 407, 307, 309, 30, 51184, 51184, 407, 2171, 291, 393, 483, 264, 912, 2158, 490, 819, 11568, 30237, 30631, 293, 300, 311, 2489, 13, 51524, 51524], "temperature": 0.0, "avg_logprob": -0.16971741495905696, "compression_ratio": 1.4371584699453552, "no_caption_prob": 3.646720870165154e-05}, {"id": 494, "seek": 238744, "start": 2394.2400000000002, "end": 2398.2400000000002, "text": " But those would return both in heads or tails.", "tokens": [50364, 407, 309, 727, 362, 309, 727, 8460, 6673, 17, 293, 309, 727, 550, 20460, 281, 6673, 16, 13, 50704, 50704, 583, 729, 576, 2736, 1293, 294, 8050, 420, 28537, 13, 50904, 50904, 400, 300, 576, 406, 312, 588, 1880, 13, 51044, 51044, 865, 13, 51064, 51064, 407, 307, 309, 30, 51184, 51184, 407, 2171, 291, 393, 483, 264, 912, 2158, 490, 819, 11568, 30237, 30631, 293, 300, 311, 2489, 13, 51524, 51524], "temperature": 0.0, "avg_logprob": -0.16971741495905696, "compression_ratio": 1.4371584699453552, "no_caption_prob": 3.646720870165154e-05}, {"id": 495, "seek": 238744, "start": 2398.2400000000002, "end": 2401.04, "text": " And that would not be very interesting.", "tokens": [50364, 407, 309, 727, 362, 309, 727, 8460, 6673, 17, 293, 309, 727, 550, 20460, 281, 6673, 16, 13, 50704, 50704, 583, 729, 576, 2736, 1293, 294, 8050, 420, 28537, 13, 50904, 50904, 400, 300, 576, 406, 312, 588, 1880, 13, 51044, 51044, 865, 13, 51064, 51064, 407, 307, 309, 30, 51184, 51184, 407, 2171, 291, 393, 483, 264, 912, 2158, 490, 819, 11568, 30237, 30631, 293, 300, 311, 2489, 13, 51524, 51524], "temperature": 0.0, "avg_logprob": -0.16971741495905696, "compression_ratio": 1.4371584699453552, "no_caption_prob": 3.646720870165154e-05}, {"id": 496, "seek": 238744, "start": 2401.04, "end": 2401.44, "text": " Yeah.", "tokens": [50364, 407, 309, 727, 362, 309, 727, 8460, 6673, 17, 293, 309, 727, 550, 20460, 281, 6673, 16, 13, 50704, 50704, 583, 729, 576, 2736, 1293, 294, 8050, 420, 28537, 13, 50904, 50904, 400, 300, 576, 406, 312, 588, 1880, 13, 51044, 51044, 865, 13, 51064, 51064, 407, 307, 309, 30, 51184, 51184, 407, 2171, 291, 393, 483, 264, 912, 2158, 490, 819, 11568, 30237, 30631, 293, 300, 311, 2489, 13, 51524, 51524], "temperature": 0.0, "avg_logprob": -0.16971741495905696, "compression_ratio": 1.4371584699453552, "no_caption_prob": 3.646720870165154e-05}, {"id": 497, "seek": 238744, "start": 2401.44, "end": 2403.84, "text": " So is it?", "tokens": [50364, 407, 309, 727, 362, 309, 727, 8460, 6673, 17, 293, 309, 727, 550, 20460, 281, 6673, 16, 13, 50704, 50704, 583, 729, 576, 2736, 1293, 294, 8050, 420, 28537, 13, 50904, 50904, 400, 300, 576, 406, 312, 588, 1880, 13, 51044, 51044, 865, 13, 51064, 51064, 407, 307, 309, 30, 51184, 51184, 407, 2171, 291, 393, 483, 264, 912, 2158, 490, 819, 11568, 30237, 30631, 293, 300, 311, 2489, 13, 51524, 51524], "temperature": 0.0, "avg_logprob": -0.16971741495905696, "compression_ratio": 1.4371584699453552, "no_caption_prob": 3.646720870165154e-05}, {"id": 498, "seek": 238744, "start": 2403.84, "end": 2410.64, "text": " So sometimes you can get the same value from different PRNG histories and that's fine.", "tokens": [50364, 407, 309, 727, 362, 309, 727, 8460, 6673, 17, 293, 309, 727, 550, 20460, 281, 6673, 16, 13, 50704, 50704, 583, 729, 576, 2736, 1293, 294, 8050, 420, 28537, 13, 50904, 50904, 400, 300, 576, 406, 312, 588, 1880, 13, 51044, 51044, 865, 13, 51064, 51064, 407, 307, 309, 30, 51184, 51184, 407, 2171, 291, 393, 483, 264, 912, 2158, 490, 819, 11568, 30237, 30631, 293, 300, 311, 2489, 13, 51524, 51524], "temperature": 0.0, "avg_logprob": -0.16971741495905696, "compression_ratio": 1.4371584699453552, "no_caption_prob": 3.646720870165154e-05}, {"id": 499, "seek": 241064, "start": 2410.64, "end": 2417.04, "text": " We mostly care about simplifying the PRNG history as much as we can.", "tokens": [50364, 492, 5240, 1127, 466, 6883, 5489, 264, 11568, 30237, 2503, 382, 709, 382, 321, 393, 13, 50684, 50684, 407, 1455, 309, 11639, 293, 1455, 309, 4356, 13, 50884, 50884, 400, 456, 311, 341, 10286, 1296, 264, 41684, 1399, 293, 1296, 264, 38662, 300, 498, 51364, 51364, 264, 11568, 30237, 2503, 307, 4356, 11, 264, 16505, 2158, 295, 428, 2010, 300, 291, 528, 281, 1500, 486, 51684, 51684, 312, 18587, 13, 51724, 51724], "temperature": 0.0, "avg_logprob": -0.05477298272622598, "compression_ratio": 1.5854922279792747, "no_caption_prob": 3.643770105554722e-05}, {"id": 500, "seek": 241064, "start": 2417.04, "end": 2421.04, "text": " So making it shorter and making it smaller.", "tokens": [50364, 492, 5240, 1127, 466, 6883, 5489, 264, 11568, 30237, 2503, 382, 709, 382, 321, 393, 13, 50684, 50684, 407, 1455, 309, 11639, 293, 1455, 309, 4356, 13, 50884, 50884, 400, 456, 311, 341, 10286, 1296, 264, 41684, 1399, 293, 1296, 264, 38662, 300, 498, 51364, 51364, 264, 11568, 30237, 2503, 307, 4356, 11, 264, 16505, 2158, 295, 428, 2010, 300, 291, 528, 281, 1500, 486, 51684, 51684, 312, 18587, 13, 51724, 51724], "temperature": 0.0, "avg_logprob": -0.05477298272622598, "compression_ratio": 1.5854922279792747, "no_caption_prob": 3.643770105554722e-05}, {"id": 501, "seek": 241064, "start": 2421.04, "end": 2430.64, "text": " And there's this convention between the shrinking process and between the generators that if", "tokens": [50364, 492, 5240, 1127, 466, 6883, 5489, 264, 11568, 30237, 2503, 382, 709, 382, 321, 393, 13, 50684, 50684, 407, 1455, 309, 11639, 293, 1455, 309, 4356, 13, 50884, 50884, 400, 456, 311, 341, 10286, 1296, 264, 41684, 1399, 293, 1296, 264, 38662, 300, 498, 51364, 51364, 264, 11568, 30237, 2503, 307, 4356, 11, 264, 16505, 2158, 295, 428, 2010, 300, 291, 528, 281, 1500, 486, 51684, 51684, 312, 18587, 13, 51724, 51724], "temperature": 0.0, "avg_logprob": -0.05477298272622598, "compression_ratio": 1.5854922279792747, "no_caption_prob": 3.643770105554722e-05}, {"id": 502, "seek": 241064, "start": 2430.64, "end": 2437.04, "text": " the PRNG history is smaller, the resulting value of your type that you want to test will", "tokens": [50364, 492, 5240, 1127, 466, 6883, 5489, 264, 11568, 30237, 2503, 382, 709, 382, 321, 393, 13, 50684, 50684, 407, 1455, 309, 11639, 293, 1455, 309, 4356, 13, 50884, 50884, 400, 456, 311, 341, 10286, 1296, 264, 41684, 1399, 293, 1296, 264, 38662, 300, 498, 51364, 51364, 264, 11568, 30237, 2503, 307, 4356, 11, 264, 16505, 2158, 295, 428, 2010, 300, 291, 528, 281, 1500, 486, 51684, 51684, 312, 18587, 13, 51724, 51724], "temperature": 0.0, "avg_logprob": -0.05477298272622598, "compression_ratio": 1.5854922279792747, "no_caption_prob": 3.643770105554722e-05}, {"id": 503, "seek": 241064, "start": 2437.04, "end": 2437.8399999999997, "text": " be simpler.", "tokens": [50364, 492, 5240, 1127, 466, 6883, 5489, 264, 11568, 30237, 2503, 382, 709, 382, 321, 393, 13, 50684, 50684, 407, 1455, 309, 11639, 293, 1455, 309, 4356, 13, 50884, 50884, 400, 456, 311, 341, 10286, 1296, 264, 41684, 1399, 293, 1296, 264, 38662, 300, 498, 51364, 51364, 264, 11568, 30237, 2503, 307, 4356, 11, 264, 16505, 2158, 295, 428, 2010, 300, 291, 528, 281, 1500, 486, 51684, 51684, 312, 18587, 13, 51724, 51724], "temperature": 0.0, "avg_logprob": -0.05477298272622598, "compression_ratio": 1.5854922279792747, "no_caption_prob": 3.643770105554722e-05}, {"id": 504, "seek": 243784, "start": 2437.84, "end": 2447.04, "text": " So the shrinker just doesn't care if it was 230 or 228 that generated the zero.", "tokens": [50364, 407, 264, 23060, 260, 445, 1177, 380, 1127, 498, 309, 390, 35311, 420, 5853, 23, 300, 10833, 264, 4018, 13, 50824, 50824, 467, 486, 445, 1888, 264, 4356, 472, 13, 50924, 50924, 400, 498, 264, 19265, 575, 1096, 1080, 1691, 731, 293, 11317, 18587, 11317, 4356, 30631, 281, 51384, 51384, 18587, 4190, 11, 550, 291, 486, 23060, 3030, 18587, 4190, 13, 51624, 51624], "temperature": 0.0, "avg_logprob": -0.1016544928917518, "compression_ratio": 1.5535714285714286, "no_caption_prob": 3.760800609597936e-05}, {"id": 505, "seek": 243784, "start": 2447.04, "end": 2449.04, "text": " It will just pick the smaller one.", "tokens": [50364, 407, 264, 23060, 260, 445, 1177, 380, 1127, 498, 309, 390, 35311, 420, 5853, 23, 300, 10833, 264, 4018, 13, 50824, 50824, 467, 486, 445, 1888, 264, 4356, 472, 13, 50924, 50924, 400, 498, 264, 19265, 575, 1096, 1080, 1691, 731, 293, 11317, 18587, 11317, 4356, 30631, 281, 51384, 51384, 18587, 4190, 11, 550, 291, 486, 23060, 3030, 18587, 4190, 13, 51624, 51624], "temperature": 0.0, "avg_logprob": -0.1016544928917518, "compression_ratio": 1.5535714285714286, "no_caption_prob": 3.760800609597936e-05}, {"id": 506, "seek": 243784, "start": 2449.04, "end": 2458.2400000000002, "text": " And if the generator has done its job well and maps simpler maps smaller histories to", "tokens": [50364, 407, 264, 23060, 260, 445, 1177, 380, 1127, 498, 309, 390, 35311, 420, 5853, 23, 300, 10833, 264, 4018, 13, 50824, 50824, 467, 486, 445, 1888, 264, 4356, 472, 13, 50924, 50924, 400, 498, 264, 19265, 575, 1096, 1080, 1691, 731, 293, 11317, 18587, 11317, 4356, 30631, 281, 51384, 51384, 18587, 4190, 11, 550, 291, 486, 23060, 3030, 18587, 4190, 13, 51624, 51624], "temperature": 0.0, "avg_logprob": -0.1016544928917518, "compression_ratio": 1.5535714285714286, "no_caption_prob": 3.760800609597936e-05}, {"id": 507, "seek": 243784, "start": 2458.2400000000002, "end": 2463.04, "text": " simpler values, then you will shrink towards simpler values.", "tokens": [50364, 407, 264, 23060, 260, 445, 1177, 380, 1127, 498, 309, 390, 35311, 420, 5853, 23, 300, 10833, 264, 4018, 13, 50824, 50824, 467, 486, 445, 1888, 264, 4356, 472, 13, 50924, 50924, 400, 498, 264, 19265, 575, 1096, 1080, 1691, 731, 293, 11317, 18587, 11317, 4356, 30631, 281, 51384, 51384, 18587, 4190, 11, 550, 291, 486, 23060, 3030, 18587, 4190, 13, 51624, 51624], "temperature": 0.0, "avg_logprob": -0.1016544928917518, "compression_ratio": 1.5535714285714286, "no_caption_prob": 3.760800609597936e-05}, {"id": 508, "seek": 246304, "start": 2463.04, "end": 2469.84, "text": " And so it might go from one to zero in your final value.", "tokens": [50364, 400, 370, 309, 1062, 352, 490, 472, 281, 4018, 294, 428, 2572, 2158, 13, 50704, 50704, 467, 1062, 352, 490, 4018, 281, 4018, 382, 938, 382, 321, 362, 9884, 3197, 264, 2503, 257, 707, 857, 13, 51024, 51024, 467, 14893, 13, 51064, 51064, 865, 13, 51104, 51104, 2264, 13, 51124, 51124, 400, 611, 490, 257, 4195, 311, 935, 295, 1910, 11, 309, 1177, 380, 534, 1871, 439, 300, 709, 1968, 309, 775, 51424, 51424, 257, 1326, 17796, 2857, 13, 51524, 51524, 467, 311, 406, 411, 291, 434, 17746, 23976, 764, 3331, 13, 51744, 51744, 1779, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.14999931335449218, "compression_ratio": 1.5299539170506913, "no_caption_prob": 0.00035687346826307476}, {"id": 509, "seek": 246304, "start": 2469.84, "end": 2476.24, "text": " It might go from zero to zero as long as we have shrunk the history a little bit.", "tokens": [50364, 400, 370, 309, 1062, 352, 490, 472, 281, 4018, 294, 428, 2572, 2158, 13, 50704, 50704, 467, 1062, 352, 490, 4018, 281, 4018, 382, 938, 382, 321, 362, 9884, 3197, 264, 2503, 257, 707, 857, 13, 51024, 51024, 467, 14893, 13, 51064, 51064, 865, 13, 51104, 51104, 2264, 13, 51124, 51124, 400, 611, 490, 257, 4195, 311, 935, 295, 1910, 11, 309, 1177, 380, 534, 1871, 439, 300, 709, 1968, 309, 775, 51424, 51424, 257, 1326, 17796, 2857, 13, 51524, 51524, 467, 311, 406, 411, 291, 434, 17746, 23976, 764, 3331, 13, 51744, 51744, 1779, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.14999931335449218, "compression_ratio": 1.5299539170506913, "no_caption_prob": 0.00035687346826307476}, {"id": 510, "seek": 246304, "start": 2476.24, "end": 2477.04, "text": " It counts.", "tokens": [50364, 400, 370, 309, 1062, 352, 490, 472, 281, 4018, 294, 428, 2572, 2158, 13, 50704, 50704, 467, 1062, 352, 490, 4018, 281, 4018, 382, 938, 382, 321, 362, 9884, 3197, 264, 2503, 257, 707, 857, 13, 51024, 51024, 467, 14893, 13, 51064, 51064, 865, 13, 51104, 51104, 2264, 13, 51124, 51124, 400, 611, 490, 257, 4195, 311, 935, 295, 1910, 11, 309, 1177, 380, 534, 1871, 439, 300, 709, 1968, 309, 775, 51424, 51424, 257, 1326, 17796, 2857, 13, 51524, 51524, 467, 311, 406, 411, 291, 434, 17746, 23976, 764, 3331, 13, 51744, 51744, 1779, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.14999931335449218, "compression_ratio": 1.5299539170506913, "no_caption_prob": 0.00035687346826307476}, {"id": 511, "seek": 246304, "start": 2477.04, "end": 2477.84, "text": " Yeah.", "tokens": [50364, 400, 370, 309, 1062, 352, 490, 472, 281, 4018, 294, 428, 2572, 2158, 13, 50704, 50704, 467, 1062, 352, 490, 4018, 281, 4018, 382, 938, 382, 321, 362, 9884, 3197, 264, 2503, 257, 707, 857, 13, 51024, 51024, 467, 14893, 13, 51064, 51064, 865, 13, 51104, 51104, 2264, 13, 51124, 51124, 400, 611, 490, 257, 4195, 311, 935, 295, 1910, 11, 309, 1177, 380, 534, 1871, 439, 300, 709, 1968, 309, 775, 51424, 51424, 257, 1326, 17796, 2857, 13, 51524, 51524, 467, 311, 406, 411, 291, 434, 17746, 23976, 764, 3331, 13, 51744, 51744, 1779, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.14999931335449218, "compression_ratio": 1.5299539170506913, "no_caption_prob": 0.00035687346826307476}, {"id": 512, "seek": 246304, "start": 2477.84, "end": 2478.24, "text": " OK.", "tokens": [50364, 400, 370, 309, 1062, 352, 490, 472, 281, 4018, 294, 428, 2572, 2158, 13, 50704, 50704, 467, 1062, 352, 490, 4018, 281, 4018, 382, 938, 382, 321, 362, 9884, 3197, 264, 2503, 257, 707, 857, 13, 51024, 51024, 467, 14893, 13, 51064, 51064, 865, 13, 51104, 51104, 2264, 13, 51124, 51124, 400, 611, 490, 257, 4195, 311, 935, 295, 1910, 11, 309, 1177, 380, 534, 1871, 439, 300, 709, 1968, 309, 775, 51424, 51424, 257, 1326, 17796, 2857, 13, 51524, 51524, 467, 311, 406, 411, 291, 434, 17746, 23976, 764, 3331, 13, 51744, 51744, 1779, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.14999931335449218, "compression_ratio": 1.5299539170506913, "no_caption_prob": 0.00035687346826307476}, {"id": 513, "seek": 246304, "start": 2478.24, "end": 2484.24, "text": " And also from a user's point of view, it doesn't really matter all that much whether it does", "tokens": [50364, 400, 370, 309, 1062, 352, 490, 472, 281, 4018, 294, 428, 2572, 2158, 13, 50704, 50704, 467, 1062, 352, 490, 4018, 281, 4018, 382, 938, 382, 321, 362, 9884, 3197, 264, 2503, 257, 707, 857, 13, 51024, 51024, 467, 14893, 13, 51064, 51064, 865, 13, 51104, 51104, 2264, 13, 51124, 51124, 400, 611, 490, 257, 4195, 311, 935, 295, 1910, 11, 309, 1177, 380, 534, 1871, 439, 300, 709, 1968, 309, 775, 51424, 51424, 257, 1326, 17796, 2857, 13, 51524, 51524, 467, 311, 406, 411, 291, 434, 17746, 23976, 764, 3331, 13, 51744, 51744, 1779, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.14999931335449218, "compression_ratio": 1.5299539170506913, "no_caption_prob": 0.00035687346826307476}, {"id": 514, "seek": 246304, "start": 2484.24, "end": 2486.24, "text": " a few cycles extra.", "tokens": [50364, 400, 370, 309, 1062, 352, 490, 472, 281, 4018, 294, 428, 2572, 2158, 13, 50704, 50704, 467, 1062, 352, 490, 4018, 281, 4018, 382, 938, 382, 321, 362, 9884, 3197, 264, 2503, 257, 707, 857, 13, 51024, 51024, 467, 14893, 13, 51064, 51064, 865, 13, 51104, 51104, 2264, 13, 51124, 51124, 400, 611, 490, 257, 4195, 311, 935, 295, 1910, 11, 309, 1177, 380, 534, 1871, 439, 300, 709, 1968, 309, 775, 51424, 51424, 257, 1326, 17796, 2857, 13, 51524, 51524, 467, 311, 406, 411, 291, 434, 17746, 23976, 764, 3331, 13, 51744, 51744, 1779, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.14999931335449218, "compression_ratio": 1.5299539170506913, "no_caption_prob": 0.00035687346826307476}, {"id": 515, "seek": 246304, "start": 2486.24, "end": 2490.64, "text": " It's not like you're generating duplicate use cases.", "tokens": [50364, 400, 370, 309, 1062, 352, 490, 472, 281, 4018, 294, 428, 2572, 2158, 13, 50704, 50704, 467, 1062, 352, 490, 4018, 281, 4018, 382, 938, 382, 321, 362, 9884, 3197, 264, 2503, 257, 707, 857, 13, 51024, 51024, 467, 14893, 13, 51064, 51064, 865, 13, 51104, 51104, 2264, 13, 51124, 51124, 400, 611, 490, 257, 4195, 311, 935, 295, 1910, 11, 309, 1177, 380, 534, 1871, 439, 300, 709, 1968, 309, 775, 51424, 51424, 257, 1326, 17796, 2857, 13, 51524, 51524, 467, 311, 406, 411, 291, 434, 17746, 23976, 764, 3331, 13, 51744, 51744, 1779, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.14999931335449218, "compression_ratio": 1.5299539170506913, "no_caption_prob": 0.00035687346826307476}, {"id": 516, "seek": 246304, "start": 2490.64, "end": 2491.04, "text": " Right.", "tokens": [50364, 400, 370, 309, 1062, 352, 490, 472, 281, 4018, 294, 428, 2572, 2158, 13, 50704, 50704, 467, 1062, 352, 490, 4018, 281, 4018, 382, 938, 382, 321, 362, 9884, 3197, 264, 2503, 257, 707, 857, 13, 51024, 51024, 467, 14893, 13, 51064, 51064, 865, 13, 51104, 51104, 2264, 13, 51124, 51124, 400, 611, 490, 257, 4195, 311, 935, 295, 1910, 11, 309, 1177, 380, 534, 1871, 439, 300, 709, 1968, 309, 775, 51424, 51424, 257, 1326, 17796, 2857, 13, 51524, 51524, 467, 311, 406, 411, 291, 434, 17746, 23976, 764, 3331, 13, 51744, 51744, 1779, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.14999931335449218, "compression_ratio": 1.5299539170506913, "no_caption_prob": 0.00035687346826307476}, {"id": 517, "seek": 249104, "start": 2491.04, "end": 2499.44, "text": " Yeah, and with Elm being pure, you don't really care about running functions again and again.", "tokens": [50364, 865, 11, 293, 365, 2699, 76, 885, 6075, 11, 291, 500, 380, 534, 1127, 466, 2614, 6828, 797, 293, 797, 13, 50784, 50784, 2704, 257, 17362, 292, 322, 21156, 260, 11, 457, 485, 51004, 51004, 407, 11, 2264, 11, 291, 2835, 300, 294, 364, 2699, 76, 2443, 3037, 295, 2699, 76, 1500, 11, 456, 645, 613, 293, 550, 293, 51504, 51504, 6608, 6828, 337, 283, 3334, 8781, 13, 51624, 51624], "temperature": 0.0, "avg_logprob": -0.24643166859944662, "compression_ratio": 1.436046511627907, "no_caption_prob": 3.4266147849848494e-05}, {"id": 518, "seek": 249104, "start": 2499.44, "end": 2503.84, "text": " Maybe a mocked on parser, but...", "tokens": [50364, 865, 11, 293, 365, 2699, 76, 885, 6075, 11, 291, 500, 380, 534, 1127, 466, 2614, 6828, 797, 293, 797, 13, 50784, 50784, 2704, 257, 17362, 292, 322, 21156, 260, 11, 457, 485, 51004, 51004, 407, 11, 2264, 11, 291, 2835, 300, 294, 364, 2699, 76, 2443, 3037, 295, 2699, 76, 1500, 11, 456, 645, 613, 293, 550, 293, 51504, 51504, 6608, 6828, 337, 283, 3334, 8781, 13, 51624, 51624], "temperature": 0.0, "avg_logprob": -0.24643166859944662, "compression_ratio": 1.436046511627907, "no_caption_prob": 3.4266147849848494e-05}, {"id": 519, "seek": 249104, "start": 2503.84, "end": 2513.84, "text": " So, OK, you mentioned that in an Elm 18 version of Elm test, there were these and then and", "tokens": [50364, 865, 11, 293, 365, 2699, 76, 885, 6075, 11, 291, 500, 380, 534, 1127, 466, 2614, 6828, 797, 293, 797, 13, 50784, 50784, 2704, 257, 17362, 292, 322, 21156, 260, 11, 457, 485, 51004, 51004, 407, 11, 2264, 11, 291, 2835, 300, 294, 364, 2699, 76, 2443, 3037, 295, 2699, 76, 1500, 11, 456, 645, 613, 293, 550, 293, 51504, 51504, 6608, 6828, 337, 283, 3334, 8781, 13, 51624, 51624], "temperature": 0.0, "avg_logprob": -0.24643166859944662, "compression_ratio": 1.436046511627907, "no_caption_prob": 3.4266147849848494e-05}, {"id": 520, "seek": 249104, "start": 2513.84, "end": 2516.24, "text": " filter functions for fuzzing.", "tokens": [50364, 865, 11, 293, 365, 2699, 76, 885, 6075, 11, 291, 500, 380, 534, 1127, 466, 2614, 6828, 797, 293, 797, 13, 50784, 50784, 2704, 257, 17362, 292, 322, 21156, 260, 11, 457, 485, 51004, 51004, 407, 11, 2264, 11, 291, 2835, 300, 294, 364, 2699, 76, 2443, 3037, 295, 2699, 76, 1500, 11, 456, 645, 613, 293, 550, 293, 51504, 51504, 6608, 6828, 337, 283, 3334, 8781, 13, 51624, 51624], "temperature": 0.0, "avg_logprob": -0.24643166859944662, "compression_ratio": 1.436046511627907, "no_caption_prob": 3.4266147849848494e-05}, {"id": 521, "seek": 251624, "start": 2516.24, "end": 2523.04, "text": " What would have happened if you encountered a failing test from using filter?", "tokens": [50364, 708, 576, 362, 2011, 498, 291, 20381, 257, 18223, 1500, 490, 1228, 6608, 30, 50704, 50704, 286, 478, 406, 988, 498, 411, 17746, 364, 754, 992, 295, 754, 3547, 576, 312, 257, 665, 1365, 295, 50964, 50964, 300, 281, 360, 11, 291, 458, 11, 283, 16740, 13, 686, 293, 550, 6608, 484, 787, 754, 2306, 13, 51224, 51224, 583, 437, 576, 1051, 365, 264, 41684, 498, 291, 645, 281, 764, 729, 365, 264, 4906, 3037, 30, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.07394279837608338, "compression_ratio": 1.558252427184466, "no_caption_prob": 4.8263951612170786e-05}, {"id": 522, "seek": 251624, "start": 2523.04, "end": 2528.24, "text": " I'm not sure if like generating an even set of even numbers would be a good example of", "tokens": [50364, 708, 576, 362, 2011, 498, 291, 20381, 257, 18223, 1500, 490, 1228, 6608, 30, 50704, 50704, 286, 478, 406, 988, 498, 411, 17746, 364, 754, 992, 295, 754, 3547, 576, 312, 257, 665, 1365, 295, 50964, 50964, 300, 281, 360, 11, 291, 458, 11, 283, 16740, 13, 686, 293, 550, 6608, 484, 787, 754, 2306, 13, 51224, 51224, 583, 437, 576, 1051, 365, 264, 41684, 498, 291, 645, 281, 764, 729, 365, 264, 4906, 3037, 30, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.07394279837608338, "compression_ratio": 1.558252427184466, "no_caption_prob": 4.8263951612170786e-05}, {"id": 523, "seek": 251624, "start": 2528.24, "end": 2533.4399999999996, "text": " that to do, you know, fuzz.int and then filter out only even ones.", "tokens": [50364, 708, 576, 362, 2011, 498, 291, 20381, 257, 18223, 1500, 490, 1228, 6608, 30, 50704, 50704, 286, 478, 406, 988, 498, 411, 17746, 364, 754, 992, 295, 754, 3547, 576, 312, 257, 665, 1365, 295, 50964, 50964, 300, 281, 360, 11, 291, 458, 11, 283, 16740, 13, 686, 293, 550, 6608, 484, 787, 754, 2306, 13, 51224, 51224, 583, 437, 576, 1051, 365, 264, 41684, 498, 291, 645, 281, 764, 729, 365, 264, 4906, 3037, 30, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.07394279837608338, "compression_ratio": 1.558252427184466, "no_caption_prob": 4.8263951612170786e-05}, {"id": 524, "seek": 251624, "start": 2533.4399999999996, "end": 2540.24, "text": " But what would happen with the shrinking if you were to use those with the older version?", "tokens": [50364, 708, 576, 362, 2011, 498, 291, 20381, 257, 18223, 1500, 490, 1228, 6608, 30, 50704, 50704, 286, 478, 406, 988, 498, 411, 17746, 364, 754, 992, 295, 754, 3547, 576, 312, 257, 665, 1365, 295, 50964, 50964, 300, 281, 360, 11, 291, 458, 11, 283, 16740, 13, 686, 293, 550, 6608, 484, 787, 754, 2306, 13, 51224, 51224, 583, 437, 576, 1051, 365, 264, 41684, 498, 291, 645, 281, 764, 729, 365, 264, 4906, 3037, 30, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.07394279837608338, "compression_ratio": 1.558252427184466, "no_caption_prob": 4.8263951612170786e-05}, {"id": 525, "seek": 254024, "start": 2540.24, "end": 2549.8399999999997, "text": " So the test would fail with a generated free, let's say, and then it would try to shrink.", "tokens": [50364, 407, 264, 1500, 576, 3061, 365, 257, 10833, 1737, 11, 718, 311, 584, 11, 293, 550, 309, 576, 853, 281, 23060, 13, 50844, 50844, 583, 257, 23060, 260, 2759, 380, 458, 466, 341, 411, 341, 3852, 8700, 11, 558, 11, 300, 291, 645, 30822, 51084, 51084, 538, 13, 51104, 51104, 400, 370, 309, 576, 23060, 281, 257, 2158, 300, 1177, 380, 689, 264, 3852, 8700, 1177, 380, 1797, 13, 51384, 51384, 407, 11, 558, 13, 51444, 51444, 2754, 498, 264, 19265, 576, 1009, 976, 291, 411, 472, 11, 1045, 11, 1732, 11, 3407, 11, 934, 41684, 51744, 51744, 291, 727, 483, 309, 281, 13, 51804, 51804], "temperature": 0.0, "avg_logprob": -0.1852487634729456, "compression_ratio": 1.7168141592920354, "no_caption_prob": 4.133155380259268e-05}, {"id": 526, "seek": 254024, "start": 2549.8399999999997, "end": 2554.64, "text": " But a shrinker wouldn't know about this like this predicate, right, that you were filtering", "tokens": [50364, 407, 264, 1500, 576, 3061, 365, 257, 10833, 1737, 11, 718, 311, 584, 11, 293, 550, 309, 576, 853, 281, 23060, 13, 50844, 50844, 583, 257, 23060, 260, 2759, 380, 458, 466, 341, 411, 341, 3852, 8700, 11, 558, 11, 300, 291, 645, 30822, 51084, 51084, 538, 13, 51104, 51104, 400, 370, 309, 576, 23060, 281, 257, 2158, 300, 1177, 380, 689, 264, 3852, 8700, 1177, 380, 1797, 13, 51384, 51384, 407, 11, 558, 13, 51444, 51444, 2754, 498, 264, 19265, 576, 1009, 976, 291, 411, 472, 11, 1045, 11, 1732, 11, 3407, 11, 934, 41684, 51744, 51744, 291, 727, 483, 309, 281, 13, 51804, 51804], "temperature": 0.0, "avg_logprob": -0.1852487634729456, "compression_ratio": 1.7168141592920354, "no_caption_prob": 4.133155380259268e-05}, {"id": 527, "seek": 254024, "start": 2554.64, "end": 2555.04, "text": " by.", "tokens": [50364, 407, 264, 1500, 576, 3061, 365, 257, 10833, 1737, 11, 718, 311, 584, 11, 293, 550, 309, 576, 853, 281, 23060, 13, 50844, 50844, 583, 257, 23060, 260, 2759, 380, 458, 466, 341, 411, 341, 3852, 8700, 11, 558, 11, 300, 291, 645, 30822, 51084, 51084, 538, 13, 51104, 51104, 400, 370, 309, 576, 23060, 281, 257, 2158, 300, 1177, 380, 689, 264, 3852, 8700, 1177, 380, 1797, 13, 51384, 51384, 407, 11, 558, 13, 51444, 51444, 2754, 498, 264, 19265, 576, 1009, 976, 291, 411, 472, 11, 1045, 11, 1732, 11, 3407, 11, 934, 41684, 51744, 51744, 291, 727, 483, 309, 281, 13, 51804, 51804], "temperature": 0.0, "avg_logprob": -0.1852487634729456, "compression_ratio": 1.7168141592920354, "no_caption_prob": 4.133155380259268e-05}, {"id": 528, "seek": 254024, "start": 2555.04, "end": 2560.64, "text": " And so it would shrink to a value that doesn't where the predicate doesn't hold.", "tokens": [50364, 407, 264, 1500, 576, 3061, 365, 257, 10833, 1737, 11, 718, 311, 584, 11, 293, 550, 309, 576, 853, 281, 23060, 13, 50844, 50844, 583, 257, 23060, 260, 2759, 380, 458, 466, 341, 411, 341, 3852, 8700, 11, 558, 11, 300, 291, 645, 30822, 51084, 51084, 538, 13, 51104, 51104, 400, 370, 309, 576, 23060, 281, 257, 2158, 300, 1177, 380, 689, 264, 3852, 8700, 1177, 380, 1797, 13, 51384, 51384, 407, 11, 558, 13, 51444, 51444, 2754, 498, 264, 19265, 576, 1009, 976, 291, 411, 472, 11, 1045, 11, 1732, 11, 3407, 11, 934, 41684, 51744, 51744, 291, 727, 483, 309, 281, 13, 51804, 51804], "temperature": 0.0, "avg_logprob": -0.1852487634729456, "compression_ratio": 1.7168141592920354, "no_caption_prob": 4.133155380259268e-05}, {"id": 529, "seek": 254024, "start": 2560.64, "end": 2561.8399999999997, "text": " So, right.", "tokens": [50364, 407, 264, 1500, 576, 3061, 365, 257, 10833, 1737, 11, 718, 311, 584, 11, 293, 550, 309, 576, 853, 281, 23060, 13, 50844, 50844, 583, 257, 23060, 260, 2759, 380, 458, 466, 341, 411, 341, 3852, 8700, 11, 558, 11, 300, 291, 645, 30822, 51084, 51084, 538, 13, 51104, 51104, 400, 370, 309, 576, 23060, 281, 257, 2158, 300, 1177, 380, 689, 264, 3852, 8700, 1177, 380, 1797, 13, 51384, 51384, 407, 11, 558, 13, 51444, 51444, 2754, 498, 264, 19265, 576, 1009, 976, 291, 411, 472, 11, 1045, 11, 1732, 11, 3407, 11, 934, 41684, 51744, 51744, 291, 727, 483, 309, 281, 13, 51804, 51804], "temperature": 0.0, "avg_logprob": -0.1852487634729456, "compression_ratio": 1.7168141592920354, "no_caption_prob": 4.133155380259268e-05}, {"id": 530, "seek": 254024, "start": 2561.8399999999997, "end": 2567.8399999999997, "text": " Even if the generator would always give you like one, three, five, seven, after shrinking", "tokens": [50364, 407, 264, 1500, 576, 3061, 365, 257, 10833, 1737, 11, 718, 311, 584, 11, 293, 550, 309, 576, 853, 281, 23060, 13, 50844, 50844, 583, 257, 23060, 260, 2759, 380, 458, 466, 341, 411, 341, 3852, 8700, 11, 558, 11, 300, 291, 645, 30822, 51084, 51084, 538, 13, 51104, 51104, 400, 370, 309, 576, 23060, 281, 257, 2158, 300, 1177, 380, 689, 264, 3852, 8700, 1177, 380, 1797, 13, 51384, 51384, 407, 11, 558, 13, 51444, 51444, 2754, 498, 264, 19265, 576, 1009, 976, 291, 411, 472, 11, 1045, 11, 1732, 11, 3407, 11, 934, 41684, 51744, 51744, 291, 727, 483, 309, 281, 13, 51804, 51804], "temperature": 0.0, "avg_logprob": -0.1852487634729456, "compression_ratio": 1.7168141592920354, "no_caption_prob": 4.133155380259268e-05}, {"id": 531, "seek": 254024, "start": 2567.8399999999997, "end": 2569.04, "text": " you could get it to.", "tokens": [50364, 407, 264, 1500, 576, 3061, 365, 257, 10833, 1737, 11, 718, 311, 584, 11, 293, 550, 309, 576, 853, 281, 23060, 13, 50844, 50844, 583, 257, 23060, 260, 2759, 380, 458, 466, 341, 411, 341, 3852, 8700, 11, 558, 11, 300, 291, 645, 30822, 51084, 51084, 538, 13, 51104, 51104, 400, 370, 309, 576, 23060, 281, 257, 2158, 300, 1177, 380, 689, 264, 3852, 8700, 1177, 380, 1797, 13, 51384, 51384, 407, 11, 558, 13, 51444, 51444, 2754, 498, 264, 19265, 576, 1009, 976, 291, 411, 472, 11, 1045, 11, 1732, 11, 3407, 11, 934, 41684, 51744, 51744, 291, 727, 483, 309, 281, 13, 51804, 51804], "temperature": 0.0, "avg_logprob": -0.1852487634729456, "compression_ratio": 1.7168141592920354, "no_caption_prob": 4.133155380259268e-05}, {"id": 532, "seek": 256904, "start": 2569.04, "end": 2571.04, "text": " And that's not very helpful, right?", "tokens": [50364, 400, 300, 311, 406, 588, 4961, 11, 558, 30, 50464, 50464, 1436, 291, 787, 19779, 466, 264, 661, 1508, 295, 4190, 13, 50744, 50744, 663, 1669, 2020, 13, 50784, 50784, 286, 519, 286, 9901, 1382, 281, 360, 512, 1154, 411, 341, 11, 286, 519, 365, 2699, 76, 1294, 11, 8593, 278, 51204, 51204, 746, 689, 286, 632, 281, 312, 5026, 406, 281, 1884, 411, 364, 517, 495, 401, 17915, 23060, 260, 420, 746, 51524, 51524, 689, 286, 727, 7263, 1190, 484, 295, 721, 281, 853, 293, 550, 445, 11, 291, 458, 11, 445, 1190, 484, 51844, 51844], "temperature": 0.0, "avg_logprob": -0.1678193024914674, "compression_ratio": 1.5791666666666666, "no_caption_prob": 0.00015841855201870203}, {"id": 533, "seek": 256904, "start": 2571.04, "end": 2576.64, "text": " Because you only cared about the other class of values.", "tokens": [50364, 400, 300, 311, 406, 588, 4961, 11, 558, 30, 50464, 50464, 1436, 291, 787, 19779, 466, 264, 661, 1508, 295, 4190, 13, 50744, 50744, 663, 1669, 2020, 13, 50784, 50784, 286, 519, 286, 9901, 1382, 281, 360, 512, 1154, 411, 341, 11, 286, 519, 365, 2699, 76, 1294, 11, 8593, 278, 51204, 51204, 746, 689, 286, 632, 281, 312, 5026, 406, 281, 1884, 411, 364, 517, 495, 401, 17915, 23060, 260, 420, 746, 51524, 51524, 689, 286, 727, 7263, 1190, 484, 295, 721, 281, 853, 293, 550, 445, 11, 291, 458, 11, 445, 1190, 484, 51844, 51844], "temperature": 0.0, "avg_logprob": -0.1678193024914674, "compression_ratio": 1.5791666666666666, "no_caption_prob": 0.00015841855201870203}, {"id": 534, "seek": 256904, "start": 2576.64, "end": 2577.44, "text": " That makes sense.", "tokens": [50364, 400, 300, 311, 406, 588, 4961, 11, 558, 30, 50464, 50464, 1436, 291, 787, 19779, 466, 264, 661, 1508, 295, 4190, 13, 50744, 50744, 663, 1669, 2020, 13, 50784, 50784, 286, 519, 286, 9901, 1382, 281, 360, 512, 1154, 411, 341, 11, 286, 519, 365, 2699, 76, 1294, 11, 8593, 278, 51204, 51204, 746, 689, 286, 632, 281, 312, 5026, 406, 281, 1884, 411, 364, 517, 495, 401, 17915, 23060, 260, 420, 746, 51524, 51524, 689, 286, 727, 7263, 1190, 484, 295, 721, 281, 853, 293, 550, 445, 11, 291, 458, 11, 445, 1190, 484, 51844, 51844], "temperature": 0.0, "avg_logprob": -0.1678193024914674, "compression_ratio": 1.5791666666666666, "no_caption_prob": 0.00015841855201870203}, {"id": 535, "seek": 256904, "start": 2577.44, "end": 2585.84, "text": " I think I recall trying to do some problem like this, I think with Elm 19, encountering", "tokens": [50364, 400, 300, 311, 406, 588, 4961, 11, 558, 30, 50464, 50464, 1436, 291, 787, 19779, 466, 264, 661, 1508, 295, 4190, 13, 50744, 50744, 663, 1669, 2020, 13, 50784, 50784, 286, 519, 286, 9901, 1382, 281, 360, 512, 1154, 411, 341, 11, 286, 519, 365, 2699, 76, 1294, 11, 8593, 278, 51204, 51204, 746, 689, 286, 632, 281, 312, 5026, 406, 281, 1884, 411, 364, 517, 495, 401, 17915, 23060, 260, 420, 746, 51524, 51524, 689, 286, 727, 7263, 1190, 484, 295, 721, 281, 853, 293, 550, 445, 11, 291, 458, 11, 445, 1190, 484, 51844, 51844], "temperature": 0.0, "avg_logprob": -0.1678193024914674, "compression_ratio": 1.5791666666666666, "no_caption_prob": 0.00015841855201870203}, {"id": 536, "seek": 256904, "start": 2585.84, "end": 2592.24, "text": " something where I had to be careful not to create like an unresolvable shrinker or something", "tokens": [50364, 400, 300, 311, 406, 588, 4961, 11, 558, 30, 50464, 50464, 1436, 291, 787, 19779, 466, 264, 661, 1508, 295, 4190, 13, 50744, 50744, 663, 1669, 2020, 13, 50784, 50784, 286, 519, 286, 9901, 1382, 281, 360, 512, 1154, 411, 341, 11, 286, 519, 365, 2699, 76, 1294, 11, 8593, 278, 51204, 51204, 746, 689, 286, 632, 281, 312, 5026, 406, 281, 1884, 411, 364, 517, 495, 401, 17915, 23060, 260, 420, 746, 51524, 51524, 689, 286, 727, 7263, 1190, 484, 295, 721, 281, 853, 293, 550, 445, 11, 291, 458, 11, 445, 1190, 484, 51844, 51844], "temperature": 0.0, "avg_logprob": -0.1678193024914674, "compression_ratio": 1.5791666666666666, "no_caption_prob": 0.00015841855201870203}, {"id": 537, "seek": 256904, "start": 2592.24, "end": 2598.64, "text": " where I could potentially run out of things to try and then just, you know, just run out", "tokens": [50364, 400, 300, 311, 406, 588, 4961, 11, 558, 30, 50464, 50464, 1436, 291, 787, 19779, 466, 264, 661, 1508, 295, 4190, 13, 50744, 50744, 663, 1669, 2020, 13, 50784, 50784, 286, 519, 286, 9901, 1382, 281, 360, 512, 1154, 411, 341, 11, 286, 519, 365, 2699, 76, 1294, 11, 8593, 278, 51204, 51204, 746, 689, 286, 632, 281, 312, 5026, 406, 281, 1884, 411, 364, 517, 495, 401, 17915, 23060, 260, 420, 746, 51524, 51524, 689, 286, 727, 7263, 1190, 484, 295, 721, 281, 853, 293, 550, 445, 11, 291, 458, 11, 445, 1190, 484, 51844, 51844], "temperature": 0.0, "avg_logprob": -0.1678193024914674, "compression_ratio": 1.5791666666666666, "no_caption_prob": 0.00015841855201870203}, {"id": 538, "seek": 259864, "start": 2598.64, "end": 2601.04, "text": " and just hang or crash.", "tokens": [50364, 293, 445, 3967, 420, 8252, 13, 50484, 50484, 865, 11, 300, 311, 588, 709, 920, 411, 364, 2734, 300, 291, 393, 1190, 666, 365, 264, 2699, 76, 1500, 691, 17, 50944, 50944, 570, 300, 311, 445, 411, 11, 291, 458, 11, 300, 311, 445, 577, 6608, 1985, 13, 51144, 51144, 759, 291, 8460, 754, 4190, 293, 550, 6608, 729, 281, 787, 1066, 7401, 4190, 11, 291, 366, 1128, 51504, 51504, 516, 281, 536, 257, 2158, 11, 558, 30, 51584, 51584, 400, 370, 309, 727, 44920, 6060, 13, 51724, 51724], "temperature": 0.0, "avg_logprob": -0.13020926255446214, "compression_ratio": 1.5402843601895735, "no_caption_prob": 2.796636545099318e-05}, {"id": 539, "seek": 259864, "start": 2601.04, "end": 2610.24, "text": " Yeah, that's very much still like an issue that you can run into with the Elm test V2", "tokens": [50364, 293, 445, 3967, 420, 8252, 13, 50484, 50484, 865, 11, 300, 311, 588, 709, 920, 411, 364, 2734, 300, 291, 393, 1190, 666, 365, 264, 2699, 76, 1500, 691, 17, 50944, 50944, 570, 300, 311, 445, 411, 11, 291, 458, 11, 300, 311, 445, 577, 6608, 1985, 13, 51144, 51144, 759, 291, 8460, 754, 4190, 293, 550, 6608, 729, 281, 787, 1066, 7401, 4190, 11, 291, 366, 1128, 51504, 51504, 516, 281, 536, 257, 2158, 11, 558, 30, 51584, 51584, 400, 370, 309, 727, 44920, 6060, 13, 51724, 51724], "temperature": 0.0, "avg_logprob": -0.13020926255446214, "compression_ratio": 1.5402843601895735, "no_caption_prob": 2.796636545099318e-05}, {"id": 540, "seek": 259864, "start": 2610.24, "end": 2614.24, "text": " because that's just like, you know, that's just how filter works.", "tokens": [50364, 293, 445, 3967, 420, 8252, 13, 50484, 50484, 865, 11, 300, 311, 588, 709, 920, 411, 364, 2734, 300, 291, 393, 1190, 666, 365, 264, 2699, 76, 1500, 691, 17, 50944, 50944, 570, 300, 311, 445, 411, 11, 291, 458, 11, 300, 311, 445, 577, 6608, 1985, 13, 51144, 51144, 759, 291, 8460, 754, 4190, 293, 550, 6608, 729, 281, 787, 1066, 7401, 4190, 11, 291, 366, 1128, 51504, 51504, 516, 281, 536, 257, 2158, 11, 558, 30, 51584, 51584, 400, 370, 309, 727, 44920, 6060, 13, 51724, 51724], "temperature": 0.0, "avg_logprob": -0.13020926255446214, "compression_ratio": 1.5402843601895735, "no_caption_prob": 2.796636545099318e-05}, {"id": 541, "seek": 259864, "start": 2614.24, "end": 2621.44, "text": " If you generate even values and then filter those to only keep odd values, you are never", "tokens": [50364, 293, 445, 3967, 420, 8252, 13, 50484, 50484, 865, 11, 300, 311, 588, 709, 920, 411, 364, 2734, 300, 291, 393, 1190, 666, 365, 264, 2699, 76, 1500, 691, 17, 50944, 50944, 570, 300, 311, 445, 411, 11, 291, 458, 11, 300, 311, 445, 577, 6608, 1985, 13, 51144, 51144, 759, 291, 8460, 754, 4190, 293, 550, 6608, 729, 281, 787, 1066, 7401, 4190, 11, 291, 366, 1128, 51504, 51504, 516, 281, 536, 257, 2158, 11, 558, 30, 51584, 51584, 400, 370, 309, 727, 44920, 6060, 13, 51724, 51724], "temperature": 0.0, "avg_logprob": -0.13020926255446214, "compression_ratio": 1.5402843601895735, "no_caption_prob": 2.796636545099318e-05}, {"id": 542, "seek": 259864, "start": 2621.44, "end": 2623.04, "text": " going to see a value, right?", "tokens": [50364, 293, 445, 3967, 420, 8252, 13, 50484, 50484, 865, 11, 300, 311, 588, 709, 920, 411, 364, 2734, 300, 291, 393, 1190, 666, 365, 264, 2699, 76, 1500, 691, 17, 50944, 50944, 570, 300, 311, 445, 411, 11, 291, 458, 11, 300, 311, 445, 577, 6608, 1985, 13, 51144, 51144, 759, 291, 8460, 754, 4190, 293, 550, 6608, 729, 281, 787, 1066, 7401, 4190, 11, 291, 366, 1128, 51504, 51504, 516, 281, 536, 257, 2158, 11, 558, 30, 51584, 51584, 400, 370, 309, 727, 44920, 6060, 13, 51724, 51724], "temperature": 0.0, "avg_logprob": -0.13020926255446214, "compression_ratio": 1.5402843601895735, "no_caption_prob": 2.796636545099318e-05}, {"id": 543, "seek": 259864, "start": 2623.04, "end": 2625.8399999999997, "text": " And so it could endlessly spin.", "tokens": [50364, 293, 445, 3967, 420, 8252, 13, 50484, 50484, 865, 11, 300, 311, 588, 709, 920, 411, 364, 2734, 300, 291, 393, 1190, 666, 365, 264, 2699, 76, 1500, 691, 17, 50944, 50944, 570, 300, 311, 445, 411, 11, 291, 458, 11, 300, 311, 445, 577, 6608, 1985, 13, 51144, 51144, 759, 291, 8460, 754, 4190, 293, 550, 6608, 729, 281, 787, 1066, 7401, 4190, 11, 291, 366, 1128, 51504, 51504, 516, 281, 536, 257, 2158, 11, 558, 30, 51584, 51584, 400, 370, 309, 727, 44920, 6060, 13, 51724, 51724], "temperature": 0.0, "avg_logprob": -0.13020926255446214, "compression_ratio": 1.5402843601895735, "no_caption_prob": 2.796636545099318e-05}, {"id": 544, "seek": 262584, "start": 2625.84, "end": 2635.04, "text": " We are, I think the implementation that got merged has like 15 tries and after 15 tries,", "tokens": [50364, 492, 366, 11, 286, 519, 264, 11420, 300, 658, 36427, 575, 411, 2119, 9898, 293, 934, 2119, 9898, 11, 50824, 50824, 309, 445, 1619, 309, 311, 6243, 281, 8460, 257, 2158, 300, 576, 689, 341, 6608, 576, 1797, 13, 51144, 51144, 407, 321, 445, 976, 493, 13, 51204, 51204, 400, 370, 11, 1338, 11, 321, 366, 411, 5127, 34474, 20774, 666, 411, 264, 14573, 1002, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.16873110362461635, "compression_ratio": 1.4656084656084656, "no_caption_prob": 2.4285351173602976e-05}, {"id": 545, "seek": 262584, "start": 2635.04, "end": 2641.44, "text": " it just says it's impossible to generate a value that would where this filter would hold.", "tokens": [50364, 492, 366, 11, 286, 519, 264, 11420, 300, 658, 36427, 575, 411, 2119, 9898, 293, 934, 2119, 9898, 11, 50824, 50824, 309, 445, 1619, 309, 311, 6243, 281, 8460, 257, 2158, 300, 576, 689, 341, 6608, 576, 1797, 13, 51144, 51144, 407, 321, 445, 976, 493, 13, 51204, 51204, 400, 370, 11, 1338, 11, 321, 366, 411, 5127, 34474, 20774, 666, 411, 264, 14573, 1002, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.16873110362461635, "compression_ratio": 1.4656084656084656, "no_caption_prob": 2.4285351173602976e-05}, {"id": 546, "seek": 262584, "start": 2641.44, "end": 2642.6400000000003, "text": " So we just give up.", "tokens": [50364, 492, 366, 11, 286, 519, 264, 11420, 300, 658, 36427, 575, 411, 2119, 9898, 293, 934, 2119, 9898, 11, 50824, 50824, 309, 445, 1619, 309, 311, 6243, 281, 8460, 257, 2158, 300, 576, 689, 341, 6608, 576, 1797, 13, 51144, 51144, 407, 321, 445, 976, 493, 13, 51204, 51204, 400, 370, 11, 1338, 11, 321, 366, 411, 5127, 34474, 20774, 666, 411, 264, 14573, 1002, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.16873110362461635, "compression_ratio": 1.4656084656084656, "no_caption_prob": 2.4285351173602976e-05}, {"id": 547, "seek": 262584, "start": 2642.6400000000003, "end": 2653.84, "text": " And so, yeah, we are like adding runtime failures into like the fastest world.", "tokens": [50364, 492, 366, 11, 286, 519, 264, 11420, 300, 658, 36427, 575, 411, 2119, 9898, 293, 934, 2119, 9898, 11, 50824, 50824, 309, 445, 1619, 309, 311, 6243, 281, 8460, 257, 2158, 300, 576, 689, 341, 6608, 576, 1797, 13, 51144, 51144, 407, 321, 445, 976, 493, 13, 51204, 51204, 400, 370, 11, 1338, 11, 321, 366, 411, 5127, 34474, 20774, 666, 411, 264, 14573, 1002, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.16873110362461635, "compression_ratio": 1.4656084656084656, "no_caption_prob": 2.4285351173602976e-05}, {"id": 548, "seek": 265384, "start": 2653.84, "end": 2659.84, "text": " I don't know how to say it, but with Elm test V1, you couldn't filter.", "tokens": [50364, 286, 500, 380, 458, 577, 281, 584, 309, 11, 457, 365, 2699, 76, 1500, 691, 16, 11, 291, 2809, 380, 6608, 13, 50664, 50664, 400, 370, 291, 2809, 380, 534, 362, 341, 1508, 295, 13603, 11, 558, 30, 50904, 50904, 583, 558, 586, 291, 393, 13, 51004, 51004, 400, 300, 311, 11, 286, 519, 309, 311, 257, 665, 1547, 18577, 281, 362, 613, 13603, 498, 321, 483, 264, 917, 550, 51504, 51504, 2445, 294, 2736, 13, 51684, 51684], "temperature": 0.0, "avg_logprob": -0.1293189287185669, "compression_ratio": 1.4725274725274726, "no_caption_prob": 1.67009584401967e-05}, {"id": 549, "seek": 265384, "start": 2659.84, "end": 2664.6400000000003, "text": " And so you couldn't really have this class of errors, right?", "tokens": [50364, 286, 500, 380, 458, 577, 281, 584, 309, 11, 457, 365, 2699, 76, 1500, 691, 16, 11, 291, 2809, 380, 6608, 13, 50664, 50664, 400, 370, 291, 2809, 380, 534, 362, 341, 1508, 295, 13603, 11, 558, 30, 50904, 50904, 583, 558, 586, 291, 393, 13, 51004, 51004, 400, 300, 311, 11, 286, 519, 309, 311, 257, 665, 1547, 18577, 281, 362, 613, 13603, 498, 321, 483, 264, 917, 550, 51504, 51504, 2445, 294, 2736, 13, 51684, 51684], "temperature": 0.0, "avg_logprob": -0.1293189287185669, "compression_ratio": 1.4725274725274726, "no_caption_prob": 1.67009584401967e-05}, {"id": 550, "seek": 265384, "start": 2664.6400000000003, "end": 2666.6400000000003, "text": " But right now you can.", "tokens": [50364, 286, 500, 380, 458, 577, 281, 584, 309, 11, 457, 365, 2699, 76, 1500, 691, 16, 11, 291, 2809, 380, 6608, 13, 50664, 50664, 400, 370, 291, 2809, 380, 534, 362, 341, 1508, 295, 13603, 11, 558, 30, 50904, 50904, 583, 558, 586, 291, 393, 13, 51004, 51004, 400, 300, 311, 11, 286, 519, 309, 311, 257, 665, 1547, 18577, 281, 362, 613, 13603, 498, 321, 483, 264, 917, 550, 51504, 51504, 2445, 294, 2736, 13, 51684, 51684], "temperature": 0.0, "avg_logprob": -0.1293189287185669, "compression_ratio": 1.4725274725274726, "no_caption_prob": 1.67009584401967e-05}, {"id": 551, "seek": 265384, "start": 2666.6400000000003, "end": 2676.6400000000003, "text": " And that's, I think it's a good enough compromise to have these errors if we get the end then", "tokens": [50364, 286, 500, 380, 458, 577, 281, 584, 309, 11, 457, 365, 2699, 76, 1500, 691, 16, 11, 291, 2809, 380, 6608, 13, 50664, 50664, 400, 370, 291, 2809, 380, 534, 362, 341, 1508, 295, 13603, 11, 558, 30, 50904, 50904, 583, 558, 586, 291, 393, 13, 51004, 51004, 400, 300, 311, 11, 286, 519, 309, 311, 257, 665, 1547, 18577, 281, 362, 613, 13603, 498, 321, 483, 264, 917, 550, 51504, 51504, 2445, 294, 2736, 13, 51684, 51684], "temperature": 0.0, "avg_logprob": -0.1293189287185669, "compression_ratio": 1.4725274725274726, "no_caption_prob": 1.67009584401967e-05}, {"id": 552, "seek": 265384, "start": 2676.6400000000003, "end": 2680.2400000000002, "text": " function in return.", "tokens": [50364, 286, 500, 380, 458, 577, 281, 584, 309, 11, 457, 365, 2699, 76, 1500, 691, 16, 11, 291, 2809, 380, 6608, 13, 50664, 50664, 400, 370, 291, 2809, 380, 534, 362, 341, 1508, 295, 13603, 11, 558, 30, 50904, 50904, 583, 558, 586, 291, 393, 13, 51004, 51004, 400, 300, 311, 11, 286, 519, 309, 311, 257, 665, 1547, 18577, 281, 362, 613, 13603, 498, 321, 483, 264, 917, 550, 51504, 51504, 2445, 294, 2736, 13, 51684, 51684], "temperature": 0.0, "avg_logprob": -0.1293189287185669, "compression_ratio": 1.4725274725274726, "no_caption_prob": 1.67009584401967e-05}, {"id": 553, "seek": 268024, "start": 2680.24, "end": 2688.24, "text": " So the type based shrinking, it's looking at the actual values before it shrinks the", "tokens": [50364, 407, 264, 2010, 2361, 41684, 11, 309, 311, 1237, 412, 264, 3539, 4190, 949, 309, 9884, 16431, 264, 50764, 50764, 1874, 11, 597, 576, 914, 411, 498, 291, 584, 283, 16740, 13, 686, 11, 309, 311, 41684, 729, 560, 82, 13, 51084, 51084, 400, 550, 498, 291, 360, 283, 16740, 13, 24223, 11, 291, 458, 11, 291, 434, 18350, 264, 4190, 11, 457, 309, 9884, 657, 552, 949, 51344, 51344, 309, 2729, 552, 281, 291, 281, 4471, 13, 51424, 51424, 13813, 365, 264, 485, 51484, 51484], "temperature": 0.0, "avg_logprob": -0.10427715561606667, "compression_ratio": 1.6236559139784945, "no_caption_prob": 7.5277216637914535e-06}, {"id": 554, "seek": 268024, "start": 2688.24, "end": 2694.64, "text": " result, which would mean like if you say fuzz.int, it's shrinking those ints.", "tokens": [50364, 407, 264, 2010, 2361, 41684, 11, 309, 311, 1237, 412, 264, 3539, 4190, 949, 309, 9884, 16431, 264, 50764, 50764, 1874, 11, 597, 576, 914, 411, 498, 291, 584, 283, 16740, 13, 686, 11, 309, 311, 41684, 729, 560, 82, 13, 51084, 51084, 400, 550, 498, 291, 360, 283, 16740, 13, 24223, 11, 291, 458, 11, 291, 434, 18350, 264, 4190, 11, 457, 309, 9884, 657, 552, 949, 51344, 51344, 309, 2729, 552, 281, 291, 281, 4471, 13, 51424, 51424, 13813, 365, 264, 485, 51484, 51484], "temperature": 0.0, "avg_logprob": -0.10427715561606667, "compression_ratio": 1.6236559139784945, "no_caption_prob": 7.5277216637914535e-06}, {"id": 555, "seek": 268024, "start": 2694.64, "end": 2699.8399999999997, "text": " And then if you do fuzz.map, you know, you're mapping the values, but it shrank them before", "tokens": [50364, 407, 264, 2010, 2361, 41684, 11, 309, 311, 1237, 412, 264, 3539, 4190, 949, 309, 9884, 16431, 264, 50764, 50764, 1874, 11, 597, 576, 914, 411, 498, 291, 584, 283, 16740, 13, 686, 11, 309, 311, 41684, 729, 560, 82, 13, 51084, 51084, 400, 550, 498, 291, 360, 283, 16740, 13, 24223, 11, 291, 458, 11, 291, 434, 18350, 264, 4190, 11, 457, 309, 9884, 657, 552, 949, 51344, 51344, 309, 2729, 552, 281, 291, 281, 4471, 13, 51424, 51424, 13813, 365, 264, 485, 51484, 51484], "temperature": 0.0, "avg_logprob": -0.10427715561606667, "compression_ratio": 1.6236559139784945, "no_caption_prob": 7.5277216637914535e-06}, {"id": 556, "seek": 268024, "start": 2699.8399999999997, "end": 2701.4399999999996, "text": " it gave them to you to map.", "tokens": [50364, 407, 264, 2010, 2361, 41684, 11, 309, 311, 1237, 412, 264, 3539, 4190, 949, 309, 9884, 16431, 264, 50764, 50764, 1874, 11, 597, 576, 914, 411, 498, 291, 584, 283, 16740, 13, 686, 11, 309, 311, 41684, 729, 560, 82, 13, 51084, 51084, 400, 550, 498, 291, 360, 283, 16740, 13, 24223, 11, 291, 458, 11, 291, 434, 18350, 264, 4190, 11, 457, 309, 9884, 657, 552, 949, 51344, 51344, 309, 2729, 552, 281, 291, 281, 4471, 13, 51424, 51424, 13813, 365, 264, 485, 51484, 51484], "temperature": 0.0, "avg_logprob": -0.10427715561606667, "compression_ratio": 1.6236559139784945, "no_caption_prob": 7.5277216637914535e-06}, {"id": 557, "seek": 268024, "start": 2701.4399999999996, "end": 2702.64, "text": " Whereas with the...", "tokens": [50364, 407, 264, 2010, 2361, 41684, 11, 309, 311, 1237, 412, 264, 3539, 4190, 949, 309, 9884, 16431, 264, 50764, 50764, 1874, 11, 597, 576, 914, 411, 498, 291, 584, 283, 16740, 13, 686, 11, 309, 311, 41684, 729, 560, 82, 13, 51084, 51084, 400, 550, 498, 291, 360, 283, 16740, 13, 24223, 11, 291, 458, 11, 291, 434, 18350, 264, 4190, 11, 457, 309, 9884, 657, 552, 949, 51344, 51344, 309, 2729, 552, 281, 291, 281, 4471, 13, 51424, 51424, 13813, 365, 264, 485, 51484, 51484], "temperature": 0.0, "avg_logprob": -0.10427715561606667, "compression_ratio": 1.6236559139784945, "no_caption_prob": 7.5277216637914535e-06}, {"id": 558, "seek": 270264, "start": 2702.64, "end": 2711.44, "text": " Well, no, in the value based shrinking approach, it shrinks after everything is generated and", "tokens": [50364, 1042, 11, 572, 11, 294, 264, 2158, 2361, 41684, 3109, 11, 309, 9884, 16431, 934, 1203, 307, 10833, 293, 50804, 50804, 33318, 293, 37111, 13, 50904, 50904, 286, 536, 13, 50924, 50924, 407, 498, 291, 4471, 309, 11, 309, 9884, 16431, 2361, 322, 264, 3539, 33318, 2158, 13, 51164, 51164, 865, 11, 309, 9884, 16431, 558, 412, 264, 917, 295, 1203, 13, 51404, 51404, 708, 498, 291, 4471, 309, 281, 257, 819, 2010, 30, 51484, 51484, 1012, 775, 309, 458, 577, 281, 23060, 300, 30, 51624, 51624, 1407, 257, 819, 2010, 11, 994, 380, 309, 30, 51704, 51704, 467, 311, 1009, 516, 281, 312, 264, 912, 2010, 13, 51784, 51784], "temperature": 0.0, "avg_logprob": -0.10357466765812465, "compression_ratio": 1.7557603686635945, "no_caption_prob": 1.2029345271002967e-05}, {"id": 559, "seek": 270264, "start": 2711.44, "end": 2713.44, "text": " mapped and filtered.", "tokens": [50364, 1042, 11, 572, 11, 294, 264, 2158, 2361, 41684, 3109, 11, 309, 9884, 16431, 934, 1203, 307, 10833, 293, 50804, 50804, 33318, 293, 37111, 13, 50904, 50904, 286, 536, 13, 50924, 50924, 407, 498, 291, 4471, 309, 11, 309, 9884, 16431, 2361, 322, 264, 3539, 33318, 2158, 13, 51164, 51164, 865, 11, 309, 9884, 16431, 558, 412, 264, 917, 295, 1203, 13, 51404, 51404, 708, 498, 291, 4471, 309, 281, 257, 819, 2010, 30, 51484, 51484, 1012, 775, 309, 458, 577, 281, 23060, 300, 30, 51624, 51624, 1407, 257, 819, 2010, 11, 994, 380, 309, 30, 51704, 51704, 467, 311, 1009, 516, 281, 312, 264, 912, 2010, 13, 51784, 51784], "temperature": 0.0, "avg_logprob": -0.10357466765812465, "compression_ratio": 1.7557603686635945, "no_caption_prob": 1.2029345271002967e-05}, {"id": 560, "seek": 270264, "start": 2713.44, "end": 2713.8399999999997, "text": " I see.", "tokens": [50364, 1042, 11, 572, 11, 294, 264, 2158, 2361, 41684, 3109, 11, 309, 9884, 16431, 934, 1203, 307, 10833, 293, 50804, 50804, 33318, 293, 37111, 13, 50904, 50904, 286, 536, 13, 50924, 50924, 407, 498, 291, 4471, 309, 11, 309, 9884, 16431, 2361, 322, 264, 3539, 33318, 2158, 13, 51164, 51164, 865, 11, 309, 9884, 16431, 558, 412, 264, 917, 295, 1203, 13, 51404, 51404, 708, 498, 291, 4471, 309, 281, 257, 819, 2010, 30, 51484, 51484, 1012, 775, 309, 458, 577, 281, 23060, 300, 30, 51624, 51624, 1407, 257, 819, 2010, 11, 994, 380, 309, 30, 51704, 51704, 467, 311, 1009, 516, 281, 312, 264, 912, 2010, 13, 51784, 51784], "temperature": 0.0, "avg_logprob": -0.10357466765812465, "compression_ratio": 1.7557603686635945, "no_caption_prob": 1.2029345271002967e-05}, {"id": 561, "seek": 270264, "start": 2713.8399999999997, "end": 2718.64, "text": " So if you map it, it shrinks based on the actual mapped value.", "tokens": [50364, 1042, 11, 572, 11, 294, 264, 2158, 2361, 41684, 3109, 11, 309, 9884, 16431, 934, 1203, 307, 10833, 293, 50804, 50804, 33318, 293, 37111, 13, 50904, 50904, 286, 536, 13, 50924, 50924, 407, 498, 291, 4471, 309, 11, 309, 9884, 16431, 2361, 322, 264, 3539, 33318, 2158, 13, 51164, 51164, 865, 11, 309, 9884, 16431, 558, 412, 264, 917, 295, 1203, 13, 51404, 51404, 708, 498, 291, 4471, 309, 281, 257, 819, 2010, 30, 51484, 51484, 1012, 775, 309, 458, 577, 281, 23060, 300, 30, 51624, 51624, 1407, 257, 819, 2010, 11, 994, 380, 309, 30, 51704, 51704, 467, 311, 1009, 516, 281, 312, 264, 912, 2010, 13, 51784, 51784], "temperature": 0.0, "avg_logprob": -0.10357466765812465, "compression_ratio": 1.7557603686635945, "no_caption_prob": 1.2029345271002967e-05}, {"id": 562, "seek": 270264, "start": 2718.64, "end": 2723.44, "text": " Yeah, it shrinks right at the end of everything.", "tokens": [50364, 1042, 11, 572, 11, 294, 264, 2158, 2361, 41684, 3109, 11, 309, 9884, 16431, 934, 1203, 307, 10833, 293, 50804, 50804, 33318, 293, 37111, 13, 50904, 50904, 286, 536, 13, 50924, 50924, 407, 498, 291, 4471, 309, 11, 309, 9884, 16431, 2361, 322, 264, 3539, 33318, 2158, 13, 51164, 51164, 865, 11, 309, 9884, 16431, 558, 412, 264, 917, 295, 1203, 13, 51404, 51404, 708, 498, 291, 4471, 309, 281, 257, 819, 2010, 30, 51484, 51484, 1012, 775, 309, 458, 577, 281, 23060, 300, 30, 51624, 51624, 1407, 257, 819, 2010, 11, 994, 380, 309, 30, 51704, 51704, 467, 311, 1009, 516, 281, 312, 264, 912, 2010, 13, 51784, 51784], "temperature": 0.0, "avg_logprob": -0.10357466765812465, "compression_ratio": 1.7557603686635945, "no_caption_prob": 1.2029345271002967e-05}, {"id": 563, "seek": 270264, "start": 2723.44, "end": 2725.04, "text": " What if you map it to a different type?", "tokens": [50364, 1042, 11, 572, 11, 294, 264, 2158, 2361, 41684, 3109, 11, 309, 9884, 16431, 934, 1203, 307, 10833, 293, 50804, 50804, 33318, 293, 37111, 13, 50904, 50904, 286, 536, 13, 50924, 50924, 407, 498, 291, 4471, 309, 11, 309, 9884, 16431, 2361, 322, 264, 3539, 33318, 2158, 13, 51164, 51164, 865, 11, 309, 9884, 16431, 558, 412, 264, 917, 295, 1203, 13, 51404, 51404, 708, 498, 291, 4471, 309, 281, 257, 819, 2010, 30, 51484, 51484, 1012, 775, 309, 458, 577, 281, 23060, 300, 30, 51624, 51624, 1407, 257, 819, 2010, 11, 994, 380, 309, 30, 51704, 51704, 467, 311, 1009, 516, 281, 312, 264, 912, 2010, 13, 51784, 51784], "temperature": 0.0, "avg_logprob": -0.10357466765812465, "compression_ratio": 1.7557603686635945, "no_caption_prob": 1.2029345271002967e-05}, {"id": 564, "seek": 270264, "start": 2725.04, "end": 2727.8399999999997, "text": " How does it know how to shrink that?", "tokens": [50364, 1042, 11, 572, 11, 294, 264, 2158, 2361, 41684, 3109, 11, 309, 9884, 16431, 934, 1203, 307, 10833, 293, 50804, 50804, 33318, 293, 37111, 13, 50904, 50904, 286, 536, 13, 50924, 50924, 407, 498, 291, 4471, 309, 11, 309, 9884, 16431, 2361, 322, 264, 3539, 33318, 2158, 13, 51164, 51164, 865, 11, 309, 9884, 16431, 558, 412, 264, 917, 295, 1203, 13, 51404, 51404, 708, 498, 291, 4471, 309, 281, 257, 819, 2010, 30, 51484, 51484, 1012, 775, 309, 458, 577, 281, 23060, 300, 30, 51624, 51624, 1407, 257, 819, 2010, 11, 994, 380, 309, 30, 51704, 51704, 467, 311, 1009, 516, 281, 312, 264, 912, 2010, 13, 51784, 51784], "temperature": 0.0, "avg_logprob": -0.10357466765812465, "compression_ratio": 1.7557603686635945, "no_caption_prob": 1.2029345271002967e-05}, {"id": 565, "seek": 270264, "start": 2727.8399999999997, "end": 2729.44, "text": " To a different type, didn't it?", "tokens": [50364, 1042, 11, 572, 11, 294, 264, 2158, 2361, 41684, 3109, 11, 309, 9884, 16431, 934, 1203, 307, 10833, 293, 50804, 50804, 33318, 293, 37111, 13, 50904, 50904, 286, 536, 13, 50924, 50924, 407, 498, 291, 4471, 309, 11, 309, 9884, 16431, 2361, 322, 264, 3539, 33318, 2158, 13, 51164, 51164, 865, 11, 309, 9884, 16431, 558, 412, 264, 917, 295, 1203, 13, 51404, 51404, 708, 498, 291, 4471, 309, 281, 257, 819, 2010, 30, 51484, 51484, 1012, 775, 309, 458, 577, 281, 23060, 300, 30, 51624, 51624, 1407, 257, 819, 2010, 11, 994, 380, 309, 30, 51704, 51704, 467, 311, 1009, 516, 281, 312, 264, 912, 2010, 13, 51784, 51784], "temperature": 0.0, "avg_logprob": -0.10357466765812465, "compression_ratio": 1.7557603686635945, "no_caption_prob": 1.2029345271002967e-05}, {"id": 566, "seek": 270264, "start": 2729.44, "end": 2731.04, "text": " It's always going to be the same type.", "tokens": [50364, 1042, 11, 572, 11, 294, 264, 2158, 2361, 41684, 3109, 11, 309, 9884, 16431, 934, 1203, 307, 10833, 293, 50804, 50804, 33318, 293, 37111, 13, 50904, 50904, 286, 536, 13, 50924, 50924, 407, 498, 291, 4471, 309, 11, 309, 9884, 16431, 2361, 322, 264, 3539, 33318, 2158, 13, 51164, 51164, 865, 11, 309, 9884, 16431, 558, 412, 264, 917, 295, 1203, 13, 51404, 51404, 708, 498, 291, 4471, 309, 281, 257, 819, 2010, 30, 51484, 51484, 1012, 775, 309, 458, 577, 281, 23060, 300, 30, 51624, 51624, 1407, 257, 819, 2010, 11, 994, 380, 309, 30, 51704, 51704, 467, 311, 1009, 516, 281, 312, 264, 912, 2010, 13, 51784, 51784], "temperature": 0.0, "avg_logprob": -0.10357466765812465, "compression_ratio": 1.7557603686635945, "no_caption_prob": 1.2029345271002967e-05}, {"id": 567, "seek": 273104, "start": 2731.04, "end": 2735.04, "text": " Well, no, you can definitely map values to be a different type.", "tokens": [50364, 1042, 11, 572, 11, 291, 393, 2138, 4471, 4190, 281, 312, 257, 819, 2010, 13, 50564, 50564, 509, 393, 1884, 2375, 2010, 2361, 322, 24922, 420, 746, 13, 50764, 50764, 400, 550, 309, 311, 920, 264, 912, 2010, 13, 50924, 50924, 1042, 11, 550, 309, 311, 257, 2375, 2010, 13, 51064, 51064, 759, 291, 360, 283, 16740, 13, 686, 293, 550, 291, 360, 283, 16740, 13, 24223, 293, 747, 364, 560, 293, 1261, 309, 666, 257, 2375, 51424, 51424, 2010, 47479, 281, 818, 30, 51524, 51524, 865, 11, 550, 291, 362, 257, 819, 17501, 11, 457, 291, 920, 362, 264, 912, 2010, 13, 51684, 51684], "temperature": 0.0, "avg_logprob": -0.11726738582147617, "compression_ratio": 1.824390243902439, "no_caption_prob": 3.426490002311766e-05}, {"id": 568, "seek": 273104, "start": 2735.04, "end": 2739.04, "text": " You can create custom type based on integer or something.", "tokens": [50364, 1042, 11, 572, 11, 291, 393, 2138, 4471, 4190, 281, 312, 257, 819, 2010, 13, 50564, 50564, 509, 393, 1884, 2375, 2010, 2361, 322, 24922, 420, 746, 13, 50764, 50764, 400, 550, 309, 311, 920, 264, 912, 2010, 13, 50924, 50924, 1042, 11, 550, 309, 311, 257, 2375, 2010, 13, 51064, 51064, 759, 291, 360, 283, 16740, 13, 686, 293, 550, 291, 360, 283, 16740, 13, 24223, 293, 747, 364, 560, 293, 1261, 309, 666, 257, 2375, 51424, 51424, 2010, 47479, 281, 818, 30, 51524, 51524, 865, 11, 550, 291, 362, 257, 819, 17501, 11, 457, 291, 920, 362, 264, 912, 2010, 13, 51684, 51684], "temperature": 0.0, "avg_logprob": -0.11726738582147617, "compression_ratio": 1.824390243902439, "no_caption_prob": 3.426490002311766e-05}, {"id": 569, "seek": 273104, "start": 2739.04, "end": 2742.24, "text": " And then it's still the same type.", "tokens": [50364, 1042, 11, 572, 11, 291, 393, 2138, 4471, 4190, 281, 312, 257, 819, 2010, 13, 50564, 50564, 509, 393, 1884, 2375, 2010, 2361, 322, 24922, 420, 746, 13, 50764, 50764, 400, 550, 309, 311, 920, 264, 912, 2010, 13, 50924, 50924, 1042, 11, 550, 309, 311, 257, 2375, 2010, 13, 51064, 51064, 759, 291, 360, 283, 16740, 13, 686, 293, 550, 291, 360, 283, 16740, 13, 24223, 293, 747, 364, 560, 293, 1261, 309, 666, 257, 2375, 51424, 51424, 2010, 47479, 281, 818, 30, 51524, 51524, 865, 11, 550, 291, 362, 257, 819, 17501, 11, 457, 291, 920, 362, 264, 912, 2010, 13, 51684, 51684], "temperature": 0.0, "avg_logprob": -0.11726738582147617, "compression_ratio": 1.824390243902439, "no_caption_prob": 3.426490002311766e-05}, {"id": 570, "seek": 273104, "start": 2742.24, "end": 2745.04, "text": " Well, then it's a custom type.", "tokens": [50364, 1042, 11, 572, 11, 291, 393, 2138, 4471, 4190, 281, 312, 257, 819, 2010, 13, 50564, 50564, 509, 393, 1884, 2375, 2010, 2361, 322, 24922, 420, 746, 13, 50764, 50764, 400, 550, 309, 311, 920, 264, 912, 2010, 13, 50924, 50924, 1042, 11, 550, 309, 311, 257, 2375, 2010, 13, 51064, 51064, 759, 291, 360, 283, 16740, 13, 686, 293, 550, 291, 360, 283, 16740, 13, 24223, 293, 747, 364, 560, 293, 1261, 309, 666, 257, 2375, 51424, 51424, 2010, 47479, 281, 818, 30, 51524, 51524, 865, 11, 550, 291, 362, 257, 819, 17501, 11, 457, 291, 920, 362, 264, 912, 2010, 13, 51684, 51684], "temperature": 0.0, "avg_logprob": -0.11726738582147617, "compression_ratio": 1.824390243902439, "no_caption_prob": 3.426490002311766e-05}, {"id": 571, "seek": 273104, "start": 2745.04, "end": 2752.24, "text": " If you do fuzz.int and then you do fuzz.map and take an int and turn it into a custom", "tokens": [50364, 1042, 11, 572, 11, 291, 393, 2138, 4471, 4190, 281, 312, 257, 819, 2010, 13, 50564, 50564, 509, 393, 1884, 2375, 2010, 2361, 322, 24922, 420, 746, 13, 50764, 50764, 400, 550, 309, 311, 920, 264, 912, 2010, 13, 50924, 50924, 1042, 11, 550, 309, 311, 257, 2375, 2010, 13, 51064, 51064, 759, 291, 360, 283, 16740, 13, 686, 293, 550, 291, 360, 283, 16740, 13, 24223, 293, 747, 364, 560, 293, 1261, 309, 666, 257, 2375, 51424, 51424, 2010, 47479, 281, 818, 30, 51524, 51524, 865, 11, 550, 291, 362, 257, 819, 17501, 11, 457, 291, 920, 362, 264, 912, 2010, 13, 51684, 51684], "temperature": 0.0, "avg_logprob": -0.11726738582147617, "compression_ratio": 1.824390243902439, "no_caption_prob": 3.426490002311766e-05}, {"id": 572, "seek": 273104, "start": 2752.24, "end": 2754.24, "text": " type constructor to call?", "tokens": [50364, 1042, 11, 572, 11, 291, 393, 2138, 4471, 4190, 281, 312, 257, 819, 2010, 13, 50564, 50564, 509, 393, 1884, 2375, 2010, 2361, 322, 24922, 420, 746, 13, 50764, 50764, 400, 550, 309, 311, 920, 264, 912, 2010, 13, 50924, 50924, 1042, 11, 550, 309, 311, 257, 2375, 2010, 13, 51064, 51064, 759, 291, 360, 283, 16740, 13, 686, 293, 550, 291, 360, 283, 16740, 13, 24223, 293, 747, 364, 560, 293, 1261, 309, 666, 257, 2375, 51424, 51424, 2010, 47479, 281, 818, 30, 51524, 51524, 865, 11, 550, 291, 362, 257, 819, 17501, 11, 457, 291, 920, 362, 264, 912, 2010, 13, 51684, 51684], "temperature": 0.0, "avg_logprob": -0.11726738582147617, "compression_ratio": 1.824390243902439, "no_caption_prob": 3.426490002311766e-05}, {"id": 573, "seek": 273104, "start": 2754.24, "end": 2757.44, "text": " Yeah, then you have a different variant, but you still have the same type.", "tokens": [50364, 1042, 11, 572, 11, 291, 393, 2138, 4471, 4190, 281, 312, 257, 819, 2010, 13, 50564, 50564, 509, 393, 1884, 2375, 2010, 2361, 322, 24922, 420, 746, 13, 50764, 50764, 400, 550, 309, 311, 920, 264, 912, 2010, 13, 50924, 50924, 1042, 11, 550, 309, 311, 257, 2375, 2010, 13, 51064, 51064, 759, 291, 360, 283, 16740, 13, 686, 293, 550, 291, 360, 283, 16740, 13, 24223, 293, 747, 364, 560, 293, 1261, 309, 666, 257, 2375, 51424, 51424, 2010, 47479, 281, 818, 30, 51524, 51524, 865, 11, 550, 291, 362, 257, 819, 17501, 11, 457, 291, 920, 362, 264, 912, 2010, 13, 51684, 51684], "temperature": 0.0, "avg_logprob": -0.11726738582147617, "compression_ratio": 1.824390243902439, "no_caption_prob": 3.426490002311766e-05}, {"id": 574, "seek": 275744, "start": 2757.44, "end": 2763.04, "text": " But different from the original type of the fuzz generator.", "tokens": [50364, 583, 819, 490, 264, 3380, 2010, 295, 264, 283, 16740, 19265, 13, 50644, 50644, 876, 11, 1338, 13, 50672, 50672, 1033, 13, 50684, 50684, 865, 13, 50704, 50704, 407, 577, 775, 309, 458, 577, 281, 5407, 428, 2375, 2010, 30, 50932, 50932, 1779, 13, 50952, 50952, 407, 341, 307, 746, 300, 311, 668, 1219, 10919, 41684, 13, 51172, 51172, 400, 300, 311, 983, 291, 366, 406, 1228, 4974, 38662, 13, 51372, 51372, 663, 311, 983, 291, 366, 1228, 283, 16740, 433, 13, 51468, 51468, 400, 370, 1184, 295, 729, 283, 3334, 4527, 38514, 3391, 575, 732, 3166, 13, 51788, 51820], "temperature": 0.0, "avg_logprob": -0.131774341358858, "compression_ratio": 1.5953488372093023, "no_caption_prob": 8.799621355137788e-06}, {"id": 575, "seek": 275744, "start": 2763.04, "end": 2763.6, "text": " Oh, yeah.", "tokens": [50364, 583, 819, 490, 264, 3380, 2010, 295, 264, 283, 16740, 19265, 13, 50644, 50644, 876, 11, 1338, 13, 50672, 50672, 1033, 13, 50684, 50684, 865, 13, 50704, 50704, 407, 577, 775, 309, 458, 577, 281, 5407, 428, 2375, 2010, 30, 50932, 50932, 1779, 13, 50952, 50952, 407, 341, 307, 746, 300, 311, 668, 1219, 10919, 41684, 13, 51172, 51172, 400, 300, 311, 983, 291, 366, 406, 1228, 4974, 38662, 13, 51372, 51372, 663, 311, 983, 291, 366, 1228, 283, 16740, 433, 13, 51468, 51468, 400, 370, 1184, 295, 729, 283, 3334, 4527, 38514, 3391, 575, 732, 3166, 13, 51788, 51820], "temperature": 0.0, "avg_logprob": -0.131774341358858, "compression_ratio": 1.5953488372093023, "no_caption_prob": 8.799621355137788e-06}, {"id": 576, "seek": 275744, "start": 2763.6, "end": 2763.84, "text": " Okay.", "tokens": [50364, 583, 819, 490, 264, 3380, 2010, 295, 264, 283, 16740, 19265, 13, 50644, 50644, 876, 11, 1338, 13, 50672, 50672, 1033, 13, 50684, 50684, 865, 13, 50704, 50704, 407, 577, 775, 309, 458, 577, 281, 5407, 428, 2375, 2010, 30, 50932, 50932, 1779, 13, 50952, 50952, 407, 341, 307, 746, 300, 311, 668, 1219, 10919, 41684, 13, 51172, 51172, 400, 300, 311, 983, 291, 366, 406, 1228, 4974, 38662, 13, 51372, 51372, 663, 311, 983, 291, 366, 1228, 283, 16740, 433, 13, 51468, 51468, 400, 370, 1184, 295, 729, 283, 3334, 4527, 38514, 3391, 575, 732, 3166, 13, 51788, 51820], "temperature": 0.0, "avg_logprob": -0.131774341358858, "compression_ratio": 1.5953488372093023, "no_caption_prob": 8.799621355137788e-06}, {"id": 577, "seek": 275744, "start": 2763.84, "end": 2764.2400000000002, "text": " Yeah.", "tokens": [50364, 583, 819, 490, 264, 3380, 2010, 295, 264, 283, 16740, 19265, 13, 50644, 50644, 876, 11, 1338, 13, 50672, 50672, 1033, 13, 50684, 50684, 865, 13, 50704, 50704, 407, 577, 775, 309, 458, 577, 281, 5407, 428, 2375, 2010, 30, 50932, 50932, 1779, 13, 50952, 50952, 407, 341, 307, 746, 300, 311, 668, 1219, 10919, 41684, 13, 51172, 51172, 400, 300, 311, 983, 291, 366, 406, 1228, 4974, 38662, 13, 51372, 51372, 663, 311, 983, 291, 366, 1228, 283, 16740, 433, 13, 51468, 51468, 400, 370, 1184, 295, 729, 283, 3334, 4527, 38514, 3391, 575, 732, 3166, 13, 51788, 51820], "temperature": 0.0, "avg_logprob": -0.131774341358858, "compression_ratio": 1.5953488372093023, "no_caption_prob": 8.799621355137788e-06}, {"id": 578, "seek": 275744, "start": 2764.2400000000002, "end": 2768.8, "text": " So how does it know how to reduce your custom type?", "tokens": [50364, 583, 819, 490, 264, 3380, 2010, 295, 264, 283, 16740, 19265, 13, 50644, 50644, 876, 11, 1338, 13, 50672, 50672, 1033, 13, 50684, 50684, 865, 13, 50704, 50704, 407, 577, 775, 309, 458, 577, 281, 5407, 428, 2375, 2010, 30, 50932, 50932, 1779, 13, 50952, 50952, 407, 341, 307, 746, 300, 311, 668, 1219, 10919, 41684, 13, 51172, 51172, 400, 300, 311, 983, 291, 366, 406, 1228, 4974, 38662, 13, 51372, 51372, 663, 311, 983, 291, 366, 1228, 283, 16740, 433, 13, 51468, 51468, 400, 370, 1184, 295, 729, 283, 3334, 4527, 38514, 3391, 575, 732, 3166, 13, 51788, 51820], "temperature": 0.0, "avg_logprob": -0.131774341358858, "compression_ratio": 1.5953488372093023, "no_caption_prob": 8.799621355137788e-06}, {"id": 579, "seek": 275744, "start": 2768.8, "end": 2769.2000000000003, "text": " Right.", "tokens": [50364, 583, 819, 490, 264, 3380, 2010, 295, 264, 283, 16740, 19265, 13, 50644, 50644, 876, 11, 1338, 13, 50672, 50672, 1033, 13, 50684, 50684, 865, 13, 50704, 50704, 407, 577, 775, 309, 458, 577, 281, 5407, 428, 2375, 2010, 30, 50932, 50932, 1779, 13, 50952, 50952, 407, 341, 307, 746, 300, 311, 668, 1219, 10919, 41684, 13, 51172, 51172, 400, 300, 311, 983, 291, 366, 406, 1228, 4974, 38662, 13, 51372, 51372, 663, 311, 983, 291, 366, 1228, 283, 16740, 433, 13, 51468, 51468, 400, 370, 1184, 295, 729, 283, 3334, 4527, 38514, 3391, 575, 732, 3166, 13, 51788, 51820], "temperature": 0.0, "avg_logprob": -0.131774341358858, "compression_ratio": 1.5953488372093023, "no_caption_prob": 8.799621355137788e-06}, {"id": 580, "seek": 275744, "start": 2769.2000000000003, "end": 2773.6, "text": " So this is something that's been called integrated shrinking.", "tokens": [50364, 583, 819, 490, 264, 3380, 2010, 295, 264, 283, 16740, 19265, 13, 50644, 50644, 876, 11, 1338, 13, 50672, 50672, 1033, 13, 50684, 50684, 865, 13, 50704, 50704, 407, 577, 775, 309, 458, 577, 281, 5407, 428, 2375, 2010, 30, 50932, 50932, 1779, 13, 50952, 50952, 407, 341, 307, 746, 300, 311, 668, 1219, 10919, 41684, 13, 51172, 51172, 400, 300, 311, 983, 291, 366, 406, 1228, 4974, 38662, 13, 51372, 51372, 663, 311, 983, 291, 366, 1228, 283, 16740, 433, 13, 51468, 51468, 400, 370, 1184, 295, 729, 283, 3334, 4527, 38514, 3391, 575, 732, 3166, 13, 51788, 51820], "temperature": 0.0, "avg_logprob": -0.131774341358858, "compression_ratio": 1.5953488372093023, "no_caption_prob": 8.799621355137788e-06}, {"id": 581, "seek": 275744, "start": 2773.6, "end": 2777.6, "text": " And that's why you are not using random generators.", "tokens": [50364, 583, 819, 490, 264, 3380, 2010, 295, 264, 283, 16740, 19265, 13, 50644, 50644, 876, 11, 1338, 13, 50672, 50672, 1033, 13, 50684, 50684, 865, 13, 50704, 50704, 407, 577, 775, 309, 458, 577, 281, 5407, 428, 2375, 2010, 30, 50932, 50932, 1779, 13, 50952, 50952, 407, 341, 307, 746, 300, 311, 668, 1219, 10919, 41684, 13, 51172, 51172, 400, 300, 311, 983, 291, 366, 406, 1228, 4974, 38662, 13, 51372, 51372, 663, 311, 983, 291, 366, 1228, 283, 16740, 433, 13, 51468, 51468, 400, 370, 1184, 295, 729, 283, 3334, 4527, 38514, 3391, 575, 732, 3166, 13, 51788, 51820], "temperature": 0.0, "avg_logprob": -0.131774341358858, "compression_ratio": 1.5953488372093023, "no_caption_prob": 8.799621355137788e-06}, {"id": 582, "seek": 275744, "start": 2777.6, "end": 2779.52, "text": " That's why you are using fuzzers.", "tokens": [50364, 583, 819, 490, 264, 3380, 2010, 295, 264, 283, 16740, 19265, 13, 50644, 50644, 876, 11, 1338, 13, 50672, 50672, 1033, 13, 50684, 50684, 865, 13, 50704, 50704, 407, 577, 775, 309, 458, 577, 281, 5407, 428, 2375, 2010, 30, 50932, 50932, 1779, 13, 50952, 50952, 407, 341, 307, 746, 300, 311, 668, 1219, 10919, 41684, 13, 51172, 51172, 400, 300, 311, 983, 291, 366, 406, 1228, 4974, 38662, 13, 51372, 51372, 663, 311, 983, 291, 366, 1228, 283, 16740, 433, 13, 51468, 51468, 400, 370, 1184, 295, 729, 283, 3334, 4527, 38514, 3391, 575, 732, 3166, 13, 51788, 51820], "temperature": 0.0, "avg_logprob": -0.131774341358858, "compression_ratio": 1.5953488372093023, "no_caption_prob": 8.799621355137788e-06}, {"id": 583, "seek": 275744, "start": 2779.52, "end": 2785.92, "text": " And so each of those fuzzer combinators has two parts.", "tokens": [50364, 583, 819, 490, 264, 3380, 2010, 295, 264, 283, 16740, 19265, 13, 50644, 50644, 876, 11, 1338, 13, 50672, 50672, 1033, 13, 50684, 50684, 865, 13, 50704, 50704, 407, 577, 775, 309, 458, 577, 281, 5407, 428, 2375, 2010, 30, 50932, 50932, 1779, 13, 50952, 50952, 407, 341, 307, 746, 300, 311, 668, 1219, 10919, 41684, 13, 51172, 51172, 400, 300, 311, 983, 291, 366, 406, 1228, 4974, 38662, 13, 51372, 51372, 663, 311, 983, 291, 366, 1228, 283, 16740, 433, 13, 51468, 51468, 400, 370, 1184, 295, 729, 283, 3334, 4527, 38514, 3391, 575, 732, 3166, 13, 51788, 51820], "temperature": 0.0, "avg_logprob": -0.131774341358858, "compression_ratio": 1.5953488372093023, "no_caption_prob": 8.799621355137788e-06}, {"id": 584, "seek": 278592, "start": 2785.92, "end": 2787.36, "text": " One is about generating.", "tokens": [50364, 1485, 307, 466, 17746, 13, 50436, 50436, 407, 26742, 309, 311, 884, 411, 341, 4974, 4471, 365, 264, 2445, 300, 291, 2729, 309, 13, 50708, 50708, 400, 550, 264, 1150, 644, 307, 264, 41684, 1589, 13, 50884, 50884, 400, 286, 478, 406, 534, 988, 466, 264, 4365, 11, 457, 286, 1697, 309, 733, 295, 3255, 300, 309, 390, 51196, 51196, 1027, 490, 364, 24922, 13, 51272, 51272, 400, 370, 309, 9898, 281, 23060, 729, 41674, 13, 51412, 51412, 400, 456, 311, 264, 18350, 1296, 264, 24922, 293, 428, 2375, 2010, 13, 51656, 51656], "temperature": 0.0, "avg_logprob": -0.11049257579602693, "compression_ratio": 1.6535087719298245, "no_caption_prob": 2.4658447728143074e-05}, {"id": 585, "seek": 278592, "start": 2787.36, "end": 2792.8, "text": " So presumably it's doing like this random map with the function that you gave it.", "tokens": [50364, 1485, 307, 466, 17746, 13, 50436, 50436, 407, 26742, 309, 311, 884, 411, 341, 4974, 4471, 365, 264, 2445, 300, 291, 2729, 309, 13, 50708, 50708, 400, 550, 264, 1150, 644, 307, 264, 41684, 1589, 13, 50884, 50884, 400, 286, 478, 406, 534, 988, 466, 264, 4365, 11, 457, 286, 1697, 309, 733, 295, 3255, 300, 309, 390, 51196, 51196, 1027, 490, 364, 24922, 13, 51272, 51272, 400, 370, 309, 9898, 281, 23060, 729, 41674, 13, 51412, 51412, 400, 456, 311, 264, 18350, 1296, 264, 24922, 293, 428, 2375, 2010, 13, 51656, 51656], "temperature": 0.0, "avg_logprob": -0.11049257579602693, "compression_ratio": 1.6535087719298245, "no_caption_prob": 2.4658447728143074e-05}, {"id": 586, "seek": 278592, "start": 2792.8, "end": 2796.32, "text": " And then the second part is the shrinking information.", "tokens": [50364, 1485, 307, 466, 17746, 13, 50436, 50436, 407, 26742, 309, 311, 884, 411, 341, 4974, 4471, 365, 264, 2445, 300, 291, 2729, 309, 13, 50708, 50708, 400, 550, 264, 1150, 644, 307, 264, 41684, 1589, 13, 50884, 50884, 400, 286, 478, 406, 534, 988, 466, 264, 4365, 11, 457, 286, 1697, 309, 733, 295, 3255, 300, 309, 390, 51196, 51196, 1027, 490, 364, 24922, 13, 51272, 51272, 400, 370, 309, 9898, 281, 23060, 729, 41674, 13, 51412, 51412, 400, 456, 311, 264, 18350, 1296, 264, 24922, 293, 428, 2375, 2010, 13, 51656, 51656], "temperature": 0.0, "avg_logprob": -0.11049257579602693, "compression_ratio": 1.6535087719298245, "no_caption_prob": 2.4658447728143074e-05}, {"id": 587, "seek": 278592, "start": 2796.32, "end": 2802.56, "text": " And I'm not really sure about the details, but I believe it kind of knows that it was", "tokens": [50364, 1485, 307, 466, 17746, 13, 50436, 50436, 407, 26742, 309, 311, 884, 411, 341, 4974, 4471, 365, 264, 2445, 300, 291, 2729, 309, 13, 50708, 50708, 400, 550, 264, 1150, 644, 307, 264, 41684, 1589, 13, 50884, 50884, 400, 286, 478, 406, 534, 988, 466, 264, 4365, 11, 457, 286, 1697, 309, 733, 295, 3255, 300, 309, 390, 51196, 51196, 1027, 490, 364, 24922, 13, 51272, 51272, 400, 370, 309, 9898, 281, 23060, 729, 41674, 13, 51412, 51412, 400, 456, 311, 264, 18350, 1296, 264, 24922, 293, 428, 2375, 2010, 13, 51656, 51656], "temperature": 0.0, "avg_logprob": -0.11049257579602693, "compression_ratio": 1.6535087719298245, "no_caption_prob": 2.4658447728143074e-05}, {"id": 588, "seek": 278592, "start": 2802.56, "end": 2804.08, "text": " made from an integer.", "tokens": [50364, 1485, 307, 466, 17746, 13, 50436, 50436, 407, 26742, 309, 311, 884, 411, 341, 4974, 4471, 365, 264, 2445, 300, 291, 2729, 309, 13, 50708, 50708, 400, 550, 264, 1150, 644, 307, 264, 41684, 1589, 13, 50884, 50884, 400, 286, 478, 406, 534, 988, 466, 264, 4365, 11, 457, 286, 1697, 309, 733, 295, 3255, 300, 309, 390, 51196, 51196, 1027, 490, 364, 24922, 13, 51272, 51272, 400, 370, 309, 9898, 281, 23060, 729, 41674, 13, 51412, 51412, 400, 456, 311, 264, 18350, 1296, 264, 24922, 293, 428, 2375, 2010, 13, 51656, 51656], "temperature": 0.0, "avg_logprob": -0.11049257579602693, "compression_ratio": 1.6535087719298245, "no_caption_prob": 2.4658447728143074e-05}, {"id": 589, "seek": 278592, "start": 2804.08, "end": 2806.88, "text": " And so it tries to shrink those integers.", "tokens": [50364, 1485, 307, 466, 17746, 13, 50436, 50436, 407, 26742, 309, 311, 884, 411, 341, 4974, 4471, 365, 264, 2445, 300, 291, 2729, 309, 13, 50708, 50708, 400, 550, 264, 1150, 644, 307, 264, 41684, 1589, 13, 50884, 50884, 400, 286, 478, 406, 534, 988, 466, 264, 4365, 11, 457, 286, 1697, 309, 733, 295, 3255, 300, 309, 390, 51196, 51196, 1027, 490, 364, 24922, 13, 51272, 51272, 400, 370, 309, 9898, 281, 23060, 729, 41674, 13, 51412, 51412, 400, 456, 311, 264, 18350, 1296, 264, 24922, 293, 428, 2375, 2010, 13, 51656, 51656], "temperature": 0.0, "avg_logprob": -0.11049257579602693, "compression_ratio": 1.6535087719298245, "no_caption_prob": 2.4658447728143074e-05}, {"id": 590, "seek": 278592, "start": 2806.88, "end": 2811.76, "text": " And there's the mapping between the integer and your custom type.", "tokens": [50364, 1485, 307, 466, 17746, 13, 50436, 50436, 407, 26742, 309, 311, 884, 411, 341, 4974, 4471, 365, 264, 2445, 300, 291, 2729, 309, 13, 50708, 50708, 400, 550, 264, 1150, 644, 307, 264, 41684, 1589, 13, 50884, 50884, 400, 286, 478, 406, 534, 988, 466, 264, 4365, 11, 457, 286, 1697, 309, 733, 295, 3255, 300, 309, 390, 51196, 51196, 1027, 490, 364, 24922, 13, 51272, 51272, 400, 370, 309, 9898, 281, 23060, 729, 41674, 13, 51412, 51412, 400, 456, 311, 264, 18350, 1296, 264, 24922, 293, 428, 2375, 2010, 13, 51656, 51656], "temperature": 0.0, "avg_logprob": -0.11049257579602693, "compression_ratio": 1.6535087719298245, "no_caption_prob": 2.4658447728143074e-05}, {"id": 591, "seek": 281176, "start": 2811.76, "end": 2819.84, "text": " And so it still kind of knows how to shrink because it was created from integer.", "tokens": [50364, 400, 370, 309, 920, 733, 295, 3255, 577, 281, 23060, 570, 309, 390, 2942, 490, 24922, 13, 50768, 50768, 583, 309, 1177, 380, 362, 604, 1589, 466, 428, 2010, 11, 558, 30, 51044, 51044, 509, 576, 362, 281, 1884, 11, 291, 576, 362, 281, 764, 746, 411, 283, 16740, 2375, 689, 291, 976, 51264, 51264, 309, 19265, 337, 428, 2010, 293, 257, 23060, 260, 337, 428, 2010, 13, 51484, 51484, 407, 309, 733, 295, 3417, 411, 437, 307, 691, 17, 884, 30, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.19902271448179734, "compression_ratio": 1.5865384615384615, "no_caption_prob": 3.1179999496089295e-05}, {"id": 592, "seek": 281176, "start": 2819.84, "end": 2825.36, "text": " But it doesn't have any information about your type, right?", "tokens": [50364, 400, 370, 309, 920, 733, 295, 3255, 577, 281, 23060, 570, 309, 390, 2942, 490, 24922, 13, 50768, 50768, 583, 309, 1177, 380, 362, 604, 1589, 466, 428, 2010, 11, 558, 30, 51044, 51044, 509, 576, 362, 281, 1884, 11, 291, 576, 362, 281, 764, 746, 411, 283, 16740, 2375, 689, 291, 976, 51264, 51264, 309, 19265, 337, 428, 2010, 293, 257, 23060, 260, 337, 428, 2010, 13, 51484, 51484, 407, 309, 733, 295, 3417, 411, 437, 307, 691, 17, 884, 30, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.19902271448179734, "compression_ratio": 1.5865384615384615, "no_caption_prob": 3.1179999496089295e-05}, {"id": 593, "seek": 281176, "start": 2825.36, "end": 2829.76, "text": " You would have to create, you would have to use something like fuzz custom where you give", "tokens": [50364, 400, 370, 309, 920, 733, 295, 3255, 577, 281, 23060, 570, 309, 390, 2942, 490, 24922, 13, 50768, 50768, 583, 309, 1177, 380, 362, 604, 1589, 466, 428, 2010, 11, 558, 30, 51044, 51044, 509, 576, 362, 281, 1884, 11, 291, 576, 362, 281, 764, 746, 411, 283, 16740, 2375, 689, 291, 976, 51264, 51264, 309, 19265, 337, 428, 2010, 293, 257, 23060, 260, 337, 428, 2010, 13, 51484, 51484, 407, 309, 733, 295, 3417, 411, 437, 307, 691, 17, 884, 30, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.19902271448179734, "compression_ratio": 1.5865384615384615, "no_caption_prob": 3.1179999496089295e-05}, {"id": 594, "seek": 281176, "start": 2829.76, "end": 2834.1600000000003, "text": " it generator for your type and a shrinker for your type.", "tokens": [50364, 400, 370, 309, 920, 733, 295, 3255, 577, 281, 23060, 570, 309, 390, 2942, 490, 24922, 13, 50768, 50768, 583, 309, 1177, 380, 362, 604, 1589, 466, 428, 2010, 11, 558, 30, 51044, 51044, 509, 576, 362, 281, 1884, 11, 291, 576, 362, 281, 764, 746, 411, 283, 16740, 2375, 689, 291, 976, 51264, 51264, 309, 19265, 337, 428, 2010, 293, 257, 23060, 260, 337, 428, 2010, 13, 51484, 51484, 407, 309, 733, 295, 3417, 411, 437, 307, 691, 17, 884, 30, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.19902271448179734, "compression_ratio": 1.5865384615384615, "no_caption_prob": 3.1179999496089295e-05}, {"id": 595, "seek": 281176, "start": 2834.1600000000003, "end": 2837.76, "text": " So it kind of feels like what is V2 doing?", "tokens": [50364, 400, 370, 309, 920, 733, 295, 3255, 577, 281, 23060, 570, 309, 390, 2942, 490, 24922, 13, 50768, 50768, 583, 309, 1177, 380, 362, 604, 1589, 466, 428, 2010, 11, 558, 30, 51044, 51044, 509, 576, 362, 281, 1884, 11, 291, 576, 362, 281, 764, 746, 411, 283, 16740, 2375, 689, 291, 976, 51264, 51264, 309, 19265, 337, 428, 2010, 293, 257, 23060, 260, 337, 428, 2010, 13, 51484, 51484, 407, 309, 733, 295, 3417, 411, 437, 307, 691, 17, 884, 30, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.19902271448179734, "compression_ratio": 1.5865384615384615, "no_caption_prob": 3.1179999496089295e-05}, {"id": 596, "seek": 283776, "start": 2837.76, "end": 2846.4, "text": " So V2 is different in that the fuzzers are mostly just concerned about generating.", "tokens": [50364, 407, 691, 17, 307, 819, 294, 300, 264, 283, 16740, 433, 366, 5240, 445, 5922, 466, 17746, 13, 50796, 50796, 400, 456, 311, 572, 1045, 295, 1944, 2098, 281, 23060, 264, 1379, 551, 760, 13, 51128, 51156, 821, 366, 572, 23060, 2158, 281, 819, 2158, 2445, 13, 51400, 51432, 467, 1936, 445, 1709, 472, 4583, 7731, 13, 51568, 51604, 400, 264, 41684, 307, 5922, 365, 264, 15743, 281, 264, 11568, 38, 13, 51856], "temperature": 0.0, "avg_logprob": -0.1363052749633789, "compression_ratio": 1.5743589743589743, "no_caption_prob": 2.7963444154011086e-05}, {"id": 597, "seek": 283776, "start": 2846.4, "end": 2853.0400000000004, "text": " And there's no three of possible ways to shrink the whole thing down.", "tokens": [50364, 407, 691, 17, 307, 819, 294, 300, 264, 283, 16740, 433, 366, 5240, 445, 5922, 466, 17746, 13, 50796, 50796, 400, 456, 311, 572, 1045, 295, 1944, 2098, 281, 23060, 264, 1379, 551, 760, 13, 51128, 51156, 821, 366, 572, 23060, 2158, 281, 819, 2158, 2445, 13, 51400, 51432, 467, 1936, 445, 1709, 472, 4583, 7731, 13, 51568, 51604, 400, 264, 41684, 307, 5922, 365, 264, 15743, 281, 264, 11568, 38, 13, 51856], "temperature": 0.0, "avg_logprob": -0.1363052749633789, "compression_ratio": 1.5743589743589743, "no_caption_prob": 2.7963444154011086e-05}, {"id": 598, "seek": 283776, "start": 2853.6000000000004, "end": 2858.48, "text": " There are no shrink value to different value function.", "tokens": [50364, 407, 691, 17, 307, 819, 294, 300, 264, 283, 16740, 433, 366, 5240, 445, 5922, 466, 17746, 13, 50796, 50796, 400, 456, 311, 572, 1045, 295, 1944, 2098, 281, 23060, 264, 1379, 551, 760, 13, 51128, 51156, 821, 366, 572, 23060, 2158, 281, 819, 2158, 2445, 13, 51400, 51432, 467, 1936, 445, 1709, 472, 4583, 7731, 13, 51568, 51604, 400, 264, 41684, 307, 5922, 365, 264, 15743, 281, 264, 11568, 38, 13, 51856], "temperature": 0.0, "avg_logprob": -0.1363052749633789, "compression_ratio": 1.5743589743589743, "no_caption_prob": 2.7963444154011086e-05}, {"id": 599, "seek": 283776, "start": 2859.1200000000003, "end": 2861.84, "text": " It basically just goes one layer deeper.", "tokens": [50364, 407, 691, 17, 307, 819, 294, 300, 264, 283, 16740, 433, 366, 5240, 445, 5922, 466, 17746, 13, 50796, 50796, 400, 456, 311, 572, 1045, 295, 1944, 2098, 281, 23060, 264, 1379, 551, 760, 13, 51128, 51156, 821, 366, 572, 23060, 2158, 281, 819, 2158, 2445, 13, 51400, 51432, 467, 1936, 445, 1709, 472, 4583, 7731, 13, 51568, 51604, 400, 264, 41684, 307, 5922, 365, 264, 15743, 281, 264, 11568, 38, 13, 51856], "temperature": 0.0, "avg_logprob": -0.1363052749633789, "compression_ratio": 1.5743589743589743, "no_caption_prob": 2.7963444154011086e-05}, {"id": 600, "seek": 286184, "start": 2861.84, "end": 2867.52, "text": " And the shrinking is concerned with the inputs to the PRNG, right?", "tokens": [50364, 400, 264, 41684, 307, 5922, 365, 264, 15743, 281, 264, 11568, 30237, 11, 558, 30, 50648, 50648, 400, 370, 309, 9898, 281, 8460, 257, 819, 11568, 30237, 2503, 293, 550, 9898, 281, 8460, 257, 2158, 51004, 51004, 490, 300, 13, 51028, 51028, 467, 1177, 380, 362, 281, 7754, 439, 264, 565, 570, 718, 311, 584, 498, 291, 362, 257, 1329, 295, 1045, 4754, 51324, 51324, 300, 1062, 643, 570, 295, 577, 264, 1329, 19265, 11, 577, 264, 1329, 283, 3334, 4527, 307, 3720, 11, 309, 1062, 643, 11, 51696, 51696], "temperature": 0.0, "avg_logprob": -0.18204349020253058, "compression_ratio": 1.658878504672897, "no_caption_prob": 4.1242608858738095e-05}, {"id": 601, "seek": 286184, "start": 2867.52, "end": 2874.6400000000003, "text": " And so it tries to generate a different PRNG history and then tries to generate a value", "tokens": [50364, 400, 264, 41684, 307, 5922, 365, 264, 15743, 281, 264, 11568, 30237, 11, 558, 30, 50648, 50648, 400, 370, 309, 9898, 281, 8460, 257, 819, 11568, 30237, 2503, 293, 550, 9898, 281, 8460, 257, 2158, 51004, 51004, 490, 300, 13, 51028, 51028, 467, 1177, 380, 362, 281, 7754, 439, 264, 565, 570, 718, 311, 584, 498, 291, 362, 257, 1329, 295, 1045, 4754, 51324, 51324, 300, 1062, 643, 570, 295, 577, 264, 1329, 19265, 11, 577, 264, 1329, 283, 3334, 4527, 307, 3720, 11, 309, 1062, 643, 11, 51696, 51696], "temperature": 0.0, "avg_logprob": -0.18204349020253058, "compression_ratio": 1.658878504672897, "no_caption_prob": 4.1242608858738095e-05}, {"id": 602, "seek": 286184, "start": 2874.6400000000003, "end": 2875.1200000000003, "text": " from that.", "tokens": [50364, 400, 264, 41684, 307, 5922, 365, 264, 15743, 281, 264, 11568, 30237, 11, 558, 30, 50648, 50648, 400, 370, 309, 9898, 281, 8460, 257, 819, 11568, 30237, 2503, 293, 550, 9898, 281, 8460, 257, 2158, 51004, 51004, 490, 300, 13, 51028, 51028, 467, 1177, 380, 362, 281, 7754, 439, 264, 565, 570, 718, 311, 584, 498, 291, 362, 257, 1329, 295, 1045, 4754, 51324, 51324, 300, 1062, 643, 570, 295, 577, 264, 1329, 19265, 11, 577, 264, 1329, 283, 3334, 4527, 307, 3720, 11, 309, 1062, 643, 11, 51696, 51696], "temperature": 0.0, "avg_logprob": -0.18204349020253058, "compression_ratio": 1.658878504672897, "no_caption_prob": 4.1242608858738095e-05}, {"id": 603, "seek": 286184, "start": 2875.1200000000003, "end": 2881.04, "text": " It doesn't have to succeed all the time because let's say if you have a list of three items", "tokens": [50364, 400, 264, 41684, 307, 5922, 365, 264, 15743, 281, 264, 11568, 30237, 11, 558, 30, 50648, 50648, 400, 370, 309, 9898, 281, 8460, 257, 819, 11568, 30237, 2503, 293, 550, 9898, 281, 8460, 257, 2158, 51004, 51004, 490, 300, 13, 51028, 51028, 467, 1177, 380, 362, 281, 7754, 439, 264, 565, 570, 718, 311, 584, 498, 291, 362, 257, 1329, 295, 1045, 4754, 51324, 51324, 300, 1062, 643, 570, 295, 577, 264, 1329, 19265, 11, 577, 264, 1329, 283, 3334, 4527, 307, 3720, 11, 309, 1062, 643, 11, 51696, 51696], "temperature": 0.0, "avg_logprob": -0.18204349020253058, "compression_ratio": 1.658878504672897, "no_caption_prob": 4.1242608858738095e-05}, {"id": 604, "seek": 286184, "start": 2881.04, "end": 2888.48, "text": " that might need because of how the list generator, how the list fuzzer is written, it might need,", "tokens": [50364, 400, 264, 41684, 307, 5922, 365, 264, 15743, 281, 264, 11568, 30237, 11, 558, 30, 50648, 50648, 400, 370, 309, 9898, 281, 8460, 257, 819, 11568, 30237, 2503, 293, 550, 9898, 281, 8460, 257, 2158, 51004, 51004, 490, 300, 13, 51028, 51028, 467, 1177, 380, 362, 281, 7754, 439, 264, 565, 570, 718, 311, 584, 498, 291, 362, 257, 1329, 295, 1045, 4754, 51324, 51324, 300, 1062, 643, 570, 295, 577, 264, 1329, 19265, 11, 577, 264, 1329, 283, 3334, 4527, 307, 3720, 11, 309, 1062, 643, 11, 51696, 51696], "temperature": 0.0, "avg_logprob": -0.18204349020253058, "compression_ratio": 1.658878504672897, "no_caption_prob": 4.1242608858738095e-05}, {"id": 605, "seek": 288848, "start": 2888.48, "end": 2894.16, "text": " let's say three or four values, like three or four dice rolls.", "tokens": [50364, 718, 311, 584, 1045, 420, 1451, 4190, 11, 411, 1045, 420, 1451, 10313, 15767, 13, 50648, 50648, 400, 498, 291, 23060, 300, 2503, 666, 257, 1329, 295, 732, 10313, 15767, 11, 550, 291, 393, 1128, 8460, 51008, 51008, 257, 1329, 295, 1451, 4190, 484, 295, 300, 13, 51084, 51084, 821, 311, 445, 886, 707, 1589, 11, 558, 30, 51224, 51224, 400, 370, 309, 1177, 380, 643, 281, 7754, 633, 565, 13, 51400, 51400, 583, 498, 309, 1177, 380, 7754, 11, 309, 445, 19251, 300, 41684, 5217, 1314, 13, 51676, 51676], "temperature": 0.0, "avg_logprob": -0.13687019762785538, "compression_ratio": 1.6893203883495145, "no_caption_prob": 1.1838710634037852e-05}, {"id": 606, "seek": 288848, "start": 2894.16, "end": 2901.36, "text": " And if you shrink that history into a list of two dice rolls, then you can never generate", "tokens": [50364, 718, 311, 584, 1045, 420, 1451, 4190, 11, 411, 1045, 420, 1451, 10313, 15767, 13, 50648, 50648, 400, 498, 291, 23060, 300, 2503, 666, 257, 1329, 295, 732, 10313, 15767, 11, 550, 291, 393, 1128, 8460, 51008, 51008, 257, 1329, 295, 1451, 4190, 484, 295, 300, 13, 51084, 51084, 821, 311, 445, 886, 707, 1589, 11, 558, 30, 51224, 51224, 400, 370, 309, 1177, 380, 643, 281, 7754, 633, 565, 13, 51400, 51400, 583, 498, 309, 1177, 380, 7754, 11, 309, 445, 19251, 300, 41684, 5217, 1314, 13, 51676, 51676], "temperature": 0.0, "avg_logprob": -0.13687019762785538, "compression_ratio": 1.6893203883495145, "no_caption_prob": 1.1838710634037852e-05}, {"id": 607, "seek": 288848, "start": 2901.36, "end": 2902.88, "text": " a list of four values out of that.", "tokens": [50364, 718, 311, 584, 1045, 420, 1451, 4190, 11, 411, 1045, 420, 1451, 10313, 15767, 13, 50648, 50648, 400, 498, 291, 23060, 300, 2503, 666, 257, 1329, 295, 732, 10313, 15767, 11, 550, 291, 393, 1128, 8460, 51008, 51008, 257, 1329, 295, 1451, 4190, 484, 295, 300, 13, 51084, 51084, 821, 311, 445, 886, 707, 1589, 11, 558, 30, 51224, 51224, 400, 370, 309, 1177, 380, 643, 281, 7754, 633, 565, 13, 51400, 51400, 583, 498, 309, 1177, 380, 7754, 11, 309, 445, 19251, 300, 41684, 5217, 1314, 13, 51676, 51676], "temperature": 0.0, "avg_logprob": -0.13687019762785538, "compression_ratio": 1.6893203883495145, "no_caption_prob": 1.1838710634037852e-05}, {"id": 608, "seek": 288848, "start": 2902.88, "end": 2905.68, "text": " There's just too little information, right?", "tokens": [50364, 718, 311, 584, 1045, 420, 1451, 4190, 11, 411, 1045, 420, 1451, 10313, 15767, 13, 50648, 50648, 400, 498, 291, 23060, 300, 2503, 666, 257, 1329, 295, 732, 10313, 15767, 11, 550, 291, 393, 1128, 8460, 51008, 51008, 257, 1329, 295, 1451, 4190, 484, 295, 300, 13, 51084, 51084, 821, 311, 445, 886, 707, 1589, 11, 558, 30, 51224, 51224, 400, 370, 309, 1177, 380, 643, 281, 7754, 633, 565, 13, 51400, 51400, 583, 498, 309, 1177, 380, 7754, 11, 309, 445, 19251, 300, 41684, 5217, 1314, 13, 51676, 51676], "temperature": 0.0, "avg_logprob": -0.13687019762785538, "compression_ratio": 1.6893203883495145, "no_caption_prob": 1.1838710634037852e-05}, {"id": 609, "seek": 288848, "start": 2905.68, "end": 2909.2, "text": " And so it doesn't need to succeed every time.", "tokens": [50364, 718, 311, 584, 1045, 420, 1451, 4190, 11, 411, 1045, 420, 1451, 10313, 15767, 13, 50648, 50648, 400, 498, 291, 23060, 300, 2503, 666, 257, 1329, 295, 732, 10313, 15767, 11, 550, 291, 393, 1128, 8460, 51008, 51008, 257, 1329, 295, 1451, 4190, 484, 295, 300, 13, 51084, 51084, 821, 311, 445, 886, 707, 1589, 11, 558, 30, 51224, 51224, 400, 370, 309, 1177, 380, 643, 281, 7754, 633, 565, 13, 51400, 51400, 583, 498, 309, 1177, 380, 7754, 11, 309, 445, 19251, 300, 41684, 5217, 1314, 13, 51676, 51676], "temperature": 0.0, "avg_logprob": -0.13687019762785538, "compression_ratio": 1.6893203883495145, "no_caption_prob": 1.1838710634037852e-05}, {"id": 610, "seek": 288848, "start": 2909.2, "end": 2914.72, "text": " But if it doesn't succeed, it just throws that shrinking attempt away.", "tokens": [50364, 718, 311, 584, 1045, 420, 1451, 4190, 11, 411, 1045, 420, 1451, 10313, 15767, 13, 50648, 50648, 400, 498, 291, 23060, 300, 2503, 666, 257, 1329, 295, 732, 10313, 15767, 11, 550, 291, 393, 1128, 8460, 51008, 51008, 257, 1329, 295, 1451, 4190, 484, 295, 300, 13, 51084, 51084, 821, 311, 445, 886, 707, 1589, 11, 558, 30, 51224, 51224, 400, 370, 309, 1177, 380, 643, 281, 7754, 633, 565, 13, 51400, 51400, 583, 498, 309, 1177, 380, 7754, 11, 309, 445, 19251, 300, 41684, 5217, 1314, 13, 51676, 51676], "temperature": 0.0, "avg_logprob": -0.13687019762785538, "compression_ratio": 1.6893203883495145, "no_caption_prob": 1.1838710634037852e-05}, {"id": 611, "seek": 291472, "start": 2914.72, "end": 2922.64, "text": " And it keeps those that are somehow simpler, but still generate a value and that value", "tokens": [50364, 400, 309, 5965, 729, 300, 366, 6063, 18587, 11, 457, 920, 8460, 257, 2158, 293, 300, 2158, 50760, 50796, 920, 18199, 13, 50852, 50852, 400, 370, 291, 366, 2614, 428, 19265, 439, 264, 565, 13, 51052, 51052, 509, 366, 11, 300, 311, 264, 2649, 13, 51164, 51200, 407, 294, 264, 371, 16, 3109, 11, 291, 8460, 257, 2158, 293, 550, 291, 1190, 264, 23060, 260, 293, 264, 1500, 51536, 51536, 257, 688, 295, 1413, 13, 51584, 51584], "temperature": 0.0, "avg_logprob": -0.25101470947265625, "compression_ratio": 1.6436781609195403, "no_caption_prob": 3.1193470931611955e-05}, {"id": 612, "seek": 291472, "start": 2923.3599999999997, "end": 2924.48, "text": " still fails.", "tokens": [50364, 400, 309, 5965, 729, 300, 366, 6063, 18587, 11, 457, 920, 8460, 257, 2158, 293, 300, 2158, 50760, 50796, 920, 18199, 13, 50852, 50852, 400, 370, 291, 366, 2614, 428, 19265, 439, 264, 565, 13, 51052, 51052, 509, 366, 11, 300, 311, 264, 2649, 13, 51164, 51200, 407, 294, 264, 371, 16, 3109, 11, 291, 8460, 257, 2158, 293, 550, 291, 1190, 264, 23060, 260, 293, 264, 1500, 51536, 51536, 257, 688, 295, 1413, 13, 51584, 51584], "temperature": 0.0, "avg_logprob": -0.25101470947265625, "compression_ratio": 1.6436781609195403, "no_caption_prob": 3.1193470931611955e-05}, {"id": 613, "seek": 291472, "start": 2924.48, "end": 2928.48, "text": " And so you are running your generator all the time.", "tokens": [50364, 400, 309, 5965, 729, 300, 366, 6063, 18587, 11, 457, 920, 8460, 257, 2158, 293, 300, 2158, 50760, 50796, 920, 18199, 13, 50852, 50852, 400, 370, 291, 366, 2614, 428, 19265, 439, 264, 565, 13, 51052, 51052, 509, 366, 11, 300, 311, 264, 2649, 13, 51164, 51200, 407, 294, 264, 371, 16, 3109, 11, 291, 8460, 257, 2158, 293, 550, 291, 1190, 264, 23060, 260, 293, 264, 1500, 51536, 51536, 257, 688, 295, 1413, 13, 51584, 51584], "temperature": 0.0, "avg_logprob": -0.25101470947265625, "compression_ratio": 1.6436781609195403, "no_caption_prob": 3.1193470931611955e-05}, {"id": 614, "seek": 291472, "start": 2928.48, "end": 2930.72, "text": " You are, that's the difference.", "tokens": [50364, 400, 309, 5965, 729, 300, 366, 6063, 18587, 11, 457, 920, 8460, 257, 2158, 293, 300, 2158, 50760, 50796, 920, 18199, 13, 50852, 50852, 400, 370, 291, 366, 2614, 428, 19265, 439, 264, 565, 13, 51052, 51052, 509, 366, 11, 300, 311, 264, 2649, 13, 51164, 51200, 407, 294, 264, 371, 16, 3109, 11, 291, 8460, 257, 2158, 293, 550, 291, 1190, 264, 23060, 260, 293, 264, 1500, 51536, 51536, 257, 688, 295, 1413, 13, 51584, 51584], "temperature": 0.0, "avg_logprob": -0.25101470947265625, "compression_ratio": 1.6436781609195403, "no_caption_prob": 3.1193470931611955e-05}, {"id": 615, "seek": 291472, "start": 2931.4399999999996, "end": 2938.16, "text": " So in the v1 approach, you generate a value and then you run the shrinker and the test", "tokens": [50364, 400, 309, 5965, 729, 300, 366, 6063, 18587, 11, 457, 920, 8460, 257, 2158, 293, 300, 2158, 50760, 50796, 920, 18199, 13, 50852, 50852, 400, 370, 291, 366, 2614, 428, 19265, 439, 264, 565, 13, 51052, 51052, 509, 366, 11, 300, 311, 264, 2649, 13, 51164, 51200, 407, 294, 264, 371, 16, 3109, 11, 291, 8460, 257, 2158, 293, 550, 291, 1190, 264, 23060, 260, 293, 264, 1500, 51536, 51536, 257, 688, 295, 1413, 13, 51584, 51584], "temperature": 0.0, "avg_logprob": -0.25101470947265625, "compression_ratio": 1.6436781609195403, "no_caption_prob": 3.1193470931611955e-05}, {"id": 616, "seek": 291472, "start": 2938.16, "end": 2939.12, "text": " a lot of times.", "tokens": [50364, 400, 309, 5965, 729, 300, 366, 6063, 18587, 11, 457, 920, 8460, 257, 2158, 293, 300, 2158, 50760, 50796, 920, 18199, 13, 50852, 50852, 400, 370, 291, 366, 2614, 428, 19265, 439, 264, 565, 13, 51052, 51052, 509, 366, 11, 300, 311, 264, 2649, 13, 51164, 51200, 407, 294, 264, 371, 16, 3109, 11, 291, 8460, 257, 2158, 293, 550, 291, 1190, 264, 23060, 260, 293, 264, 1500, 51536, 51536, 257, 688, 295, 1413, 13, 51584, 51584], "temperature": 0.0, "avg_logprob": -0.25101470947265625, "compression_ratio": 1.6436781609195403, "no_caption_prob": 3.1193470931611955e-05}, {"id": 617, "seek": 293912, "start": 2939.12, "end": 2945.2, "text": " But in the v2 approach, you are generating a lot of times when you find a failing value,", "tokens": [50364, 583, 294, 264, 371, 17, 3109, 11, 291, 366, 17746, 257, 688, 295, 1413, 562, 291, 915, 257, 18223, 2158, 11, 50668, 50668, 291, 1190, 264, 23060, 260, 13, 50740, 50740, 400, 934, 633, 23060, 11, 291, 1190, 264, 19265, 797, 13, 50944, 50968, 400, 370, 439, 264, 33270, 1719, 366, 920, 4305, 13, 51108, 51108, 407, 291, 600, 3720, 364, 11484, 5934, 337, 2614, 428, 283, 16740, 433, 420, 428, 283, 16740, 6921, 13, 51372, 51372, 400, 294, 264, 371, 16, 9362, 11, 286, 536, 257, 688, 295, 4960, 295, 4974, 38662, 13, 51692, 51692], "temperature": 0.0, "avg_logprob": -0.2259870062069017, "compression_ratio": 1.6476190476190475, "no_caption_prob": 7.483740046154708e-05}, {"id": 618, "seek": 293912, "start": 2945.2, "end": 2946.64, "text": " you run the shrinker.", "tokens": [50364, 583, 294, 264, 371, 17, 3109, 11, 291, 366, 17746, 257, 688, 295, 1413, 562, 291, 915, 257, 18223, 2158, 11, 50668, 50668, 291, 1190, 264, 23060, 260, 13, 50740, 50740, 400, 934, 633, 23060, 11, 291, 1190, 264, 19265, 797, 13, 50944, 50968, 400, 370, 439, 264, 33270, 1719, 366, 920, 4305, 13, 51108, 51108, 407, 291, 600, 3720, 364, 11484, 5934, 337, 2614, 428, 283, 16740, 433, 420, 428, 283, 16740, 6921, 13, 51372, 51372, 400, 294, 264, 371, 16, 9362, 11, 286, 536, 257, 688, 295, 4960, 295, 4974, 38662, 13, 51692, 51692], "temperature": 0.0, "avg_logprob": -0.2259870062069017, "compression_ratio": 1.6476190476190475, "no_caption_prob": 7.483740046154708e-05}, {"id": 619, "seek": 293912, "start": 2946.64, "end": 2950.72, "text": " And after every shrink, you run the generator again.", "tokens": [50364, 583, 294, 264, 371, 17, 3109, 11, 291, 366, 17746, 257, 688, 295, 1413, 562, 291, 915, 257, 18223, 2158, 11, 50668, 50668, 291, 1190, 264, 23060, 260, 13, 50740, 50740, 400, 934, 633, 23060, 11, 291, 1190, 264, 19265, 797, 13, 50944, 50968, 400, 370, 439, 264, 33270, 1719, 366, 920, 4305, 13, 51108, 51108, 407, 291, 600, 3720, 364, 11484, 5934, 337, 2614, 428, 283, 16740, 433, 420, 428, 283, 16740, 6921, 13, 51372, 51372, 400, 294, 264, 371, 16, 9362, 11, 286, 536, 257, 688, 295, 4960, 295, 4974, 38662, 13, 51692, 51692], "temperature": 0.0, "avg_logprob": -0.2259870062069017, "compression_ratio": 1.6476190476190475, "no_caption_prob": 7.483740046154708e-05}, {"id": 620, "seek": 293912, "start": 2951.2, "end": 2954.0, "text": " And so all the invariants are still kept.", "tokens": [50364, 583, 294, 264, 371, 17, 3109, 11, 291, 366, 17746, 257, 688, 295, 1413, 562, 291, 915, 257, 18223, 2158, 11, 50668, 50668, 291, 1190, 264, 23060, 260, 13, 50740, 50740, 400, 934, 633, 23060, 11, 291, 1190, 264, 19265, 797, 13, 50944, 50968, 400, 370, 439, 264, 33270, 1719, 366, 920, 4305, 13, 51108, 51108, 407, 291, 600, 3720, 364, 11484, 5934, 337, 2614, 428, 283, 16740, 433, 420, 428, 283, 16740, 6921, 13, 51372, 51372, 400, 294, 264, 371, 16, 9362, 11, 286, 536, 257, 688, 295, 4960, 295, 4974, 38662, 13, 51692, 51692], "temperature": 0.0, "avg_logprob": -0.2259870062069017, "compression_ratio": 1.6476190476190475, "no_caption_prob": 7.483740046154708e-05}, {"id": 621, "seek": 293912, "start": 2954.0, "end": 2959.2799999999997, "text": " So you've written an upgrade guide for running your fuzzers or your fuzz tests.", "tokens": [50364, 583, 294, 264, 371, 17, 3109, 11, 291, 366, 17746, 257, 688, 295, 1413, 562, 291, 915, 257, 18223, 2158, 11, 50668, 50668, 291, 1190, 264, 23060, 260, 13, 50740, 50740, 400, 934, 633, 23060, 11, 291, 1190, 264, 19265, 797, 13, 50944, 50968, 400, 370, 439, 264, 33270, 1719, 366, 920, 4305, 13, 51108, 51108, 407, 291, 600, 3720, 364, 11484, 5934, 337, 2614, 428, 283, 16740, 433, 420, 428, 283, 16740, 6921, 13, 51372, 51372, 400, 294, 264, 371, 16, 9362, 11, 286, 536, 257, 688, 295, 4960, 295, 4974, 38662, 13, 51692, 51692], "temperature": 0.0, "avg_logprob": -0.2259870062069017, "compression_ratio": 1.6476190476190475, "no_caption_prob": 7.483740046154708e-05}, {"id": 622, "seek": 293912, "start": 2959.2799999999997, "end": 2965.68, "text": " And in the v1 API, I see a lot of uses of random generators.", "tokens": [50364, 583, 294, 264, 371, 17, 3109, 11, 291, 366, 17746, 257, 688, 295, 1413, 562, 291, 915, 257, 18223, 2158, 11, 50668, 50668, 291, 1190, 264, 23060, 260, 13, 50740, 50740, 400, 934, 633, 23060, 11, 291, 1190, 264, 19265, 797, 13, 50944, 50968, 400, 370, 439, 264, 33270, 1719, 366, 920, 4305, 13, 51108, 51108, 407, 291, 600, 3720, 364, 11484, 5934, 337, 2614, 428, 283, 16740, 433, 420, 428, 283, 16740, 6921, 13, 51372, 51372, 400, 294, 264, 371, 16, 9362, 11, 286, 536, 257, 688, 295, 4960, 295, 4974, 38662, 13, 51692, 51692], "temperature": 0.0, "avg_logprob": -0.2259870062069017, "compression_ratio": 1.6476190476190475, "no_caption_prob": 7.483740046154708e-05}, {"id": 623, "seek": 296568, "start": 2965.68, "end": 2969.2799999999997, "text": " And in the v2, you use a lot of fuzzers instead.", "tokens": [50364, 400, 294, 264, 371, 17, 11, 291, 764, 257, 688, 295, 283, 16740, 433, 2602, 13, 50544, 50544, 407, 341, 3417, 411, 309, 311, 257, 6883, 3774, 281, 264, 9362, 13, 50748, 50748, 467, 311, 257, 688, 544, 8398, 13, 50876, 50876, 400, 286, 478, 17939, 291, 611, 483, 257, 1326, 5311, 484, 295, 309, 13, 51016, 51016, 865, 13, 51040, 51040, 407, 337, 291, 382, 264, 4195, 11, 286, 1697, 309, 311, 1481, 300, 291, 393, 1754, 294, 472, 10088, 293, 445, 764, 51448, 51448, 472, 10088, 4498, 293, 5109, 1203, 291, 528, 445, 365, 283, 16740, 433, 13, 51680, 51708], "temperature": 0.0, "avg_logprob": -0.224636774796706, "compression_ratio": 1.5675675675675675, "no_caption_prob": 2.7965557819698006e-05}, {"id": 624, "seek": 296568, "start": 2969.2799999999997, "end": 2973.3599999999997, "text": " So this feels like it's a simplification to the API.", "tokens": [50364, 400, 294, 264, 371, 17, 11, 291, 764, 257, 688, 295, 283, 16740, 433, 2602, 13, 50544, 50544, 407, 341, 3417, 411, 309, 311, 257, 6883, 3774, 281, 264, 9362, 13, 50748, 50748, 467, 311, 257, 688, 544, 8398, 13, 50876, 50876, 400, 286, 478, 17939, 291, 611, 483, 257, 1326, 5311, 484, 295, 309, 13, 51016, 51016, 865, 13, 51040, 51040, 407, 337, 291, 382, 264, 4195, 11, 286, 1697, 309, 311, 1481, 300, 291, 393, 1754, 294, 472, 10088, 293, 445, 764, 51448, 51448, 472, 10088, 4498, 293, 5109, 1203, 291, 528, 445, 365, 283, 16740, 433, 13, 51680, 51708], "temperature": 0.0, "avg_logprob": -0.224636774796706, "compression_ratio": 1.5675675675675675, "no_caption_prob": 2.7965557819698006e-05}, {"id": 625, "seek": 296568, "start": 2973.3599999999997, "end": 2975.9199999999996, "text": " It's a lot more consistent.", "tokens": [50364, 400, 294, 264, 371, 17, 11, 291, 764, 257, 688, 295, 283, 16740, 433, 2602, 13, 50544, 50544, 407, 341, 3417, 411, 309, 311, 257, 6883, 3774, 281, 264, 9362, 13, 50748, 50748, 467, 311, 257, 688, 544, 8398, 13, 50876, 50876, 400, 286, 478, 17939, 291, 611, 483, 257, 1326, 5311, 484, 295, 309, 13, 51016, 51016, 865, 13, 51040, 51040, 407, 337, 291, 382, 264, 4195, 11, 286, 1697, 309, 311, 1481, 300, 291, 393, 1754, 294, 472, 10088, 293, 445, 764, 51448, 51448, 472, 10088, 4498, 293, 5109, 1203, 291, 528, 445, 365, 283, 16740, 433, 13, 51680, 51708], "temperature": 0.0, "avg_logprob": -0.224636774796706, "compression_ratio": 1.5675675675675675, "no_caption_prob": 2.7965557819698006e-05}, {"id": 626, "seek": 296568, "start": 2975.9199999999996, "end": 2978.72, "text": " And I'm guessing you also get a few benefits out of it.", "tokens": [50364, 400, 294, 264, 371, 17, 11, 291, 764, 257, 688, 295, 283, 16740, 433, 2602, 13, 50544, 50544, 407, 341, 3417, 411, 309, 311, 257, 6883, 3774, 281, 264, 9362, 13, 50748, 50748, 467, 311, 257, 688, 544, 8398, 13, 50876, 50876, 400, 286, 478, 17939, 291, 611, 483, 257, 1326, 5311, 484, 295, 309, 13, 51016, 51016, 865, 13, 51040, 51040, 407, 337, 291, 382, 264, 4195, 11, 286, 1697, 309, 311, 1481, 300, 291, 393, 1754, 294, 472, 10088, 293, 445, 764, 51448, 51448, 472, 10088, 4498, 293, 5109, 1203, 291, 528, 445, 365, 283, 16740, 433, 13, 51680, 51708], "temperature": 0.0, "avg_logprob": -0.224636774796706, "compression_ratio": 1.5675675675675675, "no_caption_prob": 2.7965557819698006e-05}, {"id": 627, "seek": 296568, "start": 2978.72, "end": 2979.2, "text": " Yeah.", "tokens": [50364, 400, 294, 264, 371, 17, 11, 291, 764, 257, 688, 295, 283, 16740, 433, 2602, 13, 50544, 50544, 407, 341, 3417, 411, 309, 311, 257, 6883, 3774, 281, 264, 9362, 13, 50748, 50748, 467, 311, 257, 688, 544, 8398, 13, 50876, 50876, 400, 286, 478, 17939, 291, 611, 483, 257, 1326, 5311, 484, 295, 309, 13, 51016, 51016, 865, 13, 51040, 51040, 407, 337, 291, 382, 264, 4195, 11, 286, 1697, 309, 311, 1481, 300, 291, 393, 1754, 294, 472, 10088, 293, 445, 764, 51448, 51448, 472, 10088, 4498, 293, 5109, 1203, 291, 528, 445, 365, 283, 16740, 433, 13, 51680, 51708], "temperature": 0.0, "avg_logprob": -0.224636774796706, "compression_ratio": 1.5675675675675675, "no_caption_prob": 2.7965557819698006e-05}, {"id": 628, "seek": 296568, "start": 2979.2, "end": 2987.3599999999997, "text": " So for you as the user, I believe it's nice that you can stay in one module and just use", "tokens": [50364, 400, 294, 264, 371, 17, 11, 291, 764, 257, 688, 295, 283, 16740, 433, 2602, 13, 50544, 50544, 407, 341, 3417, 411, 309, 311, 257, 6883, 3774, 281, 264, 9362, 13, 50748, 50748, 467, 311, 257, 688, 544, 8398, 13, 50876, 50876, 400, 286, 478, 17939, 291, 611, 483, 257, 1326, 5311, 484, 295, 309, 13, 51016, 51016, 865, 13, 51040, 51040, 407, 337, 291, 382, 264, 4195, 11, 286, 1697, 309, 311, 1481, 300, 291, 393, 1754, 294, 472, 10088, 293, 445, 764, 51448, 51448, 472, 10088, 4498, 293, 5109, 1203, 291, 528, 445, 365, 283, 16740, 433, 13, 51680, 51708], "temperature": 0.0, "avg_logprob": -0.224636774796706, "compression_ratio": 1.5675675675675675, "no_caption_prob": 2.7965557819698006e-05}, {"id": 629, "seek": 296568, "start": 2987.3599999999997, "end": 2992.0, "text": " one module fully and express everything you want just with fuzzers.", "tokens": [50364, 400, 294, 264, 371, 17, 11, 291, 764, 257, 688, 295, 283, 16740, 433, 2602, 13, 50544, 50544, 407, 341, 3417, 411, 309, 311, 257, 6883, 3774, 281, 264, 9362, 13, 50748, 50748, 467, 311, 257, 688, 544, 8398, 13, 50876, 50876, 400, 286, 478, 17939, 291, 611, 483, 257, 1326, 5311, 484, 295, 309, 13, 51016, 51016, 865, 13, 51040, 51040, 407, 337, 291, 382, 264, 4195, 11, 286, 1697, 309, 311, 1481, 300, 291, 393, 1754, 294, 472, 10088, 293, 445, 764, 51448, 51448, 472, 10088, 4498, 293, 5109, 1203, 291, 528, 445, 365, 283, 16740, 433, 13, 51680, 51708], "temperature": 0.0, "avg_logprob": -0.224636774796706, "compression_ratio": 1.5675675675675675, "no_caption_prob": 2.7965557819698006e-05}, {"id": 630, "seek": 299200, "start": 2992.0, "end": 3001.6, "text": " And from the perspective of the library, it's needed because we need to track the PRNG history", "tokens": [50364, 400, 490, 264, 4585, 295, 264, 6405, 11, 309, 311, 2978, 570, 321, 643, 281, 2837, 264, 11568, 30237, 2503, 50844, 50844, 4175, 13, 50872, 50872, 407, 498, 321, 2729, 291, 257, 2445, 281, 1884, 257, 283, 3334, 4527, 490, 19265, 11, 597, 321, 360, 11, 457, 309, 311, 364, 7615, 51196, 51196, 25304, 293, 309, 486, 406, 23060, 731, 412, 439, 13, 51300, 51300, 407, 1767, 500, 380, 764, 309, 13, 51352, 51352, 583, 498, 291, 500, 380, 764, 437, 30, 51476, 51476, 4919, 30, 51504, 51504, 1468, 380, 764, 437, 30, 51568, 51568, 1468, 380, 764, 283, 16740, 490, 19265, 13, 51756, 51756], "temperature": 0.0, "avg_logprob": -0.29555379564517015, "compression_ratio": 1.6186046511627907, "no_caption_prob": 0.00018216196622233838}, {"id": 631, "seek": 299200, "start": 3001.6, "end": 3002.16, "text": " ourselves.", "tokens": [50364, 400, 490, 264, 4585, 295, 264, 6405, 11, 309, 311, 2978, 570, 321, 643, 281, 2837, 264, 11568, 30237, 2503, 50844, 50844, 4175, 13, 50872, 50872, 407, 498, 321, 2729, 291, 257, 2445, 281, 1884, 257, 283, 3334, 4527, 490, 19265, 11, 597, 321, 360, 11, 457, 309, 311, 364, 7615, 51196, 51196, 25304, 293, 309, 486, 406, 23060, 731, 412, 439, 13, 51300, 51300, 407, 1767, 500, 380, 764, 309, 13, 51352, 51352, 583, 498, 291, 500, 380, 764, 437, 30, 51476, 51476, 4919, 30, 51504, 51504, 1468, 380, 764, 437, 30, 51568, 51568, 1468, 380, 764, 283, 16740, 490, 19265, 13, 51756, 51756], "temperature": 0.0, "avg_logprob": -0.29555379564517015, "compression_ratio": 1.6186046511627907, "no_caption_prob": 0.00018216196622233838}, {"id": 632, "seek": 299200, "start": 3002.16, "end": 3008.64, "text": " So if we gave you a function to create a fuzzer from generator, which we do, but it's an escape", "tokens": [50364, 400, 490, 264, 4585, 295, 264, 6405, 11, 309, 311, 2978, 570, 321, 643, 281, 2837, 264, 11568, 30237, 2503, 50844, 50844, 4175, 13, 50872, 50872, 407, 498, 321, 2729, 291, 257, 2445, 281, 1884, 257, 283, 3334, 4527, 490, 19265, 11, 597, 321, 360, 11, 457, 309, 311, 364, 7615, 51196, 51196, 25304, 293, 309, 486, 406, 23060, 731, 412, 439, 13, 51300, 51300, 407, 1767, 500, 380, 764, 309, 13, 51352, 51352, 583, 498, 291, 500, 380, 764, 437, 30, 51476, 51476, 4919, 30, 51504, 51504, 1468, 380, 764, 437, 30, 51568, 51568, 1468, 380, 764, 283, 16740, 490, 19265, 13, 51756, 51756], "temperature": 0.0, "avg_logprob": -0.29555379564517015, "compression_ratio": 1.6186046511627907, "no_caption_prob": 0.00018216196622233838}, {"id": 633, "seek": 299200, "start": 3008.64, "end": 3010.72, "text": " hedge and it will not shrink well at all.", "tokens": [50364, 400, 490, 264, 4585, 295, 264, 6405, 11, 309, 311, 2978, 570, 321, 643, 281, 2837, 264, 11568, 30237, 2503, 50844, 50844, 4175, 13, 50872, 50872, 407, 498, 321, 2729, 291, 257, 2445, 281, 1884, 257, 283, 3334, 4527, 490, 19265, 11, 597, 321, 360, 11, 457, 309, 311, 364, 7615, 51196, 51196, 25304, 293, 309, 486, 406, 23060, 731, 412, 439, 13, 51300, 51300, 407, 1767, 500, 380, 764, 309, 13, 51352, 51352, 583, 498, 291, 500, 380, 764, 437, 30, 51476, 51476, 4919, 30, 51504, 51504, 1468, 380, 764, 437, 30, 51568, 51568, 1468, 380, 764, 283, 16740, 490, 19265, 13, 51756, 51756], "temperature": 0.0, "avg_logprob": -0.29555379564517015, "compression_ratio": 1.6186046511627907, "no_caption_prob": 0.00018216196622233838}, {"id": 634, "seek": 299200, "start": 3010.72, "end": 3011.76, "text": " So please don't use it.", "tokens": [50364, 400, 490, 264, 4585, 295, 264, 6405, 11, 309, 311, 2978, 570, 321, 643, 281, 2837, 264, 11568, 30237, 2503, 50844, 50844, 4175, 13, 50872, 50872, 407, 498, 321, 2729, 291, 257, 2445, 281, 1884, 257, 283, 3334, 4527, 490, 19265, 11, 597, 321, 360, 11, 457, 309, 311, 364, 7615, 51196, 51196, 25304, 293, 309, 486, 406, 23060, 731, 412, 439, 13, 51300, 51300, 407, 1767, 500, 380, 764, 309, 13, 51352, 51352, 583, 498, 291, 500, 380, 764, 437, 30, 51476, 51476, 4919, 30, 51504, 51504, 1468, 380, 764, 437, 30, 51568, 51568, 1468, 380, 764, 283, 16740, 490, 19265, 13, 51756, 51756], "temperature": 0.0, "avg_logprob": -0.29555379564517015, "compression_ratio": 1.6186046511627907, "no_caption_prob": 0.00018216196622233838}, {"id": 635, "seek": 299200, "start": 3011.76, "end": 3014.24, "text": " But if you don't use what?", "tokens": [50364, 400, 490, 264, 4585, 295, 264, 6405, 11, 309, 311, 2978, 570, 321, 643, 281, 2837, 264, 11568, 30237, 2503, 50844, 50844, 4175, 13, 50872, 50872, 407, 498, 321, 2729, 291, 257, 2445, 281, 1884, 257, 283, 3334, 4527, 490, 19265, 11, 597, 321, 360, 11, 457, 309, 311, 364, 7615, 51196, 51196, 25304, 293, 309, 486, 406, 23060, 731, 412, 439, 13, 51300, 51300, 407, 1767, 500, 380, 764, 309, 13, 51352, 51352, 583, 498, 291, 500, 380, 764, 437, 30, 51476, 51476, 4919, 30, 51504, 51504, 1468, 380, 764, 437, 30, 51568, 51568, 1468, 380, 764, 283, 16740, 490, 19265, 13, 51756, 51756], "temperature": 0.0, "avg_logprob": -0.29555379564517015, "compression_ratio": 1.6186046511627907, "no_caption_prob": 0.00018216196622233838}, {"id": 636, "seek": 299200, "start": 3014.24, "end": 3014.8, "text": " Sorry?", "tokens": [50364, 400, 490, 264, 4585, 295, 264, 6405, 11, 309, 311, 2978, 570, 321, 643, 281, 2837, 264, 11568, 30237, 2503, 50844, 50844, 4175, 13, 50872, 50872, 407, 498, 321, 2729, 291, 257, 2445, 281, 1884, 257, 283, 3334, 4527, 490, 19265, 11, 597, 321, 360, 11, 457, 309, 311, 364, 7615, 51196, 51196, 25304, 293, 309, 486, 406, 23060, 731, 412, 439, 13, 51300, 51300, 407, 1767, 500, 380, 764, 309, 13, 51352, 51352, 583, 498, 291, 500, 380, 764, 437, 30, 51476, 51476, 4919, 30, 51504, 51504, 1468, 380, 764, 437, 30, 51568, 51568, 1468, 380, 764, 283, 16740, 490, 19265, 13, 51756, 51756], "temperature": 0.0, "avg_logprob": -0.29555379564517015, "compression_ratio": 1.6186046511627907, "no_caption_prob": 0.00018216196622233838}, {"id": 637, "seek": 299200, "start": 3014.8, "end": 3016.08, "text": " Don't use what?", "tokens": [50364, 400, 490, 264, 4585, 295, 264, 6405, 11, 309, 311, 2978, 570, 321, 643, 281, 2837, 264, 11568, 30237, 2503, 50844, 50844, 4175, 13, 50872, 50872, 407, 498, 321, 2729, 291, 257, 2445, 281, 1884, 257, 283, 3334, 4527, 490, 19265, 11, 597, 321, 360, 11, 457, 309, 311, 364, 7615, 51196, 51196, 25304, 293, 309, 486, 406, 23060, 731, 412, 439, 13, 51300, 51300, 407, 1767, 500, 380, 764, 309, 13, 51352, 51352, 583, 498, 291, 500, 380, 764, 437, 30, 51476, 51476, 4919, 30, 51504, 51504, 1468, 380, 764, 437, 30, 51568, 51568, 1468, 380, 764, 283, 16740, 490, 19265, 13, 51756, 51756], "temperature": 0.0, "avg_logprob": -0.29555379564517015, "compression_ratio": 1.6186046511627907, "no_caption_prob": 0.00018216196622233838}, {"id": 638, "seek": 299200, "start": 3016.08, "end": 3019.84, "text": " Don't use fuzz from generator.", "tokens": [50364, 400, 490, 264, 4585, 295, 264, 6405, 11, 309, 311, 2978, 570, 321, 643, 281, 2837, 264, 11568, 30237, 2503, 50844, 50844, 4175, 13, 50872, 50872, 407, 498, 321, 2729, 291, 257, 2445, 281, 1884, 257, 283, 3334, 4527, 490, 19265, 11, 597, 321, 360, 11, 457, 309, 311, 364, 7615, 51196, 51196, 25304, 293, 309, 486, 406, 23060, 731, 412, 439, 13, 51300, 51300, 407, 1767, 500, 380, 764, 309, 13, 51352, 51352, 583, 498, 291, 500, 380, 764, 437, 30, 51476, 51476, 4919, 30, 51504, 51504, 1468, 380, 764, 437, 30, 51568, 51568, 1468, 380, 764, 283, 16740, 490, 19265, 13, 51756, 51756], "temperature": 0.0, "avg_logprob": -0.29555379564517015, "compression_ratio": 1.6186046511627907, "no_caption_prob": 0.00018216196622233838}, {"id": 639, "seek": 301984, "start": 3019.84, "end": 3028.7200000000003, "text": " Okay, I think it's the equivalent of the current fuzz custom with no shrinking, with shrinking", "tokens": [50364, 1033, 11, 286, 519, 309, 311, 264, 10344, 295, 264, 2190, 283, 16740, 2375, 365, 572, 41684, 11, 365, 41684, 50808, 50808, 15191, 13, 50844, 50844, 8537, 11, 321, 643, 281, 485, 50964, 51004, 440, 283, 16740, 6405, 307, 3094, 322, 1192, 295, 4974, 19265, 337, 41674, 293, 1825, 1646, 13, 51420, 51420, 1779, 30, 51444, 51476, 663, 311, 257, 6883, 3774, 11, 457, 1936, 300, 311, 309, 13, 51616, 51616], "temperature": 0.0, "avg_logprob": -0.3281172399651514, "compression_ratio": 1.4361702127659575, "no_caption_prob": 2.2820613594376482e-05}, {"id": 640, "seek": 301984, "start": 3028.7200000000003, "end": 3029.44, "text": " disabled.", "tokens": [50364, 1033, 11, 286, 519, 309, 311, 264, 10344, 295, 264, 2190, 283, 16740, 2375, 365, 572, 41684, 11, 365, 41684, 50808, 50808, 15191, 13, 50844, 50844, 8537, 11, 321, 643, 281, 485, 50964, 51004, 440, 283, 16740, 6405, 307, 3094, 322, 1192, 295, 4974, 19265, 337, 41674, 293, 1825, 1646, 13, 51420, 51420, 1779, 30, 51444, 51476, 663, 311, 257, 6883, 3774, 11, 457, 1936, 300, 311, 309, 13, 51616, 51616], "temperature": 0.0, "avg_logprob": -0.3281172399651514, "compression_ratio": 1.4361702127659575, "no_caption_prob": 2.2820613594376482e-05}, {"id": 641, "seek": 301984, "start": 3029.44, "end": 3031.84, "text": " Basically, we need to...", "tokens": [50364, 1033, 11, 286, 519, 309, 311, 264, 10344, 295, 264, 2190, 283, 16740, 2375, 365, 572, 41684, 11, 365, 41684, 50808, 50808, 15191, 13, 50844, 50844, 8537, 11, 321, 643, 281, 485, 50964, 51004, 440, 283, 16740, 6405, 307, 3094, 322, 1192, 295, 4974, 19265, 337, 41674, 293, 1825, 1646, 13, 51420, 51420, 1779, 30, 51444, 51476, 663, 311, 257, 6883, 3774, 11, 457, 1936, 300, 311, 309, 13, 51616, 51616], "temperature": 0.0, "avg_logprob": -0.3281172399651514, "compression_ratio": 1.4361702127659575, "no_caption_prob": 2.2820613594376482e-05}, {"id": 642, "seek": 301984, "start": 3032.6400000000003, "end": 3040.96, "text": " The fuzz library is built on top of random generator for integers and nothing else.", "tokens": [50364, 1033, 11, 286, 519, 309, 311, 264, 10344, 295, 264, 2190, 283, 16740, 2375, 365, 572, 41684, 11, 365, 41684, 50808, 50808, 15191, 13, 50844, 50844, 8537, 11, 321, 643, 281, 485, 50964, 51004, 440, 283, 16740, 6405, 307, 3094, 322, 1192, 295, 4974, 19265, 337, 41674, 293, 1825, 1646, 13, 51420, 51420, 1779, 30, 51444, 51476, 663, 311, 257, 6883, 3774, 11, 457, 1936, 300, 311, 309, 13, 51616, 51616], "temperature": 0.0, "avg_logprob": -0.3281172399651514, "compression_ratio": 1.4361702127659575, "no_caption_prob": 2.2820613594376482e-05}, {"id": 643, "seek": 301984, "start": 3040.96, "end": 3041.44, "text": " Right?", "tokens": [50364, 1033, 11, 286, 519, 309, 311, 264, 10344, 295, 264, 2190, 283, 16740, 2375, 365, 572, 41684, 11, 365, 41684, 50808, 50808, 15191, 13, 50844, 50844, 8537, 11, 321, 643, 281, 485, 50964, 51004, 440, 283, 16740, 6405, 307, 3094, 322, 1192, 295, 4974, 19265, 337, 41674, 293, 1825, 1646, 13, 51420, 51420, 1779, 30, 51444, 51476, 663, 311, 257, 6883, 3774, 11, 457, 1936, 300, 311, 309, 13, 51616, 51616], "temperature": 0.0, "avg_logprob": -0.3281172399651514, "compression_ratio": 1.4361702127659575, "no_caption_prob": 2.2820613594376482e-05}, {"id": 644, "seek": 301984, "start": 3042.08, "end": 3044.88, "text": " That's a simplification, but basically that's it.", "tokens": [50364, 1033, 11, 286, 519, 309, 311, 264, 10344, 295, 264, 2190, 283, 16740, 2375, 365, 572, 41684, 11, 365, 41684, 50808, 50808, 15191, 13, 50844, 50844, 8537, 11, 321, 643, 281, 485, 50964, 51004, 440, 283, 16740, 6405, 307, 3094, 322, 1192, 295, 4974, 19265, 337, 41674, 293, 1825, 1646, 13, 51420, 51420, 1779, 30, 51444, 51476, 663, 311, 257, 6883, 3774, 11, 457, 1936, 300, 311, 309, 13, 51616, 51616], "temperature": 0.0, "avg_logprob": -0.3281172399651514, "compression_ratio": 1.4361702127659575, "no_caption_prob": 2.2820613594376482e-05}, {"id": 645, "seek": 304488, "start": 3044.88, "end": 3051.44, "text": " And we build the whole like how to do floats out of integers, how to do strings out of", "tokens": [50364, 400, 321, 1322, 264, 1379, 411, 577, 281, 360, 37878, 484, 295, 41674, 11, 577, 281, 360, 13985, 484, 295, 50692, 50692, 41674, 11, 577, 281, 360, 1203, 1646, 490, 41674, 13, 50820, 50820, 492, 360, 300, 4175, 570, 321, 643, 281, 312, 1075, 281, 1797, 300, 1329, 295, 10833, 41674, 51076, 51076, 281, 23060, 309, 13, 51116, 51116, 1779, 30, 51140, 51172, 400, 370, 498, 321, 976, 291, 257, 2445, 689, 291, 393, 2893, 19265, 295, 428, 2375, 2010, 11, 51632, 51660], "temperature": 0.0, "avg_logprob": -0.19029072032255284, "compression_ratio": 1.6683417085427135, "no_caption_prob": 4.262335642124526e-05}, {"id": 646, "seek": 304488, "start": 3051.44, "end": 3054.0, "text": " integers, how to do everything else from integers.", "tokens": [50364, 400, 321, 1322, 264, 1379, 411, 577, 281, 360, 37878, 484, 295, 41674, 11, 577, 281, 360, 13985, 484, 295, 50692, 50692, 41674, 11, 577, 281, 360, 1203, 1646, 490, 41674, 13, 50820, 50820, 492, 360, 300, 4175, 570, 321, 643, 281, 312, 1075, 281, 1797, 300, 1329, 295, 10833, 41674, 51076, 51076, 281, 23060, 309, 13, 51116, 51116, 1779, 30, 51140, 51172, 400, 370, 498, 321, 976, 291, 257, 2445, 689, 291, 393, 2893, 19265, 295, 428, 2375, 2010, 11, 51632, 51660], "temperature": 0.0, "avg_logprob": -0.19029072032255284, "compression_ratio": 1.6683417085427135, "no_caption_prob": 4.262335642124526e-05}, {"id": 647, "seek": 304488, "start": 3054.0, "end": 3059.12, "text": " We do that ourselves because we need to be able to hold that list of generated integers", "tokens": [50364, 400, 321, 1322, 264, 1379, 411, 577, 281, 360, 37878, 484, 295, 41674, 11, 577, 281, 360, 13985, 484, 295, 50692, 50692, 41674, 11, 577, 281, 360, 1203, 1646, 490, 41674, 13, 50820, 50820, 492, 360, 300, 4175, 570, 321, 643, 281, 312, 1075, 281, 1797, 300, 1329, 295, 10833, 41674, 51076, 51076, 281, 23060, 309, 13, 51116, 51116, 1779, 30, 51140, 51172, 400, 370, 498, 321, 976, 291, 257, 2445, 689, 291, 393, 2893, 19265, 295, 428, 2375, 2010, 11, 51632, 51660], "temperature": 0.0, "avg_logprob": -0.19029072032255284, "compression_ratio": 1.6683417085427135, "no_caption_prob": 4.262335642124526e-05}, {"id": 648, "seek": 304488, "start": 3059.12, "end": 3059.92, "text": " to shrink it.", "tokens": [50364, 400, 321, 1322, 264, 1379, 411, 577, 281, 360, 37878, 484, 295, 41674, 11, 577, 281, 360, 13985, 484, 295, 50692, 50692, 41674, 11, 577, 281, 360, 1203, 1646, 490, 41674, 13, 50820, 50820, 492, 360, 300, 4175, 570, 321, 643, 281, 312, 1075, 281, 1797, 300, 1329, 295, 10833, 41674, 51076, 51076, 281, 23060, 309, 13, 51116, 51116, 1779, 30, 51140, 51172, 400, 370, 498, 321, 976, 291, 257, 2445, 689, 291, 393, 2893, 19265, 295, 428, 2375, 2010, 11, 51632, 51660], "temperature": 0.0, "avg_logprob": -0.19029072032255284, "compression_ratio": 1.6683417085427135, "no_caption_prob": 4.262335642124526e-05}, {"id": 649, "seek": 304488, "start": 3059.92, "end": 3060.4, "text": " Right?", "tokens": [50364, 400, 321, 1322, 264, 1379, 411, 577, 281, 360, 37878, 484, 295, 41674, 11, 577, 281, 360, 13985, 484, 295, 50692, 50692, 41674, 11, 577, 281, 360, 1203, 1646, 490, 41674, 13, 50820, 50820, 492, 360, 300, 4175, 570, 321, 643, 281, 312, 1075, 281, 1797, 300, 1329, 295, 10833, 41674, 51076, 51076, 281, 23060, 309, 13, 51116, 51116, 1779, 30, 51140, 51172, 400, 370, 498, 321, 976, 291, 257, 2445, 689, 291, 393, 2893, 19265, 295, 428, 2375, 2010, 11, 51632, 51660], "temperature": 0.0, "avg_logprob": -0.19029072032255284, "compression_ratio": 1.6683417085427135, "no_caption_prob": 4.262335642124526e-05}, {"id": 650, "seek": 304488, "start": 3061.04, "end": 3070.2400000000002, "text": " And so if we give you a function where you can provide generator of your custom type,", "tokens": [50364, 400, 321, 1322, 264, 1379, 411, 577, 281, 360, 37878, 484, 295, 41674, 11, 577, 281, 360, 13985, 484, 295, 50692, 50692, 41674, 11, 577, 281, 360, 1203, 1646, 490, 41674, 13, 50820, 50820, 492, 360, 300, 4175, 570, 321, 643, 281, 312, 1075, 281, 1797, 300, 1329, 295, 10833, 41674, 51076, 51076, 281, 23060, 309, 13, 51116, 51116, 1779, 30, 51140, 51172, 400, 370, 498, 321, 976, 291, 257, 2445, 689, 291, 393, 2893, 19265, 295, 428, 2375, 2010, 11, 51632, 51660], "temperature": 0.0, "avg_logprob": -0.19029072032255284, "compression_ratio": 1.6683417085427135, "no_caption_prob": 4.262335642124526e-05}, {"id": 651, "seek": 307024, "start": 3070.24, "end": 3079.2, "text": " we have no way of running it other than just generating a random integer, using that as", "tokens": [50364, 321, 362, 572, 636, 295, 2614, 309, 661, 813, 445, 17746, 257, 4974, 24922, 11, 1228, 300, 382, 50812, 50812, 257, 8871, 293, 20719, 300, 8871, 13, 50960, 50984, 583, 309, 311, 445, 411, 257, 33232, 1230, 11, 558, 30, 51128, 51128, 663, 311, 264, 935, 295, 9203, 13, 51252, 51252, 865, 11, 291, 393, 853, 293, 20460, 309, 13, 51452, 51452, 865, 11, 456, 311, 572, 3877, 300, 321, 727, 853, 281, 6063, 23060, 760, 13, 51740, 51740], "temperature": 0.0, "avg_logprob": -0.333488087595245, "compression_ratio": 1.530612244897959, "no_caption_prob": 3.4257274819538e-05}, {"id": 652, "seek": 307024, "start": 3079.2, "end": 3082.16, "text": " a seed and remembering that seed.", "tokens": [50364, 321, 362, 572, 636, 295, 2614, 309, 661, 813, 445, 17746, 257, 4974, 24922, 11, 1228, 300, 382, 50812, 50812, 257, 8871, 293, 20719, 300, 8871, 13, 50960, 50984, 583, 309, 311, 445, 411, 257, 33232, 1230, 11, 558, 30, 51128, 51128, 663, 311, 264, 935, 295, 9203, 13, 51252, 51252, 865, 11, 291, 393, 853, 293, 20460, 309, 13, 51452, 51452, 865, 11, 456, 311, 572, 3877, 300, 321, 727, 853, 281, 6063, 23060, 760, 13, 51740, 51740], "temperature": 0.0, "avg_logprob": -0.333488087595245, "compression_ratio": 1.530612244897959, "no_caption_prob": 3.4257274819538e-05}, {"id": 653, "seek": 307024, "start": 3082.64, "end": 3085.52, "text": " But it's just like a meaningless number, right?", "tokens": [50364, 321, 362, 572, 636, 295, 2614, 309, 661, 813, 445, 17746, 257, 4974, 24922, 11, 1228, 300, 382, 50812, 50812, 257, 8871, 293, 20719, 300, 8871, 13, 50960, 50984, 583, 309, 311, 445, 411, 257, 33232, 1230, 11, 558, 30, 51128, 51128, 663, 311, 264, 935, 295, 9203, 13, 51252, 51252, 865, 11, 291, 393, 853, 293, 20460, 309, 13, 51452, 51452, 865, 11, 456, 311, 572, 3877, 300, 321, 727, 853, 281, 6063, 23060, 760, 13, 51740, 51740], "temperature": 0.0, "avg_logprob": -0.333488087595245, "compression_ratio": 1.530612244897959, "no_caption_prob": 3.4257274819538e-05}, {"id": 654, "seek": 307024, "start": 3085.52, "end": 3088.0, "text": " That's the point of seeds.", "tokens": [50364, 321, 362, 572, 636, 295, 2614, 309, 661, 813, 445, 17746, 257, 4974, 24922, 11, 1228, 300, 382, 50812, 50812, 257, 8871, 293, 20719, 300, 8871, 13, 50960, 50984, 583, 309, 311, 445, 411, 257, 33232, 1230, 11, 558, 30, 51128, 51128, 663, 311, 264, 935, 295, 9203, 13, 51252, 51252, 865, 11, 291, 393, 853, 293, 20460, 309, 13, 51452, 51452, 865, 11, 456, 311, 572, 3877, 300, 321, 727, 853, 281, 6063, 23060, 760, 13, 51740, 51740], "temperature": 0.0, "avg_logprob": -0.333488087595245, "compression_ratio": 1.530612244897959, "no_caption_prob": 3.4257274819538e-05}, {"id": 655, "seek": 307024, "start": 3088.0, "end": 3092.0, "text": " Yeah, you can try and simplify it.", "tokens": [50364, 321, 362, 572, 636, 295, 2614, 309, 661, 813, 445, 17746, 257, 4974, 24922, 11, 1228, 300, 382, 50812, 50812, 257, 8871, 293, 20719, 300, 8871, 13, 50960, 50984, 583, 309, 311, 445, 411, 257, 33232, 1230, 11, 558, 30, 51128, 51128, 663, 311, 264, 935, 295, 9203, 13, 51252, 51252, 865, 11, 291, 393, 853, 293, 20460, 309, 13, 51452, 51452, 865, 11, 456, 311, 572, 3877, 300, 321, 727, 853, 281, 6063, 23060, 760, 13, 51740, 51740], "temperature": 0.0, "avg_logprob": -0.333488087595245, "compression_ratio": 1.530612244897959, "no_caption_prob": 3.4257274819538e-05}, {"id": 656, "seek": 307024, "start": 3092.0, "end": 3097.7599999999998, "text": " Yeah, there's no structure that we could try to somehow shrink down.", "tokens": [50364, 321, 362, 572, 636, 295, 2614, 309, 661, 813, 445, 17746, 257, 4974, 24922, 11, 1228, 300, 382, 50812, 50812, 257, 8871, 293, 20719, 300, 8871, 13, 50960, 50984, 583, 309, 311, 445, 411, 257, 33232, 1230, 11, 558, 30, 51128, 51128, 663, 311, 264, 935, 295, 9203, 13, 51252, 51252, 865, 11, 291, 393, 853, 293, 20460, 309, 13, 51452, 51452, 865, 11, 456, 311, 572, 3877, 300, 321, 727, 853, 281, 6063, 23060, 760, 13, 51740, 51740], "temperature": 0.0, "avg_logprob": -0.333488087595245, "compression_ratio": 1.530612244897959, "no_caption_prob": 3.4257274819538e-05}, {"id": 657, "seek": 309776, "start": 3097.76, "end": 3104.48, "text": " It's just one big integer and yeah, for the library it's a black box.", "tokens": [50364, 467, 311, 445, 472, 955, 24922, 293, 1338, 11, 337, 264, 6405, 309, 311, 257, 2211, 2424, 13, 50700, 50700, 865, 11, 291, 727, 853, 819, 15743, 11, 457, 291, 2759, 380, 458, 498, 436, 645, 18587, 420, 50852, 50852, 406, 13, 50876, 50876, 407, 437, 311, 264, 935, 30, 50932, 50932, 865, 13, 50960, 50960, 407, 286, 2041, 300, 311, 264, 3218, 295, 309, 13, 51148, 51148, 663, 586, 291, 500, 380, 643, 281, 764, 264, 4974, 6405, 11, 457, 321, 534, 10613, 19029, 291, 406, 51564, 51564, 281, 764, 309, 11, 406, 281, 764, 264, 7615, 3028, 13, 51684, 51684, 1779, 30, 51712, 51712], "temperature": 0.0, "avg_logprob": -0.3231220951786748, "compression_ratio": 1.6045454545454545, "no_caption_prob": 5.920002513448708e-05}, {"id": 658, "seek": 309776, "start": 3104.48, "end": 3107.5200000000004, "text": " Yeah, you could try different inputs, but you wouldn't know if they were simpler or", "tokens": [50364, 467, 311, 445, 472, 955, 24922, 293, 1338, 11, 337, 264, 6405, 309, 311, 257, 2211, 2424, 13, 50700, 50700, 865, 11, 291, 727, 853, 819, 15743, 11, 457, 291, 2759, 380, 458, 498, 436, 645, 18587, 420, 50852, 50852, 406, 13, 50876, 50876, 407, 437, 311, 264, 935, 30, 50932, 50932, 865, 13, 50960, 50960, 407, 286, 2041, 300, 311, 264, 3218, 295, 309, 13, 51148, 51148, 663, 586, 291, 500, 380, 643, 281, 764, 264, 4974, 6405, 11, 457, 321, 534, 10613, 19029, 291, 406, 51564, 51564, 281, 764, 309, 11, 406, 281, 764, 264, 7615, 3028, 13, 51684, 51684, 1779, 30, 51712, 51712], "temperature": 0.0, "avg_logprob": -0.3231220951786748, "compression_ratio": 1.6045454545454545, "no_caption_prob": 5.920002513448708e-05}, {"id": 659, "seek": 309776, "start": 3107.5200000000004, "end": 3108.0, "text": " not.", "tokens": [50364, 467, 311, 445, 472, 955, 24922, 293, 1338, 11, 337, 264, 6405, 309, 311, 257, 2211, 2424, 13, 50700, 50700, 865, 11, 291, 727, 853, 819, 15743, 11, 457, 291, 2759, 380, 458, 498, 436, 645, 18587, 420, 50852, 50852, 406, 13, 50876, 50876, 407, 437, 311, 264, 935, 30, 50932, 50932, 865, 13, 50960, 50960, 407, 286, 2041, 300, 311, 264, 3218, 295, 309, 13, 51148, 51148, 663, 586, 291, 500, 380, 643, 281, 764, 264, 4974, 6405, 11, 457, 321, 534, 10613, 19029, 291, 406, 51564, 51564, 281, 764, 309, 11, 406, 281, 764, 264, 7615, 3028, 13, 51684, 51684, 1779, 30, 51712, 51712], "temperature": 0.0, "avg_logprob": -0.3231220951786748, "compression_ratio": 1.6045454545454545, "no_caption_prob": 5.920002513448708e-05}, {"id": 660, "seek": 309776, "start": 3108.0, "end": 3109.1200000000003, "text": " So what's the point?", "tokens": [50364, 467, 311, 445, 472, 955, 24922, 293, 1338, 11, 337, 264, 6405, 309, 311, 257, 2211, 2424, 13, 50700, 50700, 865, 11, 291, 727, 853, 819, 15743, 11, 457, 291, 2759, 380, 458, 498, 436, 645, 18587, 420, 50852, 50852, 406, 13, 50876, 50876, 407, 437, 311, 264, 935, 30, 50932, 50932, 865, 13, 50960, 50960, 407, 286, 2041, 300, 311, 264, 3218, 295, 309, 13, 51148, 51148, 663, 586, 291, 500, 380, 643, 281, 764, 264, 4974, 6405, 11, 457, 321, 534, 10613, 19029, 291, 406, 51564, 51564, 281, 764, 309, 11, 406, 281, 764, 264, 7615, 3028, 13, 51684, 51684, 1779, 30, 51712, 51712], "temperature": 0.0, "avg_logprob": -0.3231220951786748, "compression_ratio": 1.6045454545454545, "no_caption_prob": 5.920002513448708e-05}, {"id": 661, "seek": 309776, "start": 3109.1200000000003, "end": 3109.6800000000003, "text": " Yeah.", "tokens": [50364, 467, 311, 445, 472, 955, 24922, 293, 1338, 11, 337, 264, 6405, 309, 311, 257, 2211, 2424, 13, 50700, 50700, 865, 11, 291, 727, 853, 819, 15743, 11, 457, 291, 2759, 380, 458, 498, 436, 645, 18587, 420, 50852, 50852, 406, 13, 50876, 50876, 407, 437, 311, 264, 935, 30, 50932, 50932, 865, 13, 50960, 50960, 407, 286, 2041, 300, 311, 264, 3218, 295, 309, 13, 51148, 51148, 663, 586, 291, 500, 380, 643, 281, 764, 264, 4974, 6405, 11, 457, 321, 534, 10613, 19029, 291, 406, 51564, 51564, 281, 764, 309, 11, 406, 281, 764, 264, 7615, 3028, 13, 51684, 51684, 1779, 30, 51712, 51712], "temperature": 0.0, "avg_logprob": -0.3231220951786748, "compression_ratio": 1.6045454545454545, "no_caption_prob": 5.920002513448708e-05}, {"id": 662, "seek": 309776, "start": 3109.6800000000003, "end": 3113.44, "text": " So I guess that's the price of it.", "tokens": [50364, 467, 311, 445, 472, 955, 24922, 293, 1338, 11, 337, 264, 6405, 309, 311, 257, 2211, 2424, 13, 50700, 50700, 865, 11, 291, 727, 853, 819, 15743, 11, 457, 291, 2759, 380, 458, 498, 436, 645, 18587, 420, 50852, 50852, 406, 13, 50876, 50876, 407, 437, 311, 264, 935, 30, 50932, 50932, 865, 13, 50960, 50960, 407, 286, 2041, 300, 311, 264, 3218, 295, 309, 13, 51148, 51148, 663, 586, 291, 500, 380, 643, 281, 764, 264, 4974, 6405, 11, 457, 321, 534, 10613, 19029, 291, 406, 51564, 51564, 281, 764, 309, 11, 406, 281, 764, 264, 7615, 3028, 13, 51684, 51684, 1779, 30, 51712, 51712], "temperature": 0.0, "avg_logprob": -0.3231220951786748, "compression_ratio": 1.6045454545454545, "no_caption_prob": 5.920002513448708e-05}, {"id": 663, "seek": 309776, "start": 3113.44, "end": 3121.76, "text": " That now you don't need to use the random library, but we really strongly urge you not", "tokens": [50364, 467, 311, 445, 472, 955, 24922, 293, 1338, 11, 337, 264, 6405, 309, 311, 257, 2211, 2424, 13, 50700, 50700, 865, 11, 291, 727, 853, 819, 15743, 11, 457, 291, 2759, 380, 458, 498, 436, 645, 18587, 420, 50852, 50852, 406, 13, 50876, 50876, 407, 437, 311, 264, 935, 30, 50932, 50932, 865, 13, 50960, 50960, 407, 286, 2041, 300, 311, 264, 3218, 295, 309, 13, 51148, 51148, 663, 586, 291, 500, 380, 643, 281, 764, 264, 4974, 6405, 11, 457, 321, 534, 10613, 19029, 291, 406, 51564, 51564, 281, 764, 309, 11, 406, 281, 764, 264, 7615, 3028, 13, 51684, 51684, 1779, 30, 51712, 51712], "temperature": 0.0, "avg_logprob": -0.3231220951786748, "compression_ratio": 1.6045454545454545, "no_caption_prob": 5.920002513448708e-05}, {"id": 664, "seek": 309776, "start": 3121.76, "end": 3124.1600000000003, "text": " to use it, not to use the escape page.", "tokens": [50364, 467, 311, 445, 472, 955, 24922, 293, 1338, 11, 337, 264, 6405, 309, 311, 257, 2211, 2424, 13, 50700, 50700, 865, 11, 291, 727, 853, 819, 15743, 11, 457, 291, 2759, 380, 458, 498, 436, 645, 18587, 420, 50852, 50852, 406, 13, 50876, 50876, 407, 437, 311, 264, 935, 30, 50932, 50932, 865, 13, 50960, 50960, 407, 286, 2041, 300, 311, 264, 3218, 295, 309, 13, 51148, 51148, 663, 586, 291, 500, 380, 643, 281, 764, 264, 4974, 6405, 11, 457, 321, 534, 10613, 19029, 291, 406, 51564, 51564, 281, 764, 309, 11, 406, 281, 764, 264, 7615, 3028, 13, 51684, 51684, 1779, 30, 51712, 51712], "temperature": 0.0, "avg_logprob": -0.3231220951786748, "compression_ratio": 1.6045454545454545, "no_caption_prob": 5.920002513448708e-05}, {"id": 665, "seek": 309776, "start": 3124.1600000000003, "end": 3124.7200000000003, "text": " Right?", "tokens": [50364, 467, 311, 445, 472, 955, 24922, 293, 1338, 11, 337, 264, 6405, 309, 311, 257, 2211, 2424, 13, 50700, 50700, 865, 11, 291, 727, 853, 819, 15743, 11, 457, 291, 2759, 380, 458, 498, 436, 645, 18587, 420, 50852, 50852, 406, 13, 50876, 50876, 407, 437, 311, 264, 935, 30, 50932, 50932, 865, 13, 50960, 50960, 407, 286, 2041, 300, 311, 264, 3218, 295, 309, 13, 51148, 51148, 663, 586, 291, 500, 380, 643, 281, 764, 264, 4974, 6405, 11, 457, 321, 534, 10613, 19029, 291, 406, 51564, 51564, 281, 764, 309, 11, 406, 281, 764, 264, 7615, 3028, 13, 51684, 51684, 1779, 30, 51712, 51712], "temperature": 0.0, "avg_logprob": -0.3231220951786748, "compression_ratio": 1.6045454545454545, "no_caption_prob": 5.920002513448708e-05}, {"id": 666, "seek": 312472, "start": 3124.72, "end": 3133.12, "text": " So sometimes you might need, if for example, if your library is exposing generators, it", "tokens": [50364, 407, 2171, 291, 1062, 643, 11, 498, 337, 1365, 11, 498, 428, 6405, 307, 33178, 38662, 11, 309, 50784, 50784, 1062, 586, 312, 257, 665, 1558, 281, 19219, 283, 16740, 433, 611, 13, 50988, 50988, 400, 291, 362, 572, 661, 3922, 813, 281, 2464, 552, 490, 8459, 1228, 264, 283, 3334, 4527, 9362, 13, 51268, 51300, 583, 321, 362, 3031, 281, 652, 309, 534, 2199, 281, 360, 370, 13, 51516, 51516], "temperature": 0.0, "avg_logprob": -0.17520719031765036, "compression_ratio": 1.4945054945054945, "no_caption_prob": 3.703049515024759e-05}, {"id": 667, "seek": 312472, "start": 3133.12, "end": 3137.2, "text": " might now be a good idea to expose fuzzers also.", "tokens": [50364, 407, 2171, 291, 1062, 643, 11, 498, 337, 1365, 11, 498, 428, 6405, 307, 33178, 38662, 11, 309, 50784, 50784, 1062, 586, 312, 257, 665, 1558, 281, 19219, 283, 16740, 433, 611, 13, 50988, 50988, 400, 291, 362, 572, 661, 3922, 813, 281, 2464, 552, 490, 8459, 1228, 264, 283, 3334, 4527, 9362, 13, 51268, 51300, 583, 321, 362, 3031, 281, 652, 309, 534, 2199, 281, 360, 370, 13, 51516, 51516], "temperature": 0.0, "avg_logprob": -0.17520719031765036, "compression_ratio": 1.4945054945054945, "no_caption_prob": 3.703049515024759e-05}, {"id": 668, "seek": 312472, "start": 3137.2, "end": 3142.7999999999997, "text": " And you have no other choice than to write them from scratch using the fuzzer API.", "tokens": [50364, 407, 2171, 291, 1062, 643, 11, 498, 337, 1365, 11, 498, 428, 6405, 307, 33178, 38662, 11, 309, 50784, 50784, 1062, 586, 312, 257, 665, 1558, 281, 19219, 283, 16740, 433, 611, 13, 50988, 50988, 400, 291, 362, 572, 661, 3922, 813, 281, 2464, 552, 490, 8459, 1228, 264, 283, 3334, 4527, 9362, 13, 51268, 51300, 583, 321, 362, 3031, 281, 652, 309, 534, 2199, 281, 360, 370, 13, 51516, 51516], "temperature": 0.0, "avg_logprob": -0.17520719031765036, "compression_ratio": 1.4945054945054945, "no_caption_prob": 3.703049515024759e-05}, {"id": 669, "seek": 312472, "start": 3143.4399999999996, "end": 3147.7599999999998, "text": " But we have tried to make it really simple to do so.", "tokens": [50364, 407, 2171, 291, 1062, 643, 11, 498, 337, 1365, 11, 498, 428, 6405, 307, 33178, 38662, 11, 309, 50784, 50784, 1062, 586, 312, 257, 665, 1558, 281, 19219, 283, 16740, 433, 611, 13, 50988, 50988, 400, 291, 362, 572, 661, 3922, 813, 281, 2464, 552, 490, 8459, 1228, 264, 283, 3334, 4527, 9362, 13, 51268, 51300, 583, 321, 362, 3031, 281, 652, 309, 534, 2199, 281, 360, 370, 13, 51516, 51516], "temperature": 0.0, "avg_logprob": -0.17520719031765036, "compression_ratio": 1.4945054945054945, "no_caption_prob": 3.703049515024759e-05}, {"id": 670, "seek": 314776, "start": 3147.76, "end": 3153.92, "text": " And I know of no cases where you could do something with the random module, but couldn't", "tokens": [50364, 400, 286, 458, 295, 572, 3331, 689, 291, 727, 360, 746, 365, 264, 4974, 10088, 11, 457, 2809, 380, 50672, 50672, 360, 309, 365, 264, 283, 3334, 4527, 10088, 13, 50748, 50748, 1033, 13, 50764, 50764, 407, 291, 445, 3869, 341, 7615, 17387, 445, 294, 1389, 11, 1936, 13, 50924, 50924, 865, 13, 50952, 50952, 1449, 294, 1389, 2618, 2738, 281, 764, 2636, 3595, 19265, 11, 558, 30, 51256, 51256, 509, 500, 380, 528, 281, 26506, 2699, 76, 18426, 293, 411, 536, 577, 264, 19265, 307, 2942, 445, 370, 300, 51600, 51600, 291, 393, 1884, 283, 3334, 4527, 2361, 322, 300, 13, 51732, 51732], "temperature": 0.0, "avg_logprob": -0.2594607911019955, "compression_ratio": 1.6176470588235294, "no_caption_prob": 0.00012139006139477715}, {"id": 671, "seek": 314776, "start": 3153.92, "end": 3155.44, "text": " do it with the fuzzer module.", "tokens": [50364, 400, 286, 458, 295, 572, 3331, 689, 291, 727, 360, 746, 365, 264, 4974, 10088, 11, 457, 2809, 380, 50672, 50672, 360, 309, 365, 264, 283, 3334, 4527, 10088, 13, 50748, 50748, 1033, 13, 50764, 50764, 407, 291, 445, 3869, 341, 7615, 17387, 445, 294, 1389, 11, 1936, 13, 50924, 50924, 865, 13, 50952, 50952, 1449, 294, 1389, 2618, 2738, 281, 764, 2636, 3595, 19265, 11, 558, 30, 51256, 51256, 509, 500, 380, 528, 281, 26506, 2699, 76, 18426, 293, 411, 536, 577, 264, 19265, 307, 2942, 445, 370, 300, 51600, 51600, 291, 393, 1884, 283, 3334, 4527, 2361, 322, 300, 13, 51732, 51732], "temperature": 0.0, "avg_logprob": -0.2594607911019955, "compression_ratio": 1.6176470588235294, "no_caption_prob": 0.00012139006139477715}, {"id": 672, "seek": 314776, "start": 3155.44, "end": 3155.76, "text": " Okay.", "tokens": [50364, 400, 286, 458, 295, 572, 3331, 689, 291, 727, 360, 746, 365, 264, 4974, 10088, 11, 457, 2809, 380, 50672, 50672, 360, 309, 365, 264, 283, 3334, 4527, 10088, 13, 50748, 50748, 1033, 13, 50764, 50764, 407, 291, 445, 3869, 341, 7615, 17387, 445, 294, 1389, 11, 1936, 13, 50924, 50924, 865, 13, 50952, 50952, 1449, 294, 1389, 2618, 2738, 281, 764, 2636, 3595, 19265, 11, 558, 30, 51256, 51256, 509, 500, 380, 528, 281, 26506, 2699, 76, 18426, 293, 411, 536, 577, 264, 19265, 307, 2942, 445, 370, 300, 51600, 51600, 291, 393, 1884, 283, 3334, 4527, 2361, 322, 300, 13, 51732, 51732], "temperature": 0.0, "avg_logprob": -0.2594607911019955, "compression_ratio": 1.6176470588235294, "no_caption_prob": 0.00012139006139477715}, {"id": 673, "seek": 314776, "start": 3155.76, "end": 3158.96, "text": " So you just added this escape hatch just in case, basically.", "tokens": [50364, 400, 286, 458, 295, 572, 3331, 689, 291, 727, 360, 746, 365, 264, 4974, 10088, 11, 457, 2809, 380, 50672, 50672, 360, 309, 365, 264, 283, 3334, 4527, 10088, 13, 50748, 50748, 1033, 13, 50764, 50764, 407, 291, 445, 3869, 341, 7615, 17387, 445, 294, 1389, 11, 1936, 13, 50924, 50924, 865, 13, 50952, 50952, 1449, 294, 1389, 2618, 2738, 281, 764, 2636, 3595, 19265, 11, 558, 30, 51256, 51256, 509, 500, 380, 528, 281, 26506, 2699, 76, 18426, 293, 411, 536, 577, 264, 19265, 307, 2942, 445, 370, 300, 51600, 51600, 291, 393, 1884, 283, 3334, 4527, 2361, 322, 300, 13, 51732, 51732], "temperature": 0.0, "avg_logprob": -0.2594607911019955, "compression_ratio": 1.6176470588235294, "no_caption_prob": 0.00012139006139477715}, {"id": 674, "seek": 314776, "start": 3158.96, "end": 3159.5200000000004, "text": " Yeah.", "tokens": [50364, 400, 286, 458, 295, 572, 3331, 689, 291, 727, 360, 746, 365, 264, 4974, 10088, 11, 457, 2809, 380, 50672, 50672, 360, 309, 365, 264, 283, 3334, 4527, 10088, 13, 50748, 50748, 1033, 13, 50764, 50764, 407, 291, 445, 3869, 341, 7615, 17387, 445, 294, 1389, 11, 1936, 13, 50924, 50924, 865, 13, 50952, 50952, 1449, 294, 1389, 2618, 2738, 281, 764, 2636, 3595, 19265, 11, 558, 30, 51256, 51256, 509, 500, 380, 528, 281, 26506, 2699, 76, 18426, 293, 411, 536, 577, 264, 19265, 307, 2942, 445, 370, 300, 51600, 51600, 291, 393, 1884, 283, 3334, 4527, 2361, 322, 300, 13, 51732, 51732], "temperature": 0.0, "avg_logprob": -0.2594607911019955, "compression_ratio": 1.6176470588235294, "no_caption_prob": 0.00012139006139477715}, {"id": 675, "seek": 314776, "start": 3159.5200000000004, "end": 3165.6000000000004, "text": " Just in case somebody wants to use third party generator, right?", "tokens": [50364, 400, 286, 458, 295, 572, 3331, 689, 291, 727, 360, 746, 365, 264, 4974, 10088, 11, 457, 2809, 380, 50672, 50672, 360, 309, 365, 264, 283, 3334, 4527, 10088, 13, 50748, 50748, 1033, 13, 50764, 50764, 407, 291, 445, 3869, 341, 7615, 17387, 445, 294, 1389, 11, 1936, 13, 50924, 50924, 865, 13, 50952, 50952, 1449, 294, 1389, 2618, 2738, 281, 764, 2636, 3595, 19265, 11, 558, 30, 51256, 51256, 509, 500, 380, 528, 281, 26506, 2699, 76, 18426, 293, 411, 536, 577, 264, 19265, 307, 2942, 445, 370, 300, 51600, 51600, 291, 393, 1884, 283, 3334, 4527, 2361, 322, 300, 13, 51732, 51732], "temperature": 0.0, "avg_logprob": -0.2594607911019955, "compression_ratio": 1.6176470588235294, "no_caption_prob": 0.00012139006139477715}, {"id": 676, "seek": 314776, "start": 3165.6000000000004, "end": 3172.48, "text": " You don't want to clone Elm geometry and like see how the generator is created just so that", "tokens": [50364, 400, 286, 458, 295, 572, 3331, 689, 291, 727, 360, 746, 365, 264, 4974, 10088, 11, 457, 2809, 380, 50672, 50672, 360, 309, 365, 264, 283, 3334, 4527, 10088, 13, 50748, 50748, 1033, 13, 50764, 50764, 407, 291, 445, 3869, 341, 7615, 17387, 445, 294, 1389, 11, 1936, 13, 50924, 50924, 865, 13, 50952, 50952, 1449, 294, 1389, 2618, 2738, 281, 764, 2636, 3595, 19265, 11, 558, 30, 51256, 51256, 509, 500, 380, 528, 281, 26506, 2699, 76, 18426, 293, 411, 536, 577, 264, 19265, 307, 2942, 445, 370, 300, 51600, 51600, 291, 393, 1884, 283, 3334, 4527, 2361, 322, 300, 13, 51732, 51732], "temperature": 0.0, "avg_logprob": -0.2594607911019955, "compression_ratio": 1.6176470588235294, "no_caption_prob": 0.00012139006139477715}, {"id": 677, "seek": 314776, "start": 3172.48, "end": 3175.1200000000003, "text": " you can create fuzzer based on that.", "tokens": [50364, 400, 286, 458, 295, 572, 3331, 689, 291, 727, 360, 746, 365, 264, 4974, 10088, 11, 457, 2809, 380, 50672, 50672, 360, 309, 365, 264, 283, 3334, 4527, 10088, 13, 50748, 50748, 1033, 13, 50764, 50764, 407, 291, 445, 3869, 341, 7615, 17387, 445, 294, 1389, 11, 1936, 13, 50924, 50924, 865, 13, 50952, 50952, 1449, 294, 1389, 2618, 2738, 281, 764, 2636, 3595, 19265, 11, 558, 30, 51256, 51256, 509, 500, 380, 528, 281, 26506, 2699, 76, 18426, 293, 411, 536, 577, 264, 19265, 307, 2942, 445, 370, 300, 51600, 51600, 291, 393, 1884, 283, 3334, 4527, 2361, 322, 300, 13, 51732, 51732], "temperature": 0.0, "avg_logprob": -0.2594607911019955, "compression_ratio": 1.6176470588235294, "no_caption_prob": 0.00012139006139477715}, {"id": 678, "seek": 317512, "start": 3175.12, "end": 3181.92, "text": " You could just use the escape page, but you are not going to get nice shrinking because", "tokens": [50364, 509, 727, 445, 764, 264, 7615, 3028, 11, 457, 291, 366, 406, 516, 281, 483, 1481, 41684, 570, 50704, 50704, 309, 311, 257, 2211, 2424, 13, 50760, 50760, 865, 13, 50792, 50832, 467, 1669, 2020, 300, 309, 6063, 411, 18293, 47982, 1589, 562, 291, 445, 362, 257, 51104, 51104, 19265, 570, 456, 366, 9239, 295, 1785, 293, 4361, 45298, 300, 264, 283, 3334, 4527, 5965, 2837, 51360, 51360, 295, 13, 51384, 51384, 286, 914, 11, 286, 727, 3811, 257, 1002, 689, 264, 2699, 76, 4974, 19265, 307, 445, 257, 4974, 19265, 51796, 51796], "temperature": 0.0, "avg_logprob": -0.2850136405543277, "compression_ratio": 1.6504424778761062, "no_caption_prob": 2.9309714591363445e-05}, {"id": 679, "seek": 317512, "start": 3181.92, "end": 3183.04, "text": " it's a black box.", "tokens": [50364, 509, 727, 445, 764, 264, 7615, 3028, 11, 457, 291, 366, 406, 516, 281, 483, 1481, 41684, 570, 50704, 50704, 309, 311, 257, 2211, 2424, 13, 50760, 50760, 865, 13, 50792, 50832, 467, 1669, 2020, 300, 309, 6063, 411, 18293, 47982, 1589, 562, 291, 445, 362, 257, 51104, 51104, 19265, 570, 456, 366, 9239, 295, 1785, 293, 4361, 45298, 300, 264, 283, 3334, 4527, 5965, 2837, 51360, 51360, 295, 13, 51384, 51384, 286, 914, 11, 286, 727, 3811, 257, 1002, 689, 264, 2699, 76, 4974, 19265, 307, 445, 257, 4974, 19265, 51796, 51796], "temperature": 0.0, "avg_logprob": -0.2850136405543277, "compression_ratio": 1.6504424778761062, "no_caption_prob": 2.9309714591363445e-05}, {"id": 680, "seek": 317512, "start": 3183.04, "end": 3183.68, "text": " Yeah.", "tokens": [50364, 509, 727, 445, 764, 264, 7615, 3028, 11, 457, 291, 366, 406, 516, 281, 483, 1481, 41684, 570, 50704, 50704, 309, 311, 257, 2211, 2424, 13, 50760, 50760, 865, 13, 50792, 50832, 467, 1669, 2020, 300, 309, 6063, 411, 18293, 47982, 1589, 562, 291, 445, 362, 257, 51104, 51104, 19265, 570, 456, 366, 9239, 295, 1785, 293, 4361, 45298, 300, 264, 283, 3334, 4527, 5965, 2837, 51360, 51360, 295, 13, 51384, 51384, 286, 914, 11, 286, 727, 3811, 257, 1002, 689, 264, 2699, 76, 4974, 19265, 307, 445, 257, 4974, 19265, 51796, 51796], "temperature": 0.0, "avg_logprob": -0.2850136405543277, "compression_ratio": 1.6504424778761062, "no_caption_prob": 2.9309714591363445e-05}, {"id": 681, "seek": 317512, "start": 3184.48, "end": 3189.92, "text": " It makes sense that it somehow like loses semantic information when you just have a", "tokens": [50364, 509, 727, 445, 764, 264, 7615, 3028, 11, 457, 291, 366, 406, 516, 281, 483, 1481, 41684, 570, 50704, 50704, 309, 311, 257, 2211, 2424, 13, 50760, 50760, 865, 13, 50792, 50832, 467, 1669, 2020, 300, 309, 6063, 411, 18293, 47982, 1589, 562, 291, 445, 362, 257, 51104, 51104, 19265, 570, 456, 366, 9239, 295, 1785, 293, 4361, 45298, 300, 264, 283, 3334, 4527, 5965, 2837, 51360, 51360, 295, 13, 51384, 51384, 286, 914, 11, 286, 727, 3811, 257, 1002, 689, 264, 2699, 76, 4974, 19265, 307, 445, 257, 4974, 19265, 51796, 51796], "temperature": 0.0, "avg_logprob": -0.2850136405543277, "compression_ratio": 1.6504424778761062, "no_caption_prob": 2.9309714591363445e-05}, {"id": 682, "seek": 317512, "start": 3189.92, "end": 3195.04, "text": " generator because there are bits of state and semantics that the fuzzer keeps track", "tokens": [50364, 509, 727, 445, 764, 264, 7615, 3028, 11, 457, 291, 366, 406, 516, 281, 483, 1481, 41684, 570, 50704, 50704, 309, 311, 257, 2211, 2424, 13, 50760, 50760, 865, 13, 50792, 50832, 467, 1669, 2020, 300, 309, 6063, 411, 18293, 47982, 1589, 562, 291, 445, 362, 257, 51104, 51104, 19265, 570, 456, 366, 9239, 295, 1785, 293, 4361, 45298, 300, 264, 283, 3334, 4527, 5965, 2837, 51360, 51360, 295, 13, 51384, 51384, 286, 914, 11, 286, 727, 3811, 257, 1002, 689, 264, 2699, 76, 4974, 19265, 307, 445, 257, 4974, 19265, 51796, 51796], "temperature": 0.0, "avg_logprob": -0.2850136405543277, "compression_ratio": 1.6504424778761062, "no_caption_prob": 2.9309714591363445e-05}, {"id": 683, "seek": 317512, "start": 3195.04, "end": 3195.52, "text": " of.", "tokens": [50364, 509, 727, 445, 764, 264, 7615, 3028, 11, 457, 291, 366, 406, 516, 281, 483, 1481, 41684, 570, 50704, 50704, 309, 311, 257, 2211, 2424, 13, 50760, 50760, 865, 13, 50792, 50832, 467, 1669, 2020, 300, 309, 6063, 411, 18293, 47982, 1589, 562, 291, 445, 362, 257, 51104, 51104, 19265, 570, 456, 366, 9239, 295, 1785, 293, 4361, 45298, 300, 264, 283, 3334, 4527, 5965, 2837, 51360, 51360, 295, 13, 51384, 51384, 286, 914, 11, 286, 727, 3811, 257, 1002, 689, 264, 2699, 76, 4974, 19265, 307, 445, 257, 4974, 19265, 51796, 51796], "temperature": 0.0, "avg_logprob": -0.2850136405543277, "compression_ratio": 1.6504424778761062, "no_caption_prob": 2.9309714591363445e-05}, {"id": 684, "seek": 317512, "start": 3195.52, "end": 3203.7599999999998, "text": " I mean, I could imagine a world where the Elm random generator is just a random generator", "tokens": [50364, 509, 727, 445, 764, 264, 7615, 3028, 11, 457, 291, 366, 406, 516, 281, 483, 1481, 41684, 570, 50704, 50704, 309, 311, 257, 2211, 2424, 13, 50760, 50760, 865, 13, 50792, 50832, 467, 1669, 2020, 300, 309, 6063, 411, 18293, 47982, 1589, 562, 291, 445, 362, 257, 51104, 51104, 19265, 570, 456, 366, 9239, 295, 1785, 293, 4361, 45298, 300, 264, 283, 3334, 4527, 5965, 2837, 51360, 51360, 295, 13, 51384, 51384, 286, 914, 11, 286, 727, 3811, 257, 1002, 689, 264, 2699, 76, 4974, 19265, 307, 445, 257, 4974, 19265, 51796, 51796], "temperature": 0.0, "avg_logprob": -0.2850136405543277, "compression_ratio": 1.6504424778761062, "no_caption_prob": 2.9309714591363445e-05}, {"id": 685, "seek": 320376, "start": 3203.76, "end": 3208.5600000000004, "text": " implementation is actually just a fuzzer under the hood.", "tokens": [50364, 11420, 307, 767, 445, 257, 283, 3334, 4527, 833, 264, 13376, 13, 50604, 50604, 407, 291, 6964, 309, 1228, 264, 912, 551, 13, 50800, 50800, 400, 586, 291, 584, 283, 3334, 4527, 490, 19265, 293, 4177, 11, 437, 360, 291, 458, 30, 51100, 51100, 467, 767, 307, 257, 283, 3334, 4527, 13, 51196, 51196, 467, 311, 445, 300, 321, 16253, 300, 490, 291, 420, 11, 291, 458, 13, 51340, 51340, 865, 13, 51364, 51364, 509, 393, 352, 300, 636, 13, 51484, 51484, 407, 321, 727, 1884, 257, 2445, 283, 3334, 4527, 281, 19265, 293, 300, 311, 2489, 570, 321, 500, 380, 643, 281, 51844, 51844], "temperature": 0.0, "avg_logprob": -0.3055405304810711, "compression_ratio": 1.680952380952381, "no_caption_prob": 4.132937829126604e-05}, {"id": 686, "seek": 320376, "start": 3208.5600000000004, "end": 3212.48, "text": " So you define it using the same thing.", "tokens": [50364, 11420, 307, 767, 445, 257, 283, 3334, 4527, 833, 264, 13376, 13, 50604, 50604, 407, 291, 6964, 309, 1228, 264, 912, 551, 13, 50800, 50800, 400, 586, 291, 584, 283, 3334, 4527, 490, 19265, 293, 4177, 11, 437, 360, 291, 458, 30, 51100, 51100, 467, 767, 307, 257, 283, 3334, 4527, 13, 51196, 51196, 467, 311, 445, 300, 321, 16253, 300, 490, 291, 420, 11, 291, 458, 13, 51340, 51340, 865, 13, 51364, 51364, 509, 393, 352, 300, 636, 13, 51484, 51484, 407, 321, 727, 1884, 257, 2445, 283, 3334, 4527, 281, 19265, 293, 300, 311, 2489, 570, 321, 500, 380, 643, 281, 51844, 51844], "temperature": 0.0, "avg_logprob": -0.3055405304810711, "compression_ratio": 1.680952380952381, "no_caption_prob": 4.132937829126604e-05}, {"id": 687, "seek": 320376, "start": 3212.48, "end": 3218.48, "text": " And now you say fuzzer from generator and hey, what do you know?", "tokens": [50364, 11420, 307, 767, 445, 257, 283, 3334, 4527, 833, 264, 13376, 13, 50604, 50604, 407, 291, 6964, 309, 1228, 264, 912, 551, 13, 50800, 50800, 400, 586, 291, 584, 283, 3334, 4527, 490, 19265, 293, 4177, 11, 437, 360, 291, 458, 30, 51100, 51100, 467, 767, 307, 257, 283, 3334, 4527, 13, 51196, 51196, 467, 311, 445, 300, 321, 16253, 300, 490, 291, 420, 11, 291, 458, 13, 51340, 51340, 865, 13, 51364, 51364, 509, 393, 352, 300, 636, 13, 51484, 51484, 407, 321, 727, 1884, 257, 2445, 283, 3334, 4527, 281, 19265, 293, 300, 311, 2489, 570, 321, 500, 380, 643, 281, 51844, 51844], "temperature": 0.0, "avg_logprob": -0.3055405304810711, "compression_ratio": 1.680952380952381, "no_caption_prob": 4.132937829126604e-05}, {"id": 688, "seek": 320376, "start": 3218.48, "end": 3220.4, "text": " It actually is a fuzzer.", "tokens": [50364, 11420, 307, 767, 445, 257, 283, 3334, 4527, 833, 264, 13376, 13, 50604, 50604, 407, 291, 6964, 309, 1228, 264, 912, 551, 13, 50800, 50800, 400, 586, 291, 584, 283, 3334, 4527, 490, 19265, 293, 4177, 11, 437, 360, 291, 458, 30, 51100, 51100, 467, 767, 307, 257, 283, 3334, 4527, 13, 51196, 51196, 467, 311, 445, 300, 321, 16253, 300, 490, 291, 420, 11, 291, 458, 13, 51340, 51340, 865, 13, 51364, 51364, 509, 393, 352, 300, 636, 13, 51484, 51484, 407, 321, 727, 1884, 257, 2445, 283, 3334, 4527, 281, 19265, 293, 300, 311, 2489, 570, 321, 500, 380, 643, 281, 51844, 51844], "temperature": 0.0, "avg_logprob": -0.3055405304810711, "compression_ratio": 1.680952380952381, "no_caption_prob": 4.132937829126604e-05}, {"id": 689, "seek": 320376, "start": 3220.4, "end": 3223.28, "text": " It's just that we hid that from you or, you know.", "tokens": [50364, 11420, 307, 767, 445, 257, 283, 3334, 4527, 833, 264, 13376, 13, 50604, 50604, 407, 291, 6964, 309, 1228, 264, 912, 551, 13, 50800, 50800, 400, 586, 291, 584, 283, 3334, 4527, 490, 19265, 293, 4177, 11, 437, 360, 291, 458, 30, 51100, 51100, 467, 767, 307, 257, 283, 3334, 4527, 13, 51196, 51196, 467, 311, 445, 300, 321, 16253, 300, 490, 291, 420, 11, 291, 458, 13, 51340, 51340, 865, 13, 51364, 51364, 509, 393, 352, 300, 636, 13, 51484, 51484, 407, 321, 727, 1884, 257, 2445, 283, 3334, 4527, 281, 19265, 293, 300, 311, 2489, 570, 321, 500, 380, 643, 281, 51844, 51844], "temperature": 0.0, "avg_logprob": -0.3055405304810711, "compression_ratio": 1.680952380952381, "no_caption_prob": 4.132937829126604e-05}, {"id": 690, "seek": 320376, "start": 3223.28, "end": 3223.76, "text": " Yeah.", "tokens": [50364, 11420, 307, 767, 445, 257, 283, 3334, 4527, 833, 264, 13376, 13, 50604, 50604, 407, 291, 6964, 309, 1228, 264, 912, 551, 13, 50800, 50800, 400, 586, 291, 584, 283, 3334, 4527, 490, 19265, 293, 4177, 11, 437, 360, 291, 458, 30, 51100, 51100, 467, 767, 307, 257, 283, 3334, 4527, 13, 51196, 51196, 467, 311, 445, 300, 321, 16253, 300, 490, 291, 420, 11, 291, 458, 13, 51340, 51340, 865, 13, 51364, 51364, 509, 393, 352, 300, 636, 13, 51484, 51484, 407, 321, 727, 1884, 257, 2445, 283, 3334, 4527, 281, 19265, 293, 300, 311, 2489, 570, 321, 500, 380, 643, 281, 51844, 51844], "temperature": 0.0, "avg_logprob": -0.3055405304810711, "compression_ratio": 1.680952380952381, "no_caption_prob": 4.132937829126604e-05}, {"id": 691, "seek": 320376, "start": 3223.76, "end": 3226.1600000000003, "text": " You can go that way.", "tokens": [50364, 11420, 307, 767, 445, 257, 283, 3334, 4527, 833, 264, 13376, 13, 50604, 50604, 407, 291, 6964, 309, 1228, 264, 912, 551, 13, 50800, 50800, 400, 586, 291, 584, 283, 3334, 4527, 490, 19265, 293, 4177, 11, 437, 360, 291, 458, 30, 51100, 51100, 467, 767, 307, 257, 283, 3334, 4527, 13, 51196, 51196, 467, 311, 445, 300, 321, 16253, 300, 490, 291, 420, 11, 291, 458, 13, 51340, 51340, 865, 13, 51364, 51364, 509, 393, 352, 300, 636, 13, 51484, 51484, 407, 321, 727, 1884, 257, 2445, 283, 3334, 4527, 281, 19265, 293, 300, 311, 2489, 570, 321, 500, 380, 643, 281, 51844, 51844], "temperature": 0.0, "avg_logprob": -0.3055405304810711, "compression_ratio": 1.680952380952381, "no_caption_prob": 4.132937829126604e-05}, {"id": 692, "seek": 320376, "start": 3226.1600000000003, "end": 3233.36, "text": " So we could create a function fuzzer to generator and that's fine because we don't need to", "tokens": [50364, 11420, 307, 767, 445, 257, 283, 3334, 4527, 833, 264, 13376, 13, 50604, 50604, 407, 291, 6964, 309, 1228, 264, 912, 551, 13, 50800, 50800, 400, 586, 291, 584, 283, 3334, 4527, 490, 19265, 293, 4177, 11, 437, 360, 291, 458, 30, 51100, 51100, 467, 767, 307, 257, 283, 3334, 4527, 13, 51196, 51196, 467, 311, 445, 300, 321, 16253, 300, 490, 291, 420, 11, 291, 458, 13, 51340, 51340, 865, 13, 51364, 51364, 509, 393, 352, 300, 636, 13, 51484, 51484, 407, 321, 727, 1884, 257, 2445, 283, 3334, 4527, 281, 19265, 293, 300, 311, 2489, 570, 321, 500, 380, 643, 281, 51844, 51844], "temperature": 0.0, "avg_logprob": -0.3055405304810711, "compression_ratio": 1.680952380952381, "no_caption_prob": 4.132937829126604e-05}, {"id": 693, "seek": 323336, "start": 3233.36, "end": 3238.2400000000002, "text": " define because we just throw away the history that we needed for shrinking.", "tokens": [50364, 6964, 570, 321, 445, 3507, 1314, 264, 2503, 300, 321, 2978, 337, 41684, 13, 50608, 50608, 509, 500, 380, 643, 309, 498, 291, 445, 528, 281, 8460, 264, 2158, 13, 50728, 50728, 407, 321, 727, 976, 291, 264, 2445, 13, 50808, 50808, 400, 498, 300, 390, 264, 14217, 10290, 295, 4974, 3547, 420, 2699, 76, 4974, 6405, 11, 321, 51184, 51184, 727, 362, 257, 1481, 11, 588, 731, 41684, 490, 19265, 2445, 13, 51444, 51444, 583, 309, 576, 643, 11, 291, 458, 11, 309, 576, 643, 2962, 281, 264, 2699, 76, 4974, 7372, 13, 51680, 51756], "temperature": 0.0, "avg_logprob": -0.13574371532518037, "compression_ratio": 1.702127659574468, "no_caption_prob": 7.484046363970265e-05}, {"id": 694, "seek": 323336, "start": 3238.2400000000002, "end": 3240.6400000000003, "text": " You don't need it if you just want to generate the value.", "tokens": [50364, 6964, 570, 321, 445, 3507, 1314, 264, 2503, 300, 321, 2978, 337, 41684, 13, 50608, 50608, 509, 500, 380, 643, 309, 498, 291, 445, 528, 281, 8460, 264, 2158, 13, 50728, 50728, 407, 321, 727, 976, 291, 264, 2445, 13, 50808, 50808, 400, 498, 300, 390, 264, 14217, 10290, 295, 4974, 3547, 420, 2699, 76, 4974, 6405, 11, 321, 51184, 51184, 727, 362, 257, 1481, 11, 588, 731, 41684, 490, 19265, 2445, 13, 51444, 51444, 583, 309, 576, 643, 11, 291, 458, 11, 309, 576, 643, 2962, 281, 264, 2699, 76, 4974, 7372, 13, 51680, 51756], "temperature": 0.0, "avg_logprob": -0.13574371532518037, "compression_ratio": 1.702127659574468, "no_caption_prob": 7.484046363970265e-05}, {"id": 695, "seek": 323336, "start": 3240.6400000000003, "end": 3242.2400000000002, "text": " So we could give you the function.", "tokens": [50364, 6964, 570, 321, 445, 3507, 1314, 264, 2503, 300, 321, 2978, 337, 41684, 13, 50608, 50608, 509, 500, 380, 643, 309, 498, 291, 445, 528, 281, 8460, 264, 2158, 13, 50728, 50728, 407, 321, 727, 976, 291, 264, 2445, 13, 50808, 50808, 400, 498, 300, 390, 264, 14217, 10290, 295, 4974, 3547, 420, 2699, 76, 4974, 6405, 11, 321, 51184, 51184, 727, 362, 257, 1481, 11, 588, 731, 41684, 490, 19265, 2445, 13, 51444, 51444, 583, 309, 576, 643, 11, 291, 458, 11, 309, 576, 643, 2962, 281, 264, 2699, 76, 4974, 7372, 13, 51680, 51756], "temperature": 0.0, "avg_logprob": -0.13574371532518037, "compression_ratio": 1.702127659574468, "no_caption_prob": 7.484046363970265e-05}, {"id": 696, "seek": 323336, "start": 3242.2400000000002, "end": 3249.76, "text": " And if that was the underlying representation of random numbers or Elm random library, we", "tokens": [50364, 6964, 570, 321, 445, 3507, 1314, 264, 2503, 300, 321, 2978, 337, 41684, 13, 50608, 50608, 509, 500, 380, 643, 309, 498, 291, 445, 528, 281, 8460, 264, 2158, 13, 50728, 50728, 407, 321, 727, 976, 291, 264, 2445, 13, 50808, 50808, 400, 498, 300, 390, 264, 14217, 10290, 295, 4974, 3547, 420, 2699, 76, 4974, 6405, 11, 321, 51184, 51184, 727, 362, 257, 1481, 11, 588, 731, 41684, 490, 19265, 2445, 13, 51444, 51444, 583, 309, 576, 643, 11, 291, 458, 11, 309, 576, 643, 2962, 281, 264, 2699, 76, 4974, 7372, 13, 51680, 51756], "temperature": 0.0, "avg_logprob": -0.13574371532518037, "compression_ratio": 1.702127659574468, "no_caption_prob": 7.484046363970265e-05}, {"id": 697, "seek": 323336, "start": 3249.76, "end": 3254.96, "text": " could have a nice, very well shrinking from generator function.", "tokens": [50364, 6964, 570, 321, 445, 3507, 1314, 264, 2503, 300, 321, 2978, 337, 41684, 13, 50608, 50608, 509, 500, 380, 643, 309, 498, 291, 445, 528, 281, 8460, 264, 2158, 13, 50728, 50728, 407, 321, 727, 976, 291, 264, 2445, 13, 50808, 50808, 400, 498, 300, 390, 264, 14217, 10290, 295, 4974, 3547, 420, 2699, 76, 4974, 6405, 11, 321, 51184, 51184, 727, 362, 257, 1481, 11, 588, 731, 41684, 490, 19265, 2445, 13, 51444, 51444, 583, 309, 576, 643, 11, 291, 458, 11, 309, 576, 643, 2962, 281, 264, 2699, 76, 4974, 7372, 13, 51680, 51756], "temperature": 0.0, "avg_logprob": -0.13574371532518037, "compression_ratio": 1.702127659574468, "no_caption_prob": 7.484046363970265e-05}, {"id": 698, "seek": 323336, "start": 3254.96, "end": 3259.6800000000003, "text": " But it would need, you know, it would need changes to the Elm random package.", "tokens": [50364, 6964, 570, 321, 445, 3507, 1314, 264, 2503, 300, 321, 2978, 337, 41684, 13, 50608, 50608, 509, 500, 380, 643, 309, 498, 291, 445, 528, 281, 8460, 264, 2158, 13, 50728, 50728, 407, 321, 727, 976, 291, 264, 2445, 13, 50808, 50808, 400, 498, 300, 390, 264, 14217, 10290, 295, 4974, 3547, 420, 2699, 76, 4974, 6405, 11, 321, 51184, 51184, 727, 362, 257, 1481, 11, 588, 731, 41684, 490, 19265, 2445, 13, 51444, 51444, 583, 309, 576, 643, 11, 291, 458, 11, 309, 576, 643, 2962, 281, 264, 2699, 76, 4974, 7372, 13, 51680, 51756], "temperature": 0.0, "avg_logprob": -0.13574371532518037, "compression_ratio": 1.702127659574468, "no_caption_prob": 7.484046363970265e-05}, {"id": 699, "seek": 325968, "start": 3259.68, "end": 3269.3599999999997, "text": " So these inputs, could you like shed a little light on how you take like these basic generators,", "tokens": [50364, 407, 613, 15743, 11, 727, 291, 411, 14951, 257, 707, 1442, 322, 577, 291, 747, 411, 613, 3875, 38662, 11, 50848, 50848, 597, 366, 3410, 671, 17746, 560, 82, 382, 264, 4846, 293, 577, 291, 28446, 613, 11, 291, 458, 11, 51304, 51304, 733, 295, 20518, 38662, 337, 661, 3467, 295, 4190, 294, 257, 10995, 636, 11, 411, 264, 1329, 51584, 51584, 19265, 293, 7005, 38662, 293, 721, 411, 300, 13, 51716, 51716], "temperature": 0.0, "avg_logprob": -0.16445919036865234, "compression_ratio": 1.7473118279569892, "no_caption_prob": 6.604898953810334e-05}, {"id": 700, "seek": 325968, "start": 3269.3599999999997, "end": 3278.48, "text": " which are conceptually generating ints as the input and how you derive these, you know,", "tokens": [50364, 407, 613, 15743, 11, 727, 291, 411, 14951, 257, 707, 1442, 322, 577, 291, 747, 411, 613, 3875, 38662, 11, 50848, 50848, 597, 366, 3410, 671, 17746, 560, 82, 382, 264, 4846, 293, 577, 291, 28446, 613, 11, 291, 458, 11, 51304, 51304, 733, 295, 20518, 38662, 337, 661, 3467, 295, 4190, 294, 257, 10995, 636, 11, 411, 264, 1329, 51584, 51584, 19265, 293, 7005, 38662, 293, 721, 411, 300, 13, 51716, 51716], "temperature": 0.0, "avg_logprob": -0.16445919036865234, "compression_ratio": 1.7473118279569892, "no_caption_prob": 6.604898953810334e-05}, {"id": 701, "seek": 325968, "start": 3278.48, "end": 3284.08, "text": " kind of baseline generators for other types of values in a meaningful way, like the list", "tokens": [50364, 407, 613, 15743, 11, 727, 291, 411, 14951, 257, 707, 1442, 322, 577, 291, 747, 411, 613, 3875, 38662, 11, 50848, 50848, 597, 366, 3410, 671, 17746, 560, 82, 382, 264, 4846, 293, 577, 291, 28446, 613, 11, 291, 458, 11, 51304, 51304, 733, 295, 20518, 38662, 337, 661, 3467, 295, 4190, 294, 257, 10995, 636, 11, 411, 264, 1329, 51584, 51584, 19265, 293, 7005, 38662, 293, 721, 411, 300, 13, 51716, 51716], "temperature": 0.0, "avg_logprob": -0.16445919036865234, "compression_ratio": 1.7473118279569892, "no_caption_prob": 6.604898953810334e-05}, {"id": 702, "seek": 325968, "start": 3284.08, "end": 3286.72, "text": " generator and pool generators and things like that.", "tokens": [50364, 407, 613, 15743, 11, 727, 291, 411, 14951, 257, 707, 1442, 322, 577, 291, 747, 411, 613, 3875, 38662, 11, 50848, 50848, 597, 366, 3410, 671, 17746, 560, 82, 382, 264, 4846, 293, 577, 291, 28446, 613, 11, 291, 458, 11, 51304, 51304, 733, 295, 20518, 38662, 337, 661, 3467, 295, 4190, 294, 257, 10995, 636, 11, 411, 264, 1329, 51584, 51584, 19265, 293, 7005, 38662, 293, 721, 411, 300, 13, 51716, 51716], "temperature": 0.0, "avg_logprob": -0.16445919036865234, "compression_ratio": 1.7473118279569892, "no_caption_prob": 6.604898953810334e-05}, {"id": 703, "seek": 328672, "start": 3286.72, "end": 3294.72, "text": " How do you ensure that the baseline generator values map to, you know, reduce down to simpler", "tokens": [50364, 1012, 360, 291, 5586, 300, 264, 20518, 19265, 4190, 4471, 281, 11, 291, 458, 11, 5407, 760, 281, 18587, 50764, 50792, 28540, 4190, 365, 613, 4965, 38662, 420, 4965, 283, 16740, 433, 30, 50976, 50976, 865, 13, 51004, 51004, 407, 11, 370, 41674, 366, 1858, 13, 51200, 51244, 5681, 1146, 433, 445, 4471, 281, 41674, 13, 51328, 51376, 821, 311, 257, 707, 857, 544, 1209, 8758, 926, 300, 689, 321, 4382, 512, 22526, 295, 41674, 51676, 51676], "temperature": 0.0, "avg_logprob": -0.262726578531386, "compression_ratio": 1.5555555555555556, "no_caption_prob": 1.1123579497507308e-05}, {"id": 704, "seek": 328672, "start": 3295.2799999999997, "end": 3298.9599999999996, "text": " primitive values with these core generators or core fuzzers?", "tokens": [50364, 1012, 360, 291, 5586, 300, 264, 20518, 19265, 4190, 4471, 281, 11, 291, 458, 11, 5407, 760, 281, 18587, 50764, 50792, 28540, 4190, 365, 613, 4965, 38662, 420, 4965, 283, 16740, 433, 30, 50976, 50976, 865, 13, 51004, 51004, 407, 11, 370, 41674, 366, 1858, 13, 51200, 51244, 5681, 1146, 433, 445, 4471, 281, 41674, 13, 51328, 51376, 821, 311, 257, 707, 857, 544, 1209, 8758, 926, 300, 689, 321, 4382, 512, 22526, 295, 41674, 51676, 51676], "temperature": 0.0, "avg_logprob": -0.262726578531386, "compression_ratio": 1.5555555555555556, "no_caption_prob": 1.1123579497507308e-05}, {"id": 705, "seek": 328672, "start": 3298.9599999999996, "end": 3299.52, "text": " Yeah.", "tokens": [50364, 1012, 360, 291, 5586, 300, 264, 20518, 19265, 4190, 4471, 281, 11, 291, 458, 11, 5407, 760, 281, 18587, 50764, 50792, 28540, 4190, 365, 613, 4965, 38662, 420, 4965, 283, 16740, 433, 30, 50976, 50976, 865, 13, 51004, 51004, 407, 11, 370, 41674, 366, 1858, 13, 51200, 51244, 5681, 1146, 433, 445, 4471, 281, 41674, 13, 51328, 51376, 821, 311, 257, 707, 857, 544, 1209, 8758, 926, 300, 689, 321, 4382, 512, 22526, 295, 41674, 51676, 51676], "temperature": 0.0, "avg_logprob": -0.262726578531386, "compression_ratio": 1.5555555555555556, "no_caption_prob": 1.1123579497507308e-05}, {"id": 706, "seek": 328672, "start": 3299.52, "end": 3303.4399999999996, "text": " So, so integers are easy.", "tokens": [50364, 1012, 360, 291, 5586, 300, 264, 20518, 19265, 4190, 4471, 281, 11, 291, 458, 11, 5407, 760, 281, 18587, 50764, 50792, 28540, 4190, 365, 613, 4965, 38662, 420, 4965, 283, 16740, 433, 30, 50976, 50976, 865, 13, 51004, 51004, 407, 11, 370, 41674, 366, 1858, 13, 51200, 51244, 5681, 1146, 433, 445, 4471, 281, 41674, 13, 51328, 51376, 821, 311, 257, 707, 857, 544, 1209, 8758, 926, 300, 689, 321, 4382, 512, 22526, 295, 41674, 51676, 51676], "temperature": 0.0, "avg_logprob": -0.262726578531386, "compression_ratio": 1.5555555555555556, "no_caption_prob": 1.1123579497507308e-05}, {"id": 707, "seek": 328672, "start": 3304.3199999999997, "end": 3306.0, "text": " Integers just map to integers.", "tokens": [50364, 1012, 360, 291, 5586, 300, 264, 20518, 19265, 4190, 4471, 281, 11, 291, 458, 11, 5407, 760, 281, 18587, 50764, 50792, 28540, 4190, 365, 613, 4965, 38662, 420, 4965, 283, 16740, 433, 30, 50976, 50976, 865, 13, 51004, 51004, 407, 11, 370, 41674, 366, 1858, 13, 51200, 51244, 5681, 1146, 433, 445, 4471, 281, 41674, 13, 51328, 51376, 821, 311, 257, 707, 857, 544, 1209, 8758, 926, 300, 689, 321, 4382, 512, 22526, 295, 41674, 51676, 51676], "temperature": 0.0, "avg_logprob": -0.262726578531386, "compression_ratio": 1.5555555555555556, "no_caption_prob": 1.1123579497507308e-05}, {"id": 708, "seek": 328672, "start": 3306.9599999999996, "end": 3312.9599999999996, "text": " There's a little bit more complication around that where we prefer some ranges of integers", "tokens": [50364, 1012, 360, 291, 5586, 300, 264, 20518, 19265, 4190, 4471, 281, 11, 291, 458, 11, 5407, 760, 281, 18587, 50764, 50792, 28540, 4190, 365, 613, 4965, 38662, 420, 4965, 283, 16740, 433, 30, 50976, 50976, 865, 13, 51004, 51004, 407, 11, 370, 41674, 366, 1858, 13, 51200, 51244, 5681, 1146, 433, 445, 4471, 281, 41674, 13, 51328, 51376, 821, 311, 257, 707, 857, 544, 1209, 8758, 926, 300, 689, 321, 4382, 512, 22526, 295, 41674, 51676, 51676], "temperature": 0.0, "avg_logprob": -0.262726578531386, "compression_ratio": 1.5555555555555556, "no_caption_prob": 1.1123579497507308e-05}, {"id": 709, "seek": 331296, "start": 3312.96, "end": 3319.36, "text": " and then, you know, with smaller probability, we give you larger and larger integers.", "tokens": [50364, 293, 550, 11, 291, 458, 11, 365, 4356, 8482, 11, 321, 976, 291, 4833, 293, 4833, 41674, 13, 50684, 50684, 821, 311, 611, 512, 721, 689, 321, 445, 747, 11, 718, 311, 584, 264, 881, 4776, 857, 295, 264, 51024, 51024, 24922, 281, 914, 264, 1465, 857, 370, 300, 11, 370, 300, 321, 4382, 3353, 4190, 281, 3671, 4190, 13, 51428, 51428, 1779, 13, 51456, 51456], "temperature": 0.0, "avg_logprob": -0.18998496672686407, "compression_ratio": 1.5664739884393064, "no_caption_prob": 1.6184692867682315e-05}, {"id": 710, "seek": 331296, "start": 3319.36, "end": 3326.16, "text": " There's also some things where we just take, let's say the most significant bit of the", "tokens": [50364, 293, 550, 11, 291, 458, 11, 365, 4356, 8482, 11, 321, 976, 291, 4833, 293, 4833, 41674, 13, 50684, 50684, 821, 311, 611, 512, 721, 689, 321, 445, 747, 11, 718, 311, 584, 264, 881, 4776, 857, 295, 264, 51024, 51024, 24922, 281, 914, 264, 1465, 857, 370, 300, 11, 370, 300, 321, 4382, 3353, 4190, 281, 3671, 4190, 13, 51428, 51428, 1779, 13, 51456, 51456], "temperature": 0.0, "avg_logprob": -0.18998496672686407, "compression_ratio": 1.5664739884393064, "no_caption_prob": 1.6184692867682315e-05}, {"id": 711, "seek": 331296, "start": 3326.16, "end": 3334.2400000000002, "text": " integer to mean the sign bit so that, so that we prefer positive values to negative values.", "tokens": [50364, 293, 550, 11, 291, 458, 11, 365, 4356, 8482, 11, 321, 976, 291, 4833, 293, 4833, 41674, 13, 50684, 50684, 821, 311, 611, 512, 721, 689, 321, 445, 747, 11, 718, 311, 584, 264, 881, 4776, 857, 295, 264, 51024, 51024, 24922, 281, 914, 264, 1465, 857, 370, 300, 11, 370, 300, 321, 4382, 3353, 4190, 281, 3671, 4190, 13, 51428, 51428, 1779, 13, 51456, 51456], "temperature": 0.0, "avg_logprob": -0.18998496672686407, "compression_ratio": 1.5664739884393064, "no_caption_prob": 1.6184692867682315e-05}, {"id": 712, "seek": 331296, "start": 3334.2400000000002, "end": 3334.8, "text": " Right.", "tokens": [50364, 293, 550, 11, 291, 458, 11, 365, 4356, 8482, 11, 321, 976, 291, 4833, 293, 4833, 41674, 13, 50684, 50684, 821, 311, 611, 512, 721, 689, 321, 445, 747, 11, 718, 311, 584, 264, 881, 4776, 857, 295, 264, 51024, 51024, 24922, 281, 914, 264, 1465, 857, 370, 300, 11, 370, 300, 321, 4382, 3353, 4190, 281, 3671, 4190, 13, 51428, 51428, 1779, 13, 51456, 51456], "temperature": 0.0, "avg_logprob": -0.18998496672686407, "compression_ratio": 1.5664739884393064, "no_caption_prob": 1.6184692867682315e-05}, {"id": 713, "seek": 333480, "start": 3334.8, "end": 3342.32, "text": " So if, if, if both minus two and two would fail the test, we are going to give you the", "tokens": [50364, 407, 498, 11, 498, 11, 498, 1293, 3175, 732, 293, 732, 576, 3061, 264, 1500, 11, 321, 366, 516, 281, 976, 291, 264, 50740, 50740, 732, 570, 309, 311, 445, 22842, 13, 50816, 50816, 407, 456, 366, 512, 11, 264, 1002, 307, 544, 6179, 813, 300, 11, 457, 41674, 366, 1238, 1858, 13, 51124, 51164, 400, 370, 437, 393, 321, 1322, 490, 300, 30, 51316, 51316, 509, 727, 1322, 4342, 13, 51408, 51436, 407, 291, 362, 264, 2445, 2517, 337, 3089, 11, 597, 445, 4960, 264, 11, 309, 311, 406, 7469, 34, 9503, 11, 558, 30, 51768, 51768], "temperature": 0.0, "avg_logprob": -0.2142037582397461, "compression_ratio": 1.577092511013216, "no_caption_prob": 7.465886301361024e-05}, {"id": 714, "seek": 333480, "start": 3342.32, "end": 3343.84, "text": " two because it's just nicer.", "tokens": [50364, 407, 498, 11, 498, 11, 498, 1293, 3175, 732, 293, 732, 576, 3061, 264, 1500, 11, 321, 366, 516, 281, 976, 291, 264, 50740, 50740, 732, 570, 309, 311, 445, 22842, 13, 50816, 50816, 407, 456, 366, 512, 11, 264, 1002, 307, 544, 6179, 813, 300, 11, 457, 41674, 366, 1238, 1858, 13, 51124, 51164, 400, 370, 437, 393, 321, 1322, 490, 300, 30, 51316, 51316, 509, 727, 1322, 4342, 13, 51408, 51436, 407, 291, 362, 264, 2445, 2517, 337, 3089, 11, 597, 445, 4960, 264, 11, 309, 311, 406, 7469, 34, 9503, 11, 558, 30, 51768, 51768], "temperature": 0.0, "avg_logprob": -0.2142037582397461, "compression_ratio": 1.577092511013216, "no_caption_prob": 7.465886301361024e-05}, {"id": 715, "seek": 333480, "start": 3343.84, "end": 3350.0, "text": " So there are some, the world is more complicated than that, but integers are pretty easy.", "tokens": [50364, 407, 498, 11, 498, 11, 498, 1293, 3175, 732, 293, 732, 576, 3061, 264, 1500, 11, 321, 366, 516, 281, 976, 291, 264, 50740, 50740, 732, 570, 309, 311, 445, 22842, 13, 50816, 50816, 407, 456, 366, 512, 11, 264, 1002, 307, 544, 6179, 813, 300, 11, 457, 41674, 366, 1238, 1858, 13, 51124, 51164, 400, 370, 437, 393, 321, 1322, 490, 300, 30, 51316, 51316, 509, 727, 1322, 4342, 13, 51408, 51436, 407, 291, 362, 264, 2445, 2517, 337, 3089, 11, 597, 445, 4960, 264, 11, 309, 311, 406, 7469, 34, 9503, 11, 558, 30, 51768, 51768], "temperature": 0.0, "avg_logprob": -0.2142037582397461, "compression_ratio": 1.577092511013216, "no_caption_prob": 7.465886301361024e-05}, {"id": 716, "seek": 333480, "start": 3350.8, "end": 3353.84, "text": " And so what can we build from that?", "tokens": [50364, 407, 498, 11, 498, 11, 498, 1293, 3175, 732, 293, 732, 576, 3061, 264, 1500, 11, 321, 366, 516, 281, 976, 291, 264, 50740, 50740, 732, 570, 309, 311, 445, 22842, 13, 50816, 50816, 407, 456, 366, 512, 11, 264, 1002, 307, 544, 6179, 813, 300, 11, 457, 41674, 366, 1238, 1858, 13, 51124, 51164, 400, 370, 437, 393, 321, 1322, 490, 300, 30, 51316, 51316, 509, 727, 1322, 4342, 13, 51408, 51436, 407, 291, 362, 264, 2445, 2517, 337, 3089, 11, 597, 445, 4960, 264, 11, 309, 311, 406, 7469, 34, 9503, 11, 558, 30, 51768, 51768], "temperature": 0.0, "avg_logprob": -0.2142037582397461, "compression_ratio": 1.577092511013216, "no_caption_prob": 7.465886301361024e-05}, {"id": 717, "seek": 333480, "start": 3353.84, "end": 3355.6800000000003, "text": " You could build characters.", "tokens": [50364, 407, 498, 11, 498, 11, 498, 1293, 3175, 732, 293, 732, 576, 3061, 264, 1500, 11, 321, 366, 516, 281, 976, 291, 264, 50740, 50740, 732, 570, 309, 311, 445, 22842, 13, 50816, 50816, 407, 456, 366, 512, 11, 264, 1002, 307, 544, 6179, 813, 300, 11, 457, 41674, 366, 1238, 1858, 13, 51124, 51164, 400, 370, 437, 393, 321, 1322, 490, 300, 30, 51316, 51316, 509, 727, 1322, 4342, 13, 51408, 51436, 407, 291, 362, 264, 2445, 2517, 337, 3089, 11, 597, 445, 4960, 264, 11, 309, 311, 406, 7469, 34, 9503, 11, 558, 30, 51768, 51768], "temperature": 0.0, "avg_logprob": -0.2142037582397461, "compression_ratio": 1.577092511013216, "no_caption_prob": 7.465886301361024e-05}, {"id": 718, "seek": 333480, "start": 3356.2400000000002, "end": 3362.88, "text": " So you have the function character for code, which just uses the, it's not ASCII, right?", "tokens": [50364, 407, 498, 11, 498, 11, 498, 1293, 3175, 732, 293, 732, 576, 3061, 264, 1500, 11, 321, 366, 516, 281, 976, 291, 264, 50740, 50740, 732, 570, 309, 311, 445, 22842, 13, 50816, 50816, 407, 456, 366, 512, 11, 264, 1002, 307, 544, 6179, 813, 300, 11, 457, 41674, 366, 1238, 1858, 13, 51124, 51164, 400, 370, 437, 393, 321, 1322, 490, 300, 30, 51316, 51316, 509, 727, 1322, 4342, 13, 51408, 51436, 407, 291, 362, 264, 2445, 2517, 337, 3089, 11, 597, 445, 4960, 264, 11, 309, 311, 406, 7469, 34, 9503, 11, 558, 30, 51768, 51768], "temperature": 0.0, "avg_logprob": -0.2142037582397461, "compression_ratio": 1.577092511013216, "no_caption_prob": 7.465886301361024e-05}, {"id": 719, "seek": 336288, "start": 3362.88, "end": 3365.28, "text": " It's UTF 16 or something.", "tokens": [50364, 467, 311, 624, 20527, 3165, 420, 746, 13, 50484, 50484, 509, 445, 1322, 11, 1322, 257, 2517, 490, 257, 1230, 13, 50648, 50648, 407, 291, 362, 4342, 13, 50768, 50768, 492, 393, 362, 14511, 420, 445, 411, 5101, 16641, 538, 26886, 428, 11464, 13, 51144, 51144, 407, 341, 307, 264, 3109, 321, 5111, 281, 8460, 14511, 689, 291, 7929, 257, 11464, 13, 51464, 51492], "temperature": 0.0, "avg_logprob": -0.23011932951031308, "compression_ratio": 1.441860465116279, "no_caption_prob": 4.3981457565678284e-05}, {"id": 720, "seek": 336288, "start": 3365.28, "end": 3368.56, "text": " You just build, build a character from a number.", "tokens": [50364, 467, 311, 624, 20527, 3165, 420, 746, 13, 50484, 50484, 509, 445, 1322, 11, 1322, 257, 2517, 490, 257, 1230, 13, 50648, 50648, 407, 291, 362, 4342, 13, 50768, 50768, 492, 393, 362, 14511, 420, 445, 411, 5101, 16641, 538, 26886, 428, 11464, 13, 51144, 51144, 407, 341, 307, 264, 3109, 321, 5111, 281, 8460, 14511, 689, 291, 7929, 257, 11464, 13, 51464, 51492], "temperature": 0.0, "avg_logprob": -0.23011932951031308, "compression_ratio": 1.441860465116279, "no_caption_prob": 4.3981457565678284e-05}, {"id": 721, "seek": 336288, "start": 3368.56, "end": 3370.96, "text": " So you have characters.", "tokens": [50364, 467, 311, 624, 20527, 3165, 420, 746, 13, 50484, 50484, 509, 445, 1322, 11, 1322, 257, 2517, 490, 257, 1230, 13, 50648, 50648, 407, 291, 362, 4342, 13, 50768, 50768, 492, 393, 362, 14511, 420, 445, 411, 5101, 16641, 538, 26886, 428, 11464, 13, 51144, 51144, 407, 341, 307, 264, 3109, 321, 5111, 281, 8460, 14511, 689, 291, 7929, 257, 11464, 13, 51464, 51492], "temperature": 0.0, "avg_logprob": -0.23011932951031308, "compression_ratio": 1.441860465116279, "no_caption_prob": 4.3981457565678284e-05}, {"id": 722, "seek": 336288, "start": 3370.96, "end": 3378.48, "text": " We can have lists or just like generally collections by flipping your coin.", "tokens": [50364, 467, 311, 624, 20527, 3165, 420, 746, 13, 50484, 50484, 509, 445, 1322, 11, 1322, 257, 2517, 490, 257, 1230, 13, 50648, 50648, 407, 291, 362, 4342, 13, 50768, 50768, 492, 393, 362, 14511, 420, 445, 411, 5101, 16641, 538, 26886, 428, 11464, 13, 51144, 51144, 407, 341, 307, 264, 3109, 321, 5111, 281, 8460, 14511, 689, 291, 7929, 257, 11464, 13, 51464, 51492], "temperature": 0.0, "avg_logprob": -0.23011932951031308, "compression_ratio": 1.441860465116279, "no_caption_prob": 4.3981457565678284e-05}, {"id": 723, "seek": 336288, "start": 3378.48, "end": 3384.88, "text": " So this is the approach we chose to generate lists where you flip a coin.", "tokens": [50364, 467, 311, 624, 20527, 3165, 420, 746, 13, 50484, 50484, 509, 445, 1322, 11, 1322, 257, 2517, 490, 257, 1230, 13, 50648, 50648, 407, 291, 362, 4342, 13, 50768, 50768, 492, 393, 362, 14511, 420, 445, 411, 5101, 16641, 538, 26886, 428, 11464, 13, 51144, 51144, 407, 341, 307, 264, 3109, 321, 5111, 281, 8460, 14511, 689, 291, 7929, 257, 11464, 13, 51464, 51492], "temperature": 0.0, "avg_logprob": -0.23011932951031308, "compression_ratio": 1.441860465116279, "no_caption_prob": 4.3981457565678284e-05}, {"id": 724, "seek": 338488, "start": 3384.88, "end": 3393.04, "text": " If it's zero, then you don't create any more elements.", "tokens": [50364, 759, 309, 311, 4018, 11, 550, 291, 500, 380, 1884, 604, 544, 4959, 13, 50772, 50772, 759, 291, 483, 472, 11, 291, 853, 281, 8460, 797, 13, 51028, 51028, 407, 300, 311, 689, 293, 550, 1487, 294, 13, 51132, 51132, 1779, 13, 51156, 51156, 407, 291, 362, 613, 411, 20560, 488, 9284, 11, 597, 307, 2390, 264, 1329, 13, 51408, 51408, 400, 370, 300, 5510, 257, 9924, 295, 11, 295, 264, 11568, 45, 6546, 2503, 11, 558, 30, 51668, 51668], "temperature": 0.0, "avg_logprob": -0.2292135750375143, "compression_ratio": 1.4491978609625669, "no_caption_prob": 3.698147338582203e-05}, {"id": 725, "seek": 338488, "start": 3393.04, "end": 3398.1600000000003, "text": " If you get one, you try to generate again.", "tokens": [50364, 759, 309, 311, 4018, 11, 550, 291, 500, 380, 1884, 604, 544, 4959, 13, 50772, 50772, 759, 291, 483, 472, 11, 291, 853, 281, 8460, 797, 13, 51028, 51028, 407, 300, 311, 689, 293, 550, 1487, 294, 13, 51132, 51132, 1779, 13, 51156, 51156, 407, 291, 362, 613, 411, 20560, 488, 9284, 11, 597, 307, 2390, 264, 1329, 13, 51408, 51408, 400, 370, 300, 5510, 257, 9924, 295, 11, 295, 264, 11568, 45, 6546, 2503, 11, 558, 30, 51668, 51668], "temperature": 0.0, "avg_logprob": -0.2292135750375143, "compression_ratio": 1.4491978609625669, "no_caption_prob": 3.698147338582203e-05}, {"id": 726, "seek": 338488, "start": 3398.1600000000003, "end": 3400.2400000000002, "text": " So that's where and then comes in.", "tokens": [50364, 759, 309, 311, 4018, 11, 550, 291, 500, 380, 1884, 604, 544, 4959, 13, 50772, 50772, 759, 291, 483, 472, 11, 291, 853, 281, 8460, 797, 13, 51028, 51028, 407, 300, 311, 689, 293, 550, 1487, 294, 13, 51132, 51132, 1779, 13, 51156, 51156, 407, 291, 362, 613, 411, 20560, 488, 9284, 11, 597, 307, 2390, 264, 1329, 13, 51408, 51408, 400, 370, 300, 5510, 257, 9924, 295, 11, 295, 264, 11568, 45, 6546, 2503, 11, 558, 30, 51668, 51668], "temperature": 0.0, "avg_logprob": -0.2292135750375143, "compression_ratio": 1.4491978609625669, "no_caption_prob": 3.698147338582203e-05}, {"id": 727, "seek": 338488, "start": 3400.2400000000002, "end": 3400.7200000000003, "text": " Right.", "tokens": [50364, 759, 309, 311, 4018, 11, 550, 291, 500, 380, 1884, 604, 544, 4959, 13, 50772, 50772, 759, 291, 483, 472, 11, 291, 853, 281, 8460, 797, 13, 51028, 51028, 407, 300, 311, 689, 293, 550, 1487, 294, 13, 51132, 51132, 1779, 13, 51156, 51156, 407, 291, 362, 613, 411, 20560, 488, 9284, 11, 597, 307, 2390, 264, 1329, 13, 51408, 51408, 400, 370, 300, 5510, 257, 9924, 295, 11, 295, 264, 11568, 45, 6546, 2503, 11, 558, 30, 51668, 51668], "temperature": 0.0, "avg_logprob": -0.2292135750375143, "compression_ratio": 1.4491978609625669, "no_caption_prob": 3.698147338582203e-05}, {"id": 728, "seek": 338488, "start": 3400.7200000000003, "end": 3405.76, "text": " So you have these like recursive algorithm, which is building the list.", "tokens": [50364, 759, 309, 311, 4018, 11, 550, 291, 500, 380, 1884, 604, 544, 4959, 13, 50772, 50772, 759, 291, 483, 472, 11, 291, 853, 281, 8460, 797, 13, 51028, 51028, 407, 300, 311, 689, 293, 550, 1487, 294, 13, 51132, 51132, 1779, 13, 51156, 51156, 407, 291, 362, 613, 411, 20560, 488, 9284, 11, 597, 307, 2390, 264, 1329, 13, 51408, 51408, 400, 370, 300, 5510, 257, 9924, 295, 11, 295, 264, 11568, 45, 6546, 2503, 11, 558, 30, 51668, 51668], "temperature": 0.0, "avg_logprob": -0.2292135750375143, "compression_ratio": 1.4491978609625669, "no_caption_prob": 3.698147338582203e-05}, {"id": 729, "seek": 338488, "start": 3405.76, "end": 3410.96, "text": " And so that leaves a trail of, of the PRNCh history, right?", "tokens": [50364, 759, 309, 311, 4018, 11, 550, 291, 500, 380, 1884, 604, 544, 4959, 13, 50772, 50772, 759, 291, 483, 472, 11, 291, 853, 281, 8460, 797, 13, 51028, 51028, 407, 300, 311, 689, 293, 550, 1487, 294, 13, 51132, 51132, 1779, 13, 51156, 51156, 407, 291, 362, 613, 411, 20560, 488, 9284, 11, 597, 307, 2390, 264, 1329, 13, 51408, 51408, 400, 370, 300, 5510, 257, 9924, 295, 11, 295, 264, 11568, 45, 6546, 2503, 11, 558, 30, 51668, 51668], "temperature": 0.0, "avg_logprob": -0.2292135750375143, "compression_ratio": 1.4491978609625669, "no_caption_prob": 3.698147338582203e-05}, {"id": 730, "seek": 341096, "start": 3410.96, "end": 3416.4, "text": " And then some value that's mapping to the integer, then there's going to be one.", "tokens": [50364, 400, 550, 512, 2158, 300, 311, 18350, 281, 264, 24922, 11, 550, 456, 311, 516, 281, 312, 472, 13, 50636, 50636, 400, 797, 11, 2503, 337, 264, 1150, 2158, 11, 550, 456, 311, 516, 281, 312, 4018, 293, 300, 311, 309, 13, 50932, 50932, 1779, 13, 50944, 50944, 1436, 300, 311, 562, 321, 722, 17746, 264, 1329, 13, 51108, 51108, 400, 370, 11, 370, 309, 1009, 18081, 281, 4356, 13, 51236, 51236, 865, 13, 51256, 51256, 407, 291, 393, 11, 498, 291, 12097, 264, 700, 732, 4190, 490, 264, 11568, 45, 6546, 2503, 11, 309, 311, 516, 281, 1856, 51620, 51620, 291, 365, 257, 7363, 1329, 13, 51780, 51780, 1779, 13, 51804, 51804], "temperature": 0.0, "avg_logprob": -0.12387697800346043, "compression_ratio": 1.7300884955752212, "no_caption_prob": 3.0708670237800106e-05}, {"id": 731, "seek": 341096, "start": 3416.4, "end": 3422.32, "text": " And again, history for the second value, then there's going to be zero and that's it.", "tokens": [50364, 400, 550, 512, 2158, 300, 311, 18350, 281, 264, 24922, 11, 550, 456, 311, 516, 281, 312, 472, 13, 50636, 50636, 400, 797, 11, 2503, 337, 264, 1150, 2158, 11, 550, 456, 311, 516, 281, 312, 4018, 293, 300, 311, 309, 13, 50932, 50932, 1779, 13, 50944, 50944, 1436, 300, 311, 562, 321, 722, 17746, 264, 1329, 13, 51108, 51108, 400, 370, 11, 370, 309, 1009, 18081, 281, 4356, 13, 51236, 51236, 865, 13, 51256, 51256, 407, 291, 393, 11, 498, 291, 12097, 264, 700, 732, 4190, 490, 264, 11568, 45, 6546, 2503, 11, 309, 311, 516, 281, 1856, 51620, 51620, 291, 365, 257, 7363, 1329, 13, 51780, 51780, 1779, 13, 51804, 51804], "temperature": 0.0, "avg_logprob": -0.12387697800346043, "compression_ratio": 1.7300884955752212, "no_caption_prob": 3.0708670237800106e-05}, {"id": 732, "seek": 341096, "start": 3422.32, "end": 3422.56, "text": " Right.", "tokens": [50364, 400, 550, 512, 2158, 300, 311, 18350, 281, 264, 24922, 11, 550, 456, 311, 516, 281, 312, 472, 13, 50636, 50636, 400, 797, 11, 2503, 337, 264, 1150, 2158, 11, 550, 456, 311, 516, 281, 312, 4018, 293, 300, 311, 309, 13, 50932, 50932, 1779, 13, 50944, 50944, 1436, 300, 311, 562, 321, 722, 17746, 264, 1329, 13, 51108, 51108, 400, 370, 11, 370, 309, 1009, 18081, 281, 4356, 13, 51236, 51236, 865, 13, 51256, 51256, 407, 291, 393, 11, 498, 291, 12097, 264, 700, 732, 4190, 490, 264, 11568, 45, 6546, 2503, 11, 309, 311, 516, 281, 1856, 51620, 51620, 291, 365, 257, 7363, 1329, 13, 51780, 51780, 1779, 13, 51804, 51804], "temperature": 0.0, "avg_logprob": -0.12387697800346043, "compression_ratio": 1.7300884955752212, "no_caption_prob": 3.0708670237800106e-05}, {"id": 733, "seek": 341096, "start": 3422.56, "end": 3425.84, "text": " Because that's when we start generating the list.", "tokens": [50364, 400, 550, 512, 2158, 300, 311, 18350, 281, 264, 24922, 11, 550, 456, 311, 516, 281, 312, 472, 13, 50636, 50636, 400, 797, 11, 2503, 337, 264, 1150, 2158, 11, 550, 456, 311, 516, 281, 312, 4018, 293, 300, 311, 309, 13, 50932, 50932, 1779, 13, 50944, 50944, 1436, 300, 311, 562, 321, 722, 17746, 264, 1329, 13, 51108, 51108, 400, 370, 11, 370, 309, 1009, 18081, 281, 4356, 13, 51236, 51236, 865, 13, 51256, 51256, 407, 291, 393, 11, 498, 291, 12097, 264, 700, 732, 4190, 490, 264, 11568, 45, 6546, 2503, 11, 309, 311, 516, 281, 1856, 51620, 51620, 291, 365, 257, 7363, 1329, 13, 51780, 51780, 1779, 13, 51804, 51804], "temperature": 0.0, "avg_logprob": -0.12387697800346043, "compression_ratio": 1.7300884955752212, "no_caption_prob": 3.0708670237800106e-05}, {"id": 734, "seek": 341096, "start": 3425.84, "end": 3428.4, "text": " And so, so it always reduces to smaller.", "tokens": [50364, 400, 550, 512, 2158, 300, 311, 18350, 281, 264, 24922, 11, 550, 456, 311, 516, 281, 312, 472, 13, 50636, 50636, 400, 797, 11, 2503, 337, 264, 1150, 2158, 11, 550, 456, 311, 516, 281, 312, 4018, 293, 300, 311, 309, 13, 50932, 50932, 1779, 13, 50944, 50944, 1436, 300, 311, 562, 321, 722, 17746, 264, 1329, 13, 51108, 51108, 400, 370, 11, 370, 309, 1009, 18081, 281, 4356, 13, 51236, 51236, 865, 13, 51256, 51256, 407, 291, 393, 11, 498, 291, 12097, 264, 700, 732, 4190, 490, 264, 11568, 45, 6546, 2503, 11, 309, 311, 516, 281, 1856, 51620, 51620, 291, 365, 257, 7363, 1329, 13, 51780, 51780, 1779, 13, 51804, 51804], "temperature": 0.0, "avg_logprob": -0.12387697800346043, "compression_ratio": 1.7300884955752212, "no_caption_prob": 3.0708670237800106e-05}, {"id": 735, "seek": 341096, "start": 3428.4, "end": 3428.8, "text": " Yeah.", "tokens": [50364, 400, 550, 512, 2158, 300, 311, 18350, 281, 264, 24922, 11, 550, 456, 311, 516, 281, 312, 472, 13, 50636, 50636, 400, 797, 11, 2503, 337, 264, 1150, 2158, 11, 550, 456, 311, 516, 281, 312, 4018, 293, 300, 311, 309, 13, 50932, 50932, 1779, 13, 50944, 50944, 1436, 300, 311, 562, 321, 722, 17746, 264, 1329, 13, 51108, 51108, 400, 370, 11, 370, 309, 1009, 18081, 281, 4356, 13, 51236, 51236, 865, 13, 51256, 51256, 407, 291, 393, 11, 498, 291, 12097, 264, 700, 732, 4190, 490, 264, 11568, 45, 6546, 2503, 11, 309, 311, 516, 281, 1856, 51620, 51620, 291, 365, 257, 7363, 1329, 13, 51780, 51780, 1779, 13, 51804, 51804], "temperature": 0.0, "avg_logprob": -0.12387697800346043, "compression_ratio": 1.7300884955752212, "no_caption_prob": 3.0708670237800106e-05}, {"id": 736, "seek": 341096, "start": 3428.8, "end": 3436.08, "text": " So you can, if you delete the first two values from the PRNCh history, it's going to leave", "tokens": [50364, 400, 550, 512, 2158, 300, 311, 18350, 281, 264, 24922, 11, 550, 456, 311, 516, 281, 312, 472, 13, 50636, 50636, 400, 797, 11, 2503, 337, 264, 1150, 2158, 11, 550, 456, 311, 516, 281, 312, 4018, 293, 300, 311, 309, 13, 50932, 50932, 1779, 13, 50944, 50944, 1436, 300, 311, 562, 321, 722, 17746, 264, 1329, 13, 51108, 51108, 400, 370, 11, 370, 309, 1009, 18081, 281, 4356, 13, 51236, 51236, 865, 13, 51256, 51256, 407, 291, 393, 11, 498, 291, 12097, 264, 700, 732, 4190, 490, 264, 11568, 45, 6546, 2503, 11, 309, 311, 516, 281, 1856, 51620, 51620, 291, 365, 257, 7363, 1329, 13, 51780, 51780, 1779, 13, 51804, 51804], "temperature": 0.0, "avg_logprob": -0.12387697800346043, "compression_ratio": 1.7300884955752212, "no_caption_prob": 3.0708670237800106e-05}, {"id": 737, "seek": 341096, "start": 3436.08, "end": 3439.28, "text": " you with a valid list.", "tokens": [50364, 400, 550, 512, 2158, 300, 311, 18350, 281, 264, 24922, 11, 550, 456, 311, 516, 281, 312, 472, 13, 50636, 50636, 400, 797, 11, 2503, 337, 264, 1150, 2158, 11, 550, 456, 311, 516, 281, 312, 4018, 293, 300, 311, 309, 13, 50932, 50932, 1779, 13, 50944, 50944, 1436, 300, 311, 562, 321, 722, 17746, 264, 1329, 13, 51108, 51108, 400, 370, 11, 370, 309, 1009, 18081, 281, 4356, 13, 51236, 51236, 865, 13, 51256, 51256, 407, 291, 393, 11, 498, 291, 12097, 264, 700, 732, 4190, 490, 264, 11568, 45, 6546, 2503, 11, 309, 311, 516, 281, 1856, 51620, 51620, 291, 365, 257, 7363, 1329, 13, 51780, 51780, 1779, 13, 51804, 51804], "temperature": 0.0, "avg_logprob": -0.12387697800346043, "compression_ratio": 1.7300884955752212, "no_caption_prob": 3.0708670237800106e-05}, {"id": 738, "seek": 341096, "start": 3439.28, "end": 3439.76, "text": " Right.", "tokens": [50364, 400, 550, 512, 2158, 300, 311, 18350, 281, 264, 24922, 11, 550, 456, 311, 516, 281, 312, 472, 13, 50636, 50636, 400, 797, 11, 2503, 337, 264, 1150, 2158, 11, 550, 456, 311, 516, 281, 312, 4018, 293, 300, 311, 309, 13, 50932, 50932, 1779, 13, 50944, 50944, 1436, 300, 311, 562, 321, 722, 17746, 264, 1329, 13, 51108, 51108, 400, 370, 11, 370, 309, 1009, 18081, 281, 4356, 13, 51236, 51236, 865, 13, 51256, 51256, 407, 291, 393, 11, 498, 291, 12097, 264, 700, 732, 4190, 490, 264, 11568, 45, 6546, 2503, 11, 309, 311, 516, 281, 1856, 51620, 51620, 291, 365, 257, 7363, 1329, 13, 51780, 51780, 1779, 13, 51804, 51804], "temperature": 0.0, "avg_logprob": -0.12387697800346043, "compression_ratio": 1.7300884955752212, "no_caption_prob": 3.0708670237800106e-05}, {"id": 739, "seek": 343976, "start": 3439.76, "end": 3446.48, "text": " So if one something, one something zero shrinks down to one something zero, that's going to", "tokens": [50364, 407, 498, 472, 746, 11, 472, 746, 4018, 9884, 16431, 760, 281, 472, 746, 4018, 11, 300, 311, 516, 281, 50700, 50700, 312, 2489, 570, 264, 1329, 33538, 300, 13, 50820, 50820, 400, 370, 341, 9884, 16431, 1101, 813, 498, 321, 3031, 281, 8460, 257, 1230, 337, 264, 1207, 295, 577, 51264, 51264, 867, 4190, 321, 528, 293, 550, 445, 17746, 729, 294, 1622, 570, 291, 576, 362, 281, 6853, 518, 51588, 51588, 264, 1230, 293, 12097, 512, 661, 16635, 934, 309, 13, 51788, 51788], "temperature": 0.0, "avg_logprob": -0.0880082612750174, "compression_ratio": 1.6981132075471699, "no_caption_prob": 2.0137824321864173e-05}, {"id": 740, "seek": 343976, "start": 3446.48, "end": 3448.88, "text": " be fine because the list accepts that.", "tokens": [50364, 407, 498, 472, 746, 11, 472, 746, 4018, 9884, 16431, 760, 281, 472, 746, 4018, 11, 300, 311, 516, 281, 50700, 50700, 312, 2489, 570, 264, 1329, 33538, 300, 13, 50820, 50820, 400, 370, 341, 9884, 16431, 1101, 813, 498, 321, 3031, 281, 8460, 257, 1230, 337, 264, 1207, 295, 577, 51264, 51264, 867, 4190, 321, 528, 293, 550, 445, 17746, 729, 294, 1622, 570, 291, 576, 362, 281, 6853, 518, 51588, 51588, 264, 1230, 293, 12097, 512, 661, 16635, 934, 309, 13, 51788, 51788], "temperature": 0.0, "avg_logprob": -0.0880082612750174, "compression_ratio": 1.6981132075471699, "no_caption_prob": 2.0137824321864173e-05}, {"id": 741, "seek": 343976, "start": 3448.88, "end": 3457.76, "text": " And so this shrinks better than if we tried to generate a number for the count of how", "tokens": [50364, 407, 498, 472, 746, 11, 472, 746, 4018, 9884, 16431, 760, 281, 472, 746, 4018, 11, 300, 311, 516, 281, 50700, 50700, 312, 2489, 570, 264, 1329, 33538, 300, 13, 50820, 50820, 400, 370, 341, 9884, 16431, 1101, 813, 498, 321, 3031, 281, 8460, 257, 1230, 337, 264, 1207, 295, 577, 51264, 51264, 867, 4190, 321, 528, 293, 550, 445, 17746, 729, 294, 1622, 570, 291, 576, 362, 281, 6853, 518, 51588, 51588, 264, 1230, 293, 12097, 512, 661, 16635, 934, 309, 13, 51788, 51788], "temperature": 0.0, "avg_logprob": -0.0880082612750174, "compression_ratio": 1.6981132075471699, "no_caption_prob": 2.0137824321864173e-05}, {"id": 742, "seek": 343976, "start": 3457.76, "end": 3464.2400000000002, "text": " many values we want and then just generating those in line because you would have to decrement", "tokens": [50364, 407, 498, 472, 746, 11, 472, 746, 4018, 9884, 16431, 760, 281, 472, 746, 4018, 11, 300, 311, 516, 281, 50700, 50700, 312, 2489, 570, 264, 1329, 33538, 300, 13, 50820, 50820, 400, 370, 341, 9884, 16431, 1101, 813, 498, 321, 3031, 281, 8460, 257, 1230, 337, 264, 1207, 295, 577, 51264, 51264, 867, 4190, 321, 528, 293, 550, 445, 17746, 729, 294, 1622, 570, 291, 576, 362, 281, 6853, 518, 51588, 51588, 264, 1230, 293, 12097, 512, 661, 16635, 934, 309, 13, 51788, 51788], "temperature": 0.0, "avg_logprob": -0.0880082612750174, "compression_ratio": 1.6981132075471699, "no_caption_prob": 2.0137824321864173e-05}, {"id": 743, "seek": 343976, "start": 3464.2400000000002, "end": 3468.2400000000002, "text": " the number and delete some other chunk after it.", "tokens": [50364, 407, 498, 472, 746, 11, 472, 746, 4018, 9884, 16431, 760, 281, 472, 746, 4018, 11, 300, 311, 516, 281, 50700, 50700, 312, 2489, 570, 264, 1329, 33538, 300, 13, 50820, 50820, 400, 370, 341, 9884, 16431, 1101, 813, 498, 321, 3031, 281, 8460, 257, 1230, 337, 264, 1207, 295, 577, 51264, 51264, 867, 4190, 321, 528, 293, 550, 445, 17746, 729, 294, 1622, 570, 291, 576, 362, 281, 6853, 518, 51588, 51588, 264, 1230, 293, 12097, 512, 661, 16635, 934, 309, 13, 51788, 51788], "temperature": 0.0, "avg_logprob": -0.0880082612750174, "compression_ratio": 1.6981132075471699, "no_caption_prob": 2.0137824321864173e-05}, {"id": 744, "seek": 346824, "start": 3468.24, "end": 3474.0, "text": " So it's just kind of weird, you know, with the internal representation, it's kind of", "tokens": [50364, 407, 309, 311, 445, 733, 295, 3657, 11, 291, 458, 11, 365, 264, 6920, 10290, 11, 309, 311, 733, 295, 50652, 50652, 406, 588, 2199, 636, 281, 23060, 729, 14511, 13, 50852, 50852, 407, 321, 40768, 337, 264, 9594, 16635, 712, 7929, 257, 11464, 3109, 13, 51120, 51156, 400, 550, 291, 362, 3866, 30631, 337, 1184, 1329, 4959, 11, 558, 30, 51376, 51376, 1119, 300, 437, 291, 848, 30, 51452, 51452, 876, 11, 472, 2503, 337, 1184, 14747, 13, 51576, 51624, 1485, 2503, 13, 51668, 51668], "temperature": 0.0, "avg_logprob": -0.1395617831837047, "compression_ratio": 1.5507246376811594, "no_caption_prob": 1.1839573744509835e-05}, {"id": 745, "seek": 346824, "start": 3474.0, "end": 3478.0, "text": " not very simple way to shrink those lists.", "tokens": [50364, 407, 309, 311, 445, 733, 295, 3657, 11, 291, 458, 11, 365, 264, 6920, 10290, 11, 309, 311, 733, 295, 50652, 50652, 406, 588, 2199, 636, 281, 23060, 729, 14511, 13, 50852, 50852, 407, 321, 40768, 337, 264, 9594, 16635, 712, 7929, 257, 11464, 3109, 13, 51120, 51156, 400, 550, 291, 362, 3866, 30631, 337, 1184, 1329, 4959, 11, 558, 30, 51376, 51376, 1119, 300, 437, 291, 848, 30, 51452, 51452, 876, 11, 472, 2503, 337, 1184, 14747, 13, 51576, 51624, 1485, 2503, 13, 51668, 51668], "temperature": 0.0, "avg_logprob": -0.1395617831837047, "compression_ratio": 1.5507246376811594, "no_caption_prob": 1.1839573744509835e-05}, {"id": 746, "seek": 346824, "start": 3478.0, "end": 3483.3599999999997, "text": " So we opted for the nicely chunkable flip a coin approach.", "tokens": [50364, 407, 309, 311, 445, 733, 295, 3657, 11, 291, 458, 11, 365, 264, 6920, 10290, 11, 309, 311, 733, 295, 50652, 50652, 406, 588, 2199, 636, 281, 23060, 729, 14511, 13, 50852, 50852, 407, 321, 40768, 337, 264, 9594, 16635, 712, 7929, 257, 11464, 3109, 13, 51120, 51156, 400, 550, 291, 362, 3866, 30631, 337, 1184, 1329, 4959, 11, 558, 30, 51376, 51376, 1119, 300, 437, 291, 848, 30, 51452, 51452, 876, 11, 472, 2503, 337, 1184, 14747, 13, 51576, 51624, 1485, 2503, 13, 51668, 51668], "temperature": 0.0, "avg_logprob": -0.1395617831837047, "compression_ratio": 1.5507246376811594, "no_caption_prob": 1.1839573744509835e-05}, {"id": 747, "seek": 346824, "start": 3484.08, "end": 3488.4799999999996, "text": " And then you have multiple histories for each list elements, right?", "tokens": [50364, 407, 309, 311, 445, 733, 295, 3657, 11, 291, 458, 11, 365, 264, 6920, 10290, 11, 309, 311, 733, 295, 50652, 50652, 406, 588, 2199, 636, 281, 23060, 729, 14511, 13, 50852, 50852, 407, 321, 40768, 337, 264, 9594, 16635, 712, 7929, 257, 11464, 3109, 13, 51120, 51156, 400, 550, 291, 362, 3866, 30631, 337, 1184, 1329, 4959, 11, 558, 30, 51376, 51376, 1119, 300, 437, 291, 848, 30, 51452, 51452, 876, 11, 472, 2503, 337, 1184, 14747, 13, 51576, 51624, 1485, 2503, 13, 51668, 51668], "temperature": 0.0, "avg_logprob": -0.1395617831837047, "compression_ratio": 1.5507246376811594, "no_caption_prob": 1.1839573744509835e-05}, {"id": 748, "seek": 346824, "start": 3488.4799999999996, "end": 3490.0, "text": " Is that what you said?", "tokens": [50364, 407, 309, 311, 445, 733, 295, 3657, 11, 291, 458, 11, 365, 264, 6920, 10290, 11, 309, 311, 733, 295, 50652, 50652, 406, 588, 2199, 636, 281, 23060, 729, 14511, 13, 50852, 50852, 407, 321, 40768, 337, 264, 9594, 16635, 712, 7929, 257, 11464, 3109, 13, 51120, 51156, 400, 550, 291, 362, 3866, 30631, 337, 1184, 1329, 4959, 11, 558, 30, 51376, 51376, 1119, 300, 437, 291, 848, 30, 51452, 51452, 876, 11, 472, 2503, 337, 1184, 14747, 13, 51576, 51624, 1485, 2503, 13, 51668, 51668], "temperature": 0.0, "avg_logprob": -0.1395617831837047, "compression_ratio": 1.5507246376811594, "no_caption_prob": 1.1839573744509835e-05}, {"id": 749, "seek": 346824, "start": 3490.0, "end": 3492.4799999999996, "text": " Oh, one history for each slot.", "tokens": [50364, 407, 309, 311, 445, 733, 295, 3657, 11, 291, 458, 11, 365, 264, 6920, 10290, 11, 309, 311, 733, 295, 50652, 50652, 406, 588, 2199, 636, 281, 23060, 729, 14511, 13, 50852, 50852, 407, 321, 40768, 337, 264, 9594, 16635, 712, 7929, 257, 11464, 3109, 13, 51120, 51156, 400, 550, 291, 362, 3866, 30631, 337, 1184, 1329, 4959, 11, 558, 30, 51376, 51376, 1119, 300, 437, 291, 848, 30, 51452, 51452, 876, 11, 472, 2503, 337, 1184, 14747, 13, 51576, 51624, 1485, 2503, 13, 51668, 51668], "temperature": 0.0, "avg_logprob": -0.1395617831837047, "compression_ratio": 1.5507246376811594, "no_caption_prob": 1.1839573744509835e-05}, {"id": 750, "seek": 346824, "start": 3493.4399999999996, "end": 3494.3199999999997, "text": " One history.", "tokens": [50364, 407, 309, 311, 445, 733, 295, 3657, 11, 291, 458, 11, 365, 264, 6920, 10290, 11, 309, 311, 733, 295, 50652, 50652, 406, 588, 2199, 636, 281, 23060, 729, 14511, 13, 50852, 50852, 407, 321, 40768, 337, 264, 9594, 16635, 712, 7929, 257, 11464, 3109, 13, 51120, 51156, 400, 550, 291, 362, 3866, 30631, 337, 1184, 1329, 4959, 11, 558, 30, 51376, 51376, 1119, 300, 437, 291, 848, 30, 51452, 51452, 876, 11, 472, 2503, 337, 1184, 14747, 13, 51576, 51624, 1485, 2503, 13, 51668, 51668], "temperature": 0.0, "avg_logprob": -0.1395617831837047, "compression_ratio": 1.5507246376811594, "no_caption_prob": 1.1839573744509835e-05}, {"id": 751, "seek": 349432, "start": 3494.32, "end": 3499.44, "text": " Well, one history gives you one final value.", "tokens": [50364, 1042, 11, 472, 2503, 2709, 291, 472, 2572, 2158, 13, 50620, 50620, 407, 472, 11568, 45, 6546, 2503, 486, 976, 291, 11, 718, 311, 584, 257, 1329, 295, 4342, 420, 746, 11, 457, 50884, 50884, 1184, 295, 729, 4342, 294, 456, 11, 309, 1062, 406, 312, 18204, 295, 445, 472, 10313, 3373, 13, 51192, 51192, 467, 1062, 312, 18204, 295, 3866, 11, 558, 30, 51296, 51296, 407, 1184, 283, 3334, 4527, 393, 2642, 19071, 3289, 867, 4974, 4190, 13, 51644, 51676], "temperature": 0.0, "avg_logprob": -0.09625001700527697, "compression_ratio": 1.545, "no_caption_prob": 9.00868617463857e-05}, {"id": 752, "seek": 349432, "start": 3499.44, "end": 3504.7200000000003, "text": " So one PRNCh history will give you, let's say a list of characters or something, but", "tokens": [50364, 1042, 11, 472, 2503, 2709, 291, 472, 2572, 2158, 13, 50620, 50620, 407, 472, 11568, 45, 6546, 2503, 486, 976, 291, 11, 718, 311, 584, 257, 1329, 295, 4342, 420, 746, 11, 457, 50884, 50884, 1184, 295, 729, 4342, 294, 456, 11, 309, 1062, 406, 312, 18204, 295, 445, 472, 10313, 3373, 13, 51192, 51192, 467, 1062, 312, 18204, 295, 3866, 11, 558, 30, 51296, 51296, 407, 1184, 283, 3334, 4527, 393, 2642, 19071, 3289, 867, 4974, 4190, 13, 51644, 51676], "temperature": 0.0, "avg_logprob": -0.09625001700527697, "compression_ratio": 1.545, "no_caption_prob": 9.00868617463857e-05}, {"id": 753, "seek": 349432, "start": 3504.7200000000003, "end": 3510.88, "text": " each of those characters in there, it might not be composed of just one dice roll.", "tokens": [50364, 1042, 11, 472, 2503, 2709, 291, 472, 2572, 2158, 13, 50620, 50620, 407, 472, 11568, 45, 6546, 2503, 486, 976, 291, 11, 718, 311, 584, 257, 1329, 295, 4342, 420, 746, 11, 457, 50884, 50884, 1184, 295, 729, 4342, 294, 456, 11, 309, 1062, 406, 312, 18204, 295, 445, 472, 10313, 3373, 13, 51192, 51192, 467, 1062, 312, 18204, 295, 3866, 11, 558, 30, 51296, 51296, 407, 1184, 283, 3334, 4527, 393, 2642, 19071, 3289, 867, 4974, 4190, 13, 51644, 51676], "temperature": 0.0, "avg_logprob": -0.09625001700527697, "compression_ratio": 1.545, "no_caption_prob": 9.00868617463857e-05}, {"id": 754, "seek": 349432, "start": 3510.88, "end": 3512.96, "text": " It might be composed of multiple, right?", "tokens": [50364, 1042, 11, 472, 2503, 2709, 291, 472, 2572, 2158, 13, 50620, 50620, 407, 472, 11568, 45, 6546, 2503, 486, 976, 291, 11, 718, 311, 584, 257, 1329, 295, 4342, 420, 746, 11, 457, 50884, 50884, 1184, 295, 729, 4342, 294, 456, 11, 309, 1062, 406, 312, 18204, 295, 445, 472, 10313, 3373, 13, 51192, 51192, 467, 1062, 312, 18204, 295, 3866, 11, 558, 30, 51296, 51296, 407, 1184, 283, 3334, 4527, 393, 2642, 19071, 3289, 867, 4974, 4190, 13, 51644, 51676], "temperature": 0.0, "avg_logprob": -0.09625001700527697, "compression_ratio": 1.545, "no_caption_prob": 9.00868617463857e-05}, {"id": 755, "seek": 349432, "start": 3512.96, "end": 3519.92, "text": " So each fuzzer can draw arbitrarily many random values.", "tokens": [50364, 1042, 11, 472, 2503, 2709, 291, 472, 2572, 2158, 13, 50620, 50620, 407, 472, 11568, 45, 6546, 2503, 486, 976, 291, 11, 718, 311, 584, 257, 1329, 295, 4342, 420, 746, 11, 457, 50884, 50884, 1184, 295, 729, 4342, 294, 456, 11, 309, 1062, 406, 312, 18204, 295, 445, 472, 10313, 3373, 13, 51192, 51192, 467, 1062, 312, 18204, 295, 3866, 11, 558, 30, 51296, 51296, 407, 1184, 283, 3334, 4527, 393, 2642, 19071, 3289, 867, 4974, 4190, 13, 51644, 51676], "temperature": 0.0, "avg_logprob": -0.09625001700527697, "compression_ratio": 1.545, "no_caption_prob": 9.00868617463857e-05}, {"id": 756, "seek": 351992, "start": 3519.92, "end": 3528.2400000000002, "text": " And so you could think about it as of a tree or of some kind of released of nested lists", "tokens": [50364, 400, 370, 291, 727, 519, 466, 309, 382, 295, 257, 4230, 420, 295, 512, 733, 295, 4736, 295, 15646, 292, 14511, 50780, 50808, 689, 257, 2212, 1422, 9819, 307, 2942, 538, 341, 2685, 283, 3334, 4527, 11, 457, 294, 264, 917, 11, 309, 311, 439, 51260, 51260, 24183, 292, 484, 293, 264, 41684, 6405, 1177, 380, 534, 458, 597, 10313, 3373, 307, 4077, 281, 51728, 51728, 597, 2158, 11, 558, 30, 51808, 51808], "temperature": 0.0, "avg_logprob": -0.18433864593505858, "compression_ratio": 1.518716577540107, "no_caption_prob": 9.665774996392429e-06}, {"id": 757, "seek": 351992, "start": 3528.8, "end": 3537.84, "text": " where a given sub branch is created by this specific fuzzer, but in the end, it's all", "tokens": [50364, 400, 370, 291, 727, 519, 466, 309, 382, 295, 257, 4230, 420, 295, 512, 733, 295, 4736, 295, 15646, 292, 14511, 50780, 50808, 689, 257, 2212, 1422, 9819, 307, 2942, 538, 341, 2685, 283, 3334, 4527, 11, 457, 294, 264, 917, 11, 309, 311, 439, 51260, 51260, 24183, 292, 484, 293, 264, 41684, 6405, 1177, 380, 534, 458, 597, 10313, 3373, 307, 4077, 281, 51728, 51728, 597, 2158, 11, 558, 30, 51808, 51808], "temperature": 0.0, "avg_logprob": -0.18433864593505858, "compression_ratio": 1.518716577540107, "no_caption_prob": 9.665774996392429e-06}, {"id": 758, "seek": 351992, "start": 3537.84, "end": 3547.2000000000003, "text": " flattened out and the shrinking library doesn't really know which dice roll is related to", "tokens": [50364, 400, 370, 291, 727, 519, 466, 309, 382, 295, 257, 4230, 420, 295, 512, 733, 295, 4736, 295, 15646, 292, 14511, 50780, 50808, 689, 257, 2212, 1422, 9819, 307, 2942, 538, 341, 2685, 283, 3334, 4527, 11, 457, 294, 264, 917, 11, 309, 311, 439, 51260, 51260, 24183, 292, 484, 293, 264, 41684, 6405, 1177, 380, 534, 458, 597, 10313, 3373, 307, 4077, 281, 51728, 51728, 597, 2158, 11, 558, 30, 51808, 51808], "temperature": 0.0, "avg_logprob": -0.18433864593505858, "compression_ratio": 1.518716577540107, "no_caption_prob": 9.665774996392429e-06}, {"id": 759, "seek": 351992, "start": 3547.2000000000003, "end": 3548.8, "text": " which value, right?", "tokens": [50364, 400, 370, 291, 727, 519, 466, 309, 382, 295, 257, 4230, 420, 295, 512, 733, 295, 4736, 295, 15646, 292, 14511, 50780, 50808, 689, 257, 2212, 1422, 9819, 307, 2942, 538, 341, 2685, 283, 3334, 4527, 11, 457, 294, 264, 917, 11, 309, 311, 439, 51260, 51260, 24183, 292, 484, 293, 264, 41684, 6405, 1177, 380, 534, 458, 597, 10313, 3373, 307, 4077, 281, 51728, 51728, 597, 2158, 11, 558, 30, 51808, 51808], "temperature": 0.0, "avg_logprob": -0.18433864593505858, "compression_ratio": 1.518716577540107, "no_caption_prob": 9.665774996392429e-06}, {"id": 760, "seek": 354880, "start": 3548.8, "end": 3556.48, "text": " It is kind of blind to that and it just tries different stuff, zeroing, decrementing, removing", "tokens": [50364, 467, 307, 733, 295, 6865, 281, 300, 293, 309, 445, 9898, 819, 1507, 11, 4018, 278, 11, 6853, 518, 278, 11, 12720, 50748, 50748, 293, 445, 8194, 11, 445, 19251, 309, 412, 264, 2929, 293, 8194, 437, 12518, 13, 50936, 50972, 1033, 13, 50992, 50992, 400, 300, 1062, 1874, 294, 257, 1326, 721, 300, 500, 380, 652, 2020, 293, 597, 815, 3061, 11, 457, 309, 51264, 51264, 486, 915, 746, 597, 486, 589, 484, 13, 51444, 51444, 865, 13, 51484, 51484, 407, 775, 309, 1884, 257, 777, 9819, 633, 565, 291, 818, 293, 550, 30, 51660, 51660, 1119, 300, 309, 30, 51700, 51700], "temperature": 0.0, "avg_logprob": -0.1439688455490839, "compression_ratio": 1.606060606060606, "no_caption_prob": 7.02740580891259e-05}, {"id": 761, "seek": 354880, "start": 3556.48, "end": 3560.2400000000002, "text": " and just sees, just throws it at the wall and sees what sticks.", "tokens": [50364, 467, 307, 733, 295, 6865, 281, 300, 293, 309, 445, 9898, 819, 1507, 11, 4018, 278, 11, 6853, 518, 278, 11, 12720, 50748, 50748, 293, 445, 8194, 11, 445, 19251, 309, 412, 264, 2929, 293, 8194, 437, 12518, 13, 50936, 50972, 1033, 13, 50992, 50992, 400, 300, 1062, 1874, 294, 257, 1326, 721, 300, 500, 380, 652, 2020, 293, 597, 815, 3061, 11, 457, 309, 51264, 51264, 486, 915, 746, 597, 486, 589, 484, 13, 51444, 51444, 865, 13, 51484, 51484, 407, 775, 309, 1884, 257, 777, 9819, 633, 565, 291, 818, 293, 550, 30, 51660, 51660, 1119, 300, 309, 30, 51700, 51700], "temperature": 0.0, "avg_logprob": -0.1439688455490839, "compression_ratio": 1.606060606060606, "no_caption_prob": 7.02740580891259e-05}, {"id": 762, "seek": 354880, "start": 3560.96, "end": 3561.36, "text": " Okay.", "tokens": [50364, 467, 307, 733, 295, 6865, 281, 300, 293, 309, 445, 9898, 819, 1507, 11, 4018, 278, 11, 6853, 518, 278, 11, 12720, 50748, 50748, 293, 445, 8194, 11, 445, 19251, 309, 412, 264, 2929, 293, 8194, 437, 12518, 13, 50936, 50972, 1033, 13, 50992, 50992, 400, 300, 1062, 1874, 294, 257, 1326, 721, 300, 500, 380, 652, 2020, 293, 597, 815, 3061, 11, 457, 309, 51264, 51264, 486, 915, 746, 597, 486, 589, 484, 13, 51444, 51444, 865, 13, 51484, 51484, 407, 775, 309, 1884, 257, 777, 9819, 633, 565, 291, 818, 293, 550, 30, 51660, 51660, 1119, 300, 309, 30, 51700, 51700], "temperature": 0.0, "avg_logprob": -0.1439688455490839, "compression_ratio": 1.606060606060606, "no_caption_prob": 7.02740580891259e-05}, {"id": 763, "seek": 354880, "start": 3561.36, "end": 3566.8, "text": " And that might result in a few things that don't make sense and which may fail, but it", "tokens": [50364, 467, 307, 733, 295, 6865, 281, 300, 293, 309, 445, 9898, 819, 1507, 11, 4018, 278, 11, 6853, 518, 278, 11, 12720, 50748, 50748, 293, 445, 8194, 11, 445, 19251, 309, 412, 264, 2929, 293, 8194, 437, 12518, 13, 50936, 50972, 1033, 13, 50992, 50992, 400, 300, 1062, 1874, 294, 257, 1326, 721, 300, 500, 380, 652, 2020, 293, 597, 815, 3061, 11, 457, 309, 51264, 51264, 486, 915, 746, 597, 486, 589, 484, 13, 51444, 51444, 865, 13, 51484, 51484, 407, 775, 309, 1884, 257, 777, 9819, 633, 565, 291, 818, 293, 550, 30, 51660, 51660, 1119, 300, 309, 30, 51700, 51700], "temperature": 0.0, "avg_logprob": -0.1439688455490839, "compression_ratio": 1.606060606060606, "no_caption_prob": 7.02740580891259e-05}, {"id": 764, "seek": 354880, "start": 3566.8, "end": 3570.4, "text": " will find something which will work out.", "tokens": [50364, 467, 307, 733, 295, 6865, 281, 300, 293, 309, 445, 9898, 819, 1507, 11, 4018, 278, 11, 6853, 518, 278, 11, 12720, 50748, 50748, 293, 445, 8194, 11, 445, 19251, 309, 412, 264, 2929, 293, 8194, 437, 12518, 13, 50936, 50972, 1033, 13, 50992, 50992, 400, 300, 1062, 1874, 294, 257, 1326, 721, 300, 500, 380, 652, 2020, 293, 597, 815, 3061, 11, 457, 309, 51264, 51264, 486, 915, 746, 597, 486, 589, 484, 13, 51444, 51444, 865, 13, 51484, 51484, 407, 775, 309, 1884, 257, 777, 9819, 633, 565, 291, 818, 293, 550, 30, 51660, 51660, 1119, 300, 309, 30, 51700, 51700], "temperature": 0.0, "avg_logprob": -0.1439688455490839, "compression_ratio": 1.606060606060606, "no_caption_prob": 7.02740580891259e-05}, {"id": 765, "seek": 354880, "start": 3570.4, "end": 3571.2000000000003, "text": " Yeah.", "tokens": [50364, 467, 307, 733, 295, 6865, 281, 300, 293, 309, 445, 9898, 819, 1507, 11, 4018, 278, 11, 6853, 518, 278, 11, 12720, 50748, 50748, 293, 445, 8194, 11, 445, 19251, 309, 412, 264, 2929, 293, 8194, 437, 12518, 13, 50936, 50972, 1033, 13, 50992, 50992, 400, 300, 1062, 1874, 294, 257, 1326, 721, 300, 500, 380, 652, 2020, 293, 597, 815, 3061, 11, 457, 309, 51264, 51264, 486, 915, 746, 597, 486, 589, 484, 13, 51444, 51444, 865, 13, 51484, 51484, 407, 775, 309, 1884, 257, 777, 9819, 633, 565, 291, 818, 293, 550, 30, 51660, 51660, 1119, 300, 309, 30, 51700, 51700], "temperature": 0.0, "avg_logprob": -0.1439688455490839, "compression_ratio": 1.606060606060606, "no_caption_prob": 7.02740580891259e-05}, {"id": 766, "seek": 354880, "start": 3571.2000000000003, "end": 3574.7200000000003, "text": " So does it create a new branch every time you call and then?", "tokens": [50364, 467, 307, 733, 295, 6865, 281, 300, 293, 309, 445, 9898, 819, 1507, 11, 4018, 278, 11, 6853, 518, 278, 11, 12720, 50748, 50748, 293, 445, 8194, 11, 445, 19251, 309, 412, 264, 2929, 293, 8194, 437, 12518, 13, 50936, 50972, 1033, 13, 50992, 50992, 400, 300, 1062, 1874, 294, 257, 1326, 721, 300, 500, 380, 652, 2020, 293, 597, 815, 3061, 11, 457, 309, 51264, 51264, 486, 915, 746, 597, 486, 589, 484, 13, 51444, 51444, 865, 13, 51484, 51484, 407, 775, 309, 1884, 257, 777, 9819, 633, 565, 291, 818, 293, 550, 30, 51660, 51660, 1119, 300, 309, 30, 51700, 51700], "temperature": 0.0, "avg_logprob": -0.1439688455490839, "compression_ratio": 1.606060606060606, "no_caption_prob": 7.02740580891259e-05}, {"id": 767, "seek": 354880, "start": 3574.7200000000003, "end": 3575.52, "text": " Is that it?", "tokens": [50364, 467, 307, 733, 295, 6865, 281, 300, 293, 309, 445, 9898, 819, 1507, 11, 4018, 278, 11, 6853, 518, 278, 11, 12720, 50748, 50748, 293, 445, 8194, 11, 445, 19251, 309, 412, 264, 2929, 293, 8194, 437, 12518, 13, 50936, 50972, 1033, 13, 50992, 50992, 400, 300, 1062, 1874, 294, 257, 1326, 721, 300, 500, 380, 652, 2020, 293, 597, 815, 3061, 11, 457, 309, 51264, 51264, 486, 915, 746, 597, 486, 589, 484, 13, 51444, 51444, 865, 13, 51484, 51484, 407, 775, 309, 1884, 257, 777, 9819, 633, 565, 291, 818, 293, 550, 30, 51660, 51660, 1119, 300, 309, 30, 51700, 51700], "temperature": 0.0, "avg_logprob": -0.1439688455490839, "compression_ratio": 1.606060606060606, "no_caption_prob": 7.02740580891259e-05}, {"id": 768, "seek": 357552, "start": 3575.52, "end": 3579.6, "text": " So, and then just runs another fuzzer.", "tokens": [50364, 407, 11, 293, 550, 445, 6676, 1071, 283, 3334, 4527, 13, 50568, 50568, 400, 370, 283, 16740, 433, 362, 1785, 1854, 552, 11, 558, 30, 50732, 50732, 814, 360, 362, 264, 2190, 2503, 293, 291, 393, 519, 295, 729, 411, 3096, 283, 16740, 433, 11, 411, 24922, 51108, 51108, 420, 7929, 257, 11464, 420, 2035, 13, 51208, 51208, 509, 393, 519, 295, 552, 382, 17746, 2158, 293, 2902, 11, 8295, 291, 360, 746, 365, 51500, 51500, 300, 11, 457, 611, 724, 2029, 281, 264, 1785, 13, 51688, 51688, 1779, 13, 51708, 51708], "temperature": 0.0, "avg_logprob": -0.09990248781569461, "compression_ratio": 1.5904761904761904, "no_caption_prob": 6.237860361579806e-06}, {"id": 769, "seek": 357552, "start": 3579.6, "end": 3582.88, "text": " And so fuzzers have state inside them, right?", "tokens": [50364, 407, 11, 293, 550, 445, 6676, 1071, 283, 3334, 4527, 13, 50568, 50568, 400, 370, 283, 16740, 433, 362, 1785, 1854, 552, 11, 558, 30, 50732, 50732, 814, 360, 362, 264, 2190, 2503, 293, 291, 393, 519, 295, 729, 411, 3096, 283, 16740, 433, 11, 411, 24922, 51108, 51108, 420, 7929, 257, 11464, 420, 2035, 13, 51208, 51208, 509, 393, 519, 295, 552, 382, 17746, 2158, 293, 2902, 11, 8295, 291, 360, 746, 365, 51500, 51500, 300, 11, 457, 611, 724, 2029, 281, 264, 1785, 13, 51688, 51688, 1779, 13, 51708, 51708], "temperature": 0.0, "avg_logprob": -0.09990248781569461, "compression_ratio": 1.5904761904761904, "no_caption_prob": 6.237860361579806e-06}, {"id": 770, "seek": 357552, "start": 3582.88, "end": 3590.4, "text": " They do have the current history and you can think of those like base fuzzers, like integer", "tokens": [50364, 407, 11, 293, 550, 445, 6676, 1071, 283, 3334, 4527, 13, 50568, 50568, 400, 370, 283, 16740, 433, 362, 1785, 1854, 552, 11, 558, 30, 50732, 50732, 814, 360, 362, 264, 2190, 2503, 293, 291, 393, 519, 295, 729, 411, 3096, 283, 16740, 433, 11, 411, 24922, 51108, 51108, 420, 7929, 257, 11464, 420, 2035, 13, 51208, 51208, 509, 393, 519, 295, 552, 382, 17746, 2158, 293, 2902, 11, 8295, 291, 360, 746, 365, 51500, 51500, 300, 11, 457, 611, 724, 2029, 281, 264, 1785, 13, 51688, 51688, 1779, 13, 51708, 51708], "temperature": 0.0, "avg_logprob": -0.09990248781569461, "compression_ratio": 1.5904761904761904, "no_caption_prob": 6.237860361579806e-06}, {"id": 771, "seek": 357552, "start": 3590.4, "end": 3592.4, "text": " or flip a coin or whatever.", "tokens": [50364, 407, 11, 293, 550, 445, 6676, 1071, 283, 3334, 4527, 13, 50568, 50568, 400, 370, 283, 16740, 433, 362, 1785, 1854, 552, 11, 558, 30, 50732, 50732, 814, 360, 362, 264, 2190, 2503, 293, 291, 393, 519, 295, 729, 411, 3096, 283, 16740, 433, 11, 411, 24922, 51108, 51108, 420, 7929, 257, 11464, 420, 2035, 13, 51208, 51208, 509, 393, 519, 295, 552, 382, 17746, 2158, 293, 2902, 11, 8295, 291, 360, 746, 365, 51500, 51500, 300, 11, 457, 611, 724, 2029, 281, 264, 1785, 13, 51688, 51688, 1779, 13, 51708, 51708], "temperature": 0.0, "avg_logprob": -0.09990248781569461, "compression_ratio": 1.5904761904761904, "no_caption_prob": 6.237860361579806e-06}, {"id": 772, "seek": 357552, "start": 3592.4, "end": 3598.24, "text": " You can think of them as generating value and giving, letting you do something with", "tokens": [50364, 407, 11, 293, 550, 445, 6676, 1071, 283, 3334, 4527, 13, 50568, 50568, 400, 370, 283, 16740, 433, 362, 1785, 1854, 552, 11, 558, 30, 50732, 50732, 814, 360, 362, 264, 2190, 2503, 293, 291, 393, 519, 295, 729, 411, 3096, 283, 16740, 433, 11, 411, 24922, 51108, 51108, 420, 7929, 257, 11464, 420, 2035, 13, 51208, 51208, 509, 393, 519, 295, 552, 382, 17746, 2158, 293, 2902, 11, 8295, 291, 360, 746, 365, 51500, 51500, 300, 11, 457, 611, 724, 2029, 281, 264, 1785, 13, 51688, 51688, 1779, 13, 51708, 51708], "temperature": 0.0, "avg_logprob": -0.09990248781569461, "compression_ratio": 1.5904761904761904, "no_caption_prob": 6.237860361579806e-06}, {"id": 773, "seek": 357552, "start": 3598.24, "end": 3602.0, "text": " that, but also appending to the state.", "tokens": [50364, 407, 11, 293, 550, 445, 6676, 1071, 283, 3334, 4527, 13, 50568, 50568, 400, 370, 283, 16740, 433, 362, 1785, 1854, 552, 11, 558, 30, 50732, 50732, 814, 360, 362, 264, 2190, 2503, 293, 291, 393, 519, 295, 729, 411, 3096, 283, 16740, 433, 11, 411, 24922, 51108, 51108, 420, 7929, 257, 11464, 420, 2035, 13, 51208, 51208, 509, 393, 519, 295, 552, 382, 17746, 2158, 293, 2902, 11, 8295, 291, 360, 746, 365, 51500, 51500, 300, 11, 457, 611, 724, 2029, 281, 264, 1785, 13, 51688, 51688, 1779, 13, 51708, 51708], "temperature": 0.0, "avg_logprob": -0.09990248781569461, "compression_ratio": 1.5904761904761904, "no_caption_prob": 6.237860361579806e-06}, {"id": 774, "seek": 357552, "start": 3602.0, "end": 3602.4, "text": " Right.", "tokens": [50364, 407, 11, 293, 550, 445, 6676, 1071, 283, 3334, 4527, 13, 50568, 50568, 400, 370, 283, 16740, 433, 362, 1785, 1854, 552, 11, 558, 30, 50732, 50732, 814, 360, 362, 264, 2190, 2503, 293, 291, 393, 519, 295, 729, 411, 3096, 283, 16740, 433, 11, 411, 24922, 51108, 51108, 420, 7929, 257, 11464, 420, 2035, 13, 51208, 51208, 509, 393, 519, 295, 552, 382, 17746, 2158, 293, 2902, 11, 8295, 291, 360, 746, 365, 51500, 51500, 300, 11, 457, 611, 724, 2029, 281, 264, 1785, 13, 51688, 51688, 1779, 13, 51708, 51708], "temperature": 0.0, "avg_logprob": -0.09990248781569461, "compression_ratio": 1.5904761904761904, "no_caption_prob": 6.237860361579806e-06}, {"id": 775, "seek": 360240, "start": 3602.4, "end": 3610.48, "text": " And so that's kind of like this monadic dance of keeping a state around where you only exposed", "tokens": [50364, 400, 370, 300, 311, 733, 295, 411, 341, 1108, 43341, 4489, 295, 5145, 257, 1785, 926, 689, 291, 787, 9495, 50768, 50768, 264, 2158, 11, 457, 1936, 456, 366, 572, 411, 37702, 819, 30631, 13, 51112, 51112, 821, 311, 445, 472, 2503, 13, 51168, 51224, 583, 382, 291, 352, 807, 264, 2445, 293, 382, 291, 818, 613, 441, 6828, 20560, 3413, 11, 436, 51480, 51480], "temperature": 0.0, "avg_logprob": -0.08774362393279574, "compression_ratio": 1.5080213903743316, "no_caption_prob": 1.4506419574900065e-05}, {"id": 776, "seek": 360240, "start": 3610.48, "end": 3617.36, "text": " the value, but basically there are no like concurrent different histories.", "tokens": [50364, 400, 370, 300, 311, 733, 295, 411, 341, 1108, 43341, 4489, 295, 5145, 257, 1785, 926, 689, 291, 787, 9495, 50768, 50768, 264, 2158, 11, 457, 1936, 456, 366, 572, 411, 37702, 819, 30631, 13, 51112, 51112, 821, 311, 445, 472, 2503, 13, 51168, 51224, 583, 382, 291, 352, 807, 264, 2445, 293, 382, 291, 818, 613, 441, 6828, 20560, 3413, 11, 436, 51480, 51480], "temperature": 0.0, "avg_logprob": -0.08774362393279574, "compression_ratio": 1.5080213903743316, "no_caption_prob": 1.4506419574900065e-05}, {"id": 777, "seek": 360240, "start": 3617.36, "end": 3618.48, "text": " There's just one history.", "tokens": [50364, 400, 370, 300, 311, 733, 295, 411, 341, 1108, 43341, 4489, 295, 5145, 257, 1785, 926, 689, 291, 787, 9495, 50768, 50768, 264, 2158, 11, 457, 1936, 456, 366, 572, 411, 37702, 819, 30631, 13, 51112, 51112, 821, 311, 445, 472, 2503, 13, 51168, 51224, 583, 382, 291, 352, 807, 264, 2445, 293, 382, 291, 818, 613, 441, 6828, 20560, 3413, 11, 436, 51480, 51480], "temperature": 0.0, "avg_logprob": -0.08774362393279574, "compression_ratio": 1.5080213903743316, "no_caption_prob": 1.4506419574900065e-05}, {"id": 778, "seek": 360240, "start": 3619.6, "end": 3624.7200000000003, "text": " But as you go through the function and as you call these L functions recursively, they", "tokens": [50364, 400, 370, 300, 311, 733, 295, 411, 341, 1108, 43341, 4489, 295, 5145, 257, 1785, 926, 689, 291, 787, 9495, 50768, 50768, 264, 2158, 11, 457, 1936, 456, 366, 572, 411, 37702, 819, 30631, 13, 51112, 51112, 821, 311, 445, 472, 2503, 13, 51168, 51224, 583, 382, 291, 352, 807, 264, 2445, 293, 382, 291, 818, 613, 441, 6828, 20560, 3413, 11, 436, 51480, 51480], "temperature": 0.0, "avg_logprob": -0.08774362393279574, "compression_ratio": 1.5080213903743316, "no_caption_prob": 1.4506419574900065e-05}, {"id": 779, "seek": 362472, "start": 3624.72, "end": 3632.8799999999997, "text": " are going to append to that state and in the end you end up with both the created value", "tokens": [50364, 366, 516, 281, 34116, 281, 300, 1785, 293, 294, 264, 917, 291, 917, 493, 365, 1293, 264, 2942, 2158, 50772, 50772, 295, 428, 2010, 293, 365, 264, 11568, 45, 38, 2503, 13, 50888, 50916, 407, 283, 3334, 4527, 307, 257, 1108, 345, 13, 50988, 51112, 865, 13, 51124, 51124, 467, 575, 364, 917, 13, 51184, 51184, 407, 2086, 13, 51208, 51344, 663, 311, 264, 7123, 11, 558, 30, 51404, 51432, 1779, 13, 51444, 51480, 400, 370, 11, 293, 370, 11, 558, 11, 321, 362, 11, 321, 362, 41674, 11, 4342, 11, 14511, 11, 439, 613, 721, 411, 4471, 11, 51852, 51852], "temperature": 0.0, "avg_logprob": -0.226919674178929, "compression_ratio": 1.5097087378640777, "no_caption_prob": 2.709751424845308e-05}, {"id": 780, "seek": 362472, "start": 3632.8799999999997, "end": 3635.2, "text": " of your type and with the PRNG history.", "tokens": [50364, 366, 516, 281, 34116, 281, 300, 1785, 293, 294, 264, 917, 291, 917, 493, 365, 1293, 264, 2942, 2158, 50772, 50772, 295, 428, 2010, 293, 365, 264, 11568, 45, 38, 2503, 13, 50888, 50916, 407, 283, 3334, 4527, 307, 257, 1108, 345, 13, 50988, 51112, 865, 13, 51124, 51124, 467, 575, 364, 917, 13, 51184, 51184, 407, 2086, 13, 51208, 51344, 663, 311, 264, 7123, 11, 558, 30, 51404, 51432, 1779, 13, 51444, 51480, 400, 370, 11, 293, 370, 11, 558, 11, 321, 362, 11, 321, 362, 41674, 11, 4342, 11, 14511, 11, 439, 613, 721, 411, 4471, 11, 51852, 51852], "temperature": 0.0, "avg_logprob": -0.226919674178929, "compression_ratio": 1.5097087378640777, "no_caption_prob": 2.709751424845308e-05}, {"id": 781, "seek": 362472, "start": 3635.7599999999998, "end": 3637.2, "text": " So fuzzer is a monad.", "tokens": [50364, 366, 516, 281, 34116, 281, 300, 1785, 293, 294, 264, 917, 291, 917, 493, 365, 1293, 264, 2942, 2158, 50772, 50772, 295, 428, 2010, 293, 365, 264, 11568, 45, 38, 2503, 13, 50888, 50916, 407, 283, 3334, 4527, 307, 257, 1108, 345, 13, 50988, 51112, 865, 13, 51124, 51124, 467, 575, 364, 917, 13, 51184, 51184, 407, 2086, 13, 51208, 51344, 663, 311, 264, 7123, 11, 558, 30, 51404, 51432, 1779, 13, 51444, 51480, 400, 370, 11, 293, 370, 11, 558, 11, 321, 362, 11, 321, 362, 41674, 11, 4342, 11, 14511, 11, 439, 613, 721, 411, 4471, 11, 51852, 51852], "temperature": 0.0, "avg_logprob": -0.226919674178929, "compression_ratio": 1.5097087378640777, "no_caption_prob": 2.709751424845308e-05}, {"id": 782, "seek": 362472, "start": 3639.68, "end": 3639.9199999999996, "text": " Yeah.", "tokens": [50364, 366, 516, 281, 34116, 281, 300, 1785, 293, 294, 264, 917, 291, 917, 493, 365, 1293, 264, 2942, 2158, 50772, 50772, 295, 428, 2010, 293, 365, 264, 11568, 45, 38, 2503, 13, 50888, 50916, 407, 283, 3334, 4527, 307, 257, 1108, 345, 13, 50988, 51112, 865, 13, 51124, 51124, 467, 575, 364, 917, 13, 51184, 51184, 407, 2086, 13, 51208, 51344, 663, 311, 264, 7123, 11, 558, 30, 51404, 51432, 1779, 13, 51444, 51480, 400, 370, 11, 293, 370, 11, 558, 11, 321, 362, 11, 321, 362, 41674, 11, 4342, 11, 14511, 11, 439, 613, 721, 411, 4471, 11, 51852, 51852], "temperature": 0.0, "avg_logprob": -0.226919674178929, "compression_ratio": 1.5097087378640777, "no_caption_prob": 2.709751424845308e-05}, {"id": 783, "seek": 362472, "start": 3639.9199999999996, "end": 3641.12, "text": " It has an end.", "tokens": [50364, 366, 516, 281, 34116, 281, 300, 1785, 293, 294, 264, 917, 291, 917, 493, 365, 1293, 264, 2942, 2158, 50772, 50772, 295, 428, 2010, 293, 365, 264, 11568, 45, 38, 2503, 13, 50888, 50916, 407, 283, 3334, 4527, 307, 257, 1108, 345, 13, 50988, 51112, 865, 13, 51124, 51124, 467, 575, 364, 917, 13, 51184, 51184, 407, 2086, 13, 51208, 51344, 663, 311, 264, 7123, 11, 558, 30, 51404, 51432, 1779, 13, 51444, 51480, 400, 370, 11, 293, 370, 11, 558, 11, 321, 362, 11, 321, 362, 41674, 11, 4342, 11, 14511, 11, 439, 613, 721, 411, 4471, 11, 51852, 51852], "temperature": 0.0, "avg_logprob": -0.226919674178929, "compression_ratio": 1.5097087378640777, "no_caption_prob": 2.709751424845308e-05}, {"id": 784, "seek": 362472, "start": 3641.12, "end": 3641.6, "text": " So yes.", "tokens": [50364, 366, 516, 281, 34116, 281, 300, 1785, 293, 294, 264, 917, 291, 917, 493, 365, 1293, 264, 2942, 2158, 50772, 50772, 295, 428, 2010, 293, 365, 264, 11568, 45, 38, 2503, 13, 50888, 50916, 407, 283, 3334, 4527, 307, 257, 1108, 345, 13, 50988, 51112, 865, 13, 51124, 51124, 467, 575, 364, 917, 13, 51184, 51184, 407, 2086, 13, 51208, 51344, 663, 311, 264, 7123, 11, 558, 30, 51404, 51432, 1779, 13, 51444, 51480, 400, 370, 11, 293, 370, 11, 558, 11, 321, 362, 11, 321, 362, 41674, 11, 4342, 11, 14511, 11, 439, 613, 721, 411, 4471, 11, 51852, 51852], "temperature": 0.0, "avg_logprob": -0.226919674178929, "compression_ratio": 1.5097087378640777, "no_caption_prob": 2.709751424845308e-05}, {"id": 785, "seek": 362472, "start": 3644.3199999999997, "end": 3645.52, "text": " That's the definition, right?", "tokens": [50364, 366, 516, 281, 34116, 281, 300, 1785, 293, 294, 264, 917, 291, 917, 493, 365, 1293, 264, 2942, 2158, 50772, 50772, 295, 428, 2010, 293, 365, 264, 11568, 45, 38, 2503, 13, 50888, 50916, 407, 283, 3334, 4527, 307, 257, 1108, 345, 13, 50988, 51112, 865, 13, 51124, 51124, 467, 575, 364, 917, 13, 51184, 51184, 407, 2086, 13, 51208, 51344, 663, 311, 264, 7123, 11, 558, 30, 51404, 51432, 1779, 13, 51444, 51480, 400, 370, 11, 293, 370, 11, 558, 11, 321, 362, 11, 321, 362, 41674, 11, 4342, 11, 14511, 11, 439, 613, 721, 411, 4471, 11, 51852, 51852], "temperature": 0.0, "avg_logprob": -0.226919674178929, "compression_ratio": 1.5097087378640777, "no_caption_prob": 2.709751424845308e-05}, {"id": 786, "seek": 362472, "start": 3646.08, "end": 3646.3199999999997, "text": " Right.", "tokens": [50364, 366, 516, 281, 34116, 281, 300, 1785, 293, 294, 264, 917, 291, 917, 493, 365, 1293, 264, 2942, 2158, 50772, 50772, 295, 428, 2010, 293, 365, 264, 11568, 45, 38, 2503, 13, 50888, 50916, 407, 283, 3334, 4527, 307, 257, 1108, 345, 13, 50988, 51112, 865, 13, 51124, 51124, 467, 575, 364, 917, 13, 51184, 51184, 407, 2086, 13, 51208, 51344, 663, 311, 264, 7123, 11, 558, 30, 51404, 51432, 1779, 13, 51444, 51480, 400, 370, 11, 293, 370, 11, 558, 11, 321, 362, 11, 321, 362, 41674, 11, 4342, 11, 14511, 11, 439, 613, 721, 411, 4471, 11, 51852, 51852], "temperature": 0.0, "avg_logprob": -0.226919674178929, "compression_ratio": 1.5097087378640777, "no_caption_prob": 2.709751424845308e-05}, {"id": 787, "seek": 362472, "start": 3647.04, "end": 3654.48, "text": " And so, and so, right, we have, we have integers, characters, lists, all these things like map,", "tokens": [50364, 366, 516, 281, 34116, 281, 300, 1785, 293, 294, 264, 917, 291, 917, 493, 365, 1293, 264, 2942, 2158, 50772, 50772, 295, 428, 2010, 293, 365, 264, 11568, 45, 38, 2503, 13, 50888, 50916, 407, 283, 3334, 4527, 307, 257, 1108, 345, 13, 50988, 51112, 865, 13, 51124, 51124, 467, 575, 364, 917, 13, 51184, 51184, 407, 2086, 13, 51208, 51344, 663, 311, 264, 7123, 11, 558, 30, 51404, 51432, 1779, 13, 51444, 51480, 400, 370, 11, 293, 370, 11, 558, 11, 321, 362, 11, 321, 362, 41674, 11, 4342, 11, 14511, 11, 439, 613, 721, 411, 4471, 11, 51852, 51852], "temperature": 0.0, "avg_logprob": -0.226919674178929, "compression_ratio": 1.5097087378640777, "no_caption_prob": 2.709751424845308e-05}, {"id": 788, "seek": 365448, "start": 3654.48, "end": 3658.08, "text": " map to, and then those can be done without the specific values.", "tokens": [50364, 4471, 281, 11, 293, 550, 729, 393, 312, 1096, 1553, 264, 2685, 4190, 13, 50544, 50544, 3950, 366, 445, 411, 636, 281, 10432, 729, 13, 50716, 50716, 400, 586, 300, 291, 362, 14511, 11, 291, 393, 360, 439, 3685, 295, 1507, 13, 50920, 50920, 509, 393, 360, 13985, 11, 597, 366, 445, 3410, 671, 445, 14511, 295, 4342, 13, 51132, 51160, 509, 393, 360, 6352, 11, 22352, 4889, 365, 264, 6608, 2445, 13, 51440, 51440, 1042, 11, 286, 528, 281, 584, 365, 257, 6608, 2445, 11, 457, 309, 311, 819, 13, 51608, 51608, 467, 311, 7642, 7614, 13, 51684, 51684, 509, 393, 360, 14511, 295, 1629, 4641, 293, 370, 322, 13, 51848, 51848], "temperature": 0.0, "avg_logprob": -0.06673639131628949, "compression_ratio": 1.78099173553719, "no_caption_prob": 6.706461135763675e-05}, {"id": 789, "seek": 365448, "start": 3658.08, "end": 3661.52, "text": " Those are just like way to combine those.", "tokens": [50364, 4471, 281, 11, 293, 550, 729, 393, 312, 1096, 1553, 264, 2685, 4190, 13, 50544, 50544, 3950, 366, 445, 411, 636, 281, 10432, 729, 13, 50716, 50716, 400, 586, 300, 291, 362, 14511, 11, 291, 393, 360, 439, 3685, 295, 1507, 13, 50920, 50920, 509, 393, 360, 13985, 11, 597, 366, 445, 3410, 671, 445, 14511, 295, 4342, 13, 51132, 51160, 509, 393, 360, 6352, 11, 22352, 4889, 365, 264, 6608, 2445, 13, 51440, 51440, 1042, 11, 286, 528, 281, 584, 365, 257, 6608, 2445, 11, 457, 309, 311, 819, 13, 51608, 51608, 467, 311, 7642, 7614, 13, 51684, 51684, 509, 393, 360, 14511, 295, 1629, 4641, 293, 370, 322, 13, 51848, 51848], "temperature": 0.0, "avg_logprob": -0.06673639131628949, "compression_ratio": 1.78099173553719, "no_caption_prob": 6.706461135763675e-05}, {"id": 790, "seek": 365448, "start": 3661.52, "end": 3665.6, "text": " And now that you have lists, you can do all kinds of stuff.", "tokens": [50364, 4471, 281, 11, 293, 550, 729, 393, 312, 1096, 1553, 264, 2685, 4190, 13, 50544, 50544, 3950, 366, 445, 411, 636, 281, 10432, 729, 13, 50716, 50716, 400, 586, 300, 291, 362, 14511, 11, 291, 393, 360, 439, 3685, 295, 1507, 13, 50920, 50920, 509, 393, 360, 13985, 11, 597, 366, 445, 3410, 671, 445, 14511, 295, 4342, 13, 51132, 51160, 509, 393, 360, 6352, 11, 22352, 4889, 365, 264, 6608, 2445, 13, 51440, 51440, 1042, 11, 286, 528, 281, 584, 365, 257, 6608, 2445, 11, 457, 309, 311, 819, 13, 51608, 51608, 467, 311, 7642, 7614, 13, 51684, 51684, 509, 393, 360, 14511, 295, 1629, 4641, 293, 370, 322, 13, 51848, 51848], "temperature": 0.0, "avg_logprob": -0.06673639131628949, "compression_ratio": 1.78099173553719, "no_caption_prob": 6.706461135763675e-05}, {"id": 791, "seek": 365448, "start": 3665.6, "end": 3669.84, "text": " You can do strings, which are just conceptually just lists of characters.", "tokens": [50364, 4471, 281, 11, 293, 550, 729, 393, 312, 1096, 1553, 264, 2685, 4190, 13, 50544, 50544, 3950, 366, 445, 411, 636, 281, 10432, 729, 13, 50716, 50716, 400, 586, 300, 291, 362, 14511, 11, 291, 393, 360, 439, 3685, 295, 1507, 13, 50920, 50920, 509, 393, 360, 13985, 11, 597, 366, 445, 3410, 671, 445, 14511, 295, 4342, 13, 51132, 51160, 509, 393, 360, 6352, 11, 22352, 4889, 365, 264, 6608, 2445, 13, 51440, 51440, 1042, 11, 286, 528, 281, 584, 365, 257, 6608, 2445, 11, 457, 309, 311, 819, 13, 51608, 51608, 467, 311, 7642, 7614, 13, 51684, 51684, 509, 393, 360, 14511, 295, 1629, 4641, 293, 370, 322, 13, 51848, 51848], "temperature": 0.0, "avg_logprob": -0.06673639131628949, "compression_ratio": 1.78099173553719, "no_caption_prob": 6.706461135763675e-05}, {"id": 792, "seek": 365448, "start": 3670.4, "end": 3676.0, "text": " You can do sets, dictionaries with the filter function.", "tokens": [50364, 4471, 281, 11, 293, 550, 729, 393, 312, 1096, 1553, 264, 2685, 4190, 13, 50544, 50544, 3950, 366, 445, 411, 636, 281, 10432, 729, 13, 50716, 50716, 400, 586, 300, 291, 362, 14511, 11, 291, 393, 360, 439, 3685, 295, 1507, 13, 50920, 50920, 509, 393, 360, 13985, 11, 597, 366, 445, 3410, 671, 445, 14511, 295, 4342, 13, 51132, 51160, 509, 393, 360, 6352, 11, 22352, 4889, 365, 264, 6608, 2445, 13, 51440, 51440, 1042, 11, 286, 528, 281, 584, 365, 257, 6608, 2445, 11, 457, 309, 311, 819, 13, 51608, 51608, 467, 311, 7642, 7614, 13, 51684, 51684, 509, 393, 360, 14511, 295, 1629, 4641, 293, 370, 322, 13, 51848, 51848], "temperature": 0.0, "avg_logprob": -0.06673639131628949, "compression_ratio": 1.78099173553719, "no_caption_prob": 6.706461135763675e-05}, {"id": 793, "seek": 365448, "start": 3676.0, "end": 3679.36, "text": " Well, I want to say with a filter function, but it's different.", "tokens": [50364, 4471, 281, 11, 293, 550, 729, 393, 312, 1096, 1553, 264, 2685, 4190, 13, 50544, 50544, 3950, 366, 445, 411, 636, 281, 10432, 729, 13, 50716, 50716, 400, 586, 300, 291, 362, 14511, 11, 291, 393, 360, 439, 3685, 295, 1507, 13, 50920, 50920, 509, 393, 360, 13985, 11, 597, 366, 445, 3410, 671, 445, 14511, 295, 4342, 13, 51132, 51160, 509, 393, 360, 6352, 11, 22352, 4889, 365, 264, 6608, 2445, 13, 51440, 51440, 1042, 11, 286, 528, 281, 584, 365, 257, 6608, 2445, 11, 457, 309, 311, 819, 13, 51608, 51608, 467, 311, 7642, 7614, 13, 51684, 51684, 509, 393, 360, 14511, 295, 1629, 4641, 293, 370, 322, 13, 51848, 51848], "temperature": 0.0, "avg_logprob": -0.06673639131628949, "compression_ratio": 1.78099173553719, "no_caption_prob": 6.706461135763675e-05}, {"id": 794, "seek": 365448, "start": 3679.36, "end": 3680.88, "text": " It's defined differently.", "tokens": [50364, 4471, 281, 11, 293, 550, 729, 393, 312, 1096, 1553, 264, 2685, 4190, 13, 50544, 50544, 3950, 366, 445, 411, 636, 281, 10432, 729, 13, 50716, 50716, 400, 586, 300, 291, 362, 14511, 11, 291, 393, 360, 439, 3685, 295, 1507, 13, 50920, 50920, 509, 393, 360, 13985, 11, 597, 366, 445, 3410, 671, 445, 14511, 295, 4342, 13, 51132, 51160, 509, 393, 360, 6352, 11, 22352, 4889, 365, 264, 6608, 2445, 13, 51440, 51440, 1042, 11, 286, 528, 281, 584, 365, 257, 6608, 2445, 11, 457, 309, 311, 819, 13, 51608, 51608, 467, 311, 7642, 7614, 13, 51684, 51684, 509, 393, 360, 14511, 295, 1629, 4641, 293, 370, 322, 13, 51848, 51848], "temperature": 0.0, "avg_logprob": -0.06673639131628949, "compression_ratio": 1.78099173553719, "no_caption_prob": 6.706461135763675e-05}, {"id": 795, "seek": 365448, "start": 3680.88, "end": 3684.16, "text": " You can do lists of certain length and so on.", "tokens": [50364, 4471, 281, 11, 293, 550, 729, 393, 312, 1096, 1553, 264, 2685, 4190, 13, 50544, 50544, 3950, 366, 445, 411, 636, 281, 10432, 729, 13, 50716, 50716, 400, 586, 300, 291, 362, 14511, 11, 291, 393, 360, 439, 3685, 295, 1507, 13, 50920, 50920, 509, 393, 360, 13985, 11, 597, 366, 445, 3410, 671, 445, 14511, 295, 4342, 13, 51132, 51160, 509, 393, 360, 6352, 11, 22352, 4889, 365, 264, 6608, 2445, 13, 51440, 51440, 1042, 11, 286, 528, 281, 584, 365, 257, 6608, 2445, 11, 457, 309, 311, 819, 13, 51608, 51608, 467, 311, 7642, 7614, 13, 51684, 51684, 509, 393, 360, 14511, 295, 1629, 4641, 293, 370, 322, 13, 51848, 51848], "temperature": 0.0, "avg_logprob": -0.06673639131628949, "compression_ratio": 1.78099173553719, "no_caption_prob": 6.706461135763675e-05}, {"id": 796, "seek": 368416, "start": 3684.16, "end": 3687.3599999999997, "text": " That's actually pretty, pretty smart.", "tokens": [50364, 663, 311, 767, 1238, 11, 1238, 4069, 13, 50524, 50552, 492, 362, 341, 11, 341, 7929, 257, 11464, 283, 3334, 4527, 300, 2709, 291, 472, 365, 1629, 8482, 13, 50960, 50960, 407, 291, 976, 309, 257, 15706, 13, 51036, 51036, 400, 370, 2171, 613, 14511, 295, 1629, 4641, 283, 16740, 433, 11, 498, 436, 536, 436, 362, 1547, 1507, 11, 51436, 51464, 436, 486, 584, 11, 1392, 11, 264, 958, 7929, 295, 257, 11464, 486, 312, 365, 8482, 4018, 11, 558, 30, 51744, 51744], "temperature": 0.0, "avg_logprob": -0.08686129991398302, "compression_ratio": 1.6030150753768844, "no_caption_prob": 1.426209564669989e-05}, {"id": 797, "seek": 368416, "start": 3687.92, "end": 3696.08, "text": " We have this, this flip a coin fuzzer that gives you one with certain probability.", "tokens": [50364, 663, 311, 767, 1238, 11, 1238, 4069, 13, 50524, 50552, 492, 362, 341, 11, 341, 7929, 257, 11464, 283, 3334, 4527, 300, 2709, 291, 472, 365, 1629, 8482, 13, 50960, 50960, 407, 291, 976, 309, 257, 15706, 13, 51036, 51036, 400, 370, 2171, 613, 14511, 295, 1629, 4641, 283, 16740, 433, 11, 498, 436, 536, 436, 362, 1547, 1507, 11, 51436, 51464, 436, 486, 584, 11, 1392, 11, 264, 958, 7929, 295, 257, 11464, 486, 312, 365, 8482, 4018, 11, 558, 30, 51744, 51744], "temperature": 0.0, "avg_logprob": -0.08686129991398302, "compression_ratio": 1.6030150753768844, "no_caption_prob": 1.426209564669989e-05}, {"id": 798, "seek": 368416, "start": 3696.08, "end": 3697.6, "text": " So you give it a float.", "tokens": [50364, 663, 311, 767, 1238, 11, 1238, 4069, 13, 50524, 50552, 492, 362, 341, 11, 341, 7929, 257, 11464, 283, 3334, 4527, 300, 2709, 291, 472, 365, 1629, 8482, 13, 50960, 50960, 407, 291, 976, 309, 257, 15706, 13, 51036, 51036, 400, 370, 2171, 613, 14511, 295, 1629, 4641, 283, 16740, 433, 11, 498, 436, 536, 436, 362, 1547, 1507, 11, 51436, 51464, 436, 486, 584, 11, 1392, 11, 264, 958, 7929, 295, 257, 11464, 486, 312, 365, 8482, 4018, 11, 558, 30, 51744, 51744], "temperature": 0.0, "avg_logprob": -0.08686129991398302, "compression_ratio": 1.6030150753768844, "no_caption_prob": 1.426209564669989e-05}, {"id": 799, "seek": 368416, "start": 3697.6, "end": 3705.6, "text": " And so sometimes these lists of certain length fuzzers, if they see they have enough stuff,", "tokens": [50364, 663, 311, 767, 1238, 11, 1238, 4069, 13, 50524, 50552, 492, 362, 341, 11, 341, 7929, 257, 11464, 283, 3334, 4527, 300, 2709, 291, 472, 365, 1629, 8482, 13, 50960, 50960, 407, 291, 976, 309, 257, 15706, 13, 51036, 51036, 400, 370, 2171, 613, 14511, 295, 1629, 4641, 283, 16740, 433, 11, 498, 436, 536, 436, 362, 1547, 1507, 11, 51436, 51464, 436, 486, 584, 11, 1392, 11, 264, 958, 7929, 295, 257, 11464, 486, 312, 365, 8482, 4018, 11, 558, 30, 51744, 51744], "temperature": 0.0, "avg_logprob": -0.08686129991398302, "compression_ratio": 1.6030150753768844, "no_caption_prob": 1.426209564669989e-05}, {"id": 800, "seek": 368416, "start": 3706.16, "end": 3711.7599999999998, "text": " they will say, okay, the next flip of a coin will be with probability zero, right?", "tokens": [50364, 663, 311, 767, 1238, 11, 1238, 4069, 13, 50524, 50552, 492, 362, 341, 11, 341, 7929, 257, 11464, 283, 3334, 4527, 300, 2709, 291, 472, 365, 1629, 8482, 13, 50960, 50960, 407, 291, 976, 309, 257, 15706, 13, 51036, 51036, 400, 370, 2171, 613, 14511, 295, 1629, 4641, 283, 16740, 433, 11, 498, 436, 536, 436, 362, 1547, 1507, 11, 51436, 51464, 436, 486, 584, 11, 1392, 11, 264, 958, 7929, 295, 257, 11464, 486, 312, 365, 8482, 4018, 11, 558, 30, 51744, 51744], "temperature": 0.0, "avg_logprob": -0.08686129991398302, "compression_ratio": 1.6030150753768844, "no_caption_prob": 1.426209564669989e-05}, {"id": 801, "seek": 371176, "start": 3711.76, "end": 3717.2000000000003, "text": " And so it will, it will not generate stuff in advance and then just like throw it out.", "tokens": [50364, 400, 370, 309, 486, 11, 309, 486, 406, 8460, 1507, 294, 7295, 293, 550, 445, 411, 3507, 309, 484, 13, 50636, 50636, 467, 486, 445, 411, 1590, 11, 411, 286, 478, 2902, 291, 341, 28035, 11464, 13, 50820, 50820, 400, 370, 456, 307, 11, 456, 366, 11733, 411, 300, 11, 457, 309, 1985, 484, 1238, 731, 293, 309, 311, 439, 51164, 51164, 1238, 11, 1238, 26941, 293, 16252, 13, 51344, 51372, 821, 311, 472, 283, 3334, 4527, 300, 307, 534, 11, 534, 11, 534, 11, 534, 3997, 13, 51680, 51680], "temperature": 0.0, "avg_logprob": -0.1083569215691608, "compression_ratio": 1.691542288557214, "no_caption_prob": 6.492184184025973e-05}, {"id": 802, "seek": 371176, "start": 3717.2000000000003, "end": 3720.88, "text": " It will just like stop, like I'm giving you this biased coin.", "tokens": [50364, 400, 370, 309, 486, 11, 309, 486, 406, 8460, 1507, 294, 7295, 293, 550, 445, 411, 3507, 309, 484, 13, 50636, 50636, 467, 486, 445, 411, 1590, 11, 411, 286, 478, 2902, 291, 341, 28035, 11464, 13, 50820, 50820, 400, 370, 456, 307, 11, 456, 366, 11733, 411, 300, 11, 457, 309, 1985, 484, 1238, 731, 293, 309, 311, 439, 51164, 51164, 1238, 11, 1238, 26941, 293, 16252, 13, 51344, 51372, 821, 311, 472, 283, 3334, 4527, 300, 307, 534, 11, 534, 11, 534, 11, 534, 3997, 13, 51680, 51680], "temperature": 0.0, "avg_logprob": -0.1083569215691608, "compression_ratio": 1.691542288557214, "no_caption_prob": 6.492184184025973e-05}, {"id": 803, "seek": 371176, "start": 3720.88, "end": 3727.76, "text": " And so there is, there are tricks like that, but it works out pretty well and it's all", "tokens": [50364, 400, 370, 309, 486, 11, 309, 486, 406, 8460, 1507, 294, 7295, 293, 550, 445, 411, 3507, 309, 484, 13, 50636, 50636, 467, 486, 445, 411, 1590, 11, 411, 286, 478, 2902, 291, 341, 28035, 11464, 13, 50820, 50820, 400, 370, 456, 307, 11, 456, 366, 11733, 411, 300, 11, 457, 309, 1985, 484, 1238, 731, 293, 309, 311, 439, 51164, 51164, 1238, 11, 1238, 26941, 293, 16252, 13, 51344, 51372, 821, 311, 472, 283, 3334, 4527, 300, 307, 534, 11, 534, 11, 534, 11, 534, 3997, 13, 51680, 51680], "temperature": 0.0, "avg_logprob": -0.1083569215691608, "compression_ratio": 1.691542288557214, "no_caption_prob": 6.492184184025973e-05}, {"id": 804, "seek": 371176, "start": 3727.76, "end": 3731.36, "text": " pretty, pretty optimized and optimal.", "tokens": [50364, 400, 370, 309, 486, 11, 309, 486, 406, 8460, 1507, 294, 7295, 293, 550, 445, 411, 3507, 309, 484, 13, 50636, 50636, 467, 486, 445, 411, 1590, 11, 411, 286, 478, 2902, 291, 341, 28035, 11464, 13, 50820, 50820, 400, 370, 456, 307, 11, 456, 366, 11733, 411, 300, 11, 457, 309, 1985, 484, 1238, 731, 293, 309, 311, 439, 51164, 51164, 1238, 11, 1238, 26941, 293, 16252, 13, 51344, 51372, 821, 311, 472, 283, 3334, 4527, 300, 307, 534, 11, 534, 11, 534, 11, 534, 3997, 13, 51680, 51680], "temperature": 0.0, "avg_logprob": -0.1083569215691608, "compression_ratio": 1.691542288557214, "no_caption_prob": 6.492184184025973e-05}, {"id": 805, "seek": 371176, "start": 3731.92, "end": 3738.0800000000004, "text": " There's one fuzzer that is really, really, really, really complex.", "tokens": [50364, 400, 370, 309, 486, 11, 309, 486, 406, 8460, 1507, 294, 7295, 293, 550, 445, 411, 3507, 309, 484, 13, 50636, 50636, 467, 486, 445, 411, 1590, 11, 411, 286, 478, 2902, 291, 341, 28035, 11464, 13, 50820, 50820, 400, 370, 456, 307, 11, 456, 366, 11733, 411, 300, 11, 457, 309, 1985, 484, 1238, 731, 293, 309, 311, 439, 51164, 51164, 1238, 11, 1238, 26941, 293, 16252, 13, 51344, 51372, 821, 311, 472, 283, 3334, 4527, 300, 307, 534, 11, 534, 11, 534, 11, 534, 3997, 13, 51680, 51680], "temperature": 0.0, "avg_logprob": -0.1083569215691608, "compression_ratio": 1.691542288557214, "no_caption_prob": 6.492184184025973e-05}, {"id": 806, "seek": 373808, "start": 3738.08, "end": 3744.08, "text": " And that's for floats because we can't really use a float generator, right?", "tokens": [50364, 400, 300, 311, 337, 37878, 570, 321, 393, 380, 534, 764, 257, 15706, 19265, 11, 558, 30, 50664, 50664, 492, 393, 787, 764, 38662, 337, 41674, 13, 50796, 50828, 400, 321, 366, 7547, 538, 264, 6405, 17291, 11, 597, 307, 341, 411, 4707, 2361, 10644, 51224, 51224, 6405, 337, 15329, 11, 597, 1409, 365, 341, 718, 311, 584, 6920, 41684, 3109, 13, 51608, 51608], "temperature": 0.0, "avg_logprob": -0.11368471203428326, "compression_ratio": 1.5621621621621622, "no_caption_prob": 8.396126759180333e-06}, {"id": 807, "seek": 373808, "start": 3744.08, "end": 3746.72, "text": " We can only use generators for integers.", "tokens": [50364, 400, 300, 311, 337, 37878, 570, 321, 393, 380, 534, 764, 257, 15706, 19265, 11, 558, 30, 50664, 50664, 492, 393, 787, 764, 38662, 337, 41674, 13, 50796, 50828, 400, 321, 366, 7547, 538, 264, 6405, 17291, 11, 597, 307, 341, 411, 4707, 2361, 10644, 51224, 51224, 6405, 337, 15329, 11, 597, 1409, 365, 341, 718, 311, 584, 6920, 41684, 3109, 13, 51608, 51608], "temperature": 0.0, "avg_logprob": -0.11368471203428326, "compression_ratio": 1.5621621621621622, "no_caption_prob": 8.396126759180333e-06}, {"id": 808, "seek": 373808, "start": 3747.36, "end": 3755.2799999999997, "text": " And we are inspired by the library hypothesis, which is this like property based distinct", "tokens": [50364, 400, 300, 311, 337, 37878, 570, 321, 393, 380, 534, 764, 257, 15706, 19265, 11, 558, 30, 50664, 50664, 492, 393, 787, 764, 38662, 337, 41674, 13, 50796, 50828, 400, 321, 366, 7547, 538, 264, 6405, 17291, 11, 597, 307, 341, 411, 4707, 2361, 10644, 51224, 51224, 6405, 337, 15329, 11, 597, 1409, 365, 341, 718, 311, 584, 6920, 41684, 3109, 13, 51608, 51608], "temperature": 0.0, "avg_logprob": -0.11368471203428326, "compression_ratio": 1.5621621621621622, "no_caption_prob": 8.396126759180333e-06}, {"id": 809, "seek": 373808, "start": 3755.2799999999997, "end": 3762.96, "text": " library for Python, which started with this let's say internal shrinking approach.", "tokens": [50364, 400, 300, 311, 337, 37878, 570, 321, 393, 380, 534, 764, 257, 15706, 19265, 11, 558, 30, 50664, 50664, 492, 393, 787, 764, 38662, 337, 41674, 13, 50796, 50828, 400, 321, 366, 7547, 538, 264, 6405, 17291, 11, 597, 307, 341, 411, 4707, 2361, 10644, 51224, 51224, 6405, 337, 15329, 11, 597, 1409, 365, 341, 718, 311, 584, 6920, 41684, 3109, 13, 51608, 51608], "temperature": 0.0, "avg_logprob": -0.11368471203428326, "compression_ratio": 1.5621621621621622, "no_caption_prob": 8.396126759180333e-06}, {"id": 810, "seek": 376296, "start": 3762.96, "end": 3770.48, "text": " And they gave a lot of care to shrinking floats nicely.", "tokens": [50364, 400, 436, 2729, 257, 688, 295, 1127, 281, 41684, 37878, 9594, 13, 50740, 50740, 407, 11, 291, 458, 11, 365, 264, 2190, 441, 45, 1500, 11, 291, 727, 362, 264, 1500, 300, 18199, 337, 512, 733, 51064, 51064, 295, 15706, 13, 51100, 51100, 400, 295, 1164, 309, 486, 8460, 512, 4974, 1230, 294, 264, 411, 1266, 6803, 293, 370, 322, 365, 51448, 51448, 439, 613, 819, 411, 27011, 13, 51536, 51536, 400, 309, 486, 23060, 760, 281, 512, 534, 517, 2538, 712, 24922, 958, 281, 4018, 11, 558, 30, 51800, 51800], "temperature": 0.0, "avg_logprob": -0.10135415805283413, "compression_ratio": 1.5919282511210762, "no_caption_prob": 7.40497671358753e-06}, {"id": 811, "seek": 376296, "start": 3770.48, "end": 3776.96, "text": " So, you know, with the current LN test, you could have the test that fails for some kind", "tokens": [50364, 400, 436, 2729, 257, 688, 295, 1127, 281, 41684, 37878, 9594, 13, 50740, 50740, 407, 11, 291, 458, 11, 365, 264, 2190, 441, 45, 1500, 11, 291, 727, 362, 264, 1500, 300, 18199, 337, 512, 733, 51064, 51064, 295, 15706, 13, 51100, 51100, 400, 295, 1164, 309, 486, 8460, 512, 4974, 1230, 294, 264, 411, 1266, 6803, 293, 370, 322, 365, 51448, 51448, 439, 613, 819, 411, 27011, 13, 51536, 51536, 400, 309, 486, 23060, 760, 281, 512, 534, 517, 2538, 712, 24922, 958, 281, 4018, 11, 558, 30, 51800, 51800], "temperature": 0.0, "avg_logprob": -0.10135415805283413, "compression_ratio": 1.5919282511210762, "no_caption_prob": 7.40497671358753e-06}, {"id": 812, "seek": 376296, "start": 3776.96, "end": 3777.68, "text": " of float.", "tokens": [50364, 400, 436, 2729, 257, 688, 295, 1127, 281, 41684, 37878, 9594, 13, 50740, 50740, 407, 11, 291, 458, 11, 365, 264, 2190, 441, 45, 1500, 11, 291, 727, 362, 264, 1500, 300, 18199, 337, 512, 733, 51064, 51064, 295, 15706, 13, 51100, 51100, 400, 295, 1164, 309, 486, 8460, 512, 4974, 1230, 294, 264, 411, 1266, 6803, 293, 370, 322, 365, 51448, 51448, 439, 613, 819, 411, 27011, 13, 51536, 51536, 400, 309, 486, 23060, 760, 281, 512, 534, 517, 2538, 712, 24922, 958, 281, 4018, 11, 558, 30, 51800, 51800], "temperature": 0.0, "avg_logprob": -0.10135415805283413, "compression_ratio": 1.5919282511210762, "no_caption_prob": 7.40497671358753e-06}, {"id": 813, "seek": 376296, "start": 3777.68, "end": 3784.64, "text": " And of course it will generate some random number in the like 10 millions and so on with", "tokens": [50364, 400, 436, 2729, 257, 688, 295, 1127, 281, 41684, 37878, 9594, 13, 50740, 50740, 407, 11, 291, 458, 11, 365, 264, 2190, 441, 45, 1500, 11, 291, 727, 362, 264, 1500, 300, 18199, 337, 512, 733, 51064, 51064, 295, 15706, 13, 51100, 51100, 400, 295, 1164, 309, 486, 8460, 512, 4974, 1230, 294, 264, 411, 1266, 6803, 293, 370, 322, 365, 51448, 51448, 439, 613, 819, 411, 27011, 13, 51536, 51536, 400, 309, 486, 23060, 760, 281, 512, 534, 517, 2538, 712, 24922, 958, 281, 4018, 11, 558, 30, 51800, 51800], "temperature": 0.0, "avg_logprob": -0.10135415805283413, "compression_ratio": 1.5919282511210762, "no_caption_prob": 7.40497671358753e-06}, {"id": 814, "seek": 376296, "start": 3784.64, "end": 3786.4, "text": " all these different like digits.", "tokens": [50364, 400, 436, 2729, 257, 688, 295, 1127, 281, 41684, 37878, 9594, 13, 50740, 50740, 407, 11, 291, 458, 11, 365, 264, 2190, 441, 45, 1500, 11, 291, 727, 362, 264, 1500, 300, 18199, 337, 512, 733, 51064, 51064, 295, 15706, 13, 51100, 51100, 400, 295, 1164, 309, 486, 8460, 512, 4974, 1230, 294, 264, 411, 1266, 6803, 293, 370, 322, 365, 51448, 51448, 439, 613, 819, 411, 27011, 13, 51536, 51536, 400, 309, 486, 23060, 760, 281, 512, 534, 517, 2538, 712, 24922, 958, 281, 4018, 11, 558, 30, 51800, 51800], "temperature": 0.0, "avg_logprob": -0.10135415805283413, "compression_ratio": 1.5919282511210762, "no_caption_prob": 7.40497671358753e-06}, {"id": 815, "seek": 376296, "start": 3786.4, "end": 3791.68, "text": " And it will shrink down to some really unreadable integer next to zero, right?", "tokens": [50364, 400, 436, 2729, 257, 688, 295, 1127, 281, 41684, 37878, 9594, 13, 50740, 50740, 407, 11, 291, 458, 11, 365, 264, 2190, 441, 45, 1500, 11, 291, 727, 362, 264, 1500, 300, 18199, 337, 512, 733, 51064, 51064, 295, 15706, 13, 51100, 51100, 400, 295, 1164, 309, 486, 8460, 512, 4974, 1230, 294, 264, 411, 1266, 6803, 293, 370, 322, 365, 51448, 51448, 439, 613, 819, 411, 27011, 13, 51536, 51536, 400, 309, 486, 23060, 760, 281, 512, 534, 517, 2538, 712, 24922, 958, 281, 4018, 11, 558, 30, 51800, 51800], "temperature": 0.0, "avg_logprob": -0.10135415805283413, "compression_ratio": 1.5919282511210762, "no_caption_prob": 7.40497671358753e-06}, {"id": 816, "seek": 379168, "start": 3791.68, "end": 3797.44, "text": " So 0.00008135, whatever.", "tokens": [50364, 407, 1958, 13, 33202, 23, 7668, 20, 11, 2035, 13, 50652, 50652, 400, 341, 307, 406, 588, 1481, 570, 498, 264, 1500, 576, 3061, 365, 4018, 420, 365, 472, 11, 983, 406, 50980, 50980, 976, 291, 300, 11, 558, 30, 51024, 51076, 467, 576, 312, 445, 709, 22842, 337, 264, 4195, 13, 51220, 51220, 400, 370, 321, 393, 380, 534, 360, 512, 733, 295, 4282, 689, 321, 747, 732, 41674, 293, 9845, 11, 360, 51592, 51592], "temperature": 0.0, "avg_logprob": -0.1007072375370906, "compression_ratio": 1.398936170212766, "no_caption_prob": 1.9520985006238334e-05}, {"id": 817, "seek": 379168, "start": 3797.44, "end": 3804.0, "text": " And this is not very nice because if the test would fail with zero or with one, why not", "tokens": [50364, 407, 1958, 13, 33202, 23, 7668, 20, 11, 2035, 13, 50652, 50652, 400, 341, 307, 406, 588, 1481, 570, 498, 264, 1500, 576, 3061, 365, 4018, 420, 365, 472, 11, 983, 406, 50980, 50980, 976, 291, 300, 11, 558, 30, 51024, 51076, 467, 576, 312, 445, 709, 22842, 337, 264, 4195, 13, 51220, 51220, 400, 370, 321, 393, 380, 534, 360, 512, 733, 295, 4282, 689, 321, 747, 732, 41674, 293, 9845, 11, 360, 51592, 51592], "temperature": 0.0, "avg_logprob": -0.1007072375370906, "compression_ratio": 1.398936170212766, "no_caption_prob": 1.9520985006238334e-05}, {"id": 818, "seek": 379168, "start": 3804.0, "end": 3804.8799999999997, "text": " give you that, right?", "tokens": [50364, 407, 1958, 13, 33202, 23, 7668, 20, 11, 2035, 13, 50652, 50652, 400, 341, 307, 406, 588, 1481, 570, 498, 264, 1500, 576, 3061, 365, 4018, 420, 365, 472, 11, 983, 406, 50980, 50980, 976, 291, 300, 11, 558, 30, 51024, 51076, 467, 576, 312, 445, 709, 22842, 337, 264, 4195, 13, 51220, 51220, 400, 370, 321, 393, 380, 534, 360, 512, 733, 295, 4282, 689, 321, 747, 732, 41674, 293, 9845, 11, 360, 51592, 51592], "temperature": 0.0, "avg_logprob": -0.1007072375370906, "compression_ratio": 1.398936170212766, "no_caption_prob": 1.9520985006238334e-05}, {"id": 819, "seek": 379168, "start": 3805.9199999999996, "end": 3808.7999999999997, "text": " It would be just much nicer for the user.", "tokens": [50364, 407, 1958, 13, 33202, 23, 7668, 20, 11, 2035, 13, 50652, 50652, 400, 341, 307, 406, 588, 1481, 570, 498, 264, 1500, 576, 3061, 365, 4018, 420, 365, 472, 11, 983, 406, 50980, 50980, 976, 291, 300, 11, 558, 30, 51024, 51076, 467, 576, 312, 445, 709, 22842, 337, 264, 4195, 13, 51220, 51220, 400, 370, 321, 393, 380, 534, 360, 512, 733, 295, 4282, 689, 321, 747, 732, 41674, 293, 9845, 11, 360, 51592, 51592], "temperature": 0.0, "avg_logprob": -0.1007072375370906, "compression_ratio": 1.398936170212766, "no_caption_prob": 1.9520985006238334e-05}, {"id": 820, "seek": 379168, "start": 3808.7999999999997, "end": 3816.24, "text": " And so we can't really do some kind of trick where we take two integers and divide, do", "tokens": [50364, 407, 1958, 13, 33202, 23, 7668, 20, 11, 2035, 13, 50652, 50652, 400, 341, 307, 406, 588, 1481, 570, 498, 264, 1500, 576, 3061, 365, 4018, 420, 365, 472, 11, 983, 406, 50980, 50980, 976, 291, 300, 11, 558, 30, 51024, 51076, 467, 576, 312, 445, 709, 22842, 337, 264, 4195, 13, 51220, 51220, 400, 370, 321, 393, 380, 534, 360, 512, 733, 295, 4282, 689, 321, 747, 732, 41674, 293, 9845, 11, 360, 51592, 51592], "temperature": 0.0, "avg_logprob": -0.1007072375370906, "compression_ratio": 1.398936170212766, "no_caption_prob": 1.9520985006238334e-05}, {"id": 821, "seek": 381624, "start": 3816.24, "end": 3823.3599999999997, "text": " some bit magic and just divide things by the maximal float and give you flows in the uniform", "tokens": [50364, 512, 857, 5585, 293, 445, 9845, 721, 538, 264, 49336, 15706, 293, 976, 291, 12867, 294, 264, 9452, 50720, 50720, 7316, 13, 50760, 50760, 821, 486, 312, 257, 534, 1858, 636, 484, 11, 257, 534, 1858, 636, 281, 8460, 37878, 11, 457, 309, 1177, 380, 51064, 51064, 23060, 731, 11, 558, 30, 51124, 51124, 400, 370, 437, 17291, 630, 293, 437, 441, 45, 1500, 586, 775, 307, 321, 319, 4687, 264, 9239, 294, 264, 286, 7258, 36, 51668, 51668], "temperature": 0.0, "avg_logprob": -0.0900416315337758, "compression_ratio": 1.5124378109452736, "no_caption_prob": 1.4734711839992087e-05}, {"id": 822, "seek": 381624, "start": 3823.3599999999997, "end": 3824.16, "text": " distribution.", "tokens": [50364, 512, 857, 5585, 293, 445, 9845, 721, 538, 264, 49336, 15706, 293, 976, 291, 12867, 294, 264, 9452, 50720, 50720, 7316, 13, 50760, 50760, 821, 486, 312, 257, 534, 1858, 636, 484, 11, 257, 534, 1858, 636, 281, 8460, 37878, 11, 457, 309, 1177, 380, 51064, 51064, 23060, 731, 11, 558, 30, 51124, 51124, 400, 370, 437, 17291, 630, 293, 437, 441, 45, 1500, 586, 775, 307, 321, 319, 4687, 264, 9239, 294, 264, 286, 7258, 36, 51668, 51668], "temperature": 0.0, "avg_logprob": -0.0900416315337758, "compression_ratio": 1.5124378109452736, "no_caption_prob": 1.4734711839992087e-05}, {"id": 823, "seek": 381624, "start": 3824.16, "end": 3830.24, "text": " There will be a really easy way out, a really easy way to generate floats, but it doesn't", "tokens": [50364, 512, 857, 5585, 293, 445, 9845, 721, 538, 264, 49336, 15706, 293, 976, 291, 12867, 294, 264, 9452, 50720, 50720, 7316, 13, 50760, 50760, 821, 486, 312, 257, 534, 1858, 636, 484, 11, 257, 534, 1858, 636, 281, 8460, 37878, 11, 457, 309, 1177, 380, 51064, 51064, 23060, 731, 11, 558, 30, 51124, 51124, 400, 370, 437, 17291, 630, 293, 437, 441, 45, 1500, 586, 775, 307, 321, 319, 4687, 264, 9239, 294, 264, 286, 7258, 36, 51668, 51668], "temperature": 0.0, "avg_logprob": -0.0900416315337758, "compression_ratio": 1.5124378109452736, "no_caption_prob": 1.4734711839992087e-05}, {"id": 824, "seek": 381624, "start": 3830.24, "end": 3831.4399999999996, "text": " shrink well, right?", "tokens": [50364, 512, 857, 5585, 293, 445, 9845, 721, 538, 264, 49336, 15706, 293, 976, 291, 12867, 294, 264, 9452, 50720, 50720, 7316, 13, 50760, 50760, 821, 486, 312, 257, 534, 1858, 636, 484, 11, 257, 534, 1858, 636, 281, 8460, 37878, 11, 457, 309, 1177, 380, 51064, 51064, 23060, 731, 11, 558, 30, 51124, 51124, 400, 370, 437, 17291, 630, 293, 437, 441, 45, 1500, 586, 775, 307, 321, 319, 4687, 264, 9239, 294, 264, 286, 7258, 36, 51668, 51668], "temperature": 0.0, "avg_logprob": -0.0900416315337758, "compression_ratio": 1.5124378109452736, "no_caption_prob": 1.4734711839992087e-05}, {"id": 825, "seek": 381624, "start": 3831.4399999999996, "end": 3842.3199999999997, "text": " And so what hypothesis did and what LN test now does is we reorder the bits in the IEEE", "tokens": [50364, 512, 857, 5585, 293, 445, 9845, 721, 538, 264, 49336, 15706, 293, 976, 291, 12867, 294, 264, 9452, 50720, 50720, 7316, 13, 50760, 50760, 821, 486, 312, 257, 534, 1858, 636, 484, 11, 257, 534, 1858, 636, 281, 8460, 37878, 11, 457, 309, 1177, 380, 51064, 51064, 23060, 731, 11, 558, 30, 51124, 51124, 400, 370, 437, 17291, 630, 293, 437, 441, 45, 1500, 586, 775, 307, 321, 319, 4687, 264, 9239, 294, 264, 286, 7258, 36, 51668, 51668], "temperature": 0.0, "avg_logprob": -0.0900416315337758, "compression_ratio": 1.5124378109452736, "no_caption_prob": 1.4734711839992087e-05}, {"id": 826, "seek": 384232, "start": 3842.32, "end": 3849.2000000000003, "text": " 754 float representation to kind of follow the rule from the shrinkers, right?", "tokens": [50364, 9562, 19, 15706, 10290, 281, 733, 295, 1524, 264, 4978, 490, 264, 23060, 433, 11, 558, 30, 50708, 50708, 407, 498, 264, 4974, 24922, 307, 4356, 11, 309, 486, 1874, 294, 257, 18587, 15706, 13, 51028, 51028, 400, 370, 456, 311, 257, 688, 295, 411, 857, 3711, 31226, 293, 420, 278, 293, 17573, 293, 309, 311, 534, 3219, 13, 51452, 51452, 400, 300, 311, 264, 644, 300, 286, 390, 881, 14471, 466, 13, 51708, 51736], "temperature": 0.0, "avg_logprob": -0.07391797102891005, "compression_ratio": 1.5103092783505154, "no_caption_prob": 2.3550182959297672e-05}, {"id": 827, "seek": 384232, "start": 3849.2000000000003, "end": 3855.6000000000004, "text": " So if the random integer is smaller, it will result in a simpler float.", "tokens": [50364, 9562, 19, 15706, 10290, 281, 733, 295, 1524, 264, 4978, 490, 264, 23060, 433, 11, 558, 30, 50708, 50708, 407, 498, 264, 4974, 24922, 307, 4356, 11, 309, 486, 1874, 294, 257, 18587, 15706, 13, 51028, 51028, 400, 370, 456, 311, 257, 688, 295, 411, 857, 3711, 31226, 293, 420, 278, 293, 17573, 293, 309, 311, 534, 3219, 13, 51452, 51452, 400, 300, 311, 264, 644, 300, 286, 390, 881, 14471, 466, 13, 51708, 51736], "temperature": 0.0, "avg_logprob": -0.07391797102891005, "compression_ratio": 1.5103092783505154, "no_caption_prob": 2.3550182959297672e-05}, {"id": 828, "seek": 384232, "start": 3855.6000000000004, "end": 3864.0800000000004, "text": " And so there's a lot of like bitwise masking and oring and shifting and it's really crazy.", "tokens": [50364, 9562, 19, 15706, 10290, 281, 733, 295, 1524, 264, 4978, 490, 264, 23060, 433, 11, 558, 30, 50708, 50708, 407, 498, 264, 4974, 24922, 307, 4356, 11, 309, 486, 1874, 294, 257, 18587, 15706, 13, 51028, 51028, 400, 370, 456, 311, 257, 688, 295, 411, 857, 3711, 31226, 293, 420, 278, 293, 17573, 293, 309, 311, 534, 3219, 13, 51452, 51452, 400, 300, 311, 264, 644, 300, 286, 390, 881, 14471, 466, 13, 51708, 51736], "temperature": 0.0, "avg_logprob": -0.07391797102891005, "compression_ratio": 1.5103092783505154, "no_caption_prob": 2.3550182959297672e-05}, {"id": 829, "seek": 384232, "start": 3864.0800000000004, "end": 3869.2000000000003, "text": " And that's the part that I was most stressed about.", "tokens": [50364, 9562, 19, 15706, 10290, 281, 733, 295, 1524, 264, 4978, 490, 264, 23060, 433, 11, 558, 30, 50708, 50708, 407, 498, 264, 4974, 24922, 307, 4356, 11, 309, 486, 1874, 294, 257, 18587, 15706, 13, 51028, 51028, 400, 370, 456, 311, 257, 688, 295, 411, 857, 3711, 31226, 293, 420, 278, 293, 17573, 293, 309, 311, 534, 3219, 13, 51452, 51452, 400, 300, 311, 264, 644, 300, 286, 390, 881, 14471, 466, 13, 51708, 51736], "temperature": 0.0, "avg_logprob": -0.07391797102891005, "compression_ratio": 1.5103092783505154, "no_caption_prob": 2.3550182959297672e-05}, {"id": 830, "seek": 386920, "start": 3869.2, "end": 3876.72, "text": " But the result is floats will shrink beautifully and it will give you, so it will prefer positive", "tokens": [50364, 583, 264, 1874, 307, 37878, 486, 23060, 16525, 293, 309, 486, 976, 291, 11, 370, 309, 486, 4382, 3353, 50740, 50764, 3547, 11, 309, 486, 4382, 4356, 3547, 11, 457, 309, 486, 4382, 41674, 670, 979, 332, 1124, 11, 558, 30, 51132, 51132, 407, 309, 486, 4382, 3547, 411, 472, 670, 502, 13, 20, 11, 457, 611, 309, 486, 4382, 4356, 36058, 51492, 51520, 670, 2603, 36058, 13, 51632, 51632], "temperature": 0.0, "avg_logprob": -0.16635925239986843, "compression_ratio": 1.8616352201257862, "no_caption_prob": 2.5410277885384858e-05}, {"id": 831, "seek": 386920, "start": 3877.2, "end": 3884.56, "text": " numbers, it will prefer smaller numbers, but it will prefer integers over decimals, right?", "tokens": [50364, 583, 264, 1874, 307, 37878, 486, 23060, 16525, 293, 309, 486, 976, 291, 11, 370, 309, 486, 4382, 3353, 50740, 50764, 3547, 11, 309, 486, 4382, 4356, 3547, 11, 457, 309, 486, 4382, 41674, 670, 979, 332, 1124, 11, 558, 30, 51132, 51132, 407, 309, 486, 4382, 3547, 411, 472, 670, 502, 13, 20, 11, 457, 611, 309, 486, 4382, 4356, 36058, 51492, 51520, 670, 2603, 36058, 13, 51632, 51632], "temperature": 0.0, "avg_logprob": -0.16635925239986843, "compression_ratio": 1.8616352201257862, "no_caption_prob": 2.5410277885384858e-05}, {"id": 832, "seek": 386920, "start": 3884.56, "end": 3891.7599999999998, "text": " So it will prefer numbers like one over 1.5, but also it will prefer smaller fractions", "tokens": [50364, 583, 264, 1874, 307, 37878, 486, 23060, 16525, 293, 309, 486, 976, 291, 11, 370, 309, 486, 4382, 3353, 50740, 50764, 3547, 11, 309, 486, 4382, 4356, 3547, 11, 457, 309, 486, 4382, 41674, 670, 979, 332, 1124, 11, 558, 30, 51132, 51132, 407, 309, 486, 4382, 3547, 411, 472, 670, 502, 13, 20, 11, 457, 611, 309, 486, 4382, 4356, 36058, 51492, 51520, 670, 2603, 36058, 13, 51632, 51632], "temperature": 0.0, "avg_logprob": -0.16635925239986843, "compression_ratio": 1.8616352201257862, "no_caption_prob": 2.5410277885384858e-05}, {"id": 833, "seek": 386920, "start": 3892.3199999999997, "end": 3894.56, "text": " over huge fractions.", "tokens": [50364, 583, 264, 1874, 307, 37878, 486, 23060, 16525, 293, 309, 486, 976, 291, 11, 370, 309, 486, 4382, 3353, 50740, 50764, 3547, 11, 309, 486, 4382, 4356, 3547, 11, 457, 309, 486, 4382, 41674, 670, 979, 332, 1124, 11, 558, 30, 51132, 51132, 407, 309, 486, 4382, 3547, 411, 472, 670, 502, 13, 20, 11, 457, 611, 309, 486, 4382, 4356, 36058, 51492, 51520, 670, 2603, 36058, 13, 51632, 51632], "temperature": 0.0, "avg_logprob": -0.16635925239986843, "compression_ratio": 1.8616352201257862, "no_caption_prob": 2.5410277885384858e-05}, {"id": 834, "seek": 389456, "start": 3894.56, "end": 3901.6, "text": " So it will give you 1.5 instead of 1.76543215, right?", "tokens": [50364, 407, 309, 486, 976, 291, 502, 13, 20, 2602, 295, 502, 13, 22, 16824, 17201, 4436, 20, 11, 558, 30, 50716, 50748, 400, 370, 286, 478, 1238, 2055, 466, 300, 13, 50884, 50884, 400, 286, 478, 6369, 281, 536, 498, 341, 411, 819, 7316, 295, 37878, 11, 498, 309, 486, 915, 512, 51268, 51268, 15120, 3571, 813, 264, 691, 16, 3037, 295, 441, 45, 1500, 13, 51448, 51448, 286, 478, 406, 534, 988, 466, 300, 11, 457, 286, 478, 6369, 281, 536, 13, 51636, 51668], "temperature": 0.0, "avg_logprob": -0.17171774239375673, "compression_ratio": 1.4583333333333333, "no_caption_prob": 6.293866317719221e-05}, {"id": 835, "seek": 389456, "start": 3902.24, "end": 3904.96, "text": " And so I'm pretty happy about that.", "tokens": [50364, 407, 309, 486, 976, 291, 502, 13, 20, 2602, 295, 502, 13, 22, 16824, 17201, 4436, 20, 11, 558, 30, 50716, 50748, 400, 370, 286, 478, 1238, 2055, 466, 300, 13, 50884, 50884, 400, 286, 478, 6369, 281, 536, 498, 341, 411, 819, 7316, 295, 37878, 11, 498, 309, 486, 915, 512, 51268, 51268, 15120, 3571, 813, 264, 691, 16, 3037, 295, 441, 45, 1500, 13, 51448, 51448, 286, 478, 406, 534, 988, 466, 300, 11, 457, 286, 478, 6369, 281, 536, 13, 51636, 51668], "temperature": 0.0, "avg_logprob": -0.17171774239375673, "compression_ratio": 1.4583333333333333, "no_caption_prob": 6.293866317719221e-05}, {"id": 836, "seek": 389456, "start": 3904.96, "end": 3912.64, "text": " And I'm curious to see if this like different distribution of floats, if it will find some", "tokens": [50364, 407, 309, 486, 976, 291, 502, 13, 20, 2602, 295, 502, 13, 22, 16824, 17201, 4436, 20, 11, 558, 30, 50716, 50748, 400, 370, 286, 478, 1238, 2055, 466, 300, 13, 50884, 50884, 400, 286, 478, 6369, 281, 536, 498, 341, 411, 819, 7316, 295, 37878, 11, 498, 309, 486, 915, 512, 51268, 51268, 15120, 3571, 813, 264, 691, 16, 3037, 295, 441, 45, 1500, 13, 51448, 51448, 286, 478, 406, 534, 988, 466, 300, 11, 457, 286, 478, 6369, 281, 536, 13, 51636, 51668], "temperature": 0.0, "avg_logprob": -0.17171774239375673, "compression_ratio": 1.4583333333333333, "no_caption_prob": 6.293866317719221e-05}, {"id": 837, "seek": 389456, "start": 3912.64, "end": 3916.24, "text": " bugs easier than the V1 version of LN test.", "tokens": [50364, 407, 309, 486, 976, 291, 502, 13, 20, 2602, 295, 502, 13, 22, 16824, 17201, 4436, 20, 11, 558, 30, 50716, 50748, 400, 370, 286, 478, 1238, 2055, 466, 300, 13, 50884, 50884, 400, 286, 478, 6369, 281, 536, 498, 341, 411, 819, 7316, 295, 37878, 11, 498, 309, 486, 915, 512, 51268, 51268, 15120, 3571, 813, 264, 691, 16, 3037, 295, 441, 45, 1500, 13, 51448, 51448, 286, 478, 406, 534, 988, 466, 300, 11, 457, 286, 478, 6369, 281, 536, 13, 51636, 51668], "temperature": 0.0, "avg_logprob": -0.17171774239375673, "compression_ratio": 1.4583333333333333, "no_caption_prob": 6.293866317719221e-05}, {"id": 838, "seek": 389456, "start": 3916.24, "end": 3920.0, "text": " I'm not really sure about that, but I'm curious to see.", "tokens": [50364, 407, 309, 486, 976, 291, 502, 13, 20, 2602, 295, 502, 13, 22, 16824, 17201, 4436, 20, 11, 558, 30, 50716, 50748, 400, 370, 286, 478, 1238, 2055, 466, 300, 13, 50884, 50884, 400, 286, 478, 6369, 281, 536, 498, 341, 411, 819, 7316, 295, 37878, 11, 498, 309, 486, 915, 512, 51268, 51268, 15120, 3571, 813, 264, 691, 16, 3037, 295, 441, 45, 1500, 13, 51448, 51448, 286, 478, 406, 534, 988, 466, 300, 11, 457, 286, 478, 6369, 281, 536, 13, 51636, 51668], "temperature": 0.0, "avg_logprob": -0.17171774239375673, "compression_ratio": 1.4583333333333333, "no_caption_prob": 6.293866317719221e-05}, {"id": 839, "seek": 392000, "start": 3920.0, "end": 3924.08, "text": " And we are also adding the not the numbers in there.", "tokens": [50364, 400, 321, 366, 611, 5127, 264, 406, 264, 3547, 294, 456, 13, 50568, 50568, 492, 366, 5127, 264, 7193, 1088, 294, 456, 11, 597, 307, 1391, 516, 281, 312, 437, 10704, 264, 881, 50808, 50808, 15120, 11, 457, 611, 11, 291, 458, 11, 2171, 428, 6405, 420, 3861, 1177, 380, 534, 1127, 466, 729, 13, 51132, 51132, 400, 291, 366, 445, 411, 11, 1392, 11, 498, 291, 976, 385, 14150, 11, 286, 486, 976, 291, 14150, 572, 1871, 13, 51360, 51360, 407, 958, 281, 411, 2370, 13, 43645, 267, 11, 321, 611, 362, 2370, 13, 77, 573, 43645, 267, 11, 597, 307, 445, 3547, 13, 51724, 51752], "temperature": 0.0, "avg_logprob": -0.20870822941491363, "compression_ratio": 1.6846473029045643, "no_caption_prob": 0.00013317012053448707}, {"id": 840, "seek": 392000, "start": 3924.08, "end": 3928.88, "text": " We are adding the infinities in there, which is probably going to be what finds the most", "tokens": [50364, 400, 321, 366, 611, 5127, 264, 406, 264, 3547, 294, 456, 13, 50568, 50568, 492, 366, 5127, 264, 7193, 1088, 294, 456, 11, 597, 307, 1391, 516, 281, 312, 437, 10704, 264, 881, 50808, 50808, 15120, 11, 457, 611, 11, 291, 458, 11, 2171, 428, 6405, 420, 3861, 1177, 380, 534, 1127, 466, 729, 13, 51132, 51132, 400, 291, 366, 445, 411, 11, 1392, 11, 498, 291, 976, 385, 14150, 11, 286, 486, 976, 291, 14150, 572, 1871, 13, 51360, 51360, 407, 958, 281, 411, 2370, 13, 43645, 267, 11, 321, 611, 362, 2370, 13, 77, 573, 43645, 267, 11, 597, 307, 445, 3547, 13, 51724, 51752], "temperature": 0.0, "avg_logprob": -0.20870822941491363, "compression_ratio": 1.6846473029045643, "no_caption_prob": 0.00013317012053448707}, {"id": 841, "seek": 392000, "start": 3928.88, "end": 3935.36, "text": " bugs, but also, you know, sometimes your library or application doesn't really care about those.", "tokens": [50364, 400, 321, 366, 611, 5127, 264, 406, 264, 3547, 294, 456, 13, 50568, 50568, 492, 366, 5127, 264, 7193, 1088, 294, 456, 11, 597, 307, 1391, 516, 281, 312, 437, 10704, 264, 881, 50808, 50808, 15120, 11, 457, 611, 11, 291, 458, 11, 2171, 428, 6405, 420, 3861, 1177, 380, 534, 1127, 466, 729, 13, 51132, 51132, 400, 291, 366, 445, 411, 11, 1392, 11, 498, 291, 976, 385, 14150, 11, 286, 486, 976, 291, 14150, 572, 1871, 13, 51360, 51360, 407, 958, 281, 411, 2370, 13, 43645, 267, 11, 321, 611, 362, 2370, 13, 77, 573, 43645, 267, 11, 597, 307, 445, 3547, 13, 51724, 51752], "temperature": 0.0, "avg_logprob": -0.20870822941491363, "compression_ratio": 1.6846473029045643, "no_caption_prob": 0.00013317012053448707}, {"id": 842, "seek": 392000, "start": 3935.36, "end": 3939.92, "text": " And you are just like, okay, if you give me garbage, I will give you garbage no matter.", "tokens": [50364, 400, 321, 366, 611, 5127, 264, 406, 264, 3547, 294, 456, 13, 50568, 50568, 492, 366, 5127, 264, 7193, 1088, 294, 456, 11, 597, 307, 1391, 516, 281, 312, 437, 10704, 264, 881, 50808, 50808, 15120, 11, 457, 611, 11, 291, 458, 11, 2171, 428, 6405, 420, 3861, 1177, 380, 534, 1127, 466, 729, 13, 51132, 51132, 400, 291, 366, 445, 411, 11, 1392, 11, 498, 291, 976, 385, 14150, 11, 286, 486, 976, 291, 14150, 572, 1871, 13, 51360, 51360, 407, 958, 281, 411, 2370, 13, 43645, 267, 11, 321, 611, 362, 2370, 13, 77, 573, 43645, 267, 11, 597, 307, 445, 3547, 13, 51724, 51752], "temperature": 0.0, "avg_logprob": -0.20870822941491363, "compression_ratio": 1.6846473029045643, "no_caption_prob": 0.00013317012053448707}, {"id": 843, "seek": 392000, "start": 3939.92, "end": 3947.2, "text": " So next to like fast.float, we also have fast.nicefloat, which is just numbers.", "tokens": [50364, 400, 321, 366, 611, 5127, 264, 406, 264, 3547, 294, 456, 13, 50568, 50568, 492, 366, 5127, 264, 7193, 1088, 294, 456, 11, 597, 307, 1391, 516, 281, 312, 437, 10704, 264, 881, 50808, 50808, 15120, 11, 457, 611, 11, 291, 458, 11, 2171, 428, 6405, 420, 3861, 1177, 380, 534, 1127, 466, 729, 13, 51132, 51132, 400, 291, 366, 445, 411, 11, 1392, 11, 498, 291, 976, 385, 14150, 11, 286, 486, 976, 291, 14150, 572, 1871, 13, 51360, 51360, 407, 958, 281, 411, 2370, 13, 43645, 267, 11, 321, 611, 362, 2370, 13, 77, 573, 43645, 267, 11, 597, 307, 445, 3547, 13, 51724, 51752], "temperature": 0.0, "avg_logprob": -0.20870822941491363, "compression_ratio": 1.6846473029045643, "no_caption_prob": 0.00013317012053448707}, {"id": 844, "seek": 394720, "start": 3947.2, "end": 3954.24, "text": " So, you know, if suddenly you have like 30 failure tests because of infinities that will", "tokens": [50364, 407, 11, 291, 458, 11, 498, 5800, 291, 362, 411, 2217, 7763, 6921, 570, 295, 7193, 1088, 300, 486, 50716, 50716, 406, 1051, 294, 428, 3089, 11, 567, 3255, 30, 50844, 50844, 3099, 436, 406, 30, 50884, 50884, 1779, 30, 50924, 50952, 663, 291, 1454, 1582, 380, 1051, 13, 51016, 51016, 865, 13, 51044, 51044, 583, 291, 393, 1888, 264, 1858, 636, 484, 293, 291, 393, 445, 3679, 490, 37878, 281, 1481, 37878, 13, 51388, 51388, 400, 729, 6921, 11, 729, 1500, 20774, 486, 352, 1314, 11, 457, 4317, 1066, 552, 294, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.3676414489746094, "compression_ratio": 1.5520361990950227, "no_caption_prob": 2.5460170945734717e-05}, {"id": 845, "seek": 394720, "start": 3954.24, "end": 3956.7999999999997, "text": " not happen in your code, who knows?", "tokens": [50364, 407, 11, 291, 458, 11, 498, 5800, 291, 362, 411, 2217, 7763, 6921, 570, 295, 7193, 1088, 300, 486, 50716, 50716, 406, 1051, 294, 428, 3089, 11, 567, 3255, 30, 50844, 50844, 3099, 436, 406, 30, 50884, 50884, 1779, 30, 50924, 50952, 663, 291, 1454, 1582, 380, 1051, 13, 51016, 51016, 865, 13, 51044, 51044, 583, 291, 393, 1888, 264, 1858, 636, 484, 293, 291, 393, 445, 3679, 490, 37878, 281, 1481, 37878, 13, 51388, 51388, 400, 729, 6921, 11, 729, 1500, 20774, 486, 352, 1314, 11, 457, 4317, 1066, 552, 294, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.3676414489746094, "compression_ratio": 1.5520361990950227, "no_caption_prob": 2.5460170945734717e-05}, {"id": 846, "seek": 394720, "start": 3956.7999999999997, "end": 3957.6, "text": " Will they not?", "tokens": [50364, 407, 11, 291, 458, 11, 498, 5800, 291, 362, 411, 2217, 7763, 6921, 570, 295, 7193, 1088, 300, 486, 50716, 50716, 406, 1051, 294, 428, 3089, 11, 567, 3255, 30, 50844, 50844, 3099, 436, 406, 30, 50884, 50884, 1779, 30, 50924, 50952, 663, 291, 1454, 1582, 380, 1051, 13, 51016, 51016, 865, 13, 51044, 51044, 583, 291, 393, 1888, 264, 1858, 636, 484, 293, 291, 393, 445, 3679, 490, 37878, 281, 1481, 37878, 13, 51388, 51388, 400, 729, 6921, 11, 729, 1500, 20774, 486, 352, 1314, 11, 457, 4317, 1066, 552, 294, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.3676414489746094, "compression_ratio": 1.5520361990950227, "no_caption_prob": 2.5460170945734717e-05}, {"id": 847, "seek": 394720, "start": 3957.6, "end": 3958.3999999999996, "text": " Right?", "tokens": [50364, 407, 11, 291, 458, 11, 498, 5800, 291, 362, 411, 2217, 7763, 6921, 570, 295, 7193, 1088, 300, 486, 50716, 50716, 406, 1051, 294, 428, 3089, 11, 567, 3255, 30, 50844, 50844, 3099, 436, 406, 30, 50884, 50884, 1779, 30, 50924, 50952, 663, 291, 1454, 1582, 380, 1051, 13, 51016, 51016, 865, 13, 51044, 51044, 583, 291, 393, 1888, 264, 1858, 636, 484, 293, 291, 393, 445, 3679, 490, 37878, 281, 1481, 37878, 13, 51388, 51388, 400, 729, 6921, 11, 729, 1500, 20774, 486, 352, 1314, 11, 457, 4317, 1066, 552, 294, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.3676414489746094, "compression_ratio": 1.5520361990950227, "no_caption_prob": 2.5460170945734717e-05}, {"id": 848, "seek": 394720, "start": 3958.96, "end": 3960.24, "text": " That you hope won't happen.", "tokens": [50364, 407, 11, 291, 458, 11, 498, 5800, 291, 362, 411, 2217, 7763, 6921, 570, 295, 7193, 1088, 300, 486, 50716, 50716, 406, 1051, 294, 428, 3089, 11, 567, 3255, 30, 50844, 50844, 3099, 436, 406, 30, 50884, 50884, 1779, 30, 50924, 50952, 663, 291, 1454, 1582, 380, 1051, 13, 51016, 51016, 865, 13, 51044, 51044, 583, 291, 393, 1888, 264, 1858, 636, 484, 293, 291, 393, 445, 3679, 490, 37878, 281, 1481, 37878, 13, 51388, 51388, 400, 729, 6921, 11, 729, 1500, 20774, 486, 352, 1314, 11, 457, 4317, 1066, 552, 294, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.3676414489746094, "compression_ratio": 1.5520361990950227, "no_caption_prob": 2.5460170945734717e-05}, {"id": 849, "seek": 394720, "start": 3960.24, "end": 3960.7999999999997, "text": " Yeah.", "tokens": [50364, 407, 11, 291, 458, 11, 498, 5800, 291, 362, 411, 2217, 7763, 6921, 570, 295, 7193, 1088, 300, 486, 50716, 50716, 406, 1051, 294, 428, 3089, 11, 567, 3255, 30, 50844, 50844, 3099, 436, 406, 30, 50884, 50884, 1779, 30, 50924, 50952, 663, 291, 1454, 1582, 380, 1051, 13, 51016, 51016, 865, 13, 51044, 51044, 583, 291, 393, 1888, 264, 1858, 636, 484, 293, 291, 393, 445, 3679, 490, 37878, 281, 1481, 37878, 13, 51388, 51388, 400, 729, 6921, 11, 729, 1500, 20774, 486, 352, 1314, 11, 457, 4317, 1066, 552, 294, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.3676414489746094, "compression_ratio": 1.5520361990950227, "no_caption_prob": 2.5460170945734717e-05}, {"id": 850, "seek": 394720, "start": 3960.7999999999997, "end": 3967.68, "text": " But you can pick the easy way out and you can just switch from floats to nice floats.", "tokens": [50364, 407, 11, 291, 458, 11, 498, 5800, 291, 362, 411, 2217, 7763, 6921, 570, 295, 7193, 1088, 300, 486, 50716, 50716, 406, 1051, 294, 428, 3089, 11, 567, 3255, 30, 50844, 50844, 3099, 436, 406, 30, 50884, 50884, 1779, 30, 50924, 50952, 663, 291, 1454, 1582, 380, 1051, 13, 51016, 51016, 865, 13, 51044, 51044, 583, 291, 393, 1888, 264, 1858, 636, 484, 293, 291, 393, 445, 3679, 490, 37878, 281, 1481, 37878, 13, 51388, 51388, 400, 729, 6921, 11, 729, 1500, 20774, 486, 352, 1314, 11, 457, 4317, 1066, 552, 294, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.3676414489746094, "compression_ratio": 1.5520361990950227, "no_caption_prob": 2.5460170945734717e-05}, {"id": 851, "seek": 394720, "start": 3967.68, "end": 3975.2, "text": " And those tests, those test failures will go away, but perhaps keep them in.", "tokens": [50364, 407, 11, 291, 458, 11, 498, 5800, 291, 362, 411, 2217, 7763, 6921, 570, 295, 7193, 1088, 300, 486, 50716, 50716, 406, 1051, 294, 428, 3089, 11, 567, 3255, 30, 50844, 50844, 3099, 436, 406, 30, 50884, 50884, 1779, 30, 50924, 50952, 663, 291, 1454, 1582, 380, 1051, 13, 51016, 51016, 865, 13, 51044, 51044, 583, 291, 393, 1888, 264, 1858, 636, 484, 293, 291, 393, 445, 3679, 490, 37878, 281, 1481, 37878, 13, 51388, 51388, 400, 729, 6921, 11, 729, 1500, 20774, 486, 352, 1314, 11, 457, 4317, 1066, 552, 294, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.3676414489746094, "compression_ratio": 1.5520361990950227, "no_caption_prob": 2.5460170945734717e-05}, {"id": 852, "seek": 397520, "start": 3975.2, "end": 3979.68, "text": " Perhaps somehow guard against these values in your application code, right?", "tokens": [50364, 10517, 6063, 6290, 1970, 613, 4190, 294, 428, 3861, 3089, 11, 558, 30, 50588, 50588, 467, 311, 611, 364, 3614, 291, 393, 747, 13, 50700, 50700, 286, 362, 281, 584, 11, 286, 920, 2378, 380, 20381, 257, 426, 1770, 294, 2699, 76, 3089, 11, 411, 294, 15778, 13, 51080, 51080, 4894, 13, 51100, 51100, 583, 286, 362, 1128, 20150, 472, 13, 51220, 51220, 407, 286, 519, 286, 478, 445, 516, 281, 352, 365, 1481, 37878, 1009, 13, 51416, 51416, 865, 13, 51440, 51476, 286, 914, 11, 1310, 11, 1310, 11, 1310, 286, 603, 853, 309, 13, 51588, 51588, 400, 1338, 11, 286, 630, 13, 51720, 51720], "temperature": 0.0, "avg_logprob": -0.34150222495750143, "compression_ratio": 1.4808510638297872, "no_caption_prob": 4.331056334194727e-05}, {"id": 853, "seek": 397520, "start": 3979.68, "end": 3981.9199999999996, "text": " It's also an option you can take.", "tokens": [50364, 10517, 6063, 6290, 1970, 613, 4190, 294, 428, 3861, 3089, 11, 558, 30, 50588, 50588, 467, 311, 611, 364, 3614, 291, 393, 747, 13, 50700, 50700, 286, 362, 281, 584, 11, 286, 920, 2378, 380, 20381, 257, 426, 1770, 294, 2699, 76, 3089, 11, 411, 294, 15778, 13, 51080, 51080, 4894, 13, 51100, 51100, 583, 286, 362, 1128, 20150, 472, 13, 51220, 51220, 407, 286, 519, 286, 478, 445, 516, 281, 352, 365, 1481, 37878, 1009, 13, 51416, 51416, 865, 13, 51440, 51476, 286, 914, 11, 1310, 11, 1310, 11, 1310, 286, 603, 853, 309, 13, 51588, 51588, 400, 1338, 11, 286, 630, 13, 51720, 51720], "temperature": 0.0, "avg_logprob": -0.34150222495750143, "compression_ratio": 1.4808510638297872, "no_caption_prob": 4.331056334194727e-05}, {"id": 854, "seek": 397520, "start": 3981.9199999999996, "end": 3989.52, "text": " I have to say, I still haven't encountered a NAN in Elm code, like in JavaScript.", "tokens": [50364, 10517, 6063, 6290, 1970, 613, 4190, 294, 428, 3861, 3089, 11, 558, 30, 50588, 50588, 467, 311, 611, 364, 3614, 291, 393, 747, 13, 50700, 50700, 286, 362, 281, 584, 11, 286, 920, 2378, 380, 20381, 257, 426, 1770, 294, 2699, 76, 3089, 11, 411, 294, 15778, 13, 51080, 51080, 4894, 13, 51100, 51100, 583, 286, 362, 1128, 20150, 472, 13, 51220, 51220, 407, 286, 519, 286, 478, 445, 516, 281, 352, 365, 1481, 37878, 1009, 13, 51416, 51416, 865, 13, 51440, 51476, 286, 914, 11, 1310, 11, 1310, 11, 1310, 286, 603, 853, 309, 13, 51588, 51588, 400, 1338, 11, 286, 630, 13, 51720, 51720], "temperature": 0.0, "avg_logprob": -0.34150222495750143, "compression_ratio": 1.4808510638297872, "no_caption_prob": 4.331056334194727e-05}, {"id": 855, "seek": 397520, "start": 3989.52, "end": 3989.9199999999996, "text": " Sure.", "tokens": [50364, 10517, 6063, 6290, 1970, 613, 4190, 294, 428, 3861, 3089, 11, 558, 30, 50588, 50588, 467, 311, 611, 364, 3614, 291, 393, 747, 13, 50700, 50700, 286, 362, 281, 584, 11, 286, 920, 2378, 380, 20381, 257, 426, 1770, 294, 2699, 76, 3089, 11, 411, 294, 15778, 13, 51080, 51080, 4894, 13, 51100, 51100, 583, 286, 362, 1128, 20150, 472, 13, 51220, 51220, 407, 286, 519, 286, 478, 445, 516, 281, 352, 365, 1481, 37878, 1009, 13, 51416, 51416, 865, 13, 51440, 51476, 286, 914, 11, 1310, 11, 1310, 11, 1310, 286, 603, 853, 309, 13, 51588, 51588, 400, 1338, 11, 286, 630, 13, 51720, 51720], "temperature": 0.0, "avg_logprob": -0.34150222495750143, "compression_ratio": 1.4808510638297872, "no_caption_prob": 4.331056334194727e-05}, {"id": 856, "seek": 397520, "start": 3989.9199999999996, "end": 3992.3199999999997, "text": " But I have never counted one.", "tokens": [50364, 10517, 6063, 6290, 1970, 613, 4190, 294, 428, 3861, 3089, 11, 558, 30, 50588, 50588, 467, 311, 611, 364, 3614, 291, 393, 747, 13, 50700, 50700, 286, 362, 281, 584, 11, 286, 920, 2378, 380, 20381, 257, 426, 1770, 294, 2699, 76, 3089, 11, 411, 294, 15778, 13, 51080, 51080, 4894, 13, 51100, 51100, 583, 286, 362, 1128, 20150, 472, 13, 51220, 51220, 407, 286, 519, 286, 478, 445, 516, 281, 352, 365, 1481, 37878, 1009, 13, 51416, 51416, 865, 13, 51440, 51476, 286, 914, 11, 1310, 11, 1310, 11, 1310, 286, 603, 853, 309, 13, 51588, 51588, 400, 1338, 11, 286, 630, 13, 51720, 51720], "temperature": 0.0, "avg_logprob": -0.34150222495750143, "compression_ratio": 1.4808510638297872, "no_caption_prob": 4.331056334194727e-05}, {"id": 857, "seek": 397520, "start": 3992.3199999999997, "end": 3996.24, "text": " So I think I'm just going to go with nice floats always.", "tokens": [50364, 10517, 6063, 6290, 1970, 613, 4190, 294, 428, 3861, 3089, 11, 558, 30, 50588, 50588, 467, 311, 611, 364, 3614, 291, 393, 747, 13, 50700, 50700, 286, 362, 281, 584, 11, 286, 920, 2378, 380, 20381, 257, 426, 1770, 294, 2699, 76, 3089, 11, 411, 294, 15778, 13, 51080, 51080, 4894, 13, 51100, 51100, 583, 286, 362, 1128, 20150, 472, 13, 51220, 51220, 407, 286, 519, 286, 478, 445, 516, 281, 352, 365, 1481, 37878, 1009, 13, 51416, 51416, 865, 13, 51440, 51476, 286, 914, 11, 1310, 11, 1310, 11, 1310, 286, 603, 853, 309, 13, 51588, 51588, 400, 1338, 11, 286, 630, 13, 51720, 51720], "temperature": 0.0, "avg_logprob": -0.34150222495750143, "compression_ratio": 1.4808510638297872, "no_caption_prob": 4.331056334194727e-05}, {"id": 858, "seek": 397520, "start": 3996.24, "end": 3996.72, "text": " Yeah.", "tokens": [50364, 10517, 6063, 6290, 1970, 613, 4190, 294, 428, 3861, 3089, 11, 558, 30, 50588, 50588, 467, 311, 611, 364, 3614, 291, 393, 747, 13, 50700, 50700, 286, 362, 281, 584, 11, 286, 920, 2378, 380, 20381, 257, 426, 1770, 294, 2699, 76, 3089, 11, 411, 294, 15778, 13, 51080, 51080, 4894, 13, 51100, 51100, 583, 286, 362, 1128, 20150, 472, 13, 51220, 51220, 407, 286, 519, 286, 478, 445, 516, 281, 352, 365, 1481, 37878, 1009, 13, 51416, 51416, 865, 13, 51440, 51476, 286, 914, 11, 1310, 11, 1310, 11, 1310, 286, 603, 853, 309, 13, 51588, 51588, 400, 1338, 11, 286, 630, 13, 51720, 51720], "temperature": 0.0, "avg_logprob": -0.34150222495750143, "compression_ratio": 1.4808510638297872, "no_caption_prob": 4.331056334194727e-05}, {"id": 859, "seek": 397520, "start": 3997.4399999999996, "end": 3999.68, "text": " I mean, maybe, maybe, maybe I'll try it.", "tokens": [50364, 10517, 6063, 6290, 1970, 613, 4190, 294, 428, 3861, 3089, 11, 558, 30, 50588, 50588, 467, 311, 611, 364, 3614, 291, 393, 747, 13, 50700, 50700, 286, 362, 281, 584, 11, 286, 920, 2378, 380, 20381, 257, 426, 1770, 294, 2699, 76, 3089, 11, 411, 294, 15778, 13, 51080, 51080, 4894, 13, 51100, 51100, 583, 286, 362, 1128, 20150, 472, 13, 51220, 51220, 407, 286, 519, 286, 478, 445, 516, 281, 352, 365, 1481, 37878, 1009, 13, 51416, 51416, 865, 13, 51440, 51476, 286, 914, 11, 1310, 11, 1310, 11, 1310, 286, 603, 853, 309, 13, 51588, 51588, 400, 1338, 11, 286, 630, 13, 51720, 51720], "temperature": 0.0, "avg_logprob": -0.34150222495750143, "compression_ratio": 1.4808510638297872, "no_caption_prob": 4.331056334194727e-05}, {"id": 860, "seek": 397520, "start": 3999.68, "end": 4002.3199999999997, "text": " And yeah, I did.", "tokens": [50364, 10517, 6063, 6290, 1970, 613, 4190, 294, 428, 3861, 3089, 11, 558, 30, 50588, 50588, 467, 311, 611, 364, 3614, 291, 393, 747, 13, 50700, 50700, 286, 362, 281, 584, 11, 286, 920, 2378, 380, 20381, 257, 426, 1770, 294, 2699, 76, 3089, 11, 411, 294, 15778, 13, 51080, 51080, 4894, 13, 51100, 51100, 583, 286, 362, 1128, 20150, 472, 13, 51220, 51220, 407, 286, 519, 286, 478, 445, 516, 281, 352, 365, 1481, 37878, 1009, 13, 51416, 51416, 865, 13, 51440, 51476, 286, 914, 11, 1310, 11, 1310, 11, 1310, 286, 603, 853, 309, 13, 51588, 51588, 400, 1338, 11, 286, 630, 13, 51720, 51720], "temperature": 0.0, "avg_logprob": -0.34150222495750143, "compression_ratio": 1.4808510638297872, "no_caption_prob": 4.331056334194727e-05}, {"id": 861, "seek": 400232, "start": 4002.32, "end": 4005.84, "text": " I did encounter them at work recently.", "tokens": [50364, 286, 630, 8593, 552, 412, 589, 3938, 13, 50540, 50540, 286, 393, 380, 1604, 437, 2685, 9005, 300, 390, 11, 457, 286, 390, 445, 1242, 426, 1770, 82, 439, 926, 50892, 50892, 293, 286, 390, 411, 11, 983, 30, 50984, 50984, 1981, 366, 411, 11, 456, 311, 572, 1778, 13, 51100, 51148, 467, 311, 1009, 746, 466, 411, 11, 538, 26764, 538, 4018, 11, 291, 483, 7193, 1088, 293, 550, 291, 360, 51420, 51420, 746, 466, 264, 7193, 1088, 293, 5800, 309, 311, 257, 426, 1770, 13, 51536, 51536, 407, 1338, 11, 309, 311, 11, 1338, 13, 51620, 51644], "temperature": 0.0, "avg_logprob": -0.3018533687780399, "compression_ratio": 1.6129032258064515, "no_caption_prob": 3.882587407133542e-05}, {"id": 862, "seek": 400232, "start": 4005.84, "end": 4012.88, "text": " I can't remember what specific scenario that was, but I was just getting NANs all around", "tokens": [50364, 286, 630, 8593, 552, 412, 589, 3938, 13, 50540, 50540, 286, 393, 380, 1604, 437, 2685, 9005, 300, 390, 11, 457, 286, 390, 445, 1242, 426, 1770, 82, 439, 926, 50892, 50892, 293, 286, 390, 411, 11, 983, 30, 50984, 50984, 1981, 366, 411, 11, 456, 311, 572, 1778, 13, 51100, 51148, 467, 311, 1009, 746, 466, 411, 11, 538, 26764, 538, 4018, 11, 291, 483, 7193, 1088, 293, 550, 291, 360, 51420, 51420, 746, 466, 264, 7193, 1088, 293, 5800, 309, 311, 257, 426, 1770, 13, 51536, 51536, 407, 1338, 11, 309, 311, 11, 1338, 13, 51620, 51644], "temperature": 0.0, "avg_logprob": -0.3018533687780399, "compression_ratio": 1.6129032258064515, "no_caption_prob": 3.882587407133542e-05}, {"id": 863, "seek": 400232, "start": 4012.88, "end": 4014.7200000000003, "text": " and I was like, why?", "tokens": [50364, 286, 630, 8593, 552, 412, 589, 3938, 13, 50540, 50540, 286, 393, 380, 1604, 437, 2685, 9005, 300, 390, 11, 457, 286, 390, 445, 1242, 426, 1770, 82, 439, 926, 50892, 50892, 293, 286, 390, 411, 11, 983, 30, 50984, 50984, 1981, 366, 411, 11, 456, 311, 572, 1778, 13, 51100, 51148, 467, 311, 1009, 746, 466, 411, 11, 538, 26764, 538, 4018, 11, 291, 483, 7193, 1088, 293, 550, 291, 360, 51420, 51420, 746, 466, 264, 7193, 1088, 293, 5800, 309, 311, 257, 426, 1770, 13, 51536, 51536, 407, 1338, 11, 309, 311, 11, 1338, 13, 51620, 51644], "temperature": 0.0, "avg_logprob": -0.3018533687780399, "compression_ratio": 1.6129032258064515, "no_caption_prob": 3.882587407133542e-05}, {"id": 864, "seek": 400232, "start": 4014.7200000000003, "end": 4017.04, "text": " These are like, there's no reason.", "tokens": [50364, 286, 630, 8593, 552, 412, 589, 3938, 13, 50540, 50540, 286, 393, 380, 1604, 437, 2685, 9005, 300, 390, 11, 457, 286, 390, 445, 1242, 426, 1770, 82, 439, 926, 50892, 50892, 293, 286, 390, 411, 11, 983, 30, 50984, 50984, 1981, 366, 411, 11, 456, 311, 572, 1778, 13, 51100, 51148, 467, 311, 1009, 746, 466, 411, 11, 538, 26764, 538, 4018, 11, 291, 483, 7193, 1088, 293, 550, 291, 360, 51420, 51420, 746, 466, 264, 7193, 1088, 293, 5800, 309, 311, 257, 426, 1770, 13, 51536, 51536, 407, 1338, 11, 309, 311, 11, 1338, 13, 51620, 51644], "temperature": 0.0, "avg_logprob": -0.3018533687780399, "compression_ratio": 1.6129032258064515, "no_caption_prob": 3.882587407133542e-05}, {"id": 865, "seek": 400232, "start": 4018.0, "end": 4023.44, "text": " It's always something about like, by dividing by zero, you get infinities and then you do", "tokens": [50364, 286, 630, 8593, 552, 412, 589, 3938, 13, 50540, 50540, 286, 393, 380, 1604, 437, 2685, 9005, 300, 390, 11, 457, 286, 390, 445, 1242, 426, 1770, 82, 439, 926, 50892, 50892, 293, 286, 390, 411, 11, 983, 30, 50984, 50984, 1981, 366, 411, 11, 456, 311, 572, 1778, 13, 51100, 51148, 467, 311, 1009, 746, 466, 411, 11, 538, 26764, 538, 4018, 11, 291, 483, 7193, 1088, 293, 550, 291, 360, 51420, 51420, 746, 466, 264, 7193, 1088, 293, 5800, 309, 311, 257, 426, 1770, 13, 51536, 51536, 407, 1338, 11, 309, 311, 11, 1338, 13, 51620, 51644], "temperature": 0.0, "avg_logprob": -0.3018533687780399, "compression_ratio": 1.6129032258064515, "no_caption_prob": 3.882587407133542e-05}, {"id": 866, "seek": 400232, "start": 4023.44, "end": 4025.76, "text": " something about the infinities and suddenly it's a NAN.", "tokens": [50364, 286, 630, 8593, 552, 412, 589, 3938, 13, 50540, 50540, 286, 393, 380, 1604, 437, 2685, 9005, 300, 390, 11, 457, 286, 390, 445, 1242, 426, 1770, 82, 439, 926, 50892, 50892, 293, 286, 390, 411, 11, 983, 30, 50984, 50984, 1981, 366, 411, 11, 456, 311, 572, 1778, 13, 51100, 51148, 467, 311, 1009, 746, 466, 411, 11, 538, 26764, 538, 4018, 11, 291, 483, 7193, 1088, 293, 550, 291, 360, 51420, 51420, 746, 466, 264, 7193, 1088, 293, 5800, 309, 311, 257, 426, 1770, 13, 51536, 51536, 407, 1338, 11, 309, 311, 11, 1338, 13, 51620, 51644], "temperature": 0.0, "avg_logprob": -0.3018533687780399, "compression_ratio": 1.6129032258064515, "no_caption_prob": 3.882587407133542e-05}, {"id": 867, "seek": 400232, "start": 4025.76, "end": 4027.44, "text": " So yeah, it's, yeah.", "tokens": [50364, 286, 630, 8593, 552, 412, 589, 3938, 13, 50540, 50540, 286, 393, 380, 1604, 437, 2685, 9005, 300, 390, 11, 457, 286, 390, 445, 1242, 426, 1770, 82, 439, 926, 50892, 50892, 293, 286, 390, 411, 11, 983, 30, 50984, 50984, 1981, 366, 411, 11, 456, 311, 572, 1778, 13, 51100, 51148, 467, 311, 1009, 746, 466, 411, 11, 538, 26764, 538, 4018, 11, 291, 483, 7193, 1088, 293, 550, 291, 360, 51420, 51420, 746, 466, 264, 7193, 1088, 293, 5800, 309, 311, 257, 426, 1770, 13, 51536, 51536, 407, 1338, 11, 309, 311, 11, 1338, 13, 51620, 51644], "temperature": 0.0, "avg_logprob": -0.3018533687780399, "compression_ratio": 1.6129032258064515, "no_caption_prob": 3.882587407133542e-05}, {"id": 868, "seek": 402744, "start": 4027.44, "end": 4034.2400000000002, "text": " All you need to do is write a fuzztest to make sure that no code returns a NAN.", "tokens": [50364, 1057, 291, 643, 281, 360, 307, 2464, 257, 283, 3334, 2682, 377, 281, 652, 988, 300, 572, 3089, 11247, 257, 426, 1770, 13, 50704, 50704, 663, 311, 309, 13, 50744, 50744, 1144, 309, 5315, 293, 291, 393, 352, 281, 352, 13, 50868, 50908, 10517, 300, 311, 611, 746, 2699, 76, 3131, 727, 360, 13, 51028, 51060, 1743, 11, 1911, 11, 437, 366, 291, 884, 365, 300, 4018, 30, 51176, 51176, 4935, 309, 760, 13, 51204, 51340, 4894, 13, 51364, 51364, 509, 727, 1520, 337, 10044, 538, 4018, 412, 1935, 13, 51536, 51536, 865, 13, 51560, 51560, 286, 914, 11, 365, 283, 16740, 433, 11, 411, 983, 406, 445, 360, 257, 283, 16740, 1500, 30, 51804, 51804], "temperature": 0.0, "avg_logprob": -0.4416522979736328, "compression_ratio": 1.4688796680497926, "no_caption_prob": 8.479353709844872e-05}, {"id": 869, "seek": 402744, "start": 4034.2400000000002, "end": 4035.04, "text": " That's it.", "tokens": [50364, 1057, 291, 643, 281, 360, 307, 2464, 257, 283, 3334, 2682, 377, 281, 652, 988, 300, 572, 3089, 11247, 257, 426, 1770, 13, 50704, 50704, 663, 311, 309, 13, 50744, 50744, 1144, 309, 5315, 293, 291, 393, 352, 281, 352, 13, 50868, 50908, 10517, 300, 311, 611, 746, 2699, 76, 3131, 727, 360, 13, 51028, 51060, 1743, 11, 1911, 11, 437, 366, 291, 884, 365, 300, 4018, 30, 51176, 51176, 4935, 309, 760, 13, 51204, 51340, 4894, 13, 51364, 51364, 509, 727, 1520, 337, 10044, 538, 4018, 412, 1935, 13, 51536, 51536, 865, 13, 51560, 51560, 286, 914, 11, 365, 283, 16740, 433, 11, 411, 983, 406, 445, 360, 257, 283, 16740, 1500, 30, 51804, 51804], "temperature": 0.0, "avg_logprob": -0.4416522979736328, "compression_ratio": 1.4688796680497926, "no_caption_prob": 8.479353709844872e-05}, {"id": 870, "seek": 402744, "start": 4035.04, "end": 4037.52, "text": " Do it everywhere and you can go to go.", "tokens": [50364, 1057, 291, 643, 281, 360, 307, 2464, 257, 283, 3334, 2682, 377, 281, 652, 988, 300, 572, 3089, 11247, 257, 426, 1770, 13, 50704, 50704, 663, 311, 309, 13, 50744, 50744, 1144, 309, 5315, 293, 291, 393, 352, 281, 352, 13, 50868, 50908, 10517, 300, 311, 611, 746, 2699, 76, 3131, 727, 360, 13, 51028, 51060, 1743, 11, 1911, 11, 437, 366, 291, 884, 365, 300, 4018, 30, 51176, 51176, 4935, 309, 760, 13, 51204, 51340, 4894, 13, 51364, 51364, 509, 727, 1520, 337, 10044, 538, 4018, 412, 1935, 13, 51536, 51536, 865, 13, 51560, 51560, 286, 914, 11, 365, 283, 16740, 433, 11, 411, 983, 406, 445, 360, 257, 283, 16740, 1500, 30, 51804, 51804], "temperature": 0.0, "avg_logprob": -0.4416522979736328, "compression_ratio": 1.4688796680497926, "no_caption_prob": 8.479353709844872e-05}, {"id": 871, "seek": 402744, "start": 4038.32, "end": 4040.7200000000003, "text": " Perhaps that's also something Elm review could do.", "tokens": [50364, 1057, 291, 643, 281, 360, 307, 2464, 257, 283, 3334, 2682, 377, 281, 652, 988, 300, 572, 3089, 11247, 257, 426, 1770, 13, 50704, 50704, 663, 311, 309, 13, 50744, 50744, 1144, 309, 5315, 293, 291, 393, 352, 281, 352, 13, 50868, 50908, 10517, 300, 311, 611, 746, 2699, 76, 3131, 727, 360, 13, 51028, 51060, 1743, 11, 1911, 11, 437, 366, 291, 884, 365, 300, 4018, 30, 51176, 51176, 4935, 309, 760, 13, 51204, 51340, 4894, 13, 51364, 51364, 509, 727, 1520, 337, 10044, 538, 4018, 412, 1935, 13, 51536, 51536, 865, 13, 51560, 51560, 286, 914, 11, 365, 283, 16740, 433, 11, 411, 983, 406, 445, 360, 257, 283, 16740, 1500, 30, 51804, 51804], "temperature": 0.0, "avg_logprob": -0.4416522979736328, "compression_ratio": 1.4688796680497926, "no_caption_prob": 8.479353709844872e-05}, {"id": 872, "seek": 402744, "start": 4041.36, "end": 4043.68, "text": " Like, Hey, what are you doing with that zero?", "tokens": [50364, 1057, 291, 643, 281, 360, 307, 2464, 257, 283, 3334, 2682, 377, 281, 652, 988, 300, 572, 3089, 11247, 257, 426, 1770, 13, 50704, 50704, 663, 311, 309, 13, 50744, 50744, 1144, 309, 5315, 293, 291, 393, 352, 281, 352, 13, 50868, 50908, 10517, 300, 311, 611, 746, 2699, 76, 3131, 727, 360, 13, 51028, 51060, 1743, 11, 1911, 11, 437, 366, 291, 884, 365, 300, 4018, 30, 51176, 51176, 4935, 309, 760, 13, 51204, 51340, 4894, 13, 51364, 51364, 509, 727, 1520, 337, 10044, 538, 4018, 412, 1935, 13, 51536, 51536, 865, 13, 51560, 51560, 286, 914, 11, 365, 283, 16740, 433, 11, 411, 983, 406, 445, 360, 257, 283, 16740, 1500, 30, 51804, 51804], "temperature": 0.0, "avg_logprob": -0.4416522979736328, "compression_ratio": 1.4688796680497926, "no_caption_prob": 8.479353709844872e-05}, {"id": 873, "seek": 402744, "start": 4043.68, "end": 4044.2400000000002, "text": " Put it down.", "tokens": [50364, 1057, 291, 643, 281, 360, 307, 2464, 257, 283, 3334, 2682, 377, 281, 652, 988, 300, 572, 3089, 11247, 257, 426, 1770, 13, 50704, 50704, 663, 311, 309, 13, 50744, 50744, 1144, 309, 5315, 293, 291, 393, 352, 281, 352, 13, 50868, 50908, 10517, 300, 311, 611, 746, 2699, 76, 3131, 727, 360, 13, 51028, 51060, 1743, 11, 1911, 11, 437, 366, 291, 884, 365, 300, 4018, 30, 51176, 51176, 4935, 309, 760, 13, 51204, 51340, 4894, 13, 51364, 51364, 509, 727, 1520, 337, 10044, 538, 4018, 412, 1935, 13, 51536, 51536, 865, 13, 51560, 51560, 286, 914, 11, 365, 283, 16740, 433, 11, 411, 983, 406, 445, 360, 257, 283, 16740, 1500, 30, 51804, 51804], "temperature": 0.0, "avg_logprob": -0.4416522979736328, "compression_ratio": 1.4688796680497926, "no_caption_prob": 8.479353709844872e-05}, {"id": 874, "seek": 402744, "start": 4046.96, "end": 4047.44, "text": " Sure.", "tokens": [50364, 1057, 291, 643, 281, 360, 307, 2464, 257, 283, 3334, 2682, 377, 281, 652, 988, 300, 572, 3089, 11247, 257, 426, 1770, 13, 50704, 50704, 663, 311, 309, 13, 50744, 50744, 1144, 309, 5315, 293, 291, 393, 352, 281, 352, 13, 50868, 50908, 10517, 300, 311, 611, 746, 2699, 76, 3131, 727, 360, 13, 51028, 51060, 1743, 11, 1911, 11, 437, 366, 291, 884, 365, 300, 4018, 30, 51176, 51176, 4935, 309, 760, 13, 51204, 51340, 4894, 13, 51364, 51364, 509, 727, 1520, 337, 10044, 538, 4018, 412, 1935, 13, 51536, 51536, 865, 13, 51560, 51560, 286, 914, 11, 365, 283, 16740, 433, 11, 411, 983, 406, 445, 360, 257, 283, 16740, 1500, 30, 51804, 51804], "temperature": 0.0, "avg_logprob": -0.4416522979736328, "compression_ratio": 1.4688796680497926, "no_caption_prob": 8.479353709844872e-05}, {"id": 875, "seek": 402744, "start": 4047.44, "end": 4050.88, "text": " You could check for division by zero at least.", "tokens": [50364, 1057, 291, 643, 281, 360, 307, 2464, 257, 283, 3334, 2682, 377, 281, 652, 988, 300, 572, 3089, 11247, 257, 426, 1770, 13, 50704, 50704, 663, 311, 309, 13, 50744, 50744, 1144, 309, 5315, 293, 291, 393, 352, 281, 352, 13, 50868, 50908, 10517, 300, 311, 611, 746, 2699, 76, 3131, 727, 360, 13, 51028, 51060, 1743, 11, 1911, 11, 437, 366, 291, 884, 365, 300, 4018, 30, 51176, 51176, 4935, 309, 760, 13, 51204, 51340, 4894, 13, 51364, 51364, 509, 727, 1520, 337, 10044, 538, 4018, 412, 1935, 13, 51536, 51536, 865, 13, 51560, 51560, 286, 914, 11, 365, 283, 16740, 433, 11, 411, 983, 406, 445, 360, 257, 283, 16740, 1500, 30, 51804, 51804], "temperature": 0.0, "avg_logprob": -0.4416522979736328, "compression_ratio": 1.4688796680497926, "no_caption_prob": 8.479353709844872e-05}, {"id": 876, "seek": 402744, "start": 4050.88, "end": 4051.36, "text": " Yeah.", "tokens": [50364, 1057, 291, 643, 281, 360, 307, 2464, 257, 283, 3334, 2682, 377, 281, 652, 988, 300, 572, 3089, 11247, 257, 426, 1770, 13, 50704, 50704, 663, 311, 309, 13, 50744, 50744, 1144, 309, 5315, 293, 291, 393, 352, 281, 352, 13, 50868, 50908, 10517, 300, 311, 611, 746, 2699, 76, 3131, 727, 360, 13, 51028, 51060, 1743, 11, 1911, 11, 437, 366, 291, 884, 365, 300, 4018, 30, 51176, 51176, 4935, 309, 760, 13, 51204, 51340, 4894, 13, 51364, 51364, 509, 727, 1520, 337, 10044, 538, 4018, 412, 1935, 13, 51536, 51536, 865, 13, 51560, 51560, 286, 914, 11, 365, 283, 16740, 433, 11, 411, 983, 406, 445, 360, 257, 283, 16740, 1500, 30, 51804, 51804], "temperature": 0.0, "avg_logprob": -0.4416522979736328, "compression_ratio": 1.4688796680497926, "no_caption_prob": 8.479353709844872e-05}, {"id": 877, "seek": 402744, "start": 4051.36, "end": 4056.2400000000002, "text": " I mean, with fuzzers, like why not just do a fuzz test?", "tokens": [50364, 1057, 291, 643, 281, 360, 307, 2464, 257, 283, 3334, 2682, 377, 281, 652, 988, 300, 572, 3089, 11247, 257, 426, 1770, 13, 50704, 50704, 663, 311, 309, 13, 50744, 50744, 1144, 309, 5315, 293, 291, 393, 352, 281, 352, 13, 50868, 50908, 10517, 300, 311, 611, 746, 2699, 76, 3131, 727, 360, 13, 51028, 51060, 1743, 11, 1911, 11, 437, 366, 291, 884, 365, 300, 4018, 30, 51176, 51176, 4935, 309, 760, 13, 51204, 51340, 4894, 13, 51364, 51364, 509, 727, 1520, 337, 10044, 538, 4018, 412, 1935, 13, 51536, 51536, 865, 13, 51560, 51560, 286, 914, 11, 365, 283, 16740, 433, 11, 411, 983, 406, 445, 360, 257, 283, 16740, 1500, 30, 51804, 51804], "temperature": 0.0, "avg_logprob": -0.4416522979736328, "compression_ratio": 1.4688796680497926, "no_caption_prob": 8.479353709844872e-05}, {"id": 878, "seek": 405624, "start": 4056.24, "end": 4059.3599999999997, "text": " Like, why not just throw more inputs at it?", "tokens": [50364, 1743, 11, 983, 406, 445, 3507, 544, 15743, 412, 309, 30, 50520, 50520, 759, 291, 393, 483, 10995, 1500, 3542, 11, 309, 311, 534, 1627, 577, 709, 1194, 291, 829, 666, 11, 50852, 50916, 291, 458, 11, 439, 295, 613, 707, 4365, 337, 11, 286, 914, 11, 4476, 341, 307, 733, 295, 264, 4195, 51312, 51312, 1752, 11, 264, 46878, 295, 283, 16740, 433, 293, 641, 13603, 293, 577, 10995, 436, 366, 13, 51592, 51592, 1779, 30, 51604, 51604], "temperature": 0.0, "avg_logprob": -0.14019157268382884, "compression_ratio": 1.522167487684729, "no_caption_prob": 2.014525671256706e-05}, {"id": 879, "seek": 405624, "start": 4059.3599999999997, "end": 4066.0, "text": " If you can get meaningful test results, it's really cool how much thought you put into,", "tokens": [50364, 1743, 11, 983, 406, 445, 3507, 544, 15743, 412, 309, 30, 50520, 50520, 759, 291, 393, 483, 10995, 1500, 3542, 11, 309, 311, 534, 1627, 577, 709, 1194, 291, 829, 666, 11, 50852, 50916, 291, 458, 11, 439, 295, 613, 707, 4365, 337, 11, 286, 914, 11, 4476, 341, 307, 733, 295, 264, 4195, 51312, 51312, 1752, 11, 264, 46878, 295, 283, 16740, 433, 293, 641, 13603, 293, 577, 10995, 436, 366, 13, 51592, 51592, 1779, 30, 51604, 51604], "temperature": 0.0, "avg_logprob": -0.14019157268382884, "compression_ratio": 1.522167487684729, "no_caption_prob": 2.014525671256706e-05}, {"id": 880, "seek": 405624, "start": 4067.2799999999997, "end": 4075.2, "text": " you know, all of these little details for, I mean, essentially this is kind of the user", "tokens": [50364, 1743, 11, 983, 406, 445, 3507, 544, 15743, 412, 309, 30, 50520, 50520, 759, 291, 393, 483, 10995, 1500, 3542, 11, 309, 311, 534, 1627, 577, 709, 1194, 291, 829, 666, 11, 50852, 50916, 291, 458, 11, 439, 295, 613, 707, 4365, 337, 11, 286, 914, 11, 4476, 341, 307, 733, 295, 264, 4195, 51312, 51312, 1752, 11, 264, 46878, 295, 283, 16740, 433, 293, 641, 13603, 293, 577, 10995, 436, 366, 13, 51592, 51592, 1779, 30, 51604, 51604], "temperature": 0.0, "avg_logprob": -0.14019157268382884, "compression_ratio": 1.522167487684729, "no_caption_prob": 2.014525671256706e-05}, {"id": 881, "seek": 405624, "start": 4075.2, "end": 4080.7999999999997, "text": " experience, the usability of fuzzers and their errors and how meaningful they are.", "tokens": [50364, 1743, 11, 983, 406, 445, 3507, 544, 15743, 412, 309, 30, 50520, 50520, 759, 291, 393, 483, 10995, 1500, 3542, 11, 309, 311, 534, 1627, 577, 709, 1194, 291, 829, 666, 11, 50852, 50916, 291, 458, 11, 439, 295, 613, 707, 4365, 337, 11, 286, 914, 11, 4476, 341, 307, 733, 295, 264, 4195, 51312, 51312, 1752, 11, 264, 46878, 295, 283, 16740, 433, 293, 641, 13603, 293, 577, 10995, 436, 366, 13, 51592, 51592, 1779, 30, 51604, 51604], "temperature": 0.0, "avg_logprob": -0.14019157268382884, "compression_ratio": 1.522167487684729, "no_caption_prob": 2.014525671256706e-05}, {"id": 882, "seek": 405624, "start": 4080.7999999999997, "end": 4081.04, "text": " Right?", "tokens": [50364, 1743, 11, 983, 406, 445, 3507, 544, 15743, 412, 309, 30, 50520, 50520, 759, 291, 393, 483, 10995, 1500, 3542, 11, 309, 311, 534, 1627, 577, 709, 1194, 291, 829, 666, 11, 50852, 50916, 291, 458, 11, 439, 295, 613, 707, 4365, 337, 11, 286, 914, 11, 4476, 341, 307, 733, 295, 264, 4195, 51312, 51312, 1752, 11, 264, 46878, 295, 283, 16740, 433, 293, 641, 13603, 293, 577, 10995, 436, 366, 13, 51592, 51592, 1779, 30, 51604, 51604], "temperature": 0.0, "avg_logprob": -0.14019157268382884, "compression_ratio": 1.522167487684729, "no_caption_prob": 2.014525671256706e-05}, {"id": 883, "seek": 408104, "start": 4081.04, "end": 4087.2799999999997, "text": " Because if you write a fuzzer that fails, then you have a failing test, but it's a question", "tokens": [50364, 1436, 498, 291, 2464, 257, 283, 3334, 4527, 300, 18199, 11, 550, 291, 362, 257, 18223, 1500, 11, 457, 309, 311, 257, 1168, 50676, 50676, 295, 577, 4420, 307, 264, 11004, 309, 311, 1075, 281, 976, 291, 341, 26335, 2158, 13, 50932, 50932, 865, 13, 50952, 50952, 865, 13, 50964, 51008, 286, 519, 341, 307, 411, 264, 2182, 1622, 516, 807, 264, 1379, 4374, 11, 411, 1455, 1507, 22842, 51352, 51352, 337, 264, 4195, 293, 411, 2902, 291, 544, 1347, 11, 457, 611, 2902, 291, 1101, 3542, 13, 51668, 51668, 865, 13, 51680, 51712, 1779, 13, 51728, 51728], "temperature": 0.0, "avg_logprob": -0.11661028861999512, "compression_ratio": 1.6545454545454545, "no_caption_prob": 2.1781757823191583e-05}, {"id": 884, "seek": 408104, "start": 4087.2799999999997, "end": 4092.4, "text": " of how useful is the reduction it's able to give you this simplified value.", "tokens": [50364, 1436, 498, 291, 2464, 257, 283, 3334, 4527, 300, 18199, 11, 550, 291, 362, 257, 18223, 1500, 11, 457, 309, 311, 257, 1168, 50676, 50676, 295, 577, 4420, 307, 264, 11004, 309, 311, 1075, 281, 976, 291, 341, 26335, 2158, 13, 50932, 50932, 865, 13, 50952, 50952, 865, 13, 50964, 51008, 286, 519, 341, 307, 411, 264, 2182, 1622, 516, 807, 264, 1379, 4374, 11, 411, 1455, 1507, 22842, 51352, 51352, 337, 264, 4195, 293, 411, 2902, 291, 544, 1347, 11, 457, 611, 2902, 291, 1101, 3542, 13, 51668, 51668, 865, 13, 51680, 51712, 1779, 13, 51728, 51728], "temperature": 0.0, "avg_logprob": -0.11661028861999512, "compression_ratio": 1.6545454545454545, "no_caption_prob": 2.1781757823191583e-05}, {"id": 885, "seek": 408104, "start": 4092.4, "end": 4092.8, "text": " Yeah.", "tokens": [50364, 1436, 498, 291, 2464, 257, 283, 3334, 4527, 300, 18199, 11, 550, 291, 362, 257, 18223, 1500, 11, 457, 309, 311, 257, 1168, 50676, 50676, 295, 577, 4420, 307, 264, 11004, 309, 311, 1075, 281, 976, 291, 341, 26335, 2158, 13, 50932, 50932, 865, 13, 50952, 50952, 865, 13, 50964, 51008, 286, 519, 341, 307, 411, 264, 2182, 1622, 516, 807, 264, 1379, 4374, 11, 411, 1455, 1507, 22842, 51352, 51352, 337, 264, 4195, 293, 411, 2902, 291, 544, 1347, 11, 457, 611, 2902, 291, 1101, 3542, 13, 51668, 51668, 865, 13, 51680, 51712, 1779, 13, 51728, 51728], "temperature": 0.0, "avg_logprob": -0.11661028861999512, "compression_ratio": 1.6545454545454545, "no_caption_prob": 2.1781757823191583e-05}, {"id": 886, "seek": 408104, "start": 4092.8, "end": 4093.04, "text": " Yeah.", "tokens": [50364, 1436, 498, 291, 2464, 257, 283, 3334, 4527, 300, 18199, 11, 550, 291, 362, 257, 18223, 1500, 11, 457, 309, 311, 257, 1168, 50676, 50676, 295, 577, 4420, 307, 264, 11004, 309, 311, 1075, 281, 976, 291, 341, 26335, 2158, 13, 50932, 50932, 865, 13, 50952, 50952, 865, 13, 50964, 51008, 286, 519, 341, 307, 411, 264, 2182, 1622, 516, 807, 264, 1379, 4374, 11, 411, 1455, 1507, 22842, 51352, 51352, 337, 264, 4195, 293, 411, 2902, 291, 544, 1347, 11, 457, 611, 2902, 291, 1101, 3542, 13, 51668, 51668, 865, 13, 51680, 51712, 1779, 13, 51728, 51728], "temperature": 0.0, "avg_logprob": -0.11661028861999512, "compression_ratio": 1.6545454545454545, "no_caption_prob": 2.1781757823191583e-05}, {"id": 887, "seek": 408104, "start": 4093.92, "end": 4100.8, "text": " I think this is like the red line going through the whole release, like making stuff nicer", "tokens": [50364, 1436, 498, 291, 2464, 257, 283, 3334, 4527, 300, 18199, 11, 550, 291, 362, 257, 18223, 1500, 11, 457, 309, 311, 257, 1168, 50676, 50676, 295, 577, 4420, 307, 264, 11004, 309, 311, 1075, 281, 976, 291, 341, 26335, 2158, 13, 50932, 50932, 865, 13, 50952, 50952, 865, 13, 50964, 51008, 286, 519, 341, 307, 411, 264, 2182, 1622, 516, 807, 264, 1379, 4374, 11, 411, 1455, 1507, 22842, 51352, 51352, 337, 264, 4195, 293, 411, 2902, 291, 544, 1347, 11, 457, 611, 2902, 291, 1101, 3542, 13, 51668, 51668, 865, 13, 51680, 51712, 1779, 13, 51728, 51728], "temperature": 0.0, "avg_logprob": -0.11661028861999512, "compression_ratio": 1.6545454545454545, "no_caption_prob": 2.1781757823191583e-05}, {"id": 888, "seek": 408104, "start": 4100.8, "end": 4107.12, "text": " for the user and like giving you more power, but also giving you better results.", "tokens": [50364, 1436, 498, 291, 2464, 257, 283, 3334, 4527, 300, 18199, 11, 550, 291, 362, 257, 18223, 1500, 11, 457, 309, 311, 257, 1168, 50676, 50676, 295, 577, 4420, 307, 264, 11004, 309, 311, 1075, 281, 976, 291, 341, 26335, 2158, 13, 50932, 50932, 865, 13, 50952, 50952, 865, 13, 50964, 51008, 286, 519, 341, 307, 411, 264, 2182, 1622, 516, 807, 264, 1379, 4374, 11, 411, 1455, 1507, 22842, 51352, 51352, 337, 264, 4195, 293, 411, 2902, 291, 544, 1347, 11, 457, 611, 2902, 291, 1101, 3542, 13, 51668, 51668, 865, 13, 51680, 51712, 1779, 13, 51728, 51728], "temperature": 0.0, "avg_logprob": -0.11661028861999512, "compression_ratio": 1.6545454545454545, "no_caption_prob": 2.1781757823191583e-05}, {"id": 889, "seek": 408104, "start": 4107.12, "end": 4107.36, "text": " Yeah.", "tokens": [50364, 1436, 498, 291, 2464, 257, 283, 3334, 4527, 300, 18199, 11, 550, 291, 362, 257, 18223, 1500, 11, 457, 309, 311, 257, 1168, 50676, 50676, 295, 577, 4420, 307, 264, 11004, 309, 311, 1075, 281, 976, 291, 341, 26335, 2158, 13, 50932, 50932, 865, 13, 50952, 50952, 865, 13, 50964, 51008, 286, 519, 341, 307, 411, 264, 2182, 1622, 516, 807, 264, 1379, 4374, 11, 411, 1455, 1507, 22842, 51352, 51352, 337, 264, 4195, 293, 411, 2902, 291, 544, 1347, 11, 457, 611, 2902, 291, 1101, 3542, 13, 51668, 51668, 865, 13, 51680, 51712, 1779, 13, 51728, 51728], "temperature": 0.0, "avg_logprob": -0.11661028861999512, "compression_ratio": 1.6545454545454545, "no_caption_prob": 2.1781757823191583e-05}, {"id": 890, "seek": 408104, "start": 4108.0, "end": 4108.32, "text": " Right.", "tokens": [50364, 1436, 498, 291, 2464, 257, 283, 3334, 4527, 300, 18199, 11, 550, 291, 362, 257, 18223, 1500, 11, 457, 309, 311, 257, 1168, 50676, 50676, 295, 577, 4420, 307, 264, 11004, 309, 311, 1075, 281, 976, 291, 341, 26335, 2158, 13, 50932, 50932, 865, 13, 50952, 50952, 865, 13, 50964, 51008, 286, 519, 341, 307, 411, 264, 2182, 1622, 516, 807, 264, 1379, 4374, 11, 411, 1455, 1507, 22842, 51352, 51352, 337, 264, 4195, 293, 411, 2902, 291, 544, 1347, 11, 457, 611, 2902, 291, 1101, 3542, 13, 51668, 51668, 865, 13, 51680, 51712, 1779, 13, 51728, 51728], "temperature": 0.0, "avg_logprob": -0.11661028861999512, "compression_ratio": 1.6545454545454545, "no_caption_prob": 2.1781757823191583e-05}, {"id": 891, "seek": 410832, "start": 4108.32, "end": 4116.16, "text": " And making it map more intuitively and yeah, this definitely is giving me a lot of motivation", "tokens": [50364, 400, 1455, 309, 4471, 544, 46506, 293, 1338, 11, 341, 2138, 307, 2902, 385, 257, 688, 295, 12335, 50756, 50756, 281, 411, 3507, 512, 544, 283, 16740, 433, 294, 452, 4455, 13, 50904, 50936, 286, 2138, 362, 512, 11, 457, 286, 841, 300, 286, 478, 406, 884, 257, 665, 1547, 1691, 16696, 729, 51244, 51244, 4786, 293, 5145, 452, 3313, 484, 337, 689, 286, 643, 281, 1500, 257, 4707, 293, 689, 309, 576, 51540, 51540, 312, 4961, 281, 362, 257, 688, 295, 15743, 4057, 2640, 11, 597, 456, 366, 534, 257, 688, 295, 3331, 13, 51768, 51768], "temperature": 0.0, "avg_logprob": -0.051793387441924126, "compression_ratio": 1.6254980079681276, "no_caption_prob": 9.818162652663887e-06}, {"id": 892, "seek": 410832, "start": 4116.16, "end": 4119.12, "text": " to like throw some more fuzzers in my projects.", "tokens": [50364, 400, 1455, 309, 4471, 544, 46506, 293, 1338, 11, 341, 2138, 307, 2902, 385, 257, 688, 295, 12335, 50756, 50756, 281, 411, 3507, 512, 544, 283, 16740, 433, 294, 452, 4455, 13, 50904, 50936, 286, 2138, 362, 512, 11, 457, 286, 841, 300, 286, 478, 406, 884, 257, 665, 1547, 1691, 16696, 729, 51244, 51244, 4786, 293, 5145, 452, 3313, 484, 337, 689, 286, 643, 281, 1500, 257, 4707, 293, 689, 309, 576, 51540, 51540, 312, 4961, 281, 362, 257, 688, 295, 15743, 4057, 2640, 11, 597, 456, 366, 534, 257, 688, 295, 3331, 13, 51768, 51768], "temperature": 0.0, "avg_logprob": -0.051793387441924126, "compression_ratio": 1.6254980079681276, "no_caption_prob": 9.818162652663887e-06}, {"id": 893, "seek": 410832, "start": 4119.759999999999, "end": 4125.92, "text": " I definitely have some, but I feel that I'm not doing a good enough job identifying those", "tokens": [50364, 400, 1455, 309, 4471, 544, 46506, 293, 1338, 11, 341, 2138, 307, 2902, 385, 257, 688, 295, 12335, 50756, 50756, 281, 411, 3507, 512, 544, 283, 16740, 433, 294, 452, 4455, 13, 50904, 50936, 286, 2138, 362, 512, 11, 457, 286, 841, 300, 286, 478, 406, 884, 257, 665, 1547, 1691, 16696, 729, 51244, 51244, 4786, 293, 5145, 452, 3313, 484, 337, 689, 286, 643, 281, 1500, 257, 4707, 293, 689, 309, 576, 51540, 51540, 312, 4961, 281, 362, 257, 688, 295, 15743, 4057, 2640, 11, 597, 456, 366, 534, 257, 688, 295, 3331, 13, 51768, 51768], "temperature": 0.0, "avg_logprob": -0.051793387441924126, "compression_ratio": 1.6254980079681276, "no_caption_prob": 9.818162652663887e-06}, {"id": 894, "seek": 410832, "start": 4125.92, "end": 4131.84, "text": " opportunities and keeping my eye out for where I need to test a property and where it would", "tokens": [50364, 400, 1455, 309, 4471, 544, 46506, 293, 1338, 11, 341, 2138, 307, 2902, 385, 257, 688, 295, 12335, 50756, 50756, 281, 411, 3507, 512, 544, 283, 16740, 433, 294, 452, 4455, 13, 50904, 50936, 286, 2138, 362, 512, 11, 457, 286, 841, 300, 286, 478, 406, 884, 257, 665, 1547, 1691, 16696, 729, 51244, 51244, 4786, 293, 5145, 452, 3313, 484, 337, 689, 286, 643, 281, 1500, 257, 4707, 293, 689, 309, 576, 51540, 51540, 312, 4961, 281, 362, 257, 688, 295, 15743, 4057, 2640, 11, 597, 456, 366, 534, 257, 688, 295, 3331, 13, 51768, 51768], "temperature": 0.0, "avg_logprob": -0.051793387441924126, "compression_ratio": 1.6254980079681276, "no_caption_prob": 9.818162652663887e-06}, {"id": 895, "seek": 410832, "start": 4131.84, "end": 4136.4, "text": " be helpful to have a lot of inputs exercised, which there are really a lot of cases.", "tokens": [50364, 400, 1455, 309, 4471, 544, 46506, 293, 1338, 11, 341, 2138, 307, 2902, 385, 257, 688, 295, 12335, 50756, 50756, 281, 411, 3507, 512, 544, 283, 16740, 433, 294, 452, 4455, 13, 50904, 50936, 286, 2138, 362, 512, 11, 457, 286, 841, 300, 286, 478, 406, 884, 257, 665, 1547, 1691, 16696, 729, 51244, 51244, 4786, 293, 5145, 452, 3313, 484, 337, 689, 286, 643, 281, 1500, 257, 4707, 293, 689, 309, 576, 51540, 51540, 312, 4961, 281, 362, 257, 688, 295, 15743, 4057, 2640, 11, 597, 456, 366, 534, 257, 688, 295, 3331, 13, 51768, 51768], "temperature": 0.0, "avg_logprob": -0.051793387441924126, "compression_ratio": 1.6254980079681276, "no_caption_prob": 9.818162652663887e-06}, {"id": 896, "seek": 413640, "start": 4136.4, "end": 4144.639999999999, "text": " Most of my tests are Elm review tests, so I would have to generate some Elm code and", "tokens": [50364, 4534, 295, 452, 6921, 366, 2699, 76, 3131, 6921, 11, 370, 286, 576, 362, 281, 8460, 512, 2699, 76, 3089, 293, 50776, 50776, 550, 286, 576, 362, 281, 652, 988, 300, 309, 311, 7122, 364, 6713, 294, 341, 733, 295, 1389, 13, 51008, 51008, 1743, 11, 1338, 11, 286, 841, 411, 283, 16740, 433, 366, 588, 6854, 456, 11, 457, 286, 727, 1466, 746, 13, 51372, 51372, 286, 727, 3811, 283, 16740, 4997, 365, 2699, 76, 3131, 689, 291, 727, 584, 746, 411, 11, 291, 458, 11, 51680, 51680], "temperature": 0.0, "avg_logprob": -0.1306295394897461, "compression_ratio": 1.6699029126213591, "no_caption_prob": 3.535385985742323e-05}, {"id": 897, "seek": 413640, "start": 4144.639999999999, "end": 4149.28, "text": " then I would have to make sure that it's reports an error in this kind of case.", "tokens": [50364, 4534, 295, 452, 6921, 366, 2699, 76, 3131, 6921, 11, 370, 286, 576, 362, 281, 8460, 512, 2699, 76, 3089, 293, 50776, 50776, 550, 286, 576, 362, 281, 652, 988, 300, 309, 311, 7122, 364, 6713, 294, 341, 733, 295, 1389, 13, 51008, 51008, 1743, 11, 1338, 11, 286, 841, 411, 283, 16740, 433, 366, 588, 6854, 456, 11, 457, 286, 727, 1466, 746, 13, 51372, 51372, 286, 727, 3811, 283, 16740, 4997, 365, 2699, 76, 3131, 689, 291, 727, 584, 746, 411, 11, 291, 458, 11, 51680, 51680], "temperature": 0.0, "avg_logprob": -0.1306295394897461, "compression_ratio": 1.6699029126213591, "no_caption_prob": 3.535385985742323e-05}, {"id": 898, "seek": 413640, "start": 4149.28, "end": 4156.5599999999995, "text": " Like, yeah, I feel like fuzzers are very appropriate there, but I could learn something.", "tokens": [50364, 4534, 295, 452, 6921, 366, 2699, 76, 3131, 6921, 11, 370, 286, 576, 362, 281, 8460, 512, 2699, 76, 3089, 293, 50776, 50776, 550, 286, 576, 362, 281, 652, 988, 300, 309, 311, 7122, 364, 6713, 294, 341, 733, 295, 1389, 13, 51008, 51008, 1743, 11, 1338, 11, 286, 841, 411, 283, 16740, 433, 366, 588, 6854, 456, 11, 457, 286, 727, 1466, 746, 13, 51372, 51372, 286, 727, 3811, 283, 16740, 4997, 365, 2699, 76, 3131, 689, 291, 727, 584, 746, 411, 11, 291, 458, 11, 51680, 51680], "temperature": 0.0, "avg_logprob": -0.1306295394897461, "compression_ratio": 1.6699029126213591, "no_caption_prob": 3.535385985742323e-05}, {"id": 899, "seek": 413640, "start": 4156.5599999999995, "end": 4162.719999999999, "text": " I could imagine fuzz testing with Elm review where you could say something like, you know,", "tokens": [50364, 4534, 295, 452, 6921, 366, 2699, 76, 3131, 6921, 11, 370, 286, 576, 362, 281, 8460, 512, 2699, 76, 3089, 293, 50776, 50776, 550, 286, 576, 362, 281, 652, 988, 300, 309, 311, 7122, 364, 6713, 294, 341, 733, 295, 1389, 13, 51008, 51008, 1743, 11, 1338, 11, 286, 841, 411, 283, 16740, 433, 366, 588, 6854, 456, 11, 457, 286, 727, 1466, 746, 13, 51372, 51372, 286, 727, 3811, 283, 16740, 4997, 365, 2699, 76, 3131, 689, 291, 727, 584, 746, 411, 11, 291, 458, 11, 51680, 51680], "temperature": 0.0, "avg_logprob": -0.1306295394897461, "compression_ratio": 1.6699029126213591, "no_caption_prob": 3.535385985742323e-05}, {"id": 900, "seek": 416272, "start": 4162.72, "end": 4171.12, "text": " with import as, and then you use that import as to generate your strings.", "tokens": [50364, 365, 974, 382, 11, 293, 550, 291, 764, 300, 974, 382, 281, 8460, 428, 13985, 13, 50784, 50784, 407, 291, 764, 257, 10088, 257, 1629, 636, 570, 411, 2049, 300, 311, 746, 286, 603, 1713, 294, 2699, 76, 51040, 51040, 3131, 32539, 420, 4474, 307, 286, 1582, 380, 1520, 337, 257, 1152, 34874, 10088, 293, 1310, 360, 32539, 365, 51452, 51452, 300, 1152, 34874, 10088, 420, 1553, 8568, 264, 636, 309, 311, 25524, 13, 51660, 51660], "temperature": 0.0, "avg_logprob": -0.09138189829312839, "compression_ratio": 1.638743455497382, "no_caption_prob": 8.939445251598954e-06}, {"id": 901, "seek": 416272, "start": 4171.12, "end": 4176.240000000001, "text": " So you use a module a certain way because like often that's something I'll miss in Elm", "tokens": [50364, 365, 974, 382, 11, 293, 550, 291, 764, 300, 974, 382, 281, 8460, 428, 13985, 13, 50784, 50784, 407, 291, 764, 257, 10088, 257, 1629, 636, 570, 411, 2049, 300, 311, 746, 286, 603, 1713, 294, 2699, 76, 51040, 51040, 3131, 32539, 420, 4474, 307, 286, 1582, 380, 1520, 337, 257, 1152, 34874, 10088, 293, 1310, 360, 32539, 365, 51452, 51452, 300, 1152, 34874, 10088, 420, 1553, 8568, 264, 636, 309, 311, 25524, 13, 51660, 51660], "temperature": 0.0, "avg_logprob": -0.09138189829312839, "compression_ratio": 1.638743455497382, "no_caption_prob": 8.939445251598954e-06}, {"id": 902, "seek": 416272, "start": 4176.240000000001, "end": 4184.4800000000005, "text": " review fixes or rules is I won't check for a hard coded module and maybe do fixes with", "tokens": [50364, 365, 974, 382, 11, 293, 550, 291, 764, 300, 974, 382, 281, 8460, 428, 13985, 13, 50784, 50784, 407, 291, 764, 257, 10088, 257, 1629, 636, 570, 411, 2049, 300, 311, 746, 286, 603, 1713, 294, 2699, 76, 51040, 51040, 3131, 32539, 420, 4474, 307, 286, 1582, 380, 1520, 337, 257, 1152, 34874, 10088, 293, 1310, 360, 32539, 365, 51452, 51452, 300, 1152, 34874, 10088, 420, 1553, 8568, 264, 636, 309, 311, 25524, 13, 51660, 51660], "temperature": 0.0, "avg_logprob": -0.09138189829312839, "compression_ratio": 1.638743455497382, "no_caption_prob": 8.939445251598954e-06}, {"id": 903, "seek": 416272, "start": 4184.4800000000005, "end": 4188.64, "text": " that hard coded module or without checking the way it's imported.", "tokens": [50364, 365, 974, 382, 11, 293, 550, 291, 764, 300, 974, 382, 281, 8460, 428, 13985, 13, 50784, 50784, 407, 291, 764, 257, 10088, 257, 1629, 636, 570, 411, 2049, 300, 311, 746, 286, 603, 1713, 294, 2699, 76, 51040, 51040, 3131, 32539, 420, 4474, 307, 286, 1582, 380, 1520, 337, 257, 1152, 34874, 10088, 293, 1310, 360, 32539, 365, 51452, 51452, 300, 1152, 34874, 10088, 420, 1553, 8568, 264, 636, 309, 311, 25524, 13, 51660, 51660], "temperature": 0.0, "avg_logprob": -0.09138189829312839, "compression_ratio": 1.638743455497382, "no_caption_prob": 8.939445251598954e-06}, {"id": 904, "seek": 418864, "start": 4188.64, "end": 4194.72, "text": " So if you fuzz that, you know, that would be the challenge is now, you know, you have", "tokens": [50364, 407, 498, 291, 283, 16740, 300, 11, 291, 458, 11, 300, 576, 312, 264, 3430, 307, 586, 11, 291, 458, 11, 291, 362, 50668, 50668, 281, 2464, 264, 6921, 293, 14732, 300, 2602, 295, 445, 3579, 257, 1152, 34874, 6798, 13, 50868, 50868, 407, 456, 311, 3297, 257, 4923, 766, 456, 13, 50948, 50980, 2743, 2699, 76, 3131, 8962, 291, 281, 2464, 264, 5176, 6806, 3089, 13, 51244, 51244, 407, 291, 576, 611, 362, 281, 8460, 300, 2361, 322, 264, 912, 4846, 13, 51428, 51428, 407, 1936, 291, 434, 29956, 278, 341, 11, 264, 11420, 13, 51600, 51600], "temperature": 0.0, "avg_logprob": -0.09094674110412598, "compression_ratio": 1.6695652173913043, "no_caption_prob": 7.527848993049702e-06}, {"id": 905, "seek": 418864, "start": 4194.72, "end": 4198.72, "text": " to write the tests and consume that instead of just writing a hard coded string.", "tokens": [50364, 407, 498, 291, 283, 16740, 300, 11, 291, 458, 11, 300, 576, 312, 264, 3430, 307, 586, 11, 291, 458, 11, 291, 362, 50668, 50668, 281, 2464, 264, 6921, 293, 14732, 300, 2602, 295, 445, 3579, 257, 1152, 34874, 6798, 13, 50868, 50868, 407, 456, 311, 3297, 257, 4923, 766, 456, 13, 50948, 50980, 2743, 2699, 76, 3131, 8962, 291, 281, 2464, 264, 5176, 6806, 3089, 13, 51244, 51244, 407, 291, 576, 611, 362, 281, 8460, 300, 2361, 322, 264, 912, 4846, 13, 51428, 51428, 407, 1936, 291, 434, 29956, 278, 341, 11, 264, 11420, 13, 51600, 51600], "temperature": 0.0, "avg_logprob": -0.09094674110412598, "compression_ratio": 1.6695652173913043, "no_caption_prob": 7.527848993049702e-06}, {"id": 906, "seek": 418864, "start": 4198.72, "end": 4200.320000000001, "text": " So there's certainly a trade off there.", "tokens": [50364, 407, 498, 291, 283, 16740, 300, 11, 291, 458, 11, 300, 576, 312, 264, 3430, 307, 586, 11, 291, 458, 11, 291, 362, 50668, 50668, 281, 2464, 264, 6921, 293, 14732, 300, 2602, 295, 445, 3579, 257, 1152, 34874, 6798, 13, 50868, 50868, 407, 456, 311, 3297, 257, 4923, 766, 456, 13, 50948, 50980, 2743, 2699, 76, 3131, 8962, 291, 281, 2464, 264, 5176, 6806, 3089, 13, 51244, 51244, 407, 291, 576, 611, 362, 281, 8460, 300, 2361, 322, 264, 912, 4846, 13, 51428, 51428, 407, 1936, 291, 434, 29956, 278, 341, 11, 264, 11420, 13, 51600, 51600], "temperature": 0.0, "avg_logprob": -0.09094674110412598, "compression_ratio": 1.6695652173913043, "no_caption_prob": 7.527848993049702e-06}, {"id": 907, "seek": 418864, "start": 4200.96, "end": 4206.240000000001, "text": " Also Elm review asks you to write the expected fixed code.", "tokens": [50364, 407, 498, 291, 283, 16740, 300, 11, 291, 458, 11, 300, 576, 312, 264, 3430, 307, 586, 11, 291, 458, 11, 291, 362, 50668, 50668, 281, 2464, 264, 6921, 293, 14732, 300, 2602, 295, 445, 3579, 257, 1152, 34874, 6798, 13, 50868, 50868, 407, 456, 311, 3297, 257, 4923, 766, 456, 13, 50948, 50980, 2743, 2699, 76, 3131, 8962, 291, 281, 2464, 264, 5176, 6806, 3089, 13, 51244, 51244, 407, 291, 576, 611, 362, 281, 8460, 300, 2361, 322, 264, 912, 4846, 13, 51428, 51428, 407, 1936, 291, 434, 29956, 278, 341, 11, 264, 11420, 13, 51600, 51600], "temperature": 0.0, "avg_logprob": -0.09094674110412598, "compression_ratio": 1.6695652173913043, "no_caption_prob": 7.527848993049702e-06}, {"id": 908, "seek": 418864, "start": 4206.240000000001, "end": 4209.92, "text": " So you would also have to generate that based on the same input.", "tokens": [50364, 407, 498, 291, 283, 16740, 300, 11, 291, 458, 11, 300, 576, 312, 264, 3430, 307, 586, 11, 291, 458, 11, 291, 362, 50668, 50668, 281, 2464, 264, 6921, 293, 14732, 300, 2602, 295, 445, 3579, 257, 1152, 34874, 6798, 13, 50868, 50868, 407, 456, 311, 3297, 257, 4923, 766, 456, 13, 50948, 50980, 2743, 2699, 76, 3131, 8962, 291, 281, 2464, 264, 5176, 6806, 3089, 13, 51244, 51244, 407, 291, 576, 611, 362, 281, 8460, 300, 2361, 322, 264, 912, 4846, 13, 51428, 51428, 407, 1936, 291, 434, 29956, 278, 341, 11, 264, 11420, 13, 51600, 51600], "temperature": 0.0, "avg_logprob": -0.09094674110412598, "compression_ratio": 1.6695652173913043, "no_caption_prob": 7.527848993049702e-06}, {"id": 909, "seek": 418864, "start": 4209.92, "end": 4213.360000000001, "text": " So basically you're redoing this, the implementation.", "tokens": [50364, 407, 498, 291, 283, 16740, 300, 11, 291, 458, 11, 300, 576, 312, 264, 3430, 307, 586, 11, 291, 458, 11, 291, 362, 50668, 50668, 281, 2464, 264, 6921, 293, 14732, 300, 2602, 295, 445, 3579, 257, 1152, 34874, 6798, 13, 50868, 50868, 407, 456, 311, 3297, 257, 4923, 766, 456, 13, 50948, 50980, 2743, 2699, 76, 3131, 8962, 291, 281, 2464, 264, 5176, 6806, 3089, 13, 51244, 51244, 407, 291, 576, 611, 362, 281, 8460, 300, 2361, 322, 264, 912, 4846, 13, 51428, 51428, 407, 1936, 291, 434, 29956, 278, 341, 11, 264, 11420, 13, 51600, 51600], "temperature": 0.0, "avg_logprob": -0.09094674110412598, "compression_ratio": 1.6695652173913043, "no_caption_prob": 7.527848993049702e-06}, {"id": 910, "seek": 421336, "start": 4213.36, "end": 4220.48, "text": " Yeah, that's always the issue of like, how do you stop from just writing the implementation", "tokens": [50364, 865, 11, 300, 311, 1009, 264, 2734, 295, 411, 11, 577, 360, 291, 1590, 490, 445, 3579, 264, 11420, 50720, 50720, 294, 264, 1500, 30, 50756, 50756, 865, 13, 50768, 50820, 400, 300, 311, 733, 295, 11, 733, 295, 534, 264, 472, 12414, 551, 466, 4707, 2361, 6921, 11, 411, 51104, 51104, 1953, 295, 264, 7221, 293, 456, 311, 364, 3476, 6968, 2183, 13, 51392, 51468, 286, 393, 380, 9901, 264, 3793, 11, 457, 309, 311, 466, 4707, 2361, 6921, 294, 479, 8199, 13, 51768, 51768], "temperature": 0.0, "avg_logprob": -0.14216291904449463, "compression_ratio": 1.6502463054187193, "no_caption_prob": 2.3915870769997127e-05}, {"id": 911, "seek": 421336, "start": 4220.48, "end": 4221.2, "text": " in the test?", "tokens": [50364, 865, 11, 300, 311, 1009, 264, 2734, 295, 411, 11, 577, 360, 291, 1590, 490, 445, 3579, 264, 11420, 50720, 50720, 294, 264, 1500, 30, 50756, 50756, 865, 13, 50768, 50820, 400, 300, 311, 733, 295, 11, 733, 295, 534, 264, 472, 12414, 551, 466, 4707, 2361, 6921, 11, 411, 51104, 51104, 1953, 295, 264, 7221, 293, 456, 311, 364, 3476, 6968, 2183, 13, 51392, 51468, 286, 393, 380, 9901, 264, 3793, 11, 457, 309, 311, 466, 4707, 2361, 6921, 294, 479, 8199, 13, 51768, 51768], "temperature": 0.0, "avg_logprob": -0.14216291904449463, "compression_ratio": 1.6502463054187193, "no_caption_prob": 2.3915870769997127e-05}, {"id": 912, "seek": 421336, "start": 4221.2, "end": 4221.44, "text": " Yeah.", "tokens": [50364, 865, 11, 300, 311, 1009, 264, 2734, 295, 411, 11, 577, 360, 291, 1590, 490, 445, 3579, 264, 11420, 50720, 50720, 294, 264, 1500, 30, 50756, 50756, 865, 13, 50768, 50820, 400, 300, 311, 733, 295, 11, 733, 295, 534, 264, 472, 12414, 551, 466, 4707, 2361, 6921, 11, 411, 51104, 51104, 1953, 295, 264, 7221, 293, 456, 311, 364, 3476, 6968, 2183, 13, 51392, 51468, 286, 393, 380, 9901, 264, 3793, 11, 457, 309, 311, 466, 4707, 2361, 6921, 294, 479, 8199, 13, 51768, 51768], "temperature": 0.0, "avg_logprob": -0.14216291904449463, "compression_ratio": 1.6502463054187193, "no_caption_prob": 2.3915870769997127e-05}, {"id": 913, "seek": 421336, "start": 4222.48, "end": 4228.16, "text": " And that's kind of, kind of really the one tricky thing about property based tests, like", "tokens": [50364, 865, 11, 300, 311, 1009, 264, 2734, 295, 411, 11, 577, 360, 291, 1590, 490, 445, 3579, 264, 11420, 50720, 50720, 294, 264, 1500, 30, 50756, 50756, 865, 13, 50768, 50820, 400, 300, 311, 733, 295, 11, 733, 295, 534, 264, 472, 12414, 551, 466, 4707, 2361, 6921, 11, 411, 51104, 51104, 1953, 295, 264, 7221, 293, 456, 311, 364, 3476, 6968, 2183, 13, 51392, 51468, 286, 393, 380, 9901, 264, 3793, 11, 457, 309, 311, 466, 4707, 2361, 6921, 294, 479, 8199, 13, 51768, 51768], "temperature": 0.0, "avg_logprob": -0.14216291904449463, "compression_ratio": 1.6502463054187193, "no_caption_prob": 2.3915870769997127e-05}, {"id": 914, "seek": 421336, "start": 4228.16, "end": 4233.92, "text": " thinking of the properties and there's an awesome blog post.", "tokens": [50364, 865, 11, 300, 311, 1009, 264, 2734, 295, 411, 11, 577, 360, 291, 1590, 490, 445, 3579, 264, 11420, 50720, 50720, 294, 264, 1500, 30, 50756, 50756, 865, 13, 50768, 50820, 400, 300, 311, 733, 295, 11, 733, 295, 534, 264, 472, 12414, 551, 466, 4707, 2361, 6921, 11, 411, 51104, 51104, 1953, 295, 264, 7221, 293, 456, 311, 364, 3476, 6968, 2183, 13, 51392, 51468, 286, 393, 380, 9901, 264, 3793, 11, 457, 309, 311, 466, 4707, 2361, 6921, 294, 479, 8199, 13, 51768, 51768], "temperature": 0.0, "avg_logprob": -0.14216291904449463, "compression_ratio": 1.6502463054187193, "no_caption_prob": 2.3915870769997127e-05}, {"id": 915, "seek": 421336, "start": 4235.44, "end": 4241.44, "text": " I can't recall the author, but it's about property based tests in F sharp.", "tokens": [50364, 865, 11, 300, 311, 1009, 264, 2734, 295, 411, 11, 577, 360, 291, 1590, 490, 445, 3579, 264, 11420, 50720, 50720, 294, 264, 1500, 30, 50756, 50756, 865, 13, 50768, 50820, 400, 300, 311, 733, 295, 11, 733, 295, 534, 264, 472, 12414, 551, 466, 4707, 2361, 6921, 11, 411, 51104, 51104, 1953, 295, 264, 7221, 293, 456, 311, 364, 3476, 6968, 2183, 13, 51392, 51468, 286, 393, 380, 9901, 264, 3793, 11, 457, 309, 311, 466, 4707, 2361, 6921, 294, 479, 8199, 13, 51768, 51768], "temperature": 0.0, "avg_logprob": -0.14216291904449463, "compression_ratio": 1.6502463054187193, "no_caption_prob": 2.3915870769997127e-05}, {"id": 916, "seek": 424144, "start": 4241.44, "end": 4245.759999999999, "text": " I think it is like F sharp for fun and profit is the name of the blog.", "tokens": [50364, 286, 519, 309, 307, 411, 479, 8199, 337, 1019, 293, 7475, 307, 264, 1315, 295, 264, 6968, 13, 50580, 50580, 876, 11, 6659, 343, 1124, 71, 13, 50644, 50644, 876, 1338, 13, 50668, 50768, 407, 415, 575, 512, 869, 6968, 12300, 466, 437, 3467, 295, 7221, 366, 456, 11, 558, 30, 51044, 51044, 407, 456, 311, 341, 411, 18894, 6064, 13, 51188, 51188, 509, 393, 1520, 300, 411, 724, 2029, 364, 6707, 6798, 281, 1340, 486, 312, 300, 6798, 293, 51500, 51500, 370, 322, 13, 51524, 51524], "temperature": 0.0, "avg_logprob": -0.18770747238330626, "compression_ratio": 1.5121951219512195, "no_caption_prob": 3.534654024406336e-05}, {"id": 917, "seek": 424144, "start": 4245.759999999999, "end": 4247.04, "text": " Oh, Scott Walsh.", "tokens": [50364, 286, 519, 309, 307, 411, 479, 8199, 337, 1019, 293, 7475, 307, 264, 1315, 295, 264, 6968, 13, 50580, 50580, 876, 11, 6659, 343, 1124, 71, 13, 50644, 50644, 876, 1338, 13, 50668, 50768, 407, 415, 575, 512, 869, 6968, 12300, 466, 437, 3467, 295, 7221, 366, 456, 11, 558, 30, 51044, 51044, 407, 456, 311, 341, 411, 18894, 6064, 13, 51188, 51188, 509, 393, 1520, 300, 411, 724, 2029, 364, 6707, 6798, 281, 1340, 486, 312, 300, 6798, 293, 51500, 51500, 370, 322, 13, 51524, 51524], "temperature": 0.0, "avg_logprob": -0.18770747238330626, "compression_ratio": 1.5121951219512195, "no_caption_prob": 3.534654024406336e-05}, {"id": 918, "seek": 424144, "start": 4247.04, "end": 4247.5199999999995, "text": " Oh yeah.", "tokens": [50364, 286, 519, 309, 307, 411, 479, 8199, 337, 1019, 293, 7475, 307, 264, 1315, 295, 264, 6968, 13, 50580, 50580, 876, 11, 6659, 343, 1124, 71, 13, 50644, 50644, 876, 1338, 13, 50668, 50768, 407, 415, 575, 512, 869, 6968, 12300, 466, 437, 3467, 295, 7221, 366, 456, 11, 558, 30, 51044, 51044, 407, 456, 311, 341, 411, 18894, 6064, 13, 51188, 51188, 509, 393, 1520, 300, 411, 724, 2029, 364, 6707, 6798, 281, 1340, 486, 312, 300, 6798, 293, 51500, 51500, 370, 322, 13, 51524, 51524], "temperature": 0.0, "avg_logprob": -0.18770747238330626, "compression_ratio": 1.5121951219512195, "no_caption_prob": 3.534654024406336e-05}, {"id": 919, "seek": 424144, "start": 4249.5199999999995, "end": 4255.04, "text": " So he has some great blog posts about what types of properties are there, right?", "tokens": [50364, 286, 519, 309, 307, 411, 479, 8199, 337, 1019, 293, 7475, 307, 264, 1315, 295, 264, 6968, 13, 50580, 50580, 876, 11, 6659, 343, 1124, 71, 13, 50644, 50644, 876, 1338, 13, 50668, 50768, 407, 415, 575, 512, 869, 6968, 12300, 466, 437, 3467, 295, 7221, 366, 456, 11, 558, 30, 51044, 51044, 407, 456, 311, 341, 411, 18894, 6064, 13, 51188, 51188, 509, 393, 1520, 300, 411, 724, 2029, 364, 6707, 6798, 281, 1340, 486, 312, 300, 6798, 293, 51500, 51500, 370, 322, 13, 51524, 51524], "temperature": 0.0, "avg_logprob": -0.18770747238330626, "compression_ratio": 1.5121951219512195, "no_caption_prob": 3.534654024406336e-05}, {"id": 920, "seek": 424144, "start": 4255.04, "end": 4257.919999999999, "text": " So there's this like mathematical laws.", "tokens": [50364, 286, 519, 309, 307, 411, 479, 8199, 337, 1019, 293, 7475, 307, 264, 1315, 295, 264, 6968, 13, 50580, 50580, 876, 11, 6659, 343, 1124, 71, 13, 50644, 50644, 876, 1338, 13, 50668, 50768, 407, 415, 575, 512, 869, 6968, 12300, 466, 437, 3467, 295, 7221, 366, 456, 11, 558, 30, 51044, 51044, 407, 456, 311, 341, 411, 18894, 6064, 13, 51188, 51188, 509, 393, 1520, 300, 411, 724, 2029, 364, 6707, 6798, 281, 1340, 486, 312, 300, 6798, 293, 51500, 51500, 370, 322, 13, 51524, 51524], "temperature": 0.0, "avg_logprob": -0.18770747238330626, "compression_ratio": 1.5121951219512195, "no_caption_prob": 3.534654024406336e-05}, {"id": 921, "seek": 424144, "start": 4257.919999999999, "end": 4264.16, "text": " You can check that like appending an empty string to anything will be that string and", "tokens": [50364, 286, 519, 309, 307, 411, 479, 8199, 337, 1019, 293, 7475, 307, 264, 1315, 295, 264, 6968, 13, 50580, 50580, 876, 11, 6659, 343, 1124, 71, 13, 50644, 50644, 876, 1338, 13, 50668, 50768, 407, 415, 575, 512, 869, 6968, 12300, 466, 437, 3467, 295, 7221, 366, 456, 11, 558, 30, 51044, 51044, 407, 456, 311, 341, 411, 18894, 6064, 13, 51188, 51188, 509, 393, 1520, 300, 411, 724, 2029, 364, 6707, 6798, 281, 1340, 486, 312, 300, 6798, 293, 51500, 51500, 370, 322, 13, 51524, 51524], "temperature": 0.0, "avg_logprob": -0.18770747238330626, "compression_ratio": 1.5121951219512195, "no_caption_prob": 3.534654024406336e-05}, {"id": 922, "seek": 424144, "start": 4264.16, "end": 4264.639999999999, "text": " so on.", "tokens": [50364, 286, 519, 309, 307, 411, 479, 8199, 337, 1019, 293, 7475, 307, 264, 1315, 295, 264, 6968, 13, 50580, 50580, 876, 11, 6659, 343, 1124, 71, 13, 50644, 50644, 876, 1338, 13, 50668, 50768, 407, 415, 575, 512, 869, 6968, 12300, 466, 437, 3467, 295, 7221, 366, 456, 11, 558, 30, 51044, 51044, 407, 456, 311, 341, 411, 18894, 6064, 13, 51188, 51188, 509, 393, 1520, 300, 411, 724, 2029, 364, 6707, 6798, 281, 1340, 486, 312, 300, 6798, 293, 51500, 51500, 370, 322, 13, 51524, 51524], "temperature": 0.0, "avg_logprob": -0.18770747238330626, "compression_ratio": 1.5121951219512195, "no_caption_prob": 3.534654024406336e-05}, {"id": 923, "seek": 426464, "start": 4264.64, "end": 4271.280000000001, "text": " But there's also these like round trips and like Oracle testing where let's say you are", "tokens": [50364, 583, 456, 311, 611, 613, 411, 3098, 16051, 293, 411, 25654, 4997, 689, 718, 311, 584, 291, 366, 50696, 50696, 18114, 428, 1065, 26941, 1333, 2445, 13, 50920, 50920, 509, 393, 1009, 1520, 309, 1970, 264, 3832, 6405, 1329, 5893, 1333, 11, 558, 30, 51244, 51244, 400, 370, 456, 366, 613, 721, 689, 291, 458, 733, 295, 437, 264, 5176, 5598, 820, 312, 51528, 51528, 293, 291, 393, 1500, 1970, 411, 264, 6408, 11420, 293, 370, 322, 13, 51696, 51724], "temperature": 0.0, "avg_logprob": -0.13693366399625453, "compression_ratio": 1.6238938053097345, "no_caption_prob": 5.861201771040214e-06}, {"id": 924, "seek": 426464, "start": 4271.280000000001, "end": 4275.76, "text": " implementing your own optimized sort function.", "tokens": [50364, 583, 456, 311, 611, 613, 411, 3098, 16051, 293, 411, 25654, 4997, 689, 718, 311, 584, 291, 366, 50696, 50696, 18114, 428, 1065, 26941, 1333, 2445, 13, 50920, 50920, 509, 393, 1009, 1520, 309, 1970, 264, 3832, 6405, 1329, 5893, 1333, 11, 558, 30, 51244, 51244, 400, 370, 456, 366, 613, 721, 689, 291, 458, 733, 295, 437, 264, 5176, 5598, 820, 312, 51528, 51528, 293, 291, 393, 1500, 1970, 411, 264, 6408, 11420, 293, 370, 322, 13, 51696, 51724], "temperature": 0.0, "avg_logprob": -0.13693366399625453, "compression_ratio": 1.6238938053097345, "no_caption_prob": 5.861201771040214e-06}, {"id": 925, "seek": 426464, "start": 4275.76, "end": 4282.240000000001, "text": " You can always check it against the standard library list dot sort, right?", "tokens": [50364, 583, 456, 311, 611, 613, 411, 3098, 16051, 293, 411, 25654, 4997, 689, 718, 311, 584, 291, 366, 50696, 50696, 18114, 428, 1065, 26941, 1333, 2445, 13, 50920, 50920, 509, 393, 1009, 1520, 309, 1970, 264, 3832, 6405, 1329, 5893, 1333, 11, 558, 30, 51244, 51244, 400, 370, 456, 366, 613, 721, 689, 291, 458, 733, 295, 437, 264, 5176, 5598, 820, 312, 51528, 51528, 293, 291, 393, 1500, 1970, 411, 264, 6408, 11420, 293, 370, 322, 13, 51696, 51724], "temperature": 0.0, "avg_logprob": -0.13693366399625453, "compression_ratio": 1.6238938053097345, "no_caption_prob": 5.861201771040214e-06}, {"id": 926, "seek": 426464, "start": 4282.240000000001, "end": 4287.92, "text": " And so there are these things where you know kind of what the expected output should be", "tokens": [50364, 583, 456, 311, 611, 613, 411, 3098, 16051, 293, 411, 25654, 4997, 689, 718, 311, 584, 291, 366, 50696, 50696, 18114, 428, 1065, 26941, 1333, 2445, 13, 50920, 50920, 509, 393, 1009, 1520, 309, 1970, 264, 3832, 6405, 1329, 5893, 1333, 11, 558, 30, 51244, 51244, 400, 370, 456, 366, 613, 721, 689, 291, 458, 733, 295, 437, 264, 5176, 5598, 820, 312, 51528, 51528, 293, 291, 393, 1500, 1970, 411, 264, 6408, 11420, 293, 370, 322, 13, 51696, 51724], "temperature": 0.0, "avg_logprob": -0.13693366399625453, "compression_ratio": 1.6238938053097345, "no_caption_prob": 5.861201771040214e-06}, {"id": 927, "seek": 426464, "start": 4287.92, "end": 4291.280000000001, "text": " and you can test against like the reference implementation and so on.", "tokens": [50364, 583, 456, 311, 611, 613, 411, 3098, 16051, 293, 411, 25654, 4997, 689, 718, 311, 584, 291, 366, 50696, 50696, 18114, 428, 1065, 26941, 1333, 2445, 13, 50920, 50920, 509, 393, 1009, 1520, 309, 1970, 264, 3832, 6405, 1329, 5893, 1333, 11, 558, 30, 51244, 51244, 400, 370, 456, 366, 613, 721, 689, 291, 458, 733, 295, 437, 264, 5176, 5598, 820, 312, 51528, 51528, 293, 291, 393, 1500, 1970, 411, 264, 6408, 11420, 293, 370, 322, 13, 51696, 51724], "temperature": 0.0, "avg_logprob": -0.13693366399625453, "compression_ratio": 1.6238938053097345, "no_caption_prob": 5.861201771040214e-06}, {"id": 928, "seek": 429128, "start": 4291.28, "end": 4297.5199999999995, "text": " There's all these different types of properties that you can use and he's really great about", "tokens": [50364, 821, 311, 439, 613, 819, 3467, 295, 7221, 300, 291, 393, 764, 293, 415, 311, 534, 869, 466, 50676, 50676, 411, 4099, 5110, 293, 733, 295, 4494, 291, 807, 309, 11, 2390, 24002, 13, 50928, 50964, 400, 1338, 11, 370, 300, 311, 11, 286, 519, 321, 727, 829, 300, 666, 855, 5570, 13, 51208, 51208, 663, 311, 534, 665, 12897, 666, 577, 281, 519, 466, 4707, 2361, 6921, 13, 51512, 51512, 663, 3263, 2243, 13, 51564, 51564, 865, 11, 300, 3263, 588, 4961, 13, 51628, 51628], "temperature": 0.0, "avg_logprob": -0.16651602224870163, "compression_ratio": 1.5982142857142858, "no_caption_prob": 6.540212325489847e-06}, {"id": 929, "seek": 429128, "start": 4297.5199999999995, "end": 4302.5599999999995, "text": " like showing examples and kind of walking you through it, building intuition.", "tokens": [50364, 821, 311, 439, 613, 819, 3467, 295, 7221, 300, 291, 393, 764, 293, 415, 311, 534, 869, 466, 50676, 50676, 411, 4099, 5110, 293, 733, 295, 4494, 291, 807, 309, 11, 2390, 24002, 13, 50928, 50964, 400, 1338, 11, 370, 300, 311, 11, 286, 519, 321, 727, 829, 300, 666, 855, 5570, 13, 51208, 51208, 663, 311, 534, 665, 12897, 666, 577, 281, 519, 466, 4707, 2361, 6921, 13, 51512, 51512, 663, 3263, 2243, 13, 51564, 51564, 865, 11, 300, 3263, 588, 4961, 13, 51628, 51628], "temperature": 0.0, "avg_logprob": -0.16651602224870163, "compression_ratio": 1.5982142857142858, "no_caption_prob": 6.540212325489847e-06}, {"id": 930, "seek": 429128, "start": 4303.28, "end": 4308.16, "text": " And yeah, so that's, I think we could put that into show notes.", "tokens": [50364, 821, 311, 439, 613, 819, 3467, 295, 7221, 300, 291, 393, 764, 293, 415, 311, 534, 869, 466, 50676, 50676, 411, 4099, 5110, 293, 733, 295, 4494, 291, 807, 309, 11, 2390, 24002, 13, 50928, 50964, 400, 1338, 11, 370, 300, 311, 11, 286, 519, 321, 727, 829, 300, 666, 855, 5570, 13, 51208, 51208, 663, 311, 534, 665, 12897, 666, 577, 281, 519, 466, 4707, 2361, 6921, 13, 51512, 51512, 663, 3263, 2243, 13, 51564, 51564, 865, 11, 300, 3263, 588, 4961, 13, 51628, 51628], "temperature": 0.0, "avg_logprob": -0.16651602224870163, "compression_ratio": 1.5982142857142858, "no_caption_prob": 6.540212325489847e-06}, {"id": 931, "seek": 429128, "start": 4308.16, "end": 4314.24, "text": " That's really good intro into how to think about property based tests.", "tokens": [50364, 821, 311, 439, 613, 819, 3467, 295, 7221, 300, 291, 393, 764, 293, 415, 311, 534, 869, 466, 50676, 50676, 411, 4099, 5110, 293, 733, 295, 4494, 291, 807, 309, 11, 2390, 24002, 13, 50928, 50964, 400, 1338, 11, 370, 300, 311, 11, 286, 519, 321, 727, 829, 300, 666, 855, 5570, 13, 51208, 51208, 663, 311, 534, 665, 12897, 666, 577, 281, 519, 466, 4707, 2361, 6921, 13, 51512, 51512, 663, 3263, 2243, 13, 51564, 51564, 865, 11, 300, 3263, 588, 4961, 13, 51628, 51628], "temperature": 0.0, "avg_logprob": -0.16651602224870163, "compression_ratio": 1.5982142857142858, "no_caption_prob": 6.540212325489847e-06}, {"id": 932, "seek": 429128, "start": 4314.24, "end": 4315.28, "text": " That sounds amazing.", "tokens": [50364, 821, 311, 439, 613, 819, 3467, 295, 7221, 300, 291, 393, 764, 293, 415, 311, 534, 869, 466, 50676, 50676, 411, 4099, 5110, 293, 733, 295, 4494, 291, 807, 309, 11, 2390, 24002, 13, 50928, 50964, 400, 1338, 11, 370, 300, 311, 11, 286, 519, 321, 727, 829, 300, 666, 855, 5570, 13, 51208, 51208, 663, 311, 534, 665, 12897, 666, 577, 281, 519, 466, 4707, 2361, 6921, 13, 51512, 51512, 663, 3263, 2243, 13, 51564, 51564, 865, 11, 300, 3263, 588, 4961, 13, 51628, 51628], "temperature": 0.0, "avg_logprob": -0.16651602224870163, "compression_ratio": 1.5982142857142858, "no_caption_prob": 6.540212325489847e-06}, {"id": 933, "seek": 429128, "start": 4315.28, "end": 4316.5599999999995, "text": " Yeah, that sounds very helpful.", "tokens": [50364, 821, 311, 439, 613, 819, 3467, 295, 7221, 300, 291, 393, 764, 293, 415, 311, 534, 869, 466, 50676, 50676, 411, 4099, 5110, 293, 733, 295, 4494, 291, 807, 309, 11, 2390, 24002, 13, 50928, 50964, 400, 1338, 11, 370, 300, 311, 11, 286, 519, 321, 727, 829, 300, 666, 855, 5570, 13, 51208, 51208, 663, 311, 534, 665, 12897, 666, 577, 281, 519, 466, 4707, 2361, 6921, 13, 51512, 51512, 663, 3263, 2243, 13, 51564, 51564, 865, 11, 300, 3263, 588, 4961, 13, 51628, 51628], "temperature": 0.0, "avg_logprob": -0.16651602224870163, "compression_ratio": 1.5982142857142858, "no_caption_prob": 6.540212325489847e-06}, {"id": 934, "seek": 431656, "start": 4316.56, "end": 4322.8, "text": " I would love to have like a, you know, just a set of categories to think about of different", "tokens": [50364, 286, 576, 959, 281, 362, 411, 257, 11, 291, 458, 11, 445, 257, 992, 295, 10479, 281, 519, 466, 295, 819, 50676, 50676, 3467, 295, 7221, 281, 1520, 337, 294, 452, 3567, 562, 286, 478, 3579, 3089, 13, 50892, 50892, 663, 2544, 411, 300, 576, 854, 385, 28497, 385, 281, 767, 2524, 337, 300, 2290, 544, 2049, 13, 51124, 51124, 865, 11, 382, 291, 584, 11, 309, 311, 257, 1154, 295, 16696, 562, 281, 764, 309, 13, 51324, 51324, 407, 729, 10479, 1643, 411, 257, 869, 4282, 337, 300, 13, 51448, 51516, 400, 300, 311, 1936, 437, 264, 6968, 2183, 307, 466, 11, 729, 3467, 295, 10479, 13, 51728, 51728, 407, 352, 337, 309, 13, 51808, 51808], "temperature": 0.0, "avg_logprob": -0.16463324602912455, "compression_ratio": 1.7, "no_caption_prob": 5.8272071328246966e-05}, {"id": 935, "seek": 431656, "start": 4322.8, "end": 4327.120000000001, "text": " types of properties to check for in my brain when I'm writing code.", "tokens": [50364, 286, 576, 959, 281, 362, 411, 257, 11, 291, 458, 11, 445, 257, 992, 295, 10479, 281, 519, 466, 295, 819, 50676, 50676, 3467, 295, 7221, 281, 1520, 337, 294, 452, 3567, 562, 286, 478, 3579, 3089, 13, 50892, 50892, 663, 2544, 411, 300, 576, 854, 385, 28497, 385, 281, 767, 2524, 337, 300, 2290, 544, 2049, 13, 51124, 51124, 865, 11, 382, 291, 584, 11, 309, 311, 257, 1154, 295, 16696, 562, 281, 764, 309, 13, 51324, 51324, 407, 729, 10479, 1643, 411, 257, 869, 4282, 337, 300, 13, 51448, 51516, 400, 300, 311, 1936, 437, 264, 6968, 2183, 307, 466, 11, 729, 3467, 295, 10479, 13, 51728, 51728, 407, 352, 337, 309, 13, 51808, 51808], "temperature": 0.0, "avg_logprob": -0.16463324602912455, "compression_ratio": 1.7, "no_caption_prob": 5.8272071328246966e-05}, {"id": 936, "seek": 431656, "start": 4327.120000000001, "end": 4331.76, "text": " That seems like that would help me motivate me to actually reach for that tool more often.", "tokens": [50364, 286, 576, 959, 281, 362, 411, 257, 11, 291, 458, 11, 445, 257, 992, 295, 10479, 281, 519, 466, 295, 819, 50676, 50676, 3467, 295, 7221, 281, 1520, 337, 294, 452, 3567, 562, 286, 478, 3579, 3089, 13, 50892, 50892, 663, 2544, 411, 300, 576, 854, 385, 28497, 385, 281, 767, 2524, 337, 300, 2290, 544, 2049, 13, 51124, 51124, 865, 11, 382, 291, 584, 11, 309, 311, 257, 1154, 295, 16696, 562, 281, 764, 309, 13, 51324, 51324, 407, 729, 10479, 1643, 411, 257, 869, 4282, 337, 300, 13, 51448, 51516, 400, 300, 311, 1936, 437, 264, 6968, 2183, 307, 466, 11, 729, 3467, 295, 10479, 13, 51728, 51728, 407, 352, 337, 309, 13, 51808, 51808], "temperature": 0.0, "avg_logprob": -0.16463324602912455, "compression_ratio": 1.7, "no_caption_prob": 5.8272071328246966e-05}, {"id": 937, "seek": 431656, "start": 4331.76, "end": 4335.76, "text": " Yeah, as you say, it's a problem of identifying when to use it.", "tokens": [50364, 286, 576, 959, 281, 362, 411, 257, 11, 291, 458, 11, 445, 257, 992, 295, 10479, 281, 519, 466, 295, 819, 50676, 50676, 3467, 295, 7221, 281, 1520, 337, 294, 452, 3567, 562, 286, 478, 3579, 3089, 13, 50892, 50892, 663, 2544, 411, 300, 576, 854, 385, 28497, 385, 281, 767, 2524, 337, 300, 2290, 544, 2049, 13, 51124, 51124, 865, 11, 382, 291, 584, 11, 309, 311, 257, 1154, 295, 16696, 562, 281, 764, 309, 13, 51324, 51324, 407, 729, 10479, 1643, 411, 257, 869, 4282, 337, 300, 13, 51448, 51516, 400, 300, 311, 1936, 437, 264, 6968, 2183, 307, 466, 11, 729, 3467, 295, 10479, 13, 51728, 51728, 407, 352, 337, 309, 13, 51808, 51808], "temperature": 0.0, "avg_logprob": -0.16463324602912455, "compression_ratio": 1.7, "no_caption_prob": 5.8272071328246966e-05}, {"id": 938, "seek": 431656, "start": 4335.76, "end": 4338.240000000001, "text": " So those categories seem like a great trick for that.", "tokens": [50364, 286, 576, 959, 281, 362, 411, 257, 11, 291, 458, 11, 445, 257, 992, 295, 10479, 281, 519, 466, 295, 819, 50676, 50676, 3467, 295, 7221, 281, 1520, 337, 294, 452, 3567, 562, 286, 478, 3579, 3089, 13, 50892, 50892, 663, 2544, 411, 300, 576, 854, 385, 28497, 385, 281, 767, 2524, 337, 300, 2290, 544, 2049, 13, 51124, 51124, 865, 11, 382, 291, 584, 11, 309, 311, 257, 1154, 295, 16696, 562, 281, 764, 309, 13, 51324, 51324, 407, 729, 10479, 1643, 411, 257, 869, 4282, 337, 300, 13, 51448, 51516, 400, 300, 311, 1936, 437, 264, 6968, 2183, 307, 466, 11, 729, 3467, 295, 10479, 13, 51728, 51728, 407, 352, 337, 309, 13, 51808, 51808], "temperature": 0.0, "avg_logprob": -0.16463324602912455, "compression_ratio": 1.7, "no_caption_prob": 5.8272071328246966e-05}, {"id": 939, "seek": 431656, "start": 4339.6, "end": 4343.84, "text": " And that's basically what the blog post is about, those types of categories.", "tokens": [50364, 286, 576, 959, 281, 362, 411, 257, 11, 291, 458, 11, 445, 257, 992, 295, 10479, 281, 519, 466, 295, 819, 50676, 50676, 3467, 295, 7221, 281, 1520, 337, 294, 452, 3567, 562, 286, 478, 3579, 3089, 13, 50892, 50892, 663, 2544, 411, 300, 576, 854, 385, 28497, 385, 281, 767, 2524, 337, 300, 2290, 544, 2049, 13, 51124, 51124, 865, 11, 382, 291, 584, 11, 309, 311, 257, 1154, 295, 16696, 562, 281, 764, 309, 13, 51324, 51324, 407, 729, 10479, 1643, 411, 257, 869, 4282, 337, 300, 13, 51448, 51516, 400, 300, 311, 1936, 437, 264, 6968, 2183, 307, 466, 11, 729, 3467, 295, 10479, 13, 51728, 51728, 407, 352, 337, 309, 13, 51808, 51808], "temperature": 0.0, "avg_logprob": -0.16463324602912455, "compression_ratio": 1.7, "no_caption_prob": 5.8272071328246966e-05}, {"id": 940, "seek": 431656, "start": 4343.84, "end": 4345.4400000000005, "text": " So go for it.", "tokens": [50364, 286, 576, 959, 281, 362, 411, 257, 11, 291, 458, 11, 445, 257, 992, 295, 10479, 281, 519, 466, 295, 819, 50676, 50676, 3467, 295, 7221, 281, 1520, 337, 294, 452, 3567, 562, 286, 478, 3579, 3089, 13, 50892, 50892, 663, 2544, 411, 300, 576, 854, 385, 28497, 385, 281, 767, 2524, 337, 300, 2290, 544, 2049, 13, 51124, 51124, 865, 11, 382, 291, 584, 11, 309, 311, 257, 1154, 295, 16696, 562, 281, 764, 309, 13, 51324, 51324, 407, 729, 10479, 1643, 411, 257, 869, 4282, 337, 300, 13, 51448, 51516, 400, 300, 311, 1936, 437, 264, 6968, 2183, 307, 466, 11, 729, 3467, 295, 10479, 13, 51728, 51728, 407, 352, 337, 309, 13, 51808, 51808], "temperature": 0.0, "avg_logprob": -0.16463324602912455, "compression_ratio": 1.7, "no_caption_prob": 5.8272071328246966e-05}, {"id": 941, "seek": 434544, "start": 4345.44, "end": 4346.5599999999995, "text": " That's great.", "tokens": [50364, 663, 311, 869, 13, 50420, 50420, 286, 536, 456, 311, 257, 960, 6615, 365, 309, 886, 13, 50536, 50536, 663, 311, 2176, 13, 50592, 50592, 2743, 11, 411, 264, 2372, 295, 1127, 300, 291, 829, 666, 41684, 281, 22842, 4190, 293, 1455, 50920, 50920, 300, 21769, 307, 411, 534, 3105, 264, 636, 286, 519, 466, 283, 3334, 8781, 293, 1027, 385, 519, 411, 11, 51256, 51256, 6076, 11, 291, 458, 11, 1293, 519, 544, 8760, 466, 411, 11, 577, 360, 286, 528, 281, 8460, 283, 16740, 15743, 51548, 51548, 281, 652, 988, 286, 478, 3620, 2277, 27272, 264, 7340, 3331, 30, 51780, 51780], "temperature": 0.0, "avg_logprob": -0.09313766842796689, "compression_ratio": 1.6169354838709677, "no_caption_prob": 6.921715248608962e-05}, {"id": 942, "seek": 434544, "start": 4346.5599999999995, "end": 4348.879999999999, "text": " I see there's a video associated with it too.", "tokens": [50364, 663, 311, 869, 13, 50420, 50420, 286, 536, 456, 311, 257, 960, 6615, 365, 309, 886, 13, 50536, 50536, 663, 311, 2176, 13, 50592, 50592, 2743, 11, 411, 264, 2372, 295, 1127, 300, 291, 829, 666, 41684, 281, 22842, 4190, 293, 1455, 50920, 50920, 300, 21769, 307, 411, 534, 3105, 264, 636, 286, 519, 466, 283, 3334, 8781, 293, 1027, 385, 519, 411, 11, 51256, 51256, 6076, 11, 291, 458, 11, 1293, 519, 544, 8760, 466, 411, 11, 577, 360, 286, 528, 281, 8460, 283, 16740, 15743, 51548, 51548, 281, 652, 988, 286, 478, 3620, 2277, 27272, 264, 7340, 3331, 30, 51780, 51780], "temperature": 0.0, "avg_logprob": -0.09313766842796689, "compression_ratio": 1.6169354838709677, "no_caption_prob": 6.921715248608962e-05}, {"id": 943, "seek": 434544, "start": 4348.879999999999, "end": 4350.0, "text": " That's perfect.", "tokens": [50364, 663, 311, 869, 13, 50420, 50420, 286, 536, 456, 311, 257, 960, 6615, 365, 309, 886, 13, 50536, 50536, 663, 311, 2176, 13, 50592, 50592, 2743, 11, 411, 264, 2372, 295, 1127, 300, 291, 829, 666, 41684, 281, 22842, 4190, 293, 1455, 50920, 50920, 300, 21769, 307, 411, 534, 3105, 264, 636, 286, 519, 466, 283, 3334, 8781, 293, 1027, 385, 519, 411, 11, 51256, 51256, 6076, 11, 291, 458, 11, 1293, 519, 544, 8760, 466, 411, 11, 577, 360, 286, 528, 281, 8460, 283, 16740, 15743, 51548, 51548, 281, 652, 988, 286, 478, 3620, 2277, 27272, 264, 7340, 3331, 30, 51780, 51780], "temperature": 0.0, "avg_logprob": -0.09313766842796689, "compression_ratio": 1.6169354838709677, "no_caption_prob": 6.921715248608962e-05}, {"id": 944, "seek": 434544, "start": 4350.0, "end": 4356.5599999999995, "text": " Also, like the amount of care that you put into shrinking to nicer values and making", "tokens": [50364, 663, 311, 869, 13, 50420, 50420, 286, 536, 456, 311, 257, 960, 6615, 365, 309, 886, 13, 50536, 50536, 663, 311, 2176, 13, 50592, 50592, 2743, 11, 411, 264, 2372, 295, 1127, 300, 291, 829, 666, 41684, 281, 22842, 4190, 293, 1455, 50920, 50920, 300, 21769, 307, 411, 534, 3105, 264, 636, 286, 519, 466, 283, 3334, 8781, 293, 1027, 385, 519, 411, 11, 51256, 51256, 6076, 11, 291, 458, 11, 1293, 519, 544, 8760, 466, 411, 11, 577, 360, 286, 528, 281, 8460, 283, 16740, 15743, 51548, 51548, 281, 652, 988, 286, 478, 3620, 2277, 27272, 264, 7340, 3331, 30, 51780, 51780], "temperature": 0.0, "avg_logprob": -0.09313766842796689, "compression_ratio": 1.6169354838709677, "no_caption_prob": 6.921715248608962e-05}, {"id": 945, "seek": 434544, "start": 4356.5599999999995, "end": 4363.28, "text": " that intuitive is like really changed the way I think about fuzzing and made me think like,", "tokens": [50364, 663, 311, 869, 13, 50420, 50420, 286, 536, 456, 311, 257, 960, 6615, 365, 309, 886, 13, 50536, 50536, 663, 311, 2176, 13, 50592, 50592, 2743, 11, 411, 264, 2372, 295, 1127, 300, 291, 829, 666, 41684, 281, 22842, 4190, 293, 1455, 50920, 50920, 300, 21769, 307, 411, 534, 3105, 264, 636, 286, 519, 466, 283, 3334, 8781, 293, 1027, 385, 519, 411, 11, 51256, 51256, 6076, 11, 291, 458, 11, 1293, 519, 544, 8760, 466, 411, 11, 577, 360, 286, 528, 281, 8460, 283, 16740, 15743, 51548, 51548, 281, 652, 988, 286, 478, 3620, 2277, 27272, 264, 7340, 3331, 30, 51780, 51780], "temperature": 0.0, "avg_logprob": -0.09313766842796689, "compression_ratio": 1.6169354838709677, "no_caption_prob": 6.921715248608962e-05}, {"id": 946, "seek": 434544, "start": 4363.28, "end": 4369.12, "text": " wow, you know, both think more deeply about like, how do I want to generate fuzz inputs", "tokens": [50364, 663, 311, 869, 13, 50420, 50420, 286, 536, 456, 311, 257, 960, 6615, 365, 309, 886, 13, 50536, 50536, 663, 311, 2176, 13, 50592, 50592, 2743, 11, 411, 264, 2372, 295, 1127, 300, 291, 829, 666, 41684, 281, 22842, 4190, 293, 1455, 50920, 50920, 300, 21769, 307, 411, 534, 3105, 264, 636, 286, 519, 466, 283, 3334, 8781, 293, 1027, 385, 519, 411, 11, 51256, 51256, 6076, 11, 291, 458, 11, 1293, 519, 544, 8760, 466, 411, 11, 577, 360, 286, 528, 281, 8460, 283, 16740, 15743, 51548, 51548, 281, 652, 988, 286, 478, 3620, 2277, 27272, 264, 7340, 3331, 30, 51780, 51780], "temperature": 0.0, "avg_logprob": -0.09313766842796689, "compression_ratio": 1.6169354838709677, "no_caption_prob": 6.921715248608962e-05}, {"id": 947, "seek": 434544, "start": 4369.12, "end": 4373.759999999999, "text": " to make sure I'm meaningfully exercising the relevant cases?", "tokens": [50364, 663, 311, 869, 13, 50420, 50420, 286, 536, 456, 311, 257, 960, 6615, 365, 309, 886, 13, 50536, 50536, 663, 311, 2176, 13, 50592, 50592, 2743, 11, 411, 264, 2372, 295, 1127, 300, 291, 829, 666, 41684, 281, 22842, 4190, 293, 1455, 50920, 50920, 300, 21769, 307, 411, 534, 3105, 264, 636, 286, 519, 466, 283, 3334, 8781, 293, 1027, 385, 519, 411, 11, 51256, 51256, 6076, 11, 291, 458, 11, 1293, 519, 544, 8760, 466, 411, 11, 577, 360, 286, 528, 281, 8460, 283, 16740, 15743, 51548, 51548, 281, 652, 988, 286, 478, 3620, 2277, 27272, 264, 7340, 3331, 30, 51780, 51780], "temperature": 0.0, "avg_logprob": -0.09313766842796689, "compression_ratio": 1.6169354838709677, "no_caption_prob": 6.921715248608962e-05}, {"id": 948, "seek": 437376, "start": 4373.76, "end": 4376.8, "text": " And then how do I reduce those down in a meaningful way?", "tokens": [50364, 400, 550, 577, 360, 286, 5407, 729, 760, 294, 257, 10995, 636, 30, 50516, 50516, 1743, 11, 286, 390, 1953, 11, 291, 458, 11, 286, 478, 988, 291, 362, 281, 519, 7500, 466, 264, 4361, 45298, 50788, 50788, 498, 291, 528, 281, 5258, 257, 283, 3334, 4527, 300, 534, 18081, 4190, 760, 3620, 2277, 13, 51044, 51044, 823, 11, 797, 11, 498, 291, 483, 257, 283, 16740, 1500, 300, 18199, 11, 309, 311, 18223, 572, 1871, 577, 731, 291, 600, 9212, 51432, 51432, 309, 13, 51448, 51448, 407, 291, 500, 380, 4725, 643, 281, 3292, 466, 300, 337, 445, 1242, 364, 6713, 3636, 13, 51648, 51648, 400, 309, 311, 544, 577, 1481, 360, 321, 528, 281, 652, 264, 283, 16740, 484, 30, 51808, 51808], "temperature": 0.0, "avg_logprob": -0.06828601019723075, "compression_ratio": 1.686131386861314, "no_caption_prob": 5.649264494422823e-05}, {"id": 949, "seek": 437376, "start": 4376.8, "end": 4382.24, "text": " Like, I was thinking, you know, I'm sure you have to think carefully about the semantics", "tokens": [50364, 400, 550, 577, 360, 286, 5407, 729, 760, 294, 257, 10995, 636, 30, 50516, 50516, 1743, 11, 286, 390, 1953, 11, 291, 458, 11, 286, 478, 988, 291, 362, 281, 519, 7500, 466, 264, 4361, 45298, 50788, 50788, 498, 291, 528, 281, 5258, 257, 283, 3334, 4527, 300, 534, 18081, 4190, 760, 3620, 2277, 13, 51044, 51044, 823, 11, 797, 11, 498, 291, 483, 257, 283, 16740, 1500, 300, 18199, 11, 309, 311, 18223, 572, 1871, 577, 731, 291, 600, 9212, 51432, 51432, 309, 13, 51448, 51448, 407, 291, 500, 380, 4725, 643, 281, 3292, 466, 300, 337, 445, 1242, 364, 6713, 3636, 13, 51648, 51648, 400, 309, 311, 544, 577, 1481, 360, 321, 528, 281, 652, 264, 283, 16740, 484, 30, 51808, 51808], "temperature": 0.0, "avg_logprob": -0.06828601019723075, "compression_ratio": 1.686131386861314, "no_caption_prob": 5.649264494422823e-05}, {"id": 950, "seek": 437376, "start": 4382.24, "end": 4387.360000000001, "text": " if you want to produce a fuzzer that really reduces values down meaningfully.", "tokens": [50364, 400, 550, 577, 360, 286, 5407, 729, 760, 294, 257, 10995, 636, 30, 50516, 50516, 1743, 11, 286, 390, 1953, 11, 291, 458, 11, 286, 478, 988, 291, 362, 281, 519, 7500, 466, 264, 4361, 45298, 50788, 50788, 498, 291, 528, 281, 5258, 257, 283, 3334, 4527, 300, 534, 18081, 4190, 760, 3620, 2277, 13, 51044, 51044, 823, 11, 797, 11, 498, 291, 483, 257, 283, 16740, 1500, 300, 18199, 11, 309, 311, 18223, 572, 1871, 577, 731, 291, 600, 9212, 51432, 51432, 309, 13, 51448, 51448, 407, 291, 500, 380, 4725, 643, 281, 3292, 466, 300, 337, 445, 1242, 364, 6713, 3636, 13, 51648, 51648, 400, 309, 311, 544, 577, 1481, 360, 321, 528, 281, 652, 264, 283, 16740, 484, 30, 51808, 51808], "temperature": 0.0, "avg_logprob": -0.06828601019723075, "compression_ratio": 1.686131386861314, "no_caption_prob": 5.649264494422823e-05}, {"id": 951, "seek": 437376, "start": 4387.360000000001, "end": 4395.12, "text": " Now, again, if you get a fuzz test that fails, it's failing no matter how well you've reduced", "tokens": [50364, 400, 550, 577, 360, 286, 5407, 729, 760, 294, 257, 10995, 636, 30, 50516, 50516, 1743, 11, 286, 390, 1953, 11, 291, 458, 11, 286, 478, 988, 291, 362, 281, 519, 7500, 466, 264, 4361, 45298, 50788, 50788, 498, 291, 528, 281, 5258, 257, 283, 3334, 4527, 300, 534, 18081, 4190, 760, 3620, 2277, 13, 51044, 51044, 823, 11, 797, 11, 498, 291, 483, 257, 283, 16740, 1500, 300, 18199, 11, 309, 311, 18223, 572, 1871, 577, 731, 291, 600, 9212, 51432, 51432, 309, 13, 51448, 51448, 407, 291, 500, 380, 4725, 643, 281, 3292, 466, 300, 337, 445, 1242, 364, 6713, 3636, 13, 51648, 51648, 400, 309, 311, 544, 577, 1481, 360, 321, 528, 281, 652, 264, 283, 16740, 484, 30, 51808, 51808], "temperature": 0.0, "avg_logprob": -0.06828601019723075, "compression_ratio": 1.686131386861314, "no_caption_prob": 5.649264494422823e-05}, {"id": 952, "seek": 437376, "start": 4395.12, "end": 4395.4400000000005, "text": " it.", "tokens": [50364, 400, 550, 577, 360, 286, 5407, 729, 760, 294, 257, 10995, 636, 30, 50516, 50516, 1743, 11, 286, 390, 1953, 11, 291, 458, 11, 286, 478, 988, 291, 362, 281, 519, 7500, 466, 264, 4361, 45298, 50788, 50788, 498, 291, 528, 281, 5258, 257, 283, 3334, 4527, 300, 534, 18081, 4190, 760, 3620, 2277, 13, 51044, 51044, 823, 11, 797, 11, 498, 291, 483, 257, 283, 16740, 1500, 300, 18199, 11, 309, 311, 18223, 572, 1871, 577, 731, 291, 600, 9212, 51432, 51432, 309, 13, 51448, 51448, 407, 291, 500, 380, 4725, 643, 281, 3292, 466, 300, 337, 445, 1242, 364, 6713, 3636, 13, 51648, 51648, 400, 309, 311, 544, 577, 1481, 360, 321, 528, 281, 652, 264, 283, 16740, 484, 30, 51808, 51808], "temperature": 0.0, "avg_logprob": -0.06828601019723075, "compression_ratio": 1.686131386861314, "no_caption_prob": 5.649264494422823e-05}, {"id": 953, "seek": 437376, "start": 4395.4400000000005, "end": 4399.4400000000005, "text": " So you don't necessarily need to worry about that for just getting an error message.", "tokens": [50364, 400, 550, 577, 360, 286, 5407, 729, 760, 294, 257, 10995, 636, 30, 50516, 50516, 1743, 11, 286, 390, 1953, 11, 291, 458, 11, 286, 478, 988, 291, 362, 281, 519, 7500, 466, 264, 4361, 45298, 50788, 50788, 498, 291, 528, 281, 5258, 257, 283, 3334, 4527, 300, 534, 18081, 4190, 760, 3620, 2277, 13, 51044, 51044, 823, 11, 797, 11, 498, 291, 483, 257, 283, 16740, 1500, 300, 18199, 11, 309, 311, 18223, 572, 1871, 577, 731, 291, 600, 9212, 51432, 51432, 309, 13, 51448, 51448, 407, 291, 500, 380, 4725, 643, 281, 3292, 466, 300, 337, 445, 1242, 364, 6713, 3636, 13, 51648, 51648, 400, 309, 311, 544, 577, 1481, 360, 321, 528, 281, 652, 264, 283, 16740, 484, 30, 51808, 51808], "temperature": 0.0, "avg_logprob": -0.06828601019723075, "compression_ratio": 1.686131386861314, "no_caption_prob": 5.649264494422823e-05}, {"id": 954, "seek": 437376, "start": 4399.4400000000005, "end": 4402.64, "text": " And it's more how nice do we want to make the fuzz out?", "tokens": [50364, 400, 550, 577, 360, 286, 5407, 729, 760, 294, 257, 10995, 636, 30, 50516, 50516, 1743, 11, 286, 390, 1953, 11, 291, 458, 11, 286, 478, 988, 291, 362, 281, 519, 7500, 466, 264, 4361, 45298, 50788, 50788, 498, 291, 528, 281, 5258, 257, 283, 3334, 4527, 300, 534, 18081, 4190, 760, 3620, 2277, 13, 51044, 51044, 823, 11, 797, 11, 498, 291, 483, 257, 283, 16740, 1500, 300, 18199, 11, 309, 311, 18223, 572, 1871, 577, 731, 291, 600, 9212, 51432, 51432, 309, 13, 51448, 51448, 407, 291, 500, 380, 4725, 643, 281, 3292, 466, 300, 337, 445, 1242, 364, 6713, 3636, 13, 51648, 51648, 400, 309, 311, 544, 577, 1481, 360, 321, 528, 281, 652, 264, 283, 16740, 484, 30, 51808, 51808], "temperature": 0.0, "avg_logprob": -0.06828601019723075, "compression_ratio": 1.686131386861314, "no_caption_prob": 5.649264494422823e-05}, {"id": 955, "seek": 440264, "start": 4402.64, "end": 4405.52, "text": " Yeah, it's all about the UX.", "tokens": [50364, 865, 11, 309, 311, 439, 466, 264, 40176, 13, 50508, 50540, 1779, 11, 558, 13, 50612, 50612, 583, 337, 264, 4846, 11, 300, 311, 257, 819, 1657, 570, 291, 360, 528, 281, 652, 988, 300, 291, 434, 50912, 50912, 27272, 264, 1021, 3331, 13, 51036, 51036, 509, 528, 281, 312, 988, 300, 291, 366, 733, 295, 3974, 670, 264, 4846, 1901, 6108, 370, 300, 2212, 51416, 51416, 1547, 565, 11, 291, 486, 915, 264, 18223, 2158, 13, 51580, 51580, 865, 13, 51608, 51608], "temperature": 0.0, "avg_logprob": -0.12767857944264133, "compression_ratio": 1.5505050505050506, "no_caption_prob": 2.8853739422629587e-05}, {"id": 956, "seek": 440264, "start": 4406.160000000001, "end": 4407.6, "text": " Right, right.", "tokens": [50364, 865, 11, 309, 311, 439, 466, 264, 40176, 13, 50508, 50540, 1779, 11, 558, 13, 50612, 50612, 583, 337, 264, 4846, 11, 300, 311, 257, 819, 1657, 570, 291, 360, 528, 281, 652, 988, 300, 291, 434, 50912, 50912, 27272, 264, 1021, 3331, 13, 51036, 51036, 509, 528, 281, 312, 988, 300, 291, 366, 733, 295, 3974, 670, 264, 4846, 1901, 6108, 370, 300, 2212, 51416, 51416, 1547, 565, 11, 291, 486, 915, 264, 18223, 2158, 13, 51580, 51580, 865, 13, 51608, 51608], "temperature": 0.0, "avg_logprob": -0.12767857944264133, "compression_ratio": 1.5505050505050506, "no_caption_prob": 2.8853739422629587e-05}, {"id": 957, "seek": 440264, "start": 4407.6, "end": 4413.6, "text": " But for the input, that's a different story because you do want to make sure that you're", "tokens": [50364, 865, 11, 309, 311, 439, 466, 264, 40176, 13, 50508, 50540, 1779, 11, 558, 13, 50612, 50612, 583, 337, 264, 4846, 11, 300, 311, 257, 819, 1657, 570, 291, 360, 528, 281, 652, 988, 300, 291, 434, 50912, 50912, 27272, 264, 1021, 3331, 13, 51036, 51036, 509, 528, 281, 312, 988, 300, 291, 366, 733, 295, 3974, 670, 264, 4846, 1901, 6108, 370, 300, 2212, 51416, 51416, 1547, 565, 11, 291, 486, 915, 264, 18223, 2158, 13, 51580, 51580, 865, 13, 51608, 51608], "temperature": 0.0, "avg_logprob": -0.12767857944264133, "compression_ratio": 1.5505050505050506, "no_caption_prob": 2.8853739422629587e-05}, {"id": 958, "seek": 440264, "start": 4413.6, "end": 4416.08, "text": " exercising the important cases.", "tokens": [50364, 865, 11, 309, 311, 439, 466, 264, 40176, 13, 50508, 50540, 1779, 11, 558, 13, 50612, 50612, 583, 337, 264, 4846, 11, 300, 311, 257, 819, 1657, 570, 291, 360, 528, 281, 652, 988, 300, 291, 434, 50912, 50912, 27272, 264, 1021, 3331, 13, 51036, 51036, 509, 528, 281, 312, 988, 300, 291, 366, 733, 295, 3974, 670, 264, 4846, 1901, 6108, 370, 300, 2212, 51416, 51416, 1547, 565, 11, 291, 486, 915, 264, 18223, 2158, 13, 51580, 51580, 865, 13, 51608, 51608], "temperature": 0.0, "avg_logprob": -0.12767857944264133, "compression_ratio": 1.5505050505050506, "no_caption_prob": 2.8853739422629587e-05}, {"id": 959, "seek": 440264, "start": 4416.08, "end": 4423.68, "text": " You want to be sure that you are kind of spread over the input space properly so that given", "tokens": [50364, 865, 11, 309, 311, 439, 466, 264, 40176, 13, 50508, 50540, 1779, 11, 558, 13, 50612, 50612, 583, 337, 264, 4846, 11, 300, 311, 257, 819, 1657, 570, 291, 360, 528, 281, 652, 988, 300, 291, 434, 50912, 50912, 27272, 264, 1021, 3331, 13, 51036, 51036, 509, 528, 281, 312, 988, 300, 291, 366, 733, 295, 3974, 670, 264, 4846, 1901, 6108, 370, 300, 2212, 51416, 51416, 1547, 565, 11, 291, 486, 915, 264, 18223, 2158, 13, 51580, 51580, 865, 13, 51608, 51608], "temperature": 0.0, "avg_logprob": -0.12767857944264133, "compression_ratio": 1.5505050505050506, "no_caption_prob": 2.8853739422629587e-05}, {"id": 960, "seek": 440264, "start": 4423.68, "end": 4426.96, "text": " enough time, you will find the failing value.", "tokens": [50364, 865, 11, 309, 311, 439, 466, 264, 40176, 13, 50508, 50540, 1779, 11, 558, 13, 50612, 50612, 583, 337, 264, 4846, 11, 300, 311, 257, 819, 1657, 570, 291, 360, 528, 281, 652, 988, 300, 291, 434, 50912, 50912, 27272, 264, 1021, 3331, 13, 51036, 51036, 509, 528, 281, 312, 988, 300, 291, 366, 733, 295, 3974, 670, 264, 4846, 1901, 6108, 370, 300, 2212, 51416, 51416, 1547, 565, 11, 291, 486, 915, 264, 18223, 2158, 13, 51580, 51580, 865, 13, 51608, 51608], "temperature": 0.0, "avg_logprob": -0.12767857944264133, "compression_ratio": 1.5505050505050506, "no_caption_prob": 2.8853739422629587e-05}, {"id": 961, "seek": 440264, "start": 4426.96, "end": 4427.52, "text": " Yeah.", "tokens": [50364, 865, 11, 309, 311, 439, 466, 264, 40176, 13, 50508, 50540, 1779, 11, 558, 13, 50612, 50612, 583, 337, 264, 4846, 11, 300, 311, 257, 819, 1657, 570, 291, 360, 528, 281, 652, 988, 300, 291, 434, 50912, 50912, 27272, 264, 1021, 3331, 13, 51036, 51036, 509, 528, 281, 312, 988, 300, 291, 366, 733, 295, 3974, 670, 264, 4846, 1901, 6108, 370, 300, 2212, 51416, 51416, 1547, 565, 11, 291, 486, 915, 264, 18223, 2158, 13, 51580, 51580, 865, 13, 51608, 51608], "temperature": 0.0, "avg_logprob": -0.12767857944264133, "compression_ratio": 1.5505050505050506, "no_caption_prob": 2.8853739422629587e-05}, {"id": 962, "seek": 442752, "start": 4427.52, "end": 4434.8, "text": " It's like a question of, you know, in a unit test, it's pretty common that in TDD, I always", "tokens": [50364, 467, 311, 411, 257, 1168, 295, 11, 291, 458, 11, 294, 257, 4985, 1500, 11, 309, 311, 1238, 2689, 300, 294, 314, 20818, 11, 286, 1009, 50728, 50728, 853, 281, 5373, 561, 300, 264, 6713, 3636, 307, 644, 295, 264, 7763, 293, 644, 295, 264, 1500, 51052, 51052, 9555, 644, 294, 314, 20818, 13, 51132, 51132, 407, 291, 500, 380, 445, 352, 652, 309, 3092, 13, 51272, 51272, 1743, 11, 536, 264, 6713, 3636, 11, 3470, 264, 6713, 3636, 498, 309, 1177, 380, 980, 291, 437, 281, 360, 51588, 51588, 293, 550, 360, 264, 551, 309, 5112, 291, 281, 360, 13, 51704, 51704], "temperature": 0.0, "avg_logprob": -0.07753362201509022, "compression_ratio": 1.7488151658767772, "no_caption_prob": 7.141269452404231e-05}, {"id": 963, "seek": 442752, "start": 4434.8, "end": 4441.280000000001, "text": " try to encourage people that the error message is part of the failure and part of the test", "tokens": [50364, 467, 311, 411, 257, 1168, 295, 11, 291, 458, 11, 294, 257, 4985, 1500, 11, 309, 311, 1238, 2689, 300, 294, 314, 20818, 11, 286, 1009, 50728, 50728, 853, 281, 5373, 561, 300, 264, 6713, 3636, 307, 644, 295, 264, 7763, 293, 644, 295, 264, 1500, 51052, 51052, 9555, 644, 294, 314, 20818, 13, 51132, 51132, 407, 291, 500, 380, 445, 352, 652, 309, 3092, 13, 51272, 51272, 1743, 11, 536, 264, 6713, 3636, 11, 3470, 264, 6713, 3636, 498, 309, 1177, 380, 980, 291, 437, 281, 360, 51588, 51588, 293, 550, 360, 264, 551, 309, 5112, 291, 281, 360, 13, 51704, 51704], "temperature": 0.0, "avg_logprob": -0.07753362201509022, "compression_ratio": 1.7488151658767772, "no_caption_prob": 7.141269452404231e-05}, {"id": 964, "seek": 442752, "start": 4441.280000000001, "end": 4442.88, "text": " driven part in TDD.", "tokens": [50364, 467, 311, 411, 257, 1168, 295, 11, 291, 458, 11, 294, 257, 4985, 1500, 11, 309, 311, 1238, 2689, 300, 294, 314, 20818, 11, 286, 1009, 50728, 50728, 853, 281, 5373, 561, 300, 264, 6713, 3636, 307, 644, 295, 264, 7763, 293, 644, 295, 264, 1500, 51052, 51052, 9555, 644, 294, 314, 20818, 13, 51132, 51132, 407, 291, 500, 380, 445, 352, 652, 309, 3092, 13, 51272, 51272, 1743, 11, 536, 264, 6713, 3636, 11, 3470, 264, 6713, 3636, 498, 309, 1177, 380, 980, 291, 437, 281, 360, 51588, 51588, 293, 550, 360, 264, 551, 309, 5112, 291, 281, 360, 13, 51704, 51704], "temperature": 0.0, "avg_logprob": -0.07753362201509022, "compression_ratio": 1.7488151658767772, "no_caption_prob": 7.141269452404231e-05}, {"id": 965, "seek": 442752, "start": 4442.88, "end": 4445.68, "text": " So you don't just go make it green.", "tokens": [50364, 467, 311, 411, 257, 1168, 295, 11, 291, 458, 11, 294, 257, 4985, 1500, 11, 309, 311, 1238, 2689, 300, 294, 314, 20818, 11, 286, 1009, 50728, 50728, 853, 281, 5373, 561, 300, 264, 6713, 3636, 307, 644, 295, 264, 7763, 293, 644, 295, 264, 1500, 51052, 51052, 9555, 644, 294, 314, 20818, 13, 51132, 51132, 407, 291, 500, 380, 445, 352, 652, 309, 3092, 13, 51272, 51272, 1743, 11, 536, 264, 6713, 3636, 11, 3470, 264, 6713, 3636, 498, 309, 1177, 380, 980, 291, 437, 281, 360, 51588, 51588, 293, 550, 360, 264, 551, 309, 5112, 291, 281, 360, 13, 51704, 51704], "temperature": 0.0, "avg_logprob": -0.07753362201509022, "compression_ratio": 1.7488151658767772, "no_caption_prob": 7.141269452404231e-05}, {"id": 966, "seek": 442752, "start": 4445.68, "end": 4452.0, "text": " Like, see the error message, improve the error message if it doesn't tell you what to do", "tokens": [50364, 467, 311, 411, 257, 1168, 295, 11, 291, 458, 11, 294, 257, 4985, 1500, 11, 309, 311, 1238, 2689, 300, 294, 314, 20818, 11, 286, 1009, 50728, 50728, 853, 281, 5373, 561, 300, 264, 6713, 3636, 307, 644, 295, 264, 7763, 293, 644, 295, 264, 1500, 51052, 51052, 9555, 644, 294, 314, 20818, 13, 51132, 51132, 407, 291, 500, 380, 445, 352, 652, 309, 3092, 13, 51272, 51272, 1743, 11, 536, 264, 6713, 3636, 11, 3470, 264, 6713, 3636, 498, 309, 1177, 380, 980, 291, 437, 281, 360, 51588, 51588, 293, 550, 360, 264, 551, 309, 5112, 291, 281, 360, 13, 51704, 51704], "temperature": 0.0, "avg_logprob": -0.07753362201509022, "compression_ratio": 1.7488151658767772, "no_caption_prob": 7.141269452404231e-05}, {"id": 967, "seek": 442752, "start": 4452.0, "end": 4454.320000000001, "text": " and then do the thing it tells you to do.", "tokens": [50364, 467, 311, 411, 257, 1168, 295, 11, 291, 458, 11, 294, 257, 4985, 1500, 11, 309, 311, 1238, 2689, 300, 294, 314, 20818, 11, 286, 1009, 50728, 50728, 853, 281, 5373, 561, 300, 264, 6713, 3636, 307, 644, 295, 264, 7763, 293, 644, 295, 264, 1500, 51052, 51052, 9555, 644, 294, 314, 20818, 13, 51132, 51132, 407, 291, 500, 380, 445, 352, 652, 309, 3092, 13, 51272, 51272, 1743, 11, 536, 264, 6713, 3636, 11, 3470, 264, 6713, 3636, 498, 309, 1177, 380, 980, 291, 437, 281, 360, 51588, 51588, 293, 550, 360, 264, 551, 309, 5112, 291, 281, 360, 13, 51704, 51704], "temperature": 0.0, "avg_logprob": -0.07753362201509022, "compression_ratio": 1.7488151658767772, "no_caption_prob": 7.141269452404231e-05}, {"id": 968, "seek": 445432, "start": 4454.32, "end": 4459.12, "text": " But so it would be the equivalent of like, yeah, you have a failing test, your CI is", "tokens": [50364, 583, 370, 309, 576, 312, 264, 10344, 295, 411, 11, 1338, 11, 291, 362, 257, 18223, 1500, 11, 428, 37777, 307, 50604, 50604, 516, 281, 1821, 11, 457, 586, 291, 500, 380, 458, 983, 570, 291, 500, 380, 362, 10995, 1589, 13, 50816, 50816, 407, 729, 721, 366, 1293, 1021, 13, 50932, 50932, 467, 311, 1391, 544, 1021, 300, 309, 445, 18199, 294, 2674, 13, 51104, 51104, 583, 498, 291, 393, 652, 309, 1481, 5598, 11, 300, 311, 869, 11, 886, 13, 51272, 51272, 407, 341, 307, 341, 575, 406, 668, 4736, 1939, 13, 51412, 51456, 639, 307, 920, 294, 257, 9861, 3037, 295, 264, 1701, 377, 12855, 40, 13, 51728, 51768], "temperature": 0.0, "avg_logprob": -0.09729074176989104, "compression_ratio": 1.5931558935361216, "no_caption_prob": 1.593618799233809e-05}, {"id": 969, "seek": 445432, "start": 4459.12, "end": 4463.36, "text": " going to break, but now you don't know why because you don't have meaningful information.", "tokens": [50364, 583, 370, 309, 576, 312, 264, 10344, 295, 411, 11, 1338, 11, 291, 362, 257, 18223, 1500, 11, 428, 37777, 307, 50604, 50604, 516, 281, 1821, 11, 457, 586, 291, 500, 380, 458, 983, 570, 291, 500, 380, 362, 10995, 1589, 13, 50816, 50816, 407, 729, 721, 366, 1293, 1021, 13, 50932, 50932, 467, 311, 1391, 544, 1021, 300, 309, 445, 18199, 294, 2674, 13, 51104, 51104, 583, 498, 291, 393, 652, 309, 1481, 5598, 11, 300, 311, 869, 11, 886, 13, 51272, 51272, 407, 341, 307, 341, 575, 406, 668, 4736, 1939, 13, 51412, 51456, 639, 307, 920, 294, 257, 9861, 3037, 295, 264, 1701, 377, 12855, 40, 13, 51728, 51768], "temperature": 0.0, "avg_logprob": -0.09729074176989104, "compression_ratio": 1.5931558935361216, "no_caption_prob": 1.593618799233809e-05}, {"id": 970, "seek": 445432, "start": 4463.36, "end": 4465.679999999999, "text": " So those things are both important.", "tokens": [50364, 583, 370, 309, 576, 312, 264, 10344, 295, 411, 11, 1338, 11, 291, 362, 257, 18223, 1500, 11, 428, 37777, 307, 50604, 50604, 516, 281, 1821, 11, 457, 586, 291, 500, 380, 458, 983, 570, 291, 500, 380, 362, 10995, 1589, 13, 50816, 50816, 407, 729, 721, 366, 1293, 1021, 13, 50932, 50932, 467, 311, 1391, 544, 1021, 300, 309, 445, 18199, 294, 2674, 13, 51104, 51104, 583, 498, 291, 393, 652, 309, 1481, 5598, 11, 300, 311, 869, 11, 886, 13, 51272, 51272, 407, 341, 307, 341, 575, 406, 668, 4736, 1939, 13, 51412, 51456, 639, 307, 920, 294, 257, 9861, 3037, 295, 264, 1701, 377, 12855, 40, 13, 51728, 51768], "temperature": 0.0, "avg_logprob": -0.09729074176989104, "compression_ratio": 1.5931558935361216, "no_caption_prob": 1.593618799233809e-05}, {"id": 971, "seek": 445432, "start": 4465.679999999999, "end": 4469.12, "text": " It's probably more important that it just fails in general.", "tokens": [50364, 583, 370, 309, 576, 312, 264, 10344, 295, 411, 11, 1338, 11, 291, 362, 257, 18223, 1500, 11, 428, 37777, 307, 50604, 50604, 516, 281, 1821, 11, 457, 586, 291, 500, 380, 458, 983, 570, 291, 500, 380, 362, 10995, 1589, 13, 50816, 50816, 407, 729, 721, 366, 1293, 1021, 13, 50932, 50932, 467, 311, 1391, 544, 1021, 300, 309, 445, 18199, 294, 2674, 13, 51104, 51104, 583, 498, 291, 393, 652, 309, 1481, 5598, 11, 300, 311, 869, 11, 886, 13, 51272, 51272, 407, 341, 307, 341, 575, 406, 668, 4736, 1939, 13, 51412, 51456, 639, 307, 920, 294, 257, 9861, 3037, 295, 264, 1701, 377, 12855, 40, 13, 51728, 51768], "temperature": 0.0, "avg_logprob": -0.09729074176989104, "compression_ratio": 1.5931558935361216, "no_caption_prob": 1.593618799233809e-05}, {"id": 972, "seek": 445432, "start": 4469.12, "end": 4472.48, "text": " But if you can make it nice output, that's great, too.", "tokens": [50364, 583, 370, 309, 576, 312, 264, 10344, 295, 411, 11, 1338, 11, 291, 362, 257, 18223, 1500, 11, 428, 37777, 307, 50604, 50604, 516, 281, 1821, 11, 457, 586, 291, 500, 380, 458, 983, 570, 291, 500, 380, 362, 10995, 1589, 13, 50816, 50816, 407, 729, 721, 366, 1293, 1021, 13, 50932, 50932, 467, 311, 1391, 544, 1021, 300, 309, 445, 18199, 294, 2674, 13, 51104, 51104, 583, 498, 291, 393, 652, 309, 1481, 5598, 11, 300, 311, 869, 11, 886, 13, 51272, 51272, 407, 341, 307, 341, 575, 406, 668, 4736, 1939, 13, 51412, 51456, 639, 307, 920, 294, 257, 9861, 3037, 295, 264, 1701, 377, 12855, 40, 13, 51728, 51768], "temperature": 0.0, "avg_logprob": -0.09729074176989104, "compression_ratio": 1.5931558935361216, "no_caption_prob": 1.593618799233809e-05}, {"id": 973, "seek": 445432, "start": 4472.48, "end": 4475.28, "text": " So this is this has not been released yet.", "tokens": [50364, 583, 370, 309, 576, 312, 264, 10344, 295, 411, 11, 1338, 11, 291, 362, 257, 18223, 1500, 11, 428, 37777, 307, 50604, 50604, 516, 281, 1821, 11, 457, 586, 291, 500, 380, 458, 983, 570, 291, 500, 380, 362, 10995, 1589, 13, 50816, 50816, 407, 729, 721, 366, 1293, 1021, 13, 50932, 50932, 467, 311, 1391, 544, 1021, 300, 309, 445, 18199, 294, 2674, 13, 51104, 51104, 583, 498, 291, 393, 652, 309, 1481, 5598, 11, 300, 311, 869, 11, 886, 13, 51272, 51272, 407, 341, 307, 341, 575, 406, 668, 4736, 1939, 13, 51412, 51456, 639, 307, 920, 294, 257, 9861, 3037, 295, 264, 1701, 377, 12855, 40, 13, 51728, 51768], "temperature": 0.0, "avg_logprob": -0.09729074176989104, "compression_ratio": 1.5931558935361216, "no_caption_prob": 1.593618799233809e-05}, {"id": 974, "seek": 445432, "start": 4476.16, "end": 4481.599999999999, "text": " This is still in a beta version of the untest CLI.", "tokens": [50364, 583, 370, 309, 576, 312, 264, 10344, 295, 411, 11, 1338, 11, 291, 362, 257, 18223, 1500, 11, 428, 37777, 307, 50604, 50604, 516, 281, 1821, 11, 457, 586, 291, 500, 380, 458, 983, 570, 291, 500, 380, 362, 10995, 1589, 13, 50816, 50816, 407, 729, 721, 366, 1293, 1021, 13, 50932, 50932, 467, 311, 1391, 544, 1021, 300, 309, 445, 18199, 294, 2674, 13, 51104, 51104, 583, 498, 291, 393, 652, 309, 1481, 5598, 11, 300, 311, 869, 11, 886, 13, 51272, 51272, 407, 341, 307, 341, 575, 406, 668, 4736, 1939, 13, 51412, 51456, 639, 307, 920, 294, 257, 9861, 3037, 295, 264, 1701, 377, 12855, 40, 13, 51728, 51768], "temperature": 0.0, "avg_logprob": -0.09729074176989104, "compression_ratio": 1.5931558935361216, "no_caption_prob": 1.593618799233809e-05}, {"id": 975, "seek": 448160, "start": 4481.6, "end": 4486.64, "text": " Right, but it has a command to make sure that you can to allow you to try it out.", "tokens": [50364, 1779, 11, 457, 309, 575, 257, 5622, 281, 652, 988, 300, 291, 393, 281, 2089, 291, 281, 853, 309, 484, 13, 50616, 50644, 407, 341, 307, 920, 294, 257, 4997, 2896, 11, 257, 4997, 2896, 13, 50872, 51012, 407, 577, 393, 561, 853, 309, 484, 293, 437, 360, 291, 2066, 281, 1568, 490, 561, 30, 51228, 51228, 1779, 13, 51256, 51256, 865, 11, 321, 362, 9437, 512, 23938, 12300, 466, 1293, 264, 777, 3037, 295, 264, 1701, 377, 51624, 51624], "temperature": 0.0, "avg_logprob": -0.1731247901916504, "compression_ratio": 1.5957446808510638, "no_caption_prob": 0.00014859809016343206}, {"id": 976, "seek": 448160, "start": 4487.200000000001, "end": 4491.76, "text": " So this is still in a testing period, a testing period.", "tokens": [50364, 1779, 11, 457, 309, 575, 257, 5622, 281, 652, 988, 300, 291, 393, 281, 2089, 291, 281, 853, 309, 484, 13, 50616, 50644, 407, 341, 307, 920, 294, 257, 4997, 2896, 11, 257, 4997, 2896, 13, 50872, 51012, 407, 577, 393, 561, 853, 309, 484, 293, 437, 360, 291, 2066, 281, 1568, 490, 561, 30, 51228, 51228, 1779, 13, 51256, 51256, 865, 11, 321, 362, 9437, 512, 23938, 12300, 466, 1293, 264, 777, 3037, 295, 264, 1701, 377, 51624, 51624], "temperature": 0.0, "avg_logprob": -0.1731247901916504, "compression_ratio": 1.5957446808510638, "no_caption_prob": 0.00014859809016343206}, {"id": 977, "seek": 448160, "start": 4494.56, "end": 4498.88, "text": " So how can people try it out and what do you expect to hear from people?", "tokens": [50364, 1779, 11, 457, 309, 575, 257, 5622, 281, 652, 988, 300, 291, 393, 281, 2089, 291, 281, 853, 309, 484, 13, 50616, 50644, 407, 341, 307, 920, 294, 257, 4997, 2896, 11, 257, 4997, 2896, 13, 50872, 51012, 407, 577, 393, 561, 853, 309, 484, 293, 437, 360, 291, 2066, 281, 1568, 490, 561, 30, 51228, 51228, 1779, 13, 51256, 51256, 865, 11, 321, 362, 9437, 512, 23938, 12300, 466, 1293, 264, 777, 3037, 295, 264, 1701, 377, 51624, 51624], "temperature": 0.0, "avg_logprob": -0.1731247901916504, "compression_ratio": 1.5957446808510638, "no_caption_prob": 0.00014859809016343206}, {"id": 978, "seek": 448160, "start": 4498.88, "end": 4499.4400000000005, "text": " Right.", "tokens": [50364, 1779, 11, 457, 309, 575, 257, 5622, 281, 652, 988, 300, 291, 393, 281, 2089, 291, 281, 853, 309, 484, 13, 50616, 50644, 407, 341, 307, 920, 294, 257, 4997, 2896, 11, 257, 4997, 2896, 13, 50872, 51012, 407, 577, 393, 561, 853, 309, 484, 293, 437, 360, 291, 2066, 281, 1568, 490, 561, 30, 51228, 51228, 1779, 13, 51256, 51256, 865, 11, 321, 362, 9437, 512, 23938, 12300, 466, 1293, 264, 777, 3037, 295, 264, 1701, 377, 51624, 51624], "temperature": 0.0, "avg_logprob": -0.1731247901916504, "compression_ratio": 1.5957446808510638, "no_caption_prob": 0.00014859809016343206}, {"id": 979, "seek": 448160, "start": 4499.4400000000005, "end": 4506.8, "text": " Yeah, we have posted some discourse posts about both the new version of the untest", "tokens": [50364, 1779, 11, 457, 309, 575, 257, 5622, 281, 652, 988, 300, 291, 393, 281, 2089, 291, 281, 853, 309, 484, 13, 50616, 50644, 407, 341, 307, 920, 294, 257, 4997, 2896, 11, 257, 4997, 2896, 13, 50872, 51012, 407, 577, 393, 561, 853, 309, 484, 293, 437, 360, 291, 2066, 281, 1568, 490, 561, 30, 51228, 51228, 1779, 13, 51256, 51256, 865, 11, 321, 362, 9437, 512, 23938, 12300, 466, 1293, 264, 777, 3037, 295, 264, 1701, 377, 51624, 51624], "temperature": 0.0, "avg_logprob": -0.1731247901916504, "compression_ratio": 1.5957446808510638, "no_caption_prob": 0.00014859809016343206}, {"id": 980, "seek": 450680, "start": 4506.8, "end": 4514.16, "text": " CLI that allows you to try it and also call for testing, call for kind of like, please", "tokens": [50364, 12855, 40, 300, 4045, 291, 281, 853, 309, 293, 611, 818, 337, 4997, 11, 818, 337, 733, 295, 411, 11, 1767, 50732, 50732, 854, 505, 915, 498, 456, 311, 1340, 45028, 2085, 949, 321, 652, 264, 568, 13, 15, 13, 15, 3037, 13, 51076, 51100, 407, 11, 1338, 11, 370, 294, 264, 777, 12855, 40, 11, 286, 1697, 2891, 490, 34218, 1649, 11, 291, 362, 341, 5622, 13, 51472, 51500, 961, 311, 584, 437, 309, 390, 11, 3625, 23742, 1500, 4505, 11, 746, 411, 300, 13, 51776, 51776], "temperature": 0.0, "avg_logprob": -0.1815347671508789, "compression_ratio": 1.4864864864864864, "no_caption_prob": 3.212654701201245e-05}, {"id": 981, "seek": 450680, "start": 4514.16, "end": 4521.04, "text": " help us find if there's anything horribly wrong before we make the 2.0.0 version.", "tokens": [50364, 12855, 40, 300, 4045, 291, 281, 853, 309, 293, 611, 818, 337, 4997, 11, 818, 337, 733, 295, 411, 11, 1767, 50732, 50732, 854, 505, 915, 498, 456, 311, 1340, 45028, 2085, 949, 321, 652, 264, 568, 13, 15, 13, 15, 3037, 13, 51076, 51100, 407, 11, 1338, 11, 370, 294, 264, 777, 12855, 40, 11, 286, 1697, 2891, 490, 34218, 1649, 11, 291, 362, 341, 5622, 13, 51472, 51500, 961, 311, 584, 437, 309, 390, 11, 3625, 23742, 1500, 4505, 11, 746, 411, 300, 13, 51776, 51776], "temperature": 0.0, "avg_logprob": -0.1815347671508789, "compression_ratio": 1.4864864864864864, "no_caption_prob": 3.212654701201245e-05}, {"id": 982, "seek": 450680, "start": 4521.52, "end": 4528.96, "text": " So, yeah, so in the new CLI, I believe starting from revision 8, you have this command.", "tokens": [50364, 12855, 40, 300, 4045, 291, 281, 853, 309, 293, 611, 818, 337, 4997, 11, 818, 337, 733, 295, 411, 11, 1767, 50732, 50732, 854, 505, 915, 498, 456, 311, 1340, 45028, 2085, 949, 321, 652, 264, 568, 13, 15, 13, 15, 3037, 13, 51076, 51100, 407, 11, 1338, 11, 370, 294, 264, 777, 12855, 40, 11, 286, 1697, 2891, 490, 34218, 1649, 11, 291, 362, 341, 5622, 13, 51472, 51500, 961, 311, 584, 437, 309, 390, 11, 3625, 23742, 1500, 4505, 11, 746, 411, 300, 13, 51776, 51776], "temperature": 0.0, "avg_logprob": -0.1815347671508789, "compression_ratio": 1.4864864864864864, "no_caption_prob": 3.212654701201245e-05}, {"id": 983, "seek": 450680, "start": 4529.52, "end": 4535.04, "text": " Let's say what it was, install unstable test master, something like that.", "tokens": [50364, 12855, 40, 300, 4045, 291, 281, 853, 309, 293, 611, 818, 337, 4997, 11, 818, 337, 733, 295, 411, 11, 1767, 50732, 50732, 854, 505, 915, 498, 456, 311, 1340, 45028, 2085, 949, 321, 652, 264, 568, 13, 15, 13, 15, 3037, 13, 51076, 51100, 407, 11, 1338, 11, 370, 294, 264, 777, 12855, 40, 11, 286, 1697, 2891, 490, 34218, 1649, 11, 291, 362, 341, 5622, 13, 51472, 51500, 961, 311, 584, 437, 309, 390, 11, 3625, 23742, 1500, 4505, 11, 746, 411, 300, 13, 51776, 51776], "temperature": 0.0, "avg_logprob": -0.1815347671508789, "compression_ratio": 1.4864864864864864, "no_caption_prob": 3.212654701201245e-05}, {"id": 984, "seek": 453504, "start": 4535.04, "end": 4539.2, "text": " It's going to be that if you do like untest help.", "tokens": [50364, 467, 311, 516, 281, 312, 300, 498, 291, 360, 411, 1701, 377, 854, 13, 50572, 50572, 865, 11, 291, 658, 309, 558, 13, 50616, 50616, 865, 11, 1338, 13, 50664, 50664, 3769, 13, 50684, 50684, 3153, 13, 50700, 50768, 492, 611, 9408, 281, 309, 294, 264, 855, 5570, 4033, 13, 50884, 50884, 407, 2086, 13, 50916, 50944, 1044, 291, 13, 50988, 50988, 407, 309, 1936, 445, 1162, 2581, 300, 428, 502, 13, 17, 13, 17, 3037, 11, 597, 307, 264, 2190, 1701, 377, 3037, 11, 51460, 51460, 309, 445, 1162, 2581, 300, 309, 8306, 264, 3089, 490, 568, 13, 15, 13, 51652, 51652, 1779, 13, 51672, 51672], "temperature": 0.0, "avg_logprob": -0.25725298190335616, "compression_ratio": 1.5594059405940595, "no_caption_prob": 8.347666880581528e-05}, {"id": 985, "seek": 453504, "start": 4539.2, "end": 4540.08, "text": " Yeah, you got it right.", "tokens": [50364, 467, 311, 516, 281, 312, 300, 498, 291, 360, 411, 1701, 377, 854, 13, 50572, 50572, 865, 11, 291, 658, 309, 558, 13, 50616, 50616, 865, 11, 1338, 13, 50664, 50664, 3769, 13, 50684, 50684, 3153, 13, 50700, 50768, 492, 611, 9408, 281, 309, 294, 264, 855, 5570, 4033, 13, 50884, 50884, 407, 2086, 13, 50916, 50944, 1044, 291, 13, 50988, 50988, 407, 309, 1936, 445, 1162, 2581, 300, 428, 502, 13, 17, 13, 17, 3037, 11, 597, 307, 264, 2190, 1701, 377, 3037, 11, 51460, 51460, 309, 445, 1162, 2581, 300, 309, 8306, 264, 3089, 490, 568, 13, 15, 13, 51652, 51652, 1779, 13, 51672, 51672], "temperature": 0.0, "avg_logprob": -0.25725298190335616, "compression_ratio": 1.5594059405940595, "no_caption_prob": 8.347666880581528e-05}, {"id": 986, "seek": 453504, "start": 4540.08, "end": 4541.04, "text": " Yeah, yeah.", "tokens": [50364, 467, 311, 516, 281, 312, 300, 498, 291, 360, 411, 1701, 377, 854, 13, 50572, 50572, 865, 11, 291, 658, 309, 558, 13, 50616, 50616, 865, 11, 1338, 13, 50664, 50664, 3769, 13, 50684, 50684, 3153, 13, 50700, 50768, 492, 611, 9408, 281, 309, 294, 264, 855, 5570, 4033, 13, 50884, 50884, 407, 2086, 13, 50916, 50944, 1044, 291, 13, 50988, 50988, 407, 309, 1936, 445, 1162, 2581, 300, 428, 502, 13, 17, 13, 17, 3037, 11, 597, 307, 264, 2190, 1701, 377, 3037, 11, 51460, 51460, 309, 445, 1162, 2581, 300, 309, 8306, 264, 3089, 490, 568, 13, 15, 13, 51652, 51652, 1779, 13, 51672, 51672], "temperature": 0.0, "avg_logprob": -0.25725298190335616, "compression_ratio": 1.5594059405940595, "no_caption_prob": 8.347666880581528e-05}, {"id": 987, "seek": 453504, "start": 4541.04, "end": 4541.44, "text": " Great.", "tokens": [50364, 467, 311, 516, 281, 312, 300, 498, 291, 360, 411, 1701, 377, 854, 13, 50572, 50572, 865, 11, 291, 658, 309, 558, 13, 50616, 50616, 865, 11, 1338, 13, 50664, 50664, 3769, 13, 50684, 50684, 3153, 13, 50700, 50768, 492, 611, 9408, 281, 309, 294, 264, 855, 5570, 4033, 13, 50884, 50884, 407, 2086, 13, 50916, 50944, 1044, 291, 13, 50988, 50988, 407, 309, 1936, 445, 1162, 2581, 300, 428, 502, 13, 17, 13, 17, 3037, 11, 597, 307, 264, 2190, 1701, 377, 3037, 11, 51460, 51460, 309, 445, 1162, 2581, 300, 309, 8306, 264, 3089, 490, 568, 13, 15, 13, 51652, 51652, 1779, 13, 51672, 51672], "temperature": 0.0, "avg_logprob": -0.25725298190335616, "compression_ratio": 1.5594059405940595, "no_caption_prob": 8.347666880581528e-05}, {"id": 988, "seek": 453504, "start": 4541.44, "end": 4541.76, "text": " Wow.", "tokens": [50364, 467, 311, 516, 281, 312, 300, 498, 291, 360, 411, 1701, 377, 854, 13, 50572, 50572, 865, 11, 291, 658, 309, 558, 13, 50616, 50616, 865, 11, 1338, 13, 50664, 50664, 3769, 13, 50684, 50684, 3153, 13, 50700, 50768, 492, 611, 9408, 281, 309, 294, 264, 855, 5570, 4033, 13, 50884, 50884, 407, 2086, 13, 50916, 50944, 1044, 291, 13, 50988, 50988, 407, 309, 1936, 445, 1162, 2581, 300, 428, 502, 13, 17, 13, 17, 3037, 11, 597, 307, 264, 2190, 1701, 377, 3037, 11, 51460, 51460, 309, 445, 1162, 2581, 300, 309, 8306, 264, 3089, 490, 568, 13, 15, 13, 51652, 51652, 1779, 13, 51672, 51672], "temperature": 0.0, "avg_logprob": -0.25725298190335616, "compression_ratio": 1.5594059405940595, "no_caption_prob": 8.347666880581528e-05}, {"id": 989, "seek": 453504, "start": 4543.12, "end": 4545.44, "text": " We also linked to it in the show notes anyway.", "tokens": [50364, 467, 311, 516, 281, 312, 300, 498, 291, 360, 411, 1701, 377, 854, 13, 50572, 50572, 865, 11, 291, 658, 309, 558, 13, 50616, 50616, 865, 11, 1338, 13, 50664, 50664, 3769, 13, 50684, 50684, 3153, 13, 50700, 50768, 492, 611, 9408, 281, 309, 294, 264, 855, 5570, 4033, 13, 50884, 50884, 407, 2086, 13, 50916, 50944, 1044, 291, 13, 50988, 50988, 407, 309, 1936, 445, 1162, 2581, 300, 428, 502, 13, 17, 13, 17, 3037, 11, 597, 307, 264, 2190, 1701, 377, 3037, 11, 51460, 51460, 309, 445, 1162, 2581, 300, 309, 8306, 264, 3089, 490, 568, 13, 15, 13, 51652, 51652, 1779, 13, 51672, 51672], "temperature": 0.0, "avg_logprob": -0.25725298190335616, "compression_ratio": 1.5594059405940595, "no_caption_prob": 8.347666880581528e-05}, {"id": 990, "seek": 453504, "start": 4545.44, "end": 4546.08, "text": " So yes.", "tokens": [50364, 467, 311, 516, 281, 312, 300, 498, 291, 360, 411, 1701, 377, 854, 13, 50572, 50572, 865, 11, 291, 658, 309, 558, 13, 50616, 50616, 865, 11, 1338, 13, 50664, 50664, 3769, 13, 50684, 50684, 3153, 13, 50700, 50768, 492, 611, 9408, 281, 309, 294, 264, 855, 5570, 4033, 13, 50884, 50884, 407, 2086, 13, 50916, 50944, 1044, 291, 13, 50988, 50988, 407, 309, 1936, 445, 1162, 2581, 300, 428, 502, 13, 17, 13, 17, 3037, 11, 597, 307, 264, 2190, 1701, 377, 3037, 11, 51460, 51460, 309, 445, 1162, 2581, 300, 309, 8306, 264, 3089, 490, 568, 13, 15, 13, 51652, 51652, 1779, 13, 51672, 51672], "temperature": 0.0, "avg_logprob": -0.25725298190335616, "compression_ratio": 1.5594059405940595, "no_caption_prob": 8.347666880581528e-05}, {"id": 991, "seek": 453504, "start": 4546.64, "end": 4547.5199999999995, "text": " Thank you.", "tokens": [50364, 467, 311, 516, 281, 312, 300, 498, 291, 360, 411, 1701, 377, 854, 13, 50572, 50572, 865, 11, 291, 658, 309, 558, 13, 50616, 50616, 865, 11, 1338, 13, 50664, 50664, 3769, 13, 50684, 50684, 3153, 13, 50700, 50768, 492, 611, 9408, 281, 309, 294, 264, 855, 5570, 4033, 13, 50884, 50884, 407, 2086, 13, 50916, 50944, 1044, 291, 13, 50988, 50988, 407, 309, 1936, 445, 1162, 2581, 300, 428, 502, 13, 17, 13, 17, 3037, 11, 597, 307, 264, 2190, 1701, 377, 3037, 11, 51460, 51460, 309, 445, 1162, 2581, 300, 309, 8306, 264, 3089, 490, 568, 13, 15, 13, 51652, 51652, 1779, 13, 51672, 51672], "temperature": 0.0, "avg_logprob": -0.25725298190335616, "compression_ratio": 1.5594059405940595, "no_caption_prob": 8.347666880581528e-05}, {"id": 992, "seek": 453504, "start": 4547.5199999999995, "end": 4556.96, "text": " So it basically just pretends that your 1.2.2 version, which is the current untest version,", "tokens": [50364, 467, 311, 516, 281, 312, 300, 498, 291, 360, 411, 1701, 377, 854, 13, 50572, 50572, 865, 11, 291, 658, 309, 558, 13, 50616, 50616, 865, 11, 1338, 13, 50664, 50664, 3769, 13, 50684, 50684, 3153, 13, 50700, 50768, 492, 611, 9408, 281, 309, 294, 264, 855, 5570, 4033, 13, 50884, 50884, 407, 2086, 13, 50916, 50944, 1044, 291, 13, 50988, 50988, 407, 309, 1936, 445, 1162, 2581, 300, 428, 502, 13, 17, 13, 17, 3037, 11, 597, 307, 264, 2190, 1701, 377, 3037, 11, 51460, 51460, 309, 445, 1162, 2581, 300, 309, 8306, 264, 3089, 490, 568, 13, 15, 13, 51652, 51652, 1779, 13, 51672, 51672], "temperature": 0.0, "avg_logprob": -0.25725298190335616, "compression_ratio": 1.5594059405940595, "no_caption_prob": 8.347666880581528e-05}, {"id": 993, "seek": 453504, "start": 4556.96, "end": 4560.8, "text": " it just pretends that it contains the code from 2.0.", "tokens": [50364, 467, 311, 516, 281, 312, 300, 498, 291, 360, 411, 1701, 377, 854, 13, 50572, 50572, 865, 11, 291, 658, 309, 558, 13, 50616, 50616, 865, 11, 1338, 13, 50664, 50664, 3769, 13, 50684, 50684, 3153, 13, 50700, 50768, 492, 611, 9408, 281, 309, 294, 264, 855, 5570, 4033, 13, 50884, 50884, 407, 2086, 13, 50916, 50944, 1044, 291, 13, 50988, 50988, 407, 309, 1936, 445, 1162, 2581, 300, 428, 502, 13, 17, 13, 17, 3037, 11, 597, 307, 264, 2190, 1701, 377, 3037, 11, 51460, 51460, 309, 445, 1162, 2581, 300, 309, 8306, 264, 3089, 490, 568, 13, 15, 13, 51652, 51652, 1779, 13, 51672, 51672], "temperature": 0.0, "avg_logprob": -0.25725298190335616, "compression_ratio": 1.5594059405940595, "no_caption_prob": 8.347666880581528e-05}, {"id": 994, "seek": 453504, "start": 4560.8, "end": 4561.2, "text": " Right.", "tokens": [50364, 467, 311, 516, 281, 312, 300, 498, 291, 360, 411, 1701, 377, 854, 13, 50572, 50572, 865, 11, 291, 658, 309, 558, 13, 50616, 50616, 865, 11, 1338, 13, 50664, 50664, 3769, 13, 50684, 50684, 3153, 13, 50700, 50768, 492, 611, 9408, 281, 309, 294, 264, 855, 5570, 4033, 13, 50884, 50884, 407, 2086, 13, 50916, 50944, 1044, 291, 13, 50988, 50988, 407, 309, 1936, 445, 1162, 2581, 300, 428, 502, 13, 17, 13, 17, 3037, 11, 597, 307, 264, 2190, 1701, 377, 3037, 11, 51460, 51460, 309, 445, 1162, 2581, 300, 309, 8306, 264, 3089, 490, 568, 13, 15, 13, 51652, 51652, 1779, 13, 51672, 51672], "temperature": 0.0, "avg_logprob": -0.25725298190335616, "compression_ratio": 1.5594059405940595, "no_caption_prob": 8.347666880581528e-05}, {"id": 995, "seek": 456120, "start": 4561.2, "end": 4572.0, "text": " So it rewrites your elm home, which is usually in like the home slash dot elm slash something.", "tokens": [50364, 407, 309, 319, 86, 30931, 428, 806, 76, 1280, 11, 597, 307, 2673, 294, 411, 264, 1280, 17330, 5893, 806, 76, 17330, 746, 13, 50904, 50932, 400, 370, 321, 366, 4476, 319, 19868, 428, 19459, 293, 322, 264, 958, 1701, 377, 1190, 11, 309, 486, 1888, 493, 51364, 51364, 264, 777, 6405, 13, 51412, 51412, 1779, 13, 51424, 51456], "temperature": 0.0, "avg_logprob": -0.13913493859963338, "compression_ratio": 1.4513888888888888, "no_caption_prob": 3.6882531276205555e-05}, {"id": 996, "seek": 456120, "start": 4572.5599999999995, "end": 4581.2, "text": " And so we are essentially rewriting your cache and on the next untest run, it will pick up", "tokens": [50364, 407, 309, 319, 86, 30931, 428, 806, 76, 1280, 11, 597, 307, 2673, 294, 411, 264, 1280, 17330, 5893, 806, 76, 17330, 746, 13, 50904, 50932, 400, 370, 321, 366, 4476, 319, 19868, 428, 19459, 293, 322, 264, 958, 1701, 377, 1190, 11, 309, 486, 1888, 493, 51364, 51364, 264, 777, 6405, 13, 51412, 51412, 1779, 13, 51424, 51456], "temperature": 0.0, "avg_logprob": -0.13913493859963338, "compression_ratio": 1.4513888888888888, "no_caption_prob": 3.6882531276205555e-05}, {"id": 997, "seek": 456120, "start": 4581.2, "end": 4582.16, "text": " the new library.", "tokens": [50364, 407, 309, 319, 86, 30931, 428, 806, 76, 1280, 11, 597, 307, 2673, 294, 411, 264, 1280, 17330, 5893, 806, 76, 17330, 746, 13, 50904, 50932, 400, 370, 321, 366, 4476, 319, 19868, 428, 19459, 293, 322, 264, 958, 1701, 377, 1190, 11, 309, 486, 1888, 493, 51364, 51364, 264, 777, 6405, 13, 51412, 51412, 1779, 13, 51424, 51456], "temperature": 0.0, "avg_logprob": -0.13913493859963338, "compression_ratio": 1.4513888888888888, "no_caption_prob": 3.6882531276205555e-05}, {"id": 998, "seek": 456120, "start": 4582.16, "end": 4582.4, "text": " Right.", "tokens": [50364, 407, 309, 319, 86, 30931, 428, 806, 76, 1280, 11, 597, 307, 2673, 294, 411, 264, 1280, 17330, 5893, 806, 76, 17330, 746, 13, 50904, 50932, 400, 370, 321, 366, 4476, 319, 19868, 428, 19459, 293, 322, 264, 958, 1701, 377, 1190, 11, 309, 486, 1888, 493, 51364, 51364, 264, 777, 6405, 13, 51412, 51412, 1779, 13, 51424, 51456], "temperature": 0.0, "avg_logprob": -0.13913493859963338, "compression_ratio": 1.4513888888888888, "no_caption_prob": 3.6882531276205555e-05}, {"id": 999, "seek": 458240, "start": 4582.4, "end": 4591.12, "text": " And you can undo that either by just removing the cache, so removing the dot elm directory,", "tokens": [50364, 400, 291, 393, 23779, 300, 2139, 538, 445, 12720, 264, 19459, 11, 370, 12720, 264, 5893, 806, 76, 21120, 11, 50800, 50816, 420, 291, 393, 764, 517, 40166, 23742, 1500, 4505, 5622, 294, 806, 76, 1500, 13, 51108, 51124, 400, 1338, 11, 370, 934, 291, 3625, 300, 11, 934, 309, 733, 295, 18274, 433, 365, 428, 19459, 11, 291, 393, 51500, 51500, 1190, 806, 76, 1500, 420, 806, 76, 1500, 25855, 11, 286, 1697, 11, 293, 309, 486, 764, 264, 777, 6405, 13, 51728, 51748], "temperature": 0.0, "avg_logprob": -0.16430044722283024, "compression_ratio": 1.7005347593582887, "no_caption_prob": 1.8037681002169847e-05}, {"id": 1000, "seek": 458240, "start": 4591.44, "end": 4597.28, "text": " or you can use uninstall unstable test master command in elm test.", "tokens": [50364, 400, 291, 393, 23779, 300, 2139, 538, 445, 12720, 264, 19459, 11, 370, 12720, 264, 5893, 806, 76, 21120, 11, 50800, 50816, 420, 291, 393, 764, 517, 40166, 23742, 1500, 4505, 5622, 294, 806, 76, 1500, 13, 51108, 51124, 400, 1338, 11, 370, 934, 291, 3625, 300, 11, 934, 309, 733, 295, 18274, 433, 365, 428, 19459, 11, 291, 393, 51500, 51500, 1190, 806, 76, 1500, 420, 806, 76, 1500, 25855, 11, 286, 1697, 11, 293, 309, 486, 764, 264, 777, 6405, 13, 51728, 51748], "temperature": 0.0, "avg_logprob": -0.16430044722283024, "compression_ratio": 1.7005347593582887, "no_caption_prob": 1.8037681002169847e-05}, {"id": 1001, "seek": 458240, "start": 4597.599999999999, "end": 4605.12, "text": " And yeah, so after you install that, after it kind of tempers with your cache, you can", "tokens": [50364, 400, 291, 393, 23779, 300, 2139, 538, 445, 12720, 264, 19459, 11, 370, 12720, 264, 5893, 806, 76, 21120, 11, 50800, 50816, 420, 291, 393, 764, 517, 40166, 23742, 1500, 4505, 5622, 294, 806, 76, 1500, 13, 51108, 51124, 400, 1338, 11, 370, 934, 291, 3625, 300, 11, 934, 309, 733, 295, 18274, 433, 365, 428, 19459, 11, 291, 393, 51500, 51500, 1190, 806, 76, 1500, 420, 806, 76, 1500, 25855, 11, 286, 1697, 11, 293, 309, 486, 764, 264, 777, 6405, 13, 51728, 51748], "temperature": 0.0, "avg_logprob": -0.16430044722283024, "compression_ratio": 1.7005347593582887, "no_caption_prob": 1.8037681002169847e-05}, {"id": 1002, "seek": 458240, "start": 4605.12, "end": 4609.679999999999, "text": " run elm test or elm test RS, I believe, and it will use the new library.", "tokens": [50364, 400, 291, 393, 23779, 300, 2139, 538, 445, 12720, 264, 19459, 11, 370, 12720, 264, 5893, 806, 76, 21120, 11, 50800, 50816, 420, 291, 393, 764, 517, 40166, 23742, 1500, 4505, 5622, 294, 806, 76, 1500, 13, 51108, 51124, 400, 1338, 11, 370, 934, 291, 3625, 300, 11, 934, 309, 733, 295, 18274, 433, 365, 428, 19459, 11, 291, 393, 51500, 51500, 1190, 806, 76, 1500, 420, 806, 76, 1500, 25855, 11, 286, 1697, 11, 293, 309, 486, 764, 264, 777, 6405, 13, 51728, 51748], "temperature": 0.0, "avg_logprob": -0.16430044722283024, "compression_ratio": 1.7005347593582887, "no_caption_prob": 1.8037681002169847e-05}, {"id": 1003, "seek": 460968, "start": 4609.68, "end": 4612.96, "text": " And so there are some API changes, right?", "tokens": [50364, 400, 370, 456, 366, 512, 9362, 2962, 11, 558, 30, 50528, 50528, 407, 291, 393, 2066, 281, 536, 512, 20774, 490, 411, 1500, 3089, 406, 715, 4883, 11, 457, 300, 311, 516, 50956, 50956, 281, 312, 11, 286, 1697, 11, 5240, 264, 2074, 293, 7908, 6828, 885, 2780, 490, 264, 2066, 10088, 51348, 51364, 293, 611, 264, 2604, 781, 293, 15508, 6828, 4473, 281, 411, 6119, 420, 264, 661, 636, 926, 13, 51792, 51792], "temperature": 0.0, "avg_logprob": -0.18023523531462016, "compression_ratio": 1.5505050505050506, "no_caption_prob": 1.59254705067724e-05}, {"id": 1004, "seek": 460968, "start": 4612.96, "end": 4621.52, "text": " So you can expect to see some failures from like test code not compiling, but that's going", "tokens": [50364, 400, 370, 456, 366, 512, 9362, 2962, 11, 558, 30, 50528, 50528, 407, 291, 393, 2066, 281, 536, 512, 20774, 490, 411, 1500, 3089, 406, 715, 4883, 11, 457, 300, 311, 516, 50956, 50956, 281, 312, 11, 286, 1697, 11, 5240, 264, 2074, 293, 7908, 6828, 885, 2780, 490, 264, 2066, 10088, 51348, 51364, 293, 611, 264, 2604, 781, 293, 15508, 6828, 4473, 281, 411, 6119, 420, 264, 661, 636, 926, 13, 51792, 51792], "temperature": 0.0, "avg_logprob": -0.18023523531462016, "compression_ratio": 1.5505050505050506, "no_caption_prob": 1.59254705067724e-05}, {"id": 1005, "seek": 460968, "start": 4621.52, "end": 4629.360000000001, "text": " to be, I believe, mostly the true and false functions being gone from the expect module", "tokens": [50364, 400, 370, 456, 366, 512, 9362, 2962, 11, 558, 30, 50528, 50528, 407, 291, 393, 2066, 281, 536, 512, 20774, 490, 411, 1500, 3089, 406, 715, 4883, 11, 457, 300, 311, 516, 50956, 50956, 281, 312, 11, 286, 1697, 11, 5240, 264, 2074, 293, 7908, 6828, 885, 2780, 490, 264, 2066, 10088, 51348, 51364, 293, 611, 264, 2604, 781, 293, 15508, 6828, 4473, 281, 411, 6119, 420, 264, 661, 636, 926, 13, 51792, 51792], "temperature": 0.0, "avg_logprob": -0.18023523531462016, "compression_ratio": 1.5505050505050506, "no_caption_prob": 1.59254705067724e-05}, {"id": 1006, "seek": 460968, "start": 4629.68, "end": 4638.240000000001, "text": " and also the tuple and triple functions changing to like pair or the other way around.", "tokens": [50364, 400, 370, 456, 366, 512, 9362, 2962, 11, 558, 30, 50528, 50528, 407, 291, 393, 2066, 281, 536, 512, 20774, 490, 411, 1500, 3089, 406, 715, 4883, 11, 457, 300, 311, 516, 50956, 50956, 281, 312, 11, 286, 1697, 11, 5240, 264, 2074, 293, 7908, 6828, 885, 2780, 490, 264, 2066, 10088, 51348, 51364, 293, 611, 264, 2604, 781, 293, 15508, 6828, 4473, 281, 411, 6119, 420, 264, 661, 636, 926, 13, 51792, 51792], "temperature": 0.0, "avg_logprob": -0.18023523531462016, "compression_ratio": 1.5505050505050506, "no_caption_prob": 1.59254705067724e-05}, {"id": 1007, "seek": 463824, "start": 4638.24, "end": 4645.92, "text": " Basically tuple fuzzers got a little bit of, again, user experience improvement, I believe,", "tokens": [50364, 8537, 2604, 781, 283, 16740, 433, 658, 257, 707, 857, 295, 11, 797, 11, 4195, 1752, 10444, 11, 286, 1697, 11, 50748, 50764, 689, 291, 500, 380, 362, 281, 3877, 264, 7284, 283, 16740, 433, 666, 257, 2604, 781, 13, 51044, 51044, 865, 11, 558, 13, 51096, 51096, 865, 11, 291, 500, 380, 362, 281, 1320, 294, 257, 2604, 781, 295, 283, 16740, 433, 13, 51236, 51236, 509, 1320, 294, 732, 12869, 337, 264, 2604, 781, 293, 309, 311, 406, 1219, 283, 16740, 5893, 2604, 781, 13, 51516, 51516, 467, 311, 1219, 283, 16740, 5893, 6119, 13, 51584, 51584, 467, 311, 406, 1219, 283, 16740, 5893, 2604, 781, 1045, 13, 51684, 51684, 467, 311, 1219, 283, 16740, 5893, 15508, 11, 597, 286, 709, 4382, 11, 2318, 498, 291, 434, 1228, 257, 2604, 781, 51860, 51860], "temperature": 0.0, "avg_logprob": -0.2603912353515625, "compression_ratio": 1.9310344827586208, "no_caption_prob": 3.4266482543898746e-05}, {"id": 1008, "seek": 463824, "start": 4646.24, "end": 4651.84, "text": " where you don't have to structure the inner fuzzers into a tuple.", "tokens": [50364, 8537, 2604, 781, 283, 16740, 433, 658, 257, 707, 857, 295, 11, 797, 11, 4195, 1752, 10444, 11, 286, 1697, 11, 50748, 50764, 689, 291, 500, 380, 362, 281, 3877, 264, 7284, 283, 16740, 433, 666, 257, 2604, 781, 13, 51044, 51044, 865, 11, 558, 13, 51096, 51096, 865, 11, 291, 500, 380, 362, 281, 1320, 294, 257, 2604, 781, 295, 283, 16740, 433, 13, 51236, 51236, 509, 1320, 294, 732, 12869, 337, 264, 2604, 781, 293, 309, 311, 406, 1219, 283, 16740, 5893, 2604, 781, 13, 51516, 51516, 467, 311, 1219, 283, 16740, 5893, 6119, 13, 51584, 51584, 467, 311, 406, 1219, 283, 16740, 5893, 2604, 781, 1045, 13, 51684, 51684, 467, 311, 1219, 283, 16740, 5893, 15508, 11, 597, 286, 709, 4382, 11, 2318, 498, 291, 434, 1228, 257, 2604, 781, 51860, 51860], "temperature": 0.0, "avg_logprob": -0.2603912353515625, "compression_ratio": 1.9310344827586208, "no_caption_prob": 3.4266482543898746e-05}, {"id": 1009, "seek": 463824, "start": 4651.84, "end": 4652.88, "text": " Yeah, right.", "tokens": [50364, 8537, 2604, 781, 283, 16740, 433, 658, 257, 707, 857, 295, 11, 797, 11, 4195, 1752, 10444, 11, 286, 1697, 11, 50748, 50764, 689, 291, 500, 380, 362, 281, 3877, 264, 7284, 283, 16740, 433, 666, 257, 2604, 781, 13, 51044, 51044, 865, 11, 558, 13, 51096, 51096, 865, 11, 291, 500, 380, 362, 281, 1320, 294, 257, 2604, 781, 295, 283, 16740, 433, 13, 51236, 51236, 509, 1320, 294, 732, 12869, 337, 264, 2604, 781, 293, 309, 311, 406, 1219, 283, 16740, 5893, 2604, 781, 13, 51516, 51516, 467, 311, 1219, 283, 16740, 5893, 6119, 13, 51584, 51584, 467, 311, 406, 1219, 283, 16740, 5893, 2604, 781, 1045, 13, 51684, 51684, 467, 311, 1219, 283, 16740, 5893, 15508, 11, 597, 286, 709, 4382, 11, 2318, 498, 291, 434, 1228, 257, 2604, 781, 51860, 51860], "temperature": 0.0, "avg_logprob": -0.2603912353515625, "compression_ratio": 1.9310344827586208, "no_caption_prob": 3.4266482543898746e-05}, {"id": 1010, "seek": 463824, "start": 4652.88, "end": 4655.679999999999, "text": " Yeah, you don't have to pass in a tuple of fuzzers.", "tokens": [50364, 8537, 2604, 781, 283, 16740, 433, 658, 257, 707, 857, 295, 11, 797, 11, 4195, 1752, 10444, 11, 286, 1697, 11, 50748, 50764, 689, 291, 500, 380, 362, 281, 3877, 264, 7284, 283, 16740, 433, 666, 257, 2604, 781, 13, 51044, 51044, 865, 11, 558, 13, 51096, 51096, 865, 11, 291, 500, 380, 362, 281, 1320, 294, 257, 2604, 781, 295, 283, 16740, 433, 13, 51236, 51236, 509, 1320, 294, 732, 12869, 337, 264, 2604, 781, 293, 309, 311, 406, 1219, 283, 16740, 5893, 2604, 781, 13, 51516, 51516, 467, 311, 1219, 283, 16740, 5893, 6119, 13, 51584, 51584, 467, 311, 406, 1219, 283, 16740, 5893, 2604, 781, 1045, 13, 51684, 51684, 467, 311, 1219, 283, 16740, 5893, 15508, 11, 597, 286, 709, 4382, 11, 2318, 498, 291, 434, 1228, 257, 2604, 781, 51860, 51860], "temperature": 0.0, "avg_logprob": -0.2603912353515625, "compression_ratio": 1.9310344827586208, "no_caption_prob": 3.4266482543898746e-05}, {"id": 1011, "seek": 463824, "start": 4655.679999999999, "end": 4661.28, "text": " You pass in two arguments for the tuple and it's not called fuzz dot tuple.", "tokens": [50364, 8537, 2604, 781, 283, 16740, 433, 658, 257, 707, 857, 295, 11, 797, 11, 4195, 1752, 10444, 11, 286, 1697, 11, 50748, 50764, 689, 291, 500, 380, 362, 281, 3877, 264, 7284, 283, 16740, 433, 666, 257, 2604, 781, 13, 51044, 51044, 865, 11, 558, 13, 51096, 51096, 865, 11, 291, 500, 380, 362, 281, 1320, 294, 257, 2604, 781, 295, 283, 16740, 433, 13, 51236, 51236, 509, 1320, 294, 732, 12869, 337, 264, 2604, 781, 293, 309, 311, 406, 1219, 283, 16740, 5893, 2604, 781, 13, 51516, 51516, 467, 311, 1219, 283, 16740, 5893, 6119, 13, 51584, 51584, 467, 311, 406, 1219, 283, 16740, 5893, 2604, 781, 1045, 13, 51684, 51684, 467, 311, 1219, 283, 16740, 5893, 15508, 11, 597, 286, 709, 4382, 11, 2318, 498, 291, 434, 1228, 257, 2604, 781, 51860, 51860], "temperature": 0.0, "avg_logprob": -0.2603912353515625, "compression_ratio": 1.9310344827586208, "no_caption_prob": 3.4266482543898746e-05}, {"id": 1012, "seek": 463824, "start": 4661.28, "end": 4662.639999999999, "text": " It's called fuzz dot pair.", "tokens": [50364, 8537, 2604, 781, 283, 16740, 433, 658, 257, 707, 857, 295, 11, 797, 11, 4195, 1752, 10444, 11, 286, 1697, 11, 50748, 50764, 689, 291, 500, 380, 362, 281, 3877, 264, 7284, 283, 16740, 433, 666, 257, 2604, 781, 13, 51044, 51044, 865, 11, 558, 13, 51096, 51096, 865, 11, 291, 500, 380, 362, 281, 1320, 294, 257, 2604, 781, 295, 283, 16740, 433, 13, 51236, 51236, 509, 1320, 294, 732, 12869, 337, 264, 2604, 781, 293, 309, 311, 406, 1219, 283, 16740, 5893, 2604, 781, 13, 51516, 51516, 467, 311, 1219, 283, 16740, 5893, 6119, 13, 51584, 51584, 467, 311, 406, 1219, 283, 16740, 5893, 2604, 781, 1045, 13, 51684, 51684, 467, 311, 1219, 283, 16740, 5893, 15508, 11, 597, 286, 709, 4382, 11, 2318, 498, 291, 434, 1228, 257, 2604, 781, 51860, 51860], "temperature": 0.0, "avg_logprob": -0.2603912353515625, "compression_ratio": 1.9310344827586208, "no_caption_prob": 3.4266482543898746e-05}, {"id": 1013, "seek": 463824, "start": 4662.639999999999, "end": 4664.639999999999, "text": " It's not called fuzz dot tuple three.", "tokens": [50364, 8537, 2604, 781, 283, 16740, 433, 658, 257, 707, 857, 295, 11, 797, 11, 4195, 1752, 10444, 11, 286, 1697, 11, 50748, 50764, 689, 291, 500, 380, 362, 281, 3877, 264, 7284, 283, 16740, 433, 666, 257, 2604, 781, 13, 51044, 51044, 865, 11, 558, 13, 51096, 51096, 865, 11, 291, 500, 380, 362, 281, 1320, 294, 257, 2604, 781, 295, 283, 16740, 433, 13, 51236, 51236, 509, 1320, 294, 732, 12869, 337, 264, 2604, 781, 293, 309, 311, 406, 1219, 283, 16740, 5893, 2604, 781, 13, 51516, 51516, 467, 311, 1219, 283, 16740, 5893, 6119, 13, 51584, 51584, 467, 311, 406, 1219, 283, 16740, 5893, 2604, 781, 1045, 13, 51684, 51684, 467, 311, 1219, 283, 16740, 5893, 15508, 11, 597, 286, 709, 4382, 11, 2318, 498, 291, 434, 1228, 257, 2604, 781, 51860, 51860], "temperature": 0.0, "avg_logprob": -0.2603912353515625, "compression_ratio": 1.9310344827586208, "no_caption_prob": 3.4266482543898746e-05}, {"id": 1014, "seek": 463824, "start": 4664.639999999999, "end": 4668.16, "text": " It's called fuzz dot triple, which I much prefer, especially if you're using a tuple", "tokens": [50364, 8537, 2604, 781, 283, 16740, 433, 658, 257, 707, 857, 295, 11, 797, 11, 4195, 1752, 10444, 11, 286, 1697, 11, 50748, 50764, 689, 291, 500, 380, 362, 281, 3877, 264, 7284, 283, 16740, 433, 666, 257, 2604, 781, 13, 51044, 51044, 865, 11, 558, 13, 51096, 51096, 865, 11, 291, 500, 380, 362, 281, 1320, 294, 257, 2604, 781, 295, 283, 16740, 433, 13, 51236, 51236, 509, 1320, 294, 732, 12869, 337, 264, 2604, 781, 293, 309, 311, 406, 1219, 283, 16740, 5893, 2604, 781, 13, 51516, 51516, 467, 311, 1219, 283, 16740, 5893, 6119, 13, 51584, 51584, 467, 311, 406, 1219, 283, 16740, 5893, 2604, 781, 1045, 13, 51684, 51684, 467, 311, 1219, 283, 16740, 5893, 15508, 11, 597, 286, 709, 4382, 11, 2318, 498, 291, 434, 1228, 257, 2604, 781, 51860, 51860], "temperature": 0.0, "avg_logprob": -0.2603912353515625, "compression_ratio": 1.9310344827586208, "no_caption_prob": 3.4266482543898746e-05}, {"id": 1015, "seek": 466816, "start": 4668.16, "end": 4672.639999999999, "text": " with the Elm syntax actually only having those two kinds now.", "tokens": [50364, 365, 264, 2699, 76, 28431, 767, 787, 1419, 729, 732, 3685, 586, 13, 50588, 50588, 865, 13, 50604, 50604, 400, 370, 456, 307, 257, 4166, 466, 1936, 9362, 2962, 13, 50864, 50900, 400, 370, 286, 362, 3031, 281, 360, 257, 665, 1691, 295, 411, 22161, 552, 439, 484, 13, 51160, 51160, 286, 767, 1143, 2699, 76, 3414, 5622, 281, 483, 300, 293, 1566, 437, 291, 393, 360, 2602, 13, 51536, 51564, 400, 309, 820, 312, 1596, 2107, 19011, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.15207181493920016, "compression_ratio": 1.5270935960591132, "no_caption_prob": 6.921162275830284e-05}, {"id": 1016, "seek": 466816, "start": 4672.639999999999, "end": 4672.96, "text": " Yeah.", "tokens": [50364, 365, 264, 2699, 76, 28431, 767, 787, 1419, 729, 732, 3685, 586, 13, 50588, 50588, 865, 13, 50604, 50604, 400, 370, 456, 307, 257, 4166, 466, 1936, 9362, 2962, 13, 50864, 50900, 400, 370, 286, 362, 3031, 281, 360, 257, 665, 1691, 295, 411, 22161, 552, 439, 484, 13, 51160, 51160, 286, 767, 1143, 2699, 76, 3414, 5622, 281, 483, 300, 293, 1566, 437, 291, 393, 360, 2602, 13, 51536, 51564, 400, 309, 820, 312, 1596, 2107, 19011, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.15207181493920016, "compression_ratio": 1.5270935960591132, "no_caption_prob": 6.921162275830284e-05}, {"id": 1017, "seek": 466816, "start": 4672.96, "end": 4678.16, "text": " And so there is a document about basically API changes.", "tokens": [50364, 365, 264, 2699, 76, 28431, 767, 787, 1419, 729, 732, 3685, 586, 13, 50588, 50588, 865, 13, 50604, 50604, 400, 370, 456, 307, 257, 4166, 466, 1936, 9362, 2962, 13, 50864, 50900, 400, 370, 286, 362, 3031, 281, 360, 257, 665, 1691, 295, 411, 22161, 552, 439, 484, 13, 51160, 51160, 286, 767, 1143, 2699, 76, 3414, 5622, 281, 483, 300, 293, 1566, 437, 291, 393, 360, 2602, 13, 51536, 51564, 400, 309, 820, 312, 1596, 2107, 19011, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.15207181493920016, "compression_ratio": 1.5270935960591132, "no_caption_prob": 6.921162275830284e-05}, {"id": 1018, "seek": 466816, "start": 4678.88, "end": 4684.08, "text": " And so I have tried to do a good job of like listing them all out.", "tokens": [50364, 365, 264, 2699, 76, 28431, 767, 787, 1419, 729, 732, 3685, 586, 13, 50588, 50588, 865, 13, 50604, 50604, 400, 370, 456, 307, 257, 4166, 466, 1936, 9362, 2962, 13, 50864, 50900, 400, 370, 286, 362, 3031, 281, 360, 257, 665, 1691, 295, 411, 22161, 552, 439, 484, 13, 51160, 51160, 286, 767, 1143, 2699, 76, 3414, 5622, 281, 483, 300, 293, 1566, 437, 291, 393, 360, 2602, 13, 51536, 51564, 400, 309, 820, 312, 1596, 2107, 19011, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.15207181493920016, "compression_ratio": 1.5270935960591132, "no_caption_prob": 6.921162275830284e-05}, {"id": 1019, "seek": 466816, "start": 4684.08, "end": 4691.599999999999, "text": " I actually used Elm div command to get that and saying what you can do instead.", "tokens": [50364, 365, 264, 2699, 76, 28431, 767, 787, 1419, 729, 732, 3685, 586, 13, 50588, 50588, 865, 13, 50604, 50604, 400, 370, 456, 307, 257, 4166, 466, 1936, 9362, 2962, 13, 50864, 50900, 400, 370, 286, 362, 3031, 281, 360, 257, 665, 1691, 295, 411, 22161, 552, 439, 484, 13, 51160, 51160, 286, 767, 1143, 2699, 76, 3414, 5622, 281, 483, 300, 293, 1566, 437, 291, 393, 360, 2602, 13, 51536, 51564, 400, 309, 820, 312, 1596, 2107, 19011, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.15207181493920016, "compression_ratio": 1.5270935960591132, "no_caption_prob": 6.921162275830284e-05}, {"id": 1020, "seek": 466816, "start": 4692.16, "end": 4696.16, "text": " And it should be quite non problematic.", "tokens": [50364, 365, 264, 2699, 76, 28431, 767, 787, 1419, 729, 732, 3685, 586, 13, 50588, 50588, 865, 13, 50604, 50604, 400, 370, 456, 307, 257, 4166, 466, 1936, 9362, 2962, 13, 50864, 50900, 400, 370, 286, 362, 3031, 281, 360, 257, 665, 1691, 295, 411, 22161, 552, 439, 484, 13, 51160, 51160, 286, 767, 1143, 2699, 76, 3414, 5622, 281, 483, 300, 293, 1566, 437, 291, 393, 360, 2602, 13, 51536, 51564, 400, 309, 820, 312, 1596, 2107, 19011, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.15207181493920016, "compression_ratio": 1.5270935960591132, "no_caption_prob": 6.921162275830284e-05}, {"id": 1021, "seek": 469616, "start": 4696.16, "end": 4702.5599999999995, "text": " It should be really just like those tuple changes and expect true and false being gone,", "tokens": [50364, 467, 820, 312, 534, 445, 411, 729, 2604, 781, 2962, 293, 2066, 2074, 293, 7908, 885, 2780, 11, 50684, 50712, 689, 797, 11, 456, 311, 264, 10835, 295, 437, 291, 393, 360, 2602, 13, 50900, 50936, 467, 311, 472, 281, 472, 11, 370, 439, 3331, 820, 312, 5343, 13, 51124, 51124, 407, 291, 393, 1500, 309, 484, 13, 51232, 51232, 509, 393, 1319, 428, 1500, 14205, 293, 536, 1968, 456, 307, 512, 1154, 300, 321, 994, 380, 519, 51652, 51652], "temperature": 0.0, "avg_logprob": -0.10852633452996975, "compression_ratio": 1.5829145728643217, "no_caption_prob": 1.9798681023530662e-05}, {"id": 1022, "seek": 469616, "start": 4703.12, "end": 4706.88, "text": " where again, there's the explanation of what you can do instead.", "tokens": [50364, 467, 820, 312, 534, 445, 411, 729, 2604, 781, 2962, 293, 2066, 2074, 293, 7908, 885, 2780, 11, 50684, 50712, 689, 797, 11, 456, 311, 264, 10835, 295, 437, 291, 393, 360, 2602, 13, 50900, 50936, 467, 311, 472, 281, 472, 11, 370, 439, 3331, 820, 312, 5343, 13, 51124, 51124, 407, 291, 393, 1500, 309, 484, 13, 51232, 51232, 509, 393, 1319, 428, 1500, 14205, 293, 536, 1968, 456, 307, 512, 1154, 300, 321, 994, 380, 519, 51652, 51652], "temperature": 0.0, "avg_logprob": -0.10852633452996975, "compression_ratio": 1.5829145728643217, "no_caption_prob": 1.9798681023530662e-05}, {"id": 1023, "seek": 469616, "start": 4707.599999999999, "end": 4711.36, "text": " It's one to one, so all cases should be covered.", "tokens": [50364, 467, 820, 312, 534, 445, 411, 729, 2604, 781, 2962, 293, 2066, 2074, 293, 7908, 885, 2780, 11, 50684, 50712, 689, 797, 11, 456, 311, 264, 10835, 295, 437, 291, 393, 360, 2602, 13, 50900, 50936, 467, 311, 472, 281, 472, 11, 370, 439, 3331, 820, 312, 5343, 13, 51124, 51124, 407, 291, 393, 1500, 309, 484, 13, 51232, 51232, 509, 393, 1319, 428, 1500, 14205, 293, 536, 1968, 456, 307, 512, 1154, 300, 321, 994, 380, 519, 51652, 51652], "temperature": 0.0, "avg_logprob": -0.10852633452996975, "compression_ratio": 1.5829145728643217, "no_caption_prob": 1.9798681023530662e-05}, {"id": 1024, "seek": 469616, "start": 4711.36, "end": 4713.5199999999995, "text": " So you can test it out.", "tokens": [50364, 467, 820, 312, 534, 445, 411, 729, 2604, 781, 2962, 293, 2066, 2074, 293, 7908, 885, 2780, 11, 50684, 50712, 689, 797, 11, 456, 311, 264, 10835, 295, 437, 291, 393, 360, 2602, 13, 50900, 50936, 467, 311, 472, 281, 472, 11, 370, 439, 3331, 820, 312, 5343, 13, 51124, 51124, 407, 291, 393, 1500, 309, 484, 13, 51232, 51232, 509, 393, 1319, 428, 1500, 14205, 293, 536, 1968, 456, 307, 512, 1154, 300, 321, 994, 380, 519, 51652, 51652], "temperature": 0.0, "avg_logprob": -0.10852633452996975, "compression_ratio": 1.5829145728643217, "no_caption_prob": 1.9798681023530662e-05}, {"id": 1025, "seek": 469616, "start": 4713.5199999999995, "end": 4721.92, "text": " You can change your test suite and see whether there is some problem that we didn't think", "tokens": [50364, 467, 820, 312, 534, 445, 411, 729, 2604, 781, 2962, 293, 2066, 2074, 293, 7908, 885, 2780, 11, 50684, 50712, 689, 797, 11, 456, 311, 264, 10835, 295, 437, 291, 393, 360, 2602, 13, 50900, 50936, 467, 311, 472, 281, 472, 11, 370, 439, 3331, 820, 312, 5343, 13, 51124, 51124, 407, 291, 393, 1500, 309, 484, 13, 51232, 51232, 509, 393, 1319, 428, 1500, 14205, 293, 536, 1968, 456, 307, 512, 1154, 300, 321, 994, 380, 519, 51652, 51652], "temperature": 0.0, "avg_logprob": -0.10852633452996975, "compression_ratio": 1.5829145728643217, "no_caption_prob": 1.9798681023530662e-05}, {"id": 1026, "seek": 472192, "start": 4721.92, "end": 4726.88, "text": " about that we should fix before releasing 2.0.", "tokens": [50364, 466, 300, 321, 820, 3191, 949, 16327, 568, 13, 15, 13, 50612, 50612, 400, 291, 393, 611, 980, 505, 498, 309, 5415, 604, 777, 15120, 420, 498, 291, 366, 2055, 466, 257, 7441, 51028, 51028, 283, 3334, 4527, 11, 286, 576, 312, 588, 2055, 281, 1568, 300, 13, 51160, 51196, 1144, 291, 2066, 300, 309, 727, 915, 1570, 2740, 813, 949, 382, 731, 30, 51452, 51452, 467, 311, 1944, 13, 51488, 51516, 286, 519, 264, 7316, 2138, 3105, 13, 51676, 51716], "temperature": 0.0, "avg_logprob": -0.1255145704889872, "compression_ratio": 1.4780487804878049, "no_caption_prob": 0.00015324009291362017}, {"id": 1027, "seek": 472192, "start": 4726.88, "end": 4735.2, "text": " And you can also tell us if it caught any new bugs or if you are happy about a fault", "tokens": [50364, 466, 300, 321, 820, 3191, 949, 16327, 568, 13, 15, 13, 50612, 50612, 400, 291, 393, 611, 980, 505, 498, 309, 5415, 604, 777, 15120, 420, 498, 291, 366, 2055, 466, 257, 7441, 51028, 51028, 283, 3334, 4527, 11, 286, 576, 312, 588, 2055, 281, 1568, 300, 13, 51160, 51196, 1144, 291, 2066, 300, 309, 727, 915, 1570, 2740, 813, 949, 382, 731, 30, 51452, 51452, 467, 311, 1944, 13, 51488, 51516, 286, 519, 264, 7316, 2138, 3105, 13, 51676, 51716], "temperature": 0.0, "avg_logprob": -0.1255145704889872, "compression_ratio": 1.4780487804878049, "no_caption_prob": 0.00015324009291362017}, {"id": 1028, "seek": 472192, "start": 4735.2, "end": 4737.84, "text": " fuzzer, I would be very happy to hear that.", "tokens": [50364, 466, 300, 321, 820, 3191, 949, 16327, 568, 13, 15, 13, 50612, 50612, 400, 291, 393, 611, 980, 505, 498, 309, 5415, 604, 777, 15120, 420, 498, 291, 366, 2055, 466, 257, 7441, 51028, 51028, 283, 3334, 4527, 11, 286, 576, 312, 588, 2055, 281, 1568, 300, 13, 51160, 51196, 1144, 291, 2066, 300, 309, 727, 915, 1570, 2740, 813, 949, 382, 731, 30, 51452, 51452, 467, 311, 1944, 13, 51488, 51516, 286, 519, 264, 7316, 2138, 3105, 13, 51676, 51716], "temperature": 0.0, "avg_logprob": -0.1255145704889872, "compression_ratio": 1.4780487804878049, "no_caption_prob": 0.00015324009291362017}, {"id": 1029, "seek": 472192, "start": 4738.56, "end": 4743.68, "text": " Do you expect that it could find less problems than before as well?", "tokens": [50364, 466, 300, 321, 820, 3191, 949, 16327, 568, 13, 15, 13, 50612, 50612, 400, 291, 393, 611, 980, 505, 498, 309, 5415, 604, 777, 15120, 420, 498, 291, 366, 2055, 466, 257, 7441, 51028, 51028, 283, 3334, 4527, 11, 286, 576, 312, 588, 2055, 281, 1568, 300, 13, 51160, 51196, 1144, 291, 2066, 300, 309, 727, 915, 1570, 2740, 813, 949, 382, 731, 30, 51452, 51452, 467, 311, 1944, 13, 51488, 51516, 286, 519, 264, 7316, 2138, 3105, 13, 51676, 51716], "temperature": 0.0, "avg_logprob": -0.1255145704889872, "compression_ratio": 1.4780487804878049, "no_caption_prob": 0.00015324009291362017}, {"id": 1030, "seek": 472192, "start": 4743.68, "end": 4744.4, "text": " It's possible.", "tokens": [50364, 466, 300, 321, 820, 3191, 949, 16327, 568, 13, 15, 13, 50612, 50612, 400, 291, 393, 611, 980, 505, 498, 309, 5415, 604, 777, 15120, 420, 498, 291, 366, 2055, 466, 257, 7441, 51028, 51028, 283, 3334, 4527, 11, 286, 576, 312, 588, 2055, 281, 1568, 300, 13, 51160, 51196, 1144, 291, 2066, 300, 309, 727, 915, 1570, 2740, 813, 949, 382, 731, 30, 51452, 51452, 467, 311, 1944, 13, 51488, 51516, 286, 519, 264, 7316, 2138, 3105, 13, 51676, 51716], "temperature": 0.0, "avg_logprob": -0.1255145704889872, "compression_ratio": 1.4780487804878049, "no_caption_prob": 0.00015324009291362017}, {"id": 1031, "seek": 472192, "start": 4744.96, "end": 4748.16, "text": " I think the distribution definitely changed.", "tokens": [50364, 466, 300, 321, 820, 3191, 949, 16327, 568, 13, 15, 13, 50612, 50612, 400, 291, 393, 611, 980, 505, 498, 309, 5415, 604, 777, 15120, 420, 498, 291, 366, 2055, 466, 257, 7441, 51028, 51028, 283, 3334, 4527, 11, 286, 576, 312, 588, 2055, 281, 1568, 300, 13, 51160, 51196, 1144, 291, 2066, 300, 309, 727, 915, 1570, 2740, 813, 949, 382, 731, 30, 51452, 51452, 467, 311, 1944, 13, 51488, 51516, 286, 519, 264, 7316, 2138, 3105, 13, 51676, 51716], "temperature": 0.0, "avg_logprob": -0.1255145704889872, "compression_ratio": 1.4780487804878049, "no_caption_prob": 0.00015324009291362017}, {"id": 1032, "seek": 474816, "start": 4748.16, "end": 4754.88, "text": " Right, so Elm test one and Elm test two will try different points with different probability.", "tokens": [50364, 1779, 11, 370, 2699, 76, 1500, 472, 293, 2699, 76, 1500, 732, 486, 853, 819, 2793, 365, 819, 8482, 13, 50700, 50736, 583, 321, 994, 380, 534, 1319, 439, 300, 709, 13, 50892, 50920, 492, 486, 920, 7875, 411, 264, 1379, 1901, 382, 949, 13, 51156, 51180, 467, 1062, 312, 445, 264, 33783, 300, 1319, 13, 51280, 51280, 407, 797, 11, 498, 291, 1190, 428, 6921, 1547, 11, 291, 820, 536, 264, 912, 13603, 293, 4696, 291, 51660, 51660], "temperature": 0.0, "avg_logprob": -0.15754139276198398, "compression_ratio": 1.5951219512195123, "no_caption_prob": 5.058615352027118e-05}, {"id": 1033, "seek": 474816, "start": 4755.599999999999, "end": 4758.72, "text": " But we didn't really change all that much.", "tokens": [50364, 1779, 11, 370, 2699, 76, 1500, 472, 293, 2699, 76, 1500, 732, 486, 853, 819, 2793, 365, 819, 8482, 13, 50700, 50736, 583, 321, 994, 380, 534, 1319, 439, 300, 709, 13, 50892, 50920, 492, 486, 920, 7875, 411, 264, 1379, 1901, 382, 949, 13, 51156, 51180, 467, 1062, 312, 445, 264, 33783, 300, 1319, 13, 51280, 51280, 407, 797, 11, 498, 291, 1190, 428, 6921, 1547, 11, 291, 820, 536, 264, 912, 13603, 293, 4696, 291, 51660, 51660], "temperature": 0.0, "avg_logprob": -0.15754139276198398, "compression_ratio": 1.5951219512195123, "no_caption_prob": 5.058615352027118e-05}, {"id": 1034, "seek": 474816, "start": 4759.28, "end": 4764.0, "text": " We will still trigger like the whole space as before.", "tokens": [50364, 1779, 11, 370, 2699, 76, 1500, 472, 293, 2699, 76, 1500, 732, 486, 853, 819, 2793, 365, 819, 8482, 13, 50700, 50736, 583, 321, 994, 380, 534, 1319, 439, 300, 709, 13, 50892, 50920, 492, 486, 920, 7875, 411, 264, 1379, 1901, 382, 949, 13, 51156, 51180, 467, 1062, 312, 445, 264, 33783, 300, 1319, 13, 51280, 51280, 407, 797, 11, 498, 291, 1190, 428, 6921, 1547, 11, 291, 820, 536, 264, 912, 13603, 293, 4696, 291, 51660, 51660], "temperature": 0.0, "avg_logprob": -0.15754139276198398, "compression_ratio": 1.5951219512195123, "no_caption_prob": 5.058615352027118e-05}, {"id": 1035, "seek": 474816, "start": 4764.48, "end": 4766.48, "text": " It might be just the probabilities that change.", "tokens": [50364, 1779, 11, 370, 2699, 76, 1500, 472, 293, 2699, 76, 1500, 732, 486, 853, 819, 2793, 365, 819, 8482, 13, 50700, 50736, 583, 321, 994, 380, 534, 1319, 439, 300, 709, 13, 50892, 50920, 492, 486, 920, 7875, 411, 264, 1379, 1901, 382, 949, 13, 51156, 51180, 467, 1062, 312, 445, 264, 33783, 300, 1319, 13, 51280, 51280, 407, 797, 11, 498, 291, 1190, 428, 6921, 1547, 11, 291, 820, 536, 264, 912, 13603, 293, 4696, 291, 51660, 51660], "temperature": 0.0, "avg_logprob": -0.15754139276198398, "compression_ratio": 1.5951219512195123, "no_caption_prob": 5.058615352027118e-05}, {"id": 1036, "seek": 474816, "start": 4766.48, "end": 4774.08, "text": " So again, if you run your tests enough, you should see the same errors and hopefully you", "tokens": [50364, 1779, 11, 370, 2699, 76, 1500, 472, 293, 2699, 76, 1500, 732, 486, 853, 819, 2793, 365, 819, 8482, 13, 50700, 50736, 583, 321, 994, 380, 534, 1319, 439, 300, 709, 13, 50892, 50920, 492, 486, 920, 7875, 411, 264, 1379, 1901, 382, 949, 13, 51156, 51180, 467, 1062, 312, 445, 264, 33783, 300, 1319, 13, 51280, 51280, 407, 797, 11, 498, 291, 1190, 428, 6921, 1547, 11, 291, 820, 536, 264, 912, 13603, 293, 4696, 291, 51660, 51660], "temperature": 0.0, "avg_logprob": -0.15754139276198398, "compression_ratio": 1.5951219512195123, "no_caption_prob": 5.058615352027118e-05}, {"id": 1037, "seek": 477408, "start": 4774.08, "end": 4780.48, "text": " will see them sooner because we are preferring small inputs than larger inputs and so on.", "tokens": [50364, 486, 536, 552, 15324, 570, 321, 366, 4382, 2937, 1359, 15743, 813, 4833, 15743, 293, 370, 322, 13, 50684, 50684, 467, 307, 406, 3879, 9452, 13, 50764, 50820, 1057, 558, 11, 869, 13, 50880, 50880, 407, 456, 366, 512, 534, 1481, 2145, 291, 829, 1214, 733, 295, 4494, 807, 512, 295, 264, 51124, 51124, 1715, 11, 370, 561, 820, 2138, 1520, 729, 484, 13, 51244, 51244, 492, 603, 2113, 281, 729, 294, 264, 855, 5570, 13, 51340, 51340, 2014, 456, 604, 661, 3593, 321, 820, 935, 561, 281, 30, 51476, 51476, 286, 519, 321, 820, 2152, 300, 337, 5824, 11, 291, 820, 352, 281, 264, 4997, 2269, 322, 37211, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.17841708765620679, "compression_ratio": 1.6934306569343065, "no_caption_prob": 8.74832840054296e-05}, {"id": 1038, "seek": 477408, "start": 4780.48, "end": 4782.08, "text": " It is not totally uniform.", "tokens": [50364, 486, 536, 552, 15324, 570, 321, 366, 4382, 2937, 1359, 15743, 813, 4833, 15743, 293, 370, 322, 13, 50684, 50684, 467, 307, 406, 3879, 9452, 13, 50764, 50820, 1057, 558, 11, 869, 13, 50880, 50880, 407, 456, 366, 512, 534, 1481, 2145, 291, 829, 1214, 733, 295, 4494, 807, 512, 295, 264, 51124, 51124, 1715, 11, 370, 561, 820, 2138, 1520, 729, 484, 13, 51244, 51244, 492, 603, 2113, 281, 729, 294, 264, 855, 5570, 13, 51340, 51340, 2014, 456, 604, 661, 3593, 321, 820, 935, 561, 281, 30, 51476, 51476, 286, 519, 321, 820, 2152, 300, 337, 5824, 11, 291, 820, 352, 281, 264, 4997, 2269, 322, 37211, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.17841708765620679, "compression_ratio": 1.6934306569343065, "no_caption_prob": 8.74832840054296e-05}, {"id": 1039, "seek": 477408, "start": 4783.2, "end": 4784.4, "text": " All right, great.", "tokens": [50364, 486, 536, 552, 15324, 570, 321, 366, 4382, 2937, 1359, 15743, 813, 4833, 15743, 293, 370, 322, 13, 50684, 50684, 467, 307, 406, 3879, 9452, 13, 50764, 50820, 1057, 558, 11, 869, 13, 50880, 50880, 407, 456, 366, 512, 534, 1481, 2145, 291, 829, 1214, 733, 295, 4494, 807, 512, 295, 264, 51124, 51124, 1715, 11, 370, 561, 820, 2138, 1520, 729, 484, 13, 51244, 51244, 492, 603, 2113, 281, 729, 294, 264, 855, 5570, 13, 51340, 51340, 2014, 456, 604, 661, 3593, 321, 820, 935, 561, 281, 30, 51476, 51476, 286, 519, 321, 820, 2152, 300, 337, 5824, 11, 291, 820, 352, 281, 264, 4997, 2269, 322, 37211, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.17841708765620679, "compression_ratio": 1.6934306569343065, "no_caption_prob": 8.74832840054296e-05}, {"id": 1040, "seek": 477408, "start": 4784.4, "end": 4789.28, "text": " So there are some really nice videos you put together kind of walking through some of the", "tokens": [50364, 486, 536, 552, 15324, 570, 321, 366, 4382, 2937, 1359, 15743, 813, 4833, 15743, 293, 370, 322, 13, 50684, 50684, 467, 307, 406, 3879, 9452, 13, 50764, 50820, 1057, 558, 11, 869, 13, 50880, 50880, 407, 456, 366, 512, 534, 1481, 2145, 291, 829, 1214, 733, 295, 4494, 807, 512, 295, 264, 51124, 51124, 1715, 11, 370, 561, 820, 2138, 1520, 729, 484, 13, 51244, 51244, 492, 603, 2113, 281, 729, 294, 264, 855, 5570, 13, 51340, 51340, 2014, 456, 604, 661, 3593, 321, 820, 935, 561, 281, 30, 51476, 51476, 286, 519, 321, 820, 2152, 300, 337, 5824, 11, 291, 820, 352, 281, 264, 4997, 2269, 322, 37211, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.17841708765620679, "compression_ratio": 1.6934306569343065, "no_caption_prob": 8.74832840054296e-05}, {"id": 1041, "seek": 477408, "start": 4789.28, "end": 4791.68, "text": " design, so people should definitely check those out.", "tokens": [50364, 486, 536, 552, 15324, 570, 321, 366, 4382, 2937, 1359, 15743, 813, 4833, 15743, 293, 370, 322, 13, 50684, 50684, 467, 307, 406, 3879, 9452, 13, 50764, 50820, 1057, 558, 11, 869, 13, 50880, 50880, 407, 456, 366, 512, 534, 1481, 2145, 291, 829, 1214, 733, 295, 4494, 807, 512, 295, 264, 51124, 51124, 1715, 11, 370, 561, 820, 2138, 1520, 729, 484, 13, 51244, 51244, 492, 603, 2113, 281, 729, 294, 264, 855, 5570, 13, 51340, 51340, 2014, 456, 604, 661, 3593, 321, 820, 935, 561, 281, 30, 51476, 51476, 286, 519, 321, 820, 2152, 300, 337, 5824, 11, 291, 820, 352, 281, 264, 4997, 2269, 322, 37211, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.17841708765620679, "compression_ratio": 1.6934306569343065, "no_caption_prob": 8.74832840054296e-05}, {"id": 1042, "seek": 477408, "start": 4791.68, "end": 4793.6, "text": " We'll link to those in the show notes.", "tokens": [50364, 486, 536, 552, 15324, 570, 321, 366, 4382, 2937, 1359, 15743, 813, 4833, 15743, 293, 370, 322, 13, 50684, 50684, 467, 307, 406, 3879, 9452, 13, 50764, 50820, 1057, 558, 11, 869, 13, 50880, 50880, 407, 456, 366, 512, 534, 1481, 2145, 291, 829, 1214, 733, 295, 4494, 807, 512, 295, 264, 51124, 51124, 1715, 11, 370, 561, 820, 2138, 1520, 729, 484, 13, 51244, 51244, 492, 603, 2113, 281, 729, 294, 264, 855, 5570, 13, 51340, 51340, 2014, 456, 604, 661, 3593, 321, 820, 935, 561, 281, 30, 51476, 51476, 286, 519, 321, 820, 2152, 300, 337, 5824, 11, 291, 820, 352, 281, 264, 4997, 2269, 322, 37211, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.17841708765620679, "compression_ratio": 1.6934306569343065, "no_caption_prob": 8.74832840054296e-05}, {"id": 1043, "seek": 477408, "start": 4793.6, "end": 4796.32, "text": " Are there any other resources we should point people to?", "tokens": [50364, 486, 536, 552, 15324, 570, 321, 366, 4382, 2937, 1359, 15743, 813, 4833, 15743, 293, 370, 322, 13, 50684, 50684, 467, 307, 406, 3879, 9452, 13, 50764, 50820, 1057, 558, 11, 869, 13, 50880, 50880, 407, 456, 366, 512, 534, 1481, 2145, 291, 829, 1214, 733, 295, 4494, 807, 512, 295, 264, 51124, 51124, 1715, 11, 370, 561, 820, 2138, 1520, 729, 484, 13, 51244, 51244, 492, 603, 2113, 281, 729, 294, 264, 855, 5570, 13, 51340, 51340, 2014, 456, 604, 661, 3593, 321, 820, 935, 561, 281, 30, 51476, 51476, 286, 519, 321, 820, 2152, 300, 337, 5824, 11, 291, 820, 352, 281, 264, 4997, 2269, 322, 37211, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.17841708765620679, "compression_ratio": 1.6934306569343065, "no_caption_prob": 8.74832840054296e-05}, {"id": 1044, "seek": 477408, "start": 4796.32, "end": 4802.08, "text": " I think we should mention that for feedback, you should go to the testing channel on Slack", "tokens": [50364, 486, 536, 552, 15324, 570, 321, 366, 4382, 2937, 1359, 15743, 813, 4833, 15743, 293, 370, 322, 13, 50684, 50684, 467, 307, 406, 3879, 9452, 13, 50764, 50820, 1057, 558, 11, 869, 13, 50880, 50880, 407, 456, 366, 512, 534, 1481, 2145, 291, 829, 1214, 733, 295, 4494, 807, 512, 295, 264, 51124, 51124, 1715, 11, 370, 561, 820, 2138, 1520, 729, 484, 13, 51244, 51244, 492, 603, 2113, 281, 729, 294, 264, 855, 5570, 13, 51340, 51340, 2014, 456, 604, 661, 3593, 321, 820, 935, 561, 281, 30, 51476, 51476, 286, 519, 321, 820, 2152, 300, 337, 5824, 11, 291, 820, 352, 281, 264, 4997, 2269, 322, 37211, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.17841708765620679, "compression_ratio": 1.6934306569343065, "no_caption_prob": 8.74832840054296e-05}, {"id": 1045, "seek": 480208, "start": 4802.08, "end": 4804.8, "text": " or maybe open a GitHub issue.", "tokens": [50364, 420, 1310, 1269, 257, 23331, 2734, 13, 50500, 50500, 865, 11, 291, 393, 360, 300, 13, 50568, 50568, 492, 366, 11, 420, 412, 1935, 286, 669, 11028, 264, 4997, 2269, 11, 370, 286, 486, 2138, 312, 456, 13, 50832, 50864, 509, 393, 2183, 322, 341, 1164, 294, 264, 2183, 420, 1884, 428, 1065, 13, 51072, 51072, 509, 393, 2138, 5300, 364, 2734, 322, 23331, 13, 51248, 51248, 1018, 337, 264, 3593, 11, 286, 478, 406, 988, 466, 604, 8088, 3593, 13, 51616, 51644], "temperature": 0.0, "avg_logprob": -0.12179910996380974, "compression_ratio": 1.5888324873096447, "no_caption_prob": 0.00010864893556572497}, {"id": 1046, "seek": 480208, "start": 4804.8, "end": 4806.16, "text": " Yeah, you can do that.", "tokens": [50364, 420, 1310, 1269, 257, 23331, 2734, 13, 50500, 50500, 865, 11, 291, 393, 360, 300, 13, 50568, 50568, 492, 366, 11, 420, 412, 1935, 286, 669, 11028, 264, 4997, 2269, 11, 370, 286, 486, 2138, 312, 456, 13, 50832, 50864, 509, 393, 2183, 322, 341, 1164, 294, 264, 2183, 420, 1884, 428, 1065, 13, 51072, 51072, 509, 393, 2138, 5300, 364, 2734, 322, 23331, 13, 51248, 51248, 1018, 337, 264, 3593, 11, 286, 478, 406, 988, 466, 604, 8088, 3593, 13, 51616, 51644], "temperature": 0.0, "avg_logprob": -0.12179910996380974, "compression_ratio": 1.5888324873096447, "no_caption_prob": 0.00010864893556572497}, {"id": 1047, "seek": 480208, "start": 4806.16, "end": 4811.44, "text": " We are, or at least I am monitoring the testing channel, so I will definitely be there.", "tokens": [50364, 420, 1310, 1269, 257, 23331, 2734, 13, 50500, 50500, 865, 11, 291, 393, 360, 300, 13, 50568, 50568, 492, 366, 11, 420, 412, 1935, 286, 669, 11028, 264, 4997, 2269, 11, 370, 286, 486, 2138, 312, 456, 13, 50832, 50864, 509, 393, 2183, 322, 341, 1164, 294, 264, 2183, 420, 1884, 428, 1065, 13, 51072, 51072, 509, 393, 2138, 5300, 364, 2734, 322, 23331, 13, 51248, 51248, 1018, 337, 264, 3593, 11, 286, 478, 406, 988, 466, 604, 8088, 3593, 13, 51616, 51644], "temperature": 0.0, "avg_logprob": -0.12179910996380974, "compression_ratio": 1.5888324873096447, "no_caption_prob": 0.00010864893556572497}, {"id": 1048, "seek": 480208, "start": 4812.08, "end": 4816.24, "text": " You can post on this course in the post or create your own.", "tokens": [50364, 420, 1310, 1269, 257, 23331, 2734, 13, 50500, 50500, 865, 11, 291, 393, 360, 300, 13, 50568, 50568, 492, 366, 11, 420, 412, 1935, 286, 669, 11028, 264, 4997, 2269, 11, 370, 286, 486, 2138, 312, 456, 13, 50832, 50864, 509, 393, 2183, 322, 341, 1164, 294, 264, 2183, 420, 1884, 428, 1065, 13, 51072, 51072, 509, 393, 2138, 5300, 364, 2734, 322, 23331, 13, 51248, 51248, 1018, 337, 264, 3593, 11, 286, 478, 406, 988, 466, 604, 8088, 3593, 13, 51616, 51644], "temperature": 0.0, "avg_logprob": -0.12179910996380974, "compression_ratio": 1.5888324873096447, "no_caption_prob": 0.00010864893556572497}, {"id": 1049, "seek": 480208, "start": 4816.24, "end": 4819.76, "text": " You can definitely raise an issue on GitHub.", "tokens": [50364, 420, 1310, 1269, 257, 23331, 2734, 13, 50500, 50500, 865, 11, 291, 393, 360, 300, 13, 50568, 50568, 492, 366, 11, 420, 412, 1935, 286, 669, 11028, 264, 4997, 2269, 11, 370, 286, 486, 2138, 312, 456, 13, 50832, 50864, 509, 393, 2183, 322, 341, 1164, 294, 264, 2183, 420, 1884, 428, 1065, 13, 51072, 51072, 509, 393, 2138, 5300, 364, 2734, 322, 23331, 13, 51248, 51248, 1018, 337, 264, 3593, 11, 286, 478, 406, 988, 466, 604, 8088, 3593, 13, 51616, 51644], "temperature": 0.0, "avg_logprob": -0.12179910996380974, "compression_ratio": 1.5888324873096447, "no_caption_prob": 0.00010864893556572497}, {"id": 1050, "seek": 480208, "start": 4819.76, "end": 4827.12, "text": " As for the resources, I'm not sure about any fundamental resources.", "tokens": [50364, 420, 1310, 1269, 257, 23331, 2734, 13, 50500, 50500, 865, 11, 291, 393, 360, 300, 13, 50568, 50568, 492, 366, 11, 420, 412, 1935, 286, 669, 11028, 264, 4997, 2269, 11, 370, 286, 486, 2138, 312, 456, 13, 50832, 50864, 509, 393, 2183, 322, 341, 1164, 294, 264, 2183, 420, 1884, 428, 1065, 13, 51072, 51072, 509, 393, 2138, 5300, 364, 2734, 322, 23331, 13, 51248, 51248, 1018, 337, 264, 3593, 11, 286, 478, 406, 988, 466, 604, 8088, 3593, 13, 51616, 51644], "temperature": 0.0, "avg_logprob": -0.12179910996380974, "compression_ratio": 1.5888324873096447, "no_caption_prob": 0.00010864893556572497}, {"id": 1051, "seek": 482712, "start": 4827.12, "end": 4833.12, "text": " I definitely take a lot of inspiration from how the library Hypothesis does things in", "tokens": [50364, 286, 2138, 747, 257, 688, 295, 10249, 490, 577, 264, 6405, 45649, 4624, 271, 775, 721, 294, 50664, 50664, 264, 15329, 1002, 293, 436, 362, 257, 6968, 365, 257, 688, 295, 613, 411, 983, 360, 300, 293, 577, 281, 50952, 50952, 519, 466, 309, 293, 718, 311, 584, 4997, 1785, 906, 4268, 11, 597, 321, 500, 380, 534, 362, 294, 411, 11, 51244, 51244, 321, 500, 380, 362, 411, 1252, 5065, 11, 457, 321, 920, 360, 362, 729, 411, 10588, 7897, 293, 370, 51464, 51464, 322, 13, 51476, 51476, 407, 291, 393, 11, 291, 393, 290, 28499, 257, 707, 857, 490, 300, 13, 51624, 51624], "temperature": 0.0, "avg_logprob": -0.1808405189870674, "compression_ratio": 1.6571428571428573, "no_caption_prob": 9.29628440644592e-05}, {"id": 1052, "seek": 482712, "start": 4833.12, "end": 4838.88, "text": " the Python world and they have a blog with a lot of these like why do that and how to", "tokens": [50364, 286, 2138, 747, 257, 688, 295, 10249, 490, 577, 264, 6405, 45649, 4624, 271, 775, 721, 294, 50664, 50664, 264, 15329, 1002, 293, 436, 362, 257, 6968, 365, 257, 688, 295, 613, 411, 983, 360, 300, 293, 577, 281, 50952, 50952, 519, 466, 309, 293, 718, 311, 584, 4997, 1785, 906, 4268, 11, 597, 321, 500, 380, 534, 362, 294, 411, 11, 51244, 51244, 321, 500, 380, 362, 411, 1252, 5065, 11, 457, 321, 920, 360, 362, 729, 411, 10588, 7897, 293, 370, 51464, 51464, 322, 13, 51476, 51476, 407, 291, 393, 11, 291, 393, 290, 28499, 257, 707, 857, 490, 300, 13, 51624, 51624], "temperature": 0.0, "avg_logprob": -0.1808405189870674, "compression_ratio": 1.6571428571428573, "no_caption_prob": 9.29628440644592e-05}, {"id": 1053, "seek": 482712, "start": 4838.88, "end": 4844.72, "text": " think about it and let's say testing stateful programs, which we don't really have in like,", "tokens": [50364, 286, 2138, 747, 257, 688, 295, 10249, 490, 577, 264, 6405, 45649, 4624, 271, 775, 721, 294, 50664, 50664, 264, 15329, 1002, 293, 436, 362, 257, 6968, 365, 257, 688, 295, 613, 411, 983, 360, 300, 293, 577, 281, 50952, 50952, 519, 466, 309, 293, 718, 311, 584, 4997, 1785, 906, 4268, 11, 597, 321, 500, 380, 534, 362, 294, 411, 11, 51244, 51244, 321, 500, 380, 362, 411, 1252, 5065, 11, 457, 321, 920, 360, 362, 729, 411, 10588, 7897, 293, 370, 51464, 51464, 322, 13, 51476, 51476, 407, 291, 393, 11, 291, 393, 290, 28499, 257, 707, 857, 490, 300, 13, 51624, 51624], "temperature": 0.0, "avg_logprob": -0.1808405189870674, "compression_ratio": 1.6571428571428573, "no_caption_prob": 9.29628440644592e-05}, {"id": 1054, "seek": 482712, "start": 4844.72, "end": 4849.12, "text": " we don't have like side effects, but we still do have those like updated messages and so", "tokens": [50364, 286, 2138, 747, 257, 688, 295, 10249, 490, 577, 264, 6405, 45649, 4624, 271, 775, 721, 294, 50664, 50664, 264, 15329, 1002, 293, 436, 362, 257, 6968, 365, 257, 688, 295, 613, 411, 983, 360, 300, 293, 577, 281, 50952, 50952, 519, 466, 309, 293, 718, 311, 584, 4997, 1785, 906, 4268, 11, 597, 321, 500, 380, 534, 362, 294, 411, 11, 51244, 51244, 321, 500, 380, 362, 411, 1252, 5065, 11, 457, 321, 920, 360, 362, 729, 411, 10588, 7897, 293, 370, 51464, 51464, 322, 13, 51476, 51476, 407, 291, 393, 11, 291, 393, 290, 28499, 257, 707, 857, 490, 300, 13, 51624, 51624], "temperature": 0.0, "avg_logprob": -0.1808405189870674, "compression_ratio": 1.6571428571428573, "no_caption_prob": 9.29628440644592e-05}, {"id": 1055, "seek": 482712, "start": 4849.12, "end": 4849.36, "text": " on.", "tokens": [50364, 286, 2138, 747, 257, 688, 295, 10249, 490, 577, 264, 6405, 45649, 4624, 271, 775, 721, 294, 50664, 50664, 264, 15329, 1002, 293, 436, 362, 257, 6968, 365, 257, 688, 295, 613, 411, 983, 360, 300, 293, 577, 281, 50952, 50952, 519, 466, 309, 293, 718, 311, 584, 4997, 1785, 906, 4268, 11, 597, 321, 500, 380, 534, 362, 294, 411, 11, 51244, 51244, 321, 500, 380, 362, 411, 1252, 5065, 11, 457, 321, 920, 360, 362, 729, 411, 10588, 7897, 293, 370, 51464, 51464, 322, 13, 51476, 51476, 407, 291, 393, 11, 291, 393, 290, 28499, 257, 707, 857, 490, 300, 13, 51624, 51624], "temperature": 0.0, "avg_logprob": -0.1808405189870674, "compression_ratio": 1.6571428571428573, "no_caption_prob": 9.29628440644592e-05}, {"id": 1056, "seek": 482712, "start": 4849.36, "end": 4852.32, "text": " So you can, you can glean a little bit from that.", "tokens": [50364, 286, 2138, 747, 257, 688, 295, 10249, 490, 577, 264, 6405, 45649, 4624, 271, 775, 721, 294, 50664, 50664, 264, 15329, 1002, 293, 436, 362, 257, 6968, 365, 257, 688, 295, 613, 411, 983, 360, 300, 293, 577, 281, 50952, 50952, 519, 466, 309, 293, 718, 311, 584, 4997, 1785, 906, 4268, 11, 597, 321, 500, 380, 534, 362, 294, 411, 11, 51244, 51244, 321, 500, 380, 362, 411, 1252, 5065, 11, 457, 321, 920, 360, 362, 729, 411, 10588, 7897, 293, 370, 51464, 51464, 322, 13, 51476, 51476, 407, 291, 393, 11, 291, 393, 290, 28499, 257, 707, 857, 490, 300, 13, 51624, 51624], "temperature": 0.0, "avg_logprob": -0.1808405189870674, "compression_ratio": 1.6571428571428573, "no_caption_prob": 9.29628440644592e-05}, {"id": 1057, "seek": 485232, "start": 4852.32, "end": 4858.16, "text": " It's not always going to be applicable because we just don't have certain kinds of problems,", "tokens": [50364, 467, 311, 406, 1009, 516, 281, 312, 21142, 570, 321, 445, 500, 380, 362, 1629, 3685, 295, 2740, 11, 50656, 50680, 457, 1338, 11, 286, 411, 641, 3109, 295, 3372, 264, 4195, 1752, 420, 411, 264, 10754, 51020, 51020, 1752, 382, 257, 9365, 13, 51116, 51148, 400, 370, 321, 366, 767, 294, 6686, 365, 15029, 836, 30303, 338, 11, 257, 44128, 587, 322, 37211, 13, 51524, 51524, 492, 366, 733, 295, 281, 1840, 365, 264, 1558, 295, 11, 718, 311, 584, 257, 7763, 8149, 13, 51784, 51804], "temperature": 0.0, "avg_logprob": -0.17399457867225904, "compression_ratio": 1.5219298245614035, "no_caption_prob": 3.6993249523220584e-05}, {"id": 1058, "seek": 485232, "start": 4858.639999999999, "end": 4865.44, "text": " but yeah, I like their approach of putting the user experience or like the developer", "tokens": [50364, 467, 311, 406, 1009, 516, 281, 312, 21142, 570, 321, 445, 500, 380, 362, 1629, 3685, 295, 2740, 11, 50656, 50680, 457, 1338, 11, 286, 411, 641, 3109, 295, 3372, 264, 4195, 1752, 420, 411, 264, 10754, 51020, 51020, 1752, 382, 257, 9365, 13, 51116, 51148, 400, 370, 321, 366, 767, 294, 6686, 365, 15029, 836, 30303, 338, 11, 257, 44128, 587, 322, 37211, 13, 51524, 51524, 492, 366, 733, 295, 281, 1840, 365, 264, 1558, 295, 11, 718, 311, 584, 257, 7763, 8149, 13, 51784, 51804], "temperature": 0.0, "avg_logprob": -0.17399457867225904, "compression_ratio": 1.5219298245614035, "no_caption_prob": 3.6993249523220584e-05}, {"id": 1059, "seek": 485232, "start": 4865.44, "end": 4867.36, "text": " experience as a priority.", "tokens": [50364, 467, 311, 406, 1009, 516, 281, 312, 21142, 570, 321, 445, 500, 380, 362, 1629, 3685, 295, 2740, 11, 50656, 50680, 457, 1338, 11, 286, 411, 641, 3109, 295, 3372, 264, 4195, 1752, 420, 411, 264, 10754, 51020, 51020, 1752, 382, 257, 9365, 13, 51116, 51148, 400, 370, 321, 366, 767, 294, 6686, 365, 15029, 836, 30303, 338, 11, 257, 44128, 587, 322, 37211, 13, 51524, 51524, 492, 366, 733, 295, 281, 1840, 365, 264, 1558, 295, 11, 718, 311, 584, 257, 7763, 8149, 13, 51784, 51804], "temperature": 0.0, "avg_logprob": -0.17399457867225904, "compression_ratio": 1.5219298245614035, "no_caption_prob": 3.6993249523220584e-05}, {"id": 1060, "seek": 485232, "start": 4868.0, "end": 4875.5199999999995, "text": " And so we are actually in talks with Jakub Hampel, a gamble man on Slack.", "tokens": [50364, 467, 311, 406, 1009, 516, 281, 312, 21142, 570, 321, 445, 500, 380, 362, 1629, 3685, 295, 2740, 11, 50656, 50680, 457, 1338, 11, 286, 411, 641, 3109, 295, 3372, 264, 4195, 1752, 420, 411, 264, 10754, 51020, 51020, 1752, 382, 257, 9365, 13, 51116, 51148, 400, 370, 321, 366, 767, 294, 6686, 365, 15029, 836, 30303, 338, 11, 257, 44128, 587, 322, 37211, 13, 51524, 51524, 492, 366, 733, 295, 281, 1840, 365, 264, 1558, 295, 11, 718, 311, 584, 257, 7763, 8149, 13, 51784, 51804], "temperature": 0.0, "avg_logprob": -0.17399457867225904, "compression_ratio": 1.5219298245614035, "no_caption_prob": 3.6993249523220584e-05}, {"id": 1061, "seek": 485232, "start": 4875.5199999999995, "end": 4880.719999999999, "text": " We are kind of toying with the idea of, let's say a failure database.", "tokens": [50364, 467, 311, 406, 1009, 516, 281, 312, 21142, 570, 321, 445, 500, 380, 362, 1629, 3685, 295, 2740, 11, 50656, 50680, 457, 1338, 11, 286, 411, 641, 3109, 295, 3372, 264, 4195, 1752, 420, 411, 264, 10754, 51020, 51020, 1752, 382, 257, 9365, 13, 51116, 51148, 400, 370, 321, 366, 767, 294, 6686, 365, 15029, 836, 30303, 338, 11, 257, 44128, 587, 322, 37211, 13, 51524, 51524, 492, 366, 733, 295, 281, 1840, 365, 264, 1558, 295, 11, 718, 311, 584, 257, 7763, 8149, 13, 51784, 51804], "temperature": 0.0, "avg_logprob": -0.17399457867225904, "compression_ratio": 1.5219298245614035, "no_caption_prob": 3.6993249523220584e-05}, {"id": 1062, "seek": 488072, "start": 4880.72, "end": 4884.88, "text": " So if the fastest we'll find a bug, it will remember it.", "tokens": [50364, 407, 498, 264, 14573, 321, 603, 915, 257, 7426, 11, 309, 486, 1604, 309, 13, 50572, 50572, 400, 264, 958, 565, 291, 1190, 264, 1500, 11, 309, 486, 853, 309, 700, 11, 558, 30, 50780, 50780, 1449, 370, 300, 291, 393, 11, 291, 500, 380, 643, 281, 411, 16979, 915, 309, 797, 11, 457, 309, 486, 853, 309, 51132, 51132, 2997, 1314, 13, 51180, 51180, 400, 5680, 490, 586, 322, 420, 746, 13, 51284, 51284, 865, 13, 51300, 51300, 865, 13, 51316, 51316, 286, 2041, 1826, 291, 1850, 264, 19459, 420, 2035, 13, 51508, 51508, 583, 1338, 13, 51548, 51548], "temperature": 0.0, "avg_logprob": -0.23714361003800935, "compression_ratio": 1.5913461538461537, "no_caption_prob": 5.636457717628218e-05}, {"id": 1063, "seek": 488072, "start": 4884.88, "end": 4889.04, "text": " And the next time you run the test, it will try it first, right?", "tokens": [50364, 407, 498, 264, 14573, 321, 603, 915, 257, 7426, 11, 309, 486, 1604, 309, 13, 50572, 50572, 400, 264, 958, 565, 291, 1190, 264, 1500, 11, 309, 486, 853, 309, 700, 11, 558, 30, 50780, 50780, 1449, 370, 300, 291, 393, 11, 291, 500, 380, 643, 281, 411, 16979, 915, 309, 797, 11, 457, 309, 486, 853, 309, 51132, 51132, 2997, 1314, 13, 51180, 51180, 400, 5680, 490, 586, 322, 420, 746, 13, 51284, 51284, 865, 13, 51300, 51300, 865, 13, 51316, 51316, 286, 2041, 1826, 291, 1850, 264, 19459, 420, 2035, 13, 51508, 51508, 583, 1338, 13, 51548, 51548], "temperature": 0.0, "avg_logprob": -0.23714361003800935, "compression_ratio": 1.5913461538461537, "no_caption_prob": 5.636457717628218e-05}, {"id": 1064, "seek": 488072, "start": 4889.04, "end": 4896.08, "text": " Just so that you can, you don't need to like randomly find it again, but it will try it", "tokens": [50364, 407, 498, 264, 14573, 321, 603, 915, 257, 7426, 11, 309, 486, 1604, 309, 13, 50572, 50572, 400, 264, 958, 565, 291, 1190, 264, 1500, 11, 309, 486, 853, 309, 700, 11, 558, 30, 50780, 50780, 1449, 370, 300, 291, 393, 11, 291, 500, 380, 643, 281, 411, 16979, 915, 309, 797, 11, 457, 309, 486, 853, 309, 51132, 51132, 2997, 1314, 13, 51180, 51180, 400, 5680, 490, 586, 322, 420, 746, 13, 51284, 51284, 865, 13, 51300, 51300, 865, 13, 51316, 51316, 286, 2041, 1826, 291, 1850, 264, 19459, 420, 2035, 13, 51508, 51508, 583, 1338, 13, 51548, 51548], "temperature": 0.0, "avg_logprob": -0.23714361003800935, "compression_ratio": 1.5913461538461537, "no_caption_prob": 5.636457717628218e-05}, {"id": 1065, "seek": 488072, "start": 4896.08, "end": 4897.04, "text": " straight away.", "tokens": [50364, 407, 498, 264, 14573, 321, 603, 915, 257, 7426, 11, 309, 486, 1604, 309, 13, 50572, 50572, 400, 264, 958, 565, 291, 1190, 264, 1500, 11, 309, 486, 853, 309, 700, 11, 558, 30, 50780, 50780, 1449, 370, 300, 291, 393, 11, 291, 500, 380, 643, 281, 411, 16979, 915, 309, 797, 11, 457, 309, 486, 853, 309, 51132, 51132, 2997, 1314, 13, 51180, 51180, 400, 5680, 490, 586, 322, 420, 746, 13, 51284, 51284, 865, 13, 51300, 51300, 865, 13, 51316, 51316, 286, 2041, 1826, 291, 1850, 264, 19459, 420, 2035, 13, 51508, 51508, 583, 1338, 13, 51548, 51548], "temperature": 0.0, "avg_logprob": -0.23714361003800935, "compression_ratio": 1.5913461538461537, "no_caption_prob": 5.636457717628218e-05}, {"id": 1066, "seek": 488072, "start": 4897.04, "end": 4899.12, "text": " And forever from now on or something.", "tokens": [50364, 407, 498, 264, 14573, 321, 603, 915, 257, 7426, 11, 309, 486, 1604, 309, 13, 50572, 50572, 400, 264, 958, 565, 291, 1190, 264, 1500, 11, 309, 486, 853, 309, 700, 11, 558, 30, 50780, 50780, 1449, 370, 300, 291, 393, 11, 291, 500, 380, 643, 281, 411, 16979, 915, 309, 797, 11, 457, 309, 486, 853, 309, 51132, 51132, 2997, 1314, 13, 51180, 51180, 400, 5680, 490, 586, 322, 420, 746, 13, 51284, 51284, 865, 13, 51300, 51300, 865, 13, 51316, 51316, 286, 2041, 1826, 291, 1850, 264, 19459, 420, 2035, 13, 51508, 51508, 583, 1338, 13, 51548, 51548], "temperature": 0.0, "avg_logprob": -0.23714361003800935, "compression_ratio": 1.5913461538461537, "no_caption_prob": 5.636457717628218e-05}, {"id": 1067, "seek": 488072, "start": 4899.12, "end": 4899.4400000000005, "text": " Yeah.", "tokens": [50364, 407, 498, 264, 14573, 321, 603, 915, 257, 7426, 11, 309, 486, 1604, 309, 13, 50572, 50572, 400, 264, 958, 565, 291, 1190, 264, 1500, 11, 309, 486, 853, 309, 700, 11, 558, 30, 50780, 50780, 1449, 370, 300, 291, 393, 11, 291, 500, 380, 643, 281, 411, 16979, 915, 309, 797, 11, 457, 309, 486, 853, 309, 51132, 51132, 2997, 1314, 13, 51180, 51180, 400, 5680, 490, 586, 322, 420, 746, 13, 51284, 51284, 865, 13, 51300, 51300, 865, 13, 51316, 51316, 286, 2041, 1826, 291, 1850, 264, 19459, 420, 2035, 13, 51508, 51508, 583, 1338, 13, 51548, 51548], "temperature": 0.0, "avg_logprob": -0.23714361003800935, "compression_ratio": 1.5913461538461537, "no_caption_prob": 5.636457717628218e-05}, {"id": 1068, "seek": 488072, "start": 4899.4400000000005, "end": 4899.76, "text": " Yeah.", "tokens": [50364, 407, 498, 264, 14573, 321, 603, 915, 257, 7426, 11, 309, 486, 1604, 309, 13, 50572, 50572, 400, 264, 958, 565, 291, 1190, 264, 1500, 11, 309, 486, 853, 309, 700, 11, 558, 30, 50780, 50780, 1449, 370, 300, 291, 393, 11, 291, 500, 380, 643, 281, 411, 16979, 915, 309, 797, 11, 457, 309, 486, 853, 309, 51132, 51132, 2997, 1314, 13, 51180, 51180, 400, 5680, 490, 586, 322, 420, 746, 13, 51284, 51284, 865, 13, 51300, 51300, 865, 13, 51316, 51316, 286, 2041, 1826, 291, 1850, 264, 19459, 420, 2035, 13, 51508, 51508, 583, 1338, 13, 51548, 51548], "temperature": 0.0, "avg_logprob": -0.23714361003800935, "compression_ratio": 1.5913461538461537, "no_caption_prob": 5.636457717628218e-05}, {"id": 1069, "seek": 488072, "start": 4899.76, "end": 4903.6, "text": " I guess until you clear the cache or whatever.", "tokens": [50364, 407, 498, 264, 14573, 321, 603, 915, 257, 7426, 11, 309, 486, 1604, 309, 13, 50572, 50572, 400, 264, 958, 565, 291, 1190, 264, 1500, 11, 309, 486, 853, 309, 700, 11, 558, 30, 50780, 50780, 1449, 370, 300, 291, 393, 11, 291, 500, 380, 643, 281, 411, 16979, 915, 309, 797, 11, 457, 309, 486, 853, 309, 51132, 51132, 2997, 1314, 13, 51180, 51180, 400, 5680, 490, 586, 322, 420, 746, 13, 51284, 51284, 865, 13, 51300, 51300, 865, 13, 51316, 51316, 286, 2041, 1826, 291, 1850, 264, 19459, 420, 2035, 13, 51508, 51508, 583, 1338, 13, 51548, 51548], "temperature": 0.0, "avg_logprob": -0.23714361003800935, "compression_ratio": 1.5913461538461537, "no_caption_prob": 5.636457717628218e-05}, {"id": 1070, "seek": 488072, "start": 4903.6, "end": 4904.400000000001, "text": " But yeah.", "tokens": [50364, 407, 498, 264, 14573, 321, 603, 915, 257, 7426, 11, 309, 486, 1604, 309, 13, 50572, 50572, 400, 264, 958, 565, 291, 1190, 264, 1500, 11, 309, 486, 853, 309, 700, 11, 558, 30, 50780, 50780, 1449, 370, 300, 291, 393, 11, 291, 500, 380, 643, 281, 411, 16979, 915, 309, 797, 11, 457, 309, 486, 853, 309, 51132, 51132, 2997, 1314, 13, 51180, 51180, 400, 5680, 490, 586, 322, 420, 746, 13, 51284, 51284, 865, 13, 51300, 51300, 865, 13, 51316, 51316, 286, 2041, 1826, 291, 1850, 264, 19459, 420, 2035, 13, 51508, 51508, 583, 1338, 13, 51548, 51548], "temperature": 0.0, "avg_logprob": -0.23714361003800935, "compression_ratio": 1.5913461538461537, "no_caption_prob": 5.636457717628218e-05}, {"id": 1071, "seek": 490440, "start": 4904.4, "end": 4912.719999999999, "text": " So I think, I think we can still steal a lot of nice ideas from the ecosystem in different", "tokens": [50364, 407, 286, 519, 11, 286, 519, 321, 393, 920, 11009, 257, 688, 295, 1481, 3487, 490, 264, 11311, 294, 819, 50780, 50780, 8650, 13, 50820, 50852, 400, 370, 4696, 264, 4997, 1657, 294, 2699, 76, 307, 516, 281, 312, 22842, 293, 22842, 13, 51228, 51228, 865, 13, 51244, 51244, 3013, 1217, 309, 311, 370, 1481, 445, 538, 1228, 257, 2856, 411, 2699, 76, 365, 6075, 6828, 293, 51572, 51572, 406, 1419, 26947, 1785, 294, 613, 721, 13, 51680, 51680, 407, 4997, 307, 1270, 257, 1019, 551, 13, 51852, 51852], "temperature": 0.0, "avg_logprob": -0.22808712131374484, "compression_ratio": 1.5642201834862386, "no_caption_prob": 9.91249835351482e-05}, {"id": 1072, "seek": 490440, "start": 4912.719999999999, "end": 4913.5199999999995, "text": " languages.", "tokens": [50364, 407, 286, 519, 11, 286, 519, 321, 393, 920, 11009, 257, 688, 295, 1481, 3487, 490, 264, 11311, 294, 819, 50780, 50780, 8650, 13, 50820, 50852, 400, 370, 4696, 264, 4997, 1657, 294, 2699, 76, 307, 516, 281, 312, 22842, 293, 22842, 13, 51228, 51228, 865, 13, 51244, 51244, 3013, 1217, 309, 311, 370, 1481, 445, 538, 1228, 257, 2856, 411, 2699, 76, 365, 6075, 6828, 293, 51572, 51572, 406, 1419, 26947, 1785, 294, 613, 721, 13, 51680, 51680, 407, 4997, 307, 1270, 257, 1019, 551, 13, 51852, 51852], "temperature": 0.0, "avg_logprob": -0.22808712131374484, "compression_ratio": 1.5642201834862386, "no_caption_prob": 9.91249835351482e-05}, {"id": 1073, "seek": 490440, "start": 4914.16, "end": 4921.679999999999, "text": " And so hopefully the testing story in Elm is going to be nicer and nicer.", "tokens": [50364, 407, 286, 519, 11, 286, 519, 321, 393, 920, 11009, 257, 688, 295, 1481, 3487, 490, 264, 11311, 294, 819, 50780, 50780, 8650, 13, 50820, 50852, 400, 370, 4696, 264, 4997, 1657, 294, 2699, 76, 307, 516, 281, 312, 22842, 293, 22842, 13, 51228, 51228, 865, 13, 51244, 51244, 3013, 1217, 309, 311, 370, 1481, 445, 538, 1228, 257, 2856, 411, 2699, 76, 365, 6075, 6828, 293, 51572, 51572, 406, 1419, 26947, 1785, 294, 613, 721, 13, 51680, 51680, 407, 4997, 307, 1270, 257, 1019, 551, 13, 51852, 51852], "temperature": 0.0, "avg_logprob": -0.22808712131374484, "compression_ratio": 1.5642201834862386, "no_caption_prob": 9.91249835351482e-05}, {"id": 1074, "seek": 490440, "start": 4921.679999999999, "end": 4922.0, "text": " Yeah.", "tokens": [50364, 407, 286, 519, 11, 286, 519, 321, 393, 920, 11009, 257, 688, 295, 1481, 3487, 490, 264, 11311, 294, 819, 50780, 50780, 8650, 13, 50820, 50852, 400, 370, 4696, 264, 4997, 1657, 294, 2699, 76, 307, 516, 281, 312, 22842, 293, 22842, 13, 51228, 51228, 865, 13, 51244, 51244, 3013, 1217, 309, 311, 370, 1481, 445, 538, 1228, 257, 2856, 411, 2699, 76, 365, 6075, 6828, 293, 51572, 51572, 406, 1419, 26947, 1785, 294, 613, 721, 13, 51680, 51680, 407, 4997, 307, 1270, 257, 1019, 551, 13, 51852, 51852], "temperature": 0.0, "avg_logprob": -0.22808712131374484, "compression_ratio": 1.5642201834862386, "no_caption_prob": 9.91249835351482e-05}, {"id": 1075, "seek": 490440, "start": 4922.0, "end": 4928.5599999999995, "text": " Which already it's so nice just by using a language like Elm with pure functions and", "tokens": [50364, 407, 286, 519, 11, 286, 519, 321, 393, 920, 11009, 257, 688, 295, 1481, 3487, 490, 264, 11311, 294, 819, 50780, 50780, 8650, 13, 50820, 50852, 400, 370, 4696, 264, 4997, 1657, 294, 2699, 76, 307, 516, 281, 312, 22842, 293, 22842, 13, 51228, 51228, 865, 13, 51244, 51244, 3013, 1217, 309, 311, 370, 1481, 445, 538, 1228, 257, 2856, 411, 2699, 76, 365, 6075, 6828, 293, 51572, 51572, 406, 1419, 26947, 1785, 294, 613, 721, 13, 51680, 51680, 407, 4997, 307, 1270, 257, 1019, 551, 13, 51852, 51852], "temperature": 0.0, "avg_logprob": -0.22808712131374484, "compression_ratio": 1.5642201834862386, "no_caption_prob": 9.91249835351482e-05}, {"id": 1076, "seek": 490440, "start": 4928.5599999999995, "end": 4930.719999999999, "text": " not having implicit state in these things.", "tokens": [50364, 407, 286, 519, 11, 286, 519, 321, 393, 920, 11009, 257, 688, 295, 1481, 3487, 490, 264, 11311, 294, 819, 50780, 50780, 8650, 13, 50820, 50852, 400, 370, 4696, 264, 4997, 1657, 294, 2699, 76, 307, 516, 281, 312, 22842, 293, 22842, 13, 51228, 51228, 865, 13, 51244, 51244, 3013, 1217, 309, 311, 370, 1481, 445, 538, 1228, 257, 2856, 411, 2699, 76, 365, 6075, 6828, 293, 51572, 51572, 406, 1419, 26947, 1785, 294, 613, 721, 13, 51680, 51680, 407, 4997, 307, 1270, 257, 1019, 551, 13, 51852, 51852], "temperature": 0.0, "avg_logprob": -0.22808712131374484, "compression_ratio": 1.5642201834862386, "no_caption_prob": 9.91249835351482e-05}, {"id": 1077, "seek": 490440, "start": 4930.719999999999, "end": 4934.16, "text": " So testing is such a fun thing.", "tokens": [50364, 407, 286, 519, 11, 286, 519, 321, 393, 920, 11009, 257, 688, 295, 1481, 3487, 490, 264, 11311, 294, 819, 50780, 50780, 8650, 13, 50820, 50852, 400, 370, 4696, 264, 4997, 1657, 294, 2699, 76, 307, 516, 281, 312, 22842, 293, 22842, 13, 51228, 51228, 865, 13, 51244, 51244, 3013, 1217, 309, 311, 370, 1481, 445, 538, 1228, 257, 2856, 411, 2699, 76, 365, 6075, 6828, 293, 51572, 51572, 406, 1419, 26947, 1785, 294, 613, 721, 13, 51680, 51680, 407, 4997, 307, 1270, 257, 1019, 551, 13, 51852, 51852], "temperature": 0.0, "avg_logprob": -0.22808712131374484, "compression_ratio": 1.5642201834862386, "no_caption_prob": 9.91249835351482e-05}, {"id": 1078, "seek": 493416, "start": 4934.16, "end": 4934.96, "text": " Yeah.", "tokens": [50364, 865, 13, 50404, 50404, 865, 13, 50444, 50444, 5349, 283, 3334, 8781, 281, 264, 2890, 293, 291, 483, 7263, 512, 932, 514, 1324, 646, 11, 457, 1310, 264, 8149, 50716, 50716, 551, 11, 309, 311, 257, 665, 733, 295, 932, 514, 1324, 11, 457, 4696, 13, 50912, 50912, 865, 13, 50944, 50944, 865, 13, 50956, 50956, 10429, 428, 15743, 366, 731, 12631, 1547, 281, 406, 312, 932, 15681, 1673, 13, 51220, 51220, 865, 13, 51252, 51252, 1057, 558, 13, 51280, 51280, 1042, 11, 9184, 11, 1309, 291, 370, 709, 337, 1348, 646, 322, 13, 51412, 51412, 467, 390, 257, 6834, 13, 51452, 51452, 400, 797, 11, 13568, 322, 1242, 341, 36427, 294, 13, 51648, 51648, 1044, 291, 13, 51688, 51688, 2561, 337, 1419, 385, 13, 51756, 51756, 467, 390, 257, 6834, 13, 51812, 51812, 400, 508, 2032, 268, 13, 51844], "temperature": 0.0, "avg_logprob": -0.11254823039954817, "compression_ratio": 1.6931818181818181, "no_caption_prob": 8.479717507725582e-05}, {"id": 1079, "seek": 493416, "start": 4934.96, "end": 4935.76, "text": " Yeah.", "tokens": [50364, 865, 13, 50404, 50404, 865, 13, 50444, 50444, 5349, 283, 3334, 8781, 281, 264, 2890, 293, 291, 483, 7263, 512, 932, 514, 1324, 646, 11, 457, 1310, 264, 8149, 50716, 50716, 551, 11, 309, 311, 257, 665, 733, 295, 932, 514, 1324, 11, 457, 4696, 13, 50912, 50912, 865, 13, 50944, 50944, 865, 13, 50956, 50956, 10429, 428, 15743, 366, 731, 12631, 1547, 281, 406, 312, 932, 15681, 1673, 13, 51220, 51220, 865, 13, 51252, 51252, 1057, 558, 13, 51280, 51280, 1042, 11, 9184, 11, 1309, 291, 370, 709, 337, 1348, 646, 322, 13, 51412, 51412, 467, 390, 257, 6834, 13, 51452, 51452, 400, 797, 11, 13568, 322, 1242, 341, 36427, 294, 13, 51648, 51648, 1044, 291, 13, 51688, 51688, 2561, 337, 1419, 385, 13, 51756, 51756, 467, 390, 257, 6834, 13, 51812, 51812, 400, 508, 2032, 268, 13, 51844], "temperature": 0.0, "avg_logprob": -0.11254823039954817, "compression_ratio": 1.6931818181818181, "no_caption_prob": 8.479717507725582e-05}, {"id": 1080, "seek": 493416, "start": 4935.76, "end": 4941.2, "text": " Add fuzzing to the mix and you get potentially some flakiness back, but maybe the database", "tokens": [50364, 865, 13, 50404, 50404, 865, 13, 50444, 50444, 5349, 283, 3334, 8781, 281, 264, 2890, 293, 291, 483, 7263, 512, 932, 514, 1324, 646, 11, 457, 1310, 264, 8149, 50716, 50716, 551, 11, 309, 311, 257, 665, 733, 295, 932, 514, 1324, 11, 457, 4696, 13, 50912, 50912, 865, 13, 50944, 50944, 865, 13, 50956, 50956, 10429, 428, 15743, 366, 731, 12631, 1547, 281, 406, 312, 932, 15681, 1673, 13, 51220, 51220, 865, 13, 51252, 51252, 1057, 558, 13, 51280, 51280, 1042, 11, 9184, 11, 1309, 291, 370, 709, 337, 1348, 646, 322, 13, 51412, 51412, 467, 390, 257, 6834, 13, 51452, 51452, 400, 797, 11, 13568, 322, 1242, 341, 36427, 294, 13, 51648, 51648, 1044, 291, 13, 51688, 51688, 2561, 337, 1419, 385, 13, 51756, 51756, 467, 390, 257, 6834, 13, 51812, 51812, 400, 508, 2032, 268, 13, 51844], "temperature": 0.0, "avg_logprob": -0.11254823039954817, "compression_ratio": 1.6931818181818181, "no_caption_prob": 8.479717507725582e-05}, {"id": 1081, "seek": 493416, "start": 4941.2, "end": 4945.12, "text": " thing, it's a good kind of flakiness, but hopefully.", "tokens": [50364, 865, 13, 50404, 50404, 865, 13, 50444, 50444, 5349, 283, 3334, 8781, 281, 264, 2890, 293, 291, 483, 7263, 512, 932, 514, 1324, 646, 11, 457, 1310, 264, 8149, 50716, 50716, 551, 11, 309, 311, 257, 665, 733, 295, 932, 514, 1324, 11, 457, 4696, 13, 50912, 50912, 865, 13, 50944, 50944, 865, 13, 50956, 50956, 10429, 428, 15743, 366, 731, 12631, 1547, 281, 406, 312, 932, 15681, 1673, 13, 51220, 51220, 865, 13, 51252, 51252, 1057, 558, 13, 51280, 51280, 1042, 11, 9184, 11, 1309, 291, 370, 709, 337, 1348, 646, 322, 13, 51412, 51412, 467, 390, 257, 6834, 13, 51452, 51452, 400, 797, 11, 13568, 322, 1242, 341, 36427, 294, 13, 51648, 51648, 1044, 291, 13, 51688, 51688, 2561, 337, 1419, 385, 13, 51756, 51756, 467, 390, 257, 6834, 13, 51812, 51812, 400, 508, 2032, 268, 13, 51844], "temperature": 0.0, "avg_logprob": -0.11254823039954817, "compression_ratio": 1.6931818181818181, "no_caption_prob": 8.479717507725582e-05}, {"id": 1082, "seek": 493416, "start": 4945.12, "end": 4945.76, "text": " Yeah.", "tokens": [50364, 865, 13, 50404, 50404, 865, 13, 50444, 50444, 5349, 283, 3334, 8781, 281, 264, 2890, 293, 291, 483, 7263, 512, 932, 514, 1324, 646, 11, 457, 1310, 264, 8149, 50716, 50716, 551, 11, 309, 311, 257, 665, 733, 295, 932, 514, 1324, 11, 457, 4696, 13, 50912, 50912, 865, 13, 50944, 50944, 865, 13, 50956, 50956, 10429, 428, 15743, 366, 731, 12631, 1547, 281, 406, 312, 932, 15681, 1673, 13, 51220, 51220, 865, 13, 51252, 51252, 1057, 558, 13, 51280, 51280, 1042, 11, 9184, 11, 1309, 291, 370, 709, 337, 1348, 646, 322, 13, 51412, 51412, 467, 390, 257, 6834, 13, 51452, 51452, 400, 797, 11, 13568, 322, 1242, 341, 36427, 294, 13, 51648, 51648, 1044, 291, 13, 51688, 51688, 2561, 337, 1419, 385, 13, 51756, 51756, 467, 390, 257, 6834, 13, 51812, 51812, 400, 508, 2032, 268, 13, 51844], "temperature": 0.0, "avg_logprob": -0.11254823039954817, "compression_ratio": 1.6931818181818181, "no_caption_prob": 8.479717507725582e-05}, {"id": 1083, "seek": 493416, "start": 4945.76, "end": 4946.0, "text": " Yeah.", "tokens": [50364, 865, 13, 50404, 50404, 865, 13, 50444, 50444, 5349, 283, 3334, 8781, 281, 264, 2890, 293, 291, 483, 7263, 512, 932, 514, 1324, 646, 11, 457, 1310, 264, 8149, 50716, 50716, 551, 11, 309, 311, 257, 665, 733, 295, 932, 514, 1324, 11, 457, 4696, 13, 50912, 50912, 865, 13, 50944, 50944, 865, 13, 50956, 50956, 10429, 428, 15743, 366, 731, 12631, 1547, 281, 406, 312, 932, 15681, 1673, 13, 51220, 51220, 865, 13, 51252, 51252, 1057, 558, 13, 51280, 51280, 1042, 11, 9184, 11, 1309, 291, 370, 709, 337, 1348, 646, 322, 13, 51412, 51412, 467, 390, 257, 6834, 13, 51452, 51452, 400, 797, 11, 13568, 322, 1242, 341, 36427, 294, 13, 51648, 51648, 1044, 291, 13, 51688, 51688, 2561, 337, 1419, 385, 13, 51756, 51756, 467, 390, 257, 6834, 13, 51812, 51812, 400, 508, 2032, 268, 13, 51844], "temperature": 0.0, "avg_logprob": -0.11254823039954817, "compression_ratio": 1.6931818181818181, "no_caption_prob": 8.479717507725582e-05}, {"id": 1084, "seek": 493416, "start": 4946.0, "end": 4951.28, "text": " Hopefully your inputs are well distributed enough to not be flaky though.", "tokens": [50364, 865, 13, 50404, 50404, 865, 13, 50444, 50444, 5349, 283, 3334, 8781, 281, 264, 2890, 293, 291, 483, 7263, 512, 932, 514, 1324, 646, 11, 457, 1310, 264, 8149, 50716, 50716, 551, 11, 309, 311, 257, 665, 733, 295, 932, 514, 1324, 11, 457, 4696, 13, 50912, 50912, 865, 13, 50944, 50944, 865, 13, 50956, 50956, 10429, 428, 15743, 366, 731, 12631, 1547, 281, 406, 312, 932, 15681, 1673, 13, 51220, 51220, 865, 13, 51252, 51252, 1057, 558, 13, 51280, 51280, 1042, 11, 9184, 11, 1309, 291, 370, 709, 337, 1348, 646, 322, 13, 51412, 51412, 467, 390, 257, 6834, 13, 51452, 51452, 400, 797, 11, 13568, 322, 1242, 341, 36427, 294, 13, 51648, 51648, 1044, 291, 13, 51688, 51688, 2561, 337, 1419, 385, 13, 51756, 51756, 467, 390, 257, 6834, 13, 51812, 51812, 400, 508, 2032, 268, 13, 51844], "temperature": 0.0, "avg_logprob": -0.11254823039954817, "compression_ratio": 1.6931818181818181, "no_caption_prob": 8.479717507725582e-05}, {"id": 1085, "seek": 493416, "start": 4951.28, "end": 4951.92, "text": " Yeah.", "tokens": [50364, 865, 13, 50404, 50404, 865, 13, 50444, 50444, 5349, 283, 3334, 8781, 281, 264, 2890, 293, 291, 483, 7263, 512, 932, 514, 1324, 646, 11, 457, 1310, 264, 8149, 50716, 50716, 551, 11, 309, 311, 257, 665, 733, 295, 932, 514, 1324, 11, 457, 4696, 13, 50912, 50912, 865, 13, 50944, 50944, 865, 13, 50956, 50956, 10429, 428, 15743, 366, 731, 12631, 1547, 281, 406, 312, 932, 15681, 1673, 13, 51220, 51220, 865, 13, 51252, 51252, 1057, 558, 13, 51280, 51280, 1042, 11, 9184, 11, 1309, 291, 370, 709, 337, 1348, 646, 322, 13, 51412, 51412, 467, 390, 257, 6834, 13, 51452, 51452, 400, 797, 11, 13568, 322, 1242, 341, 36427, 294, 13, 51648, 51648, 1044, 291, 13, 51688, 51688, 2561, 337, 1419, 385, 13, 51756, 51756, 467, 390, 257, 6834, 13, 51812, 51812, 400, 508, 2032, 268, 13, 51844], "temperature": 0.0, "avg_logprob": -0.11254823039954817, "compression_ratio": 1.6931818181818181, "no_caption_prob": 8.479717507725582e-05}, {"id": 1086, "seek": 493416, "start": 4951.92, "end": 4952.48, "text": " All right.", "tokens": [50364, 865, 13, 50404, 50404, 865, 13, 50444, 50444, 5349, 283, 3334, 8781, 281, 264, 2890, 293, 291, 483, 7263, 512, 932, 514, 1324, 646, 11, 457, 1310, 264, 8149, 50716, 50716, 551, 11, 309, 311, 257, 665, 733, 295, 932, 514, 1324, 11, 457, 4696, 13, 50912, 50912, 865, 13, 50944, 50944, 865, 13, 50956, 50956, 10429, 428, 15743, 366, 731, 12631, 1547, 281, 406, 312, 932, 15681, 1673, 13, 51220, 51220, 865, 13, 51252, 51252, 1057, 558, 13, 51280, 51280, 1042, 11, 9184, 11, 1309, 291, 370, 709, 337, 1348, 646, 322, 13, 51412, 51412, 467, 390, 257, 6834, 13, 51452, 51452, 400, 797, 11, 13568, 322, 1242, 341, 36427, 294, 13, 51648, 51648, 1044, 291, 13, 51688, 51688, 2561, 337, 1419, 385, 13, 51756, 51756, 467, 390, 257, 6834, 13, 51812, 51812, 400, 508, 2032, 268, 13, 51844], "temperature": 0.0, "avg_logprob": -0.11254823039954817, "compression_ratio": 1.6931818181818181, "no_caption_prob": 8.479717507725582e-05}, {"id": 1087, "seek": 493416, "start": 4952.48, "end": 4955.12, "text": " Well, Martin, thank you so much for coming back on.", "tokens": [50364, 865, 13, 50404, 50404, 865, 13, 50444, 50444, 5349, 283, 3334, 8781, 281, 264, 2890, 293, 291, 483, 7263, 512, 932, 514, 1324, 646, 11, 457, 1310, 264, 8149, 50716, 50716, 551, 11, 309, 311, 257, 665, 733, 295, 932, 514, 1324, 11, 457, 4696, 13, 50912, 50912, 865, 13, 50944, 50944, 865, 13, 50956, 50956, 10429, 428, 15743, 366, 731, 12631, 1547, 281, 406, 312, 932, 15681, 1673, 13, 51220, 51220, 865, 13, 51252, 51252, 1057, 558, 13, 51280, 51280, 1042, 11, 9184, 11, 1309, 291, 370, 709, 337, 1348, 646, 322, 13, 51412, 51412, 467, 390, 257, 6834, 13, 51452, 51452, 400, 797, 11, 13568, 322, 1242, 341, 36427, 294, 13, 51648, 51648, 1044, 291, 13, 51688, 51688, 2561, 337, 1419, 385, 13, 51756, 51756, 467, 390, 257, 6834, 13, 51812, 51812, 400, 508, 2032, 268, 13, 51844], "temperature": 0.0, "avg_logprob": -0.11254823039954817, "compression_ratio": 1.6931818181818181, "no_caption_prob": 8.479717507725582e-05}, {"id": 1088, "seek": 493416, "start": 4955.12, "end": 4955.92, "text": " It was a pleasure.", "tokens": [50364, 865, 13, 50404, 50404, 865, 13, 50444, 50444, 5349, 283, 3334, 8781, 281, 264, 2890, 293, 291, 483, 7263, 512, 932, 514, 1324, 646, 11, 457, 1310, 264, 8149, 50716, 50716, 551, 11, 309, 311, 257, 665, 733, 295, 932, 514, 1324, 11, 457, 4696, 13, 50912, 50912, 865, 13, 50944, 50944, 865, 13, 50956, 50956, 10429, 428, 15743, 366, 731, 12631, 1547, 281, 406, 312, 932, 15681, 1673, 13, 51220, 51220, 865, 13, 51252, 51252, 1057, 558, 13, 51280, 51280, 1042, 11, 9184, 11, 1309, 291, 370, 709, 337, 1348, 646, 322, 13, 51412, 51412, 467, 390, 257, 6834, 13, 51452, 51452, 400, 797, 11, 13568, 322, 1242, 341, 36427, 294, 13, 51648, 51648, 1044, 291, 13, 51688, 51688, 2561, 337, 1419, 385, 13, 51756, 51756, 467, 390, 257, 6834, 13, 51812, 51812, 400, 508, 2032, 268, 13, 51844], "temperature": 0.0, "avg_logprob": -0.11254823039954817, "compression_ratio": 1.6931818181818181, "no_caption_prob": 8.479717507725582e-05}, {"id": 1089, "seek": 493416, "start": 4955.92, "end": 4959.84, "text": " And again, congratulations on getting this merged in.", "tokens": [50364, 865, 13, 50404, 50404, 865, 13, 50444, 50444, 5349, 283, 3334, 8781, 281, 264, 2890, 293, 291, 483, 7263, 512, 932, 514, 1324, 646, 11, 457, 1310, 264, 8149, 50716, 50716, 551, 11, 309, 311, 257, 665, 733, 295, 932, 514, 1324, 11, 457, 4696, 13, 50912, 50912, 865, 13, 50944, 50944, 865, 13, 50956, 50956, 10429, 428, 15743, 366, 731, 12631, 1547, 281, 406, 312, 932, 15681, 1673, 13, 51220, 51220, 865, 13, 51252, 51252, 1057, 558, 13, 51280, 51280, 1042, 11, 9184, 11, 1309, 291, 370, 709, 337, 1348, 646, 322, 13, 51412, 51412, 467, 390, 257, 6834, 13, 51452, 51452, 400, 797, 11, 13568, 322, 1242, 341, 36427, 294, 13, 51648, 51648, 1044, 291, 13, 51688, 51688, 2561, 337, 1419, 385, 13, 51756, 51756, 467, 390, 257, 6834, 13, 51812, 51812, 400, 508, 2032, 268, 13, 51844], "temperature": 0.0, "avg_logprob": -0.11254823039954817, "compression_ratio": 1.6931818181818181, "no_caption_prob": 8.479717507725582e-05}, {"id": 1090, "seek": 493416, "start": 4959.84, "end": 4960.639999999999, "text": " Thank you.", "tokens": [50364, 865, 13, 50404, 50404, 865, 13, 50444, 50444, 5349, 283, 3334, 8781, 281, 264, 2890, 293, 291, 483, 7263, 512, 932, 514, 1324, 646, 11, 457, 1310, 264, 8149, 50716, 50716, 551, 11, 309, 311, 257, 665, 733, 295, 932, 514, 1324, 11, 457, 4696, 13, 50912, 50912, 865, 13, 50944, 50944, 865, 13, 50956, 50956, 10429, 428, 15743, 366, 731, 12631, 1547, 281, 406, 312, 932, 15681, 1673, 13, 51220, 51220, 865, 13, 51252, 51252, 1057, 558, 13, 51280, 51280, 1042, 11, 9184, 11, 1309, 291, 370, 709, 337, 1348, 646, 322, 13, 51412, 51412, 467, 390, 257, 6834, 13, 51452, 51452, 400, 797, 11, 13568, 322, 1242, 341, 36427, 294, 13, 51648, 51648, 1044, 291, 13, 51688, 51688, 2561, 337, 1419, 385, 13, 51756, 51756, 467, 390, 257, 6834, 13, 51812, 51812, 400, 508, 2032, 268, 13, 51844], "temperature": 0.0, "avg_logprob": -0.11254823039954817, "compression_ratio": 1.6931818181818181, "no_caption_prob": 8.479717507725582e-05}, {"id": 1091, "seek": 493416, "start": 4960.639999999999, "end": 4962.0, "text": " Thanks for having me.", "tokens": [50364, 865, 13, 50404, 50404, 865, 13, 50444, 50444, 5349, 283, 3334, 8781, 281, 264, 2890, 293, 291, 483, 7263, 512, 932, 514, 1324, 646, 11, 457, 1310, 264, 8149, 50716, 50716, 551, 11, 309, 311, 257, 665, 733, 295, 932, 514, 1324, 11, 457, 4696, 13, 50912, 50912, 865, 13, 50944, 50944, 865, 13, 50956, 50956, 10429, 428, 15743, 366, 731, 12631, 1547, 281, 406, 312, 932, 15681, 1673, 13, 51220, 51220, 865, 13, 51252, 51252, 1057, 558, 13, 51280, 51280, 1042, 11, 9184, 11, 1309, 291, 370, 709, 337, 1348, 646, 322, 13, 51412, 51412, 467, 390, 257, 6834, 13, 51452, 51452, 400, 797, 11, 13568, 322, 1242, 341, 36427, 294, 13, 51648, 51648, 1044, 291, 13, 51688, 51688, 2561, 337, 1419, 385, 13, 51756, 51756, 467, 390, 257, 6834, 13, 51812, 51812, 400, 508, 2032, 268, 13, 51844], "temperature": 0.0, "avg_logprob": -0.11254823039954817, "compression_ratio": 1.6931818181818181, "no_caption_prob": 8.479717507725582e-05}, {"id": 1092, "seek": 493416, "start": 4962.0, "end": 4963.12, "text": " It was a pleasure.", "tokens": [50364, 865, 13, 50404, 50404, 865, 13, 50444, 50444, 5349, 283, 3334, 8781, 281, 264, 2890, 293, 291, 483, 7263, 512, 932, 514, 1324, 646, 11, 457, 1310, 264, 8149, 50716, 50716, 551, 11, 309, 311, 257, 665, 733, 295, 932, 514, 1324, 11, 457, 4696, 13, 50912, 50912, 865, 13, 50944, 50944, 865, 13, 50956, 50956, 10429, 428, 15743, 366, 731, 12631, 1547, 281, 406, 312, 932, 15681, 1673, 13, 51220, 51220, 865, 13, 51252, 51252, 1057, 558, 13, 51280, 51280, 1042, 11, 9184, 11, 1309, 291, 370, 709, 337, 1348, 646, 322, 13, 51412, 51412, 467, 390, 257, 6834, 13, 51452, 51452, 400, 797, 11, 13568, 322, 1242, 341, 36427, 294, 13, 51648, 51648, 1044, 291, 13, 51688, 51688, 2561, 337, 1419, 385, 13, 51756, 51756, 467, 390, 257, 6834, 13, 51812, 51812, 400, 508, 2032, 268, 13, 51844], "temperature": 0.0, "avg_logprob": -0.11254823039954817, "compression_ratio": 1.6931818181818181, "no_caption_prob": 8.479717507725582e-05}, {"id": 1093, "seek": 496312, "start": 4963.12, "end": 4965.36, "text": " And your rune until next time.", "tokens": [50364, 400, 428, 1190, 68, 1826, 958, 565, 13, 50476, 50476, 9088, 958, 565, 13, 50536], "temperature": 0.0, "avg_logprob": -0.45467500125660615, "compression_ratio": 1.119047619047619, "no_caption_prob": 8.742250793147832e-05}, {"id": 1094, "seek": 496536, "start": 4965.36, "end": 4993.92, "text": " Until next time.", "tokens": [50364, 9088, 958, 565, 13, 51792], "temperature": 0.0, "avg_logprob": -0.42880075318472727, "compression_ratio": 0.6666666666666666, "no_caption_prob": 2.8385358746163547e-05}], "language": "en"}