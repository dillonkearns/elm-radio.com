{"text": " Hello, Jeroen. Hello, Dillon. How are you doing today? I'm doing pretty well. How are you? I'm good. And I am excited to chat with you about Elm Parsers. And I understand you've done some weekend hacking using Elm Parser for the first time. So I'm excited to hear about your experience with that. Yeah, I tried it. Before I tried it, I was like, I'm going to try it out. I'm going to try it out. I'm excited to hear about your experience with that. Yeah, I tried it. Before I tried it, I ran a Twitter poll asking people, Do you think I will have fun or do you think I will have a lot of pain? And I was kind of surprised that only four people out of 25 replied that I will have pain. So most people would think I was going to have fun. And I kind of heard the opposite. So I'm pretty I was pretty surprised. I found it to be quite easy. But then you get into pitfalls and then it's hard to figure things out. Yeah, I guess there's the question of how hard is writing a parser in Elm compared to doing other things in Elm? And then there's the question of how hard is writing a parser in Elm compared to writing a parser in another language? I would say for the latter, Elm makes it really nice to write parsers. For the question of how hard is writing a parser in Elm compared to doing other things? I mean, I've got my take. What was your initial experience with that? Was it pretty intuitive? Did you run into a lot of things that were confusing and surprising? Well, I didn't get too far. I just basically tried to do an Elm code parser because that's where my interests lie. Just for fun. I don't want to replace Elm syntax. Right. But you depend heavily on an Elm parser project for Elm review, which you've spent a lot of time with the result of a parser. Yeah. And you've thought a lot about the syntax tree that that gives you. And now you're looking at the other side of how you traverse the raw source code to build up that data structure. Yeah, I wrote a compiler back when I was a student. So I do have some experience with parsing. I think I used YACC or LEXT. I don't know. All the things. I think you use both. I think that like LEXT is a lexer and YACC is a parser and you have to like, yeah, find the tokens. Yeah, exactly. And I did the exact same thing in college. And I had a lot of fun doing that. Me too. And that was like using C or C++ and it was still fun. Yeah. Yeah, I had a lot of fun doing that project too. Writing parsers and writing languages were always something that I quite liked. I still think I will write a language parser at some point just for fun, just for kicks. It is satisfying. It is very satisfying, I think. I mean, when you're working with Elm and you can parse things and then having parsed into a nice data structure, you can then use that data structure in Elm and do case statements on this well defined data type. That's really satisfying. So, OK, before we get too far into this, talking about our experiences with parsers and all of that, let's get a definition. What is a parser and what is Elm parser, which we're talking about today? Yeah. So the way I understand it is a parser is something that takes a raw string and then decodes it into something else. A data structure, an abstract syntax tree, concrete syntax tree. Yeah. And then you do whatever you want with it. So you compile a language or you just extract some information like Richard Feldman's ISO 8601. Yes, you got it. I trained so hard before this podcast. That package extracts data information from a string and Elm syntax extracts the abstract syntax tree of Elm code. Right. The input is like a string, like your Elm. If you have an Elm source file, an Elm module, and you feed it to Elm parser to steal 4M Elm syntax, this parser project, you give it a string and then it takes that string and it either fails to parse or it gives you nicely structured data, which represents the abstract syntax tree of Elm. And OK, so we should probably define an abstract syntax tree. Yeah. So an abstract syntax tree. I don't know what it is. I've never played with it. It's a little abstract. Yeah. You haven't spent any time with abstract syntax trees, have you? Yeah. So little. Only five years of my life, something like that. When you've got your code, your Elm code, for instance, it is one giant string. But you have keywords and expressions, A plus B, and they all mean something. And the meaning is represented often as an AST, an abstract syntax tree, where we have removed all the unnecessary information like spacing or the limitation of elements where that doesn't matter. What you get is some kind of representation, often as a tree, that represents what the code means. And then you try to do whatever you want with it. Right. So it's still you don't have things like how much white space something had, if something was on a new line. But if something is defined in a let or as a top level value, that's part of the syntax tree that here's a let. It has these bindings to these expressions. That's part of the abstract syntax tree. Exactly. And if you want the white space information, then what you're dealing with is a concrete syntax tree, which there is none with for Elm at the moment, as far as I know. Right. And a concrete syntax tree might be useful if you're building editor tooling that needs to be able to recreate your exact source code. Whereas an abstract syntax tree, you lose information about how it was written, but you preserve all the information about what the code means in order to execute or compile it. So these terms are helpful and they're useful concepts if you're building a parser. But, you know, the ultimate point is you're turning this source code or some sort of string into some structured data, much like you would do with a JSON decoder. Except that the data is different in JSON, even if it's stringified, you get things by name, usually for when it's a record or JSON object. But with parsing, it's always about ordering. So you get this, then you get that, then you get this. It's what I'm getting. Right. You expect some kind of order, some kind of syntax. Yes. And if those expectations are not met, then you have a parsing failure. That is a really great point. And that's a great way to frame the distinction. So, okay, so JSON decoder, you have something which has already been parsed, actually. I mean, you could do like JSON.decode.decodeString and you could give it malformed JSON. And Elm is going to say, I couldn't parse this. So technically it does the parsing step somewhere in there. But it's basically checking, I mean, under the hood, I'm guessing it does JSON.parse. Right. Okay. So it does JSON.parse. So like the browser is saying, hey, I'm going to take this string and I'm going to parse it for you into well formed JSON. So you have this structure that's already been pieced together. So now you have this structure that has JSON data. It has fields, it has values, and the types are well defined, matching this sort of JSON specification. So you know things about the structure because you've parsed it successfully as JSON. So in a JSON decoder, as you're saying, you can sort of reach in and say, I want this field. And so parsers are very different because parsers, you're going through one character at a time and eating the symbols to define what the structure of the content is. And with JSON, you're sort of dealing with this data type that's already been parsed into a sort of structure and you're making assertions about the shape of that data. Yeah, you're basically already hitting a dictionary with JSON.parse, for records at least. Yes, exactly. Yeah. So you're doing some sort of validations on it. And in a sense, writing a parser, you're doing validations because your parser could fail or succeed. And if it succeeds, then you're going to end up with data of a certain type. But the similarity sort of ends there. A parser is a different category because it's processing things in a way where it's stepping through each character and building up some structure. So I think that's a pretty good introduction to the general concepts we're working with. What is a parser? What's an abstract syntax tree? The distinction between JSON decoders and parsers. So maybe let's dive into the building blocks a little bit that you use to actually define these things and how they work in a way that's going to be familiar if you've done JSON decoders and in a way that's going to feel new if you've done JSON decoders. Yeah. So who do you mean with Elm Parser? With specifically the Elm Parser library. Yes. Which is the official and I think default parser for Elm? Oh, yeah. I mean, it's a really lovely library. It's a unique take on parsing. And Evan built this library. He has a lot of experience working with parsers, having spent a lot of time maintaining the Elm parser itself in Haskell. Yeah. And I believe he took this Haskell parser library, Parsec, and initially built the Elm parser using that and then found he wanted to do things a little differently, both for performance reasons and for maintainability and kind of built his own tool on top of that. Or maybe just from scratch and learned some lessons and applied those lessons to the Elm parser library. Yeah, you really get the feeling that this is made to be very performance. Right. Kind of like painfully so sometimes. But when things work, things are performance right out of the box. Unless you use some construct that was advised against, I guess. Right. And we'll get into some of those topics like backtracking. So like, what was your initial experience? You dived in, you tried writing your first parser. Did you get something to work initially in an intuitive way or did you have to try things out for a while? No, the first few things were very easy, very intuitive. So basically what I tried to do was A equals one with some spacing. Basically, you already had examples doing that. So I was looking for a variable, then some spaces, a symbol, the equal sign, some spaces again, potentially you can ignore those. And then some values. In this case, it was just an integer. So I don't remember what it was for the string, though. But the other things were very simple. Right. OK, so you were able to pretty intuitively get that functioning and get it successfully parsing A equals one. Yeah, I don't think I've even hit an error at the point. So yeah, quite intuitive. Yeah. And I guess there's like a helper that lets you define like an identifier that's. Yeah, I think that's what I used. Which I mean, really, it's not that hard to define yourself, but there are certain rules like you can have numbers in an identifier name, but they can't be the first letter. So you can have A123 equals something, but you can't have 123A equals something because an identifier must start with A through Z, lowercase A through Z in the case of Elm. Yeah, you kind of list the steps of what you're expecting. So that's the order that matters. Kind of like decoding pipeline where you say decode.succeed. You do parser.succeed and then the function that takes the extracted information. And then you do pipelines where you say the first thing that I expect is an identifier, then expect spaces, then expect an equal sign, et cetera. So in that sense, it really feels familiar to decoding when you're used to the decoding pipeline or using decode.map2, map3, et cetera. Right. When all goes well, when you're on that happy path and you're finding the tokens that you expect to define sequentially, you say, I expect zero or more spaces. I expect an equal symbol here. Then that all works as you'd expect. So let's stay on that happy path for a little bit before we veer off of it. Yeah. OK, so when you're on that happy path. So first of all, you mentioned starting with parsing, was it like variable? Is it parser.variable? Is that the helper for that? I can't remember. There's some sort of. Yeah. It's really not the most important detail. But the point is that the library happens to give you a pretty small helper function that defines something for parsing variables, which you could very easily build yourself. But so it is parser.variable. OK, great. So we have parser.variable. And then now we have these sort of I think of them as like keep and discard. Yeah, I was thinking there's like a nicer four letter word for both. But keep and discard is good. But there's this pipe equals like vertical bar equals operator and there's vertical bar dot. So these are operators that you change, just like you would in a JSON decoder pipeline style. You do pipe greater than and pipe a bunch of things through. But you do pipe equals or pipe dot. If you do pipe equals, it's going to capture the result of that parser and include it when you put the results together. And if you do pipe dot, it's going to say. So, for example, if you're doing whitespace, you want to discard it. That's going to be a pipe dot because you say, well, I want to get past this whitespace or it's fine if there's no whitespace. I expect some potentially, but I don't care about it. But I don't care about it. I don't want to use that raw input for something. But if it's like a variable name, you want to get that value and you're going to put that in some data structure that says this is an assignment expression or in a I guess it's a statement in Elm, isn't it? When it's a binding declaration, a declaration. And you need the name of that variable so you can have that in your data structure. So you could have like a let binding where it's you have some string that's the variable name and then some expression that's that it's bound to. Yeah, let's talk about building blocks afterwards. So the next thing I tried was to have other kinds of expressions. So A equals one. So one is an integer, but potentially it could be string. So I tried making a data structure that could accommodate both integers and strings or flows or Booleans, whatever. So I extracted the integer parser, which was just parser int to a new function for parsing expressions or different parser, I guess, because it's not really a function as it is declared. That's right. Just like a JSON decoder is a decoder. It's like a value of type decoder. Yeah, it is probably a function under the hood, but maybe. Right. As far as you know, it could be some magical value that just does the right thing, although it's a sort of hint that it must be a function somewhere because you can do map. And if you can do map, it's got to store your function somewhere. So that is a good point. Very good. But we'll never know. Just. That's right. I extracted that to a parser expression, expression parser, sorry, where I say parser dot one off so it could decode either the expression that I tried to decode is either an integer or something else, a float or string, whatever. I tried a string and that worked fine. Right. Right. And this is going to feel very familiar to people to coming from some experience with JSON decoders and other similar techniques in Elm where you just do one of and you you can combine these things together and they'll try something until it succeeds. So at least when you're on the happy path, it's going to feel like a very familiar concept. And by the way, what you're talking about of sort of defining something that deals with this one part of the parsing as a separate top level parser. I spent a lot of time writing Elmarkdown because it turns out Markdown is a very, very large specification that has a lot of different cases. So like two days worth of work or something. Times some number. Yeah. Huge number. Yeah, I'd say so. And I've found that to be extremely helpful to extract to give yourself the building blocks for your specific parsing domain, because that's the thing is, in a way, in some cases, parsing feels high level. You know, you do parser dot one of parser dot map. Those things feel very high level, but then there are certain things which we're about to get into, which are very low level where you have to go one character at a time. And the thing is, you can define what you need. You say, I wish I had something that could parse in this way. Give yourself that tool. So you keep talking about staying on the happy path. Are we going to walk off the happy path? I'm feeling so ominous. There's a dark cloud off of the happy path. Can you can you hear the thunder? What is the name of the unhappy path? Well, are you afraid of commitment your own? I'll tell my girlfriend I'm not. OK, OK. Well, your experience with parsing may change that because after having spent a lot of time writing parsers, it makes me fear commitment because because when you write a parser, as soon as you chomp a value, as soon as you eat a character, you've committed down that path. And so for me, at least when I first started with parsing, it took a while to get used to. And it almost felt like, wait a minute, this is like there's some state here that feels very unfamiliar because you're writing a JSON decoder and you know, you do one of and you just throw a bunch of things at it. And as long as you have the right thing at the top of your one of. It kind of works as you'd expect. If you put a succeed for a default case in the one of at the top, then it's not going to hit the other ones. That's pretty intuitive, but it doesn't feel like there's this state that it's holding on to. But as soon as you commit down a path with parsing, you've committed down that path. So, yeah, that's what I noticed. That's where things got tricky too. When I tried to parse a float, I was trying first trying to parse an integer. The integer failed and then tried floating, but it went fast. The initial numbers is what I'm understanding. So you are afraid of commitment. Yeah. So you mentioned chomping. So that's a new word for me. And from what I'm getting is I'm imagining Pacman and I don't know if that's the right mental model. So you chomp, you eat. Waka, waka, waka, waka, waka. Yeah, those little balls and then you'd never see them again because you can backtrack. You can go back, but that ball has disappeared forever. That's right. Exactly. Well, in Elm Parser, the backtracking, you get it back, the ball. Right. So perhaps if the default for Elm Parser were backtracking, it would feel more intuitive. Yeah, it feels easier. Yeah, when you're first starting, the behavior might match what you're expecting at first a little bit better. But for performance reasons, it's not a good idea to make everything backtrackable. So by default, you know, there are these helpers like like chomp if and chomp if just says there's chomp if and there's chomp while. So if you say chomp if it takes a function that gives you a single character and then you return true or false. If you're parsing a float, maybe you say chomp while it's one, two, three, four, five, six, seven, eight or nine or zero. Perhaps you start with chomp if one through nine and you don't allow it to start with zero or who knows what your syntax rules are. But the point is, once you've started to chomp, once you chomp something and it succeeds. So if you say chomp if and it gets false as the first chomp statement, then it's going to go down a different path. Yeah, because you're decoding what? Because you're decoding A for instance, which is not expected. Right. Exactly. Exactly. So if you're trying to decode either a float or an int or a string. Or it could be a variable and it's just A, like you said, you start trying to parse a float. You're expecting some sort of number first. Oh, hey, it's not a number. It's the letter A or it's a double quote. Well, I'm not going to go down that path anymore. And that was your first step on that path, your first chomp. And so you're good. You just don't even take a single step down that path. But as you were saying, if you're going to first see if I can parse this into a float and then if that fails, then you're going to see if you can parse it as an integer. Then you first have to chomp onto those integers at the beginning of the float. So you start chomping, you chomp. If it's one, two, three, four, five, you chomp one, you chomp two, you chomp three. And you say, OK, now chomp another numeric character or chomp a dot. And it chomps a dot and you're good. But if it's not one, two, three, four, five, if it's just one, two, three and you're trying to chomp a float, now you do chomp one, chomp two, chomp three. And then you reach a new line and it says, wait a minute, I was expecting either another number or a dot. This isn't a float. And that, OK, that's OK. It fails, but it's not going to go in your one of where you say, try doing a float. If the float fails, try parsing into an integer. Not going to happen. Because you've already taken a step down the float parser path. You're committed. That's committing. Yeah. So when you use decode that one off, then it's really try this. And if at any point it fails, it doesn't matter. We just go to the next one. And that is not going to fail on parser. Exactly. So that's what's unintuitive because it puts it in a particular state. As soon as any chomping occurs, it could fail or it could succeed. But if it partially succeeds, it's not going to hit the other cases in the one of because you've committed down that path. And then the whole decoder fails. And that's for performance reasons. So what do you do instead? There are two ways to approach this. One is just throw backtrackable on it. You do parser dot backtrackable with your float parser. And what's it going to do? It's going to eat the one, eat the two, eat the three. It finds an unexpected character, a new line. Instead of a dot or more characters or more numerical characters. And it says, oh, I failed to decode this, but it's backtrackable. So now it unwinds its commitment. It can go back on the path that it's already taken a few steps down because it's backtrackable. And now it can try your integer parser. Yeah, but that is less efficient. But that's less efficient because now it's stepped through the one, the two, the three, however many characters it's needed to in order to check if it's a float. Now it has to revisit those characters to check if it's an integer. Yeah. OK, so it's very important for performance reasons to avoid backtracking. So how would we write that same parser? We could solve your problem and get your parser working with backtrackable, right? That would work fine. But it's not optimal for performance. So how do we solve that problem without using backtrackable? I'm imagining from the examples that I saw is that you would try to parse an integer, then expect potentially a dot and then some numbers. And if you find the dots and some numbers, then it's a float and otherwise it's an integer. So in both cases, you try to do the integers. And then if it's at least an integer, then try to go the extra path of finding a dot. And if that doesn't work, then it's an integer. Exactly. That's exactly it. Yeah, you got it. So conceptually, you know, conceptually, it's not so complex to actually like write the code for that. It takes a little practice. But just if you if you can wrap your head around what you need to do conceptually to avoid backtracking, then you're half of the way there, you know. And the concept is exactly what you described. You you have a parser where instead of one of for your parsing, where you say, I expect this expression to be either a float or an integer or and you're doing one up for each of those cases. You know, a one of list that contains each of those parsers. Instead of that, you're going to say try parsing it as an integer or float. You have an integer or float parser. And what it's going to do is it's going to have a common parser that captures as many characters as it can until it finds some sort of signal, some sort of signal that tells it it's done and it's an integer like a new line would tell it, OK, this part of the source code that's an integer is done. You can move on to parsing the next thing and we're all done here. Here's the value. So basically, you try to group together the things that start with the same symbols. Exactly, exactly. And then you do a continuation. So you branch off. So you have a single parser that starts out capturing all of the integers. It has that input and then it's going to continue either saying I'm done. It was an integer. We're good. Or, oh, I see a dot. Now I know that it's a float. I have the part that comes before the dot. Now I'm going to continue parsing the part that comes after the dot. And now you commit down the float path, but you started by going down a path that connects to another fork in the road. So, you know, it's very much like just taking a walk in the park. You take a walk in the park and you see a sign that says, oh, there's either a float or an integer down that path. But then the path splits. So you go down that path. You know it takes you to both of those places. You know you want to go to one of those places, but you don't have to decide until you get to the next fork in the road. So you follow the sign that says integers and floats this way. Oh, great. I know I want one of those because I'm looking at a numeric character. You follow that path. Now you hit another fork in the road. That's when you hit either a new line or a dot. Now you have to commit to either integer or float. You've started down that path and you know it's going to be a number. And if you, you know, if you have one, two, three, a, now there's a problem and you've committed down that path. And that's actually the desired behavior. Now you're able to give a message that says, hmm, I was expecting this to be an integer or a float. But because I was going down the integer or float path, but then I saw this character a which doesn't really fit here. So that's exactly what you want in terms of giving feedback to the user that there's some syntax error in their code. And so now you have you've done it in a performant way because you've combined those two paths into a single path. Yeah, I feel like that's a pretty good mental model and that does make it feel pretty approachable. When I learned of all the backtracking and performance issues, I was thinking I will probably have to do some backtracking at some point. But with this specific way of branching things, it all feels pretty doable in my mind. So do you use backtrackable in LMarkdown? Yes, we do use backtrackable in a few cases and we're trying to remove those. But there are some cases where it's a lot of work to fold things into a common path. You know, in the case we were talking about of this is a float or an integer if it starts with a numeric character. That's a that's a pretty straightforward one. But you can imagine as you're folding eight potential paths into one, it becomes more difficult. And so there are a few cases where we're trying to remove those as much as possible. And Fulkart has been doing some really awesome work to improve the performance and making a bunch of pull requests, which has been so, so nice. And he's been been doing some benchmarking there, too, which, by the way, benchmarking. If you're trying to build a parser project and it's like a non trivial parser, you know, it's not like parse a phone number and we use it in the UI once. Right. Like, OK, you're not going to have any performance bottlenecks, even if you use backtrackable. If that gets the job done, it's not going to matter. Yeah, but if you're building something that parses Elm syntax for Elm projects, you're going to notice a performance bottleneck if you're not doing these micro optimizations. And so in cases like that, where performance is critical and where it's like a sort of community asset to have this parsing project, I would recommend benchmark first before you make assumptions about what's going to improve performance. After you've written it, you mean. So, yes, that's a good that's a good question. Step one is definitely write tests, right? Because if you are if you are doing performance tuning before you have benchmarks, that's not good. But what's even worse is to do performance tuning before you have tests. That's a nightmare. I can't even imagine. And in general, with parsers, you want lots of tests and parsers testing in Elm is really nice. Like if you're just testing, I have this source code and I run it through this parser and I expect it to fail in this way here. And I expect it to parse into this data structure here. It's really so easy. It's so much easier than manually testing it with parser projects. There's no reason not to do lots and lots of tests because they're really fast to run. They don't have any side effects. They're just very simple. Well, that's simple, but very straightforwardly. Yeah, they're functional, right? The thing about testing is testing is inherently functional. And when you're testing in, you know, languages that are more, you know, imperative, that have side effects that have environment, you know, objects that have a bunch of state, then you have to like mock things out and stub things and try to capture the side effects that have happened. And so you use all these things that are very messy and brittle and they make you less confident about your test because you're inherently trying to take these things which are nonfunctional. Like side effects and like global state and environment. And you're trying to make them functional as in with this input, I get this output. Well, with Elm, that's all you have. So if you're writing a parser, that's all it is. You give it this input, this source code, which is just a string. You get this data type. It's so easy. It's way easier than doing it without tests. So I cannot recommend highly enough, whether it's a very complicated parser or a very simple parser, just write lots of tests. And certainly before you do any performance tuning, write tests. And before you do performance tuning, even if you've written your tests, benchmark it to figure out where the bottlenecks are. Yeah. Another good thing is that you work with building blocks. So you parse statements and inside of those you use a parser for expressions and you can unit test the expression parser and you can unit test the statement parser. And then you can unit test the whole parser, but you can do it at the level that you need to. That's a really good point. Yeah. And one thing I like to do, we kind of demonstrated it on this live stream that I did with a couple of people who have done a bunch of great contributions to the Elm Markdown project. We did a live stream where we implemented at least a lot of the functionality for the Markdown table parsing for the GitHub flavored Markdown spec. And one of the techniques we use there, which I find makes it a lot easier to do this process, is to just like, I mean, this, I hope that people get sick of me saying this because if they do, then I've accomplished my goal, which is to drill it into people's heads. Start with a hard coded success, get your tests passing as fast as possible. I mean, this is the basic sort of TDD concept of, you know, fake it till you make it where you make it dumb, then make it smarter. Exactly. Exactly. Do the stupidest thing you could possibly think of the first thing that comes to mind. Use all the dirty tricks you can to get it green and then refactor. But now you've got a starting point that you know works. It's all wired through. You have a test that's telling you if you have the expected result or not. Right. So we did that in the live stream where we said, well, I expect if I had like a table like this, like what's the most basic case of a GitHub flavored Markdown table? OK, that's our test case. And I would expect it to decode in to parse into this data structure. So we write that test. It's not compiling. And then what do we do? We use data structure inline. You hard code it. Exactly. We hard code it. And what what function do we use to hard code the result? Succeed? Succeed. Yeah, succeed. Succeed is the key to success. I'm going to make that a T shirt. I want one. Succeed in in monospace font. Succeed is the key to success. That's that's good. I'm going to tweet that. I'm going to tweet that right after this. Give people a sneak peek of this episode. But I really think it's a great tool because it lets you take a small step that, you know, you've got something to work towards and to iterate towards. But you know that the types can all line up. You know that like here's the result I'm looking for and you can break it down into smaller steps. So one thing I think we should talk about is when should you use a parser and when should you use something else like probably a RegEx? Absolutely. So yes, I'm thinking when it gets very complicated. But that's I don't know any specific data points where you should say, oh, this is definitely parser material. So when it gets complicated to use a parser, it's not complicated to use RegEx. So try RegEx and then if it fails, if it doesn't work, try a parser. Yeah, this is this is a great question. And I think there are a few things that come to mind for maybe some some code smells that might point you in the direction of parser. So I like the idea that if you can throw together a RegEx in three minutes that does what you need and it's not super complicated, then great. But let's say that you're working with a RegEx and from Stack Overflow, you have from Stack Overflow is starting to do really complicated things. And perhaps you're capturing a lot of pieces, you have a lot of capture groups. So first of all, the API for dealing with capture groups is, you know, you don't get these nice sort of types where the Elm compiler says, oh, because of the way that you wrote this, you're going to get these types like you do with JSON decoders and things like that. Yeah, it's just like, OK, maybe there are some strings here or maybe not. Like maybe there's a list of things you have to check. And then you always get it as a string, which is not always what you want. Yeah, exactly. So you have to come back around later and check, does this match this RegEx that it's a string or do some other checks on it? If you're doing a lot of that, that's probably a smell that you parser might be a good fit. If you want to give very precise error messages. That's definitely a sign that Elm parser is a good fit, I think. I mean, I think it's safe to say that Elm and Evan's work have been very influential in the broader software development community and set an example of they've kind of set the bar for good error messages. And, you know, a lot of it's in our work too. We have ruthlessly stolen the formatting and inspiration from Elm error messages and so have we were inspired and we were inspired so much that it made us steal ideas. It's the ultimate sign of flattery, right? Yeah. No, I mean, I think that Evan has really been influential in what good error messages can look like. And definitely. He built Elm parser with that in mind, right? So Elm parser gives you some tools to give some really precise, high quality error messages. So there's something else I've been wondering, because in Elm syntax, you get to play with expressions, statements or declarations, or both. And you get to know the location of each element. So you know where this number expression appeared in, where the type signature happens to be. How do you get that information? Is that something complex? Is that something that you do with parser advanced or? It's actually ridiculously easy. That's one task that, yeah, so all you do is if you're trying to capture, like, let's take your example where you're saying A equals one, two, three. When you have your parser that's either going to try an integer or float, then what you can actually do, you can say, actually, so this is my expression parser. So it's going to be one of integer or float, which is that one parser we defined, right? So you reach a fork in the road and that fork is all expressions this way. So this is your starting point. You're standing at this big fork in the road that has all these paths that branch off for all the expression types. Because you know you need an expression here. And so you have, OK, if you go down this path, it's going to be a float or integer. If you go down this path, it's going to be a string. If you go down this path, it's going to be a variable. Well, you can do something called get offset. Yeah. And get offset, you can just capture the value of get offset, and that's just going to give you the line number. I think there's also like get row and get column or maybe it's get row and get call or whatever. But they're actually equivalent. You can derive it from that. But the point is that you just chain it on. So we talked about these pipelines that you build where you say pipe equals and pipe dot. If you say pipe equals, it's always going to succeed and just give you, you say pipe equals get row, pipe equals get column. It's always going to succeed and give you the current row and column as integers. And it's not going to jump either. Exactly. It's just getting a hard coded value based on the state of the parser. Exactly. It will never cause the parser to fail. It doesn't change the state of the parser at all. It just includes that value there. So what you can do is, you know, you're taking a walk in the park, you get to this expression fork where you say, OK, I need to parse some sort of expression. And when you're standing there at that point, you say, oh, let me grab the row and column number. And now you just have that data and you include it as part of your expression. And then when you reach the end of that, one of those paths, you do the same thing. So what you would do is you would say, OK, I'm doing like a let binding parser or I'm doing like, you know, a top level. What's it called? A top level value parser, right? A top level declaration. So I parse some sort of identifier like A and then I parse white space, then I parse equals, then I parse white space, then I parse an expression. But before you parse that expression, like you could just include it in your expression parser where your expression parser is. Get the current row and column. Run the expression parser, then get the current row and column, and then you just include that with your data. So now your data is start set, end set, plus whatever expression data structure you had. Yeah, that sounds pretty simple. Quite straightforward. So that's that's a really nice feature. Plus, I guess that you can just write a helper function that just says get location over a parser. Exactly. OK, that sounds pretty nice. Yeah, maybe one last building block to touch on before we move on to some other topics. There's one more thing called parser dot loop. Did you encounter that at all in your... I encountered it, but I haven't played with it. Yeah, it's an important tool. I don't think we need to cover it in depth here. I think people can look at examples and get a sense of it. But just suffice it to say it exists. It is a tool that you can use to solve certain problems where you where you need to keep track of context. So like if you're doing a regular expression where you wanted to count the number of times that a certain character appears or where like a certain condition is met, regular expression isn't really going to do that for you. It can't help you track state. It just executes, right? Yeah. But if you wanted to write a parser where you do that, then what you can do is you can use this helper called parser dot loop. And what it does is it's effectively like a while loop, which feels weird to do in Elm, but it's an abstraction that feels similar to that. And what you're doing is you're just calling this parser and you have a parser that either returns loop that says keep running the parser or the parser will parse into done. If it parses into done, then the parser will stop. If it parses into loop, then it will continue and it maintains state. So I think of it kind of like a fold expression in Elm where you can do like list dot fold L where like compared to list dot map list dot map, you're just going over every item and you don't have a context that you carry with you. But parser dot loop allows you to retain context as you go through that parsing. So basically you use parser dot loop when you have things that can be duplicated, like you can have several statements in an Elm code file. And when you parse lists, then you have a certain number of elements that is undefined at the beginning. So you loop through those and at every step of the way, you have a parser that says stop here because I found a closing bracket or continue because I found a comma or something. Right. Yeah, yeah, you can you can do that and you can track state as you do that. And that's I think the sort of significant thing about looping is it allows you to maintain that state. And as you say, you you yeah, you can tell it when to terminate running a parser repeatedly until it finds some end condition. What kind of information would you gather, for instance, like if you're parsing a tuple, would you count the number of elements to see if they're bigger than three or something? Yeah, yeah, I think you would. I think you would do that. If you want tuple for elements to be a syntax error, for instance, then you could. OK. Yes, exactly. Yeah, you could do that. And you could you can do that with parser dot problem. But that's exactly right. So like if you yeah, if you just run a parser and you don't have this context from loop, you don't know how many times you've gone through it because you don't have any state. So, yeah, exactly as you say, you say, I am going to parse a tuple, but I need to know how many items have I seen because if it's greater than three, then I'll fail. So that's that's exactly how you would do that. You would do. Yes. So you would do that, just like what you said. But if you couldn't do that, then you would not have a syntax error. You would have a check. Yeah. Because, hey, I have a tuple here. Is it bigger than three? OK, then I have a different problem. Exactly. Exactly. So you'd have to do a to pass to parse it into the raw syntax and then check for syntax errors in this thing that you parsed in a second step rather than. Yeah, exactly as you say, you you can as you're parsing that tuple, you have the context of how many elements you found in that tuple and then you can fail. And the way you fail is, you know, much like we have Jason decode fail. We have parser dot problem. And that allows us to just say if you went down a path that led you here, give this error right now. Is it when the Elm compiler says, hey, I got something very confusing. Is that what it uses on the third, like parser problem? Because I'm expecting when you do parser dot one of this, it says, oh, I was expecting a this or that or this. Right. Probably. So I'm not sure how similar because the Elm parser is written in Haskell. I'm not sure how similar Evans API that he built to do parsing in Haskell for the Elm compiler is to the Elm parser library. I would imagine pretty similar. But yeah, that's that's the idea. You can you can do one of and then you can do parser dot problem as one of those. So you so if you say it's either you say I am going to parse a value that's either a number or a string. So try parsing a number. And of course, as we talked about, if you take a single step down any of those paths, you're committed. So you you say, OK, try parsing a number. If that doesn't work out, try parsing a string. If that doesn't work out, here's the problem. Hey, I expected to see either a number or a string. And you put that as the one of one of parse number parsing problem. I expected number string. Yeah. So what about syntax error messages? So you know, parser dot problem, you can say whatever you want. You can try and make it as helpful as possible with as much knowledge that you have. How do you get other kind of error messages like when you do parser dot one of does it give you a nice error message like I just said before? Or you have to write them yourself. Parser dot one of is basically going to give you whatever error it encounters first. So in Elm parser terminology, that's a dead end. I believe it's just going to hit a dead end and then stop. And then I was expecting a colon or something. Yes. So not that's really useful. Yeah. So the way that you write very precise, expressive error messages with Elm parser to try to get the type of quality of error messages that you see in the Elm compiler, the tools that were given to do that in Elm parser are in parser dot advanced. So this module, parser dot advanced, as I think you saw, it pretty much mirrors the regular parser module. But it's got some a couple of changes and a couple of extra functions. That's what it's for. That was going to be one of my questions. Like, when do you use parser at events? Basically, it's because of the error messages. Is that it? Exactly. So basically, when you do the regular parser module, when you run a parser, there's actually a hard coded list of problems. There's like a problem type in the parser module. So the type parser dot problem is a hard coded type that says I was expecting this token, I was expecting this type of value, or it could just be a string that says this was the problem. If you say parser dot problem, it's going to be your custom problem string. It just gives you a place to provide a string that gives an error. Right. And if you use parser dot advanced now, that problem type is your own custom type. So a problem could be a very expressive custom type that you define and you define how to build up that type as you build up your parsers. But to to give good error messages, you need to know in what state you are. So that's the other thing that parser advanced gives you. Couldn't have segued better myself. So it allows you. So if you look at the parser type that's defined in the parser module and that's defined in the parser advanced module, you'll notice that there are some extra type variables in the advanced type for the context and the type of problem. So in the regular parser module, the parser type has, as I said, a hard coded. This is your type of problem that you could have. And if you have a custom problem, it's a string in the parser advanced. Parser advanced parser type. You have a custom type for your problems and you. Isn't that convenient? A custom type for your problems? What I've needed my whole life. Just simplify it to a custom type. I prefer it to be an empty two. That would be nice, wouldn't it? There's another T. Shirt idea. We'll work on that. And then the other extra type variable that you have for the parser advanced parser type is for the context. So you can have special context in your parser. And so you can you can do something in context. So you could say in the context of parsing a let statement. And so now you have this sort of stack of context that says, OK, I was I was in a let statement and within that let statement, I was in another let statement. And then within that, I was trying to parse a list and then I encountered this error. And so that's basically what the Elm compiler uses, a similar technique to provide you with more context that tells you exactly where the problem is coming from. OK, so you would probably use the regular normal parser module to do simple things like parsing a phone number. If you try to parse a language, then you will probably want to use parser advanced. Yes, exactly. Exactly. Because there's a lot more context and nesting of different types of expressions and that sort of thing. So, yeah, exactly. I think that's a good rule of thumb. And actually, well, it's maybe a bit of a tangent, but I'm actually starting to wonder for my Elm Markdown parser, whether I should just use the regular parser module, because Markdown is unique in that it's not supposed to fail. There's no invalid Markdown. If you have some sort of like closing token that you forgot, like you forgot the closing parenthesis for a link tag in your Markdown. Well, it's just a valid string literal instead of being an actual link block. Yeah, you always have a fallback that is just regular string. Exactly. That's the smallest tangent that you've ever done. My whole life is a tangent, Jeroen. This whole podcast is a tangent. Yeah. OK, well, I think I know how to write an Elm syntax parser now. Just like the matrix. You know, Kung Fu. I know Kung Fu. I know Elm parser. I know Elm parser. If we can give people that feeling with some of our podcast episodes, then I will be happy. Yeah. Let us know. Just tweet at us and say, I know Elm parser and we'll understand. Yeah. You can also say I succeeded at parsing. The key to success is succeed. Succeed is the key to success. Yeah, it's good. I think the monospace font is what what makes it. So it's going to be a better T shirt. Yeah. I think we've covered the basic building blocks pretty well. And of course, there's there's always more to explore. You're always going to find more. But my biggest advice of anything is please, please, please write unit tests. If you're building a project, you will thank me later is very worth it with that in mind. I mean, if you learn one thing, write tests for your parser if you take one thing away. But if you take two things away, maybe we should talk a little bit about some some things to keep in mind when you're starting a project. I think one one thing that is really valuable is if you're writing a parser, there's a good chance that you're working with some sort of specification. And if if there's a specification, there may be a formal specification document for it. Those are very helpful. Like for for dates, there's some specification. What is it? That number again? 80 ISO 8601. That's right. That's right. Oh, yes. That's right. That's the formal specification for that. Yeah. So like for Markdown, there's something called the common mark specification. GitHub flavored Markdown is an extension of that that builds off of that. It's been very handy to be able to look through a formal description of it, and it's it's actually very thoughtfully put together. So it's it's a very useful resource. Actually, for my own Markdown parser, I was able to steal the test suite from the MarksJS project, which what they do is they take all of the Markdown specs and they actually run them as tests. So they say, OK, the Markdown spec gives us all these examples of this Markdown input should give this HTML output. I run all of those thousands of tests on Dillon Kern's L Markdown, and it is excellent. It is so nice. It's like saved me so much time. So use those resources if you can find them. And chances are, if you're writing a parser for something, there are probably good resources for that. That's a great place to start. I think another thing that's very useful is just looking at other people's Elm parser code. There are starting to be more and more examples of this out there. So you can take a look at Dillon Kern's L Markdown and we've done a live stream on that, too. So that's another resource. So when you go to ask for help or do you have any resources to troubleshoot your problems? For sure. If you ask in the Elm Slack, there will be someone to help. If I see someone ask a parser question, I will help them. But I just write lots of tests. It's not easy, but I just write lots of tests and then I keep trying things until the test pass. I'm not a smart man, Jeroen, but I am good at writing tests. Yeah, you're good at hacking is what I heard, too. Well, it's not hacking if you have tests. Then it's very professional and refined. It's performance. That's what it is. Performance. Yes, it makes me happy. It makes me happy to have tests because hacking is just no fun if you don't have tests. But just trying out a bunch of random things until something works with some tests telling you if it actually works. Oh, bliss. Love it. Highly recommended. Yeah, that's really been what I've done is just written a lot of tests and figured it out over time. There are some helpful resources in the Elm Parser repository that kind of explain, give you like a conceptual overview of a few things. So that's a good thing to look at. It kind of talks about backtrackable and those types of things. Yeah, you can feel that Evan gave it quite a bit of love. He did. It's really well written. I would even say that it's one of the best things about Elm actually is the Elm Parser project. So if you love Elm, try the parser. Yeah, it opens up some really cool possibilities. And I think that there's been, as with many of the really wonderful things about Elm, you see this feature in Elm. And then there's this vibrant innovation going on in the ecosystem. And I see Elm Parser as being the same thing that just creates this space for innovation where we see people doing some really cool things. Yeah, you couldn't have Elm pages without the Elm Markdown Parser. And I couldn't have Elm Review without the Elm Syntax Parser. The Elm Syntax Parser. Exactly. That it's opened up some very cool things. Elm pages would still, I would still find it useful even if it was just using the Elm Explorations Markdown. But you're right that I built my Markdown Parser because I wanted to do certain things in the context of like a static site where I wanted to render highly custom views in my Markdown. So, yeah, look at examples. Martin Janacek has his Elm in Elm compiler, which is not fully completed, still a work in progress, but that's something to check out and you can look at his talk on that at Elm Europe. Yeah. Matt Griffith has a really cool project called Elm Markup, which is it's very different from Markdown in that Markdown is designed to never fail. Elm Markup is designed to give you a well defined syntax that will fail in specific cases with nice error messages. So Matt has actually done some really cool stuff with the parser there to both give you very nice error messages. That's actually a great repository to look at if you want to learn how to do precise, expressive error messages. But he also recovers from those errors gracefully so you can have partially rendered views so it can recover from errors and still present you with something when you're in like dev mode. So you got a parser and errors. Yeah, he gives you a parser, nice errors and fault tolerance. So it's a fault tolerant. Parser with nice errors, which is very cool. I recommend taking a look. Teresa has a cool parser project where she does a YAML parser and she gave a talk at Elm Conf a couple of years back, three years back. I don't think we're at this time. But we'll link to that. And it's a very nice introduction to some of the core concepts that we've talked about. She's got like lots of great code examples in her slides, and I definitely recommend watching that. Yeah, and I've got an example in an early somewhere about a equals one. Oh, yeah, we should link to that. Yeah, definitely. Great. All right. Well, I think with that, let's free the people to go play around with Elm parser and build some cool stuff. Maybe we'll see some cool innovations popping up to continue pushing the boundaries with what you can do with Elm. Yeah. Good luck. And have fun, especially have fun as people have told me. Parsers are fun. Parsing Elm is even more fun. Enjoy.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 2.0, "text": " Hello, Jeroen.", "tokens": [50364, 2425, 11, 508, 2032, 268, 13, 50464, 50464, 2425, 11, 28160, 13, 50564, 50564, 1012, 366, 291, 884, 965, 30, 50664, 50664, 286, 478, 884, 1238, 731, 13, 1012, 366, 291, 30, 50764, 50764, 286, 478, 665, 13, 400, 286, 669, 2919, 281, 5081, 365, 291, 466, 2699, 76, 49691, 433, 13, 51064, 51064, 400, 286, 1223, 291, 600, 1096, 512, 6711, 31422, 1228, 2699, 76, 49691, 260, 337, 264, 700, 565, 13, 51314, 51314, 407, 286, 478, 2919, 281, 1568, 466, 428, 1752, 365, 300, 13, 51414, 51414, 865, 11, 286, 3031, 309, 13, 4546, 286, 3031, 309, 11, 286, 390, 411, 11, 51564, 51564, 286, 478, 516, 281, 853, 309, 484, 13, 286, 478, 516, 281, 853, 309, 484, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.33800291636633495, "compression_ratio": 1.7356828193832599, "no_caption_prob": 0.04578511416912079}, {"id": 1, "seek": 0, "start": 2.0, "end": 4.0, "text": " Hello, Dillon.", "tokens": [50364, 2425, 11, 508, 2032, 268, 13, 50464, 50464, 2425, 11, 28160, 13, 50564, 50564, 1012, 366, 291, 884, 965, 30, 50664, 50664, 286, 478, 884, 1238, 731, 13, 1012, 366, 291, 30, 50764, 50764, 286, 478, 665, 13, 400, 286, 669, 2919, 281, 5081, 365, 291, 466, 2699, 76, 49691, 433, 13, 51064, 51064, 400, 286, 1223, 291, 600, 1096, 512, 6711, 31422, 1228, 2699, 76, 49691, 260, 337, 264, 700, 565, 13, 51314, 51314, 407, 286, 478, 2919, 281, 1568, 466, 428, 1752, 365, 300, 13, 51414, 51414, 865, 11, 286, 3031, 309, 13, 4546, 286, 3031, 309, 11, 286, 390, 411, 11, 51564, 51564, 286, 478, 516, 281, 853, 309, 484, 13, 286, 478, 516, 281, 853, 309, 484, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.33800291636633495, "compression_ratio": 1.7356828193832599, "no_caption_prob": 0.04578511416912079}, {"id": 2, "seek": 0, "start": 4.0, "end": 6.0, "text": " How are you doing today?", "tokens": [50364, 2425, 11, 508, 2032, 268, 13, 50464, 50464, 2425, 11, 28160, 13, 50564, 50564, 1012, 366, 291, 884, 965, 30, 50664, 50664, 286, 478, 884, 1238, 731, 13, 1012, 366, 291, 30, 50764, 50764, 286, 478, 665, 13, 400, 286, 669, 2919, 281, 5081, 365, 291, 466, 2699, 76, 49691, 433, 13, 51064, 51064, 400, 286, 1223, 291, 600, 1096, 512, 6711, 31422, 1228, 2699, 76, 49691, 260, 337, 264, 700, 565, 13, 51314, 51314, 407, 286, 478, 2919, 281, 1568, 466, 428, 1752, 365, 300, 13, 51414, 51414, 865, 11, 286, 3031, 309, 13, 4546, 286, 3031, 309, 11, 286, 390, 411, 11, 51564, 51564, 286, 478, 516, 281, 853, 309, 484, 13, 286, 478, 516, 281, 853, 309, 484, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.33800291636633495, "compression_ratio": 1.7356828193832599, "no_caption_prob": 0.04578511416912079}, {"id": 3, "seek": 0, "start": 6.0, "end": 8.0, "text": " I'm doing pretty well. How are you?", "tokens": [50364, 2425, 11, 508, 2032, 268, 13, 50464, 50464, 2425, 11, 28160, 13, 50564, 50564, 1012, 366, 291, 884, 965, 30, 50664, 50664, 286, 478, 884, 1238, 731, 13, 1012, 366, 291, 30, 50764, 50764, 286, 478, 665, 13, 400, 286, 669, 2919, 281, 5081, 365, 291, 466, 2699, 76, 49691, 433, 13, 51064, 51064, 400, 286, 1223, 291, 600, 1096, 512, 6711, 31422, 1228, 2699, 76, 49691, 260, 337, 264, 700, 565, 13, 51314, 51314, 407, 286, 478, 2919, 281, 1568, 466, 428, 1752, 365, 300, 13, 51414, 51414, 865, 11, 286, 3031, 309, 13, 4546, 286, 3031, 309, 11, 286, 390, 411, 11, 51564, 51564, 286, 478, 516, 281, 853, 309, 484, 13, 286, 478, 516, 281, 853, 309, 484, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.33800291636633495, "compression_ratio": 1.7356828193832599, "no_caption_prob": 0.04578511416912079}, {"id": 4, "seek": 0, "start": 8.0, "end": 14.0, "text": " I'm good. And I am excited to chat with you about Elm Parsers.", "tokens": [50364, 2425, 11, 508, 2032, 268, 13, 50464, 50464, 2425, 11, 28160, 13, 50564, 50564, 1012, 366, 291, 884, 965, 30, 50664, 50664, 286, 478, 884, 1238, 731, 13, 1012, 366, 291, 30, 50764, 50764, 286, 478, 665, 13, 400, 286, 669, 2919, 281, 5081, 365, 291, 466, 2699, 76, 49691, 433, 13, 51064, 51064, 400, 286, 1223, 291, 600, 1096, 512, 6711, 31422, 1228, 2699, 76, 49691, 260, 337, 264, 700, 565, 13, 51314, 51314, 407, 286, 478, 2919, 281, 1568, 466, 428, 1752, 365, 300, 13, 51414, 51414, 865, 11, 286, 3031, 309, 13, 4546, 286, 3031, 309, 11, 286, 390, 411, 11, 51564, 51564, 286, 478, 516, 281, 853, 309, 484, 13, 286, 478, 516, 281, 853, 309, 484, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.33800291636633495, "compression_ratio": 1.7356828193832599, "no_caption_prob": 0.04578511416912079}, {"id": 5, "seek": 0, "start": 14.0, "end": 19.0, "text": " And I understand you've done some weekend hacking using Elm Parser for the first time.", "tokens": [50364, 2425, 11, 508, 2032, 268, 13, 50464, 50464, 2425, 11, 28160, 13, 50564, 50564, 1012, 366, 291, 884, 965, 30, 50664, 50664, 286, 478, 884, 1238, 731, 13, 1012, 366, 291, 30, 50764, 50764, 286, 478, 665, 13, 400, 286, 669, 2919, 281, 5081, 365, 291, 466, 2699, 76, 49691, 433, 13, 51064, 51064, 400, 286, 1223, 291, 600, 1096, 512, 6711, 31422, 1228, 2699, 76, 49691, 260, 337, 264, 700, 565, 13, 51314, 51314, 407, 286, 478, 2919, 281, 1568, 466, 428, 1752, 365, 300, 13, 51414, 51414, 865, 11, 286, 3031, 309, 13, 4546, 286, 3031, 309, 11, 286, 390, 411, 11, 51564, 51564, 286, 478, 516, 281, 853, 309, 484, 13, 286, 478, 516, 281, 853, 309, 484, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.33800291636633495, "compression_ratio": 1.7356828193832599, "no_caption_prob": 0.04578511416912079}, {"id": 6, "seek": 0, "start": 19.0, "end": 21.0, "text": " So I'm excited to hear about your experience with that.", "tokens": [50364, 2425, 11, 508, 2032, 268, 13, 50464, 50464, 2425, 11, 28160, 13, 50564, 50564, 1012, 366, 291, 884, 965, 30, 50664, 50664, 286, 478, 884, 1238, 731, 13, 1012, 366, 291, 30, 50764, 50764, 286, 478, 665, 13, 400, 286, 669, 2919, 281, 5081, 365, 291, 466, 2699, 76, 49691, 433, 13, 51064, 51064, 400, 286, 1223, 291, 600, 1096, 512, 6711, 31422, 1228, 2699, 76, 49691, 260, 337, 264, 700, 565, 13, 51314, 51314, 407, 286, 478, 2919, 281, 1568, 466, 428, 1752, 365, 300, 13, 51414, 51414, 865, 11, 286, 3031, 309, 13, 4546, 286, 3031, 309, 11, 286, 390, 411, 11, 51564, 51564, 286, 478, 516, 281, 853, 309, 484, 13, 286, 478, 516, 281, 853, 309, 484, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.33800291636633495, "compression_ratio": 1.7356828193832599, "no_caption_prob": 0.04578511416912079}, {"id": 7, "seek": 0, "start": 21.0, "end": 24.0, "text": " Yeah, I tried it. Before I tried it, I was like,", "tokens": [50364, 2425, 11, 508, 2032, 268, 13, 50464, 50464, 2425, 11, 28160, 13, 50564, 50564, 1012, 366, 291, 884, 965, 30, 50664, 50664, 286, 478, 884, 1238, 731, 13, 1012, 366, 291, 30, 50764, 50764, 286, 478, 665, 13, 400, 286, 669, 2919, 281, 5081, 365, 291, 466, 2699, 76, 49691, 433, 13, 51064, 51064, 400, 286, 1223, 291, 600, 1096, 512, 6711, 31422, 1228, 2699, 76, 49691, 260, 337, 264, 700, 565, 13, 51314, 51314, 407, 286, 478, 2919, 281, 1568, 466, 428, 1752, 365, 300, 13, 51414, 51414, 865, 11, 286, 3031, 309, 13, 4546, 286, 3031, 309, 11, 286, 390, 411, 11, 51564, 51564, 286, 478, 516, 281, 853, 309, 484, 13, 286, 478, 516, 281, 853, 309, 484, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.33800291636633495, "compression_ratio": 1.7356828193832599, "no_caption_prob": 0.04578511416912079}, {"id": 8, "seek": 0, "start": 24.0, "end": 26.0, "text": " I'm going to try it out. I'm going to try it out.", "tokens": [50364, 2425, 11, 508, 2032, 268, 13, 50464, 50464, 2425, 11, 28160, 13, 50564, 50564, 1012, 366, 291, 884, 965, 30, 50664, 50664, 286, 478, 884, 1238, 731, 13, 1012, 366, 291, 30, 50764, 50764, 286, 478, 665, 13, 400, 286, 669, 2919, 281, 5081, 365, 291, 466, 2699, 76, 49691, 433, 13, 51064, 51064, 400, 286, 1223, 291, 600, 1096, 512, 6711, 31422, 1228, 2699, 76, 49691, 260, 337, 264, 700, 565, 13, 51314, 51314, 407, 286, 478, 2919, 281, 1568, 466, 428, 1752, 365, 300, 13, 51414, 51414, 865, 11, 286, 3031, 309, 13, 4546, 286, 3031, 309, 11, 286, 390, 411, 11, 51564, 51564, 286, 478, 516, 281, 853, 309, 484, 13, 286, 478, 516, 281, 853, 309, 484, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.33800291636633495, "compression_ratio": 1.7356828193832599, "no_caption_prob": 0.04578511416912079}, {"id": 9, "seek": 2600, "start": 26.0, "end": 34.0, "text": " I'm excited to hear about your experience with that. Yeah, I tried it. Before I tried it, I ran a Twitter poll asking people,", "tokens": [50364, 286, 478, 2919, 281, 1568, 466, 428, 1752, 365, 300, 13, 865, 11, 286, 3031, 309, 13, 4546, 286, 3031, 309, 11, 286, 5872, 257, 5794, 6418, 3365, 561, 11, 50764, 50764, 1144, 291, 519, 286, 486, 362, 1019, 420, 360, 291, 519, 286, 486, 362, 257, 688, 295, 1822, 30, 51014, 51014, 400, 286, 390, 733, 295, 6100, 300, 787, 1451, 561, 484, 295, 3552, 20345, 300, 286, 486, 362, 1822, 13, 51414, 51414, 407, 881, 561, 576, 519, 286, 390, 516, 281, 362, 1019, 13, 51564, 51564, 400, 286, 733, 295, 2198, 264, 6182, 13, 407, 286, 478, 1238, 286, 390, 1238, 6100, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.10976753234863282, "compression_ratio": 1.7835497835497836, "no_caption_prob": 0.0004577268846333027}, {"id": 10, "seek": 2600, "start": 34.0, "end": 39.0, "text": " Do you think I will have fun or do you think I will have a lot of pain?", "tokens": [50364, 286, 478, 2919, 281, 1568, 466, 428, 1752, 365, 300, 13, 865, 11, 286, 3031, 309, 13, 4546, 286, 3031, 309, 11, 286, 5872, 257, 5794, 6418, 3365, 561, 11, 50764, 50764, 1144, 291, 519, 286, 486, 362, 1019, 420, 360, 291, 519, 286, 486, 362, 257, 688, 295, 1822, 30, 51014, 51014, 400, 286, 390, 733, 295, 6100, 300, 787, 1451, 561, 484, 295, 3552, 20345, 300, 286, 486, 362, 1822, 13, 51414, 51414, 407, 881, 561, 576, 519, 286, 390, 516, 281, 362, 1019, 13, 51564, 51564, 400, 286, 733, 295, 2198, 264, 6182, 13, 407, 286, 478, 1238, 286, 390, 1238, 6100, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.10976753234863282, "compression_ratio": 1.7835497835497836, "no_caption_prob": 0.0004577268846333027}, {"id": 11, "seek": 2600, "start": 39.0, "end": 47.0, "text": " And I was kind of surprised that only four people out of 25 replied that I will have pain.", "tokens": [50364, 286, 478, 2919, 281, 1568, 466, 428, 1752, 365, 300, 13, 865, 11, 286, 3031, 309, 13, 4546, 286, 3031, 309, 11, 286, 5872, 257, 5794, 6418, 3365, 561, 11, 50764, 50764, 1144, 291, 519, 286, 486, 362, 1019, 420, 360, 291, 519, 286, 486, 362, 257, 688, 295, 1822, 30, 51014, 51014, 400, 286, 390, 733, 295, 6100, 300, 787, 1451, 561, 484, 295, 3552, 20345, 300, 286, 486, 362, 1822, 13, 51414, 51414, 407, 881, 561, 576, 519, 286, 390, 516, 281, 362, 1019, 13, 51564, 51564, 400, 286, 733, 295, 2198, 264, 6182, 13, 407, 286, 478, 1238, 286, 390, 1238, 6100, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.10976753234863282, "compression_ratio": 1.7835497835497836, "no_caption_prob": 0.0004577268846333027}, {"id": 12, "seek": 2600, "start": 47.0, "end": 50.0, "text": " So most people would think I was going to have fun.", "tokens": [50364, 286, 478, 2919, 281, 1568, 466, 428, 1752, 365, 300, 13, 865, 11, 286, 3031, 309, 13, 4546, 286, 3031, 309, 11, 286, 5872, 257, 5794, 6418, 3365, 561, 11, 50764, 50764, 1144, 291, 519, 286, 486, 362, 1019, 420, 360, 291, 519, 286, 486, 362, 257, 688, 295, 1822, 30, 51014, 51014, 400, 286, 390, 733, 295, 6100, 300, 787, 1451, 561, 484, 295, 3552, 20345, 300, 286, 486, 362, 1822, 13, 51414, 51414, 407, 881, 561, 576, 519, 286, 390, 516, 281, 362, 1019, 13, 51564, 51564, 400, 286, 733, 295, 2198, 264, 6182, 13, 407, 286, 478, 1238, 286, 390, 1238, 6100, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.10976753234863282, "compression_ratio": 1.7835497835497836, "no_caption_prob": 0.0004577268846333027}, {"id": 13, "seek": 2600, "start": 50.0, "end": 55.0, "text": " And I kind of heard the opposite. So I'm pretty I was pretty surprised.", "tokens": [50364, 286, 478, 2919, 281, 1568, 466, 428, 1752, 365, 300, 13, 865, 11, 286, 3031, 309, 13, 4546, 286, 3031, 309, 11, 286, 5872, 257, 5794, 6418, 3365, 561, 11, 50764, 50764, 1144, 291, 519, 286, 486, 362, 1019, 420, 360, 291, 519, 286, 486, 362, 257, 688, 295, 1822, 30, 51014, 51014, 400, 286, 390, 733, 295, 6100, 300, 787, 1451, 561, 484, 295, 3552, 20345, 300, 286, 486, 362, 1822, 13, 51414, 51414, 407, 881, 561, 576, 519, 286, 390, 516, 281, 362, 1019, 13, 51564, 51564, 400, 286, 733, 295, 2198, 264, 6182, 13, 407, 286, 478, 1238, 286, 390, 1238, 6100, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.10976753234863282, "compression_ratio": 1.7835497835497836, "no_caption_prob": 0.0004577268846333027}, {"id": 14, "seek": 5500, "start": 55.0, "end": 62.0, "text": " I found it to be quite easy. But then you get into pitfalls and then it's hard to figure things out.", "tokens": [50364, 286, 1352, 309, 281, 312, 1596, 1858, 13, 583, 550, 291, 483, 666, 10147, 18542, 293, 550, 309, 311, 1152, 281, 2573, 721, 484, 13, 50714, 50714, 865, 11, 286, 2041, 456, 311, 264, 1168, 295, 577, 1152, 307, 3579, 257, 21156, 260, 294, 2699, 76, 5347, 281, 884, 661, 721, 294, 2699, 76, 30, 51164, 51164, 400, 550, 456, 311, 264, 1168, 295, 577, 1152, 307, 3579, 257, 21156, 260, 294, 2699, 76, 5347, 281, 3579, 257, 21156, 260, 294, 1071, 2856, 30, 51464, 51464, 286, 576, 584, 337, 264, 18481, 11, 2699, 76, 1669, 309, 534, 1481, 281, 2464, 21156, 433, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.0514185870135272, "compression_ratio": 1.9468599033816425, "no_caption_prob": 0.0002735875023063272}, {"id": 15, "seek": 5500, "start": 62.0, "end": 71.0, "text": " Yeah, I guess there's the question of how hard is writing a parser in Elm compared to doing other things in Elm?", "tokens": [50364, 286, 1352, 309, 281, 312, 1596, 1858, 13, 583, 550, 291, 483, 666, 10147, 18542, 293, 550, 309, 311, 1152, 281, 2573, 721, 484, 13, 50714, 50714, 865, 11, 286, 2041, 456, 311, 264, 1168, 295, 577, 1152, 307, 3579, 257, 21156, 260, 294, 2699, 76, 5347, 281, 884, 661, 721, 294, 2699, 76, 30, 51164, 51164, 400, 550, 456, 311, 264, 1168, 295, 577, 1152, 307, 3579, 257, 21156, 260, 294, 2699, 76, 5347, 281, 3579, 257, 21156, 260, 294, 1071, 2856, 30, 51464, 51464, 286, 576, 584, 337, 264, 18481, 11, 2699, 76, 1669, 309, 534, 1481, 281, 2464, 21156, 433, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.0514185870135272, "compression_ratio": 1.9468599033816425, "no_caption_prob": 0.0002735875023063272}, {"id": 16, "seek": 5500, "start": 71.0, "end": 77.0, "text": " And then there's the question of how hard is writing a parser in Elm compared to writing a parser in another language?", "tokens": [50364, 286, 1352, 309, 281, 312, 1596, 1858, 13, 583, 550, 291, 483, 666, 10147, 18542, 293, 550, 309, 311, 1152, 281, 2573, 721, 484, 13, 50714, 50714, 865, 11, 286, 2041, 456, 311, 264, 1168, 295, 577, 1152, 307, 3579, 257, 21156, 260, 294, 2699, 76, 5347, 281, 884, 661, 721, 294, 2699, 76, 30, 51164, 51164, 400, 550, 456, 311, 264, 1168, 295, 577, 1152, 307, 3579, 257, 21156, 260, 294, 2699, 76, 5347, 281, 3579, 257, 21156, 260, 294, 1071, 2856, 30, 51464, 51464, 286, 576, 584, 337, 264, 18481, 11, 2699, 76, 1669, 309, 534, 1481, 281, 2464, 21156, 433, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.0514185870135272, "compression_ratio": 1.9468599033816425, "no_caption_prob": 0.0002735875023063272}, {"id": 17, "seek": 5500, "start": 77.0, "end": 83.0, "text": " I would say for the latter, Elm makes it really nice to write parsers.", "tokens": [50364, 286, 1352, 309, 281, 312, 1596, 1858, 13, 583, 550, 291, 483, 666, 10147, 18542, 293, 550, 309, 311, 1152, 281, 2573, 721, 484, 13, 50714, 50714, 865, 11, 286, 2041, 456, 311, 264, 1168, 295, 577, 1152, 307, 3579, 257, 21156, 260, 294, 2699, 76, 5347, 281, 884, 661, 721, 294, 2699, 76, 30, 51164, 51164, 400, 550, 456, 311, 264, 1168, 295, 577, 1152, 307, 3579, 257, 21156, 260, 294, 2699, 76, 5347, 281, 3579, 257, 21156, 260, 294, 1071, 2856, 30, 51464, 51464, 286, 576, 584, 337, 264, 18481, 11, 2699, 76, 1669, 309, 534, 1481, 281, 2464, 21156, 433, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.0514185870135272, "compression_ratio": 1.9468599033816425, "no_caption_prob": 0.0002735875023063272}, {"id": 18, "seek": 8300, "start": 83.0, "end": 87.0, "text": " For the question of how hard is writing a parser in Elm compared to doing other things?", "tokens": [50364, 1171, 264, 1168, 295, 577, 1152, 307, 3579, 257, 21156, 260, 294, 2699, 76, 5347, 281, 884, 661, 721, 30, 50564, 50564, 286, 914, 11, 286, 600, 658, 452, 747, 13, 708, 390, 428, 5883, 1752, 365, 300, 30, 3027, 309, 1238, 21769, 30, 50864, 50864, 2589, 291, 1190, 666, 257, 688, 295, 721, 300, 645, 13181, 293, 8830, 30, 51064, 51064, 1042, 11, 286, 994, 380, 483, 886, 1400, 13, 286, 445, 1936, 3031, 281, 360, 364, 2699, 76, 3089, 21156, 260, 570, 300, 311, 689, 452, 8847, 4544, 13, 51514, 51514, 1449, 337, 1019, 13, 286, 500, 380, 528, 281, 7406, 2699, 76, 28431, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.07932326170775267, "compression_ratio": 1.569811320754717, "no_caption_prob": 0.00013549048162531108}, {"id": 19, "seek": 8300, "start": 87.0, "end": 93.0, "text": " I mean, I've got my take. What was your initial experience with that? Was it pretty intuitive?", "tokens": [50364, 1171, 264, 1168, 295, 577, 1152, 307, 3579, 257, 21156, 260, 294, 2699, 76, 5347, 281, 884, 661, 721, 30, 50564, 50564, 286, 914, 11, 286, 600, 658, 452, 747, 13, 708, 390, 428, 5883, 1752, 365, 300, 30, 3027, 309, 1238, 21769, 30, 50864, 50864, 2589, 291, 1190, 666, 257, 688, 295, 721, 300, 645, 13181, 293, 8830, 30, 51064, 51064, 1042, 11, 286, 994, 380, 483, 886, 1400, 13, 286, 445, 1936, 3031, 281, 360, 364, 2699, 76, 3089, 21156, 260, 570, 300, 311, 689, 452, 8847, 4544, 13, 51514, 51514, 1449, 337, 1019, 13, 286, 500, 380, 528, 281, 7406, 2699, 76, 28431, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.07932326170775267, "compression_ratio": 1.569811320754717, "no_caption_prob": 0.00013549048162531108}, {"id": 20, "seek": 8300, "start": 93.0, "end": 97.0, "text": " Did you run into a lot of things that were confusing and surprising?", "tokens": [50364, 1171, 264, 1168, 295, 577, 1152, 307, 3579, 257, 21156, 260, 294, 2699, 76, 5347, 281, 884, 661, 721, 30, 50564, 50564, 286, 914, 11, 286, 600, 658, 452, 747, 13, 708, 390, 428, 5883, 1752, 365, 300, 30, 3027, 309, 1238, 21769, 30, 50864, 50864, 2589, 291, 1190, 666, 257, 688, 295, 721, 300, 645, 13181, 293, 8830, 30, 51064, 51064, 1042, 11, 286, 994, 380, 483, 886, 1400, 13, 286, 445, 1936, 3031, 281, 360, 364, 2699, 76, 3089, 21156, 260, 570, 300, 311, 689, 452, 8847, 4544, 13, 51514, 51514, 1449, 337, 1019, 13, 286, 500, 380, 528, 281, 7406, 2699, 76, 28431, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.07932326170775267, "compression_ratio": 1.569811320754717, "no_caption_prob": 0.00013549048162531108}, {"id": 21, "seek": 8300, "start": 97.0, "end": 106.0, "text": " Well, I didn't get too far. I just basically tried to do an Elm code parser because that's where my interests lie.", "tokens": [50364, 1171, 264, 1168, 295, 577, 1152, 307, 3579, 257, 21156, 260, 294, 2699, 76, 5347, 281, 884, 661, 721, 30, 50564, 50564, 286, 914, 11, 286, 600, 658, 452, 747, 13, 708, 390, 428, 5883, 1752, 365, 300, 30, 3027, 309, 1238, 21769, 30, 50864, 50864, 2589, 291, 1190, 666, 257, 688, 295, 721, 300, 645, 13181, 293, 8830, 30, 51064, 51064, 1042, 11, 286, 994, 380, 483, 886, 1400, 13, 286, 445, 1936, 3031, 281, 360, 364, 2699, 76, 3089, 21156, 260, 570, 300, 311, 689, 452, 8847, 4544, 13, 51514, 51514, 1449, 337, 1019, 13, 286, 500, 380, 528, 281, 7406, 2699, 76, 28431, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.07932326170775267, "compression_ratio": 1.569811320754717, "no_caption_prob": 0.00013549048162531108}, {"id": 22, "seek": 8300, "start": 106.0, "end": 112.0, "text": " Just for fun. I don't want to replace Elm syntax.", "tokens": [50364, 1171, 264, 1168, 295, 577, 1152, 307, 3579, 257, 21156, 260, 294, 2699, 76, 5347, 281, 884, 661, 721, 30, 50564, 50564, 286, 914, 11, 286, 600, 658, 452, 747, 13, 708, 390, 428, 5883, 1752, 365, 300, 30, 3027, 309, 1238, 21769, 30, 50864, 50864, 2589, 291, 1190, 666, 257, 688, 295, 721, 300, 645, 13181, 293, 8830, 30, 51064, 51064, 1042, 11, 286, 994, 380, 483, 886, 1400, 13, 286, 445, 1936, 3031, 281, 360, 364, 2699, 76, 3089, 21156, 260, 570, 300, 311, 689, 452, 8847, 4544, 13, 51514, 51514, 1449, 337, 1019, 13, 286, 500, 380, 528, 281, 7406, 2699, 76, 28431, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.07932326170775267, "compression_ratio": 1.569811320754717, "no_caption_prob": 0.00013549048162531108}, {"id": 23, "seek": 11200, "start": 112.0, "end": 122.0, "text": " Right. But you depend heavily on an Elm parser project for Elm review, which you've spent a lot of time with the result of a parser.", "tokens": [50364, 1779, 13, 583, 291, 5672, 10950, 322, 364, 2699, 76, 21156, 260, 1716, 337, 2699, 76, 3131, 11, 597, 291, 600, 4418, 257, 688, 295, 565, 365, 264, 1874, 295, 257, 21156, 260, 13, 50864, 50864, 865, 13, 400, 291, 600, 1194, 257, 688, 466, 264, 28431, 4230, 300, 300, 2709, 291, 13, 51064, 51064, 400, 586, 291, 434, 1237, 412, 264, 661, 1252, 295, 577, 291, 45674, 264, 8936, 4009, 3089, 281, 1322, 493, 300, 1412, 3877, 13, 51364, 51364, 865, 11, 286, 4114, 257, 31958, 646, 562, 286, 390, 257, 3107, 13, 407, 286, 360, 362, 512, 1752, 365, 21156, 278, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.08390831064294886, "compression_ratio": 1.6274509803921569, "no_caption_prob": 0.0001022917713271454}, {"id": 24, "seek": 11200, "start": 122.0, "end": 126.0, "text": " Yeah. And you've thought a lot about the syntax tree that that gives you.", "tokens": [50364, 1779, 13, 583, 291, 5672, 10950, 322, 364, 2699, 76, 21156, 260, 1716, 337, 2699, 76, 3131, 11, 597, 291, 600, 4418, 257, 688, 295, 565, 365, 264, 1874, 295, 257, 21156, 260, 13, 50864, 50864, 865, 13, 400, 291, 600, 1194, 257, 688, 466, 264, 28431, 4230, 300, 300, 2709, 291, 13, 51064, 51064, 400, 586, 291, 434, 1237, 412, 264, 661, 1252, 295, 577, 291, 45674, 264, 8936, 4009, 3089, 281, 1322, 493, 300, 1412, 3877, 13, 51364, 51364, 865, 11, 286, 4114, 257, 31958, 646, 562, 286, 390, 257, 3107, 13, 407, 286, 360, 362, 512, 1752, 365, 21156, 278, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.08390831064294886, "compression_ratio": 1.6274509803921569, "no_caption_prob": 0.0001022917713271454}, {"id": 25, "seek": 11200, "start": 126.0, "end": 132.0, "text": " And now you're looking at the other side of how you traverse the raw source code to build up that data structure.", "tokens": [50364, 1779, 13, 583, 291, 5672, 10950, 322, 364, 2699, 76, 21156, 260, 1716, 337, 2699, 76, 3131, 11, 597, 291, 600, 4418, 257, 688, 295, 565, 365, 264, 1874, 295, 257, 21156, 260, 13, 50864, 50864, 865, 13, 400, 291, 600, 1194, 257, 688, 466, 264, 28431, 4230, 300, 300, 2709, 291, 13, 51064, 51064, 400, 586, 291, 434, 1237, 412, 264, 661, 1252, 295, 577, 291, 45674, 264, 8936, 4009, 3089, 281, 1322, 493, 300, 1412, 3877, 13, 51364, 51364, 865, 11, 286, 4114, 257, 31958, 646, 562, 286, 390, 257, 3107, 13, 407, 286, 360, 362, 512, 1752, 365, 21156, 278, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.08390831064294886, "compression_ratio": 1.6274509803921569, "no_caption_prob": 0.0001022917713271454}, {"id": 26, "seek": 11200, "start": 132.0, "end": 139.0, "text": " Yeah, I wrote a compiler back when I was a student. So I do have some experience with parsing.", "tokens": [50364, 1779, 13, 583, 291, 5672, 10950, 322, 364, 2699, 76, 21156, 260, 1716, 337, 2699, 76, 3131, 11, 597, 291, 600, 4418, 257, 688, 295, 565, 365, 264, 1874, 295, 257, 21156, 260, 13, 50864, 50864, 865, 13, 400, 291, 600, 1194, 257, 688, 466, 264, 28431, 4230, 300, 300, 2709, 291, 13, 51064, 51064, 400, 586, 291, 434, 1237, 412, 264, 661, 1252, 295, 577, 291, 45674, 264, 8936, 4009, 3089, 281, 1322, 493, 300, 1412, 3877, 13, 51364, 51364, 865, 11, 286, 4114, 257, 31958, 646, 562, 286, 390, 257, 3107, 13, 407, 286, 360, 362, 512, 1752, 365, 21156, 278, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.08390831064294886, "compression_ratio": 1.6274509803921569, "no_caption_prob": 0.0001022917713271454}, {"id": 27, "seek": 13900, "start": 139.0, "end": 144.0, "text": " I think I used YACC or LEXT. I don't know. All the things.", "tokens": [50364, 286, 519, 286, 1143, 398, 4378, 34, 420, 11378, 20542, 13, 286, 500, 380, 458, 13, 1057, 264, 721, 13, 50614, 50614, 286, 519, 291, 764, 1293, 13, 286, 519, 300, 411, 11378, 20542, 307, 257, 476, 87, 260, 293, 398, 4378, 34, 307, 257, 21156, 260, 293, 291, 362, 281, 411, 11, 1338, 11, 915, 264, 22667, 13, 51064, 51064, 865, 11, 2293, 13, 400, 286, 630, 264, 1900, 912, 551, 294, 3859, 13, 51214, 51214, 400, 286, 632, 257, 688, 295, 1019, 884, 300, 13, 51364, 51364, 1923, 886, 13, 400, 300, 390, 411, 1228, 383, 420, 383, 25472, 293, 309, 390, 920, 1019, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.169398849074905, "compression_ratio": 1.671641791044776, "no_caption_prob": 8.613734826212749e-05}, {"id": 28, "seek": 13900, "start": 144.0, "end": 153.0, "text": " I think you use both. I think that like LEXT is a lexer and YACC is a parser and you have to like, yeah, find the tokens.", "tokens": [50364, 286, 519, 286, 1143, 398, 4378, 34, 420, 11378, 20542, 13, 286, 500, 380, 458, 13, 1057, 264, 721, 13, 50614, 50614, 286, 519, 291, 764, 1293, 13, 286, 519, 300, 411, 11378, 20542, 307, 257, 476, 87, 260, 293, 398, 4378, 34, 307, 257, 21156, 260, 293, 291, 362, 281, 411, 11, 1338, 11, 915, 264, 22667, 13, 51064, 51064, 865, 11, 2293, 13, 400, 286, 630, 264, 1900, 912, 551, 294, 3859, 13, 51214, 51214, 400, 286, 632, 257, 688, 295, 1019, 884, 300, 13, 51364, 51364, 1923, 886, 13, 400, 300, 390, 411, 1228, 383, 420, 383, 25472, 293, 309, 390, 920, 1019, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.169398849074905, "compression_ratio": 1.671641791044776, "no_caption_prob": 8.613734826212749e-05}, {"id": 29, "seek": 13900, "start": 153.0, "end": 156.0, "text": " Yeah, exactly. And I did the exact same thing in college.", "tokens": [50364, 286, 519, 286, 1143, 398, 4378, 34, 420, 11378, 20542, 13, 286, 500, 380, 458, 13, 1057, 264, 721, 13, 50614, 50614, 286, 519, 291, 764, 1293, 13, 286, 519, 300, 411, 11378, 20542, 307, 257, 476, 87, 260, 293, 398, 4378, 34, 307, 257, 21156, 260, 293, 291, 362, 281, 411, 11, 1338, 11, 915, 264, 22667, 13, 51064, 51064, 865, 11, 2293, 13, 400, 286, 630, 264, 1900, 912, 551, 294, 3859, 13, 51214, 51214, 400, 286, 632, 257, 688, 295, 1019, 884, 300, 13, 51364, 51364, 1923, 886, 13, 400, 300, 390, 411, 1228, 383, 420, 383, 25472, 293, 309, 390, 920, 1019, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.169398849074905, "compression_ratio": 1.671641791044776, "no_caption_prob": 8.613734826212749e-05}, {"id": 30, "seek": 13900, "start": 156.0, "end": 159.0, "text": " And I had a lot of fun doing that.", "tokens": [50364, 286, 519, 286, 1143, 398, 4378, 34, 420, 11378, 20542, 13, 286, 500, 380, 458, 13, 1057, 264, 721, 13, 50614, 50614, 286, 519, 291, 764, 1293, 13, 286, 519, 300, 411, 11378, 20542, 307, 257, 476, 87, 260, 293, 398, 4378, 34, 307, 257, 21156, 260, 293, 291, 362, 281, 411, 11, 1338, 11, 915, 264, 22667, 13, 51064, 51064, 865, 11, 2293, 13, 400, 286, 630, 264, 1900, 912, 551, 294, 3859, 13, 51214, 51214, 400, 286, 632, 257, 688, 295, 1019, 884, 300, 13, 51364, 51364, 1923, 886, 13, 400, 300, 390, 411, 1228, 383, 420, 383, 25472, 293, 309, 390, 920, 1019, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.169398849074905, "compression_ratio": 1.671641791044776, "no_caption_prob": 8.613734826212749e-05}, {"id": 31, "seek": 13900, "start": 159.0, "end": 164.0, "text": " Me too. And that was like using C or C++ and it was still fun.", "tokens": [50364, 286, 519, 286, 1143, 398, 4378, 34, 420, 11378, 20542, 13, 286, 500, 380, 458, 13, 1057, 264, 721, 13, 50614, 50614, 286, 519, 291, 764, 1293, 13, 286, 519, 300, 411, 11378, 20542, 307, 257, 476, 87, 260, 293, 398, 4378, 34, 307, 257, 21156, 260, 293, 291, 362, 281, 411, 11, 1338, 11, 915, 264, 22667, 13, 51064, 51064, 865, 11, 2293, 13, 400, 286, 630, 264, 1900, 912, 551, 294, 3859, 13, 51214, 51214, 400, 286, 632, 257, 688, 295, 1019, 884, 300, 13, 51364, 51364, 1923, 886, 13, 400, 300, 390, 411, 1228, 383, 420, 383, 25472, 293, 309, 390, 920, 1019, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.169398849074905, "compression_ratio": 1.671641791044776, "no_caption_prob": 8.613734826212749e-05}, {"id": 32, "seek": 16400, "start": 164.0, "end": 174.0, "text": " Yeah. Yeah, I had a lot of fun doing that project too. Writing parsers and writing languages were always something that I quite liked.", "tokens": [50364, 865, 13, 865, 11, 286, 632, 257, 688, 295, 1019, 884, 300, 1716, 886, 13, 32774, 21156, 433, 293, 3579, 8650, 645, 1009, 746, 300, 286, 1596, 4501, 13, 50864, 50864, 286, 920, 519, 286, 486, 2464, 257, 2856, 21156, 260, 412, 512, 935, 445, 337, 1019, 11, 445, 337, 21293, 13, 51264, 51264, 467, 307, 18348, 13, 51314, 51314, 467, 307, 588, 18348, 11, 286, 519, 13, 51414, 51414], "temperature": 0.0, "avg_logprob": -0.13583030965593126, "compression_ratio": 1.6058823529411765, "no_caption_prob": 0.00014879780064802617}, {"id": 33, "seek": 16400, "start": 174.0, "end": 182.0, "text": " I still think I will write a language parser at some point just for fun, just for kicks.", "tokens": [50364, 865, 13, 865, 11, 286, 632, 257, 688, 295, 1019, 884, 300, 1716, 886, 13, 32774, 21156, 433, 293, 3579, 8650, 645, 1009, 746, 300, 286, 1596, 4501, 13, 50864, 50864, 286, 920, 519, 286, 486, 2464, 257, 2856, 21156, 260, 412, 512, 935, 445, 337, 1019, 11, 445, 337, 21293, 13, 51264, 51264, 467, 307, 18348, 13, 51314, 51314, 467, 307, 588, 18348, 11, 286, 519, 13, 51414, 51414], "temperature": 0.0, "avg_logprob": -0.13583030965593126, "compression_ratio": 1.6058823529411765, "no_caption_prob": 0.00014879780064802617}, {"id": 34, "seek": 16400, "start": 182.0, "end": 183.0, "text": " It is satisfying.", "tokens": [50364, 865, 13, 865, 11, 286, 632, 257, 688, 295, 1019, 884, 300, 1716, 886, 13, 32774, 21156, 433, 293, 3579, 8650, 645, 1009, 746, 300, 286, 1596, 4501, 13, 50864, 50864, 286, 920, 519, 286, 486, 2464, 257, 2856, 21156, 260, 412, 512, 935, 445, 337, 1019, 11, 445, 337, 21293, 13, 51264, 51264, 467, 307, 18348, 13, 51314, 51314, 467, 307, 588, 18348, 11, 286, 519, 13, 51414, 51414], "temperature": 0.0, "avg_logprob": -0.13583030965593126, "compression_ratio": 1.6058823529411765, "no_caption_prob": 0.00014879780064802617}, {"id": 35, "seek": 16400, "start": 183.0, "end": 185.0, "text": " It is very satisfying, I think.", "tokens": [50364, 865, 13, 865, 11, 286, 632, 257, 688, 295, 1019, 884, 300, 1716, 886, 13, 32774, 21156, 433, 293, 3579, 8650, 645, 1009, 746, 300, 286, 1596, 4501, 13, 50864, 50864, 286, 920, 519, 286, 486, 2464, 257, 2856, 21156, 260, 412, 512, 935, 445, 337, 1019, 11, 445, 337, 21293, 13, 51264, 51264, 467, 307, 18348, 13, 51314, 51314, 467, 307, 588, 18348, 11, 286, 519, 13, 51414, 51414], "temperature": 0.0, "avg_logprob": -0.13583030965593126, "compression_ratio": 1.6058823529411765, "no_caption_prob": 0.00014879780064802617}, {"id": 36, "seek": 18500, "start": 185.0, "end": 200.0, "text": " I mean, when you're working with Elm and you can parse things and then having parsed into a nice data structure, you can then use that data structure in Elm and do case statements on this well defined data type.", "tokens": [50364, 286, 914, 11, 562, 291, 434, 1364, 365, 2699, 76, 293, 291, 393, 48377, 721, 293, 550, 1419, 21156, 292, 666, 257, 1481, 1412, 3877, 11, 291, 393, 550, 764, 300, 1412, 3877, 294, 2699, 76, 293, 360, 1389, 12363, 322, 341, 731, 7642, 1412, 2010, 13, 51114, 51114, 663, 311, 534, 18348, 13, 407, 11, 2264, 11, 949, 321, 483, 886, 1400, 666, 341, 11, 1417, 466, 527, 5235, 365, 21156, 433, 293, 439, 295, 300, 11, 718, 311, 483, 257, 7123, 13, 51564, 51564, 708, 307, 257, 21156, 260, 293, 437, 307, 2699, 76, 21156, 260, 11, 597, 321, 434, 1417, 466, 965, 30, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.0760479753667658, "compression_ratio": 1.751004016064257, "no_caption_prob": 0.00010229017061647028}, {"id": 37, "seek": 18500, "start": 200.0, "end": 209.0, "text": " That's really satisfying. So, OK, before we get too far into this, talking about our experiences with parsers and all of that, let's get a definition.", "tokens": [50364, 286, 914, 11, 562, 291, 434, 1364, 365, 2699, 76, 293, 291, 393, 48377, 721, 293, 550, 1419, 21156, 292, 666, 257, 1481, 1412, 3877, 11, 291, 393, 550, 764, 300, 1412, 3877, 294, 2699, 76, 293, 360, 1389, 12363, 322, 341, 731, 7642, 1412, 2010, 13, 51114, 51114, 663, 311, 534, 18348, 13, 407, 11, 2264, 11, 949, 321, 483, 886, 1400, 666, 341, 11, 1417, 466, 527, 5235, 365, 21156, 433, 293, 439, 295, 300, 11, 718, 311, 483, 257, 7123, 13, 51564, 51564, 708, 307, 257, 21156, 260, 293, 437, 307, 2699, 76, 21156, 260, 11, 597, 321, 434, 1417, 466, 965, 30, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.0760479753667658, "compression_ratio": 1.751004016064257, "no_caption_prob": 0.00010229017061647028}, {"id": 38, "seek": 18500, "start": 209.0, "end": 214.0, "text": " What is a parser and what is Elm parser, which we're talking about today?", "tokens": [50364, 286, 914, 11, 562, 291, 434, 1364, 365, 2699, 76, 293, 291, 393, 48377, 721, 293, 550, 1419, 21156, 292, 666, 257, 1481, 1412, 3877, 11, 291, 393, 550, 764, 300, 1412, 3877, 294, 2699, 76, 293, 360, 1389, 12363, 322, 341, 731, 7642, 1412, 2010, 13, 51114, 51114, 663, 311, 534, 18348, 13, 407, 11, 2264, 11, 949, 321, 483, 886, 1400, 666, 341, 11, 1417, 466, 527, 5235, 365, 21156, 433, 293, 439, 295, 300, 11, 718, 311, 483, 257, 7123, 13, 51564, 51564, 708, 307, 257, 21156, 260, 293, 437, 307, 2699, 76, 21156, 260, 11, 597, 321, 434, 1417, 466, 965, 30, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.0760479753667658, "compression_ratio": 1.751004016064257, "no_caption_prob": 0.00010229017061647028}, {"id": 39, "seek": 21400, "start": 214.0, "end": 226.0, "text": " Yeah. So the way I understand it is a parser is something that takes a raw string and then decodes it into something else.", "tokens": [50364, 865, 13, 407, 264, 636, 286, 1223, 309, 307, 257, 21156, 260, 307, 746, 300, 2516, 257, 8936, 6798, 293, 550, 979, 4789, 309, 666, 746, 1646, 13, 50964, 50964, 316, 1412, 3877, 11, 364, 12649, 28431, 4230, 11, 9859, 28431, 4230, 13, 51214, 51214, 865, 13, 400, 550, 291, 360, 2035, 291, 528, 365, 309, 13, 51314, 51314], "temperature": 0.0, "avg_logprob": -0.10863075881707863, "compression_ratio": 1.5225806451612902, "no_caption_prob": 0.00013339149882085621}, {"id": 40, "seek": 21400, "start": 226.0, "end": 231.0, "text": " A data structure, an abstract syntax tree, concrete syntax tree.", "tokens": [50364, 865, 13, 407, 264, 636, 286, 1223, 309, 307, 257, 21156, 260, 307, 746, 300, 2516, 257, 8936, 6798, 293, 550, 979, 4789, 309, 666, 746, 1646, 13, 50964, 50964, 316, 1412, 3877, 11, 364, 12649, 28431, 4230, 11, 9859, 28431, 4230, 13, 51214, 51214, 865, 13, 400, 550, 291, 360, 2035, 291, 528, 365, 309, 13, 51314, 51314], "temperature": 0.0, "avg_logprob": -0.10863075881707863, "compression_ratio": 1.5225806451612902, "no_caption_prob": 0.00013339149882085621}, {"id": 41, "seek": 21400, "start": 231.0, "end": 233.0, "text": " Yeah. And then you do whatever you want with it.", "tokens": [50364, 865, 13, 407, 264, 636, 286, 1223, 309, 307, 257, 21156, 260, 307, 746, 300, 2516, 257, 8936, 6798, 293, 550, 979, 4789, 309, 666, 746, 1646, 13, 50964, 50964, 316, 1412, 3877, 11, 364, 12649, 28431, 4230, 11, 9859, 28431, 4230, 13, 51214, 51214, 865, 13, 400, 550, 291, 360, 2035, 291, 528, 365, 309, 13, 51314, 51314], "temperature": 0.0, "avg_logprob": -0.10863075881707863, "compression_ratio": 1.5225806451612902, "no_caption_prob": 0.00013339149882085621}, {"id": 42, "seek": 23300, "start": 233.0, "end": 244.0, "text": " So you compile a language or you just extract some information like Richard Feldman's ISO 8601.", "tokens": [50364, 407, 291, 31413, 257, 2856, 420, 291, 445, 8947, 512, 1589, 411, 9809, 42677, 1601, 311, 25042, 1649, 4550, 16, 13, 50914, 50914, 1079, 11, 291, 658, 309, 13, 51114, 51114, 286, 8895, 370, 1152, 949, 341, 7367, 13, 51364, 51364], "temperature": 0.0, "avg_logprob": -0.22827033109443132, "compression_ratio": 1.188976377952756, "no_caption_prob": 7.140531670302153e-05}, {"id": 43, "seek": 23300, "start": 244.0, "end": 248.0, "text": " Yes, you got it.", "tokens": [50364, 407, 291, 31413, 257, 2856, 420, 291, 445, 8947, 512, 1589, 411, 9809, 42677, 1601, 311, 25042, 1649, 4550, 16, 13, 50914, 50914, 1079, 11, 291, 658, 309, 13, 51114, 51114, 286, 8895, 370, 1152, 949, 341, 7367, 13, 51364, 51364], "temperature": 0.0, "avg_logprob": -0.22827033109443132, "compression_ratio": 1.188976377952756, "no_caption_prob": 7.140531670302153e-05}, {"id": 44, "seek": 23300, "start": 248.0, "end": 253.0, "text": " I trained so hard before this podcast.", "tokens": [50364, 407, 291, 31413, 257, 2856, 420, 291, 445, 8947, 512, 1589, 411, 9809, 42677, 1601, 311, 25042, 1649, 4550, 16, 13, 50914, 50914, 1079, 11, 291, 658, 309, 13, 51114, 51114, 286, 8895, 370, 1152, 949, 341, 7367, 13, 51364, 51364], "temperature": 0.0, "avg_logprob": -0.22827033109443132, "compression_ratio": 1.188976377952756, "no_caption_prob": 7.140531670302153e-05}, {"id": 45, "seek": 25300, "start": 253.0, "end": 263.0, "text": " That package extracts data information from a string and Elm syntax extracts the abstract syntax tree of Elm code.", "tokens": [50364, 663, 7372, 8947, 82, 1412, 1589, 490, 257, 6798, 293, 2699, 76, 28431, 8947, 82, 264, 12649, 28431, 4230, 295, 2699, 76, 3089, 13, 50864, 50864, 1779, 13, 440, 4846, 307, 411, 257, 6798, 11, 411, 428, 2699, 76, 13, 51014, 51014], "temperature": 0.0, "avg_logprob": -0.09157345511696556, "compression_ratio": 1.3898305084745763, "no_caption_prob": 7.8431679867208e-05}, {"id": 46, "seek": 25300, "start": 263.0, "end": 266.0, "text": " Right. The input is like a string, like your Elm.", "tokens": [50364, 663, 7372, 8947, 82, 1412, 1589, 490, 257, 6798, 293, 2699, 76, 28431, 8947, 82, 264, 12649, 28431, 4230, 295, 2699, 76, 3089, 13, 50864, 50864, 1779, 13, 440, 4846, 307, 411, 257, 6798, 11, 411, 428, 2699, 76, 13, 51014, 51014], "temperature": 0.0, "avg_logprob": -0.09157345511696556, "compression_ratio": 1.3898305084745763, "no_caption_prob": 7.8431679867208e-05}, {"id": 47, "seek": 26600, "start": 266.0, "end": 289.0, "text": " If you have an Elm source file, an Elm module, and you feed it to Elm parser to steal 4M Elm syntax, this parser project, you give it a string and then it takes that string and it either fails to parse or it gives you nicely structured data, which represents the abstract syntax tree of Elm.", "tokens": [50364, 759, 291, 362, 364, 2699, 76, 4009, 3991, 11, 364, 2699, 76, 10088, 11, 293, 291, 3154, 309, 281, 2699, 76, 21156, 260, 281, 11009, 1017, 44, 2699, 76, 28431, 11, 341, 21156, 260, 1716, 11, 291, 976, 309, 257, 6798, 293, 550, 309, 2516, 300, 6798, 293, 309, 2139, 18199, 281, 48377, 420, 309, 2709, 291, 9594, 18519, 1412, 11, 597, 8855, 264, 12649, 28431, 4230, 295, 2699, 76, 13, 51514, 51514, 400, 2264, 11, 370, 321, 820, 1391, 6964, 364, 12649, 28431, 4230, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.08179830975002712, "compression_ratio": 1.6650943396226414, "no_caption_prob": 0.0003199464117642492}, {"id": 48, "seek": 26600, "start": 289.0, "end": 293.0, "text": " And OK, so we should probably define an abstract syntax tree.", "tokens": [50364, 759, 291, 362, 364, 2699, 76, 4009, 3991, 11, 364, 2699, 76, 10088, 11, 293, 291, 3154, 309, 281, 2699, 76, 21156, 260, 281, 11009, 1017, 44, 2699, 76, 28431, 11, 341, 21156, 260, 1716, 11, 291, 976, 309, 257, 6798, 293, 550, 309, 2516, 300, 6798, 293, 309, 2139, 18199, 281, 48377, 420, 309, 2709, 291, 9594, 18519, 1412, 11, 597, 8855, 264, 12649, 28431, 4230, 295, 2699, 76, 13, 51514, 51514, 400, 2264, 11, 370, 321, 820, 1391, 6964, 364, 12649, 28431, 4230, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.08179830975002712, "compression_ratio": 1.6650943396226414, "no_caption_prob": 0.0003199464117642492}, {"id": 49, "seek": 29300, "start": 293.0, "end": 298.0, "text": " Yeah. So an abstract syntax tree. I don't know what it is. I've never played with it.", "tokens": [50364, 865, 13, 407, 364, 12649, 28431, 4230, 13, 286, 500, 380, 458, 437, 309, 307, 13, 286, 600, 1128, 3737, 365, 309, 13, 50614, 50614, 467, 311, 257, 707, 12649, 13, 865, 13, 509, 2378, 380, 4418, 604, 565, 365, 12649, 28431, 5852, 11, 362, 291, 30, 50864, 50864, 865, 13, 407, 707, 13, 5686, 1732, 924, 295, 452, 993, 11, 746, 411, 300, 13, 51164, 51164, 1133, 291, 600, 658, 428, 3089, 11, 428, 2699, 76, 3089, 11, 337, 5197, 11, 309, 307, 472, 7410, 6798, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.13733711449996286, "compression_ratio": 1.5748792270531402, "no_caption_prob": 0.0001419814652763307}, {"id": 50, "seek": 29300, "start": 298.0, "end": 303.0, "text": " It's a little abstract. Yeah. You haven't spent any time with abstract syntax trees, have you?", "tokens": [50364, 865, 13, 407, 364, 12649, 28431, 4230, 13, 286, 500, 380, 458, 437, 309, 307, 13, 286, 600, 1128, 3737, 365, 309, 13, 50614, 50614, 467, 311, 257, 707, 12649, 13, 865, 13, 509, 2378, 380, 4418, 604, 565, 365, 12649, 28431, 5852, 11, 362, 291, 30, 50864, 50864, 865, 13, 407, 707, 13, 5686, 1732, 924, 295, 452, 993, 11, 746, 411, 300, 13, 51164, 51164, 1133, 291, 600, 658, 428, 3089, 11, 428, 2699, 76, 3089, 11, 337, 5197, 11, 309, 307, 472, 7410, 6798, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.13733711449996286, "compression_ratio": 1.5748792270531402, "no_caption_prob": 0.0001419814652763307}, {"id": 51, "seek": 29300, "start": 303.0, "end": 309.0, "text": " Yeah. So little. Only five years of my life, something like that.", "tokens": [50364, 865, 13, 407, 364, 12649, 28431, 4230, 13, 286, 500, 380, 458, 437, 309, 307, 13, 286, 600, 1128, 3737, 365, 309, 13, 50614, 50614, 467, 311, 257, 707, 12649, 13, 865, 13, 509, 2378, 380, 4418, 604, 565, 365, 12649, 28431, 5852, 11, 362, 291, 30, 50864, 50864, 865, 13, 407, 707, 13, 5686, 1732, 924, 295, 452, 993, 11, 746, 411, 300, 13, 51164, 51164, 1133, 291, 600, 658, 428, 3089, 11, 428, 2699, 76, 3089, 11, 337, 5197, 11, 309, 307, 472, 7410, 6798, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.13733711449996286, "compression_ratio": 1.5748792270531402, "no_caption_prob": 0.0001419814652763307}, {"id": 52, "seek": 29300, "start": 309.0, "end": 315.0, "text": " When you've got your code, your Elm code, for instance, it is one giant string.", "tokens": [50364, 865, 13, 407, 364, 12649, 28431, 4230, 13, 286, 500, 380, 458, 437, 309, 307, 13, 286, 600, 1128, 3737, 365, 309, 13, 50614, 50614, 467, 311, 257, 707, 12649, 13, 865, 13, 509, 2378, 380, 4418, 604, 565, 365, 12649, 28431, 5852, 11, 362, 291, 30, 50864, 50864, 865, 13, 407, 707, 13, 5686, 1732, 924, 295, 452, 993, 11, 746, 411, 300, 13, 51164, 51164, 1133, 291, 600, 658, 428, 3089, 11, 428, 2699, 76, 3089, 11, 337, 5197, 11, 309, 307, 472, 7410, 6798, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.13733711449996286, "compression_ratio": 1.5748792270531402, "no_caption_prob": 0.0001419814652763307}, {"id": 53, "seek": 31500, "start": 315.0, "end": 338.0, "text": " But you have keywords and expressions, A plus B, and they all mean something. And the meaning is represented often as an AST, an abstract syntax tree, where we have removed all the unnecessary information like spacing or the limitation of elements where that doesn't matter.", "tokens": [50364, 583, 291, 362, 21009, 293, 15277, 11, 316, 1804, 363, 11, 293, 436, 439, 914, 746, 13, 400, 264, 3620, 307, 10379, 2049, 382, 364, 316, 6840, 11, 364, 12649, 28431, 4230, 11, 689, 321, 362, 7261, 439, 264, 19350, 1589, 411, 27739, 420, 264, 27432, 295, 4959, 689, 300, 1177, 380, 1871, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.07986982115383806, "compression_ratio": 1.5054945054945055, "no_caption_prob": 5.306812090566382e-05}, {"id": 54, "seek": 33800, "start": 338.0, "end": 346.0, "text": " What you get is some kind of representation, often as a tree, that represents what the code means.", "tokens": [50364, 708, 291, 483, 307, 512, 733, 295, 10290, 11, 2049, 382, 257, 4230, 11, 300, 8855, 437, 264, 3089, 1355, 13, 50764, 50764, 400, 550, 291, 853, 281, 360, 2035, 291, 528, 365, 309, 13, 50914, 50914, 1779, 13, 407, 309, 311, 920, 291, 500, 380, 362, 721, 411, 577, 709, 2418, 1901, 746, 632, 11, 498, 746, 390, 322, 257, 777, 1622, 13, 51364, 51364], "temperature": 0.0, "avg_logprob": -0.10713373212253346, "compression_ratio": 1.5260115606936415, "no_caption_prob": 2.144315112673212e-05}, {"id": 55, "seek": 33800, "start": 346.0, "end": 349.0, "text": " And then you try to do whatever you want with it.", "tokens": [50364, 708, 291, 483, 307, 512, 733, 295, 10290, 11, 2049, 382, 257, 4230, 11, 300, 8855, 437, 264, 3089, 1355, 13, 50764, 50764, 400, 550, 291, 853, 281, 360, 2035, 291, 528, 365, 309, 13, 50914, 50914, 1779, 13, 407, 309, 311, 920, 291, 500, 380, 362, 721, 411, 577, 709, 2418, 1901, 746, 632, 11, 498, 746, 390, 322, 257, 777, 1622, 13, 51364, 51364], "temperature": 0.0, "avg_logprob": -0.10713373212253346, "compression_ratio": 1.5260115606936415, "no_caption_prob": 2.144315112673212e-05}, {"id": 56, "seek": 33800, "start": 349.0, "end": 358.0, "text": " Right. So it's still you don't have things like how much white space something had, if something was on a new line.", "tokens": [50364, 708, 291, 483, 307, 512, 733, 295, 10290, 11, 2049, 382, 257, 4230, 11, 300, 8855, 437, 264, 3089, 1355, 13, 50764, 50764, 400, 550, 291, 853, 281, 360, 2035, 291, 528, 365, 309, 13, 50914, 50914, 1779, 13, 407, 309, 311, 920, 291, 500, 380, 362, 721, 411, 577, 709, 2418, 1901, 746, 632, 11, 498, 746, 390, 322, 257, 777, 1622, 13, 51364, 51364], "temperature": 0.0, "avg_logprob": -0.10713373212253346, "compression_ratio": 1.5260115606936415, "no_caption_prob": 2.144315112673212e-05}, {"id": 57, "seek": 35800, "start": 358.0, "end": 372.0, "text": " But if something is defined in a let or as a top level value, that's part of the syntax tree that here's a let. It has these bindings to these expressions.", "tokens": [50364, 583, 498, 746, 307, 7642, 294, 257, 718, 420, 382, 257, 1192, 1496, 2158, 11, 300, 311, 644, 295, 264, 28431, 4230, 300, 510, 311, 257, 718, 13, 467, 575, 613, 14786, 1109, 281, 613, 15277, 13, 51064, 51064, 663, 311, 644, 295, 264, 12649, 28431, 4230, 13, 51164, 51164, 7587, 13, 400, 498, 291, 528, 264, 2418, 1901, 1589, 11, 550, 437, 291, 434, 6260, 365, 307, 257, 9859, 28431, 4230, 11, 597, 456, 307, 6022, 365, 337, 2699, 76, 412, 264, 1623, 11, 382, 1400, 382, 286, 458, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.05085765939009817, "compression_ratio": 1.6431718061674008, "no_caption_prob": 3.822759390459396e-05}, {"id": 58, "seek": 35800, "start": 372.0, "end": 374.0, "text": " That's part of the abstract syntax tree.", "tokens": [50364, 583, 498, 746, 307, 7642, 294, 257, 718, 420, 382, 257, 1192, 1496, 2158, 11, 300, 311, 644, 295, 264, 28431, 4230, 300, 510, 311, 257, 718, 13, 467, 575, 613, 14786, 1109, 281, 613, 15277, 13, 51064, 51064, 663, 311, 644, 295, 264, 12649, 28431, 4230, 13, 51164, 51164, 7587, 13, 400, 498, 291, 528, 264, 2418, 1901, 1589, 11, 550, 437, 291, 434, 6260, 365, 307, 257, 9859, 28431, 4230, 11, 597, 456, 307, 6022, 365, 337, 2699, 76, 412, 264, 1623, 11, 382, 1400, 382, 286, 458, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.05085765939009817, "compression_ratio": 1.6431718061674008, "no_caption_prob": 3.822759390459396e-05}, {"id": 59, "seek": 35800, "start": 374.0, "end": 386.0, "text": " Exactly. And if you want the white space information, then what you're dealing with is a concrete syntax tree, which there is none with for Elm at the moment, as far as I know.", "tokens": [50364, 583, 498, 746, 307, 7642, 294, 257, 718, 420, 382, 257, 1192, 1496, 2158, 11, 300, 311, 644, 295, 264, 28431, 4230, 300, 510, 311, 257, 718, 13, 467, 575, 613, 14786, 1109, 281, 613, 15277, 13, 51064, 51064, 663, 311, 644, 295, 264, 12649, 28431, 4230, 13, 51164, 51164, 7587, 13, 400, 498, 291, 528, 264, 2418, 1901, 1589, 11, 550, 437, 291, 434, 6260, 365, 307, 257, 9859, 28431, 4230, 11, 597, 456, 307, 6022, 365, 337, 2699, 76, 412, 264, 1623, 11, 382, 1400, 382, 286, 458, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.05085765939009817, "compression_ratio": 1.6431718061674008, "no_caption_prob": 3.822759390459396e-05}, {"id": 60, "seek": 38600, "start": 386.0, "end": 396.0, "text": " Right. And a concrete syntax tree might be useful if you're building editor tooling that needs to be able to recreate your exact source code.", "tokens": [50364, 1779, 13, 400, 257, 9859, 28431, 4230, 1062, 312, 4420, 498, 291, 434, 2390, 9839, 46593, 300, 2203, 281, 312, 1075, 281, 25833, 428, 1900, 4009, 3089, 13, 50864, 50864, 13813, 364, 12649, 28431, 4230, 11, 291, 3624, 1589, 466, 577, 309, 390, 3720, 11, 457, 291, 15665, 439, 264, 1589, 466, 437, 264, 3089, 1355, 294, 1668, 281, 14483, 420, 31413, 309, 13, 51414, 51414, 407, 613, 2115, 366, 4961, 293, 436, 434, 4420, 10392, 498, 291, 434, 2390, 257, 21156, 260, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.041045191613110626, "compression_ratio": 1.7004219409282701, "no_caption_prob": 0.0001376413565594703}, {"id": 61, "seek": 38600, "start": 396.0, "end": 407.0, "text": " Whereas an abstract syntax tree, you lose information about how it was written, but you preserve all the information about what the code means in order to execute or compile it.", "tokens": [50364, 1779, 13, 400, 257, 9859, 28431, 4230, 1062, 312, 4420, 498, 291, 434, 2390, 9839, 46593, 300, 2203, 281, 312, 1075, 281, 25833, 428, 1900, 4009, 3089, 13, 50864, 50864, 13813, 364, 12649, 28431, 4230, 11, 291, 3624, 1589, 466, 577, 309, 390, 3720, 11, 457, 291, 15665, 439, 264, 1589, 466, 437, 264, 3089, 1355, 294, 1668, 281, 14483, 420, 31413, 309, 13, 51414, 51414, 407, 613, 2115, 366, 4961, 293, 436, 434, 4420, 10392, 498, 291, 434, 2390, 257, 21156, 260, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.041045191613110626, "compression_ratio": 1.7004219409282701, "no_caption_prob": 0.0001376413565594703}, {"id": 62, "seek": 38600, "start": 407.0, "end": 412.0, "text": " So these terms are helpful and they're useful concepts if you're building a parser.", "tokens": [50364, 1779, 13, 400, 257, 9859, 28431, 4230, 1062, 312, 4420, 498, 291, 434, 2390, 9839, 46593, 300, 2203, 281, 312, 1075, 281, 25833, 428, 1900, 4009, 3089, 13, 50864, 50864, 13813, 364, 12649, 28431, 4230, 11, 291, 3624, 1589, 466, 577, 309, 390, 3720, 11, 457, 291, 15665, 439, 264, 1589, 466, 437, 264, 3089, 1355, 294, 1668, 281, 14483, 420, 31413, 309, 13, 51414, 51414, 407, 613, 2115, 366, 4961, 293, 436, 434, 4420, 10392, 498, 291, 434, 2390, 257, 21156, 260, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.041045191613110626, "compression_ratio": 1.7004219409282701, "no_caption_prob": 0.0001376413565594703}, {"id": 63, "seek": 41200, "start": 412.0, "end": 425.0, "text": " But, you know, the ultimate point is you're turning this source code or some sort of string into some structured data, much like you would do with a JSON decoder.", "tokens": [50364, 583, 11, 291, 458, 11, 264, 9705, 935, 307, 291, 434, 6246, 341, 4009, 3089, 420, 512, 1333, 295, 6798, 666, 512, 18519, 1412, 11, 709, 411, 291, 576, 360, 365, 257, 31828, 979, 19866, 13, 51014, 51014, 16192, 300, 264, 1412, 307, 819, 294, 31828, 11, 754, 498, 309, 311, 6798, 2587, 11, 291, 483, 721, 538, 1315, 11, 2673, 337, 562, 309, 311, 257, 2136, 420, 31828, 2657, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.0998966916402181, "compression_ratio": 1.5024875621890548, "no_caption_prob": 3.591125278035179e-05}, {"id": 64, "seek": 41200, "start": 425.0, "end": 437.0, "text": " Except that the data is different in JSON, even if it's stringified, you get things by name, usually for when it's a record or JSON object.", "tokens": [50364, 583, 11, 291, 458, 11, 264, 9705, 935, 307, 291, 434, 6246, 341, 4009, 3089, 420, 512, 1333, 295, 6798, 666, 512, 18519, 1412, 11, 709, 411, 291, 576, 360, 365, 257, 31828, 979, 19866, 13, 51014, 51014, 16192, 300, 264, 1412, 307, 819, 294, 31828, 11, 754, 498, 309, 311, 6798, 2587, 11, 291, 483, 721, 538, 1315, 11, 2673, 337, 562, 309, 311, 257, 2136, 420, 31828, 2657, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.0998966916402181, "compression_ratio": 1.5024875621890548, "no_caption_prob": 3.591125278035179e-05}, {"id": 65, "seek": 43700, "start": 437.0, "end": 446.0, "text": " But with parsing, it's always about ordering. So you get this, then you get that, then you get this. It's what I'm getting.", "tokens": [50364, 583, 365, 21156, 278, 11, 309, 311, 1009, 466, 21739, 13, 407, 291, 483, 341, 11, 550, 291, 483, 300, 11, 550, 291, 483, 341, 13, 467, 311, 437, 286, 478, 1242, 13, 50814, 50814, 1779, 13, 509, 2066, 512, 733, 295, 1668, 11, 512, 733, 295, 28431, 13, 51064, 51064, 1079, 13, 400, 498, 729, 9843, 366, 406, 1131, 11, 550, 291, 362, 257, 21156, 278, 7763, 13, 51364, 51364, 663, 307, 257, 534, 869, 935, 13, 400, 300, 311, 257, 869, 636, 281, 3920, 264, 16844, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.07845176676268219, "compression_ratio": 1.6732673267326732, "no_caption_prob": 9.609713015379384e-05}, {"id": 66, "seek": 43700, "start": 446.0, "end": 451.0, "text": " Right. You expect some kind of order, some kind of syntax.", "tokens": [50364, 583, 365, 21156, 278, 11, 309, 311, 1009, 466, 21739, 13, 407, 291, 483, 341, 11, 550, 291, 483, 300, 11, 550, 291, 483, 341, 13, 467, 311, 437, 286, 478, 1242, 13, 50814, 50814, 1779, 13, 509, 2066, 512, 733, 295, 1668, 11, 512, 733, 295, 28431, 13, 51064, 51064, 1079, 13, 400, 498, 729, 9843, 366, 406, 1131, 11, 550, 291, 362, 257, 21156, 278, 7763, 13, 51364, 51364, 663, 307, 257, 534, 869, 935, 13, 400, 300, 311, 257, 869, 636, 281, 3920, 264, 16844, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.07845176676268219, "compression_ratio": 1.6732673267326732, "no_caption_prob": 9.609713015379384e-05}, {"id": 67, "seek": 43700, "start": 451.0, "end": 457.0, "text": " Yes. And if those expectations are not met, then you have a parsing failure.", "tokens": [50364, 583, 365, 21156, 278, 11, 309, 311, 1009, 466, 21739, 13, 407, 291, 483, 341, 11, 550, 291, 483, 300, 11, 550, 291, 483, 341, 13, 467, 311, 437, 286, 478, 1242, 13, 50814, 50814, 1779, 13, 509, 2066, 512, 733, 295, 1668, 11, 512, 733, 295, 28431, 13, 51064, 51064, 1079, 13, 400, 498, 729, 9843, 366, 406, 1131, 11, 550, 291, 362, 257, 21156, 278, 7763, 13, 51364, 51364, 663, 307, 257, 534, 869, 935, 13, 400, 300, 311, 257, 869, 636, 281, 3920, 264, 16844, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.07845176676268219, "compression_ratio": 1.6732673267326732, "no_caption_prob": 9.609713015379384e-05}, {"id": 68, "seek": 43700, "start": 457.0, "end": 461.0, "text": " That is a really great point. And that's a great way to frame the distinction.", "tokens": [50364, 583, 365, 21156, 278, 11, 309, 311, 1009, 466, 21739, 13, 407, 291, 483, 341, 11, 550, 291, 483, 300, 11, 550, 291, 483, 341, 13, 467, 311, 437, 286, 478, 1242, 13, 50814, 50814, 1779, 13, 509, 2066, 512, 733, 295, 1668, 11, 512, 733, 295, 28431, 13, 51064, 51064, 1079, 13, 400, 498, 729, 9843, 366, 406, 1131, 11, 550, 291, 362, 257, 21156, 278, 7763, 13, 51364, 51364, 663, 307, 257, 534, 869, 935, 13, 400, 300, 311, 257, 869, 636, 281, 3920, 264, 16844, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.07845176676268219, "compression_ratio": 1.6732673267326732, "no_caption_prob": 9.609713015379384e-05}, {"id": 69, "seek": 46100, "start": 461.0, "end": 467.0, "text": " So, okay, so JSON decoder, you have something which has already been parsed, actually.", "tokens": [50364, 407, 11, 1392, 11, 370, 31828, 979, 19866, 11, 291, 362, 746, 597, 575, 1217, 668, 21156, 292, 11, 767, 13, 50664, 50664, 286, 914, 11, 291, 727, 360, 411, 31828, 13, 1479, 22332, 13, 1479, 22332, 4520, 2937, 293, 291, 727, 976, 309, 2806, 22892, 31828, 13, 51064, 51064, 400, 2699, 76, 307, 516, 281, 584, 11, 286, 2809, 380, 48377, 341, 13, 407, 12120, 309, 775, 264, 21156, 278, 1823, 4079, 294, 456, 13, 51414, 51414, 583, 309, 311, 1936, 8568, 11, 286, 914, 11, 833, 264, 13376, 11, 286, 478, 17939, 309, 775, 31828, 13, 2181, 405, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.16571360996791296, "compression_ratio": 1.618421052631579, "no_caption_prob": 0.00041074430919252336}, {"id": 70, "seek": 46100, "start": 467.0, "end": 475.0, "text": " I mean, you could do like JSON.decode.decodeString and you could give it malformed JSON.", "tokens": [50364, 407, 11, 1392, 11, 370, 31828, 979, 19866, 11, 291, 362, 746, 597, 575, 1217, 668, 21156, 292, 11, 767, 13, 50664, 50664, 286, 914, 11, 291, 727, 360, 411, 31828, 13, 1479, 22332, 13, 1479, 22332, 4520, 2937, 293, 291, 727, 976, 309, 2806, 22892, 31828, 13, 51064, 51064, 400, 2699, 76, 307, 516, 281, 584, 11, 286, 2809, 380, 48377, 341, 13, 407, 12120, 309, 775, 264, 21156, 278, 1823, 4079, 294, 456, 13, 51414, 51414, 583, 309, 311, 1936, 8568, 11, 286, 914, 11, 833, 264, 13376, 11, 286, 478, 17939, 309, 775, 31828, 13, 2181, 405, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.16571360996791296, "compression_ratio": 1.618421052631579, "no_caption_prob": 0.00041074430919252336}, {"id": 71, "seek": 46100, "start": 475.0, "end": 482.0, "text": " And Elm is going to say, I couldn't parse this. So technically it does the parsing step somewhere in there.", "tokens": [50364, 407, 11, 1392, 11, 370, 31828, 979, 19866, 11, 291, 362, 746, 597, 575, 1217, 668, 21156, 292, 11, 767, 13, 50664, 50664, 286, 914, 11, 291, 727, 360, 411, 31828, 13, 1479, 22332, 13, 1479, 22332, 4520, 2937, 293, 291, 727, 976, 309, 2806, 22892, 31828, 13, 51064, 51064, 400, 2699, 76, 307, 516, 281, 584, 11, 286, 2809, 380, 48377, 341, 13, 407, 12120, 309, 775, 264, 21156, 278, 1823, 4079, 294, 456, 13, 51414, 51414, 583, 309, 311, 1936, 8568, 11, 286, 914, 11, 833, 264, 13376, 11, 286, 478, 17939, 309, 775, 31828, 13, 2181, 405, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.16571360996791296, "compression_ratio": 1.618421052631579, "no_caption_prob": 0.00041074430919252336}, {"id": 72, "seek": 46100, "start": 482.0, "end": 489.0, "text": " But it's basically checking, I mean, under the hood, I'm guessing it does JSON.parse.", "tokens": [50364, 407, 11, 1392, 11, 370, 31828, 979, 19866, 11, 291, 362, 746, 597, 575, 1217, 668, 21156, 292, 11, 767, 13, 50664, 50664, 286, 914, 11, 291, 727, 360, 411, 31828, 13, 1479, 22332, 13, 1479, 22332, 4520, 2937, 293, 291, 727, 976, 309, 2806, 22892, 31828, 13, 51064, 51064, 400, 2699, 76, 307, 516, 281, 584, 11, 286, 2809, 380, 48377, 341, 13, 407, 12120, 309, 775, 264, 21156, 278, 1823, 4079, 294, 456, 13, 51414, 51414, 583, 309, 311, 1936, 8568, 11, 286, 914, 11, 833, 264, 13376, 11, 286, 478, 17939, 309, 775, 31828, 13, 2181, 405, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.16571360996791296, "compression_ratio": 1.618421052631579, "no_caption_prob": 0.00041074430919252336}, {"id": 73, "seek": 48900, "start": 489.0, "end": 499.0, "text": " Right. Okay. So it does JSON.parse. So like the browser is saying, hey, I'm going to take this string and I'm going to parse it for you into well formed JSON.", "tokens": [50364, 1779, 13, 1033, 13, 407, 309, 775, 31828, 13, 2181, 405, 13, 407, 411, 264, 11185, 307, 1566, 11, 4177, 11, 286, 478, 516, 281, 747, 341, 6798, 293, 286, 478, 516, 281, 48377, 309, 337, 291, 666, 731, 8693, 31828, 13, 50864, 50864, 407, 291, 362, 341, 3877, 300, 311, 1217, 668, 1730, 1232, 1214, 13, 407, 586, 291, 362, 341, 3877, 300, 575, 31828, 1412, 13, 51214, 51214, 467, 575, 7909, 11, 309, 575, 4190, 11, 293, 264, 3467, 366, 731, 7642, 11, 14324, 341, 1333, 295, 31828, 31256, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.07917164762814839, "compression_ratio": 1.7293577981651376, "no_caption_prob": 2.9310887839528732e-05}, {"id": 74, "seek": 48900, "start": 499.0, "end": 506.0, "text": " So you have this structure that's already been pieced together. So now you have this structure that has JSON data.", "tokens": [50364, 1779, 13, 1033, 13, 407, 309, 775, 31828, 13, 2181, 405, 13, 407, 411, 264, 11185, 307, 1566, 11, 4177, 11, 286, 478, 516, 281, 747, 341, 6798, 293, 286, 478, 516, 281, 48377, 309, 337, 291, 666, 731, 8693, 31828, 13, 50864, 50864, 407, 291, 362, 341, 3877, 300, 311, 1217, 668, 1730, 1232, 1214, 13, 407, 586, 291, 362, 341, 3877, 300, 575, 31828, 1412, 13, 51214, 51214, 467, 575, 7909, 11, 309, 575, 4190, 11, 293, 264, 3467, 366, 731, 7642, 11, 14324, 341, 1333, 295, 31828, 31256, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.07917164762814839, "compression_ratio": 1.7293577981651376, "no_caption_prob": 2.9310887839528732e-05}, {"id": 75, "seek": 48900, "start": 506.0, "end": 516.0, "text": " It has fields, it has values, and the types are well defined, matching this sort of JSON specification.", "tokens": [50364, 1779, 13, 1033, 13, 407, 309, 775, 31828, 13, 2181, 405, 13, 407, 411, 264, 11185, 307, 1566, 11, 4177, 11, 286, 478, 516, 281, 747, 341, 6798, 293, 286, 478, 516, 281, 48377, 309, 337, 291, 666, 731, 8693, 31828, 13, 50864, 50864, 407, 291, 362, 341, 3877, 300, 311, 1217, 668, 1730, 1232, 1214, 13, 407, 586, 291, 362, 341, 3877, 300, 575, 31828, 1412, 13, 51214, 51214, 467, 575, 7909, 11, 309, 575, 4190, 11, 293, 264, 3467, 366, 731, 7642, 11, 14324, 341, 1333, 295, 31828, 31256, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.07917164762814839, "compression_ratio": 1.7293577981651376, "no_caption_prob": 2.9310887839528732e-05}, {"id": 76, "seek": 51600, "start": 516.0, "end": 520.0, "text": " So you know things about the structure because you've parsed it successfully as JSON.", "tokens": [50364, 407, 291, 458, 721, 466, 264, 3877, 570, 291, 600, 21156, 292, 309, 10727, 382, 31828, 13, 50564, 50564, 407, 294, 257, 31828, 979, 19866, 11, 382, 291, 434, 1566, 11, 291, 393, 1333, 295, 2524, 294, 293, 584, 11, 286, 528, 341, 2519, 13, 50864, 50864, 400, 370, 21156, 433, 366, 588, 819, 570, 21156, 433, 11, 291, 434, 516, 807, 472, 2517, 412, 257, 565, 293, 3936, 264, 16944, 281, 6964, 437, 264, 3877, 295, 264, 2701, 307, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.053062910192153034, "compression_ratio": 1.5972222222222223, "no_caption_prob": 6.4389755607408006e-06}, {"id": 77, "seek": 51600, "start": 520.0, "end": 526.0, "text": " So in a JSON decoder, as you're saying, you can sort of reach in and say, I want this field.", "tokens": [50364, 407, 291, 458, 721, 466, 264, 3877, 570, 291, 600, 21156, 292, 309, 10727, 382, 31828, 13, 50564, 50564, 407, 294, 257, 31828, 979, 19866, 11, 382, 291, 434, 1566, 11, 291, 393, 1333, 295, 2524, 294, 293, 584, 11, 286, 528, 341, 2519, 13, 50864, 50864, 400, 370, 21156, 433, 366, 588, 819, 570, 21156, 433, 11, 291, 434, 516, 807, 472, 2517, 412, 257, 565, 293, 3936, 264, 16944, 281, 6964, 437, 264, 3877, 295, 264, 2701, 307, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.053062910192153034, "compression_ratio": 1.5972222222222223, "no_caption_prob": 6.4389755607408006e-06}, {"id": 78, "seek": 51600, "start": 526.0, "end": 538.0, "text": " And so parsers are very different because parsers, you're going through one character at a time and eating the symbols to define what the structure of the content is.", "tokens": [50364, 407, 291, 458, 721, 466, 264, 3877, 570, 291, 600, 21156, 292, 309, 10727, 382, 31828, 13, 50564, 50564, 407, 294, 257, 31828, 979, 19866, 11, 382, 291, 434, 1566, 11, 291, 393, 1333, 295, 2524, 294, 293, 584, 11, 286, 528, 341, 2519, 13, 50864, 50864, 400, 370, 21156, 433, 366, 588, 819, 570, 21156, 433, 11, 291, 434, 516, 807, 472, 2517, 412, 257, 565, 293, 3936, 264, 16944, 281, 6964, 437, 264, 3877, 295, 264, 2701, 307, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.053062910192153034, "compression_ratio": 1.5972222222222223, "no_caption_prob": 6.4389755607408006e-06}, {"id": 79, "seek": 53800, "start": 538.0, "end": 550.0, "text": " And with JSON, you're sort of dealing with this data type that's already been parsed into a sort of structure and you're making assertions about the shape of that data.", "tokens": [50364, 400, 365, 31828, 11, 291, 434, 1333, 295, 6260, 365, 341, 1412, 2010, 300, 311, 1217, 668, 21156, 292, 666, 257, 1333, 295, 3877, 293, 291, 434, 1455, 19810, 626, 466, 264, 3909, 295, 300, 1412, 13, 50964, 50964, 865, 11, 291, 434, 1936, 1217, 8850, 257, 25890, 365, 31828, 13, 2181, 405, 11, 337, 7724, 412, 1935, 13, 51314, 51314, 1079, 11, 2293, 13, 865, 13, 407, 291, 434, 884, 512, 1333, 295, 7363, 763, 322, 309, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.08213931968413203, "compression_ratio": 1.635, "no_caption_prob": 2.247372322017327e-05}, {"id": 80, "seek": 53800, "start": 550.0, "end": 557.0, "text": " Yeah, you're basically already hitting a dictionary with JSON.parse, for records at least.", "tokens": [50364, 400, 365, 31828, 11, 291, 434, 1333, 295, 6260, 365, 341, 1412, 2010, 300, 311, 1217, 668, 21156, 292, 666, 257, 1333, 295, 3877, 293, 291, 434, 1455, 19810, 626, 466, 264, 3909, 295, 300, 1412, 13, 50964, 50964, 865, 11, 291, 434, 1936, 1217, 8850, 257, 25890, 365, 31828, 13, 2181, 405, 11, 337, 7724, 412, 1935, 13, 51314, 51314, 1079, 11, 2293, 13, 865, 13, 407, 291, 434, 884, 512, 1333, 295, 7363, 763, 322, 309, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.08213931968413203, "compression_ratio": 1.635, "no_caption_prob": 2.247372322017327e-05}, {"id": 81, "seek": 53800, "start": 557.0, "end": 561.0, "text": " Yes, exactly. Yeah. So you're doing some sort of validations on it.", "tokens": [50364, 400, 365, 31828, 11, 291, 434, 1333, 295, 6260, 365, 341, 1412, 2010, 300, 311, 1217, 668, 21156, 292, 666, 257, 1333, 295, 3877, 293, 291, 434, 1455, 19810, 626, 466, 264, 3909, 295, 300, 1412, 13, 50964, 50964, 865, 11, 291, 434, 1936, 1217, 8850, 257, 25890, 365, 31828, 13, 2181, 405, 11, 337, 7724, 412, 1935, 13, 51314, 51314, 1079, 11, 2293, 13, 865, 13, 407, 291, 434, 884, 512, 1333, 295, 7363, 763, 322, 309, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.08213931968413203, "compression_ratio": 1.635, "no_caption_prob": 2.247372322017327e-05}, {"id": 82, "seek": 56100, "start": 561.0, "end": 572.0, "text": " And in a sense, writing a parser, you're doing validations because your parser could fail or succeed. And if it succeeds, then you're going to end up with data of a certain type.", "tokens": [50364, 400, 294, 257, 2020, 11, 3579, 257, 21156, 260, 11, 291, 434, 884, 7363, 763, 570, 428, 21156, 260, 727, 3061, 420, 7754, 13, 400, 498, 309, 49263, 11, 550, 291, 434, 516, 281, 917, 493, 365, 1412, 295, 257, 1629, 2010, 13, 50914, 50914, 583, 264, 32194, 1333, 295, 5314, 456, 13, 316, 21156, 260, 307, 257, 819, 7719, 570, 309, 311, 9007, 721, 294, 257, 636, 689, 309, 311, 16821, 807, 1184, 2517, 293, 2390, 493, 512, 3877, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.033192743974573474, "compression_ratio": 1.6515837104072397, "no_caption_prob": 2.4299226424773224e-05}, {"id": 83, "seek": 56100, "start": 572.0, "end": 584.0, "text": " But the similarity sort of ends there. A parser is a different category because it's processing things in a way where it's stepping through each character and building up some structure.", "tokens": [50364, 400, 294, 257, 2020, 11, 3579, 257, 21156, 260, 11, 291, 434, 884, 7363, 763, 570, 428, 21156, 260, 727, 3061, 420, 7754, 13, 400, 498, 309, 49263, 11, 550, 291, 434, 516, 281, 917, 493, 365, 1412, 295, 257, 1629, 2010, 13, 50914, 50914, 583, 264, 32194, 1333, 295, 5314, 456, 13, 316, 21156, 260, 307, 257, 819, 7719, 570, 309, 311, 9007, 721, 294, 257, 636, 689, 309, 311, 16821, 807, 1184, 2517, 293, 2390, 493, 512, 3877, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.033192743974573474, "compression_ratio": 1.6515837104072397, "no_caption_prob": 2.4299226424773224e-05}, {"id": 84, "seek": 58400, "start": 584.0, "end": 597.0, "text": " So I think that's a pretty good introduction to the general concepts we're working with. What is a parser? What's an abstract syntax tree? The distinction between JSON decoders and parsers.", "tokens": [50364, 407, 286, 519, 300, 311, 257, 1238, 665, 9339, 281, 264, 2674, 10392, 321, 434, 1364, 365, 13, 708, 307, 257, 21156, 260, 30, 708, 311, 364, 12649, 28431, 4230, 30, 440, 16844, 1296, 31828, 979, 378, 433, 293, 21156, 433, 13, 51014, 51014, 407, 1310, 718, 311, 9192, 666, 264, 2390, 8474, 257, 707, 857, 300, 291, 764, 281, 767, 6964, 613, 721, 293, 577, 436, 589, 294, 257, 636, 300, 311, 516, 281, 312, 4963, 498, 291, 600, 1096, 31828, 979, 378, 433, 293, 294, 257, 636, 300, 311, 516, 281, 841, 777, 498, 291, 600, 1096, 31828, 979, 378, 433, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.027044550136283593, "compression_ratio": 1.7903225806451613, "no_caption_prob": 0.00014423156972043216}, {"id": 85, "seek": 58400, "start": 597.0, "end": 612.0, "text": " So maybe let's dive into the building blocks a little bit that you use to actually define these things and how they work in a way that's going to be familiar if you've done JSON decoders and in a way that's going to feel new if you've done JSON decoders.", "tokens": [50364, 407, 286, 519, 300, 311, 257, 1238, 665, 9339, 281, 264, 2674, 10392, 321, 434, 1364, 365, 13, 708, 307, 257, 21156, 260, 30, 708, 311, 364, 12649, 28431, 4230, 30, 440, 16844, 1296, 31828, 979, 378, 433, 293, 21156, 433, 13, 51014, 51014, 407, 1310, 718, 311, 9192, 666, 264, 2390, 8474, 257, 707, 857, 300, 291, 764, 281, 767, 6964, 613, 721, 293, 577, 436, 589, 294, 257, 636, 300, 311, 516, 281, 312, 4963, 498, 291, 600, 1096, 31828, 979, 378, 433, 293, 294, 257, 636, 300, 311, 516, 281, 841, 777, 498, 291, 600, 1096, 31828, 979, 378, 433, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.027044550136283593, "compression_ratio": 1.7903225806451613, "no_caption_prob": 0.00014423156972043216}, {"id": 86, "seek": 61200, "start": 612.0, "end": 622.0, "text": " Yeah. So who do you mean with Elm Parser? With specifically the Elm Parser library. Yes. Which is the official and I think default parser for Elm?", "tokens": [50364, 865, 13, 407, 567, 360, 291, 914, 365, 2699, 76, 49691, 260, 30, 2022, 4682, 264, 2699, 76, 49691, 260, 6405, 13, 1079, 13, 3013, 307, 264, 4783, 293, 286, 519, 7576, 21156, 260, 337, 2699, 76, 30, 50864, 50864, 876, 11, 1338, 13, 286, 914, 11, 309, 311, 257, 534, 7496, 6405, 13, 467, 311, 257, 3845, 747, 322, 21156, 278, 13, 400, 22613, 3094, 341, 6405, 13, 634, 575, 257, 688, 295, 1752, 1364, 365, 21156, 433, 11, 1419, 4418, 257, 688, 295, 565, 14916, 264, 2699, 76, 21156, 260, 2564, 294, 8646, 43723, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.12521748495574045, "compression_ratio": 1.6, "no_caption_prob": 0.0001233848452102393}, {"id": 87, "seek": 61200, "start": 622.0, "end": 637.0, "text": " Oh, yeah. I mean, it's a really lovely library. It's a unique take on parsing. And Evan built this library. He has a lot of experience working with parsers, having spent a lot of time maintaining the Elm parser itself in Haskell.", "tokens": [50364, 865, 13, 407, 567, 360, 291, 914, 365, 2699, 76, 49691, 260, 30, 2022, 4682, 264, 2699, 76, 49691, 260, 6405, 13, 1079, 13, 3013, 307, 264, 4783, 293, 286, 519, 7576, 21156, 260, 337, 2699, 76, 30, 50864, 50864, 876, 11, 1338, 13, 286, 914, 11, 309, 311, 257, 534, 7496, 6405, 13, 467, 311, 257, 3845, 747, 322, 21156, 278, 13, 400, 22613, 3094, 341, 6405, 13, 634, 575, 257, 688, 295, 1752, 1364, 365, 21156, 433, 11, 1419, 4418, 257, 688, 295, 565, 14916, 264, 2699, 76, 21156, 260, 2564, 294, 8646, 43723, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.12521748495574045, "compression_ratio": 1.6, "no_caption_prob": 0.0001233848452102393}, {"id": 88, "seek": 63700, "start": 637.0, "end": 655.0, "text": " Yeah. And I believe he took this Haskell parser library, Parsec, and initially built the Elm parser using that and then found he wanted to do things a little differently, both for performance reasons and for maintainability and kind of built his own tool on top of that.", "tokens": [50364, 865, 13, 400, 286, 1697, 415, 1890, 341, 8646, 43723, 21156, 260, 6405, 11, 3457, 8159, 11, 293, 9105, 3094, 264, 2699, 76, 21156, 260, 1228, 300, 293, 550, 1352, 415, 1415, 281, 360, 721, 257, 707, 7614, 11, 1293, 337, 3389, 4112, 293, 337, 6909, 2310, 293, 733, 295, 3094, 702, 1065, 2290, 322, 1192, 295, 300, 13, 51264, 51264, 1610, 1310, 445, 490, 8459, 293, 3264, 512, 8820, 293, 6456, 729, 8820, 281, 264, 2699, 76, 21156, 260, 6405, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.09351704841436342, "compression_ratio": 1.6375545851528384, "no_caption_prob": 7.483496301574633e-05}, {"id": 89, "seek": 63700, "start": 655.0, "end": 662.0, "text": " Or maybe just from scratch and learned some lessons and applied those lessons to the Elm parser library.", "tokens": [50364, 865, 13, 400, 286, 1697, 415, 1890, 341, 8646, 43723, 21156, 260, 6405, 11, 3457, 8159, 11, 293, 9105, 3094, 264, 2699, 76, 21156, 260, 1228, 300, 293, 550, 1352, 415, 1415, 281, 360, 721, 257, 707, 7614, 11, 1293, 337, 3389, 4112, 293, 337, 6909, 2310, 293, 733, 295, 3094, 702, 1065, 2290, 322, 1192, 295, 300, 13, 51264, 51264, 1610, 1310, 445, 490, 8459, 293, 3264, 512, 8820, 293, 6456, 729, 8820, 281, 264, 2699, 76, 21156, 260, 6405, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.09351704841436342, "compression_ratio": 1.6375545851528384, "no_caption_prob": 7.483496301574633e-05}, {"id": 90, "seek": 66200, "start": 662.0, "end": 677.0, "text": " Yeah, you really get the feeling that this is made to be very performance. Right. Kind of like painfully so sometimes. But when things work, things are performance right out of the box.", "tokens": [50364, 865, 11, 291, 534, 483, 264, 2633, 300, 341, 307, 1027, 281, 312, 588, 3389, 13, 1779, 13, 9242, 295, 411, 1822, 2277, 370, 2171, 13, 583, 562, 721, 589, 11, 721, 366, 3389, 558, 484, 295, 264, 2424, 13, 51114, 51114, 16581, 291, 764, 512, 7690, 300, 390, 26269, 1970, 11, 286, 2041, 13, 1779, 13, 400, 321, 603, 483, 666, 512, 295, 729, 8378, 411, 646, 6903, 14134, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.0859894879659017, "compression_ratio": 1.5339805825242718, "no_caption_prob": 0.00013762824528384954}, {"id": 91, "seek": 66200, "start": 677.0, "end": 686.0, "text": " Unless you use some construct that was advised against, I guess. Right. And we'll get into some of those topics like backtracking.", "tokens": [50364, 865, 11, 291, 534, 483, 264, 2633, 300, 341, 307, 1027, 281, 312, 588, 3389, 13, 1779, 13, 9242, 295, 411, 1822, 2277, 370, 2171, 13, 583, 562, 721, 589, 11, 721, 366, 3389, 558, 484, 295, 264, 2424, 13, 51114, 51114, 16581, 291, 764, 512, 7690, 300, 390, 26269, 1970, 11, 286, 2041, 13, 1779, 13, 400, 321, 603, 483, 666, 512, 295, 729, 8378, 411, 646, 6903, 14134, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.0859894879659017, "compression_ratio": 1.5339805825242718, "no_caption_prob": 0.00013762824528384954}, {"id": 92, "seek": 68600, "start": 686.0, "end": 698.0, "text": " So like, what was your initial experience? You dived in, you tried writing your first parser. Did you get something to work initially in an intuitive way or did you have to try things out for a while?", "tokens": [50364, 407, 411, 11, 437, 390, 428, 5883, 1752, 30, 509, 274, 3194, 294, 11, 291, 3031, 3579, 428, 700, 21156, 260, 13, 2589, 291, 483, 746, 281, 589, 9105, 294, 364, 21769, 636, 420, 630, 291, 362, 281, 853, 721, 484, 337, 257, 1339, 30, 50964, 50964, 883, 11, 264, 700, 1326, 721, 645, 588, 1858, 11, 588, 21769, 13, 407, 1936, 437, 286, 3031, 281, 360, 390, 316, 6915, 472, 365, 512, 27739, 13, 51414, 51414], "temperature": 0.0, "avg_logprob": -0.08524783653549001, "compression_ratio": 1.5625, "no_caption_prob": 0.00011232911492697895}, {"id": 93, "seek": 68600, "start": 698.0, "end": 707.0, "text": " No, the first few things were very easy, very intuitive. So basically what I tried to do was A equals one with some spacing.", "tokens": [50364, 407, 411, 11, 437, 390, 428, 5883, 1752, 30, 509, 274, 3194, 294, 11, 291, 3031, 3579, 428, 700, 21156, 260, 13, 2589, 291, 483, 746, 281, 589, 9105, 294, 364, 21769, 636, 420, 630, 291, 362, 281, 853, 721, 484, 337, 257, 1339, 30, 50964, 50964, 883, 11, 264, 700, 1326, 721, 645, 588, 1858, 11, 588, 21769, 13, 407, 1936, 437, 286, 3031, 281, 360, 390, 316, 6915, 472, 365, 512, 27739, 13, 51414, 51414], "temperature": 0.0, "avg_logprob": -0.08524783653549001, "compression_ratio": 1.5625, "no_caption_prob": 0.00011232911492697895}, {"id": 94, "seek": 70700, "start": 707.0, "end": 722.0, "text": " Basically, you already had examples doing that. So I was looking for a variable, then some spaces, a symbol, the equal sign, some spaces again, potentially you can ignore those.", "tokens": [50364, 8537, 11, 291, 1217, 632, 5110, 884, 300, 13, 407, 286, 390, 1237, 337, 257, 7006, 11, 550, 512, 7673, 11, 257, 5986, 11, 264, 2681, 1465, 11, 512, 7673, 797, 11, 7263, 291, 393, 11200, 729, 13, 51114, 51114, 400, 550, 512, 4190, 13, 682, 341, 1389, 11, 309, 390, 445, 364, 24922, 13, 407, 286, 500, 380, 1604, 437, 309, 390, 337, 264, 6798, 11, 1673, 13, 583, 264, 661, 721, 645, 588, 2199, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.12857806829758633, "compression_ratio": 1.5660377358490567, "no_caption_prob": 0.00011773186270147562}, {"id": 95, "seek": 70700, "start": 722.0, "end": 732.0, "text": " And then some values. In this case, it was just an integer. So I don't remember what it was for the string, though. But the other things were very simple.", "tokens": [50364, 8537, 11, 291, 1217, 632, 5110, 884, 300, 13, 407, 286, 390, 1237, 337, 257, 7006, 11, 550, 512, 7673, 11, 257, 5986, 11, 264, 2681, 1465, 11, 512, 7673, 797, 11, 7263, 291, 393, 11200, 729, 13, 51114, 51114, 400, 550, 512, 4190, 13, 682, 341, 1389, 11, 309, 390, 445, 364, 24922, 13, 407, 286, 500, 380, 1604, 437, 309, 390, 337, 264, 6798, 11, 1673, 13, 583, 264, 661, 721, 645, 588, 2199, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.12857806829758633, "compression_ratio": 1.5660377358490567, "no_caption_prob": 0.00011773186270147562}, {"id": 96, "seek": 73200, "start": 732.0, "end": 741.0, "text": " Right. OK, so you were able to pretty intuitively get that functioning and get it successfully parsing A equals one.", "tokens": [50364, 1779, 13, 2264, 11, 370, 291, 645, 1075, 281, 1238, 46506, 483, 300, 18483, 293, 483, 309, 10727, 21156, 278, 316, 6915, 472, 13, 50814, 50814, 865, 11, 286, 500, 380, 519, 286, 600, 754, 2045, 364, 6713, 412, 264, 935, 13, 407, 1338, 11, 1596, 21769, 13, 51114, 51114, 865, 13, 400, 286, 2041, 456, 311, 411, 257, 36133, 300, 6653, 291, 6964, 411, 364, 45690, 300, 311, 13, 51414, 51414, 865, 11, 286, 519, 300, 311, 437, 286, 1143, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.11681068775265716, "compression_ratio": 1.5658536585365854, "no_caption_prob": 7.484188245143741e-05}, {"id": 97, "seek": 73200, "start": 741.0, "end": 747.0, "text": " Yeah, I don't think I've even hit an error at the point. So yeah, quite intuitive.", "tokens": [50364, 1779, 13, 2264, 11, 370, 291, 645, 1075, 281, 1238, 46506, 483, 300, 18483, 293, 483, 309, 10727, 21156, 278, 316, 6915, 472, 13, 50814, 50814, 865, 11, 286, 500, 380, 519, 286, 600, 754, 2045, 364, 6713, 412, 264, 935, 13, 407, 1338, 11, 1596, 21769, 13, 51114, 51114, 865, 13, 400, 286, 2041, 456, 311, 411, 257, 36133, 300, 6653, 291, 6964, 411, 364, 45690, 300, 311, 13, 51414, 51414, 865, 11, 286, 519, 300, 311, 437, 286, 1143, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.11681068775265716, "compression_ratio": 1.5658536585365854, "no_caption_prob": 7.484188245143741e-05}, {"id": 98, "seek": 73200, "start": 747.0, "end": 753.0, "text": " Yeah. And I guess there's like a helper that lets you define like an identifier that's.", "tokens": [50364, 1779, 13, 2264, 11, 370, 291, 645, 1075, 281, 1238, 46506, 483, 300, 18483, 293, 483, 309, 10727, 21156, 278, 316, 6915, 472, 13, 50814, 50814, 865, 11, 286, 500, 380, 519, 286, 600, 754, 2045, 364, 6713, 412, 264, 935, 13, 407, 1338, 11, 1596, 21769, 13, 51114, 51114, 865, 13, 400, 286, 2041, 456, 311, 411, 257, 36133, 300, 6653, 291, 6964, 411, 364, 45690, 300, 311, 13, 51414, 51414, 865, 11, 286, 519, 300, 311, 437, 286, 1143, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.11681068775265716, "compression_ratio": 1.5658536585365854, "no_caption_prob": 7.484188245143741e-05}, {"id": 99, "seek": 73200, "start": 753.0, "end": 756.0, "text": " Yeah, I think that's what I used.", "tokens": [50364, 1779, 13, 2264, 11, 370, 291, 645, 1075, 281, 1238, 46506, 483, 300, 18483, 293, 483, 309, 10727, 21156, 278, 316, 6915, 472, 13, 50814, 50814, 865, 11, 286, 500, 380, 519, 286, 600, 754, 2045, 364, 6713, 412, 264, 935, 13, 407, 1338, 11, 1596, 21769, 13, 51114, 51114, 865, 13, 400, 286, 2041, 456, 311, 411, 257, 36133, 300, 6653, 291, 6964, 411, 364, 45690, 300, 311, 13, 51414, 51414, 865, 11, 286, 519, 300, 311, 437, 286, 1143, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.11681068775265716, "compression_ratio": 1.5658536585365854, "no_caption_prob": 7.484188245143741e-05}, {"id": 100, "seek": 75600, "start": 756.0, "end": 766.0, "text": " Which I mean, really, it's not that hard to define yourself, but there are certain rules like you can have numbers in an identifier name, but they can't be the first letter.", "tokens": [50364, 3013, 286, 914, 11, 534, 11, 309, 311, 406, 300, 1152, 281, 6964, 1803, 11, 457, 456, 366, 1629, 4474, 411, 291, 393, 362, 3547, 294, 364, 45690, 1315, 11, 457, 436, 393, 380, 312, 264, 700, 5063, 13, 50864, 50864, 407, 291, 393, 362, 316, 4762, 18, 6915, 746, 11, 457, 291, 393, 380, 362, 34466, 32, 6915, 746, 570, 364, 45690, 1633, 722, 365, 316, 807, 1176, 11, 3126, 9765, 316, 807, 1176, 294, 264, 1389, 295, 2699, 76, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.08426604160042696, "compression_ratio": 1.6476190476190475, "no_caption_prob": 3.883038880303502e-05}, {"id": 101, "seek": 75600, "start": 766.0, "end": 779.0, "text": " So you can have A123 equals something, but you can't have 123A equals something because an identifier must start with A through Z, lowercase A through Z in the case of Elm.", "tokens": [50364, 3013, 286, 914, 11, 534, 11, 309, 311, 406, 300, 1152, 281, 6964, 1803, 11, 457, 456, 366, 1629, 4474, 411, 291, 393, 362, 3547, 294, 364, 45690, 1315, 11, 457, 436, 393, 380, 312, 264, 700, 5063, 13, 50864, 50864, 407, 291, 393, 362, 316, 4762, 18, 6915, 746, 11, 457, 291, 393, 380, 362, 34466, 32, 6915, 746, 570, 364, 45690, 1633, 722, 365, 316, 807, 1176, 11, 3126, 9765, 316, 807, 1176, 294, 264, 1389, 295, 2699, 76, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.08426604160042696, "compression_ratio": 1.6476190476190475, "no_caption_prob": 3.883038880303502e-05}, {"id": 102, "seek": 77900, "start": 779.0, "end": 792.0, "text": " Yeah, you kind of list the steps of what you're expecting. So that's the order that matters. Kind of like decoding pipeline where you say decode.succeed.", "tokens": [50364, 865, 11, 291, 733, 295, 1329, 264, 4439, 295, 437, 291, 434, 9650, 13, 407, 300, 311, 264, 1668, 300, 7001, 13, 9242, 295, 411, 979, 8616, 15517, 689, 291, 584, 979, 1429, 13, 82, 1311, 4357, 13, 51014, 51014, 509, 360, 21156, 260, 13, 82, 1311, 4357, 293, 550, 264, 2445, 300, 2516, 264, 34086, 1589, 13, 51364, 51364], "temperature": 0.0, "avg_logprob": -0.15601667281120055, "compression_ratio": 1.5161290322580645, "no_caption_prob": 7.888987056503538e-06}, {"id": 103, "seek": 77900, "start": 792.0, "end": 799.0, "text": " You do parser.succeed and then the function that takes the extracted information.", "tokens": [50364, 865, 11, 291, 733, 295, 1329, 264, 4439, 295, 437, 291, 434, 9650, 13, 407, 300, 311, 264, 1668, 300, 7001, 13, 9242, 295, 411, 979, 8616, 15517, 689, 291, 584, 979, 1429, 13, 82, 1311, 4357, 13, 51014, 51014, 509, 360, 21156, 260, 13, 82, 1311, 4357, 293, 550, 264, 2445, 300, 2516, 264, 34086, 1589, 13, 51364, 51364], "temperature": 0.0, "avg_logprob": -0.15601667281120055, "compression_ratio": 1.5161290322580645, "no_caption_prob": 7.888987056503538e-06}, {"id": 104, "seek": 79900, "start": 799.0, "end": 810.0, "text": " And then you do pipelines where you say the first thing that I expect is an identifier, then expect spaces, then expect an equal sign, et cetera.", "tokens": [50364, 400, 550, 291, 360, 40168, 689, 291, 584, 264, 700, 551, 300, 286, 2066, 307, 364, 45690, 11, 550, 2066, 7673, 11, 550, 2066, 364, 2681, 1465, 11, 1030, 11458, 13, 50914, 50914, 407, 294, 300, 2020, 11, 309, 534, 3417, 4963, 281, 979, 8616, 562, 291, 434, 1143, 281, 264, 979, 8616, 15517, 420, 1228, 979, 1429, 13, 24223, 17, 11, 4471, 18, 11, 1030, 11458, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.09976389673021105, "compression_ratio": 1.6057142857142856, "no_caption_prob": 9.666009646025486e-06}, {"id": 105, "seek": 79900, "start": 810.0, "end": 821.0, "text": " So in that sense, it really feels familiar to decoding when you're used to the decoding pipeline or using decode.map2, map3, et cetera.", "tokens": [50364, 400, 550, 291, 360, 40168, 689, 291, 584, 264, 700, 551, 300, 286, 2066, 307, 364, 45690, 11, 550, 2066, 7673, 11, 550, 2066, 364, 2681, 1465, 11, 1030, 11458, 13, 50914, 50914, 407, 294, 300, 2020, 11, 309, 534, 3417, 4963, 281, 979, 8616, 562, 291, 434, 1143, 281, 264, 979, 8616, 15517, 420, 1228, 979, 1429, 13, 24223, 17, 11, 4471, 18, 11, 1030, 11458, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.09976389673021105, "compression_ratio": 1.6057142857142856, "no_caption_prob": 9.666009646025486e-06}, {"id": 106, "seek": 82100, "start": 821.0, "end": 832.0, "text": " Right. When all goes well, when you're on that happy path and you're finding the tokens that you expect to define sequentially, you say, I expect zero or more spaces.", "tokens": [50364, 1779, 13, 1133, 439, 1709, 731, 11, 562, 291, 434, 322, 300, 2055, 3100, 293, 291, 434, 5006, 264, 22667, 300, 291, 2066, 281, 6964, 5123, 3137, 11, 291, 584, 11, 286, 2066, 4018, 420, 544, 7673, 13, 50914, 50914, 286, 2066, 364, 2681, 5986, 510, 13, 1396, 300, 439, 1985, 382, 291, 1116, 2066, 13, 407, 718, 311, 1754, 322, 300, 2055, 3100, 337, 257, 707, 857, 949, 321, 1241, 260, 766, 295, 309, 13, 51414, 51414], "temperature": 0.0, "avg_logprob": -0.0772220253944397, "compression_ratio": 1.5897435897435896, "no_caption_prob": 7.843174535082653e-05}, {"id": 107, "seek": 82100, "start": 832.0, "end": 842.0, "text": " I expect an equal symbol here. Then that all works as you'd expect. So let's stay on that happy path for a little bit before we veer off of it.", "tokens": [50364, 1779, 13, 1133, 439, 1709, 731, 11, 562, 291, 434, 322, 300, 2055, 3100, 293, 291, 434, 5006, 264, 22667, 300, 291, 2066, 281, 6964, 5123, 3137, 11, 291, 584, 11, 286, 2066, 4018, 420, 544, 7673, 13, 50914, 50914, 286, 2066, 364, 2681, 5986, 510, 13, 1396, 300, 439, 1985, 382, 291, 1116, 2066, 13, 407, 718, 311, 1754, 322, 300, 2055, 3100, 337, 257, 707, 857, 949, 321, 1241, 260, 766, 295, 309, 13, 51414, 51414], "temperature": 0.0, "avg_logprob": -0.0772220253944397, "compression_ratio": 1.5897435897435896, "no_caption_prob": 7.843174535082653e-05}, {"id": 108, "seek": 84200, "start": 842.0, "end": 852.0, "text": " Yeah. OK, so when you're on that happy path. So first of all, you mentioned starting with parsing, was it like variable? Is it parser.variable? Is that the helper for that?", "tokens": [50364, 865, 13, 2264, 11, 370, 562, 291, 434, 322, 300, 2055, 3100, 13, 407, 700, 295, 439, 11, 291, 2835, 2891, 365, 21156, 278, 11, 390, 309, 411, 7006, 30, 1119, 309, 21156, 260, 13, 34033, 712, 30, 1119, 300, 264, 36133, 337, 300, 30, 50864, 50864, 286, 393, 380, 1604, 13, 821, 311, 512, 1333, 295, 13, 865, 13, 467, 311, 534, 406, 264, 881, 1021, 2607, 13, 51164, 51164, 583, 264, 935, 307, 300, 264, 6405, 2314, 281, 976, 291, 257, 1238, 1359, 36133, 2445, 300, 23122, 746, 337, 21156, 278, 9102, 11, 597, 291, 727, 588, 3612, 1322, 1803, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.08853789356267341, "compression_ratio": 1.6515151515151516, "no_caption_prob": 0.0001442503125872463}, {"id": 109, "seek": 84200, "start": 852.0, "end": 858.0, "text": " I can't remember. There's some sort of. Yeah. It's really not the most important detail.", "tokens": [50364, 865, 13, 2264, 11, 370, 562, 291, 434, 322, 300, 2055, 3100, 13, 407, 700, 295, 439, 11, 291, 2835, 2891, 365, 21156, 278, 11, 390, 309, 411, 7006, 30, 1119, 309, 21156, 260, 13, 34033, 712, 30, 1119, 300, 264, 36133, 337, 300, 30, 50864, 50864, 286, 393, 380, 1604, 13, 821, 311, 512, 1333, 295, 13, 865, 13, 467, 311, 534, 406, 264, 881, 1021, 2607, 13, 51164, 51164, 583, 264, 935, 307, 300, 264, 6405, 2314, 281, 976, 291, 257, 1238, 1359, 36133, 2445, 300, 23122, 746, 337, 21156, 278, 9102, 11, 597, 291, 727, 588, 3612, 1322, 1803, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.08853789356267341, "compression_ratio": 1.6515151515151516, "no_caption_prob": 0.0001442503125872463}, {"id": 110, "seek": 84200, "start": 858.0, "end": 869.0, "text": " But the point is that the library happens to give you a pretty small helper function that defines something for parsing variables, which you could very easily build yourself.", "tokens": [50364, 865, 13, 2264, 11, 370, 562, 291, 434, 322, 300, 2055, 3100, 13, 407, 700, 295, 439, 11, 291, 2835, 2891, 365, 21156, 278, 11, 390, 309, 411, 7006, 30, 1119, 309, 21156, 260, 13, 34033, 712, 30, 1119, 300, 264, 36133, 337, 300, 30, 50864, 50864, 286, 393, 380, 1604, 13, 821, 311, 512, 1333, 295, 13, 865, 13, 467, 311, 534, 406, 264, 881, 1021, 2607, 13, 51164, 51164, 583, 264, 935, 307, 300, 264, 6405, 2314, 281, 976, 291, 257, 1238, 1359, 36133, 2445, 300, 23122, 746, 337, 21156, 278, 9102, 11, 597, 291, 727, 588, 3612, 1322, 1803, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.08853789356267341, "compression_ratio": 1.6515151515151516, "no_caption_prob": 0.0001442503125872463}, {"id": 111, "seek": 86900, "start": 869.0, "end": 885.0, "text": " But so it is parser.variable. OK, great. So we have parser.variable. And then now we have these sort of I think of them as like keep and discard.", "tokens": [50364, 583, 370, 309, 307, 21156, 260, 13, 34033, 712, 13, 2264, 11, 869, 13, 407, 321, 362, 21156, 260, 13, 34033, 712, 13, 400, 550, 586, 321, 362, 613, 1333, 295, 286, 519, 295, 552, 382, 411, 1066, 293, 31597, 13, 51164, 51164, 865, 11, 286, 390, 1953, 456, 311, 411, 257, 22842, 1451, 5063, 1349, 337, 1293, 13, 583, 1066, 293, 31597, 307, 665, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.15718295233590263, "compression_ratio": 1.5345911949685536, "no_caption_prob": 2.1112060494488105e-05}, {"id": 112, "seek": 86900, "start": 885.0, "end": 891.0, "text": " Yeah, I was thinking there's like a nicer four letter word for both. But keep and discard is good.", "tokens": [50364, 583, 370, 309, 307, 21156, 260, 13, 34033, 712, 13, 2264, 11, 869, 13, 407, 321, 362, 21156, 260, 13, 34033, 712, 13, 400, 550, 586, 321, 362, 613, 1333, 295, 286, 519, 295, 552, 382, 411, 1066, 293, 31597, 13, 51164, 51164, 865, 11, 286, 390, 1953, 456, 311, 411, 257, 22842, 1451, 5063, 1349, 337, 1293, 13, 583, 1066, 293, 31597, 307, 665, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.15718295233590263, "compression_ratio": 1.5345911949685536, "no_caption_prob": 2.1112060494488105e-05}, {"id": 113, "seek": 89100, "start": 891.0, "end": 903.0, "text": " But there's this pipe equals like vertical bar equals operator and there's vertical bar dot. So these are operators that you change, just like you would in a JSON decoder pipeline style.", "tokens": [50364, 583, 456, 311, 341, 11240, 6915, 411, 9429, 2159, 6915, 12973, 293, 456, 311, 9429, 2159, 5893, 13, 407, 613, 366, 19077, 300, 291, 1319, 11, 445, 411, 291, 576, 294, 257, 31828, 979, 19866, 15517, 3758, 13, 50964, 50964, 509, 360, 11240, 5044, 813, 293, 11240, 257, 3840, 295, 721, 807, 13, 583, 291, 360, 11240, 6915, 420, 11240, 5893, 13, 51364, 51364], "temperature": 0.0, "avg_logprob": -0.07657160903468277, "compression_ratio": 1.6264367816091954, "no_caption_prob": 7.966825796756893e-05}, {"id": 114, "seek": 89100, "start": 903.0, "end": 911.0, "text": " You do pipe greater than and pipe a bunch of things through. But you do pipe equals or pipe dot.", "tokens": [50364, 583, 456, 311, 341, 11240, 6915, 411, 9429, 2159, 6915, 12973, 293, 456, 311, 9429, 2159, 5893, 13, 407, 613, 366, 19077, 300, 291, 1319, 11, 445, 411, 291, 576, 294, 257, 31828, 979, 19866, 15517, 3758, 13, 50964, 50964, 509, 360, 11240, 5044, 813, 293, 11240, 257, 3840, 295, 721, 807, 13, 583, 291, 360, 11240, 6915, 420, 11240, 5893, 13, 51364, 51364], "temperature": 0.0, "avg_logprob": -0.07657160903468277, "compression_ratio": 1.6264367816091954, "no_caption_prob": 7.966825796756893e-05}, {"id": 115, "seek": 91100, "start": 911.0, "end": 921.0, "text": " If you do pipe equals, it's going to capture the result of that parser and include it when you put the results together. And if you do pipe dot, it's going to say.", "tokens": [50364, 759, 291, 360, 11240, 6915, 11, 309, 311, 516, 281, 7983, 264, 1874, 295, 300, 21156, 260, 293, 4090, 309, 562, 291, 829, 264, 3542, 1214, 13, 400, 498, 291, 360, 11240, 5893, 11, 309, 311, 516, 281, 584, 13, 50864, 50864, 407, 11, 337, 1365, 11, 498, 291, 434, 884, 21909, 17940, 11, 291, 528, 281, 31597, 309, 13, 663, 311, 516, 281, 312, 257, 11240, 5893, 570, 291, 584, 11, 731, 11, 286, 528, 281, 483, 1791, 341, 21909, 17940, 420, 309, 311, 2489, 498, 456, 311, 572, 21909, 17940, 13, 51414, 51414, 286, 2066, 512, 7263, 11, 457, 286, 500, 380, 1127, 466, 309, 13, 583, 286, 500, 380, 1127, 466, 309, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.04562580188115438, "compression_ratio": 1.8644067796610169, "no_caption_prob": 0.00010070523421745747}, {"id": 116, "seek": 91100, "start": 921.0, "end": 932.0, "text": " So, for example, if you're doing whitespace, you want to discard it. That's going to be a pipe dot because you say, well, I want to get past this whitespace or it's fine if there's no whitespace.", "tokens": [50364, 759, 291, 360, 11240, 6915, 11, 309, 311, 516, 281, 7983, 264, 1874, 295, 300, 21156, 260, 293, 4090, 309, 562, 291, 829, 264, 3542, 1214, 13, 400, 498, 291, 360, 11240, 5893, 11, 309, 311, 516, 281, 584, 13, 50864, 50864, 407, 11, 337, 1365, 11, 498, 291, 434, 884, 21909, 17940, 11, 291, 528, 281, 31597, 309, 13, 663, 311, 516, 281, 312, 257, 11240, 5893, 570, 291, 584, 11, 731, 11, 286, 528, 281, 483, 1791, 341, 21909, 17940, 420, 309, 311, 2489, 498, 456, 311, 572, 21909, 17940, 13, 51414, 51414, 286, 2066, 512, 7263, 11, 457, 286, 500, 380, 1127, 466, 309, 13, 583, 286, 500, 380, 1127, 466, 309, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.04562580188115438, "compression_ratio": 1.8644067796610169, "no_caption_prob": 0.00010070523421745747}, {"id": 117, "seek": 91100, "start": 932.0, "end": 938.0, "text": " I expect some potentially, but I don't care about it. But I don't care about it.", "tokens": [50364, 759, 291, 360, 11240, 6915, 11, 309, 311, 516, 281, 7983, 264, 1874, 295, 300, 21156, 260, 293, 4090, 309, 562, 291, 829, 264, 3542, 1214, 13, 400, 498, 291, 360, 11240, 5893, 11, 309, 311, 516, 281, 584, 13, 50864, 50864, 407, 11, 337, 1365, 11, 498, 291, 434, 884, 21909, 17940, 11, 291, 528, 281, 31597, 309, 13, 663, 311, 516, 281, 312, 257, 11240, 5893, 570, 291, 584, 11, 731, 11, 286, 528, 281, 483, 1791, 341, 21909, 17940, 420, 309, 311, 2489, 498, 456, 311, 572, 21909, 17940, 13, 51414, 51414, 286, 2066, 512, 7263, 11, 457, 286, 500, 380, 1127, 466, 309, 13, 583, 286, 500, 380, 1127, 466, 309, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.04562580188115438, "compression_ratio": 1.8644067796610169, "no_caption_prob": 0.00010070523421745747}, {"id": 118, "seek": 93800, "start": 938.0, "end": 954.0, "text": " I don't want to use that raw input for something. But if it's like a variable name, you want to get that value and you're going to put that in some data structure that says this is an assignment expression or in a I guess it's a statement in Elm, isn't it?", "tokens": [50364, 286, 500, 380, 528, 281, 764, 300, 8936, 4846, 337, 746, 13, 583, 498, 309, 311, 411, 257, 7006, 1315, 11, 291, 528, 281, 483, 300, 2158, 293, 291, 434, 516, 281, 829, 300, 294, 512, 1412, 3877, 300, 1619, 341, 307, 364, 15187, 6114, 420, 294, 257, 286, 2041, 309, 311, 257, 5629, 294, 2699, 76, 11, 1943, 380, 309, 30, 51164, 51164, 1133, 309, 311, 257, 17359, 27606, 11, 257, 27606, 13, 51414, 51414], "temperature": 0.0, "avg_logprob": -0.12579855552086464, "compression_ratio": 1.5510204081632653, "no_caption_prob": 2.247382690256927e-05}, {"id": 119, "seek": 93800, "start": 954.0, "end": 959.0, "text": " When it's a binding declaration, a declaration.", "tokens": [50364, 286, 500, 380, 528, 281, 764, 300, 8936, 4846, 337, 746, 13, 583, 498, 309, 311, 411, 257, 7006, 1315, 11, 291, 528, 281, 483, 300, 2158, 293, 291, 434, 516, 281, 829, 300, 294, 512, 1412, 3877, 300, 1619, 341, 307, 364, 15187, 6114, 420, 294, 257, 286, 2041, 309, 311, 257, 5629, 294, 2699, 76, 11, 1943, 380, 309, 30, 51164, 51164, 1133, 309, 311, 257, 17359, 27606, 11, 257, 27606, 13, 51414, 51414], "temperature": 0.0, "avg_logprob": -0.12579855552086464, "compression_ratio": 1.5510204081632653, "no_caption_prob": 2.247382690256927e-05}, {"id": 120, "seek": 95900, "start": 959.0, "end": 975.0, "text": " And you need the name of that variable so you can have that in your data structure. So you could have like a let binding where it's you have some string that's the variable name and then some expression that's that it's bound to.", "tokens": [50364, 400, 291, 643, 264, 1315, 295, 300, 7006, 370, 291, 393, 362, 300, 294, 428, 1412, 3877, 13, 407, 291, 727, 362, 411, 257, 718, 17359, 689, 309, 311, 291, 362, 512, 6798, 300, 311, 264, 7006, 1315, 293, 550, 512, 6114, 300, 311, 300, 309, 311, 5472, 281, 13, 51164, 51164, 865, 11, 718, 311, 751, 466, 2390, 8474, 10543, 13, 51314, 51314], "temperature": 0.0, "avg_logprob": -0.0851656740361994, "compression_ratio": 1.627906976744186, "no_caption_prob": 2.282760942762252e-05}, {"id": 121, "seek": 95900, "start": 975.0, "end": 978.0, "text": " Yeah, let's talk about building blocks afterwards.", "tokens": [50364, 400, 291, 643, 264, 1315, 295, 300, 7006, 370, 291, 393, 362, 300, 294, 428, 1412, 3877, 13, 407, 291, 727, 362, 411, 257, 718, 17359, 689, 309, 311, 291, 362, 512, 6798, 300, 311, 264, 7006, 1315, 293, 550, 512, 6114, 300, 311, 300, 309, 311, 5472, 281, 13, 51164, 51164, 865, 11, 718, 311, 751, 466, 2390, 8474, 10543, 13, 51314, 51314], "temperature": 0.0, "avg_logprob": -0.0851656740361994, "compression_ratio": 1.627906976744186, "no_caption_prob": 2.282760942762252e-05}, {"id": 122, "seek": 97800, "start": 978.0, "end": 989.0, "text": " So the next thing I tried was to have other kinds of expressions. So A equals one. So one is an integer, but potentially it could be string.", "tokens": [50364, 407, 264, 958, 551, 286, 3031, 390, 281, 362, 661, 3685, 295, 15277, 13, 407, 316, 6915, 472, 13, 407, 472, 307, 364, 24922, 11, 457, 7263, 309, 727, 312, 6798, 13, 50914, 50914, 407, 286, 3031, 1455, 257, 1412, 3877, 300, 727, 21410, 1293, 41674, 293, 13985, 420, 12867, 420, 23351, 24008, 11, 2035, 13, 51364, 51364], "temperature": 0.0, "avg_logprob": -0.10436650117238362, "compression_ratio": 1.514792899408284, "no_caption_prob": 7.296332569239894e-06}, {"id": 123, "seek": 97800, "start": 989.0, "end": 998.0, "text": " So I tried making a data structure that could accommodate both integers and strings or flows or Booleans, whatever.", "tokens": [50364, 407, 264, 958, 551, 286, 3031, 390, 281, 362, 661, 3685, 295, 15277, 13, 407, 316, 6915, 472, 13, 407, 472, 307, 364, 24922, 11, 457, 7263, 309, 727, 312, 6798, 13, 50914, 50914, 407, 286, 3031, 1455, 257, 1412, 3877, 300, 727, 21410, 1293, 41674, 293, 13985, 420, 12867, 420, 23351, 24008, 11, 2035, 13, 51364, 51364], "temperature": 0.0, "avg_logprob": -0.10436650117238362, "compression_ratio": 1.514792899408284, "no_caption_prob": 7.296332569239894e-06}, {"id": 124, "seek": 99800, "start": 998.0, "end": 1014.0, "text": " So I extracted the integer parser, which was just parser int to a new function for parsing expressions or different parser, I guess, because it's not really a function as it is declared.", "tokens": [50364, 407, 286, 34086, 264, 24922, 21156, 260, 11, 597, 390, 445, 21156, 260, 560, 281, 257, 777, 2445, 337, 21156, 278, 15277, 420, 819, 21156, 260, 11, 286, 2041, 11, 570, 309, 311, 406, 534, 257, 2445, 382, 309, 307, 15489, 13, 51164, 51164, 663, 311, 558, 13, 1449, 411, 257, 31828, 979, 19866, 307, 257, 979, 19866, 13, 467, 311, 411, 257, 2158, 295, 2010, 979, 19866, 13, 51514, 51514, 865, 11, 309, 307, 1391, 257, 2445, 833, 264, 13376, 11, 457, 1310, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.13013847222488917, "compression_ratio": 1.616504854368932, "no_caption_prob": 5.562111982726492e-05}, {"id": 125, "seek": 99800, "start": 1014.0, "end": 1021.0, "text": " That's right. Just like a JSON decoder is a decoder. It's like a value of type decoder.", "tokens": [50364, 407, 286, 34086, 264, 24922, 21156, 260, 11, 597, 390, 445, 21156, 260, 560, 281, 257, 777, 2445, 337, 21156, 278, 15277, 420, 819, 21156, 260, 11, 286, 2041, 11, 570, 309, 311, 406, 534, 257, 2445, 382, 309, 307, 15489, 13, 51164, 51164, 663, 311, 558, 13, 1449, 411, 257, 31828, 979, 19866, 307, 257, 979, 19866, 13, 467, 311, 411, 257, 2158, 295, 2010, 979, 19866, 13, 51514, 51514, 865, 11, 309, 307, 1391, 257, 2445, 833, 264, 13376, 11, 457, 1310, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.13013847222488917, "compression_ratio": 1.616504854368932, "no_caption_prob": 5.562111982726492e-05}, {"id": 126, "seek": 99800, "start": 1021.0, "end": 1025.0, "text": " Yeah, it is probably a function under the hood, but maybe.", "tokens": [50364, 407, 286, 34086, 264, 24922, 21156, 260, 11, 597, 390, 445, 21156, 260, 560, 281, 257, 777, 2445, 337, 21156, 278, 15277, 420, 819, 21156, 260, 11, 286, 2041, 11, 570, 309, 311, 406, 534, 257, 2445, 382, 309, 307, 15489, 13, 51164, 51164, 663, 311, 558, 13, 1449, 411, 257, 31828, 979, 19866, 307, 257, 979, 19866, 13, 467, 311, 411, 257, 2158, 295, 2010, 979, 19866, 13, 51514, 51514, 865, 11, 309, 307, 1391, 257, 2445, 833, 264, 13376, 11, 457, 1310, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.13013847222488917, "compression_ratio": 1.616504854368932, "no_caption_prob": 5.562111982726492e-05}, {"id": 127, "seek": 102500, "start": 1025.0, "end": 1038.0, "text": " Right. As far as you know, it could be some magical value that just does the right thing, although it's a sort of hint that it must be a function somewhere because you can do map.", "tokens": [50364, 1779, 13, 1018, 1400, 382, 291, 458, 11, 309, 727, 312, 512, 12066, 2158, 300, 445, 775, 264, 558, 551, 11, 4878, 309, 311, 257, 1333, 295, 12075, 300, 309, 1633, 312, 257, 2445, 4079, 570, 291, 393, 360, 4471, 13, 51014, 51014, 400, 498, 291, 393, 360, 4471, 11, 309, 311, 658, 281, 3531, 428, 2445, 4079, 13, 51164, 51164, 407, 300, 307, 257, 665, 935, 13, 4372, 665, 13, 583, 321, 603, 1128, 458, 13, 1449, 13, 51414, 51414, 663, 311, 558, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.134149444237184, "compression_ratio": 1.6069651741293531, "no_caption_prob": 1.670103483775165e-05}, {"id": 128, "seek": 102500, "start": 1038.0, "end": 1041.0, "text": " And if you can do map, it's got to store your function somewhere.", "tokens": [50364, 1779, 13, 1018, 1400, 382, 291, 458, 11, 309, 727, 312, 512, 12066, 2158, 300, 445, 775, 264, 558, 551, 11, 4878, 309, 311, 257, 1333, 295, 12075, 300, 309, 1633, 312, 257, 2445, 4079, 570, 291, 393, 360, 4471, 13, 51014, 51014, 400, 498, 291, 393, 360, 4471, 11, 309, 311, 658, 281, 3531, 428, 2445, 4079, 13, 51164, 51164, 407, 300, 307, 257, 665, 935, 13, 4372, 665, 13, 583, 321, 603, 1128, 458, 13, 1449, 13, 51414, 51414, 663, 311, 558, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.134149444237184, "compression_ratio": 1.6069651741293531, "no_caption_prob": 1.670103483775165e-05}, {"id": 129, "seek": 102500, "start": 1041.0, "end": 1046.0, "text": " So that is a good point. Very good. But we'll never know. Just.", "tokens": [50364, 1779, 13, 1018, 1400, 382, 291, 458, 11, 309, 727, 312, 512, 12066, 2158, 300, 445, 775, 264, 558, 551, 11, 4878, 309, 311, 257, 1333, 295, 12075, 300, 309, 1633, 312, 257, 2445, 4079, 570, 291, 393, 360, 4471, 13, 51014, 51014, 400, 498, 291, 393, 360, 4471, 11, 309, 311, 658, 281, 3531, 428, 2445, 4079, 13, 51164, 51164, 407, 300, 307, 257, 665, 935, 13, 4372, 665, 13, 583, 321, 603, 1128, 458, 13, 1449, 13, 51414, 51414, 663, 311, 558, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.134149444237184, "compression_ratio": 1.6069651741293531, "no_caption_prob": 1.670103483775165e-05}, {"id": 130, "seek": 102500, "start": 1046.0, "end": 1049.0, "text": " That's right.", "tokens": [50364, 1779, 13, 1018, 1400, 382, 291, 458, 11, 309, 727, 312, 512, 12066, 2158, 300, 445, 775, 264, 558, 551, 11, 4878, 309, 311, 257, 1333, 295, 12075, 300, 309, 1633, 312, 257, 2445, 4079, 570, 291, 393, 360, 4471, 13, 51014, 51014, 400, 498, 291, 393, 360, 4471, 11, 309, 311, 658, 281, 3531, 428, 2445, 4079, 13, 51164, 51164, 407, 300, 307, 257, 665, 935, 13, 4372, 665, 13, 583, 321, 603, 1128, 458, 13, 1449, 13, 51414, 51414, 663, 311, 558, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.134149444237184, "compression_ratio": 1.6069651741293531, "no_caption_prob": 1.670103483775165e-05}, {"id": 131, "seek": 104900, "start": 1049.0, "end": 1071.0, "text": " I extracted that to a parser expression, expression parser, sorry, where I say parser dot one off so it could decode either the expression that I tried to decode is either an integer or something else, a float or string, whatever.", "tokens": [50364, 286, 34086, 300, 281, 257, 21156, 260, 6114, 11, 6114, 21156, 260, 11, 2597, 11, 689, 286, 584, 21156, 260, 5893, 472, 766, 370, 309, 727, 979, 1429, 2139, 264, 6114, 300, 286, 3031, 281, 979, 1429, 307, 2139, 364, 24922, 420, 746, 1646, 11, 257, 15706, 420, 6798, 11, 2035, 13, 51464, 51464, 286, 3031, 257, 6798, 293, 300, 2732, 2489, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.17026961027686274, "compression_ratio": 1.713375796178344, "no_caption_prob": 7.253692456288263e-05}, {"id": 132, "seek": 104900, "start": 1071.0, "end": 1073.0, "text": " I tried a string and that worked fine.", "tokens": [50364, 286, 34086, 300, 281, 257, 21156, 260, 6114, 11, 6114, 21156, 260, 11, 2597, 11, 689, 286, 584, 21156, 260, 5893, 472, 766, 370, 309, 727, 979, 1429, 2139, 264, 6114, 300, 286, 3031, 281, 979, 1429, 307, 2139, 364, 24922, 420, 746, 1646, 11, 257, 15706, 420, 6798, 11, 2035, 13, 51464, 51464, 286, 3031, 257, 6798, 293, 300, 2732, 2489, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.17026961027686274, "compression_ratio": 1.713375796178344, "no_caption_prob": 7.253692456288263e-05}, {"id": 133, "seek": 107300, "start": 1073.0, "end": 1089.0, "text": " Right. Right. And this is going to feel very familiar to people to coming from some experience with JSON decoders and other similar techniques in Elm where you just do one of and you you can combine these things together and they'll try something until it succeeds.", "tokens": [50364, 1779, 13, 1779, 13, 400, 341, 307, 516, 281, 841, 588, 4963, 281, 561, 281, 1348, 490, 512, 1752, 365, 31828, 979, 378, 433, 293, 661, 2531, 7512, 294, 2699, 76, 689, 291, 445, 360, 472, 295, 293, 291, 291, 393, 10432, 613, 721, 1214, 293, 436, 603, 853, 746, 1826, 309, 49263, 13, 51164, 51164, 407, 412, 1935, 562, 291, 434, 322, 264, 2055, 3100, 11, 309, 311, 516, 281, 841, 411, 257, 588, 4963, 3410, 13, 51414, 51414], "temperature": 0.0, "avg_logprob": -0.09078531148957043, "compression_ratio": 1.579646017699115, "no_caption_prob": 8.092272764770314e-05}, {"id": 134, "seek": 107300, "start": 1089.0, "end": 1094.0, "text": " So at least when you're on the happy path, it's going to feel like a very familiar concept.", "tokens": [50364, 1779, 13, 1779, 13, 400, 341, 307, 516, 281, 841, 588, 4963, 281, 561, 281, 1348, 490, 512, 1752, 365, 31828, 979, 378, 433, 293, 661, 2531, 7512, 294, 2699, 76, 689, 291, 445, 360, 472, 295, 293, 291, 291, 393, 10432, 613, 721, 1214, 293, 436, 603, 853, 746, 1826, 309, 49263, 13, 51164, 51164, 407, 412, 1935, 562, 291, 434, 322, 264, 2055, 3100, 11, 309, 311, 516, 281, 841, 411, 257, 588, 4963, 3410, 13, 51414, 51414], "temperature": 0.0, "avg_logprob": -0.09078531148957043, "compression_ratio": 1.579646017699115, "no_caption_prob": 8.092272764770314e-05}, {"id": 135, "seek": 109400, "start": 1094.0, "end": 1104.0, "text": " And by the way, what you're talking about of sort of defining something that deals with this one part of the parsing as a separate top level parser.", "tokens": [50364, 400, 538, 264, 636, 11, 437, 291, 434, 1417, 466, 295, 1333, 295, 17827, 746, 300, 11215, 365, 341, 472, 644, 295, 264, 21156, 278, 382, 257, 4994, 1192, 1496, 21156, 260, 13, 50864, 50864, 286, 4418, 257, 688, 295, 565, 3579, 2699, 5638, 5093, 570, 309, 4523, 484, 3934, 5093, 307, 257, 588, 11, 588, 2416, 31256, 300, 575, 257, 688, 295, 819, 3331, 13, 51364, 51364, 407, 411, 732, 1708, 3163, 295, 589, 420, 746, 13, 51564, 51564, 11366, 512, 1230, 13, 865, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.10070544348822699, "compression_ratio": 1.5859030837004404, "no_caption_prob": 2.627377944008913e-05}, {"id": 136, "seek": 109400, "start": 1104.0, "end": 1114.0, "text": " I spent a lot of time writing Elmarkdown because it turns out Markdown is a very, very large specification that has a lot of different cases.", "tokens": [50364, 400, 538, 264, 636, 11, 437, 291, 434, 1417, 466, 295, 1333, 295, 17827, 746, 300, 11215, 365, 341, 472, 644, 295, 264, 21156, 278, 382, 257, 4994, 1192, 1496, 21156, 260, 13, 50864, 50864, 286, 4418, 257, 688, 295, 565, 3579, 2699, 5638, 5093, 570, 309, 4523, 484, 3934, 5093, 307, 257, 588, 11, 588, 2416, 31256, 300, 575, 257, 688, 295, 819, 3331, 13, 51364, 51364, 407, 411, 732, 1708, 3163, 295, 589, 420, 746, 13, 51564, 51564, 11366, 512, 1230, 13, 865, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.10070544348822699, "compression_ratio": 1.5859030837004404, "no_caption_prob": 2.627377944008913e-05}, {"id": 137, "seek": 109400, "start": 1114.0, "end": 1118.0, "text": " So like two days worth of work or something.", "tokens": [50364, 400, 538, 264, 636, 11, 437, 291, 434, 1417, 466, 295, 1333, 295, 17827, 746, 300, 11215, 365, 341, 472, 644, 295, 264, 21156, 278, 382, 257, 4994, 1192, 1496, 21156, 260, 13, 50864, 50864, 286, 4418, 257, 688, 295, 565, 3579, 2699, 5638, 5093, 570, 309, 4523, 484, 3934, 5093, 307, 257, 588, 11, 588, 2416, 31256, 300, 575, 257, 688, 295, 819, 3331, 13, 51364, 51364, 407, 411, 732, 1708, 3163, 295, 589, 420, 746, 13, 51564, 51564, 11366, 512, 1230, 13, 865, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.10070544348822699, "compression_ratio": 1.5859030837004404, "no_caption_prob": 2.627377944008913e-05}, {"id": 138, "seek": 109400, "start": 1118.0, "end": 1123.0, "text": " Times some number. Yeah.", "tokens": [50364, 400, 538, 264, 636, 11, 437, 291, 434, 1417, 466, 295, 1333, 295, 17827, 746, 300, 11215, 365, 341, 472, 644, 295, 264, 21156, 278, 382, 257, 4994, 1192, 1496, 21156, 260, 13, 50864, 50864, 286, 4418, 257, 688, 295, 565, 3579, 2699, 5638, 5093, 570, 309, 4523, 484, 3934, 5093, 307, 257, 588, 11, 588, 2416, 31256, 300, 575, 257, 688, 295, 819, 3331, 13, 51364, 51364, 407, 411, 732, 1708, 3163, 295, 589, 420, 746, 13, 51564, 51564, 11366, 512, 1230, 13, 865, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.10070544348822699, "compression_ratio": 1.5859030837004404, "no_caption_prob": 2.627377944008913e-05}, {"id": 139, "seek": 112300, "start": 1123.0, "end": 1127.0, "text": " Huge number. Yeah, I'd say so.", "tokens": [50364, 37043, 1230, 13, 865, 11, 286, 1116, 584, 370, 13, 50564, 50564, 400, 286, 600, 1352, 300, 281, 312, 4664, 4961, 281, 8947, 281, 976, 1803, 264, 2390, 8474, 337, 428, 2685, 21156, 278, 9274, 11, 570, 300, 311, 264, 551, 307, 11, 294, 257, 636, 11, 294, 512, 3331, 11, 21156, 278, 3417, 1090, 1496, 13, 51264, 51264, 509, 458, 11, 291, 360, 21156, 260, 5893, 472, 295, 21156, 260, 5893, 4471, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.08213430184584397, "compression_ratio": 1.5105263157894737, "no_caption_prob": 4.069341957801953e-05}, {"id": 140, "seek": 112300, "start": 1127.0, "end": 1141.0, "text": " And I've found that to be extremely helpful to extract to give yourself the building blocks for your specific parsing domain, because that's the thing is, in a way, in some cases, parsing feels high level.", "tokens": [50364, 37043, 1230, 13, 865, 11, 286, 1116, 584, 370, 13, 50564, 50564, 400, 286, 600, 1352, 300, 281, 312, 4664, 4961, 281, 8947, 281, 976, 1803, 264, 2390, 8474, 337, 428, 2685, 21156, 278, 9274, 11, 570, 300, 311, 264, 551, 307, 11, 294, 257, 636, 11, 294, 512, 3331, 11, 21156, 278, 3417, 1090, 1496, 13, 51264, 51264, 509, 458, 11, 291, 360, 21156, 260, 5893, 472, 295, 21156, 260, 5893, 4471, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.08213430184584397, "compression_ratio": 1.5105263157894737, "no_caption_prob": 4.069341957801953e-05}, {"id": 141, "seek": 112300, "start": 1141.0, "end": 1145.0, "text": " You know, you do parser dot one of parser dot map.", "tokens": [50364, 37043, 1230, 13, 865, 11, 286, 1116, 584, 370, 13, 50564, 50564, 400, 286, 600, 1352, 300, 281, 312, 4664, 4961, 281, 8947, 281, 976, 1803, 264, 2390, 8474, 337, 428, 2685, 21156, 278, 9274, 11, 570, 300, 311, 264, 551, 307, 11, 294, 257, 636, 11, 294, 512, 3331, 11, 21156, 278, 3417, 1090, 1496, 13, 51264, 51264, 509, 458, 11, 291, 360, 21156, 260, 5893, 472, 295, 21156, 260, 5893, 4471, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.08213430184584397, "compression_ratio": 1.5105263157894737, "no_caption_prob": 4.069341957801953e-05}, {"id": 142, "seek": 114500, "start": 1145.0, "end": 1155.0, "text": " Those things feel very high level, but then there are certain things which we're about to get into, which are very low level where you have to go one character at a time.", "tokens": [50364, 3950, 721, 841, 588, 1090, 1496, 11, 457, 550, 456, 366, 1629, 721, 597, 321, 434, 466, 281, 483, 666, 11, 597, 366, 588, 2295, 1496, 689, 291, 362, 281, 352, 472, 2517, 412, 257, 565, 13, 50864, 50864, 400, 264, 551, 307, 11, 291, 393, 6964, 437, 291, 643, 13, 509, 584, 11, 286, 3172, 286, 632, 746, 300, 727, 48377, 294, 341, 636, 13, 51264, 51264, 5303, 1803, 300, 2290, 13, 407, 291, 1066, 1417, 466, 7939, 322, 264, 2055, 3100, 13, 51514, 51514, 2014, 321, 516, 281, 1792, 766, 264, 2055, 3100, 30, 286, 478, 2633, 370, 46812, 563, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.09675116850951007, "compression_ratio": 1.6653543307086613, "no_caption_prob": 0.00013340789882931858}, {"id": 143, "seek": 114500, "start": 1155.0, "end": 1163.0, "text": " And the thing is, you can define what you need. You say, I wish I had something that could parse in this way.", "tokens": [50364, 3950, 721, 841, 588, 1090, 1496, 11, 457, 550, 456, 366, 1629, 721, 597, 321, 434, 466, 281, 483, 666, 11, 597, 366, 588, 2295, 1496, 689, 291, 362, 281, 352, 472, 2517, 412, 257, 565, 13, 50864, 50864, 400, 264, 551, 307, 11, 291, 393, 6964, 437, 291, 643, 13, 509, 584, 11, 286, 3172, 286, 632, 746, 300, 727, 48377, 294, 341, 636, 13, 51264, 51264, 5303, 1803, 300, 2290, 13, 407, 291, 1066, 1417, 466, 7939, 322, 264, 2055, 3100, 13, 51514, 51514, 2014, 321, 516, 281, 1792, 766, 264, 2055, 3100, 30, 286, 478, 2633, 370, 46812, 563, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.09675116850951007, "compression_ratio": 1.6653543307086613, "no_caption_prob": 0.00013340789882931858}, {"id": 144, "seek": 114500, "start": 1163.0, "end": 1168.0, "text": " Give yourself that tool. So you keep talking about staying on the happy path.", "tokens": [50364, 3950, 721, 841, 588, 1090, 1496, 11, 457, 550, 456, 366, 1629, 721, 597, 321, 434, 466, 281, 483, 666, 11, 597, 366, 588, 2295, 1496, 689, 291, 362, 281, 352, 472, 2517, 412, 257, 565, 13, 50864, 50864, 400, 264, 551, 307, 11, 291, 393, 6964, 437, 291, 643, 13, 509, 584, 11, 286, 3172, 286, 632, 746, 300, 727, 48377, 294, 341, 636, 13, 51264, 51264, 5303, 1803, 300, 2290, 13, 407, 291, 1066, 1417, 466, 7939, 322, 264, 2055, 3100, 13, 51514, 51514, 2014, 321, 516, 281, 1792, 766, 264, 2055, 3100, 30, 286, 478, 2633, 370, 46812, 563, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.09675116850951007, "compression_ratio": 1.6653543307086613, "no_caption_prob": 0.00013340789882931858}, {"id": 145, "seek": 114500, "start": 1168.0, "end": 1174.0, "text": " Are we going to walk off the happy path? I'm feeling so ominous.", "tokens": [50364, 3950, 721, 841, 588, 1090, 1496, 11, 457, 550, 456, 366, 1629, 721, 597, 321, 434, 466, 281, 483, 666, 11, 597, 366, 588, 2295, 1496, 689, 291, 362, 281, 352, 472, 2517, 412, 257, 565, 13, 50864, 50864, 400, 264, 551, 307, 11, 291, 393, 6964, 437, 291, 643, 13, 509, 584, 11, 286, 3172, 286, 632, 746, 300, 727, 48377, 294, 341, 636, 13, 51264, 51264, 5303, 1803, 300, 2290, 13, 407, 291, 1066, 1417, 466, 7939, 322, 264, 2055, 3100, 13, 51514, 51514, 2014, 321, 516, 281, 1792, 766, 264, 2055, 3100, 30, 286, 478, 2633, 370, 46812, 563, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.09675116850951007, "compression_ratio": 1.6653543307086613, "no_caption_prob": 0.00013340789882931858}, {"id": 146, "seek": 117400, "start": 1174.0, "end": 1181.0, "text": " There's a dark cloud off of the happy path. Can you can you hear the thunder?", "tokens": [50364, 821, 311, 257, 2877, 4588, 766, 295, 264, 2055, 3100, 13, 1664, 291, 393, 291, 1568, 264, 19898, 30, 50714, 50714, 708, 307, 264, 1315, 295, 264, 22172, 3100, 30, 1042, 11, 366, 291, 4638, 295, 8371, 428, 1065, 30, 51114, 51114, 286, 603, 980, 452, 10369, 286, 478, 406, 13, 2264, 11, 2264, 13, 51264, 51264], "temperature": 0.0, "avg_logprob": -0.13423195531812765, "compression_ratio": 1.3673469387755102, "no_caption_prob": 7.030646520433947e-05}, {"id": 147, "seek": 117400, "start": 1181.0, "end": 1189.0, "text": " What is the name of the unhappy path? Well, are you afraid of commitment your own?", "tokens": [50364, 821, 311, 257, 2877, 4588, 766, 295, 264, 2055, 3100, 13, 1664, 291, 393, 291, 1568, 264, 19898, 30, 50714, 50714, 708, 307, 264, 1315, 295, 264, 22172, 3100, 30, 1042, 11, 366, 291, 4638, 295, 8371, 428, 1065, 30, 51114, 51114, 286, 603, 980, 452, 10369, 286, 478, 406, 13, 2264, 11, 2264, 13, 51264, 51264], "temperature": 0.0, "avg_logprob": -0.13423195531812765, "compression_ratio": 1.3673469387755102, "no_caption_prob": 7.030646520433947e-05}, {"id": 148, "seek": 117400, "start": 1189.0, "end": 1192.0, "text": " I'll tell my girlfriend I'm not. OK, OK.", "tokens": [50364, 821, 311, 257, 2877, 4588, 766, 295, 264, 2055, 3100, 13, 1664, 291, 393, 291, 1568, 264, 19898, 30, 50714, 50714, 708, 307, 264, 1315, 295, 264, 22172, 3100, 30, 1042, 11, 366, 291, 4638, 295, 8371, 428, 1065, 30, 51114, 51114, 286, 603, 980, 452, 10369, 286, 478, 406, 13, 2264, 11, 2264, 13, 51264, 51264], "temperature": 0.0, "avg_logprob": -0.13423195531812765, "compression_ratio": 1.3673469387755102, "no_caption_prob": 7.030646520433947e-05}, {"id": 149, "seek": 119200, "start": 1192.0, "end": 1208.0, "text": " Well, your experience with parsing may change that because after having spent a lot of time writing parsers, it makes me fear commitment because because when you write a parser,", "tokens": [50364, 1042, 11, 428, 1752, 365, 21156, 278, 815, 1319, 300, 570, 934, 1419, 4418, 257, 688, 295, 565, 3579, 21156, 433, 11, 309, 1669, 385, 4240, 8371, 570, 570, 562, 291, 2464, 257, 21156, 260, 11, 51164, 51164, 382, 2321, 382, 291, 417, 8586, 257, 2158, 11, 382, 2321, 382, 291, 1862, 257, 2517, 11, 291, 600, 7784, 760, 300, 3100, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.060019879630117706, "compression_ratio": 1.6287425149700598, "no_caption_prob": 0.00018519361037760973}, {"id": 150, "seek": 119200, "start": 1208.0, "end": 1215.0, "text": " as soon as you chomp a value, as soon as you eat a character, you've committed down that path.", "tokens": [50364, 1042, 11, 428, 1752, 365, 21156, 278, 815, 1319, 300, 570, 934, 1419, 4418, 257, 688, 295, 565, 3579, 21156, 433, 11, 309, 1669, 385, 4240, 8371, 570, 570, 562, 291, 2464, 257, 21156, 260, 11, 51164, 51164, 382, 2321, 382, 291, 417, 8586, 257, 2158, 11, 382, 2321, 382, 291, 1862, 257, 2517, 11, 291, 600, 7784, 760, 300, 3100, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.060019879630117706, "compression_ratio": 1.6287425149700598, "no_caption_prob": 0.00018519361037760973}, {"id": 151, "seek": 121500, "start": 1215.0, "end": 1229.0, "text": " And so for me, at least when I first started with parsing, it took a while to get used to. And it almost felt like, wait a minute, this is like there's some state here that feels very unfamiliar because you're writing a JSON decoder and you know,", "tokens": [50364, 400, 370, 337, 385, 11, 412, 1935, 562, 286, 700, 1409, 365, 21156, 278, 11, 309, 1890, 257, 1339, 281, 483, 1143, 281, 13, 400, 309, 1920, 2762, 411, 11, 1699, 257, 3456, 11, 341, 307, 411, 456, 311, 512, 1785, 510, 300, 3417, 588, 29415, 570, 291, 434, 3579, 257, 31828, 979, 19866, 293, 291, 458, 11, 51064, 51064, 291, 360, 472, 295, 293, 291, 445, 3507, 257, 3840, 295, 721, 412, 309, 13, 400, 382, 938, 382, 291, 362, 264, 558, 551, 412, 264, 1192, 295, 428, 472, 295, 13, 51414, 51414, 467, 733, 295, 1985, 382, 291, 1116, 2066, 13, 759, 291, 829, 257, 7754, 337, 257, 7576, 1389, 294, 264, 472, 295, 412, 264, 1192, 11, 550, 309, 311, 406, 516, 281, 2045, 264, 661, 2306, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.07578514240406177, "compression_ratio": 1.6797385620915033, "no_caption_prob": 0.0001159034000011161}, {"id": 152, "seek": 121500, "start": 1229.0, "end": 1236.0, "text": " you do one of and you just throw a bunch of things at it. And as long as you have the right thing at the top of your one of.", "tokens": [50364, 400, 370, 337, 385, 11, 412, 1935, 562, 286, 700, 1409, 365, 21156, 278, 11, 309, 1890, 257, 1339, 281, 483, 1143, 281, 13, 400, 309, 1920, 2762, 411, 11, 1699, 257, 3456, 11, 341, 307, 411, 456, 311, 512, 1785, 510, 300, 3417, 588, 29415, 570, 291, 434, 3579, 257, 31828, 979, 19866, 293, 291, 458, 11, 51064, 51064, 291, 360, 472, 295, 293, 291, 445, 3507, 257, 3840, 295, 721, 412, 309, 13, 400, 382, 938, 382, 291, 362, 264, 558, 551, 412, 264, 1192, 295, 428, 472, 295, 13, 51414, 51414, 467, 733, 295, 1985, 382, 291, 1116, 2066, 13, 759, 291, 829, 257, 7754, 337, 257, 7576, 1389, 294, 264, 472, 295, 412, 264, 1192, 11, 550, 309, 311, 406, 516, 281, 2045, 264, 661, 2306, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.07578514240406177, "compression_ratio": 1.6797385620915033, "no_caption_prob": 0.0001159034000011161}, {"id": 153, "seek": 121500, "start": 1236.0, "end": 1244.0, "text": " It kind of works as you'd expect. If you put a succeed for a default case in the one of at the top, then it's not going to hit the other ones.", "tokens": [50364, 400, 370, 337, 385, 11, 412, 1935, 562, 286, 700, 1409, 365, 21156, 278, 11, 309, 1890, 257, 1339, 281, 483, 1143, 281, 13, 400, 309, 1920, 2762, 411, 11, 1699, 257, 3456, 11, 341, 307, 411, 456, 311, 512, 1785, 510, 300, 3417, 588, 29415, 570, 291, 434, 3579, 257, 31828, 979, 19866, 293, 291, 458, 11, 51064, 51064, 291, 360, 472, 295, 293, 291, 445, 3507, 257, 3840, 295, 721, 412, 309, 13, 400, 382, 938, 382, 291, 362, 264, 558, 551, 412, 264, 1192, 295, 428, 472, 295, 13, 51414, 51414, 467, 733, 295, 1985, 382, 291, 1116, 2066, 13, 759, 291, 829, 257, 7754, 337, 257, 7576, 1389, 294, 264, 472, 295, 412, 264, 1192, 11, 550, 309, 311, 406, 516, 281, 2045, 264, 661, 2306, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.07578514240406177, "compression_ratio": 1.6797385620915033, "no_caption_prob": 0.0001159034000011161}, {"id": 154, "seek": 124400, "start": 1244.0, "end": 1249.0, "text": " That's pretty intuitive, but it doesn't feel like there's this state that it's holding on to.", "tokens": [50364, 663, 311, 1238, 21769, 11, 457, 309, 1177, 380, 841, 411, 456, 311, 341, 1785, 300, 309, 311, 5061, 322, 281, 13, 50614, 50614, 583, 382, 2321, 382, 291, 5599, 760, 257, 3100, 365, 21156, 278, 11, 291, 600, 7784, 760, 300, 3100, 13, 50864, 50864, 407, 11, 1338, 11, 300, 311, 437, 286, 5694, 13, 663, 311, 689, 721, 658, 12414, 886, 13, 51164, 51164], "temperature": 0.0, "avg_logprob": -0.1054841630599078, "compression_ratio": 1.4879518072289157, "no_caption_prob": 7.484232628485188e-05}, {"id": 155, "seek": 124400, "start": 1249.0, "end": 1254.0, "text": " But as soon as you commit down a path with parsing, you've committed down that path.", "tokens": [50364, 663, 311, 1238, 21769, 11, 457, 309, 1177, 380, 841, 411, 456, 311, 341, 1785, 300, 309, 311, 5061, 322, 281, 13, 50614, 50614, 583, 382, 2321, 382, 291, 5599, 760, 257, 3100, 365, 21156, 278, 11, 291, 600, 7784, 760, 300, 3100, 13, 50864, 50864, 407, 11, 1338, 11, 300, 311, 437, 286, 5694, 13, 663, 311, 689, 721, 658, 12414, 886, 13, 51164, 51164], "temperature": 0.0, "avg_logprob": -0.1054841630599078, "compression_ratio": 1.4879518072289157, "no_caption_prob": 7.484232628485188e-05}, {"id": 156, "seek": 124400, "start": 1254.0, "end": 1260.0, "text": " So, yeah, that's what I noticed. That's where things got tricky too.", "tokens": [50364, 663, 311, 1238, 21769, 11, 457, 309, 1177, 380, 841, 411, 456, 311, 341, 1785, 300, 309, 311, 5061, 322, 281, 13, 50614, 50614, 583, 382, 2321, 382, 291, 5599, 760, 257, 3100, 365, 21156, 278, 11, 291, 600, 7784, 760, 300, 3100, 13, 50864, 50864, 407, 11, 1338, 11, 300, 311, 437, 286, 5694, 13, 663, 311, 689, 721, 658, 12414, 886, 13, 51164, 51164], "temperature": 0.0, "avg_logprob": -0.1054841630599078, "compression_ratio": 1.4879518072289157, "no_caption_prob": 7.484232628485188e-05}, {"id": 157, "seek": 126000, "start": 1260.0, "end": 1276.0, "text": " When I tried to parse a float, I was trying first trying to parse an integer. The integer failed and then tried floating, but it went fast. The initial numbers is what I'm understanding.", "tokens": [50364, 1133, 286, 3031, 281, 48377, 257, 15706, 11, 286, 390, 1382, 700, 1382, 281, 48377, 364, 24922, 13, 440, 24922, 7612, 293, 550, 3031, 12607, 11, 457, 309, 1437, 2370, 13, 440, 5883, 3547, 307, 437, 286, 478, 3701, 13, 51164, 51164, 407, 291, 366, 4638, 295, 8371, 13, 51314, 51314], "temperature": 0.0, "avg_logprob": -0.17616765004283977, "compression_ratio": 1.489795918367347, "no_caption_prob": 0.00017672842659521848}, {"id": 158, "seek": 126000, "start": 1276.0, "end": 1279.0, "text": " So you are afraid of commitment.", "tokens": [50364, 1133, 286, 3031, 281, 48377, 257, 15706, 11, 286, 390, 1382, 700, 1382, 281, 48377, 364, 24922, 13, 440, 24922, 7612, 293, 550, 3031, 12607, 11, 457, 309, 1437, 2370, 13, 440, 5883, 3547, 307, 437, 286, 478, 3701, 13, 51164, 51164, 407, 291, 366, 4638, 295, 8371, 13, 51314, 51314], "temperature": 0.0, "avg_logprob": -0.17616765004283977, "compression_ratio": 1.489795918367347, "no_caption_prob": 0.00017672842659521848}, {"id": 159, "seek": 127900, "start": 1279.0, "end": 1290.0, "text": " Yeah. So you mentioned chomping. So that's a new word for me. And from what I'm getting is I'm imagining Pacman and I don't know if that's the right mental model.", "tokens": [50364, 865, 13, 407, 291, 2835, 417, 298, 3381, 13, 407, 300, 311, 257, 777, 1349, 337, 385, 13, 400, 490, 437, 286, 478, 1242, 307, 286, 478, 27798, 10702, 1601, 293, 286, 500, 380, 458, 498, 300, 311, 264, 558, 4973, 2316, 13, 50914, 50914, 407, 291, 417, 8586, 11, 291, 1862, 13, 51064, 51064, 343, 7849, 11, 261, 7849, 11, 261, 7849, 11, 261, 7849, 11, 261, 7849, 13, 51114, 51114, 865, 11, 729, 707, 9803, 293, 550, 291, 1116, 1128, 536, 552, 797, 570, 291, 393, 646, 19466, 13, 51464, 51464, 509, 393, 352, 646, 11, 457, 300, 2594, 575, 13954, 5680, 13, 51614, 51614, 663, 311, 558, 13, 7587, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.1318952120267428, "compression_ratio": 1.6394849785407726, "no_caption_prob": 0.0003249712463002652}, {"id": 160, "seek": 127900, "start": 1290.0, "end": 1293.0, "text": " So you chomp, you eat.", "tokens": [50364, 865, 13, 407, 291, 2835, 417, 298, 3381, 13, 407, 300, 311, 257, 777, 1349, 337, 385, 13, 400, 490, 437, 286, 478, 1242, 307, 286, 478, 27798, 10702, 1601, 293, 286, 500, 380, 458, 498, 300, 311, 264, 558, 4973, 2316, 13, 50914, 50914, 407, 291, 417, 8586, 11, 291, 1862, 13, 51064, 51064, 343, 7849, 11, 261, 7849, 11, 261, 7849, 11, 261, 7849, 11, 261, 7849, 13, 51114, 51114, 865, 11, 729, 707, 9803, 293, 550, 291, 1116, 1128, 536, 552, 797, 570, 291, 393, 646, 19466, 13, 51464, 51464, 509, 393, 352, 646, 11, 457, 300, 2594, 575, 13954, 5680, 13, 51614, 51614, 663, 311, 558, 13, 7587, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.1318952120267428, "compression_ratio": 1.6394849785407726, "no_caption_prob": 0.0003249712463002652}, {"id": 161, "seek": 127900, "start": 1293.0, "end": 1294.0, "text": " Waka, waka, waka, waka, waka.", "tokens": [50364, 865, 13, 407, 291, 2835, 417, 298, 3381, 13, 407, 300, 311, 257, 777, 1349, 337, 385, 13, 400, 490, 437, 286, 478, 1242, 307, 286, 478, 27798, 10702, 1601, 293, 286, 500, 380, 458, 498, 300, 311, 264, 558, 4973, 2316, 13, 50914, 50914, 407, 291, 417, 8586, 11, 291, 1862, 13, 51064, 51064, 343, 7849, 11, 261, 7849, 11, 261, 7849, 11, 261, 7849, 11, 261, 7849, 13, 51114, 51114, 865, 11, 729, 707, 9803, 293, 550, 291, 1116, 1128, 536, 552, 797, 570, 291, 393, 646, 19466, 13, 51464, 51464, 509, 393, 352, 646, 11, 457, 300, 2594, 575, 13954, 5680, 13, 51614, 51614, 663, 311, 558, 13, 7587, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.1318952120267428, "compression_ratio": 1.6394849785407726, "no_caption_prob": 0.0003249712463002652}, {"id": 162, "seek": 127900, "start": 1294.0, "end": 1301.0, "text": " Yeah, those little balls and then you'd never see them again because you can backtrack.", "tokens": [50364, 865, 13, 407, 291, 2835, 417, 298, 3381, 13, 407, 300, 311, 257, 777, 1349, 337, 385, 13, 400, 490, 437, 286, 478, 1242, 307, 286, 478, 27798, 10702, 1601, 293, 286, 500, 380, 458, 498, 300, 311, 264, 558, 4973, 2316, 13, 50914, 50914, 407, 291, 417, 8586, 11, 291, 1862, 13, 51064, 51064, 343, 7849, 11, 261, 7849, 11, 261, 7849, 11, 261, 7849, 11, 261, 7849, 13, 51114, 51114, 865, 11, 729, 707, 9803, 293, 550, 291, 1116, 1128, 536, 552, 797, 570, 291, 393, 646, 19466, 13, 51464, 51464, 509, 393, 352, 646, 11, 457, 300, 2594, 575, 13954, 5680, 13, 51614, 51614, 663, 311, 558, 13, 7587, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.1318952120267428, "compression_ratio": 1.6394849785407726, "no_caption_prob": 0.0003249712463002652}, {"id": 163, "seek": 127900, "start": 1301.0, "end": 1304.0, "text": " You can go back, but that ball has disappeared forever.", "tokens": [50364, 865, 13, 407, 291, 2835, 417, 298, 3381, 13, 407, 300, 311, 257, 777, 1349, 337, 385, 13, 400, 490, 437, 286, 478, 1242, 307, 286, 478, 27798, 10702, 1601, 293, 286, 500, 380, 458, 498, 300, 311, 264, 558, 4973, 2316, 13, 50914, 50914, 407, 291, 417, 8586, 11, 291, 1862, 13, 51064, 51064, 343, 7849, 11, 261, 7849, 11, 261, 7849, 11, 261, 7849, 11, 261, 7849, 13, 51114, 51114, 865, 11, 729, 707, 9803, 293, 550, 291, 1116, 1128, 536, 552, 797, 570, 291, 393, 646, 19466, 13, 51464, 51464, 509, 393, 352, 646, 11, 457, 300, 2594, 575, 13954, 5680, 13, 51614, 51614, 663, 311, 558, 13, 7587, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.1318952120267428, "compression_ratio": 1.6394849785407726, "no_caption_prob": 0.0003249712463002652}, {"id": 164, "seek": 127900, "start": 1304.0, "end": 1306.0, "text": " That's right. Exactly.", "tokens": [50364, 865, 13, 407, 291, 2835, 417, 298, 3381, 13, 407, 300, 311, 257, 777, 1349, 337, 385, 13, 400, 490, 437, 286, 478, 1242, 307, 286, 478, 27798, 10702, 1601, 293, 286, 500, 380, 458, 498, 300, 311, 264, 558, 4973, 2316, 13, 50914, 50914, 407, 291, 417, 8586, 11, 291, 1862, 13, 51064, 51064, 343, 7849, 11, 261, 7849, 11, 261, 7849, 11, 261, 7849, 11, 261, 7849, 13, 51114, 51114, 865, 11, 729, 707, 9803, 293, 550, 291, 1116, 1128, 536, 552, 797, 570, 291, 393, 646, 19466, 13, 51464, 51464, 509, 393, 352, 646, 11, 457, 300, 2594, 575, 13954, 5680, 13, 51614, 51614, 663, 311, 558, 13, 7587, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.1318952120267428, "compression_ratio": 1.6394849785407726, "no_caption_prob": 0.0003249712463002652}, {"id": 165, "seek": 130600, "start": 1306.0, "end": 1312.0, "text": " Well, in Elm Parser, the backtracking, you get it back, the ball.", "tokens": [50364, 1042, 11, 294, 2699, 76, 49691, 260, 11, 264, 646, 6903, 14134, 11, 291, 483, 309, 646, 11, 264, 2594, 13, 50664, 50664, 1779, 13, 407, 4317, 498, 264, 7576, 337, 2699, 76, 49691, 260, 645, 646, 6903, 14134, 11, 309, 576, 841, 544, 21769, 13, 51014, 51014, 865, 11, 309, 3417, 3571, 13, 51214, 51214, 865, 11, 562, 291, 434, 700, 2891, 11, 264, 5223, 1062, 2995, 437, 291, 434, 9650, 412, 700, 257, 707, 857, 1101, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.1197671775358269, "compression_ratio": 1.6, "no_caption_prob": 9.027365013025701e-05}, {"id": 166, "seek": 130600, "start": 1312.0, "end": 1319.0, "text": " Right. So perhaps if the default for Elm Parser were backtracking, it would feel more intuitive.", "tokens": [50364, 1042, 11, 294, 2699, 76, 49691, 260, 11, 264, 646, 6903, 14134, 11, 291, 483, 309, 646, 11, 264, 2594, 13, 50664, 50664, 1779, 13, 407, 4317, 498, 264, 7576, 337, 2699, 76, 49691, 260, 645, 646, 6903, 14134, 11, 309, 576, 841, 544, 21769, 13, 51014, 51014, 865, 11, 309, 3417, 3571, 13, 51214, 51214, 865, 11, 562, 291, 434, 700, 2891, 11, 264, 5223, 1062, 2995, 437, 291, 434, 9650, 412, 700, 257, 707, 857, 1101, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.1197671775358269, "compression_ratio": 1.6, "no_caption_prob": 9.027365013025701e-05}, {"id": 167, "seek": 130600, "start": 1319.0, "end": 1323.0, "text": " Yeah, it feels easier.", "tokens": [50364, 1042, 11, 294, 2699, 76, 49691, 260, 11, 264, 646, 6903, 14134, 11, 291, 483, 309, 646, 11, 264, 2594, 13, 50664, 50664, 1779, 13, 407, 4317, 498, 264, 7576, 337, 2699, 76, 49691, 260, 645, 646, 6903, 14134, 11, 309, 576, 841, 544, 21769, 13, 51014, 51014, 865, 11, 309, 3417, 3571, 13, 51214, 51214, 865, 11, 562, 291, 434, 700, 2891, 11, 264, 5223, 1062, 2995, 437, 291, 434, 9650, 412, 700, 257, 707, 857, 1101, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.1197671775358269, "compression_ratio": 1.6, "no_caption_prob": 9.027365013025701e-05}, {"id": 168, "seek": 130600, "start": 1323.0, "end": 1330.0, "text": " Yeah, when you're first starting, the behavior might match what you're expecting at first a little bit better.", "tokens": [50364, 1042, 11, 294, 2699, 76, 49691, 260, 11, 264, 646, 6903, 14134, 11, 291, 483, 309, 646, 11, 264, 2594, 13, 50664, 50664, 1779, 13, 407, 4317, 498, 264, 7576, 337, 2699, 76, 49691, 260, 645, 646, 6903, 14134, 11, 309, 576, 841, 544, 21769, 13, 51014, 51014, 865, 11, 309, 3417, 3571, 13, 51214, 51214, 865, 11, 562, 291, 434, 700, 2891, 11, 264, 5223, 1062, 2995, 437, 291, 434, 9650, 412, 700, 257, 707, 857, 1101, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.1197671775358269, "compression_ratio": 1.6, "no_caption_prob": 9.027365013025701e-05}, {"id": 169, "seek": 133000, "start": 1330.0, "end": 1344.0, "text": " But for performance reasons, it's not a good idea to make everything backtrackable. So by default, you know, there are these helpers like like chomp if and chomp if just says there's chomp if and there's chomp while.", "tokens": [50364, 583, 337, 3389, 4112, 11, 309, 311, 406, 257, 665, 1558, 281, 652, 1203, 646, 19466, 712, 13, 407, 538, 7576, 11, 291, 458, 11, 456, 366, 613, 854, 433, 411, 411, 417, 8586, 498, 293, 417, 8586, 498, 445, 1619, 456, 311, 417, 8586, 498, 293, 456, 311, 417, 8586, 1339, 13, 51064, 51064, 407, 498, 291, 584, 417, 8586, 498, 309, 2516, 257, 2445, 300, 2709, 291, 257, 2167, 2517, 293, 550, 291, 2736, 2074, 420, 7908, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.07028704030173165, "compression_ratio": 1.6482412060301508, "no_caption_prob": 0.0003249740693718195}, {"id": 170, "seek": 133000, "start": 1344.0, "end": 1354.0, "text": " So if you say chomp if it takes a function that gives you a single character and then you return true or false.", "tokens": [50364, 583, 337, 3389, 4112, 11, 309, 311, 406, 257, 665, 1558, 281, 652, 1203, 646, 19466, 712, 13, 407, 538, 7576, 11, 291, 458, 11, 456, 366, 613, 854, 433, 411, 411, 417, 8586, 498, 293, 417, 8586, 498, 445, 1619, 456, 311, 417, 8586, 498, 293, 456, 311, 417, 8586, 1339, 13, 51064, 51064, 407, 498, 291, 584, 417, 8586, 498, 309, 2516, 257, 2445, 300, 2709, 291, 257, 2167, 2517, 293, 550, 291, 2736, 2074, 420, 7908, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.07028704030173165, "compression_ratio": 1.6482412060301508, "no_caption_prob": 0.0003249740693718195}, {"id": 171, "seek": 135400, "start": 1354.0, "end": 1364.0, "text": " If you're parsing a float, maybe you say chomp while it's one, two, three, four, five, six, seven, eight or nine or zero.", "tokens": [50364, 759, 291, 434, 21156, 278, 257, 15706, 11, 1310, 291, 584, 417, 8586, 1339, 309, 311, 472, 11, 732, 11, 1045, 11, 1451, 11, 1732, 11, 2309, 11, 3407, 11, 3180, 420, 4949, 420, 4018, 13, 50864, 50864, 10517, 291, 722, 365, 417, 8586, 498, 472, 807, 4949, 293, 291, 500, 380, 2089, 309, 281, 722, 365, 4018, 420, 567, 3255, 437, 428, 28431, 4474, 366, 13, 51214, 51214, 583, 264, 935, 307, 11, 1564, 291, 600, 1409, 281, 417, 8586, 11, 1564, 291, 417, 8586, 746, 293, 309, 49263, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.05552541331241005, "compression_ratio": 1.6103286384976525, "no_caption_prob": 2.7534839318832383e-05}, {"id": 172, "seek": 135400, "start": 1364.0, "end": 1371.0, "text": " Perhaps you start with chomp if one through nine and you don't allow it to start with zero or who knows what your syntax rules are.", "tokens": [50364, 759, 291, 434, 21156, 278, 257, 15706, 11, 1310, 291, 584, 417, 8586, 1339, 309, 311, 472, 11, 732, 11, 1045, 11, 1451, 11, 1732, 11, 2309, 11, 3407, 11, 3180, 420, 4949, 420, 4018, 13, 50864, 50864, 10517, 291, 722, 365, 417, 8586, 498, 472, 807, 4949, 293, 291, 500, 380, 2089, 309, 281, 722, 365, 4018, 420, 567, 3255, 437, 428, 28431, 4474, 366, 13, 51214, 51214, 583, 264, 935, 307, 11, 1564, 291, 600, 1409, 281, 417, 8586, 11, 1564, 291, 417, 8586, 746, 293, 309, 49263, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.05552541331241005, "compression_ratio": 1.6103286384976525, "no_caption_prob": 2.7534839318832383e-05}, {"id": 173, "seek": 135400, "start": 1371.0, "end": 1378.0, "text": " But the point is, once you've started to chomp, once you chomp something and it succeeds.", "tokens": [50364, 759, 291, 434, 21156, 278, 257, 15706, 11, 1310, 291, 584, 417, 8586, 1339, 309, 311, 472, 11, 732, 11, 1045, 11, 1451, 11, 1732, 11, 2309, 11, 3407, 11, 3180, 420, 4949, 420, 4018, 13, 50864, 50864, 10517, 291, 722, 365, 417, 8586, 498, 472, 807, 4949, 293, 291, 500, 380, 2089, 309, 281, 722, 365, 4018, 420, 567, 3255, 437, 428, 28431, 4474, 366, 13, 51214, 51214, 583, 264, 935, 307, 11, 1564, 291, 600, 1409, 281, 417, 8586, 11, 1564, 291, 417, 8586, 746, 293, 309, 49263, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.05552541331241005, "compression_ratio": 1.6103286384976525, "no_caption_prob": 2.7534839318832383e-05}, {"id": 174, "seek": 137800, "start": 1378.0, "end": 1386.0, "text": " So if you say chomp if and it gets false as the first chomp statement, then it's going to go down a different path.", "tokens": [50364, 407, 498, 291, 584, 417, 8586, 498, 293, 309, 2170, 7908, 382, 264, 700, 417, 8586, 5629, 11, 550, 309, 311, 516, 281, 352, 760, 257, 819, 3100, 13, 50764, 50764, 865, 11, 570, 291, 434, 979, 8616, 437, 30, 1436, 291, 434, 979, 8616, 316, 337, 5197, 11, 597, 307, 406, 5176, 13, 51014, 51014, 1779, 13, 7587, 13, 7587, 13, 407, 498, 291, 434, 1382, 281, 979, 1429, 2139, 257, 15706, 420, 364, 560, 420, 257, 6798, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.09775756654285249, "compression_ratio": 1.5906735751295338, "no_caption_prob": 5.475652142195031e-05}, {"id": 175, "seek": 137800, "start": 1386.0, "end": 1391.0, "text": " Yeah, because you're decoding what? Because you're decoding A for instance, which is not expected.", "tokens": [50364, 407, 498, 291, 584, 417, 8586, 498, 293, 309, 2170, 7908, 382, 264, 700, 417, 8586, 5629, 11, 550, 309, 311, 516, 281, 352, 760, 257, 819, 3100, 13, 50764, 50764, 865, 11, 570, 291, 434, 979, 8616, 437, 30, 1436, 291, 434, 979, 8616, 316, 337, 5197, 11, 597, 307, 406, 5176, 13, 51014, 51014, 1779, 13, 7587, 13, 7587, 13, 407, 498, 291, 434, 1382, 281, 979, 1429, 2139, 257, 15706, 420, 364, 560, 420, 257, 6798, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.09775756654285249, "compression_ratio": 1.5906735751295338, "no_caption_prob": 5.475652142195031e-05}, {"id": 176, "seek": 137800, "start": 1391.0, "end": 1401.0, "text": " Right. Exactly. Exactly. So if you're trying to decode either a float or an int or a string.", "tokens": [50364, 407, 498, 291, 584, 417, 8586, 498, 293, 309, 2170, 7908, 382, 264, 700, 417, 8586, 5629, 11, 550, 309, 311, 516, 281, 352, 760, 257, 819, 3100, 13, 50764, 50764, 865, 11, 570, 291, 434, 979, 8616, 437, 30, 1436, 291, 434, 979, 8616, 316, 337, 5197, 11, 597, 307, 406, 5176, 13, 51014, 51014, 1779, 13, 7587, 13, 7587, 13, 407, 498, 291, 434, 1382, 281, 979, 1429, 2139, 257, 15706, 420, 364, 560, 420, 257, 6798, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.09775756654285249, "compression_ratio": 1.5906735751295338, "no_caption_prob": 5.475652142195031e-05}, {"id": 177, "seek": 140100, "start": 1401.0, "end": 1408.0, "text": " Or it could be a variable and it's just A, like you said, you start trying to parse a float.", "tokens": [50364, 1610, 309, 727, 312, 257, 7006, 293, 309, 311, 445, 316, 11, 411, 291, 848, 11, 291, 722, 1382, 281, 48377, 257, 15706, 13, 50714, 50714, 509, 434, 9650, 512, 1333, 295, 1230, 700, 13, 876, 11, 4177, 11, 309, 311, 406, 257, 1230, 13, 467, 311, 264, 5063, 316, 420, 309, 311, 257, 3834, 6513, 13, 51014, 51014, 1042, 11, 286, 478, 406, 516, 281, 352, 760, 300, 3100, 3602, 13, 400, 300, 390, 428, 700, 1823, 322, 300, 3100, 11, 428, 700, 417, 8586, 13, 51364, 51364, 400, 370, 291, 434, 665, 13, 509, 445, 500, 380, 754, 747, 257, 2167, 1823, 760, 300, 3100, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.04893459166799273, "compression_ratio": 1.6752136752136753, "no_caption_prob": 4.611042095348239e-05}, {"id": 178, "seek": 140100, "start": 1408.0, "end": 1414.0, "text": " You're expecting some sort of number first. Oh, hey, it's not a number. It's the letter A or it's a double quote.", "tokens": [50364, 1610, 309, 727, 312, 257, 7006, 293, 309, 311, 445, 316, 11, 411, 291, 848, 11, 291, 722, 1382, 281, 48377, 257, 15706, 13, 50714, 50714, 509, 434, 9650, 512, 1333, 295, 1230, 700, 13, 876, 11, 4177, 11, 309, 311, 406, 257, 1230, 13, 467, 311, 264, 5063, 316, 420, 309, 311, 257, 3834, 6513, 13, 51014, 51014, 1042, 11, 286, 478, 406, 516, 281, 352, 760, 300, 3100, 3602, 13, 400, 300, 390, 428, 700, 1823, 322, 300, 3100, 11, 428, 700, 417, 8586, 13, 51364, 51364, 400, 370, 291, 434, 665, 13, 509, 445, 500, 380, 754, 747, 257, 2167, 1823, 760, 300, 3100, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.04893459166799273, "compression_ratio": 1.6752136752136753, "no_caption_prob": 4.611042095348239e-05}, {"id": 179, "seek": 140100, "start": 1414.0, "end": 1421.0, "text": " Well, I'm not going to go down that path anymore. And that was your first step on that path, your first chomp.", "tokens": [50364, 1610, 309, 727, 312, 257, 7006, 293, 309, 311, 445, 316, 11, 411, 291, 848, 11, 291, 722, 1382, 281, 48377, 257, 15706, 13, 50714, 50714, 509, 434, 9650, 512, 1333, 295, 1230, 700, 13, 876, 11, 4177, 11, 309, 311, 406, 257, 1230, 13, 467, 311, 264, 5063, 316, 420, 309, 311, 257, 3834, 6513, 13, 51014, 51014, 1042, 11, 286, 478, 406, 516, 281, 352, 760, 300, 3100, 3602, 13, 400, 300, 390, 428, 700, 1823, 322, 300, 3100, 11, 428, 700, 417, 8586, 13, 51364, 51364, 400, 370, 291, 434, 665, 13, 509, 445, 500, 380, 754, 747, 257, 2167, 1823, 760, 300, 3100, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.04893459166799273, "compression_ratio": 1.6752136752136753, "no_caption_prob": 4.611042095348239e-05}, {"id": 180, "seek": 140100, "start": 1421.0, "end": 1425.0, "text": " And so you're good. You just don't even take a single step down that path.", "tokens": [50364, 1610, 309, 727, 312, 257, 7006, 293, 309, 311, 445, 316, 11, 411, 291, 848, 11, 291, 722, 1382, 281, 48377, 257, 15706, 13, 50714, 50714, 509, 434, 9650, 512, 1333, 295, 1230, 700, 13, 876, 11, 4177, 11, 309, 311, 406, 257, 1230, 13, 467, 311, 264, 5063, 316, 420, 309, 311, 257, 3834, 6513, 13, 51014, 51014, 1042, 11, 286, 478, 406, 516, 281, 352, 760, 300, 3100, 3602, 13, 400, 300, 390, 428, 700, 1823, 322, 300, 3100, 11, 428, 700, 417, 8586, 13, 51364, 51364, 400, 370, 291, 434, 665, 13, 509, 445, 500, 380, 754, 747, 257, 2167, 1823, 760, 300, 3100, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.04893459166799273, "compression_ratio": 1.6752136752136753, "no_caption_prob": 4.611042095348239e-05}, {"id": 181, "seek": 142500, "start": 1425.0, "end": 1433.0, "text": " But as you were saying, if you're going to first see if I can parse this into a float and then if that fails,", "tokens": [50364, 583, 382, 291, 645, 1566, 11, 498, 291, 434, 516, 281, 700, 536, 498, 286, 393, 48377, 341, 666, 257, 15706, 293, 550, 498, 300, 18199, 11, 50764, 50764, 550, 291, 434, 516, 281, 536, 498, 291, 393, 48377, 309, 382, 364, 24922, 13, 50964, 50964, 1396, 291, 700, 362, 281, 417, 8586, 3911, 729, 41674, 412, 264, 2863, 295, 264, 15706, 13, 51264, 51264, 407, 291, 722, 417, 298, 3381, 11, 291, 417, 8586, 13, 759, 309, 311, 472, 11, 732, 11, 1045, 11, 1451, 11, 1732, 11, 291, 417, 8586, 472, 11, 291, 417, 8586, 732, 11, 291, 417, 8586, 1045, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.08360967812714754, "compression_ratio": 1.8629441624365481, "no_caption_prob": 6.604910595342517e-05}, {"id": 182, "seek": 142500, "start": 1433.0, "end": 1437.0, "text": " then you're going to see if you can parse it as an integer.", "tokens": [50364, 583, 382, 291, 645, 1566, 11, 498, 291, 434, 516, 281, 700, 536, 498, 286, 393, 48377, 341, 666, 257, 15706, 293, 550, 498, 300, 18199, 11, 50764, 50764, 550, 291, 434, 516, 281, 536, 498, 291, 393, 48377, 309, 382, 364, 24922, 13, 50964, 50964, 1396, 291, 700, 362, 281, 417, 8586, 3911, 729, 41674, 412, 264, 2863, 295, 264, 15706, 13, 51264, 51264, 407, 291, 722, 417, 298, 3381, 11, 291, 417, 8586, 13, 759, 309, 311, 472, 11, 732, 11, 1045, 11, 1451, 11, 1732, 11, 291, 417, 8586, 472, 11, 291, 417, 8586, 732, 11, 291, 417, 8586, 1045, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.08360967812714754, "compression_ratio": 1.8629441624365481, "no_caption_prob": 6.604910595342517e-05}, {"id": 183, "seek": 142500, "start": 1437.0, "end": 1443.0, "text": " Then you first have to chomp onto those integers at the beginning of the float.", "tokens": [50364, 583, 382, 291, 645, 1566, 11, 498, 291, 434, 516, 281, 700, 536, 498, 286, 393, 48377, 341, 666, 257, 15706, 293, 550, 498, 300, 18199, 11, 50764, 50764, 550, 291, 434, 516, 281, 536, 498, 291, 393, 48377, 309, 382, 364, 24922, 13, 50964, 50964, 1396, 291, 700, 362, 281, 417, 8586, 3911, 729, 41674, 412, 264, 2863, 295, 264, 15706, 13, 51264, 51264, 407, 291, 722, 417, 298, 3381, 11, 291, 417, 8586, 13, 759, 309, 311, 472, 11, 732, 11, 1045, 11, 1451, 11, 1732, 11, 291, 417, 8586, 472, 11, 291, 417, 8586, 732, 11, 291, 417, 8586, 1045, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.08360967812714754, "compression_ratio": 1.8629441624365481, "no_caption_prob": 6.604910595342517e-05}, {"id": 184, "seek": 142500, "start": 1443.0, "end": 1452.0, "text": " So you start chomping, you chomp. If it's one, two, three, four, five, you chomp one, you chomp two, you chomp three.", "tokens": [50364, 583, 382, 291, 645, 1566, 11, 498, 291, 434, 516, 281, 700, 536, 498, 286, 393, 48377, 341, 666, 257, 15706, 293, 550, 498, 300, 18199, 11, 50764, 50764, 550, 291, 434, 516, 281, 536, 498, 291, 393, 48377, 309, 382, 364, 24922, 13, 50964, 50964, 1396, 291, 700, 362, 281, 417, 8586, 3911, 729, 41674, 412, 264, 2863, 295, 264, 15706, 13, 51264, 51264, 407, 291, 722, 417, 298, 3381, 11, 291, 417, 8586, 13, 759, 309, 311, 472, 11, 732, 11, 1045, 11, 1451, 11, 1732, 11, 291, 417, 8586, 472, 11, 291, 417, 8586, 732, 11, 291, 417, 8586, 1045, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.08360967812714754, "compression_ratio": 1.8629441624365481, "no_caption_prob": 6.604910595342517e-05}, {"id": 185, "seek": 145200, "start": 1452.0, "end": 1462.0, "text": " And you say, OK, now chomp another numeric character or chomp a dot. And it chomps a dot and you're good.", "tokens": [50364, 400, 291, 584, 11, 2264, 11, 586, 417, 8586, 1071, 7866, 299, 2517, 420, 417, 8586, 257, 5893, 13, 400, 309, 417, 298, 1878, 257, 5893, 293, 291, 434, 665, 13, 50864, 50864, 583, 498, 309, 311, 406, 472, 11, 732, 11, 1045, 11, 1451, 11, 1732, 11, 498, 309, 311, 445, 472, 11, 732, 11, 1045, 293, 291, 434, 1382, 281, 417, 8586, 257, 15706, 11, 51264, 51264, 586, 291, 360, 417, 8586, 472, 11, 417, 8586, 732, 11, 417, 8586, 1045, 13, 400, 550, 291, 2524, 257, 777, 1622, 293, 309, 1619, 11, 1699, 257, 3456, 11, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.0785941522098282, "compression_ratio": 1.7431693989071038, "no_caption_prob": 1.8058333807857707e-05}, {"id": 186, "seek": 145200, "start": 1462.0, "end": 1470.0, "text": " But if it's not one, two, three, four, five, if it's just one, two, three and you're trying to chomp a float,", "tokens": [50364, 400, 291, 584, 11, 2264, 11, 586, 417, 8586, 1071, 7866, 299, 2517, 420, 417, 8586, 257, 5893, 13, 400, 309, 417, 298, 1878, 257, 5893, 293, 291, 434, 665, 13, 50864, 50864, 583, 498, 309, 311, 406, 472, 11, 732, 11, 1045, 11, 1451, 11, 1732, 11, 498, 309, 311, 445, 472, 11, 732, 11, 1045, 293, 291, 434, 1382, 281, 417, 8586, 257, 15706, 11, 51264, 51264, 586, 291, 360, 417, 8586, 472, 11, 417, 8586, 732, 11, 417, 8586, 1045, 13, 400, 550, 291, 2524, 257, 777, 1622, 293, 309, 1619, 11, 1699, 257, 3456, 11, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.0785941522098282, "compression_ratio": 1.7431693989071038, "no_caption_prob": 1.8058333807857707e-05}, {"id": 187, "seek": 145200, "start": 1470.0, "end": 1478.0, "text": " now you do chomp one, chomp two, chomp three. And then you reach a new line and it says, wait a minute,", "tokens": [50364, 400, 291, 584, 11, 2264, 11, 586, 417, 8586, 1071, 7866, 299, 2517, 420, 417, 8586, 257, 5893, 13, 400, 309, 417, 298, 1878, 257, 5893, 293, 291, 434, 665, 13, 50864, 50864, 583, 498, 309, 311, 406, 472, 11, 732, 11, 1045, 11, 1451, 11, 1732, 11, 498, 309, 311, 445, 472, 11, 732, 11, 1045, 293, 291, 434, 1382, 281, 417, 8586, 257, 15706, 11, 51264, 51264, 586, 291, 360, 417, 8586, 472, 11, 417, 8586, 732, 11, 417, 8586, 1045, 13, 400, 550, 291, 2524, 257, 777, 1622, 293, 309, 1619, 11, 1699, 257, 3456, 11, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.0785941522098282, "compression_ratio": 1.7431693989071038, "no_caption_prob": 1.8058333807857707e-05}, {"id": 188, "seek": 147800, "start": 1478.0, "end": 1485.0, "text": " I was expecting either another number or a dot. This isn't a float. And that, OK, that's OK.", "tokens": [50364, 286, 390, 9650, 2139, 1071, 1230, 420, 257, 5893, 13, 639, 1943, 380, 257, 15706, 13, 400, 300, 11, 2264, 11, 300, 311, 2264, 13, 50714, 50714, 467, 18199, 11, 457, 309, 311, 406, 516, 281, 352, 294, 428, 472, 295, 689, 291, 584, 11, 853, 884, 257, 15706, 13, 50964, 50964, 759, 264, 15706, 18199, 11, 853, 21156, 278, 666, 364, 24922, 13, 1726, 516, 281, 1051, 13, 51264, 51264, 1436, 291, 600, 1217, 2726, 257, 1823, 760, 264, 15706, 21156, 260, 3100, 13, 509, 434, 7784, 13, 663, 311, 26659, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.10451377789998792, "compression_ratio": 1.613953488372093, "no_caption_prob": 7.254151569213718e-05}, {"id": 189, "seek": 147800, "start": 1485.0, "end": 1490.0, "text": " It fails, but it's not going to go in your one of where you say, try doing a float.", "tokens": [50364, 286, 390, 9650, 2139, 1071, 1230, 420, 257, 5893, 13, 639, 1943, 380, 257, 15706, 13, 400, 300, 11, 2264, 11, 300, 311, 2264, 13, 50714, 50714, 467, 18199, 11, 457, 309, 311, 406, 516, 281, 352, 294, 428, 472, 295, 689, 291, 584, 11, 853, 884, 257, 15706, 13, 50964, 50964, 759, 264, 15706, 18199, 11, 853, 21156, 278, 666, 364, 24922, 13, 1726, 516, 281, 1051, 13, 51264, 51264, 1436, 291, 600, 1217, 2726, 257, 1823, 760, 264, 15706, 21156, 260, 3100, 13, 509, 434, 7784, 13, 663, 311, 26659, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.10451377789998792, "compression_ratio": 1.613953488372093, "no_caption_prob": 7.254151569213718e-05}, {"id": 190, "seek": 147800, "start": 1490.0, "end": 1496.0, "text": " If the float fails, try parsing into an integer. Not going to happen.", "tokens": [50364, 286, 390, 9650, 2139, 1071, 1230, 420, 257, 5893, 13, 639, 1943, 380, 257, 15706, 13, 400, 300, 11, 2264, 11, 300, 311, 2264, 13, 50714, 50714, 467, 18199, 11, 457, 309, 311, 406, 516, 281, 352, 294, 428, 472, 295, 689, 291, 584, 11, 853, 884, 257, 15706, 13, 50964, 50964, 759, 264, 15706, 18199, 11, 853, 21156, 278, 666, 364, 24922, 13, 1726, 516, 281, 1051, 13, 51264, 51264, 1436, 291, 600, 1217, 2726, 257, 1823, 760, 264, 15706, 21156, 260, 3100, 13, 509, 434, 7784, 13, 663, 311, 26659, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.10451377789998792, "compression_ratio": 1.613953488372093, "no_caption_prob": 7.254151569213718e-05}, {"id": 191, "seek": 147800, "start": 1496.0, "end": 1502.0, "text": " Because you've already taken a step down the float parser path. You're committed. That's committing.", "tokens": [50364, 286, 390, 9650, 2139, 1071, 1230, 420, 257, 5893, 13, 639, 1943, 380, 257, 15706, 13, 400, 300, 11, 2264, 11, 300, 311, 2264, 13, 50714, 50714, 467, 18199, 11, 457, 309, 311, 406, 516, 281, 352, 294, 428, 472, 295, 689, 291, 584, 11, 853, 884, 257, 15706, 13, 50964, 50964, 759, 264, 15706, 18199, 11, 853, 21156, 278, 666, 364, 24922, 13, 1726, 516, 281, 1051, 13, 51264, 51264, 1436, 291, 600, 1217, 2726, 257, 1823, 760, 264, 15706, 21156, 260, 3100, 13, 509, 434, 7784, 13, 663, 311, 26659, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.10451377789998792, "compression_ratio": 1.613953488372093, "no_caption_prob": 7.254151569213718e-05}, {"id": 192, "seek": 150200, "start": 1502.0, "end": 1508.0, "text": " Yeah. So when you use decode that one off, then it's really try this.", "tokens": [50364, 865, 13, 407, 562, 291, 764, 979, 1429, 300, 472, 766, 11, 550, 309, 311, 534, 853, 341, 13, 50664, 50664, 400, 498, 412, 604, 935, 309, 18199, 11, 309, 1177, 380, 1871, 13, 492, 445, 352, 281, 264, 958, 472, 13, 400, 300, 307, 406, 516, 281, 3061, 322, 21156, 260, 13, 51114, 51114, 7587, 13, 407, 300, 311, 437, 311, 29466, 48314, 570, 309, 8137, 309, 294, 257, 1729, 1785, 13, 51314, 51314, 1018, 2321, 382, 604, 417, 298, 3381, 11843, 11, 309, 727, 3061, 420, 309, 727, 7754, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.13610691825548807, "compression_ratio": 1.560747663551402, "no_caption_prob": 9.761163528310135e-05}, {"id": 193, "seek": 150200, "start": 1508.0, "end": 1517.0, "text": " And if at any point it fails, it doesn't matter. We just go to the next one. And that is not going to fail on parser.", "tokens": [50364, 865, 13, 407, 562, 291, 764, 979, 1429, 300, 472, 766, 11, 550, 309, 311, 534, 853, 341, 13, 50664, 50664, 400, 498, 412, 604, 935, 309, 18199, 11, 309, 1177, 380, 1871, 13, 492, 445, 352, 281, 264, 958, 472, 13, 400, 300, 307, 406, 516, 281, 3061, 322, 21156, 260, 13, 51114, 51114, 7587, 13, 407, 300, 311, 437, 311, 29466, 48314, 570, 309, 8137, 309, 294, 257, 1729, 1785, 13, 51314, 51314, 1018, 2321, 382, 604, 417, 298, 3381, 11843, 11, 309, 727, 3061, 420, 309, 727, 7754, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.13610691825548807, "compression_ratio": 1.560747663551402, "no_caption_prob": 9.761163528310135e-05}, {"id": 194, "seek": 150200, "start": 1517.0, "end": 1521.0, "text": " Exactly. So that's what's unintuitive because it puts it in a particular state.", "tokens": [50364, 865, 13, 407, 562, 291, 764, 979, 1429, 300, 472, 766, 11, 550, 309, 311, 534, 853, 341, 13, 50664, 50664, 400, 498, 412, 604, 935, 309, 18199, 11, 309, 1177, 380, 1871, 13, 492, 445, 352, 281, 264, 958, 472, 13, 400, 300, 307, 406, 516, 281, 3061, 322, 21156, 260, 13, 51114, 51114, 7587, 13, 407, 300, 311, 437, 311, 29466, 48314, 570, 309, 8137, 309, 294, 257, 1729, 1785, 13, 51314, 51314, 1018, 2321, 382, 604, 417, 298, 3381, 11843, 11, 309, 727, 3061, 420, 309, 727, 7754, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.13610691825548807, "compression_ratio": 1.560747663551402, "no_caption_prob": 9.761163528310135e-05}, {"id": 195, "seek": 150200, "start": 1521.0, "end": 1527.0, "text": " As soon as any chomping occurs, it could fail or it could succeed.", "tokens": [50364, 865, 13, 407, 562, 291, 764, 979, 1429, 300, 472, 766, 11, 550, 309, 311, 534, 853, 341, 13, 50664, 50664, 400, 498, 412, 604, 935, 309, 18199, 11, 309, 1177, 380, 1871, 13, 492, 445, 352, 281, 264, 958, 472, 13, 400, 300, 307, 406, 516, 281, 3061, 322, 21156, 260, 13, 51114, 51114, 7587, 13, 407, 300, 311, 437, 311, 29466, 48314, 570, 309, 8137, 309, 294, 257, 1729, 1785, 13, 51314, 51314, 1018, 2321, 382, 604, 417, 298, 3381, 11843, 11, 309, 727, 3061, 420, 309, 727, 7754, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.13610691825548807, "compression_ratio": 1.560747663551402, "no_caption_prob": 9.761163528310135e-05}, {"id": 196, "seek": 152700, "start": 1527.0, "end": 1537.0, "text": " But if it partially succeeds, it's not going to hit the other cases in the one of because you've committed down that path.", "tokens": [50364, 583, 498, 309, 18886, 49263, 11, 309, 311, 406, 516, 281, 2045, 264, 661, 3331, 294, 264, 472, 295, 570, 291, 600, 7784, 760, 300, 3100, 13, 50864, 50864, 400, 550, 264, 1379, 979, 19866, 18199, 13, 400, 300, 311, 337, 3389, 4112, 13, 407, 437, 360, 291, 360, 2602, 30, 51214, 51214, 821, 366, 732, 2098, 281, 3109, 341, 13, 1485, 307, 445, 3507, 646, 19466, 712, 322, 309, 13, 51464, 51464, 509, 360, 21156, 260, 5893, 646, 19466, 712, 365, 428, 15706, 21156, 260, 13, 400, 437, 311, 309, 516, 281, 360, 30, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.057170289935487686, "compression_ratio": 1.6153846153846154, "no_caption_prob": 6.302526890067384e-05}, {"id": 197, "seek": 152700, "start": 1537.0, "end": 1544.0, "text": " And then the whole decoder fails. And that's for performance reasons. So what do you do instead?", "tokens": [50364, 583, 498, 309, 18886, 49263, 11, 309, 311, 406, 516, 281, 2045, 264, 661, 3331, 294, 264, 472, 295, 570, 291, 600, 7784, 760, 300, 3100, 13, 50864, 50864, 400, 550, 264, 1379, 979, 19866, 18199, 13, 400, 300, 311, 337, 3389, 4112, 13, 407, 437, 360, 291, 360, 2602, 30, 51214, 51214, 821, 366, 732, 2098, 281, 3109, 341, 13, 1485, 307, 445, 3507, 646, 19466, 712, 322, 309, 13, 51464, 51464, 509, 360, 21156, 260, 5893, 646, 19466, 712, 365, 428, 15706, 21156, 260, 13, 400, 437, 311, 309, 516, 281, 360, 30, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.057170289935487686, "compression_ratio": 1.6153846153846154, "no_caption_prob": 6.302526890067384e-05}, {"id": 198, "seek": 152700, "start": 1544.0, "end": 1549.0, "text": " There are two ways to approach this. One is just throw backtrackable on it.", "tokens": [50364, 583, 498, 309, 18886, 49263, 11, 309, 311, 406, 516, 281, 2045, 264, 661, 3331, 294, 264, 472, 295, 570, 291, 600, 7784, 760, 300, 3100, 13, 50864, 50864, 400, 550, 264, 1379, 979, 19866, 18199, 13, 400, 300, 311, 337, 3389, 4112, 13, 407, 437, 360, 291, 360, 2602, 30, 51214, 51214, 821, 366, 732, 2098, 281, 3109, 341, 13, 1485, 307, 445, 3507, 646, 19466, 712, 322, 309, 13, 51464, 51464, 509, 360, 21156, 260, 5893, 646, 19466, 712, 365, 428, 15706, 21156, 260, 13, 400, 437, 311, 309, 516, 281, 360, 30, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.057170289935487686, "compression_ratio": 1.6153846153846154, "no_caption_prob": 6.302526890067384e-05}, {"id": 199, "seek": 152700, "start": 1549.0, "end": 1554.0, "text": " You do parser dot backtrackable with your float parser. And what's it going to do?", "tokens": [50364, 583, 498, 309, 18886, 49263, 11, 309, 311, 406, 516, 281, 2045, 264, 661, 3331, 294, 264, 472, 295, 570, 291, 600, 7784, 760, 300, 3100, 13, 50864, 50864, 400, 550, 264, 1379, 979, 19866, 18199, 13, 400, 300, 311, 337, 3389, 4112, 13, 407, 437, 360, 291, 360, 2602, 30, 51214, 51214, 821, 366, 732, 2098, 281, 3109, 341, 13, 1485, 307, 445, 3507, 646, 19466, 712, 322, 309, 13, 51464, 51464, 509, 360, 21156, 260, 5893, 646, 19466, 712, 365, 428, 15706, 21156, 260, 13, 400, 437, 311, 309, 516, 281, 360, 30, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.057170289935487686, "compression_ratio": 1.6153846153846154, "no_caption_prob": 6.302526890067384e-05}, {"id": 200, "seek": 155400, "start": 1554.0, "end": 1562.0, "text": " It's going to eat the one, eat the two, eat the three. It finds an unexpected character, a new line.", "tokens": [50364, 467, 311, 516, 281, 1862, 264, 472, 11, 1862, 264, 732, 11, 1862, 264, 1045, 13, 467, 10704, 364, 13106, 2517, 11, 257, 777, 1622, 13, 50764, 50764, 7156, 295, 257, 5893, 420, 544, 4342, 420, 544, 29054, 4342, 13, 400, 309, 1619, 11, 1954, 11, 286, 7612, 281, 979, 1429, 341, 11, 457, 309, 311, 646, 19466, 712, 13, 51364, 51364, 407, 586, 309, 517, 12199, 82, 1080, 8371, 13, 467, 393, 352, 646, 322, 264, 3100, 300, 309, 311, 1217, 2726, 257, 1326, 4439, 760, 570, 309, 311, 646, 19466, 712, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.0710555631287244, "compression_ratio": 1.691588785046729, "no_caption_prob": 5.144069291418418e-05}, {"id": 201, "seek": 155400, "start": 1562.0, "end": 1574.0, "text": " Instead of a dot or more characters or more numerical characters. And it says, oh, I failed to decode this, but it's backtrackable.", "tokens": [50364, 467, 311, 516, 281, 1862, 264, 472, 11, 1862, 264, 732, 11, 1862, 264, 1045, 13, 467, 10704, 364, 13106, 2517, 11, 257, 777, 1622, 13, 50764, 50764, 7156, 295, 257, 5893, 420, 544, 4342, 420, 544, 29054, 4342, 13, 400, 309, 1619, 11, 1954, 11, 286, 7612, 281, 979, 1429, 341, 11, 457, 309, 311, 646, 19466, 712, 13, 51364, 51364, 407, 586, 309, 517, 12199, 82, 1080, 8371, 13, 467, 393, 352, 646, 322, 264, 3100, 300, 309, 311, 1217, 2726, 257, 1326, 4439, 760, 570, 309, 311, 646, 19466, 712, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.0710555631287244, "compression_ratio": 1.691588785046729, "no_caption_prob": 5.144069291418418e-05}, {"id": 202, "seek": 155400, "start": 1574.0, "end": 1583.0, "text": " So now it unwinds its commitment. It can go back on the path that it's already taken a few steps down because it's backtrackable.", "tokens": [50364, 467, 311, 516, 281, 1862, 264, 472, 11, 1862, 264, 732, 11, 1862, 264, 1045, 13, 467, 10704, 364, 13106, 2517, 11, 257, 777, 1622, 13, 50764, 50764, 7156, 295, 257, 5893, 420, 544, 4342, 420, 544, 29054, 4342, 13, 400, 309, 1619, 11, 1954, 11, 286, 7612, 281, 979, 1429, 341, 11, 457, 309, 311, 646, 19466, 712, 13, 51364, 51364, 407, 586, 309, 517, 12199, 82, 1080, 8371, 13, 467, 393, 352, 646, 322, 264, 3100, 300, 309, 311, 1217, 2726, 257, 1326, 4439, 760, 570, 309, 311, 646, 19466, 712, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.0710555631287244, "compression_ratio": 1.691588785046729, "no_caption_prob": 5.144069291418418e-05}, {"id": 203, "seek": 158300, "start": 1583.0, "end": 1588.0, "text": " And now it can try your integer parser. Yeah, but that is less efficient.", "tokens": [50364, 400, 586, 309, 393, 853, 428, 24922, 21156, 260, 13, 865, 11, 457, 300, 307, 1570, 7148, 13, 50614, 50614, 583, 300, 311, 1570, 7148, 570, 586, 309, 311, 15251, 807, 264, 472, 11, 264, 732, 11, 264, 1045, 11, 4461, 867, 4342, 309, 311, 2978, 281, 294, 1668, 281, 1520, 498, 309, 311, 257, 15706, 13, 51064, 51064, 823, 309, 575, 281, 32676, 729, 4342, 281, 1520, 498, 309, 311, 364, 24922, 13, 51314, 51314, 865, 13, 2264, 11, 370, 309, 311, 588, 1021, 337, 3389, 4112, 281, 5042, 646, 6903, 14134, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.06802387140235122, "compression_ratio": 1.7022222222222223, "no_caption_prob": 4.611213807947934e-05}, {"id": 204, "seek": 158300, "start": 1588.0, "end": 1597.0, "text": " But that's less efficient because now it's stepped through the one, the two, the three, however many characters it's needed to in order to check if it's a float.", "tokens": [50364, 400, 586, 309, 393, 853, 428, 24922, 21156, 260, 13, 865, 11, 457, 300, 307, 1570, 7148, 13, 50614, 50614, 583, 300, 311, 1570, 7148, 570, 586, 309, 311, 15251, 807, 264, 472, 11, 264, 732, 11, 264, 1045, 11, 4461, 867, 4342, 309, 311, 2978, 281, 294, 1668, 281, 1520, 498, 309, 311, 257, 15706, 13, 51064, 51064, 823, 309, 575, 281, 32676, 729, 4342, 281, 1520, 498, 309, 311, 364, 24922, 13, 51314, 51314, 865, 13, 2264, 11, 370, 309, 311, 588, 1021, 337, 3389, 4112, 281, 5042, 646, 6903, 14134, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.06802387140235122, "compression_ratio": 1.7022222222222223, "no_caption_prob": 4.611213807947934e-05}, {"id": 205, "seek": 158300, "start": 1597.0, "end": 1602.0, "text": " Now it has to revisit those characters to check if it's an integer.", "tokens": [50364, 400, 586, 309, 393, 853, 428, 24922, 21156, 260, 13, 865, 11, 457, 300, 307, 1570, 7148, 13, 50614, 50614, 583, 300, 311, 1570, 7148, 570, 586, 309, 311, 15251, 807, 264, 472, 11, 264, 732, 11, 264, 1045, 11, 4461, 867, 4342, 309, 311, 2978, 281, 294, 1668, 281, 1520, 498, 309, 311, 257, 15706, 13, 51064, 51064, 823, 309, 575, 281, 32676, 729, 4342, 281, 1520, 498, 309, 311, 364, 24922, 13, 51314, 51314, 865, 13, 2264, 11, 370, 309, 311, 588, 1021, 337, 3389, 4112, 281, 5042, 646, 6903, 14134, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.06802387140235122, "compression_ratio": 1.7022222222222223, "no_caption_prob": 4.611213807947934e-05}, {"id": 206, "seek": 158300, "start": 1602.0, "end": 1608.0, "text": " Yeah. OK, so it's very important for performance reasons to avoid backtracking.", "tokens": [50364, 400, 586, 309, 393, 853, 428, 24922, 21156, 260, 13, 865, 11, 457, 300, 307, 1570, 7148, 13, 50614, 50614, 583, 300, 311, 1570, 7148, 570, 586, 309, 311, 15251, 807, 264, 472, 11, 264, 732, 11, 264, 1045, 11, 4461, 867, 4342, 309, 311, 2978, 281, 294, 1668, 281, 1520, 498, 309, 311, 257, 15706, 13, 51064, 51064, 823, 309, 575, 281, 32676, 729, 4342, 281, 1520, 498, 309, 311, 364, 24922, 13, 51314, 51314, 865, 13, 2264, 11, 370, 309, 311, 588, 1021, 337, 3389, 4112, 281, 5042, 646, 6903, 14134, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.06802387140235122, "compression_ratio": 1.7022222222222223, "no_caption_prob": 4.611213807947934e-05}, {"id": 207, "seek": 160800, "start": 1608.0, "end": 1616.0, "text": " So how would we write that same parser? We could solve your problem and get your parser working with backtrackable, right? That would work fine.", "tokens": [50364, 407, 577, 576, 321, 2464, 300, 912, 21156, 260, 30, 492, 727, 5039, 428, 1154, 293, 483, 428, 21156, 260, 1364, 365, 646, 19466, 712, 11, 558, 30, 663, 576, 589, 2489, 13, 50764, 50764, 583, 309, 311, 406, 16252, 337, 3389, 13, 407, 577, 360, 321, 5039, 300, 1154, 1553, 1228, 646, 19466, 712, 30, 51064, 51064, 286, 478, 27798, 490, 264, 5110, 300, 286, 1866, 307, 300, 291, 576, 853, 281, 48377, 364, 24922, 11, 550, 2066, 7263, 257, 5893, 293, 550, 512, 3547, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.04886896007663601, "compression_ratio": 1.625531914893617, "no_caption_prob": 4.832359991269186e-05}, {"id": 208, "seek": 160800, "start": 1616.0, "end": 1622.0, "text": " But it's not optimal for performance. So how do we solve that problem without using backtrackable?", "tokens": [50364, 407, 577, 576, 321, 2464, 300, 912, 21156, 260, 30, 492, 727, 5039, 428, 1154, 293, 483, 428, 21156, 260, 1364, 365, 646, 19466, 712, 11, 558, 30, 663, 576, 589, 2489, 13, 50764, 50764, 583, 309, 311, 406, 16252, 337, 3389, 13, 407, 577, 360, 321, 5039, 300, 1154, 1553, 1228, 646, 19466, 712, 30, 51064, 51064, 286, 478, 27798, 490, 264, 5110, 300, 286, 1866, 307, 300, 291, 576, 853, 281, 48377, 364, 24922, 11, 550, 2066, 7263, 257, 5893, 293, 550, 512, 3547, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.04886896007663601, "compression_ratio": 1.625531914893617, "no_caption_prob": 4.832359991269186e-05}, {"id": 209, "seek": 160800, "start": 1622.0, "end": 1634.0, "text": " I'm imagining from the examples that I saw is that you would try to parse an integer, then expect potentially a dot and then some numbers.", "tokens": [50364, 407, 577, 576, 321, 2464, 300, 912, 21156, 260, 30, 492, 727, 5039, 428, 1154, 293, 483, 428, 21156, 260, 1364, 365, 646, 19466, 712, 11, 558, 30, 663, 576, 589, 2489, 13, 50764, 50764, 583, 309, 311, 406, 16252, 337, 3389, 13, 407, 577, 360, 321, 5039, 300, 1154, 1553, 1228, 646, 19466, 712, 30, 51064, 51064, 286, 478, 27798, 490, 264, 5110, 300, 286, 1866, 307, 300, 291, 576, 853, 281, 48377, 364, 24922, 11, 550, 2066, 7263, 257, 5893, 293, 550, 512, 3547, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.04886896007663601, "compression_ratio": 1.625531914893617, "no_caption_prob": 4.832359991269186e-05}, {"id": 210, "seek": 163400, "start": 1634.0, "end": 1639.0, "text": " And if you find the dots and some numbers, then it's a float and otherwise it's an integer.", "tokens": [50364, 400, 498, 291, 915, 264, 15026, 293, 512, 3547, 11, 550, 309, 311, 257, 15706, 293, 5911, 309, 311, 364, 24922, 13, 50614, 50614, 407, 294, 1293, 3331, 11, 291, 853, 281, 360, 264, 41674, 13, 400, 550, 498, 309, 311, 412, 1935, 364, 24922, 11, 550, 853, 281, 352, 264, 2857, 3100, 295, 5006, 257, 5893, 13, 51064, 51064, 400, 498, 300, 1177, 380, 589, 11, 550, 309, 311, 364, 24922, 13, 7587, 13, 663, 311, 2293, 309, 13, 865, 11, 291, 658, 309, 13, 51314, 51314, 407, 3410, 671, 11, 291, 458, 11, 3410, 671, 11, 309, 311, 406, 370, 3997, 281, 767, 411, 2464, 264, 3089, 337, 300, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.07309759896377037, "compression_ratio": 1.8181818181818181, "no_caption_prob": 1.8631199054652825e-05}, {"id": 211, "seek": 163400, "start": 1639.0, "end": 1648.0, "text": " So in both cases, you try to do the integers. And then if it's at least an integer, then try to go the extra path of finding a dot.", "tokens": [50364, 400, 498, 291, 915, 264, 15026, 293, 512, 3547, 11, 550, 309, 311, 257, 15706, 293, 5911, 309, 311, 364, 24922, 13, 50614, 50614, 407, 294, 1293, 3331, 11, 291, 853, 281, 360, 264, 41674, 13, 400, 550, 498, 309, 311, 412, 1935, 364, 24922, 11, 550, 853, 281, 352, 264, 2857, 3100, 295, 5006, 257, 5893, 13, 51064, 51064, 400, 498, 300, 1177, 380, 589, 11, 550, 309, 311, 364, 24922, 13, 7587, 13, 663, 311, 2293, 309, 13, 865, 11, 291, 658, 309, 13, 51314, 51314, 407, 3410, 671, 11, 291, 458, 11, 3410, 671, 11, 309, 311, 406, 370, 3997, 281, 767, 411, 2464, 264, 3089, 337, 300, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.07309759896377037, "compression_ratio": 1.8181818181818181, "no_caption_prob": 1.8631199054652825e-05}, {"id": 212, "seek": 163400, "start": 1648.0, "end": 1653.0, "text": " And if that doesn't work, then it's an integer. Exactly. That's exactly it. Yeah, you got it.", "tokens": [50364, 400, 498, 291, 915, 264, 15026, 293, 512, 3547, 11, 550, 309, 311, 257, 15706, 293, 5911, 309, 311, 364, 24922, 13, 50614, 50614, 407, 294, 1293, 3331, 11, 291, 853, 281, 360, 264, 41674, 13, 400, 550, 498, 309, 311, 412, 1935, 364, 24922, 11, 550, 853, 281, 352, 264, 2857, 3100, 295, 5006, 257, 5893, 13, 51064, 51064, 400, 498, 300, 1177, 380, 589, 11, 550, 309, 311, 364, 24922, 13, 7587, 13, 663, 311, 2293, 309, 13, 865, 11, 291, 658, 309, 13, 51314, 51314, 407, 3410, 671, 11, 291, 458, 11, 3410, 671, 11, 309, 311, 406, 370, 3997, 281, 767, 411, 2464, 264, 3089, 337, 300, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.07309759896377037, "compression_ratio": 1.8181818181818181, "no_caption_prob": 1.8631199054652825e-05}, {"id": 213, "seek": 163400, "start": 1653.0, "end": 1661.0, "text": " So conceptually, you know, conceptually, it's not so complex to actually like write the code for that.", "tokens": [50364, 400, 498, 291, 915, 264, 15026, 293, 512, 3547, 11, 550, 309, 311, 257, 15706, 293, 5911, 309, 311, 364, 24922, 13, 50614, 50614, 407, 294, 1293, 3331, 11, 291, 853, 281, 360, 264, 41674, 13, 400, 550, 498, 309, 311, 412, 1935, 364, 24922, 11, 550, 853, 281, 352, 264, 2857, 3100, 295, 5006, 257, 5893, 13, 51064, 51064, 400, 498, 300, 1177, 380, 589, 11, 550, 309, 311, 364, 24922, 13, 7587, 13, 663, 311, 2293, 309, 13, 865, 11, 291, 658, 309, 13, 51314, 51314, 407, 3410, 671, 11, 291, 458, 11, 3410, 671, 11, 309, 311, 406, 370, 3997, 281, 767, 411, 2464, 264, 3089, 337, 300, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.07309759896377037, "compression_ratio": 1.8181818181818181, "no_caption_prob": 1.8631199054652825e-05}, {"id": 214, "seek": 166100, "start": 1661.0, "end": 1672.0, "text": " It takes a little practice. But just if you if you can wrap your head around what you need to do conceptually to avoid backtracking, then you're half of the way there, you know.", "tokens": [50364, 467, 2516, 257, 707, 3124, 13, 583, 445, 498, 291, 498, 291, 393, 7019, 428, 1378, 926, 437, 291, 643, 281, 360, 3410, 671, 281, 5042, 646, 6903, 14134, 11, 550, 291, 434, 1922, 295, 264, 636, 456, 11, 291, 458, 13, 50914, 50914, 400, 264, 3410, 307, 2293, 437, 291, 7619, 13, 509, 291, 362, 257, 21156, 260, 689, 2602, 295, 472, 295, 337, 428, 21156, 278, 11, 689, 291, 584, 11, 286, 2066, 341, 6114, 281, 312, 2139, 257, 15706, 420, 364, 24922, 420, 293, 291, 434, 884, 472, 493, 337, 1184, 295, 729, 3331, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.08348657570633233, "compression_ratio": 1.6666666666666667, "no_caption_prob": 5.6494856835342944e-05}, {"id": 215, "seek": 166100, "start": 1672.0, "end": 1688.0, "text": " And the concept is exactly what you described. You you have a parser where instead of one of for your parsing, where you say, I expect this expression to be either a float or an integer or and you're doing one up for each of those cases.", "tokens": [50364, 467, 2516, 257, 707, 3124, 13, 583, 445, 498, 291, 498, 291, 393, 7019, 428, 1378, 926, 437, 291, 643, 281, 360, 3410, 671, 281, 5042, 646, 6903, 14134, 11, 550, 291, 434, 1922, 295, 264, 636, 456, 11, 291, 458, 13, 50914, 50914, 400, 264, 3410, 307, 2293, 437, 291, 7619, 13, 509, 291, 362, 257, 21156, 260, 689, 2602, 295, 472, 295, 337, 428, 21156, 278, 11, 689, 291, 584, 11, 286, 2066, 341, 6114, 281, 312, 2139, 257, 15706, 420, 364, 24922, 420, 293, 291, 434, 884, 472, 493, 337, 1184, 295, 729, 3331, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.08348657570633233, "compression_ratio": 1.6666666666666667, "no_caption_prob": 5.6494856835342944e-05}, {"id": 216, "seek": 168800, "start": 1688.0, "end": 1697.0, "text": " You know, a one of list that contains each of those parsers. Instead of that, you're going to say try parsing it as an integer or float.", "tokens": [50364, 509, 458, 11, 257, 472, 295, 1329, 300, 8306, 1184, 295, 729, 21156, 433, 13, 7156, 295, 300, 11, 291, 434, 516, 281, 584, 853, 21156, 278, 309, 382, 364, 24922, 420, 15706, 13, 50814, 50814, 509, 362, 364, 24922, 420, 15706, 21156, 260, 13, 400, 437, 309, 311, 516, 281, 360, 307, 309, 311, 516, 281, 362, 257, 2689, 21156, 260, 300, 27986, 382, 867, 4342, 382, 309, 393, 1826, 309, 10704, 512, 1333, 295, 6358, 11, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.03874751998157036, "compression_ratio": 1.7081081081081082, "no_caption_prob": 1.078323202818865e-05}, {"id": 217, "seek": 168800, "start": 1697.0, "end": 1711.0, "text": " You have an integer or float parser. And what it's going to do is it's going to have a common parser that captures as many characters as it can until it finds some sort of signal,", "tokens": [50364, 509, 458, 11, 257, 472, 295, 1329, 300, 8306, 1184, 295, 729, 21156, 433, 13, 7156, 295, 300, 11, 291, 434, 516, 281, 584, 853, 21156, 278, 309, 382, 364, 24922, 420, 15706, 13, 50814, 50814, 509, 362, 364, 24922, 420, 15706, 21156, 260, 13, 400, 437, 309, 311, 516, 281, 360, 307, 309, 311, 516, 281, 362, 257, 2689, 21156, 260, 300, 27986, 382, 867, 4342, 382, 309, 393, 1826, 309, 10704, 512, 1333, 295, 6358, 11, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.03874751998157036, "compression_ratio": 1.7081081081081082, "no_caption_prob": 1.078323202818865e-05}, {"id": 218, "seek": 171100, "start": 1711.0, "end": 1721.0, "text": " some sort of signal that tells it it's done and it's an integer like a new line would tell it, OK, this part of the source code that's an integer is done.", "tokens": [50364, 512, 1333, 295, 6358, 300, 5112, 309, 309, 311, 1096, 293, 309, 311, 364, 24922, 411, 257, 777, 1622, 576, 980, 309, 11, 2264, 11, 341, 644, 295, 264, 4009, 3089, 300, 311, 364, 24922, 307, 1096, 13, 50864, 50864, 509, 393, 1286, 322, 281, 21156, 278, 264, 958, 551, 293, 321, 434, 439, 1096, 510, 13, 1692, 311, 264, 2158, 13, 51114, 51114, 407, 1936, 11, 291, 853, 281, 1594, 1214, 264, 721, 300, 722, 365, 264, 912, 16944, 13, 51414, 51414, 7587, 11, 2293, 13, 400, 550, 291, 360, 257, 29357, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.07382008980731575, "compression_ratio": 1.6051502145922747, "no_caption_prob": 3.6478177207754925e-05}, {"id": 219, "seek": 171100, "start": 1721.0, "end": 1726.0, "text": " You can move on to parsing the next thing and we're all done here. Here's the value.", "tokens": [50364, 512, 1333, 295, 6358, 300, 5112, 309, 309, 311, 1096, 293, 309, 311, 364, 24922, 411, 257, 777, 1622, 576, 980, 309, 11, 2264, 11, 341, 644, 295, 264, 4009, 3089, 300, 311, 364, 24922, 307, 1096, 13, 50864, 50864, 509, 393, 1286, 322, 281, 21156, 278, 264, 958, 551, 293, 321, 434, 439, 1096, 510, 13, 1692, 311, 264, 2158, 13, 51114, 51114, 407, 1936, 11, 291, 853, 281, 1594, 1214, 264, 721, 300, 722, 365, 264, 912, 16944, 13, 51414, 51414, 7587, 11, 2293, 13, 400, 550, 291, 360, 257, 29357, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.07382008980731575, "compression_ratio": 1.6051502145922747, "no_caption_prob": 3.6478177207754925e-05}, {"id": 220, "seek": 171100, "start": 1726.0, "end": 1732.0, "text": " So basically, you try to group together the things that start with the same symbols.", "tokens": [50364, 512, 1333, 295, 6358, 300, 5112, 309, 309, 311, 1096, 293, 309, 311, 364, 24922, 411, 257, 777, 1622, 576, 980, 309, 11, 2264, 11, 341, 644, 295, 264, 4009, 3089, 300, 311, 364, 24922, 307, 1096, 13, 50864, 50864, 509, 393, 1286, 322, 281, 21156, 278, 264, 958, 551, 293, 321, 434, 439, 1096, 510, 13, 1692, 311, 264, 2158, 13, 51114, 51114, 407, 1936, 11, 291, 853, 281, 1594, 1214, 264, 721, 300, 722, 365, 264, 912, 16944, 13, 51414, 51414, 7587, 11, 2293, 13, 400, 550, 291, 360, 257, 29357, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.07382008980731575, "compression_ratio": 1.6051502145922747, "no_caption_prob": 3.6478177207754925e-05}, {"id": 221, "seek": 171100, "start": 1732.0, "end": 1735.0, "text": " Exactly, exactly. And then you do a continuation.", "tokens": [50364, 512, 1333, 295, 6358, 300, 5112, 309, 309, 311, 1096, 293, 309, 311, 364, 24922, 411, 257, 777, 1622, 576, 980, 309, 11, 2264, 11, 341, 644, 295, 264, 4009, 3089, 300, 311, 364, 24922, 307, 1096, 13, 50864, 50864, 509, 393, 1286, 322, 281, 21156, 278, 264, 958, 551, 293, 321, 434, 439, 1096, 510, 13, 1692, 311, 264, 2158, 13, 51114, 51114, 407, 1936, 11, 291, 853, 281, 1594, 1214, 264, 721, 300, 722, 365, 264, 912, 16944, 13, 51414, 51414, 7587, 11, 2293, 13, 400, 550, 291, 360, 257, 29357, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.07382008980731575, "compression_ratio": 1.6051502145922747, "no_caption_prob": 3.6478177207754925e-05}, {"id": 222, "seek": 173500, "start": 1735.0, "end": 1741.0, "text": " So you branch off. So you have a single parser that starts out capturing all of the integers.", "tokens": [50364, 407, 291, 9819, 766, 13, 407, 291, 362, 257, 2167, 21156, 260, 300, 3719, 484, 23384, 439, 295, 264, 41674, 13, 50664, 50664, 467, 575, 300, 4846, 293, 550, 309, 311, 516, 281, 2354, 2139, 1566, 286, 478, 1096, 13, 467, 390, 364, 24922, 13, 50914, 50914, 492, 434, 665, 13, 1610, 11, 1954, 11, 286, 536, 257, 5893, 13, 823, 286, 458, 300, 309, 311, 257, 15706, 13, 51164, 51164, 286, 362, 264, 644, 300, 1487, 949, 264, 5893, 13, 823, 286, 478, 516, 281, 2354, 21156, 278, 264, 644, 300, 1487, 934, 264, 5893, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.06618624394482905, "compression_ratio": 1.7272727272727273, "no_caption_prob": 0.00011411667946958914}, {"id": 223, "seek": 173500, "start": 1741.0, "end": 1746.0, "text": " It has that input and then it's going to continue either saying I'm done. It was an integer.", "tokens": [50364, 407, 291, 9819, 766, 13, 407, 291, 362, 257, 2167, 21156, 260, 300, 3719, 484, 23384, 439, 295, 264, 41674, 13, 50664, 50664, 467, 575, 300, 4846, 293, 550, 309, 311, 516, 281, 2354, 2139, 1566, 286, 478, 1096, 13, 467, 390, 364, 24922, 13, 50914, 50914, 492, 434, 665, 13, 1610, 11, 1954, 11, 286, 536, 257, 5893, 13, 823, 286, 458, 300, 309, 311, 257, 15706, 13, 51164, 51164, 286, 362, 264, 644, 300, 1487, 949, 264, 5893, 13, 823, 286, 478, 516, 281, 2354, 21156, 278, 264, 644, 300, 1487, 934, 264, 5893, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.06618624394482905, "compression_ratio": 1.7272727272727273, "no_caption_prob": 0.00011411667946958914}, {"id": 224, "seek": 173500, "start": 1746.0, "end": 1751.0, "text": " We're good. Or, oh, I see a dot. Now I know that it's a float.", "tokens": [50364, 407, 291, 9819, 766, 13, 407, 291, 362, 257, 2167, 21156, 260, 300, 3719, 484, 23384, 439, 295, 264, 41674, 13, 50664, 50664, 467, 575, 300, 4846, 293, 550, 309, 311, 516, 281, 2354, 2139, 1566, 286, 478, 1096, 13, 467, 390, 364, 24922, 13, 50914, 50914, 492, 434, 665, 13, 1610, 11, 1954, 11, 286, 536, 257, 5893, 13, 823, 286, 458, 300, 309, 311, 257, 15706, 13, 51164, 51164, 286, 362, 264, 644, 300, 1487, 949, 264, 5893, 13, 823, 286, 478, 516, 281, 2354, 21156, 278, 264, 644, 300, 1487, 934, 264, 5893, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.06618624394482905, "compression_ratio": 1.7272727272727273, "no_caption_prob": 0.00011411667946958914}, {"id": 225, "seek": 173500, "start": 1751.0, "end": 1757.0, "text": " I have the part that comes before the dot. Now I'm going to continue parsing the part that comes after the dot.", "tokens": [50364, 407, 291, 9819, 766, 13, 407, 291, 362, 257, 2167, 21156, 260, 300, 3719, 484, 23384, 439, 295, 264, 41674, 13, 50664, 50664, 467, 575, 300, 4846, 293, 550, 309, 311, 516, 281, 2354, 2139, 1566, 286, 478, 1096, 13, 467, 390, 364, 24922, 13, 50914, 50914, 492, 434, 665, 13, 1610, 11, 1954, 11, 286, 536, 257, 5893, 13, 823, 286, 458, 300, 309, 311, 257, 15706, 13, 51164, 51164, 286, 362, 264, 644, 300, 1487, 949, 264, 5893, 13, 823, 286, 478, 516, 281, 2354, 21156, 278, 264, 644, 300, 1487, 934, 264, 5893, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.06618624394482905, "compression_ratio": 1.7272727272727273, "no_caption_prob": 0.00011411667946958914}, {"id": 226, "seek": 175700, "start": 1757.0, "end": 1767.0, "text": " And now you commit down the float path, but you started by going down a path that connects to another fork in the road.", "tokens": [50364, 400, 586, 291, 5599, 760, 264, 15706, 3100, 11, 457, 291, 1409, 538, 516, 760, 257, 3100, 300, 16967, 281, 1071, 17716, 294, 264, 3060, 13, 50864, 50864, 407, 11, 291, 458, 11, 309, 311, 588, 709, 411, 445, 1940, 257, 1792, 294, 264, 3884, 13, 51064, 51064, 509, 747, 257, 1792, 294, 264, 3884, 293, 291, 536, 257, 1465, 300, 1619, 11, 1954, 11, 456, 311, 2139, 257, 15706, 420, 364, 24922, 760, 300, 3100, 13, 51464, 51464, 583, 550, 264, 3100, 37741, 13, 407, 291, 352, 760, 300, 3100, 13, 509, 458, 309, 2516, 291, 281, 1293, 295, 729, 3190, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.039437369765522326, "compression_ratio": 1.789237668161435, "no_caption_prob": 4.832448030356318e-05}, {"id": 227, "seek": 175700, "start": 1767.0, "end": 1771.0, "text": " So, you know, it's very much like just taking a walk in the park.", "tokens": [50364, 400, 586, 291, 5599, 760, 264, 15706, 3100, 11, 457, 291, 1409, 538, 516, 760, 257, 3100, 300, 16967, 281, 1071, 17716, 294, 264, 3060, 13, 50864, 50864, 407, 11, 291, 458, 11, 309, 311, 588, 709, 411, 445, 1940, 257, 1792, 294, 264, 3884, 13, 51064, 51064, 509, 747, 257, 1792, 294, 264, 3884, 293, 291, 536, 257, 1465, 300, 1619, 11, 1954, 11, 456, 311, 2139, 257, 15706, 420, 364, 24922, 760, 300, 3100, 13, 51464, 51464, 583, 550, 264, 3100, 37741, 13, 407, 291, 352, 760, 300, 3100, 13, 509, 458, 309, 2516, 291, 281, 1293, 295, 729, 3190, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.039437369765522326, "compression_ratio": 1.789237668161435, "no_caption_prob": 4.832448030356318e-05}, {"id": 228, "seek": 175700, "start": 1771.0, "end": 1779.0, "text": " You take a walk in the park and you see a sign that says, oh, there's either a float or an integer down that path.", "tokens": [50364, 400, 586, 291, 5599, 760, 264, 15706, 3100, 11, 457, 291, 1409, 538, 516, 760, 257, 3100, 300, 16967, 281, 1071, 17716, 294, 264, 3060, 13, 50864, 50864, 407, 11, 291, 458, 11, 309, 311, 588, 709, 411, 445, 1940, 257, 1792, 294, 264, 3884, 13, 51064, 51064, 509, 747, 257, 1792, 294, 264, 3884, 293, 291, 536, 257, 1465, 300, 1619, 11, 1954, 11, 456, 311, 2139, 257, 15706, 420, 364, 24922, 760, 300, 3100, 13, 51464, 51464, 583, 550, 264, 3100, 37741, 13, 407, 291, 352, 760, 300, 3100, 13, 509, 458, 309, 2516, 291, 281, 1293, 295, 729, 3190, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.039437369765522326, "compression_ratio": 1.789237668161435, "no_caption_prob": 4.832448030356318e-05}, {"id": 229, "seek": 175700, "start": 1779.0, "end": 1784.0, "text": " But then the path splits. So you go down that path. You know it takes you to both of those places.", "tokens": [50364, 400, 586, 291, 5599, 760, 264, 15706, 3100, 11, 457, 291, 1409, 538, 516, 760, 257, 3100, 300, 16967, 281, 1071, 17716, 294, 264, 3060, 13, 50864, 50864, 407, 11, 291, 458, 11, 309, 311, 588, 709, 411, 445, 1940, 257, 1792, 294, 264, 3884, 13, 51064, 51064, 509, 747, 257, 1792, 294, 264, 3884, 293, 291, 536, 257, 1465, 300, 1619, 11, 1954, 11, 456, 311, 2139, 257, 15706, 420, 364, 24922, 760, 300, 3100, 13, 51464, 51464, 583, 550, 264, 3100, 37741, 13, 407, 291, 352, 760, 300, 3100, 13, 509, 458, 309, 2516, 291, 281, 1293, 295, 729, 3190, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.039437369765522326, "compression_ratio": 1.789237668161435, "no_caption_prob": 4.832448030356318e-05}, {"id": 230, "seek": 178400, "start": 1784.0, "end": 1790.0, "text": " You know you want to go to one of those places, but you don't have to decide until you get to the next fork in the road.", "tokens": [50364, 509, 458, 291, 528, 281, 352, 281, 472, 295, 729, 3190, 11, 457, 291, 500, 380, 362, 281, 4536, 1826, 291, 483, 281, 264, 958, 17716, 294, 264, 3060, 13, 50664, 50664, 407, 291, 1524, 264, 1465, 300, 1619, 41674, 293, 37878, 341, 636, 13, 876, 11, 869, 13, 286, 458, 286, 528, 472, 295, 729, 570, 286, 478, 1237, 412, 257, 7866, 299, 2517, 13, 51014, 51014, 509, 1524, 300, 3100, 13, 823, 291, 2045, 1071, 17716, 294, 264, 3060, 13, 663, 311, 562, 291, 2045, 2139, 257, 777, 1622, 420, 257, 5893, 13, 51364, 51364, 823, 291, 362, 281, 5599, 281, 2139, 24922, 420, 15706, 13, 509, 600, 1409, 760, 300, 3100, 293, 291, 458, 309, 311, 516, 281, 312, 257, 1230, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.03770446038061334, "compression_ratio": 1.8161764705882353, "no_caption_prob": 6.605024100281298e-05}, {"id": 231, "seek": 178400, "start": 1790.0, "end": 1797.0, "text": " So you follow the sign that says integers and floats this way. Oh, great. I know I want one of those because I'm looking at a numeric character.", "tokens": [50364, 509, 458, 291, 528, 281, 352, 281, 472, 295, 729, 3190, 11, 457, 291, 500, 380, 362, 281, 4536, 1826, 291, 483, 281, 264, 958, 17716, 294, 264, 3060, 13, 50664, 50664, 407, 291, 1524, 264, 1465, 300, 1619, 41674, 293, 37878, 341, 636, 13, 876, 11, 869, 13, 286, 458, 286, 528, 472, 295, 729, 570, 286, 478, 1237, 412, 257, 7866, 299, 2517, 13, 51014, 51014, 509, 1524, 300, 3100, 13, 823, 291, 2045, 1071, 17716, 294, 264, 3060, 13, 663, 311, 562, 291, 2045, 2139, 257, 777, 1622, 420, 257, 5893, 13, 51364, 51364, 823, 291, 362, 281, 5599, 281, 2139, 24922, 420, 15706, 13, 509, 600, 1409, 760, 300, 3100, 293, 291, 458, 309, 311, 516, 281, 312, 257, 1230, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.03770446038061334, "compression_ratio": 1.8161764705882353, "no_caption_prob": 6.605024100281298e-05}, {"id": 232, "seek": 178400, "start": 1797.0, "end": 1804.0, "text": " You follow that path. Now you hit another fork in the road. That's when you hit either a new line or a dot.", "tokens": [50364, 509, 458, 291, 528, 281, 352, 281, 472, 295, 729, 3190, 11, 457, 291, 500, 380, 362, 281, 4536, 1826, 291, 483, 281, 264, 958, 17716, 294, 264, 3060, 13, 50664, 50664, 407, 291, 1524, 264, 1465, 300, 1619, 41674, 293, 37878, 341, 636, 13, 876, 11, 869, 13, 286, 458, 286, 528, 472, 295, 729, 570, 286, 478, 1237, 412, 257, 7866, 299, 2517, 13, 51014, 51014, 509, 1524, 300, 3100, 13, 823, 291, 2045, 1071, 17716, 294, 264, 3060, 13, 663, 311, 562, 291, 2045, 2139, 257, 777, 1622, 420, 257, 5893, 13, 51364, 51364, 823, 291, 362, 281, 5599, 281, 2139, 24922, 420, 15706, 13, 509, 600, 1409, 760, 300, 3100, 293, 291, 458, 309, 311, 516, 281, 312, 257, 1230, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.03770446038061334, "compression_ratio": 1.8161764705882353, "no_caption_prob": 6.605024100281298e-05}, {"id": 233, "seek": 178400, "start": 1804.0, "end": 1811.0, "text": " Now you have to commit to either integer or float. You've started down that path and you know it's going to be a number.", "tokens": [50364, 509, 458, 291, 528, 281, 352, 281, 472, 295, 729, 3190, 11, 457, 291, 500, 380, 362, 281, 4536, 1826, 291, 483, 281, 264, 958, 17716, 294, 264, 3060, 13, 50664, 50664, 407, 291, 1524, 264, 1465, 300, 1619, 41674, 293, 37878, 341, 636, 13, 876, 11, 869, 13, 286, 458, 286, 528, 472, 295, 729, 570, 286, 478, 1237, 412, 257, 7866, 299, 2517, 13, 51014, 51014, 509, 1524, 300, 3100, 13, 823, 291, 2045, 1071, 17716, 294, 264, 3060, 13, 663, 311, 562, 291, 2045, 2139, 257, 777, 1622, 420, 257, 5893, 13, 51364, 51364, 823, 291, 362, 281, 5599, 281, 2139, 24922, 420, 15706, 13, 509, 600, 1409, 760, 300, 3100, 293, 291, 458, 309, 311, 516, 281, 312, 257, 1230, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.03770446038061334, "compression_ratio": 1.8161764705882353, "no_caption_prob": 6.605024100281298e-05}, {"id": 234, "seek": 181100, "start": 1811.0, "end": 1818.0, "text": " And if you, you know, if you have one, two, three, a, now there's a problem and you've committed down that path.", "tokens": [50364, 400, 498, 291, 11, 291, 458, 11, 498, 291, 362, 472, 11, 732, 11, 1045, 11, 257, 11, 586, 456, 311, 257, 1154, 293, 291, 600, 7784, 760, 300, 3100, 13, 50714, 50714, 400, 300, 311, 767, 264, 14721, 5223, 13, 823, 291, 434, 1075, 281, 976, 257, 3636, 300, 1619, 11, 16478, 11, 286, 390, 9650, 341, 281, 312, 364, 24922, 420, 257, 15706, 13, 51164, 51164, 583, 570, 286, 390, 516, 760, 264, 24922, 420, 15706, 3100, 11, 457, 550, 286, 1866, 341, 2517, 257, 597, 1177, 380, 534, 3318, 510, 13, 51464, 51464, 407, 300, 311, 2293, 437, 291, 528, 294, 2115, 295, 2902, 5824, 281, 264, 4195, 300, 456, 311, 512, 28431, 6713, 294, 641, 3089, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.09180963134765625, "compression_ratio": 1.6815068493150684, "no_caption_prob": 9.516192221781239e-06}, {"id": 235, "seek": 181100, "start": 1818.0, "end": 1827.0, "text": " And that's actually the desired behavior. Now you're able to give a message that says, hmm, I was expecting this to be an integer or a float.", "tokens": [50364, 400, 498, 291, 11, 291, 458, 11, 498, 291, 362, 472, 11, 732, 11, 1045, 11, 257, 11, 586, 456, 311, 257, 1154, 293, 291, 600, 7784, 760, 300, 3100, 13, 50714, 50714, 400, 300, 311, 767, 264, 14721, 5223, 13, 823, 291, 434, 1075, 281, 976, 257, 3636, 300, 1619, 11, 16478, 11, 286, 390, 9650, 341, 281, 312, 364, 24922, 420, 257, 15706, 13, 51164, 51164, 583, 570, 286, 390, 516, 760, 264, 24922, 420, 15706, 3100, 11, 457, 550, 286, 1866, 341, 2517, 257, 597, 1177, 380, 534, 3318, 510, 13, 51464, 51464, 407, 300, 311, 2293, 437, 291, 528, 294, 2115, 295, 2902, 5824, 281, 264, 4195, 300, 456, 311, 512, 28431, 6713, 294, 641, 3089, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.09180963134765625, "compression_ratio": 1.6815068493150684, "no_caption_prob": 9.516192221781239e-06}, {"id": 236, "seek": 181100, "start": 1827.0, "end": 1833.0, "text": " But because I was going down the integer or float path, but then I saw this character a which doesn't really fit here.", "tokens": [50364, 400, 498, 291, 11, 291, 458, 11, 498, 291, 362, 472, 11, 732, 11, 1045, 11, 257, 11, 586, 456, 311, 257, 1154, 293, 291, 600, 7784, 760, 300, 3100, 13, 50714, 50714, 400, 300, 311, 767, 264, 14721, 5223, 13, 823, 291, 434, 1075, 281, 976, 257, 3636, 300, 1619, 11, 16478, 11, 286, 390, 9650, 341, 281, 312, 364, 24922, 420, 257, 15706, 13, 51164, 51164, 583, 570, 286, 390, 516, 760, 264, 24922, 420, 15706, 3100, 11, 457, 550, 286, 1866, 341, 2517, 257, 597, 1177, 380, 534, 3318, 510, 13, 51464, 51464, 407, 300, 311, 2293, 437, 291, 528, 294, 2115, 295, 2902, 5824, 281, 264, 4195, 300, 456, 311, 512, 28431, 6713, 294, 641, 3089, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.09180963134765625, "compression_ratio": 1.6815068493150684, "no_caption_prob": 9.516192221781239e-06}, {"id": 237, "seek": 181100, "start": 1833.0, "end": 1840.0, "text": " So that's exactly what you want in terms of giving feedback to the user that there's some syntax error in their code.", "tokens": [50364, 400, 498, 291, 11, 291, 458, 11, 498, 291, 362, 472, 11, 732, 11, 1045, 11, 257, 11, 586, 456, 311, 257, 1154, 293, 291, 600, 7784, 760, 300, 3100, 13, 50714, 50714, 400, 300, 311, 767, 264, 14721, 5223, 13, 823, 291, 434, 1075, 281, 976, 257, 3636, 300, 1619, 11, 16478, 11, 286, 390, 9650, 341, 281, 312, 364, 24922, 420, 257, 15706, 13, 51164, 51164, 583, 570, 286, 390, 516, 760, 264, 24922, 420, 15706, 3100, 11, 457, 550, 286, 1866, 341, 2517, 257, 597, 1177, 380, 534, 3318, 510, 13, 51464, 51464, 407, 300, 311, 2293, 437, 291, 528, 294, 2115, 295, 2902, 5824, 281, 264, 4195, 300, 456, 311, 512, 28431, 6713, 294, 641, 3089, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.09180963134765625, "compression_ratio": 1.6815068493150684, "no_caption_prob": 9.516192221781239e-06}, {"id": 238, "seek": 184000, "start": 1840.0, "end": 1848.0, "text": " And so now you have you've done it in a performant way because you've combined those two paths into a single path.", "tokens": [50364, 400, 370, 586, 291, 362, 291, 600, 1096, 309, 294, 257, 2042, 394, 636, 570, 291, 600, 9354, 729, 732, 14518, 666, 257, 2167, 3100, 13, 50764, 50764, 865, 11, 286, 841, 411, 300, 311, 257, 1238, 665, 4973, 2316, 293, 300, 775, 652, 309, 841, 1238, 3109, 712, 13, 51114, 51114, 1133, 286, 3264, 295, 439, 264, 646, 6903, 14134, 293, 3389, 2663, 11, 286, 390, 1953, 286, 486, 1391, 362, 281, 360, 512, 646, 6903, 14134, 412, 512, 935, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.07021351747734603, "compression_ratio": 1.6221198156682028, "no_caption_prob": 2.753511580522172e-05}, {"id": 239, "seek": 184000, "start": 1848.0, "end": 1855.0, "text": " Yeah, I feel like that's a pretty good mental model and that does make it feel pretty approachable.", "tokens": [50364, 400, 370, 586, 291, 362, 291, 600, 1096, 309, 294, 257, 2042, 394, 636, 570, 291, 600, 9354, 729, 732, 14518, 666, 257, 2167, 3100, 13, 50764, 50764, 865, 11, 286, 841, 411, 300, 311, 257, 1238, 665, 4973, 2316, 293, 300, 775, 652, 309, 841, 1238, 3109, 712, 13, 51114, 51114, 1133, 286, 3264, 295, 439, 264, 646, 6903, 14134, 293, 3389, 2663, 11, 286, 390, 1953, 286, 486, 1391, 362, 281, 360, 512, 646, 6903, 14134, 412, 512, 935, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.07021351747734603, "compression_ratio": 1.6221198156682028, "no_caption_prob": 2.753511580522172e-05}, {"id": 240, "seek": 184000, "start": 1855.0, "end": 1863.0, "text": " When I learned of all the backtracking and performance issues, I was thinking I will probably have to do some backtracking at some point.", "tokens": [50364, 400, 370, 586, 291, 362, 291, 600, 1096, 309, 294, 257, 2042, 394, 636, 570, 291, 600, 9354, 729, 732, 14518, 666, 257, 2167, 3100, 13, 50764, 50764, 865, 11, 286, 841, 411, 300, 311, 257, 1238, 665, 4973, 2316, 293, 300, 775, 652, 309, 841, 1238, 3109, 712, 13, 51114, 51114, 1133, 286, 3264, 295, 439, 264, 646, 6903, 14134, 293, 3389, 2663, 11, 286, 390, 1953, 286, 486, 1391, 362, 281, 360, 512, 646, 6903, 14134, 412, 512, 935, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.07021351747734603, "compression_ratio": 1.6221198156682028, "no_caption_prob": 2.753511580522172e-05}, {"id": 241, "seek": 186300, "start": 1863.0, "end": 1872.0, "text": " But with this specific way of branching things, it all feels pretty doable in my mind.", "tokens": [50364, 583, 365, 341, 2685, 636, 295, 9819, 278, 721, 11, 309, 439, 3417, 1238, 41183, 294, 452, 1575, 13, 50814, 50814, 407, 360, 291, 764, 646, 19466, 712, 294, 441, 15168, 5093, 30, 51014, 51014, 1079, 11, 321, 360, 764, 646, 19466, 712, 294, 257, 1326, 3331, 293, 321, 434, 1382, 281, 4159, 729, 13, 51364, 51364, 583, 456, 366, 512, 3331, 689, 309, 311, 257, 688, 295, 589, 281, 4860, 721, 666, 257, 2689, 3100, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.06824695916823399, "compression_ratio": 1.5235602094240839, "no_caption_prob": 7.721900328760967e-05}, {"id": 242, "seek": 186300, "start": 1872.0, "end": 1876.0, "text": " So do you use backtrackable in LMarkdown?", "tokens": [50364, 583, 365, 341, 2685, 636, 295, 9819, 278, 721, 11, 309, 439, 3417, 1238, 41183, 294, 452, 1575, 13, 50814, 50814, 407, 360, 291, 764, 646, 19466, 712, 294, 441, 15168, 5093, 30, 51014, 51014, 1079, 11, 321, 360, 764, 646, 19466, 712, 294, 257, 1326, 3331, 293, 321, 434, 1382, 281, 4159, 729, 13, 51364, 51364, 583, 456, 366, 512, 3331, 689, 309, 311, 257, 688, 295, 589, 281, 4860, 721, 666, 257, 2689, 3100, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.06824695916823399, "compression_ratio": 1.5235602094240839, "no_caption_prob": 7.721900328760967e-05}, {"id": 243, "seek": 186300, "start": 1876.0, "end": 1883.0, "text": " Yes, we do use backtrackable in a few cases and we're trying to remove those.", "tokens": [50364, 583, 365, 341, 2685, 636, 295, 9819, 278, 721, 11, 309, 439, 3417, 1238, 41183, 294, 452, 1575, 13, 50814, 50814, 407, 360, 291, 764, 646, 19466, 712, 294, 441, 15168, 5093, 30, 51014, 51014, 1079, 11, 321, 360, 764, 646, 19466, 712, 294, 257, 1326, 3331, 293, 321, 434, 1382, 281, 4159, 729, 13, 51364, 51364, 583, 456, 366, 512, 3331, 689, 309, 311, 257, 688, 295, 589, 281, 4860, 721, 666, 257, 2689, 3100, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.06824695916823399, "compression_ratio": 1.5235602094240839, "no_caption_prob": 7.721900328760967e-05}, {"id": 244, "seek": 186300, "start": 1883.0, "end": 1890.0, "text": " But there are some cases where it's a lot of work to fold things into a common path.", "tokens": [50364, 583, 365, 341, 2685, 636, 295, 9819, 278, 721, 11, 309, 439, 3417, 1238, 41183, 294, 452, 1575, 13, 50814, 50814, 407, 360, 291, 764, 646, 19466, 712, 294, 441, 15168, 5093, 30, 51014, 51014, 1079, 11, 321, 360, 764, 646, 19466, 712, 294, 257, 1326, 3331, 293, 321, 434, 1382, 281, 4159, 729, 13, 51364, 51364, 583, 456, 366, 512, 3331, 689, 309, 311, 257, 688, 295, 589, 281, 4860, 721, 666, 257, 2689, 3100, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.06824695916823399, "compression_ratio": 1.5235602094240839, "no_caption_prob": 7.721900328760967e-05}, {"id": 245, "seek": 189000, "start": 1890.0, "end": 1897.0, "text": " You know, in the case we were talking about of this is a float or an integer if it starts with a numeric character.", "tokens": [50364, 509, 458, 11, 294, 264, 1389, 321, 645, 1417, 466, 295, 341, 307, 257, 15706, 420, 364, 24922, 498, 309, 3719, 365, 257, 7866, 299, 2517, 13, 50714, 50714, 663, 311, 257, 300, 311, 257, 1238, 15325, 472, 13, 583, 291, 393, 3811, 382, 291, 434, 25335, 3180, 3995, 14518, 666, 472, 11, 309, 3643, 544, 2252, 13, 51214, 51214, 400, 370, 456, 366, 257, 1326, 3331, 689, 321, 434, 1382, 281, 4159, 729, 382, 709, 382, 1944, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.0642913680478751, "compression_ratio": 1.5381165919282511, "no_caption_prob": 0.00014421391824726015}, {"id": 246, "seek": 189000, "start": 1897.0, "end": 1907.0, "text": " That's a that's a pretty straightforward one. But you can imagine as you're folding eight potential paths into one, it becomes more difficult.", "tokens": [50364, 509, 458, 11, 294, 264, 1389, 321, 645, 1417, 466, 295, 341, 307, 257, 15706, 420, 364, 24922, 498, 309, 3719, 365, 257, 7866, 299, 2517, 13, 50714, 50714, 663, 311, 257, 300, 311, 257, 1238, 15325, 472, 13, 583, 291, 393, 3811, 382, 291, 434, 25335, 3180, 3995, 14518, 666, 472, 11, 309, 3643, 544, 2252, 13, 51214, 51214, 400, 370, 456, 366, 257, 1326, 3331, 689, 321, 434, 1382, 281, 4159, 729, 382, 709, 382, 1944, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.0642913680478751, "compression_ratio": 1.5381165919282511, "no_caption_prob": 0.00014421391824726015}, {"id": 247, "seek": 189000, "start": 1907.0, "end": 1912.0, "text": " And so there are a few cases where we're trying to remove those as much as possible.", "tokens": [50364, 509, 458, 11, 294, 264, 1389, 321, 645, 1417, 466, 295, 341, 307, 257, 15706, 420, 364, 24922, 498, 309, 3719, 365, 257, 7866, 299, 2517, 13, 50714, 50714, 663, 311, 257, 300, 311, 257, 1238, 15325, 472, 13, 583, 291, 393, 3811, 382, 291, 434, 25335, 3180, 3995, 14518, 666, 472, 11, 309, 3643, 544, 2252, 13, 51214, 51214, 400, 370, 456, 366, 257, 1326, 3331, 689, 321, 434, 1382, 281, 4159, 729, 382, 709, 382, 1944, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.0642913680478751, "compression_ratio": 1.5381165919282511, "no_caption_prob": 0.00014421391824726015}, {"id": 248, "seek": 191200, "start": 1912.0, "end": 1922.0, "text": " And Fulkart has been doing some really awesome work to improve the performance and making a bunch of pull requests, which has been so, so nice.", "tokens": [50364, 400, 479, 16875, 446, 575, 668, 884, 512, 534, 3476, 589, 281, 3470, 264, 3389, 293, 1455, 257, 3840, 295, 2235, 12475, 11, 597, 575, 668, 370, 11, 370, 1481, 13, 50864, 50864, 400, 415, 311, 668, 668, 884, 512, 18927, 278, 456, 11, 886, 11, 597, 11, 538, 264, 636, 11, 18927, 278, 13, 51064, 51064, 759, 291, 434, 1382, 281, 1322, 257, 21156, 260, 1716, 293, 309, 311, 411, 257, 2107, 26703, 21156, 260, 11, 291, 458, 11, 309, 311, 406, 411, 48377, 257, 2593, 1230, 293, 321, 764, 309, 294, 264, 15682, 1564, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.09960671226577003, "compression_ratio": 1.6523605150214593, "no_caption_prob": 0.00035686796763911843}, {"id": 249, "seek": 191200, "start": 1922.0, "end": 1926.0, "text": " And he's been been doing some benchmarking there, too, which, by the way, benchmarking.", "tokens": [50364, 400, 479, 16875, 446, 575, 668, 884, 512, 534, 3476, 589, 281, 3470, 264, 3389, 293, 1455, 257, 3840, 295, 2235, 12475, 11, 597, 575, 668, 370, 11, 370, 1481, 13, 50864, 50864, 400, 415, 311, 668, 668, 884, 512, 18927, 278, 456, 11, 886, 11, 597, 11, 538, 264, 636, 11, 18927, 278, 13, 51064, 51064, 759, 291, 434, 1382, 281, 1322, 257, 21156, 260, 1716, 293, 309, 311, 411, 257, 2107, 26703, 21156, 260, 11, 291, 458, 11, 309, 311, 406, 411, 48377, 257, 2593, 1230, 293, 321, 764, 309, 294, 264, 15682, 1564, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.09960671226577003, "compression_ratio": 1.6523605150214593, "no_caption_prob": 0.00035686796763911843}, {"id": 250, "seek": 191200, "start": 1926.0, "end": 1936.0, "text": " If you're trying to build a parser project and it's like a non trivial parser, you know, it's not like parse a phone number and we use it in the UI once.", "tokens": [50364, 400, 479, 16875, 446, 575, 668, 884, 512, 534, 3476, 589, 281, 3470, 264, 3389, 293, 1455, 257, 3840, 295, 2235, 12475, 11, 597, 575, 668, 370, 11, 370, 1481, 13, 50864, 50864, 400, 415, 311, 668, 668, 884, 512, 18927, 278, 456, 11, 886, 11, 597, 11, 538, 264, 636, 11, 18927, 278, 13, 51064, 51064, 759, 291, 434, 1382, 281, 1322, 257, 21156, 260, 1716, 293, 309, 311, 411, 257, 2107, 26703, 21156, 260, 11, 291, 458, 11, 309, 311, 406, 411, 48377, 257, 2593, 1230, 293, 321, 764, 309, 294, 264, 15682, 1564, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.09960671226577003, "compression_ratio": 1.6523605150214593, "no_caption_prob": 0.00035686796763911843}, {"id": 251, "seek": 193600, "start": 1936.0, "end": 1944.0, "text": " Right. Like, OK, you're not going to have any performance bottlenecks, even if you use backtrackable. If that gets the job done, it's not going to matter.", "tokens": [50364, 1779, 13, 1743, 11, 2264, 11, 291, 434, 406, 516, 281, 362, 604, 3389, 44641, 2761, 11, 754, 498, 291, 764, 646, 19466, 712, 13, 759, 300, 2170, 264, 1691, 1096, 11, 309, 311, 406, 516, 281, 1871, 13, 50764, 50764, 865, 11, 457, 498, 291, 434, 2390, 746, 300, 21156, 279, 2699, 76, 28431, 337, 2699, 76, 4455, 11, 291, 434, 516, 281, 3449, 257, 3389, 44641, 547, 498, 291, 434, 406, 884, 613, 4532, 5028, 14455, 13, 51214, 51214, 400, 370, 294, 3331, 411, 300, 11, 689, 3389, 307, 4924, 293, 689, 309, 311, 411, 257, 1333, 295, 1768, 11999, 281, 362, 341, 21156, 278, 1716, 11, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.04938372468526384, "compression_ratio": 1.7238805970149254, "no_caption_prob": 0.00011958831601077691}, {"id": 252, "seek": 193600, "start": 1944.0, "end": 1953.0, "text": " Yeah, but if you're building something that parses Elm syntax for Elm projects, you're going to notice a performance bottleneck if you're not doing these micro optimizations.", "tokens": [50364, 1779, 13, 1743, 11, 2264, 11, 291, 434, 406, 516, 281, 362, 604, 3389, 44641, 2761, 11, 754, 498, 291, 764, 646, 19466, 712, 13, 759, 300, 2170, 264, 1691, 1096, 11, 309, 311, 406, 516, 281, 1871, 13, 50764, 50764, 865, 11, 457, 498, 291, 434, 2390, 746, 300, 21156, 279, 2699, 76, 28431, 337, 2699, 76, 4455, 11, 291, 434, 516, 281, 3449, 257, 3389, 44641, 547, 498, 291, 434, 406, 884, 613, 4532, 5028, 14455, 13, 51214, 51214, 400, 370, 294, 3331, 411, 300, 11, 689, 3389, 307, 4924, 293, 689, 309, 311, 411, 257, 1333, 295, 1768, 11999, 281, 362, 341, 21156, 278, 1716, 11, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.04938372468526384, "compression_ratio": 1.7238805970149254, "no_caption_prob": 0.00011958831601077691}, {"id": 253, "seek": 193600, "start": 1953.0, "end": 1962.0, "text": " And so in cases like that, where performance is critical and where it's like a sort of community asset to have this parsing project,", "tokens": [50364, 1779, 13, 1743, 11, 2264, 11, 291, 434, 406, 516, 281, 362, 604, 3389, 44641, 2761, 11, 754, 498, 291, 764, 646, 19466, 712, 13, 759, 300, 2170, 264, 1691, 1096, 11, 309, 311, 406, 516, 281, 1871, 13, 50764, 50764, 865, 11, 457, 498, 291, 434, 2390, 746, 300, 21156, 279, 2699, 76, 28431, 337, 2699, 76, 4455, 11, 291, 434, 516, 281, 3449, 257, 3389, 44641, 547, 498, 291, 434, 406, 884, 613, 4532, 5028, 14455, 13, 51214, 51214, 400, 370, 294, 3331, 411, 300, 11, 689, 3389, 307, 4924, 293, 689, 309, 311, 411, 257, 1333, 295, 1768, 11999, 281, 362, 341, 21156, 278, 1716, 11, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.04938372468526384, "compression_ratio": 1.7238805970149254, "no_caption_prob": 0.00011958831601077691}, {"id": 254, "seek": 196200, "start": 1962.0, "end": 1968.0, "text": " I would recommend benchmark first before you make assumptions about what's going to improve performance.", "tokens": [50364, 286, 576, 2748, 18927, 700, 949, 291, 652, 17695, 466, 437, 311, 516, 281, 3470, 3389, 13, 50664, 50664, 2381, 291, 600, 3720, 309, 11, 291, 914, 13, 50764, 50764, 407, 11, 2086, 11, 300, 311, 257, 665, 300, 311, 257, 665, 1168, 13, 5470, 472, 307, 2138, 2464, 6921, 11, 558, 30, 51014, 51014, 1436, 498, 291, 366, 498, 291, 366, 884, 3389, 15164, 949, 291, 362, 43751, 11, 300, 311, 406, 665, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.07350586637665954, "compression_ratio": 1.6616161616161615, "no_caption_prob": 7.72125567891635e-05}, {"id": 255, "seek": 196200, "start": 1968.0, "end": 1970.0, "text": " After you've written it, you mean.", "tokens": [50364, 286, 576, 2748, 18927, 700, 949, 291, 652, 17695, 466, 437, 311, 516, 281, 3470, 3389, 13, 50664, 50664, 2381, 291, 600, 3720, 309, 11, 291, 914, 13, 50764, 50764, 407, 11, 2086, 11, 300, 311, 257, 665, 300, 311, 257, 665, 1168, 13, 5470, 472, 307, 2138, 2464, 6921, 11, 558, 30, 51014, 51014, 1436, 498, 291, 366, 498, 291, 366, 884, 3389, 15164, 949, 291, 362, 43751, 11, 300, 311, 406, 665, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.07350586637665954, "compression_ratio": 1.6616161616161615, "no_caption_prob": 7.72125567891635e-05}, {"id": 256, "seek": 196200, "start": 1970.0, "end": 1975.0, "text": " So, yes, that's a good that's a good question. Step one is definitely write tests, right?", "tokens": [50364, 286, 576, 2748, 18927, 700, 949, 291, 652, 17695, 466, 437, 311, 516, 281, 3470, 3389, 13, 50664, 50664, 2381, 291, 600, 3720, 309, 11, 291, 914, 13, 50764, 50764, 407, 11, 2086, 11, 300, 311, 257, 665, 300, 311, 257, 665, 1168, 13, 5470, 472, 307, 2138, 2464, 6921, 11, 558, 30, 51014, 51014, 1436, 498, 291, 366, 498, 291, 366, 884, 3389, 15164, 949, 291, 362, 43751, 11, 300, 311, 406, 665, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.07350586637665954, "compression_ratio": 1.6616161616161615, "no_caption_prob": 7.72125567891635e-05}, {"id": 257, "seek": 196200, "start": 1975.0, "end": 1984.0, "text": " Because if you are if you are doing performance tuning before you have benchmarks, that's not good.", "tokens": [50364, 286, 576, 2748, 18927, 700, 949, 291, 652, 17695, 466, 437, 311, 516, 281, 3470, 3389, 13, 50664, 50664, 2381, 291, 600, 3720, 309, 11, 291, 914, 13, 50764, 50764, 407, 11, 2086, 11, 300, 311, 257, 665, 300, 311, 257, 665, 1168, 13, 5470, 472, 307, 2138, 2464, 6921, 11, 558, 30, 51014, 51014, 1436, 498, 291, 366, 498, 291, 366, 884, 3389, 15164, 949, 291, 362, 43751, 11, 300, 311, 406, 665, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.07350586637665954, "compression_ratio": 1.6616161616161615, "no_caption_prob": 7.72125567891635e-05}, {"id": 258, "seek": 198400, "start": 1984.0, "end": 1992.0, "text": " But what's even worse is to do performance tuning before you have tests. That's a nightmare.", "tokens": [50364, 583, 437, 311, 754, 5324, 307, 281, 360, 3389, 15164, 949, 291, 362, 6921, 13, 663, 311, 257, 18724, 13, 50764, 50764, 286, 393, 380, 754, 3811, 13, 400, 294, 2674, 11, 365, 21156, 433, 11, 291, 528, 3195, 295, 6921, 293, 21156, 433, 4997, 294, 2699, 76, 307, 534, 1481, 13, 51264, 51264, 1743, 498, 291, 434, 445, 4997, 11, 286, 362, 341, 4009, 3089, 293, 286, 1190, 309, 807, 341, 21156, 260, 293, 286, 2066, 309, 281, 3061, 294, 341, 636, 510, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.03609190362223079, "compression_ratio": 1.5794392523364487, "no_caption_prob": 9.761013643583283e-05}, {"id": 259, "seek": 198400, "start": 1992.0, "end": 2002.0, "text": " I can't even imagine. And in general, with parsers, you want lots of tests and parsers testing in Elm is really nice.", "tokens": [50364, 583, 437, 311, 754, 5324, 307, 281, 360, 3389, 15164, 949, 291, 362, 6921, 13, 663, 311, 257, 18724, 13, 50764, 50764, 286, 393, 380, 754, 3811, 13, 400, 294, 2674, 11, 365, 21156, 433, 11, 291, 528, 3195, 295, 6921, 293, 21156, 433, 4997, 294, 2699, 76, 307, 534, 1481, 13, 51264, 51264, 1743, 498, 291, 434, 445, 4997, 11, 286, 362, 341, 4009, 3089, 293, 286, 1190, 309, 807, 341, 21156, 260, 293, 286, 2066, 309, 281, 3061, 294, 341, 636, 510, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.03609190362223079, "compression_ratio": 1.5794392523364487, "no_caption_prob": 9.761013643583283e-05}, {"id": 260, "seek": 198400, "start": 2002.0, "end": 2010.0, "text": " Like if you're just testing, I have this source code and I run it through this parser and I expect it to fail in this way here.", "tokens": [50364, 583, 437, 311, 754, 5324, 307, 281, 360, 3389, 15164, 949, 291, 362, 6921, 13, 663, 311, 257, 18724, 13, 50764, 50764, 286, 393, 380, 754, 3811, 13, 400, 294, 2674, 11, 365, 21156, 433, 11, 291, 528, 3195, 295, 6921, 293, 21156, 433, 4997, 294, 2699, 76, 307, 534, 1481, 13, 51264, 51264, 1743, 498, 291, 434, 445, 4997, 11, 286, 362, 341, 4009, 3089, 293, 286, 1190, 309, 807, 341, 21156, 260, 293, 286, 2066, 309, 281, 3061, 294, 341, 636, 510, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.03609190362223079, "compression_ratio": 1.5794392523364487, "no_caption_prob": 9.761013643583283e-05}, {"id": 261, "seek": 201000, "start": 2010.0, "end": 2020.0, "text": " And I expect it to parse into this data structure here. It's really so easy. It's so much easier than manually testing it with parser projects.", "tokens": [50364, 400, 286, 2066, 309, 281, 48377, 666, 341, 1412, 3877, 510, 13, 467, 311, 534, 370, 1858, 13, 467, 311, 370, 709, 3571, 813, 16945, 4997, 309, 365, 21156, 260, 4455, 13, 50864, 50864, 821, 311, 572, 1778, 406, 281, 360, 3195, 293, 3195, 295, 6921, 570, 436, 434, 534, 2370, 281, 1190, 13, 814, 500, 380, 362, 604, 1252, 5065, 13, 51214, 51214, 814, 434, 445, 588, 2199, 13, 1042, 11, 300, 311, 2199, 11, 457, 588, 15325, 356, 13, 51514, 51514, 865, 11, 436, 434, 11745, 11, 558, 30, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.07108184914839895, "compression_ratio": 1.617391304347826, "no_caption_prob": 1.520644855190767e-05}, {"id": 262, "seek": 201000, "start": 2020.0, "end": 2027.0, "text": " There's no reason not to do lots and lots of tests because they're really fast to run. They don't have any side effects.", "tokens": [50364, 400, 286, 2066, 309, 281, 48377, 666, 341, 1412, 3877, 510, 13, 467, 311, 534, 370, 1858, 13, 467, 311, 370, 709, 3571, 813, 16945, 4997, 309, 365, 21156, 260, 4455, 13, 50864, 50864, 821, 311, 572, 1778, 406, 281, 360, 3195, 293, 3195, 295, 6921, 570, 436, 434, 534, 2370, 281, 1190, 13, 814, 500, 380, 362, 604, 1252, 5065, 13, 51214, 51214, 814, 434, 445, 588, 2199, 13, 1042, 11, 300, 311, 2199, 11, 457, 588, 15325, 356, 13, 51514, 51514, 865, 11, 436, 434, 11745, 11, 558, 30, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.07108184914839895, "compression_ratio": 1.617391304347826, "no_caption_prob": 1.520644855190767e-05}, {"id": 263, "seek": 201000, "start": 2027.0, "end": 2033.0, "text": " They're just very simple. Well, that's simple, but very straightforwardly.", "tokens": [50364, 400, 286, 2066, 309, 281, 48377, 666, 341, 1412, 3877, 510, 13, 467, 311, 534, 370, 1858, 13, 467, 311, 370, 709, 3571, 813, 16945, 4997, 309, 365, 21156, 260, 4455, 13, 50864, 50864, 821, 311, 572, 1778, 406, 281, 360, 3195, 293, 3195, 295, 6921, 570, 436, 434, 534, 2370, 281, 1190, 13, 814, 500, 380, 362, 604, 1252, 5065, 13, 51214, 51214, 814, 434, 445, 588, 2199, 13, 1042, 11, 300, 311, 2199, 11, 457, 588, 15325, 356, 13, 51514, 51514, 865, 11, 436, 434, 11745, 11, 558, 30, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.07108184914839895, "compression_ratio": 1.617391304347826, "no_caption_prob": 1.520644855190767e-05}, {"id": 264, "seek": 201000, "start": 2033.0, "end": 2035.0, "text": " Yeah, they're functional, right?", "tokens": [50364, 400, 286, 2066, 309, 281, 48377, 666, 341, 1412, 3877, 510, 13, 467, 311, 534, 370, 1858, 13, 467, 311, 370, 709, 3571, 813, 16945, 4997, 309, 365, 21156, 260, 4455, 13, 50864, 50864, 821, 311, 572, 1778, 406, 281, 360, 3195, 293, 3195, 295, 6921, 570, 436, 434, 534, 2370, 281, 1190, 13, 814, 500, 380, 362, 604, 1252, 5065, 13, 51214, 51214, 814, 434, 445, 588, 2199, 13, 1042, 11, 300, 311, 2199, 11, 457, 588, 15325, 356, 13, 51514, 51514, 865, 11, 436, 434, 11745, 11, 558, 30, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.07108184914839895, "compression_ratio": 1.617391304347826, "no_caption_prob": 1.520644855190767e-05}, {"id": 265, "seek": 203500, "start": 2035.0, "end": 2049.0, "text": " The thing about testing is testing is inherently functional. And when you're testing in, you know, languages that are more, you know, imperative, that have side effects that have environment, you know, objects that have a bunch of state,", "tokens": [50364, 440, 551, 466, 4997, 307, 4997, 307, 27993, 11745, 13, 400, 562, 291, 434, 4997, 294, 11, 291, 458, 11, 8650, 300, 366, 544, 11, 291, 458, 11, 32490, 11, 300, 362, 1252, 5065, 300, 362, 2823, 11, 291, 458, 11, 6565, 300, 362, 257, 3840, 295, 1785, 11, 51064, 51064, 550, 291, 362, 281, 411, 17362, 721, 484, 293, 20266, 721, 293, 853, 281, 7983, 264, 1252, 5065, 300, 362, 2011, 13, 51414, 51414, 400, 370, 291, 764, 439, 613, 721, 300, 366, 588, 16191, 293, 49325, 293, 436, 652, 291, 1570, 6679, 466, 428, 1500, 570, 291, 434, 27993, 1382, 281, 747, 613, 721, 597, 366, 2107, 22845, 304, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.08929440070842874, "compression_ratio": 2.0187265917602994, "no_caption_prob": 0.0007548810099251568}, {"id": 266, "seek": 203500, "start": 2049.0, "end": 2056.0, "text": " then you have to like mock things out and stub things and try to capture the side effects that have happened.", "tokens": [50364, 440, 551, 466, 4997, 307, 4997, 307, 27993, 11745, 13, 400, 562, 291, 434, 4997, 294, 11, 291, 458, 11, 8650, 300, 366, 544, 11, 291, 458, 11, 32490, 11, 300, 362, 1252, 5065, 300, 362, 2823, 11, 291, 458, 11, 6565, 300, 362, 257, 3840, 295, 1785, 11, 51064, 51064, 550, 291, 362, 281, 411, 17362, 721, 484, 293, 20266, 721, 293, 853, 281, 7983, 264, 1252, 5065, 300, 362, 2011, 13, 51414, 51414, 400, 370, 291, 764, 439, 613, 721, 300, 366, 588, 16191, 293, 49325, 293, 436, 652, 291, 1570, 6679, 466, 428, 1500, 570, 291, 434, 27993, 1382, 281, 747, 613, 721, 597, 366, 2107, 22845, 304, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.08929440070842874, "compression_ratio": 2.0187265917602994, "no_caption_prob": 0.0007548810099251568}, {"id": 267, "seek": 203500, "start": 2056.0, "end": 2064.0, "text": " And so you use all these things that are very messy and brittle and they make you less confident about your test because you're inherently trying to take these things which are nonfunctional.", "tokens": [50364, 440, 551, 466, 4997, 307, 4997, 307, 27993, 11745, 13, 400, 562, 291, 434, 4997, 294, 11, 291, 458, 11, 8650, 300, 366, 544, 11, 291, 458, 11, 32490, 11, 300, 362, 1252, 5065, 300, 362, 2823, 11, 291, 458, 11, 6565, 300, 362, 257, 3840, 295, 1785, 11, 51064, 51064, 550, 291, 362, 281, 411, 17362, 721, 484, 293, 20266, 721, 293, 853, 281, 7983, 264, 1252, 5065, 300, 362, 2011, 13, 51414, 51414, 400, 370, 291, 764, 439, 613, 721, 300, 366, 588, 16191, 293, 49325, 293, 436, 652, 291, 1570, 6679, 466, 428, 1500, 570, 291, 434, 27993, 1382, 281, 747, 613, 721, 597, 366, 2107, 22845, 304, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.08929440070842874, "compression_ratio": 2.0187265917602994, "no_caption_prob": 0.0007548810099251568}, {"id": 268, "seek": 206400, "start": 2064.0, "end": 2074.0, "text": " Like side effects and like global state and environment. And you're trying to make them functional as in with this input, I get this output.", "tokens": [50364, 1743, 1252, 5065, 293, 411, 4338, 1785, 293, 2823, 13, 400, 291, 434, 1382, 281, 652, 552, 11745, 382, 294, 365, 341, 4846, 11, 286, 483, 341, 5598, 13, 50864, 50864, 1042, 11, 365, 2699, 76, 11, 300, 311, 439, 291, 362, 13, 407, 498, 291, 434, 3579, 257, 21156, 260, 11, 300, 311, 439, 309, 307, 13, 509, 976, 309, 341, 4846, 11, 341, 4009, 3089, 11, 597, 307, 445, 257, 6798, 13, 51364, 51364, 509, 483, 341, 1412, 2010, 13, 467, 311, 370, 1858, 13, 467, 311, 636, 3571, 813, 884, 309, 1553, 6921, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.07250608312021388, "compression_ratio": 1.6375545851528384, "no_caption_prob": 3.647742414614186e-05}, {"id": 269, "seek": 206400, "start": 2074.0, "end": 2084.0, "text": " Well, with Elm, that's all you have. So if you're writing a parser, that's all it is. You give it this input, this source code, which is just a string.", "tokens": [50364, 1743, 1252, 5065, 293, 411, 4338, 1785, 293, 2823, 13, 400, 291, 434, 1382, 281, 652, 552, 11745, 382, 294, 365, 341, 4846, 11, 286, 483, 341, 5598, 13, 50864, 50864, 1042, 11, 365, 2699, 76, 11, 300, 311, 439, 291, 362, 13, 407, 498, 291, 434, 3579, 257, 21156, 260, 11, 300, 311, 439, 309, 307, 13, 509, 976, 309, 341, 4846, 11, 341, 4009, 3089, 11, 597, 307, 445, 257, 6798, 13, 51364, 51364, 509, 483, 341, 1412, 2010, 13, 467, 311, 370, 1858, 13, 467, 311, 636, 3571, 813, 884, 309, 1553, 6921, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.07250608312021388, "compression_ratio": 1.6375545851528384, "no_caption_prob": 3.647742414614186e-05}, {"id": 270, "seek": 206400, "start": 2084.0, "end": 2089.0, "text": " You get this data type. It's so easy. It's way easier than doing it without tests.", "tokens": [50364, 1743, 1252, 5065, 293, 411, 4338, 1785, 293, 2823, 13, 400, 291, 434, 1382, 281, 652, 552, 11745, 382, 294, 365, 341, 4846, 11, 286, 483, 341, 5598, 13, 50864, 50864, 1042, 11, 365, 2699, 76, 11, 300, 311, 439, 291, 362, 13, 407, 498, 291, 434, 3579, 257, 21156, 260, 11, 300, 311, 439, 309, 307, 13, 509, 976, 309, 341, 4846, 11, 341, 4009, 3089, 11, 597, 307, 445, 257, 6798, 13, 51364, 51364, 509, 483, 341, 1412, 2010, 13, 467, 311, 370, 1858, 13, 467, 311, 636, 3571, 813, 884, 309, 1553, 6921, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.07250608312021388, "compression_ratio": 1.6375545851528384, "no_caption_prob": 3.647742414614186e-05}, {"id": 271, "seek": 208900, "start": 2089.0, "end": 2097.0, "text": " So I cannot recommend highly enough, whether it's a very complicated parser or a very simple parser, just write lots of tests.", "tokens": [50364, 407, 286, 2644, 2748, 5405, 1547, 11, 1968, 309, 311, 257, 588, 6179, 21156, 260, 420, 257, 588, 2199, 21156, 260, 11, 445, 2464, 3195, 295, 6921, 13, 50764, 50764, 400, 3297, 949, 291, 360, 604, 3389, 15164, 11, 2464, 6921, 13, 400, 949, 291, 360, 3389, 15164, 11, 754, 498, 291, 600, 3720, 428, 6921, 11, 18927, 309, 281, 2573, 484, 689, 264, 44641, 2761, 366, 13, 51314, 51314], "temperature": 0.0, "avg_logprob": -0.05755397346284655, "compression_ratio": 1.6224489795918366, "no_caption_prob": 3.705013295984827e-05}, {"id": 272, "seek": 208900, "start": 2097.0, "end": 2108.0, "text": " And certainly before you do any performance tuning, write tests. And before you do performance tuning, even if you've written your tests, benchmark it to figure out where the bottlenecks are.", "tokens": [50364, 407, 286, 2644, 2748, 5405, 1547, 11, 1968, 309, 311, 257, 588, 6179, 21156, 260, 420, 257, 588, 2199, 21156, 260, 11, 445, 2464, 3195, 295, 6921, 13, 50764, 50764, 400, 3297, 949, 291, 360, 604, 3389, 15164, 11, 2464, 6921, 13, 400, 949, 291, 360, 3389, 15164, 11, 754, 498, 291, 600, 3720, 428, 6921, 11, 18927, 309, 281, 2573, 484, 689, 264, 44641, 2761, 366, 13, 51314, 51314], "temperature": 0.0, "avg_logprob": -0.05755397346284655, "compression_ratio": 1.6224489795918366, "no_caption_prob": 3.705013295984827e-05}, {"id": 273, "seek": 210800, "start": 2108.0, "end": 2123.0, "text": " Yeah. Another good thing is that you work with building blocks. So you parse statements and inside of those you use a parser for expressions and you can unit test the expression parser and you can unit test the statement parser.", "tokens": [50364, 865, 13, 3996, 665, 551, 307, 300, 291, 589, 365, 2390, 8474, 13, 407, 291, 48377, 12363, 293, 1854, 295, 729, 291, 764, 257, 21156, 260, 337, 15277, 293, 291, 393, 4985, 1500, 264, 6114, 21156, 260, 293, 291, 393, 4985, 1500, 264, 5629, 21156, 260, 13, 51114, 51114, 400, 550, 291, 393, 4985, 1500, 264, 1379, 21156, 260, 11, 457, 291, 393, 360, 309, 412, 264, 1496, 300, 291, 643, 281, 13, 51414, 51414], "temperature": 0.0, "avg_logprob": -0.11612613479812424, "compression_ratio": 1.8941176470588235, "no_caption_prob": 7.296288913494209e-06}, {"id": 274, "seek": 210800, "start": 2123.0, "end": 2129.0, "text": " And then you can unit test the whole parser, but you can do it at the level that you need to.", "tokens": [50364, 865, 13, 3996, 665, 551, 307, 300, 291, 589, 365, 2390, 8474, 13, 407, 291, 48377, 12363, 293, 1854, 295, 729, 291, 764, 257, 21156, 260, 337, 15277, 293, 291, 393, 4985, 1500, 264, 6114, 21156, 260, 293, 291, 393, 4985, 1500, 264, 5629, 21156, 260, 13, 51114, 51114, 400, 550, 291, 393, 4985, 1500, 264, 1379, 21156, 260, 11, 457, 291, 393, 360, 309, 412, 264, 1496, 300, 291, 643, 281, 13, 51414, 51414], "temperature": 0.0, "avg_logprob": -0.11612613479812424, "compression_ratio": 1.8941176470588235, "no_caption_prob": 7.296288913494209e-06}, {"id": 275, "seek": 212900, "start": 2129.0, "end": 2141.0, "text": " That's a really good point. Yeah. And one thing I like to do, we kind of demonstrated it on this live stream that I did with a couple of people who have done a bunch of great contributions to the Elm Markdown project.", "tokens": [50364, 663, 311, 257, 534, 665, 935, 13, 865, 13, 400, 472, 551, 286, 411, 281, 360, 11, 321, 733, 295, 18772, 309, 322, 341, 1621, 4309, 300, 286, 630, 365, 257, 1916, 295, 561, 567, 362, 1096, 257, 3840, 295, 869, 15725, 281, 264, 2699, 76, 3934, 5093, 1716, 13, 50964, 50964, 492, 630, 257, 1621, 4309, 689, 321, 12270, 412, 1935, 257, 688, 295, 264, 14980, 337, 264, 3934, 5093, 3199, 21156, 278, 337, 264, 23331, 37261, 3934, 5093, 1608, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.05315162414728209, "compression_ratio": 1.5732758620689655, "no_caption_prob": 6.501918687717989e-05}, {"id": 276, "seek": 212900, "start": 2141.0, "end": 2152.0, "text": " We did a live stream where we implemented at least a lot of the functionality for the Markdown table parsing for the GitHub flavored Markdown spec.", "tokens": [50364, 663, 311, 257, 534, 665, 935, 13, 865, 13, 400, 472, 551, 286, 411, 281, 360, 11, 321, 733, 295, 18772, 309, 322, 341, 1621, 4309, 300, 286, 630, 365, 257, 1916, 295, 561, 567, 362, 1096, 257, 3840, 295, 869, 15725, 281, 264, 2699, 76, 3934, 5093, 1716, 13, 50964, 50964, 492, 630, 257, 1621, 4309, 689, 321, 12270, 412, 1935, 257, 688, 295, 264, 14980, 337, 264, 3934, 5093, 3199, 21156, 278, 337, 264, 23331, 37261, 3934, 5093, 1608, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.05315162414728209, "compression_ratio": 1.5732758620689655, "no_caption_prob": 6.501918687717989e-05}, {"id": 277, "seek": 215200, "start": 2152.0, "end": 2171.0, "text": " And one of the techniques we use there, which I find makes it a lot easier to do this process, is to just like, I mean, this, I hope that people get sick of me saying this because if they do, then I've accomplished my goal, which is to drill it into people's heads.", "tokens": [50364, 400, 472, 295, 264, 7512, 321, 764, 456, 11, 597, 286, 915, 1669, 309, 257, 688, 3571, 281, 360, 341, 1399, 11, 307, 281, 445, 411, 11, 286, 914, 11, 341, 11, 286, 1454, 300, 561, 483, 4998, 295, 385, 1566, 341, 570, 498, 436, 360, 11, 550, 286, 600, 15419, 452, 3387, 11, 597, 307, 281, 11392, 309, 666, 561, 311, 8050, 13, 51314, 51314], "temperature": 0.0, "avg_logprob": -0.10058642134946935, "compression_ratio": 1.5056818181818181, "no_caption_prob": 1.83415013452759e-05}, {"id": 278, "seek": 217100, "start": 2171.0, "end": 2185.0, "text": " Start with a hard coded success, get your tests passing as fast as possible. I mean, this is the basic sort of TDD concept of, you know, fake it till you make it where you make it dumb, then make it smarter.", "tokens": [50364, 6481, 365, 257, 1152, 34874, 2245, 11, 483, 428, 6921, 8437, 382, 2370, 382, 1944, 13, 286, 914, 11, 341, 307, 264, 3875, 1333, 295, 314, 20818, 3410, 295, 11, 291, 458, 11, 7592, 309, 4288, 291, 652, 309, 689, 291, 652, 309, 10316, 11, 550, 652, 309, 20294, 13, 51064, 51064, 7587, 13, 7587, 13, 1144, 264, 6631, 377, 551, 291, 727, 6264, 519, 295, 264, 700, 551, 300, 1487, 281, 1575, 13, 8278, 439, 264, 9360, 11733, 291, 393, 281, 483, 309, 3092, 293, 550, 1895, 15104, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.09475177399655606, "compression_ratio": 1.6521739130434783, "no_caption_prob": 8.664415872772224e-06}, {"id": 279, "seek": 217100, "start": 2185.0, "end": 2195.0, "text": " Exactly. Exactly. Do the stupidest thing you could possibly think of the first thing that comes to mind. Use all the dirty tricks you can to get it green and then refactor.", "tokens": [50364, 6481, 365, 257, 1152, 34874, 2245, 11, 483, 428, 6921, 8437, 382, 2370, 382, 1944, 13, 286, 914, 11, 341, 307, 264, 3875, 1333, 295, 314, 20818, 3410, 295, 11, 291, 458, 11, 7592, 309, 4288, 291, 652, 309, 689, 291, 652, 309, 10316, 11, 550, 652, 309, 20294, 13, 51064, 51064, 7587, 13, 7587, 13, 1144, 264, 6631, 377, 551, 291, 727, 6264, 519, 295, 264, 700, 551, 300, 1487, 281, 1575, 13, 8278, 439, 264, 9360, 11733, 291, 393, 281, 483, 309, 3092, 293, 550, 1895, 15104, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.09475177399655606, "compression_ratio": 1.6521739130434783, "no_caption_prob": 8.664415872772224e-06}, {"id": 280, "seek": 219500, "start": 2195.0, "end": 2203.0, "text": " But now you've got a starting point that you know works. It's all wired through. You have a test that's telling you if you have the expected result or not. Right.", "tokens": [50364, 583, 586, 291, 600, 658, 257, 2891, 935, 300, 291, 458, 1985, 13, 467, 311, 439, 27415, 807, 13, 509, 362, 257, 1500, 300, 311, 3585, 291, 498, 291, 362, 264, 5176, 1874, 420, 406, 13, 1779, 13, 50764, 50764, 407, 321, 630, 300, 294, 264, 1621, 4309, 689, 321, 848, 11, 731, 11, 286, 2066, 498, 286, 632, 411, 257, 3199, 411, 341, 11, 411, 437, 311, 264, 881, 3875, 1389, 295, 257, 23331, 37261, 3934, 5093, 3199, 30, 51264, 51264, 2264, 11, 300, 311, 527, 1500, 1389, 13, 400, 286, 576, 2066, 309, 281, 979, 1429, 294, 281, 48377, 666, 341, 1412, 3877, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.0889163624156605, "compression_ratio": 1.606060606060606, "no_caption_prob": 4.198285023448989e-05}, {"id": 281, "seek": 219500, "start": 2203.0, "end": 2213.0, "text": " So we did that in the live stream where we said, well, I expect if I had like a table like this, like what's the most basic case of a GitHub flavored Markdown table?", "tokens": [50364, 583, 586, 291, 600, 658, 257, 2891, 935, 300, 291, 458, 1985, 13, 467, 311, 439, 27415, 807, 13, 509, 362, 257, 1500, 300, 311, 3585, 291, 498, 291, 362, 264, 5176, 1874, 420, 406, 13, 1779, 13, 50764, 50764, 407, 321, 630, 300, 294, 264, 1621, 4309, 689, 321, 848, 11, 731, 11, 286, 2066, 498, 286, 632, 411, 257, 3199, 411, 341, 11, 411, 437, 311, 264, 881, 3875, 1389, 295, 257, 23331, 37261, 3934, 5093, 3199, 30, 51264, 51264, 2264, 11, 300, 311, 527, 1500, 1389, 13, 400, 286, 576, 2066, 309, 281, 979, 1429, 294, 281, 48377, 666, 341, 1412, 3877, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.0889163624156605, "compression_ratio": 1.606060606060606, "no_caption_prob": 4.198285023448989e-05}, {"id": 282, "seek": 219500, "start": 2213.0, "end": 2219.0, "text": " OK, that's our test case. And I would expect it to decode in to parse into this data structure.", "tokens": [50364, 583, 586, 291, 600, 658, 257, 2891, 935, 300, 291, 458, 1985, 13, 467, 311, 439, 27415, 807, 13, 509, 362, 257, 1500, 300, 311, 3585, 291, 498, 291, 362, 264, 5176, 1874, 420, 406, 13, 1779, 13, 50764, 50764, 407, 321, 630, 300, 294, 264, 1621, 4309, 689, 321, 848, 11, 731, 11, 286, 2066, 498, 286, 632, 411, 257, 3199, 411, 341, 11, 411, 437, 311, 264, 881, 3875, 1389, 295, 257, 23331, 37261, 3934, 5093, 3199, 30, 51264, 51264, 2264, 11, 300, 311, 527, 1500, 1389, 13, 400, 286, 576, 2066, 309, 281, 979, 1429, 294, 281, 48377, 666, 341, 1412, 3877, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.0889163624156605, "compression_ratio": 1.606060606060606, "no_caption_prob": 4.198285023448989e-05}, {"id": 283, "seek": 221900, "start": 2219.0, "end": 2226.0, "text": " So we write that test. It's not compiling. And then what do we do? We use data structure inline.", "tokens": [50364, 407, 321, 2464, 300, 1500, 13, 467, 311, 406, 715, 4883, 13, 400, 550, 437, 360, 321, 360, 30, 492, 764, 1412, 3877, 294, 1889, 13, 50714, 50714, 509, 1152, 3089, 309, 13, 7587, 13, 492, 1152, 3089, 309, 13, 400, 437, 437, 2445, 360, 321, 764, 281, 1152, 3089, 264, 1874, 30, 318, 1311, 4357, 30, 318, 1311, 4357, 13, 51164, 51164, 865, 11, 7754, 13, 318, 1311, 4357, 307, 264, 2141, 281, 2245, 13, 286, 478, 516, 281, 652, 300, 257, 314, 8336, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.1480253537495931, "compression_ratio": 1.6, "no_caption_prob": 7.030895358184353e-05}, {"id": 284, "seek": 221900, "start": 2226.0, "end": 2235.0, "text": " You hard code it. Exactly. We hard code it. And what what function do we use to hard code the result? Succeed? Succeed.", "tokens": [50364, 407, 321, 2464, 300, 1500, 13, 467, 311, 406, 715, 4883, 13, 400, 550, 437, 360, 321, 360, 30, 492, 764, 1412, 3877, 294, 1889, 13, 50714, 50714, 509, 1152, 3089, 309, 13, 7587, 13, 492, 1152, 3089, 309, 13, 400, 437, 437, 2445, 360, 321, 764, 281, 1152, 3089, 264, 1874, 30, 318, 1311, 4357, 30, 318, 1311, 4357, 13, 51164, 51164, 865, 11, 7754, 13, 318, 1311, 4357, 307, 264, 2141, 281, 2245, 13, 286, 478, 516, 281, 652, 300, 257, 314, 8336, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.1480253537495931, "compression_ratio": 1.6, "no_caption_prob": 7.030895358184353e-05}, {"id": 285, "seek": 221900, "start": 2235.0, "end": 2242.0, "text": " Yeah, succeed. Succeed is the key to success. I'm going to make that a T shirt.", "tokens": [50364, 407, 321, 2464, 300, 1500, 13, 467, 311, 406, 715, 4883, 13, 400, 550, 437, 360, 321, 360, 30, 492, 764, 1412, 3877, 294, 1889, 13, 50714, 50714, 509, 1152, 3089, 309, 13, 7587, 13, 492, 1152, 3089, 309, 13, 400, 437, 437, 2445, 360, 321, 764, 281, 1152, 3089, 264, 1874, 30, 318, 1311, 4357, 30, 318, 1311, 4357, 13, 51164, 51164, 865, 11, 7754, 13, 318, 1311, 4357, 307, 264, 2141, 281, 2245, 13, 286, 478, 516, 281, 652, 300, 257, 314, 8336, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.1480253537495931, "compression_ratio": 1.6, "no_caption_prob": 7.030895358184353e-05}, {"id": 286, "seek": 224200, "start": 2242.0, "end": 2250.0, "text": " I want one. Succeed in in monospace font. Succeed is the key to success. That's that's good.", "tokens": [50364, 286, 528, 472, 13, 318, 1311, 4357, 294, 294, 1108, 35682, 10703, 13, 318, 1311, 4357, 307, 264, 2141, 281, 2245, 13, 663, 311, 300, 311, 665, 13, 50764, 50764, 286, 478, 516, 281, 15258, 300, 13, 286, 478, 516, 281, 15258, 300, 558, 934, 341, 13, 5303, 561, 257, 13164, 19604, 295, 341, 3500, 13, 51014, 51014, 583, 286, 534, 519, 309, 311, 257, 869, 2290, 570, 309, 6653, 291, 747, 257, 1359, 1823, 300, 11, 291, 458, 11, 291, 600, 658, 746, 281, 589, 3030, 293, 281, 44497, 3030, 13, 51414, 51414, 583, 291, 458, 300, 264, 3467, 393, 439, 1622, 493, 13, 509, 458, 300, 411, 510, 311, 264, 1874, 286, 478, 1237, 337, 293, 291, 393, 1821, 309, 760, 666, 4356, 4439, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.08401261395170488, "compression_ratio": 1.7813620071684588, "no_caption_prob": 0.00023046905698720366}, {"id": 287, "seek": 224200, "start": 2250.0, "end": 2255.0, "text": " I'm going to tweet that. I'm going to tweet that right after this. Give people a sneak peek of this episode.", "tokens": [50364, 286, 528, 472, 13, 318, 1311, 4357, 294, 294, 1108, 35682, 10703, 13, 318, 1311, 4357, 307, 264, 2141, 281, 2245, 13, 663, 311, 300, 311, 665, 13, 50764, 50764, 286, 478, 516, 281, 15258, 300, 13, 286, 478, 516, 281, 15258, 300, 558, 934, 341, 13, 5303, 561, 257, 13164, 19604, 295, 341, 3500, 13, 51014, 51014, 583, 286, 534, 519, 309, 311, 257, 869, 2290, 570, 309, 6653, 291, 747, 257, 1359, 1823, 300, 11, 291, 458, 11, 291, 600, 658, 746, 281, 589, 3030, 293, 281, 44497, 3030, 13, 51414, 51414, 583, 291, 458, 300, 264, 3467, 393, 439, 1622, 493, 13, 509, 458, 300, 411, 510, 311, 264, 1874, 286, 478, 1237, 337, 293, 291, 393, 1821, 309, 760, 666, 4356, 4439, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.08401261395170488, "compression_ratio": 1.7813620071684588, "no_caption_prob": 0.00023046905698720366}, {"id": 288, "seek": 224200, "start": 2255.0, "end": 2263.0, "text": " But I really think it's a great tool because it lets you take a small step that, you know, you've got something to work towards and to iterate towards.", "tokens": [50364, 286, 528, 472, 13, 318, 1311, 4357, 294, 294, 1108, 35682, 10703, 13, 318, 1311, 4357, 307, 264, 2141, 281, 2245, 13, 663, 311, 300, 311, 665, 13, 50764, 50764, 286, 478, 516, 281, 15258, 300, 13, 286, 478, 516, 281, 15258, 300, 558, 934, 341, 13, 5303, 561, 257, 13164, 19604, 295, 341, 3500, 13, 51014, 51014, 583, 286, 534, 519, 309, 311, 257, 869, 2290, 570, 309, 6653, 291, 747, 257, 1359, 1823, 300, 11, 291, 458, 11, 291, 600, 658, 746, 281, 589, 3030, 293, 281, 44497, 3030, 13, 51414, 51414, 583, 291, 458, 300, 264, 3467, 393, 439, 1622, 493, 13, 509, 458, 300, 411, 510, 311, 264, 1874, 286, 478, 1237, 337, 293, 291, 393, 1821, 309, 760, 666, 4356, 4439, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.08401261395170488, "compression_ratio": 1.7813620071684588, "no_caption_prob": 0.00023046905698720366}, {"id": 289, "seek": 224200, "start": 2263.0, "end": 2271.0, "text": " But you know that the types can all line up. You know that like here's the result I'm looking for and you can break it down into smaller steps.", "tokens": [50364, 286, 528, 472, 13, 318, 1311, 4357, 294, 294, 1108, 35682, 10703, 13, 318, 1311, 4357, 307, 264, 2141, 281, 2245, 13, 663, 311, 300, 311, 665, 13, 50764, 50764, 286, 478, 516, 281, 15258, 300, 13, 286, 478, 516, 281, 15258, 300, 558, 934, 341, 13, 5303, 561, 257, 13164, 19604, 295, 341, 3500, 13, 51014, 51014, 583, 286, 534, 519, 309, 311, 257, 869, 2290, 570, 309, 6653, 291, 747, 257, 1359, 1823, 300, 11, 291, 458, 11, 291, 600, 658, 746, 281, 589, 3030, 293, 281, 44497, 3030, 13, 51414, 51414, 583, 291, 458, 300, 264, 3467, 393, 439, 1622, 493, 13, 509, 458, 300, 411, 510, 311, 264, 1874, 286, 478, 1237, 337, 293, 291, 393, 1821, 309, 760, 666, 4356, 4439, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.08401261395170488, "compression_ratio": 1.7813620071684588, "no_caption_prob": 0.00023046905698720366}, {"id": 290, "seek": 227100, "start": 2271.0, "end": 2282.0, "text": " So one thing I think we should talk about is when should you use a parser and when should you use something else like probably a RegEx?", "tokens": [50364, 407, 472, 551, 286, 519, 321, 820, 751, 466, 307, 562, 820, 291, 764, 257, 21156, 260, 293, 562, 820, 291, 764, 746, 1646, 411, 1391, 257, 4791, 11149, 30, 50914, 50914, 7021, 13, 407, 2086, 11, 286, 478, 1953, 562, 309, 2170, 588, 6179, 13, 583, 300, 311, 286, 500, 380, 458, 604, 2685, 1412, 2793, 689, 291, 820, 584, 11, 1954, 11, 341, 307, 2138, 21156, 260, 2527, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.19973260243733723, "compression_ratio": 1.5346534653465347, "no_caption_prob": 0.00022337923292070627}, {"id": 291, "seek": 227100, "start": 2282.0, "end": 2297.0, "text": " Absolutely. So yes, I'm thinking when it gets very complicated. But that's I don't know any specific data points where you should say, oh, this is definitely parser material.", "tokens": [50364, 407, 472, 551, 286, 519, 321, 820, 751, 466, 307, 562, 820, 291, 764, 257, 21156, 260, 293, 562, 820, 291, 764, 746, 1646, 411, 1391, 257, 4791, 11149, 30, 50914, 50914, 7021, 13, 407, 2086, 11, 286, 478, 1953, 562, 309, 2170, 588, 6179, 13, 583, 300, 311, 286, 500, 380, 458, 604, 2685, 1412, 2793, 689, 291, 820, 584, 11, 1954, 11, 341, 307, 2138, 21156, 260, 2527, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.19973260243733723, "compression_ratio": 1.5346534653465347, "no_caption_prob": 0.00022337923292070627}, {"id": 292, "seek": 229700, "start": 2297.0, "end": 2307.0, "text": " So when it gets complicated to use a parser, it's not complicated to use RegEx. So try RegEx and then if it fails, if it doesn't work, try a parser.", "tokens": [50364, 407, 562, 309, 2170, 6179, 281, 764, 257, 21156, 260, 11, 309, 311, 406, 6179, 281, 764, 4791, 11149, 13, 407, 853, 4791, 11149, 293, 550, 498, 309, 18199, 11, 498, 309, 1177, 380, 589, 11, 853, 257, 21156, 260, 13, 50864, 50864, 865, 11, 341, 307, 341, 307, 257, 869, 1168, 13, 400, 286, 519, 456, 366, 257, 1326, 721, 300, 808, 281, 1575, 337, 1310, 512, 512, 3089, 10036, 300, 1062, 935, 291, 294, 264, 3513, 295, 21156, 260, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.1001293936441111, "compression_ratio": 1.6512820512820512, "no_caption_prob": 4.46917001681868e-05}, {"id": 293, "seek": 229700, "start": 2307.0, "end": 2319.0, "text": " Yeah, this is this is a great question. And I think there are a few things that come to mind for maybe some some code smells that might point you in the direction of parser.", "tokens": [50364, 407, 562, 309, 2170, 6179, 281, 764, 257, 21156, 260, 11, 309, 311, 406, 6179, 281, 764, 4791, 11149, 13, 407, 853, 4791, 11149, 293, 550, 498, 309, 18199, 11, 498, 309, 1177, 380, 589, 11, 853, 257, 21156, 260, 13, 50864, 50864, 865, 11, 341, 307, 341, 307, 257, 869, 1168, 13, 400, 286, 519, 456, 366, 257, 1326, 721, 300, 808, 281, 1575, 337, 1310, 512, 512, 3089, 10036, 300, 1062, 935, 291, 294, 264, 3513, 295, 21156, 260, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.1001293936441111, "compression_ratio": 1.6512820512820512, "no_caption_prob": 4.46917001681868e-05}, {"id": 294, "seek": 231900, "start": 2319.0, "end": 2329.0, "text": " So I like the idea that if you can throw together a RegEx in three minutes that does what you need and it's not super complicated, then great.", "tokens": [50364, 407, 286, 411, 264, 1558, 300, 498, 291, 393, 3507, 1214, 257, 4791, 11149, 294, 1045, 2077, 300, 775, 437, 291, 643, 293, 309, 311, 406, 1687, 6179, 11, 550, 869, 13, 50864, 50864, 583, 718, 311, 584, 300, 291, 434, 1364, 365, 257, 4791, 11149, 293, 490, 37649, 4886, 10565, 11, 291, 362, 490, 37649, 4886, 10565, 307, 2891, 281, 360, 534, 6179, 721, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.10165861674717494, "compression_ratio": 1.5737704918032787, "no_caption_prob": 1.3081670431347447e-06}, {"id": 295, "seek": 231900, "start": 2329.0, "end": 2341.0, "text": " But let's say that you're working with a RegEx and from Stack Overflow, you have from Stack Overflow is starting to do really complicated things.", "tokens": [50364, 407, 286, 411, 264, 1558, 300, 498, 291, 393, 3507, 1214, 257, 4791, 11149, 294, 1045, 2077, 300, 775, 437, 291, 643, 293, 309, 311, 406, 1687, 6179, 11, 550, 869, 13, 50864, 50864, 583, 718, 311, 584, 300, 291, 434, 1364, 365, 257, 4791, 11149, 293, 490, 37649, 4886, 10565, 11, 291, 362, 490, 37649, 4886, 10565, 307, 2891, 281, 360, 534, 6179, 721, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.10165861674717494, "compression_ratio": 1.5737704918032787, "no_caption_prob": 1.3081670431347447e-06}, {"id": 296, "seek": 234100, "start": 2341.0, "end": 2361.0, "text": " And perhaps you're capturing a lot of pieces, you have a lot of capture groups. So first of all, the API for dealing with capture groups is, you know, you don't get these nice sort of types where the Elm compiler says, oh, because of the way that you wrote this, you're going to get these types like you do with JSON decoders and things like that.", "tokens": [50364, 400, 4317, 291, 434, 23384, 257, 688, 295, 3755, 11, 291, 362, 257, 688, 295, 7983, 3935, 13, 407, 700, 295, 439, 11, 264, 9362, 337, 6260, 365, 7983, 3935, 307, 11, 291, 458, 11, 291, 500, 380, 483, 613, 1481, 1333, 295, 3467, 689, 264, 2699, 76, 31958, 1619, 11, 1954, 11, 570, 295, 264, 636, 300, 291, 4114, 341, 11, 291, 434, 516, 281, 483, 613, 3467, 411, 291, 360, 365, 31828, 979, 378, 433, 293, 721, 411, 300, 13, 51364, 51364, 865, 11, 309, 311, 445, 411, 11, 2264, 11, 1310, 456, 366, 512, 13985, 510, 420, 1310, 406, 13, 1743, 1310, 456, 311, 257, 1329, 295, 721, 291, 362, 281, 1520, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.0741104523340861, "compression_ratio": 1.7372262773722629, "no_caption_prob": 1.544606129755266e-05}, {"id": 297, "seek": 234100, "start": 2361.0, "end": 2369.0, "text": " Yeah, it's just like, OK, maybe there are some strings here or maybe not. Like maybe there's a list of things you have to check.", "tokens": [50364, 400, 4317, 291, 434, 23384, 257, 688, 295, 3755, 11, 291, 362, 257, 688, 295, 7983, 3935, 13, 407, 700, 295, 439, 11, 264, 9362, 337, 6260, 365, 7983, 3935, 307, 11, 291, 458, 11, 291, 500, 380, 483, 613, 1481, 1333, 295, 3467, 689, 264, 2699, 76, 31958, 1619, 11, 1954, 11, 570, 295, 264, 636, 300, 291, 4114, 341, 11, 291, 434, 516, 281, 483, 613, 3467, 411, 291, 360, 365, 31828, 979, 378, 433, 293, 721, 411, 300, 13, 51364, 51364, 865, 11, 309, 311, 445, 411, 11, 2264, 11, 1310, 456, 366, 512, 13985, 510, 420, 1310, 406, 13, 1743, 1310, 456, 311, 257, 1329, 295, 721, 291, 362, 281, 1520, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.0741104523340861, "compression_ratio": 1.7372262773722629, "no_caption_prob": 1.544606129755266e-05}, {"id": 298, "seek": 236900, "start": 2369.0, "end": 2373.0, "text": " And then you always get it as a string, which is not always what you want.", "tokens": [50364, 400, 550, 291, 1009, 483, 309, 382, 257, 6798, 11, 597, 307, 406, 1009, 437, 291, 528, 13, 50564, 50564, 865, 11, 2293, 13, 407, 291, 362, 281, 808, 646, 926, 1780, 293, 1520, 11, 775, 341, 2995, 341, 4791, 11149, 300, 309, 311, 257, 6798, 420, 360, 512, 661, 13834, 322, 309, 30, 51214, 51214, 759, 291, 434, 884, 257, 688, 295, 300, 11, 300, 311, 1391, 257, 4316, 300, 291, 21156, 260, 1062, 312, 257, 665, 3318, 13, 759, 291, 528, 281, 976, 588, 13600, 6713, 7897, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.06323358860421688, "compression_ratio": 1.5614035087719298, "no_caption_prob": 0.00011959454423049465}, {"id": 299, "seek": 236900, "start": 2373.0, "end": 2386.0, "text": " Yeah, exactly. So you have to come back around later and check, does this match this RegEx that it's a string or do some other checks on it?", "tokens": [50364, 400, 550, 291, 1009, 483, 309, 382, 257, 6798, 11, 597, 307, 406, 1009, 437, 291, 528, 13, 50564, 50564, 865, 11, 2293, 13, 407, 291, 362, 281, 808, 646, 926, 1780, 293, 1520, 11, 775, 341, 2995, 341, 4791, 11149, 300, 309, 311, 257, 6798, 420, 360, 512, 661, 13834, 322, 309, 30, 51214, 51214, 759, 291, 434, 884, 257, 688, 295, 300, 11, 300, 311, 1391, 257, 4316, 300, 291, 21156, 260, 1062, 312, 257, 665, 3318, 13, 759, 291, 528, 281, 976, 588, 13600, 6713, 7897, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.06323358860421688, "compression_ratio": 1.5614035087719298, "no_caption_prob": 0.00011959454423049465}, {"id": 300, "seek": 236900, "start": 2386.0, "end": 2396.0, "text": " If you're doing a lot of that, that's probably a smell that you parser might be a good fit. If you want to give very precise error messages.", "tokens": [50364, 400, 550, 291, 1009, 483, 309, 382, 257, 6798, 11, 597, 307, 406, 1009, 437, 291, 528, 13, 50564, 50564, 865, 11, 2293, 13, 407, 291, 362, 281, 808, 646, 926, 1780, 293, 1520, 11, 775, 341, 2995, 341, 4791, 11149, 300, 309, 311, 257, 6798, 420, 360, 512, 661, 13834, 322, 309, 30, 51214, 51214, 759, 291, 434, 884, 257, 688, 295, 300, 11, 300, 311, 1391, 257, 4316, 300, 291, 21156, 260, 1062, 312, 257, 665, 3318, 13, 759, 291, 528, 281, 976, 588, 13600, 6713, 7897, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.06323358860421688, "compression_ratio": 1.5614035087719298, "no_caption_prob": 0.00011959454423049465}, {"id": 301, "seek": 239600, "start": 2396.0, "end": 2417.0, "text": " That's definitely a sign that Elm parser is a good fit, I think. I mean, I think it's safe to say that Elm and Evan's work have been very influential in the broader software development community and set an example of they've kind of set the bar for good error messages.", "tokens": [50364, 663, 311, 2138, 257, 1465, 300, 2699, 76, 21156, 260, 307, 257, 665, 3318, 11, 286, 519, 13, 286, 914, 11, 286, 519, 309, 311, 3273, 281, 584, 300, 2699, 76, 293, 22613, 311, 589, 362, 668, 588, 22215, 294, 264, 13227, 4722, 3250, 1768, 293, 992, 364, 1365, 295, 436, 600, 733, 295, 992, 264, 2159, 337, 665, 6713, 7897, 13, 51414, 51414, 400, 11, 291, 458, 11, 257, 688, 295, 309, 311, 294, 527, 589, 886, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.14364255192768144, "compression_ratio": 1.5339805825242718, "no_caption_prob": 2.7107653295388445e-05}, {"id": 302, "seek": 239600, "start": 2417.0, "end": 2421.0, "text": " And, you know, a lot of it's in our work too.", "tokens": [50364, 663, 311, 2138, 257, 1465, 300, 2699, 76, 21156, 260, 307, 257, 665, 3318, 11, 286, 519, 13, 286, 914, 11, 286, 519, 309, 311, 3273, 281, 584, 300, 2699, 76, 293, 22613, 311, 589, 362, 668, 588, 22215, 294, 264, 13227, 4722, 3250, 1768, 293, 992, 364, 1365, 295, 436, 600, 733, 295, 992, 264, 2159, 337, 665, 6713, 7897, 13, 51414, 51414, 400, 11, 291, 458, 11, 257, 688, 295, 309, 311, 294, 527, 589, 886, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.14364255192768144, "compression_ratio": 1.5339805825242718, "no_caption_prob": 2.7107653295388445e-05}, {"id": 303, "seek": 242100, "start": 2421.0, "end": 2439.0, "text": " We have ruthlessly stolen the formatting and inspiration from Elm error messages and so have we were inspired and we were inspired so much that it made us steal ideas.", "tokens": [50364, 492, 362, 38225, 12048, 15900, 264, 39366, 293, 10249, 490, 2699, 76, 6713, 7897, 293, 370, 362, 321, 645, 7547, 293, 321, 645, 7547, 370, 709, 300, 309, 1027, 505, 11009, 3487, 13, 51264, 51264, 467, 311, 264, 9705, 1465, 295, 41247, 88, 11, 558, 30, 865, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.15964795992924616, "compression_ratio": 1.4594594594594594, "no_caption_prob": 0.00030525788315571845}, {"id": 304, "seek": 242100, "start": 2439.0, "end": 2443.0, "text": " It's the ultimate sign of flattery, right? Yeah.", "tokens": [50364, 492, 362, 38225, 12048, 15900, 264, 39366, 293, 10249, 490, 2699, 76, 6713, 7897, 293, 370, 362, 321, 645, 7547, 293, 321, 645, 7547, 370, 709, 300, 309, 1027, 505, 11009, 3487, 13, 51264, 51264, 467, 311, 264, 9705, 1465, 295, 41247, 88, 11, 558, 30, 865, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.15964795992924616, "compression_ratio": 1.4594594594594594, "no_caption_prob": 0.00030525788315571845}, {"id": 305, "seek": 244300, "start": 2443.0, "end": 2451.0, "text": " No, I mean, I think that Evan has really been influential in what good error messages can look like.", "tokens": [50364, 883, 11, 286, 914, 11, 286, 519, 300, 22613, 575, 534, 668, 22215, 294, 437, 665, 6713, 7897, 393, 574, 411, 13, 50764, 50764, 400, 2138, 13, 634, 3094, 2699, 76, 21156, 260, 365, 300, 294, 1575, 11, 558, 30, 407, 2699, 76, 21156, 260, 2709, 291, 512, 3873, 281, 976, 512, 534, 13600, 11, 1090, 3125, 6713, 7897, 13, 51364, 51364], "temperature": 0.0, "avg_logprob": -0.11386304348707199, "compression_ratio": 1.4912280701754386, "no_caption_prob": 1.0129712791240308e-05}, {"id": 306, "seek": 244300, "start": 2451.0, "end": 2463.0, "text": " And definitely. He built Elm parser with that in mind, right? So Elm parser gives you some tools to give some really precise, high quality error messages.", "tokens": [50364, 883, 11, 286, 914, 11, 286, 519, 300, 22613, 575, 534, 668, 22215, 294, 437, 665, 6713, 7897, 393, 574, 411, 13, 50764, 50764, 400, 2138, 13, 634, 3094, 2699, 76, 21156, 260, 365, 300, 294, 1575, 11, 558, 30, 407, 2699, 76, 21156, 260, 2709, 291, 512, 3873, 281, 976, 512, 534, 13600, 11, 1090, 3125, 6713, 7897, 13, 51364, 51364], "temperature": 0.0, "avg_logprob": -0.11386304348707199, "compression_ratio": 1.4912280701754386, "no_caption_prob": 1.0129712791240308e-05}, {"id": 307, "seek": 246300, "start": 2463.0, "end": 2475.0, "text": " So there's something else I've been wondering, because in Elm syntax, you get to play with expressions, statements or declarations, or both.", "tokens": [50364, 407, 456, 311, 746, 1646, 286, 600, 668, 6359, 11, 570, 294, 2699, 76, 28431, 11, 291, 483, 281, 862, 365, 15277, 11, 12363, 420, 16694, 763, 11, 420, 1293, 13, 50964, 50964, 400, 291, 483, 281, 458, 264, 4914, 295, 1184, 4478, 13, 407, 291, 458, 689, 341, 1230, 6114, 8516, 294, 11, 689, 264, 2010, 13397, 2314, 281, 312, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.1287841507882783, "compression_ratio": 1.5268817204301075, "no_caption_prob": 2.930931623268407e-05}, {"id": 308, "seek": 246300, "start": 2475.0, "end": 2489.0, "text": " And you get to know the location of each element. So you know where this number expression appeared in, where the type signature happens to be.", "tokens": [50364, 407, 456, 311, 746, 1646, 286, 600, 668, 6359, 11, 570, 294, 2699, 76, 28431, 11, 291, 483, 281, 862, 365, 15277, 11, 12363, 420, 16694, 763, 11, 420, 1293, 13, 50964, 50964, 400, 291, 483, 281, 458, 264, 4914, 295, 1184, 4478, 13, 407, 291, 458, 689, 341, 1230, 6114, 8516, 294, 11, 689, 264, 2010, 13397, 2314, 281, 312, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.1287841507882783, "compression_ratio": 1.5268817204301075, "no_caption_prob": 2.930931623268407e-05}, {"id": 309, "seek": 248900, "start": 2489.0, "end": 2496.0, "text": " How do you get that information? Is that something complex? Is that something that you do with parser advanced or?", "tokens": [50364, 1012, 360, 291, 483, 300, 1589, 30, 1119, 300, 746, 3997, 30, 1119, 300, 746, 300, 291, 360, 365, 21156, 260, 7339, 420, 30, 50714, 50714, 467, 311, 767, 41358, 1858, 13, 663, 311, 472, 5633, 300, 11, 1338, 11, 370, 439, 291, 360, 307, 498, 291, 434, 1382, 281, 7983, 11, 411, 11, 718, 311, 747, 428, 1365, 689, 291, 434, 1566, 316, 6915, 472, 11, 732, 11, 1045, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.12437695821126302, "compression_ratio": 1.563157894736842, "no_caption_prob": 1.952528691617772e-05}, {"id": 310, "seek": 248900, "start": 2496.0, "end": 2512.0, "text": " It's actually ridiculously easy. That's one task that, yeah, so all you do is if you're trying to capture, like, let's take your example where you're saying A equals one, two, three.", "tokens": [50364, 1012, 360, 291, 483, 300, 1589, 30, 1119, 300, 746, 3997, 30, 1119, 300, 746, 300, 291, 360, 365, 21156, 260, 7339, 420, 30, 50714, 50714, 467, 311, 767, 41358, 1858, 13, 663, 311, 472, 5633, 300, 11, 1338, 11, 370, 439, 291, 360, 307, 498, 291, 434, 1382, 281, 7983, 11, 411, 11, 718, 311, 747, 428, 1365, 689, 291, 434, 1566, 316, 6915, 472, 11, 732, 11, 1045, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.12437695821126302, "compression_ratio": 1.563157894736842, "no_caption_prob": 1.952528691617772e-05}, {"id": 311, "seek": 251200, "start": 2512.0, "end": 2522.0, "text": " When you have your parser that's either going to try an integer or float, then what you can actually do, you can say, actually, so this is my expression parser.", "tokens": [50364, 1133, 291, 362, 428, 21156, 260, 300, 311, 2139, 516, 281, 853, 364, 24922, 420, 15706, 11, 550, 437, 291, 393, 767, 360, 11, 291, 393, 584, 11, 767, 11, 370, 341, 307, 452, 6114, 21156, 260, 13, 50864, 50864, 407, 309, 311, 516, 281, 312, 472, 295, 24922, 420, 15706, 11, 597, 307, 300, 472, 21156, 260, 321, 7642, 11, 558, 30, 51114, 51114, 407, 291, 2524, 257, 17716, 294, 264, 3060, 293, 300, 17716, 307, 439, 15277, 341, 636, 13, 51414, 51414, 407, 341, 307, 428, 2891, 935, 13, 509, 434, 4877, 412, 341, 955, 17716, 294, 264, 3060, 300, 575, 439, 613, 14518, 300, 9819, 766, 337, 439, 264, 6114, 3467, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.0661052695843352, "compression_ratio": 1.888, "no_caption_prob": 2.247330849058926e-05}, {"id": 312, "seek": 251200, "start": 2522.0, "end": 2527.0, "text": " So it's going to be one of integer or float, which is that one parser we defined, right?", "tokens": [50364, 1133, 291, 362, 428, 21156, 260, 300, 311, 2139, 516, 281, 853, 364, 24922, 420, 15706, 11, 550, 437, 291, 393, 767, 360, 11, 291, 393, 584, 11, 767, 11, 370, 341, 307, 452, 6114, 21156, 260, 13, 50864, 50864, 407, 309, 311, 516, 281, 312, 472, 295, 24922, 420, 15706, 11, 597, 307, 300, 472, 21156, 260, 321, 7642, 11, 558, 30, 51114, 51114, 407, 291, 2524, 257, 17716, 294, 264, 3060, 293, 300, 17716, 307, 439, 15277, 341, 636, 13, 51414, 51414, 407, 341, 307, 428, 2891, 935, 13, 509, 434, 4877, 412, 341, 955, 17716, 294, 264, 3060, 300, 575, 439, 613, 14518, 300, 9819, 766, 337, 439, 264, 6114, 3467, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.0661052695843352, "compression_ratio": 1.888, "no_caption_prob": 2.247330849058926e-05}, {"id": 313, "seek": 251200, "start": 2527.0, "end": 2533.0, "text": " So you reach a fork in the road and that fork is all expressions this way.", "tokens": [50364, 1133, 291, 362, 428, 21156, 260, 300, 311, 2139, 516, 281, 853, 364, 24922, 420, 15706, 11, 550, 437, 291, 393, 767, 360, 11, 291, 393, 584, 11, 767, 11, 370, 341, 307, 452, 6114, 21156, 260, 13, 50864, 50864, 407, 309, 311, 516, 281, 312, 472, 295, 24922, 420, 15706, 11, 597, 307, 300, 472, 21156, 260, 321, 7642, 11, 558, 30, 51114, 51114, 407, 291, 2524, 257, 17716, 294, 264, 3060, 293, 300, 17716, 307, 439, 15277, 341, 636, 13, 51414, 51414, 407, 341, 307, 428, 2891, 935, 13, 509, 434, 4877, 412, 341, 955, 17716, 294, 264, 3060, 300, 575, 439, 613, 14518, 300, 9819, 766, 337, 439, 264, 6114, 3467, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.0661052695843352, "compression_ratio": 1.888, "no_caption_prob": 2.247330849058926e-05}, {"id": 314, "seek": 251200, "start": 2533.0, "end": 2540.0, "text": " So this is your starting point. You're standing at this big fork in the road that has all these paths that branch off for all the expression types.", "tokens": [50364, 1133, 291, 362, 428, 21156, 260, 300, 311, 2139, 516, 281, 853, 364, 24922, 420, 15706, 11, 550, 437, 291, 393, 767, 360, 11, 291, 393, 584, 11, 767, 11, 370, 341, 307, 452, 6114, 21156, 260, 13, 50864, 50864, 407, 309, 311, 516, 281, 312, 472, 295, 24922, 420, 15706, 11, 597, 307, 300, 472, 21156, 260, 321, 7642, 11, 558, 30, 51114, 51114, 407, 291, 2524, 257, 17716, 294, 264, 3060, 293, 300, 17716, 307, 439, 15277, 341, 636, 13, 51414, 51414, 407, 341, 307, 428, 2891, 935, 13, 509, 434, 4877, 412, 341, 955, 17716, 294, 264, 3060, 300, 575, 439, 613, 14518, 300, 9819, 766, 337, 439, 264, 6114, 3467, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.0661052695843352, "compression_ratio": 1.888, "no_caption_prob": 2.247330849058926e-05}, {"id": 315, "seek": 254000, "start": 2540.0, "end": 2547.0, "text": " Because you know you need an expression here. And so you have, OK, if you go down this path, it's going to be a float or integer.", "tokens": [50364, 1436, 291, 458, 291, 643, 364, 6114, 510, 13, 400, 370, 291, 362, 11, 2264, 11, 498, 291, 352, 760, 341, 3100, 11, 309, 311, 516, 281, 312, 257, 15706, 420, 24922, 13, 50714, 50714, 759, 291, 352, 760, 341, 3100, 11, 309, 311, 516, 281, 312, 257, 6798, 13, 759, 291, 352, 760, 341, 3100, 11, 309, 311, 516, 281, 312, 257, 7006, 13, 51014, 51014, 1042, 11, 291, 393, 360, 746, 1219, 483, 18687, 13, 865, 13, 400, 483, 18687, 11, 291, 393, 445, 7983, 264, 2158, 295, 483, 18687, 11, 293, 300, 311, 445, 516, 281, 976, 291, 264, 1622, 1230, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.07250301991033992, "compression_ratio": 1.9609756097560975, "no_caption_prob": 0.00013134641631040722}, {"id": 316, "seek": 254000, "start": 2547.0, "end": 2553.0, "text": " If you go down this path, it's going to be a string. If you go down this path, it's going to be a variable.", "tokens": [50364, 1436, 291, 458, 291, 643, 364, 6114, 510, 13, 400, 370, 291, 362, 11, 2264, 11, 498, 291, 352, 760, 341, 3100, 11, 309, 311, 516, 281, 312, 257, 15706, 420, 24922, 13, 50714, 50714, 759, 291, 352, 760, 341, 3100, 11, 309, 311, 516, 281, 312, 257, 6798, 13, 759, 291, 352, 760, 341, 3100, 11, 309, 311, 516, 281, 312, 257, 7006, 13, 51014, 51014, 1042, 11, 291, 393, 360, 746, 1219, 483, 18687, 13, 865, 13, 400, 483, 18687, 11, 291, 393, 445, 7983, 264, 2158, 295, 483, 18687, 11, 293, 300, 311, 445, 516, 281, 976, 291, 264, 1622, 1230, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.07250301991033992, "compression_ratio": 1.9609756097560975, "no_caption_prob": 0.00013134641631040722}, {"id": 317, "seek": 254000, "start": 2553.0, "end": 2564.0, "text": " Well, you can do something called get offset. Yeah. And get offset, you can just capture the value of get offset, and that's just going to give you the line number.", "tokens": [50364, 1436, 291, 458, 291, 643, 364, 6114, 510, 13, 400, 370, 291, 362, 11, 2264, 11, 498, 291, 352, 760, 341, 3100, 11, 309, 311, 516, 281, 312, 257, 15706, 420, 24922, 13, 50714, 50714, 759, 291, 352, 760, 341, 3100, 11, 309, 311, 516, 281, 312, 257, 6798, 13, 759, 291, 352, 760, 341, 3100, 11, 309, 311, 516, 281, 312, 257, 7006, 13, 51014, 51014, 1042, 11, 291, 393, 360, 746, 1219, 483, 18687, 13, 865, 13, 400, 483, 18687, 11, 291, 393, 445, 7983, 264, 2158, 295, 483, 18687, 11, 293, 300, 311, 445, 516, 281, 976, 291, 264, 1622, 1230, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.07250301991033992, "compression_ratio": 1.9609756097560975, "no_caption_prob": 0.00013134641631040722}, {"id": 318, "seek": 256400, "start": 2564.0, "end": 2571.0, "text": " I think there's also like get row and get column or maybe it's get row and get call or whatever. But they're actually equivalent.", "tokens": [50364, 286, 519, 456, 311, 611, 411, 483, 5386, 293, 483, 7738, 420, 1310, 309, 311, 483, 5386, 293, 483, 818, 420, 2035, 13, 583, 436, 434, 767, 10344, 13, 50714, 50714, 509, 393, 28446, 309, 490, 300, 13, 583, 264, 935, 307, 300, 291, 445, 5021, 309, 322, 13, 50964, 50964, 407, 321, 2825, 466, 613, 40168, 300, 291, 1322, 689, 291, 584, 11240, 6915, 293, 11240, 5893, 13, 51364, 51364], "temperature": 0.0, "avg_logprob": -0.06393618779639675, "compression_ratio": 1.5869565217391304, "no_caption_prob": 7.3680464993231e-05}, {"id": 319, "seek": 256400, "start": 2571.0, "end": 2576.0, "text": " You can derive it from that. But the point is that you just chain it on.", "tokens": [50364, 286, 519, 456, 311, 611, 411, 483, 5386, 293, 483, 7738, 420, 1310, 309, 311, 483, 5386, 293, 483, 818, 420, 2035, 13, 583, 436, 434, 767, 10344, 13, 50714, 50714, 509, 393, 28446, 309, 490, 300, 13, 583, 264, 935, 307, 300, 291, 445, 5021, 309, 322, 13, 50964, 50964, 407, 321, 2825, 466, 613, 40168, 300, 291, 1322, 689, 291, 584, 11240, 6915, 293, 11240, 5893, 13, 51364, 51364], "temperature": 0.0, "avg_logprob": -0.06393618779639675, "compression_ratio": 1.5869565217391304, "no_caption_prob": 7.3680464993231e-05}, {"id": 320, "seek": 256400, "start": 2576.0, "end": 2584.0, "text": " So we talked about these pipelines that you build where you say pipe equals and pipe dot.", "tokens": [50364, 286, 519, 456, 311, 611, 411, 483, 5386, 293, 483, 7738, 420, 1310, 309, 311, 483, 5386, 293, 483, 818, 420, 2035, 13, 583, 436, 434, 767, 10344, 13, 50714, 50714, 509, 393, 28446, 309, 490, 300, 13, 583, 264, 935, 307, 300, 291, 445, 5021, 309, 322, 13, 50964, 50964, 407, 321, 2825, 466, 613, 40168, 300, 291, 1322, 689, 291, 584, 11240, 6915, 293, 11240, 5893, 13, 51364, 51364], "temperature": 0.0, "avg_logprob": -0.06393618779639675, "compression_ratio": 1.5869565217391304, "no_caption_prob": 7.3680464993231e-05}, {"id": 321, "seek": 258400, "start": 2584.0, "end": 2594.0, "text": " If you say pipe equals, it's always going to succeed and just give you, you say pipe equals get row, pipe equals get column.", "tokens": [50364, 759, 291, 584, 11240, 6915, 11, 309, 311, 1009, 516, 281, 7754, 293, 445, 976, 291, 11, 291, 584, 11240, 6915, 483, 5386, 11, 11240, 6915, 483, 7738, 13, 50864, 50864, 467, 311, 1009, 516, 281, 7754, 293, 976, 291, 264, 2190, 5386, 293, 7738, 382, 41674, 13, 51164, 51164, 400, 309, 311, 406, 516, 281, 3012, 2139, 13, 7587, 13, 467, 311, 445, 1242, 257, 1152, 34874, 2158, 2361, 322, 264, 1785, 295, 264, 21156, 260, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.07917277987410383, "compression_ratio": 1.8238636363636365, "no_caption_prob": 8.53023630043026e-06}, {"id": 322, "seek": 258400, "start": 2594.0, "end": 2600.0, "text": " It's always going to succeed and give you the current row and column as integers.", "tokens": [50364, 759, 291, 584, 11240, 6915, 11, 309, 311, 1009, 516, 281, 7754, 293, 445, 976, 291, 11, 291, 584, 11240, 6915, 483, 5386, 11, 11240, 6915, 483, 7738, 13, 50864, 50864, 467, 311, 1009, 516, 281, 7754, 293, 976, 291, 264, 2190, 5386, 293, 7738, 382, 41674, 13, 51164, 51164, 400, 309, 311, 406, 516, 281, 3012, 2139, 13, 7587, 13, 467, 311, 445, 1242, 257, 1152, 34874, 2158, 2361, 322, 264, 1785, 295, 264, 21156, 260, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.07917277987410383, "compression_ratio": 1.8238636363636365, "no_caption_prob": 8.53023630043026e-06}, {"id": 323, "seek": 258400, "start": 2600.0, "end": 2609.0, "text": " And it's not going to jump either. Exactly. It's just getting a hard coded value based on the state of the parser.", "tokens": [50364, 759, 291, 584, 11240, 6915, 11, 309, 311, 1009, 516, 281, 7754, 293, 445, 976, 291, 11, 291, 584, 11240, 6915, 483, 5386, 11, 11240, 6915, 483, 7738, 13, 50864, 50864, 467, 311, 1009, 516, 281, 7754, 293, 976, 291, 264, 2190, 5386, 293, 7738, 382, 41674, 13, 51164, 51164, 400, 309, 311, 406, 516, 281, 3012, 2139, 13, 7587, 13, 467, 311, 445, 1242, 257, 1152, 34874, 2158, 2361, 322, 264, 1785, 295, 264, 21156, 260, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.07917277987410383, "compression_ratio": 1.8238636363636365, "no_caption_prob": 8.53023630043026e-06}, {"id": 324, "seek": 260900, "start": 2609.0, "end": 2617.0, "text": " Exactly. It will never cause the parser to fail. It doesn't change the state of the parser at all. It just includes that value there.", "tokens": [50364, 7587, 13, 467, 486, 1128, 3082, 264, 21156, 260, 281, 3061, 13, 467, 1177, 380, 1319, 264, 1785, 295, 264, 21156, 260, 412, 439, 13, 467, 445, 5974, 300, 2158, 456, 13, 50764, 50764, 407, 437, 291, 393, 360, 307, 11, 291, 458, 11, 291, 434, 1940, 257, 1792, 294, 264, 3884, 11, 291, 483, 281, 341, 6114, 17716, 689, 291, 584, 11, 2264, 11, 286, 643, 281, 48377, 512, 1333, 295, 6114, 13, 51214, 51214, 400, 562, 291, 434, 4877, 456, 412, 300, 935, 11, 291, 584, 11, 1954, 11, 718, 385, 4444, 264, 5386, 293, 7738, 1230, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.04034029520474947, "compression_ratio": 1.652542372881356, "no_caption_prob": 7.966867269715294e-05}, {"id": 325, "seek": 260900, "start": 2617.0, "end": 2626.0, "text": " So what you can do is, you know, you're taking a walk in the park, you get to this expression fork where you say, OK, I need to parse some sort of expression.", "tokens": [50364, 7587, 13, 467, 486, 1128, 3082, 264, 21156, 260, 281, 3061, 13, 467, 1177, 380, 1319, 264, 1785, 295, 264, 21156, 260, 412, 439, 13, 467, 445, 5974, 300, 2158, 456, 13, 50764, 50764, 407, 437, 291, 393, 360, 307, 11, 291, 458, 11, 291, 434, 1940, 257, 1792, 294, 264, 3884, 11, 291, 483, 281, 341, 6114, 17716, 689, 291, 584, 11, 2264, 11, 286, 643, 281, 48377, 512, 1333, 295, 6114, 13, 51214, 51214, 400, 562, 291, 434, 4877, 456, 412, 300, 935, 11, 291, 584, 11, 1954, 11, 718, 385, 4444, 264, 5386, 293, 7738, 1230, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.04034029520474947, "compression_ratio": 1.652542372881356, "no_caption_prob": 7.966867269715294e-05}, {"id": 326, "seek": 260900, "start": 2626.0, "end": 2631.0, "text": " And when you're standing there at that point, you say, oh, let me grab the row and column number.", "tokens": [50364, 7587, 13, 467, 486, 1128, 3082, 264, 21156, 260, 281, 3061, 13, 467, 1177, 380, 1319, 264, 1785, 295, 264, 21156, 260, 412, 439, 13, 467, 445, 5974, 300, 2158, 456, 13, 50764, 50764, 407, 437, 291, 393, 360, 307, 11, 291, 458, 11, 291, 434, 1940, 257, 1792, 294, 264, 3884, 11, 291, 483, 281, 341, 6114, 17716, 689, 291, 584, 11, 2264, 11, 286, 643, 281, 48377, 512, 1333, 295, 6114, 13, 51214, 51214, 400, 562, 291, 434, 4877, 456, 412, 300, 935, 11, 291, 584, 11, 1954, 11, 718, 385, 4444, 264, 5386, 293, 7738, 1230, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.04034029520474947, "compression_ratio": 1.652542372881356, "no_caption_prob": 7.966867269715294e-05}, {"id": 327, "seek": 263100, "start": 2631.0, "end": 2641.0, "text": " And now you just have that data and you include it as part of your expression. And then when you reach the end of that, one of those paths, you do the same thing.", "tokens": [50364, 400, 586, 291, 445, 362, 300, 1412, 293, 291, 4090, 309, 382, 644, 295, 428, 6114, 13, 400, 550, 562, 291, 2524, 264, 917, 295, 300, 11, 472, 295, 729, 14518, 11, 291, 360, 264, 912, 551, 13, 50864, 50864, 407, 437, 291, 576, 360, 307, 291, 576, 584, 11, 2264, 11, 286, 478, 884, 411, 257, 718, 17359, 21156, 260, 420, 286, 478, 884, 411, 11, 291, 458, 11, 257, 1192, 1496, 13, 51364, 51364, 708, 311, 309, 1219, 30, 316, 1192, 1496, 2158, 21156, 260, 11, 558, 30, 316, 1192, 1496, 27606, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.08959584284310389, "compression_ratio": 1.646788990825688, "no_caption_prob": 3.219169957446866e-05}, {"id": 328, "seek": 263100, "start": 2641.0, "end": 2651.0, "text": " So what you would do is you would say, OK, I'm doing like a let binding parser or I'm doing like, you know, a top level.", "tokens": [50364, 400, 586, 291, 445, 362, 300, 1412, 293, 291, 4090, 309, 382, 644, 295, 428, 6114, 13, 400, 550, 562, 291, 2524, 264, 917, 295, 300, 11, 472, 295, 729, 14518, 11, 291, 360, 264, 912, 551, 13, 50864, 50864, 407, 437, 291, 576, 360, 307, 291, 576, 584, 11, 2264, 11, 286, 478, 884, 411, 257, 718, 17359, 21156, 260, 420, 286, 478, 884, 411, 11, 291, 458, 11, 257, 1192, 1496, 13, 51364, 51364, 708, 311, 309, 1219, 30, 316, 1192, 1496, 2158, 21156, 260, 11, 558, 30, 316, 1192, 1496, 27606, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.08959584284310389, "compression_ratio": 1.646788990825688, "no_caption_prob": 3.219169957446866e-05}, {"id": 329, "seek": 263100, "start": 2651.0, "end": 2656.0, "text": " What's it called? A top level value parser, right? A top level declaration.", "tokens": [50364, 400, 586, 291, 445, 362, 300, 1412, 293, 291, 4090, 309, 382, 644, 295, 428, 6114, 13, 400, 550, 562, 291, 2524, 264, 917, 295, 300, 11, 472, 295, 729, 14518, 11, 291, 360, 264, 912, 551, 13, 50864, 50864, 407, 437, 291, 576, 360, 307, 291, 576, 584, 11, 2264, 11, 286, 478, 884, 411, 257, 718, 17359, 21156, 260, 420, 286, 478, 884, 411, 11, 291, 458, 11, 257, 1192, 1496, 13, 51364, 51364, 708, 311, 309, 1219, 30, 316, 1192, 1496, 2158, 21156, 260, 11, 558, 30, 316, 1192, 1496, 27606, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.08959584284310389, "compression_ratio": 1.646788990825688, "no_caption_prob": 3.219169957446866e-05}, {"id": 330, "seek": 265600, "start": 2656.0, "end": 2668.0, "text": " So I parse some sort of identifier like A and then I parse white space, then I parse equals, then I parse white space, then I parse an expression.", "tokens": [50364, 407, 286, 48377, 512, 1333, 295, 45690, 411, 316, 293, 550, 286, 48377, 2418, 1901, 11, 550, 286, 48377, 6915, 11, 550, 286, 48377, 2418, 1901, 11, 550, 286, 48377, 364, 6114, 13, 50964, 50964, 583, 949, 291, 48377, 300, 6114, 11, 411, 291, 727, 445, 4090, 309, 294, 428, 6114, 21156, 260, 689, 428, 6114, 21156, 260, 307, 13, 51314, 51314, 3240, 264, 2190, 5386, 293, 7738, 13, 8950, 264, 6114, 21156, 260, 11, 550, 483, 264, 2190, 5386, 293, 7738, 11, 293, 550, 291, 445, 4090, 300, 365, 428, 1412, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.08383511022194144, "compression_ratio": 2.149484536082474, "no_caption_prob": 0.00017399813805241138}, {"id": 331, "seek": 265600, "start": 2668.0, "end": 2675.0, "text": " But before you parse that expression, like you could just include it in your expression parser where your expression parser is.", "tokens": [50364, 407, 286, 48377, 512, 1333, 295, 45690, 411, 316, 293, 550, 286, 48377, 2418, 1901, 11, 550, 286, 48377, 6915, 11, 550, 286, 48377, 2418, 1901, 11, 550, 286, 48377, 364, 6114, 13, 50964, 50964, 583, 949, 291, 48377, 300, 6114, 11, 411, 291, 727, 445, 4090, 309, 294, 428, 6114, 21156, 260, 689, 428, 6114, 21156, 260, 307, 13, 51314, 51314, 3240, 264, 2190, 5386, 293, 7738, 13, 8950, 264, 6114, 21156, 260, 11, 550, 483, 264, 2190, 5386, 293, 7738, 11, 293, 550, 291, 445, 4090, 300, 365, 428, 1412, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.08383511022194144, "compression_ratio": 2.149484536082474, "no_caption_prob": 0.00017399813805241138}, {"id": 332, "seek": 265600, "start": 2675.0, "end": 2683.0, "text": " Get the current row and column. Run the expression parser, then get the current row and column, and then you just include that with your data.", "tokens": [50364, 407, 286, 48377, 512, 1333, 295, 45690, 411, 316, 293, 550, 286, 48377, 2418, 1901, 11, 550, 286, 48377, 6915, 11, 550, 286, 48377, 2418, 1901, 11, 550, 286, 48377, 364, 6114, 13, 50964, 50964, 583, 949, 291, 48377, 300, 6114, 11, 411, 291, 727, 445, 4090, 309, 294, 428, 6114, 21156, 260, 689, 428, 6114, 21156, 260, 307, 13, 51314, 51314, 3240, 264, 2190, 5386, 293, 7738, 13, 8950, 264, 6114, 21156, 260, 11, 550, 483, 264, 2190, 5386, 293, 7738, 11, 293, 550, 291, 445, 4090, 300, 365, 428, 1412, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.08383511022194144, "compression_ratio": 2.149484536082474, "no_caption_prob": 0.00017399813805241138}, {"id": 333, "seek": 268300, "start": 2683.0, "end": 2689.0, "text": " So now your data is start set, end set, plus whatever expression data structure you had.", "tokens": [50364, 407, 586, 428, 1412, 307, 722, 992, 11, 917, 992, 11, 1804, 2035, 6114, 1412, 3877, 291, 632, 13, 50664, 50664, 865, 11, 300, 3263, 1238, 2199, 13, 50814, 50814, 20464, 15325, 13, 407, 300, 311, 300, 311, 257, 534, 1481, 4111, 13, 51014, 51014, 7721, 11, 286, 2041, 300, 291, 393, 445, 2464, 257, 36133, 2445, 300, 445, 1619, 483, 4914, 670, 257, 21156, 260, 13, 51364, 51364, 7587, 13, 51414, 51414, 2264, 11, 300, 3263, 1238, 1481, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.1160208611261277, "compression_ratio": 1.5735294117647058, "no_caption_prob": 1.9222958144382574e-05}, {"id": 334, "seek": 268300, "start": 2689.0, "end": 2692.0, "text": " Yeah, that sounds pretty simple.", "tokens": [50364, 407, 586, 428, 1412, 307, 722, 992, 11, 917, 992, 11, 1804, 2035, 6114, 1412, 3877, 291, 632, 13, 50664, 50664, 865, 11, 300, 3263, 1238, 2199, 13, 50814, 50814, 20464, 15325, 13, 407, 300, 311, 300, 311, 257, 534, 1481, 4111, 13, 51014, 51014, 7721, 11, 286, 2041, 300, 291, 393, 445, 2464, 257, 36133, 2445, 300, 445, 1619, 483, 4914, 670, 257, 21156, 260, 13, 51364, 51364, 7587, 13, 51414, 51414, 2264, 11, 300, 3263, 1238, 1481, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.1160208611261277, "compression_ratio": 1.5735294117647058, "no_caption_prob": 1.9222958144382574e-05}, {"id": 335, "seek": 268300, "start": 2692.0, "end": 2696.0, "text": " Quite straightforward. So that's that's a really nice feature.", "tokens": [50364, 407, 586, 428, 1412, 307, 722, 992, 11, 917, 992, 11, 1804, 2035, 6114, 1412, 3877, 291, 632, 13, 50664, 50664, 865, 11, 300, 3263, 1238, 2199, 13, 50814, 50814, 20464, 15325, 13, 407, 300, 311, 300, 311, 257, 534, 1481, 4111, 13, 51014, 51014, 7721, 11, 286, 2041, 300, 291, 393, 445, 2464, 257, 36133, 2445, 300, 445, 1619, 483, 4914, 670, 257, 21156, 260, 13, 51364, 51364, 7587, 13, 51414, 51414, 2264, 11, 300, 3263, 1238, 1481, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.1160208611261277, "compression_ratio": 1.5735294117647058, "no_caption_prob": 1.9222958144382574e-05}, {"id": 336, "seek": 268300, "start": 2696.0, "end": 2703.0, "text": " Plus, I guess that you can just write a helper function that just says get location over a parser.", "tokens": [50364, 407, 586, 428, 1412, 307, 722, 992, 11, 917, 992, 11, 1804, 2035, 6114, 1412, 3877, 291, 632, 13, 50664, 50664, 865, 11, 300, 3263, 1238, 2199, 13, 50814, 50814, 20464, 15325, 13, 407, 300, 311, 300, 311, 257, 534, 1481, 4111, 13, 51014, 51014, 7721, 11, 286, 2041, 300, 291, 393, 445, 2464, 257, 36133, 2445, 300, 445, 1619, 483, 4914, 670, 257, 21156, 260, 13, 51364, 51364, 7587, 13, 51414, 51414, 2264, 11, 300, 3263, 1238, 1481, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.1160208611261277, "compression_ratio": 1.5735294117647058, "no_caption_prob": 1.9222958144382574e-05}, {"id": 337, "seek": 268300, "start": 2703.0, "end": 2704.0, "text": " Exactly.", "tokens": [50364, 407, 586, 428, 1412, 307, 722, 992, 11, 917, 992, 11, 1804, 2035, 6114, 1412, 3877, 291, 632, 13, 50664, 50664, 865, 11, 300, 3263, 1238, 2199, 13, 50814, 50814, 20464, 15325, 13, 407, 300, 311, 300, 311, 257, 534, 1481, 4111, 13, 51014, 51014, 7721, 11, 286, 2041, 300, 291, 393, 445, 2464, 257, 36133, 2445, 300, 445, 1619, 483, 4914, 670, 257, 21156, 260, 13, 51364, 51364, 7587, 13, 51414, 51414, 2264, 11, 300, 3263, 1238, 1481, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.1160208611261277, "compression_ratio": 1.5735294117647058, "no_caption_prob": 1.9222958144382574e-05}, {"id": 338, "seek": 268300, "start": 2704.0, "end": 2706.0, "text": " OK, that sounds pretty nice.", "tokens": [50364, 407, 586, 428, 1412, 307, 722, 992, 11, 917, 992, 11, 1804, 2035, 6114, 1412, 3877, 291, 632, 13, 50664, 50664, 865, 11, 300, 3263, 1238, 2199, 13, 50814, 50814, 20464, 15325, 13, 407, 300, 311, 300, 311, 257, 534, 1481, 4111, 13, 51014, 51014, 7721, 11, 286, 2041, 300, 291, 393, 445, 2464, 257, 36133, 2445, 300, 445, 1619, 483, 4914, 670, 257, 21156, 260, 13, 51364, 51364, 7587, 13, 51414, 51414, 2264, 11, 300, 3263, 1238, 1481, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.1160208611261277, "compression_ratio": 1.5735294117647058, "no_caption_prob": 1.9222958144382574e-05}, {"id": 339, "seek": 270600, "start": 2706.0, "end": 2713.0, "text": " Yeah, maybe one last building block to touch on before we move on to some other topics.", "tokens": [50364, 865, 11, 1310, 472, 1036, 2390, 3461, 281, 2557, 322, 949, 321, 1286, 322, 281, 512, 661, 8378, 13, 50714, 50714, 821, 311, 472, 544, 551, 1219, 21156, 260, 5893, 6367, 13, 2589, 291, 8593, 300, 412, 439, 294, 428, 485, 50914, 50914, 286, 20381, 309, 11, 457, 286, 2378, 380, 3737, 365, 309, 13, 51114, 51114, 865, 11, 309, 311, 364, 1021, 2290, 13, 286, 500, 380, 519, 321, 643, 281, 2060, 309, 294, 7161, 510, 13, 51314, 51314, 286, 519, 561, 393, 574, 412, 5110, 293, 483, 257, 2020, 295, 309, 13, 51464, 51464, 583, 445, 3889, 573, 309, 281, 584, 309, 8198, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.08789915605024858, "compression_ratio": 1.5896414342629481, "no_caption_prob": 8.480616816086695e-05}, {"id": 340, "seek": 270600, "start": 2713.0, "end": 2717.0, "text": " There's one more thing called parser dot loop. Did you encounter that at all in your...", "tokens": [50364, 865, 11, 1310, 472, 1036, 2390, 3461, 281, 2557, 322, 949, 321, 1286, 322, 281, 512, 661, 8378, 13, 50714, 50714, 821, 311, 472, 544, 551, 1219, 21156, 260, 5893, 6367, 13, 2589, 291, 8593, 300, 412, 439, 294, 428, 485, 50914, 50914, 286, 20381, 309, 11, 457, 286, 2378, 380, 3737, 365, 309, 13, 51114, 51114, 865, 11, 309, 311, 364, 1021, 2290, 13, 286, 500, 380, 519, 321, 643, 281, 2060, 309, 294, 7161, 510, 13, 51314, 51314, 286, 519, 561, 393, 574, 412, 5110, 293, 483, 257, 2020, 295, 309, 13, 51464, 51464, 583, 445, 3889, 573, 309, 281, 584, 309, 8198, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.08789915605024858, "compression_ratio": 1.5896414342629481, "no_caption_prob": 8.480616816086695e-05}, {"id": 341, "seek": 270600, "start": 2717.0, "end": 2721.0, "text": " I encountered it, but I haven't played with it.", "tokens": [50364, 865, 11, 1310, 472, 1036, 2390, 3461, 281, 2557, 322, 949, 321, 1286, 322, 281, 512, 661, 8378, 13, 50714, 50714, 821, 311, 472, 544, 551, 1219, 21156, 260, 5893, 6367, 13, 2589, 291, 8593, 300, 412, 439, 294, 428, 485, 50914, 50914, 286, 20381, 309, 11, 457, 286, 2378, 380, 3737, 365, 309, 13, 51114, 51114, 865, 11, 309, 311, 364, 1021, 2290, 13, 286, 500, 380, 519, 321, 643, 281, 2060, 309, 294, 7161, 510, 13, 51314, 51314, 286, 519, 561, 393, 574, 412, 5110, 293, 483, 257, 2020, 295, 309, 13, 51464, 51464, 583, 445, 3889, 573, 309, 281, 584, 309, 8198, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.08789915605024858, "compression_ratio": 1.5896414342629481, "no_caption_prob": 8.480616816086695e-05}, {"id": 342, "seek": 270600, "start": 2721.0, "end": 2725.0, "text": " Yeah, it's an important tool. I don't think we need to cover it in depth here.", "tokens": [50364, 865, 11, 1310, 472, 1036, 2390, 3461, 281, 2557, 322, 949, 321, 1286, 322, 281, 512, 661, 8378, 13, 50714, 50714, 821, 311, 472, 544, 551, 1219, 21156, 260, 5893, 6367, 13, 2589, 291, 8593, 300, 412, 439, 294, 428, 485, 50914, 50914, 286, 20381, 309, 11, 457, 286, 2378, 380, 3737, 365, 309, 13, 51114, 51114, 865, 11, 309, 311, 364, 1021, 2290, 13, 286, 500, 380, 519, 321, 643, 281, 2060, 309, 294, 7161, 510, 13, 51314, 51314, 286, 519, 561, 393, 574, 412, 5110, 293, 483, 257, 2020, 295, 309, 13, 51464, 51464, 583, 445, 3889, 573, 309, 281, 584, 309, 8198, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.08789915605024858, "compression_ratio": 1.5896414342629481, "no_caption_prob": 8.480616816086695e-05}, {"id": 343, "seek": 270600, "start": 2725.0, "end": 2728.0, "text": " I think people can look at examples and get a sense of it.", "tokens": [50364, 865, 11, 1310, 472, 1036, 2390, 3461, 281, 2557, 322, 949, 321, 1286, 322, 281, 512, 661, 8378, 13, 50714, 50714, 821, 311, 472, 544, 551, 1219, 21156, 260, 5893, 6367, 13, 2589, 291, 8593, 300, 412, 439, 294, 428, 485, 50914, 50914, 286, 20381, 309, 11, 457, 286, 2378, 380, 3737, 365, 309, 13, 51114, 51114, 865, 11, 309, 311, 364, 1021, 2290, 13, 286, 500, 380, 519, 321, 643, 281, 2060, 309, 294, 7161, 510, 13, 51314, 51314, 286, 519, 561, 393, 574, 412, 5110, 293, 483, 257, 2020, 295, 309, 13, 51464, 51464, 583, 445, 3889, 573, 309, 281, 584, 309, 8198, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.08789915605024858, "compression_ratio": 1.5896414342629481, "no_caption_prob": 8.480616816086695e-05}, {"id": 344, "seek": 270600, "start": 2728.0, "end": 2733.0, "text": " But just suffice it to say it exists.", "tokens": [50364, 865, 11, 1310, 472, 1036, 2390, 3461, 281, 2557, 322, 949, 321, 1286, 322, 281, 512, 661, 8378, 13, 50714, 50714, 821, 311, 472, 544, 551, 1219, 21156, 260, 5893, 6367, 13, 2589, 291, 8593, 300, 412, 439, 294, 428, 485, 50914, 50914, 286, 20381, 309, 11, 457, 286, 2378, 380, 3737, 365, 309, 13, 51114, 51114, 865, 11, 309, 311, 364, 1021, 2290, 13, 286, 500, 380, 519, 321, 643, 281, 2060, 309, 294, 7161, 510, 13, 51314, 51314, 286, 519, 561, 393, 574, 412, 5110, 293, 483, 257, 2020, 295, 309, 13, 51464, 51464, 583, 445, 3889, 573, 309, 281, 584, 309, 8198, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.08789915605024858, "compression_ratio": 1.5896414342629481, "no_caption_prob": 8.480616816086695e-05}, {"id": 345, "seek": 273300, "start": 2733.0, "end": 2738.0, "text": " It is a tool that you can use to solve certain problems where you where you need to keep track of context.", "tokens": [50364, 467, 307, 257, 2290, 300, 291, 393, 764, 281, 5039, 1629, 2740, 689, 291, 689, 291, 643, 281, 1066, 2837, 295, 4319, 13, 50614, 50614, 407, 411, 498, 291, 434, 884, 257, 3890, 6114, 689, 291, 1415, 281, 1207, 264, 1230, 295, 1413, 300, 257, 1629, 2517, 7038, 420, 689, 411, 257, 1629, 4188, 307, 1131, 11, 3890, 6114, 1943, 380, 534, 516, 281, 360, 300, 337, 291, 13, 51314, 51314, 467, 393, 380, 854, 291, 2837, 1785, 13, 467, 445, 4454, 1819, 11, 558, 30, 51464, 51464, 865, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.07265977149314069, "compression_ratio": 1.719298245614035, "no_caption_prob": 5.064219294581562e-05}, {"id": 346, "seek": 273300, "start": 2738.0, "end": 2752.0, "text": " So like if you're doing a regular expression where you wanted to count the number of times that a certain character appears or where like a certain condition is met, regular expression isn't really going to do that for you.", "tokens": [50364, 467, 307, 257, 2290, 300, 291, 393, 764, 281, 5039, 1629, 2740, 689, 291, 689, 291, 643, 281, 1066, 2837, 295, 4319, 13, 50614, 50614, 407, 411, 498, 291, 434, 884, 257, 3890, 6114, 689, 291, 1415, 281, 1207, 264, 1230, 295, 1413, 300, 257, 1629, 2517, 7038, 420, 689, 411, 257, 1629, 4188, 307, 1131, 11, 3890, 6114, 1943, 380, 534, 516, 281, 360, 300, 337, 291, 13, 51314, 51314, 467, 393, 380, 854, 291, 2837, 1785, 13, 467, 445, 4454, 1819, 11, 558, 30, 51464, 51464, 865, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.07265977149314069, "compression_ratio": 1.719298245614035, "no_caption_prob": 5.064219294581562e-05}, {"id": 347, "seek": 273300, "start": 2752.0, "end": 2755.0, "text": " It can't help you track state. It just executes, right?", "tokens": [50364, 467, 307, 257, 2290, 300, 291, 393, 764, 281, 5039, 1629, 2740, 689, 291, 689, 291, 643, 281, 1066, 2837, 295, 4319, 13, 50614, 50614, 407, 411, 498, 291, 434, 884, 257, 3890, 6114, 689, 291, 1415, 281, 1207, 264, 1230, 295, 1413, 300, 257, 1629, 2517, 7038, 420, 689, 411, 257, 1629, 4188, 307, 1131, 11, 3890, 6114, 1943, 380, 534, 516, 281, 360, 300, 337, 291, 13, 51314, 51314, 467, 393, 380, 854, 291, 2837, 1785, 13, 467, 445, 4454, 1819, 11, 558, 30, 51464, 51464, 865, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.07265977149314069, "compression_ratio": 1.719298245614035, "no_caption_prob": 5.064219294581562e-05}, {"id": 348, "seek": 273300, "start": 2755.0, "end": 2756.0, "text": " Yeah.", "tokens": [50364, 467, 307, 257, 2290, 300, 291, 393, 764, 281, 5039, 1629, 2740, 689, 291, 689, 291, 643, 281, 1066, 2837, 295, 4319, 13, 50614, 50614, 407, 411, 498, 291, 434, 884, 257, 3890, 6114, 689, 291, 1415, 281, 1207, 264, 1230, 295, 1413, 300, 257, 1629, 2517, 7038, 420, 689, 411, 257, 1629, 4188, 307, 1131, 11, 3890, 6114, 1943, 380, 534, 516, 281, 360, 300, 337, 291, 13, 51314, 51314, 467, 393, 380, 854, 291, 2837, 1785, 13, 467, 445, 4454, 1819, 11, 558, 30, 51464, 51464, 865, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.07265977149314069, "compression_ratio": 1.719298245614035, "no_caption_prob": 5.064219294581562e-05}, {"id": 349, "seek": 275600, "start": 2756.0, "end": 2763.0, "text": " But if you wanted to write a parser where you do that, then what you can do is you can use this helper called parser dot loop.", "tokens": [50364, 583, 498, 291, 1415, 281, 2464, 257, 21156, 260, 689, 291, 360, 300, 11, 550, 437, 291, 393, 360, 307, 291, 393, 764, 341, 36133, 1219, 21156, 260, 5893, 6367, 13, 50714, 50714, 400, 437, 309, 775, 307, 309, 311, 8659, 411, 257, 1339, 6367, 11, 597, 3417, 3657, 281, 360, 294, 2699, 76, 11, 457, 309, 311, 364, 37765, 300, 3417, 2531, 281, 300, 13, 51164, 51164, 400, 437, 291, 434, 884, 307, 291, 434, 445, 5141, 341, 21156, 260, 293, 291, 362, 257, 21156, 260, 300, 2139, 11247, 6367, 300, 1619, 1066, 2614, 264, 21156, 260, 420, 264, 21156, 260, 486, 48377, 666, 1096, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.04902628305796031, "compression_ratio": 1.8257261410788381, "no_caption_prob": 5.0640177505556494e-05}, {"id": 350, "seek": 275600, "start": 2763.0, "end": 2772.0, "text": " And what it does is it's effectively like a while loop, which feels weird to do in Elm, but it's an abstraction that feels similar to that.", "tokens": [50364, 583, 498, 291, 1415, 281, 2464, 257, 21156, 260, 689, 291, 360, 300, 11, 550, 437, 291, 393, 360, 307, 291, 393, 764, 341, 36133, 1219, 21156, 260, 5893, 6367, 13, 50714, 50714, 400, 437, 309, 775, 307, 309, 311, 8659, 411, 257, 1339, 6367, 11, 597, 3417, 3657, 281, 360, 294, 2699, 76, 11, 457, 309, 311, 364, 37765, 300, 3417, 2531, 281, 300, 13, 51164, 51164, 400, 437, 291, 434, 884, 307, 291, 434, 445, 5141, 341, 21156, 260, 293, 291, 362, 257, 21156, 260, 300, 2139, 11247, 6367, 300, 1619, 1066, 2614, 264, 21156, 260, 420, 264, 21156, 260, 486, 48377, 666, 1096, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.04902628305796031, "compression_ratio": 1.8257261410788381, "no_caption_prob": 5.0640177505556494e-05}, {"id": 351, "seek": 275600, "start": 2772.0, "end": 2785.0, "text": " And what you're doing is you're just calling this parser and you have a parser that either returns loop that says keep running the parser or the parser will parse into done.", "tokens": [50364, 583, 498, 291, 1415, 281, 2464, 257, 21156, 260, 689, 291, 360, 300, 11, 550, 437, 291, 393, 360, 307, 291, 393, 764, 341, 36133, 1219, 21156, 260, 5893, 6367, 13, 50714, 50714, 400, 437, 309, 775, 307, 309, 311, 8659, 411, 257, 1339, 6367, 11, 597, 3417, 3657, 281, 360, 294, 2699, 76, 11, 457, 309, 311, 364, 37765, 300, 3417, 2531, 281, 300, 13, 51164, 51164, 400, 437, 291, 434, 884, 307, 291, 434, 445, 5141, 341, 21156, 260, 293, 291, 362, 257, 21156, 260, 300, 2139, 11247, 6367, 300, 1619, 1066, 2614, 264, 21156, 260, 420, 264, 21156, 260, 486, 48377, 666, 1096, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.04902628305796031, "compression_ratio": 1.8257261410788381, "no_caption_prob": 5.0640177505556494e-05}, {"id": 352, "seek": 278500, "start": 2785.0, "end": 2792.0, "text": " If it parses into done, then the parser will stop. If it parses into loop, then it will continue and it maintains state.", "tokens": [50364, 759, 309, 21156, 279, 666, 1096, 11, 550, 264, 21156, 260, 486, 1590, 13, 759, 309, 21156, 279, 666, 6367, 11, 550, 309, 486, 2354, 293, 309, 33385, 1785, 13, 50714, 50714, 407, 286, 519, 295, 309, 733, 295, 411, 257, 4860, 6114, 294, 2699, 76, 689, 291, 393, 360, 411, 1329, 5893, 4860, 441, 689, 411, 5347, 281, 1329, 5893, 4471, 1329, 5893, 4471, 11, 51164, 51164, 291, 434, 445, 516, 670, 633, 3174, 293, 291, 500, 380, 362, 257, 4319, 300, 291, 3985, 365, 291, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.06729835012684697, "compression_ratio": 1.6875, "no_caption_prob": 1.363118462904822e-05}, {"id": 353, "seek": 278500, "start": 2792.0, "end": 2801.0, "text": " So I think of it kind of like a fold expression in Elm where you can do like list dot fold L where like compared to list dot map list dot map,", "tokens": [50364, 759, 309, 21156, 279, 666, 1096, 11, 550, 264, 21156, 260, 486, 1590, 13, 759, 309, 21156, 279, 666, 6367, 11, 550, 309, 486, 2354, 293, 309, 33385, 1785, 13, 50714, 50714, 407, 286, 519, 295, 309, 733, 295, 411, 257, 4860, 6114, 294, 2699, 76, 689, 291, 393, 360, 411, 1329, 5893, 4860, 441, 689, 411, 5347, 281, 1329, 5893, 4471, 1329, 5893, 4471, 11, 51164, 51164, 291, 434, 445, 516, 670, 633, 3174, 293, 291, 500, 380, 362, 257, 4319, 300, 291, 3985, 365, 291, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.06729835012684697, "compression_ratio": 1.6875, "no_caption_prob": 1.363118462904822e-05}, {"id": 354, "seek": 278500, "start": 2801.0, "end": 2807.0, "text": " you're just going over every item and you don't have a context that you carry with you.", "tokens": [50364, 759, 309, 21156, 279, 666, 1096, 11, 550, 264, 21156, 260, 486, 1590, 13, 759, 309, 21156, 279, 666, 6367, 11, 550, 309, 486, 2354, 293, 309, 33385, 1785, 13, 50714, 50714, 407, 286, 519, 295, 309, 733, 295, 411, 257, 4860, 6114, 294, 2699, 76, 689, 291, 393, 360, 411, 1329, 5893, 4860, 441, 689, 411, 5347, 281, 1329, 5893, 4471, 1329, 5893, 4471, 11, 51164, 51164, 291, 434, 445, 516, 670, 633, 3174, 293, 291, 500, 380, 362, 257, 4319, 300, 291, 3985, 365, 291, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.06729835012684697, "compression_ratio": 1.6875, "no_caption_prob": 1.363118462904822e-05}, {"id": 355, "seek": 280700, "start": 2807.0, "end": 2815.0, "text": " But parser dot loop allows you to retain context as you go through that parsing.", "tokens": [50364, 583, 21156, 260, 5893, 6367, 4045, 291, 281, 18340, 4319, 382, 291, 352, 807, 300, 21156, 278, 13, 50764, 50764, 407, 1936, 291, 764, 21156, 260, 5893, 6367, 562, 291, 362, 721, 300, 393, 312, 1581, 564, 3587, 11, 411, 291, 393, 362, 2940, 12363, 294, 364, 2699, 76, 3089, 3991, 13, 51214, 51214, 400, 562, 291, 48377, 14511, 11, 550, 291, 362, 257, 1629, 1230, 295, 4959, 300, 307, 674, 5666, 2001, 412, 264, 2863, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.06809252279776114, "compression_ratio": 1.6581632653061225, "no_caption_prob": 1.2606781638169196e-05}, {"id": 356, "seek": 280700, "start": 2815.0, "end": 2824.0, "text": " So basically you use parser dot loop when you have things that can be duplicated, like you can have several statements in an Elm code file.", "tokens": [50364, 583, 21156, 260, 5893, 6367, 4045, 291, 281, 18340, 4319, 382, 291, 352, 807, 300, 21156, 278, 13, 50764, 50764, 407, 1936, 291, 764, 21156, 260, 5893, 6367, 562, 291, 362, 721, 300, 393, 312, 1581, 564, 3587, 11, 411, 291, 393, 362, 2940, 12363, 294, 364, 2699, 76, 3089, 3991, 13, 51214, 51214, 400, 562, 291, 48377, 14511, 11, 550, 291, 362, 257, 1629, 1230, 295, 4959, 300, 307, 674, 5666, 2001, 412, 264, 2863, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.06809252279776114, "compression_ratio": 1.6581632653061225, "no_caption_prob": 1.2606781638169196e-05}, {"id": 357, "seek": 280700, "start": 2824.0, "end": 2834.0, "text": " And when you parse lists, then you have a certain number of elements that is undefined at the beginning.", "tokens": [50364, 583, 21156, 260, 5893, 6367, 4045, 291, 281, 18340, 4319, 382, 291, 352, 807, 300, 21156, 278, 13, 50764, 50764, 407, 1936, 291, 764, 21156, 260, 5893, 6367, 562, 291, 362, 721, 300, 393, 312, 1581, 564, 3587, 11, 411, 291, 393, 362, 2940, 12363, 294, 364, 2699, 76, 3089, 3991, 13, 51214, 51214, 400, 562, 291, 48377, 14511, 11, 550, 291, 362, 257, 1629, 1230, 295, 4959, 300, 307, 674, 5666, 2001, 412, 264, 2863, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.06809252279776114, "compression_ratio": 1.6581632653061225, "no_caption_prob": 1.2606781638169196e-05}, {"id": 358, "seek": 283400, "start": 2834.0, "end": 2848.0, "text": " So you loop through those and at every step of the way, you have a parser that says stop here because I found a closing bracket or continue because I found a comma or something.", "tokens": [50364, 407, 291, 6367, 807, 729, 293, 412, 633, 1823, 295, 264, 636, 11, 291, 362, 257, 21156, 260, 300, 1619, 1590, 510, 570, 286, 1352, 257, 10377, 16904, 420, 2354, 570, 286, 1352, 257, 22117, 420, 746, 13, 51064, 51064, 1779, 13, 865, 11, 1338, 11, 291, 393, 291, 393, 360, 300, 293, 291, 393, 2837, 1785, 382, 291, 360, 300, 13, 51414, 51414, 400, 300, 311, 286, 519, 264, 1333, 295, 4776, 551, 466, 6367, 278, 307, 309, 4045, 291, 281, 6909, 300, 1785, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.10762643814086914, "compression_ratio": 1.6851851851851851, "no_caption_prob": 2.6274188712704927e-05}, {"id": 359, "seek": 283400, "start": 2848.0, "end": 2855.0, "text": " Right. Yeah, yeah, you can you can do that and you can track state as you do that.", "tokens": [50364, 407, 291, 6367, 807, 729, 293, 412, 633, 1823, 295, 264, 636, 11, 291, 362, 257, 21156, 260, 300, 1619, 1590, 510, 570, 286, 1352, 257, 10377, 16904, 420, 2354, 570, 286, 1352, 257, 22117, 420, 746, 13, 51064, 51064, 1779, 13, 865, 11, 1338, 11, 291, 393, 291, 393, 360, 300, 293, 291, 393, 2837, 1785, 382, 291, 360, 300, 13, 51414, 51414, 400, 300, 311, 286, 519, 264, 1333, 295, 4776, 551, 466, 6367, 278, 307, 309, 4045, 291, 281, 6909, 300, 1785, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.10762643814086914, "compression_ratio": 1.6851851851851851, "no_caption_prob": 2.6274188712704927e-05}, {"id": 360, "seek": 283400, "start": 2855.0, "end": 2862.0, "text": " And that's I think the sort of significant thing about looping is it allows you to maintain that state.", "tokens": [50364, 407, 291, 6367, 807, 729, 293, 412, 633, 1823, 295, 264, 636, 11, 291, 362, 257, 21156, 260, 300, 1619, 1590, 510, 570, 286, 1352, 257, 10377, 16904, 420, 2354, 570, 286, 1352, 257, 22117, 420, 746, 13, 51064, 51064, 1779, 13, 865, 11, 1338, 11, 291, 393, 291, 393, 360, 300, 293, 291, 393, 2837, 1785, 382, 291, 360, 300, 13, 51414, 51414, 400, 300, 311, 286, 519, 264, 1333, 295, 4776, 551, 466, 6367, 278, 307, 309, 4045, 291, 281, 6909, 300, 1785, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.10762643814086914, "compression_ratio": 1.6851851851851851, "no_caption_prob": 2.6274188712704927e-05}, {"id": 361, "seek": 286200, "start": 2862.0, "end": 2873.0, "text": " And as you say, you you yeah, you can tell it when to terminate running a parser repeatedly until it finds some end condition.", "tokens": [50364, 400, 382, 291, 584, 11, 291, 291, 1338, 11, 291, 393, 980, 309, 562, 281, 10761, 473, 2614, 257, 21156, 260, 18227, 1826, 309, 10704, 512, 917, 4188, 13, 50914, 50914, 708, 733, 295, 1589, 576, 291, 5448, 11, 337, 5197, 11, 411, 498, 291, 434, 21156, 278, 257, 2604, 781, 11, 576, 291, 1207, 264, 1230, 295, 4959, 281, 536, 498, 436, 434, 3801, 813, 1045, 420, 746, 30, 51414, 51414, 865, 11, 1338, 11, 286, 519, 291, 576, 13, 286, 519, 291, 576, 360, 300, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.09346217694489853, "compression_ratio": 1.6605504587155964, "no_caption_prob": 4.495154371397803e-06}, {"id": 362, "seek": 286200, "start": 2873.0, "end": 2883.0, "text": " What kind of information would you gather, for instance, like if you're parsing a tuple, would you count the number of elements to see if they're bigger than three or something?", "tokens": [50364, 400, 382, 291, 584, 11, 291, 291, 1338, 11, 291, 393, 980, 309, 562, 281, 10761, 473, 2614, 257, 21156, 260, 18227, 1826, 309, 10704, 512, 917, 4188, 13, 50914, 50914, 708, 733, 295, 1589, 576, 291, 5448, 11, 337, 5197, 11, 411, 498, 291, 434, 21156, 278, 257, 2604, 781, 11, 576, 291, 1207, 264, 1230, 295, 4959, 281, 536, 498, 436, 434, 3801, 813, 1045, 420, 746, 30, 51414, 51414, 865, 11, 1338, 11, 286, 519, 291, 576, 13, 286, 519, 291, 576, 360, 300, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.09346217694489853, "compression_ratio": 1.6605504587155964, "no_caption_prob": 4.495154371397803e-06}, {"id": 363, "seek": 286200, "start": 2883.0, "end": 2888.0, "text": " Yeah, yeah, I think you would. I think you would do that.", "tokens": [50364, 400, 382, 291, 584, 11, 291, 291, 1338, 11, 291, 393, 980, 309, 562, 281, 10761, 473, 2614, 257, 21156, 260, 18227, 1826, 309, 10704, 512, 917, 4188, 13, 50914, 50914, 708, 733, 295, 1589, 576, 291, 5448, 11, 337, 5197, 11, 411, 498, 291, 434, 21156, 278, 257, 2604, 781, 11, 576, 291, 1207, 264, 1230, 295, 4959, 281, 536, 498, 436, 434, 3801, 813, 1045, 420, 746, 30, 51414, 51414, 865, 11, 1338, 11, 286, 519, 291, 576, 13, 286, 519, 291, 576, 360, 300, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.09346217694489853, "compression_ratio": 1.6605504587155964, "no_caption_prob": 4.495154371397803e-06}, {"id": 364, "seek": 288800, "start": 2888.0, "end": 2894.0, "text": " If you want tuple for elements to be a syntax error, for instance, then you could. OK.", "tokens": [50364, 759, 291, 528, 2604, 781, 337, 4959, 281, 312, 257, 28431, 6713, 11, 337, 5197, 11, 550, 291, 727, 13, 2264, 13, 50664, 50664, 1079, 11, 2293, 13, 865, 11, 291, 727, 360, 300, 13, 400, 291, 727, 291, 393, 360, 300, 365, 21156, 260, 5893, 1154, 13, 50964, 50964, 583, 300, 311, 2293, 558, 13, 407, 411, 498, 291, 1338, 11, 498, 291, 445, 1190, 257, 21156, 260, 293, 291, 500, 380, 362, 341, 4319, 490, 6367, 11, 291, 500, 380, 458, 577, 867, 1413, 291, 600, 2780, 807, 309, 570, 291, 500, 380, 362, 604, 1785, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.08565877710731284, "compression_ratio": 1.6754385964912282, "no_caption_prob": 2.2827005523140542e-05}, {"id": 365, "seek": 288800, "start": 2894.0, "end": 2900.0, "text": " Yes, exactly. Yeah, you could do that. And you could you can do that with parser dot problem.", "tokens": [50364, 759, 291, 528, 2604, 781, 337, 4959, 281, 312, 257, 28431, 6713, 11, 337, 5197, 11, 550, 291, 727, 13, 2264, 13, 50664, 50664, 1079, 11, 2293, 13, 865, 11, 291, 727, 360, 300, 13, 400, 291, 727, 291, 393, 360, 300, 365, 21156, 260, 5893, 1154, 13, 50964, 50964, 583, 300, 311, 2293, 558, 13, 407, 411, 498, 291, 1338, 11, 498, 291, 445, 1190, 257, 21156, 260, 293, 291, 500, 380, 362, 341, 4319, 490, 6367, 11, 291, 500, 380, 458, 577, 867, 1413, 291, 600, 2780, 807, 309, 570, 291, 500, 380, 362, 604, 1785, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.08565877710731284, "compression_ratio": 1.6754385964912282, "no_caption_prob": 2.2827005523140542e-05}, {"id": 366, "seek": 288800, "start": 2900.0, "end": 2914.0, "text": " But that's exactly right. So like if you yeah, if you just run a parser and you don't have this context from loop, you don't know how many times you've gone through it because you don't have any state.", "tokens": [50364, 759, 291, 528, 2604, 781, 337, 4959, 281, 312, 257, 28431, 6713, 11, 337, 5197, 11, 550, 291, 727, 13, 2264, 13, 50664, 50664, 1079, 11, 2293, 13, 865, 11, 291, 727, 360, 300, 13, 400, 291, 727, 291, 393, 360, 300, 365, 21156, 260, 5893, 1154, 13, 50964, 50964, 583, 300, 311, 2293, 558, 13, 407, 411, 498, 291, 1338, 11, 498, 291, 445, 1190, 257, 21156, 260, 293, 291, 500, 380, 362, 341, 4319, 490, 6367, 11, 291, 500, 380, 458, 577, 867, 1413, 291, 600, 2780, 807, 309, 570, 291, 500, 380, 362, 604, 1785, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.08565877710731284, "compression_ratio": 1.6754385964912282, "no_caption_prob": 2.2827005523140542e-05}, {"id": 367, "seek": 291400, "start": 2914.0, "end": 2923.0, "text": " So, yeah, exactly as you say, you say, I am going to parse a tuple, but I need to know how many items have I seen because if it's greater than three, then I'll fail.", "tokens": [50364, 407, 11, 1338, 11, 2293, 382, 291, 584, 11, 291, 584, 11, 286, 669, 516, 281, 48377, 257, 2604, 781, 11, 457, 286, 643, 281, 458, 577, 867, 4754, 362, 286, 1612, 570, 498, 309, 311, 5044, 813, 1045, 11, 550, 286, 603, 3061, 13, 50814, 50814, 407, 300, 311, 300, 311, 2293, 577, 291, 576, 360, 300, 13, 509, 576, 360, 13, 1079, 13, 51114, 51114, 407, 291, 576, 360, 300, 11, 445, 411, 437, 291, 848, 13, 583, 498, 291, 2809, 380, 360, 300, 11, 550, 291, 576, 406, 362, 257, 28431, 6713, 13, 51414, 51414, 509, 576, 362, 257, 1520, 13, 865, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.11772825934670188, "compression_ratio": 1.766355140186916, "no_caption_prob": 4.539498331723735e-05}, {"id": 368, "seek": 291400, "start": 2923.0, "end": 2929.0, "text": " So that's that's exactly how you would do that. You would do. Yes.", "tokens": [50364, 407, 11, 1338, 11, 2293, 382, 291, 584, 11, 291, 584, 11, 286, 669, 516, 281, 48377, 257, 2604, 781, 11, 457, 286, 643, 281, 458, 577, 867, 4754, 362, 286, 1612, 570, 498, 309, 311, 5044, 813, 1045, 11, 550, 286, 603, 3061, 13, 50814, 50814, 407, 300, 311, 300, 311, 2293, 577, 291, 576, 360, 300, 13, 509, 576, 360, 13, 1079, 13, 51114, 51114, 407, 291, 576, 360, 300, 11, 445, 411, 437, 291, 848, 13, 583, 498, 291, 2809, 380, 360, 300, 11, 550, 291, 576, 406, 362, 257, 28431, 6713, 13, 51414, 51414, 509, 576, 362, 257, 1520, 13, 865, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.11772825934670188, "compression_ratio": 1.766355140186916, "no_caption_prob": 4.539498331723735e-05}, {"id": 369, "seek": 291400, "start": 2929.0, "end": 2935.0, "text": " So you would do that, just like what you said. But if you couldn't do that, then you would not have a syntax error.", "tokens": [50364, 407, 11, 1338, 11, 2293, 382, 291, 584, 11, 291, 584, 11, 286, 669, 516, 281, 48377, 257, 2604, 781, 11, 457, 286, 643, 281, 458, 577, 867, 4754, 362, 286, 1612, 570, 498, 309, 311, 5044, 813, 1045, 11, 550, 286, 603, 3061, 13, 50814, 50814, 407, 300, 311, 300, 311, 2293, 577, 291, 576, 360, 300, 13, 509, 576, 360, 13, 1079, 13, 51114, 51114, 407, 291, 576, 360, 300, 11, 445, 411, 437, 291, 848, 13, 583, 498, 291, 2809, 380, 360, 300, 11, 550, 291, 576, 406, 362, 257, 28431, 6713, 13, 51414, 51414, 509, 576, 362, 257, 1520, 13, 865, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.11772825934670188, "compression_ratio": 1.766355140186916, "no_caption_prob": 4.539498331723735e-05}, {"id": 370, "seek": 291400, "start": 2935.0, "end": 2939.0, "text": " You would have a check. Yeah.", "tokens": [50364, 407, 11, 1338, 11, 2293, 382, 291, 584, 11, 291, 584, 11, 286, 669, 516, 281, 48377, 257, 2604, 781, 11, 457, 286, 643, 281, 458, 577, 867, 4754, 362, 286, 1612, 570, 498, 309, 311, 5044, 813, 1045, 11, 550, 286, 603, 3061, 13, 50814, 50814, 407, 300, 311, 300, 311, 2293, 577, 291, 576, 360, 300, 13, 509, 576, 360, 13, 1079, 13, 51114, 51114, 407, 291, 576, 360, 300, 11, 445, 411, 437, 291, 848, 13, 583, 498, 291, 2809, 380, 360, 300, 11, 550, 291, 576, 406, 362, 257, 28431, 6713, 13, 51414, 51414, 509, 576, 362, 257, 1520, 13, 865, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.11772825934670188, "compression_ratio": 1.766355140186916, "no_caption_prob": 4.539498331723735e-05}, {"id": 371, "seek": 293900, "start": 2939.0, "end": 2945.0, "text": " Because, hey, I have a tuple here. Is it bigger than three? OK, then I have a different problem.", "tokens": [50364, 1436, 11, 4177, 11, 286, 362, 257, 2604, 781, 510, 13, 1119, 309, 3801, 813, 1045, 30, 2264, 11, 550, 286, 362, 257, 819, 1154, 13, 50664, 50664, 7587, 13, 7587, 13, 407, 291, 1116, 362, 281, 360, 257, 281, 1320, 281, 48377, 309, 666, 264, 8936, 28431, 293, 550, 1520, 337, 28431, 13603, 294, 341, 551, 300, 291, 21156, 292, 294, 257, 1150, 1823, 2831, 813, 13, 51314, 51314], "temperature": 0.0, "avg_logprob": -0.10470773114098443, "compression_ratio": 1.4944444444444445, "no_caption_prob": 0.00010553932952461764}, {"id": 372, "seek": 293900, "start": 2945.0, "end": 2958.0, "text": " Exactly. Exactly. So you'd have to do a to pass to parse it into the raw syntax and then check for syntax errors in this thing that you parsed in a second step rather than.", "tokens": [50364, 1436, 11, 4177, 11, 286, 362, 257, 2604, 781, 510, 13, 1119, 309, 3801, 813, 1045, 30, 2264, 11, 550, 286, 362, 257, 819, 1154, 13, 50664, 50664, 7587, 13, 7587, 13, 407, 291, 1116, 362, 281, 360, 257, 281, 1320, 281, 48377, 309, 666, 264, 8936, 28431, 293, 550, 1520, 337, 28431, 13603, 294, 341, 551, 300, 291, 21156, 292, 294, 257, 1150, 1823, 2831, 813, 13, 51314, 51314], "temperature": 0.0, "avg_logprob": -0.10470773114098443, "compression_ratio": 1.4944444444444445, "no_caption_prob": 0.00010553932952461764}, {"id": 373, "seek": 295800, "start": 2958.0, "end": 2969.0, "text": " Yeah, exactly as you say, you you can as you're parsing that tuple, you have the context of how many elements you found in that tuple and then you can fail.", "tokens": [50364, 865, 11, 2293, 382, 291, 584, 11, 291, 291, 393, 382, 291, 434, 21156, 278, 300, 2604, 781, 11, 291, 362, 264, 4319, 295, 577, 867, 4959, 291, 1352, 294, 300, 2604, 781, 293, 550, 291, 393, 3061, 13, 50914, 50914, 400, 264, 636, 291, 3061, 307, 11, 291, 458, 11, 709, 411, 321, 362, 11181, 979, 1429, 3061, 13, 51214, 51214, 492, 362, 21156, 260, 5893, 1154, 13, 400, 300, 4045, 505, 281, 445, 584, 498, 291, 1437, 760, 257, 3100, 300, 4684, 291, 510, 11, 976, 341, 6713, 558, 586, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.10778619825225516, "compression_ratio": 1.6682242990654206, "no_caption_prob": 0.00010719495912780985}, {"id": 374, "seek": 295800, "start": 2969.0, "end": 2975.0, "text": " And the way you fail is, you know, much like we have Jason decode fail.", "tokens": [50364, 865, 11, 2293, 382, 291, 584, 11, 291, 291, 393, 382, 291, 434, 21156, 278, 300, 2604, 781, 11, 291, 362, 264, 4319, 295, 577, 867, 4959, 291, 1352, 294, 300, 2604, 781, 293, 550, 291, 393, 3061, 13, 50914, 50914, 400, 264, 636, 291, 3061, 307, 11, 291, 458, 11, 709, 411, 321, 362, 11181, 979, 1429, 3061, 13, 51214, 51214, 492, 362, 21156, 260, 5893, 1154, 13, 400, 300, 4045, 505, 281, 445, 584, 498, 291, 1437, 760, 257, 3100, 300, 4684, 291, 510, 11, 976, 341, 6713, 558, 586, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.10778619825225516, "compression_ratio": 1.6682242990654206, "no_caption_prob": 0.00010719495912780985}, {"id": 375, "seek": 295800, "start": 2975.0, "end": 2984.0, "text": " We have parser dot problem. And that allows us to just say if you went down a path that led you here, give this error right now.", "tokens": [50364, 865, 11, 2293, 382, 291, 584, 11, 291, 291, 393, 382, 291, 434, 21156, 278, 300, 2604, 781, 11, 291, 362, 264, 4319, 295, 577, 867, 4959, 291, 1352, 294, 300, 2604, 781, 293, 550, 291, 393, 3061, 13, 50914, 50914, 400, 264, 636, 291, 3061, 307, 11, 291, 458, 11, 709, 411, 321, 362, 11181, 979, 1429, 3061, 13, 51214, 51214, 492, 362, 21156, 260, 5893, 1154, 13, 400, 300, 4045, 505, 281, 445, 584, 498, 291, 1437, 760, 257, 3100, 300, 4684, 291, 510, 11, 976, 341, 6713, 558, 586, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.10778619825225516, "compression_ratio": 1.6682242990654206, "no_caption_prob": 0.00010719495912780985}, {"id": 376, "seek": 298400, "start": 2984.0, "end": 2993.0, "text": " Is it when the Elm compiler says, hey, I got something very confusing. Is that what it uses on the third, like parser problem?", "tokens": [50364, 1119, 309, 562, 264, 2699, 76, 31958, 1619, 11, 4177, 11, 286, 658, 746, 588, 13181, 13, 1119, 300, 437, 309, 4960, 322, 264, 2636, 11, 411, 21156, 260, 1154, 30, 50814, 50814, 1436, 286, 478, 9650, 562, 291, 360, 21156, 260, 5893, 472, 295, 341, 11, 309, 1619, 11, 1954, 11, 286, 390, 9650, 257, 341, 420, 300, 420, 341, 13, 51164, 51164, 1779, 13, 9210, 13, 407, 286, 478, 406, 988, 577, 2531, 570, 264, 2699, 76, 21156, 260, 307, 3720, 294, 8646, 43723, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.1969709710760431, "compression_ratio": 1.5471698113207548, "no_caption_prob": 4.757456190418452e-05}, {"id": 377, "seek": 298400, "start": 2993.0, "end": 3000.0, "text": " Because I'm expecting when you do parser dot one of this, it says, oh, I was expecting a this or that or this.", "tokens": [50364, 1119, 309, 562, 264, 2699, 76, 31958, 1619, 11, 4177, 11, 286, 658, 746, 588, 13181, 13, 1119, 300, 437, 309, 4960, 322, 264, 2636, 11, 411, 21156, 260, 1154, 30, 50814, 50814, 1436, 286, 478, 9650, 562, 291, 360, 21156, 260, 5893, 472, 295, 341, 11, 309, 1619, 11, 1954, 11, 286, 390, 9650, 257, 341, 420, 300, 420, 341, 13, 51164, 51164, 1779, 13, 9210, 13, 407, 286, 478, 406, 988, 577, 2531, 570, 264, 2699, 76, 21156, 260, 307, 3720, 294, 8646, 43723, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.1969709710760431, "compression_ratio": 1.5471698113207548, "no_caption_prob": 4.757456190418452e-05}, {"id": 378, "seek": 298400, "start": 3000.0, "end": 3008.0, "text": " Right. Probably. So I'm not sure how similar because the Elm parser is written in Haskell.", "tokens": [50364, 1119, 309, 562, 264, 2699, 76, 31958, 1619, 11, 4177, 11, 286, 658, 746, 588, 13181, 13, 1119, 300, 437, 309, 4960, 322, 264, 2636, 11, 411, 21156, 260, 1154, 30, 50814, 50814, 1436, 286, 478, 9650, 562, 291, 360, 21156, 260, 5893, 472, 295, 341, 11, 309, 1619, 11, 1954, 11, 286, 390, 9650, 257, 341, 420, 300, 420, 341, 13, 51164, 51164, 1779, 13, 9210, 13, 407, 286, 478, 406, 988, 577, 2531, 570, 264, 2699, 76, 21156, 260, 307, 3720, 294, 8646, 43723, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.1969709710760431, "compression_ratio": 1.5471698113207548, "no_caption_prob": 4.757456190418452e-05}, {"id": 379, "seek": 300800, "start": 3008.0, "end": 3016.0, "text": " I'm not sure how similar Evans API that he built to do parsing in Haskell for the Elm compiler is to the Elm parser library.", "tokens": [50364, 286, 478, 406, 988, 577, 2531, 30055, 9362, 300, 415, 3094, 281, 360, 21156, 278, 294, 8646, 43723, 337, 264, 2699, 76, 31958, 307, 281, 264, 2699, 76, 21156, 260, 6405, 13, 50764, 50764, 286, 576, 3811, 1238, 2531, 13, 583, 1338, 11, 300, 311, 300, 311, 264, 1558, 13, 509, 393, 291, 393, 360, 472, 295, 293, 550, 291, 393, 360, 21156, 260, 5893, 1154, 382, 472, 295, 729, 13, 51164, 51164, 407, 291, 370, 498, 291, 584, 309, 311, 2139, 291, 584, 286, 669, 516, 281, 48377, 257, 2158, 300, 311, 2139, 257, 1230, 420, 257, 6798, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.050185950902792126, "compression_ratio": 1.6755555555555555, "no_caption_prob": 6.814641528762877e-05}, {"id": 380, "seek": 300800, "start": 3016.0, "end": 3024.0, "text": " I would imagine pretty similar. But yeah, that's that's the idea. You can you can do one of and then you can do parser dot problem as one of those.", "tokens": [50364, 286, 478, 406, 988, 577, 2531, 30055, 9362, 300, 415, 3094, 281, 360, 21156, 278, 294, 8646, 43723, 337, 264, 2699, 76, 31958, 307, 281, 264, 2699, 76, 21156, 260, 6405, 13, 50764, 50764, 286, 576, 3811, 1238, 2531, 13, 583, 1338, 11, 300, 311, 300, 311, 264, 1558, 13, 509, 393, 291, 393, 360, 472, 295, 293, 550, 291, 393, 360, 21156, 260, 5893, 1154, 382, 472, 295, 729, 13, 51164, 51164, 407, 291, 370, 498, 291, 584, 309, 311, 2139, 291, 584, 286, 669, 516, 281, 48377, 257, 2158, 300, 311, 2139, 257, 1230, 420, 257, 6798, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.050185950902792126, "compression_ratio": 1.6755555555555555, "no_caption_prob": 6.814641528762877e-05}, {"id": 381, "seek": 300800, "start": 3024.0, "end": 3034.0, "text": " So you so if you say it's either you say I am going to parse a value that's either a number or a string.", "tokens": [50364, 286, 478, 406, 988, 577, 2531, 30055, 9362, 300, 415, 3094, 281, 360, 21156, 278, 294, 8646, 43723, 337, 264, 2699, 76, 31958, 307, 281, 264, 2699, 76, 21156, 260, 6405, 13, 50764, 50764, 286, 576, 3811, 1238, 2531, 13, 583, 1338, 11, 300, 311, 300, 311, 264, 1558, 13, 509, 393, 291, 393, 360, 472, 295, 293, 550, 291, 393, 360, 21156, 260, 5893, 1154, 382, 472, 295, 729, 13, 51164, 51164, 407, 291, 370, 498, 291, 584, 309, 311, 2139, 291, 584, 286, 669, 516, 281, 48377, 257, 2158, 300, 311, 2139, 257, 1230, 420, 257, 6798, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.050185950902792126, "compression_ratio": 1.6755555555555555, "no_caption_prob": 6.814641528762877e-05}, {"id": 382, "seek": 303400, "start": 3034.0, "end": 3043.0, "text": " So try parsing a number. And of course, as we talked about, if you take a single step down any of those paths, you're committed.", "tokens": [50364, 407, 853, 21156, 278, 257, 1230, 13, 400, 295, 1164, 11, 382, 321, 2825, 466, 11, 498, 291, 747, 257, 2167, 1823, 760, 604, 295, 729, 14518, 11, 291, 434, 7784, 13, 50814, 50814, 407, 291, 291, 584, 11, 2264, 11, 853, 21156, 278, 257, 1230, 13, 759, 300, 1177, 380, 589, 484, 11, 853, 21156, 278, 257, 6798, 13, 51064, 51064, 759, 300, 1177, 380, 589, 484, 11, 510, 311, 264, 1154, 13, 1911, 11, 286, 5176, 281, 536, 2139, 257, 1230, 420, 257, 6798, 13, 51364, 51364, 400, 291, 829, 300, 382, 264, 472, 295, 472, 295, 48377, 1230, 21156, 278, 1154, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.06186239872503718, "compression_ratio": 1.8285714285714285, "no_caption_prob": 2.7534977562027052e-05}, {"id": 383, "seek": 303400, "start": 3043.0, "end": 3048.0, "text": " So you you say, OK, try parsing a number. If that doesn't work out, try parsing a string.", "tokens": [50364, 407, 853, 21156, 278, 257, 1230, 13, 400, 295, 1164, 11, 382, 321, 2825, 466, 11, 498, 291, 747, 257, 2167, 1823, 760, 604, 295, 729, 14518, 11, 291, 434, 7784, 13, 50814, 50814, 407, 291, 291, 584, 11, 2264, 11, 853, 21156, 278, 257, 1230, 13, 759, 300, 1177, 380, 589, 484, 11, 853, 21156, 278, 257, 6798, 13, 51064, 51064, 759, 300, 1177, 380, 589, 484, 11, 510, 311, 264, 1154, 13, 1911, 11, 286, 5176, 281, 536, 2139, 257, 1230, 420, 257, 6798, 13, 51364, 51364, 400, 291, 829, 300, 382, 264, 472, 295, 472, 295, 48377, 1230, 21156, 278, 1154, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.06186239872503718, "compression_ratio": 1.8285714285714285, "no_caption_prob": 2.7534977562027052e-05}, {"id": 384, "seek": 303400, "start": 3048.0, "end": 3054.0, "text": " If that doesn't work out, here's the problem. Hey, I expected to see either a number or a string.", "tokens": [50364, 407, 853, 21156, 278, 257, 1230, 13, 400, 295, 1164, 11, 382, 321, 2825, 466, 11, 498, 291, 747, 257, 2167, 1823, 760, 604, 295, 729, 14518, 11, 291, 434, 7784, 13, 50814, 50814, 407, 291, 291, 584, 11, 2264, 11, 853, 21156, 278, 257, 1230, 13, 759, 300, 1177, 380, 589, 484, 11, 853, 21156, 278, 257, 6798, 13, 51064, 51064, 759, 300, 1177, 380, 589, 484, 11, 510, 311, 264, 1154, 13, 1911, 11, 286, 5176, 281, 536, 2139, 257, 1230, 420, 257, 6798, 13, 51364, 51364, 400, 291, 829, 300, 382, 264, 472, 295, 472, 295, 48377, 1230, 21156, 278, 1154, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.06186239872503718, "compression_ratio": 1.8285714285714285, "no_caption_prob": 2.7534977562027052e-05}, {"id": 385, "seek": 303400, "start": 3054.0, "end": 3059.0, "text": " And you put that as the one of one of parse number parsing problem.", "tokens": [50364, 407, 853, 21156, 278, 257, 1230, 13, 400, 295, 1164, 11, 382, 321, 2825, 466, 11, 498, 291, 747, 257, 2167, 1823, 760, 604, 295, 729, 14518, 11, 291, 434, 7784, 13, 50814, 50814, 407, 291, 291, 584, 11, 2264, 11, 853, 21156, 278, 257, 1230, 13, 759, 300, 1177, 380, 589, 484, 11, 853, 21156, 278, 257, 6798, 13, 51064, 51064, 759, 300, 1177, 380, 589, 484, 11, 510, 311, 264, 1154, 13, 1911, 11, 286, 5176, 281, 536, 2139, 257, 1230, 420, 257, 6798, 13, 51364, 51364, 400, 291, 829, 300, 382, 264, 472, 295, 472, 295, 48377, 1230, 21156, 278, 1154, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.06186239872503718, "compression_ratio": 1.8285714285714285, "no_caption_prob": 2.7534977562027052e-05}, {"id": 386, "seek": 305900, "start": 3059.0, "end": 3066.0, "text": " I expected number string. Yeah. So what about syntax error messages?", "tokens": [50364, 286, 5176, 1230, 6798, 13, 865, 13, 407, 437, 466, 28431, 6713, 7897, 30, 50714, 50714, 407, 291, 458, 11, 21156, 260, 5893, 1154, 11, 291, 393, 584, 2035, 291, 528, 13, 50914, 50914, 509, 393, 853, 293, 652, 309, 382, 4961, 382, 1944, 365, 382, 709, 3601, 300, 291, 362, 13, 51264, 51264, 1012, 360, 291, 483, 661, 733, 295, 6713, 7897, 411, 562, 291, 360, 21156, 260, 5893, 472, 295, 775, 309, 976, 291, 257, 1481, 6713, 3636, 411, 286, 445, 848, 949, 30, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.17989052666558158, "compression_ratio": 1.617117117117117, "no_caption_prob": 4.832021295442246e-05}, {"id": 387, "seek": 305900, "start": 3066.0, "end": 3070.0, "text": " So you know, parser dot problem, you can say whatever you want.", "tokens": [50364, 286, 5176, 1230, 6798, 13, 865, 13, 407, 437, 466, 28431, 6713, 7897, 30, 50714, 50714, 407, 291, 458, 11, 21156, 260, 5893, 1154, 11, 291, 393, 584, 2035, 291, 528, 13, 50914, 50914, 509, 393, 853, 293, 652, 309, 382, 4961, 382, 1944, 365, 382, 709, 3601, 300, 291, 362, 13, 51264, 51264, 1012, 360, 291, 483, 661, 733, 295, 6713, 7897, 411, 562, 291, 360, 21156, 260, 5893, 472, 295, 775, 309, 976, 291, 257, 1481, 6713, 3636, 411, 286, 445, 848, 949, 30, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.17989052666558158, "compression_ratio": 1.617117117117117, "no_caption_prob": 4.832021295442246e-05}, {"id": 388, "seek": 305900, "start": 3070.0, "end": 3077.0, "text": " You can try and make it as helpful as possible with as much knowledge that you have.", "tokens": [50364, 286, 5176, 1230, 6798, 13, 865, 13, 407, 437, 466, 28431, 6713, 7897, 30, 50714, 50714, 407, 291, 458, 11, 21156, 260, 5893, 1154, 11, 291, 393, 584, 2035, 291, 528, 13, 50914, 50914, 509, 393, 853, 293, 652, 309, 382, 4961, 382, 1944, 365, 382, 709, 3601, 300, 291, 362, 13, 51264, 51264, 1012, 360, 291, 483, 661, 733, 295, 6713, 7897, 411, 562, 291, 360, 21156, 260, 5893, 472, 295, 775, 309, 976, 291, 257, 1481, 6713, 3636, 411, 286, 445, 848, 949, 30, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.17989052666558158, "compression_ratio": 1.617117117117117, "no_caption_prob": 4.832021295442246e-05}, {"id": 389, "seek": 305900, "start": 3077.0, "end": 3086.0, "text": " How do you get other kind of error messages like when you do parser dot one of does it give you a nice error message like I just said before?", "tokens": [50364, 286, 5176, 1230, 6798, 13, 865, 13, 407, 437, 466, 28431, 6713, 7897, 30, 50714, 50714, 407, 291, 458, 11, 21156, 260, 5893, 1154, 11, 291, 393, 584, 2035, 291, 528, 13, 50914, 50914, 509, 393, 853, 293, 652, 309, 382, 4961, 382, 1944, 365, 382, 709, 3601, 300, 291, 362, 13, 51264, 51264, 1012, 360, 291, 483, 661, 733, 295, 6713, 7897, 411, 562, 291, 360, 21156, 260, 5893, 472, 295, 775, 309, 976, 291, 257, 1481, 6713, 3636, 411, 286, 445, 848, 949, 30, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.17989052666558158, "compression_ratio": 1.617117117117117, "no_caption_prob": 4.832021295442246e-05}, {"id": 390, "seek": 308600, "start": 3086.0, "end": 3096.0, "text": " Or you have to write them yourself. Parser dot one of is basically going to give you whatever error it encounters first.", "tokens": [50364, 1610, 291, 362, 281, 2464, 552, 1803, 13, 49691, 260, 5893, 472, 295, 307, 1936, 516, 281, 976, 291, 2035, 6713, 309, 26310, 700, 13, 50864, 50864, 407, 294, 2699, 76, 21156, 260, 27575, 11, 300, 311, 257, 3116, 917, 13, 51064, 51064, 286, 1697, 309, 311, 445, 516, 281, 2045, 257, 3116, 917, 293, 550, 1590, 13, 51264, 51264, 400, 550, 286, 390, 9650, 257, 8255, 420, 746, 13, 1079, 13, 51514, 51514, 407, 406, 300, 311, 534, 4420, 13, 865, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.08088129964368097, "compression_ratio": 1.5365853658536586, "no_caption_prob": 5.4758544138167053e-05}, {"id": 391, "seek": 308600, "start": 3096.0, "end": 3100.0, "text": " So in Elm parser terminology, that's a dead end.", "tokens": [50364, 1610, 291, 362, 281, 2464, 552, 1803, 13, 49691, 260, 5893, 472, 295, 307, 1936, 516, 281, 976, 291, 2035, 6713, 309, 26310, 700, 13, 50864, 50864, 407, 294, 2699, 76, 21156, 260, 27575, 11, 300, 311, 257, 3116, 917, 13, 51064, 51064, 286, 1697, 309, 311, 445, 516, 281, 2045, 257, 3116, 917, 293, 550, 1590, 13, 51264, 51264, 400, 550, 286, 390, 9650, 257, 8255, 420, 746, 13, 1079, 13, 51514, 51514, 407, 406, 300, 311, 534, 4420, 13, 865, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.08088129964368097, "compression_ratio": 1.5365853658536586, "no_caption_prob": 5.4758544138167053e-05}, {"id": 392, "seek": 308600, "start": 3100.0, "end": 3104.0, "text": " I believe it's just going to hit a dead end and then stop.", "tokens": [50364, 1610, 291, 362, 281, 2464, 552, 1803, 13, 49691, 260, 5893, 472, 295, 307, 1936, 516, 281, 976, 291, 2035, 6713, 309, 26310, 700, 13, 50864, 50864, 407, 294, 2699, 76, 21156, 260, 27575, 11, 300, 311, 257, 3116, 917, 13, 51064, 51064, 286, 1697, 309, 311, 445, 516, 281, 2045, 257, 3116, 917, 293, 550, 1590, 13, 51264, 51264, 400, 550, 286, 390, 9650, 257, 8255, 420, 746, 13, 1079, 13, 51514, 51514, 407, 406, 300, 311, 534, 4420, 13, 865, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.08088129964368097, "compression_ratio": 1.5365853658536586, "no_caption_prob": 5.4758544138167053e-05}, {"id": 393, "seek": 308600, "start": 3104.0, "end": 3109.0, "text": " And then I was expecting a colon or something. Yes.", "tokens": [50364, 1610, 291, 362, 281, 2464, 552, 1803, 13, 49691, 260, 5893, 472, 295, 307, 1936, 516, 281, 976, 291, 2035, 6713, 309, 26310, 700, 13, 50864, 50864, 407, 294, 2699, 76, 21156, 260, 27575, 11, 300, 311, 257, 3116, 917, 13, 51064, 51064, 286, 1697, 309, 311, 445, 516, 281, 2045, 257, 3116, 917, 293, 550, 1590, 13, 51264, 51264, 400, 550, 286, 390, 9650, 257, 8255, 420, 746, 13, 1079, 13, 51514, 51514, 407, 406, 300, 311, 534, 4420, 13, 865, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.08088129964368097, "compression_ratio": 1.5365853658536586, "no_caption_prob": 5.4758544138167053e-05}, {"id": 394, "seek": 308600, "start": 3109.0, "end": 3113.0, "text": " So not that's really useful. Yeah.", "tokens": [50364, 1610, 291, 362, 281, 2464, 552, 1803, 13, 49691, 260, 5893, 472, 295, 307, 1936, 516, 281, 976, 291, 2035, 6713, 309, 26310, 700, 13, 50864, 50864, 407, 294, 2699, 76, 21156, 260, 27575, 11, 300, 311, 257, 3116, 917, 13, 51064, 51064, 286, 1697, 309, 311, 445, 516, 281, 2045, 257, 3116, 917, 293, 550, 1590, 13, 51264, 51264, 400, 550, 286, 390, 9650, 257, 8255, 420, 746, 13, 1079, 13, 51514, 51514, 407, 406, 300, 311, 534, 4420, 13, 865, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.08088129964368097, "compression_ratio": 1.5365853658536586, "no_caption_prob": 5.4758544138167053e-05}, {"id": 395, "seek": 311300, "start": 3113.0, "end": 3126.0, "text": " So the way that you write very precise, expressive error messages with Elm parser to try to get the type of quality of error messages that you see in the Elm compiler,", "tokens": [50364, 407, 264, 636, 300, 291, 2464, 588, 13600, 11, 40189, 6713, 7897, 365, 2699, 76, 21156, 260, 281, 853, 281, 483, 264, 2010, 295, 3125, 295, 6713, 7897, 300, 291, 536, 294, 264, 2699, 76, 31958, 11, 51014, 51014, 264, 3873, 300, 645, 2212, 281, 360, 300, 294, 2699, 76, 21156, 260, 366, 294, 21156, 260, 5893, 7339, 13, 51264, 51264, 407, 341, 10088, 11, 21156, 260, 5893, 7339, 11, 382, 286, 519, 291, 1866, 11, 309, 1238, 709, 24238, 264, 3890, 21156, 260, 10088, 13, 51614, 51614, 583, 309, 311, 658, 512, 257, 1916, 295, 2962, 293, 257, 1916, 295, 2857, 6828, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.06574250150609899, "compression_ratio": 1.7666666666666666, "no_caption_prob": 4.710859684564639e-06}, {"id": 396, "seek": 311300, "start": 3126.0, "end": 3131.0, "text": " the tools that were given to do that in Elm parser are in parser dot advanced.", "tokens": [50364, 407, 264, 636, 300, 291, 2464, 588, 13600, 11, 40189, 6713, 7897, 365, 2699, 76, 21156, 260, 281, 853, 281, 483, 264, 2010, 295, 3125, 295, 6713, 7897, 300, 291, 536, 294, 264, 2699, 76, 31958, 11, 51014, 51014, 264, 3873, 300, 645, 2212, 281, 360, 300, 294, 2699, 76, 21156, 260, 366, 294, 21156, 260, 5893, 7339, 13, 51264, 51264, 407, 341, 10088, 11, 21156, 260, 5893, 7339, 11, 382, 286, 519, 291, 1866, 11, 309, 1238, 709, 24238, 264, 3890, 21156, 260, 10088, 13, 51614, 51614, 583, 309, 311, 658, 512, 257, 1916, 295, 2962, 293, 257, 1916, 295, 2857, 6828, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.06574250150609899, "compression_ratio": 1.7666666666666666, "no_caption_prob": 4.710859684564639e-06}, {"id": 397, "seek": 311300, "start": 3131.0, "end": 3138.0, "text": " So this module, parser dot advanced, as I think you saw, it pretty much mirrors the regular parser module.", "tokens": [50364, 407, 264, 636, 300, 291, 2464, 588, 13600, 11, 40189, 6713, 7897, 365, 2699, 76, 21156, 260, 281, 853, 281, 483, 264, 2010, 295, 3125, 295, 6713, 7897, 300, 291, 536, 294, 264, 2699, 76, 31958, 11, 51014, 51014, 264, 3873, 300, 645, 2212, 281, 360, 300, 294, 2699, 76, 21156, 260, 366, 294, 21156, 260, 5893, 7339, 13, 51264, 51264, 407, 341, 10088, 11, 21156, 260, 5893, 7339, 11, 382, 286, 519, 291, 1866, 11, 309, 1238, 709, 24238, 264, 3890, 21156, 260, 10088, 13, 51614, 51614, 583, 309, 311, 658, 512, 257, 1916, 295, 2962, 293, 257, 1916, 295, 2857, 6828, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.06574250150609899, "compression_ratio": 1.7666666666666666, "no_caption_prob": 4.710859684564639e-06}, {"id": 398, "seek": 311300, "start": 3138.0, "end": 3142.0, "text": " But it's got some a couple of changes and a couple of extra functions.", "tokens": [50364, 407, 264, 636, 300, 291, 2464, 588, 13600, 11, 40189, 6713, 7897, 365, 2699, 76, 21156, 260, 281, 853, 281, 483, 264, 2010, 295, 3125, 295, 6713, 7897, 300, 291, 536, 294, 264, 2699, 76, 31958, 11, 51014, 51014, 264, 3873, 300, 645, 2212, 281, 360, 300, 294, 2699, 76, 21156, 260, 366, 294, 21156, 260, 5893, 7339, 13, 51264, 51264, 407, 341, 10088, 11, 21156, 260, 5893, 7339, 11, 382, 286, 519, 291, 1866, 11, 309, 1238, 709, 24238, 264, 3890, 21156, 260, 10088, 13, 51614, 51614, 583, 309, 311, 658, 512, 257, 1916, 295, 2962, 293, 257, 1916, 295, 2857, 6828, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.06574250150609899, "compression_ratio": 1.7666666666666666, "no_caption_prob": 4.710859684564639e-06}, {"id": 399, "seek": 314200, "start": 3142.0, "end": 3147.0, "text": " That's what it's for. That was going to be one of my questions. Like, when do you use parser at events?", "tokens": [50364, 663, 311, 437, 309, 311, 337, 13, 663, 390, 516, 281, 312, 472, 295, 452, 1651, 13, 1743, 11, 562, 360, 291, 764, 21156, 260, 412, 3931, 30, 50614, 50614, 8537, 11, 309, 311, 570, 295, 264, 6713, 7897, 13, 1119, 300, 309, 30, 50764, 50764, 7587, 13, 407, 1936, 11, 562, 291, 360, 264, 3890, 21156, 260, 10088, 11, 562, 291, 1190, 257, 21156, 260, 11, 456, 311, 767, 257, 1152, 34874, 1329, 295, 2740, 13, 51314, 51314, 821, 311, 411, 257, 1154, 2010, 294, 264, 21156, 260, 10088, 13, 51414, 51414], "temperature": 0.0, "avg_logprob": -0.09963681070428146, "compression_ratio": 1.5972222222222223, "no_caption_prob": 2.178233626182191e-05}, {"id": 400, "seek": 314200, "start": 3147.0, "end": 3150.0, "text": " Basically, it's because of the error messages. Is that it?", "tokens": [50364, 663, 311, 437, 309, 311, 337, 13, 663, 390, 516, 281, 312, 472, 295, 452, 1651, 13, 1743, 11, 562, 360, 291, 764, 21156, 260, 412, 3931, 30, 50614, 50614, 8537, 11, 309, 311, 570, 295, 264, 6713, 7897, 13, 1119, 300, 309, 30, 50764, 50764, 7587, 13, 407, 1936, 11, 562, 291, 360, 264, 3890, 21156, 260, 10088, 11, 562, 291, 1190, 257, 21156, 260, 11, 456, 311, 767, 257, 1152, 34874, 1329, 295, 2740, 13, 51314, 51314, 821, 311, 411, 257, 1154, 2010, 294, 264, 21156, 260, 10088, 13, 51414, 51414], "temperature": 0.0, "avg_logprob": -0.09963681070428146, "compression_ratio": 1.5972222222222223, "no_caption_prob": 2.178233626182191e-05}, {"id": 401, "seek": 314200, "start": 3150.0, "end": 3161.0, "text": " Exactly. So basically, when you do the regular parser module, when you run a parser, there's actually a hard coded list of problems.", "tokens": [50364, 663, 311, 437, 309, 311, 337, 13, 663, 390, 516, 281, 312, 472, 295, 452, 1651, 13, 1743, 11, 562, 360, 291, 764, 21156, 260, 412, 3931, 30, 50614, 50614, 8537, 11, 309, 311, 570, 295, 264, 6713, 7897, 13, 1119, 300, 309, 30, 50764, 50764, 7587, 13, 407, 1936, 11, 562, 291, 360, 264, 3890, 21156, 260, 10088, 11, 562, 291, 1190, 257, 21156, 260, 11, 456, 311, 767, 257, 1152, 34874, 1329, 295, 2740, 13, 51314, 51314, 821, 311, 411, 257, 1154, 2010, 294, 264, 21156, 260, 10088, 13, 51414, 51414], "temperature": 0.0, "avg_logprob": -0.09963681070428146, "compression_ratio": 1.5972222222222223, "no_caption_prob": 2.178233626182191e-05}, {"id": 402, "seek": 314200, "start": 3161.0, "end": 3163.0, "text": " There's like a problem type in the parser module.", "tokens": [50364, 663, 311, 437, 309, 311, 337, 13, 663, 390, 516, 281, 312, 472, 295, 452, 1651, 13, 1743, 11, 562, 360, 291, 764, 21156, 260, 412, 3931, 30, 50614, 50614, 8537, 11, 309, 311, 570, 295, 264, 6713, 7897, 13, 1119, 300, 309, 30, 50764, 50764, 7587, 13, 407, 1936, 11, 562, 291, 360, 264, 3890, 21156, 260, 10088, 11, 562, 291, 1190, 257, 21156, 260, 11, 456, 311, 767, 257, 1152, 34874, 1329, 295, 2740, 13, 51314, 51314, 821, 311, 411, 257, 1154, 2010, 294, 264, 21156, 260, 10088, 13, 51414, 51414], "temperature": 0.0, "avg_logprob": -0.09963681070428146, "compression_ratio": 1.5972222222222223, "no_caption_prob": 2.178233626182191e-05}, {"id": 403, "seek": 316300, "start": 3163.0, "end": 3174.0, "text": " So the type parser dot problem is a hard coded type that says I was expecting this token, I was expecting this type of value, or it could just be a string that says this was the problem.", "tokens": [50364, 407, 264, 2010, 21156, 260, 5893, 1154, 307, 257, 1152, 34874, 2010, 300, 1619, 286, 390, 9650, 341, 14862, 11, 286, 390, 9650, 341, 2010, 295, 2158, 11, 420, 309, 727, 445, 312, 257, 6798, 300, 1619, 341, 390, 264, 1154, 13, 50914, 50914, 759, 291, 584, 21156, 260, 5893, 1154, 11, 309, 311, 516, 281, 312, 428, 2375, 1154, 6798, 13, 51114, 51114, 467, 445, 2709, 291, 257, 1081, 281, 2893, 257, 6798, 300, 2709, 364, 6713, 13, 1779, 13, 51314, 51314, 400, 498, 291, 764, 21156, 260, 5893, 7339, 586, 11, 300, 1154, 2010, 307, 428, 1065, 2375, 2010, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.07323804441488015, "compression_ratio": 1.9045454545454545, "no_caption_prob": 0.00025711028138175607}, {"id": 404, "seek": 316300, "start": 3174.0, "end": 3178.0, "text": " If you say parser dot problem, it's going to be your custom problem string.", "tokens": [50364, 407, 264, 2010, 21156, 260, 5893, 1154, 307, 257, 1152, 34874, 2010, 300, 1619, 286, 390, 9650, 341, 14862, 11, 286, 390, 9650, 341, 2010, 295, 2158, 11, 420, 309, 727, 445, 312, 257, 6798, 300, 1619, 341, 390, 264, 1154, 13, 50914, 50914, 759, 291, 584, 21156, 260, 5893, 1154, 11, 309, 311, 516, 281, 312, 428, 2375, 1154, 6798, 13, 51114, 51114, 467, 445, 2709, 291, 257, 1081, 281, 2893, 257, 6798, 300, 2709, 364, 6713, 13, 1779, 13, 51314, 51314, 400, 498, 291, 764, 21156, 260, 5893, 7339, 586, 11, 300, 1154, 2010, 307, 428, 1065, 2375, 2010, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.07323804441488015, "compression_ratio": 1.9045454545454545, "no_caption_prob": 0.00025711028138175607}, {"id": 405, "seek": 316300, "start": 3178.0, "end": 3182.0, "text": " It just gives you a place to provide a string that gives an error. Right.", "tokens": [50364, 407, 264, 2010, 21156, 260, 5893, 1154, 307, 257, 1152, 34874, 2010, 300, 1619, 286, 390, 9650, 341, 14862, 11, 286, 390, 9650, 341, 2010, 295, 2158, 11, 420, 309, 727, 445, 312, 257, 6798, 300, 1619, 341, 390, 264, 1154, 13, 50914, 50914, 759, 291, 584, 21156, 260, 5893, 1154, 11, 309, 311, 516, 281, 312, 428, 2375, 1154, 6798, 13, 51114, 51114, 467, 445, 2709, 291, 257, 1081, 281, 2893, 257, 6798, 300, 2709, 364, 6713, 13, 1779, 13, 51314, 51314, 400, 498, 291, 764, 21156, 260, 5893, 7339, 586, 11, 300, 1154, 2010, 307, 428, 1065, 2375, 2010, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.07323804441488015, "compression_ratio": 1.9045454545454545, "no_caption_prob": 0.00025711028138175607}, {"id": 406, "seek": 316300, "start": 3182.0, "end": 3189.0, "text": " And if you use parser dot advanced now, that problem type is your own custom type.", "tokens": [50364, 407, 264, 2010, 21156, 260, 5893, 1154, 307, 257, 1152, 34874, 2010, 300, 1619, 286, 390, 9650, 341, 14862, 11, 286, 390, 9650, 341, 2010, 295, 2158, 11, 420, 309, 727, 445, 312, 257, 6798, 300, 1619, 341, 390, 264, 1154, 13, 50914, 50914, 759, 291, 584, 21156, 260, 5893, 1154, 11, 309, 311, 516, 281, 312, 428, 2375, 1154, 6798, 13, 51114, 51114, 467, 445, 2709, 291, 257, 1081, 281, 2893, 257, 6798, 300, 2709, 364, 6713, 13, 1779, 13, 51314, 51314, 400, 498, 291, 764, 21156, 260, 5893, 7339, 586, 11, 300, 1154, 2010, 307, 428, 1065, 2375, 2010, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.07323804441488015, "compression_ratio": 1.9045454545454545, "no_caption_prob": 0.00025711028138175607}, {"id": 407, "seek": 318900, "start": 3189.0, "end": 3199.0, "text": " So a problem could be a very expressive custom type that you define and you define how to build up that type as you build up your parsers.", "tokens": [50364, 407, 257, 1154, 727, 312, 257, 588, 40189, 2375, 2010, 300, 291, 6964, 293, 291, 6964, 577, 281, 1322, 493, 300, 2010, 382, 291, 1322, 493, 428, 21156, 433, 13, 50864, 50864, 583, 281, 281, 976, 665, 6713, 7897, 11, 291, 643, 281, 458, 294, 437, 1785, 291, 366, 13, 51114, 51114, 407, 300, 311, 264, 661, 551, 300, 21156, 260, 7339, 2709, 291, 13, 51314, 51314, 35800, 380, 362, 8878, 292, 1101, 2059, 13, 407, 309, 4045, 291, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.08338273139227004, "compression_ratio": 1.6218905472636815, "no_caption_prob": 2.111208777932916e-05}, {"id": 408, "seek": 318900, "start": 3199.0, "end": 3204.0, "text": " But to to give good error messages, you need to know in what state you are.", "tokens": [50364, 407, 257, 1154, 727, 312, 257, 588, 40189, 2375, 2010, 300, 291, 6964, 293, 291, 6964, 577, 281, 1322, 493, 300, 2010, 382, 291, 1322, 493, 428, 21156, 433, 13, 50864, 50864, 583, 281, 281, 976, 665, 6713, 7897, 11, 291, 643, 281, 458, 294, 437, 1785, 291, 366, 13, 51114, 51114, 407, 300, 311, 264, 661, 551, 300, 21156, 260, 7339, 2709, 291, 13, 51314, 51314, 35800, 380, 362, 8878, 292, 1101, 2059, 13, 407, 309, 4045, 291, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.08338273139227004, "compression_ratio": 1.6218905472636815, "no_caption_prob": 2.111208777932916e-05}, {"id": 409, "seek": 318900, "start": 3204.0, "end": 3208.0, "text": " So that's the other thing that parser advanced gives you.", "tokens": [50364, 407, 257, 1154, 727, 312, 257, 588, 40189, 2375, 2010, 300, 291, 6964, 293, 291, 6964, 577, 281, 1322, 493, 300, 2010, 382, 291, 1322, 493, 428, 21156, 433, 13, 50864, 50864, 583, 281, 281, 976, 665, 6713, 7897, 11, 291, 643, 281, 458, 294, 437, 1785, 291, 366, 13, 51114, 51114, 407, 300, 311, 264, 661, 551, 300, 21156, 260, 7339, 2709, 291, 13, 51314, 51314, 35800, 380, 362, 8878, 292, 1101, 2059, 13, 407, 309, 4045, 291, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.08338273139227004, "compression_ratio": 1.6218905472636815, "no_caption_prob": 2.111208777932916e-05}, {"id": 410, "seek": 318900, "start": 3208.0, "end": 3212.0, "text": " Couldn't have segued better myself. So it allows you.", "tokens": [50364, 407, 257, 1154, 727, 312, 257, 588, 40189, 2375, 2010, 300, 291, 6964, 293, 291, 6964, 577, 281, 1322, 493, 300, 2010, 382, 291, 1322, 493, 428, 21156, 433, 13, 50864, 50864, 583, 281, 281, 976, 665, 6713, 7897, 11, 291, 643, 281, 458, 294, 437, 1785, 291, 366, 13, 51114, 51114, 407, 300, 311, 264, 661, 551, 300, 21156, 260, 7339, 2709, 291, 13, 51314, 51314, 35800, 380, 362, 8878, 292, 1101, 2059, 13, 407, 309, 4045, 291, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.08338273139227004, "compression_ratio": 1.6218905472636815, "no_caption_prob": 2.111208777932916e-05}, {"id": 411, "seek": 321200, "start": 3212.0, "end": 3220.0, "text": " So if you look at the parser type that's defined in the parser module and that's defined in the parser advanced module,", "tokens": [50364, 407, 498, 291, 574, 412, 264, 21156, 260, 2010, 300, 311, 7642, 294, 264, 21156, 260, 10088, 293, 300, 311, 7642, 294, 264, 21156, 260, 7339, 10088, 11, 50764, 50764, 291, 603, 3449, 300, 456, 366, 512, 2857, 2010, 9102, 294, 264, 7339, 2010, 337, 264, 4319, 293, 264, 2010, 295, 1154, 13, 51114, 51114, 407, 294, 264, 3890, 21156, 260, 10088, 11, 264, 21156, 260, 2010, 575, 11, 382, 286, 848, 11, 257, 1152, 34874, 13, 51464, 51464, 639, 307, 428, 2010, 295, 1154, 300, 291, 727, 362, 13, 400, 498, 291, 362, 257, 2375, 1154, 11, 309, 311, 257, 6798, 294, 264, 21156, 260, 7339, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.039310766117913384, "compression_ratio": 2.0045871559633026, "no_caption_prob": 9.609521657694131e-05}, {"id": 412, "seek": 321200, "start": 3220.0, "end": 3227.0, "text": " you'll notice that there are some extra type variables in the advanced type for the context and the type of problem.", "tokens": [50364, 407, 498, 291, 574, 412, 264, 21156, 260, 2010, 300, 311, 7642, 294, 264, 21156, 260, 10088, 293, 300, 311, 7642, 294, 264, 21156, 260, 7339, 10088, 11, 50764, 50764, 291, 603, 3449, 300, 456, 366, 512, 2857, 2010, 9102, 294, 264, 7339, 2010, 337, 264, 4319, 293, 264, 2010, 295, 1154, 13, 51114, 51114, 407, 294, 264, 3890, 21156, 260, 10088, 11, 264, 21156, 260, 2010, 575, 11, 382, 286, 848, 11, 257, 1152, 34874, 13, 51464, 51464, 639, 307, 428, 2010, 295, 1154, 300, 291, 727, 362, 13, 400, 498, 291, 362, 257, 2375, 1154, 11, 309, 311, 257, 6798, 294, 264, 21156, 260, 7339, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.039310766117913384, "compression_ratio": 2.0045871559633026, "no_caption_prob": 9.609521657694131e-05}, {"id": 413, "seek": 321200, "start": 3227.0, "end": 3234.0, "text": " So in the regular parser module, the parser type has, as I said, a hard coded.", "tokens": [50364, 407, 498, 291, 574, 412, 264, 21156, 260, 2010, 300, 311, 7642, 294, 264, 21156, 260, 10088, 293, 300, 311, 7642, 294, 264, 21156, 260, 7339, 10088, 11, 50764, 50764, 291, 603, 3449, 300, 456, 366, 512, 2857, 2010, 9102, 294, 264, 7339, 2010, 337, 264, 4319, 293, 264, 2010, 295, 1154, 13, 51114, 51114, 407, 294, 264, 3890, 21156, 260, 10088, 11, 264, 21156, 260, 2010, 575, 11, 382, 286, 848, 11, 257, 1152, 34874, 13, 51464, 51464, 639, 307, 428, 2010, 295, 1154, 300, 291, 727, 362, 13, 400, 498, 291, 362, 257, 2375, 1154, 11, 309, 311, 257, 6798, 294, 264, 21156, 260, 7339, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.039310766117913384, "compression_ratio": 2.0045871559633026, "no_caption_prob": 9.609521657694131e-05}, {"id": 414, "seek": 321200, "start": 3234.0, "end": 3241.0, "text": " This is your type of problem that you could have. And if you have a custom problem, it's a string in the parser advanced.", "tokens": [50364, 407, 498, 291, 574, 412, 264, 21156, 260, 2010, 300, 311, 7642, 294, 264, 21156, 260, 10088, 293, 300, 311, 7642, 294, 264, 21156, 260, 7339, 10088, 11, 50764, 50764, 291, 603, 3449, 300, 456, 366, 512, 2857, 2010, 9102, 294, 264, 7339, 2010, 337, 264, 4319, 293, 264, 2010, 295, 1154, 13, 51114, 51114, 407, 294, 264, 3890, 21156, 260, 10088, 11, 264, 21156, 260, 2010, 575, 11, 382, 286, 848, 11, 257, 1152, 34874, 13, 51464, 51464, 639, 307, 428, 2010, 295, 1154, 300, 291, 727, 362, 13, 400, 498, 291, 362, 257, 2375, 1154, 11, 309, 311, 257, 6798, 294, 264, 21156, 260, 7339, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.039310766117913384, "compression_ratio": 2.0045871559633026, "no_caption_prob": 9.609521657694131e-05}, {"id": 415, "seek": 324100, "start": 3241.0, "end": 3247.0, "text": " Parser advanced parser type. You have a custom type for your problems and you.", "tokens": [50364, 430, 685, 260, 7339, 21156, 260, 2010, 13, 509, 362, 257, 2375, 2010, 337, 428, 2740, 293, 291, 13, 50664, 50664, 6998, 380, 300, 10851, 30, 316, 2375, 2010, 337, 428, 2740, 30, 708, 286, 600, 2978, 452, 1379, 993, 13, 50914, 50914, 1449, 20460, 309, 281, 257, 2375, 2010, 13, 286, 4382, 309, 281, 312, 364, 6707, 732, 13, 51214, 51214, 663, 576, 312, 1481, 11, 2759, 380, 309, 30, 821, 311, 1071, 314, 13, 51314, 51314], "temperature": 0.0, "avg_logprob": -0.2730093479156494, "compression_ratio": 1.5833333333333333, "no_caption_prob": 9.169930854113773e-05}, {"id": 416, "seek": 324100, "start": 3247.0, "end": 3252.0, "text": " Isn't that convenient? A custom type for your problems? What I've needed my whole life.", "tokens": [50364, 430, 685, 260, 7339, 21156, 260, 2010, 13, 509, 362, 257, 2375, 2010, 337, 428, 2740, 293, 291, 13, 50664, 50664, 6998, 380, 300, 10851, 30, 316, 2375, 2010, 337, 428, 2740, 30, 708, 286, 600, 2978, 452, 1379, 993, 13, 50914, 50914, 1449, 20460, 309, 281, 257, 2375, 2010, 13, 286, 4382, 309, 281, 312, 364, 6707, 732, 13, 51214, 51214, 663, 576, 312, 1481, 11, 2759, 380, 309, 30, 821, 311, 1071, 314, 13, 51314, 51314], "temperature": 0.0, "avg_logprob": -0.2730093479156494, "compression_ratio": 1.5833333333333333, "no_caption_prob": 9.169930854113773e-05}, {"id": 417, "seek": 324100, "start": 3252.0, "end": 3258.0, "text": " Just simplify it to a custom type. I prefer it to be an empty two.", "tokens": [50364, 430, 685, 260, 7339, 21156, 260, 2010, 13, 509, 362, 257, 2375, 2010, 337, 428, 2740, 293, 291, 13, 50664, 50664, 6998, 380, 300, 10851, 30, 316, 2375, 2010, 337, 428, 2740, 30, 708, 286, 600, 2978, 452, 1379, 993, 13, 50914, 50914, 1449, 20460, 309, 281, 257, 2375, 2010, 13, 286, 4382, 309, 281, 312, 364, 6707, 732, 13, 51214, 51214, 663, 576, 312, 1481, 11, 2759, 380, 309, 30, 821, 311, 1071, 314, 13, 51314, 51314], "temperature": 0.0, "avg_logprob": -0.2730093479156494, "compression_ratio": 1.5833333333333333, "no_caption_prob": 9.169930854113773e-05}, {"id": 418, "seek": 324100, "start": 3258.0, "end": 3260.0, "text": " That would be nice, wouldn't it? There's another T.", "tokens": [50364, 430, 685, 260, 7339, 21156, 260, 2010, 13, 509, 362, 257, 2375, 2010, 337, 428, 2740, 293, 291, 13, 50664, 50664, 6998, 380, 300, 10851, 30, 316, 2375, 2010, 337, 428, 2740, 30, 708, 286, 600, 2978, 452, 1379, 993, 13, 50914, 50914, 1449, 20460, 309, 281, 257, 2375, 2010, 13, 286, 4382, 309, 281, 312, 364, 6707, 732, 13, 51214, 51214, 663, 576, 312, 1481, 11, 2759, 380, 309, 30, 821, 311, 1071, 314, 13, 51314, 51314], "temperature": 0.0, "avg_logprob": -0.2730093479156494, "compression_ratio": 1.5833333333333333, "no_caption_prob": 9.169930854113773e-05}, {"id": 419, "seek": 326000, "start": 3260.0, "end": 3271.0, "text": " Shirt idea. We'll work on that. And then the other extra type variable that you have for the parser advanced parser type is for the context.", "tokens": [50364, 1160, 2498, 1558, 13, 492, 603, 589, 322, 300, 13, 400, 550, 264, 661, 2857, 2010, 7006, 300, 291, 362, 337, 264, 21156, 260, 7339, 21156, 260, 2010, 307, 337, 264, 4319, 13, 50914, 50914, 407, 291, 393, 362, 2121, 4319, 294, 428, 21156, 260, 13, 51164, 51164, 400, 370, 291, 393, 291, 393, 360, 746, 294, 4319, 13, 407, 291, 727, 584, 294, 264, 4319, 295, 21156, 278, 257, 718, 5629, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.08241790920108943, "compression_ratio": 1.7724550898203593, "no_caption_prob": 0.00012146854714956135}, {"id": 420, "seek": 326000, "start": 3271.0, "end": 3276.0, "text": " So you can have special context in your parser.", "tokens": [50364, 1160, 2498, 1558, 13, 492, 603, 589, 322, 300, 13, 400, 550, 264, 661, 2857, 2010, 7006, 300, 291, 362, 337, 264, 21156, 260, 7339, 21156, 260, 2010, 307, 337, 264, 4319, 13, 50914, 50914, 407, 291, 393, 362, 2121, 4319, 294, 428, 21156, 260, 13, 51164, 51164, 400, 370, 291, 393, 291, 393, 360, 746, 294, 4319, 13, 407, 291, 727, 584, 294, 264, 4319, 295, 21156, 278, 257, 718, 5629, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.08241790920108943, "compression_ratio": 1.7724550898203593, "no_caption_prob": 0.00012146854714956135}, {"id": 421, "seek": 326000, "start": 3276.0, "end": 3283.0, "text": " And so you can you can do something in context. So you could say in the context of parsing a let statement.", "tokens": [50364, 1160, 2498, 1558, 13, 492, 603, 589, 322, 300, 13, 400, 550, 264, 661, 2857, 2010, 7006, 300, 291, 362, 337, 264, 21156, 260, 7339, 21156, 260, 2010, 307, 337, 264, 4319, 13, 50914, 50914, 407, 291, 393, 362, 2121, 4319, 294, 428, 21156, 260, 13, 51164, 51164, 400, 370, 291, 393, 291, 393, 360, 746, 294, 4319, 13, 407, 291, 727, 584, 294, 264, 4319, 295, 21156, 278, 257, 718, 5629, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.08241790920108943, "compression_ratio": 1.7724550898203593, "no_caption_prob": 0.00012146854714956135}, {"id": 422, "seek": 328300, "start": 3283.0, "end": 3292.0, "text": " And so now you have this sort of stack of context that says, OK, I was I was in a let statement and within that let statement, I was in another let statement.", "tokens": [50364, 400, 370, 586, 291, 362, 341, 1333, 295, 8630, 295, 4319, 300, 1619, 11, 2264, 11, 286, 390, 286, 390, 294, 257, 718, 5629, 293, 1951, 300, 718, 5629, 11, 286, 390, 294, 1071, 718, 5629, 13, 50814, 50814, 400, 550, 1951, 300, 11, 286, 390, 1382, 281, 48377, 257, 1329, 293, 550, 286, 20381, 341, 6713, 13, 51064, 51064, 400, 370, 300, 311, 1936, 437, 264, 2699, 76, 31958, 4960, 11, 257, 2531, 6532, 281, 2893, 291, 365, 544, 4319, 300, 5112, 291, 2293, 689, 264, 1154, 307, 1348, 490, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.06517359117666881, "compression_ratio": 1.7575757575757576, "no_caption_prob": 5.2250485168769956e-05}, {"id": 423, "seek": 328300, "start": 3292.0, "end": 3297.0, "text": " And then within that, I was trying to parse a list and then I encountered this error.", "tokens": [50364, 400, 370, 586, 291, 362, 341, 1333, 295, 8630, 295, 4319, 300, 1619, 11, 2264, 11, 286, 390, 286, 390, 294, 257, 718, 5629, 293, 1951, 300, 718, 5629, 11, 286, 390, 294, 1071, 718, 5629, 13, 50814, 50814, 400, 550, 1951, 300, 11, 286, 390, 1382, 281, 48377, 257, 1329, 293, 550, 286, 20381, 341, 6713, 13, 51064, 51064, 400, 370, 300, 311, 1936, 437, 264, 2699, 76, 31958, 4960, 11, 257, 2531, 6532, 281, 2893, 291, 365, 544, 4319, 300, 5112, 291, 2293, 689, 264, 1154, 307, 1348, 490, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.06517359117666881, "compression_ratio": 1.7575757575757576, "no_caption_prob": 5.2250485168769956e-05}, {"id": 424, "seek": 328300, "start": 3297.0, "end": 3306.0, "text": " And so that's basically what the Elm compiler uses, a similar technique to provide you with more context that tells you exactly where the problem is coming from.", "tokens": [50364, 400, 370, 586, 291, 362, 341, 1333, 295, 8630, 295, 4319, 300, 1619, 11, 2264, 11, 286, 390, 286, 390, 294, 257, 718, 5629, 293, 1951, 300, 718, 5629, 11, 286, 390, 294, 1071, 718, 5629, 13, 50814, 50814, 400, 550, 1951, 300, 11, 286, 390, 1382, 281, 48377, 257, 1329, 293, 550, 286, 20381, 341, 6713, 13, 51064, 51064, 400, 370, 300, 311, 1936, 437, 264, 2699, 76, 31958, 4960, 11, 257, 2531, 6532, 281, 2893, 291, 365, 544, 4319, 300, 5112, 291, 2293, 689, 264, 1154, 307, 1348, 490, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.06517359117666881, "compression_ratio": 1.7575757575757576, "no_caption_prob": 5.2250485168769956e-05}, {"id": 425, "seek": 330600, "start": 3306.0, "end": 3315.0, "text": " OK, so you would probably use the regular normal parser module to do simple things like parsing a phone number.", "tokens": [50364, 2264, 11, 370, 291, 576, 1391, 764, 264, 3890, 2710, 21156, 260, 10088, 281, 360, 2199, 721, 411, 21156, 278, 257, 2593, 1230, 13, 50814, 50814, 759, 291, 853, 281, 48377, 257, 2856, 11, 550, 291, 486, 1391, 528, 281, 764, 21156, 260, 7339, 13, 51114, 51114, 1079, 11, 2293, 13, 7587, 13, 1436, 456, 311, 257, 688, 544, 4319, 293, 297, 8714, 295, 819, 3467, 295, 15277, 293, 300, 1333, 295, 551, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.06024670600891113, "compression_ratio": 1.5380952380952382, "no_caption_prob": 6.921728345332667e-05}, {"id": 426, "seek": 330600, "start": 3315.0, "end": 3321.0, "text": " If you try to parse a language, then you will probably want to use parser advanced.", "tokens": [50364, 2264, 11, 370, 291, 576, 1391, 764, 264, 3890, 2710, 21156, 260, 10088, 281, 360, 2199, 721, 411, 21156, 278, 257, 2593, 1230, 13, 50814, 50814, 759, 291, 853, 281, 48377, 257, 2856, 11, 550, 291, 486, 1391, 528, 281, 764, 21156, 260, 7339, 13, 51114, 51114, 1079, 11, 2293, 13, 7587, 13, 1436, 456, 311, 257, 688, 544, 4319, 293, 297, 8714, 295, 819, 3467, 295, 15277, 293, 300, 1333, 295, 551, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.06024670600891113, "compression_ratio": 1.5380952380952382, "no_caption_prob": 6.921728345332667e-05}, {"id": 427, "seek": 330600, "start": 3321.0, "end": 3331.0, "text": " Yes, exactly. Exactly. Because there's a lot more context and nesting of different types of expressions and that sort of thing.", "tokens": [50364, 2264, 11, 370, 291, 576, 1391, 764, 264, 3890, 2710, 21156, 260, 10088, 281, 360, 2199, 721, 411, 21156, 278, 257, 2593, 1230, 13, 50814, 50814, 759, 291, 853, 281, 48377, 257, 2856, 11, 550, 291, 486, 1391, 528, 281, 764, 21156, 260, 7339, 13, 51114, 51114, 1079, 11, 2293, 13, 7587, 13, 1436, 456, 311, 257, 688, 544, 4319, 293, 297, 8714, 295, 819, 3467, 295, 15277, 293, 300, 1333, 295, 551, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.06024670600891113, "compression_ratio": 1.5380952380952382, "no_caption_prob": 6.921728345332667e-05}, {"id": 428, "seek": 333100, "start": 3331.0, "end": 3342.0, "text": " So, yeah, exactly. I think that's a good rule of thumb. And actually, well, it's maybe a bit of a tangent, but I'm actually starting to wonder for my Elm Markdown parser,", "tokens": [50364, 407, 11, 1338, 11, 2293, 13, 286, 519, 300, 311, 257, 665, 4978, 295, 9298, 13, 400, 767, 11, 731, 11, 309, 311, 1310, 257, 857, 295, 257, 27747, 11, 457, 286, 478, 767, 2891, 281, 2441, 337, 452, 2699, 76, 3934, 5093, 21156, 260, 11, 50914, 50914, 1968, 286, 820, 445, 764, 264, 3890, 21156, 260, 10088, 11, 570, 3934, 5093, 307, 3845, 294, 300, 309, 311, 406, 3442, 281, 3061, 13, 51364, 51364, 821, 311, 572, 34702, 3934, 5093, 13, 759, 291, 362, 512, 1333, 295, 411, 10377, 14862, 300, 291, 5298, 11, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.07596231229377515, "compression_ratio": 1.5625, "no_caption_prob": 0.00028678771923296154}, {"id": 429, "seek": 333100, "start": 3342.0, "end": 3351.0, "text": " whether I should just use the regular parser module, because Markdown is unique in that it's not supposed to fail.", "tokens": [50364, 407, 11, 1338, 11, 2293, 13, 286, 519, 300, 311, 257, 665, 4978, 295, 9298, 13, 400, 767, 11, 731, 11, 309, 311, 1310, 257, 857, 295, 257, 27747, 11, 457, 286, 478, 767, 2891, 281, 2441, 337, 452, 2699, 76, 3934, 5093, 21156, 260, 11, 50914, 50914, 1968, 286, 820, 445, 764, 264, 3890, 21156, 260, 10088, 11, 570, 3934, 5093, 307, 3845, 294, 300, 309, 311, 406, 3442, 281, 3061, 13, 51364, 51364, 821, 311, 572, 34702, 3934, 5093, 13, 759, 291, 362, 512, 1333, 295, 411, 10377, 14862, 300, 291, 5298, 11, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.07596231229377515, "compression_ratio": 1.5625, "no_caption_prob": 0.00028678771923296154}, {"id": 430, "seek": 333100, "start": 3351.0, "end": 3359.0, "text": " There's no invalid Markdown. If you have some sort of like closing token that you forgot,", "tokens": [50364, 407, 11, 1338, 11, 2293, 13, 286, 519, 300, 311, 257, 665, 4978, 295, 9298, 13, 400, 767, 11, 731, 11, 309, 311, 1310, 257, 857, 295, 257, 27747, 11, 457, 286, 478, 767, 2891, 281, 2441, 337, 452, 2699, 76, 3934, 5093, 21156, 260, 11, 50914, 50914, 1968, 286, 820, 445, 764, 264, 3890, 21156, 260, 10088, 11, 570, 3934, 5093, 307, 3845, 294, 300, 309, 311, 406, 3442, 281, 3061, 13, 51364, 51364, 821, 311, 572, 34702, 3934, 5093, 13, 759, 291, 362, 512, 1333, 295, 411, 10377, 14862, 300, 291, 5298, 11, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.07596231229377515, "compression_ratio": 1.5625, "no_caption_prob": 0.00028678771923296154}, {"id": 431, "seek": 335900, "start": 3359.0, "end": 3372.0, "text": " like you forgot the closing parenthesis for a link tag in your Markdown. Well, it's just a valid string literal instead of being an actual link block.", "tokens": [50364, 411, 291, 5298, 264, 10377, 23350, 9374, 337, 257, 2113, 6162, 294, 428, 3934, 5093, 13, 1042, 11, 309, 311, 445, 257, 7363, 6798, 20411, 2602, 295, 885, 364, 3539, 2113, 3461, 13, 51014, 51014, 865, 11, 291, 1009, 362, 257, 2100, 3207, 300, 307, 445, 3890, 6798, 13, 7587, 13, 663, 311, 264, 16998, 27747, 300, 291, 600, 1562, 1096, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.10107542529250636, "compression_ratio": 1.4545454545454546, "no_caption_prob": 1.5936271665850654e-05}, {"id": 432, "seek": 335900, "start": 3372.0, "end": 3382.0, "text": " Yeah, you always have a fallback that is just regular string. Exactly. That's the smallest tangent that you've ever done.", "tokens": [50364, 411, 291, 5298, 264, 10377, 23350, 9374, 337, 257, 2113, 6162, 294, 428, 3934, 5093, 13, 1042, 11, 309, 311, 445, 257, 7363, 6798, 20411, 2602, 295, 885, 364, 3539, 2113, 3461, 13, 51014, 51014, 865, 11, 291, 1009, 362, 257, 2100, 3207, 300, 307, 445, 3890, 6798, 13, 7587, 13, 663, 311, 264, 16998, 27747, 300, 291, 600, 1562, 1096, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.10107542529250636, "compression_ratio": 1.4545454545454546, "no_caption_prob": 1.5936271665850654e-05}, {"id": 433, "seek": 338200, "start": 3382.0, "end": 3390.0, "text": " My whole life is a tangent, Jeroen. This whole podcast is a tangent.", "tokens": [50364, 1222, 1379, 993, 307, 257, 27747, 11, 508, 2032, 268, 13, 639, 1379, 7367, 307, 257, 27747, 13, 50764, 50764, 865, 13, 2264, 11, 731, 11, 286, 519, 286, 458, 577, 281, 2464, 364, 2699, 76, 28431, 21156, 260, 586, 13, 1449, 411, 264, 8141, 13, 509, 458, 11, 44317, 12807, 13, 51214, 51214, 286, 458, 44317, 12807, 13, 286, 458, 2699, 76, 21156, 260, 13, 286, 458, 2699, 76, 21156, 260, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.1774875715181425, "compression_ratio": 1.563758389261745, "no_caption_prob": 3.704995469888672e-05}, {"id": 434, "seek": 338200, "start": 3390.0, "end": 3399.0, "text": " Yeah. OK, well, I think I know how to write an Elm syntax parser now. Just like the matrix. You know, Kung Fu.", "tokens": [50364, 1222, 1379, 993, 307, 257, 27747, 11, 508, 2032, 268, 13, 639, 1379, 7367, 307, 257, 27747, 13, 50764, 50764, 865, 13, 2264, 11, 731, 11, 286, 519, 286, 458, 577, 281, 2464, 364, 2699, 76, 28431, 21156, 260, 586, 13, 1449, 411, 264, 8141, 13, 509, 458, 11, 44317, 12807, 13, 51214, 51214, 286, 458, 44317, 12807, 13, 286, 458, 2699, 76, 21156, 260, 13, 286, 458, 2699, 76, 21156, 260, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.1774875715181425, "compression_ratio": 1.563758389261745, "no_caption_prob": 3.704995469888672e-05}, {"id": 435, "seek": 338200, "start": 3399.0, "end": 3404.0, "text": " I know Kung Fu. I know Elm parser. I know Elm parser.", "tokens": [50364, 1222, 1379, 993, 307, 257, 27747, 11, 508, 2032, 268, 13, 639, 1379, 7367, 307, 257, 27747, 13, 50764, 50764, 865, 13, 2264, 11, 731, 11, 286, 519, 286, 458, 577, 281, 2464, 364, 2699, 76, 28431, 21156, 260, 586, 13, 1449, 411, 264, 8141, 13, 509, 458, 11, 44317, 12807, 13, 51214, 51214, 286, 458, 44317, 12807, 13, 286, 458, 2699, 76, 21156, 260, 13, 286, 458, 2699, 76, 21156, 260, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.1774875715181425, "compression_ratio": 1.563758389261745, "no_caption_prob": 3.704995469888672e-05}, {"id": 436, "seek": 340400, "start": 3404.0, "end": 3413.0, "text": " If we can give people that feeling with some of our podcast episodes, then I will be happy. Yeah. Let us know.", "tokens": [50364, 759, 321, 393, 976, 561, 300, 2633, 365, 512, 295, 527, 7367, 9313, 11, 550, 286, 486, 312, 2055, 13, 865, 13, 961, 505, 458, 13, 50814, 50814, 1449, 15258, 412, 505, 293, 584, 11, 286, 458, 2699, 76, 21156, 260, 293, 321, 603, 1223, 13, 51164, 51164, 865, 13, 509, 393, 611, 584, 286, 20263, 412, 21156, 278, 13, 440, 2141, 281, 2245, 307, 7754, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.09469237797696825, "compression_ratio": 1.4597701149425288, "no_caption_prob": 8.349235577043146e-05}, {"id": 437, "seek": 340400, "start": 3413.0, "end": 3420.0, "text": " Just tweet at us and say, I know Elm parser and we'll understand.", "tokens": [50364, 759, 321, 393, 976, 561, 300, 2633, 365, 512, 295, 527, 7367, 9313, 11, 550, 286, 486, 312, 2055, 13, 865, 13, 961, 505, 458, 13, 50814, 50814, 1449, 15258, 412, 505, 293, 584, 11, 286, 458, 2699, 76, 21156, 260, 293, 321, 603, 1223, 13, 51164, 51164, 865, 13, 509, 393, 611, 584, 286, 20263, 412, 21156, 278, 13, 440, 2141, 281, 2245, 307, 7754, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.09469237797696825, "compression_ratio": 1.4597701149425288, "no_caption_prob": 8.349235577043146e-05}, {"id": 438, "seek": 340400, "start": 3420.0, "end": 3429.0, "text": " Yeah. You can also say I succeeded at parsing. The key to success is succeed.", "tokens": [50364, 759, 321, 393, 976, 561, 300, 2633, 365, 512, 295, 527, 7367, 9313, 11, 550, 286, 486, 312, 2055, 13, 865, 13, 961, 505, 458, 13, 50814, 50814, 1449, 15258, 412, 505, 293, 584, 11, 286, 458, 2699, 76, 21156, 260, 293, 321, 603, 1223, 13, 51164, 51164, 865, 13, 509, 393, 611, 584, 286, 20263, 412, 21156, 278, 13, 440, 2141, 281, 2245, 307, 7754, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.09469237797696825, "compression_ratio": 1.4597701149425288, "no_caption_prob": 8.349235577043146e-05}, {"id": 439, "seek": 342900, "start": 3429.0, "end": 3434.0, "text": " Succeed is the key to success. Yeah, it's good. I think the monospace font is what what makes it.", "tokens": [50364, 318, 1311, 4357, 307, 264, 2141, 281, 2245, 13, 865, 11, 309, 311, 665, 13, 286, 519, 264, 1108, 35682, 10703, 307, 437, 437, 1669, 309, 13, 50614, 50614, 407, 309, 311, 516, 281, 312, 257, 1101, 314, 8336, 13, 865, 13, 50914, 50914, 286, 519, 321, 600, 5343, 264, 3875, 2390, 8474, 1238, 731, 13, 51164, 51164, 400, 295, 1164, 11, 456, 311, 456, 311, 1009, 544, 281, 6839, 13, 509, 434, 1009, 516, 281, 915, 544, 13, 51414, 51414, 583, 452, 3880, 5192, 295, 1340, 307, 1767, 11, 1767, 11, 1767, 2464, 4985, 6921, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.07810965150889784, "compression_ratio": 1.64, "no_caption_prob": 0.0002867339935619384}, {"id": 440, "seek": 342900, "start": 3434.0, "end": 3440.0, "text": " So it's going to be a better T shirt. Yeah.", "tokens": [50364, 318, 1311, 4357, 307, 264, 2141, 281, 2245, 13, 865, 11, 309, 311, 665, 13, 286, 519, 264, 1108, 35682, 10703, 307, 437, 437, 1669, 309, 13, 50614, 50614, 407, 309, 311, 516, 281, 312, 257, 1101, 314, 8336, 13, 865, 13, 50914, 50914, 286, 519, 321, 600, 5343, 264, 3875, 2390, 8474, 1238, 731, 13, 51164, 51164, 400, 295, 1164, 11, 456, 311, 456, 311, 1009, 544, 281, 6839, 13, 509, 434, 1009, 516, 281, 915, 544, 13, 51414, 51414, 583, 452, 3880, 5192, 295, 1340, 307, 1767, 11, 1767, 11, 1767, 2464, 4985, 6921, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.07810965150889784, "compression_ratio": 1.64, "no_caption_prob": 0.0002867339935619384}, {"id": 441, "seek": 342900, "start": 3440.0, "end": 3445.0, "text": " I think we've covered the basic building blocks pretty well.", "tokens": [50364, 318, 1311, 4357, 307, 264, 2141, 281, 2245, 13, 865, 11, 309, 311, 665, 13, 286, 519, 264, 1108, 35682, 10703, 307, 437, 437, 1669, 309, 13, 50614, 50614, 407, 309, 311, 516, 281, 312, 257, 1101, 314, 8336, 13, 865, 13, 50914, 50914, 286, 519, 321, 600, 5343, 264, 3875, 2390, 8474, 1238, 731, 13, 51164, 51164, 400, 295, 1164, 11, 456, 311, 456, 311, 1009, 544, 281, 6839, 13, 509, 434, 1009, 516, 281, 915, 544, 13, 51414, 51414, 583, 452, 3880, 5192, 295, 1340, 307, 1767, 11, 1767, 11, 1767, 2464, 4985, 6921, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.07810965150889784, "compression_ratio": 1.64, "no_caption_prob": 0.0002867339935619384}, {"id": 442, "seek": 342900, "start": 3445.0, "end": 3450.0, "text": " And of course, there's there's always more to explore. You're always going to find more.", "tokens": [50364, 318, 1311, 4357, 307, 264, 2141, 281, 2245, 13, 865, 11, 309, 311, 665, 13, 286, 519, 264, 1108, 35682, 10703, 307, 437, 437, 1669, 309, 13, 50614, 50614, 407, 309, 311, 516, 281, 312, 257, 1101, 314, 8336, 13, 865, 13, 50914, 50914, 286, 519, 321, 600, 5343, 264, 3875, 2390, 8474, 1238, 731, 13, 51164, 51164, 400, 295, 1164, 11, 456, 311, 456, 311, 1009, 544, 281, 6839, 13, 509, 434, 1009, 516, 281, 915, 544, 13, 51414, 51414, 583, 452, 3880, 5192, 295, 1340, 307, 1767, 11, 1767, 11, 1767, 2464, 4985, 6921, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.07810965150889784, "compression_ratio": 1.64, "no_caption_prob": 0.0002867339935619384}, {"id": 443, "seek": 342900, "start": 3450.0, "end": 3455.0, "text": " But my biggest advice of anything is please, please, please write unit tests.", "tokens": [50364, 318, 1311, 4357, 307, 264, 2141, 281, 2245, 13, 865, 11, 309, 311, 665, 13, 286, 519, 264, 1108, 35682, 10703, 307, 437, 437, 1669, 309, 13, 50614, 50614, 407, 309, 311, 516, 281, 312, 257, 1101, 314, 8336, 13, 865, 13, 50914, 50914, 286, 519, 321, 600, 5343, 264, 3875, 2390, 8474, 1238, 731, 13, 51164, 51164, 400, 295, 1164, 11, 456, 311, 456, 311, 1009, 544, 281, 6839, 13, 509, 434, 1009, 516, 281, 915, 544, 13, 51414, 51414, 583, 452, 3880, 5192, 295, 1340, 307, 1767, 11, 1767, 11, 1767, 2464, 4985, 6921, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.07810965150889784, "compression_ratio": 1.64, "no_caption_prob": 0.0002867339935619384}, {"id": 444, "seek": 345500, "start": 3455.0, "end": 3460.0, "text": " If you're building a project, you will thank me later is very worth it with that in mind.", "tokens": [50364, 759, 291, 434, 2390, 257, 1716, 11, 291, 486, 1309, 385, 1780, 307, 588, 3163, 309, 365, 300, 294, 1575, 13, 50614, 50614, 286, 914, 11, 498, 291, 1466, 472, 551, 11, 2464, 6921, 337, 428, 21156, 260, 498, 291, 747, 472, 551, 1314, 13, 50914, 50914, 583, 498, 291, 747, 732, 721, 1314, 11, 1310, 321, 820, 751, 257, 707, 857, 466, 512, 512, 721, 281, 1066, 294, 1575, 562, 291, 434, 2891, 257, 1716, 13, 51314, 51314, 286, 519, 472, 472, 551, 300, 307, 534, 8263, 307, 498, 291, 434, 3579, 257, 21156, 260, 11, 456, 311, 257, 665, 2931, 300, 291, 434, 1364, 365, 512, 1333, 295, 31256, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.06655383110046387, "compression_ratio": 1.82421875, "no_caption_prob": 5.920342664467171e-05}, {"id": 445, "seek": 345500, "start": 3460.0, "end": 3466.0, "text": " I mean, if you learn one thing, write tests for your parser if you take one thing away.", "tokens": [50364, 759, 291, 434, 2390, 257, 1716, 11, 291, 486, 1309, 385, 1780, 307, 588, 3163, 309, 365, 300, 294, 1575, 13, 50614, 50614, 286, 914, 11, 498, 291, 1466, 472, 551, 11, 2464, 6921, 337, 428, 21156, 260, 498, 291, 747, 472, 551, 1314, 13, 50914, 50914, 583, 498, 291, 747, 732, 721, 1314, 11, 1310, 321, 820, 751, 257, 707, 857, 466, 512, 512, 721, 281, 1066, 294, 1575, 562, 291, 434, 2891, 257, 1716, 13, 51314, 51314, 286, 519, 472, 472, 551, 300, 307, 534, 8263, 307, 498, 291, 434, 3579, 257, 21156, 260, 11, 456, 311, 257, 665, 2931, 300, 291, 434, 1364, 365, 512, 1333, 295, 31256, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.06655383110046387, "compression_ratio": 1.82421875, "no_caption_prob": 5.920342664467171e-05}, {"id": 446, "seek": 345500, "start": 3466.0, "end": 3474.0, "text": " But if you take two things away, maybe we should talk a little bit about some some things to keep in mind when you're starting a project.", "tokens": [50364, 759, 291, 434, 2390, 257, 1716, 11, 291, 486, 1309, 385, 1780, 307, 588, 3163, 309, 365, 300, 294, 1575, 13, 50614, 50614, 286, 914, 11, 498, 291, 1466, 472, 551, 11, 2464, 6921, 337, 428, 21156, 260, 498, 291, 747, 472, 551, 1314, 13, 50914, 50914, 583, 498, 291, 747, 732, 721, 1314, 11, 1310, 321, 820, 751, 257, 707, 857, 466, 512, 512, 721, 281, 1066, 294, 1575, 562, 291, 434, 2891, 257, 1716, 13, 51314, 51314, 286, 519, 472, 472, 551, 300, 307, 534, 8263, 307, 498, 291, 434, 3579, 257, 21156, 260, 11, 456, 311, 257, 665, 2931, 300, 291, 434, 1364, 365, 512, 1333, 295, 31256, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.06655383110046387, "compression_ratio": 1.82421875, "no_caption_prob": 5.920342664467171e-05}, {"id": 447, "seek": 345500, "start": 3474.0, "end": 3483.0, "text": " I think one one thing that is really valuable is if you're writing a parser, there's a good chance that you're working with some sort of specification.", "tokens": [50364, 759, 291, 434, 2390, 257, 1716, 11, 291, 486, 1309, 385, 1780, 307, 588, 3163, 309, 365, 300, 294, 1575, 13, 50614, 50614, 286, 914, 11, 498, 291, 1466, 472, 551, 11, 2464, 6921, 337, 428, 21156, 260, 498, 291, 747, 472, 551, 1314, 13, 50914, 50914, 583, 498, 291, 747, 732, 721, 1314, 11, 1310, 321, 820, 751, 257, 707, 857, 466, 512, 512, 721, 281, 1066, 294, 1575, 562, 291, 434, 2891, 257, 1716, 13, 51314, 51314, 286, 519, 472, 472, 551, 300, 307, 534, 8263, 307, 498, 291, 434, 3579, 257, 21156, 260, 11, 456, 311, 257, 665, 2931, 300, 291, 434, 1364, 365, 512, 1333, 295, 31256, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.06655383110046387, "compression_ratio": 1.82421875, "no_caption_prob": 5.920342664467171e-05}, {"id": 448, "seek": 348300, "start": 3483.0, "end": 3490.0, "text": " And if if there's a specification, there may be a formal specification document for it. Those are very helpful.", "tokens": [50364, 400, 498, 498, 456, 311, 257, 31256, 11, 456, 815, 312, 257, 9860, 31256, 4166, 337, 309, 13, 3950, 366, 588, 4961, 13, 50714, 50714, 1743, 337, 337, 11691, 11, 456, 311, 512, 31256, 13, 708, 307, 309, 30, 50914, 50914, 663, 1230, 797, 30, 4688, 25042, 1649, 4550, 16, 13, 51214, 51214, 663, 311, 558, 13, 663, 311, 558, 13, 876, 11, 2086, 13, 663, 311, 558, 13, 663, 311, 264, 9860, 31256, 337, 300, 13, 51464, 51464, 865, 13, 407, 411, 337, 3934, 5093, 11, 456, 311, 746, 1219, 264, 2689, 1491, 31256, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.15017794609069823, "compression_ratio": 1.8009478672985781, "no_caption_prob": 3.169128831359558e-05}, {"id": 449, "seek": 348300, "start": 3490.0, "end": 3494.0, "text": " Like for for dates, there's some specification. What is it?", "tokens": [50364, 400, 498, 498, 456, 311, 257, 31256, 11, 456, 815, 312, 257, 9860, 31256, 4166, 337, 309, 13, 3950, 366, 588, 4961, 13, 50714, 50714, 1743, 337, 337, 11691, 11, 456, 311, 512, 31256, 13, 708, 307, 309, 30, 50914, 50914, 663, 1230, 797, 30, 4688, 25042, 1649, 4550, 16, 13, 51214, 51214, 663, 311, 558, 13, 663, 311, 558, 13, 876, 11, 2086, 13, 663, 311, 558, 13, 663, 311, 264, 9860, 31256, 337, 300, 13, 51464, 51464, 865, 13, 407, 411, 337, 3934, 5093, 11, 456, 311, 746, 1219, 264, 2689, 1491, 31256, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.15017794609069823, "compression_ratio": 1.8009478672985781, "no_caption_prob": 3.169128831359558e-05}, {"id": 450, "seek": 348300, "start": 3494.0, "end": 3500.0, "text": " That number again? 80 ISO 8601.", "tokens": [50364, 400, 498, 498, 456, 311, 257, 31256, 11, 456, 815, 312, 257, 9860, 31256, 4166, 337, 309, 13, 3950, 366, 588, 4961, 13, 50714, 50714, 1743, 337, 337, 11691, 11, 456, 311, 512, 31256, 13, 708, 307, 309, 30, 50914, 50914, 663, 1230, 797, 30, 4688, 25042, 1649, 4550, 16, 13, 51214, 51214, 663, 311, 558, 13, 663, 311, 558, 13, 876, 11, 2086, 13, 663, 311, 558, 13, 663, 311, 264, 9860, 31256, 337, 300, 13, 51464, 51464, 865, 13, 407, 411, 337, 3934, 5093, 11, 456, 311, 746, 1219, 264, 2689, 1491, 31256, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.15017794609069823, "compression_ratio": 1.8009478672985781, "no_caption_prob": 3.169128831359558e-05}, {"id": 451, "seek": 348300, "start": 3500.0, "end": 3505.0, "text": " That's right. That's right. Oh, yes. That's right. That's the formal specification for that.", "tokens": [50364, 400, 498, 498, 456, 311, 257, 31256, 11, 456, 815, 312, 257, 9860, 31256, 4166, 337, 309, 13, 3950, 366, 588, 4961, 13, 50714, 50714, 1743, 337, 337, 11691, 11, 456, 311, 512, 31256, 13, 708, 307, 309, 30, 50914, 50914, 663, 1230, 797, 30, 4688, 25042, 1649, 4550, 16, 13, 51214, 51214, 663, 311, 558, 13, 663, 311, 558, 13, 876, 11, 2086, 13, 663, 311, 558, 13, 663, 311, 264, 9860, 31256, 337, 300, 13, 51464, 51464, 865, 13, 407, 411, 337, 3934, 5093, 11, 456, 311, 746, 1219, 264, 2689, 1491, 31256, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.15017794609069823, "compression_ratio": 1.8009478672985781, "no_caption_prob": 3.169128831359558e-05}, {"id": 452, "seek": 348300, "start": 3505.0, "end": 3511.0, "text": " Yeah. So like for Markdown, there's something called the common mark specification.", "tokens": [50364, 400, 498, 498, 456, 311, 257, 31256, 11, 456, 815, 312, 257, 9860, 31256, 4166, 337, 309, 13, 3950, 366, 588, 4961, 13, 50714, 50714, 1743, 337, 337, 11691, 11, 456, 311, 512, 31256, 13, 708, 307, 309, 30, 50914, 50914, 663, 1230, 797, 30, 4688, 25042, 1649, 4550, 16, 13, 51214, 51214, 663, 311, 558, 13, 663, 311, 558, 13, 876, 11, 2086, 13, 663, 311, 558, 13, 663, 311, 264, 9860, 31256, 337, 300, 13, 51464, 51464, 865, 13, 407, 411, 337, 3934, 5093, 11, 456, 311, 746, 1219, 264, 2689, 1491, 31256, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.15017794609069823, "compression_ratio": 1.8009478672985781, "no_caption_prob": 3.169128831359558e-05}, {"id": 453, "seek": 351100, "start": 3511.0, "end": 3515.0, "text": " GitHub flavored Markdown is an extension of that that builds off of that.", "tokens": [50364, 23331, 37261, 3934, 5093, 307, 364, 10320, 295, 300, 300, 15182, 766, 295, 300, 13, 50564, 50564, 467, 311, 668, 588, 13239, 281, 312, 1075, 281, 574, 807, 257, 9860, 3855, 295, 309, 11, 293, 309, 311, 309, 311, 767, 588, 1194, 2277, 829, 1214, 13, 50914, 50914, 407, 309, 311, 309, 311, 257, 588, 4420, 7684, 13, 5135, 11, 337, 452, 1065, 3934, 5093, 21156, 260, 11, 286, 390, 1075, 281, 11009, 264, 1500, 14205, 490, 264, 3934, 82, 41, 50, 1716, 11, 51464, 51464, 597, 437, 436, 360, 307, 436, 747, 439, 295, 264, 3934, 5093, 27911, 293, 436, 767, 1190, 552, 382, 6921, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.09918674262794289, "compression_ratio": 1.7058823529411764, "no_caption_prob": 0.00014651894161943346}, {"id": 454, "seek": 351100, "start": 3515.0, "end": 3522.0, "text": " It's been very handy to be able to look through a formal description of it, and it's it's actually very thoughtfully put together.", "tokens": [50364, 23331, 37261, 3934, 5093, 307, 364, 10320, 295, 300, 300, 15182, 766, 295, 300, 13, 50564, 50564, 467, 311, 668, 588, 13239, 281, 312, 1075, 281, 574, 807, 257, 9860, 3855, 295, 309, 11, 293, 309, 311, 309, 311, 767, 588, 1194, 2277, 829, 1214, 13, 50914, 50914, 407, 309, 311, 309, 311, 257, 588, 4420, 7684, 13, 5135, 11, 337, 452, 1065, 3934, 5093, 21156, 260, 11, 286, 390, 1075, 281, 11009, 264, 1500, 14205, 490, 264, 3934, 82, 41, 50, 1716, 11, 51464, 51464, 597, 437, 436, 360, 307, 436, 747, 439, 295, 264, 3934, 5093, 27911, 293, 436, 767, 1190, 552, 382, 6921, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.09918674262794289, "compression_ratio": 1.7058823529411764, "no_caption_prob": 0.00014651894161943346}, {"id": 455, "seek": 351100, "start": 3522.0, "end": 3533.0, "text": " So it's it's a very useful resource. Actually, for my own Markdown parser, I was able to steal the test suite from the MarksJS project,", "tokens": [50364, 23331, 37261, 3934, 5093, 307, 364, 10320, 295, 300, 300, 15182, 766, 295, 300, 13, 50564, 50564, 467, 311, 668, 588, 13239, 281, 312, 1075, 281, 574, 807, 257, 9860, 3855, 295, 309, 11, 293, 309, 311, 309, 311, 767, 588, 1194, 2277, 829, 1214, 13, 50914, 50914, 407, 309, 311, 309, 311, 257, 588, 4420, 7684, 13, 5135, 11, 337, 452, 1065, 3934, 5093, 21156, 260, 11, 286, 390, 1075, 281, 11009, 264, 1500, 14205, 490, 264, 3934, 82, 41, 50, 1716, 11, 51464, 51464, 597, 437, 436, 360, 307, 436, 747, 439, 295, 264, 3934, 5093, 27911, 293, 436, 767, 1190, 552, 382, 6921, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.09918674262794289, "compression_ratio": 1.7058823529411764, "no_caption_prob": 0.00014651894161943346}, {"id": 456, "seek": 351100, "start": 3533.0, "end": 3540.0, "text": " which what they do is they take all of the Markdown specs and they actually run them as tests.", "tokens": [50364, 23331, 37261, 3934, 5093, 307, 364, 10320, 295, 300, 300, 15182, 766, 295, 300, 13, 50564, 50564, 467, 311, 668, 588, 13239, 281, 312, 1075, 281, 574, 807, 257, 9860, 3855, 295, 309, 11, 293, 309, 311, 309, 311, 767, 588, 1194, 2277, 829, 1214, 13, 50914, 50914, 407, 309, 311, 309, 311, 257, 588, 4420, 7684, 13, 5135, 11, 337, 452, 1065, 3934, 5093, 21156, 260, 11, 286, 390, 1075, 281, 11009, 264, 1500, 14205, 490, 264, 3934, 82, 41, 50, 1716, 11, 51464, 51464, 597, 437, 436, 360, 307, 436, 747, 439, 295, 264, 3934, 5093, 27911, 293, 436, 767, 1190, 552, 382, 6921, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.09918674262794289, "compression_ratio": 1.7058823529411764, "no_caption_prob": 0.00014651894161943346}, {"id": 457, "seek": 354000, "start": 3540.0, "end": 3548.0, "text": " So they say, OK, the Markdown spec gives us all these examples of this Markdown input should give this HTML output.", "tokens": [50364, 407, 436, 584, 11, 2264, 11, 264, 3934, 5093, 1608, 2709, 505, 439, 613, 5110, 295, 341, 3934, 5093, 4846, 820, 976, 341, 17995, 5598, 13, 50764, 50764, 286, 1190, 439, 295, 729, 5383, 295, 6921, 322, 28160, 40224, 311, 441, 3934, 5093, 11, 293, 309, 307, 7103, 13, 51064, 51064, 467, 307, 370, 1481, 13, 467, 311, 411, 6624, 385, 370, 709, 565, 13, 51214, 51214, 407, 764, 729, 3593, 498, 291, 393, 915, 552, 13, 400, 10486, 366, 11, 498, 291, 434, 3579, 257, 21156, 260, 337, 746, 11, 456, 366, 1391, 665, 3593, 337, 300, 13, 51614, 51614, 663, 311, 257, 869, 1081, 281, 722, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.07087133627022262, "compression_ratio": 1.6067415730337078, "no_caption_prob": 2.3552027414552867e-05}, {"id": 458, "seek": 354000, "start": 3548.0, "end": 3554.0, "text": " I run all of those thousands of tests on Dillon Kern's L Markdown, and it is excellent.", "tokens": [50364, 407, 436, 584, 11, 2264, 11, 264, 3934, 5093, 1608, 2709, 505, 439, 613, 5110, 295, 341, 3934, 5093, 4846, 820, 976, 341, 17995, 5598, 13, 50764, 50764, 286, 1190, 439, 295, 729, 5383, 295, 6921, 322, 28160, 40224, 311, 441, 3934, 5093, 11, 293, 309, 307, 7103, 13, 51064, 51064, 467, 307, 370, 1481, 13, 467, 311, 411, 6624, 385, 370, 709, 565, 13, 51214, 51214, 407, 764, 729, 3593, 498, 291, 393, 915, 552, 13, 400, 10486, 366, 11, 498, 291, 434, 3579, 257, 21156, 260, 337, 746, 11, 456, 366, 1391, 665, 3593, 337, 300, 13, 51614, 51614, 663, 311, 257, 869, 1081, 281, 722, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.07087133627022262, "compression_ratio": 1.6067415730337078, "no_caption_prob": 2.3552027414552867e-05}, {"id": 459, "seek": 354000, "start": 3554.0, "end": 3557.0, "text": " It is so nice. It's like saved me so much time.", "tokens": [50364, 407, 436, 584, 11, 2264, 11, 264, 3934, 5093, 1608, 2709, 505, 439, 613, 5110, 295, 341, 3934, 5093, 4846, 820, 976, 341, 17995, 5598, 13, 50764, 50764, 286, 1190, 439, 295, 729, 5383, 295, 6921, 322, 28160, 40224, 311, 441, 3934, 5093, 11, 293, 309, 307, 7103, 13, 51064, 51064, 467, 307, 370, 1481, 13, 467, 311, 411, 6624, 385, 370, 709, 565, 13, 51214, 51214, 407, 764, 729, 3593, 498, 291, 393, 915, 552, 13, 400, 10486, 366, 11, 498, 291, 434, 3579, 257, 21156, 260, 337, 746, 11, 456, 366, 1391, 665, 3593, 337, 300, 13, 51614, 51614, 663, 311, 257, 869, 1081, 281, 722, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.07087133627022262, "compression_ratio": 1.6067415730337078, "no_caption_prob": 2.3552027414552867e-05}, {"id": 460, "seek": 354000, "start": 3557.0, "end": 3565.0, "text": " So use those resources if you can find them. And chances are, if you're writing a parser for something, there are probably good resources for that.", "tokens": [50364, 407, 436, 584, 11, 2264, 11, 264, 3934, 5093, 1608, 2709, 505, 439, 613, 5110, 295, 341, 3934, 5093, 4846, 820, 976, 341, 17995, 5598, 13, 50764, 50764, 286, 1190, 439, 295, 729, 5383, 295, 6921, 322, 28160, 40224, 311, 441, 3934, 5093, 11, 293, 309, 307, 7103, 13, 51064, 51064, 467, 307, 370, 1481, 13, 467, 311, 411, 6624, 385, 370, 709, 565, 13, 51214, 51214, 407, 764, 729, 3593, 498, 291, 393, 915, 552, 13, 400, 10486, 366, 11, 498, 291, 434, 3579, 257, 21156, 260, 337, 746, 11, 456, 366, 1391, 665, 3593, 337, 300, 13, 51614, 51614, 663, 311, 257, 869, 1081, 281, 722, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.07087133627022262, "compression_ratio": 1.6067415730337078, "no_caption_prob": 2.3552027414552867e-05}, {"id": 461, "seek": 354000, "start": 3565.0, "end": 3567.0, "text": " That's a great place to start.", "tokens": [50364, 407, 436, 584, 11, 2264, 11, 264, 3934, 5093, 1608, 2709, 505, 439, 613, 5110, 295, 341, 3934, 5093, 4846, 820, 976, 341, 17995, 5598, 13, 50764, 50764, 286, 1190, 439, 295, 729, 5383, 295, 6921, 322, 28160, 40224, 311, 441, 3934, 5093, 11, 293, 309, 307, 7103, 13, 51064, 51064, 467, 307, 370, 1481, 13, 467, 311, 411, 6624, 385, 370, 709, 565, 13, 51214, 51214, 407, 764, 729, 3593, 498, 291, 393, 915, 552, 13, 400, 10486, 366, 11, 498, 291, 434, 3579, 257, 21156, 260, 337, 746, 11, 456, 366, 1391, 665, 3593, 337, 300, 13, 51614, 51614, 663, 311, 257, 869, 1081, 281, 722, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.07087133627022262, "compression_ratio": 1.6067415730337078, "no_caption_prob": 2.3552027414552867e-05}, {"id": 462, "seek": 356700, "start": 3567.0, "end": 3573.0, "text": " I think another thing that's very useful is just looking at other people's Elm parser code.", "tokens": [50364, 286, 519, 1071, 551, 300, 311, 588, 4420, 307, 445, 1237, 412, 661, 561, 311, 2699, 76, 21156, 260, 3089, 13, 50664, 50664, 821, 366, 2891, 281, 312, 544, 293, 544, 5110, 295, 341, 484, 456, 13, 50814, 50814, 407, 291, 393, 747, 257, 574, 412, 28160, 40224, 311, 441, 3934, 5093, 293, 321, 600, 1096, 257, 1621, 4309, 322, 300, 11, 886, 13, 51064, 51064, 407, 300, 311, 1071, 7684, 13, 51164, 51164, 407, 562, 291, 352, 281, 1029, 337, 854, 420, 360, 291, 362, 604, 3593, 281, 15379, 24467, 428, 2740, 30, 51614, 51614, 1171, 988, 13, 759, 291, 1029, 294, 264, 2699, 76, 37211, 11, 456, 486, 312, 1580, 281, 854, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.09037573197308708, "compression_ratio": 1.6666666666666667, "no_caption_prob": 0.00012930264347232878}, {"id": 463, "seek": 356700, "start": 3573.0, "end": 3576.0, "text": " There are starting to be more and more examples of this out there.", "tokens": [50364, 286, 519, 1071, 551, 300, 311, 588, 4420, 307, 445, 1237, 412, 661, 561, 311, 2699, 76, 21156, 260, 3089, 13, 50664, 50664, 821, 366, 2891, 281, 312, 544, 293, 544, 5110, 295, 341, 484, 456, 13, 50814, 50814, 407, 291, 393, 747, 257, 574, 412, 28160, 40224, 311, 441, 3934, 5093, 293, 321, 600, 1096, 257, 1621, 4309, 322, 300, 11, 886, 13, 51064, 51064, 407, 300, 311, 1071, 7684, 13, 51164, 51164, 407, 562, 291, 352, 281, 1029, 337, 854, 420, 360, 291, 362, 604, 3593, 281, 15379, 24467, 428, 2740, 30, 51614, 51614, 1171, 988, 13, 759, 291, 1029, 294, 264, 2699, 76, 37211, 11, 456, 486, 312, 1580, 281, 854, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.09037573197308708, "compression_ratio": 1.6666666666666667, "no_caption_prob": 0.00012930264347232878}, {"id": 464, "seek": 356700, "start": 3576.0, "end": 3581.0, "text": " So you can take a look at Dillon Kern's L Markdown and we've done a live stream on that, too.", "tokens": [50364, 286, 519, 1071, 551, 300, 311, 588, 4420, 307, 445, 1237, 412, 661, 561, 311, 2699, 76, 21156, 260, 3089, 13, 50664, 50664, 821, 366, 2891, 281, 312, 544, 293, 544, 5110, 295, 341, 484, 456, 13, 50814, 50814, 407, 291, 393, 747, 257, 574, 412, 28160, 40224, 311, 441, 3934, 5093, 293, 321, 600, 1096, 257, 1621, 4309, 322, 300, 11, 886, 13, 51064, 51064, 407, 300, 311, 1071, 7684, 13, 51164, 51164, 407, 562, 291, 352, 281, 1029, 337, 854, 420, 360, 291, 362, 604, 3593, 281, 15379, 24467, 428, 2740, 30, 51614, 51614, 1171, 988, 13, 759, 291, 1029, 294, 264, 2699, 76, 37211, 11, 456, 486, 312, 1580, 281, 854, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.09037573197308708, "compression_ratio": 1.6666666666666667, "no_caption_prob": 0.00012930264347232878}, {"id": 465, "seek": 356700, "start": 3581.0, "end": 3583.0, "text": " So that's another resource.", "tokens": [50364, 286, 519, 1071, 551, 300, 311, 588, 4420, 307, 445, 1237, 412, 661, 561, 311, 2699, 76, 21156, 260, 3089, 13, 50664, 50664, 821, 366, 2891, 281, 312, 544, 293, 544, 5110, 295, 341, 484, 456, 13, 50814, 50814, 407, 291, 393, 747, 257, 574, 412, 28160, 40224, 311, 441, 3934, 5093, 293, 321, 600, 1096, 257, 1621, 4309, 322, 300, 11, 886, 13, 51064, 51064, 407, 300, 311, 1071, 7684, 13, 51164, 51164, 407, 562, 291, 352, 281, 1029, 337, 854, 420, 360, 291, 362, 604, 3593, 281, 15379, 24467, 428, 2740, 30, 51614, 51614, 1171, 988, 13, 759, 291, 1029, 294, 264, 2699, 76, 37211, 11, 456, 486, 312, 1580, 281, 854, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.09037573197308708, "compression_ratio": 1.6666666666666667, "no_caption_prob": 0.00012930264347232878}, {"id": 466, "seek": 356700, "start": 3583.0, "end": 3592.0, "text": " So when you go to ask for help or do you have any resources to troubleshoot your problems?", "tokens": [50364, 286, 519, 1071, 551, 300, 311, 588, 4420, 307, 445, 1237, 412, 661, 561, 311, 2699, 76, 21156, 260, 3089, 13, 50664, 50664, 821, 366, 2891, 281, 312, 544, 293, 544, 5110, 295, 341, 484, 456, 13, 50814, 50814, 407, 291, 393, 747, 257, 574, 412, 28160, 40224, 311, 441, 3934, 5093, 293, 321, 600, 1096, 257, 1621, 4309, 322, 300, 11, 886, 13, 51064, 51064, 407, 300, 311, 1071, 7684, 13, 51164, 51164, 407, 562, 291, 352, 281, 1029, 337, 854, 420, 360, 291, 362, 604, 3593, 281, 15379, 24467, 428, 2740, 30, 51614, 51614, 1171, 988, 13, 759, 291, 1029, 294, 264, 2699, 76, 37211, 11, 456, 486, 312, 1580, 281, 854, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.09037573197308708, "compression_ratio": 1.6666666666666667, "no_caption_prob": 0.00012930264347232878}, {"id": 467, "seek": 356700, "start": 3592.0, "end": 3595.0, "text": " For sure. If you ask in the Elm Slack, there will be someone to help.", "tokens": [50364, 286, 519, 1071, 551, 300, 311, 588, 4420, 307, 445, 1237, 412, 661, 561, 311, 2699, 76, 21156, 260, 3089, 13, 50664, 50664, 821, 366, 2891, 281, 312, 544, 293, 544, 5110, 295, 341, 484, 456, 13, 50814, 50814, 407, 291, 393, 747, 257, 574, 412, 28160, 40224, 311, 441, 3934, 5093, 293, 321, 600, 1096, 257, 1621, 4309, 322, 300, 11, 886, 13, 51064, 51064, 407, 300, 311, 1071, 7684, 13, 51164, 51164, 407, 562, 291, 352, 281, 1029, 337, 854, 420, 360, 291, 362, 604, 3593, 281, 15379, 24467, 428, 2740, 30, 51614, 51614, 1171, 988, 13, 759, 291, 1029, 294, 264, 2699, 76, 37211, 11, 456, 486, 312, 1580, 281, 854, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.09037573197308708, "compression_ratio": 1.6666666666666667, "no_caption_prob": 0.00012930264347232878}, {"id": 468, "seek": 359500, "start": 3595.0, "end": 3598.0, "text": " If I see someone ask a parser question, I will help them.", "tokens": [50364, 759, 286, 536, 1580, 1029, 257, 21156, 260, 1168, 11, 286, 486, 854, 552, 13, 50514, 50514, 583, 286, 445, 2464, 3195, 295, 6921, 13, 467, 311, 406, 1858, 11, 457, 286, 445, 2464, 3195, 295, 6921, 293, 550, 286, 1066, 1382, 721, 1826, 264, 1500, 1320, 13, 50964, 50964, 286, 478, 406, 257, 4069, 587, 11, 508, 2032, 268, 11, 457, 286, 669, 665, 412, 3579, 6921, 13, 51164, 51164, 865, 11, 291, 434, 665, 412, 31422, 307, 437, 286, 2198, 11, 886, 13, 51364, 51364, 1042, 11, 309, 311, 406, 31422, 498, 291, 362, 6921, 13, 1396, 309, 311, 588, 4843, 293, 26201, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.10225449475375088, "compression_ratio": 1.7085201793721974, "no_caption_prob": 0.00014424983237404376}, {"id": 469, "seek": 359500, "start": 3598.0, "end": 3607.0, "text": " But I just write lots of tests. It's not easy, but I just write lots of tests and then I keep trying things until the test pass.", "tokens": [50364, 759, 286, 536, 1580, 1029, 257, 21156, 260, 1168, 11, 286, 486, 854, 552, 13, 50514, 50514, 583, 286, 445, 2464, 3195, 295, 6921, 13, 467, 311, 406, 1858, 11, 457, 286, 445, 2464, 3195, 295, 6921, 293, 550, 286, 1066, 1382, 721, 1826, 264, 1500, 1320, 13, 50964, 50964, 286, 478, 406, 257, 4069, 587, 11, 508, 2032, 268, 11, 457, 286, 669, 665, 412, 3579, 6921, 13, 51164, 51164, 865, 11, 291, 434, 665, 412, 31422, 307, 437, 286, 2198, 11, 886, 13, 51364, 51364, 1042, 11, 309, 311, 406, 31422, 498, 291, 362, 6921, 13, 1396, 309, 311, 588, 4843, 293, 26201, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.10225449475375088, "compression_ratio": 1.7085201793721974, "no_caption_prob": 0.00014424983237404376}, {"id": 470, "seek": 359500, "start": 3607.0, "end": 3611.0, "text": " I'm not a smart man, Jeroen, but I am good at writing tests.", "tokens": [50364, 759, 286, 536, 1580, 1029, 257, 21156, 260, 1168, 11, 286, 486, 854, 552, 13, 50514, 50514, 583, 286, 445, 2464, 3195, 295, 6921, 13, 467, 311, 406, 1858, 11, 457, 286, 445, 2464, 3195, 295, 6921, 293, 550, 286, 1066, 1382, 721, 1826, 264, 1500, 1320, 13, 50964, 50964, 286, 478, 406, 257, 4069, 587, 11, 508, 2032, 268, 11, 457, 286, 669, 665, 412, 3579, 6921, 13, 51164, 51164, 865, 11, 291, 434, 665, 412, 31422, 307, 437, 286, 2198, 11, 886, 13, 51364, 51364, 1042, 11, 309, 311, 406, 31422, 498, 291, 362, 6921, 13, 1396, 309, 311, 588, 4843, 293, 26201, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.10225449475375088, "compression_ratio": 1.7085201793721974, "no_caption_prob": 0.00014424983237404376}, {"id": 471, "seek": 359500, "start": 3611.0, "end": 3615.0, "text": " Yeah, you're good at hacking is what I heard, too.", "tokens": [50364, 759, 286, 536, 1580, 1029, 257, 21156, 260, 1168, 11, 286, 486, 854, 552, 13, 50514, 50514, 583, 286, 445, 2464, 3195, 295, 6921, 13, 467, 311, 406, 1858, 11, 457, 286, 445, 2464, 3195, 295, 6921, 293, 550, 286, 1066, 1382, 721, 1826, 264, 1500, 1320, 13, 50964, 50964, 286, 478, 406, 257, 4069, 587, 11, 508, 2032, 268, 11, 457, 286, 669, 665, 412, 3579, 6921, 13, 51164, 51164, 865, 11, 291, 434, 665, 412, 31422, 307, 437, 286, 2198, 11, 886, 13, 51364, 51364, 1042, 11, 309, 311, 406, 31422, 498, 291, 362, 6921, 13, 1396, 309, 311, 588, 4843, 293, 26201, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.10225449475375088, "compression_ratio": 1.7085201793721974, "no_caption_prob": 0.00014424983237404376}, {"id": 472, "seek": 359500, "start": 3615.0, "end": 3622.0, "text": " Well, it's not hacking if you have tests. Then it's very professional and refined.", "tokens": [50364, 759, 286, 536, 1580, 1029, 257, 21156, 260, 1168, 11, 286, 486, 854, 552, 13, 50514, 50514, 583, 286, 445, 2464, 3195, 295, 6921, 13, 467, 311, 406, 1858, 11, 457, 286, 445, 2464, 3195, 295, 6921, 293, 550, 286, 1066, 1382, 721, 1826, 264, 1500, 1320, 13, 50964, 50964, 286, 478, 406, 257, 4069, 587, 11, 508, 2032, 268, 11, 457, 286, 669, 665, 412, 3579, 6921, 13, 51164, 51164, 865, 11, 291, 434, 665, 412, 31422, 307, 437, 286, 2198, 11, 886, 13, 51364, 51364, 1042, 11, 309, 311, 406, 31422, 498, 291, 362, 6921, 13, 1396, 309, 311, 588, 4843, 293, 26201, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.10225449475375088, "compression_ratio": 1.7085201793721974, "no_caption_prob": 0.00014424983237404376}, {"id": 473, "seek": 362200, "start": 3622.0, "end": 3625.0, "text": " It's performance. That's what it is. Performance.", "tokens": [50364, 467, 311, 3389, 13, 663, 311, 437, 309, 307, 13, 25047, 13, 50514, 50514, 1079, 11, 309, 1669, 385, 2055, 13, 467, 1669, 385, 2055, 281, 362, 6921, 570, 31422, 307, 445, 572, 1019, 498, 291, 500, 380, 362, 6921, 13, 50864, 50864, 583, 445, 1382, 484, 257, 3840, 295, 4974, 721, 1826, 746, 1985, 365, 512, 6921, 3585, 291, 498, 309, 767, 1985, 13, 51164, 51164, 876, 11, 31522, 13, 5956, 309, 13, 5229, 356, 9628, 13, 51364, 51364, 865, 11, 300, 311, 534, 668, 437, 286, 600, 1096, 307, 445, 3720, 257, 688, 295, 6921, 293, 8932, 309, 484, 670, 565, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.08499952598854348, "compression_ratio": 1.6626984126984128, "no_caption_prob": 0.00015590613475069404}, {"id": 474, "seek": 362200, "start": 3625.0, "end": 3632.0, "text": " Yes, it makes me happy. It makes me happy to have tests because hacking is just no fun if you don't have tests.", "tokens": [50364, 467, 311, 3389, 13, 663, 311, 437, 309, 307, 13, 25047, 13, 50514, 50514, 1079, 11, 309, 1669, 385, 2055, 13, 467, 1669, 385, 2055, 281, 362, 6921, 570, 31422, 307, 445, 572, 1019, 498, 291, 500, 380, 362, 6921, 13, 50864, 50864, 583, 445, 1382, 484, 257, 3840, 295, 4974, 721, 1826, 746, 1985, 365, 512, 6921, 3585, 291, 498, 309, 767, 1985, 13, 51164, 51164, 876, 11, 31522, 13, 5956, 309, 13, 5229, 356, 9628, 13, 51364, 51364, 865, 11, 300, 311, 534, 668, 437, 286, 600, 1096, 307, 445, 3720, 257, 688, 295, 6921, 293, 8932, 309, 484, 670, 565, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.08499952598854348, "compression_ratio": 1.6626984126984128, "no_caption_prob": 0.00015590613475069404}, {"id": 475, "seek": 362200, "start": 3632.0, "end": 3638.0, "text": " But just trying out a bunch of random things until something works with some tests telling you if it actually works.", "tokens": [50364, 467, 311, 3389, 13, 663, 311, 437, 309, 307, 13, 25047, 13, 50514, 50514, 1079, 11, 309, 1669, 385, 2055, 13, 467, 1669, 385, 2055, 281, 362, 6921, 570, 31422, 307, 445, 572, 1019, 498, 291, 500, 380, 362, 6921, 13, 50864, 50864, 583, 445, 1382, 484, 257, 3840, 295, 4974, 721, 1826, 746, 1985, 365, 512, 6921, 3585, 291, 498, 309, 767, 1985, 13, 51164, 51164, 876, 11, 31522, 13, 5956, 309, 13, 5229, 356, 9628, 13, 51364, 51364, 865, 11, 300, 311, 534, 668, 437, 286, 600, 1096, 307, 445, 3720, 257, 688, 295, 6921, 293, 8932, 309, 484, 670, 565, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.08499952598854348, "compression_ratio": 1.6626984126984128, "no_caption_prob": 0.00015590613475069404}, {"id": 476, "seek": 362200, "start": 3638.0, "end": 3642.0, "text": " Oh, bliss. Love it. Highly recommended.", "tokens": [50364, 467, 311, 3389, 13, 663, 311, 437, 309, 307, 13, 25047, 13, 50514, 50514, 1079, 11, 309, 1669, 385, 2055, 13, 467, 1669, 385, 2055, 281, 362, 6921, 570, 31422, 307, 445, 572, 1019, 498, 291, 500, 380, 362, 6921, 13, 50864, 50864, 583, 445, 1382, 484, 257, 3840, 295, 4974, 721, 1826, 746, 1985, 365, 512, 6921, 3585, 291, 498, 309, 767, 1985, 13, 51164, 51164, 876, 11, 31522, 13, 5956, 309, 13, 5229, 356, 9628, 13, 51364, 51364, 865, 11, 300, 311, 534, 668, 437, 286, 600, 1096, 307, 445, 3720, 257, 688, 295, 6921, 293, 8932, 309, 484, 670, 565, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.08499952598854348, "compression_ratio": 1.6626984126984128, "no_caption_prob": 0.00015590613475069404}, {"id": 477, "seek": 362200, "start": 3642.0, "end": 3648.0, "text": " Yeah, that's really been what I've done is just written a lot of tests and figured it out over time.", "tokens": [50364, 467, 311, 3389, 13, 663, 311, 437, 309, 307, 13, 25047, 13, 50514, 50514, 1079, 11, 309, 1669, 385, 2055, 13, 467, 1669, 385, 2055, 281, 362, 6921, 570, 31422, 307, 445, 572, 1019, 498, 291, 500, 380, 362, 6921, 13, 50864, 50864, 583, 445, 1382, 484, 257, 3840, 295, 4974, 721, 1826, 746, 1985, 365, 512, 6921, 3585, 291, 498, 309, 767, 1985, 13, 51164, 51164, 876, 11, 31522, 13, 5956, 309, 13, 5229, 356, 9628, 13, 51364, 51364, 865, 11, 300, 311, 534, 668, 437, 286, 600, 1096, 307, 445, 3720, 257, 688, 295, 6921, 293, 8932, 309, 484, 670, 565, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.08499952598854348, "compression_ratio": 1.6626984126984128, "no_caption_prob": 0.00015590613475069404}, {"id": 478, "seek": 364800, "start": 3648.0, "end": 3657.0, "text": " There are some helpful resources in the Elm Parser repository that kind of explain, give you like a conceptual overview of a few things.", "tokens": [50364, 821, 366, 512, 4961, 3593, 294, 264, 2699, 76, 49691, 260, 25841, 300, 733, 295, 2903, 11, 976, 291, 411, 257, 24106, 12492, 295, 257, 1326, 721, 13, 50814, 50814, 407, 300, 311, 257, 665, 551, 281, 574, 412, 13, 467, 733, 295, 6686, 466, 646, 19466, 712, 293, 729, 3467, 295, 721, 13, 51114, 51114, 865, 11, 291, 393, 841, 300, 22613, 2729, 309, 1596, 257, 857, 295, 959, 13, 51314, 51314, 634, 630, 13, 467, 311, 534, 731, 3720, 13, 51414, 51414, 286, 576, 754, 584, 300, 309, 311, 472, 295, 264, 1151, 721, 466, 2699, 76, 767, 307, 264, 2699, 76, 49691, 260, 1716, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.07404277154377528, "compression_ratio": 1.6206896551724137, "no_caption_prob": 4.610211180988699e-05}, {"id": 479, "seek": 364800, "start": 3657.0, "end": 3663.0, "text": " So that's a good thing to look at. It kind of talks about backtrackable and those types of things.", "tokens": [50364, 821, 366, 512, 4961, 3593, 294, 264, 2699, 76, 49691, 260, 25841, 300, 733, 295, 2903, 11, 976, 291, 411, 257, 24106, 12492, 295, 257, 1326, 721, 13, 50814, 50814, 407, 300, 311, 257, 665, 551, 281, 574, 412, 13, 467, 733, 295, 6686, 466, 646, 19466, 712, 293, 729, 3467, 295, 721, 13, 51114, 51114, 865, 11, 291, 393, 841, 300, 22613, 2729, 309, 1596, 257, 857, 295, 959, 13, 51314, 51314, 634, 630, 13, 467, 311, 534, 731, 3720, 13, 51414, 51414, 286, 576, 754, 584, 300, 309, 311, 472, 295, 264, 1151, 721, 466, 2699, 76, 767, 307, 264, 2699, 76, 49691, 260, 1716, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.07404277154377528, "compression_ratio": 1.6206896551724137, "no_caption_prob": 4.610211180988699e-05}, {"id": 480, "seek": 364800, "start": 3663.0, "end": 3667.0, "text": " Yeah, you can feel that Evan gave it quite a bit of love.", "tokens": [50364, 821, 366, 512, 4961, 3593, 294, 264, 2699, 76, 49691, 260, 25841, 300, 733, 295, 2903, 11, 976, 291, 411, 257, 24106, 12492, 295, 257, 1326, 721, 13, 50814, 50814, 407, 300, 311, 257, 665, 551, 281, 574, 412, 13, 467, 733, 295, 6686, 466, 646, 19466, 712, 293, 729, 3467, 295, 721, 13, 51114, 51114, 865, 11, 291, 393, 841, 300, 22613, 2729, 309, 1596, 257, 857, 295, 959, 13, 51314, 51314, 634, 630, 13, 467, 311, 534, 731, 3720, 13, 51414, 51414, 286, 576, 754, 584, 300, 309, 311, 472, 295, 264, 1151, 721, 466, 2699, 76, 767, 307, 264, 2699, 76, 49691, 260, 1716, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.07404277154377528, "compression_ratio": 1.6206896551724137, "no_caption_prob": 4.610211180988699e-05}, {"id": 481, "seek": 364800, "start": 3667.0, "end": 3669.0, "text": " He did. It's really well written.", "tokens": [50364, 821, 366, 512, 4961, 3593, 294, 264, 2699, 76, 49691, 260, 25841, 300, 733, 295, 2903, 11, 976, 291, 411, 257, 24106, 12492, 295, 257, 1326, 721, 13, 50814, 50814, 407, 300, 311, 257, 665, 551, 281, 574, 412, 13, 467, 733, 295, 6686, 466, 646, 19466, 712, 293, 729, 3467, 295, 721, 13, 51114, 51114, 865, 11, 291, 393, 841, 300, 22613, 2729, 309, 1596, 257, 857, 295, 959, 13, 51314, 51314, 634, 630, 13, 467, 311, 534, 731, 3720, 13, 51414, 51414, 286, 576, 754, 584, 300, 309, 311, 472, 295, 264, 1151, 721, 466, 2699, 76, 767, 307, 264, 2699, 76, 49691, 260, 1716, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.07404277154377528, "compression_ratio": 1.6206896551724137, "no_caption_prob": 4.610211180988699e-05}, {"id": 482, "seek": 364800, "start": 3669.0, "end": 3676.0, "text": " I would even say that it's one of the best things about Elm actually is the Elm Parser project.", "tokens": [50364, 821, 366, 512, 4961, 3593, 294, 264, 2699, 76, 49691, 260, 25841, 300, 733, 295, 2903, 11, 976, 291, 411, 257, 24106, 12492, 295, 257, 1326, 721, 13, 50814, 50814, 407, 300, 311, 257, 665, 551, 281, 574, 412, 13, 467, 733, 295, 6686, 466, 646, 19466, 712, 293, 729, 3467, 295, 721, 13, 51114, 51114, 865, 11, 291, 393, 841, 300, 22613, 2729, 309, 1596, 257, 857, 295, 959, 13, 51314, 51314, 634, 630, 13, 467, 311, 534, 731, 3720, 13, 51414, 51414, 286, 576, 754, 584, 300, 309, 311, 472, 295, 264, 1151, 721, 466, 2699, 76, 767, 307, 264, 2699, 76, 49691, 260, 1716, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.07404277154377528, "compression_ratio": 1.6206896551724137, "no_caption_prob": 4.610211180988699e-05}, {"id": 483, "seek": 367600, "start": 3676.0, "end": 3679.0, "text": " So if you love Elm, try the parser.", "tokens": [50364, 407, 498, 291, 959, 2699, 76, 11, 853, 264, 21156, 260, 13, 50514, 50514, 865, 11, 309, 9870, 493, 512, 534, 1627, 12178, 13, 50664, 50664, 400, 286, 519, 300, 456, 311, 668, 11, 382, 365, 867, 295, 264, 534, 3715, 721, 466, 2699, 76, 11, 291, 536, 341, 4111, 294, 2699, 76, 13, 51114, 51114, 400, 550, 456, 311, 341, 21571, 8504, 516, 322, 294, 264, 11311, 13, 51314, 51314, 400, 286, 536, 2699, 76, 49691, 260, 382, 885, 264, 912, 551, 300, 445, 7829, 341, 1901, 337, 8504, 689, 321, 536, 561, 884, 512, 534, 1627, 721, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.06360038885703453, "compression_ratio": 1.7142857142857142, "no_caption_prob": 4.198459646431729e-05}, {"id": 484, "seek": 367600, "start": 3679.0, "end": 3682.0, "text": " Yeah, it opens up some really cool possibilities.", "tokens": [50364, 407, 498, 291, 959, 2699, 76, 11, 853, 264, 21156, 260, 13, 50514, 50514, 865, 11, 309, 9870, 493, 512, 534, 1627, 12178, 13, 50664, 50664, 400, 286, 519, 300, 456, 311, 668, 11, 382, 365, 867, 295, 264, 534, 3715, 721, 466, 2699, 76, 11, 291, 536, 341, 4111, 294, 2699, 76, 13, 51114, 51114, 400, 550, 456, 311, 341, 21571, 8504, 516, 322, 294, 264, 11311, 13, 51314, 51314, 400, 286, 536, 2699, 76, 49691, 260, 382, 885, 264, 912, 551, 300, 445, 7829, 341, 1901, 337, 8504, 689, 321, 536, 561, 884, 512, 534, 1627, 721, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.06360038885703453, "compression_ratio": 1.7142857142857142, "no_caption_prob": 4.198459646431729e-05}, {"id": 485, "seek": 367600, "start": 3682.0, "end": 3691.0, "text": " And I think that there's been, as with many of the really wonderful things about Elm, you see this feature in Elm.", "tokens": [50364, 407, 498, 291, 959, 2699, 76, 11, 853, 264, 21156, 260, 13, 50514, 50514, 865, 11, 309, 9870, 493, 512, 534, 1627, 12178, 13, 50664, 50664, 400, 286, 519, 300, 456, 311, 668, 11, 382, 365, 867, 295, 264, 534, 3715, 721, 466, 2699, 76, 11, 291, 536, 341, 4111, 294, 2699, 76, 13, 51114, 51114, 400, 550, 456, 311, 341, 21571, 8504, 516, 322, 294, 264, 11311, 13, 51314, 51314, 400, 286, 536, 2699, 76, 49691, 260, 382, 885, 264, 912, 551, 300, 445, 7829, 341, 1901, 337, 8504, 689, 321, 536, 561, 884, 512, 534, 1627, 721, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.06360038885703453, "compression_ratio": 1.7142857142857142, "no_caption_prob": 4.198459646431729e-05}, {"id": 486, "seek": 367600, "start": 3691.0, "end": 3695.0, "text": " And then there's this vibrant innovation going on in the ecosystem.", "tokens": [50364, 407, 498, 291, 959, 2699, 76, 11, 853, 264, 21156, 260, 13, 50514, 50514, 865, 11, 309, 9870, 493, 512, 534, 1627, 12178, 13, 50664, 50664, 400, 286, 519, 300, 456, 311, 668, 11, 382, 365, 867, 295, 264, 534, 3715, 721, 466, 2699, 76, 11, 291, 536, 341, 4111, 294, 2699, 76, 13, 51114, 51114, 400, 550, 456, 311, 341, 21571, 8504, 516, 322, 294, 264, 11311, 13, 51314, 51314, 400, 286, 536, 2699, 76, 49691, 260, 382, 885, 264, 912, 551, 300, 445, 7829, 341, 1901, 337, 8504, 689, 321, 536, 561, 884, 512, 534, 1627, 721, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.06360038885703453, "compression_ratio": 1.7142857142857142, "no_caption_prob": 4.198459646431729e-05}, {"id": 487, "seek": 367600, "start": 3695.0, "end": 3703.0, "text": " And I see Elm Parser as being the same thing that just creates this space for innovation where we see people doing some really cool things.", "tokens": [50364, 407, 498, 291, 959, 2699, 76, 11, 853, 264, 21156, 260, 13, 50514, 50514, 865, 11, 309, 9870, 493, 512, 534, 1627, 12178, 13, 50664, 50664, 400, 286, 519, 300, 456, 311, 668, 11, 382, 365, 867, 295, 264, 534, 3715, 721, 466, 2699, 76, 11, 291, 536, 341, 4111, 294, 2699, 76, 13, 51114, 51114, 400, 550, 456, 311, 341, 21571, 8504, 516, 322, 294, 264, 11311, 13, 51314, 51314, 400, 286, 536, 2699, 76, 49691, 260, 382, 885, 264, 912, 551, 300, 445, 7829, 341, 1901, 337, 8504, 689, 321, 536, 561, 884, 512, 534, 1627, 721, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.06360038885703453, "compression_ratio": 1.7142857142857142, "no_caption_prob": 4.198459646431729e-05}, {"id": 488, "seek": 370300, "start": 3703.0, "end": 3708.0, "text": " Yeah, you couldn't have Elm pages without the Elm Markdown Parser.", "tokens": [50364, 865, 11, 291, 2809, 380, 362, 2699, 76, 7183, 1553, 264, 2699, 76, 3934, 5093, 49691, 260, 13, 50614, 50614, 400, 286, 2809, 380, 362, 2699, 76, 19954, 1553, 264, 2699, 76, 3902, 580, 2797, 49691, 260, 13, 50764, 50764, 440, 2699, 76, 3902, 580, 2797, 49691, 260, 13, 7587, 13, 50864, 50864, 663, 309, 311, 5625, 493, 512, 588, 1627, 721, 13, 51064, 51064, 2699, 76, 7183, 576, 920, 11, 286, 576, 920, 915, 309, 4420, 754, 498, 309, 390, 445, 1228, 264, 2699, 76, 12514, 284, 763, 3934, 5093, 13, 51414, 51414], "temperature": 0.0, "avg_logprob": -0.11202422777811687, "compression_ratio": 1.7333333333333334, "no_caption_prob": 0.0001465126551920548}, {"id": 489, "seek": 370300, "start": 3708.0, "end": 3711.0, "text": " And I couldn't have Elm Review without the Elm Syntax Parser.", "tokens": [50364, 865, 11, 291, 2809, 380, 362, 2699, 76, 7183, 1553, 264, 2699, 76, 3934, 5093, 49691, 260, 13, 50614, 50614, 400, 286, 2809, 380, 362, 2699, 76, 19954, 1553, 264, 2699, 76, 3902, 580, 2797, 49691, 260, 13, 50764, 50764, 440, 2699, 76, 3902, 580, 2797, 49691, 260, 13, 7587, 13, 50864, 50864, 663, 309, 311, 5625, 493, 512, 588, 1627, 721, 13, 51064, 51064, 2699, 76, 7183, 576, 920, 11, 286, 576, 920, 915, 309, 4420, 754, 498, 309, 390, 445, 1228, 264, 2699, 76, 12514, 284, 763, 3934, 5093, 13, 51414, 51414], "temperature": 0.0, "avg_logprob": -0.11202422777811687, "compression_ratio": 1.7333333333333334, "no_caption_prob": 0.0001465126551920548}, {"id": 490, "seek": 370300, "start": 3711.0, "end": 3713.0, "text": " The Elm Syntax Parser. Exactly.", "tokens": [50364, 865, 11, 291, 2809, 380, 362, 2699, 76, 7183, 1553, 264, 2699, 76, 3934, 5093, 49691, 260, 13, 50614, 50614, 400, 286, 2809, 380, 362, 2699, 76, 19954, 1553, 264, 2699, 76, 3902, 580, 2797, 49691, 260, 13, 50764, 50764, 440, 2699, 76, 3902, 580, 2797, 49691, 260, 13, 7587, 13, 50864, 50864, 663, 309, 311, 5625, 493, 512, 588, 1627, 721, 13, 51064, 51064, 2699, 76, 7183, 576, 920, 11, 286, 576, 920, 915, 309, 4420, 754, 498, 309, 390, 445, 1228, 264, 2699, 76, 12514, 284, 763, 3934, 5093, 13, 51414, 51414], "temperature": 0.0, "avg_logprob": -0.11202422777811687, "compression_ratio": 1.7333333333333334, "no_caption_prob": 0.0001465126551920548}, {"id": 491, "seek": 370300, "start": 3713.0, "end": 3717.0, "text": " That it's opened up some very cool things.", "tokens": [50364, 865, 11, 291, 2809, 380, 362, 2699, 76, 7183, 1553, 264, 2699, 76, 3934, 5093, 49691, 260, 13, 50614, 50614, 400, 286, 2809, 380, 362, 2699, 76, 19954, 1553, 264, 2699, 76, 3902, 580, 2797, 49691, 260, 13, 50764, 50764, 440, 2699, 76, 3902, 580, 2797, 49691, 260, 13, 7587, 13, 50864, 50864, 663, 309, 311, 5625, 493, 512, 588, 1627, 721, 13, 51064, 51064, 2699, 76, 7183, 576, 920, 11, 286, 576, 920, 915, 309, 4420, 754, 498, 309, 390, 445, 1228, 264, 2699, 76, 12514, 284, 763, 3934, 5093, 13, 51414, 51414], "temperature": 0.0, "avg_logprob": -0.11202422777811687, "compression_ratio": 1.7333333333333334, "no_caption_prob": 0.0001465126551920548}, {"id": 492, "seek": 370300, "start": 3717.0, "end": 3724.0, "text": " Elm pages would still, I would still find it useful even if it was just using the Elm Explorations Markdown.", "tokens": [50364, 865, 11, 291, 2809, 380, 362, 2699, 76, 7183, 1553, 264, 2699, 76, 3934, 5093, 49691, 260, 13, 50614, 50614, 400, 286, 2809, 380, 362, 2699, 76, 19954, 1553, 264, 2699, 76, 3902, 580, 2797, 49691, 260, 13, 50764, 50764, 440, 2699, 76, 3902, 580, 2797, 49691, 260, 13, 7587, 13, 50864, 50864, 663, 309, 311, 5625, 493, 512, 588, 1627, 721, 13, 51064, 51064, 2699, 76, 7183, 576, 920, 11, 286, 576, 920, 915, 309, 4420, 754, 498, 309, 390, 445, 1228, 264, 2699, 76, 12514, 284, 763, 3934, 5093, 13, 51414, 51414], "temperature": 0.0, "avg_logprob": -0.11202422777811687, "compression_ratio": 1.7333333333333334, "no_caption_prob": 0.0001465126551920548}, {"id": 493, "seek": 372400, "start": 3724.0, "end": 3738.0, "text": " But you're right that I built my Markdown Parser because I wanted to do certain things in the context of like a static site where I wanted to render highly custom views in my Markdown.", "tokens": [50364, 583, 291, 434, 558, 300, 286, 3094, 452, 3934, 5093, 49691, 260, 570, 286, 1415, 281, 360, 1629, 721, 294, 264, 4319, 295, 411, 257, 13437, 3621, 689, 286, 1415, 281, 15529, 5405, 2375, 6809, 294, 452, 3934, 5093, 13, 51064, 51064, 407, 11, 1338, 11, 574, 412, 5110, 13, 51214, 51214], "temperature": 0.0, "avg_logprob": -0.07222333219316271, "compression_ratio": 1.394736842105263, "no_caption_prob": 2.2472346245194785e-05}, {"id": 494, "seek": 372400, "start": 3738.0, "end": 3741.0, "text": " So, yeah, look at examples.", "tokens": [50364, 583, 291, 434, 558, 300, 286, 3094, 452, 3934, 5093, 49691, 260, 570, 286, 1415, 281, 360, 1629, 721, 294, 264, 4319, 295, 411, 257, 13437, 3621, 689, 286, 1415, 281, 15529, 5405, 2375, 6809, 294, 452, 3934, 5093, 13, 51064, 51064, 407, 11, 1338, 11, 574, 412, 5110, 13, 51214, 51214], "temperature": 0.0, "avg_logprob": -0.07222333219316271, "compression_ratio": 1.394736842105263, "no_caption_prob": 2.2472346245194785e-05}, {"id": 495, "seek": 374100, "start": 3741.0, "end": 3754.0, "text": " Martin Janacek has his Elm in Elm compiler, which is not fully completed, still a work in progress, but that's something to check out and you can look at his talk on that at Elm Europe.", "tokens": [50364, 9184, 4956, 617, 74, 575, 702, 2699, 76, 294, 2699, 76, 31958, 11, 597, 307, 406, 4498, 7365, 11, 920, 257, 589, 294, 4205, 11, 457, 300, 311, 746, 281, 1520, 484, 293, 291, 393, 574, 412, 702, 751, 322, 300, 412, 2699, 76, 3315, 13, 51014, 51014, 865, 13, 51064, 51064, 7397, 23765, 355, 575, 257, 534, 1627, 1716, 1219, 2699, 76, 3934, 1010, 11, 597, 307, 309, 311, 588, 819, 490, 3934, 5093, 294, 300, 3934, 5093, 307, 4761, 281, 1128, 3061, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.08965116136529472, "compression_ratio": 1.5529953917050692, "no_caption_prob": 0.00023046007845550776}, {"id": 496, "seek": 374100, "start": 3754.0, "end": 3755.0, "text": " Yeah.", "tokens": [50364, 9184, 4956, 617, 74, 575, 702, 2699, 76, 294, 2699, 76, 31958, 11, 597, 307, 406, 4498, 7365, 11, 920, 257, 589, 294, 4205, 11, 457, 300, 311, 746, 281, 1520, 484, 293, 291, 393, 574, 412, 702, 751, 322, 300, 412, 2699, 76, 3315, 13, 51014, 51014, 865, 13, 51064, 51064, 7397, 23765, 355, 575, 257, 534, 1627, 1716, 1219, 2699, 76, 3934, 1010, 11, 597, 307, 309, 311, 588, 819, 490, 3934, 5093, 294, 300, 3934, 5093, 307, 4761, 281, 1128, 3061, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.08965116136529472, "compression_ratio": 1.5529953917050692, "no_caption_prob": 0.00023046007845550776}, {"id": 497, "seek": 374100, "start": 3755.0, "end": 3763.0, "text": " Matt Griffith has a really cool project called Elm Markup, which is it's very different from Markdown in that Markdown is designed to never fail.", "tokens": [50364, 9184, 4956, 617, 74, 575, 702, 2699, 76, 294, 2699, 76, 31958, 11, 597, 307, 406, 4498, 7365, 11, 920, 257, 589, 294, 4205, 11, 457, 300, 311, 746, 281, 1520, 484, 293, 291, 393, 574, 412, 702, 751, 322, 300, 412, 2699, 76, 3315, 13, 51014, 51014, 865, 13, 51064, 51064, 7397, 23765, 355, 575, 257, 534, 1627, 1716, 1219, 2699, 76, 3934, 1010, 11, 597, 307, 309, 311, 588, 819, 490, 3934, 5093, 294, 300, 3934, 5093, 307, 4761, 281, 1128, 3061, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.08965116136529472, "compression_ratio": 1.5529953917050692, "no_caption_prob": 0.00023046007845550776}, {"id": 498, "seek": 376300, "start": 3763.0, "end": 3772.0, "text": " Elm Markup is designed to give you a well defined syntax that will fail in specific cases with nice error messages.", "tokens": [50364, 2699, 76, 3934, 1010, 307, 4761, 281, 976, 291, 257, 731, 7642, 28431, 300, 486, 3061, 294, 2685, 3331, 365, 1481, 6713, 7897, 13, 50814, 50814, 407, 7397, 575, 767, 1096, 512, 534, 1627, 1507, 365, 264, 21156, 260, 456, 281, 1293, 976, 291, 588, 1481, 6713, 7897, 13, 51164, 51164, 663, 311, 767, 257, 869, 25841, 281, 574, 412, 498, 291, 528, 281, 1466, 577, 281, 360, 13600, 11, 40189, 6713, 7897, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.0331422610160632, "compression_ratio": 1.6764705882352942, "no_caption_prob": 5.6491826398996636e-05}, {"id": 499, "seek": 376300, "start": 3772.0, "end": 3779.0, "text": " So Matt has actually done some really cool stuff with the parser there to both give you very nice error messages.", "tokens": [50364, 2699, 76, 3934, 1010, 307, 4761, 281, 976, 291, 257, 731, 7642, 28431, 300, 486, 3061, 294, 2685, 3331, 365, 1481, 6713, 7897, 13, 50814, 50814, 407, 7397, 575, 767, 1096, 512, 534, 1627, 1507, 365, 264, 21156, 260, 456, 281, 1293, 976, 291, 588, 1481, 6713, 7897, 13, 51164, 51164, 663, 311, 767, 257, 869, 25841, 281, 574, 412, 498, 291, 528, 281, 1466, 577, 281, 360, 13600, 11, 40189, 6713, 7897, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.0331422610160632, "compression_ratio": 1.6764705882352942, "no_caption_prob": 5.6491826398996636e-05}, {"id": 500, "seek": 376300, "start": 3779.0, "end": 3785.0, "text": " That's actually a great repository to look at if you want to learn how to do precise, expressive error messages.", "tokens": [50364, 2699, 76, 3934, 1010, 307, 4761, 281, 976, 291, 257, 731, 7642, 28431, 300, 486, 3061, 294, 2685, 3331, 365, 1481, 6713, 7897, 13, 50814, 50814, 407, 7397, 575, 767, 1096, 512, 534, 1627, 1507, 365, 264, 21156, 260, 456, 281, 1293, 976, 291, 588, 1481, 6713, 7897, 13, 51164, 51164, 663, 311, 767, 257, 869, 25841, 281, 574, 412, 498, 291, 528, 281, 1466, 577, 281, 360, 13600, 11, 40189, 6713, 7897, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.0331422610160632, "compression_ratio": 1.6764705882352942, "no_caption_prob": 5.6491826398996636e-05}, {"id": 501, "seek": 378500, "start": 3785.0, "end": 3798.0, "text": " But he also recovers from those errors gracefully so you can have partially rendered views so it can recover from errors and still present you with something when you're in like dev mode.", "tokens": [50364, 583, 415, 611, 7759, 840, 490, 729, 13603, 10042, 2277, 370, 291, 393, 362, 18886, 28748, 6809, 370, 309, 393, 8114, 490, 13603, 293, 920, 1974, 291, 365, 746, 562, 291, 434, 294, 411, 1905, 4391, 13, 51014, 51014, 407, 291, 658, 257, 21156, 260, 293, 13603, 13, 51114, 51114, 865, 11, 415, 2709, 291, 257, 21156, 260, 11, 1481, 13603, 293, 7441, 23368, 13, 51464, 51464, 407, 309, 311, 257, 7441, 45525, 13, 51564, 51564, 49691, 260, 365, 1481, 13603, 11, 597, 307, 588, 1627, 13, 51714, 51714, 286, 2748, 1940, 257, 574, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.0906804595330749, "compression_ratio": 1.6995515695067265, "no_caption_prob": 5.56183404114563e-05}, {"id": 502, "seek": 378500, "start": 3798.0, "end": 3800.0, "text": " So you got a parser and errors.", "tokens": [50364, 583, 415, 611, 7759, 840, 490, 729, 13603, 10042, 2277, 370, 291, 393, 362, 18886, 28748, 6809, 370, 309, 393, 8114, 490, 13603, 293, 920, 1974, 291, 365, 746, 562, 291, 434, 294, 411, 1905, 4391, 13, 51014, 51014, 407, 291, 658, 257, 21156, 260, 293, 13603, 13, 51114, 51114, 865, 11, 415, 2709, 291, 257, 21156, 260, 11, 1481, 13603, 293, 7441, 23368, 13, 51464, 51464, 407, 309, 311, 257, 7441, 45525, 13, 51564, 51564, 49691, 260, 365, 1481, 13603, 11, 597, 307, 588, 1627, 13, 51714, 51714, 286, 2748, 1940, 257, 574, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.0906804595330749, "compression_ratio": 1.6995515695067265, "no_caption_prob": 5.56183404114563e-05}, {"id": 503, "seek": 378500, "start": 3800.0, "end": 3807.0, "text": " Yeah, he gives you a parser, nice errors and fault tolerance.", "tokens": [50364, 583, 415, 611, 7759, 840, 490, 729, 13603, 10042, 2277, 370, 291, 393, 362, 18886, 28748, 6809, 370, 309, 393, 8114, 490, 13603, 293, 920, 1974, 291, 365, 746, 562, 291, 434, 294, 411, 1905, 4391, 13, 51014, 51014, 407, 291, 658, 257, 21156, 260, 293, 13603, 13, 51114, 51114, 865, 11, 415, 2709, 291, 257, 21156, 260, 11, 1481, 13603, 293, 7441, 23368, 13, 51464, 51464, 407, 309, 311, 257, 7441, 45525, 13, 51564, 51564, 49691, 260, 365, 1481, 13603, 11, 597, 307, 588, 1627, 13, 51714, 51714, 286, 2748, 1940, 257, 574, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.0906804595330749, "compression_ratio": 1.6995515695067265, "no_caption_prob": 5.56183404114563e-05}, {"id": 504, "seek": 378500, "start": 3807.0, "end": 3809.0, "text": " So it's a fault tolerant.", "tokens": [50364, 583, 415, 611, 7759, 840, 490, 729, 13603, 10042, 2277, 370, 291, 393, 362, 18886, 28748, 6809, 370, 309, 393, 8114, 490, 13603, 293, 920, 1974, 291, 365, 746, 562, 291, 434, 294, 411, 1905, 4391, 13, 51014, 51014, 407, 291, 658, 257, 21156, 260, 293, 13603, 13, 51114, 51114, 865, 11, 415, 2709, 291, 257, 21156, 260, 11, 1481, 13603, 293, 7441, 23368, 13, 51464, 51464, 407, 309, 311, 257, 7441, 45525, 13, 51564, 51564, 49691, 260, 365, 1481, 13603, 11, 597, 307, 588, 1627, 13, 51714, 51714, 286, 2748, 1940, 257, 574, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.0906804595330749, "compression_ratio": 1.6995515695067265, "no_caption_prob": 5.56183404114563e-05}, {"id": 505, "seek": 378500, "start": 3809.0, "end": 3812.0, "text": " Parser with nice errors, which is very cool.", "tokens": [50364, 583, 415, 611, 7759, 840, 490, 729, 13603, 10042, 2277, 370, 291, 393, 362, 18886, 28748, 6809, 370, 309, 393, 8114, 490, 13603, 293, 920, 1974, 291, 365, 746, 562, 291, 434, 294, 411, 1905, 4391, 13, 51014, 51014, 407, 291, 658, 257, 21156, 260, 293, 13603, 13, 51114, 51114, 865, 11, 415, 2709, 291, 257, 21156, 260, 11, 1481, 13603, 293, 7441, 23368, 13, 51464, 51464, 407, 309, 311, 257, 7441, 45525, 13, 51564, 51564, 49691, 260, 365, 1481, 13603, 11, 597, 307, 588, 1627, 13, 51714, 51714, 286, 2748, 1940, 257, 574, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.0906804595330749, "compression_ratio": 1.6995515695067265, "no_caption_prob": 5.56183404114563e-05}, {"id": 506, "seek": 378500, "start": 3812.0, "end": 3814.0, "text": " I recommend taking a look.", "tokens": [50364, 583, 415, 611, 7759, 840, 490, 729, 13603, 10042, 2277, 370, 291, 393, 362, 18886, 28748, 6809, 370, 309, 393, 8114, 490, 13603, 293, 920, 1974, 291, 365, 746, 562, 291, 434, 294, 411, 1905, 4391, 13, 51014, 51014, 407, 291, 658, 257, 21156, 260, 293, 13603, 13, 51114, 51114, 865, 11, 415, 2709, 291, 257, 21156, 260, 11, 1481, 13603, 293, 7441, 23368, 13, 51464, 51464, 407, 309, 311, 257, 7441, 45525, 13, 51564, 51564, 49691, 260, 365, 1481, 13603, 11, 597, 307, 588, 1627, 13, 51714, 51714, 286, 2748, 1940, 257, 574, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.0906804595330749, "compression_ratio": 1.6995515695067265, "no_caption_prob": 5.56183404114563e-05}, {"id": 507, "seek": 381400, "start": 3814.0, "end": 3823.0, "text": " Teresa has a cool parser project where she does a YAML parser and she gave a talk at Elm Conf a couple of years back, three years back.", "tokens": [50364, 35039, 575, 257, 1627, 21156, 260, 1716, 689, 750, 775, 257, 398, 2865, 43, 21156, 260, 293, 750, 2729, 257, 751, 412, 2699, 76, 11701, 257, 1916, 295, 924, 646, 11, 1045, 924, 646, 13, 50814, 50814, 286, 500, 380, 519, 321, 434, 412, 341, 565, 13, 50964, 50964, 583, 321, 603, 2113, 281, 300, 13, 51064, 51064, 400, 309, 311, 257, 588, 1481, 9339, 281, 512, 295, 264, 4965, 10392, 300, 321, 600, 2825, 466, 13, 51314, 51314, 1240, 311, 658, 411, 3195, 295, 869, 3089, 5110, 294, 720, 9788, 11, 293, 286, 2138, 2748, 1976, 300, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.13619881231807968, "compression_ratio": 1.54251012145749, "no_caption_prob": 6.604742520721629e-05}, {"id": 508, "seek": 381400, "start": 3823.0, "end": 3826.0, "text": " I don't think we're at this time.", "tokens": [50364, 35039, 575, 257, 1627, 21156, 260, 1716, 689, 750, 775, 257, 398, 2865, 43, 21156, 260, 293, 750, 2729, 257, 751, 412, 2699, 76, 11701, 257, 1916, 295, 924, 646, 11, 1045, 924, 646, 13, 50814, 50814, 286, 500, 380, 519, 321, 434, 412, 341, 565, 13, 50964, 50964, 583, 321, 603, 2113, 281, 300, 13, 51064, 51064, 400, 309, 311, 257, 588, 1481, 9339, 281, 512, 295, 264, 4965, 10392, 300, 321, 600, 2825, 466, 13, 51314, 51314, 1240, 311, 658, 411, 3195, 295, 869, 3089, 5110, 294, 720, 9788, 11, 293, 286, 2138, 2748, 1976, 300, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.13619881231807968, "compression_ratio": 1.54251012145749, "no_caption_prob": 6.604742520721629e-05}, {"id": 509, "seek": 381400, "start": 3826.0, "end": 3828.0, "text": " But we'll link to that.", "tokens": [50364, 35039, 575, 257, 1627, 21156, 260, 1716, 689, 750, 775, 257, 398, 2865, 43, 21156, 260, 293, 750, 2729, 257, 751, 412, 2699, 76, 11701, 257, 1916, 295, 924, 646, 11, 1045, 924, 646, 13, 50814, 50814, 286, 500, 380, 519, 321, 434, 412, 341, 565, 13, 50964, 50964, 583, 321, 603, 2113, 281, 300, 13, 51064, 51064, 400, 309, 311, 257, 588, 1481, 9339, 281, 512, 295, 264, 4965, 10392, 300, 321, 600, 2825, 466, 13, 51314, 51314, 1240, 311, 658, 411, 3195, 295, 869, 3089, 5110, 294, 720, 9788, 11, 293, 286, 2138, 2748, 1976, 300, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.13619881231807968, "compression_ratio": 1.54251012145749, "no_caption_prob": 6.604742520721629e-05}, {"id": 510, "seek": 381400, "start": 3828.0, "end": 3833.0, "text": " And it's a very nice introduction to some of the core concepts that we've talked about.", "tokens": [50364, 35039, 575, 257, 1627, 21156, 260, 1716, 689, 750, 775, 257, 398, 2865, 43, 21156, 260, 293, 750, 2729, 257, 751, 412, 2699, 76, 11701, 257, 1916, 295, 924, 646, 11, 1045, 924, 646, 13, 50814, 50814, 286, 500, 380, 519, 321, 434, 412, 341, 565, 13, 50964, 50964, 583, 321, 603, 2113, 281, 300, 13, 51064, 51064, 400, 309, 311, 257, 588, 1481, 9339, 281, 512, 295, 264, 4965, 10392, 300, 321, 600, 2825, 466, 13, 51314, 51314, 1240, 311, 658, 411, 3195, 295, 869, 3089, 5110, 294, 720, 9788, 11, 293, 286, 2138, 2748, 1976, 300, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.13619881231807968, "compression_ratio": 1.54251012145749, "no_caption_prob": 6.604742520721629e-05}, {"id": 511, "seek": 381400, "start": 3833.0, "end": 3838.0, "text": " She's got like lots of great code examples in her slides, and I definitely recommend watching that.", "tokens": [50364, 35039, 575, 257, 1627, 21156, 260, 1716, 689, 750, 775, 257, 398, 2865, 43, 21156, 260, 293, 750, 2729, 257, 751, 412, 2699, 76, 11701, 257, 1916, 295, 924, 646, 11, 1045, 924, 646, 13, 50814, 50814, 286, 500, 380, 519, 321, 434, 412, 341, 565, 13, 50964, 50964, 583, 321, 603, 2113, 281, 300, 13, 51064, 51064, 400, 309, 311, 257, 588, 1481, 9339, 281, 512, 295, 264, 4965, 10392, 300, 321, 600, 2825, 466, 13, 51314, 51314, 1240, 311, 658, 411, 3195, 295, 869, 3089, 5110, 294, 720, 9788, 11, 293, 286, 2138, 2748, 1976, 300, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.13619881231807968, "compression_ratio": 1.54251012145749, "no_caption_prob": 6.604742520721629e-05}, {"id": 512, "seek": 383800, "start": 3838.0, "end": 3844.0, "text": " Yeah, and I've got an example in an early somewhere about a equals one.", "tokens": [50364, 865, 11, 293, 286, 600, 658, 364, 1365, 294, 364, 2440, 4079, 466, 257, 6915, 472, 13, 50664, 50664, 876, 11, 1338, 11, 321, 820, 2113, 281, 300, 13, 50714, 50714, 865, 11, 2138, 13, 50764, 50764, 3769, 13, 50914, 50914, 1057, 558, 13, 1042, 11, 286, 519, 365, 300, 11, 718, 311, 1737, 264, 561, 281, 352, 862, 926, 365, 2699, 76, 21156, 260, 293, 1322, 512, 1627, 1507, 13, 51364, 51364, 2704, 321, 603, 536, 512, 1627, 24283, 18374, 493, 281, 2354, 7380, 264, 13180, 365, 437, 291, 393, 360, 365, 2699, 76, 13, 51664, 51664, 865, 13, 2205, 3668, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.1278044174764758, "compression_ratio": 1.5362903225806452, "no_caption_prob": 0.00016089635028038174}, {"id": 513, "seek": 383800, "start": 3844.0, "end": 3845.0, "text": " Oh, yeah, we should link to that.", "tokens": [50364, 865, 11, 293, 286, 600, 658, 364, 1365, 294, 364, 2440, 4079, 466, 257, 6915, 472, 13, 50664, 50664, 876, 11, 1338, 11, 321, 820, 2113, 281, 300, 13, 50714, 50714, 865, 11, 2138, 13, 50764, 50764, 3769, 13, 50914, 50914, 1057, 558, 13, 1042, 11, 286, 519, 365, 300, 11, 718, 311, 1737, 264, 561, 281, 352, 862, 926, 365, 2699, 76, 21156, 260, 293, 1322, 512, 1627, 1507, 13, 51364, 51364, 2704, 321, 603, 536, 512, 1627, 24283, 18374, 493, 281, 2354, 7380, 264, 13180, 365, 437, 291, 393, 360, 365, 2699, 76, 13, 51664, 51664, 865, 13, 2205, 3668, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.1278044174764758, "compression_ratio": 1.5362903225806452, "no_caption_prob": 0.00016089635028038174}, {"id": 514, "seek": 383800, "start": 3845.0, "end": 3846.0, "text": " Yeah, definitely.", "tokens": [50364, 865, 11, 293, 286, 600, 658, 364, 1365, 294, 364, 2440, 4079, 466, 257, 6915, 472, 13, 50664, 50664, 876, 11, 1338, 11, 321, 820, 2113, 281, 300, 13, 50714, 50714, 865, 11, 2138, 13, 50764, 50764, 3769, 13, 50914, 50914, 1057, 558, 13, 1042, 11, 286, 519, 365, 300, 11, 718, 311, 1737, 264, 561, 281, 352, 862, 926, 365, 2699, 76, 21156, 260, 293, 1322, 512, 1627, 1507, 13, 51364, 51364, 2704, 321, 603, 536, 512, 1627, 24283, 18374, 493, 281, 2354, 7380, 264, 13180, 365, 437, 291, 393, 360, 365, 2699, 76, 13, 51664, 51664, 865, 13, 2205, 3668, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.1278044174764758, "compression_ratio": 1.5362903225806452, "no_caption_prob": 0.00016089635028038174}, {"id": 515, "seek": 383800, "start": 3846.0, "end": 3849.0, "text": " Great.", "tokens": [50364, 865, 11, 293, 286, 600, 658, 364, 1365, 294, 364, 2440, 4079, 466, 257, 6915, 472, 13, 50664, 50664, 876, 11, 1338, 11, 321, 820, 2113, 281, 300, 13, 50714, 50714, 865, 11, 2138, 13, 50764, 50764, 3769, 13, 50914, 50914, 1057, 558, 13, 1042, 11, 286, 519, 365, 300, 11, 718, 311, 1737, 264, 561, 281, 352, 862, 926, 365, 2699, 76, 21156, 260, 293, 1322, 512, 1627, 1507, 13, 51364, 51364, 2704, 321, 603, 536, 512, 1627, 24283, 18374, 493, 281, 2354, 7380, 264, 13180, 365, 437, 291, 393, 360, 365, 2699, 76, 13, 51664, 51664, 865, 13, 2205, 3668, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.1278044174764758, "compression_ratio": 1.5362903225806452, "no_caption_prob": 0.00016089635028038174}, {"id": 516, "seek": 383800, "start": 3849.0, "end": 3858.0, "text": " All right. Well, I think with that, let's free the people to go play around with Elm parser and build some cool stuff.", "tokens": [50364, 865, 11, 293, 286, 600, 658, 364, 1365, 294, 364, 2440, 4079, 466, 257, 6915, 472, 13, 50664, 50664, 876, 11, 1338, 11, 321, 820, 2113, 281, 300, 13, 50714, 50714, 865, 11, 2138, 13, 50764, 50764, 3769, 13, 50914, 50914, 1057, 558, 13, 1042, 11, 286, 519, 365, 300, 11, 718, 311, 1737, 264, 561, 281, 352, 862, 926, 365, 2699, 76, 21156, 260, 293, 1322, 512, 1627, 1507, 13, 51364, 51364, 2704, 321, 603, 536, 512, 1627, 24283, 18374, 493, 281, 2354, 7380, 264, 13180, 365, 437, 291, 393, 360, 365, 2699, 76, 13, 51664, 51664, 865, 13, 2205, 3668, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.1278044174764758, "compression_ratio": 1.5362903225806452, "no_caption_prob": 0.00016089635028038174}, {"id": 517, "seek": 383800, "start": 3858.0, "end": 3864.0, "text": " Maybe we'll see some cool innovations popping up to continue pushing the boundaries with what you can do with Elm.", "tokens": [50364, 865, 11, 293, 286, 600, 658, 364, 1365, 294, 364, 2440, 4079, 466, 257, 6915, 472, 13, 50664, 50664, 876, 11, 1338, 11, 321, 820, 2113, 281, 300, 13, 50714, 50714, 865, 11, 2138, 13, 50764, 50764, 3769, 13, 50914, 50914, 1057, 558, 13, 1042, 11, 286, 519, 365, 300, 11, 718, 311, 1737, 264, 561, 281, 352, 862, 926, 365, 2699, 76, 21156, 260, 293, 1322, 512, 1627, 1507, 13, 51364, 51364, 2704, 321, 603, 536, 512, 1627, 24283, 18374, 493, 281, 2354, 7380, 264, 13180, 365, 437, 291, 393, 360, 365, 2699, 76, 13, 51664, 51664, 865, 13, 2205, 3668, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.1278044174764758, "compression_ratio": 1.5362903225806452, "no_caption_prob": 0.00016089635028038174}, {"id": 518, "seek": 383800, "start": 3864.0, "end": 3866.0, "text": " Yeah. Good luck.", "tokens": [50364, 865, 11, 293, 286, 600, 658, 364, 1365, 294, 364, 2440, 4079, 466, 257, 6915, 472, 13, 50664, 50664, 876, 11, 1338, 11, 321, 820, 2113, 281, 300, 13, 50714, 50714, 865, 11, 2138, 13, 50764, 50764, 3769, 13, 50914, 50914, 1057, 558, 13, 1042, 11, 286, 519, 365, 300, 11, 718, 311, 1737, 264, 561, 281, 352, 862, 926, 365, 2699, 76, 21156, 260, 293, 1322, 512, 1627, 1507, 13, 51364, 51364, 2704, 321, 603, 536, 512, 1627, 24283, 18374, 493, 281, 2354, 7380, 264, 13180, 365, 437, 291, 393, 360, 365, 2699, 76, 13, 51664, 51664, 865, 13, 2205, 3668, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.1278044174764758, "compression_ratio": 1.5362903225806452, "no_caption_prob": 0.00016089635028038174}, {"id": 519, "seek": 386600, "start": 3866.0, "end": 3871.0, "text": " And have fun, especially have fun as people have told me.", "tokens": [50364, 400, 362, 1019, 11, 2318, 362, 1019, 382, 561, 362, 1907, 385, 13, 50614, 50614, 49691, 433, 366, 1019, 13, 50714, 50714, 49691, 278, 2699, 76, 307, 754, 544, 1019, 13, 50814, 50814, 15411, 13, 50864], "temperature": 0.0, "avg_logprob": -0.13209497301202072, "compression_ratio": 1.2613636363636365, "no_caption_prob": 0.00027697140467353165}, {"id": 520, "seek": 386600, "start": 3871.0, "end": 3873.0, "text": " Parsers are fun.", "tokens": [50364, 400, 362, 1019, 11, 2318, 362, 1019, 382, 561, 362, 1907, 385, 13, 50614, 50614, 49691, 433, 366, 1019, 13, 50714, 50714, 49691, 278, 2699, 76, 307, 754, 544, 1019, 13, 50814, 50814, 15411, 13, 50864], "temperature": 0.0, "avg_logprob": -0.13209497301202072, "compression_ratio": 1.2613636363636365, "no_caption_prob": 0.00027697140467353165}, {"id": 521, "seek": 386600, "start": 3873.0, "end": 3875.0, "text": " Parsing Elm is even more fun.", "tokens": [50364, 400, 362, 1019, 11, 2318, 362, 1019, 382, 561, 362, 1907, 385, 13, 50614, 50614, 49691, 433, 366, 1019, 13, 50714, 50714, 49691, 278, 2699, 76, 307, 754, 544, 1019, 13, 50814, 50814, 15411, 13, 50864], "temperature": 0.0, "avg_logprob": -0.13209497301202072, "compression_ratio": 1.2613636363636365, "no_caption_prob": 0.00027697140467353165}, {"id": 522, "seek": 387500, "start": 3875.0, "end": 3900.0, "text": " Enjoy.", "tokens": [50364, 15411, 13, 51614], "temperature": 0.0, "avg_logprob": -0.3157524347305298, "compression_ratio": 0.42857142857142855, "no_caption_prob": 0.001801357138901949}], "language": "en"}