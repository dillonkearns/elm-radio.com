{"text": " Hello, Jeroen. Hello, Dylan. How are you doing today? Pretty good. How about you? I'm good. And well, we've made it 15 episodes without talking about Elm GraphQL. That's surprising. Yeah, we've had a lot on our minds. So we've gotten to talk about a lot of good stuff. But there's a lot to say about Elm GraphQL as well. And we will do that then. As some of the people in the audience may not know, Dylan is the author of Elm GraphQL. That's pretty much how I learned about you, watching your talks about it. Maybe let's get into it and can you tell us what Elm GraphQL is? So what GraphQL is, is it's a schema for your API. So it's just describing all of the endpoints that your server can return. Now, I like to break it down into two pieces. The name GraphQL has two parts. It's a graph and it's a query language. So the query language is the part that it's a schema that describes what you can query for and the types of those values that it will return. The graph part is a whole nother piece. Essentially, the graph part is that rather than making several follow up requests, when you get one bit of data and you say, okay, now that I know the ID of all of the users that I'm connected to, I want to find their first names and get their avatar, so I need to make a follow up request to get that information. Or you sort of throw in a bunch of additional information into that rest endpoint because you know that you very frequently get that information together. It's a way of sort of traversing a graph to get all of the data that you need in a single request. So that's one of the goals of GraphQL is to solve the underfetching and the overfetching problem. You can fetch exactly the data you need and you can traverse these relationships. And it's quite a nice way to sort of build up data and evolve an API where you don't need to know exactly how you're going to get the data at first. You can sort of start exploring data and the types are all known. So one of the really interesting things about GraphQL is that it has a complete specification of all of the type information built into it. So any GraphQL server, you can ask it what are all of the data types and all the things I can query for, and it will respond with that information. Is that this schema that it gives you in one giant response or? Yes, it's actually like these magical little queries that you can do in GraphQL syntax. So like you can in any context, you can ask for the type of something and it will tell you, you know, this is a person object. This is an ID, you know, you can query for those types. So those little introspection, those introspection requests are built into the GraphQL query language and you can, a server will respond with that information. So that's what Elm GraphQL does. That's where Elm GraphQL comes in is it uses that introspection information to ask the server what data can I get? And then it generates an entire API for your server. So like the way I think of. And in this case, we talk about the library API or module API. Yes, good distinction. Exactly. So it takes your server's API and it builds an Elm API at DSL domain specific language for interacting with your API. So like I think of it kind of like, do you ever see these libraries that will be, you know, like a Ruby library for interacting with the GitHub API or a node library for consuming this API? And it's kind of custom tailored to, you know, have these functions for interacting with it in a more high level way. That's essentially what Elm GraphQL does is you point it at your GraphQL API and it gives you one of those libraries. That's basically what it does for you. And so it does that by just generating a bunch of functions that define something called a selection set. So that's sort of at the core of Elm GraphQL is this concept of a selection set. Yeah, just the general look and feel of the API that is generated kind of looks like Elm HTTP with decoding, kind of. We will get into details, but that is just what the people or the audience should have in mind, I guess. Right. And then it looks a lot like building up a decoder, which you can do in a pipeline style or like the map and functions, map three, map five functions. So building up an Elm GraphQL selection set, which is this GraphQL concept of the data you're querying for. But in Elm GraphQL, it allows you to query for that data and then it knows how to decode that into Elm data. So you can think of it like a JSON decoder, except it knows how to query the server for that data. And it knows it's going to get the data because it knows that the underlying types are a string and a float. So it looks a lot like building up a JSON decoder and then sending it with HTTP. All right. So with the JSON decoder, you always say, I want this field and I assume that it's a string. But what you're saying here is you say, I want this field and in GraphQL will well, Elm GraphQL will tell you this is a type that is expected. You don't have to specify it yourself. Exactly, exactly. So maybe to compare, if we were getting an object from a REST endpoint that had a person with a first name and a last name, then you would maybe do decode.mapTo and then decode that in. You'd give a constructor for a person type alias record, which has a string first name, string last name. Then you would do you'd have decode.fieldFirst, decode.string, and then you'd have decode.fieldLast, decode.string. So you're actually when you're doing that, you're stating several assumptions. You're stating the assumption that it's going to exist at this level under something called field, under a field called first and a field called last. And the type of those values are going to be string and they're not going to be null. And so you're stating several assumptions there. And if any of those assumptions are incorrect, then you get a decoder error, which is awesome. We've discussed that on our JSON decoders episode that that's an awesome feature of Elm that it can fail fast instead of getting way into the far reaches of your application and giving you a mysterious error. Well, it's better than to have a decoding error than to have a runtime error. Exactly. Where you sort of core some type and you add it to something and you're like, how did this turn into null or why is this empty string? That's great. But if we have a schema that describes our entire API, we can do better. And that's that's the goal of Elm GraphQL is what if we could know that those assumptions were correct? Not when we run the decoder, but when we compile, it will actually tell us. And so so what would that query to get a person's first and last name look like in Elm GraphQL? Well, in a nutshell, the way you build up that decoder, the selection set for that person would look like instead of decode dot map to you could start with selection set dot map to. And then you give the person constructor and then you have person dot first person dot last. Now, what is person? Person is generated code from Elm GraphQL and it's going to have something called API dot object dot person. That module is going to contain a top level value called first, which is a selection set of type string. Which will query the first field in a person. Exactly. It contains all of those things that we were making assumptions about when we were writing our JSON decoder. It contains that information. It knows it knows how to it knows where it's going to find that data that comes back from the server when it comes back. And it knows how to it knows what the underlying data type is going to be. And we also use it to send off the query. But those assumptions are no longer assumptions. Those are that knowledge that is contained in the generated code. Yeah, I think that as Elm developers, we really want to move things to to be compiler errors rather than runtime errors or decoder errors or just false assumptions that you have to handle it some way. And I feel like Elm GraphQL was one to me, at least one of the few that pioneered type safe APIs that are generated to be that way. Yeah, it's been cool to see like there definitely been some innovations that use code generation. And I've seen some like call outs to Elm GraphQL. And I think that the domain of GraphQL was ripe for some sort of nice integration with Elm because it's just you've got this type information. It's there. It's like, you know, if you if you pull up the interactive like GraphQL query window, you get this nice auto completion where it knows what values are there and you can look at the documentation in line and that information is there. And yet it's sort of separated in this different world that we can't access. And that's sort of the premise of the talk I gave types without borders is, you know, you've got this line dividing this beautiful type of information that you'd like to have and why not bring that into the Elm world so we can have access to that information. But yeah, as you say, that's GraphQL is one application of that idea. But that idea itself can be used in so many ways. Yeah, we mentioned that first like person dot first was a selection set function, a function that returns a selection set, which goes to which fetches a first field in a person and is of type string. Yeah. And it just to clarify, it's a value in that particular case. I mean, it depends on whether it has arguments or anything like that. But assuming it has no arguments in the simplest case, it would be a top level value just to use the precise terminology there. But you cannot use that person the first somewhere else. You can only use it when you create your selecting a person. That's right. Exactly. So that's that's the concept of a scope, which I actually just just in time for this episode, I made a documentation change. So in the docs, there used to be a type variable, which some people may have seen called type block. And I actually wrote that I wrote that name the very day that I discovered phantom types because I didn't know what they were. And I was just amazed that like, oh, I can lock the type like this. So I called it type block and I never really thought of a better name until recently. And so finally I changed. But so a selection set has two type variables. The first type variable is what it decodes to, just like a JSON decoder. It's a decoder of some type variable. So a decoder of string, a decoder of person in Elm GraphQL. It's the exact same thing. A selection set has a first type variable of the type it decodes to. The second type variable is the scope of the selection set. And as you say, so this is this is where sort of the graph part of GraphQL comes in. If you have at the top level, let's say you can make some requests to get the current version of the app. So you you say current version and it gives you a hash or a version number or something. So that is a top level query. So in raw GraphQL syntax, what that would look like is usually people will explicitly write out the word query and then curly braces. It looks a lot like JSON, and that's the intentional design of GraphQL is it looks like JSON, except it's not the key value pairs. It's just the key. It just looks like the keys. And that's like the data you're requesting from the server. So you would say query curly braces and then build version or whatever that field is called. And that would be saying I'm requesting this top level value from the server. And that would have a type of string, for example. And so that's like the simplest top level query. But now if you're saying if you're getting a person, now you need to specify, well, what information do you want to know about that person? And that is where you get this sort of graph part of GraphQL, where you're traversing these relationships and you're fetching data within other bits of data. So you're saying I want, you know, let's say you want like the current user, you want their first and last name to show in the top right corner. Then you would say so instead of query curly braces build version, you'd say query curly braces current user. Now that's getting the current user, but the current user is not a simple string. Yeah, it's not a primitive. Yes, right. It is an object. And so within that object, now you need a nested selection set to tell it what fields you want from that object. And that's where you you open up some new curly braces and then you say, well, I want the first and last. So that would look like query open curlies, current user, open curlies, first new line, last and then close all the curlies. No commas between first and last? Commas are optional. OK, good to know. Well, not good to know because I use Elm GraphQL at work. So right. Exactly. And it abstracts away those details. And Elm GraphQL actually abstracts away a few other details about the sort of low level GraphQL syntax. For example, in in GraphQL, if you're so you can pass arguments to an object like if you if you want a person with some ID. Exactly. If you want to do find person, you can pass it an argument. Now, well, what if you're saying find person with ID one and find person with ID two and you want both of those. Right. Well, the way that GraphQL works under the hood that I say under the hood, because as an Elm GraphQL user, this is an implementation detail that you don't deal with. But that JSON data, you're going to get a JSON response. And when you say find user. So I was saying that it's intentionally designed to look like JSON, but just the keys, not the values. Well, the responses come back in the same shape. So if you request first name, that JSON object is going to come back in the key first name. Sorry, if you say find person, that JSON object is going to come back under the key find person. But you're doing find person twice. And so there's going to be a collision and you get a GraphQL error. Is that a problem that people write GraphQL manually have? That will certainly be a runtime error that the server will fail. You may have like a linter that helps you with that or that sort of tool. But with Elm GraphQL, you don't even have to think about it. So it's one thing if we can make those errors impossible, like Elm GraphQL generates an API that you're going to use things the right way. That's one way to do it. Another way to prevent errors is by abstracting away those details and taking care of them for the user. In this case, that's what Elm GraphQL does. So the way that you solve this problem of a collision where you're requesting two fields with the same name is you need to give it a field alias. And so you would just use the syntax where you say, you know, person one colon find person ID one and then person two colon find person ID two. Now it's going to come back under the JSON key person one, which was the alias you gave it or end person two. But Elm GraphQL takes care of that for you so you don't have to think about it. And that's why in the FAQ in the Elm GraphQL repo, I talk about these mysterious ID numbers that show up in all of the fields. So you may notice those. That's what that's doing. And I wrote an article talking about like the design of that and some of the I talked about how Elm sort of pushes you towards simpler design because it's harder to have sort of imperative state in your code. So we'll share a link to those and people who are interested to learn more about that can take a look. So one problem I often encounter when I play with Elm GraphQL is that I'm looking for data on person, for instance. So what I do is I do current user. And we totally got sidetracked, didn't we? We forgot to mention that scope type variable prevents you from trying to request something at the top level. That was the original point. So maybe let's wrap that up real quick and then get to your point there. Which is related anyway. Okay, good. So the scope type variable, there are two type variables. There's what it decodes to. That's the first type variable and the second type variable, which used to be called typelock. And it's now called scope, which I think better reflects its purpose. So the scope, as you were talking about, if you request this top level thing of the build version, which is just a simple built in string type at the top level. It's not a nested object query. Now, the type of that is going to be it's a root query. But then once you so that would be for the build version, the scope type variable would be the root query. But for a person selection set, the scope is going to be person. And so the way to think about that is if you try to get first name at the top level scope, it doesn't make any sense because you're getting it from that person object. So you can get current user, open curlies, first name. You can do find user ID one, open curlies, first name. So in the scope of a user object within the curlies in the find user or the current user, you are in the scope of a person selection set. Of a person up. And so you have access to fields in that scope. So that's what that second type variable in a selection set represents is that scope. Yeah. And what it helps you prevent is you asking for fields that do not exist on something else. Exactly. Without that, Elm GraphQL would not really be able to achieve its promise of preventing invalid GraphQL queries or at least giving you a compiler error if you try to do that. Yeah. It would give you a decoder error. Exactly. Yeah. That's a key ingredient. OK, so did that cover your point or was there something else you were going to bring up? I was going to bring up something else, but that might actually just be me. So you have that you want to have the first name of a user of a person. So, for instance, you do current user. Current user is a selection set on person where the scope is person. And then you will pass in person dot first and person dot last person dot age, whatever. But the scope is a object that the API that the Elm GraphQL CLI tool will generate for you. But it is not related to the module that defines it. Gotcha. I always find it a bit tricky to connect both in my mind. So I have a scope and I have the selection sets on that scope. Yeah, they're in very different places. Right. This is a good question. And this is sort of this is one of those like little workflow things that I like to share with people when I, you know, when I teach my Elm GraphQL workshop, these little workflow tips can make a big difference, I think. And so this is like one of those little details that I like to share in my workshops. This is worth money, people. This is a for money workshop. Is there any other kind? I guess so. And so, OK, you had you have these two different values. So you've got a module, as you were saying, there is this API object that person module. And this is where you get the first name field and the last name field. These are defining these selection sets that you can get in that scope. Now, the technical reason why that magical type variable scope is using a value that's not in the API dot object dot person module is because it would lead to circular dependencies. So it's not possible to do that. However, I'm happy with the way that you work with it, but I think there's a little trick that helps to make it nice to work with. So the trick is if you have a so when you say find find person, you've got, you know, so this is at the top level. So it would be query dot find person, you know, API dot query dot find person. And then you have find person takes a selection set of the nested selection set. So what fields would you like to select on that person? Right. So first, you give it the required arguments. So you'd give it the required arguments of the ID for the user you're selecting, ID one. And then the second argument you would give that function for find person would be the nested selection set. And so the type of that is going to be selection set decodes to anything you can decode to whatever you want it to. And then the scope must be API dot object dot person. API dot object dot person. And the scope is API dot person. The scope is API dot object dot person. To also. Right. Yes. OK. So here's here's how that works. It's not API dot object dot person dot person because it doesn't exist in the API dot object dot person module. It exists in a module called API dot object, which contains all of those magical scope type variables. Right. So if you want to find what fields you can use, yes, what functions you can use, you just go to that module. Exactly. Same name as the scope. Exactly. The name of the scope is going to look exact. It's going to be the exact name of the module, even though it's in a different module. It's in the API dot object module, but it's called API dot object dot scope, API dot object dot person. Now, if you do API dot object dot person, that module contains all of the fields you can use in that context. So the scope API dot object dot person means that you can do API dot object dot person dot any field name. So it's a bit difficult to explain that without showing code. But but hopefully that that wasn't too confusing. It makes sense to me at least. But I think that in our case, my workplace, we're confusing ourselves by doing a lot of aliasing for the module names, which might not be always a good idea, especially if you rename it like it's not always person, it's user, for instance. API dot object dot person alias as user. Yeah. And then you're you're confusing yourself. Interesting. I mean, at that point, I would be wondering, I mean, maybe it's hard to make a breaking change to the schema, but I would be considering changing my GraphQL schema at that point. Well, yeah. Or maybe it's just some discipline we need to get around aliasing our modules. Right. One of the techniques that I think is really important is these selection sets. In one sense, it's it's pretty high level. You know, it's it's not as low level as just making a GraphQL query. But in another sense, it's very low level, much in the same way that JSON decoding is low level. And as such, it belongs in a module most of the time. You would move your selection sets in a different module? Most of the time, yes. Like if it's a person now, if it's like a toy example and you're just fetching a person and showing their first and last name. OK, but in a real non toy code base, what's going to happen is there's going to be a lot of intricate logic on that. And you're going to have you know, you're going to have user settings and you're going to have all these details that you need to manage. And I think it's a really good practice to start finding nice ways to organize these into modules. So modules next to where you would use them or modules that you would share around the rest of your code base? Modules that you would share. And I think it's really nice to encapsulate. So like let's take a person so you can encapsulate that into, you know, let's just call it a person top level module called person. Well, that's going to be confusing for aliasing. Well, but you've encapsulated all of the selection sets that deal with API dot object dot person to within that module. Unless you also need the person, the API dot object dot person module for other things. If you move everything related to selection sets into that module, then I guess that problem is solved. I think so. And I mean, the seams might not always be perfectly clear, but I think this is the general direction that's very nice. You have it. So, you know, just like you would have I don't know, maybe you've got like an article and then you have, you know, the body of the article and the title and the author. So if the author of the article is a person, then you need to make a selected and a nested selection set for that article to say, OK, I want to get the author of the article. Well, what fields do you want? And then you need a nested selection set to say, I want the first name, last name. Well, you can delegate that to the person module that you defined to encapsulate that Elm GraphQL selection set. So you can say, you know, you have module person. It exposes selection. You know, you have a person dot selection, which is of type selection set. And now that's going to fit in. So when you when you have, you know, an article module that encapsulates your selection sets for fetching an article, then you're going to say, well, get the author. And then you're going to pass in the nested selection set, which is going to be person dot selection. That's something you defined in your own module that encapsulates the selection set. OK, so you would have a personal selection that takes a lot of arguments. A person dot selection wouldn't take any arguments because you're passing it to it's a it's a selection set that's describing here's what I want from a person. And then when you say article, I want the author. That's described. So, see, that's the cool thing is you've got this module that sort of encapsulates how do I get a person? And then you've got this this article part is describing where to get the person from. Right. So that's like the graph part of GraphQL. And so you can just sort of say, like, OK, well, here's the query for a person that's in the person module you defined person that selection. And then, well, what person do you want? Where do you want the person from? Well, that's the relationship. It's the person who wrote this article. Now, there is that does make it sound a little simpler than than it turns out to be in reality, because oftentimes you have if you're getting the current user, then you want to get you know, you want to get their avatar and maybe some additional details that for for the author of a post. You know, maybe for for the author of an article, you want to fetch the number of articles that they've posted or other articles that they've posted. So you do have to get creative with the way you define those those things. Because you don't want to fetch or underfetch most of the time. Right. Yes. You want to avoid over and under fetching and you want to find the right seams for for sort of having the responsibility of the person where, you know, that that sort of describes the core details like, you know, maybe the logic for how you display an avatar. For example, you could encapsulate that in the person module. So that's view logic. And you could use an opaque type to have a person and you know how to render a person batch. And you can render that at the bottom of an article. You can render that, you know, in the nav bar for the current user or maybe maybe like an author and a user are two different types of things. You know, so you need to get creative with these things and you may need to, you know, you can you can expose different types of selection sets to you can expose within a person module. You could expose the bare bones selection set and the selection set that includes some additional information for the for the nav bar display. And so it's not like a one size fits all solution. This is just data modeling techniques and module design. But my point is that I think that too often people think of, you know, an Elm GraphQL selection set as just fetching data and as like a high level unit. But it's really not. It's something that should be encapsulated and you should build your own types that are appropriate types for your domain. You should use all the same good data modeling techniques and everything that you would use with a JSON decoder and encapsulate those details. Yeah, you don't have to keep the data that you get from the GraphQL endpoint as it is. You can transform it using selection set dot map and stuff like that into the main model that you want and that you will use for reviews and for your update functions. Exactly. That's the beauty of, you know, of this sort of approach in Elm of like this decoder style. And, you know, yeah, we talked about this in our like JSON decoding episode that you can you can make changes at a local level. You can, you know, within a certain JSON decoder subsection, you can map. Whereas with JavaScript, what often happens is you just say like, all right, give me all this data. And then you get back a giant, deeply nested JSON object. And then you pass that into some function that transform that does a bunch of transformations on that whole object and becomes really unwieldy. It's so much easier when you can just do a precision surgery in that one spot that you want to change with a map. And that works the exact same way in Elm GraphQL selection sets as it does in a JSON decoder. You just call map and you can you can turn a string into all uppercase or you can turn an int into its string version or, you know, whatever. You can turn some some Elm data type into another data type or some error type into another error type or whatever, whatever logic you have. Do you have other tips in your mind? Otherwise, I can ask some hard to answer questions. Hard to answer questions are good. Other tips? I do have some other tips. Let's go through them then. OK, cool. So, well, so I mentioned opaque types and just general module design and encapsulation. You know, I think that's something I really would love to get out there as a more common practice. Something that pairs really nicely with that is using this custom scalar codecs feature in Elm GraphQL. I'm this is like probably my favorite feature of Elm GraphQL and I feel like it's not used as much as it could be. Are custom scalar codecs specific to Elm GraphQL or to GraphQL? Because I've seen them, but I don't know whether they're originally from. Good question. Custom scalars are a GraphQL concept. Custom scalar codecs are an Elm GraphQL concept. The GraphQL concept of a custom scalar is you have these built in scalars. You have strings and ints and there's an ID built in custom type. So a scalar is pretty much a primitive or a object, but a primitive object like? Yeah, yes. A known declared object. Right. So here's how I think of it. I think of a custom scalar as a contract. Here's why that's really cool, because it's a contract that you can guarantee on the server side. And it's a contract that you can leverage that guarantee on the client side. So like, what does that mean? Well, if you have an ISO 8601, your favorite number. ISO 8601. Years of practice. I wake up and look at myself in the mirror every morning and say ISO 8601. I recommend it. If you ever mess that one up, I will laugh at you so much. But yeah, that's a perfect example because it's a contract. It is a specification, right? It is a primitive, but it has some form or some contracts that it tries to uphold. Exactly. Exactly. So that's right. There is an implicit contract in that concept of an ISO 8601 custom scalar type. And so, well, how do you trust that contract? Well, you trust it because on the server side, any time you're returning a value of type ISO 8601, you define the logic for fetching those types of values and you take care of the serialization in that format. And so you can then deserialize it with that assumption. And so it's a contract that you're making. Now, this brings up an interesting part of working with Elm GraphQL, which is that what guarantees does Elm GraphQL make? Does Elm GraphQL guarantee that your selection set will never have a decoder error? And the answer is no. It essentially guarantees that you will not have a decoder error under specific conditions. And serializing something as ISO 8601. Sorry, but Elm GraphQL really can't help you there. That's just a contract that you're... But what it can help you with is it can say, OK, well, any time there's a value that's of this type, I'm going to use this logic to deserialize it. And the server can say, OK, well, any time I'm sending a value of this type, I'm going to use this logic to serialize it. So it's... So Elm GraphQL helps you by providing this mechanism for leveraging that contract at the right point. But you're on your own for making sure that you've wired up the contract correctly between the back end and the front end. Yeah, if the server messes up, then you have a decoder error or some kind of error. What kind of error would you have then? You would have... That is a good question. Let me look at the docs. I believe I remember being very explicit that I... As much as possible in the Elm GraphQL error messages, I tried to proactively defend against bug reports by saying, you know, the person who wrote this Elm GraphQL... Well, I don't say it that way, but I say like, you know, somebody defined a custom codec that failed. So it's going to give you an error like that. Yeah, because you need to write the codec well also, right? As an implementer of the front end for Elm GraphQL. Exactly right. You need to handle that correctly. But then it gives you a pinch point where in a single place, that codec doesn't even... It will apply that decoder to any value of that type. So now when you go to select a date, if you parse that string, which is ISO 8601 format into a time.posix, then when you have a selection set, which is a created at timestamp, which has that type, when you get it, the type for you as an Elm GraphQL user building up a selection set is going to be time.posix. There are a number of places that you can make use of that. You can make use of that for, you know, I think it's a great idea for ID types. I recommend that people use not just the built in, you know, GraphQL custom scaler. GraphQL has a built in scaler type called ID, which, you know, that's nice. I mean, if it's like a globally unique ID, then maybe that's fine. But really, we can do better than that. And I recommend having unique ID types for each type of ID, a user ID type, a product ID type, because, you know, if you're trying to pass in an ID type, you can describe in your Elm code base, this needs a user ID. This function requires a user ID. And now it's guaranteed to be in sync. You don't need to remember to turn something into a user ID. The codec is going to do that for you. Yeah. So in this case, the codec would just wrap it in an ID. You wouldn't have to do anything more than it wouldn't fail ever. It wouldn't fail as long as you get the underlying type right. From the server. Yes. Yeah. So this is a corner of the GraphQL specification that is not perfect. Overall, the GraphQL specification is very nice. But there's currently no type information about custom scalers. So if you send a custom scaler for a user ID, there's nothing telling you, oh, and by the way, the underlying type is a string or the underlying type is an int. Okay, I thought that would be the case. You would think so. And there are some active specification amendments that are in progress to help with that, although it seems like they're going to be optional, not required. And by the way, the thing that makes it useful to have the schema describing the types in a GraphQL API is that for one thing, you can describe that data and introspect it, which is great. But how does that guarantee anything? Right. And the answer is, well, it guarantees that you're going to. So the GraphQL specification doesn't guarantee that the server will never send an incorrect type. It guarantees that if it does try to send an incorrect type, it will give an error at the GraphQL level. So the GraphQL server framework itself is responsible for not letting anything escape outside of it. Okay, so you would get a 500 or something. I guess that's not the equivalent of a 500. Equivalent of a 500, it might even be a 200 and then contain an errors key in the payload that it returns, which Elm GraphQL would treat as an error. I can't even remember. It's been too long since I've been in there. But whatever the case, it's going to be treated as an error. So now you can use a more like type safe end to end solution if you're using something like Juniper with REST, which is a type safe GraphQL framework. Then you can you can make type guarantees from the database all the way through to returning something from the server or using something like Hasura or PostGraph file. It's actually looking at your Postgres database schema and then inferring the type information from that. So there are ways to keep them in lockstep, but all the GraphQL specification says is if they're mismatched, then I will not let it get through as incorrect data. Instead, I will mark it as an error and send an error response. So you do need to drop in in the custom scalar codecs. You do need to drop in and decode it into the low level type. And then you can map it into whatever types you want. So you actually write a raw JSON decoder, as scary as that may sound. Well, it's not that scary once you've once you've listened to the JSON episode that we've made. Right. Yes, exactly. The one thought that I had when I first heard of Elm GraphQL is like you generate all this API from the GraphQL schema definition file or API. And that works as long as you as the API does not change. So if my server and my front end are separated, how do I keep them in sync? Right. OK, yes. So the way that I recommend people do this is so if you have a mono repo, which is our case, which is practical for this purpose. OK, good. Which I'm a fan of mono repos. Anytime there's a server change that changes your GraphQL schema, you can take that schema, generate your Elm GraphQL code, and you can actually verify that you have not broken any of the code you're calling. Because if you so here's the step here. Here are the steps you take. You are doing a build on your CI. You have a server change. You generate the GraphQL schema from that. There are different ways to do that with different tools. But now you have the latest schema that you're that you're saying I would like to deploy. Right. So then you take that schema, you feed that into the Elm GraphQL CLI tool, which is going to generate the latest code. So now you've updated the generated code or generated the latest Elm GraphQL code. And now you run Elm make on your code. If there was a breaking change and you depended on it, if you removed person dot first name and last name in favor of full name and your code was calling it, that code will Elm make will give an error. So your new server schema change does not go live. That is very nice when you got a server team and a front end team and the third team does not really know how you use it. How you use the GraphQL API in the front end. They kind of have a safety net that says, hey, I'm not going to break the front end because there there is this build step. Yes, exactly. And on the flip side, it actually gives you more confidence about removing things that you want to deprecate. Now, a lot of people in the GraphQL community talk about not versioning their APIs and not doing breaking changes. I personally don't see a problem with doing a breaking change with you know, you can deprecate fields in GraphQL. You can have like a sort of safety window and you can do it using these techniques in your build system so that you are guaranteeing that things are in lockstep. And so you can do it in a safe way. I think it's it's a reasonable thing to do. And it gives you more confidence because you know that you've stopped depending on things when when that build goes live. That said, that doesn't guarantee that somebody is not on a version from last week. Yeah, like the front that has not been deployed yet. So there are different ways to manage that. But I actually I do know for a fact that that some people, you know, will check. They'll check the deployed version against the client side version. And, you know, if there's a mismatch, then you can, you know, reload or warn the user or there are different ways to approach it. You could also keep track. You could increment some version number on your CI anytime you have a breaking GraphQL change. Right. And you could say, OK, we don't need to restart anytime the client and server are out of sync only if there has been a breaking change. And so you could check for that. So there are a number of ways to deal with that. But I think I think it's quite doable. There are a lot of tools at your disposal there. So what about when the server and the front end are not in the same repo? Do you then try to avoid breaking changes and have the schema published somewhere where the front end can use it for at build time? You could. I mean, at that point, you could certainly try to just avoid breaking changes. There are there are tools out there that will give you a warning if you make a breaking change. So you could at least put in a stopgap that says if there is GraphQL schema breaking change, then maybe it needs to be built with a certain flag or exactly something like that. So that's that's one technique at your disposal, too. You could also you could also just you know, even if it's a mono repo, even if it's not a mono repo, you could on the back end before you make any changes to the schema, you could fetch the latest client side code, clone that repo and run Elm make on it and make sure everything's OK. So you can still achieve like some of those sort of characteristics of a mono repo, even if it's not technically a mono repo. Yeah. And then, yeah, it's mostly about discipline. Like just when you do HTTP calls, right? The thing is, it doesn't feel nice because you have Elm GraphQL that promises a lot of type safety and then you have to kind of trust whatever the server is giving you because you might be out of date. And then you get those errors that they mentioned before. Yeah, I think it's the kind of thing that really just requires some like infrastructure investment and some time and thought to come up with the right solution for your environment. But all of these techniques, I think, are tools you can leverage to try to try to make that more robust. Yeah. But even even without that, it will be much safer than if you did the GraphQL or HTTP requests on your own. Right. Exactly. So should we talk about while we're on the topic of ways that an Elm GraphQL request can fail? Should we talk about other ways it can fail? Oh, well, you're getting me curious now. So, yeah. All right. Well, well, the number one source of failure that comes up when you send an Elm GraphQL request, you do get an HTTP error potentially. So that that's definitely, yes, that's a failure that Elm GraphQL can't help you out with too much. There's there's another type of error, which is which is maybes or nullable fields. So GraphQL has this concept of a nullable field. And what happens quite often, I sometimes get bug reports of why is my Elm GraphQL code generating a maybe here? And I have a it's it's my most commonly linked to section of the FAQ document, which is well, oftentimes when people are like going to something like Elm GraphQL, they were consuming that GraphQL schema from an untyped language and so weren't information that they made use of. And so they just had nullable fields all over the place because it's the default in GraphQL. When you define these GraphQL types, you have to go out of your way to put an exclamation point to say this is not nullable. And so you'll even get like a you know, instead of getting a list of IDs, you'll get a list which could be null of IDs, any of which could be null, which is something that happens often even in like public GraphQL APIs that people can't control. But it is often not what what they were trying to express with those types. But it just was like, no, it's it's not supposed to be null. It should never be null. But we've got to add those types. So that's a server side issue, right? That is a server side issue. And that's not going to be an error. Elm GraphQL is just going to, you know, faithfully put those maybes in everywhere and make you annoyingly deal with them. So Elm GraphQL provides an escape patch, which is let me look up the name so I don't get it incorrect. I made these names unappealing. So there's non null or fail. Yeah. I remember someone using that at work and and it failed. And I definitely went out of my way to say somebody called selection set that non null or fail in the error message and say, please find, you know, invocations of non null or fail in your code base. So I don't get bug reports there. But yeah, so non null or fail. It's really a last resort. You want to avoid using it. I have some similar helpers for for a list of noble elements. And then I have like a more general map or fail. And that allows you to, you know, handle possible errors. So if something if you want to validate some data, you can allow your decoders to fail making those guarantees. Now, that said, I think it's I think it's a better practice to deal with those validations in custom scalar codecs. So I would recommend reaching for that before you reach for map or fail. But in some cases, that can be useful, too. All right. Have we covered the subject now or are there other? I think that's pretty good. If you're if you're done with your tough, tough questions, they weren't they weren't too tough. No, I know. I was just trying to scare you. Yeah. Yeah. That was intimidating. How do people get started with the graph? The number one place I recommend as a starting point is to just go to the Elm GraphQL package documentation and click the GraphQL dot selection set module. I sort of step through the basics of a selection set. And if you understand the concept of a selection set really well, then you're going to be in good shape, I think. So like a selection set can have zero items. You can have one item. You can map together selection sets. You can treat it, you know, if you're familiar with a fragment in regular GraphQL, you can build these composable pieces and mix them together just like a fragment in GraphQL, except they're just selection sets and you can mush them together. Yeah, I feel like we should specify and this might be very late, but we're talking about Dylan Kern's slash Elm GraphQL. That's fair. There are three others. They work differently and have different purposes, which we will probably not go into considering it's probably the we should be wrapping up now. Yeah, I would say I think I lay that out in the readme. Yeah. So at the very top of the readme, I point to a discourse thread that talks about the differences between the different approaches. But in a nutshell, it's, you know, Dylan Kern's Elm GraphQL is the only one that is type safe, except there's actually one other library that's that's type safe, I believe. But it's built around the concept of turning a single GraphQL query into an Elm function to call that. I'm going to need to look into that, but I'll link to that, too. But Elm GraphQL takes this philosophy of being like a query builder that you can sort of compose together the pieces in Elm code rather than manipulating strings of GraphQL queries. Yeah. Do you still do workshops around Elm GraphQL? I might do another workshop. I have been thinking about maybe making my workshop into a video course and adding some additional content around that. So if there's interest in that, let me know. I'd love to love to hear about it. Yeah. And then other than that, I think types without borders gives a pretty good intro to sort of the philosophy behind it. Which is a comfort stalk. That's a comfort stalk I gave about Elm GraphQL and those ideas. And, you know, look at the Read Me. There are some other good resources there. And as always, there's a very helpful Slack community that you should reach out to if you want to ask questions or talk about best practices. Yeah. All right. Any other parting words of wisdom or have we given people enough to think about here? You should use selection set dot succeed. Oh, I like it. That's a good note to end on. Yeah, that's following the footsteps of the Jason episode and the tiny steps episode. Use selection set dot succeed. Nice callback. Succeed is the key to success. Beautiful. All right, Jeroen. Well, thanks a lot. And I'll talk to you next time. See you next time.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 2.0, "text": " Hello, Jeroen.", "tokens": [50364, 2425, 11, 508, 2032, 268, 13, 50464, 50464, 2425, 11, 28160, 13, 50514, 50514, 1012, 366, 291, 884, 965, 30, 50564, 50564, 10693, 665, 13, 50614, 50614, 1012, 466, 291, 30, 50664, 50664, 286, 478, 665, 13, 50714, 50714, 400, 731, 11, 321, 600, 1027, 309, 2119, 9313, 1553, 1417, 466, 2699, 76, 21884, 13695, 13, 51014, 51014, 663, 311, 8830, 13, 51114, 51114, 865, 11, 321, 600, 632, 257, 688, 322, 527, 9634, 13, 51314, 51314, 407, 321, 600, 5768, 281, 751, 466, 257, 688, 295, 665, 1507, 13, 51464, 51464, 583, 456, 311, 257, 688, 281, 584, 466, 2699, 76, 21884, 13695, 382, 731, 13, 51614, 51614, 400, 321, 486, 360, 300, 550, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.17912683486938477, "compression_ratio": 1.6018518518518519, "no_caption_prob": 0.32023653388023376}, {"id": 1, "seek": 0, "start": 2.0, "end": 3.0, "text": " Hello, Dylan.", "tokens": [50364, 2425, 11, 508, 2032, 268, 13, 50464, 50464, 2425, 11, 28160, 13, 50514, 50514, 1012, 366, 291, 884, 965, 30, 50564, 50564, 10693, 665, 13, 50614, 50614, 1012, 466, 291, 30, 50664, 50664, 286, 478, 665, 13, 50714, 50714, 400, 731, 11, 321, 600, 1027, 309, 2119, 9313, 1553, 1417, 466, 2699, 76, 21884, 13695, 13, 51014, 51014, 663, 311, 8830, 13, 51114, 51114, 865, 11, 321, 600, 632, 257, 688, 322, 527, 9634, 13, 51314, 51314, 407, 321, 600, 5768, 281, 751, 466, 257, 688, 295, 665, 1507, 13, 51464, 51464, 583, 456, 311, 257, 688, 281, 584, 466, 2699, 76, 21884, 13695, 382, 731, 13, 51614, 51614, 400, 321, 486, 360, 300, 550, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.17912683486938477, "compression_ratio": 1.6018518518518519, "no_caption_prob": 0.32023653388023376}, {"id": 2, "seek": 0, "start": 3.0, "end": 4.0, "text": " How are you doing today?", "tokens": [50364, 2425, 11, 508, 2032, 268, 13, 50464, 50464, 2425, 11, 28160, 13, 50514, 50514, 1012, 366, 291, 884, 965, 30, 50564, 50564, 10693, 665, 13, 50614, 50614, 1012, 466, 291, 30, 50664, 50664, 286, 478, 665, 13, 50714, 50714, 400, 731, 11, 321, 600, 1027, 309, 2119, 9313, 1553, 1417, 466, 2699, 76, 21884, 13695, 13, 51014, 51014, 663, 311, 8830, 13, 51114, 51114, 865, 11, 321, 600, 632, 257, 688, 322, 527, 9634, 13, 51314, 51314, 407, 321, 600, 5768, 281, 751, 466, 257, 688, 295, 665, 1507, 13, 51464, 51464, 583, 456, 311, 257, 688, 281, 584, 466, 2699, 76, 21884, 13695, 382, 731, 13, 51614, 51614, 400, 321, 486, 360, 300, 550, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.17912683486938477, "compression_ratio": 1.6018518518518519, "no_caption_prob": 0.32023653388023376}, {"id": 3, "seek": 0, "start": 4.0, "end": 5.0, "text": " Pretty good.", "tokens": [50364, 2425, 11, 508, 2032, 268, 13, 50464, 50464, 2425, 11, 28160, 13, 50514, 50514, 1012, 366, 291, 884, 965, 30, 50564, 50564, 10693, 665, 13, 50614, 50614, 1012, 466, 291, 30, 50664, 50664, 286, 478, 665, 13, 50714, 50714, 400, 731, 11, 321, 600, 1027, 309, 2119, 9313, 1553, 1417, 466, 2699, 76, 21884, 13695, 13, 51014, 51014, 663, 311, 8830, 13, 51114, 51114, 865, 11, 321, 600, 632, 257, 688, 322, 527, 9634, 13, 51314, 51314, 407, 321, 600, 5768, 281, 751, 466, 257, 688, 295, 665, 1507, 13, 51464, 51464, 583, 456, 311, 257, 688, 281, 584, 466, 2699, 76, 21884, 13695, 382, 731, 13, 51614, 51614, 400, 321, 486, 360, 300, 550, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.17912683486938477, "compression_ratio": 1.6018518518518519, "no_caption_prob": 0.32023653388023376}, {"id": 4, "seek": 0, "start": 5.0, "end": 6.0, "text": " How about you?", "tokens": [50364, 2425, 11, 508, 2032, 268, 13, 50464, 50464, 2425, 11, 28160, 13, 50514, 50514, 1012, 366, 291, 884, 965, 30, 50564, 50564, 10693, 665, 13, 50614, 50614, 1012, 466, 291, 30, 50664, 50664, 286, 478, 665, 13, 50714, 50714, 400, 731, 11, 321, 600, 1027, 309, 2119, 9313, 1553, 1417, 466, 2699, 76, 21884, 13695, 13, 51014, 51014, 663, 311, 8830, 13, 51114, 51114, 865, 11, 321, 600, 632, 257, 688, 322, 527, 9634, 13, 51314, 51314, 407, 321, 600, 5768, 281, 751, 466, 257, 688, 295, 665, 1507, 13, 51464, 51464, 583, 456, 311, 257, 688, 281, 584, 466, 2699, 76, 21884, 13695, 382, 731, 13, 51614, 51614, 400, 321, 486, 360, 300, 550, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.17912683486938477, "compression_ratio": 1.6018518518518519, "no_caption_prob": 0.32023653388023376}, {"id": 5, "seek": 0, "start": 6.0, "end": 7.0, "text": " I'm good.", "tokens": [50364, 2425, 11, 508, 2032, 268, 13, 50464, 50464, 2425, 11, 28160, 13, 50514, 50514, 1012, 366, 291, 884, 965, 30, 50564, 50564, 10693, 665, 13, 50614, 50614, 1012, 466, 291, 30, 50664, 50664, 286, 478, 665, 13, 50714, 50714, 400, 731, 11, 321, 600, 1027, 309, 2119, 9313, 1553, 1417, 466, 2699, 76, 21884, 13695, 13, 51014, 51014, 663, 311, 8830, 13, 51114, 51114, 865, 11, 321, 600, 632, 257, 688, 322, 527, 9634, 13, 51314, 51314, 407, 321, 600, 5768, 281, 751, 466, 257, 688, 295, 665, 1507, 13, 51464, 51464, 583, 456, 311, 257, 688, 281, 584, 466, 2699, 76, 21884, 13695, 382, 731, 13, 51614, 51614, 400, 321, 486, 360, 300, 550, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.17912683486938477, "compression_ratio": 1.6018518518518519, "no_caption_prob": 0.32023653388023376}, {"id": 6, "seek": 0, "start": 7.0, "end": 13.0, "text": " And well, we've made it 15 episodes without talking about Elm GraphQL.", "tokens": [50364, 2425, 11, 508, 2032, 268, 13, 50464, 50464, 2425, 11, 28160, 13, 50514, 50514, 1012, 366, 291, 884, 965, 30, 50564, 50564, 10693, 665, 13, 50614, 50614, 1012, 466, 291, 30, 50664, 50664, 286, 478, 665, 13, 50714, 50714, 400, 731, 11, 321, 600, 1027, 309, 2119, 9313, 1553, 1417, 466, 2699, 76, 21884, 13695, 13, 51014, 51014, 663, 311, 8830, 13, 51114, 51114, 865, 11, 321, 600, 632, 257, 688, 322, 527, 9634, 13, 51314, 51314, 407, 321, 600, 5768, 281, 751, 466, 257, 688, 295, 665, 1507, 13, 51464, 51464, 583, 456, 311, 257, 688, 281, 584, 466, 2699, 76, 21884, 13695, 382, 731, 13, 51614, 51614, 400, 321, 486, 360, 300, 550, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.17912683486938477, "compression_ratio": 1.6018518518518519, "no_caption_prob": 0.32023653388023376}, {"id": 7, "seek": 0, "start": 13.0, "end": 15.0, "text": " That's surprising.", "tokens": [50364, 2425, 11, 508, 2032, 268, 13, 50464, 50464, 2425, 11, 28160, 13, 50514, 50514, 1012, 366, 291, 884, 965, 30, 50564, 50564, 10693, 665, 13, 50614, 50614, 1012, 466, 291, 30, 50664, 50664, 286, 478, 665, 13, 50714, 50714, 400, 731, 11, 321, 600, 1027, 309, 2119, 9313, 1553, 1417, 466, 2699, 76, 21884, 13695, 13, 51014, 51014, 663, 311, 8830, 13, 51114, 51114, 865, 11, 321, 600, 632, 257, 688, 322, 527, 9634, 13, 51314, 51314, 407, 321, 600, 5768, 281, 751, 466, 257, 688, 295, 665, 1507, 13, 51464, 51464, 583, 456, 311, 257, 688, 281, 584, 466, 2699, 76, 21884, 13695, 382, 731, 13, 51614, 51614, 400, 321, 486, 360, 300, 550, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.17912683486938477, "compression_ratio": 1.6018518518518519, "no_caption_prob": 0.32023653388023376}, {"id": 8, "seek": 0, "start": 15.0, "end": 19.0, "text": " Yeah, we've had a lot on our minds.", "tokens": [50364, 2425, 11, 508, 2032, 268, 13, 50464, 50464, 2425, 11, 28160, 13, 50514, 50514, 1012, 366, 291, 884, 965, 30, 50564, 50564, 10693, 665, 13, 50614, 50614, 1012, 466, 291, 30, 50664, 50664, 286, 478, 665, 13, 50714, 50714, 400, 731, 11, 321, 600, 1027, 309, 2119, 9313, 1553, 1417, 466, 2699, 76, 21884, 13695, 13, 51014, 51014, 663, 311, 8830, 13, 51114, 51114, 865, 11, 321, 600, 632, 257, 688, 322, 527, 9634, 13, 51314, 51314, 407, 321, 600, 5768, 281, 751, 466, 257, 688, 295, 665, 1507, 13, 51464, 51464, 583, 456, 311, 257, 688, 281, 584, 466, 2699, 76, 21884, 13695, 382, 731, 13, 51614, 51614, 400, 321, 486, 360, 300, 550, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.17912683486938477, "compression_ratio": 1.6018518518518519, "no_caption_prob": 0.32023653388023376}, {"id": 9, "seek": 0, "start": 19.0, "end": 22.0, "text": " So we've gotten to talk about a lot of good stuff.", "tokens": [50364, 2425, 11, 508, 2032, 268, 13, 50464, 50464, 2425, 11, 28160, 13, 50514, 50514, 1012, 366, 291, 884, 965, 30, 50564, 50564, 10693, 665, 13, 50614, 50614, 1012, 466, 291, 30, 50664, 50664, 286, 478, 665, 13, 50714, 50714, 400, 731, 11, 321, 600, 1027, 309, 2119, 9313, 1553, 1417, 466, 2699, 76, 21884, 13695, 13, 51014, 51014, 663, 311, 8830, 13, 51114, 51114, 865, 11, 321, 600, 632, 257, 688, 322, 527, 9634, 13, 51314, 51314, 407, 321, 600, 5768, 281, 751, 466, 257, 688, 295, 665, 1507, 13, 51464, 51464, 583, 456, 311, 257, 688, 281, 584, 466, 2699, 76, 21884, 13695, 382, 731, 13, 51614, 51614, 400, 321, 486, 360, 300, 550, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.17912683486938477, "compression_ratio": 1.6018518518518519, "no_caption_prob": 0.32023653388023376}, {"id": 10, "seek": 0, "start": 22.0, "end": 25.0, "text": " But there's a lot to say about Elm GraphQL as well.", "tokens": [50364, 2425, 11, 508, 2032, 268, 13, 50464, 50464, 2425, 11, 28160, 13, 50514, 50514, 1012, 366, 291, 884, 965, 30, 50564, 50564, 10693, 665, 13, 50614, 50614, 1012, 466, 291, 30, 50664, 50664, 286, 478, 665, 13, 50714, 50714, 400, 731, 11, 321, 600, 1027, 309, 2119, 9313, 1553, 1417, 466, 2699, 76, 21884, 13695, 13, 51014, 51014, 663, 311, 8830, 13, 51114, 51114, 865, 11, 321, 600, 632, 257, 688, 322, 527, 9634, 13, 51314, 51314, 407, 321, 600, 5768, 281, 751, 466, 257, 688, 295, 665, 1507, 13, 51464, 51464, 583, 456, 311, 257, 688, 281, 584, 466, 2699, 76, 21884, 13695, 382, 731, 13, 51614, 51614, 400, 321, 486, 360, 300, 550, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.17912683486938477, "compression_ratio": 1.6018518518518519, "no_caption_prob": 0.32023653388023376}, {"id": 11, "seek": 0, "start": 25.0, "end": 26.0, "text": " And we will do that then.", "tokens": [50364, 2425, 11, 508, 2032, 268, 13, 50464, 50464, 2425, 11, 28160, 13, 50514, 50514, 1012, 366, 291, 884, 965, 30, 50564, 50564, 10693, 665, 13, 50614, 50614, 1012, 466, 291, 30, 50664, 50664, 286, 478, 665, 13, 50714, 50714, 400, 731, 11, 321, 600, 1027, 309, 2119, 9313, 1553, 1417, 466, 2699, 76, 21884, 13695, 13, 51014, 51014, 663, 311, 8830, 13, 51114, 51114, 865, 11, 321, 600, 632, 257, 688, 322, 527, 9634, 13, 51314, 51314, 407, 321, 600, 5768, 281, 751, 466, 257, 688, 295, 665, 1507, 13, 51464, 51464, 583, 456, 311, 257, 688, 281, 584, 466, 2699, 76, 21884, 13695, 382, 731, 13, 51614, 51614, 400, 321, 486, 360, 300, 550, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.17912683486938477, "compression_ratio": 1.6018518518518519, "no_caption_prob": 0.32023653388023376}, {"id": 12, "seek": 2600, "start": 26.0, "end": 31.0, "text": " As some of the people in the audience may not know, Dylan is the author of Elm GraphQL.", "tokens": [50364, 1018, 512, 295, 264, 561, 294, 264, 4034, 815, 406, 458, 11, 28160, 307, 264, 3793, 295, 2699, 76, 21884, 13695, 13, 50614, 50614, 663, 311, 1238, 709, 577, 286, 3264, 466, 291, 11, 1976, 428, 6686, 466, 309, 13, 50864, 50864, 2704, 718, 311, 483, 666, 309, 293, 393, 291, 980, 505, 437, 2699, 76, 21884, 13695, 307, 30, 51014, 51014, 407, 437, 21884, 13695, 307, 11, 307, 309, 311, 257, 34078, 337, 428, 9362, 13, 51264, 51264, 407, 309, 311, 445, 16141, 439, 295, 264, 917, 20552, 300, 428, 7154, 393, 2736, 13, 51514, 51514, 823, 11, 286, 411, 281, 1821, 309, 760, 666, 732, 3755, 13, 51664, 51664, 440, 1315, 21884, 13695, 575, 732, 3166, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.04543488975462875, "compression_ratio": 1.612781954887218, "no_caption_prob": 0.000253074336796999}, {"id": 13, "seek": 2600, "start": 31.0, "end": 36.0, "text": " That's pretty much how I learned about you, watching your talks about it.", "tokens": [50364, 1018, 512, 295, 264, 561, 294, 264, 4034, 815, 406, 458, 11, 28160, 307, 264, 3793, 295, 2699, 76, 21884, 13695, 13, 50614, 50614, 663, 311, 1238, 709, 577, 286, 3264, 466, 291, 11, 1976, 428, 6686, 466, 309, 13, 50864, 50864, 2704, 718, 311, 483, 666, 309, 293, 393, 291, 980, 505, 437, 2699, 76, 21884, 13695, 307, 30, 51014, 51014, 407, 437, 21884, 13695, 307, 11, 307, 309, 311, 257, 34078, 337, 428, 9362, 13, 51264, 51264, 407, 309, 311, 445, 16141, 439, 295, 264, 917, 20552, 300, 428, 7154, 393, 2736, 13, 51514, 51514, 823, 11, 286, 411, 281, 1821, 309, 760, 666, 732, 3755, 13, 51664, 51664, 440, 1315, 21884, 13695, 575, 732, 3166, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.04543488975462875, "compression_ratio": 1.612781954887218, "no_caption_prob": 0.000253074336796999}, {"id": 14, "seek": 2600, "start": 36.0, "end": 39.0, "text": " Maybe let's get into it and can you tell us what Elm GraphQL is?", "tokens": [50364, 1018, 512, 295, 264, 561, 294, 264, 4034, 815, 406, 458, 11, 28160, 307, 264, 3793, 295, 2699, 76, 21884, 13695, 13, 50614, 50614, 663, 311, 1238, 709, 577, 286, 3264, 466, 291, 11, 1976, 428, 6686, 466, 309, 13, 50864, 50864, 2704, 718, 311, 483, 666, 309, 293, 393, 291, 980, 505, 437, 2699, 76, 21884, 13695, 307, 30, 51014, 51014, 407, 437, 21884, 13695, 307, 11, 307, 309, 311, 257, 34078, 337, 428, 9362, 13, 51264, 51264, 407, 309, 311, 445, 16141, 439, 295, 264, 917, 20552, 300, 428, 7154, 393, 2736, 13, 51514, 51514, 823, 11, 286, 411, 281, 1821, 309, 760, 666, 732, 3755, 13, 51664, 51664, 440, 1315, 21884, 13695, 575, 732, 3166, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.04543488975462875, "compression_ratio": 1.612781954887218, "no_caption_prob": 0.000253074336796999}, {"id": 15, "seek": 2600, "start": 39.0, "end": 44.0, "text": " So what GraphQL is, is it's a schema for your API.", "tokens": [50364, 1018, 512, 295, 264, 561, 294, 264, 4034, 815, 406, 458, 11, 28160, 307, 264, 3793, 295, 2699, 76, 21884, 13695, 13, 50614, 50614, 663, 311, 1238, 709, 577, 286, 3264, 466, 291, 11, 1976, 428, 6686, 466, 309, 13, 50864, 50864, 2704, 718, 311, 483, 666, 309, 293, 393, 291, 980, 505, 437, 2699, 76, 21884, 13695, 307, 30, 51014, 51014, 407, 437, 21884, 13695, 307, 11, 307, 309, 311, 257, 34078, 337, 428, 9362, 13, 51264, 51264, 407, 309, 311, 445, 16141, 439, 295, 264, 917, 20552, 300, 428, 7154, 393, 2736, 13, 51514, 51514, 823, 11, 286, 411, 281, 1821, 309, 760, 666, 732, 3755, 13, 51664, 51664, 440, 1315, 21884, 13695, 575, 732, 3166, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.04543488975462875, "compression_ratio": 1.612781954887218, "no_caption_prob": 0.000253074336796999}, {"id": 16, "seek": 2600, "start": 44.0, "end": 49.0, "text": " So it's just describing all of the endpoints that your server can return.", "tokens": [50364, 1018, 512, 295, 264, 561, 294, 264, 4034, 815, 406, 458, 11, 28160, 307, 264, 3793, 295, 2699, 76, 21884, 13695, 13, 50614, 50614, 663, 311, 1238, 709, 577, 286, 3264, 466, 291, 11, 1976, 428, 6686, 466, 309, 13, 50864, 50864, 2704, 718, 311, 483, 666, 309, 293, 393, 291, 980, 505, 437, 2699, 76, 21884, 13695, 307, 30, 51014, 51014, 407, 437, 21884, 13695, 307, 11, 307, 309, 311, 257, 34078, 337, 428, 9362, 13, 51264, 51264, 407, 309, 311, 445, 16141, 439, 295, 264, 917, 20552, 300, 428, 7154, 393, 2736, 13, 51514, 51514, 823, 11, 286, 411, 281, 1821, 309, 760, 666, 732, 3755, 13, 51664, 51664, 440, 1315, 21884, 13695, 575, 732, 3166, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.04543488975462875, "compression_ratio": 1.612781954887218, "no_caption_prob": 0.000253074336796999}, {"id": 17, "seek": 2600, "start": 49.0, "end": 52.0, "text": " Now, I like to break it down into two pieces.", "tokens": [50364, 1018, 512, 295, 264, 561, 294, 264, 4034, 815, 406, 458, 11, 28160, 307, 264, 3793, 295, 2699, 76, 21884, 13695, 13, 50614, 50614, 663, 311, 1238, 709, 577, 286, 3264, 466, 291, 11, 1976, 428, 6686, 466, 309, 13, 50864, 50864, 2704, 718, 311, 483, 666, 309, 293, 393, 291, 980, 505, 437, 2699, 76, 21884, 13695, 307, 30, 51014, 51014, 407, 437, 21884, 13695, 307, 11, 307, 309, 311, 257, 34078, 337, 428, 9362, 13, 51264, 51264, 407, 309, 311, 445, 16141, 439, 295, 264, 917, 20552, 300, 428, 7154, 393, 2736, 13, 51514, 51514, 823, 11, 286, 411, 281, 1821, 309, 760, 666, 732, 3755, 13, 51664, 51664, 440, 1315, 21884, 13695, 575, 732, 3166, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.04543488975462875, "compression_ratio": 1.612781954887218, "no_caption_prob": 0.000253074336796999}, {"id": 18, "seek": 2600, "start": 52.0, "end": 54.0, "text": " The name GraphQL has two parts.", "tokens": [50364, 1018, 512, 295, 264, 561, 294, 264, 4034, 815, 406, 458, 11, 28160, 307, 264, 3793, 295, 2699, 76, 21884, 13695, 13, 50614, 50614, 663, 311, 1238, 709, 577, 286, 3264, 466, 291, 11, 1976, 428, 6686, 466, 309, 13, 50864, 50864, 2704, 718, 311, 483, 666, 309, 293, 393, 291, 980, 505, 437, 2699, 76, 21884, 13695, 307, 30, 51014, 51014, 407, 437, 21884, 13695, 307, 11, 307, 309, 311, 257, 34078, 337, 428, 9362, 13, 51264, 51264, 407, 309, 311, 445, 16141, 439, 295, 264, 917, 20552, 300, 428, 7154, 393, 2736, 13, 51514, 51514, 823, 11, 286, 411, 281, 1821, 309, 760, 666, 732, 3755, 13, 51664, 51664, 440, 1315, 21884, 13695, 575, 732, 3166, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.04543488975462875, "compression_ratio": 1.612781954887218, "no_caption_prob": 0.000253074336796999}, {"id": 19, "seek": 5400, "start": 54.0, "end": 57.0, "text": " It's a graph and it's a query language.", "tokens": [50364, 467, 311, 257, 4295, 293, 309, 311, 257, 14581, 2856, 13, 50514, 50514, 407, 264, 14581, 2856, 307, 264, 644, 300, 309, 311, 257, 34078, 300, 15626, 437, 291, 393, 14581, 337, 50764, 50764, 293, 264, 3467, 295, 729, 4190, 300, 309, 486, 2736, 13, 50864, 50864, 440, 4295, 644, 307, 257, 1379, 406, 511, 2522, 13, 50964, 50964, 23596, 11, 264, 4295, 644, 307, 300, 2831, 813, 1455, 2940, 1524, 493, 12475, 11, 51264, 51264, 562, 291, 483, 472, 857, 295, 1412, 293, 291, 584, 11, 1392, 11, 586, 300, 286, 458, 264, 7348, 295, 439, 295, 264, 5022, 300, 286, 478, 4582, 281, 11, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.06542566472833806, "compression_ratio": 1.7344398340248963, "no_caption_prob": 0.00016863794007804245}, {"id": 20, "seek": 5400, "start": 57.0, "end": 62.0, "text": " So the query language is the part that it's a schema that describes what you can query for", "tokens": [50364, 467, 311, 257, 4295, 293, 309, 311, 257, 14581, 2856, 13, 50514, 50514, 407, 264, 14581, 2856, 307, 264, 644, 300, 309, 311, 257, 34078, 300, 15626, 437, 291, 393, 14581, 337, 50764, 50764, 293, 264, 3467, 295, 729, 4190, 300, 309, 486, 2736, 13, 50864, 50864, 440, 4295, 644, 307, 257, 1379, 406, 511, 2522, 13, 50964, 50964, 23596, 11, 264, 4295, 644, 307, 300, 2831, 813, 1455, 2940, 1524, 493, 12475, 11, 51264, 51264, 562, 291, 483, 472, 857, 295, 1412, 293, 291, 584, 11, 1392, 11, 586, 300, 286, 458, 264, 7348, 295, 439, 295, 264, 5022, 300, 286, 478, 4582, 281, 11, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.06542566472833806, "compression_ratio": 1.7344398340248963, "no_caption_prob": 0.00016863794007804245}, {"id": 21, "seek": 5400, "start": 62.0, "end": 64.0, "text": " and the types of those values that it will return.", "tokens": [50364, 467, 311, 257, 4295, 293, 309, 311, 257, 14581, 2856, 13, 50514, 50514, 407, 264, 14581, 2856, 307, 264, 644, 300, 309, 311, 257, 34078, 300, 15626, 437, 291, 393, 14581, 337, 50764, 50764, 293, 264, 3467, 295, 729, 4190, 300, 309, 486, 2736, 13, 50864, 50864, 440, 4295, 644, 307, 257, 1379, 406, 511, 2522, 13, 50964, 50964, 23596, 11, 264, 4295, 644, 307, 300, 2831, 813, 1455, 2940, 1524, 493, 12475, 11, 51264, 51264, 562, 291, 483, 472, 857, 295, 1412, 293, 291, 584, 11, 1392, 11, 586, 300, 286, 458, 264, 7348, 295, 439, 295, 264, 5022, 300, 286, 478, 4582, 281, 11, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.06542566472833806, "compression_ratio": 1.7344398340248963, "no_caption_prob": 0.00016863794007804245}, {"id": 22, "seek": 5400, "start": 64.0, "end": 66.0, "text": " The graph part is a whole nother piece.", "tokens": [50364, 467, 311, 257, 4295, 293, 309, 311, 257, 14581, 2856, 13, 50514, 50514, 407, 264, 14581, 2856, 307, 264, 644, 300, 309, 311, 257, 34078, 300, 15626, 437, 291, 393, 14581, 337, 50764, 50764, 293, 264, 3467, 295, 729, 4190, 300, 309, 486, 2736, 13, 50864, 50864, 440, 4295, 644, 307, 257, 1379, 406, 511, 2522, 13, 50964, 50964, 23596, 11, 264, 4295, 644, 307, 300, 2831, 813, 1455, 2940, 1524, 493, 12475, 11, 51264, 51264, 562, 291, 483, 472, 857, 295, 1412, 293, 291, 584, 11, 1392, 11, 586, 300, 286, 458, 264, 7348, 295, 439, 295, 264, 5022, 300, 286, 478, 4582, 281, 11, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.06542566472833806, "compression_ratio": 1.7344398340248963, "no_caption_prob": 0.00016863794007804245}, {"id": 23, "seek": 5400, "start": 66.0, "end": 72.0, "text": " Essentially, the graph part is that rather than making several follow up requests,", "tokens": [50364, 467, 311, 257, 4295, 293, 309, 311, 257, 14581, 2856, 13, 50514, 50514, 407, 264, 14581, 2856, 307, 264, 644, 300, 309, 311, 257, 34078, 300, 15626, 437, 291, 393, 14581, 337, 50764, 50764, 293, 264, 3467, 295, 729, 4190, 300, 309, 486, 2736, 13, 50864, 50864, 440, 4295, 644, 307, 257, 1379, 406, 511, 2522, 13, 50964, 50964, 23596, 11, 264, 4295, 644, 307, 300, 2831, 813, 1455, 2940, 1524, 493, 12475, 11, 51264, 51264, 562, 291, 483, 472, 857, 295, 1412, 293, 291, 584, 11, 1392, 11, 586, 300, 286, 458, 264, 7348, 295, 439, 295, 264, 5022, 300, 286, 478, 4582, 281, 11, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.06542566472833806, "compression_ratio": 1.7344398340248963, "no_caption_prob": 0.00016863794007804245}, {"id": 24, "seek": 5400, "start": 72.0, "end": 79.0, "text": " when you get one bit of data and you say, okay, now that I know the ID of all of the users that I'm connected to,", "tokens": [50364, 467, 311, 257, 4295, 293, 309, 311, 257, 14581, 2856, 13, 50514, 50514, 407, 264, 14581, 2856, 307, 264, 644, 300, 309, 311, 257, 34078, 300, 15626, 437, 291, 393, 14581, 337, 50764, 50764, 293, 264, 3467, 295, 729, 4190, 300, 309, 486, 2736, 13, 50864, 50864, 440, 4295, 644, 307, 257, 1379, 406, 511, 2522, 13, 50964, 50964, 23596, 11, 264, 4295, 644, 307, 300, 2831, 813, 1455, 2940, 1524, 493, 12475, 11, 51264, 51264, 562, 291, 483, 472, 857, 295, 1412, 293, 291, 584, 11, 1392, 11, 586, 300, 286, 458, 264, 7348, 295, 439, 295, 264, 5022, 300, 286, 478, 4582, 281, 11, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.06542566472833806, "compression_ratio": 1.7344398340248963, "no_caption_prob": 0.00016863794007804245}, {"id": 25, "seek": 7900, "start": 79.0, "end": 84.0, "text": " I want to find their first names and get their avatar,", "tokens": [50364, 286, 528, 281, 915, 641, 700, 5288, 293, 483, 641, 36205, 11, 50614, 50614, 370, 286, 643, 281, 652, 257, 1524, 493, 5308, 281, 483, 300, 1589, 13, 50764, 50764, 1610, 291, 1333, 295, 3507, 294, 257, 3840, 295, 4497, 1589, 666, 300, 1472, 35795, 51014, 51014, 570, 291, 458, 300, 291, 588, 10374, 483, 300, 1589, 1214, 13, 51214, 51214, 467, 311, 257, 636, 295, 1333, 295, 23149, 278, 257, 4295, 281, 483, 439, 295, 264, 1412, 300, 291, 643, 294, 257, 2167, 5308, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.051270643870035805, "compression_ratio": 1.7666666666666666, "no_caption_prob": 0.00026944841374643147}, {"id": 26, "seek": 7900, "start": 84.0, "end": 87.0, "text": " so I need to make a follow up request to get that information.", "tokens": [50364, 286, 528, 281, 915, 641, 700, 5288, 293, 483, 641, 36205, 11, 50614, 50614, 370, 286, 643, 281, 652, 257, 1524, 493, 5308, 281, 483, 300, 1589, 13, 50764, 50764, 1610, 291, 1333, 295, 3507, 294, 257, 3840, 295, 4497, 1589, 666, 300, 1472, 35795, 51014, 51014, 570, 291, 458, 300, 291, 588, 10374, 483, 300, 1589, 1214, 13, 51214, 51214, 467, 311, 257, 636, 295, 1333, 295, 23149, 278, 257, 4295, 281, 483, 439, 295, 264, 1412, 300, 291, 643, 294, 257, 2167, 5308, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.051270643870035805, "compression_ratio": 1.7666666666666666, "no_caption_prob": 0.00026944841374643147}, {"id": 27, "seek": 7900, "start": 87.0, "end": 92.0, "text": " Or you sort of throw in a bunch of additional information into that rest endpoint", "tokens": [50364, 286, 528, 281, 915, 641, 700, 5288, 293, 483, 641, 36205, 11, 50614, 50614, 370, 286, 643, 281, 652, 257, 1524, 493, 5308, 281, 483, 300, 1589, 13, 50764, 50764, 1610, 291, 1333, 295, 3507, 294, 257, 3840, 295, 4497, 1589, 666, 300, 1472, 35795, 51014, 51014, 570, 291, 458, 300, 291, 588, 10374, 483, 300, 1589, 1214, 13, 51214, 51214, 467, 311, 257, 636, 295, 1333, 295, 23149, 278, 257, 4295, 281, 483, 439, 295, 264, 1412, 300, 291, 643, 294, 257, 2167, 5308, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.051270643870035805, "compression_ratio": 1.7666666666666666, "no_caption_prob": 0.00026944841374643147}, {"id": 28, "seek": 7900, "start": 92.0, "end": 96.0, "text": " because you know that you very frequently get that information together.", "tokens": [50364, 286, 528, 281, 915, 641, 700, 5288, 293, 483, 641, 36205, 11, 50614, 50614, 370, 286, 643, 281, 652, 257, 1524, 493, 5308, 281, 483, 300, 1589, 13, 50764, 50764, 1610, 291, 1333, 295, 3507, 294, 257, 3840, 295, 4497, 1589, 666, 300, 1472, 35795, 51014, 51014, 570, 291, 458, 300, 291, 588, 10374, 483, 300, 1589, 1214, 13, 51214, 51214, 467, 311, 257, 636, 295, 1333, 295, 23149, 278, 257, 4295, 281, 483, 439, 295, 264, 1412, 300, 291, 643, 294, 257, 2167, 5308, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.051270643870035805, "compression_ratio": 1.7666666666666666, "no_caption_prob": 0.00026944841374643147}, {"id": 29, "seek": 7900, "start": 96.0, "end": 102.0, "text": " It's a way of sort of traversing a graph to get all of the data that you need in a single request.", "tokens": [50364, 286, 528, 281, 915, 641, 700, 5288, 293, 483, 641, 36205, 11, 50614, 50614, 370, 286, 643, 281, 652, 257, 1524, 493, 5308, 281, 483, 300, 1589, 13, 50764, 50764, 1610, 291, 1333, 295, 3507, 294, 257, 3840, 295, 4497, 1589, 666, 300, 1472, 35795, 51014, 51014, 570, 291, 458, 300, 291, 588, 10374, 483, 300, 1589, 1214, 13, 51214, 51214, 467, 311, 257, 636, 295, 1333, 295, 23149, 278, 257, 4295, 281, 483, 439, 295, 264, 1412, 300, 291, 643, 294, 257, 2167, 5308, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.051270643870035805, "compression_ratio": 1.7666666666666666, "no_caption_prob": 0.00026944841374643147}, {"id": 30, "seek": 10200, "start": 102.0, "end": 109.0, "text": " So that's one of the goals of GraphQL is to solve the underfetching and the overfetching problem.", "tokens": [50364, 407, 300, 311, 472, 295, 264, 5493, 295, 21884, 13695, 307, 281, 5039, 264, 833, 69, 7858, 278, 293, 264, 670, 69, 7858, 278, 1154, 13, 50714, 50714, 509, 393, 23673, 2293, 264, 1412, 291, 643, 293, 291, 393, 45674, 613, 6159, 13, 50914, 50914, 400, 309, 311, 1596, 257, 1481, 636, 281, 1333, 295, 1322, 493, 1412, 293, 16693, 364, 9362, 689, 291, 500, 380, 643, 281, 458, 2293, 51264, 51264, 577, 291, 434, 516, 281, 483, 264, 1412, 412, 700, 13, 51364, 51364, 509, 393, 1333, 295, 722, 12736, 1412, 293, 264, 3467, 366, 439, 2570, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.05263663264154231, "compression_ratio": 1.6909871244635193, "no_caption_prob": 0.00010553907486610115}, {"id": 31, "seek": 10200, "start": 109.0, "end": 113.0, "text": " You can fetch exactly the data you need and you can traverse these relationships.", "tokens": [50364, 407, 300, 311, 472, 295, 264, 5493, 295, 21884, 13695, 307, 281, 5039, 264, 833, 69, 7858, 278, 293, 264, 670, 69, 7858, 278, 1154, 13, 50714, 50714, 509, 393, 23673, 2293, 264, 1412, 291, 643, 293, 291, 393, 45674, 613, 6159, 13, 50914, 50914, 400, 309, 311, 1596, 257, 1481, 636, 281, 1333, 295, 1322, 493, 1412, 293, 16693, 364, 9362, 689, 291, 500, 380, 643, 281, 458, 2293, 51264, 51264, 577, 291, 434, 516, 281, 483, 264, 1412, 412, 700, 13, 51364, 51364, 509, 393, 1333, 295, 722, 12736, 1412, 293, 264, 3467, 366, 439, 2570, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.05263663264154231, "compression_ratio": 1.6909871244635193, "no_caption_prob": 0.00010553907486610115}, {"id": 32, "seek": 10200, "start": 113.0, "end": 120.0, "text": " And it's quite a nice way to sort of build up data and evolve an API where you don't need to know exactly", "tokens": [50364, 407, 300, 311, 472, 295, 264, 5493, 295, 21884, 13695, 307, 281, 5039, 264, 833, 69, 7858, 278, 293, 264, 670, 69, 7858, 278, 1154, 13, 50714, 50714, 509, 393, 23673, 2293, 264, 1412, 291, 643, 293, 291, 393, 45674, 613, 6159, 13, 50914, 50914, 400, 309, 311, 1596, 257, 1481, 636, 281, 1333, 295, 1322, 493, 1412, 293, 16693, 364, 9362, 689, 291, 500, 380, 643, 281, 458, 2293, 51264, 51264, 577, 291, 434, 516, 281, 483, 264, 1412, 412, 700, 13, 51364, 51364, 509, 393, 1333, 295, 722, 12736, 1412, 293, 264, 3467, 366, 439, 2570, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.05263663264154231, "compression_ratio": 1.6909871244635193, "no_caption_prob": 0.00010553907486610115}, {"id": 33, "seek": 10200, "start": 120.0, "end": 122.0, "text": " how you're going to get the data at first.", "tokens": [50364, 407, 300, 311, 472, 295, 264, 5493, 295, 21884, 13695, 307, 281, 5039, 264, 833, 69, 7858, 278, 293, 264, 670, 69, 7858, 278, 1154, 13, 50714, 50714, 509, 393, 23673, 2293, 264, 1412, 291, 643, 293, 291, 393, 45674, 613, 6159, 13, 50914, 50914, 400, 309, 311, 1596, 257, 1481, 636, 281, 1333, 295, 1322, 493, 1412, 293, 16693, 364, 9362, 689, 291, 500, 380, 643, 281, 458, 2293, 51264, 51264, 577, 291, 434, 516, 281, 483, 264, 1412, 412, 700, 13, 51364, 51364, 509, 393, 1333, 295, 722, 12736, 1412, 293, 264, 3467, 366, 439, 2570, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.05263663264154231, "compression_ratio": 1.6909871244635193, "no_caption_prob": 0.00010553907486610115}, {"id": 34, "seek": 10200, "start": 122.0, "end": 126.0, "text": " You can sort of start exploring data and the types are all known.", "tokens": [50364, 407, 300, 311, 472, 295, 264, 5493, 295, 21884, 13695, 307, 281, 5039, 264, 833, 69, 7858, 278, 293, 264, 670, 69, 7858, 278, 1154, 13, 50714, 50714, 509, 393, 23673, 2293, 264, 1412, 291, 643, 293, 291, 393, 45674, 613, 6159, 13, 50914, 50914, 400, 309, 311, 1596, 257, 1481, 636, 281, 1333, 295, 1322, 493, 1412, 293, 16693, 364, 9362, 689, 291, 500, 380, 643, 281, 458, 2293, 51264, 51264, 577, 291, 434, 516, 281, 483, 264, 1412, 412, 700, 13, 51364, 51364, 509, 393, 1333, 295, 722, 12736, 1412, 293, 264, 3467, 366, 439, 2570, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.05263663264154231, "compression_ratio": 1.6909871244635193, "no_caption_prob": 0.00010553907486610115}, {"id": 35, "seek": 12600, "start": 126.0, "end": 134.0, "text": " So one of the really interesting things about GraphQL is that it has a complete specification of all of the type information built into it.", "tokens": [50364, 407, 472, 295, 264, 534, 1880, 721, 466, 21884, 13695, 307, 300, 309, 575, 257, 3566, 31256, 295, 439, 295, 264, 2010, 1589, 3094, 666, 309, 13, 50764, 50764, 407, 604, 21884, 13695, 7154, 11, 291, 393, 1029, 309, 437, 366, 439, 295, 264, 1412, 3467, 293, 439, 264, 721, 286, 393, 14581, 337, 11, 51064, 51064, 293, 309, 486, 4196, 365, 300, 1589, 13, 51214, 51214, 1119, 300, 341, 34078, 300, 309, 2709, 291, 294, 472, 7410, 4134, 420, 30, 51414, 51414, 1079, 11, 309, 311, 767, 411, 613, 12066, 707, 24109, 300, 291, 393, 360, 294, 21884, 13695, 28431, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.09422394914447137, "compression_ratio": 1.7351778656126482, "no_caption_prob": 1.834239810705185e-05}, {"id": 36, "seek": 12600, "start": 134.0, "end": 140.0, "text": " So any GraphQL server, you can ask it what are all of the data types and all the things I can query for,", "tokens": [50364, 407, 472, 295, 264, 534, 1880, 721, 466, 21884, 13695, 307, 300, 309, 575, 257, 3566, 31256, 295, 439, 295, 264, 2010, 1589, 3094, 666, 309, 13, 50764, 50764, 407, 604, 21884, 13695, 7154, 11, 291, 393, 1029, 309, 437, 366, 439, 295, 264, 1412, 3467, 293, 439, 264, 721, 286, 393, 14581, 337, 11, 51064, 51064, 293, 309, 486, 4196, 365, 300, 1589, 13, 51214, 51214, 1119, 300, 341, 34078, 300, 309, 2709, 291, 294, 472, 7410, 4134, 420, 30, 51414, 51414, 1079, 11, 309, 311, 767, 411, 613, 12066, 707, 24109, 300, 291, 393, 360, 294, 21884, 13695, 28431, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.09422394914447137, "compression_ratio": 1.7351778656126482, "no_caption_prob": 1.834239810705185e-05}, {"id": 37, "seek": 12600, "start": 140.0, "end": 143.0, "text": " and it will respond with that information.", "tokens": [50364, 407, 472, 295, 264, 534, 1880, 721, 466, 21884, 13695, 307, 300, 309, 575, 257, 3566, 31256, 295, 439, 295, 264, 2010, 1589, 3094, 666, 309, 13, 50764, 50764, 407, 604, 21884, 13695, 7154, 11, 291, 393, 1029, 309, 437, 366, 439, 295, 264, 1412, 3467, 293, 439, 264, 721, 286, 393, 14581, 337, 11, 51064, 51064, 293, 309, 486, 4196, 365, 300, 1589, 13, 51214, 51214, 1119, 300, 341, 34078, 300, 309, 2709, 291, 294, 472, 7410, 4134, 420, 30, 51414, 51414, 1079, 11, 309, 311, 767, 411, 613, 12066, 707, 24109, 300, 291, 393, 360, 294, 21884, 13695, 28431, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.09422394914447137, "compression_ratio": 1.7351778656126482, "no_caption_prob": 1.834239810705185e-05}, {"id": 38, "seek": 12600, "start": 143.0, "end": 147.0, "text": " Is that this schema that it gives you in one giant response or?", "tokens": [50364, 407, 472, 295, 264, 534, 1880, 721, 466, 21884, 13695, 307, 300, 309, 575, 257, 3566, 31256, 295, 439, 295, 264, 2010, 1589, 3094, 666, 309, 13, 50764, 50764, 407, 604, 21884, 13695, 7154, 11, 291, 393, 1029, 309, 437, 366, 439, 295, 264, 1412, 3467, 293, 439, 264, 721, 286, 393, 14581, 337, 11, 51064, 51064, 293, 309, 486, 4196, 365, 300, 1589, 13, 51214, 51214, 1119, 300, 341, 34078, 300, 309, 2709, 291, 294, 472, 7410, 4134, 420, 30, 51414, 51414, 1079, 11, 309, 311, 767, 411, 613, 12066, 707, 24109, 300, 291, 393, 360, 294, 21884, 13695, 28431, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.09422394914447137, "compression_ratio": 1.7351778656126482, "no_caption_prob": 1.834239810705185e-05}, {"id": 39, "seek": 12600, "start": 147.0, "end": 155.0, "text": " Yes, it's actually like these magical little queries that you can do in GraphQL syntax.", "tokens": [50364, 407, 472, 295, 264, 534, 1880, 721, 466, 21884, 13695, 307, 300, 309, 575, 257, 3566, 31256, 295, 439, 295, 264, 2010, 1589, 3094, 666, 309, 13, 50764, 50764, 407, 604, 21884, 13695, 7154, 11, 291, 393, 1029, 309, 437, 366, 439, 295, 264, 1412, 3467, 293, 439, 264, 721, 286, 393, 14581, 337, 11, 51064, 51064, 293, 309, 486, 4196, 365, 300, 1589, 13, 51214, 51214, 1119, 300, 341, 34078, 300, 309, 2709, 291, 294, 472, 7410, 4134, 420, 30, 51414, 51414, 1079, 11, 309, 311, 767, 411, 613, 12066, 707, 24109, 300, 291, 393, 360, 294, 21884, 13695, 28431, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.09422394914447137, "compression_ratio": 1.7351778656126482, "no_caption_prob": 1.834239810705185e-05}, {"id": 40, "seek": 15500, "start": 155.0, "end": 164.0, "text": " So like you can in any context, you can ask for the type of something and it will tell you, you know, this is a person object.", "tokens": [50364, 407, 411, 291, 393, 294, 604, 4319, 11, 291, 393, 1029, 337, 264, 2010, 295, 746, 293, 309, 486, 980, 291, 11, 291, 458, 11, 341, 307, 257, 954, 2657, 13, 50814, 50814, 639, 307, 364, 7348, 11, 291, 458, 11, 291, 393, 14581, 337, 729, 3467, 13, 51014, 51014, 407, 729, 707, 560, 2635, 19997, 11, 729, 560, 2635, 19997, 12475, 366, 3094, 666, 264, 21884, 13695, 14581, 2856, 293, 291, 393, 11, 51414, 51414, 257, 7154, 486, 4196, 365, 300, 1589, 13, 51514, 51514, 407, 300, 311, 437, 2699, 76, 21884, 13695, 775, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.09832756996154784, "compression_ratio": 1.6968325791855203, "no_caption_prob": 1.6442158084828407e-05}, {"id": 41, "seek": 15500, "start": 164.0, "end": 168.0, "text": " This is an ID, you know, you can query for those types.", "tokens": [50364, 407, 411, 291, 393, 294, 604, 4319, 11, 291, 393, 1029, 337, 264, 2010, 295, 746, 293, 309, 486, 980, 291, 11, 291, 458, 11, 341, 307, 257, 954, 2657, 13, 50814, 50814, 639, 307, 364, 7348, 11, 291, 458, 11, 291, 393, 14581, 337, 729, 3467, 13, 51014, 51014, 407, 729, 707, 560, 2635, 19997, 11, 729, 560, 2635, 19997, 12475, 366, 3094, 666, 264, 21884, 13695, 14581, 2856, 293, 291, 393, 11, 51414, 51414, 257, 7154, 486, 4196, 365, 300, 1589, 13, 51514, 51514, 407, 300, 311, 437, 2699, 76, 21884, 13695, 775, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.09832756996154784, "compression_ratio": 1.6968325791855203, "no_caption_prob": 1.6442158084828407e-05}, {"id": 42, "seek": 15500, "start": 168.0, "end": 176.0, "text": " So those little introspection, those introspection requests are built into the GraphQL query language and you can,", "tokens": [50364, 407, 411, 291, 393, 294, 604, 4319, 11, 291, 393, 1029, 337, 264, 2010, 295, 746, 293, 309, 486, 980, 291, 11, 291, 458, 11, 341, 307, 257, 954, 2657, 13, 50814, 50814, 639, 307, 364, 7348, 11, 291, 458, 11, 291, 393, 14581, 337, 729, 3467, 13, 51014, 51014, 407, 729, 707, 560, 2635, 19997, 11, 729, 560, 2635, 19997, 12475, 366, 3094, 666, 264, 21884, 13695, 14581, 2856, 293, 291, 393, 11, 51414, 51414, 257, 7154, 486, 4196, 365, 300, 1589, 13, 51514, 51514, 407, 300, 311, 437, 2699, 76, 21884, 13695, 775, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.09832756996154784, "compression_ratio": 1.6968325791855203, "no_caption_prob": 1.6442158084828407e-05}, {"id": 43, "seek": 15500, "start": 176.0, "end": 178.0, "text": " a server will respond with that information.", "tokens": [50364, 407, 411, 291, 393, 294, 604, 4319, 11, 291, 393, 1029, 337, 264, 2010, 295, 746, 293, 309, 486, 980, 291, 11, 291, 458, 11, 341, 307, 257, 954, 2657, 13, 50814, 50814, 639, 307, 364, 7348, 11, 291, 458, 11, 291, 393, 14581, 337, 729, 3467, 13, 51014, 51014, 407, 729, 707, 560, 2635, 19997, 11, 729, 560, 2635, 19997, 12475, 366, 3094, 666, 264, 21884, 13695, 14581, 2856, 293, 291, 393, 11, 51414, 51414, 257, 7154, 486, 4196, 365, 300, 1589, 13, 51514, 51514, 407, 300, 311, 437, 2699, 76, 21884, 13695, 775, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.09832756996154784, "compression_ratio": 1.6968325791855203, "no_caption_prob": 1.6442158084828407e-05}, {"id": 44, "seek": 15500, "start": 178.0, "end": 180.0, "text": " So that's what Elm GraphQL does.", "tokens": [50364, 407, 411, 291, 393, 294, 604, 4319, 11, 291, 393, 1029, 337, 264, 2010, 295, 746, 293, 309, 486, 980, 291, 11, 291, 458, 11, 341, 307, 257, 954, 2657, 13, 50814, 50814, 639, 307, 364, 7348, 11, 291, 458, 11, 291, 393, 14581, 337, 729, 3467, 13, 51014, 51014, 407, 729, 707, 560, 2635, 19997, 11, 729, 560, 2635, 19997, 12475, 366, 3094, 666, 264, 21884, 13695, 14581, 2856, 293, 291, 393, 11, 51414, 51414, 257, 7154, 486, 4196, 365, 300, 1589, 13, 51514, 51514, 407, 300, 311, 437, 2699, 76, 21884, 13695, 775, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.09832756996154784, "compression_ratio": 1.6968325791855203, "no_caption_prob": 1.6442158084828407e-05}, {"id": 45, "seek": 18000, "start": 180.0, "end": 188.0, "text": " That's where Elm GraphQL comes in is it uses that introspection information to ask the server what data can I get?", "tokens": [50364, 663, 311, 689, 2699, 76, 21884, 13695, 1487, 294, 307, 309, 4960, 300, 560, 2635, 19997, 1589, 281, 1029, 264, 7154, 437, 1412, 393, 286, 483, 30, 50764, 50764, 400, 550, 309, 23815, 364, 2302, 9362, 337, 428, 7154, 13, 50914, 50914, 407, 411, 264, 636, 286, 519, 295, 13, 51014, 51014, 400, 294, 341, 1389, 11, 321, 751, 466, 264, 6405, 9362, 420, 10088, 9362, 13, 51214, 51214, 1079, 11, 665, 16844, 13, 51314, 51314, 7587, 13, 51364, 51364], "temperature": 0.0, "avg_logprob": -0.09871461914806831, "compression_ratio": 1.4215686274509804, "no_caption_prob": 2.7966874768026173e-05}, {"id": 46, "seek": 18000, "start": 188.0, "end": 191.0, "text": " And then it generates an entire API for your server.", "tokens": [50364, 663, 311, 689, 2699, 76, 21884, 13695, 1487, 294, 307, 309, 4960, 300, 560, 2635, 19997, 1589, 281, 1029, 264, 7154, 437, 1412, 393, 286, 483, 30, 50764, 50764, 400, 550, 309, 23815, 364, 2302, 9362, 337, 428, 7154, 13, 50914, 50914, 407, 411, 264, 636, 286, 519, 295, 13, 51014, 51014, 400, 294, 341, 1389, 11, 321, 751, 466, 264, 6405, 9362, 420, 10088, 9362, 13, 51214, 51214, 1079, 11, 665, 16844, 13, 51314, 51314, 7587, 13, 51364, 51364], "temperature": 0.0, "avg_logprob": -0.09871461914806831, "compression_ratio": 1.4215686274509804, "no_caption_prob": 2.7966874768026173e-05}, {"id": 47, "seek": 18000, "start": 191.0, "end": 193.0, "text": " So like the way I think of.", "tokens": [50364, 663, 311, 689, 2699, 76, 21884, 13695, 1487, 294, 307, 309, 4960, 300, 560, 2635, 19997, 1589, 281, 1029, 264, 7154, 437, 1412, 393, 286, 483, 30, 50764, 50764, 400, 550, 309, 23815, 364, 2302, 9362, 337, 428, 7154, 13, 50914, 50914, 407, 411, 264, 636, 286, 519, 295, 13, 51014, 51014, 400, 294, 341, 1389, 11, 321, 751, 466, 264, 6405, 9362, 420, 10088, 9362, 13, 51214, 51214, 1079, 11, 665, 16844, 13, 51314, 51314, 7587, 13, 51364, 51364], "temperature": 0.0, "avg_logprob": -0.09871461914806831, "compression_ratio": 1.4215686274509804, "no_caption_prob": 2.7966874768026173e-05}, {"id": 48, "seek": 18000, "start": 193.0, "end": 197.0, "text": " And in this case, we talk about the library API or module API.", "tokens": [50364, 663, 311, 689, 2699, 76, 21884, 13695, 1487, 294, 307, 309, 4960, 300, 560, 2635, 19997, 1589, 281, 1029, 264, 7154, 437, 1412, 393, 286, 483, 30, 50764, 50764, 400, 550, 309, 23815, 364, 2302, 9362, 337, 428, 7154, 13, 50914, 50914, 407, 411, 264, 636, 286, 519, 295, 13, 51014, 51014, 400, 294, 341, 1389, 11, 321, 751, 466, 264, 6405, 9362, 420, 10088, 9362, 13, 51214, 51214, 1079, 11, 665, 16844, 13, 51314, 51314, 7587, 13, 51364, 51364], "temperature": 0.0, "avg_logprob": -0.09871461914806831, "compression_ratio": 1.4215686274509804, "no_caption_prob": 2.7966874768026173e-05}, {"id": 49, "seek": 18000, "start": 197.0, "end": 199.0, "text": " Yes, good distinction.", "tokens": [50364, 663, 311, 689, 2699, 76, 21884, 13695, 1487, 294, 307, 309, 4960, 300, 560, 2635, 19997, 1589, 281, 1029, 264, 7154, 437, 1412, 393, 286, 483, 30, 50764, 50764, 400, 550, 309, 23815, 364, 2302, 9362, 337, 428, 7154, 13, 50914, 50914, 407, 411, 264, 636, 286, 519, 295, 13, 51014, 51014, 400, 294, 341, 1389, 11, 321, 751, 466, 264, 6405, 9362, 420, 10088, 9362, 13, 51214, 51214, 1079, 11, 665, 16844, 13, 51314, 51314, 7587, 13, 51364, 51364], "temperature": 0.0, "avg_logprob": -0.09871461914806831, "compression_ratio": 1.4215686274509804, "no_caption_prob": 2.7966874768026173e-05}, {"id": 50, "seek": 18000, "start": 199.0, "end": 200.0, "text": " Exactly.", "tokens": [50364, 663, 311, 689, 2699, 76, 21884, 13695, 1487, 294, 307, 309, 4960, 300, 560, 2635, 19997, 1589, 281, 1029, 264, 7154, 437, 1412, 393, 286, 483, 30, 50764, 50764, 400, 550, 309, 23815, 364, 2302, 9362, 337, 428, 7154, 13, 50914, 50914, 407, 411, 264, 636, 286, 519, 295, 13, 51014, 51014, 400, 294, 341, 1389, 11, 321, 751, 466, 264, 6405, 9362, 420, 10088, 9362, 13, 51214, 51214, 1079, 11, 665, 16844, 13, 51314, 51314, 7587, 13, 51364, 51364], "temperature": 0.0, "avg_logprob": -0.09871461914806831, "compression_ratio": 1.4215686274509804, "no_caption_prob": 2.7966874768026173e-05}, {"id": 51, "seek": 20000, "start": 200.0, "end": 210.0, "text": " So it takes your server's API and it builds an Elm API at DSL domain specific language for interacting with your API.", "tokens": [50364, 407, 309, 2516, 428, 7154, 311, 9362, 293, 309, 15182, 364, 2699, 76, 9362, 412, 15816, 43, 9274, 2685, 2856, 337, 18017, 365, 428, 9362, 13, 50864, 50864, 407, 411, 286, 519, 295, 309, 733, 295, 411, 11, 360, 291, 1562, 536, 613, 15148, 300, 486, 312, 11, 291, 458, 11, 51164, 51164, 411, 257, 19907, 6405, 337, 18017, 365, 264, 23331, 9362, 420, 257, 9984, 6405, 337, 19867, 341, 9362, 30, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.10456326760743793, "compression_ratio": 1.5505050505050506, "no_caption_prob": 7.602047844557092e-05}, {"id": 52, "seek": 20000, "start": 210.0, "end": 216.0, "text": " So like I think of it kind of like, do you ever see these libraries that will be, you know,", "tokens": [50364, 407, 309, 2516, 428, 7154, 311, 9362, 293, 309, 15182, 364, 2699, 76, 9362, 412, 15816, 43, 9274, 2685, 2856, 337, 18017, 365, 428, 9362, 13, 50864, 50864, 407, 411, 286, 519, 295, 309, 733, 295, 411, 11, 360, 291, 1562, 536, 613, 15148, 300, 486, 312, 11, 291, 458, 11, 51164, 51164, 411, 257, 19907, 6405, 337, 18017, 365, 264, 23331, 9362, 420, 257, 9984, 6405, 337, 19867, 341, 9362, 30, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.10456326760743793, "compression_ratio": 1.5505050505050506, "no_caption_prob": 7.602047844557092e-05}, {"id": 53, "seek": 20000, "start": 216.0, "end": 223.0, "text": " like a Ruby library for interacting with the GitHub API or a node library for consuming this API?", "tokens": [50364, 407, 309, 2516, 428, 7154, 311, 9362, 293, 309, 15182, 364, 2699, 76, 9362, 412, 15816, 43, 9274, 2685, 2856, 337, 18017, 365, 428, 9362, 13, 50864, 50864, 407, 411, 286, 519, 295, 309, 733, 295, 411, 11, 360, 291, 1562, 536, 613, 15148, 300, 486, 312, 11, 291, 458, 11, 51164, 51164, 411, 257, 19907, 6405, 337, 18017, 365, 264, 23331, 9362, 420, 257, 9984, 6405, 337, 19867, 341, 9362, 30, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.10456326760743793, "compression_ratio": 1.5505050505050506, "no_caption_prob": 7.602047844557092e-05}, {"id": 54, "seek": 22300, "start": 223.0, "end": 230.0, "text": " And it's kind of custom tailored to, you know, have these functions for interacting with it in a more high level way.", "tokens": [50364, 400, 309, 311, 733, 295, 2375, 34858, 281, 11, 291, 458, 11, 362, 613, 6828, 337, 18017, 365, 309, 294, 257, 544, 1090, 1496, 636, 13, 50714, 50714, 663, 311, 4476, 437, 2699, 76, 21884, 13695, 775, 307, 291, 935, 309, 412, 428, 21884, 13695, 9362, 293, 309, 2709, 291, 472, 295, 729, 15148, 13, 51114, 51114, 663, 311, 1936, 437, 309, 775, 337, 291, 13, 51214, 51214, 400, 370, 309, 775, 300, 538, 445, 17746, 257, 3840, 295, 6828, 300, 6964, 746, 1219, 257, 9450, 992, 13, 51514, 51514, 407, 300, 311, 1333, 295, 412, 264, 4965, 295, 2699, 76, 21884, 13695, 307, 341, 3410, 295, 257, 9450, 992, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.03551412250684655, "compression_ratio": 1.7265917602996255, "no_caption_prob": 6.540304184454726e-06}, {"id": 55, "seek": 22300, "start": 230.0, "end": 238.0, "text": " That's essentially what Elm GraphQL does is you point it at your GraphQL API and it gives you one of those libraries.", "tokens": [50364, 400, 309, 311, 733, 295, 2375, 34858, 281, 11, 291, 458, 11, 362, 613, 6828, 337, 18017, 365, 309, 294, 257, 544, 1090, 1496, 636, 13, 50714, 50714, 663, 311, 4476, 437, 2699, 76, 21884, 13695, 775, 307, 291, 935, 309, 412, 428, 21884, 13695, 9362, 293, 309, 2709, 291, 472, 295, 729, 15148, 13, 51114, 51114, 663, 311, 1936, 437, 309, 775, 337, 291, 13, 51214, 51214, 400, 370, 309, 775, 300, 538, 445, 17746, 257, 3840, 295, 6828, 300, 6964, 746, 1219, 257, 9450, 992, 13, 51514, 51514, 407, 300, 311, 1333, 295, 412, 264, 4965, 295, 2699, 76, 21884, 13695, 307, 341, 3410, 295, 257, 9450, 992, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.03551412250684655, "compression_ratio": 1.7265917602996255, "no_caption_prob": 6.540304184454726e-06}, {"id": 56, "seek": 22300, "start": 238.0, "end": 240.0, "text": " That's basically what it does for you.", "tokens": [50364, 400, 309, 311, 733, 295, 2375, 34858, 281, 11, 291, 458, 11, 362, 613, 6828, 337, 18017, 365, 309, 294, 257, 544, 1090, 1496, 636, 13, 50714, 50714, 663, 311, 4476, 437, 2699, 76, 21884, 13695, 775, 307, 291, 935, 309, 412, 428, 21884, 13695, 9362, 293, 309, 2709, 291, 472, 295, 729, 15148, 13, 51114, 51114, 663, 311, 1936, 437, 309, 775, 337, 291, 13, 51214, 51214, 400, 370, 309, 775, 300, 538, 445, 17746, 257, 3840, 295, 6828, 300, 6964, 746, 1219, 257, 9450, 992, 13, 51514, 51514, 407, 300, 311, 1333, 295, 412, 264, 4965, 295, 2699, 76, 21884, 13695, 307, 341, 3410, 295, 257, 9450, 992, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.03551412250684655, "compression_ratio": 1.7265917602996255, "no_caption_prob": 6.540304184454726e-06}, {"id": 57, "seek": 22300, "start": 240.0, "end": 246.0, "text": " And so it does that by just generating a bunch of functions that define something called a selection set.", "tokens": [50364, 400, 309, 311, 733, 295, 2375, 34858, 281, 11, 291, 458, 11, 362, 613, 6828, 337, 18017, 365, 309, 294, 257, 544, 1090, 1496, 636, 13, 50714, 50714, 663, 311, 4476, 437, 2699, 76, 21884, 13695, 775, 307, 291, 935, 309, 412, 428, 21884, 13695, 9362, 293, 309, 2709, 291, 472, 295, 729, 15148, 13, 51114, 51114, 663, 311, 1936, 437, 309, 775, 337, 291, 13, 51214, 51214, 400, 370, 309, 775, 300, 538, 445, 17746, 257, 3840, 295, 6828, 300, 6964, 746, 1219, 257, 9450, 992, 13, 51514, 51514, 407, 300, 311, 1333, 295, 412, 264, 4965, 295, 2699, 76, 21884, 13695, 307, 341, 3410, 295, 257, 9450, 992, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.03551412250684655, "compression_ratio": 1.7265917602996255, "no_caption_prob": 6.540304184454726e-06}, {"id": 58, "seek": 22300, "start": 246.0, "end": 251.0, "text": " So that's sort of at the core of Elm GraphQL is this concept of a selection set.", "tokens": [50364, 400, 309, 311, 733, 295, 2375, 34858, 281, 11, 291, 458, 11, 362, 613, 6828, 337, 18017, 365, 309, 294, 257, 544, 1090, 1496, 636, 13, 50714, 50714, 663, 311, 4476, 437, 2699, 76, 21884, 13695, 775, 307, 291, 935, 309, 412, 428, 21884, 13695, 9362, 293, 309, 2709, 291, 472, 295, 729, 15148, 13, 51114, 51114, 663, 311, 1936, 437, 309, 775, 337, 291, 13, 51214, 51214, 400, 370, 309, 775, 300, 538, 445, 17746, 257, 3840, 295, 6828, 300, 6964, 746, 1219, 257, 9450, 992, 13, 51514, 51514, 407, 300, 311, 1333, 295, 412, 264, 4965, 295, 2699, 76, 21884, 13695, 307, 341, 3410, 295, 257, 9450, 992, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.03551412250684655, "compression_ratio": 1.7265917602996255, "no_caption_prob": 6.540304184454726e-06}, {"id": 59, "seek": 25100, "start": 251.0, "end": 260.0, "text": " Yeah, just the general look and feel of the API that is generated kind of looks like Elm HTTP with decoding, kind of.", "tokens": [50364, 865, 11, 445, 264, 2674, 574, 293, 841, 295, 264, 9362, 300, 307, 10833, 733, 295, 1542, 411, 2699, 76, 33283, 365, 979, 8616, 11, 733, 295, 13, 50814, 50814, 492, 486, 483, 666, 4365, 11, 457, 300, 307, 445, 437, 264, 561, 420, 264, 4034, 820, 362, 294, 1575, 11, 286, 2041, 13, 51114, 51114, 1779, 13, 400, 550, 309, 1542, 257, 688, 411, 2390, 493, 257, 979, 19866, 11, 597, 291, 393, 360, 294, 257, 15517, 3758, 420, 411, 264, 4471, 293, 6828, 11, 4471, 1045, 11, 4471, 1732, 6828, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.1094047408743003, "compression_ratio": 1.6033755274261603, "no_caption_prob": 0.00010229601321043447}, {"id": 60, "seek": 25100, "start": 260.0, "end": 266.0, "text": " We will get into details, but that is just what the people or the audience should have in mind, I guess.", "tokens": [50364, 865, 11, 445, 264, 2674, 574, 293, 841, 295, 264, 9362, 300, 307, 10833, 733, 295, 1542, 411, 2699, 76, 33283, 365, 979, 8616, 11, 733, 295, 13, 50814, 50814, 492, 486, 483, 666, 4365, 11, 457, 300, 307, 445, 437, 264, 561, 420, 264, 4034, 820, 362, 294, 1575, 11, 286, 2041, 13, 51114, 51114, 1779, 13, 400, 550, 309, 1542, 257, 688, 411, 2390, 493, 257, 979, 19866, 11, 597, 291, 393, 360, 294, 257, 15517, 3758, 420, 411, 264, 4471, 293, 6828, 11, 4471, 1045, 11, 4471, 1732, 6828, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.1094047408743003, "compression_ratio": 1.6033755274261603, "no_caption_prob": 0.00010229601321043447}, {"id": 61, "seek": 25100, "start": 266.0, "end": 275.0, "text": " Right. And then it looks a lot like building up a decoder, which you can do in a pipeline style or like the map and functions, map three, map five functions.", "tokens": [50364, 865, 11, 445, 264, 2674, 574, 293, 841, 295, 264, 9362, 300, 307, 10833, 733, 295, 1542, 411, 2699, 76, 33283, 365, 979, 8616, 11, 733, 295, 13, 50814, 50814, 492, 486, 483, 666, 4365, 11, 457, 300, 307, 445, 437, 264, 561, 420, 264, 4034, 820, 362, 294, 1575, 11, 286, 2041, 13, 51114, 51114, 1779, 13, 400, 550, 309, 1542, 257, 688, 411, 2390, 493, 257, 979, 19866, 11, 597, 291, 393, 360, 294, 257, 15517, 3758, 420, 411, 264, 4471, 293, 6828, 11, 4471, 1045, 11, 4471, 1732, 6828, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.1094047408743003, "compression_ratio": 1.6033755274261603, "no_caption_prob": 0.00010229601321043447}, {"id": 62, "seek": 27500, "start": 275.0, "end": 284.0, "text": " So building up an Elm GraphQL selection set, which is this GraphQL concept of the data you're querying for.", "tokens": [50364, 407, 2390, 493, 364, 2699, 76, 21884, 13695, 9450, 992, 11, 597, 307, 341, 21884, 13695, 3410, 295, 264, 1412, 291, 434, 7083, 1840, 337, 13, 50814, 50814, 583, 294, 2699, 76, 21884, 13695, 11, 309, 4045, 291, 281, 14581, 337, 300, 1412, 293, 550, 309, 3255, 577, 281, 979, 1429, 300, 666, 2699, 76, 1412, 13, 51114, 51114, 407, 291, 393, 519, 295, 309, 411, 257, 31828, 979, 19866, 11, 3993, 309, 3255, 577, 281, 14581, 264, 7154, 337, 300, 1412, 13, 51464, 51464, 400, 309, 3255, 309, 311, 516, 281, 483, 264, 1412, 570, 309, 3255, 300, 264, 14217, 3467, 366, 257, 6798, 293, 257, 15706, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.05426644434971092, "compression_ratio": 1.7520661157024793, "no_caption_prob": 6.108613888500258e-05}, {"id": 63, "seek": 27500, "start": 284.0, "end": 290.0, "text": " But in Elm GraphQL, it allows you to query for that data and then it knows how to decode that into Elm data.", "tokens": [50364, 407, 2390, 493, 364, 2699, 76, 21884, 13695, 9450, 992, 11, 597, 307, 341, 21884, 13695, 3410, 295, 264, 1412, 291, 434, 7083, 1840, 337, 13, 50814, 50814, 583, 294, 2699, 76, 21884, 13695, 11, 309, 4045, 291, 281, 14581, 337, 300, 1412, 293, 550, 309, 3255, 577, 281, 979, 1429, 300, 666, 2699, 76, 1412, 13, 51114, 51114, 407, 291, 393, 519, 295, 309, 411, 257, 31828, 979, 19866, 11, 3993, 309, 3255, 577, 281, 14581, 264, 7154, 337, 300, 1412, 13, 51464, 51464, 400, 309, 3255, 309, 311, 516, 281, 483, 264, 1412, 570, 309, 3255, 300, 264, 14217, 3467, 366, 257, 6798, 293, 257, 15706, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.05426644434971092, "compression_ratio": 1.7520661157024793, "no_caption_prob": 6.108613888500258e-05}, {"id": 64, "seek": 27500, "start": 290.0, "end": 297.0, "text": " So you can think of it like a JSON decoder, except it knows how to query the server for that data.", "tokens": [50364, 407, 2390, 493, 364, 2699, 76, 21884, 13695, 9450, 992, 11, 597, 307, 341, 21884, 13695, 3410, 295, 264, 1412, 291, 434, 7083, 1840, 337, 13, 50814, 50814, 583, 294, 2699, 76, 21884, 13695, 11, 309, 4045, 291, 281, 14581, 337, 300, 1412, 293, 550, 309, 3255, 577, 281, 979, 1429, 300, 666, 2699, 76, 1412, 13, 51114, 51114, 407, 291, 393, 519, 295, 309, 411, 257, 31828, 979, 19866, 11, 3993, 309, 3255, 577, 281, 14581, 264, 7154, 337, 300, 1412, 13, 51464, 51464, 400, 309, 3255, 309, 311, 516, 281, 483, 264, 1412, 570, 309, 3255, 300, 264, 14217, 3467, 366, 257, 6798, 293, 257, 15706, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.05426644434971092, "compression_ratio": 1.7520661157024793, "no_caption_prob": 6.108613888500258e-05}, {"id": 65, "seek": 27500, "start": 297.0, "end": 303.0, "text": " And it knows it's going to get the data because it knows that the underlying types are a string and a float.", "tokens": [50364, 407, 2390, 493, 364, 2699, 76, 21884, 13695, 9450, 992, 11, 597, 307, 341, 21884, 13695, 3410, 295, 264, 1412, 291, 434, 7083, 1840, 337, 13, 50814, 50814, 583, 294, 2699, 76, 21884, 13695, 11, 309, 4045, 291, 281, 14581, 337, 300, 1412, 293, 550, 309, 3255, 577, 281, 979, 1429, 300, 666, 2699, 76, 1412, 13, 51114, 51114, 407, 291, 393, 519, 295, 309, 411, 257, 31828, 979, 19866, 11, 3993, 309, 3255, 577, 281, 14581, 264, 7154, 337, 300, 1412, 13, 51464, 51464, 400, 309, 3255, 309, 311, 516, 281, 483, 264, 1412, 570, 309, 3255, 300, 264, 14217, 3467, 366, 257, 6798, 293, 257, 15706, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.05426644434971092, "compression_ratio": 1.7520661157024793, "no_caption_prob": 6.108613888500258e-05}, {"id": 66, "seek": 30300, "start": 303.0, "end": 308.0, "text": " So it looks a lot like building up a JSON decoder and then sending it with HTTP.", "tokens": [50364, 407, 309, 1542, 257, 688, 411, 2390, 493, 257, 31828, 979, 19866, 293, 550, 7750, 309, 365, 33283, 13, 50614, 50614, 1057, 558, 13, 407, 365, 264, 31828, 979, 19866, 11, 291, 1009, 584, 11, 286, 528, 341, 2519, 293, 286, 6552, 300, 309, 311, 257, 6798, 13, 50964, 50964, 583, 437, 291, 434, 1566, 510, 307, 291, 584, 11, 286, 528, 341, 2519, 293, 294, 21884, 13695, 486, 731, 11, 2699, 76, 21884, 13695, 486, 980, 291, 341, 307, 257, 2010, 300, 307, 5176, 13, 51414, 51414, 509, 500, 380, 362, 281, 16500, 309, 1803, 13, 51514, 51514, 7587, 11, 2293, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.10492967445159627, "compression_ratio": 1.6271186440677967, "no_caption_prob": 2.2124959286884405e-05}, {"id": 67, "seek": 30300, "start": 308.0, "end": 315.0, "text": " All right. So with the JSON decoder, you always say, I want this field and I assume that it's a string.", "tokens": [50364, 407, 309, 1542, 257, 688, 411, 2390, 493, 257, 31828, 979, 19866, 293, 550, 7750, 309, 365, 33283, 13, 50614, 50614, 1057, 558, 13, 407, 365, 264, 31828, 979, 19866, 11, 291, 1009, 584, 11, 286, 528, 341, 2519, 293, 286, 6552, 300, 309, 311, 257, 6798, 13, 50964, 50964, 583, 437, 291, 434, 1566, 510, 307, 291, 584, 11, 286, 528, 341, 2519, 293, 294, 21884, 13695, 486, 731, 11, 2699, 76, 21884, 13695, 486, 980, 291, 341, 307, 257, 2010, 300, 307, 5176, 13, 51414, 51414, 509, 500, 380, 362, 281, 16500, 309, 1803, 13, 51514, 51514, 7587, 11, 2293, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.10492967445159627, "compression_ratio": 1.6271186440677967, "no_caption_prob": 2.2124959286884405e-05}, {"id": 68, "seek": 30300, "start": 315.0, "end": 324.0, "text": " But what you're saying here is you say, I want this field and in GraphQL will well, Elm GraphQL will tell you this is a type that is expected.", "tokens": [50364, 407, 309, 1542, 257, 688, 411, 2390, 493, 257, 31828, 979, 19866, 293, 550, 7750, 309, 365, 33283, 13, 50614, 50614, 1057, 558, 13, 407, 365, 264, 31828, 979, 19866, 11, 291, 1009, 584, 11, 286, 528, 341, 2519, 293, 286, 6552, 300, 309, 311, 257, 6798, 13, 50964, 50964, 583, 437, 291, 434, 1566, 510, 307, 291, 584, 11, 286, 528, 341, 2519, 293, 294, 21884, 13695, 486, 731, 11, 2699, 76, 21884, 13695, 486, 980, 291, 341, 307, 257, 2010, 300, 307, 5176, 13, 51414, 51414, 509, 500, 380, 362, 281, 16500, 309, 1803, 13, 51514, 51514, 7587, 11, 2293, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.10492967445159627, "compression_ratio": 1.6271186440677967, "no_caption_prob": 2.2124959286884405e-05}, {"id": 69, "seek": 30300, "start": 324.0, "end": 326.0, "text": " You don't have to specify it yourself.", "tokens": [50364, 407, 309, 1542, 257, 688, 411, 2390, 493, 257, 31828, 979, 19866, 293, 550, 7750, 309, 365, 33283, 13, 50614, 50614, 1057, 558, 13, 407, 365, 264, 31828, 979, 19866, 11, 291, 1009, 584, 11, 286, 528, 341, 2519, 293, 286, 6552, 300, 309, 311, 257, 6798, 13, 50964, 50964, 583, 437, 291, 434, 1566, 510, 307, 291, 584, 11, 286, 528, 341, 2519, 293, 294, 21884, 13695, 486, 731, 11, 2699, 76, 21884, 13695, 486, 980, 291, 341, 307, 257, 2010, 300, 307, 5176, 13, 51414, 51414, 509, 500, 380, 362, 281, 16500, 309, 1803, 13, 51514, 51514, 7587, 11, 2293, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.10492967445159627, "compression_ratio": 1.6271186440677967, "no_caption_prob": 2.2124959286884405e-05}, {"id": 70, "seek": 30300, "start": 326.0, "end": 327.0, "text": " Exactly, exactly.", "tokens": [50364, 407, 309, 1542, 257, 688, 411, 2390, 493, 257, 31828, 979, 19866, 293, 550, 7750, 309, 365, 33283, 13, 50614, 50614, 1057, 558, 13, 407, 365, 264, 31828, 979, 19866, 11, 291, 1009, 584, 11, 286, 528, 341, 2519, 293, 286, 6552, 300, 309, 311, 257, 6798, 13, 50964, 50964, 583, 437, 291, 434, 1566, 510, 307, 291, 584, 11, 286, 528, 341, 2519, 293, 294, 21884, 13695, 486, 731, 11, 2699, 76, 21884, 13695, 486, 980, 291, 341, 307, 257, 2010, 300, 307, 5176, 13, 51414, 51414, 509, 500, 380, 362, 281, 16500, 309, 1803, 13, 51514, 51514, 7587, 11, 2293, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.10492967445159627, "compression_ratio": 1.6271186440677967, "no_caption_prob": 2.2124959286884405e-05}, {"id": 71, "seek": 32700, "start": 327.0, "end": 336.0, "text": " So maybe to compare, if we were getting an object from a REST endpoint that had a person with a first name and a last name,", "tokens": [50364, 407, 1310, 281, 6794, 11, 498, 321, 645, 1242, 364, 2657, 490, 257, 497, 14497, 35795, 300, 632, 257, 954, 365, 257, 700, 1315, 293, 257, 1036, 1315, 11, 50814, 50814, 550, 291, 576, 1310, 360, 979, 1429, 13, 24223, 13342, 293, 550, 979, 1429, 300, 294, 13, 51114, 51114, 509, 1116, 976, 257, 47479, 337, 257, 954, 2010, 419, 4609, 2136, 11, 597, 575, 257, 6798, 700, 1315, 11, 6798, 1036, 1315, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.12105259528526893, "compression_ratio": 1.5561497326203209, "no_caption_prob": 3.0240951673476957e-05}, {"id": 72, "seek": 32700, "start": 336.0, "end": 342.0, "text": " then you would maybe do decode.mapTo and then decode that in.", "tokens": [50364, 407, 1310, 281, 6794, 11, 498, 321, 645, 1242, 364, 2657, 490, 257, 497, 14497, 35795, 300, 632, 257, 954, 365, 257, 700, 1315, 293, 257, 1036, 1315, 11, 50814, 50814, 550, 291, 576, 1310, 360, 979, 1429, 13, 24223, 13342, 293, 550, 979, 1429, 300, 294, 13, 51114, 51114, 509, 1116, 976, 257, 47479, 337, 257, 954, 2010, 419, 4609, 2136, 11, 597, 575, 257, 6798, 700, 1315, 11, 6798, 1036, 1315, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.12105259528526893, "compression_ratio": 1.5561497326203209, "no_caption_prob": 3.0240951673476957e-05}, {"id": 73, "seek": 32700, "start": 342.0, "end": 349.0, "text": " You'd give a constructor for a person type alias record, which has a string first name, string last name.", "tokens": [50364, 407, 1310, 281, 6794, 11, 498, 321, 645, 1242, 364, 2657, 490, 257, 497, 14497, 35795, 300, 632, 257, 954, 365, 257, 700, 1315, 293, 257, 1036, 1315, 11, 50814, 50814, 550, 291, 576, 1310, 360, 979, 1429, 13, 24223, 13342, 293, 550, 979, 1429, 300, 294, 13, 51114, 51114, 509, 1116, 976, 257, 47479, 337, 257, 954, 2010, 419, 4609, 2136, 11, 597, 575, 257, 6798, 700, 1315, 11, 6798, 1036, 1315, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.12105259528526893, "compression_ratio": 1.5561497326203209, "no_caption_prob": 3.0240951673476957e-05}, {"id": 74, "seek": 34900, "start": 349.0, "end": 359.0, "text": " Then you would do you'd have decode.fieldFirst, decode.string, and then you'd have decode.fieldLast, decode.string.", "tokens": [50364, 1396, 291, 576, 360, 291, 1116, 362, 979, 1429, 13, 7610, 27454, 11, 979, 1429, 13, 37045, 11, 293, 550, 291, 1116, 362, 979, 1429, 13, 7610, 42385, 11, 979, 1429, 13, 37045, 13, 50864, 50864, 407, 291, 434, 767, 562, 291, 434, 884, 300, 11, 291, 434, 26688, 2940, 17695, 13, 51064, 51064, 509, 434, 26688, 264, 15302, 300, 309, 311, 516, 281, 2514, 412, 341, 1496, 833, 746, 1219, 2519, 11, 833, 257, 2519, 1219, 700, 293, 257, 2519, 1219, 1036, 13, 51564, 51564, 400, 264, 2010, 295, 729, 4190, 366, 516, 281, 312, 6798, 293, 436, 434, 406, 516, 281, 312, 18184, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.07977235967462713, "compression_ratio": 1.959090909090909, "no_caption_prob": 2.5866729629342444e-05}, {"id": 75, "seek": 34900, "start": 359.0, "end": 363.0, "text": " So you're actually when you're doing that, you're stating several assumptions.", "tokens": [50364, 1396, 291, 576, 360, 291, 1116, 362, 979, 1429, 13, 7610, 27454, 11, 979, 1429, 13, 37045, 11, 293, 550, 291, 1116, 362, 979, 1429, 13, 7610, 42385, 11, 979, 1429, 13, 37045, 13, 50864, 50864, 407, 291, 434, 767, 562, 291, 434, 884, 300, 11, 291, 434, 26688, 2940, 17695, 13, 51064, 51064, 509, 434, 26688, 264, 15302, 300, 309, 311, 516, 281, 2514, 412, 341, 1496, 833, 746, 1219, 2519, 11, 833, 257, 2519, 1219, 700, 293, 257, 2519, 1219, 1036, 13, 51564, 51564, 400, 264, 2010, 295, 729, 4190, 366, 516, 281, 312, 6798, 293, 436, 434, 406, 516, 281, 312, 18184, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.07977235967462713, "compression_ratio": 1.959090909090909, "no_caption_prob": 2.5866729629342444e-05}, {"id": 76, "seek": 34900, "start": 363.0, "end": 373.0, "text": " You're stating the assumption that it's going to exist at this level under something called field, under a field called first and a field called last.", "tokens": [50364, 1396, 291, 576, 360, 291, 1116, 362, 979, 1429, 13, 7610, 27454, 11, 979, 1429, 13, 37045, 11, 293, 550, 291, 1116, 362, 979, 1429, 13, 7610, 42385, 11, 979, 1429, 13, 37045, 13, 50864, 50864, 407, 291, 434, 767, 562, 291, 434, 884, 300, 11, 291, 434, 26688, 2940, 17695, 13, 51064, 51064, 509, 434, 26688, 264, 15302, 300, 309, 311, 516, 281, 2514, 412, 341, 1496, 833, 746, 1219, 2519, 11, 833, 257, 2519, 1219, 700, 293, 257, 2519, 1219, 1036, 13, 51564, 51564, 400, 264, 2010, 295, 729, 4190, 366, 516, 281, 312, 6798, 293, 436, 434, 406, 516, 281, 312, 18184, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.07977235967462713, "compression_ratio": 1.959090909090909, "no_caption_prob": 2.5866729629342444e-05}, {"id": 77, "seek": 34900, "start": 373.0, "end": 377.0, "text": " And the type of those values are going to be string and they're not going to be null.", "tokens": [50364, 1396, 291, 576, 360, 291, 1116, 362, 979, 1429, 13, 7610, 27454, 11, 979, 1429, 13, 37045, 11, 293, 550, 291, 1116, 362, 979, 1429, 13, 7610, 42385, 11, 979, 1429, 13, 37045, 13, 50864, 50864, 407, 291, 434, 767, 562, 291, 434, 884, 300, 11, 291, 434, 26688, 2940, 17695, 13, 51064, 51064, 509, 434, 26688, 264, 15302, 300, 309, 311, 516, 281, 2514, 412, 341, 1496, 833, 746, 1219, 2519, 11, 833, 257, 2519, 1219, 700, 293, 257, 2519, 1219, 1036, 13, 51564, 51564, 400, 264, 2010, 295, 729, 4190, 366, 516, 281, 312, 6798, 293, 436, 434, 406, 516, 281, 312, 18184, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.07977235967462713, "compression_ratio": 1.959090909090909, "no_caption_prob": 2.5866729629342444e-05}, {"id": 78, "seek": 37700, "start": 377.0, "end": 380.0, "text": " And so you're stating several assumptions there.", "tokens": [50364, 400, 370, 291, 434, 26688, 2940, 17695, 456, 13, 50514, 50514, 400, 498, 604, 295, 729, 17695, 366, 18424, 11, 550, 291, 483, 257, 979, 19866, 6713, 11, 597, 307, 3476, 13, 50814, 50814, 492, 600, 7152, 300, 322, 527, 31828, 979, 378, 433, 3500, 300, 300, 311, 364, 3476, 4111, 295, 2699, 76, 300, 309, 393, 3061, 2370, 51214, 51214, 2602, 295, 1242, 636, 666, 264, 1400, 14235, 295, 428, 3861, 293, 2902, 291, 257, 13831, 6713, 13, 51564, 51564, 1042, 11, 309, 311, 1101, 813, 281, 362, 257, 979, 8616, 6713, 813, 281, 362, 257, 34474, 6713, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.05846460507466243, "compression_ratio": 1.6796875, "no_caption_prob": 5.307193714543246e-05}, {"id": 79, "seek": 37700, "start": 380.0, "end": 386.0, "text": " And if any of those assumptions are incorrect, then you get a decoder error, which is awesome.", "tokens": [50364, 400, 370, 291, 434, 26688, 2940, 17695, 456, 13, 50514, 50514, 400, 498, 604, 295, 729, 17695, 366, 18424, 11, 550, 291, 483, 257, 979, 19866, 6713, 11, 597, 307, 3476, 13, 50814, 50814, 492, 600, 7152, 300, 322, 527, 31828, 979, 378, 433, 3500, 300, 300, 311, 364, 3476, 4111, 295, 2699, 76, 300, 309, 393, 3061, 2370, 51214, 51214, 2602, 295, 1242, 636, 666, 264, 1400, 14235, 295, 428, 3861, 293, 2902, 291, 257, 13831, 6713, 13, 51564, 51564, 1042, 11, 309, 311, 1101, 813, 281, 362, 257, 979, 8616, 6713, 813, 281, 362, 257, 34474, 6713, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.05846460507466243, "compression_ratio": 1.6796875, "no_caption_prob": 5.307193714543246e-05}, {"id": 80, "seek": 37700, "start": 386.0, "end": 394.0, "text": " We've discussed that on our JSON decoders episode that that's an awesome feature of Elm that it can fail fast", "tokens": [50364, 400, 370, 291, 434, 26688, 2940, 17695, 456, 13, 50514, 50514, 400, 498, 604, 295, 729, 17695, 366, 18424, 11, 550, 291, 483, 257, 979, 19866, 6713, 11, 597, 307, 3476, 13, 50814, 50814, 492, 600, 7152, 300, 322, 527, 31828, 979, 378, 433, 3500, 300, 300, 311, 364, 3476, 4111, 295, 2699, 76, 300, 309, 393, 3061, 2370, 51214, 51214, 2602, 295, 1242, 636, 666, 264, 1400, 14235, 295, 428, 3861, 293, 2902, 291, 257, 13831, 6713, 13, 51564, 51564, 1042, 11, 309, 311, 1101, 813, 281, 362, 257, 979, 8616, 6713, 813, 281, 362, 257, 34474, 6713, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.05846460507466243, "compression_ratio": 1.6796875, "no_caption_prob": 5.307193714543246e-05}, {"id": 81, "seek": 37700, "start": 394.0, "end": 401.0, "text": " instead of getting way into the far reaches of your application and giving you a mysterious error.", "tokens": [50364, 400, 370, 291, 434, 26688, 2940, 17695, 456, 13, 50514, 50514, 400, 498, 604, 295, 729, 17695, 366, 18424, 11, 550, 291, 483, 257, 979, 19866, 6713, 11, 597, 307, 3476, 13, 50814, 50814, 492, 600, 7152, 300, 322, 527, 31828, 979, 378, 433, 3500, 300, 300, 311, 364, 3476, 4111, 295, 2699, 76, 300, 309, 393, 3061, 2370, 51214, 51214, 2602, 295, 1242, 636, 666, 264, 1400, 14235, 295, 428, 3861, 293, 2902, 291, 257, 13831, 6713, 13, 51564, 51564, 1042, 11, 309, 311, 1101, 813, 281, 362, 257, 979, 8616, 6713, 813, 281, 362, 257, 34474, 6713, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.05846460507466243, "compression_ratio": 1.6796875, "no_caption_prob": 5.307193714543246e-05}, {"id": 82, "seek": 37700, "start": 401.0, "end": 406.0, "text": " Well, it's better than to have a decoding error than to have a runtime error.", "tokens": [50364, 400, 370, 291, 434, 26688, 2940, 17695, 456, 13, 50514, 50514, 400, 498, 604, 295, 729, 17695, 366, 18424, 11, 550, 291, 483, 257, 979, 19866, 6713, 11, 597, 307, 3476, 13, 50814, 50814, 492, 600, 7152, 300, 322, 527, 31828, 979, 378, 433, 3500, 300, 300, 311, 364, 3476, 4111, 295, 2699, 76, 300, 309, 393, 3061, 2370, 51214, 51214, 2602, 295, 1242, 636, 666, 264, 1400, 14235, 295, 428, 3861, 293, 2902, 291, 257, 13831, 6713, 13, 51564, 51564, 1042, 11, 309, 311, 1101, 813, 281, 362, 257, 979, 8616, 6713, 813, 281, 362, 257, 34474, 6713, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.05846460507466243, "compression_ratio": 1.6796875, "no_caption_prob": 5.307193714543246e-05}, {"id": 83, "seek": 40600, "start": 406.0, "end": 413.0, "text": " Exactly. Where you sort of core some type and you add it to something and you're like, how did this turn into null or why is this empty string?", "tokens": [50364, 7587, 13, 2305, 291, 1333, 295, 4965, 512, 2010, 293, 291, 909, 309, 281, 746, 293, 291, 434, 411, 11, 577, 630, 341, 1261, 666, 18184, 420, 983, 307, 341, 6707, 6798, 30, 50714, 50714, 663, 311, 869, 13, 583, 498, 321, 362, 257, 34078, 300, 15626, 527, 2302, 9362, 11, 321, 393, 360, 1101, 13, 51014, 51014, 400, 300, 311, 300, 311, 264, 3387, 295, 2699, 76, 21884, 13695, 307, 437, 498, 321, 727, 458, 300, 729, 17695, 645, 3006, 30, 51314, 51314, 1726, 562, 321, 1190, 264, 979, 19866, 11, 457, 562, 321, 31413, 11, 309, 486, 767, 980, 505, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.07691041999888197, "compression_ratio": 1.5355805243445693, "no_caption_prob": 2.5466095394222066e-05}, {"id": 84, "seek": 40600, "start": 413.0, "end": 419.0, "text": " That's great. But if we have a schema that describes our entire API, we can do better.", "tokens": [50364, 7587, 13, 2305, 291, 1333, 295, 4965, 512, 2010, 293, 291, 909, 309, 281, 746, 293, 291, 434, 411, 11, 577, 630, 341, 1261, 666, 18184, 420, 983, 307, 341, 6707, 6798, 30, 50714, 50714, 663, 311, 869, 13, 583, 498, 321, 362, 257, 34078, 300, 15626, 527, 2302, 9362, 11, 321, 393, 360, 1101, 13, 51014, 51014, 400, 300, 311, 300, 311, 264, 3387, 295, 2699, 76, 21884, 13695, 307, 437, 498, 321, 727, 458, 300, 729, 17695, 645, 3006, 30, 51314, 51314, 1726, 562, 321, 1190, 264, 979, 19866, 11, 457, 562, 321, 31413, 11, 309, 486, 767, 980, 505, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.07691041999888197, "compression_ratio": 1.5355805243445693, "no_caption_prob": 2.5466095394222066e-05}, {"id": 85, "seek": 40600, "start": 419.0, "end": 425.0, "text": " And that's that's the goal of Elm GraphQL is what if we could know that those assumptions were correct?", "tokens": [50364, 7587, 13, 2305, 291, 1333, 295, 4965, 512, 2010, 293, 291, 909, 309, 281, 746, 293, 291, 434, 411, 11, 577, 630, 341, 1261, 666, 18184, 420, 983, 307, 341, 6707, 6798, 30, 50714, 50714, 663, 311, 869, 13, 583, 498, 321, 362, 257, 34078, 300, 15626, 527, 2302, 9362, 11, 321, 393, 360, 1101, 13, 51014, 51014, 400, 300, 311, 300, 311, 264, 3387, 295, 2699, 76, 21884, 13695, 307, 437, 498, 321, 727, 458, 300, 729, 17695, 645, 3006, 30, 51314, 51314, 1726, 562, 321, 1190, 264, 979, 19866, 11, 457, 562, 321, 31413, 11, 309, 486, 767, 980, 505, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.07691041999888197, "compression_ratio": 1.5355805243445693, "no_caption_prob": 2.5466095394222066e-05}, {"id": 86, "seek": 40600, "start": 425.0, "end": 430.0, "text": " Not when we run the decoder, but when we compile, it will actually tell us.", "tokens": [50364, 7587, 13, 2305, 291, 1333, 295, 4965, 512, 2010, 293, 291, 909, 309, 281, 746, 293, 291, 434, 411, 11, 577, 630, 341, 1261, 666, 18184, 420, 983, 307, 341, 6707, 6798, 30, 50714, 50714, 663, 311, 869, 13, 583, 498, 321, 362, 257, 34078, 300, 15626, 527, 2302, 9362, 11, 321, 393, 360, 1101, 13, 51014, 51014, 400, 300, 311, 300, 311, 264, 3387, 295, 2699, 76, 21884, 13695, 307, 437, 498, 321, 727, 458, 300, 729, 17695, 645, 3006, 30, 51314, 51314, 1726, 562, 321, 1190, 264, 979, 19866, 11, 457, 562, 321, 31413, 11, 309, 486, 767, 980, 505, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.07691041999888197, "compression_ratio": 1.5355805243445693, "no_caption_prob": 2.5466095394222066e-05}, {"id": 87, "seek": 43000, "start": 430.0, "end": 436.0, "text": " And so so what would that query to get a person's first and last name look like in Elm GraphQL?", "tokens": [50364, 400, 370, 370, 437, 576, 300, 14581, 281, 483, 257, 954, 311, 700, 293, 1036, 1315, 574, 411, 294, 2699, 76, 21884, 13695, 30, 50664, 50664, 1042, 11, 294, 257, 37711, 11, 264, 636, 291, 1322, 493, 300, 979, 19866, 11, 264, 9450, 992, 337, 300, 954, 576, 574, 411, 2602, 295, 979, 1429, 5893, 4471, 281, 291, 727, 722, 365, 9450, 992, 5893, 4471, 281, 13, 51264, 51264, 400, 550, 291, 976, 264, 954, 47479, 293, 550, 291, 362, 954, 5893, 700, 954, 5893, 1036, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.10410806634923914, "compression_ratio": 1.7535545023696681, "no_caption_prob": 0.00026116662775166333}, {"id": 88, "seek": 43000, "start": 436.0, "end": 448.0, "text": " Well, in a nutshell, the way you build up that decoder, the selection set for that person would look like instead of decode dot map to you could start with selection set dot map to.", "tokens": [50364, 400, 370, 370, 437, 576, 300, 14581, 281, 483, 257, 954, 311, 700, 293, 1036, 1315, 574, 411, 294, 2699, 76, 21884, 13695, 30, 50664, 50664, 1042, 11, 294, 257, 37711, 11, 264, 636, 291, 1322, 493, 300, 979, 19866, 11, 264, 9450, 992, 337, 300, 954, 576, 574, 411, 2602, 295, 979, 1429, 5893, 4471, 281, 291, 727, 722, 365, 9450, 992, 5893, 4471, 281, 13, 51264, 51264, 400, 550, 291, 976, 264, 954, 47479, 293, 550, 291, 362, 954, 5893, 700, 954, 5893, 1036, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.10410806634923914, "compression_ratio": 1.7535545023696681, "no_caption_prob": 0.00026116662775166333}, {"id": 89, "seek": 43000, "start": 448.0, "end": 456.0, "text": " And then you give the person constructor and then you have person dot first person dot last.", "tokens": [50364, 400, 370, 370, 437, 576, 300, 14581, 281, 483, 257, 954, 311, 700, 293, 1036, 1315, 574, 411, 294, 2699, 76, 21884, 13695, 30, 50664, 50664, 1042, 11, 294, 257, 37711, 11, 264, 636, 291, 1322, 493, 300, 979, 19866, 11, 264, 9450, 992, 337, 300, 954, 576, 574, 411, 2602, 295, 979, 1429, 5893, 4471, 281, 291, 727, 722, 365, 9450, 992, 5893, 4471, 281, 13, 51264, 51264, 400, 550, 291, 976, 264, 954, 47479, 293, 550, 291, 362, 954, 5893, 700, 954, 5893, 1036, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.10410806634923914, "compression_ratio": 1.7535545023696681, "no_caption_prob": 0.00026116662775166333}, {"id": 90, "seek": 45600, "start": 456.0, "end": 468.0, "text": " Now, what is person? Person is generated code from Elm GraphQL and it's going to have something called API dot object dot person.", "tokens": [50364, 823, 11, 437, 307, 954, 30, 8443, 307, 10833, 3089, 490, 2699, 76, 21884, 13695, 293, 309, 311, 516, 281, 362, 746, 1219, 9362, 5893, 2657, 5893, 954, 13, 50964, 50964, 663, 10088, 307, 516, 281, 5304, 257, 1192, 1496, 2158, 1219, 700, 11, 597, 307, 257, 9450, 992, 295, 2010, 6798, 13, 51314, 51314, 3013, 486, 14581, 264, 700, 2519, 294, 257, 954, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.08112898425779481, "compression_ratio": 1.450777202072539, "no_caption_prob": 0.00010889265104196966}, {"id": 91, "seek": 45600, "start": 468.0, "end": 475.0, "text": " That module is going to contain a top level value called first, which is a selection set of type string.", "tokens": [50364, 823, 11, 437, 307, 954, 30, 8443, 307, 10833, 3089, 490, 2699, 76, 21884, 13695, 293, 309, 311, 516, 281, 362, 746, 1219, 9362, 5893, 2657, 5893, 954, 13, 50964, 50964, 663, 10088, 307, 516, 281, 5304, 257, 1192, 1496, 2158, 1219, 700, 11, 597, 307, 257, 9450, 992, 295, 2010, 6798, 13, 51314, 51314, 3013, 486, 14581, 264, 700, 2519, 294, 257, 954, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.08112898425779481, "compression_ratio": 1.450777202072539, "no_caption_prob": 0.00010889265104196966}, {"id": 92, "seek": 45600, "start": 475.0, "end": 480.0, "text": " Which will query the first field in a person.", "tokens": [50364, 823, 11, 437, 307, 954, 30, 8443, 307, 10833, 3089, 490, 2699, 76, 21884, 13695, 293, 309, 311, 516, 281, 362, 746, 1219, 9362, 5893, 2657, 5893, 954, 13, 50964, 50964, 663, 10088, 307, 516, 281, 5304, 257, 1192, 1496, 2158, 1219, 700, 11, 597, 307, 257, 9450, 992, 295, 2010, 6798, 13, 51314, 51314, 3013, 486, 14581, 264, 700, 2519, 294, 257, 954, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.08112898425779481, "compression_ratio": 1.450777202072539, "no_caption_prob": 0.00010889265104196966}, {"id": 93, "seek": 48000, "start": 480.0, "end": 487.0, "text": " Exactly. It contains all of those things that we were making assumptions about when we were writing our JSON decoder.", "tokens": [50364, 7587, 13, 467, 8306, 439, 295, 729, 721, 300, 321, 645, 1455, 17695, 466, 562, 321, 645, 3579, 527, 31828, 979, 19866, 13, 50714, 50714, 467, 8306, 300, 1589, 13, 467, 3255, 309, 3255, 577, 281, 309, 3255, 689, 309, 311, 516, 281, 915, 300, 1412, 300, 1487, 646, 490, 264, 7154, 562, 309, 1487, 646, 13, 51164, 51164, 400, 309, 3255, 577, 281, 309, 3255, 437, 264, 14217, 1412, 2010, 307, 516, 281, 312, 13, 51364, 51364, 400, 321, 611, 764, 309, 281, 2845, 766, 264, 14581, 13, 583, 729, 17695, 366, 572, 2854, 17695, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.062363317697355064, "compression_ratio": 1.8547008547008548, "no_caption_prob": 0.00013551284791901708}, {"id": 94, "seek": 48000, "start": 487.0, "end": 496.0, "text": " It contains that information. It knows it knows how to it knows where it's going to find that data that comes back from the server when it comes back.", "tokens": [50364, 7587, 13, 467, 8306, 439, 295, 729, 721, 300, 321, 645, 1455, 17695, 466, 562, 321, 645, 3579, 527, 31828, 979, 19866, 13, 50714, 50714, 467, 8306, 300, 1589, 13, 467, 3255, 309, 3255, 577, 281, 309, 3255, 689, 309, 311, 516, 281, 915, 300, 1412, 300, 1487, 646, 490, 264, 7154, 562, 309, 1487, 646, 13, 51164, 51164, 400, 309, 3255, 577, 281, 309, 3255, 437, 264, 14217, 1412, 2010, 307, 516, 281, 312, 13, 51364, 51364, 400, 321, 611, 764, 309, 281, 2845, 766, 264, 14581, 13, 583, 729, 17695, 366, 572, 2854, 17695, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.062363317697355064, "compression_ratio": 1.8547008547008548, "no_caption_prob": 0.00013551284791901708}, {"id": 95, "seek": 48000, "start": 496.0, "end": 500.0, "text": " And it knows how to it knows what the underlying data type is going to be.", "tokens": [50364, 7587, 13, 467, 8306, 439, 295, 729, 721, 300, 321, 645, 1455, 17695, 466, 562, 321, 645, 3579, 527, 31828, 979, 19866, 13, 50714, 50714, 467, 8306, 300, 1589, 13, 467, 3255, 309, 3255, 577, 281, 309, 3255, 689, 309, 311, 516, 281, 915, 300, 1412, 300, 1487, 646, 490, 264, 7154, 562, 309, 1487, 646, 13, 51164, 51164, 400, 309, 3255, 577, 281, 309, 3255, 437, 264, 14217, 1412, 2010, 307, 516, 281, 312, 13, 51364, 51364, 400, 321, 611, 764, 309, 281, 2845, 766, 264, 14581, 13, 583, 729, 17695, 366, 572, 2854, 17695, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.062363317697355064, "compression_ratio": 1.8547008547008548, "no_caption_prob": 0.00013551284791901708}, {"id": 96, "seek": 48000, "start": 500.0, "end": 506.0, "text": " And we also use it to send off the query. But those assumptions are no longer assumptions.", "tokens": [50364, 7587, 13, 467, 8306, 439, 295, 729, 721, 300, 321, 645, 1455, 17695, 466, 562, 321, 645, 3579, 527, 31828, 979, 19866, 13, 50714, 50714, 467, 8306, 300, 1589, 13, 467, 3255, 309, 3255, 577, 281, 309, 3255, 689, 309, 311, 516, 281, 915, 300, 1412, 300, 1487, 646, 490, 264, 7154, 562, 309, 1487, 646, 13, 51164, 51164, 400, 309, 3255, 577, 281, 309, 3255, 437, 264, 14217, 1412, 2010, 307, 516, 281, 312, 13, 51364, 51364, 400, 321, 611, 764, 309, 281, 2845, 766, 264, 14581, 13, 583, 729, 17695, 366, 572, 2854, 17695, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.062363317697355064, "compression_ratio": 1.8547008547008548, "no_caption_prob": 0.00013551284791901708}, {"id": 97, "seek": 50600, "start": 506.0, "end": 511.0, "text": " Those are that knowledge that is contained in the generated code.", "tokens": [50364, 3950, 366, 300, 3601, 300, 307, 16212, 294, 264, 10833, 3089, 13, 50614, 50614, 865, 11, 286, 519, 300, 382, 2699, 76, 8849, 11, 321, 534, 528, 281, 1286, 721, 281, 281, 312, 31958, 13603, 2831, 813, 34474, 13603, 420, 979, 19866, 13603, 420, 445, 7908, 17695, 300, 291, 362, 281, 4813, 309, 512, 636, 13, 51264, 51264, 400, 286, 841, 411, 2699, 76, 21884, 13695, 390, 472, 281, 385, 11, 412, 1935, 472, 295, 264, 1326, 300, 19761, 4073, 2010, 3273, 21445, 300, 366, 10833, 281, 312, 300, 636, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.09478132348311574, "compression_ratio": 1.6178861788617886, "no_caption_prob": 8.614257239969447e-05}, {"id": 98, "seek": 50600, "start": 511.0, "end": 524.0, "text": " Yeah, I think that as Elm developers, we really want to move things to to be compiler errors rather than runtime errors or decoder errors or just false assumptions that you have to handle it some way.", "tokens": [50364, 3950, 366, 300, 3601, 300, 307, 16212, 294, 264, 10833, 3089, 13, 50614, 50614, 865, 11, 286, 519, 300, 382, 2699, 76, 8849, 11, 321, 534, 528, 281, 1286, 721, 281, 281, 312, 31958, 13603, 2831, 813, 34474, 13603, 420, 979, 19866, 13603, 420, 445, 7908, 17695, 300, 291, 362, 281, 4813, 309, 512, 636, 13, 51264, 51264, 400, 286, 841, 411, 2699, 76, 21884, 13695, 390, 472, 281, 385, 11, 412, 1935, 472, 295, 264, 1326, 300, 19761, 4073, 2010, 3273, 21445, 300, 366, 10833, 281, 312, 300, 636, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.09478132348311574, "compression_ratio": 1.6178861788617886, "no_caption_prob": 8.614257239969447e-05}, {"id": 99, "seek": 50600, "start": 524.0, "end": 534.0, "text": " And I feel like Elm GraphQL was one to me, at least one of the few that pioneered type safe APIs that are generated to be that way.", "tokens": [50364, 3950, 366, 300, 3601, 300, 307, 16212, 294, 264, 10833, 3089, 13, 50614, 50614, 865, 11, 286, 519, 300, 382, 2699, 76, 8849, 11, 321, 534, 528, 281, 1286, 721, 281, 281, 312, 31958, 13603, 2831, 813, 34474, 13603, 420, 979, 19866, 13603, 420, 445, 7908, 17695, 300, 291, 362, 281, 4813, 309, 512, 636, 13, 51264, 51264, 400, 286, 841, 411, 2699, 76, 21884, 13695, 390, 472, 281, 385, 11, 412, 1935, 472, 295, 264, 1326, 300, 19761, 4073, 2010, 3273, 21445, 300, 366, 10833, 281, 312, 300, 636, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.09478132348311574, "compression_ratio": 1.6178861788617886, "no_caption_prob": 8.614257239969447e-05}, {"id": 100, "seek": 53400, "start": 534.0, "end": 539.0, "text": " Yeah, it's been cool to see like there definitely been some innovations that use code generation.", "tokens": [50364, 865, 11, 309, 311, 668, 1627, 281, 536, 411, 456, 2138, 668, 512, 24283, 300, 764, 3089, 5125, 13, 50614, 50614, 400, 286, 600, 1612, 512, 411, 818, 14758, 281, 2699, 76, 21884, 13695, 13, 50764, 50764, 400, 286, 519, 300, 264, 9274, 295, 21884, 13695, 390, 31421, 337, 512, 1333, 295, 1481, 10980, 365, 2699, 76, 570, 309, 311, 445, 291, 600, 658, 341, 2010, 1589, 13, 51314, 51314, 467, 311, 456, 13, 467, 311, 411, 11, 291, 458, 11, 498, 291, 498, 291, 2235, 493, 264, 15141, 411, 21884, 13695, 14581, 4910, 11, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.08298437523119377, "compression_ratio": 1.6724137931034482, "no_caption_prob": 5.0639526307350025e-05}, {"id": 101, "seek": 53400, "start": 539.0, "end": 542.0, "text": " And I've seen some like call outs to Elm GraphQL.", "tokens": [50364, 865, 11, 309, 311, 668, 1627, 281, 536, 411, 456, 2138, 668, 512, 24283, 300, 764, 3089, 5125, 13, 50614, 50614, 400, 286, 600, 1612, 512, 411, 818, 14758, 281, 2699, 76, 21884, 13695, 13, 50764, 50764, 400, 286, 519, 300, 264, 9274, 295, 21884, 13695, 390, 31421, 337, 512, 1333, 295, 1481, 10980, 365, 2699, 76, 570, 309, 311, 445, 291, 600, 658, 341, 2010, 1589, 13, 51314, 51314, 467, 311, 456, 13, 467, 311, 411, 11, 291, 458, 11, 498, 291, 498, 291, 2235, 493, 264, 15141, 411, 21884, 13695, 14581, 4910, 11, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.08298437523119377, "compression_ratio": 1.6724137931034482, "no_caption_prob": 5.0639526307350025e-05}, {"id": 102, "seek": 53400, "start": 542.0, "end": 553.0, "text": " And I think that the domain of GraphQL was ripe for some sort of nice integration with Elm because it's just you've got this type information.", "tokens": [50364, 865, 11, 309, 311, 668, 1627, 281, 536, 411, 456, 2138, 668, 512, 24283, 300, 764, 3089, 5125, 13, 50614, 50614, 400, 286, 600, 1612, 512, 411, 818, 14758, 281, 2699, 76, 21884, 13695, 13, 50764, 50764, 400, 286, 519, 300, 264, 9274, 295, 21884, 13695, 390, 31421, 337, 512, 1333, 295, 1481, 10980, 365, 2699, 76, 570, 309, 311, 445, 291, 600, 658, 341, 2010, 1589, 13, 51314, 51314, 467, 311, 456, 13, 467, 311, 411, 11, 291, 458, 11, 498, 291, 498, 291, 2235, 493, 264, 15141, 411, 21884, 13695, 14581, 4910, 11, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.08298437523119377, "compression_ratio": 1.6724137931034482, "no_caption_prob": 5.0639526307350025e-05}, {"id": 103, "seek": 53400, "start": 553.0, "end": 560.0, "text": " It's there. It's like, you know, if you if you pull up the interactive like GraphQL query window,", "tokens": [50364, 865, 11, 309, 311, 668, 1627, 281, 536, 411, 456, 2138, 668, 512, 24283, 300, 764, 3089, 5125, 13, 50614, 50614, 400, 286, 600, 1612, 512, 411, 818, 14758, 281, 2699, 76, 21884, 13695, 13, 50764, 50764, 400, 286, 519, 300, 264, 9274, 295, 21884, 13695, 390, 31421, 337, 512, 1333, 295, 1481, 10980, 365, 2699, 76, 570, 309, 311, 445, 291, 600, 658, 341, 2010, 1589, 13, 51314, 51314, 467, 311, 456, 13, 467, 311, 411, 11, 291, 458, 11, 498, 291, 498, 291, 2235, 493, 264, 15141, 411, 21884, 13695, 14581, 4910, 11, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.08298437523119377, "compression_ratio": 1.6724137931034482, "no_caption_prob": 5.0639526307350025e-05}, {"id": 104, "seek": 56000, "start": 560.0, "end": 569.0, "text": " you get this nice auto completion where it knows what values are there and you can look at the documentation in line and that information is there.", "tokens": [50364, 291, 483, 341, 1481, 8399, 19372, 689, 309, 3255, 437, 4190, 366, 456, 293, 291, 393, 574, 412, 264, 14333, 294, 1622, 293, 300, 1589, 307, 456, 13, 50814, 50814, 400, 1939, 309, 311, 1333, 295, 12005, 294, 341, 819, 1002, 300, 321, 393, 380, 2105, 13, 51064, 51064, 400, 300, 311, 1333, 295, 264, 22045, 295, 264, 751, 286, 2729, 3467, 1553, 16287, 307, 11, 291, 458, 11, 51414, 51414], "temperature": 0.0, "avg_logprob": -0.08447965857100813, "compression_ratio": 1.631578947368421, "no_caption_prob": 2.5465582439210266e-05}, {"id": 105, "seek": 56000, "start": 569.0, "end": 574.0, "text": " And yet it's sort of separated in this different world that we can't access.", "tokens": [50364, 291, 483, 341, 1481, 8399, 19372, 689, 309, 3255, 437, 4190, 366, 456, 293, 291, 393, 574, 412, 264, 14333, 294, 1622, 293, 300, 1589, 307, 456, 13, 50814, 50814, 400, 1939, 309, 311, 1333, 295, 12005, 294, 341, 819, 1002, 300, 321, 393, 380, 2105, 13, 51064, 51064, 400, 300, 311, 1333, 295, 264, 22045, 295, 264, 751, 286, 2729, 3467, 1553, 16287, 307, 11, 291, 458, 11, 51414, 51414], "temperature": 0.0, "avg_logprob": -0.08447965857100813, "compression_ratio": 1.631578947368421, "no_caption_prob": 2.5465582439210266e-05}, {"id": 106, "seek": 56000, "start": 574.0, "end": 581.0, "text": " And that's sort of the premise of the talk I gave types without borders is, you know,", "tokens": [50364, 291, 483, 341, 1481, 8399, 19372, 689, 309, 3255, 437, 4190, 366, 456, 293, 291, 393, 574, 412, 264, 14333, 294, 1622, 293, 300, 1589, 307, 456, 13, 50814, 50814, 400, 1939, 309, 311, 1333, 295, 12005, 294, 341, 819, 1002, 300, 321, 393, 380, 2105, 13, 51064, 51064, 400, 300, 311, 1333, 295, 264, 22045, 295, 264, 751, 286, 2729, 3467, 1553, 16287, 307, 11, 291, 458, 11, 51414, 51414], "temperature": 0.0, "avg_logprob": -0.08447965857100813, "compression_ratio": 1.631578947368421, "no_caption_prob": 2.5465582439210266e-05}, {"id": 107, "seek": 58100, "start": 581.0, "end": 591.0, "text": " you've got this line dividing this beautiful type of information that you'd like to have and why not bring that into the Elm world so we can have access to that information.", "tokens": [50364, 291, 600, 658, 341, 1622, 26764, 341, 2238, 2010, 295, 1589, 300, 291, 1116, 411, 281, 362, 293, 983, 406, 1565, 300, 666, 264, 2699, 76, 1002, 370, 321, 393, 362, 2105, 281, 300, 1589, 13, 50864, 50864, 583, 1338, 11, 382, 291, 584, 11, 300, 311, 21884, 13695, 307, 472, 3861, 295, 300, 1558, 13, 51164, 51164, 583, 300, 1558, 2564, 393, 312, 1143, 294, 370, 867, 2098, 13, 51414, 51414], "temperature": 0.0, "avg_logprob": -0.08277891777657173, "compression_ratio": 1.5502645502645502, "no_caption_prob": 1.863114084699191e-05}, {"id": 108, "seek": 58100, "start": 591.0, "end": 597.0, "text": " But yeah, as you say, that's GraphQL is one application of that idea.", "tokens": [50364, 291, 600, 658, 341, 1622, 26764, 341, 2238, 2010, 295, 1589, 300, 291, 1116, 411, 281, 362, 293, 983, 406, 1565, 300, 666, 264, 2699, 76, 1002, 370, 321, 393, 362, 2105, 281, 300, 1589, 13, 50864, 50864, 583, 1338, 11, 382, 291, 584, 11, 300, 311, 21884, 13695, 307, 472, 3861, 295, 300, 1558, 13, 51164, 51164, 583, 300, 1558, 2564, 393, 312, 1143, 294, 370, 867, 2098, 13, 51414, 51414], "temperature": 0.0, "avg_logprob": -0.08277891777657173, "compression_ratio": 1.5502645502645502, "no_caption_prob": 1.863114084699191e-05}, {"id": 109, "seek": 58100, "start": 597.0, "end": 602.0, "text": " But that idea itself can be used in so many ways.", "tokens": [50364, 291, 600, 658, 341, 1622, 26764, 341, 2238, 2010, 295, 1589, 300, 291, 1116, 411, 281, 362, 293, 983, 406, 1565, 300, 666, 264, 2699, 76, 1002, 370, 321, 393, 362, 2105, 281, 300, 1589, 13, 50864, 50864, 583, 1338, 11, 382, 291, 584, 11, 300, 311, 21884, 13695, 307, 472, 3861, 295, 300, 1558, 13, 51164, 51164, 583, 300, 1558, 2564, 393, 312, 1143, 294, 370, 867, 2098, 13, 51414, 51414], "temperature": 0.0, "avg_logprob": -0.08277891777657173, "compression_ratio": 1.5502645502645502, "no_caption_prob": 1.863114084699191e-05}, {"id": 110, "seek": 60200, "start": 602.0, "end": 617.0, "text": " Yeah, we mentioned that first like person dot first was a selection set function, a function that returns a selection set, which goes to which fetches a first field in a person and is of type string.", "tokens": [50364, 865, 11, 321, 2835, 300, 700, 411, 954, 5893, 700, 390, 257, 9450, 992, 2445, 11, 257, 2445, 300, 11247, 257, 9450, 992, 11, 597, 1709, 281, 597, 15136, 3781, 257, 700, 2519, 294, 257, 954, 293, 307, 295, 2010, 6798, 13, 51114, 51114, 865, 13, 400, 309, 445, 281, 17594, 11, 309, 311, 257, 2158, 294, 300, 1729, 1389, 13, 51364, 51364, 286, 914, 11, 309, 5946, 322, 1968, 309, 575, 12869, 420, 1340, 411, 300, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.0988232566089165, "compression_ratio": 1.6600985221674878, "no_caption_prob": 3.4267461160197854e-05}, {"id": 111, "seek": 60200, "start": 617.0, "end": 622.0, "text": " Yeah. And it just to clarify, it's a value in that particular case.", "tokens": [50364, 865, 11, 321, 2835, 300, 700, 411, 954, 5893, 700, 390, 257, 9450, 992, 2445, 11, 257, 2445, 300, 11247, 257, 9450, 992, 11, 597, 1709, 281, 597, 15136, 3781, 257, 700, 2519, 294, 257, 954, 293, 307, 295, 2010, 6798, 13, 51114, 51114, 865, 13, 400, 309, 445, 281, 17594, 11, 309, 311, 257, 2158, 294, 300, 1729, 1389, 13, 51364, 51364, 286, 914, 11, 309, 5946, 322, 1968, 309, 575, 12869, 420, 1340, 411, 300, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.0988232566089165, "compression_ratio": 1.6600985221674878, "no_caption_prob": 3.4267461160197854e-05}, {"id": 112, "seek": 60200, "start": 622.0, "end": 626.0, "text": " I mean, it depends on whether it has arguments or anything like that.", "tokens": [50364, 865, 11, 321, 2835, 300, 700, 411, 954, 5893, 700, 390, 257, 9450, 992, 2445, 11, 257, 2445, 300, 11247, 257, 9450, 992, 11, 597, 1709, 281, 597, 15136, 3781, 257, 700, 2519, 294, 257, 954, 293, 307, 295, 2010, 6798, 13, 51114, 51114, 865, 13, 400, 309, 445, 281, 17594, 11, 309, 311, 257, 2158, 294, 300, 1729, 1389, 13, 51364, 51364, 286, 914, 11, 309, 5946, 322, 1968, 309, 575, 12869, 420, 1340, 411, 300, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.0988232566089165, "compression_ratio": 1.6600985221674878, "no_caption_prob": 3.4267461160197854e-05}, {"id": 113, "seek": 62600, "start": 626.0, "end": 632.0, "text": " But assuming it has no arguments in the simplest case, it would be a top level value just to use the precise terminology there.", "tokens": [50364, 583, 11926, 309, 575, 572, 12869, 294, 264, 22811, 1389, 11, 309, 576, 312, 257, 1192, 1496, 2158, 445, 281, 764, 264, 13600, 27575, 456, 13, 50664, 50664, 583, 291, 2644, 764, 300, 954, 264, 700, 4079, 1646, 13, 50914, 50914, 509, 393, 787, 764, 309, 562, 291, 1884, 428, 18182, 257, 954, 13, 51164, 51164, 663, 311, 558, 13, 7587, 13, 407, 300, 311, 300, 311, 264, 3410, 295, 257, 11923, 11, 597, 286, 767, 445, 445, 294, 565, 337, 341, 3500, 11, 286, 1027, 257, 14333, 1319, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.058000204410958794, "compression_ratio": 1.5975609756097562, "no_caption_prob": 3.6475274100666866e-05}, {"id": 114, "seek": 62600, "start": 632.0, "end": 637.0, "text": " But you cannot use that person the first somewhere else.", "tokens": [50364, 583, 11926, 309, 575, 572, 12869, 294, 264, 22811, 1389, 11, 309, 576, 312, 257, 1192, 1496, 2158, 445, 281, 764, 264, 13600, 27575, 456, 13, 50664, 50664, 583, 291, 2644, 764, 300, 954, 264, 700, 4079, 1646, 13, 50914, 50914, 509, 393, 787, 764, 309, 562, 291, 1884, 428, 18182, 257, 954, 13, 51164, 51164, 663, 311, 558, 13, 7587, 13, 407, 300, 311, 300, 311, 264, 3410, 295, 257, 11923, 11, 597, 286, 767, 445, 445, 294, 565, 337, 341, 3500, 11, 286, 1027, 257, 14333, 1319, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.058000204410958794, "compression_ratio": 1.5975609756097562, "no_caption_prob": 3.6475274100666866e-05}, {"id": 115, "seek": 62600, "start": 637.0, "end": 642.0, "text": " You can only use it when you create your selecting a person.", "tokens": [50364, 583, 11926, 309, 575, 572, 12869, 294, 264, 22811, 1389, 11, 309, 576, 312, 257, 1192, 1496, 2158, 445, 281, 764, 264, 13600, 27575, 456, 13, 50664, 50664, 583, 291, 2644, 764, 300, 954, 264, 700, 4079, 1646, 13, 50914, 50914, 509, 393, 787, 764, 309, 562, 291, 1884, 428, 18182, 257, 954, 13, 51164, 51164, 663, 311, 558, 13, 7587, 13, 407, 300, 311, 300, 311, 264, 3410, 295, 257, 11923, 11, 597, 286, 767, 445, 445, 294, 565, 337, 341, 3500, 11, 286, 1027, 257, 14333, 1319, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.058000204410958794, "compression_ratio": 1.5975609756097562, "no_caption_prob": 3.6475274100666866e-05}, {"id": 116, "seek": 62600, "start": 642.0, "end": 653.0, "text": " That's right. Exactly. So that's that's the concept of a scope, which I actually just just in time for this episode, I made a documentation change.", "tokens": [50364, 583, 11926, 309, 575, 572, 12869, 294, 264, 22811, 1389, 11, 309, 576, 312, 257, 1192, 1496, 2158, 445, 281, 764, 264, 13600, 27575, 456, 13, 50664, 50664, 583, 291, 2644, 764, 300, 954, 264, 700, 4079, 1646, 13, 50914, 50914, 509, 393, 787, 764, 309, 562, 291, 1884, 428, 18182, 257, 954, 13, 51164, 51164, 663, 311, 558, 13, 7587, 13, 407, 300, 311, 300, 311, 264, 3410, 295, 257, 11923, 11, 597, 286, 767, 445, 445, 294, 565, 337, 341, 3500, 11, 286, 1027, 257, 14333, 1319, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.058000204410958794, "compression_ratio": 1.5975609756097562, "no_caption_prob": 3.6475274100666866e-05}, {"id": 117, "seek": 65300, "start": 653.0, "end": 659.0, "text": " So in the docs, there used to be a type variable, which some people may have seen called type block.", "tokens": [50364, 407, 294, 264, 45623, 11, 456, 1143, 281, 312, 257, 2010, 7006, 11, 597, 512, 561, 815, 362, 1612, 1219, 2010, 3461, 13, 50664, 50664, 400, 286, 767, 4114, 300, 286, 4114, 300, 1315, 264, 588, 786, 300, 286, 6941, 903, 25796, 3467, 570, 286, 994, 380, 458, 437, 436, 645, 13, 51064, 51064, 400, 286, 390, 445, 20507, 300, 411, 11, 1954, 11, 286, 393, 4017, 264, 2010, 411, 341, 13, 51264, 51264, 407, 286, 1219, 309, 2010, 3461, 293, 286, 1128, 534, 1194, 295, 257, 1101, 1315, 1826, 3938, 13, 51514, 51514, 400, 370, 2721, 286, 3105, 13, 583, 370, 257, 9450, 992, 575, 732, 2010, 9102, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.07460963935182806, "compression_ratio": 1.700374531835206, "no_caption_prob": 6.0139056586194783e-05}, {"id": 118, "seek": 65300, "start": 659.0, "end": 667.0, "text": " And I actually wrote that I wrote that name the very day that I discovered phantom types because I didn't know what they were.", "tokens": [50364, 407, 294, 264, 45623, 11, 456, 1143, 281, 312, 257, 2010, 7006, 11, 597, 512, 561, 815, 362, 1612, 1219, 2010, 3461, 13, 50664, 50664, 400, 286, 767, 4114, 300, 286, 4114, 300, 1315, 264, 588, 786, 300, 286, 6941, 903, 25796, 3467, 570, 286, 994, 380, 458, 437, 436, 645, 13, 51064, 51064, 400, 286, 390, 445, 20507, 300, 411, 11, 1954, 11, 286, 393, 4017, 264, 2010, 411, 341, 13, 51264, 51264, 407, 286, 1219, 309, 2010, 3461, 293, 286, 1128, 534, 1194, 295, 257, 1101, 1315, 1826, 3938, 13, 51514, 51514, 400, 370, 2721, 286, 3105, 13, 583, 370, 257, 9450, 992, 575, 732, 2010, 9102, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.07460963935182806, "compression_ratio": 1.700374531835206, "no_caption_prob": 6.0139056586194783e-05}, {"id": 119, "seek": 65300, "start": 667.0, "end": 671.0, "text": " And I was just amazed that like, oh, I can lock the type like this.", "tokens": [50364, 407, 294, 264, 45623, 11, 456, 1143, 281, 312, 257, 2010, 7006, 11, 597, 512, 561, 815, 362, 1612, 1219, 2010, 3461, 13, 50664, 50664, 400, 286, 767, 4114, 300, 286, 4114, 300, 1315, 264, 588, 786, 300, 286, 6941, 903, 25796, 3467, 570, 286, 994, 380, 458, 437, 436, 645, 13, 51064, 51064, 400, 286, 390, 445, 20507, 300, 411, 11, 1954, 11, 286, 393, 4017, 264, 2010, 411, 341, 13, 51264, 51264, 407, 286, 1219, 309, 2010, 3461, 293, 286, 1128, 534, 1194, 295, 257, 1101, 1315, 1826, 3938, 13, 51514, 51514, 400, 370, 2721, 286, 3105, 13, 583, 370, 257, 9450, 992, 575, 732, 2010, 9102, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.07460963935182806, "compression_ratio": 1.700374531835206, "no_caption_prob": 6.0139056586194783e-05}, {"id": 120, "seek": 65300, "start": 671.0, "end": 676.0, "text": " So I called it type block and I never really thought of a better name until recently.", "tokens": [50364, 407, 294, 264, 45623, 11, 456, 1143, 281, 312, 257, 2010, 7006, 11, 597, 512, 561, 815, 362, 1612, 1219, 2010, 3461, 13, 50664, 50664, 400, 286, 767, 4114, 300, 286, 4114, 300, 1315, 264, 588, 786, 300, 286, 6941, 903, 25796, 3467, 570, 286, 994, 380, 458, 437, 436, 645, 13, 51064, 51064, 400, 286, 390, 445, 20507, 300, 411, 11, 1954, 11, 286, 393, 4017, 264, 2010, 411, 341, 13, 51264, 51264, 407, 286, 1219, 309, 2010, 3461, 293, 286, 1128, 534, 1194, 295, 257, 1101, 1315, 1826, 3938, 13, 51514, 51514, 400, 370, 2721, 286, 3105, 13, 583, 370, 257, 9450, 992, 575, 732, 2010, 9102, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.07460963935182806, "compression_ratio": 1.700374531835206, "no_caption_prob": 6.0139056586194783e-05}, {"id": 121, "seek": 65300, "start": 676.0, "end": 681.0, "text": " And so finally I changed. But so a selection set has two type variables.", "tokens": [50364, 407, 294, 264, 45623, 11, 456, 1143, 281, 312, 257, 2010, 7006, 11, 597, 512, 561, 815, 362, 1612, 1219, 2010, 3461, 13, 50664, 50664, 400, 286, 767, 4114, 300, 286, 4114, 300, 1315, 264, 588, 786, 300, 286, 6941, 903, 25796, 3467, 570, 286, 994, 380, 458, 437, 436, 645, 13, 51064, 51064, 400, 286, 390, 445, 20507, 300, 411, 11, 1954, 11, 286, 393, 4017, 264, 2010, 411, 341, 13, 51264, 51264, 407, 286, 1219, 309, 2010, 3461, 293, 286, 1128, 534, 1194, 295, 257, 1101, 1315, 1826, 3938, 13, 51514, 51514, 400, 370, 2721, 286, 3105, 13, 583, 370, 257, 9450, 992, 575, 732, 2010, 9102, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.07460963935182806, "compression_ratio": 1.700374531835206, "no_caption_prob": 6.0139056586194783e-05}, {"id": 122, "seek": 68100, "start": 681.0, "end": 685.0, "text": " The first type variable is what it decodes to, just like a JSON decoder.", "tokens": [50364, 440, 700, 2010, 7006, 307, 437, 309, 979, 4789, 281, 11, 445, 411, 257, 31828, 979, 19866, 13, 50564, 50564, 467, 311, 257, 979, 19866, 295, 512, 2010, 7006, 13, 407, 257, 979, 19866, 295, 6798, 11, 257, 979, 19866, 295, 954, 294, 2699, 76, 21884, 13695, 13, 50914, 50914, 467, 311, 264, 1900, 912, 551, 13, 316, 9450, 992, 575, 257, 700, 2010, 7006, 295, 264, 2010, 309, 979, 4789, 281, 13, 51214, 51214, 440, 1150, 2010, 7006, 307, 264, 11923, 295, 264, 9450, 992, 13, 51364, 51364, 400, 382, 291, 584, 11, 370, 341, 307, 341, 307, 689, 1333, 295, 264, 4295, 644, 295, 21884, 13695, 1487, 294, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.07268243043319039, "compression_ratio": 1.9116279069767441, "no_caption_prob": 0.00016345889889635146}, {"id": 123, "seek": 68100, "start": 685.0, "end": 692.0, "text": " It's a decoder of some type variable. So a decoder of string, a decoder of person in Elm GraphQL.", "tokens": [50364, 440, 700, 2010, 7006, 307, 437, 309, 979, 4789, 281, 11, 445, 411, 257, 31828, 979, 19866, 13, 50564, 50564, 467, 311, 257, 979, 19866, 295, 512, 2010, 7006, 13, 407, 257, 979, 19866, 295, 6798, 11, 257, 979, 19866, 295, 954, 294, 2699, 76, 21884, 13695, 13, 50914, 50914, 467, 311, 264, 1900, 912, 551, 13, 316, 9450, 992, 575, 257, 700, 2010, 7006, 295, 264, 2010, 309, 979, 4789, 281, 13, 51214, 51214, 440, 1150, 2010, 7006, 307, 264, 11923, 295, 264, 9450, 992, 13, 51364, 51364, 400, 382, 291, 584, 11, 370, 341, 307, 341, 307, 689, 1333, 295, 264, 4295, 644, 295, 21884, 13695, 1487, 294, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.07268243043319039, "compression_ratio": 1.9116279069767441, "no_caption_prob": 0.00016345889889635146}, {"id": 124, "seek": 68100, "start": 692.0, "end": 698.0, "text": " It's the exact same thing. A selection set has a first type variable of the type it decodes to.", "tokens": [50364, 440, 700, 2010, 7006, 307, 437, 309, 979, 4789, 281, 11, 445, 411, 257, 31828, 979, 19866, 13, 50564, 50564, 467, 311, 257, 979, 19866, 295, 512, 2010, 7006, 13, 407, 257, 979, 19866, 295, 6798, 11, 257, 979, 19866, 295, 954, 294, 2699, 76, 21884, 13695, 13, 50914, 50914, 467, 311, 264, 1900, 912, 551, 13, 316, 9450, 992, 575, 257, 700, 2010, 7006, 295, 264, 2010, 309, 979, 4789, 281, 13, 51214, 51214, 440, 1150, 2010, 7006, 307, 264, 11923, 295, 264, 9450, 992, 13, 51364, 51364, 400, 382, 291, 584, 11, 370, 341, 307, 341, 307, 689, 1333, 295, 264, 4295, 644, 295, 21884, 13695, 1487, 294, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.07268243043319039, "compression_ratio": 1.9116279069767441, "no_caption_prob": 0.00016345889889635146}, {"id": 125, "seek": 68100, "start": 698.0, "end": 701.0, "text": " The second type variable is the scope of the selection set.", "tokens": [50364, 440, 700, 2010, 7006, 307, 437, 309, 979, 4789, 281, 11, 445, 411, 257, 31828, 979, 19866, 13, 50564, 50564, 467, 311, 257, 979, 19866, 295, 512, 2010, 7006, 13, 407, 257, 979, 19866, 295, 6798, 11, 257, 979, 19866, 295, 954, 294, 2699, 76, 21884, 13695, 13, 50914, 50914, 467, 311, 264, 1900, 912, 551, 13, 316, 9450, 992, 575, 257, 700, 2010, 7006, 295, 264, 2010, 309, 979, 4789, 281, 13, 51214, 51214, 440, 1150, 2010, 7006, 307, 264, 11923, 295, 264, 9450, 992, 13, 51364, 51364, 400, 382, 291, 584, 11, 370, 341, 307, 341, 307, 689, 1333, 295, 264, 4295, 644, 295, 21884, 13695, 1487, 294, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.07268243043319039, "compression_ratio": 1.9116279069767441, "no_caption_prob": 0.00016345889889635146}, {"id": 126, "seek": 68100, "start": 701.0, "end": 707.0, "text": " And as you say, so this is this is where sort of the graph part of GraphQL comes in.", "tokens": [50364, 440, 700, 2010, 7006, 307, 437, 309, 979, 4789, 281, 11, 445, 411, 257, 31828, 979, 19866, 13, 50564, 50564, 467, 311, 257, 979, 19866, 295, 512, 2010, 7006, 13, 407, 257, 979, 19866, 295, 6798, 11, 257, 979, 19866, 295, 954, 294, 2699, 76, 21884, 13695, 13, 50914, 50914, 467, 311, 264, 1900, 912, 551, 13, 316, 9450, 992, 575, 257, 700, 2010, 7006, 295, 264, 2010, 309, 979, 4789, 281, 13, 51214, 51214, 440, 1150, 2010, 7006, 307, 264, 11923, 295, 264, 9450, 992, 13, 51364, 51364, 400, 382, 291, 584, 11, 370, 341, 307, 341, 307, 689, 1333, 295, 264, 4295, 644, 295, 21884, 13695, 1487, 294, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.07268243043319039, "compression_ratio": 1.9116279069767441, "no_caption_prob": 0.00016345889889635146}, {"id": 127, "seek": 70700, "start": 707.0, "end": 714.0, "text": " If you have at the top level, let's say you can make some requests to get the current version of the app.", "tokens": [50364, 759, 291, 362, 412, 264, 1192, 1496, 11, 718, 311, 584, 291, 393, 652, 512, 12475, 281, 483, 264, 2190, 3037, 295, 264, 724, 13, 50714, 50714, 407, 291, 291, 584, 2190, 3037, 293, 309, 2709, 291, 257, 22019, 420, 257, 3037, 1230, 420, 746, 13, 51064, 51064, 407, 300, 307, 257, 1192, 1496, 14581, 13, 407, 294, 8936, 21884, 13695, 28431, 11, 437, 300, 576, 574, 411, 307, 2673, 561, 486, 20803, 2464, 484, 264, 1349, 14581, 293, 550, 32066, 41537, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.030315659512048482, "compression_ratio": 1.6126126126126126, "no_caption_prob": 4.9857848352985457e-05}, {"id": 128, "seek": 70700, "start": 714.0, "end": 721.0, "text": " So you you say current version and it gives you a hash or a version number or something.", "tokens": [50364, 759, 291, 362, 412, 264, 1192, 1496, 11, 718, 311, 584, 291, 393, 652, 512, 12475, 281, 483, 264, 2190, 3037, 295, 264, 724, 13, 50714, 50714, 407, 291, 291, 584, 2190, 3037, 293, 309, 2709, 291, 257, 22019, 420, 257, 3037, 1230, 420, 746, 13, 51064, 51064, 407, 300, 307, 257, 1192, 1496, 14581, 13, 407, 294, 8936, 21884, 13695, 28431, 11, 437, 300, 576, 574, 411, 307, 2673, 561, 486, 20803, 2464, 484, 264, 1349, 14581, 293, 550, 32066, 41537, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.030315659512048482, "compression_ratio": 1.6126126126126126, "no_caption_prob": 4.9857848352985457e-05}, {"id": 129, "seek": 70700, "start": 721.0, "end": 733.0, "text": " So that is a top level query. So in raw GraphQL syntax, what that would look like is usually people will explicitly write out the word query and then curly braces.", "tokens": [50364, 759, 291, 362, 412, 264, 1192, 1496, 11, 718, 311, 584, 291, 393, 652, 512, 12475, 281, 483, 264, 2190, 3037, 295, 264, 724, 13, 50714, 50714, 407, 291, 291, 584, 2190, 3037, 293, 309, 2709, 291, 257, 22019, 420, 257, 3037, 1230, 420, 746, 13, 51064, 51064, 407, 300, 307, 257, 1192, 1496, 14581, 13, 407, 294, 8936, 21884, 13695, 28431, 11, 437, 300, 576, 574, 411, 307, 2673, 561, 486, 20803, 2464, 484, 264, 1349, 14581, 293, 550, 32066, 41537, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.030315659512048482, "compression_ratio": 1.6126126126126126, "no_caption_prob": 4.9857848352985457e-05}, {"id": 130, "seek": 73300, "start": 733.0, "end": 741.0, "text": " It looks a lot like JSON, and that's the intentional design of GraphQL is it looks like JSON, except it's not the key value pairs.", "tokens": [50364, 467, 1542, 257, 688, 411, 31828, 11, 293, 300, 311, 264, 21935, 1715, 295, 21884, 13695, 307, 309, 1542, 411, 31828, 11, 3993, 309, 311, 406, 264, 2141, 2158, 15494, 13, 50764, 50764, 467, 311, 445, 264, 2141, 13, 467, 445, 1542, 411, 264, 9317, 13, 400, 300, 311, 411, 264, 1412, 291, 434, 31937, 490, 264, 7154, 13, 51014, 51014, 407, 291, 576, 584, 14581, 32066, 41537, 293, 550, 1322, 3037, 420, 2035, 300, 2519, 307, 1219, 13, 51364, 51364, 400, 300, 576, 312, 1566, 286, 478, 31937, 341, 1192, 1496, 2158, 490, 264, 7154, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.06308672687794903, "compression_ratio": 1.7629310344827587, "no_caption_prob": 9.169532859232277e-05}, {"id": 131, "seek": 73300, "start": 741.0, "end": 746.0, "text": " It's just the key. It just looks like the keys. And that's like the data you're requesting from the server.", "tokens": [50364, 467, 1542, 257, 688, 411, 31828, 11, 293, 300, 311, 264, 21935, 1715, 295, 21884, 13695, 307, 309, 1542, 411, 31828, 11, 3993, 309, 311, 406, 264, 2141, 2158, 15494, 13, 50764, 50764, 467, 311, 445, 264, 2141, 13, 467, 445, 1542, 411, 264, 9317, 13, 400, 300, 311, 411, 264, 1412, 291, 434, 31937, 490, 264, 7154, 13, 51014, 51014, 407, 291, 576, 584, 14581, 32066, 41537, 293, 550, 1322, 3037, 420, 2035, 300, 2519, 307, 1219, 13, 51364, 51364, 400, 300, 576, 312, 1566, 286, 478, 31937, 341, 1192, 1496, 2158, 490, 264, 7154, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.06308672687794903, "compression_ratio": 1.7629310344827587, "no_caption_prob": 9.169532859232277e-05}, {"id": 132, "seek": 73300, "start": 746.0, "end": 753.0, "text": " So you would say query curly braces and then build version or whatever that field is called.", "tokens": [50364, 467, 1542, 257, 688, 411, 31828, 11, 293, 300, 311, 264, 21935, 1715, 295, 21884, 13695, 307, 309, 1542, 411, 31828, 11, 3993, 309, 311, 406, 264, 2141, 2158, 15494, 13, 50764, 50764, 467, 311, 445, 264, 2141, 13, 467, 445, 1542, 411, 264, 9317, 13, 400, 300, 311, 411, 264, 1412, 291, 434, 31937, 490, 264, 7154, 13, 51014, 51014, 407, 291, 576, 584, 14581, 32066, 41537, 293, 550, 1322, 3037, 420, 2035, 300, 2519, 307, 1219, 13, 51364, 51364, 400, 300, 576, 312, 1566, 286, 478, 31937, 341, 1192, 1496, 2158, 490, 264, 7154, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.06308672687794903, "compression_ratio": 1.7629310344827587, "no_caption_prob": 9.169532859232277e-05}, {"id": 133, "seek": 73300, "start": 753.0, "end": 757.0, "text": " And that would be saying I'm requesting this top level value from the server.", "tokens": [50364, 467, 1542, 257, 688, 411, 31828, 11, 293, 300, 311, 264, 21935, 1715, 295, 21884, 13695, 307, 309, 1542, 411, 31828, 11, 3993, 309, 311, 406, 264, 2141, 2158, 15494, 13, 50764, 50764, 467, 311, 445, 264, 2141, 13, 467, 445, 1542, 411, 264, 9317, 13, 400, 300, 311, 411, 264, 1412, 291, 434, 31937, 490, 264, 7154, 13, 51014, 51014, 407, 291, 576, 584, 14581, 32066, 41537, 293, 550, 1322, 3037, 420, 2035, 300, 2519, 307, 1219, 13, 51364, 51364, 400, 300, 576, 312, 1566, 286, 478, 31937, 341, 1192, 1496, 2158, 490, 264, 7154, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.06308672687794903, "compression_ratio": 1.7629310344827587, "no_caption_prob": 9.169532859232277e-05}, {"id": 134, "seek": 75700, "start": 757.0, "end": 764.0, "text": " And that would have a type of string, for example. And so that's like the simplest top level query.", "tokens": [50364, 400, 300, 576, 362, 257, 2010, 295, 6798, 11, 337, 1365, 13, 400, 370, 300, 311, 411, 264, 22811, 1192, 1496, 14581, 13, 50714, 50714, 583, 586, 498, 291, 434, 1566, 498, 291, 434, 1242, 257, 954, 11, 586, 291, 643, 281, 16500, 11, 731, 11, 437, 1589, 360, 291, 528, 281, 458, 466, 300, 954, 30, 51114, 51114, 400, 300, 307, 689, 291, 483, 341, 1333, 295, 4295, 644, 295, 21884, 13695, 11, 689, 291, 434, 23149, 278, 613, 6159, 293, 291, 434, 23673, 278, 1412, 1951, 661, 9239, 295, 1412, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.032725801172944685, "compression_ratio": 1.6270491803278688, "no_caption_prob": 1.1478630767669529e-05}, {"id": 135, "seek": 75700, "start": 764.0, "end": 772.0, "text": " But now if you're saying if you're getting a person, now you need to specify, well, what information do you want to know about that person?", "tokens": [50364, 400, 300, 576, 362, 257, 2010, 295, 6798, 11, 337, 1365, 13, 400, 370, 300, 311, 411, 264, 22811, 1192, 1496, 14581, 13, 50714, 50714, 583, 586, 498, 291, 434, 1566, 498, 291, 434, 1242, 257, 954, 11, 586, 291, 643, 281, 16500, 11, 731, 11, 437, 1589, 360, 291, 528, 281, 458, 466, 300, 954, 30, 51114, 51114, 400, 300, 307, 689, 291, 483, 341, 1333, 295, 4295, 644, 295, 21884, 13695, 11, 689, 291, 434, 23149, 278, 613, 6159, 293, 291, 434, 23673, 278, 1412, 1951, 661, 9239, 295, 1412, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.032725801172944685, "compression_ratio": 1.6270491803278688, "no_caption_prob": 1.1478630767669529e-05}, {"id": 136, "seek": 75700, "start": 772.0, "end": 782.0, "text": " And that is where you get this sort of graph part of GraphQL, where you're traversing these relationships and you're fetching data within other bits of data.", "tokens": [50364, 400, 300, 576, 362, 257, 2010, 295, 6798, 11, 337, 1365, 13, 400, 370, 300, 311, 411, 264, 22811, 1192, 1496, 14581, 13, 50714, 50714, 583, 586, 498, 291, 434, 1566, 498, 291, 434, 1242, 257, 954, 11, 586, 291, 643, 281, 16500, 11, 731, 11, 437, 1589, 360, 291, 528, 281, 458, 466, 300, 954, 30, 51114, 51114, 400, 300, 307, 689, 291, 483, 341, 1333, 295, 4295, 644, 295, 21884, 13695, 11, 689, 291, 434, 23149, 278, 613, 6159, 293, 291, 434, 23673, 278, 1412, 1951, 661, 9239, 295, 1412, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.032725801172944685, "compression_ratio": 1.6270491803278688, "no_caption_prob": 1.1478630767669529e-05}, {"id": 137, "seek": 78200, "start": 782.0, "end": 791.0, "text": " So you're saying I want, you know, let's say you want like the current user, you want their first and last name to show in the top right corner.", "tokens": [50364, 407, 291, 434, 1566, 286, 528, 11, 291, 458, 11, 718, 311, 584, 291, 528, 411, 264, 2190, 4195, 11, 291, 528, 641, 700, 293, 1036, 1315, 281, 855, 294, 264, 1192, 558, 4538, 13, 50814, 50814, 1396, 291, 576, 584, 370, 2602, 295, 14581, 32066, 41537, 1322, 3037, 11, 291, 1116, 584, 14581, 32066, 41537, 2190, 4195, 13, 51264, 51264, 823, 300, 311, 1242, 264, 2190, 4195, 11, 457, 264, 2190, 4195, 307, 406, 257, 2199, 6798, 13, 51514, 51514, 865, 11, 309, 311, 406, 257, 28540, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.08399117890224662, "compression_ratio": 1.7584541062801933, "no_caption_prob": 3.591217682696879e-05}, {"id": 138, "seek": 78200, "start": 791.0, "end": 800.0, "text": " Then you would say so instead of query curly braces build version, you'd say query curly braces current user.", "tokens": [50364, 407, 291, 434, 1566, 286, 528, 11, 291, 458, 11, 718, 311, 584, 291, 528, 411, 264, 2190, 4195, 11, 291, 528, 641, 700, 293, 1036, 1315, 281, 855, 294, 264, 1192, 558, 4538, 13, 50814, 50814, 1396, 291, 576, 584, 370, 2602, 295, 14581, 32066, 41537, 1322, 3037, 11, 291, 1116, 584, 14581, 32066, 41537, 2190, 4195, 13, 51264, 51264, 823, 300, 311, 1242, 264, 2190, 4195, 11, 457, 264, 2190, 4195, 307, 406, 257, 2199, 6798, 13, 51514, 51514, 865, 11, 309, 311, 406, 257, 28540, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.08399117890224662, "compression_ratio": 1.7584541062801933, "no_caption_prob": 3.591217682696879e-05}, {"id": 139, "seek": 78200, "start": 800.0, "end": 805.0, "text": " Now that's getting the current user, but the current user is not a simple string.", "tokens": [50364, 407, 291, 434, 1566, 286, 528, 11, 291, 458, 11, 718, 311, 584, 291, 528, 411, 264, 2190, 4195, 11, 291, 528, 641, 700, 293, 1036, 1315, 281, 855, 294, 264, 1192, 558, 4538, 13, 50814, 50814, 1396, 291, 576, 584, 370, 2602, 295, 14581, 32066, 41537, 1322, 3037, 11, 291, 1116, 584, 14581, 32066, 41537, 2190, 4195, 13, 51264, 51264, 823, 300, 311, 1242, 264, 2190, 4195, 11, 457, 264, 2190, 4195, 307, 406, 257, 2199, 6798, 13, 51514, 51514, 865, 11, 309, 311, 406, 257, 28540, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.08399117890224662, "compression_ratio": 1.7584541062801933, "no_caption_prob": 3.591217682696879e-05}, {"id": 140, "seek": 78200, "start": 805.0, "end": 806.0, "text": " Yeah, it's not a primitive.", "tokens": [50364, 407, 291, 434, 1566, 286, 528, 11, 291, 458, 11, 718, 311, 584, 291, 528, 411, 264, 2190, 4195, 11, 291, 528, 641, 700, 293, 1036, 1315, 281, 855, 294, 264, 1192, 558, 4538, 13, 50814, 50814, 1396, 291, 576, 584, 370, 2602, 295, 14581, 32066, 41537, 1322, 3037, 11, 291, 1116, 584, 14581, 32066, 41537, 2190, 4195, 13, 51264, 51264, 823, 300, 311, 1242, 264, 2190, 4195, 11, 457, 264, 2190, 4195, 307, 406, 257, 2199, 6798, 13, 51514, 51514, 865, 11, 309, 311, 406, 257, 28540, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.08399117890224662, "compression_ratio": 1.7584541062801933, "no_caption_prob": 3.591217682696879e-05}, {"id": 141, "seek": 80600, "start": 806.0, "end": 816.0, "text": " Yes, right. It is an object. And so within that object, now you need a nested selection set to tell it what fields you want from that object.", "tokens": [50364, 1079, 11, 558, 13, 467, 307, 364, 2657, 13, 400, 370, 1951, 300, 2657, 11, 586, 291, 643, 257, 15646, 292, 9450, 992, 281, 980, 309, 437, 7909, 291, 528, 490, 300, 2657, 13, 50864, 50864, 400, 300, 311, 689, 291, 291, 1269, 493, 512, 777, 32066, 41537, 293, 550, 291, 584, 11, 731, 11, 286, 528, 264, 700, 293, 1036, 13, 51214, 51214, 407, 300, 576, 574, 411, 14581, 1269, 22591, 530, 11, 2190, 4195, 11, 1269, 22591, 530, 11, 700, 777, 1622, 11, 1036, 293, 550, 1998, 439, 264, 22591, 530, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.07924609281578843, "compression_ratio": 1.7142857142857142, "no_caption_prob": 3.120104156550951e-05}, {"id": 142, "seek": 80600, "start": 816.0, "end": 823.0, "text": " And that's where you you open up some new curly braces and then you say, well, I want the first and last.", "tokens": [50364, 1079, 11, 558, 13, 467, 307, 364, 2657, 13, 400, 370, 1951, 300, 2657, 11, 586, 291, 643, 257, 15646, 292, 9450, 992, 281, 980, 309, 437, 7909, 291, 528, 490, 300, 2657, 13, 50864, 50864, 400, 300, 311, 689, 291, 291, 1269, 493, 512, 777, 32066, 41537, 293, 550, 291, 584, 11, 731, 11, 286, 528, 264, 700, 293, 1036, 13, 51214, 51214, 407, 300, 576, 574, 411, 14581, 1269, 22591, 530, 11, 2190, 4195, 11, 1269, 22591, 530, 11, 700, 777, 1622, 11, 1036, 293, 550, 1998, 439, 264, 22591, 530, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.07924609281578843, "compression_ratio": 1.7142857142857142, "no_caption_prob": 3.120104156550951e-05}, {"id": 143, "seek": 80600, "start": 823.0, "end": 834.0, "text": " So that would look like query open curlies, current user, open curlies, first new line, last and then close all the curlies.", "tokens": [50364, 1079, 11, 558, 13, 467, 307, 364, 2657, 13, 400, 370, 1951, 300, 2657, 11, 586, 291, 643, 257, 15646, 292, 9450, 992, 281, 980, 309, 437, 7909, 291, 528, 490, 300, 2657, 13, 50864, 50864, 400, 300, 311, 689, 291, 291, 1269, 493, 512, 777, 32066, 41537, 293, 550, 291, 584, 11, 731, 11, 286, 528, 264, 700, 293, 1036, 13, 51214, 51214, 407, 300, 576, 574, 411, 14581, 1269, 22591, 530, 11, 2190, 4195, 11, 1269, 22591, 530, 11, 700, 777, 1622, 11, 1036, 293, 550, 1998, 439, 264, 22591, 530, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.07924609281578843, "compression_ratio": 1.7142857142857142, "no_caption_prob": 3.120104156550951e-05}, {"id": 144, "seek": 83400, "start": 834.0, "end": 837.0, "text": " No commas between first and last?", "tokens": [50364, 883, 800, 296, 1296, 700, 293, 1036, 30, 50514, 50514, 3046, 296, 366, 17312, 13, 50564, 50564, 2264, 11, 665, 281, 458, 13, 1042, 11, 406, 665, 281, 458, 570, 286, 764, 2699, 76, 21884, 13695, 412, 589, 13, 50814, 50814, 407, 558, 13, 7587, 13, 400, 309, 12649, 82, 1314, 729, 4365, 13, 51064, 51064, 400, 2699, 76, 21884, 13695, 767, 12649, 82, 1314, 257, 1326, 661, 4365, 466, 264, 1333, 295, 2295, 1496, 21884, 13695, 28431, 13, 51414, 51414, 1171, 1365, 11, 294, 294, 21884, 13695, 11, 498, 291, 434, 370, 291, 393, 1320, 12869, 281, 364, 2657, 411, 498, 291, 498, 291, 528, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.13179242394187235, "compression_ratio": 1.6090534979423867, "no_caption_prob": 2.0462681277422234e-05}, {"id": 145, "seek": 83400, "start": 837.0, "end": 838.0, "text": " Commas are optional.", "tokens": [50364, 883, 800, 296, 1296, 700, 293, 1036, 30, 50514, 50514, 3046, 296, 366, 17312, 13, 50564, 50564, 2264, 11, 665, 281, 458, 13, 1042, 11, 406, 665, 281, 458, 570, 286, 764, 2699, 76, 21884, 13695, 412, 589, 13, 50814, 50814, 407, 558, 13, 7587, 13, 400, 309, 12649, 82, 1314, 729, 4365, 13, 51064, 51064, 400, 2699, 76, 21884, 13695, 767, 12649, 82, 1314, 257, 1326, 661, 4365, 466, 264, 1333, 295, 2295, 1496, 21884, 13695, 28431, 13, 51414, 51414, 1171, 1365, 11, 294, 294, 21884, 13695, 11, 498, 291, 434, 370, 291, 393, 1320, 12869, 281, 364, 2657, 411, 498, 291, 498, 291, 528, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.13179242394187235, "compression_ratio": 1.6090534979423867, "no_caption_prob": 2.0462681277422234e-05}, {"id": 146, "seek": 83400, "start": 838.0, "end": 843.0, "text": " OK, good to know. Well, not good to know because I use Elm GraphQL at work.", "tokens": [50364, 883, 800, 296, 1296, 700, 293, 1036, 30, 50514, 50514, 3046, 296, 366, 17312, 13, 50564, 50564, 2264, 11, 665, 281, 458, 13, 1042, 11, 406, 665, 281, 458, 570, 286, 764, 2699, 76, 21884, 13695, 412, 589, 13, 50814, 50814, 407, 558, 13, 7587, 13, 400, 309, 12649, 82, 1314, 729, 4365, 13, 51064, 51064, 400, 2699, 76, 21884, 13695, 767, 12649, 82, 1314, 257, 1326, 661, 4365, 466, 264, 1333, 295, 2295, 1496, 21884, 13695, 28431, 13, 51414, 51414, 1171, 1365, 11, 294, 294, 21884, 13695, 11, 498, 291, 434, 370, 291, 393, 1320, 12869, 281, 364, 2657, 411, 498, 291, 498, 291, 528, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.13179242394187235, "compression_ratio": 1.6090534979423867, "no_caption_prob": 2.0462681277422234e-05}, {"id": 147, "seek": 83400, "start": 843.0, "end": 848.0, "text": " So right. Exactly. And it abstracts away those details.", "tokens": [50364, 883, 800, 296, 1296, 700, 293, 1036, 30, 50514, 50514, 3046, 296, 366, 17312, 13, 50564, 50564, 2264, 11, 665, 281, 458, 13, 1042, 11, 406, 665, 281, 458, 570, 286, 764, 2699, 76, 21884, 13695, 412, 589, 13, 50814, 50814, 407, 558, 13, 7587, 13, 400, 309, 12649, 82, 1314, 729, 4365, 13, 51064, 51064, 400, 2699, 76, 21884, 13695, 767, 12649, 82, 1314, 257, 1326, 661, 4365, 466, 264, 1333, 295, 2295, 1496, 21884, 13695, 28431, 13, 51414, 51414, 1171, 1365, 11, 294, 294, 21884, 13695, 11, 498, 291, 434, 370, 291, 393, 1320, 12869, 281, 364, 2657, 411, 498, 291, 498, 291, 528, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.13179242394187235, "compression_ratio": 1.6090534979423867, "no_caption_prob": 2.0462681277422234e-05}, {"id": 148, "seek": 83400, "start": 848.0, "end": 855.0, "text": " And Elm GraphQL actually abstracts away a few other details about the sort of low level GraphQL syntax.", "tokens": [50364, 883, 800, 296, 1296, 700, 293, 1036, 30, 50514, 50514, 3046, 296, 366, 17312, 13, 50564, 50564, 2264, 11, 665, 281, 458, 13, 1042, 11, 406, 665, 281, 458, 570, 286, 764, 2699, 76, 21884, 13695, 412, 589, 13, 50814, 50814, 407, 558, 13, 7587, 13, 400, 309, 12649, 82, 1314, 729, 4365, 13, 51064, 51064, 400, 2699, 76, 21884, 13695, 767, 12649, 82, 1314, 257, 1326, 661, 4365, 466, 264, 1333, 295, 2295, 1496, 21884, 13695, 28431, 13, 51414, 51414, 1171, 1365, 11, 294, 294, 21884, 13695, 11, 498, 291, 434, 370, 291, 393, 1320, 12869, 281, 364, 2657, 411, 498, 291, 498, 291, 528, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.13179242394187235, "compression_ratio": 1.6090534979423867, "no_caption_prob": 2.0462681277422234e-05}, {"id": 149, "seek": 83400, "start": 855.0, "end": 863.0, "text": " For example, in in GraphQL, if you're so you can pass arguments to an object like if you if you want", "tokens": [50364, 883, 800, 296, 1296, 700, 293, 1036, 30, 50514, 50514, 3046, 296, 366, 17312, 13, 50564, 50564, 2264, 11, 665, 281, 458, 13, 1042, 11, 406, 665, 281, 458, 570, 286, 764, 2699, 76, 21884, 13695, 412, 589, 13, 50814, 50814, 407, 558, 13, 7587, 13, 400, 309, 12649, 82, 1314, 729, 4365, 13, 51064, 51064, 400, 2699, 76, 21884, 13695, 767, 12649, 82, 1314, 257, 1326, 661, 4365, 466, 264, 1333, 295, 2295, 1496, 21884, 13695, 28431, 13, 51414, 51414, 1171, 1365, 11, 294, 294, 21884, 13695, 11, 498, 291, 434, 370, 291, 393, 1320, 12869, 281, 364, 2657, 411, 498, 291, 498, 291, 528, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.13179242394187235, "compression_ratio": 1.6090534979423867, "no_caption_prob": 2.0462681277422234e-05}, {"id": 150, "seek": 86300, "start": 863.0, "end": 866.0, "text": " a person with some ID.", "tokens": [50364, 257, 954, 365, 512, 7348, 13, 50514, 50514, 7587, 13, 759, 291, 528, 281, 360, 915, 954, 11, 291, 393, 1320, 309, 364, 6770, 13, 50714, 50714, 823, 11, 731, 11, 437, 498, 291, 434, 1566, 915, 954, 365, 7348, 472, 293, 915, 954, 365, 7348, 732, 293, 291, 528, 1293, 295, 729, 13, 51064, 51064, 1779, 13, 1042, 11, 264, 636, 300, 21884, 13695, 1985, 833, 264, 13376, 300, 286, 584, 833, 264, 13376, 11, 570, 382, 364, 2699, 76, 21884, 13695, 4195, 11, 51414, 51414, 341, 307, 364, 11420, 2607, 300, 291, 500, 380, 2028, 365, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.08847594955592479, "compression_ratio": 1.6905829596412556, "no_caption_prob": 0.00013764867617283016}, {"id": 151, "seek": 86300, "start": 866.0, "end": 870.0, "text": " Exactly. If you want to do find person, you can pass it an argument.", "tokens": [50364, 257, 954, 365, 512, 7348, 13, 50514, 50514, 7587, 13, 759, 291, 528, 281, 360, 915, 954, 11, 291, 393, 1320, 309, 364, 6770, 13, 50714, 50714, 823, 11, 731, 11, 437, 498, 291, 434, 1566, 915, 954, 365, 7348, 472, 293, 915, 954, 365, 7348, 732, 293, 291, 528, 1293, 295, 729, 13, 51064, 51064, 1779, 13, 1042, 11, 264, 636, 300, 21884, 13695, 1985, 833, 264, 13376, 300, 286, 584, 833, 264, 13376, 11, 570, 382, 364, 2699, 76, 21884, 13695, 4195, 11, 51414, 51414, 341, 307, 364, 11420, 2607, 300, 291, 500, 380, 2028, 365, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.08847594955592479, "compression_ratio": 1.6905829596412556, "no_caption_prob": 0.00013764867617283016}, {"id": 152, "seek": 86300, "start": 870.0, "end": 877.0, "text": " Now, well, what if you're saying find person with ID one and find person with ID two and you want both of those.", "tokens": [50364, 257, 954, 365, 512, 7348, 13, 50514, 50514, 7587, 13, 759, 291, 528, 281, 360, 915, 954, 11, 291, 393, 1320, 309, 364, 6770, 13, 50714, 50714, 823, 11, 731, 11, 437, 498, 291, 434, 1566, 915, 954, 365, 7348, 472, 293, 915, 954, 365, 7348, 732, 293, 291, 528, 1293, 295, 729, 13, 51064, 51064, 1779, 13, 1042, 11, 264, 636, 300, 21884, 13695, 1985, 833, 264, 13376, 300, 286, 584, 833, 264, 13376, 11, 570, 382, 364, 2699, 76, 21884, 13695, 4195, 11, 51414, 51414, 341, 307, 364, 11420, 2607, 300, 291, 500, 380, 2028, 365, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.08847594955592479, "compression_ratio": 1.6905829596412556, "no_caption_prob": 0.00013764867617283016}, {"id": 153, "seek": 86300, "start": 877.0, "end": 884.0, "text": " Right. Well, the way that GraphQL works under the hood that I say under the hood, because as an Elm GraphQL user,", "tokens": [50364, 257, 954, 365, 512, 7348, 13, 50514, 50514, 7587, 13, 759, 291, 528, 281, 360, 915, 954, 11, 291, 393, 1320, 309, 364, 6770, 13, 50714, 50714, 823, 11, 731, 11, 437, 498, 291, 434, 1566, 915, 954, 365, 7348, 472, 293, 915, 954, 365, 7348, 732, 293, 291, 528, 1293, 295, 729, 13, 51064, 51064, 1779, 13, 1042, 11, 264, 636, 300, 21884, 13695, 1985, 833, 264, 13376, 300, 286, 584, 833, 264, 13376, 11, 570, 382, 364, 2699, 76, 21884, 13695, 4195, 11, 51414, 51414, 341, 307, 364, 11420, 2607, 300, 291, 500, 380, 2028, 365, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.08847594955592479, "compression_ratio": 1.6905829596412556, "no_caption_prob": 0.00013764867617283016}, {"id": 154, "seek": 86300, "start": 884.0, "end": 888.0, "text": " this is an implementation detail that you don't deal with.", "tokens": [50364, 257, 954, 365, 512, 7348, 13, 50514, 50514, 7587, 13, 759, 291, 528, 281, 360, 915, 954, 11, 291, 393, 1320, 309, 364, 6770, 13, 50714, 50714, 823, 11, 731, 11, 437, 498, 291, 434, 1566, 915, 954, 365, 7348, 472, 293, 915, 954, 365, 7348, 732, 293, 291, 528, 1293, 295, 729, 13, 51064, 51064, 1779, 13, 1042, 11, 264, 636, 300, 21884, 13695, 1985, 833, 264, 13376, 300, 286, 584, 833, 264, 13376, 11, 570, 382, 364, 2699, 76, 21884, 13695, 4195, 11, 51414, 51414, 341, 307, 364, 11420, 2607, 300, 291, 500, 380, 2028, 365, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.08847594955592479, "compression_ratio": 1.6905829596412556, "no_caption_prob": 0.00013764867617283016}, {"id": 155, "seek": 88800, "start": 888.0, "end": 895.0, "text": " But that JSON data, you're going to get a JSON response. And when you say find user.", "tokens": [50364, 583, 300, 31828, 1412, 11, 291, 434, 516, 281, 483, 257, 31828, 4134, 13, 400, 562, 291, 584, 915, 4195, 13, 50714, 50714, 407, 286, 390, 1566, 300, 309, 311, 22062, 4761, 281, 574, 411, 31828, 11, 457, 445, 264, 9317, 11, 406, 264, 4190, 13, 51014, 51014, 1042, 11, 264, 13019, 808, 646, 294, 264, 912, 3909, 13, 51214, 51214, 407, 498, 291, 5308, 700, 1315, 11, 300, 31828, 2657, 307, 516, 281, 808, 646, 294, 264, 2141, 700, 1315, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.0514136414195216, "compression_ratio": 1.6, "no_caption_prob": 0.00017129440675489604}, {"id": 156, "seek": 88800, "start": 895.0, "end": 901.0, "text": " So I was saying that it's intentionally designed to look like JSON, but just the keys, not the values.", "tokens": [50364, 583, 300, 31828, 1412, 11, 291, 434, 516, 281, 483, 257, 31828, 4134, 13, 400, 562, 291, 584, 915, 4195, 13, 50714, 50714, 407, 286, 390, 1566, 300, 309, 311, 22062, 4761, 281, 574, 411, 31828, 11, 457, 445, 264, 9317, 11, 406, 264, 4190, 13, 51014, 51014, 1042, 11, 264, 13019, 808, 646, 294, 264, 912, 3909, 13, 51214, 51214, 407, 498, 291, 5308, 700, 1315, 11, 300, 31828, 2657, 307, 516, 281, 808, 646, 294, 264, 2141, 700, 1315, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.0514136414195216, "compression_ratio": 1.6, "no_caption_prob": 0.00017129440675489604}, {"id": 157, "seek": 88800, "start": 901.0, "end": 905.0, "text": " Well, the responses come back in the same shape.", "tokens": [50364, 583, 300, 31828, 1412, 11, 291, 434, 516, 281, 483, 257, 31828, 4134, 13, 400, 562, 291, 584, 915, 4195, 13, 50714, 50714, 407, 286, 390, 1566, 300, 309, 311, 22062, 4761, 281, 574, 411, 31828, 11, 457, 445, 264, 9317, 11, 406, 264, 4190, 13, 51014, 51014, 1042, 11, 264, 13019, 808, 646, 294, 264, 912, 3909, 13, 51214, 51214, 407, 498, 291, 5308, 700, 1315, 11, 300, 31828, 2657, 307, 516, 281, 808, 646, 294, 264, 2141, 700, 1315, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.0514136414195216, "compression_ratio": 1.6, "no_caption_prob": 0.00017129440675489604}, {"id": 158, "seek": 88800, "start": 905.0, "end": 912.0, "text": " So if you request first name, that JSON object is going to come back in the key first name.", "tokens": [50364, 583, 300, 31828, 1412, 11, 291, 434, 516, 281, 483, 257, 31828, 4134, 13, 400, 562, 291, 584, 915, 4195, 13, 50714, 50714, 407, 286, 390, 1566, 300, 309, 311, 22062, 4761, 281, 574, 411, 31828, 11, 457, 445, 264, 9317, 11, 406, 264, 4190, 13, 51014, 51014, 1042, 11, 264, 13019, 808, 646, 294, 264, 912, 3909, 13, 51214, 51214, 407, 498, 291, 5308, 700, 1315, 11, 300, 31828, 2657, 307, 516, 281, 808, 646, 294, 264, 2141, 700, 1315, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.0514136414195216, "compression_ratio": 1.6, "no_caption_prob": 0.00017129440675489604}, {"id": 159, "seek": 91200, "start": 912.0, "end": 919.0, "text": " Sorry, if you say find person, that JSON object is going to come back under the key find person.", "tokens": [50364, 4919, 11, 498, 291, 584, 915, 954, 11, 300, 31828, 2657, 307, 516, 281, 808, 646, 833, 264, 2141, 915, 954, 13, 50714, 50714, 583, 291, 434, 884, 915, 954, 6091, 13, 400, 370, 456, 311, 516, 281, 312, 257, 24644, 293, 291, 483, 257, 21884, 13695, 6713, 13, 51014, 51014, 1119, 300, 257, 1154, 300, 561, 2464, 21884, 13695, 16945, 362, 30, 51164, 51164, 663, 486, 3297, 312, 257, 34474, 6713, 300, 264, 7154, 486, 3061, 13, 51414, 51414, 509, 815, 362, 411, 257, 287, 5106, 300, 3665, 291, 365, 300, 420, 300, 1333, 295, 2290, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.07738911871816598, "compression_ratio": 1.6556016597510372, "no_caption_prob": 5.475844591273926e-05}, {"id": 160, "seek": 91200, "start": 919.0, "end": 925.0, "text": " But you're doing find person twice. And so there's going to be a collision and you get a GraphQL error.", "tokens": [50364, 4919, 11, 498, 291, 584, 915, 954, 11, 300, 31828, 2657, 307, 516, 281, 808, 646, 833, 264, 2141, 915, 954, 13, 50714, 50714, 583, 291, 434, 884, 915, 954, 6091, 13, 400, 370, 456, 311, 516, 281, 312, 257, 24644, 293, 291, 483, 257, 21884, 13695, 6713, 13, 51014, 51014, 1119, 300, 257, 1154, 300, 561, 2464, 21884, 13695, 16945, 362, 30, 51164, 51164, 663, 486, 3297, 312, 257, 34474, 6713, 300, 264, 7154, 486, 3061, 13, 51414, 51414, 509, 815, 362, 411, 257, 287, 5106, 300, 3665, 291, 365, 300, 420, 300, 1333, 295, 2290, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.07738911871816598, "compression_ratio": 1.6556016597510372, "no_caption_prob": 5.475844591273926e-05}, {"id": 161, "seek": 91200, "start": 925.0, "end": 928.0, "text": " Is that a problem that people write GraphQL manually have?", "tokens": [50364, 4919, 11, 498, 291, 584, 915, 954, 11, 300, 31828, 2657, 307, 516, 281, 808, 646, 833, 264, 2141, 915, 954, 13, 50714, 50714, 583, 291, 434, 884, 915, 954, 6091, 13, 400, 370, 456, 311, 516, 281, 312, 257, 24644, 293, 291, 483, 257, 21884, 13695, 6713, 13, 51014, 51014, 1119, 300, 257, 1154, 300, 561, 2464, 21884, 13695, 16945, 362, 30, 51164, 51164, 663, 486, 3297, 312, 257, 34474, 6713, 300, 264, 7154, 486, 3061, 13, 51414, 51414, 509, 815, 362, 411, 257, 287, 5106, 300, 3665, 291, 365, 300, 420, 300, 1333, 295, 2290, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.07738911871816598, "compression_ratio": 1.6556016597510372, "no_caption_prob": 5.475844591273926e-05}, {"id": 162, "seek": 91200, "start": 928.0, "end": 933.0, "text": " That will certainly be a runtime error that the server will fail.", "tokens": [50364, 4919, 11, 498, 291, 584, 915, 954, 11, 300, 31828, 2657, 307, 516, 281, 808, 646, 833, 264, 2141, 915, 954, 13, 50714, 50714, 583, 291, 434, 884, 915, 954, 6091, 13, 400, 370, 456, 311, 516, 281, 312, 257, 24644, 293, 291, 483, 257, 21884, 13695, 6713, 13, 51014, 51014, 1119, 300, 257, 1154, 300, 561, 2464, 21884, 13695, 16945, 362, 30, 51164, 51164, 663, 486, 3297, 312, 257, 34474, 6713, 300, 264, 7154, 486, 3061, 13, 51414, 51414, 509, 815, 362, 411, 257, 287, 5106, 300, 3665, 291, 365, 300, 420, 300, 1333, 295, 2290, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.07738911871816598, "compression_ratio": 1.6556016597510372, "no_caption_prob": 5.475844591273926e-05}, {"id": 163, "seek": 91200, "start": 933.0, "end": 938.0, "text": " You may have like a linter that helps you with that or that sort of tool.", "tokens": [50364, 4919, 11, 498, 291, 584, 915, 954, 11, 300, 31828, 2657, 307, 516, 281, 808, 646, 833, 264, 2141, 915, 954, 13, 50714, 50714, 583, 291, 434, 884, 915, 954, 6091, 13, 400, 370, 456, 311, 516, 281, 312, 257, 24644, 293, 291, 483, 257, 21884, 13695, 6713, 13, 51014, 51014, 1119, 300, 257, 1154, 300, 561, 2464, 21884, 13695, 16945, 362, 30, 51164, 51164, 663, 486, 3297, 312, 257, 34474, 6713, 300, 264, 7154, 486, 3061, 13, 51414, 51414, 509, 815, 362, 411, 257, 287, 5106, 300, 3665, 291, 365, 300, 420, 300, 1333, 295, 2290, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.07738911871816598, "compression_ratio": 1.6556016597510372, "no_caption_prob": 5.475844591273926e-05}, {"id": 164, "seek": 93800, "start": 938.0, "end": 946.0, "text": " But with Elm GraphQL, you don't even have to think about it. So it's one thing if we can make those errors impossible,", "tokens": [50364, 583, 365, 2699, 76, 21884, 13695, 11, 291, 500, 380, 754, 362, 281, 519, 466, 309, 13, 407, 309, 311, 472, 551, 498, 321, 393, 652, 729, 13603, 6243, 11, 50764, 50764, 411, 2699, 76, 21884, 13695, 23815, 364, 9362, 300, 291, 434, 516, 281, 764, 721, 264, 558, 636, 13, 51014, 51014, 663, 311, 472, 636, 281, 360, 309, 13, 3996, 636, 281, 4871, 13603, 307, 538, 12649, 278, 1314, 729, 4365, 293, 1940, 1127, 295, 552, 337, 264, 4195, 13, 51364, 51364, 682, 341, 1389, 11, 300, 311, 437, 2699, 76, 21884, 13695, 775, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.053556092894903505, "compression_ratio": 1.6217391304347826, "no_caption_prob": 4.908420305582695e-05}, {"id": 165, "seek": 93800, "start": 946.0, "end": 951.0, "text": " like Elm GraphQL generates an API that you're going to use things the right way.", "tokens": [50364, 583, 365, 2699, 76, 21884, 13695, 11, 291, 500, 380, 754, 362, 281, 519, 466, 309, 13, 407, 309, 311, 472, 551, 498, 321, 393, 652, 729, 13603, 6243, 11, 50764, 50764, 411, 2699, 76, 21884, 13695, 23815, 364, 9362, 300, 291, 434, 516, 281, 764, 721, 264, 558, 636, 13, 51014, 51014, 663, 311, 472, 636, 281, 360, 309, 13, 3996, 636, 281, 4871, 13603, 307, 538, 12649, 278, 1314, 729, 4365, 293, 1940, 1127, 295, 552, 337, 264, 4195, 13, 51364, 51364, 682, 341, 1389, 11, 300, 311, 437, 2699, 76, 21884, 13695, 775, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.053556092894903505, "compression_ratio": 1.6217391304347826, "no_caption_prob": 4.908420305582695e-05}, {"id": 166, "seek": 93800, "start": 951.0, "end": 958.0, "text": " That's one way to do it. Another way to prevent errors is by abstracting away those details and taking care of them for the user.", "tokens": [50364, 583, 365, 2699, 76, 21884, 13695, 11, 291, 500, 380, 754, 362, 281, 519, 466, 309, 13, 407, 309, 311, 472, 551, 498, 321, 393, 652, 729, 13603, 6243, 11, 50764, 50764, 411, 2699, 76, 21884, 13695, 23815, 364, 9362, 300, 291, 434, 516, 281, 764, 721, 264, 558, 636, 13, 51014, 51014, 663, 311, 472, 636, 281, 360, 309, 13, 3996, 636, 281, 4871, 13603, 307, 538, 12649, 278, 1314, 729, 4365, 293, 1940, 1127, 295, 552, 337, 264, 4195, 13, 51364, 51364, 682, 341, 1389, 11, 300, 311, 437, 2699, 76, 21884, 13695, 775, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.053556092894903505, "compression_ratio": 1.6217391304347826, "no_caption_prob": 4.908420305582695e-05}, {"id": 167, "seek": 93800, "start": 958.0, "end": 961.0, "text": " In this case, that's what Elm GraphQL does.", "tokens": [50364, 583, 365, 2699, 76, 21884, 13695, 11, 291, 500, 380, 754, 362, 281, 519, 466, 309, 13, 407, 309, 311, 472, 551, 498, 321, 393, 652, 729, 13603, 6243, 11, 50764, 50764, 411, 2699, 76, 21884, 13695, 23815, 364, 9362, 300, 291, 434, 516, 281, 764, 721, 264, 558, 636, 13, 51014, 51014, 663, 311, 472, 636, 281, 360, 309, 13, 3996, 636, 281, 4871, 13603, 307, 538, 12649, 278, 1314, 729, 4365, 293, 1940, 1127, 295, 552, 337, 264, 4195, 13, 51364, 51364, 682, 341, 1389, 11, 300, 311, 437, 2699, 76, 21884, 13695, 775, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.053556092894903505, "compression_ratio": 1.6217391304347826, "no_caption_prob": 4.908420305582695e-05}, {"id": 168, "seek": 96100, "start": 961.0, "end": 970.0, "text": " So the way that you solve this problem of a collision where you're requesting two fields with the same name is you need to give it a field alias.", "tokens": [50364, 407, 264, 636, 300, 291, 5039, 341, 1154, 295, 257, 24644, 689, 291, 434, 31937, 732, 7909, 365, 264, 912, 1315, 307, 291, 643, 281, 976, 309, 257, 2519, 419, 4609, 13, 50814, 50814, 400, 370, 291, 576, 445, 764, 264, 28431, 689, 291, 584, 11, 291, 458, 11, 954, 472, 8255, 915, 954, 7348, 472, 293, 550, 954, 732, 8255, 915, 954, 7348, 732, 13, 51314, 51314, 823, 309, 311, 516, 281, 808, 646, 833, 264, 31828, 2141, 954, 472, 11, 597, 390, 264, 419, 4609, 291, 2729, 309, 420, 917, 954, 732, 13, 51614, 51614, 583, 2699, 76, 21884, 13695, 2516, 1127, 295, 300, 337, 291, 370, 291, 500, 380, 362, 281, 519, 466, 309, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.07910689369576876, "compression_ratio": 1.704626334519573, "no_caption_prob": 4.908422124572098e-05}, {"id": 169, "seek": 96100, "start": 970.0, "end": 980.0, "text": " And so you would just use the syntax where you say, you know, person one colon find person ID one and then person two colon find person ID two.", "tokens": [50364, 407, 264, 636, 300, 291, 5039, 341, 1154, 295, 257, 24644, 689, 291, 434, 31937, 732, 7909, 365, 264, 912, 1315, 307, 291, 643, 281, 976, 309, 257, 2519, 419, 4609, 13, 50814, 50814, 400, 370, 291, 576, 445, 764, 264, 28431, 689, 291, 584, 11, 291, 458, 11, 954, 472, 8255, 915, 954, 7348, 472, 293, 550, 954, 732, 8255, 915, 954, 7348, 732, 13, 51314, 51314, 823, 309, 311, 516, 281, 808, 646, 833, 264, 31828, 2141, 954, 472, 11, 597, 390, 264, 419, 4609, 291, 2729, 309, 420, 917, 954, 732, 13, 51614, 51614, 583, 2699, 76, 21884, 13695, 2516, 1127, 295, 300, 337, 291, 370, 291, 500, 380, 362, 281, 519, 466, 309, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.07910689369576876, "compression_ratio": 1.704626334519573, "no_caption_prob": 4.908422124572098e-05}, {"id": 170, "seek": 96100, "start": 980.0, "end": 986.0, "text": " Now it's going to come back under the JSON key person one, which was the alias you gave it or end person two.", "tokens": [50364, 407, 264, 636, 300, 291, 5039, 341, 1154, 295, 257, 24644, 689, 291, 434, 31937, 732, 7909, 365, 264, 912, 1315, 307, 291, 643, 281, 976, 309, 257, 2519, 419, 4609, 13, 50814, 50814, 400, 370, 291, 576, 445, 764, 264, 28431, 689, 291, 584, 11, 291, 458, 11, 954, 472, 8255, 915, 954, 7348, 472, 293, 550, 954, 732, 8255, 915, 954, 7348, 732, 13, 51314, 51314, 823, 309, 311, 516, 281, 808, 646, 833, 264, 31828, 2141, 954, 472, 11, 597, 390, 264, 419, 4609, 291, 2729, 309, 420, 917, 954, 732, 13, 51614, 51614, 583, 2699, 76, 21884, 13695, 2516, 1127, 295, 300, 337, 291, 370, 291, 500, 380, 362, 281, 519, 466, 309, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.07910689369576876, "compression_ratio": 1.704626334519573, "no_caption_prob": 4.908422124572098e-05}, {"id": 171, "seek": 96100, "start": 986.0, "end": 989.0, "text": " But Elm GraphQL takes care of that for you so you don't have to think about it.", "tokens": [50364, 407, 264, 636, 300, 291, 5039, 341, 1154, 295, 257, 24644, 689, 291, 434, 31937, 732, 7909, 365, 264, 912, 1315, 307, 291, 643, 281, 976, 309, 257, 2519, 419, 4609, 13, 50814, 50814, 400, 370, 291, 576, 445, 764, 264, 28431, 689, 291, 584, 11, 291, 458, 11, 954, 472, 8255, 915, 954, 7348, 472, 293, 550, 954, 732, 8255, 915, 954, 7348, 732, 13, 51314, 51314, 823, 309, 311, 516, 281, 808, 646, 833, 264, 31828, 2141, 954, 472, 11, 597, 390, 264, 419, 4609, 291, 2729, 309, 420, 917, 954, 732, 13, 51614, 51614, 583, 2699, 76, 21884, 13695, 2516, 1127, 295, 300, 337, 291, 370, 291, 500, 380, 362, 281, 519, 466, 309, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.07910689369576876, "compression_ratio": 1.704626334519573, "no_caption_prob": 4.908422124572098e-05}, {"id": 172, "seek": 98900, "start": 989.0, "end": 1001.0, "text": " And that's why in the FAQ in the Elm GraphQL repo, I talk about these mysterious ID numbers that show up in all of the fields.", "tokens": [50364, 400, 300, 311, 983, 294, 264, 19894, 48, 294, 264, 2699, 76, 21884, 13695, 49040, 11, 286, 751, 466, 613, 13831, 7348, 3547, 300, 855, 493, 294, 439, 295, 264, 7909, 13, 50964, 50964, 407, 291, 815, 3449, 729, 13, 663, 311, 437, 300, 311, 884, 13, 51064, 51064, 400, 286, 4114, 364, 7222, 1417, 466, 411, 264, 1715, 295, 300, 293, 512, 295, 264, 286, 2825, 466, 577, 2699, 76, 1333, 295, 21020, 291, 3030, 18587, 1715, 51464, 51464, 570, 309, 311, 6081, 281, 362, 1333, 295, 32490, 1785, 294, 428, 3089, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.06705779931983169, "compression_ratio": 1.628691983122363, "no_caption_prob": 5.144047099747695e-05}, {"id": 173, "seek": 98900, "start": 1001.0, "end": 1003.0, "text": " So you may notice those. That's what that's doing.", "tokens": [50364, 400, 300, 311, 983, 294, 264, 19894, 48, 294, 264, 2699, 76, 21884, 13695, 49040, 11, 286, 751, 466, 613, 13831, 7348, 3547, 300, 855, 493, 294, 439, 295, 264, 7909, 13, 50964, 50964, 407, 291, 815, 3449, 729, 13, 663, 311, 437, 300, 311, 884, 13, 51064, 51064, 400, 286, 4114, 364, 7222, 1417, 466, 411, 264, 1715, 295, 300, 293, 512, 295, 264, 286, 2825, 466, 577, 2699, 76, 1333, 295, 21020, 291, 3030, 18587, 1715, 51464, 51464, 570, 309, 311, 6081, 281, 362, 1333, 295, 32490, 1785, 294, 428, 3089, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.06705779931983169, "compression_ratio": 1.628691983122363, "no_caption_prob": 5.144047099747695e-05}, {"id": 174, "seek": 98900, "start": 1003.0, "end": 1011.0, "text": " And I wrote an article talking about like the design of that and some of the I talked about how Elm sort of pushes you towards simpler design", "tokens": [50364, 400, 300, 311, 983, 294, 264, 19894, 48, 294, 264, 2699, 76, 21884, 13695, 49040, 11, 286, 751, 466, 613, 13831, 7348, 3547, 300, 855, 493, 294, 439, 295, 264, 7909, 13, 50964, 50964, 407, 291, 815, 3449, 729, 13, 663, 311, 437, 300, 311, 884, 13, 51064, 51064, 400, 286, 4114, 364, 7222, 1417, 466, 411, 264, 1715, 295, 300, 293, 512, 295, 264, 286, 2825, 466, 577, 2699, 76, 1333, 295, 21020, 291, 3030, 18587, 1715, 51464, 51464, 570, 309, 311, 6081, 281, 362, 1333, 295, 32490, 1785, 294, 428, 3089, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.06705779931983169, "compression_ratio": 1.628691983122363, "no_caption_prob": 5.144047099747695e-05}, {"id": 175, "seek": 98900, "start": 1011.0, "end": 1015.0, "text": " because it's harder to have sort of imperative state in your code.", "tokens": [50364, 400, 300, 311, 983, 294, 264, 19894, 48, 294, 264, 2699, 76, 21884, 13695, 49040, 11, 286, 751, 466, 613, 13831, 7348, 3547, 300, 855, 493, 294, 439, 295, 264, 7909, 13, 50964, 50964, 407, 291, 815, 3449, 729, 13, 663, 311, 437, 300, 311, 884, 13, 51064, 51064, 400, 286, 4114, 364, 7222, 1417, 466, 411, 264, 1715, 295, 300, 293, 512, 295, 264, 286, 2825, 466, 577, 2699, 76, 1333, 295, 21020, 291, 3030, 18587, 1715, 51464, 51464, 570, 309, 311, 6081, 281, 362, 1333, 295, 32490, 1785, 294, 428, 3089, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.06705779931983169, "compression_ratio": 1.628691983122363, "no_caption_prob": 5.144047099747695e-05}, {"id": 176, "seek": 101500, "start": 1015.0, "end": 1020.0, "text": " So we'll share a link to those and people who are interested to learn more about that can take a look.", "tokens": [50364, 407, 321, 603, 2073, 257, 2113, 281, 729, 293, 561, 567, 366, 3102, 281, 1466, 544, 466, 300, 393, 747, 257, 574, 13, 50614, 50614, 407, 472, 1154, 286, 2049, 8593, 562, 286, 862, 365, 2699, 76, 21884, 13695, 307, 300, 286, 478, 1237, 337, 1412, 322, 954, 11, 337, 5197, 13, 51114, 51114, 407, 437, 286, 360, 307, 286, 360, 2190, 4195, 13, 51264, 51264, 400, 321, 3879, 658, 20822, 27965, 25949, 11, 994, 380, 321, 30, 51364, 51364, 492, 5298, 281, 2152, 300, 11923, 2010, 7006, 22367, 291, 490, 1382, 281, 5308, 746, 412, 264, 1192, 1496, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.05938122822688176, "compression_ratio": 1.5320754716981133, "no_caption_prob": 1.6187341316253878e-05}, {"id": 177, "seek": 101500, "start": 1020.0, "end": 1030.0, "text": " So one problem I often encounter when I play with Elm GraphQL is that I'm looking for data on person, for instance.", "tokens": [50364, 407, 321, 603, 2073, 257, 2113, 281, 729, 293, 561, 567, 366, 3102, 281, 1466, 544, 466, 300, 393, 747, 257, 574, 13, 50614, 50614, 407, 472, 1154, 286, 2049, 8593, 562, 286, 862, 365, 2699, 76, 21884, 13695, 307, 300, 286, 478, 1237, 337, 1412, 322, 954, 11, 337, 5197, 13, 51114, 51114, 407, 437, 286, 360, 307, 286, 360, 2190, 4195, 13, 51264, 51264, 400, 321, 3879, 658, 20822, 27965, 25949, 11, 994, 380, 321, 30, 51364, 51364, 492, 5298, 281, 2152, 300, 11923, 2010, 7006, 22367, 291, 490, 1382, 281, 5308, 746, 412, 264, 1192, 1496, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.05938122822688176, "compression_ratio": 1.5320754716981133, "no_caption_prob": 1.6187341316253878e-05}, {"id": 178, "seek": 101500, "start": 1030.0, "end": 1033.0, "text": " So what I do is I do current user.", "tokens": [50364, 407, 321, 603, 2073, 257, 2113, 281, 729, 293, 561, 567, 366, 3102, 281, 1466, 544, 466, 300, 393, 747, 257, 574, 13, 50614, 50614, 407, 472, 1154, 286, 2049, 8593, 562, 286, 862, 365, 2699, 76, 21884, 13695, 307, 300, 286, 478, 1237, 337, 1412, 322, 954, 11, 337, 5197, 13, 51114, 51114, 407, 437, 286, 360, 307, 286, 360, 2190, 4195, 13, 51264, 51264, 400, 321, 3879, 658, 20822, 27965, 25949, 11, 994, 380, 321, 30, 51364, 51364, 492, 5298, 281, 2152, 300, 11923, 2010, 7006, 22367, 291, 490, 1382, 281, 5308, 746, 412, 264, 1192, 1496, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.05938122822688176, "compression_ratio": 1.5320754716981133, "no_caption_prob": 1.6187341316253878e-05}, {"id": 179, "seek": 101500, "start": 1033.0, "end": 1035.0, "text": " And we totally got sidetracked, didn't we?", "tokens": [50364, 407, 321, 603, 2073, 257, 2113, 281, 729, 293, 561, 567, 366, 3102, 281, 1466, 544, 466, 300, 393, 747, 257, 574, 13, 50614, 50614, 407, 472, 1154, 286, 2049, 8593, 562, 286, 862, 365, 2699, 76, 21884, 13695, 307, 300, 286, 478, 1237, 337, 1412, 322, 954, 11, 337, 5197, 13, 51114, 51114, 407, 437, 286, 360, 307, 286, 360, 2190, 4195, 13, 51264, 51264, 400, 321, 3879, 658, 20822, 27965, 25949, 11, 994, 380, 321, 30, 51364, 51364, 492, 5298, 281, 2152, 300, 11923, 2010, 7006, 22367, 291, 490, 1382, 281, 5308, 746, 412, 264, 1192, 1496, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.05938122822688176, "compression_ratio": 1.5320754716981133, "no_caption_prob": 1.6187341316253878e-05}, {"id": 180, "seek": 101500, "start": 1035.0, "end": 1043.0, "text": " We forgot to mention that scope type variable prevents you from trying to request something at the top level.", "tokens": [50364, 407, 321, 603, 2073, 257, 2113, 281, 729, 293, 561, 567, 366, 3102, 281, 1466, 544, 466, 300, 393, 747, 257, 574, 13, 50614, 50614, 407, 472, 1154, 286, 2049, 8593, 562, 286, 862, 365, 2699, 76, 21884, 13695, 307, 300, 286, 478, 1237, 337, 1412, 322, 954, 11, 337, 5197, 13, 51114, 51114, 407, 437, 286, 360, 307, 286, 360, 2190, 4195, 13, 51264, 51264, 400, 321, 3879, 658, 20822, 27965, 25949, 11, 994, 380, 321, 30, 51364, 51364, 492, 5298, 281, 2152, 300, 11923, 2010, 7006, 22367, 291, 490, 1382, 281, 5308, 746, 412, 264, 1192, 1496, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.05938122822688176, "compression_ratio": 1.5320754716981133, "no_caption_prob": 1.6187341316253878e-05}, {"id": 181, "seek": 104300, "start": 1043.0, "end": 1045.0, "text": " That was the original point.", "tokens": [50364, 663, 390, 264, 3380, 935, 13, 50464, 50464, 407, 1310, 718, 311, 7019, 300, 493, 957, 1702, 293, 550, 483, 281, 428, 935, 456, 13, 50614, 50614, 3013, 307, 4077, 4033, 13, 50714, 50714, 1033, 11, 665, 13, 50764, 50764, 407, 264, 11923, 2010, 7006, 11, 456, 366, 732, 2010, 9102, 13, 50914, 50914, 821, 311, 437, 309, 979, 4789, 281, 13, 50964, 50964, 663, 311, 264, 700, 2010, 7006, 293, 264, 1150, 2010, 7006, 11, 597, 1143, 281, 312, 1219, 2125, 338, 1560, 13, 51214, 51214, 400, 309, 311, 586, 1219, 11923, 11, 597, 286, 519, 1101, 18926, 1080, 4334, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.09050749832729124, "compression_ratio": 1.6986899563318778, "no_caption_prob": 0.0001420131593476981}, {"id": 182, "seek": 104300, "start": 1045.0, "end": 1048.0, "text": " So maybe let's wrap that up real quick and then get to your point there.", "tokens": [50364, 663, 390, 264, 3380, 935, 13, 50464, 50464, 407, 1310, 718, 311, 7019, 300, 493, 957, 1702, 293, 550, 483, 281, 428, 935, 456, 13, 50614, 50614, 3013, 307, 4077, 4033, 13, 50714, 50714, 1033, 11, 665, 13, 50764, 50764, 407, 264, 11923, 2010, 7006, 11, 456, 366, 732, 2010, 9102, 13, 50914, 50914, 821, 311, 437, 309, 979, 4789, 281, 13, 50964, 50964, 663, 311, 264, 700, 2010, 7006, 293, 264, 1150, 2010, 7006, 11, 597, 1143, 281, 312, 1219, 2125, 338, 1560, 13, 51214, 51214, 400, 309, 311, 586, 1219, 11923, 11, 597, 286, 519, 1101, 18926, 1080, 4334, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.09050749832729124, "compression_ratio": 1.6986899563318778, "no_caption_prob": 0.0001420131593476981}, {"id": 183, "seek": 104300, "start": 1048.0, "end": 1050.0, "text": " Which is related anyway.", "tokens": [50364, 663, 390, 264, 3380, 935, 13, 50464, 50464, 407, 1310, 718, 311, 7019, 300, 493, 957, 1702, 293, 550, 483, 281, 428, 935, 456, 13, 50614, 50614, 3013, 307, 4077, 4033, 13, 50714, 50714, 1033, 11, 665, 13, 50764, 50764, 407, 264, 11923, 2010, 7006, 11, 456, 366, 732, 2010, 9102, 13, 50914, 50914, 821, 311, 437, 309, 979, 4789, 281, 13, 50964, 50964, 663, 311, 264, 700, 2010, 7006, 293, 264, 1150, 2010, 7006, 11, 597, 1143, 281, 312, 1219, 2125, 338, 1560, 13, 51214, 51214, 400, 309, 311, 586, 1219, 11923, 11, 597, 286, 519, 1101, 18926, 1080, 4334, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.09050749832729124, "compression_ratio": 1.6986899563318778, "no_caption_prob": 0.0001420131593476981}, {"id": 184, "seek": 104300, "start": 1050.0, "end": 1051.0, "text": " Okay, good.", "tokens": [50364, 663, 390, 264, 3380, 935, 13, 50464, 50464, 407, 1310, 718, 311, 7019, 300, 493, 957, 1702, 293, 550, 483, 281, 428, 935, 456, 13, 50614, 50614, 3013, 307, 4077, 4033, 13, 50714, 50714, 1033, 11, 665, 13, 50764, 50764, 407, 264, 11923, 2010, 7006, 11, 456, 366, 732, 2010, 9102, 13, 50914, 50914, 821, 311, 437, 309, 979, 4789, 281, 13, 50964, 50964, 663, 311, 264, 700, 2010, 7006, 293, 264, 1150, 2010, 7006, 11, 597, 1143, 281, 312, 1219, 2125, 338, 1560, 13, 51214, 51214, 400, 309, 311, 586, 1219, 11923, 11, 597, 286, 519, 1101, 18926, 1080, 4334, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.09050749832729124, "compression_ratio": 1.6986899563318778, "no_caption_prob": 0.0001420131593476981}, {"id": 185, "seek": 104300, "start": 1051.0, "end": 1054.0, "text": " So the scope type variable, there are two type variables.", "tokens": [50364, 663, 390, 264, 3380, 935, 13, 50464, 50464, 407, 1310, 718, 311, 7019, 300, 493, 957, 1702, 293, 550, 483, 281, 428, 935, 456, 13, 50614, 50614, 3013, 307, 4077, 4033, 13, 50714, 50714, 1033, 11, 665, 13, 50764, 50764, 407, 264, 11923, 2010, 7006, 11, 456, 366, 732, 2010, 9102, 13, 50914, 50914, 821, 311, 437, 309, 979, 4789, 281, 13, 50964, 50964, 663, 311, 264, 700, 2010, 7006, 293, 264, 1150, 2010, 7006, 11, 597, 1143, 281, 312, 1219, 2125, 338, 1560, 13, 51214, 51214, 400, 309, 311, 586, 1219, 11923, 11, 597, 286, 519, 1101, 18926, 1080, 4334, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.09050749832729124, "compression_ratio": 1.6986899563318778, "no_caption_prob": 0.0001420131593476981}, {"id": 186, "seek": 104300, "start": 1054.0, "end": 1055.0, "text": " There's what it decodes to.", "tokens": [50364, 663, 390, 264, 3380, 935, 13, 50464, 50464, 407, 1310, 718, 311, 7019, 300, 493, 957, 1702, 293, 550, 483, 281, 428, 935, 456, 13, 50614, 50614, 3013, 307, 4077, 4033, 13, 50714, 50714, 1033, 11, 665, 13, 50764, 50764, 407, 264, 11923, 2010, 7006, 11, 456, 366, 732, 2010, 9102, 13, 50914, 50914, 821, 311, 437, 309, 979, 4789, 281, 13, 50964, 50964, 663, 311, 264, 700, 2010, 7006, 293, 264, 1150, 2010, 7006, 11, 597, 1143, 281, 312, 1219, 2125, 338, 1560, 13, 51214, 51214, 400, 309, 311, 586, 1219, 11923, 11, 597, 286, 519, 1101, 18926, 1080, 4334, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.09050749832729124, "compression_ratio": 1.6986899563318778, "no_caption_prob": 0.0001420131593476981}, {"id": 187, "seek": 104300, "start": 1055.0, "end": 1060.0, "text": " That's the first type variable and the second type variable, which used to be called typelock.", "tokens": [50364, 663, 390, 264, 3380, 935, 13, 50464, 50464, 407, 1310, 718, 311, 7019, 300, 493, 957, 1702, 293, 550, 483, 281, 428, 935, 456, 13, 50614, 50614, 3013, 307, 4077, 4033, 13, 50714, 50714, 1033, 11, 665, 13, 50764, 50764, 407, 264, 11923, 2010, 7006, 11, 456, 366, 732, 2010, 9102, 13, 50914, 50914, 821, 311, 437, 309, 979, 4789, 281, 13, 50964, 50964, 663, 311, 264, 700, 2010, 7006, 293, 264, 1150, 2010, 7006, 11, 597, 1143, 281, 312, 1219, 2125, 338, 1560, 13, 51214, 51214, 400, 309, 311, 586, 1219, 11923, 11, 597, 286, 519, 1101, 18926, 1080, 4334, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.09050749832729124, "compression_ratio": 1.6986899563318778, "no_caption_prob": 0.0001420131593476981}, {"id": 188, "seek": 104300, "start": 1060.0, "end": 1065.0, "text": " And it's now called scope, which I think better reflects its purpose.", "tokens": [50364, 663, 390, 264, 3380, 935, 13, 50464, 50464, 407, 1310, 718, 311, 7019, 300, 493, 957, 1702, 293, 550, 483, 281, 428, 935, 456, 13, 50614, 50614, 3013, 307, 4077, 4033, 13, 50714, 50714, 1033, 11, 665, 13, 50764, 50764, 407, 264, 11923, 2010, 7006, 11, 456, 366, 732, 2010, 9102, 13, 50914, 50914, 821, 311, 437, 309, 979, 4789, 281, 13, 50964, 50964, 663, 311, 264, 700, 2010, 7006, 293, 264, 1150, 2010, 7006, 11, 597, 1143, 281, 312, 1219, 2125, 338, 1560, 13, 51214, 51214, 400, 309, 311, 586, 1219, 11923, 11, 597, 286, 519, 1101, 18926, 1080, 4334, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.09050749832729124, "compression_ratio": 1.6986899563318778, "no_caption_prob": 0.0001420131593476981}, {"id": 189, "seek": 106500, "start": 1065.0, "end": 1076.0, "text": " So the scope, as you were talking about, if you request this top level thing of the build version, which is just a simple built in string type at the top level.", "tokens": [50364, 407, 264, 11923, 11, 382, 291, 645, 1417, 466, 11, 498, 291, 5308, 341, 1192, 1496, 551, 295, 264, 1322, 3037, 11, 597, 307, 445, 257, 2199, 3094, 294, 6798, 2010, 412, 264, 1192, 1496, 13, 50914, 50914, 467, 311, 406, 257, 15646, 292, 2657, 14581, 13, 51014, 51014, 823, 11, 264, 2010, 295, 300, 307, 516, 281, 312, 309, 311, 257, 5593, 14581, 13, 51214, 51214, 583, 550, 1564, 291, 370, 300, 576, 312, 337, 264, 1322, 3037, 11, 264, 11923, 2010, 7006, 576, 312, 264, 5593, 14581, 13, 51564, 51564, 583, 337, 257, 954, 9450, 992, 11, 264, 11923, 307, 516, 281, 312, 954, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.052049048312075505, "compression_ratio": 1.883408071748879, "no_caption_prob": 9.914505790220574e-05}, {"id": 190, "seek": 106500, "start": 1076.0, "end": 1078.0, "text": " It's not a nested object query.", "tokens": [50364, 407, 264, 11923, 11, 382, 291, 645, 1417, 466, 11, 498, 291, 5308, 341, 1192, 1496, 551, 295, 264, 1322, 3037, 11, 597, 307, 445, 257, 2199, 3094, 294, 6798, 2010, 412, 264, 1192, 1496, 13, 50914, 50914, 467, 311, 406, 257, 15646, 292, 2657, 14581, 13, 51014, 51014, 823, 11, 264, 2010, 295, 300, 307, 516, 281, 312, 309, 311, 257, 5593, 14581, 13, 51214, 51214, 583, 550, 1564, 291, 370, 300, 576, 312, 337, 264, 1322, 3037, 11, 264, 11923, 2010, 7006, 576, 312, 264, 5593, 14581, 13, 51564, 51564, 583, 337, 257, 954, 9450, 992, 11, 264, 11923, 307, 516, 281, 312, 954, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.052049048312075505, "compression_ratio": 1.883408071748879, "no_caption_prob": 9.914505790220574e-05}, {"id": 191, "seek": 106500, "start": 1078.0, "end": 1082.0, "text": " Now, the type of that is going to be it's a root query.", "tokens": [50364, 407, 264, 11923, 11, 382, 291, 645, 1417, 466, 11, 498, 291, 5308, 341, 1192, 1496, 551, 295, 264, 1322, 3037, 11, 597, 307, 445, 257, 2199, 3094, 294, 6798, 2010, 412, 264, 1192, 1496, 13, 50914, 50914, 467, 311, 406, 257, 15646, 292, 2657, 14581, 13, 51014, 51014, 823, 11, 264, 2010, 295, 300, 307, 516, 281, 312, 309, 311, 257, 5593, 14581, 13, 51214, 51214, 583, 550, 1564, 291, 370, 300, 576, 312, 337, 264, 1322, 3037, 11, 264, 11923, 2010, 7006, 576, 312, 264, 5593, 14581, 13, 51564, 51564, 583, 337, 257, 954, 9450, 992, 11, 264, 11923, 307, 516, 281, 312, 954, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.052049048312075505, "compression_ratio": 1.883408071748879, "no_caption_prob": 9.914505790220574e-05}, {"id": 192, "seek": 106500, "start": 1082.0, "end": 1089.0, "text": " But then once you so that would be for the build version, the scope type variable would be the root query.", "tokens": [50364, 407, 264, 11923, 11, 382, 291, 645, 1417, 466, 11, 498, 291, 5308, 341, 1192, 1496, 551, 295, 264, 1322, 3037, 11, 597, 307, 445, 257, 2199, 3094, 294, 6798, 2010, 412, 264, 1192, 1496, 13, 50914, 50914, 467, 311, 406, 257, 15646, 292, 2657, 14581, 13, 51014, 51014, 823, 11, 264, 2010, 295, 300, 307, 516, 281, 312, 309, 311, 257, 5593, 14581, 13, 51214, 51214, 583, 550, 1564, 291, 370, 300, 576, 312, 337, 264, 1322, 3037, 11, 264, 11923, 2010, 7006, 576, 312, 264, 5593, 14581, 13, 51564, 51564, 583, 337, 257, 954, 9450, 992, 11, 264, 11923, 307, 516, 281, 312, 954, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.052049048312075505, "compression_ratio": 1.883408071748879, "no_caption_prob": 9.914505790220574e-05}, {"id": 193, "seek": 106500, "start": 1089.0, "end": 1094.0, "text": " But for a person selection set, the scope is going to be person.", "tokens": [50364, 407, 264, 11923, 11, 382, 291, 645, 1417, 466, 11, 498, 291, 5308, 341, 1192, 1496, 551, 295, 264, 1322, 3037, 11, 597, 307, 445, 257, 2199, 3094, 294, 6798, 2010, 412, 264, 1192, 1496, 13, 50914, 50914, 467, 311, 406, 257, 15646, 292, 2657, 14581, 13, 51014, 51014, 823, 11, 264, 2010, 295, 300, 307, 516, 281, 312, 309, 311, 257, 5593, 14581, 13, 51214, 51214, 583, 550, 1564, 291, 370, 300, 576, 312, 337, 264, 1322, 3037, 11, 264, 11923, 2010, 7006, 576, 312, 264, 5593, 14581, 13, 51564, 51564, 583, 337, 257, 954, 9450, 992, 11, 264, 11923, 307, 516, 281, 312, 954, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.052049048312075505, "compression_ratio": 1.883408071748879, "no_caption_prob": 9.914505790220574e-05}, {"id": 194, "seek": 109400, "start": 1094.0, "end": 1105.0, "text": " And so the way to think about that is if you try to get first name at the top level scope, it doesn't make any sense because you're getting it from that person object.", "tokens": [50364, 400, 370, 264, 636, 281, 519, 466, 300, 307, 498, 291, 853, 281, 483, 700, 1315, 412, 264, 1192, 1496, 11923, 11, 309, 1177, 380, 652, 604, 2020, 570, 291, 434, 1242, 309, 490, 300, 954, 2657, 13, 50914, 50914, 407, 291, 393, 483, 2190, 4195, 11, 1269, 22591, 530, 11, 700, 1315, 13, 51114, 51114, 509, 393, 360, 915, 4195, 7348, 472, 11, 1269, 22591, 530, 11, 700, 1315, 13, 51364, 51364, 407, 294, 264, 11923, 295, 257, 4195, 2657, 1951, 264, 22591, 530, 294, 264, 915, 4195, 420, 264, 2190, 4195, 11, 291, 366, 294, 264, 11923, 295, 257, 954, 9450, 992, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.07008239763592361, "compression_ratio": 1.9036697247706422, "no_caption_prob": 2.7108228096039966e-05}, {"id": 195, "seek": 109400, "start": 1105.0, "end": 1109.0, "text": " So you can get current user, open curlies, first name.", "tokens": [50364, 400, 370, 264, 636, 281, 519, 466, 300, 307, 498, 291, 853, 281, 483, 700, 1315, 412, 264, 1192, 1496, 11923, 11, 309, 1177, 380, 652, 604, 2020, 570, 291, 434, 1242, 309, 490, 300, 954, 2657, 13, 50914, 50914, 407, 291, 393, 483, 2190, 4195, 11, 1269, 22591, 530, 11, 700, 1315, 13, 51114, 51114, 509, 393, 360, 915, 4195, 7348, 472, 11, 1269, 22591, 530, 11, 700, 1315, 13, 51364, 51364, 407, 294, 264, 11923, 295, 257, 4195, 2657, 1951, 264, 22591, 530, 294, 264, 915, 4195, 420, 264, 2190, 4195, 11, 291, 366, 294, 264, 11923, 295, 257, 954, 9450, 992, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.07008239763592361, "compression_ratio": 1.9036697247706422, "no_caption_prob": 2.7108228096039966e-05}, {"id": 196, "seek": 109400, "start": 1109.0, "end": 1114.0, "text": " You can do find user ID one, open curlies, first name.", "tokens": [50364, 400, 370, 264, 636, 281, 519, 466, 300, 307, 498, 291, 853, 281, 483, 700, 1315, 412, 264, 1192, 1496, 11923, 11, 309, 1177, 380, 652, 604, 2020, 570, 291, 434, 1242, 309, 490, 300, 954, 2657, 13, 50914, 50914, 407, 291, 393, 483, 2190, 4195, 11, 1269, 22591, 530, 11, 700, 1315, 13, 51114, 51114, 509, 393, 360, 915, 4195, 7348, 472, 11, 1269, 22591, 530, 11, 700, 1315, 13, 51364, 51364, 407, 294, 264, 11923, 295, 257, 4195, 2657, 1951, 264, 22591, 530, 294, 264, 915, 4195, 420, 264, 2190, 4195, 11, 291, 366, 294, 264, 11923, 295, 257, 954, 9450, 992, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.07008239763592361, "compression_ratio": 1.9036697247706422, "no_caption_prob": 2.7108228096039966e-05}, {"id": 197, "seek": 109400, "start": 1114.0, "end": 1123.0, "text": " So in the scope of a user object within the curlies in the find user or the current user, you are in the scope of a person selection set.", "tokens": [50364, 400, 370, 264, 636, 281, 519, 466, 300, 307, 498, 291, 853, 281, 483, 700, 1315, 412, 264, 1192, 1496, 11923, 11, 309, 1177, 380, 652, 604, 2020, 570, 291, 434, 1242, 309, 490, 300, 954, 2657, 13, 50914, 50914, 407, 291, 393, 483, 2190, 4195, 11, 1269, 22591, 530, 11, 700, 1315, 13, 51114, 51114, 509, 393, 360, 915, 4195, 7348, 472, 11, 1269, 22591, 530, 11, 700, 1315, 13, 51364, 51364, 407, 294, 264, 11923, 295, 257, 4195, 2657, 1951, 264, 22591, 530, 294, 264, 915, 4195, 420, 264, 2190, 4195, 11, 291, 366, 294, 264, 11923, 295, 257, 954, 9450, 992, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.07008239763592361, "compression_ratio": 1.9036697247706422, "no_caption_prob": 2.7108228096039966e-05}, {"id": 198, "seek": 112300, "start": 1123.0, "end": 1124.0, "text": " Of a person up.", "tokens": [50364, 2720, 257, 954, 493, 13, 50414, 50414, 400, 370, 291, 362, 2105, 281, 7909, 294, 300, 11923, 13, 50564, 50564, 407, 300, 311, 437, 300, 1150, 2010, 7006, 294, 257, 9450, 992, 8855, 307, 300, 11923, 13, 50864, 50864, 865, 13, 400, 437, 309, 3665, 291, 4871, 307, 291, 3365, 337, 7909, 300, 360, 406, 2514, 322, 746, 1646, 13, 51164, 51164, 7587, 13, 9129, 300, 11, 2699, 76, 21884, 13695, 576, 406, 534, 312, 1075, 281, 4584, 1080, 6228, 295, 19965, 34702, 21884, 13695, 24109, 420, 412, 1935, 2902, 291, 257, 31958, 6713, 498, 291, 853, 281, 360, 300, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.11786554427373977, "compression_ratio": 1.6325757575757576, "no_caption_prob": 7.527928573836107e-06}, {"id": 199, "seek": 112300, "start": 1124.0, "end": 1127.0, "text": " And so you have access to fields in that scope.", "tokens": [50364, 2720, 257, 954, 493, 13, 50414, 50414, 400, 370, 291, 362, 2105, 281, 7909, 294, 300, 11923, 13, 50564, 50564, 407, 300, 311, 437, 300, 1150, 2010, 7006, 294, 257, 9450, 992, 8855, 307, 300, 11923, 13, 50864, 50864, 865, 13, 400, 437, 309, 3665, 291, 4871, 307, 291, 3365, 337, 7909, 300, 360, 406, 2514, 322, 746, 1646, 13, 51164, 51164, 7587, 13, 9129, 300, 11, 2699, 76, 21884, 13695, 576, 406, 534, 312, 1075, 281, 4584, 1080, 6228, 295, 19965, 34702, 21884, 13695, 24109, 420, 412, 1935, 2902, 291, 257, 31958, 6713, 498, 291, 853, 281, 360, 300, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.11786554427373977, "compression_ratio": 1.6325757575757576, "no_caption_prob": 7.527928573836107e-06}, {"id": 200, "seek": 112300, "start": 1127.0, "end": 1133.0, "text": " So that's what that second type variable in a selection set represents is that scope.", "tokens": [50364, 2720, 257, 954, 493, 13, 50414, 50414, 400, 370, 291, 362, 2105, 281, 7909, 294, 300, 11923, 13, 50564, 50564, 407, 300, 311, 437, 300, 1150, 2010, 7006, 294, 257, 9450, 992, 8855, 307, 300, 11923, 13, 50864, 50864, 865, 13, 400, 437, 309, 3665, 291, 4871, 307, 291, 3365, 337, 7909, 300, 360, 406, 2514, 322, 746, 1646, 13, 51164, 51164, 7587, 13, 9129, 300, 11, 2699, 76, 21884, 13695, 576, 406, 534, 312, 1075, 281, 4584, 1080, 6228, 295, 19965, 34702, 21884, 13695, 24109, 420, 412, 1935, 2902, 291, 257, 31958, 6713, 498, 291, 853, 281, 360, 300, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.11786554427373977, "compression_ratio": 1.6325757575757576, "no_caption_prob": 7.527928573836107e-06}, {"id": 201, "seek": 112300, "start": 1133.0, "end": 1139.0, "text": " Yeah. And what it helps you prevent is you asking for fields that do not exist on something else.", "tokens": [50364, 2720, 257, 954, 493, 13, 50414, 50414, 400, 370, 291, 362, 2105, 281, 7909, 294, 300, 11923, 13, 50564, 50564, 407, 300, 311, 437, 300, 1150, 2010, 7006, 294, 257, 9450, 992, 8855, 307, 300, 11923, 13, 50864, 50864, 865, 13, 400, 437, 309, 3665, 291, 4871, 307, 291, 3365, 337, 7909, 300, 360, 406, 2514, 322, 746, 1646, 13, 51164, 51164, 7587, 13, 9129, 300, 11, 2699, 76, 21884, 13695, 576, 406, 534, 312, 1075, 281, 4584, 1080, 6228, 295, 19965, 34702, 21884, 13695, 24109, 420, 412, 1935, 2902, 291, 257, 31958, 6713, 498, 291, 853, 281, 360, 300, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.11786554427373977, "compression_ratio": 1.6325757575757576, "no_caption_prob": 7.527928573836107e-06}, {"id": 202, "seek": 112300, "start": 1139.0, "end": 1151.0, "text": " Exactly. Without that, Elm GraphQL would not really be able to achieve its promise of preventing invalid GraphQL queries or at least giving you a compiler error if you try to do that.", "tokens": [50364, 2720, 257, 954, 493, 13, 50414, 50414, 400, 370, 291, 362, 2105, 281, 7909, 294, 300, 11923, 13, 50564, 50564, 407, 300, 311, 437, 300, 1150, 2010, 7006, 294, 257, 9450, 992, 8855, 307, 300, 11923, 13, 50864, 50864, 865, 13, 400, 437, 309, 3665, 291, 4871, 307, 291, 3365, 337, 7909, 300, 360, 406, 2514, 322, 746, 1646, 13, 51164, 51164, 7587, 13, 9129, 300, 11, 2699, 76, 21884, 13695, 576, 406, 534, 312, 1075, 281, 4584, 1080, 6228, 295, 19965, 34702, 21884, 13695, 24109, 420, 412, 1935, 2902, 291, 257, 31958, 6713, 498, 291, 853, 281, 360, 300, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.11786554427373977, "compression_ratio": 1.6325757575757576, "no_caption_prob": 7.527928573836107e-06}, {"id": 203, "seek": 115100, "start": 1151.0, "end": 1155.0, "text": " Yeah. It would give you a decoder error.", "tokens": [50364, 865, 13, 467, 576, 976, 291, 257, 979, 19866, 6713, 13, 50564, 50564, 7587, 13, 865, 13, 663, 311, 257, 2141, 14751, 13, 50664, 50664, 2264, 11, 370, 630, 300, 2060, 428, 935, 420, 390, 456, 746, 1646, 291, 645, 516, 281, 1565, 493, 30, 50864, 50864, 286, 390, 516, 281, 1565, 493, 746, 1646, 11, 457, 300, 1062, 767, 445, 312, 385, 13, 51064, 51064, 407, 291, 362, 300, 291, 528, 281, 362, 264, 700, 1315, 295, 257, 4195, 295, 257, 954, 13, 51414, 51414, 407, 11, 337, 5197, 11, 291, 360, 2190, 4195, 13, 51514, 51514, 15629, 4195, 307, 257, 9450, 992, 322, 954, 689, 264, 11923, 307, 954, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.1104402706540864, "compression_ratio": 1.6865079365079365, "no_caption_prob": 3.882982855429873e-05}, {"id": 204, "seek": 115100, "start": 1155.0, "end": 1157.0, "text": " Exactly. Yeah. That's a key ingredient.", "tokens": [50364, 865, 13, 467, 576, 976, 291, 257, 979, 19866, 6713, 13, 50564, 50564, 7587, 13, 865, 13, 663, 311, 257, 2141, 14751, 13, 50664, 50664, 2264, 11, 370, 630, 300, 2060, 428, 935, 420, 390, 456, 746, 1646, 291, 645, 516, 281, 1565, 493, 30, 50864, 50864, 286, 390, 516, 281, 1565, 493, 746, 1646, 11, 457, 300, 1062, 767, 445, 312, 385, 13, 51064, 51064, 407, 291, 362, 300, 291, 528, 281, 362, 264, 700, 1315, 295, 257, 4195, 295, 257, 954, 13, 51414, 51414, 407, 11, 337, 5197, 11, 291, 360, 2190, 4195, 13, 51514, 51514, 15629, 4195, 307, 257, 9450, 992, 322, 954, 689, 264, 11923, 307, 954, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.1104402706540864, "compression_ratio": 1.6865079365079365, "no_caption_prob": 3.882982855429873e-05}, {"id": 205, "seek": 115100, "start": 1157.0, "end": 1161.0, "text": " OK, so did that cover your point or was there something else you were going to bring up?", "tokens": [50364, 865, 13, 467, 576, 976, 291, 257, 979, 19866, 6713, 13, 50564, 50564, 7587, 13, 865, 13, 663, 311, 257, 2141, 14751, 13, 50664, 50664, 2264, 11, 370, 630, 300, 2060, 428, 935, 420, 390, 456, 746, 1646, 291, 645, 516, 281, 1565, 493, 30, 50864, 50864, 286, 390, 516, 281, 1565, 493, 746, 1646, 11, 457, 300, 1062, 767, 445, 312, 385, 13, 51064, 51064, 407, 291, 362, 300, 291, 528, 281, 362, 264, 700, 1315, 295, 257, 4195, 295, 257, 954, 13, 51414, 51414, 407, 11, 337, 5197, 11, 291, 360, 2190, 4195, 13, 51514, 51514, 15629, 4195, 307, 257, 9450, 992, 322, 954, 689, 264, 11923, 307, 954, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.1104402706540864, "compression_ratio": 1.6865079365079365, "no_caption_prob": 3.882982855429873e-05}, {"id": 206, "seek": 115100, "start": 1161.0, "end": 1165.0, "text": " I was going to bring up something else, but that might actually just be me.", "tokens": [50364, 865, 13, 467, 576, 976, 291, 257, 979, 19866, 6713, 13, 50564, 50564, 7587, 13, 865, 13, 663, 311, 257, 2141, 14751, 13, 50664, 50664, 2264, 11, 370, 630, 300, 2060, 428, 935, 420, 390, 456, 746, 1646, 291, 645, 516, 281, 1565, 493, 30, 50864, 50864, 286, 390, 516, 281, 1565, 493, 746, 1646, 11, 457, 300, 1062, 767, 445, 312, 385, 13, 51064, 51064, 407, 291, 362, 300, 291, 528, 281, 362, 264, 700, 1315, 295, 257, 4195, 295, 257, 954, 13, 51414, 51414, 407, 11, 337, 5197, 11, 291, 360, 2190, 4195, 13, 51514, 51514, 15629, 4195, 307, 257, 9450, 992, 322, 954, 689, 264, 11923, 307, 954, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.1104402706540864, "compression_ratio": 1.6865079365079365, "no_caption_prob": 3.882982855429873e-05}, {"id": 207, "seek": 115100, "start": 1165.0, "end": 1172.0, "text": " So you have that you want to have the first name of a user of a person.", "tokens": [50364, 865, 13, 467, 576, 976, 291, 257, 979, 19866, 6713, 13, 50564, 50564, 7587, 13, 865, 13, 663, 311, 257, 2141, 14751, 13, 50664, 50664, 2264, 11, 370, 630, 300, 2060, 428, 935, 420, 390, 456, 746, 1646, 291, 645, 516, 281, 1565, 493, 30, 50864, 50864, 286, 390, 516, 281, 1565, 493, 746, 1646, 11, 457, 300, 1062, 767, 445, 312, 385, 13, 51064, 51064, 407, 291, 362, 300, 291, 528, 281, 362, 264, 700, 1315, 295, 257, 4195, 295, 257, 954, 13, 51414, 51414, 407, 11, 337, 5197, 11, 291, 360, 2190, 4195, 13, 51514, 51514, 15629, 4195, 307, 257, 9450, 992, 322, 954, 689, 264, 11923, 307, 954, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.1104402706540864, "compression_ratio": 1.6865079365079365, "no_caption_prob": 3.882982855429873e-05}, {"id": 208, "seek": 115100, "start": 1172.0, "end": 1174.0, "text": " So, for instance, you do current user.", "tokens": [50364, 865, 13, 467, 576, 976, 291, 257, 979, 19866, 6713, 13, 50564, 50564, 7587, 13, 865, 13, 663, 311, 257, 2141, 14751, 13, 50664, 50664, 2264, 11, 370, 630, 300, 2060, 428, 935, 420, 390, 456, 746, 1646, 291, 645, 516, 281, 1565, 493, 30, 50864, 50864, 286, 390, 516, 281, 1565, 493, 746, 1646, 11, 457, 300, 1062, 767, 445, 312, 385, 13, 51064, 51064, 407, 291, 362, 300, 291, 528, 281, 362, 264, 700, 1315, 295, 257, 4195, 295, 257, 954, 13, 51414, 51414, 407, 11, 337, 5197, 11, 291, 360, 2190, 4195, 13, 51514, 51514, 15629, 4195, 307, 257, 9450, 992, 322, 954, 689, 264, 11923, 307, 954, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.1104402706540864, "compression_ratio": 1.6865079365079365, "no_caption_prob": 3.882982855429873e-05}, {"id": 209, "seek": 115100, "start": 1174.0, "end": 1180.0, "text": " Current user is a selection set on person where the scope is person.", "tokens": [50364, 865, 13, 467, 576, 976, 291, 257, 979, 19866, 6713, 13, 50564, 50564, 7587, 13, 865, 13, 663, 311, 257, 2141, 14751, 13, 50664, 50664, 2264, 11, 370, 630, 300, 2060, 428, 935, 420, 390, 456, 746, 1646, 291, 645, 516, 281, 1565, 493, 30, 50864, 50864, 286, 390, 516, 281, 1565, 493, 746, 1646, 11, 457, 300, 1062, 767, 445, 312, 385, 13, 51064, 51064, 407, 291, 362, 300, 291, 528, 281, 362, 264, 700, 1315, 295, 257, 4195, 295, 257, 954, 13, 51414, 51414, 407, 11, 337, 5197, 11, 291, 360, 2190, 4195, 13, 51514, 51514, 15629, 4195, 307, 257, 9450, 992, 322, 954, 689, 264, 11923, 307, 954, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.1104402706540864, "compression_ratio": 1.6865079365079365, "no_caption_prob": 3.882982855429873e-05}, {"id": 210, "seek": 118000, "start": 1180.0, "end": 1186.0, "text": " And then you will pass in person dot first and person dot last person dot age, whatever.", "tokens": [50364, 400, 550, 291, 486, 1320, 294, 954, 5893, 700, 293, 954, 5893, 1036, 954, 5893, 3205, 11, 2035, 13, 50664, 50664, 583, 264, 11923, 307, 257, 2657, 300, 264, 9362, 300, 264, 2699, 76, 21884, 13695, 12855, 40, 2290, 486, 8460, 337, 291, 13, 51114, 51114, 583, 309, 307, 406, 4077, 281, 264, 10088, 300, 23122, 309, 13, 51414, 51414, 42109, 13, 51464, 51464, 286, 1009, 915, 309, 257, 857, 12414, 281, 1745, 1293, 294, 452, 1575, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.1251363754272461, "compression_ratio": 1.5255102040816326, "no_caption_prob": 0.00014423624088522047}, {"id": 211, "seek": 118000, "start": 1186.0, "end": 1195.0, "text": " But the scope is a object that the API that the Elm GraphQL CLI tool will generate for you.", "tokens": [50364, 400, 550, 291, 486, 1320, 294, 954, 5893, 700, 293, 954, 5893, 1036, 954, 5893, 3205, 11, 2035, 13, 50664, 50664, 583, 264, 11923, 307, 257, 2657, 300, 264, 9362, 300, 264, 2699, 76, 21884, 13695, 12855, 40, 2290, 486, 8460, 337, 291, 13, 51114, 51114, 583, 309, 307, 406, 4077, 281, 264, 10088, 300, 23122, 309, 13, 51414, 51414, 42109, 13, 51464, 51464, 286, 1009, 915, 309, 257, 857, 12414, 281, 1745, 1293, 294, 452, 1575, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.1251363754272461, "compression_ratio": 1.5255102040816326, "no_caption_prob": 0.00014423624088522047}, {"id": 212, "seek": 118000, "start": 1195.0, "end": 1201.0, "text": " But it is not related to the module that defines it.", "tokens": [50364, 400, 550, 291, 486, 1320, 294, 954, 5893, 700, 293, 954, 5893, 1036, 954, 5893, 3205, 11, 2035, 13, 50664, 50664, 583, 264, 11923, 307, 257, 2657, 300, 264, 9362, 300, 264, 2699, 76, 21884, 13695, 12855, 40, 2290, 486, 8460, 337, 291, 13, 51114, 51114, 583, 309, 307, 406, 4077, 281, 264, 10088, 300, 23122, 309, 13, 51414, 51414, 42109, 13, 51464, 51464, 286, 1009, 915, 309, 257, 857, 12414, 281, 1745, 1293, 294, 452, 1575, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.1251363754272461, "compression_ratio": 1.5255102040816326, "no_caption_prob": 0.00014423624088522047}, {"id": 213, "seek": 118000, "start": 1201.0, "end": 1202.0, "text": " Gotcha.", "tokens": [50364, 400, 550, 291, 486, 1320, 294, 954, 5893, 700, 293, 954, 5893, 1036, 954, 5893, 3205, 11, 2035, 13, 50664, 50664, 583, 264, 11923, 307, 257, 2657, 300, 264, 9362, 300, 264, 2699, 76, 21884, 13695, 12855, 40, 2290, 486, 8460, 337, 291, 13, 51114, 51114, 583, 309, 307, 406, 4077, 281, 264, 10088, 300, 23122, 309, 13, 51414, 51414, 42109, 13, 51464, 51464, 286, 1009, 915, 309, 257, 857, 12414, 281, 1745, 1293, 294, 452, 1575, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.1251363754272461, "compression_ratio": 1.5255102040816326, "no_caption_prob": 0.00014423624088522047}, {"id": 214, "seek": 118000, "start": 1202.0, "end": 1207.0, "text": " I always find it a bit tricky to connect both in my mind.", "tokens": [50364, 400, 550, 291, 486, 1320, 294, 954, 5893, 700, 293, 954, 5893, 1036, 954, 5893, 3205, 11, 2035, 13, 50664, 50664, 583, 264, 11923, 307, 257, 2657, 300, 264, 9362, 300, 264, 2699, 76, 21884, 13695, 12855, 40, 2290, 486, 8460, 337, 291, 13, 51114, 51114, 583, 309, 307, 406, 4077, 281, 264, 10088, 300, 23122, 309, 13, 51414, 51414, 42109, 13, 51464, 51464, 286, 1009, 915, 309, 257, 857, 12414, 281, 1745, 1293, 294, 452, 1575, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.1251363754272461, "compression_ratio": 1.5255102040816326, "no_caption_prob": 0.00014423624088522047}, {"id": 215, "seek": 120700, "start": 1207.0, "end": 1213.0, "text": " So I have a scope and I have the selection sets on that scope.", "tokens": [50364, 407, 286, 362, 257, 11923, 293, 286, 362, 264, 9450, 6352, 322, 300, 11923, 13, 50664, 50664, 865, 11, 436, 434, 294, 588, 819, 3190, 13, 50764, 50764, 1779, 13, 639, 307, 257, 665, 1168, 13, 50864, 50864, 400, 341, 307, 1333, 295, 341, 307, 472, 295, 729, 411, 707, 20993, 721, 300, 286, 411, 281, 2073, 365, 561, 562, 286, 11, 291, 458, 11, 51214, 51214, 562, 286, 2924, 452, 2699, 76, 21884, 13695, 13541, 11, 613, 707, 20993, 6082, 393, 652, 257, 955, 2649, 11, 286, 519, 13, 51514, 51514, 400, 370, 341, 307, 411, 472, 295, 729, 707, 4365, 300, 286, 411, 281, 2073, 294, 452, 19162, 13, 51714, 51714, 639, 307, 3163, 1460, 11, 561, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.09358471439730737, "compression_ratio": 1.821705426356589, "no_caption_prob": 6.0138154367450625e-05}, {"id": 216, "seek": 120700, "start": 1213.0, "end": 1215.0, "text": " Yeah, they're in very different places.", "tokens": [50364, 407, 286, 362, 257, 11923, 293, 286, 362, 264, 9450, 6352, 322, 300, 11923, 13, 50664, 50664, 865, 11, 436, 434, 294, 588, 819, 3190, 13, 50764, 50764, 1779, 13, 639, 307, 257, 665, 1168, 13, 50864, 50864, 400, 341, 307, 1333, 295, 341, 307, 472, 295, 729, 411, 707, 20993, 721, 300, 286, 411, 281, 2073, 365, 561, 562, 286, 11, 291, 458, 11, 51214, 51214, 562, 286, 2924, 452, 2699, 76, 21884, 13695, 13541, 11, 613, 707, 20993, 6082, 393, 652, 257, 955, 2649, 11, 286, 519, 13, 51514, 51514, 400, 370, 341, 307, 411, 472, 295, 729, 707, 4365, 300, 286, 411, 281, 2073, 294, 452, 19162, 13, 51714, 51714, 639, 307, 3163, 1460, 11, 561, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.09358471439730737, "compression_ratio": 1.821705426356589, "no_caption_prob": 6.0138154367450625e-05}, {"id": 217, "seek": 120700, "start": 1215.0, "end": 1217.0, "text": " Right. This is a good question.", "tokens": [50364, 407, 286, 362, 257, 11923, 293, 286, 362, 264, 9450, 6352, 322, 300, 11923, 13, 50664, 50664, 865, 11, 436, 434, 294, 588, 819, 3190, 13, 50764, 50764, 1779, 13, 639, 307, 257, 665, 1168, 13, 50864, 50864, 400, 341, 307, 1333, 295, 341, 307, 472, 295, 729, 411, 707, 20993, 721, 300, 286, 411, 281, 2073, 365, 561, 562, 286, 11, 291, 458, 11, 51214, 51214, 562, 286, 2924, 452, 2699, 76, 21884, 13695, 13541, 11, 613, 707, 20993, 6082, 393, 652, 257, 955, 2649, 11, 286, 519, 13, 51514, 51514, 400, 370, 341, 307, 411, 472, 295, 729, 707, 4365, 300, 286, 411, 281, 2073, 294, 452, 19162, 13, 51714, 51714, 639, 307, 3163, 1460, 11, 561, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.09358471439730737, "compression_ratio": 1.821705426356589, "no_caption_prob": 6.0138154367450625e-05}, {"id": 218, "seek": 120700, "start": 1217.0, "end": 1224.0, "text": " And this is sort of this is one of those like little workflow things that I like to share with people when I, you know,", "tokens": [50364, 407, 286, 362, 257, 11923, 293, 286, 362, 264, 9450, 6352, 322, 300, 11923, 13, 50664, 50664, 865, 11, 436, 434, 294, 588, 819, 3190, 13, 50764, 50764, 1779, 13, 639, 307, 257, 665, 1168, 13, 50864, 50864, 400, 341, 307, 1333, 295, 341, 307, 472, 295, 729, 411, 707, 20993, 721, 300, 286, 411, 281, 2073, 365, 561, 562, 286, 11, 291, 458, 11, 51214, 51214, 562, 286, 2924, 452, 2699, 76, 21884, 13695, 13541, 11, 613, 707, 20993, 6082, 393, 652, 257, 955, 2649, 11, 286, 519, 13, 51514, 51514, 400, 370, 341, 307, 411, 472, 295, 729, 707, 4365, 300, 286, 411, 281, 2073, 294, 452, 19162, 13, 51714, 51714, 639, 307, 3163, 1460, 11, 561, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.09358471439730737, "compression_ratio": 1.821705426356589, "no_caption_prob": 6.0138154367450625e-05}, {"id": 219, "seek": 120700, "start": 1224.0, "end": 1230.0, "text": " when I teach my Elm GraphQL workshop, these little workflow tips can make a big difference, I think.", "tokens": [50364, 407, 286, 362, 257, 11923, 293, 286, 362, 264, 9450, 6352, 322, 300, 11923, 13, 50664, 50664, 865, 11, 436, 434, 294, 588, 819, 3190, 13, 50764, 50764, 1779, 13, 639, 307, 257, 665, 1168, 13, 50864, 50864, 400, 341, 307, 1333, 295, 341, 307, 472, 295, 729, 411, 707, 20993, 721, 300, 286, 411, 281, 2073, 365, 561, 562, 286, 11, 291, 458, 11, 51214, 51214, 562, 286, 2924, 452, 2699, 76, 21884, 13695, 13541, 11, 613, 707, 20993, 6082, 393, 652, 257, 955, 2649, 11, 286, 519, 13, 51514, 51514, 400, 370, 341, 307, 411, 472, 295, 729, 707, 4365, 300, 286, 411, 281, 2073, 294, 452, 19162, 13, 51714, 51714, 639, 307, 3163, 1460, 11, 561, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.09358471439730737, "compression_ratio": 1.821705426356589, "no_caption_prob": 6.0138154367450625e-05}, {"id": 220, "seek": 120700, "start": 1230.0, "end": 1234.0, "text": " And so this is like one of those little details that I like to share in my workshops.", "tokens": [50364, 407, 286, 362, 257, 11923, 293, 286, 362, 264, 9450, 6352, 322, 300, 11923, 13, 50664, 50664, 865, 11, 436, 434, 294, 588, 819, 3190, 13, 50764, 50764, 1779, 13, 639, 307, 257, 665, 1168, 13, 50864, 50864, 400, 341, 307, 1333, 295, 341, 307, 472, 295, 729, 411, 707, 20993, 721, 300, 286, 411, 281, 2073, 365, 561, 562, 286, 11, 291, 458, 11, 51214, 51214, 562, 286, 2924, 452, 2699, 76, 21884, 13695, 13541, 11, 613, 707, 20993, 6082, 393, 652, 257, 955, 2649, 11, 286, 519, 13, 51514, 51514, 400, 370, 341, 307, 411, 472, 295, 729, 707, 4365, 300, 286, 411, 281, 2073, 294, 452, 19162, 13, 51714, 51714, 639, 307, 3163, 1460, 11, 561, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.09358471439730737, "compression_ratio": 1.821705426356589, "no_caption_prob": 6.0138154367450625e-05}, {"id": 221, "seek": 120700, "start": 1234.0, "end": 1236.0, "text": " This is worth money, people.", "tokens": [50364, 407, 286, 362, 257, 11923, 293, 286, 362, 264, 9450, 6352, 322, 300, 11923, 13, 50664, 50664, 865, 11, 436, 434, 294, 588, 819, 3190, 13, 50764, 50764, 1779, 13, 639, 307, 257, 665, 1168, 13, 50864, 50864, 400, 341, 307, 1333, 295, 341, 307, 472, 295, 729, 411, 707, 20993, 721, 300, 286, 411, 281, 2073, 365, 561, 562, 286, 11, 291, 458, 11, 51214, 51214, 562, 286, 2924, 452, 2699, 76, 21884, 13695, 13541, 11, 613, 707, 20993, 6082, 393, 652, 257, 955, 2649, 11, 286, 519, 13, 51514, 51514, 400, 370, 341, 307, 411, 472, 295, 729, 707, 4365, 300, 286, 411, 281, 2073, 294, 452, 19162, 13, 51714, 51714, 639, 307, 3163, 1460, 11, 561, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.09358471439730737, "compression_ratio": 1.821705426356589, "no_caption_prob": 6.0138154367450625e-05}, {"id": 222, "seek": 123600, "start": 1236.0, "end": 1238.0, "text": " This is a for money workshop.", "tokens": [50364, 639, 307, 257, 337, 1460, 13541, 13, 50464, 50464, 1119, 456, 604, 661, 733, 30, 286, 2041, 370, 13, 50664, 50664, 400, 370, 11, 2264, 11, 291, 632, 291, 362, 613, 732, 819, 4190, 13, 50914, 50914, 407, 291, 600, 658, 257, 10088, 11, 382, 291, 645, 1566, 11, 456, 307, 341, 9362, 2657, 300, 954, 10088, 13, 51214, 51214, 400, 341, 307, 689, 291, 483, 264, 700, 1315, 2519, 293, 264, 1036, 1315, 2519, 13, 51464, 51464, 1981, 366, 17827, 613, 9450, 6352, 300, 291, 393, 483, 294, 300, 11923, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.09854612747828166, "compression_ratio": 1.6108597285067874, "no_caption_prob": 7.484335219487548e-05}, {"id": 223, "seek": 123600, "start": 1238.0, "end": 1242.0, "text": " Is there any other kind? I guess so.", "tokens": [50364, 639, 307, 257, 337, 1460, 13541, 13, 50464, 50464, 1119, 456, 604, 661, 733, 30, 286, 2041, 370, 13, 50664, 50664, 400, 370, 11, 2264, 11, 291, 632, 291, 362, 613, 732, 819, 4190, 13, 50914, 50914, 407, 291, 600, 658, 257, 10088, 11, 382, 291, 645, 1566, 11, 456, 307, 341, 9362, 2657, 300, 954, 10088, 13, 51214, 51214, 400, 341, 307, 689, 291, 483, 264, 700, 1315, 2519, 293, 264, 1036, 1315, 2519, 13, 51464, 51464, 1981, 366, 17827, 613, 9450, 6352, 300, 291, 393, 483, 294, 300, 11923, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.09854612747828166, "compression_ratio": 1.6108597285067874, "no_caption_prob": 7.484335219487548e-05}, {"id": 224, "seek": 123600, "start": 1242.0, "end": 1247.0, "text": " And so, OK, you had you have these two different values.", "tokens": [50364, 639, 307, 257, 337, 1460, 13541, 13, 50464, 50464, 1119, 456, 604, 661, 733, 30, 286, 2041, 370, 13, 50664, 50664, 400, 370, 11, 2264, 11, 291, 632, 291, 362, 613, 732, 819, 4190, 13, 50914, 50914, 407, 291, 600, 658, 257, 10088, 11, 382, 291, 645, 1566, 11, 456, 307, 341, 9362, 2657, 300, 954, 10088, 13, 51214, 51214, 400, 341, 307, 689, 291, 483, 264, 700, 1315, 2519, 293, 264, 1036, 1315, 2519, 13, 51464, 51464, 1981, 366, 17827, 613, 9450, 6352, 300, 291, 393, 483, 294, 300, 11923, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.09854612747828166, "compression_ratio": 1.6108597285067874, "no_caption_prob": 7.484335219487548e-05}, {"id": 225, "seek": 123600, "start": 1247.0, "end": 1253.0, "text": " So you've got a module, as you were saying, there is this API object that person module.", "tokens": [50364, 639, 307, 257, 337, 1460, 13541, 13, 50464, 50464, 1119, 456, 604, 661, 733, 30, 286, 2041, 370, 13, 50664, 50664, 400, 370, 11, 2264, 11, 291, 632, 291, 362, 613, 732, 819, 4190, 13, 50914, 50914, 407, 291, 600, 658, 257, 10088, 11, 382, 291, 645, 1566, 11, 456, 307, 341, 9362, 2657, 300, 954, 10088, 13, 51214, 51214, 400, 341, 307, 689, 291, 483, 264, 700, 1315, 2519, 293, 264, 1036, 1315, 2519, 13, 51464, 51464, 1981, 366, 17827, 613, 9450, 6352, 300, 291, 393, 483, 294, 300, 11923, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.09854612747828166, "compression_ratio": 1.6108597285067874, "no_caption_prob": 7.484335219487548e-05}, {"id": 226, "seek": 123600, "start": 1253.0, "end": 1258.0, "text": " And this is where you get the first name field and the last name field.", "tokens": [50364, 639, 307, 257, 337, 1460, 13541, 13, 50464, 50464, 1119, 456, 604, 661, 733, 30, 286, 2041, 370, 13, 50664, 50664, 400, 370, 11, 2264, 11, 291, 632, 291, 362, 613, 732, 819, 4190, 13, 50914, 50914, 407, 291, 600, 658, 257, 10088, 11, 382, 291, 645, 1566, 11, 456, 307, 341, 9362, 2657, 300, 954, 10088, 13, 51214, 51214, 400, 341, 307, 689, 291, 483, 264, 700, 1315, 2519, 293, 264, 1036, 1315, 2519, 13, 51464, 51464, 1981, 366, 17827, 613, 9450, 6352, 300, 291, 393, 483, 294, 300, 11923, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.09854612747828166, "compression_ratio": 1.6108597285067874, "no_caption_prob": 7.484335219487548e-05}, {"id": 227, "seek": 123600, "start": 1258.0, "end": 1262.0, "text": " These are defining these selection sets that you can get in that scope.", "tokens": [50364, 639, 307, 257, 337, 1460, 13541, 13, 50464, 50464, 1119, 456, 604, 661, 733, 30, 286, 2041, 370, 13, 50664, 50664, 400, 370, 11, 2264, 11, 291, 632, 291, 362, 613, 732, 819, 4190, 13, 50914, 50914, 407, 291, 600, 658, 257, 10088, 11, 382, 291, 645, 1566, 11, 456, 307, 341, 9362, 2657, 300, 954, 10088, 13, 51214, 51214, 400, 341, 307, 689, 291, 483, 264, 700, 1315, 2519, 293, 264, 1036, 1315, 2519, 13, 51464, 51464, 1981, 366, 17827, 613, 9450, 6352, 300, 291, 393, 483, 294, 300, 11923, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.09854612747828166, "compression_ratio": 1.6108597285067874, "no_caption_prob": 7.484335219487548e-05}, {"id": 228, "seek": 126200, "start": 1262.0, "end": 1281.0, "text": " Now, the technical reason why that magical type variable scope is using a value that's not in the API dot object dot person module is because it would lead to circular dependencies.", "tokens": [50364, 823, 11, 264, 6191, 1778, 983, 300, 12066, 2010, 7006, 11923, 307, 1228, 257, 2158, 300, 311, 406, 294, 264, 9362, 5893, 2657, 5893, 954, 10088, 307, 570, 309, 576, 1477, 281, 16476, 36606, 13, 51314, 51314, 407, 309, 311, 406, 1944, 281, 360, 300, 13, 51414, 51414], "temperature": 0.0, "avg_logprob": -0.11634160041809082, "compression_ratio": 1.4078947368421053, "no_caption_prob": 4.264542440068908e-05}, {"id": 229, "seek": 126200, "start": 1281.0, "end": 1283.0, "text": " So it's not possible to do that.", "tokens": [50364, 823, 11, 264, 6191, 1778, 983, 300, 12066, 2010, 7006, 11923, 307, 1228, 257, 2158, 300, 311, 406, 294, 264, 9362, 5893, 2657, 5893, 954, 10088, 307, 570, 309, 576, 1477, 281, 16476, 36606, 13, 51314, 51314, 407, 309, 311, 406, 1944, 281, 360, 300, 13, 51414, 51414], "temperature": 0.0, "avg_logprob": -0.11634160041809082, "compression_ratio": 1.4078947368421053, "no_caption_prob": 4.264542440068908e-05}, {"id": 230, "seek": 128300, "start": 1283.0, "end": 1292.0, "text": " However, I'm happy with the way that you work with it, but I think there's a little trick that helps to make it nice to work with.", "tokens": [50364, 2908, 11, 286, 478, 2055, 365, 264, 636, 300, 291, 589, 365, 309, 11, 457, 286, 519, 456, 311, 257, 707, 4282, 300, 3665, 281, 652, 309, 1481, 281, 589, 365, 13, 50814, 50814, 407, 264, 4282, 307, 498, 291, 362, 257, 370, 562, 291, 584, 915, 915, 954, 11, 291, 600, 658, 11, 291, 458, 11, 370, 341, 307, 412, 264, 1192, 1496, 13, 51364, 51364, 407, 309, 576, 312, 14581, 5893, 915, 954, 11, 291, 458, 11, 9362, 5893, 14581, 5893, 915, 954, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.06807588471306694, "compression_ratio": 1.7052631578947368, "no_caption_prob": 5.475582293001935e-05}, {"id": 231, "seek": 128300, "start": 1292.0, "end": 1303.0, "text": " So the trick is if you have a so when you say find find person, you've got, you know, so this is at the top level.", "tokens": [50364, 2908, 11, 286, 478, 2055, 365, 264, 636, 300, 291, 589, 365, 309, 11, 457, 286, 519, 456, 311, 257, 707, 4282, 300, 3665, 281, 652, 309, 1481, 281, 589, 365, 13, 50814, 50814, 407, 264, 4282, 307, 498, 291, 362, 257, 370, 562, 291, 584, 915, 915, 954, 11, 291, 600, 658, 11, 291, 458, 11, 370, 341, 307, 412, 264, 1192, 1496, 13, 51364, 51364, 407, 309, 576, 312, 14581, 5893, 915, 954, 11, 291, 458, 11, 9362, 5893, 14581, 5893, 915, 954, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.06807588471306694, "compression_ratio": 1.7052631578947368, "no_caption_prob": 5.475582293001935e-05}, {"id": 232, "seek": 128300, "start": 1303.0, "end": 1308.0, "text": " So it would be query dot find person, you know, API dot query dot find person.", "tokens": [50364, 2908, 11, 286, 478, 2055, 365, 264, 636, 300, 291, 589, 365, 309, 11, 457, 286, 519, 456, 311, 257, 707, 4282, 300, 3665, 281, 652, 309, 1481, 281, 589, 365, 13, 50814, 50814, 407, 264, 4282, 307, 498, 291, 362, 257, 370, 562, 291, 584, 915, 915, 954, 11, 291, 600, 658, 11, 291, 458, 11, 370, 341, 307, 412, 264, 1192, 1496, 13, 51364, 51364, 407, 309, 576, 312, 14581, 5893, 915, 954, 11, 291, 458, 11, 9362, 5893, 14581, 5893, 915, 954, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.06807588471306694, "compression_ratio": 1.7052631578947368, "no_caption_prob": 5.475582293001935e-05}, {"id": 233, "seek": 130800, "start": 1308.0, "end": 1316.0, "text": " And then you have find person takes a selection set of the nested selection set.", "tokens": [50364, 400, 550, 291, 362, 915, 954, 2516, 257, 9450, 992, 295, 264, 15646, 292, 9450, 992, 13, 50764, 50764, 407, 437, 7909, 576, 291, 411, 281, 3048, 322, 300, 954, 30, 50964, 50964, 1779, 13, 407, 700, 11, 291, 976, 309, 264, 4739, 12869, 13, 51114, 51114, 407, 291, 1116, 976, 309, 264, 4739, 12869, 295, 264, 7348, 337, 264, 4195, 291, 434, 18182, 11, 7348, 472, 13, 51364, 51364, 400, 550, 264, 1150, 6770, 291, 576, 976, 300, 2445, 337, 915, 954, 576, 312, 264, 15646, 292, 9450, 992, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.08788793463456003, "compression_ratio": 1.9644670050761421, "no_caption_prob": 8.614272519480437e-05}, {"id": 234, "seek": 130800, "start": 1316.0, "end": 1320.0, "text": " So what fields would you like to select on that person?", "tokens": [50364, 400, 550, 291, 362, 915, 954, 2516, 257, 9450, 992, 295, 264, 15646, 292, 9450, 992, 13, 50764, 50764, 407, 437, 7909, 576, 291, 411, 281, 3048, 322, 300, 954, 30, 50964, 50964, 1779, 13, 407, 700, 11, 291, 976, 309, 264, 4739, 12869, 13, 51114, 51114, 407, 291, 1116, 976, 309, 264, 4739, 12869, 295, 264, 7348, 337, 264, 4195, 291, 434, 18182, 11, 7348, 472, 13, 51364, 51364, 400, 550, 264, 1150, 6770, 291, 576, 976, 300, 2445, 337, 915, 954, 576, 312, 264, 15646, 292, 9450, 992, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.08788793463456003, "compression_ratio": 1.9644670050761421, "no_caption_prob": 8.614272519480437e-05}, {"id": 235, "seek": 130800, "start": 1320.0, "end": 1323.0, "text": " Right. So first, you give it the required arguments.", "tokens": [50364, 400, 550, 291, 362, 915, 954, 2516, 257, 9450, 992, 295, 264, 15646, 292, 9450, 992, 13, 50764, 50764, 407, 437, 7909, 576, 291, 411, 281, 3048, 322, 300, 954, 30, 50964, 50964, 1779, 13, 407, 700, 11, 291, 976, 309, 264, 4739, 12869, 13, 51114, 51114, 407, 291, 1116, 976, 309, 264, 4739, 12869, 295, 264, 7348, 337, 264, 4195, 291, 434, 18182, 11, 7348, 472, 13, 51364, 51364, 400, 550, 264, 1150, 6770, 291, 576, 976, 300, 2445, 337, 915, 954, 576, 312, 264, 15646, 292, 9450, 992, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.08788793463456003, "compression_ratio": 1.9644670050761421, "no_caption_prob": 8.614272519480437e-05}, {"id": 236, "seek": 130800, "start": 1323.0, "end": 1328.0, "text": " So you'd give it the required arguments of the ID for the user you're selecting, ID one.", "tokens": [50364, 400, 550, 291, 362, 915, 954, 2516, 257, 9450, 992, 295, 264, 15646, 292, 9450, 992, 13, 50764, 50764, 407, 437, 7909, 576, 291, 411, 281, 3048, 322, 300, 954, 30, 50964, 50964, 1779, 13, 407, 700, 11, 291, 976, 309, 264, 4739, 12869, 13, 51114, 51114, 407, 291, 1116, 976, 309, 264, 4739, 12869, 295, 264, 7348, 337, 264, 4195, 291, 434, 18182, 11, 7348, 472, 13, 51364, 51364, 400, 550, 264, 1150, 6770, 291, 576, 976, 300, 2445, 337, 915, 954, 576, 312, 264, 15646, 292, 9450, 992, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.08788793463456003, "compression_ratio": 1.9644670050761421, "no_caption_prob": 8.614272519480437e-05}, {"id": 237, "seek": 130800, "start": 1328.0, "end": 1336.0, "text": " And then the second argument you would give that function for find person would be the nested selection set.", "tokens": [50364, 400, 550, 291, 362, 915, 954, 2516, 257, 9450, 992, 295, 264, 15646, 292, 9450, 992, 13, 50764, 50764, 407, 437, 7909, 576, 291, 411, 281, 3048, 322, 300, 954, 30, 50964, 50964, 1779, 13, 407, 700, 11, 291, 976, 309, 264, 4739, 12869, 13, 51114, 51114, 407, 291, 1116, 976, 309, 264, 4739, 12869, 295, 264, 7348, 337, 264, 4195, 291, 434, 18182, 11, 7348, 472, 13, 51364, 51364, 400, 550, 264, 1150, 6770, 291, 576, 976, 300, 2445, 337, 915, 954, 576, 312, 264, 15646, 292, 9450, 992, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.08788793463456003, "compression_ratio": 1.9644670050761421, "no_caption_prob": 8.614272519480437e-05}, {"id": 238, "seek": 133600, "start": 1336.0, "end": 1343.0, "text": " And so the type of that is going to be selection set decodes to anything you can decode to whatever you want it to.", "tokens": [50364, 400, 370, 264, 2010, 295, 300, 307, 516, 281, 312, 9450, 992, 979, 4789, 281, 1340, 291, 393, 979, 1429, 281, 2035, 291, 528, 309, 281, 13, 50714, 50714, 400, 550, 264, 11923, 1633, 312, 9362, 5893, 2657, 5893, 954, 13, 51014, 51014, 9362, 5893, 2657, 5893, 954, 13, 400, 264, 11923, 307, 9362, 5893, 954, 13, 51264, 51264, 440, 11923, 307, 9362, 5893, 2657, 5893, 954, 13, 51364, 51364, 1407, 611, 13, 1779, 13, 1079, 13, 2264, 13, 407, 510, 311, 510, 311, 577, 300, 1985, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.13858140033224356, "compression_ratio": 1.8268156424581006, "no_caption_prob": 9.169994154945016e-05}, {"id": 239, "seek": 133600, "start": 1343.0, "end": 1349.0, "text": " And then the scope must be API dot object dot person.", "tokens": [50364, 400, 370, 264, 2010, 295, 300, 307, 516, 281, 312, 9450, 992, 979, 4789, 281, 1340, 291, 393, 979, 1429, 281, 2035, 291, 528, 309, 281, 13, 50714, 50714, 400, 550, 264, 11923, 1633, 312, 9362, 5893, 2657, 5893, 954, 13, 51014, 51014, 9362, 5893, 2657, 5893, 954, 13, 400, 264, 11923, 307, 9362, 5893, 954, 13, 51264, 51264, 440, 11923, 307, 9362, 5893, 2657, 5893, 954, 13, 51364, 51364, 1407, 611, 13, 1779, 13, 1079, 13, 2264, 13, 407, 510, 311, 510, 311, 577, 300, 1985, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.13858140033224356, "compression_ratio": 1.8268156424581006, "no_caption_prob": 9.169994154945016e-05}, {"id": 240, "seek": 133600, "start": 1349.0, "end": 1354.0, "text": " API dot object dot person. And the scope is API dot person.", "tokens": [50364, 400, 370, 264, 2010, 295, 300, 307, 516, 281, 312, 9450, 992, 979, 4789, 281, 1340, 291, 393, 979, 1429, 281, 2035, 291, 528, 309, 281, 13, 50714, 50714, 400, 550, 264, 11923, 1633, 312, 9362, 5893, 2657, 5893, 954, 13, 51014, 51014, 9362, 5893, 2657, 5893, 954, 13, 400, 264, 11923, 307, 9362, 5893, 954, 13, 51264, 51264, 440, 11923, 307, 9362, 5893, 2657, 5893, 954, 13, 51364, 51364, 1407, 611, 13, 1779, 13, 1079, 13, 2264, 13, 407, 510, 311, 510, 311, 577, 300, 1985, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.13858140033224356, "compression_ratio": 1.8268156424581006, "no_caption_prob": 9.169994154945016e-05}, {"id": 241, "seek": 133600, "start": 1354.0, "end": 1356.0, "text": " The scope is API dot object dot person.", "tokens": [50364, 400, 370, 264, 2010, 295, 300, 307, 516, 281, 312, 9450, 992, 979, 4789, 281, 1340, 291, 393, 979, 1429, 281, 2035, 291, 528, 309, 281, 13, 50714, 50714, 400, 550, 264, 11923, 1633, 312, 9362, 5893, 2657, 5893, 954, 13, 51014, 51014, 9362, 5893, 2657, 5893, 954, 13, 400, 264, 11923, 307, 9362, 5893, 954, 13, 51264, 51264, 440, 11923, 307, 9362, 5893, 2657, 5893, 954, 13, 51364, 51364, 1407, 611, 13, 1779, 13, 1079, 13, 2264, 13, 407, 510, 311, 510, 311, 577, 300, 1985, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.13858140033224356, "compression_ratio": 1.8268156424581006, "no_caption_prob": 9.169994154945016e-05}, {"id": 242, "seek": 133600, "start": 1356.0, "end": 1361.0, "text": " To also. Right. Yes. OK. So here's here's how that works.", "tokens": [50364, 400, 370, 264, 2010, 295, 300, 307, 516, 281, 312, 9450, 992, 979, 4789, 281, 1340, 291, 393, 979, 1429, 281, 2035, 291, 528, 309, 281, 13, 50714, 50714, 400, 550, 264, 11923, 1633, 312, 9362, 5893, 2657, 5893, 954, 13, 51014, 51014, 9362, 5893, 2657, 5893, 954, 13, 400, 264, 11923, 307, 9362, 5893, 954, 13, 51264, 51264, 440, 11923, 307, 9362, 5893, 2657, 5893, 954, 13, 51364, 51364, 1407, 611, 13, 1779, 13, 1079, 13, 2264, 13, 407, 510, 311, 510, 311, 577, 300, 1985, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.13858140033224356, "compression_ratio": 1.8268156424581006, "no_caption_prob": 9.169994154945016e-05}, {"id": 243, "seek": 136100, "start": 1361.0, "end": 1368.0, "text": " It's not API dot object dot person dot person because it doesn't exist in the API dot object dot person module.", "tokens": [50364, 467, 311, 406, 9362, 5893, 2657, 5893, 954, 5893, 954, 570, 309, 1177, 380, 2514, 294, 264, 9362, 5893, 2657, 5893, 954, 10088, 13, 50714, 50714, 467, 8198, 294, 257, 10088, 1219, 9362, 5893, 2657, 11, 597, 8306, 439, 295, 729, 12066, 11923, 2010, 9102, 13, 51064, 51064, 1779, 13, 407, 498, 291, 528, 281, 915, 437, 7909, 291, 393, 764, 11, 2086, 11, 437, 6828, 291, 393, 764, 11, 291, 445, 352, 281, 300, 10088, 13, 51514, 51514, 7587, 13, 10635, 1315, 382, 264, 11923, 13, 7587, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.1131900869390016, "compression_ratio": 1.7799043062200957, "no_caption_prob": 3.48071007465478e-05}, {"id": 244, "seek": 136100, "start": 1368.0, "end": 1375.0, "text": " It exists in a module called API dot object, which contains all of those magical scope type variables.", "tokens": [50364, 467, 311, 406, 9362, 5893, 2657, 5893, 954, 5893, 954, 570, 309, 1177, 380, 2514, 294, 264, 9362, 5893, 2657, 5893, 954, 10088, 13, 50714, 50714, 467, 8198, 294, 257, 10088, 1219, 9362, 5893, 2657, 11, 597, 8306, 439, 295, 729, 12066, 11923, 2010, 9102, 13, 51064, 51064, 1779, 13, 407, 498, 291, 528, 281, 915, 437, 7909, 291, 393, 764, 11, 2086, 11, 437, 6828, 291, 393, 764, 11, 291, 445, 352, 281, 300, 10088, 13, 51514, 51514, 7587, 13, 10635, 1315, 382, 264, 11923, 13, 7587, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.1131900869390016, "compression_ratio": 1.7799043062200957, "no_caption_prob": 3.48071007465478e-05}, {"id": 245, "seek": 136100, "start": 1375.0, "end": 1384.0, "text": " Right. So if you want to find what fields you can use, yes, what functions you can use, you just go to that module.", "tokens": [50364, 467, 311, 406, 9362, 5893, 2657, 5893, 954, 5893, 954, 570, 309, 1177, 380, 2514, 294, 264, 9362, 5893, 2657, 5893, 954, 10088, 13, 50714, 50714, 467, 8198, 294, 257, 10088, 1219, 9362, 5893, 2657, 11, 597, 8306, 439, 295, 729, 12066, 11923, 2010, 9102, 13, 51064, 51064, 1779, 13, 407, 498, 291, 528, 281, 915, 437, 7909, 291, 393, 764, 11, 2086, 11, 437, 6828, 291, 393, 764, 11, 291, 445, 352, 281, 300, 10088, 13, 51514, 51514, 7587, 13, 10635, 1315, 382, 264, 11923, 13, 7587, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.1131900869390016, "compression_ratio": 1.7799043062200957, "no_caption_prob": 3.48071007465478e-05}, {"id": 246, "seek": 136100, "start": 1384.0, "end": 1388.0, "text": " Exactly. Same name as the scope. Exactly.", "tokens": [50364, 467, 311, 406, 9362, 5893, 2657, 5893, 954, 5893, 954, 570, 309, 1177, 380, 2514, 294, 264, 9362, 5893, 2657, 5893, 954, 10088, 13, 50714, 50714, 467, 8198, 294, 257, 10088, 1219, 9362, 5893, 2657, 11, 597, 8306, 439, 295, 729, 12066, 11923, 2010, 9102, 13, 51064, 51064, 1779, 13, 407, 498, 291, 528, 281, 915, 437, 7909, 291, 393, 764, 11, 2086, 11, 437, 6828, 291, 393, 764, 11, 291, 445, 352, 281, 300, 10088, 13, 51514, 51514, 7587, 13, 10635, 1315, 382, 264, 11923, 13, 7587, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.1131900869390016, "compression_ratio": 1.7799043062200957, "no_caption_prob": 3.48071007465478e-05}, {"id": 247, "seek": 138800, "start": 1388.0, "end": 1396.0, "text": " The name of the scope is going to look exact. It's going to be the exact name of the module, even though it's in a different module.", "tokens": [50364, 440, 1315, 295, 264, 11923, 307, 516, 281, 574, 1900, 13, 467, 311, 516, 281, 312, 264, 1900, 1315, 295, 264, 10088, 11, 754, 1673, 309, 311, 294, 257, 819, 10088, 13, 50764, 50764, 467, 311, 294, 264, 9362, 5893, 2657, 10088, 11, 457, 309, 311, 1219, 9362, 5893, 2657, 5893, 11923, 11, 9362, 5893, 2657, 5893, 954, 13, 51114, 51114, 823, 11, 498, 291, 360, 9362, 5893, 2657, 5893, 954, 11, 300, 10088, 8306, 439, 295, 264, 7909, 291, 393, 764, 294, 300, 4319, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.05029840999179416, "compression_ratio": 1.901098901098901, "no_caption_prob": 1.5936400814098306e-05}, {"id": 248, "seek": 138800, "start": 1396.0, "end": 1403.0, "text": " It's in the API dot object module, but it's called API dot object dot scope, API dot object dot person.", "tokens": [50364, 440, 1315, 295, 264, 11923, 307, 516, 281, 574, 1900, 13, 467, 311, 516, 281, 312, 264, 1900, 1315, 295, 264, 10088, 11, 754, 1673, 309, 311, 294, 257, 819, 10088, 13, 50764, 50764, 467, 311, 294, 264, 9362, 5893, 2657, 10088, 11, 457, 309, 311, 1219, 9362, 5893, 2657, 5893, 11923, 11, 9362, 5893, 2657, 5893, 954, 13, 51114, 51114, 823, 11, 498, 291, 360, 9362, 5893, 2657, 5893, 954, 11, 300, 10088, 8306, 439, 295, 264, 7909, 291, 393, 764, 294, 300, 4319, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.05029840999179416, "compression_ratio": 1.901098901098901, "no_caption_prob": 1.5936400814098306e-05}, {"id": 249, "seek": 138800, "start": 1403.0, "end": 1410.0, "text": " Now, if you do API dot object dot person, that module contains all of the fields you can use in that context.", "tokens": [50364, 440, 1315, 295, 264, 11923, 307, 516, 281, 574, 1900, 13, 467, 311, 516, 281, 312, 264, 1900, 1315, 295, 264, 10088, 11, 754, 1673, 309, 311, 294, 257, 819, 10088, 13, 50764, 50764, 467, 311, 294, 264, 9362, 5893, 2657, 10088, 11, 457, 309, 311, 1219, 9362, 5893, 2657, 5893, 11923, 11, 9362, 5893, 2657, 5893, 954, 13, 51114, 51114, 823, 11, 498, 291, 360, 9362, 5893, 2657, 5893, 954, 11, 300, 10088, 8306, 439, 295, 264, 7909, 291, 393, 764, 294, 300, 4319, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.05029840999179416, "compression_ratio": 1.901098901098901, "no_caption_prob": 1.5936400814098306e-05}, {"id": 250, "seek": 141000, "start": 1410.0, "end": 1418.0, "text": " So the scope API dot object dot person means that you can do API dot object dot person dot any field name.", "tokens": [50364, 407, 264, 11923, 9362, 5893, 2657, 5893, 954, 1355, 300, 291, 393, 360, 9362, 5893, 2657, 5893, 954, 5893, 604, 2519, 1315, 13, 50764, 50764, 407, 309, 311, 257, 857, 2252, 281, 2903, 300, 1553, 4099, 3089, 13, 583, 457, 4696, 300, 300, 2067, 380, 886, 13181, 13, 51114, 51114, 467, 1669, 2020, 281, 385, 412, 1935, 13, 583, 286, 519, 300, 294, 527, 1389, 11, 452, 15328, 11, 321, 434, 13181, 4175, 538, 884, 257, 688, 295, 10198, 3349, 337, 264, 10088, 5288, 11, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.06040199151199855, "compression_ratio": 1.6355555555555557, "no_caption_prob": 2.9944242214696715e-06}, {"id": 251, "seek": 141000, "start": 1418.0, "end": 1425.0, "text": " So it's a bit difficult to explain that without showing code. But but hopefully that that wasn't too confusing.", "tokens": [50364, 407, 264, 11923, 9362, 5893, 2657, 5893, 954, 1355, 300, 291, 393, 360, 9362, 5893, 2657, 5893, 954, 5893, 604, 2519, 1315, 13, 50764, 50764, 407, 309, 311, 257, 857, 2252, 281, 2903, 300, 1553, 4099, 3089, 13, 583, 457, 4696, 300, 300, 2067, 380, 886, 13181, 13, 51114, 51114, 467, 1669, 2020, 281, 385, 412, 1935, 13, 583, 286, 519, 300, 294, 527, 1389, 11, 452, 15328, 11, 321, 434, 13181, 4175, 538, 884, 257, 688, 295, 10198, 3349, 337, 264, 10088, 5288, 11, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.06040199151199855, "compression_ratio": 1.6355555555555557, "no_caption_prob": 2.9944242214696715e-06}, {"id": 252, "seek": 141000, "start": 1425.0, "end": 1434.0, "text": " It makes sense to me at least. But I think that in our case, my workplace, we're confusing ourselves by doing a lot of aliasing for the module names,", "tokens": [50364, 407, 264, 11923, 9362, 5893, 2657, 5893, 954, 1355, 300, 291, 393, 360, 9362, 5893, 2657, 5893, 954, 5893, 604, 2519, 1315, 13, 50764, 50764, 407, 309, 311, 257, 857, 2252, 281, 2903, 300, 1553, 4099, 3089, 13, 583, 457, 4696, 300, 300, 2067, 380, 886, 13181, 13, 51114, 51114, 467, 1669, 2020, 281, 385, 412, 1935, 13, 583, 286, 519, 300, 294, 527, 1389, 11, 452, 15328, 11, 321, 434, 13181, 4175, 538, 884, 257, 688, 295, 10198, 3349, 337, 264, 10088, 5288, 11, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.06040199151199855, "compression_ratio": 1.6355555555555557, "no_caption_prob": 2.9944242214696715e-06}, {"id": 253, "seek": 143400, "start": 1434.0, "end": 1441.0, "text": " which might not be always a good idea, especially if you rename it like it's not always person, it's user, for instance.", "tokens": [50364, 597, 1062, 406, 312, 1009, 257, 665, 1558, 11, 2318, 498, 291, 36741, 309, 411, 309, 311, 406, 1009, 954, 11, 309, 311, 4195, 11, 337, 5197, 13, 50714, 50714, 9362, 5893, 2657, 5893, 954, 419, 4609, 382, 4195, 13, 865, 13, 400, 550, 291, 434, 291, 434, 13181, 1803, 13, 50964, 50964, 14711, 13, 286, 914, 11, 412, 300, 935, 11, 286, 576, 312, 6359, 11, 286, 914, 11, 1310, 309, 311, 1152, 281, 652, 257, 7697, 1319, 281, 264, 34078, 11, 51264, 51264, 457, 286, 576, 312, 8079, 4473, 452, 21884, 13695, 34078, 412, 300, 935, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.08172142621382926, "compression_ratio": 1.6611570247933884, "no_caption_prob": 2.468147431500256e-05}, {"id": 254, "seek": 143400, "start": 1441.0, "end": 1446.0, "text": " API dot object dot person alias as user. Yeah. And then you're you're confusing yourself.", "tokens": [50364, 597, 1062, 406, 312, 1009, 257, 665, 1558, 11, 2318, 498, 291, 36741, 309, 411, 309, 311, 406, 1009, 954, 11, 309, 311, 4195, 11, 337, 5197, 13, 50714, 50714, 9362, 5893, 2657, 5893, 954, 419, 4609, 382, 4195, 13, 865, 13, 400, 550, 291, 434, 291, 434, 13181, 1803, 13, 50964, 50964, 14711, 13, 286, 914, 11, 412, 300, 935, 11, 286, 576, 312, 6359, 11, 286, 914, 11, 1310, 309, 311, 1152, 281, 652, 257, 7697, 1319, 281, 264, 34078, 11, 51264, 51264, 457, 286, 576, 312, 8079, 4473, 452, 21884, 13695, 34078, 412, 300, 935, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.08172142621382926, "compression_ratio": 1.6611570247933884, "no_caption_prob": 2.468147431500256e-05}, {"id": 255, "seek": 143400, "start": 1446.0, "end": 1452.0, "text": " Interesting. I mean, at that point, I would be wondering, I mean, maybe it's hard to make a breaking change to the schema,", "tokens": [50364, 597, 1062, 406, 312, 1009, 257, 665, 1558, 11, 2318, 498, 291, 36741, 309, 411, 309, 311, 406, 1009, 954, 11, 309, 311, 4195, 11, 337, 5197, 13, 50714, 50714, 9362, 5893, 2657, 5893, 954, 419, 4609, 382, 4195, 13, 865, 13, 400, 550, 291, 434, 291, 434, 13181, 1803, 13, 50964, 50964, 14711, 13, 286, 914, 11, 412, 300, 935, 11, 286, 576, 312, 6359, 11, 286, 914, 11, 1310, 309, 311, 1152, 281, 652, 257, 7697, 1319, 281, 264, 34078, 11, 51264, 51264, 457, 286, 576, 312, 8079, 4473, 452, 21884, 13695, 34078, 412, 300, 935, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.08172142621382926, "compression_ratio": 1.6611570247933884, "no_caption_prob": 2.468147431500256e-05}, {"id": 256, "seek": 143400, "start": 1452.0, "end": 1456.0, "text": " but I would be considering changing my GraphQL schema at that point.", "tokens": [50364, 597, 1062, 406, 312, 1009, 257, 665, 1558, 11, 2318, 498, 291, 36741, 309, 411, 309, 311, 406, 1009, 954, 11, 309, 311, 4195, 11, 337, 5197, 13, 50714, 50714, 9362, 5893, 2657, 5893, 954, 419, 4609, 382, 4195, 13, 865, 13, 400, 550, 291, 434, 291, 434, 13181, 1803, 13, 50964, 50964, 14711, 13, 286, 914, 11, 412, 300, 935, 11, 286, 576, 312, 6359, 11, 286, 914, 11, 1310, 309, 311, 1152, 281, 652, 257, 7697, 1319, 281, 264, 34078, 11, 51264, 51264, 457, 286, 576, 312, 8079, 4473, 452, 21884, 13695, 34078, 412, 300, 935, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.08172142621382926, "compression_ratio": 1.6611570247933884, "no_caption_prob": 2.468147431500256e-05}, {"id": 257, "seek": 145600, "start": 1456.0, "end": 1464.0, "text": " Well, yeah. Or maybe it's just some discipline we need to get around aliasing our modules.", "tokens": [50364, 1042, 11, 1338, 13, 1610, 1310, 309, 311, 445, 512, 13635, 321, 643, 281, 483, 926, 10198, 3349, 527, 16679, 13, 50764, 50764, 1779, 13, 1485, 295, 264, 7512, 300, 286, 519, 307, 534, 1021, 307, 613, 9450, 6352, 13, 51064, 51064, 682, 472, 2020, 11, 309, 311, 309, 311, 1238, 1090, 1496, 13, 509, 458, 11, 309, 311, 309, 311, 406, 382, 2295, 1496, 382, 445, 1455, 257, 21884, 13695, 14581, 13, 51364, 51364, 583, 294, 1071, 2020, 11, 309, 311, 588, 2295, 1496, 11, 709, 294, 264, 912, 636, 300, 31828, 979, 8616, 307, 2295, 1496, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.0687865886873412, "compression_ratio": 1.5950413223140496, "no_caption_prob": 5.594248705165228e-06}, {"id": 258, "seek": 145600, "start": 1464.0, "end": 1470.0, "text": " Right. One of the techniques that I think is really important is these selection sets.", "tokens": [50364, 1042, 11, 1338, 13, 1610, 1310, 309, 311, 445, 512, 13635, 321, 643, 281, 483, 926, 10198, 3349, 527, 16679, 13, 50764, 50764, 1779, 13, 1485, 295, 264, 7512, 300, 286, 519, 307, 534, 1021, 307, 613, 9450, 6352, 13, 51064, 51064, 682, 472, 2020, 11, 309, 311, 309, 311, 1238, 1090, 1496, 13, 509, 458, 11, 309, 311, 309, 311, 406, 382, 2295, 1496, 382, 445, 1455, 257, 21884, 13695, 14581, 13, 51364, 51364, 583, 294, 1071, 2020, 11, 309, 311, 588, 2295, 1496, 11, 709, 294, 264, 912, 636, 300, 31828, 979, 8616, 307, 2295, 1496, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.0687865886873412, "compression_ratio": 1.5950413223140496, "no_caption_prob": 5.594248705165228e-06}, {"id": 259, "seek": 145600, "start": 1470.0, "end": 1476.0, "text": " In one sense, it's it's pretty high level. You know, it's it's not as low level as just making a GraphQL query.", "tokens": [50364, 1042, 11, 1338, 13, 1610, 1310, 309, 311, 445, 512, 13635, 321, 643, 281, 483, 926, 10198, 3349, 527, 16679, 13, 50764, 50764, 1779, 13, 1485, 295, 264, 7512, 300, 286, 519, 307, 534, 1021, 307, 613, 9450, 6352, 13, 51064, 51064, 682, 472, 2020, 11, 309, 311, 309, 311, 1238, 1090, 1496, 13, 509, 458, 11, 309, 311, 309, 311, 406, 382, 2295, 1496, 382, 445, 1455, 257, 21884, 13695, 14581, 13, 51364, 51364, 583, 294, 1071, 2020, 11, 309, 311, 588, 2295, 1496, 11, 709, 294, 264, 912, 636, 300, 31828, 979, 8616, 307, 2295, 1496, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.0687865886873412, "compression_ratio": 1.5950413223140496, "no_caption_prob": 5.594248705165228e-06}, {"id": 260, "seek": 145600, "start": 1476.0, "end": 1483.0, "text": " But in another sense, it's very low level, much in the same way that JSON decoding is low level.", "tokens": [50364, 1042, 11, 1338, 13, 1610, 1310, 309, 311, 445, 512, 13635, 321, 643, 281, 483, 926, 10198, 3349, 527, 16679, 13, 50764, 50764, 1779, 13, 1485, 295, 264, 7512, 300, 286, 519, 307, 534, 1021, 307, 613, 9450, 6352, 13, 51064, 51064, 682, 472, 2020, 11, 309, 311, 309, 311, 1238, 1090, 1496, 13, 509, 458, 11, 309, 311, 309, 311, 406, 382, 2295, 1496, 382, 445, 1455, 257, 21884, 13695, 14581, 13, 51364, 51364, 583, 294, 1071, 2020, 11, 309, 311, 588, 2295, 1496, 11, 709, 294, 264, 912, 636, 300, 31828, 979, 8616, 307, 2295, 1496, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.0687865886873412, "compression_ratio": 1.5950413223140496, "no_caption_prob": 5.594248705165228e-06}, {"id": 261, "seek": 148300, "start": 1483.0, "end": 1487.0, "text": " And as such, it belongs in a module most of the time.", "tokens": [50364, 400, 382, 1270, 11, 309, 12953, 294, 257, 10088, 881, 295, 264, 565, 13, 50564, 50564, 509, 576, 1286, 428, 9450, 6352, 294, 257, 819, 10088, 30, 50764, 50764, 4534, 295, 264, 565, 11, 2086, 13, 1743, 498, 309, 311, 257, 954, 586, 11, 498, 309, 311, 411, 257, 12058, 1365, 293, 291, 434, 445, 23673, 278, 257, 954, 293, 4099, 641, 700, 293, 1036, 1315, 13, 51214, 51214, 2264, 11, 457, 294, 257, 957, 2107, 12058, 3089, 3096, 11, 437, 311, 516, 281, 1051, 307, 456, 311, 516, 281, 312, 257, 688, 295, 38015, 9952, 322, 300, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.06686491179234773, "compression_ratio": 1.6363636363636365, "no_caption_prob": 2.468240199959837e-05}, {"id": 262, "seek": 148300, "start": 1487.0, "end": 1491.0, "text": " You would move your selection sets in a different module?", "tokens": [50364, 400, 382, 1270, 11, 309, 12953, 294, 257, 10088, 881, 295, 264, 565, 13, 50564, 50564, 509, 576, 1286, 428, 9450, 6352, 294, 257, 819, 10088, 30, 50764, 50764, 4534, 295, 264, 565, 11, 2086, 13, 1743, 498, 309, 311, 257, 954, 586, 11, 498, 309, 311, 411, 257, 12058, 1365, 293, 291, 434, 445, 23673, 278, 257, 954, 293, 4099, 641, 700, 293, 1036, 1315, 13, 51214, 51214, 2264, 11, 457, 294, 257, 957, 2107, 12058, 3089, 3096, 11, 437, 311, 516, 281, 1051, 307, 456, 311, 516, 281, 312, 257, 688, 295, 38015, 9952, 322, 300, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.06686491179234773, "compression_ratio": 1.6363636363636365, "no_caption_prob": 2.468240199959837e-05}, {"id": 263, "seek": 148300, "start": 1491.0, "end": 1500.0, "text": " Most of the time, yes. Like if it's a person now, if it's like a toy example and you're just fetching a person and showing their first and last name.", "tokens": [50364, 400, 382, 1270, 11, 309, 12953, 294, 257, 10088, 881, 295, 264, 565, 13, 50564, 50564, 509, 576, 1286, 428, 9450, 6352, 294, 257, 819, 10088, 30, 50764, 50764, 4534, 295, 264, 565, 11, 2086, 13, 1743, 498, 309, 311, 257, 954, 586, 11, 498, 309, 311, 411, 257, 12058, 1365, 293, 291, 434, 445, 23673, 278, 257, 954, 293, 4099, 641, 700, 293, 1036, 1315, 13, 51214, 51214, 2264, 11, 457, 294, 257, 957, 2107, 12058, 3089, 3096, 11, 437, 311, 516, 281, 1051, 307, 456, 311, 516, 281, 312, 257, 688, 295, 38015, 9952, 322, 300, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.06686491179234773, "compression_ratio": 1.6363636363636365, "no_caption_prob": 2.468240199959837e-05}, {"id": 264, "seek": 148300, "start": 1500.0, "end": 1508.0, "text": " OK, but in a real non toy code base, what's going to happen is there's going to be a lot of intricate logic on that.", "tokens": [50364, 400, 382, 1270, 11, 309, 12953, 294, 257, 10088, 881, 295, 264, 565, 13, 50564, 50564, 509, 576, 1286, 428, 9450, 6352, 294, 257, 819, 10088, 30, 50764, 50764, 4534, 295, 264, 565, 11, 2086, 13, 1743, 498, 309, 311, 257, 954, 586, 11, 498, 309, 311, 411, 257, 12058, 1365, 293, 291, 434, 445, 23673, 278, 257, 954, 293, 4099, 641, 700, 293, 1036, 1315, 13, 51214, 51214, 2264, 11, 457, 294, 257, 957, 2107, 12058, 3089, 3096, 11, 437, 311, 516, 281, 1051, 307, 456, 311, 516, 281, 312, 257, 688, 295, 38015, 9952, 322, 300, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.06686491179234773, "compression_ratio": 1.6363636363636365, "no_caption_prob": 2.468240199959837e-05}, {"id": 265, "seek": 150800, "start": 1508.0, "end": 1516.0, "text": " And you're going to have you know, you're going to have user settings and you're going to have all these details that you need to manage.", "tokens": [50364, 400, 291, 434, 516, 281, 362, 291, 458, 11, 291, 434, 516, 281, 362, 4195, 6257, 293, 291, 434, 516, 281, 362, 439, 613, 4365, 300, 291, 643, 281, 3067, 13, 50764, 50764, 400, 286, 519, 309, 311, 257, 534, 665, 3124, 281, 722, 5006, 1481, 2098, 281, 13859, 613, 666, 16679, 13, 51114, 51114, 407, 16679, 958, 281, 689, 291, 576, 764, 552, 420, 16679, 300, 291, 576, 2073, 926, 264, 1472, 295, 428, 3089, 3096, 30, 51464, 51464, 6583, 3473, 300, 291, 576, 2073, 13, 400, 286, 519, 309, 311, 534, 1481, 281, 38745, 5256, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.03614483861362233, "compression_ratio": 1.97196261682243, "no_caption_prob": 9.914670226862654e-05}, {"id": 266, "seek": 150800, "start": 1516.0, "end": 1523.0, "text": " And I think it's a really good practice to start finding nice ways to organize these into modules.", "tokens": [50364, 400, 291, 434, 516, 281, 362, 291, 458, 11, 291, 434, 516, 281, 362, 4195, 6257, 293, 291, 434, 516, 281, 362, 439, 613, 4365, 300, 291, 643, 281, 3067, 13, 50764, 50764, 400, 286, 519, 309, 311, 257, 534, 665, 3124, 281, 722, 5006, 1481, 2098, 281, 13859, 613, 666, 16679, 13, 51114, 51114, 407, 16679, 958, 281, 689, 291, 576, 764, 552, 420, 16679, 300, 291, 576, 2073, 926, 264, 1472, 295, 428, 3089, 3096, 30, 51464, 51464, 6583, 3473, 300, 291, 576, 2073, 13, 400, 286, 519, 309, 311, 534, 1481, 281, 38745, 5256, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.03614483861362233, "compression_ratio": 1.97196261682243, "no_caption_prob": 9.914670226862654e-05}, {"id": 267, "seek": 150800, "start": 1523.0, "end": 1530.0, "text": " So modules next to where you would use them or modules that you would share around the rest of your code base?", "tokens": [50364, 400, 291, 434, 516, 281, 362, 291, 458, 11, 291, 434, 516, 281, 362, 4195, 6257, 293, 291, 434, 516, 281, 362, 439, 613, 4365, 300, 291, 643, 281, 3067, 13, 50764, 50764, 400, 286, 519, 309, 311, 257, 534, 665, 3124, 281, 722, 5006, 1481, 2098, 281, 13859, 613, 666, 16679, 13, 51114, 51114, 407, 16679, 958, 281, 689, 291, 576, 764, 552, 420, 16679, 300, 291, 576, 2073, 926, 264, 1472, 295, 428, 3089, 3096, 30, 51464, 51464, 6583, 3473, 300, 291, 576, 2073, 13, 400, 286, 519, 309, 311, 534, 1481, 281, 38745, 5256, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.03614483861362233, "compression_ratio": 1.97196261682243, "no_caption_prob": 9.914670226862654e-05}, {"id": 268, "seek": 150800, "start": 1530.0, "end": 1534.0, "text": " Modules that you would share. And I think it's really nice to encapsulate.", "tokens": [50364, 400, 291, 434, 516, 281, 362, 291, 458, 11, 291, 434, 516, 281, 362, 4195, 6257, 293, 291, 434, 516, 281, 362, 439, 613, 4365, 300, 291, 643, 281, 3067, 13, 50764, 50764, 400, 286, 519, 309, 311, 257, 534, 665, 3124, 281, 722, 5006, 1481, 2098, 281, 13859, 613, 666, 16679, 13, 51114, 51114, 407, 16679, 958, 281, 689, 291, 576, 764, 552, 420, 16679, 300, 291, 576, 2073, 926, 264, 1472, 295, 428, 3089, 3096, 30, 51464, 51464, 6583, 3473, 300, 291, 576, 2073, 13, 400, 286, 519, 309, 311, 534, 1481, 281, 38745, 5256, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.03614483861362233, "compression_ratio": 1.97196261682243, "no_caption_prob": 9.914670226862654e-05}, {"id": 269, "seek": 153400, "start": 1534.0, "end": 1543.0, "text": " So like let's take a person so you can encapsulate that into, you know, let's just call it a person top level module called person.", "tokens": [50364, 407, 411, 718, 311, 747, 257, 954, 370, 291, 393, 38745, 5256, 300, 666, 11, 291, 458, 11, 718, 311, 445, 818, 309, 257, 954, 1192, 1496, 10088, 1219, 954, 13, 50814, 50814, 1042, 11, 300, 311, 516, 281, 312, 13181, 337, 10198, 3349, 13, 51014, 51014, 1042, 11, 457, 291, 600, 38745, 6987, 439, 295, 264, 9450, 6352, 300, 2028, 365, 9362, 5893, 2657, 5893, 954, 281, 1951, 300, 10088, 13, 51464, 51464, 16581, 291, 611, 643, 264, 954, 11, 264, 9362, 5893, 2657, 5893, 954, 10088, 337, 661, 721, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.121212104956309, "compression_ratio": 1.8130841121495327, "no_caption_prob": 4.908522896585055e-05}, {"id": 270, "seek": 153400, "start": 1543.0, "end": 1547.0, "text": " Well, that's going to be confusing for aliasing.", "tokens": [50364, 407, 411, 718, 311, 747, 257, 954, 370, 291, 393, 38745, 5256, 300, 666, 11, 291, 458, 11, 718, 311, 445, 818, 309, 257, 954, 1192, 1496, 10088, 1219, 954, 13, 50814, 50814, 1042, 11, 300, 311, 516, 281, 312, 13181, 337, 10198, 3349, 13, 51014, 51014, 1042, 11, 457, 291, 600, 38745, 6987, 439, 295, 264, 9450, 6352, 300, 2028, 365, 9362, 5893, 2657, 5893, 954, 281, 1951, 300, 10088, 13, 51464, 51464, 16581, 291, 611, 643, 264, 954, 11, 264, 9362, 5893, 2657, 5893, 954, 10088, 337, 661, 721, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.121212104956309, "compression_ratio": 1.8130841121495327, "no_caption_prob": 4.908522896585055e-05}, {"id": 271, "seek": 153400, "start": 1547.0, "end": 1556.0, "text": " Well, but you've encapsulated all of the selection sets that deal with API dot object dot person to within that module.", "tokens": [50364, 407, 411, 718, 311, 747, 257, 954, 370, 291, 393, 38745, 5256, 300, 666, 11, 291, 458, 11, 718, 311, 445, 818, 309, 257, 954, 1192, 1496, 10088, 1219, 954, 13, 50814, 50814, 1042, 11, 300, 311, 516, 281, 312, 13181, 337, 10198, 3349, 13, 51014, 51014, 1042, 11, 457, 291, 600, 38745, 6987, 439, 295, 264, 9450, 6352, 300, 2028, 365, 9362, 5893, 2657, 5893, 954, 281, 1951, 300, 10088, 13, 51464, 51464, 16581, 291, 611, 643, 264, 954, 11, 264, 9362, 5893, 2657, 5893, 954, 10088, 337, 661, 721, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.121212104956309, "compression_ratio": 1.8130841121495327, "no_caption_prob": 4.908522896585055e-05}, {"id": 272, "seek": 153400, "start": 1556.0, "end": 1563.0, "text": " Unless you also need the person, the API dot object dot person module for other things.", "tokens": [50364, 407, 411, 718, 311, 747, 257, 954, 370, 291, 393, 38745, 5256, 300, 666, 11, 291, 458, 11, 718, 311, 445, 818, 309, 257, 954, 1192, 1496, 10088, 1219, 954, 13, 50814, 50814, 1042, 11, 300, 311, 516, 281, 312, 13181, 337, 10198, 3349, 13, 51014, 51014, 1042, 11, 457, 291, 600, 38745, 6987, 439, 295, 264, 9450, 6352, 300, 2028, 365, 9362, 5893, 2657, 5893, 954, 281, 1951, 300, 10088, 13, 51464, 51464, 16581, 291, 611, 643, 264, 954, 11, 264, 9362, 5893, 2657, 5893, 954, 10088, 337, 661, 721, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.121212104956309, "compression_ratio": 1.8130841121495327, "no_caption_prob": 4.908522896585055e-05}, {"id": 273, "seek": 156300, "start": 1563.0, "end": 1569.0, "text": " If you move everything related to selection sets into that module, then I guess that problem is solved.", "tokens": [50364, 759, 291, 1286, 1203, 4077, 281, 9450, 6352, 666, 300, 10088, 11, 550, 286, 2041, 300, 1154, 307, 13041, 13, 50664, 50664, 286, 519, 370, 13, 400, 286, 914, 11, 264, 33547, 1062, 406, 1009, 312, 6239, 1850, 11, 457, 286, 519, 341, 307, 264, 2674, 3513, 300, 311, 588, 1481, 13, 51064, 51064, 509, 362, 309, 13, 407, 11, 291, 458, 11, 445, 411, 291, 576, 362, 286, 500, 380, 458, 11, 1310, 291, 600, 658, 411, 364, 7222, 293, 550, 291, 362, 11, 291, 458, 11, 264, 1772, 295, 264, 7222, 293, 264, 4876, 293, 264, 3793, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.07243708005318275, "compression_ratio": 1.7119341563786008, "no_caption_prob": 4.7106850615818985e-06}, {"id": 274, "seek": 156300, "start": 1569.0, "end": 1577.0, "text": " I think so. And I mean, the seams might not always be perfectly clear, but I think this is the general direction that's very nice.", "tokens": [50364, 759, 291, 1286, 1203, 4077, 281, 9450, 6352, 666, 300, 10088, 11, 550, 286, 2041, 300, 1154, 307, 13041, 13, 50664, 50664, 286, 519, 370, 13, 400, 286, 914, 11, 264, 33547, 1062, 406, 1009, 312, 6239, 1850, 11, 457, 286, 519, 341, 307, 264, 2674, 3513, 300, 311, 588, 1481, 13, 51064, 51064, 509, 362, 309, 13, 407, 11, 291, 458, 11, 445, 411, 291, 576, 362, 286, 500, 380, 458, 11, 1310, 291, 600, 658, 411, 364, 7222, 293, 550, 291, 362, 11, 291, 458, 11, 264, 1772, 295, 264, 7222, 293, 264, 4876, 293, 264, 3793, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.07243708005318275, "compression_ratio": 1.7119341563786008, "no_caption_prob": 4.7106850615818985e-06}, {"id": 275, "seek": 156300, "start": 1577.0, "end": 1588.0, "text": " You have it. So, you know, just like you would have I don't know, maybe you've got like an article and then you have, you know, the body of the article and the title and the author.", "tokens": [50364, 759, 291, 1286, 1203, 4077, 281, 9450, 6352, 666, 300, 10088, 11, 550, 286, 2041, 300, 1154, 307, 13041, 13, 50664, 50664, 286, 519, 370, 13, 400, 286, 914, 11, 264, 33547, 1062, 406, 1009, 312, 6239, 1850, 11, 457, 286, 519, 341, 307, 264, 2674, 3513, 300, 311, 588, 1481, 13, 51064, 51064, 509, 362, 309, 13, 407, 11, 291, 458, 11, 445, 411, 291, 576, 362, 286, 500, 380, 458, 11, 1310, 291, 600, 658, 411, 364, 7222, 293, 550, 291, 362, 11, 291, 458, 11, 264, 1772, 295, 264, 7222, 293, 264, 4876, 293, 264, 3793, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.07243708005318275, "compression_ratio": 1.7119341563786008, "no_caption_prob": 4.7106850615818985e-06}, {"id": 276, "seek": 158800, "start": 1588.0, "end": 1599.0, "text": " So if the author of the article is a person, then you need to make a selected and a nested selection set for that article to say, OK, I want to get the author of the article.", "tokens": [50364, 407, 498, 264, 3793, 295, 264, 7222, 307, 257, 954, 11, 550, 291, 643, 281, 652, 257, 8209, 293, 257, 15646, 292, 9450, 992, 337, 300, 7222, 281, 584, 11, 2264, 11, 286, 528, 281, 483, 264, 3793, 295, 264, 7222, 13, 50914, 50914, 1042, 11, 437, 7909, 360, 291, 528, 30, 400, 550, 291, 643, 257, 15646, 292, 9450, 992, 281, 584, 11, 286, 528, 264, 700, 1315, 11, 1036, 1315, 13, 51164, 51164, 1042, 11, 291, 393, 40999, 300, 281, 264, 954, 10088, 300, 291, 7642, 281, 38745, 5256, 300, 2699, 76, 21884, 13695, 9450, 992, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.0581102926754257, "compression_ratio": 1.900473933649289, "no_caption_prob": 6.814458174631e-05}, {"id": 277, "seek": 158800, "start": 1599.0, "end": 1604.0, "text": " Well, what fields do you want? And then you need a nested selection set to say, I want the first name, last name.", "tokens": [50364, 407, 498, 264, 3793, 295, 264, 7222, 307, 257, 954, 11, 550, 291, 643, 281, 652, 257, 8209, 293, 257, 15646, 292, 9450, 992, 337, 300, 7222, 281, 584, 11, 2264, 11, 286, 528, 281, 483, 264, 3793, 295, 264, 7222, 13, 50914, 50914, 1042, 11, 437, 7909, 360, 291, 528, 30, 400, 550, 291, 643, 257, 15646, 292, 9450, 992, 281, 584, 11, 286, 528, 264, 700, 1315, 11, 1036, 1315, 13, 51164, 51164, 1042, 11, 291, 393, 40999, 300, 281, 264, 954, 10088, 300, 291, 7642, 281, 38745, 5256, 300, 2699, 76, 21884, 13695, 9450, 992, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.0581102926754257, "compression_ratio": 1.900473933649289, "no_caption_prob": 6.814458174631e-05}, {"id": 278, "seek": 158800, "start": 1604.0, "end": 1612.0, "text": " Well, you can delegate that to the person module that you defined to encapsulate that Elm GraphQL selection set.", "tokens": [50364, 407, 498, 264, 3793, 295, 264, 7222, 307, 257, 954, 11, 550, 291, 643, 281, 652, 257, 8209, 293, 257, 15646, 292, 9450, 992, 337, 300, 7222, 281, 584, 11, 2264, 11, 286, 528, 281, 483, 264, 3793, 295, 264, 7222, 13, 50914, 50914, 1042, 11, 437, 7909, 360, 291, 528, 30, 400, 550, 291, 643, 257, 15646, 292, 9450, 992, 281, 584, 11, 286, 528, 264, 700, 1315, 11, 1036, 1315, 13, 51164, 51164, 1042, 11, 291, 393, 40999, 300, 281, 264, 954, 10088, 300, 291, 7642, 281, 38745, 5256, 300, 2699, 76, 21884, 13695, 9450, 992, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.0581102926754257, "compression_ratio": 1.900473933649289, "no_caption_prob": 6.814458174631e-05}, {"id": 279, "seek": 161200, "start": 1612.0, "end": 1621.0, "text": " So you can say, you know, you have module person. It exposes selection. You know, you have a person dot selection, which is of type selection set.", "tokens": [50364, 407, 291, 393, 584, 11, 291, 458, 11, 291, 362, 10088, 954, 13, 467, 1278, 4201, 9450, 13, 509, 458, 11, 291, 362, 257, 954, 5893, 9450, 11, 597, 307, 295, 2010, 9450, 992, 13, 50814, 50814, 400, 586, 300, 311, 516, 281, 3318, 294, 13, 407, 562, 291, 562, 291, 362, 11, 291, 458, 11, 364, 7222, 10088, 300, 38745, 26192, 428, 9450, 6352, 337, 23673, 278, 364, 7222, 11, 550, 291, 434, 516, 281, 584, 11, 731, 11, 483, 264, 3793, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.0557644096287814, "compression_ratio": 1.82010582010582, "no_caption_prob": 0.00017129303887486458}, {"id": 280, "seek": 161200, "start": 1621.0, "end": 1635.0, "text": " And now that's going to fit in. So when you when you have, you know, an article module that encapsulates your selection sets for fetching an article, then you're going to say, well, get the author.", "tokens": [50364, 407, 291, 393, 584, 11, 291, 458, 11, 291, 362, 10088, 954, 13, 467, 1278, 4201, 9450, 13, 509, 458, 11, 291, 362, 257, 954, 5893, 9450, 11, 597, 307, 295, 2010, 9450, 992, 13, 50814, 50814, 400, 586, 300, 311, 516, 281, 3318, 294, 13, 407, 562, 291, 562, 291, 362, 11, 291, 458, 11, 364, 7222, 10088, 300, 38745, 26192, 428, 9450, 6352, 337, 23673, 278, 364, 7222, 11, 550, 291, 434, 516, 281, 584, 11, 731, 11, 483, 264, 3793, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.0557644096287814, "compression_ratio": 1.82010582010582, "no_caption_prob": 0.00017129303887486458}, {"id": 281, "seek": 163500, "start": 1635.0, "end": 1645.0, "text": " And then you're going to pass in the nested selection set, which is going to be person dot selection. That's something you defined in your own module that encapsulates the selection set.", "tokens": [50364, 400, 550, 291, 434, 516, 281, 1320, 294, 264, 15646, 292, 9450, 992, 11, 597, 307, 516, 281, 312, 954, 5893, 9450, 13, 663, 311, 746, 291, 7642, 294, 428, 1065, 10088, 300, 38745, 26192, 264, 9450, 992, 13, 50864, 50864, 2264, 11, 370, 291, 576, 362, 257, 2973, 9450, 300, 2516, 257, 688, 295, 12869, 13, 51114, 51114], "temperature": 0.0, "avg_logprob": -0.0523348792654569, "compression_ratio": 1.5757575757575757, "no_caption_prob": 1.8631402781466022e-05}, {"id": 282, "seek": 163500, "start": 1645.0, "end": 1650.0, "text": " OK, so you would have a personal selection that takes a lot of arguments.", "tokens": [50364, 400, 550, 291, 434, 516, 281, 1320, 294, 264, 15646, 292, 9450, 992, 11, 597, 307, 516, 281, 312, 954, 5893, 9450, 13, 663, 311, 746, 291, 7642, 294, 428, 1065, 10088, 300, 38745, 26192, 264, 9450, 992, 13, 50864, 50864, 2264, 11, 370, 291, 576, 362, 257, 2973, 9450, 300, 2516, 257, 688, 295, 12869, 13, 51114, 51114], "temperature": 0.0, "avg_logprob": -0.0523348792654569, "compression_ratio": 1.5757575757575757, "no_caption_prob": 1.8631402781466022e-05}, {"id": 283, "seek": 165000, "start": 1650.0, "end": 1666.0, "text": " A person dot selection wouldn't take any arguments because you're passing it to it's a it's a selection set that's describing here's what I want from a person. And then when you say article, I want the author.", "tokens": [50364, 316, 954, 5893, 9450, 2759, 380, 747, 604, 12869, 570, 291, 434, 8437, 309, 281, 309, 311, 257, 309, 311, 257, 9450, 992, 300, 311, 16141, 510, 311, 437, 286, 528, 490, 257, 954, 13, 400, 550, 562, 291, 584, 7222, 11, 286, 528, 264, 3793, 13, 51164, 51164, 663, 311, 7619, 13, 407, 11, 536, 11, 300, 311, 264, 1627, 551, 307, 291, 600, 658, 341, 10088, 300, 1333, 295, 38745, 26192, 577, 360, 286, 483, 257, 954, 30, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.09897791771661668, "compression_ratio": 1.6243902439024391, "no_caption_prob": 3.763580389204435e-05}, {"id": 284, "seek": 165000, "start": 1666.0, "end": 1673.0, "text": " That's described. So, see, that's the cool thing is you've got this module that sort of encapsulates how do I get a person?", "tokens": [50364, 316, 954, 5893, 9450, 2759, 380, 747, 604, 12869, 570, 291, 434, 8437, 309, 281, 309, 311, 257, 309, 311, 257, 9450, 992, 300, 311, 16141, 510, 311, 437, 286, 528, 490, 257, 954, 13, 400, 550, 562, 291, 584, 7222, 11, 286, 528, 264, 3793, 13, 51164, 51164, 663, 311, 7619, 13, 407, 11, 536, 11, 300, 311, 264, 1627, 551, 307, 291, 600, 658, 341, 10088, 300, 1333, 295, 38745, 26192, 577, 360, 286, 483, 257, 954, 30, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.09897791771661668, "compression_ratio": 1.6243902439024391, "no_caption_prob": 3.763580389204435e-05}, {"id": 285, "seek": 167300, "start": 1673.0, "end": 1681.0, "text": " And then you've got this this article part is describing where to get the person from. Right. So that's like the graph part of GraphQL.", "tokens": [50364, 400, 550, 291, 600, 658, 341, 341, 7222, 644, 307, 16141, 689, 281, 483, 264, 954, 490, 13, 1779, 13, 407, 300, 311, 411, 264, 4295, 644, 295, 21884, 13695, 13, 50764, 50764, 400, 370, 291, 393, 445, 1333, 295, 584, 11, 411, 11, 2264, 11, 731, 11, 510, 311, 264, 14581, 337, 257, 954, 300, 311, 294, 264, 954, 10088, 291, 7642, 954, 300, 9450, 13, 51164, 51164, 400, 550, 11, 731, 11, 437, 954, 360, 291, 528, 30, 2305, 360, 291, 528, 264, 954, 490, 30, 1042, 11, 300, 311, 264, 2480, 13, 467, 311, 264, 954, 567, 4114, 341, 7222, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.07866396727385344, "compression_ratio": 1.7966101694915255, "no_caption_prob": 4.985800842405297e-05}, {"id": 286, "seek": 167300, "start": 1681.0, "end": 1689.0, "text": " And so you can just sort of say, like, OK, well, here's the query for a person that's in the person module you defined person that selection.", "tokens": [50364, 400, 550, 291, 600, 658, 341, 341, 7222, 644, 307, 16141, 689, 281, 483, 264, 954, 490, 13, 1779, 13, 407, 300, 311, 411, 264, 4295, 644, 295, 21884, 13695, 13, 50764, 50764, 400, 370, 291, 393, 445, 1333, 295, 584, 11, 411, 11, 2264, 11, 731, 11, 510, 311, 264, 14581, 337, 257, 954, 300, 311, 294, 264, 954, 10088, 291, 7642, 954, 300, 9450, 13, 51164, 51164, 400, 550, 11, 731, 11, 437, 954, 360, 291, 528, 30, 2305, 360, 291, 528, 264, 954, 490, 30, 1042, 11, 300, 311, 264, 2480, 13, 467, 311, 264, 954, 567, 4114, 341, 7222, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.07866396727385344, "compression_ratio": 1.7966101694915255, "no_caption_prob": 4.985800842405297e-05}, {"id": 287, "seek": 167300, "start": 1689.0, "end": 1696.0, "text": " And then, well, what person do you want? Where do you want the person from? Well, that's the relationship. It's the person who wrote this article.", "tokens": [50364, 400, 550, 291, 600, 658, 341, 341, 7222, 644, 307, 16141, 689, 281, 483, 264, 954, 490, 13, 1779, 13, 407, 300, 311, 411, 264, 4295, 644, 295, 21884, 13695, 13, 50764, 50764, 400, 370, 291, 393, 445, 1333, 295, 584, 11, 411, 11, 2264, 11, 731, 11, 510, 311, 264, 14581, 337, 257, 954, 300, 311, 294, 264, 954, 10088, 291, 7642, 954, 300, 9450, 13, 51164, 51164, 400, 550, 11, 731, 11, 437, 954, 360, 291, 528, 30, 2305, 360, 291, 528, 264, 954, 490, 30, 1042, 11, 300, 311, 264, 2480, 13, 467, 311, 264, 954, 567, 4114, 341, 7222, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.07866396727385344, "compression_ratio": 1.7966101694915255, "no_caption_prob": 4.985800842405297e-05}, {"id": 288, "seek": 169600, "start": 1696.0, "end": 1716.0, "text": " Now, there is that does make it sound a little simpler than than it turns out to be in reality, because oftentimes you have if you're getting the current user, then you want to get you know, you want to get their avatar and maybe some additional details that for for the author of a post.", "tokens": [50364, 823, 11, 456, 307, 300, 775, 652, 309, 1626, 257, 707, 18587, 813, 813, 309, 4523, 484, 281, 312, 294, 4103, 11, 570, 18349, 291, 362, 498, 291, 434, 1242, 264, 2190, 4195, 11, 550, 291, 528, 281, 483, 291, 458, 11, 291, 528, 281, 483, 641, 36205, 293, 1310, 512, 4497, 4365, 300, 337, 337, 264, 3793, 295, 257, 2183, 13, 51364, 51364, 509, 458, 11, 1310, 337, 337, 264, 3793, 295, 364, 7222, 11, 291, 528, 281, 23673, 264, 1230, 295, 11290, 300, 436, 600, 9437, 420, 661, 11290, 300, 436, 600, 9437, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.06811627864837647, "compression_ratio": 1.9210526315789473, "no_caption_prob": 2.0784782464033924e-05}, {"id": 289, "seek": 169600, "start": 1716.0, "end": 1724.0, "text": " You know, maybe for for the author of an article, you want to fetch the number of articles that they've posted or other articles that they've posted.", "tokens": [50364, 823, 11, 456, 307, 300, 775, 652, 309, 1626, 257, 707, 18587, 813, 813, 309, 4523, 484, 281, 312, 294, 4103, 11, 570, 18349, 291, 362, 498, 291, 434, 1242, 264, 2190, 4195, 11, 550, 291, 528, 281, 483, 291, 458, 11, 291, 528, 281, 483, 641, 36205, 293, 1310, 512, 4497, 4365, 300, 337, 337, 264, 3793, 295, 257, 2183, 13, 51364, 51364, 509, 458, 11, 1310, 337, 337, 264, 3793, 295, 364, 7222, 11, 291, 528, 281, 23673, 264, 1230, 295, 11290, 300, 436, 600, 9437, 420, 661, 11290, 300, 436, 600, 9437, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.06811627864837647, "compression_ratio": 1.9210526315789473, "no_caption_prob": 2.0784782464033924e-05}, {"id": 290, "seek": 172400, "start": 1724.0, "end": 1728.0, "text": " So you do have to get creative with the way you define those those things.", "tokens": [50364, 407, 291, 360, 362, 281, 483, 5880, 365, 264, 636, 291, 6964, 729, 729, 721, 13, 50564, 50564, 1436, 291, 500, 380, 528, 281, 23673, 420, 833, 69, 7858, 881, 295, 264, 565, 13, 1779, 13, 1079, 13, 50814, 50814, 509, 528, 281, 5042, 670, 293, 833, 23673, 278, 293, 291, 528, 281, 915, 264, 558, 33547, 337, 337, 1333, 295, 1419, 264, 6357, 295, 264, 954, 689, 11, 291, 458, 11, 300, 300, 1333, 295, 15626, 264, 4965, 4365, 411, 11, 291, 458, 11, 1310, 264, 9952, 337, 577, 291, 4674, 364, 36205, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.10319182848689532, "compression_ratio": 1.759656652360515, "no_caption_prob": 7.071834716043668e-06}, {"id": 291, "seek": 172400, "start": 1728.0, "end": 1733.0, "text": " Because you don't want to fetch or underfetch most of the time. Right. Yes.", "tokens": [50364, 407, 291, 360, 362, 281, 483, 5880, 365, 264, 636, 291, 6964, 729, 729, 721, 13, 50564, 50564, 1436, 291, 500, 380, 528, 281, 23673, 420, 833, 69, 7858, 881, 295, 264, 565, 13, 1779, 13, 1079, 13, 50814, 50814, 509, 528, 281, 5042, 670, 293, 833, 23673, 278, 293, 291, 528, 281, 915, 264, 558, 33547, 337, 337, 1333, 295, 1419, 264, 6357, 295, 264, 954, 689, 11, 291, 458, 11, 300, 300, 1333, 295, 15626, 264, 4965, 4365, 411, 11, 291, 458, 11, 1310, 264, 9952, 337, 577, 291, 4674, 364, 36205, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.10319182848689532, "compression_ratio": 1.759656652360515, "no_caption_prob": 7.071834716043668e-06}, {"id": 292, "seek": 172400, "start": 1733.0, "end": 1752.0, "text": " You want to avoid over and under fetching and you want to find the right seams for for sort of having the responsibility of the person where, you know, that that sort of describes the core details like, you know, maybe the logic for how you display an avatar.", "tokens": [50364, 407, 291, 360, 362, 281, 483, 5880, 365, 264, 636, 291, 6964, 729, 729, 721, 13, 50564, 50564, 1436, 291, 500, 380, 528, 281, 23673, 420, 833, 69, 7858, 881, 295, 264, 565, 13, 1779, 13, 1079, 13, 50814, 50814, 509, 528, 281, 5042, 670, 293, 833, 23673, 278, 293, 291, 528, 281, 915, 264, 558, 33547, 337, 337, 1333, 295, 1419, 264, 6357, 295, 264, 954, 689, 11, 291, 458, 11, 300, 300, 1333, 295, 15626, 264, 4965, 4365, 411, 11, 291, 458, 11, 1310, 264, 9952, 337, 577, 291, 4674, 364, 36205, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.10319182848689532, "compression_ratio": 1.759656652360515, "no_caption_prob": 7.071834716043668e-06}, {"id": 293, "seek": 175200, "start": 1752.0, "end": 1757.0, "text": " For example, you could encapsulate that in the person module.", "tokens": [50364, 1171, 1365, 11, 291, 727, 38745, 5256, 300, 294, 264, 954, 10088, 13, 50614, 50614, 407, 300, 311, 1910, 9952, 13, 400, 291, 727, 764, 364, 42687, 2010, 281, 362, 257, 954, 293, 291, 458, 577, 281, 15529, 257, 954, 15245, 13, 51014, 51014, 400, 291, 393, 15529, 300, 412, 264, 2767, 295, 364, 7222, 13, 509, 393, 15529, 300, 11, 291, 458, 11, 294, 264, 5947, 2159, 337, 264, 2190, 4195, 420, 1310, 1310, 411, 364, 3793, 293, 257, 4195, 366, 732, 819, 3467, 295, 721, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.09520295391912045, "compression_ratio": 1.7383177570093458, "no_caption_prob": 8.092387724900618e-05}, {"id": 294, "seek": 175200, "start": 1757.0, "end": 1765.0, "text": " So that's view logic. And you could use an opaque type to have a person and you know how to render a person batch.", "tokens": [50364, 1171, 1365, 11, 291, 727, 38745, 5256, 300, 294, 264, 954, 10088, 13, 50614, 50614, 407, 300, 311, 1910, 9952, 13, 400, 291, 727, 764, 364, 42687, 2010, 281, 362, 257, 954, 293, 291, 458, 577, 281, 15529, 257, 954, 15245, 13, 51014, 51014, 400, 291, 393, 15529, 300, 412, 264, 2767, 295, 364, 7222, 13, 509, 393, 15529, 300, 11, 291, 458, 11, 294, 264, 5947, 2159, 337, 264, 2190, 4195, 420, 1310, 1310, 411, 364, 3793, 293, 257, 4195, 366, 732, 819, 3467, 295, 721, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.09520295391912045, "compression_ratio": 1.7383177570093458, "no_caption_prob": 8.092387724900618e-05}, {"id": 295, "seek": 175200, "start": 1765.0, "end": 1778.0, "text": " And you can render that at the bottom of an article. You can render that, you know, in the nav bar for the current user or maybe maybe like an author and a user are two different types of things.", "tokens": [50364, 1171, 1365, 11, 291, 727, 38745, 5256, 300, 294, 264, 954, 10088, 13, 50614, 50614, 407, 300, 311, 1910, 9952, 13, 400, 291, 727, 764, 364, 42687, 2010, 281, 362, 257, 954, 293, 291, 458, 577, 281, 15529, 257, 954, 15245, 13, 51014, 51014, 400, 291, 393, 15529, 300, 412, 264, 2767, 295, 364, 7222, 13, 509, 393, 15529, 300, 11, 291, 458, 11, 294, 264, 5947, 2159, 337, 264, 2190, 4195, 420, 1310, 1310, 411, 364, 3793, 293, 257, 4195, 366, 732, 819, 3467, 295, 721, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.09520295391912045, "compression_ratio": 1.7383177570093458, "no_caption_prob": 8.092387724900618e-05}, {"id": 296, "seek": 177800, "start": 1778.0, "end": 1790.0, "text": " You know, so you need to get creative with these things and you may need to, you know, you can you can expose different types of selection sets to you can expose within a person module.", "tokens": [50364, 509, 458, 11, 370, 291, 643, 281, 483, 5880, 365, 613, 721, 293, 291, 815, 643, 281, 11, 291, 458, 11, 291, 393, 291, 393, 19219, 819, 3467, 295, 9450, 6352, 281, 291, 393, 19219, 1951, 257, 954, 10088, 13, 50964, 50964, 509, 727, 19219, 264, 6949, 10491, 9450, 992, 293, 264, 9450, 992, 300, 5974, 512, 4497, 1589, 337, 264, 337, 264, 5947, 2159, 4674, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.07337773014122331, "compression_ratio": 1.8121546961325967, "no_caption_prob": 1.5445715689565986e-05}, {"id": 297, "seek": 177800, "start": 1790.0, "end": 1800.0, "text": " You could expose the bare bones selection set and the selection set that includes some additional information for the for the nav bar display.", "tokens": [50364, 509, 458, 11, 370, 291, 643, 281, 483, 5880, 365, 613, 721, 293, 291, 815, 643, 281, 11, 291, 458, 11, 291, 393, 291, 393, 19219, 819, 3467, 295, 9450, 6352, 281, 291, 393, 19219, 1951, 257, 954, 10088, 13, 50964, 50964, 509, 727, 19219, 264, 6949, 10491, 9450, 992, 293, 264, 9450, 992, 300, 5974, 512, 4497, 1589, 337, 264, 337, 264, 5947, 2159, 4674, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.07337773014122331, "compression_ratio": 1.8121546961325967, "no_caption_prob": 1.5445715689565986e-05}, {"id": 298, "seek": 180000, "start": 1800.0, "end": 1809.0, "text": " And so it's not like a one size fits all solution. This is just data modeling techniques and module design.", "tokens": [50364, 400, 370, 309, 311, 406, 411, 257, 472, 2744, 9001, 439, 3827, 13, 639, 307, 445, 1412, 15983, 7512, 293, 10088, 1715, 13, 50814, 50814, 583, 452, 935, 307, 300, 286, 519, 300, 886, 2049, 561, 519, 295, 11, 291, 458, 11, 364, 2699, 76, 21884, 13695, 9450, 992, 382, 445, 23673, 278, 1412, 293, 382, 411, 257, 1090, 1496, 4985, 13, 51364, 51364, 583, 309, 311, 534, 406, 13, 467, 311, 746, 300, 820, 312, 38745, 6987, 293, 291, 820, 1322, 428, 1065, 3467, 300, 366, 6854, 3467, 337, 428, 9274, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.05234545776524495, "compression_ratio": 1.6031746031746033, "no_caption_prob": 7.843341154512018e-05}, {"id": 299, "seek": 180000, "start": 1809.0, "end": 1820.0, "text": " But my point is that I think that too often people think of, you know, an Elm GraphQL selection set as just fetching data and as like a high level unit.", "tokens": [50364, 400, 370, 309, 311, 406, 411, 257, 472, 2744, 9001, 439, 3827, 13, 639, 307, 445, 1412, 15983, 7512, 293, 10088, 1715, 13, 50814, 50814, 583, 452, 935, 307, 300, 286, 519, 300, 886, 2049, 561, 519, 295, 11, 291, 458, 11, 364, 2699, 76, 21884, 13695, 9450, 992, 382, 445, 23673, 278, 1412, 293, 382, 411, 257, 1090, 1496, 4985, 13, 51364, 51364, 583, 309, 311, 534, 406, 13, 467, 311, 746, 300, 820, 312, 38745, 6987, 293, 291, 820, 1322, 428, 1065, 3467, 300, 366, 6854, 3467, 337, 428, 9274, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.05234545776524495, "compression_ratio": 1.6031746031746033, "no_caption_prob": 7.843341154512018e-05}, {"id": 300, "seek": 180000, "start": 1820.0, "end": 1829.0, "text": " But it's really not. It's something that should be encapsulated and you should build your own types that are appropriate types for your domain.", "tokens": [50364, 400, 370, 309, 311, 406, 411, 257, 472, 2744, 9001, 439, 3827, 13, 639, 307, 445, 1412, 15983, 7512, 293, 10088, 1715, 13, 50814, 50814, 583, 452, 935, 307, 300, 286, 519, 300, 886, 2049, 561, 519, 295, 11, 291, 458, 11, 364, 2699, 76, 21884, 13695, 9450, 992, 382, 445, 23673, 278, 1412, 293, 382, 411, 257, 1090, 1496, 4985, 13, 51364, 51364, 583, 309, 311, 534, 406, 13, 467, 311, 746, 300, 820, 312, 38745, 6987, 293, 291, 820, 1322, 428, 1065, 3467, 300, 366, 6854, 3467, 337, 428, 9274, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.05234545776524495, "compression_ratio": 1.6031746031746033, "no_caption_prob": 7.843341154512018e-05}, {"id": 301, "seek": 182900, "start": 1829.0, "end": 1836.0, "text": " You should use all the same good data modeling techniques and everything that you would use with a JSON decoder and encapsulate those details.", "tokens": [50364, 509, 820, 764, 439, 264, 912, 665, 1412, 15983, 7512, 293, 1203, 300, 291, 576, 764, 365, 257, 31828, 979, 19866, 293, 38745, 5256, 729, 4365, 13, 50714, 50714, 865, 11, 291, 500, 380, 362, 281, 1066, 264, 1412, 300, 291, 483, 490, 264, 21884, 13695, 35795, 382, 309, 307, 13, 51014, 51014, 509, 393, 4088, 309, 1228, 9450, 992, 5893, 4471, 293, 1507, 411, 300, 666, 264, 2135, 2316, 300, 291, 528, 293, 300, 291, 486, 764, 337, 10229, 293, 337, 428, 5623, 6828, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.09238417943318684, "compression_ratio": 1.640495867768595, "no_caption_prob": 3.905457106156973e-06}, {"id": 302, "seek": 182900, "start": 1836.0, "end": 1842.0, "text": " Yeah, you don't have to keep the data that you get from the GraphQL endpoint as it is.", "tokens": [50364, 509, 820, 764, 439, 264, 912, 665, 1412, 15983, 7512, 293, 1203, 300, 291, 576, 764, 365, 257, 31828, 979, 19866, 293, 38745, 5256, 729, 4365, 13, 50714, 50714, 865, 11, 291, 500, 380, 362, 281, 1066, 264, 1412, 300, 291, 483, 490, 264, 21884, 13695, 35795, 382, 309, 307, 13, 51014, 51014, 509, 393, 4088, 309, 1228, 9450, 992, 5893, 4471, 293, 1507, 411, 300, 666, 264, 2135, 2316, 300, 291, 528, 293, 300, 291, 486, 764, 337, 10229, 293, 337, 428, 5623, 6828, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.09238417943318684, "compression_ratio": 1.640495867768595, "no_caption_prob": 3.905457106156973e-06}, {"id": 303, "seek": 182900, "start": 1842.0, "end": 1852.0, "text": " You can transform it using selection set dot map and stuff like that into the main model that you want and that you will use for reviews and for your update functions.", "tokens": [50364, 509, 820, 764, 439, 264, 912, 665, 1412, 15983, 7512, 293, 1203, 300, 291, 576, 764, 365, 257, 31828, 979, 19866, 293, 38745, 5256, 729, 4365, 13, 50714, 50714, 865, 11, 291, 500, 380, 362, 281, 1066, 264, 1412, 300, 291, 483, 490, 264, 21884, 13695, 35795, 382, 309, 307, 13, 51014, 51014, 509, 393, 4088, 309, 1228, 9450, 992, 5893, 4471, 293, 1507, 411, 300, 666, 264, 2135, 2316, 300, 291, 528, 293, 300, 291, 486, 764, 337, 10229, 293, 337, 428, 5623, 6828, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.09238417943318684, "compression_ratio": 1.640495867768595, "no_caption_prob": 3.905457106156973e-06}, {"id": 304, "seek": 185200, "start": 1852.0, "end": 1859.0, "text": " Exactly. That's the beauty of, you know, of this sort of approach in Elm of like this decoder style.", "tokens": [50364, 7587, 13, 663, 311, 264, 6643, 295, 11, 291, 458, 11, 295, 341, 1333, 295, 3109, 294, 2699, 76, 295, 411, 341, 979, 19866, 3758, 13, 50714, 50714, 400, 11, 291, 458, 11, 1338, 11, 321, 2825, 466, 341, 294, 527, 411, 31828, 979, 8616, 3500, 300, 291, 393, 291, 393, 652, 2962, 412, 257, 2654, 1496, 13, 51114, 51114, 509, 393, 11, 291, 458, 11, 1951, 257, 1629, 31828, 979, 19866, 1422, 11963, 11, 291, 393, 4471, 13, 51364, 51364, 13813, 365, 15778, 11, 437, 2049, 2314, 307, 291, 445, 584, 411, 11, 439, 558, 11, 976, 385, 439, 341, 1412, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.0947465985734886, "compression_ratio": 1.6341463414634145, "no_caption_prob": 9.169032273348421e-05}, {"id": 305, "seek": 185200, "start": 1859.0, "end": 1867.0, "text": " And, you know, yeah, we talked about this in our like JSON decoding episode that you can you can make changes at a local level.", "tokens": [50364, 7587, 13, 663, 311, 264, 6643, 295, 11, 291, 458, 11, 295, 341, 1333, 295, 3109, 294, 2699, 76, 295, 411, 341, 979, 19866, 3758, 13, 50714, 50714, 400, 11, 291, 458, 11, 1338, 11, 321, 2825, 466, 341, 294, 527, 411, 31828, 979, 8616, 3500, 300, 291, 393, 291, 393, 652, 2962, 412, 257, 2654, 1496, 13, 51114, 51114, 509, 393, 11, 291, 458, 11, 1951, 257, 1629, 31828, 979, 19866, 1422, 11963, 11, 291, 393, 4471, 13, 51364, 51364, 13813, 365, 15778, 11, 437, 2049, 2314, 307, 291, 445, 584, 411, 11, 439, 558, 11, 976, 385, 439, 341, 1412, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.0947465985734886, "compression_ratio": 1.6341463414634145, "no_caption_prob": 9.169032273348421e-05}, {"id": 306, "seek": 185200, "start": 1867.0, "end": 1872.0, "text": " You can, you know, within a certain JSON decoder subsection, you can map.", "tokens": [50364, 7587, 13, 663, 311, 264, 6643, 295, 11, 291, 458, 11, 295, 341, 1333, 295, 3109, 294, 2699, 76, 295, 411, 341, 979, 19866, 3758, 13, 50714, 50714, 400, 11, 291, 458, 11, 1338, 11, 321, 2825, 466, 341, 294, 527, 411, 31828, 979, 8616, 3500, 300, 291, 393, 291, 393, 652, 2962, 412, 257, 2654, 1496, 13, 51114, 51114, 509, 393, 11, 291, 458, 11, 1951, 257, 1629, 31828, 979, 19866, 1422, 11963, 11, 291, 393, 4471, 13, 51364, 51364, 13813, 365, 15778, 11, 437, 2049, 2314, 307, 291, 445, 584, 411, 11, 439, 558, 11, 976, 385, 439, 341, 1412, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.0947465985734886, "compression_ratio": 1.6341463414634145, "no_caption_prob": 9.169032273348421e-05}, {"id": 307, "seek": 185200, "start": 1872.0, "end": 1878.0, "text": " Whereas with JavaScript, what often happens is you just say like, all right, give me all this data.", "tokens": [50364, 7587, 13, 663, 311, 264, 6643, 295, 11, 291, 458, 11, 295, 341, 1333, 295, 3109, 294, 2699, 76, 295, 411, 341, 979, 19866, 3758, 13, 50714, 50714, 400, 11, 291, 458, 11, 1338, 11, 321, 2825, 466, 341, 294, 527, 411, 31828, 979, 8616, 3500, 300, 291, 393, 291, 393, 652, 2962, 412, 257, 2654, 1496, 13, 51114, 51114, 509, 393, 11, 291, 458, 11, 1951, 257, 1629, 31828, 979, 19866, 1422, 11963, 11, 291, 393, 4471, 13, 51364, 51364, 13813, 365, 15778, 11, 437, 2049, 2314, 307, 291, 445, 584, 411, 11, 439, 558, 11, 976, 385, 439, 341, 1412, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.0947465985734886, "compression_ratio": 1.6341463414634145, "no_caption_prob": 9.169032273348421e-05}, {"id": 308, "seek": 187800, "start": 1878.0, "end": 1882.0, "text": " And then you get back a giant, deeply nested JSON object.", "tokens": [50364, 400, 550, 291, 483, 646, 257, 7410, 11, 8760, 15646, 292, 31828, 2657, 13, 50564, 50564, 400, 550, 291, 1320, 300, 666, 512, 2445, 300, 4088, 300, 775, 257, 3840, 295, 34852, 322, 300, 1379, 2657, 293, 3643, 534, 14853, 1789, 88, 13, 50864, 50864, 467, 311, 370, 709, 3571, 562, 291, 393, 445, 360, 257, 18356, 7930, 294, 300, 472, 4008, 300, 291, 528, 281, 1319, 365, 257, 4471, 13, 51214, 51214, 400, 300, 1985, 264, 1900, 912, 636, 294, 2699, 76, 21884, 13695, 9450, 6352, 382, 309, 775, 294, 257, 31828, 979, 19866, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.05307650089263916, "compression_ratio": 1.6491935483870968, "no_caption_prob": 6.108566594775766e-05}, {"id": 309, "seek": 187800, "start": 1882.0, "end": 1888.0, "text": " And then you pass that into some function that transform that does a bunch of transformations on that whole object and becomes really unwieldy.", "tokens": [50364, 400, 550, 291, 483, 646, 257, 7410, 11, 8760, 15646, 292, 31828, 2657, 13, 50564, 50564, 400, 550, 291, 1320, 300, 666, 512, 2445, 300, 4088, 300, 775, 257, 3840, 295, 34852, 322, 300, 1379, 2657, 293, 3643, 534, 14853, 1789, 88, 13, 50864, 50864, 467, 311, 370, 709, 3571, 562, 291, 393, 445, 360, 257, 18356, 7930, 294, 300, 472, 4008, 300, 291, 528, 281, 1319, 365, 257, 4471, 13, 51214, 51214, 400, 300, 1985, 264, 1900, 912, 636, 294, 2699, 76, 21884, 13695, 9450, 6352, 382, 309, 775, 294, 257, 31828, 979, 19866, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.05307650089263916, "compression_ratio": 1.6491935483870968, "no_caption_prob": 6.108566594775766e-05}, {"id": 310, "seek": 187800, "start": 1888.0, "end": 1895.0, "text": " It's so much easier when you can just do a precision surgery in that one spot that you want to change with a map.", "tokens": [50364, 400, 550, 291, 483, 646, 257, 7410, 11, 8760, 15646, 292, 31828, 2657, 13, 50564, 50564, 400, 550, 291, 1320, 300, 666, 512, 2445, 300, 4088, 300, 775, 257, 3840, 295, 34852, 322, 300, 1379, 2657, 293, 3643, 534, 14853, 1789, 88, 13, 50864, 50864, 467, 311, 370, 709, 3571, 562, 291, 393, 445, 360, 257, 18356, 7930, 294, 300, 472, 4008, 300, 291, 528, 281, 1319, 365, 257, 4471, 13, 51214, 51214, 400, 300, 1985, 264, 1900, 912, 636, 294, 2699, 76, 21884, 13695, 9450, 6352, 382, 309, 775, 294, 257, 31828, 979, 19866, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.05307650089263916, "compression_ratio": 1.6491935483870968, "no_caption_prob": 6.108566594775766e-05}, {"id": 311, "seek": 187800, "start": 1895.0, "end": 1900.0, "text": " And that works the exact same way in Elm GraphQL selection sets as it does in a JSON decoder.", "tokens": [50364, 400, 550, 291, 483, 646, 257, 7410, 11, 8760, 15646, 292, 31828, 2657, 13, 50564, 50564, 400, 550, 291, 1320, 300, 666, 512, 2445, 300, 4088, 300, 775, 257, 3840, 295, 34852, 322, 300, 1379, 2657, 293, 3643, 534, 14853, 1789, 88, 13, 50864, 50864, 467, 311, 370, 709, 3571, 562, 291, 393, 445, 360, 257, 18356, 7930, 294, 300, 472, 4008, 300, 291, 528, 281, 1319, 365, 257, 4471, 13, 51214, 51214, 400, 300, 1985, 264, 1900, 912, 636, 294, 2699, 76, 21884, 13695, 9450, 6352, 382, 309, 775, 294, 257, 31828, 979, 19866, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.05307650089263916, "compression_ratio": 1.6491935483870968, "no_caption_prob": 6.108566594775766e-05}, {"id": 312, "seek": 190000, "start": 1900.0, "end": 1910.0, "text": " You just call map and you can you can turn a string into all uppercase or you can turn an int into its string version or, you know, whatever.", "tokens": [50364, 509, 445, 818, 4471, 293, 291, 393, 291, 393, 1261, 257, 6798, 666, 439, 11775, 2869, 651, 420, 291, 393, 1261, 364, 560, 666, 1080, 6798, 3037, 420, 11, 291, 458, 11, 2035, 13, 50864, 50864, 509, 393, 1261, 512, 512, 2699, 76, 1412, 2010, 666, 1071, 1412, 2010, 420, 512, 6713, 2010, 666, 1071, 6713, 2010, 420, 2035, 11, 2035, 9952, 291, 362, 13, 51264, 51264, 1144, 291, 362, 661, 6082, 294, 428, 1575, 30, 10328, 11, 286, 393, 1029, 512, 1152, 281, 1867, 1651, 13, 51564, 51564, 11817, 281, 1867, 1651, 366, 665, 13, 5358, 6082, 30, 286, 360, 362, 512, 661, 6082, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.08144787008112127, "compression_ratio": 1.9955156950672646, "no_caption_prob": 2.9311038815649226e-05}, {"id": 313, "seek": 190000, "start": 1910.0, "end": 1918.0, "text": " You can turn some some Elm data type into another data type or some error type into another error type or whatever, whatever logic you have.", "tokens": [50364, 509, 445, 818, 4471, 293, 291, 393, 291, 393, 1261, 257, 6798, 666, 439, 11775, 2869, 651, 420, 291, 393, 1261, 364, 560, 666, 1080, 6798, 3037, 420, 11, 291, 458, 11, 2035, 13, 50864, 50864, 509, 393, 1261, 512, 512, 2699, 76, 1412, 2010, 666, 1071, 1412, 2010, 420, 512, 6713, 2010, 666, 1071, 6713, 2010, 420, 2035, 11, 2035, 9952, 291, 362, 13, 51264, 51264, 1144, 291, 362, 661, 6082, 294, 428, 1575, 30, 10328, 11, 286, 393, 1029, 512, 1152, 281, 1867, 1651, 13, 51564, 51564, 11817, 281, 1867, 1651, 366, 665, 13, 5358, 6082, 30, 286, 360, 362, 512, 661, 6082, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.08144787008112127, "compression_ratio": 1.9955156950672646, "no_caption_prob": 2.9311038815649226e-05}, {"id": 314, "seek": 190000, "start": 1918.0, "end": 1924.0, "text": " Do you have other tips in your mind? Otherwise, I can ask some hard to answer questions.", "tokens": [50364, 509, 445, 818, 4471, 293, 291, 393, 291, 393, 1261, 257, 6798, 666, 439, 11775, 2869, 651, 420, 291, 393, 1261, 364, 560, 666, 1080, 6798, 3037, 420, 11, 291, 458, 11, 2035, 13, 50864, 50864, 509, 393, 1261, 512, 512, 2699, 76, 1412, 2010, 666, 1071, 1412, 2010, 420, 512, 6713, 2010, 666, 1071, 6713, 2010, 420, 2035, 11, 2035, 9952, 291, 362, 13, 51264, 51264, 1144, 291, 362, 661, 6082, 294, 428, 1575, 30, 10328, 11, 286, 393, 1029, 512, 1152, 281, 1867, 1651, 13, 51564, 51564, 11817, 281, 1867, 1651, 366, 665, 13, 5358, 6082, 30, 286, 360, 362, 512, 661, 6082, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.08144787008112127, "compression_ratio": 1.9955156950672646, "no_caption_prob": 2.9311038815649226e-05}, {"id": 315, "seek": 190000, "start": 1924.0, "end": 1929.0, "text": " Hard to answer questions are good. Other tips? I do have some other tips.", "tokens": [50364, 509, 445, 818, 4471, 293, 291, 393, 291, 393, 1261, 257, 6798, 666, 439, 11775, 2869, 651, 420, 291, 393, 1261, 364, 560, 666, 1080, 6798, 3037, 420, 11, 291, 458, 11, 2035, 13, 50864, 50864, 509, 393, 1261, 512, 512, 2699, 76, 1412, 2010, 666, 1071, 1412, 2010, 420, 512, 6713, 2010, 666, 1071, 6713, 2010, 420, 2035, 11, 2035, 9952, 291, 362, 13, 51264, 51264, 1144, 291, 362, 661, 6082, 294, 428, 1575, 30, 10328, 11, 286, 393, 1029, 512, 1152, 281, 1867, 1651, 13, 51564, 51564, 11817, 281, 1867, 1651, 366, 665, 13, 5358, 6082, 30, 286, 360, 362, 512, 661, 6082, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.08144787008112127, "compression_ratio": 1.9955156950672646, "no_caption_prob": 2.9311038815649226e-05}, {"id": 316, "seek": 192900, "start": 1929.0, "end": 1938.0, "text": " Let's go through them then. OK, cool. So, well, so I mentioned opaque types and just general module design and encapsulation.", "tokens": [50364, 961, 311, 352, 807, 552, 550, 13, 2264, 11, 1627, 13, 407, 11, 731, 11, 370, 286, 2835, 42687, 3467, 293, 445, 2674, 10088, 1715, 293, 38745, 2776, 13, 50814, 50814, 509, 458, 11, 286, 519, 300, 311, 746, 286, 534, 576, 959, 281, 483, 484, 456, 382, 257, 544, 2689, 3124, 13, 51114, 51114, 6595, 300, 15494, 534, 9594, 365, 300, 307, 1228, 341, 2375, 39684, 3089, 14368, 4111, 294, 2699, 76, 21884, 13695, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.09054971933364868, "compression_ratio": 1.490909090909091, "no_caption_prob": 6.401541759259999e-05}, {"id": 317, "seek": 192900, "start": 1938.0, "end": 1944.0, "text": " You know, I think that's something I really would love to get out there as a more common practice.", "tokens": [50364, 961, 311, 352, 807, 552, 550, 13, 2264, 11, 1627, 13, 407, 11, 731, 11, 370, 286, 2835, 42687, 3467, 293, 445, 2674, 10088, 1715, 293, 38745, 2776, 13, 50814, 50814, 509, 458, 11, 286, 519, 300, 311, 746, 286, 534, 576, 959, 281, 483, 484, 456, 382, 257, 544, 2689, 3124, 13, 51114, 51114, 6595, 300, 15494, 534, 9594, 365, 300, 307, 1228, 341, 2375, 39684, 3089, 14368, 4111, 294, 2699, 76, 21884, 13695, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.09054971933364868, "compression_ratio": 1.490909090909091, "no_caption_prob": 6.401541759259999e-05}, {"id": 318, "seek": 192900, "start": 1944.0, "end": 1951.0, "text": " Something that pairs really nicely with that is using this custom scalar codecs feature in Elm GraphQL.", "tokens": [50364, 961, 311, 352, 807, 552, 550, 13, 2264, 11, 1627, 13, 407, 11, 731, 11, 370, 286, 2835, 42687, 3467, 293, 445, 2674, 10088, 1715, 293, 38745, 2776, 13, 50814, 50814, 509, 458, 11, 286, 519, 300, 311, 746, 286, 534, 576, 959, 281, 483, 484, 456, 382, 257, 544, 2689, 3124, 13, 51114, 51114, 6595, 300, 15494, 534, 9594, 365, 300, 307, 1228, 341, 2375, 39684, 3089, 14368, 4111, 294, 2699, 76, 21884, 13695, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.09054971933364868, "compression_ratio": 1.490909090909091, "no_caption_prob": 6.401541759259999e-05}, {"id": 319, "seek": 195100, "start": 1951.0, "end": 1960.0, "text": " I'm this is like probably my favorite feature of Elm GraphQL and I feel like it's not used as much as it could be.", "tokens": [50364, 286, 478, 341, 307, 411, 1391, 452, 2954, 4111, 295, 2699, 76, 21884, 13695, 293, 286, 841, 411, 309, 311, 406, 1143, 382, 709, 382, 309, 727, 312, 13, 50814, 50814, 2014, 2375, 39684, 3089, 14368, 2685, 281, 2699, 76, 21884, 13695, 420, 281, 21884, 13695, 30, 51114, 51114, 1436, 286, 600, 1612, 552, 11, 457, 286, 500, 380, 458, 1968, 436, 434, 7993, 490, 13, 51364, 51364, 2205, 1168, 13, 16649, 15664, 685, 366, 257, 21884, 13695, 3410, 13, 16649, 39684, 3089, 14368, 366, 364, 2699, 76, 21884, 13695, 3410, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.09901353716850281, "compression_ratio": 1.6238532110091743, "no_caption_prob": 8.614215039415285e-05}, {"id": 320, "seek": 195100, "start": 1960.0, "end": 1966.0, "text": " Are custom scalar codecs specific to Elm GraphQL or to GraphQL?", "tokens": [50364, 286, 478, 341, 307, 411, 1391, 452, 2954, 4111, 295, 2699, 76, 21884, 13695, 293, 286, 841, 411, 309, 311, 406, 1143, 382, 709, 382, 309, 727, 312, 13, 50814, 50814, 2014, 2375, 39684, 3089, 14368, 2685, 281, 2699, 76, 21884, 13695, 420, 281, 21884, 13695, 30, 51114, 51114, 1436, 286, 600, 1612, 552, 11, 457, 286, 500, 380, 458, 1968, 436, 434, 7993, 490, 13, 51364, 51364, 2205, 1168, 13, 16649, 15664, 685, 366, 257, 21884, 13695, 3410, 13, 16649, 39684, 3089, 14368, 366, 364, 2699, 76, 21884, 13695, 3410, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.09901353716850281, "compression_ratio": 1.6238532110091743, "no_caption_prob": 8.614215039415285e-05}, {"id": 321, "seek": 195100, "start": 1966.0, "end": 1971.0, "text": " Because I've seen them, but I don't know whether they're originally from.", "tokens": [50364, 286, 478, 341, 307, 411, 1391, 452, 2954, 4111, 295, 2699, 76, 21884, 13695, 293, 286, 841, 411, 309, 311, 406, 1143, 382, 709, 382, 309, 727, 312, 13, 50814, 50814, 2014, 2375, 39684, 3089, 14368, 2685, 281, 2699, 76, 21884, 13695, 420, 281, 21884, 13695, 30, 51114, 51114, 1436, 286, 600, 1612, 552, 11, 457, 286, 500, 380, 458, 1968, 436, 434, 7993, 490, 13, 51364, 51364, 2205, 1168, 13, 16649, 15664, 685, 366, 257, 21884, 13695, 3410, 13, 16649, 39684, 3089, 14368, 366, 364, 2699, 76, 21884, 13695, 3410, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.09901353716850281, "compression_ratio": 1.6238532110091743, "no_caption_prob": 8.614215039415285e-05}, {"id": 322, "seek": 195100, "start": 1971.0, "end": 1979.0, "text": " Good question. Custom scalars are a GraphQL concept. Custom scalar codecs are an Elm GraphQL concept.", "tokens": [50364, 286, 478, 341, 307, 411, 1391, 452, 2954, 4111, 295, 2699, 76, 21884, 13695, 293, 286, 841, 411, 309, 311, 406, 1143, 382, 709, 382, 309, 727, 312, 13, 50814, 50814, 2014, 2375, 39684, 3089, 14368, 2685, 281, 2699, 76, 21884, 13695, 420, 281, 21884, 13695, 30, 51114, 51114, 1436, 286, 600, 1612, 552, 11, 457, 286, 500, 380, 458, 1968, 436, 434, 7993, 490, 13, 51364, 51364, 2205, 1168, 13, 16649, 15664, 685, 366, 257, 21884, 13695, 3410, 13, 16649, 39684, 3089, 14368, 366, 364, 2699, 76, 21884, 13695, 3410, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.09901353716850281, "compression_ratio": 1.6238532110091743, "no_caption_prob": 8.614215039415285e-05}, {"id": 323, "seek": 197900, "start": 1979.0, "end": 1985.0, "text": " The GraphQL concept of a custom scalar is you have these built in scalars.", "tokens": [50364, 440, 21884, 13695, 3410, 295, 257, 2375, 39684, 307, 291, 362, 613, 3094, 294, 15664, 685, 13, 50664, 50664, 509, 362, 13985, 293, 560, 82, 293, 456, 311, 364, 7348, 3094, 294, 2375, 2010, 13, 50914, 50914, 407, 257, 39684, 307, 1238, 709, 257, 28540, 420, 257, 2657, 11, 457, 257, 28540, 2657, 411, 30, 51314, 51314, 865, 11, 2086, 13, 316, 2570, 15489, 2657, 13, 1779, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.15236356523301867, "compression_ratio": 1.5085714285714287, "no_caption_prob": 3.591220956877805e-05}, {"id": 324, "seek": 197900, "start": 1985.0, "end": 1990.0, "text": " You have strings and ints and there's an ID built in custom type.", "tokens": [50364, 440, 21884, 13695, 3410, 295, 257, 2375, 39684, 307, 291, 362, 613, 3094, 294, 15664, 685, 13, 50664, 50664, 509, 362, 13985, 293, 560, 82, 293, 456, 311, 364, 7348, 3094, 294, 2375, 2010, 13, 50914, 50914, 407, 257, 39684, 307, 1238, 709, 257, 28540, 420, 257, 2657, 11, 457, 257, 28540, 2657, 411, 30, 51314, 51314, 865, 11, 2086, 13, 316, 2570, 15489, 2657, 13, 1779, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.15236356523301867, "compression_ratio": 1.5085714285714287, "no_caption_prob": 3.591220956877805e-05}, {"id": 325, "seek": 197900, "start": 1990.0, "end": 1998.0, "text": " So a scalar is pretty much a primitive or a object, but a primitive object like?", "tokens": [50364, 440, 21884, 13695, 3410, 295, 257, 2375, 39684, 307, 291, 362, 613, 3094, 294, 15664, 685, 13, 50664, 50664, 509, 362, 13985, 293, 560, 82, 293, 456, 311, 364, 7348, 3094, 294, 2375, 2010, 13, 50914, 50914, 407, 257, 39684, 307, 1238, 709, 257, 28540, 420, 257, 2657, 11, 457, 257, 28540, 2657, 411, 30, 51314, 51314, 865, 11, 2086, 13, 316, 2570, 15489, 2657, 13, 1779, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.15236356523301867, "compression_ratio": 1.5085714285714287, "no_caption_prob": 3.591220956877805e-05}, {"id": 326, "seek": 197900, "start": 1998.0, "end": 2004.0, "text": " Yeah, yes. A known declared object. Right.", "tokens": [50364, 440, 21884, 13695, 3410, 295, 257, 2375, 39684, 307, 291, 362, 613, 3094, 294, 15664, 685, 13, 50664, 50664, 509, 362, 13985, 293, 560, 82, 293, 456, 311, 364, 7348, 3094, 294, 2375, 2010, 13, 50914, 50914, 407, 257, 39684, 307, 1238, 709, 257, 28540, 420, 257, 2657, 11, 457, 257, 28540, 2657, 411, 30, 51314, 51314, 865, 11, 2086, 13, 316, 2570, 15489, 2657, 13, 1779, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.15236356523301867, "compression_ratio": 1.5085714285714287, "no_caption_prob": 3.591220956877805e-05}, {"id": 327, "seek": 200400, "start": 2004.0, "end": 2009.0, "text": " So here's how I think of it. I think of a custom scalar as a contract.", "tokens": [50364, 407, 510, 311, 577, 286, 519, 295, 309, 13, 286, 519, 295, 257, 2375, 39684, 382, 257, 4364, 13, 50614, 50614, 1692, 311, 983, 300, 311, 534, 1627, 11, 570, 309, 311, 257, 4364, 300, 291, 393, 10815, 322, 264, 7154, 1252, 13, 50914, 50914, 400, 309, 311, 257, 4364, 300, 291, 393, 13982, 300, 10815, 322, 264, 6423, 1252, 13, 51214, 51214, 407, 411, 11, 437, 775, 300, 914, 30, 1042, 11, 498, 291, 362, 364, 25042, 1649, 4550, 16, 11, 428, 2954, 1230, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.082729705174764, "compression_ratio": 1.6734693877551021, "no_caption_prob": 0.0002002363180508837}, {"id": 328, "seek": 200400, "start": 2009.0, "end": 2015.0, "text": " Here's why that's really cool, because it's a contract that you can guarantee on the server side.", "tokens": [50364, 407, 510, 311, 577, 286, 519, 295, 309, 13, 286, 519, 295, 257, 2375, 39684, 382, 257, 4364, 13, 50614, 50614, 1692, 311, 983, 300, 311, 534, 1627, 11, 570, 309, 311, 257, 4364, 300, 291, 393, 10815, 322, 264, 7154, 1252, 13, 50914, 50914, 400, 309, 311, 257, 4364, 300, 291, 393, 13982, 300, 10815, 322, 264, 6423, 1252, 13, 51214, 51214, 407, 411, 11, 437, 775, 300, 914, 30, 1042, 11, 498, 291, 362, 364, 25042, 1649, 4550, 16, 11, 428, 2954, 1230, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.082729705174764, "compression_ratio": 1.6734693877551021, "no_caption_prob": 0.0002002363180508837}, {"id": 329, "seek": 200400, "start": 2015.0, "end": 2021.0, "text": " And it's a contract that you can leverage that guarantee on the client side.", "tokens": [50364, 407, 510, 311, 577, 286, 519, 295, 309, 13, 286, 519, 295, 257, 2375, 39684, 382, 257, 4364, 13, 50614, 50614, 1692, 311, 983, 300, 311, 534, 1627, 11, 570, 309, 311, 257, 4364, 300, 291, 393, 10815, 322, 264, 7154, 1252, 13, 50914, 50914, 400, 309, 311, 257, 4364, 300, 291, 393, 13982, 300, 10815, 322, 264, 6423, 1252, 13, 51214, 51214, 407, 411, 11, 437, 775, 300, 914, 30, 1042, 11, 498, 291, 362, 364, 25042, 1649, 4550, 16, 11, 428, 2954, 1230, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.082729705174764, "compression_ratio": 1.6734693877551021, "no_caption_prob": 0.0002002363180508837}, {"id": 330, "seek": 200400, "start": 2021.0, "end": 2029.0, "text": " So like, what does that mean? Well, if you have an ISO 8601, your favorite number.", "tokens": [50364, 407, 510, 311, 577, 286, 519, 295, 309, 13, 286, 519, 295, 257, 2375, 39684, 382, 257, 4364, 13, 50614, 50614, 1692, 311, 983, 300, 311, 534, 1627, 11, 570, 309, 311, 257, 4364, 300, 291, 393, 10815, 322, 264, 7154, 1252, 13, 50914, 50914, 400, 309, 311, 257, 4364, 300, 291, 393, 13982, 300, 10815, 322, 264, 6423, 1252, 13, 51214, 51214, 407, 411, 11, 437, 775, 300, 914, 30, 1042, 11, 498, 291, 362, 364, 25042, 1649, 4550, 16, 11, 428, 2954, 1230, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.082729705174764, "compression_ratio": 1.6734693877551021, "no_caption_prob": 0.0002002363180508837}, {"id": 331, "seek": 202900, "start": 2029.0, "end": 2034.0, "text": " ISO 8601. Years of practice.", "tokens": [50364, 25042, 1649, 4550, 16, 13, 24569, 295, 3124, 13, 50614, 50614, 286, 6634, 493, 293, 574, 412, 2059, 294, 264, 8013, 633, 2446, 293, 584, 25042, 1649, 4550, 16, 13, 286, 2748, 309, 13, 50914, 50914, 759, 291, 1562, 2082, 300, 472, 493, 11, 286, 486, 5801, 412, 291, 370, 709, 13, 51164, 51164, 583, 1338, 11, 300, 311, 257, 2176, 1365, 570, 309, 311, 257, 4364, 13, 467, 307, 257, 31256, 11, 558, 30, 51464, 51464, 467, 307, 257, 28540, 11, 457, 309, 575, 512, 1254, 420, 512, 13952, 300, 309, 9898, 281, 34451, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.11836505889892578, "compression_ratio": 1.5260869565217392, "no_caption_prob": 0.0002492128114681691}, {"id": 332, "seek": 202900, "start": 2034.0, "end": 2040.0, "text": " I wake up and look at myself in the mirror every morning and say ISO 8601. I recommend it.", "tokens": [50364, 25042, 1649, 4550, 16, 13, 24569, 295, 3124, 13, 50614, 50614, 286, 6634, 493, 293, 574, 412, 2059, 294, 264, 8013, 633, 2446, 293, 584, 25042, 1649, 4550, 16, 13, 286, 2748, 309, 13, 50914, 50914, 759, 291, 1562, 2082, 300, 472, 493, 11, 286, 486, 5801, 412, 291, 370, 709, 13, 51164, 51164, 583, 1338, 11, 300, 311, 257, 2176, 1365, 570, 309, 311, 257, 4364, 13, 467, 307, 257, 31256, 11, 558, 30, 51464, 51464, 467, 307, 257, 28540, 11, 457, 309, 575, 512, 1254, 420, 512, 13952, 300, 309, 9898, 281, 34451, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.11836505889892578, "compression_ratio": 1.5260869565217392, "no_caption_prob": 0.0002492128114681691}, {"id": 333, "seek": 202900, "start": 2040.0, "end": 2045.0, "text": " If you ever mess that one up, I will laugh at you so much.", "tokens": [50364, 25042, 1649, 4550, 16, 13, 24569, 295, 3124, 13, 50614, 50614, 286, 6634, 493, 293, 574, 412, 2059, 294, 264, 8013, 633, 2446, 293, 584, 25042, 1649, 4550, 16, 13, 286, 2748, 309, 13, 50914, 50914, 759, 291, 1562, 2082, 300, 472, 493, 11, 286, 486, 5801, 412, 291, 370, 709, 13, 51164, 51164, 583, 1338, 11, 300, 311, 257, 2176, 1365, 570, 309, 311, 257, 4364, 13, 467, 307, 257, 31256, 11, 558, 30, 51464, 51464, 467, 307, 257, 28540, 11, 457, 309, 575, 512, 1254, 420, 512, 13952, 300, 309, 9898, 281, 34451, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.11836505889892578, "compression_ratio": 1.5260869565217392, "no_caption_prob": 0.0002492128114681691}, {"id": 334, "seek": 202900, "start": 2045.0, "end": 2051.0, "text": " But yeah, that's a perfect example because it's a contract. It is a specification, right?", "tokens": [50364, 25042, 1649, 4550, 16, 13, 24569, 295, 3124, 13, 50614, 50614, 286, 6634, 493, 293, 574, 412, 2059, 294, 264, 8013, 633, 2446, 293, 584, 25042, 1649, 4550, 16, 13, 286, 2748, 309, 13, 50914, 50914, 759, 291, 1562, 2082, 300, 472, 493, 11, 286, 486, 5801, 412, 291, 370, 709, 13, 51164, 51164, 583, 1338, 11, 300, 311, 257, 2176, 1365, 570, 309, 311, 257, 4364, 13, 467, 307, 257, 31256, 11, 558, 30, 51464, 51464, 467, 307, 257, 28540, 11, 457, 309, 575, 512, 1254, 420, 512, 13952, 300, 309, 9898, 281, 34451, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.11836505889892578, "compression_ratio": 1.5260869565217392, "no_caption_prob": 0.0002492128114681691}, {"id": 335, "seek": 202900, "start": 2051.0, "end": 2058.0, "text": " It is a primitive, but it has some form or some contracts that it tries to uphold.", "tokens": [50364, 25042, 1649, 4550, 16, 13, 24569, 295, 3124, 13, 50614, 50614, 286, 6634, 493, 293, 574, 412, 2059, 294, 264, 8013, 633, 2446, 293, 584, 25042, 1649, 4550, 16, 13, 286, 2748, 309, 13, 50914, 50914, 759, 291, 1562, 2082, 300, 472, 493, 11, 286, 486, 5801, 412, 291, 370, 709, 13, 51164, 51164, 583, 1338, 11, 300, 311, 257, 2176, 1365, 570, 309, 311, 257, 4364, 13, 467, 307, 257, 31256, 11, 558, 30, 51464, 51464, 467, 307, 257, 28540, 11, 457, 309, 575, 512, 1254, 420, 512, 13952, 300, 309, 9898, 281, 34451, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.11836505889892578, "compression_ratio": 1.5260869565217392, "no_caption_prob": 0.0002492128114681691}, {"id": 336, "seek": 205800, "start": 2058.0, "end": 2067.0, "text": " Exactly. Exactly. So that's right. There is an implicit contract in that concept of an ISO 8601 custom scalar type.", "tokens": [50364, 7587, 13, 7587, 13, 407, 300, 311, 558, 13, 821, 307, 364, 26947, 4364, 294, 300, 3410, 295, 364, 25042, 1649, 4550, 16, 2375, 39684, 2010, 13, 50814, 50814, 400, 370, 11, 731, 11, 577, 360, 291, 3361, 300, 4364, 30, 50964, 50964, 1042, 11, 291, 3361, 309, 570, 322, 264, 7154, 1252, 11, 604, 565, 291, 434, 12678, 257, 2158, 295, 2010, 25042, 1649, 4550, 16, 11, 51364, 51364, 291, 6964, 264, 9952, 337, 23673, 278, 729, 3467, 295, 4190, 293, 291, 747, 1127, 295, 264, 17436, 2144, 294, 300, 7877, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.061474013574344594, "compression_ratio": 1.5854700854700854, "no_caption_prob": 2.3923057597130537e-05}, {"id": 337, "seek": 205800, "start": 2067.0, "end": 2070.0, "text": " And so, well, how do you trust that contract?", "tokens": [50364, 7587, 13, 7587, 13, 407, 300, 311, 558, 13, 821, 307, 364, 26947, 4364, 294, 300, 3410, 295, 364, 25042, 1649, 4550, 16, 2375, 39684, 2010, 13, 50814, 50814, 400, 370, 11, 731, 11, 577, 360, 291, 3361, 300, 4364, 30, 50964, 50964, 1042, 11, 291, 3361, 309, 570, 322, 264, 7154, 1252, 11, 604, 565, 291, 434, 12678, 257, 2158, 295, 2010, 25042, 1649, 4550, 16, 11, 51364, 51364, 291, 6964, 264, 9952, 337, 23673, 278, 729, 3467, 295, 4190, 293, 291, 747, 1127, 295, 264, 17436, 2144, 294, 300, 7877, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.061474013574344594, "compression_ratio": 1.5854700854700854, "no_caption_prob": 2.3923057597130537e-05}, {"id": 338, "seek": 205800, "start": 2070.0, "end": 2078.0, "text": " Well, you trust it because on the server side, any time you're returning a value of type ISO 8601,", "tokens": [50364, 7587, 13, 7587, 13, 407, 300, 311, 558, 13, 821, 307, 364, 26947, 4364, 294, 300, 3410, 295, 364, 25042, 1649, 4550, 16, 2375, 39684, 2010, 13, 50814, 50814, 400, 370, 11, 731, 11, 577, 360, 291, 3361, 300, 4364, 30, 50964, 50964, 1042, 11, 291, 3361, 309, 570, 322, 264, 7154, 1252, 11, 604, 565, 291, 434, 12678, 257, 2158, 295, 2010, 25042, 1649, 4550, 16, 11, 51364, 51364, 291, 6964, 264, 9952, 337, 23673, 278, 729, 3467, 295, 4190, 293, 291, 747, 1127, 295, 264, 17436, 2144, 294, 300, 7877, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.061474013574344594, "compression_ratio": 1.5854700854700854, "no_caption_prob": 2.3923057597130537e-05}, {"id": 339, "seek": 205800, "start": 2078.0, "end": 2086.0, "text": " you define the logic for fetching those types of values and you take care of the serialization in that format.", "tokens": [50364, 7587, 13, 7587, 13, 407, 300, 311, 558, 13, 821, 307, 364, 26947, 4364, 294, 300, 3410, 295, 364, 25042, 1649, 4550, 16, 2375, 39684, 2010, 13, 50814, 50814, 400, 370, 11, 731, 11, 577, 360, 291, 3361, 300, 4364, 30, 50964, 50964, 1042, 11, 291, 3361, 309, 570, 322, 264, 7154, 1252, 11, 604, 565, 291, 434, 12678, 257, 2158, 295, 2010, 25042, 1649, 4550, 16, 11, 51364, 51364, 291, 6964, 264, 9952, 337, 23673, 278, 729, 3467, 295, 4190, 293, 291, 747, 1127, 295, 264, 17436, 2144, 294, 300, 7877, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.061474013574344594, "compression_ratio": 1.5854700854700854, "no_caption_prob": 2.3923057597130537e-05}, {"id": 340, "seek": 208600, "start": 2086.0, "end": 2092.0, "text": " And so you can then deserialize it with that assumption. And so it's a contract that you're making.", "tokens": [50364, 400, 370, 291, 393, 550, 730, 260, 831, 1125, 309, 365, 300, 15302, 13, 400, 370, 309, 311, 257, 4364, 300, 291, 434, 1455, 13, 50664, 50664, 823, 11, 341, 5607, 493, 364, 1880, 644, 295, 1364, 365, 2699, 76, 21884, 13695, 11, 597, 307, 300, 437, 32567, 775, 2699, 76, 21884, 13695, 652, 30, 51014, 51014, 4402, 2699, 76, 21884, 13695, 10815, 300, 428, 9450, 992, 486, 1128, 362, 257, 979, 19866, 6713, 30, 51364, 51364, 400, 264, 1867, 307, 572, 13, 467, 4476, 32567, 300, 291, 486, 406, 362, 257, 979, 19866, 6713, 833, 2685, 4487, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.05143566039002057, "compression_ratio": 1.7314049586776858, "no_caption_prob": 9.460741421207786e-05}, {"id": 341, "seek": 208600, "start": 2092.0, "end": 2099.0, "text": " Now, this brings up an interesting part of working with Elm GraphQL, which is that what guarantees does Elm GraphQL make?", "tokens": [50364, 400, 370, 291, 393, 550, 730, 260, 831, 1125, 309, 365, 300, 15302, 13, 400, 370, 309, 311, 257, 4364, 300, 291, 434, 1455, 13, 50664, 50664, 823, 11, 341, 5607, 493, 364, 1880, 644, 295, 1364, 365, 2699, 76, 21884, 13695, 11, 597, 307, 300, 437, 32567, 775, 2699, 76, 21884, 13695, 652, 30, 51014, 51014, 4402, 2699, 76, 21884, 13695, 10815, 300, 428, 9450, 992, 486, 1128, 362, 257, 979, 19866, 6713, 30, 51364, 51364, 400, 264, 1867, 307, 572, 13, 467, 4476, 32567, 300, 291, 486, 406, 362, 257, 979, 19866, 6713, 833, 2685, 4487, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.05143566039002057, "compression_ratio": 1.7314049586776858, "no_caption_prob": 9.460741421207786e-05}, {"id": 342, "seek": 208600, "start": 2099.0, "end": 2106.0, "text": " Does Elm GraphQL guarantee that your selection set will never have a decoder error?", "tokens": [50364, 400, 370, 291, 393, 550, 730, 260, 831, 1125, 309, 365, 300, 15302, 13, 400, 370, 309, 311, 257, 4364, 300, 291, 434, 1455, 13, 50664, 50664, 823, 11, 341, 5607, 493, 364, 1880, 644, 295, 1364, 365, 2699, 76, 21884, 13695, 11, 597, 307, 300, 437, 32567, 775, 2699, 76, 21884, 13695, 652, 30, 51014, 51014, 4402, 2699, 76, 21884, 13695, 10815, 300, 428, 9450, 992, 486, 1128, 362, 257, 979, 19866, 6713, 30, 51364, 51364, 400, 264, 1867, 307, 572, 13, 467, 4476, 32567, 300, 291, 486, 406, 362, 257, 979, 19866, 6713, 833, 2685, 4487, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.05143566039002057, "compression_ratio": 1.7314049586776858, "no_caption_prob": 9.460741421207786e-05}, {"id": 343, "seek": 208600, "start": 2106.0, "end": 2113.0, "text": " And the answer is no. It essentially guarantees that you will not have a decoder error under specific conditions.", "tokens": [50364, 400, 370, 291, 393, 550, 730, 260, 831, 1125, 309, 365, 300, 15302, 13, 400, 370, 309, 311, 257, 4364, 300, 291, 434, 1455, 13, 50664, 50664, 823, 11, 341, 5607, 493, 364, 1880, 644, 295, 1364, 365, 2699, 76, 21884, 13695, 11, 597, 307, 300, 437, 32567, 775, 2699, 76, 21884, 13695, 652, 30, 51014, 51014, 4402, 2699, 76, 21884, 13695, 10815, 300, 428, 9450, 992, 486, 1128, 362, 257, 979, 19866, 6713, 30, 51364, 51364, 400, 264, 1867, 307, 572, 13, 467, 4476, 32567, 300, 291, 486, 406, 362, 257, 979, 19866, 6713, 833, 2685, 4487, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.05143566039002057, "compression_ratio": 1.7314049586776858, "no_caption_prob": 9.460741421207786e-05}, {"id": 344, "seek": 211300, "start": 2113.0, "end": 2120.0, "text": " And serializing something as ISO 8601. Sorry, but Elm GraphQL really can't help you there.", "tokens": [50364, 400, 17436, 3319, 746, 382, 25042, 1649, 4550, 16, 13, 4919, 11, 457, 2699, 76, 21884, 13695, 534, 393, 380, 854, 291, 456, 13, 50714, 50714, 663, 311, 445, 257, 4364, 300, 291, 434, 485, 583, 437, 309, 393, 854, 291, 365, 307, 309, 393, 584, 11, 2264, 11, 731, 11, 51014, 51014, 604, 565, 456, 311, 257, 2158, 300, 311, 295, 341, 2010, 11, 286, 478, 516, 281, 764, 341, 9952, 281, 730, 260, 831, 1125, 309, 13, 51314, 51314, 400, 264, 7154, 393, 584, 11, 2264, 11, 731, 11, 604, 565, 286, 478, 7750, 257, 2158, 295, 341, 2010, 11, 286, 478, 516, 281, 764, 341, 9952, 281, 17436, 1125, 309, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.06944628893318823, "compression_ratio": 1.7767857142857142, "no_caption_prob": 0.00014882585674058646}, {"id": 345, "seek": 211300, "start": 2120.0, "end": 2126.0, "text": " That's just a contract that you're... But what it can help you with is it can say, OK, well,", "tokens": [50364, 400, 17436, 3319, 746, 382, 25042, 1649, 4550, 16, 13, 4919, 11, 457, 2699, 76, 21884, 13695, 534, 393, 380, 854, 291, 456, 13, 50714, 50714, 663, 311, 445, 257, 4364, 300, 291, 434, 485, 583, 437, 309, 393, 854, 291, 365, 307, 309, 393, 584, 11, 2264, 11, 731, 11, 51014, 51014, 604, 565, 456, 311, 257, 2158, 300, 311, 295, 341, 2010, 11, 286, 478, 516, 281, 764, 341, 9952, 281, 730, 260, 831, 1125, 309, 13, 51314, 51314, 400, 264, 7154, 393, 584, 11, 2264, 11, 731, 11, 604, 565, 286, 478, 7750, 257, 2158, 295, 341, 2010, 11, 286, 478, 516, 281, 764, 341, 9952, 281, 17436, 1125, 309, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.06944628893318823, "compression_ratio": 1.7767857142857142, "no_caption_prob": 0.00014882585674058646}, {"id": 346, "seek": 211300, "start": 2126.0, "end": 2132.0, "text": " any time there's a value that's of this type, I'm going to use this logic to deserialize it.", "tokens": [50364, 400, 17436, 3319, 746, 382, 25042, 1649, 4550, 16, 13, 4919, 11, 457, 2699, 76, 21884, 13695, 534, 393, 380, 854, 291, 456, 13, 50714, 50714, 663, 311, 445, 257, 4364, 300, 291, 434, 485, 583, 437, 309, 393, 854, 291, 365, 307, 309, 393, 584, 11, 2264, 11, 731, 11, 51014, 51014, 604, 565, 456, 311, 257, 2158, 300, 311, 295, 341, 2010, 11, 286, 478, 516, 281, 764, 341, 9952, 281, 730, 260, 831, 1125, 309, 13, 51314, 51314, 400, 264, 7154, 393, 584, 11, 2264, 11, 731, 11, 604, 565, 286, 478, 7750, 257, 2158, 295, 341, 2010, 11, 286, 478, 516, 281, 764, 341, 9952, 281, 17436, 1125, 309, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.06944628893318823, "compression_ratio": 1.7767857142857142, "no_caption_prob": 0.00014882585674058646}, {"id": 347, "seek": 211300, "start": 2132.0, "end": 2138.0, "text": " And the server can say, OK, well, any time I'm sending a value of this type, I'm going to use this logic to serialize it.", "tokens": [50364, 400, 17436, 3319, 746, 382, 25042, 1649, 4550, 16, 13, 4919, 11, 457, 2699, 76, 21884, 13695, 534, 393, 380, 854, 291, 456, 13, 50714, 50714, 663, 311, 445, 257, 4364, 300, 291, 434, 485, 583, 437, 309, 393, 854, 291, 365, 307, 309, 393, 584, 11, 2264, 11, 731, 11, 51014, 51014, 604, 565, 456, 311, 257, 2158, 300, 311, 295, 341, 2010, 11, 286, 478, 516, 281, 764, 341, 9952, 281, 730, 260, 831, 1125, 309, 13, 51314, 51314, 400, 264, 7154, 393, 584, 11, 2264, 11, 731, 11, 604, 565, 286, 478, 7750, 257, 2158, 295, 341, 2010, 11, 286, 478, 516, 281, 764, 341, 9952, 281, 17436, 1125, 309, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.06944628893318823, "compression_ratio": 1.7767857142857142, "no_caption_prob": 0.00014882585674058646}, {"id": 348, "seek": 213800, "start": 2138.0, "end": 2146.0, "text": " So it's... So Elm GraphQL helps you by providing this mechanism for leveraging that contract at the right point.", "tokens": [50364, 407, 309, 311, 485, 407, 2699, 76, 21884, 13695, 3665, 291, 538, 6530, 341, 7513, 337, 32666, 300, 4364, 412, 264, 558, 935, 13, 50764, 50764, 583, 291, 434, 322, 428, 1065, 337, 1455, 988, 300, 291, 600, 27415, 493, 264, 4364, 8944, 1296, 264, 646, 917, 293, 264, 1868, 917, 13, 51114, 51114, 865, 11, 498, 264, 7154, 2082, 279, 493, 11, 550, 291, 362, 257, 979, 19866, 6713, 420, 512, 733, 295, 6713, 13, 708, 733, 295, 6713, 576, 291, 362, 550, 30, 51464, 51464, 509, 576, 362, 485, 663, 307, 257, 665, 1168, 13, 961, 385, 574, 412, 264, 45623, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.06545548968844944, "compression_ratio": 1.6174242424242424, "no_caption_prob": 8.01343412604183e-06}, {"id": 349, "seek": 213800, "start": 2146.0, "end": 2153.0, "text": " But you're on your own for making sure that you've wired up the contract correctly between the back end and the front end.", "tokens": [50364, 407, 309, 311, 485, 407, 2699, 76, 21884, 13695, 3665, 291, 538, 6530, 341, 7513, 337, 32666, 300, 4364, 412, 264, 558, 935, 13, 50764, 50764, 583, 291, 434, 322, 428, 1065, 337, 1455, 988, 300, 291, 600, 27415, 493, 264, 4364, 8944, 1296, 264, 646, 917, 293, 264, 1868, 917, 13, 51114, 51114, 865, 11, 498, 264, 7154, 2082, 279, 493, 11, 550, 291, 362, 257, 979, 19866, 6713, 420, 512, 733, 295, 6713, 13, 708, 733, 295, 6713, 576, 291, 362, 550, 30, 51464, 51464, 509, 576, 362, 485, 663, 307, 257, 665, 1168, 13, 961, 385, 574, 412, 264, 45623, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.06545548968844944, "compression_ratio": 1.6174242424242424, "no_caption_prob": 8.01343412604183e-06}, {"id": 350, "seek": 213800, "start": 2153.0, "end": 2160.0, "text": " Yeah, if the server messes up, then you have a decoder error or some kind of error. What kind of error would you have then?", "tokens": [50364, 407, 309, 311, 485, 407, 2699, 76, 21884, 13695, 3665, 291, 538, 6530, 341, 7513, 337, 32666, 300, 4364, 412, 264, 558, 935, 13, 50764, 50764, 583, 291, 434, 322, 428, 1065, 337, 1455, 988, 300, 291, 600, 27415, 493, 264, 4364, 8944, 1296, 264, 646, 917, 293, 264, 1868, 917, 13, 51114, 51114, 865, 11, 498, 264, 7154, 2082, 279, 493, 11, 550, 291, 362, 257, 979, 19866, 6713, 420, 512, 733, 295, 6713, 13, 708, 733, 295, 6713, 576, 291, 362, 550, 30, 51464, 51464, 509, 576, 362, 485, 663, 307, 257, 665, 1168, 13, 961, 385, 574, 412, 264, 45623, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.06545548968844944, "compression_ratio": 1.6174242424242424, "no_caption_prob": 8.01343412604183e-06}, {"id": 351, "seek": 213800, "start": 2160.0, "end": 2165.0, "text": " You would have... That is a good question. Let me look at the docs.", "tokens": [50364, 407, 309, 311, 485, 407, 2699, 76, 21884, 13695, 3665, 291, 538, 6530, 341, 7513, 337, 32666, 300, 4364, 412, 264, 558, 935, 13, 50764, 50764, 583, 291, 434, 322, 428, 1065, 337, 1455, 988, 300, 291, 600, 27415, 493, 264, 4364, 8944, 1296, 264, 646, 917, 293, 264, 1868, 917, 13, 51114, 51114, 865, 11, 498, 264, 7154, 2082, 279, 493, 11, 550, 291, 362, 257, 979, 19866, 6713, 420, 512, 733, 295, 6713, 13, 708, 733, 295, 6713, 576, 291, 362, 550, 30, 51464, 51464, 509, 576, 362, 485, 663, 307, 257, 665, 1168, 13, 961, 385, 574, 412, 264, 45623, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.06545548968844944, "compression_ratio": 1.6174242424242424, "no_caption_prob": 8.01343412604183e-06}, {"id": 352, "seek": 216500, "start": 2165.0, "end": 2173.0, "text": " I believe I remember being very explicit that I... As much as possible in the Elm GraphQL error messages,", "tokens": [50364, 286, 1697, 286, 1604, 885, 588, 13691, 300, 286, 485, 1018, 709, 382, 1944, 294, 264, 2699, 76, 21884, 13695, 6713, 7897, 11, 50764, 50764, 286, 3031, 281, 447, 45679, 8602, 1970, 7426, 7122, 538, 1566, 11, 291, 458, 11, 264, 954, 567, 4114, 341, 2699, 76, 21884, 13695, 485, 51164, 51164, 1042, 11, 286, 500, 380, 584, 309, 300, 636, 11, 457, 286, 584, 411, 11, 291, 458, 11, 2618, 7642, 257, 2375, 3089, 66, 300, 7612, 13, 51514, 51514, 407, 309, 311, 516, 281, 976, 291, 364, 6713, 411, 300, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.07582459498926536, "compression_ratio": 1.540084388185654, "no_caption_prob": 5.4755288147134706e-05}, {"id": 353, "seek": 216500, "start": 2173.0, "end": 2181.0, "text": " I tried to proactively defend against bug reports by saying, you know, the person who wrote this Elm GraphQL...", "tokens": [50364, 286, 1697, 286, 1604, 885, 588, 13691, 300, 286, 485, 1018, 709, 382, 1944, 294, 264, 2699, 76, 21884, 13695, 6713, 7897, 11, 50764, 50764, 286, 3031, 281, 447, 45679, 8602, 1970, 7426, 7122, 538, 1566, 11, 291, 458, 11, 264, 954, 567, 4114, 341, 2699, 76, 21884, 13695, 485, 51164, 51164, 1042, 11, 286, 500, 380, 584, 309, 300, 636, 11, 457, 286, 584, 411, 11, 291, 458, 11, 2618, 7642, 257, 2375, 3089, 66, 300, 7612, 13, 51514, 51514, 407, 309, 311, 516, 281, 976, 291, 364, 6713, 411, 300, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.07582459498926536, "compression_ratio": 1.540084388185654, "no_caption_prob": 5.4755288147134706e-05}, {"id": 354, "seek": 216500, "start": 2181.0, "end": 2188.0, "text": " Well, I don't say it that way, but I say like, you know, somebody defined a custom codec that failed.", "tokens": [50364, 286, 1697, 286, 1604, 885, 588, 13691, 300, 286, 485, 1018, 709, 382, 1944, 294, 264, 2699, 76, 21884, 13695, 6713, 7897, 11, 50764, 50764, 286, 3031, 281, 447, 45679, 8602, 1970, 7426, 7122, 538, 1566, 11, 291, 458, 11, 264, 954, 567, 4114, 341, 2699, 76, 21884, 13695, 485, 51164, 51164, 1042, 11, 286, 500, 380, 584, 309, 300, 636, 11, 457, 286, 584, 411, 11, 291, 458, 11, 2618, 7642, 257, 2375, 3089, 66, 300, 7612, 13, 51514, 51514, 407, 309, 311, 516, 281, 976, 291, 364, 6713, 411, 300, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.07582459498926536, "compression_ratio": 1.540084388185654, "no_caption_prob": 5.4755288147134706e-05}, {"id": 355, "seek": 216500, "start": 2188.0, "end": 2191.0, "text": " So it's going to give you an error like that.", "tokens": [50364, 286, 1697, 286, 1604, 885, 588, 13691, 300, 286, 485, 1018, 709, 382, 1944, 294, 264, 2699, 76, 21884, 13695, 6713, 7897, 11, 50764, 50764, 286, 3031, 281, 447, 45679, 8602, 1970, 7426, 7122, 538, 1566, 11, 291, 458, 11, 264, 954, 567, 4114, 341, 2699, 76, 21884, 13695, 485, 51164, 51164, 1042, 11, 286, 500, 380, 584, 309, 300, 636, 11, 457, 286, 584, 411, 11, 291, 458, 11, 2618, 7642, 257, 2375, 3089, 66, 300, 7612, 13, 51514, 51514, 407, 309, 311, 516, 281, 976, 291, 364, 6713, 411, 300, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.07582459498926536, "compression_ratio": 1.540084388185654, "no_caption_prob": 5.4755288147134706e-05}, {"id": 356, "seek": 219100, "start": 2191.0, "end": 2200.0, "text": " Yeah, because you need to write the codec well also, right? As an implementer of the front end for Elm GraphQL.", "tokens": [50364, 865, 11, 570, 291, 643, 281, 2464, 264, 3089, 66, 731, 611, 11, 558, 30, 1018, 364, 4445, 260, 295, 264, 1868, 917, 337, 2699, 76, 21884, 13695, 13, 50814, 50814, 7587, 558, 13, 509, 643, 281, 4813, 300, 8944, 13, 583, 550, 309, 2709, 291, 257, 14614, 935, 689, 294, 257, 2167, 1081, 11, 300, 3089, 66, 1177, 380, 754, 485, 51214, 51214, 467, 486, 3079, 300, 979, 19866, 281, 604, 2158, 295, 300, 2010, 13, 407, 586, 562, 291, 352, 281, 3048, 257, 4002, 11, 498, 291, 48377, 300, 6798, 11, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.07665184846858389, "compression_ratio": 1.5378151260504203, "no_caption_prob": 2.0144723748671822e-05}, {"id": 357, "seek": 219100, "start": 2200.0, "end": 2208.0, "text": " Exactly right. You need to handle that correctly. But then it gives you a pinch point where in a single place, that codec doesn't even...", "tokens": [50364, 865, 11, 570, 291, 643, 281, 2464, 264, 3089, 66, 731, 611, 11, 558, 30, 1018, 364, 4445, 260, 295, 264, 1868, 917, 337, 2699, 76, 21884, 13695, 13, 50814, 50814, 7587, 558, 13, 509, 643, 281, 4813, 300, 8944, 13, 583, 550, 309, 2709, 291, 257, 14614, 935, 689, 294, 257, 2167, 1081, 11, 300, 3089, 66, 1177, 380, 754, 485, 51214, 51214, 467, 486, 3079, 300, 979, 19866, 281, 604, 2158, 295, 300, 2010, 13, 407, 586, 562, 291, 352, 281, 3048, 257, 4002, 11, 498, 291, 48377, 300, 6798, 11, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.07665184846858389, "compression_ratio": 1.5378151260504203, "no_caption_prob": 2.0144723748671822e-05}, {"id": 358, "seek": 219100, "start": 2208.0, "end": 2217.0, "text": " It will apply that decoder to any value of that type. So now when you go to select a date, if you parse that string,", "tokens": [50364, 865, 11, 570, 291, 643, 281, 2464, 264, 3089, 66, 731, 611, 11, 558, 30, 1018, 364, 4445, 260, 295, 264, 1868, 917, 337, 2699, 76, 21884, 13695, 13, 50814, 50814, 7587, 558, 13, 509, 643, 281, 4813, 300, 8944, 13, 583, 550, 309, 2709, 291, 257, 14614, 935, 689, 294, 257, 2167, 1081, 11, 300, 3089, 66, 1177, 380, 754, 485, 51214, 51214, 467, 486, 3079, 300, 979, 19866, 281, 604, 2158, 295, 300, 2010, 13, 407, 586, 562, 291, 352, 281, 3048, 257, 4002, 11, 498, 291, 48377, 300, 6798, 11, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.07665184846858389, "compression_ratio": 1.5378151260504203, "no_caption_prob": 2.0144723748671822e-05}, {"id": 359, "seek": 221700, "start": 2217.0, "end": 2225.0, "text": " which is ISO 8601 format into a time.posix, then when you have a selection set, which is a created at timestamp,", "tokens": [50364, 597, 307, 25042, 1649, 4550, 16, 7877, 666, 257, 565, 13, 30010, 970, 11, 550, 562, 291, 362, 257, 9450, 992, 11, 597, 307, 257, 2942, 412, 49108, 1215, 11, 50764, 50764, 597, 575, 300, 2010, 11, 562, 291, 483, 309, 11, 264, 2010, 337, 291, 382, 364, 2699, 76, 21884, 13695, 4195, 2390, 493, 257, 9450, 992, 307, 516, 281, 312, 565, 13, 30010, 970, 13, 51264, 51264, 821, 366, 257, 1230, 295, 3190, 300, 291, 393, 652, 764, 295, 300, 13, 509, 393, 652, 764, 295, 300, 337, 11, 291, 458, 11, 286, 519, 309, 311, 257, 869, 1558, 337, 7348, 3467, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.06631243557011315, "compression_ratio": 1.6812227074235808, "no_caption_prob": 2.4299242795677856e-05}, {"id": 360, "seek": 221700, "start": 2225.0, "end": 2235.0, "text": " which has that type, when you get it, the type for you as an Elm GraphQL user building up a selection set is going to be time.posix.", "tokens": [50364, 597, 307, 25042, 1649, 4550, 16, 7877, 666, 257, 565, 13, 30010, 970, 11, 550, 562, 291, 362, 257, 9450, 992, 11, 597, 307, 257, 2942, 412, 49108, 1215, 11, 50764, 50764, 597, 575, 300, 2010, 11, 562, 291, 483, 309, 11, 264, 2010, 337, 291, 382, 364, 2699, 76, 21884, 13695, 4195, 2390, 493, 257, 9450, 992, 307, 516, 281, 312, 565, 13, 30010, 970, 13, 51264, 51264, 821, 366, 257, 1230, 295, 3190, 300, 291, 393, 652, 764, 295, 300, 13, 509, 393, 652, 764, 295, 300, 337, 11, 291, 458, 11, 286, 519, 309, 311, 257, 869, 1558, 337, 7348, 3467, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.06631243557011315, "compression_ratio": 1.6812227074235808, "no_caption_prob": 2.4299242795677856e-05}, {"id": 361, "seek": 221700, "start": 2235.0, "end": 2242.0, "text": " There are a number of places that you can make use of that. You can make use of that for, you know, I think it's a great idea for ID types.", "tokens": [50364, 597, 307, 25042, 1649, 4550, 16, 7877, 666, 257, 565, 13, 30010, 970, 11, 550, 562, 291, 362, 257, 9450, 992, 11, 597, 307, 257, 2942, 412, 49108, 1215, 11, 50764, 50764, 597, 575, 300, 2010, 11, 562, 291, 483, 309, 11, 264, 2010, 337, 291, 382, 364, 2699, 76, 21884, 13695, 4195, 2390, 493, 257, 9450, 992, 307, 516, 281, 312, 565, 13, 30010, 970, 13, 51264, 51264, 821, 366, 257, 1230, 295, 3190, 300, 291, 393, 652, 764, 295, 300, 13, 509, 393, 652, 764, 295, 300, 337, 11, 291, 458, 11, 286, 519, 309, 311, 257, 869, 1558, 337, 7348, 3467, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.06631243557011315, "compression_ratio": 1.6812227074235808, "no_caption_prob": 2.4299242795677856e-05}, {"id": 362, "seek": 224200, "start": 2242.0, "end": 2250.0, "text": " I recommend that people use not just the built in, you know, GraphQL custom scaler.", "tokens": [50364, 286, 2748, 300, 561, 764, 406, 445, 264, 3094, 294, 11, 291, 458, 11, 21884, 13695, 2375, 15664, 260, 13, 50764, 50764, 21884, 13695, 575, 257, 3094, 294, 15664, 260, 2010, 1219, 7348, 11, 597, 11, 291, 458, 11, 300, 311, 1481, 13, 51064, 51064, 286, 914, 11, 498, 309, 311, 411, 257, 18958, 3845, 7348, 11, 550, 1310, 300, 311, 2489, 13, 583, 534, 11, 321, 393, 360, 1101, 813, 300, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.09777806021950462, "compression_ratio": 1.502824858757062, "no_caption_prob": 0.00015595929289702326}, {"id": 363, "seek": 224200, "start": 2250.0, "end": 2256.0, "text": " GraphQL has a built in scaler type called ID, which, you know, that's nice.", "tokens": [50364, 286, 2748, 300, 561, 764, 406, 445, 264, 3094, 294, 11, 291, 458, 11, 21884, 13695, 2375, 15664, 260, 13, 50764, 50764, 21884, 13695, 575, 257, 3094, 294, 15664, 260, 2010, 1219, 7348, 11, 597, 11, 291, 458, 11, 300, 311, 1481, 13, 51064, 51064, 286, 914, 11, 498, 309, 311, 411, 257, 18958, 3845, 7348, 11, 550, 1310, 300, 311, 2489, 13, 583, 534, 11, 321, 393, 360, 1101, 813, 300, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.09777806021950462, "compression_ratio": 1.502824858757062, "no_caption_prob": 0.00015595929289702326}, {"id": 364, "seek": 224200, "start": 2256.0, "end": 2265.0, "text": " I mean, if it's like a globally unique ID, then maybe that's fine. But really, we can do better than that.", "tokens": [50364, 286, 2748, 300, 561, 764, 406, 445, 264, 3094, 294, 11, 291, 458, 11, 21884, 13695, 2375, 15664, 260, 13, 50764, 50764, 21884, 13695, 575, 257, 3094, 294, 15664, 260, 2010, 1219, 7348, 11, 597, 11, 291, 458, 11, 300, 311, 1481, 13, 51064, 51064, 286, 914, 11, 498, 309, 311, 411, 257, 18958, 3845, 7348, 11, 550, 1310, 300, 311, 2489, 13, 583, 534, 11, 321, 393, 360, 1101, 813, 300, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.09777806021950462, "compression_ratio": 1.502824858757062, "no_caption_prob": 0.00015595929289702326}, {"id": 365, "seek": 226500, "start": 2265.0, "end": 2281.0, "text": " And I recommend having unique ID types for each type of ID, a user ID type, a product ID type, because, you know, if you're trying to pass in an ID type,", "tokens": [50364, 400, 286, 2748, 1419, 3845, 7348, 3467, 337, 1184, 2010, 295, 7348, 11, 257, 4195, 7348, 2010, 11, 257, 1674, 7348, 2010, 11, 570, 11, 291, 458, 11, 498, 291, 434, 1382, 281, 1320, 294, 364, 7348, 2010, 11, 51164, 51164, 291, 393, 6786, 294, 428, 2699, 76, 3089, 3096, 11, 341, 2203, 257, 4195, 7348, 13, 639, 2445, 7029, 257, 4195, 7348, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.09208768255570356, "compression_ratio": 1.55625, "no_caption_prob": 1.4738659046997782e-05}, {"id": 366, "seek": 226500, "start": 2281.0, "end": 2290.0, "text": " you can describe in your Elm code base, this needs a user ID. This function requires a user ID.", "tokens": [50364, 400, 286, 2748, 1419, 3845, 7348, 3467, 337, 1184, 2010, 295, 7348, 11, 257, 4195, 7348, 2010, 11, 257, 1674, 7348, 2010, 11, 570, 11, 291, 458, 11, 498, 291, 434, 1382, 281, 1320, 294, 364, 7348, 2010, 11, 51164, 51164, 291, 393, 6786, 294, 428, 2699, 76, 3089, 3096, 11, 341, 2203, 257, 4195, 7348, 13, 639, 2445, 7029, 257, 4195, 7348, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.09208768255570356, "compression_ratio": 1.55625, "no_caption_prob": 1.4738659046997782e-05}, {"id": 367, "seek": 229000, "start": 2290.0, "end": 2300.0, "text": " And now it's guaranteed to be in sync. You don't need to remember to turn something into a user ID. The codec is going to do that for you.", "tokens": [50364, 400, 586, 309, 311, 18031, 281, 312, 294, 20271, 13, 509, 500, 380, 643, 281, 1604, 281, 1261, 746, 666, 257, 4195, 7348, 13, 440, 3089, 66, 307, 516, 281, 360, 300, 337, 291, 13, 50864, 50864, 865, 13, 407, 294, 341, 1389, 11, 264, 3089, 66, 576, 445, 7019, 309, 294, 364, 7348, 13, 509, 2759, 380, 362, 281, 360, 1340, 544, 813, 309, 2759, 380, 3061, 1562, 13, 51264, 51264, 467, 2759, 380, 3061, 382, 938, 382, 291, 483, 264, 14217, 2010, 558, 13, 51514, 51514, 3358, 264, 7154, 13, 51564, 51564, 1079, 13, 51614, 51614, 865, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.08817907480093148, "compression_ratio": 1.6376146788990826, "no_caption_prob": 4.2644867789931595e-05}, {"id": 368, "seek": 229000, "start": 2300.0, "end": 2308.0, "text": " Yeah. So in this case, the codec would just wrap it in an ID. You wouldn't have to do anything more than it wouldn't fail ever.", "tokens": [50364, 400, 586, 309, 311, 18031, 281, 312, 294, 20271, 13, 509, 500, 380, 643, 281, 1604, 281, 1261, 746, 666, 257, 4195, 7348, 13, 440, 3089, 66, 307, 516, 281, 360, 300, 337, 291, 13, 50864, 50864, 865, 13, 407, 294, 341, 1389, 11, 264, 3089, 66, 576, 445, 7019, 309, 294, 364, 7348, 13, 509, 2759, 380, 362, 281, 360, 1340, 544, 813, 309, 2759, 380, 3061, 1562, 13, 51264, 51264, 467, 2759, 380, 3061, 382, 938, 382, 291, 483, 264, 14217, 2010, 558, 13, 51514, 51514, 3358, 264, 7154, 13, 51564, 51564, 1079, 13, 51614, 51614, 865, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.08817907480093148, "compression_ratio": 1.6376146788990826, "no_caption_prob": 4.2644867789931595e-05}, {"id": 369, "seek": 229000, "start": 2308.0, "end": 2313.0, "text": " It wouldn't fail as long as you get the underlying type right.", "tokens": [50364, 400, 586, 309, 311, 18031, 281, 312, 294, 20271, 13, 509, 500, 380, 643, 281, 1604, 281, 1261, 746, 666, 257, 4195, 7348, 13, 440, 3089, 66, 307, 516, 281, 360, 300, 337, 291, 13, 50864, 50864, 865, 13, 407, 294, 341, 1389, 11, 264, 3089, 66, 576, 445, 7019, 309, 294, 364, 7348, 13, 509, 2759, 380, 362, 281, 360, 1340, 544, 813, 309, 2759, 380, 3061, 1562, 13, 51264, 51264, 467, 2759, 380, 3061, 382, 938, 382, 291, 483, 264, 14217, 2010, 558, 13, 51514, 51514, 3358, 264, 7154, 13, 51564, 51564, 1079, 13, 51614, 51614, 865, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.08817907480093148, "compression_ratio": 1.6376146788990826, "no_caption_prob": 4.2644867789931595e-05}, {"id": 370, "seek": 229000, "start": 2313.0, "end": 2314.0, "text": " From the server.", "tokens": [50364, 400, 586, 309, 311, 18031, 281, 312, 294, 20271, 13, 509, 500, 380, 643, 281, 1604, 281, 1261, 746, 666, 257, 4195, 7348, 13, 440, 3089, 66, 307, 516, 281, 360, 300, 337, 291, 13, 50864, 50864, 865, 13, 407, 294, 341, 1389, 11, 264, 3089, 66, 576, 445, 7019, 309, 294, 364, 7348, 13, 509, 2759, 380, 362, 281, 360, 1340, 544, 813, 309, 2759, 380, 3061, 1562, 13, 51264, 51264, 467, 2759, 380, 3061, 382, 938, 382, 291, 483, 264, 14217, 2010, 558, 13, 51514, 51514, 3358, 264, 7154, 13, 51564, 51564, 1079, 13, 51614, 51614, 865, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.08817907480093148, "compression_ratio": 1.6376146788990826, "no_caption_prob": 4.2644867789931595e-05}, {"id": 371, "seek": 229000, "start": 2314.0, "end": 2315.0, "text": " Yes.", "tokens": [50364, 400, 586, 309, 311, 18031, 281, 312, 294, 20271, 13, 509, 500, 380, 643, 281, 1604, 281, 1261, 746, 666, 257, 4195, 7348, 13, 440, 3089, 66, 307, 516, 281, 360, 300, 337, 291, 13, 50864, 50864, 865, 13, 407, 294, 341, 1389, 11, 264, 3089, 66, 576, 445, 7019, 309, 294, 364, 7348, 13, 509, 2759, 380, 362, 281, 360, 1340, 544, 813, 309, 2759, 380, 3061, 1562, 13, 51264, 51264, 467, 2759, 380, 3061, 382, 938, 382, 291, 483, 264, 14217, 2010, 558, 13, 51514, 51514, 3358, 264, 7154, 13, 51564, 51564, 1079, 13, 51614, 51614, 865, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.08817907480093148, "compression_ratio": 1.6376146788990826, "no_caption_prob": 4.2644867789931595e-05}, {"id": 372, "seek": 229000, "start": 2315.0, "end": 2316.0, "text": " Yeah.", "tokens": [50364, 400, 586, 309, 311, 18031, 281, 312, 294, 20271, 13, 509, 500, 380, 643, 281, 1604, 281, 1261, 746, 666, 257, 4195, 7348, 13, 440, 3089, 66, 307, 516, 281, 360, 300, 337, 291, 13, 50864, 50864, 865, 13, 407, 294, 341, 1389, 11, 264, 3089, 66, 576, 445, 7019, 309, 294, 364, 7348, 13, 509, 2759, 380, 362, 281, 360, 1340, 544, 813, 309, 2759, 380, 3061, 1562, 13, 51264, 51264, 467, 2759, 380, 3061, 382, 938, 382, 291, 483, 264, 14217, 2010, 558, 13, 51514, 51514, 3358, 264, 7154, 13, 51564, 51564, 1079, 13, 51614, 51614, 865, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.08817907480093148, "compression_ratio": 1.6376146788990826, "no_caption_prob": 4.2644867789931595e-05}, {"id": 373, "seek": 231600, "start": 2316.0, "end": 2323.0, "text": " So this is a corner of the GraphQL specification that is not perfect. Overall, the GraphQL specification is very nice.", "tokens": [50364, 407, 341, 307, 257, 4538, 295, 264, 21884, 13695, 31256, 300, 307, 406, 2176, 13, 18420, 11, 264, 21884, 13695, 31256, 307, 588, 1481, 13, 50714, 50714, 583, 456, 311, 4362, 572, 2010, 1589, 466, 2375, 15664, 433, 13, 407, 498, 291, 2845, 257, 2375, 15664, 260, 337, 257, 4195, 7348, 11, 456, 311, 1825, 3585, 291, 11, 1954, 11, 293, 538, 264, 636, 11, 51314, 51314, 264, 14217, 2010, 307, 257, 6798, 420, 264, 14217, 2010, 307, 364, 560, 13, 51514, 51514, 1033, 11, 286, 1194, 300, 576, 312, 264, 1389, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.08851229284227509, "compression_ratio": 1.7174887892376682, "no_caption_prob": 2.247287193313241e-05}, {"id": 374, "seek": 231600, "start": 2323.0, "end": 2335.0, "text": " But there's currently no type information about custom scalers. So if you send a custom scaler for a user ID, there's nothing telling you, oh, and by the way,", "tokens": [50364, 407, 341, 307, 257, 4538, 295, 264, 21884, 13695, 31256, 300, 307, 406, 2176, 13, 18420, 11, 264, 21884, 13695, 31256, 307, 588, 1481, 13, 50714, 50714, 583, 456, 311, 4362, 572, 2010, 1589, 466, 2375, 15664, 433, 13, 407, 498, 291, 2845, 257, 2375, 15664, 260, 337, 257, 4195, 7348, 11, 456, 311, 1825, 3585, 291, 11, 1954, 11, 293, 538, 264, 636, 11, 51314, 51314, 264, 14217, 2010, 307, 257, 6798, 420, 264, 14217, 2010, 307, 364, 560, 13, 51514, 51514, 1033, 11, 286, 1194, 300, 576, 312, 264, 1389, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.08851229284227509, "compression_ratio": 1.7174887892376682, "no_caption_prob": 2.247287193313241e-05}, {"id": 375, "seek": 231600, "start": 2335.0, "end": 2339.0, "text": " the underlying type is a string or the underlying type is an int.", "tokens": [50364, 407, 341, 307, 257, 4538, 295, 264, 21884, 13695, 31256, 300, 307, 406, 2176, 13, 18420, 11, 264, 21884, 13695, 31256, 307, 588, 1481, 13, 50714, 50714, 583, 456, 311, 4362, 572, 2010, 1589, 466, 2375, 15664, 433, 13, 407, 498, 291, 2845, 257, 2375, 15664, 260, 337, 257, 4195, 7348, 11, 456, 311, 1825, 3585, 291, 11, 1954, 11, 293, 538, 264, 636, 11, 51314, 51314, 264, 14217, 2010, 307, 257, 6798, 420, 264, 14217, 2010, 307, 364, 560, 13, 51514, 51514, 1033, 11, 286, 1194, 300, 576, 312, 264, 1389, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.08851229284227509, "compression_ratio": 1.7174887892376682, "no_caption_prob": 2.247287193313241e-05}, {"id": 376, "seek": 231600, "start": 2339.0, "end": 2342.0, "text": " Okay, I thought that would be the case.", "tokens": [50364, 407, 341, 307, 257, 4538, 295, 264, 21884, 13695, 31256, 300, 307, 406, 2176, 13, 18420, 11, 264, 21884, 13695, 31256, 307, 588, 1481, 13, 50714, 50714, 583, 456, 311, 4362, 572, 2010, 1589, 466, 2375, 15664, 433, 13, 407, 498, 291, 2845, 257, 2375, 15664, 260, 337, 257, 4195, 7348, 11, 456, 311, 1825, 3585, 291, 11, 1954, 11, 293, 538, 264, 636, 11, 51314, 51314, 264, 14217, 2010, 307, 257, 6798, 420, 264, 14217, 2010, 307, 364, 560, 13, 51514, 51514, 1033, 11, 286, 1194, 300, 576, 312, 264, 1389, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.08851229284227509, "compression_ratio": 1.7174887892376682, "no_caption_prob": 2.247287193313241e-05}, {"id": 377, "seek": 234200, "start": 2342.0, "end": 2353.0, "text": " You would think so. And there are some active specification amendments that are in progress to help with that, although it seems like they're going to be optional, not required.", "tokens": [50364, 509, 576, 519, 370, 13, 400, 456, 366, 512, 4967, 31256, 27009, 300, 366, 294, 4205, 281, 854, 365, 300, 11, 4878, 309, 2544, 411, 436, 434, 516, 281, 312, 17312, 11, 406, 4739, 13, 50914, 50914, 400, 538, 264, 636, 11, 264, 551, 300, 1669, 309, 4420, 281, 362, 264, 34078, 16141, 264, 3467, 294, 257, 21884, 13695, 9362, 307, 300, 337, 472, 551, 11, 291, 393, 6786, 300, 1412, 293, 560, 28713, 309, 11, 597, 307, 869, 13, 51614, 51614, 583, 577, 775, 300, 10815, 1340, 30, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.07243395364412697, "compression_ratio": 1.5905511811023623, "no_caption_prob": 2.111171488650143e-05}, {"id": 378, "seek": 234200, "start": 2353.0, "end": 2367.0, "text": " And by the way, the thing that makes it useful to have the schema describing the types in a GraphQL API is that for one thing, you can describe that data and introspect it, which is great.", "tokens": [50364, 509, 576, 519, 370, 13, 400, 456, 366, 512, 4967, 31256, 27009, 300, 366, 294, 4205, 281, 854, 365, 300, 11, 4878, 309, 2544, 411, 436, 434, 516, 281, 312, 17312, 11, 406, 4739, 13, 50914, 50914, 400, 538, 264, 636, 11, 264, 551, 300, 1669, 309, 4420, 281, 362, 264, 34078, 16141, 264, 3467, 294, 257, 21884, 13695, 9362, 307, 300, 337, 472, 551, 11, 291, 393, 6786, 300, 1412, 293, 560, 28713, 309, 11, 597, 307, 869, 13, 51614, 51614, 583, 577, 775, 300, 10815, 1340, 30, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.07243395364412697, "compression_ratio": 1.5905511811023623, "no_caption_prob": 2.111171488650143e-05}, {"id": 379, "seek": 234200, "start": 2367.0, "end": 2370.0, "text": " But how does that guarantee anything?", "tokens": [50364, 509, 576, 519, 370, 13, 400, 456, 366, 512, 4967, 31256, 27009, 300, 366, 294, 4205, 281, 854, 365, 300, 11, 4878, 309, 2544, 411, 436, 434, 516, 281, 312, 17312, 11, 406, 4739, 13, 50914, 50914, 400, 538, 264, 636, 11, 264, 551, 300, 1669, 309, 4420, 281, 362, 264, 34078, 16141, 264, 3467, 294, 257, 21884, 13695, 9362, 307, 300, 337, 472, 551, 11, 291, 393, 6786, 300, 1412, 293, 560, 28713, 309, 11, 597, 307, 869, 13, 51614, 51614, 583, 577, 775, 300, 10815, 1340, 30, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.07243395364412697, "compression_ratio": 1.5905511811023623, "no_caption_prob": 2.111171488650143e-05}, {"id": 380, "seek": 237000, "start": 2370.0, "end": 2379.0, "text": " Right. And the answer is, well, it guarantees that you're going to. So the GraphQL specification doesn't guarantee that the server will never send an incorrect type.", "tokens": [50364, 1779, 13, 400, 264, 1867, 307, 11, 731, 11, 309, 32567, 300, 291, 434, 516, 281, 13, 407, 264, 21884, 13695, 31256, 1177, 380, 10815, 300, 264, 7154, 486, 1128, 2845, 364, 18424, 2010, 13, 50814, 50814, 467, 32567, 300, 498, 309, 775, 853, 281, 2845, 364, 18424, 2010, 11, 309, 486, 976, 364, 6713, 412, 264, 21884, 13695, 1496, 13, 51164, 51164, 407, 264, 21884, 13695, 7154, 8388, 2564, 307, 6250, 337, 406, 8295, 1340, 7615, 2380, 295, 309, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.046217665952794695, "compression_ratio": 1.7255813953488373, "no_caption_prob": 7.843616913305596e-05}, {"id": 381, "seek": 237000, "start": 2379.0, "end": 2386.0, "text": " It guarantees that if it does try to send an incorrect type, it will give an error at the GraphQL level.", "tokens": [50364, 1779, 13, 400, 264, 1867, 307, 11, 731, 11, 309, 32567, 300, 291, 434, 516, 281, 13, 407, 264, 21884, 13695, 31256, 1177, 380, 10815, 300, 264, 7154, 486, 1128, 2845, 364, 18424, 2010, 13, 50814, 50814, 467, 32567, 300, 498, 309, 775, 853, 281, 2845, 364, 18424, 2010, 11, 309, 486, 976, 364, 6713, 412, 264, 21884, 13695, 1496, 13, 51164, 51164, 407, 264, 21884, 13695, 7154, 8388, 2564, 307, 6250, 337, 406, 8295, 1340, 7615, 2380, 295, 309, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.046217665952794695, "compression_ratio": 1.7255813953488373, "no_caption_prob": 7.843616913305596e-05}, {"id": 382, "seek": 237000, "start": 2386.0, "end": 2393.0, "text": " So the GraphQL server framework itself is responsible for not letting anything escape outside of it.", "tokens": [50364, 1779, 13, 400, 264, 1867, 307, 11, 731, 11, 309, 32567, 300, 291, 434, 516, 281, 13, 407, 264, 21884, 13695, 31256, 1177, 380, 10815, 300, 264, 7154, 486, 1128, 2845, 364, 18424, 2010, 13, 50814, 50814, 467, 32567, 300, 498, 309, 775, 853, 281, 2845, 364, 18424, 2010, 11, 309, 486, 976, 364, 6713, 412, 264, 21884, 13695, 1496, 13, 51164, 51164, 407, 264, 21884, 13695, 7154, 8388, 2564, 307, 6250, 337, 406, 8295, 1340, 7615, 2380, 295, 309, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.046217665952794695, "compression_ratio": 1.7255813953488373, "no_caption_prob": 7.843616913305596e-05}, {"id": 383, "seek": 239300, "start": 2393.0, "end": 2400.0, "text": " Okay, so you would get a 500 or something. I guess that's not the equivalent of a 500.", "tokens": [50364, 1033, 11, 370, 291, 576, 483, 257, 5923, 420, 746, 13, 286, 2041, 300, 311, 406, 264, 10344, 295, 257, 5923, 13, 50714, 50714, 15624, 3576, 317, 295, 257, 5923, 11, 309, 1062, 754, 312, 257, 2331, 293, 550, 5304, 364, 13603, 2141, 294, 264, 30918, 300, 309, 11247, 11, 597, 2699, 76, 21884, 13695, 576, 2387, 382, 364, 6713, 13, 51214, 51214, 286, 393, 380, 754, 1604, 13, 467, 311, 668, 886, 938, 1670, 286, 600, 668, 294, 456, 13, 583, 2035, 264, 1389, 11, 309, 311, 516, 281, 312, 8668, 382, 364, 6713, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.0801762294769287, "compression_ratio": 1.6008771929824561, "no_caption_prob": 4.539625660981983e-05}, {"id": 384, "seek": 239300, "start": 2400.0, "end": 2410.0, "text": " Equivalent of a 500, it might even be a 200 and then contain an errors key in the payload that it returns, which Elm GraphQL would treat as an error.", "tokens": [50364, 1033, 11, 370, 291, 576, 483, 257, 5923, 420, 746, 13, 286, 2041, 300, 311, 406, 264, 10344, 295, 257, 5923, 13, 50714, 50714, 15624, 3576, 317, 295, 257, 5923, 11, 309, 1062, 754, 312, 257, 2331, 293, 550, 5304, 364, 13603, 2141, 294, 264, 30918, 300, 309, 11247, 11, 597, 2699, 76, 21884, 13695, 576, 2387, 382, 364, 6713, 13, 51214, 51214, 286, 393, 380, 754, 1604, 13, 467, 311, 668, 886, 938, 1670, 286, 600, 668, 294, 456, 13, 583, 2035, 264, 1389, 11, 309, 311, 516, 281, 312, 8668, 382, 364, 6713, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.0801762294769287, "compression_ratio": 1.6008771929824561, "no_caption_prob": 4.539625660981983e-05}, {"id": 385, "seek": 239300, "start": 2410.0, "end": 2416.0, "text": " I can't even remember. It's been too long since I've been in there. But whatever the case, it's going to be treated as an error.", "tokens": [50364, 1033, 11, 370, 291, 576, 483, 257, 5923, 420, 746, 13, 286, 2041, 300, 311, 406, 264, 10344, 295, 257, 5923, 13, 50714, 50714, 15624, 3576, 317, 295, 257, 5923, 11, 309, 1062, 754, 312, 257, 2331, 293, 550, 5304, 364, 13603, 2141, 294, 264, 30918, 300, 309, 11247, 11, 597, 2699, 76, 21884, 13695, 576, 2387, 382, 364, 6713, 13, 51214, 51214, 286, 393, 380, 754, 1604, 13, 467, 311, 668, 886, 938, 1670, 286, 600, 668, 294, 456, 13, 583, 2035, 264, 1389, 11, 309, 311, 516, 281, 312, 8668, 382, 364, 6713, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.0801762294769287, "compression_ratio": 1.6008771929824561, "no_caption_prob": 4.539625660981983e-05}, {"id": 386, "seek": 241600, "start": 2416.0, "end": 2424.0, "text": " So now you can use a more like type safe end to end solution if you're using something like Juniper with REST, which is a type safe GraphQL framework.", "tokens": [50364, 407, 586, 291, 393, 764, 257, 544, 411, 2010, 3273, 917, 281, 917, 3827, 498, 291, 434, 1228, 746, 411, 8492, 15402, 365, 497, 14497, 11, 597, 307, 257, 2010, 3273, 21884, 13695, 8388, 13, 50764, 50764, 1396, 291, 393, 291, 393, 652, 2010, 32567, 490, 264, 8149, 439, 264, 636, 807, 281, 12678, 746, 490, 264, 7154, 420, 1228, 746, 411, 8646, 2991, 420, 10223, 38, 2662, 3991, 13, 51264, 51264, 467, 311, 767, 1237, 412, 428, 10223, 45189, 8149, 34078, 293, 550, 13596, 2937, 264, 2010, 1589, 490, 300, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.08702899018923442, "compression_ratio": 1.7418032786885247, "no_caption_prob": 4.6110300900181755e-05}, {"id": 387, "seek": 241600, "start": 2424.0, "end": 2434.0, "text": " Then you can you can make type guarantees from the database all the way through to returning something from the server or using something like Hasura or PostGraph file.", "tokens": [50364, 407, 586, 291, 393, 764, 257, 544, 411, 2010, 3273, 917, 281, 917, 3827, 498, 291, 434, 1228, 746, 411, 8492, 15402, 365, 497, 14497, 11, 597, 307, 257, 2010, 3273, 21884, 13695, 8388, 13, 50764, 50764, 1396, 291, 393, 291, 393, 652, 2010, 32567, 490, 264, 8149, 439, 264, 636, 807, 281, 12678, 746, 490, 264, 7154, 420, 1228, 746, 411, 8646, 2991, 420, 10223, 38, 2662, 3991, 13, 51264, 51264, 467, 311, 767, 1237, 412, 428, 10223, 45189, 8149, 34078, 293, 550, 13596, 2937, 264, 2010, 1589, 490, 300, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.08702899018923442, "compression_ratio": 1.7418032786885247, "no_caption_prob": 4.6110300900181755e-05}, {"id": 388, "seek": 241600, "start": 2434.0, "end": 2440.0, "text": " It's actually looking at your Postgres database schema and then inferring the type information from that.", "tokens": [50364, 407, 586, 291, 393, 764, 257, 544, 411, 2010, 3273, 917, 281, 917, 3827, 498, 291, 434, 1228, 746, 411, 8492, 15402, 365, 497, 14497, 11, 597, 307, 257, 2010, 3273, 21884, 13695, 8388, 13, 50764, 50764, 1396, 291, 393, 291, 393, 652, 2010, 32567, 490, 264, 8149, 439, 264, 636, 807, 281, 12678, 746, 490, 264, 7154, 420, 1228, 746, 411, 8646, 2991, 420, 10223, 38, 2662, 3991, 13, 51264, 51264, 467, 311, 767, 1237, 412, 428, 10223, 45189, 8149, 34078, 293, 550, 13596, 2937, 264, 2010, 1589, 490, 300, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.08702899018923442, "compression_ratio": 1.7418032786885247, "no_caption_prob": 4.6110300900181755e-05}, {"id": 389, "seek": 244000, "start": 2440.0, "end": 2451.0, "text": " So there are ways to keep them in lockstep, but all the GraphQL specification says is if they're mismatched, then I will not let it get through as incorrect data.", "tokens": [50364, 407, 456, 366, 2098, 281, 1066, 552, 294, 4017, 16792, 11, 457, 439, 264, 21884, 13695, 31256, 1619, 307, 498, 436, 434, 23220, 24102, 11, 550, 286, 486, 406, 718, 309, 483, 807, 382, 18424, 1412, 13, 50914, 50914, 7156, 11, 286, 486, 1491, 309, 382, 364, 6713, 293, 2845, 364, 6713, 4134, 13, 51114, 51114, 407, 291, 360, 643, 281, 3270, 294, 294, 264, 2375, 39684, 3089, 14368, 13, 509, 360, 643, 281, 3270, 294, 293, 979, 1429, 309, 666, 264, 2295, 1496, 2010, 13, 51514, 51514, 400, 550, 291, 393, 4471, 309, 666, 2035, 3467, 291, 528, 13, 407, 291, 767, 2464, 257, 8936, 31828, 979, 19866, 11, 382, 6958, 382, 300, 815, 1626, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.06346365242950187, "compression_ratio": 1.6738351254480286, "no_caption_prob": 8.09223492979072e-05}, {"id": 390, "seek": 244000, "start": 2451.0, "end": 2455.0, "text": " Instead, I will mark it as an error and send an error response.", "tokens": [50364, 407, 456, 366, 2098, 281, 1066, 552, 294, 4017, 16792, 11, 457, 439, 264, 21884, 13695, 31256, 1619, 307, 498, 436, 434, 23220, 24102, 11, 550, 286, 486, 406, 718, 309, 483, 807, 382, 18424, 1412, 13, 50914, 50914, 7156, 11, 286, 486, 1491, 309, 382, 364, 6713, 293, 2845, 364, 6713, 4134, 13, 51114, 51114, 407, 291, 360, 643, 281, 3270, 294, 294, 264, 2375, 39684, 3089, 14368, 13, 509, 360, 643, 281, 3270, 294, 293, 979, 1429, 309, 666, 264, 2295, 1496, 2010, 13, 51514, 51514, 400, 550, 291, 393, 4471, 309, 666, 2035, 3467, 291, 528, 13, 407, 291, 767, 2464, 257, 8936, 31828, 979, 19866, 11, 382, 6958, 382, 300, 815, 1626, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.06346365242950187, "compression_ratio": 1.6738351254480286, "no_caption_prob": 8.09223492979072e-05}, {"id": 391, "seek": 244000, "start": 2455.0, "end": 2463.0, "text": " So you do need to drop in in the custom scalar codecs. You do need to drop in and decode it into the low level type.", "tokens": [50364, 407, 456, 366, 2098, 281, 1066, 552, 294, 4017, 16792, 11, 457, 439, 264, 21884, 13695, 31256, 1619, 307, 498, 436, 434, 23220, 24102, 11, 550, 286, 486, 406, 718, 309, 483, 807, 382, 18424, 1412, 13, 50914, 50914, 7156, 11, 286, 486, 1491, 309, 382, 364, 6713, 293, 2845, 364, 6713, 4134, 13, 51114, 51114, 407, 291, 360, 643, 281, 3270, 294, 294, 264, 2375, 39684, 3089, 14368, 13, 509, 360, 643, 281, 3270, 294, 293, 979, 1429, 309, 666, 264, 2295, 1496, 2010, 13, 51514, 51514, 400, 550, 291, 393, 4471, 309, 666, 2035, 3467, 291, 528, 13, 407, 291, 767, 2464, 257, 8936, 31828, 979, 19866, 11, 382, 6958, 382, 300, 815, 1626, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.06346365242950187, "compression_ratio": 1.6738351254480286, "no_caption_prob": 8.09223492979072e-05}, {"id": 392, "seek": 244000, "start": 2463.0, "end": 2469.0, "text": " And then you can map it into whatever types you want. So you actually write a raw JSON decoder, as scary as that may sound.", "tokens": [50364, 407, 456, 366, 2098, 281, 1066, 552, 294, 4017, 16792, 11, 457, 439, 264, 21884, 13695, 31256, 1619, 307, 498, 436, 434, 23220, 24102, 11, 550, 286, 486, 406, 718, 309, 483, 807, 382, 18424, 1412, 13, 50914, 50914, 7156, 11, 286, 486, 1491, 309, 382, 364, 6713, 293, 2845, 364, 6713, 4134, 13, 51114, 51114, 407, 291, 360, 643, 281, 3270, 294, 294, 264, 2375, 39684, 3089, 14368, 13, 509, 360, 643, 281, 3270, 294, 293, 979, 1429, 309, 666, 264, 2295, 1496, 2010, 13, 51514, 51514, 400, 550, 291, 393, 4471, 309, 666, 2035, 3467, 291, 528, 13, 407, 291, 767, 2464, 257, 8936, 31828, 979, 19866, 11, 382, 6958, 382, 300, 815, 1626, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.06346365242950187, "compression_ratio": 1.6738351254480286, "no_caption_prob": 8.09223492979072e-05}, {"id": 393, "seek": 246900, "start": 2469.0, "end": 2475.0, "text": " Well, it's not that scary once you've once you've listened to the JSON episode that we've made.", "tokens": [50364, 1042, 11, 309, 311, 406, 300, 6958, 1564, 291, 600, 1564, 291, 600, 13207, 281, 264, 31828, 3500, 300, 321, 600, 1027, 13, 50664, 50664, 1779, 13, 1079, 11, 2293, 13, 50764, 50764, 440, 472, 1194, 300, 286, 632, 562, 286, 700, 2198, 295, 2699, 76, 21884, 13695, 307, 411, 291, 8460, 439, 341, 9362, 490, 264, 21884, 13695, 34078, 7123, 3991, 420, 9362, 13, 51314, 51314, 400, 300, 1985, 382, 938, 382, 291, 382, 264, 9362, 775, 406, 1319, 13, 51514, 51514, 407, 498, 452, 7154, 293, 452, 1868, 917, 366, 12005, 11, 577, 360, 286, 1066, 552, 294, 20271, 30, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.09512194147649801, "compression_ratio": 1.5291828793774318, "no_caption_prob": 0.00010229231702396646}, {"id": 394, "seek": 246900, "start": 2475.0, "end": 2477.0, "text": " Right. Yes, exactly.", "tokens": [50364, 1042, 11, 309, 311, 406, 300, 6958, 1564, 291, 600, 1564, 291, 600, 13207, 281, 264, 31828, 3500, 300, 321, 600, 1027, 13, 50664, 50664, 1779, 13, 1079, 11, 2293, 13, 50764, 50764, 440, 472, 1194, 300, 286, 632, 562, 286, 700, 2198, 295, 2699, 76, 21884, 13695, 307, 411, 291, 8460, 439, 341, 9362, 490, 264, 21884, 13695, 34078, 7123, 3991, 420, 9362, 13, 51314, 51314, 400, 300, 1985, 382, 938, 382, 291, 382, 264, 9362, 775, 406, 1319, 13, 51514, 51514, 407, 498, 452, 7154, 293, 452, 1868, 917, 366, 12005, 11, 577, 360, 286, 1066, 552, 294, 20271, 30, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.09512194147649801, "compression_ratio": 1.5291828793774318, "no_caption_prob": 0.00010229231702396646}, {"id": 395, "seek": 246900, "start": 2477.0, "end": 2488.0, "text": " The one thought that I had when I first heard of Elm GraphQL is like you generate all this API from the GraphQL schema definition file or API.", "tokens": [50364, 1042, 11, 309, 311, 406, 300, 6958, 1564, 291, 600, 1564, 291, 600, 13207, 281, 264, 31828, 3500, 300, 321, 600, 1027, 13, 50664, 50664, 1779, 13, 1079, 11, 2293, 13, 50764, 50764, 440, 472, 1194, 300, 286, 632, 562, 286, 700, 2198, 295, 2699, 76, 21884, 13695, 307, 411, 291, 8460, 439, 341, 9362, 490, 264, 21884, 13695, 34078, 7123, 3991, 420, 9362, 13, 51314, 51314, 400, 300, 1985, 382, 938, 382, 291, 382, 264, 9362, 775, 406, 1319, 13, 51514, 51514, 407, 498, 452, 7154, 293, 452, 1868, 917, 366, 12005, 11, 577, 360, 286, 1066, 552, 294, 20271, 30, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.09512194147649801, "compression_ratio": 1.5291828793774318, "no_caption_prob": 0.00010229231702396646}, {"id": 396, "seek": 246900, "start": 2488.0, "end": 2492.0, "text": " And that works as long as you as the API does not change.", "tokens": [50364, 1042, 11, 309, 311, 406, 300, 6958, 1564, 291, 600, 1564, 291, 600, 13207, 281, 264, 31828, 3500, 300, 321, 600, 1027, 13, 50664, 50664, 1779, 13, 1079, 11, 2293, 13, 50764, 50764, 440, 472, 1194, 300, 286, 632, 562, 286, 700, 2198, 295, 2699, 76, 21884, 13695, 307, 411, 291, 8460, 439, 341, 9362, 490, 264, 21884, 13695, 34078, 7123, 3991, 420, 9362, 13, 51314, 51314, 400, 300, 1985, 382, 938, 382, 291, 382, 264, 9362, 775, 406, 1319, 13, 51514, 51514, 407, 498, 452, 7154, 293, 452, 1868, 917, 366, 12005, 11, 577, 360, 286, 1066, 552, 294, 20271, 30, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.09512194147649801, "compression_ratio": 1.5291828793774318, "no_caption_prob": 0.00010229231702396646}, {"id": 397, "seek": 246900, "start": 2492.0, "end": 2498.0, "text": " So if my server and my front end are separated, how do I keep them in sync?", "tokens": [50364, 1042, 11, 309, 311, 406, 300, 6958, 1564, 291, 600, 1564, 291, 600, 13207, 281, 264, 31828, 3500, 300, 321, 600, 1027, 13, 50664, 50664, 1779, 13, 1079, 11, 2293, 13, 50764, 50764, 440, 472, 1194, 300, 286, 632, 562, 286, 700, 2198, 295, 2699, 76, 21884, 13695, 307, 411, 291, 8460, 439, 341, 9362, 490, 264, 21884, 13695, 34078, 7123, 3991, 420, 9362, 13, 51314, 51314, 400, 300, 1985, 382, 938, 382, 291, 382, 264, 9362, 775, 406, 1319, 13, 51514, 51514, 407, 498, 452, 7154, 293, 452, 1868, 917, 366, 12005, 11, 577, 360, 286, 1066, 552, 294, 20271, 30, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.09512194147649801, "compression_ratio": 1.5291828793774318, "no_caption_prob": 0.00010229231702396646}, {"id": 398, "seek": 249800, "start": 2498.0, "end": 2511.0, "text": " Right. OK, yes. So the way that I recommend people do this is so if you have a mono repo, which is our case, which is practical for this purpose.", "tokens": [50364, 1779, 13, 2264, 11, 2086, 13, 407, 264, 636, 300, 286, 2748, 561, 360, 341, 307, 370, 498, 291, 362, 257, 35624, 49040, 11, 597, 307, 527, 1389, 11, 597, 307, 8496, 337, 341, 4334, 13, 51014, 51014, 2264, 11, 665, 13, 3013, 286, 478, 257, 3429, 295, 35624, 1085, 329, 13, 39401, 456, 311, 257, 7154, 1319, 300, 2962, 428, 21884, 13695, 34078, 11, 51314, 51314], "temperature": 0.0, "avg_logprob": -0.11755701424419016, "compression_ratio": 1.4482758620689655, "no_caption_prob": 5.8289646403864026e-05}, {"id": 399, "seek": 249800, "start": 2511.0, "end": 2517.0, "text": " OK, good. Which I'm a fan of mono repos. Anytime there's a server change that changes your GraphQL schema,", "tokens": [50364, 1779, 13, 2264, 11, 2086, 13, 407, 264, 636, 300, 286, 2748, 561, 360, 341, 307, 370, 498, 291, 362, 257, 35624, 49040, 11, 597, 307, 527, 1389, 11, 597, 307, 8496, 337, 341, 4334, 13, 51014, 51014, 2264, 11, 665, 13, 3013, 286, 478, 257, 3429, 295, 35624, 1085, 329, 13, 39401, 456, 311, 257, 7154, 1319, 300, 2962, 428, 21884, 13695, 34078, 11, 51314, 51314], "temperature": 0.0, "avg_logprob": -0.11755701424419016, "compression_ratio": 1.4482758620689655, "no_caption_prob": 5.8289646403864026e-05}, {"id": 400, "seek": 251700, "start": 2517.0, "end": 2529.0, "text": " you can take that schema, generate your Elm GraphQL code, and you can actually verify that you have not broken any of the code you're calling.", "tokens": [50364, 291, 393, 747, 300, 34078, 11, 8460, 428, 2699, 76, 21884, 13695, 3089, 11, 293, 291, 393, 767, 16888, 300, 291, 362, 406, 5463, 604, 295, 264, 3089, 291, 434, 5141, 13, 50964, 50964, 1436, 498, 291, 370, 510, 311, 264, 1823, 510, 13, 1692, 366, 264, 4439, 291, 747, 13, 51214, 51214, 509, 366, 884, 257, 1322, 322, 428, 37777, 13, 509, 362, 257, 7154, 1319, 13, 51464, 51464, 509, 8460, 264, 21884, 13695, 34078, 490, 300, 13, 821, 366, 819, 2098, 281, 360, 300, 365, 819, 3873, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.0698987270923371, "compression_ratio": 1.6607142857142858, "no_caption_prob": 0.00020986481104046106}, {"id": 401, "seek": 251700, "start": 2529.0, "end": 2534.0, "text": " Because if you so here's the step here. Here are the steps you take.", "tokens": [50364, 291, 393, 747, 300, 34078, 11, 8460, 428, 2699, 76, 21884, 13695, 3089, 11, 293, 291, 393, 767, 16888, 300, 291, 362, 406, 5463, 604, 295, 264, 3089, 291, 434, 5141, 13, 50964, 50964, 1436, 498, 291, 370, 510, 311, 264, 1823, 510, 13, 1692, 366, 264, 4439, 291, 747, 13, 51214, 51214, 509, 366, 884, 257, 1322, 322, 428, 37777, 13, 509, 362, 257, 7154, 1319, 13, 51464, 51464, 509, 8460, 264, 21884, 13695, 34078, 490, 300, 13, 821, 366, 819, 2098, 281, 360, 300, 365, 819, 3873, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.0698987270923371, "compression_ratio": 1.6607142857142858, "no_caption_prob": 0.00020986481104046106}, {"id": 402, "seek": 251700, "start": 2534.0, "end": 2539.0, "text": " You are doing a build on your CI. You have a server change.", "tokens": [50364, 291, 393, 747, 300, 34078, 11, 8460, 428, 2699, 76, 21884, 13695, 3089, 11, 293, 291, 393, 767, 16888, 300, 291, 362, 406, 5463, 604, 295, 264, 3089, 291, 434, 5141, 13, 50964, 50964, 1436, 498, 291, 370, 510, 311, 264, 1823, 510, 13, 1692, 366, 264, 4439, 291, 747, 13, 51214, 51214, 509, 366, 884, 257, 1322, 322, 428, 37777, 13, 509, 362, 257, 7154, 1319, 13, 51464, 51464, 509, 8460, 264, 21884, 13695, 34078, 490, 300, 13, 821, 366, 819, 2098, 281, 360, 300, 365, 819, 3873, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.0698987270923371, "compression_ratio": 1.6607142857142858, "no_caption_prob": 0.00020986481104046106}, {"id": 403, "seek": 251700, "start": 2539.0, "end": 2544.0, "text": " You generate the GraphQL schema from that. There are different ways to do that with different tools.", "tokens": [50364, 291, 393, 747, 300, 34078, 11, 8460, 428, 2699, 76, 21884, 13695, 3089, 11, 293, 291, 393, 767, 16888, 300, 291, 362, 406, 5463, 604, 295, 264, 3089, 291, 434, 5141, 13, 50964, 50964, 1436, 498, 291, 370, 510, 311, 264, 1823, 510, 13, 1692, 366, 264, 4439, 291, 747, 13, 51214, 51214, 509, 366, 884, 257, 1322, 322, 428, 37777, 13, 509, 362, 257, 7154, 1319, 13, 51464, 51464, 509, 8460, 264, 21884, 13695, 34078, 490, 300, 13, 821, 366, 819, 2098, 281, 360, 300, 365, 819, 3873, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.0698987270923371, "compression_ratio": 1.6607142857142858, "no_caption_prob": 0.00020986481104046106}, {"id": 404, "seek": 254400, "start": 2544.0, "end": 2549.0, "text": " But now you have the latest schema that you're that you're saying I would like to deploy.", "tokens": [50364, 583, 586, 291, 362, 264, 6792, 34078, 300, 291, 434, 300, 291, 434, 1566, 286, 576, 411, 281, 7274, 13, 50614, 50614, 1779, 13, 407, 550, 291, 747, 300, 34078, 11, 291, 3154, 300, 666, 264, 2699, 76, 21884, 13695, 12855, 40, 2290, 11, 597, 307, 516, 281, 8460, 264, 6792, 3089, 13, 51064, 51064, 407, 586, 291, 600, 10588, 264, 10833, 3089, 420, 10833, 264, 6792, 2699, 76, 21884, 13695, 3089, 13, 51364, 51364, 400, 586, 291, 1190, 2699, 76, 652, 322, 428, 3089, 13, 759, 456, 390, 257, 7697, 1319, 293, 291, 1367, 3502, 322, 309, 11, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.055056187713030474, "compression_ratio": 1.75, "no_caption_prob": 0.00010390357056166977}, {"id": 405, "seek": 254400, "start": 2549.0, "end": 2558.0, "text": " Right. So then you take that schema, you feed that into the Elm GraphQL CLI tool, which is going to generate the latest code.", "tokens": [50364, 583, 586, 291, 362, 264, 6792, 34078, 300, 291, 434, 300, 291, 434, 1566, 286, 576, 411, 281, 7274, 13, 50614, 50614, 1779, 13, 407, 550, 291, 747, 300, 34078, 11, 291, 3154, 300, 666, 264, 2699, 76, 21884, 13695, 12855, 40, 2290, 11, 597, 307, 516, 281, 8460, 264, 6792, 3089, 13, 51064, 51064, 407, 586, 291, 600, 10588, 264, 10833, 3089, 420, 10833, 264, 6792, 2699, 76, 21884, 13695, 3089, 13, 51364, 51364, 400, 586, 291, 1190, 2699, 76, 652, 322, 428, 3089, 13, 759, 456, 390, 257, 7697, 1319, 293, 291, 1367, 3502, 322, 309, 11, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.055056187713030474, "compression_ratio": 1.75, "no_caption_prob": 0.00010390357056166977}, {"id": 406, "seek": 254400, "start": 2558.0, "end": 2564.0, "text": " So now you've updated the generated code or generated the latest Elm GraphQL code.", "tokens": [50364, 583, 586, 291, 362, 264, 6792, 34078, 300, 291, 434, 300, 291, 434, 1566, 286, 576, 411, 281, 7274, 13, 50614, 50614, 1779, 13, 407, 550, 291, 747, 300, 34078, 11, 291, 3154, 300, 666, 264, 2699, 76, 21884, 13695, 12855, 40, 2290, 11, 597, 307, 516, 281, 8460, 264, 6792, 3089, 13, 51064, 51064, 407, 586, 291, 600, 10588, 264, 10833, 3089, 420, 10833, 264, 6792, 2699, 76, 21884, 13695, 3089, 13, 51364, 51364, 400, 586, 291, 1190, 2699, 76, 652, 322, 428, 3089, 13, 759, 456, 390, 257, 7697, 1319, 293, 291, 1367, 3502, 322, 309, 11, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.055056187713030474, "compression_ratio": 1.75, "no_caption_prob": 0.00010390357056166977}, {"id": 407, "seek": 254400, "start": 2564.0, "end": 2570.0, "text": " And now you run Elm make on your code. If there was a breaking change and you depended on it,", "tokens": [50364, 583, 586, 291, 362, 264, 6792, 34078, 300, 291, 434, 300, 291, 434, 1566, 286, 576, 411, 281, 7274, 13, 50614, 50614, 1779, 13, 407, 550, 291, 747, 300, 34078, 11, 291, 3154, 300, 666, 264, 2699, 76, 21884, 13695, 12855, 40, 2290, 11, 597, 307, 516, 281, 8460, 264, 6792, 3089, 13, 51064, 51064, 407, 586, 291, 600, 10588, 264, 10833, 3089, 420, 10833, 264, 6792, 2699, 76, 21884, 13695, 3089, 13, 51364, 51364, 400, 586, 291, 1190, 2699, 76, 652, 322, 428, 3089, 13, 759, 456, 390, 257, 7697, 1319, 293, 291, 1367, 3502, 322, 309, 11, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.055056187713030474, "compression_ratio": 1.75, "no_caption_prob": 0.00010390357056166977}, {"id": 408, "seek": 257000, "start": 2570.0, "end": 2578.0, "text": " if you removed person dot first name and last name in favor of full name and your code was calling it,", "tokens": [50364, 498, 291, 7261, 954, 5893, 700, 1315, 293, 1036, 1315, 294, 2294, 295, 1577, 1315, 293, 428, 3089, 390, 5141, 309, 11, 50764, 50764, 300, 3089, 486, 2699, 76, 652, 486, 976, 364, 6713, 13, 407, 428, 777, 7154, 34078, 1319, 775, 406, 352, 1621, 13, 51064, 51064, 663, 307, 588, 1481, 562, 291, 658, 257, 7154, 1469, 293, 257, 1868, 917, 1469, 293, 264, 2636, 1469, 775, 406, 534, 458, 577, 291, 764, 309, 13, 51414, 51414, 1012, 291, 764, 264, 21884, 13695, 9362, 294, 264, 1868, 917, 13, 814, 733, 295, 362, 257, 4514, 2533, 300, 1619, 11, 4177, 11, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.12450130930486715, "compression_ratio": 1.6954732510288066, "no_caption_prob": 3.269685112172738e-05}, {"id": 409, "seek": 257000, "start": 2578.0, "end": 2584.0, "text": " that code will Elm make will give an error. So your new server schema change does not go live.", "tokens": [50364, 498, 291, 7261, 954, 5893, 700, 1315, 293, 1036, 1315, 294, 2294, 295, 1577, 1315, 293, 428, 3089, 390, 5141, 309, 11, 50764, 50764, 300, 3089, 486, 2699, 76, 652, 486, 976, 364, 6713, 13, 407, 428, 777, 7154, 34078, 1319, 775, 406, 352, 1621, 13, 51064, 51064, 663, 307, 588, 1481, 562, 291, 658, 257, 7154, 1469, 293, 257, 1868, 917, 1469, 293, 264, 2636, 1469, 775, 406, 534, 458, 577, 291, 764, 309, 13, 51414, 51414, 1012, 291, 764, 264, 21884, 13695, 9362, 294, 264, 1868, 917, 13, 814, 733, 295, 362, 257, 4514, 2533, 300, 1619, 11, 4177, 11, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.12450130930486715, "compression_ratio": 1.6954732510288066, "no_caption_prob": 3.269685112172738e-05}, {"id": 410, "seek": 257000, "start": 2584.0, "end": 2591.0, "text": " That is very nice when you got a server team and a front end team and the third team does not really know how you use it.", "tokens": [50364, 498, 291, 7261, 954, 5893, 700, 1315, 293, 1036, 1315, 294, 2294, 295, 1577, 1315, 293, 428, 3089, 390, 5141, 309, 11, 50764, 50764, 300, 3089, 486, 2699, 76, 652, 486, 976, 364, 6713, 13, 407, 428, 777, 7154, 34078, 1319, 775, 406, 352, 1621, 13, 51064, 51064, 663, 307, 588, 1481, 562, 291, 658, 257, 7154, 1469, 293, 257, 1868, 917, 1469, 293, 264, 2636, 1469, 775, 406, 534, 458, 577, 291, 764, 309, 13, 51414, 51414, 1012, 291, 764, 264, 21884, 13695, 9362, 294, 264, 1868, 917, 13, 814, 733, 295, 362, 257, 4514, 2533, 300, 1619, 11, 4177, 11, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.12450130930486715, "compression_ratio": 1.6954732510288066, "no_caption_prob": 3.269685112172738e-05}, {"id": 411, "seek": 257000, "start": 2591.0, "end": 2597.0, "text": " How you use the GraphQL API in the front end. They kind of have a safety net that says, hey,", "tokens": [50364, 498, 291, 7261, 954, 5893, 700, 1315, 293, 1036, 1315, 294, 2294, 295, 1577, 1315, 293, 428, 3089, 390, 5141, 309, 11, 50764, 50764, 300, 3089, 486, 2699, 76, 652, 486, 976, 364, 6713, 13, 407, 428, 777, 7154, 34078, 1319, 775, 406, 352, 1621, 13, 51064, 51064, 663, 307, 588, 1481, 562, 291, 658, 257, 7154, 1469, 293, 257, 1868, 917, 1469, 293, 264, 2636, 1469, 775, 406, 534, 458, 577, 291, 764, 309, 13, 51414, 51414, 1012, 291, 764, 264, 21884, 13695, 9362, 294, 264, 1868, 917, 13, 814, 733, 295, 362, 257, 4514, 2533, 300, 1619, 11, 4177, 11, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.12450130930486715, "compression_ratio": 1.6954732510288066, "no_caption_prob": 3.269685112172738e-05}, {"id": 412, "seek": 259700, "start": 2597.0, "end": 2602.0, "text": " I'm not going to break the front end because there there is this build step.", "tokens": [50364, 286, 478, 406, 516, 281, 1821, 264, 1868, 917, 570, 456, 456, 307, 341, 1322, 1823, 13, 50614, 50614, 1079, 11, 2293, 13, 400, 322, 264, 7929, 1252, 11, 309, 767, 2709, 291, 544, 6687, 466, 12720, 721, 300, 291, 528, 281, 1367, 13867, 473, 13, 51014, 51014, 823, 11, 257, 688, 295, 561, 294, 264, 21884, 13695, 1768, 751, 466, 406, 3037, 278, 641, 21445, 293, 406, 884, 7697, 2962, 13, 51414, 51414, 286, 5665, 500, 380, 536, 257, 1154, 365, 884, 257, 7697, 1319, 365, 291, 458, 11, 291, 393, 1367, 13867, 473, 7909, 294, 21884, 13695, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.0603558375285222, "compression_ratio": 1.6436781609195403, "no_caption_prob": 6.709057925036177e-05}, {"id": 413, "seek": 259700, "start": 2602.0, "end": 2610.0, "text": " Yes, exactly. And on the flip side, it actually gives you more confidence about removing things that you want to deprecate.", "tokens": [50364, 286, 478, 406, 516, 281, 1821, 264, 1868, 917, 570, 456, 456, 307, 341, 1322, 1823, 13, 50614, 50614, 1079, 11, 2293, 13, 400, 322, 264, 7929, 1252, 11, 309, 767, 2709, 291, 544, 6687, 466, 12720, 721, 300, 291, 528, 281, 1367, 13867, 473, 13, 51014, 51014, 823, 11, 257, 688, 295, 561, 294, 264, 21884, 13695, 1768, 751, 466, 406, 3037, 278, 641, 21445, 293, 406, 884, 7697, 2962, 13, 51414, 51414, 286, 5665, 500, 380, 536, 257, 1154, 365, 884, 257, 7697, 1319, 365, 291, 458, 11, 291, 393, 1367, 13867, 473, 7909, 294, 21884, 13695, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.0603558375285222, "compression_ratio": 1.6436781609195403, "no_caption_prob": 6.709057925036177e-05}, {"id": 414, "seek": 259700, "start": 2610.0, "end": 2618.0, "text": " Now, a lot of people in the GraphQL community talk about not versioning their APIs and not doing breaking changes.", "tokens": [50364, 286, 478, 406, 516, 281, 1821, 264, 1868, 917, 570, 456, 456, 307, 341, 1322, 1823, 13, 50614, 50614, 1079, 11, 2293, 13, 400, 322, 264, 7929, 1252, 11, 309, 767, 2709, 291, 544, 6687, 466, 12720, 721, 300, 291, 528, 281, 1367, 13867, 473, 13, 51014, 51014, 823, 11, 257, 688, 295, 561, 294, 264, 21884, 13695, 1768, 751, 466, 406, 3037, 278, 641, 21445, 293, 406, 884, 7697, 2962, 13, 51414, 51414, 286, 5665, 500, 380, 536, 257, 1154, 365, 884, 257, 7697, 1319, 365, 291, 458, 11, 291, 393, 1367, 13867, 473, 7909, 294, 21884, 13695, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.0603558375285222, "compression_ratio": 1.6436781609195403, "no_caption_prob": 6.709057925036177e-05}, {"id": 415, "seek": 259700, "start": 2618.0, "end": 2626.0, "text": " I personally don't see a problem with doing a breaking change with you know, you can deprecate fields in GraphQL.", "tokens": [50364, 286, 478, 406, 516, 281, 1821, 264, 1868, 917, 570, 456, 456, 307, 341, 1322, 1823, 13, 50614, 50614, 1079, 11, 2293, 13, 400, 322, 264, 7929, 1252, 11, 309, 767, 2709, 291, 544, 6687, 466, 12720, 721, 300, 291, 528, 281, 1367, 13867, 473, 13, 51014, 51014, 823, 11, 257, 688, 295, 561, 294, 264, 21884, 13695, 1768, 751, 466, 406, 3037, 278, 641, 21445, 293, 406, 884, 7697, 2962, 13, 51414, 51414, 286, 5665, 500, 380, 536, 257, 1154, 365, 884, 257, 7697, 1319, 365, 291, 458, 11, 291, 393, 1367, 13867, 473, 7909, 294, 21884, 13695, 13, 51814, 51814], "temperature": 0.0, "avg_logprob": -0.0603558375285222, "compression_ratio": 1.6436781609195403, "no_caption_prob": 6.709057925036177e-05}, {"id": 416, "seek": 262600, "start": 2626.0, "end": 2635.0, "text": " You can have like a sort of safety window and you can do it using these techniques in your build system so that you are guaranteeing that things are in lockstep.", "tokens": [50364, 509, 393, 362, 411, 257, 1333, 295, 4514, 4910, 293, 291, 393, 360, 309, 1228, 613, 7512, 294, 428, 1322, 1185, 370, 300, 291, 366, 10815, 278, 300, 721, 366, 294, 4017, 16792, 13, 50814, 50814, 400, 370, 291, 393, 360, 309, 294, 257, 3273, 636, 13, 286, 519, 309, 311, 309, 311, 257, 10585, 551, 281, 360, 13, 51014, 51014, 400, 309, 2709, 291, 544, 6687, 570, 291, 458, 300, 291, 600, 5936, 5413, 322, 721, 562, 562, 300, 1322, 1709, 1621, 13, 51314, 51314, 663, 848, 11, 300, 1177, 380, 10815, 300, 2618, 307, 406, 322, 257, 3037, 490, 1036, 1243, 13, 51564, 51564, 865, 11, 411, 264, 1868, 300, 575, 406, 668, 17826, 1939, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.08191376826802238, "compression_ratio": 1.7667844522968197, "no_caption_prob": 3.7635960325133055e-05}, {"id": 417, "seek": 262600, "start": 2635.0, "end": 2639.0, "text": " And so you can do it in a safe way. I think it's it's a reasonable thing to do.", "tokens": [50364, 509, 393, 362, 411, 257, 1333, 295, 4514, 4910, 293, 291, 393, 360, 309, 1228, 613, 7512, 294, 428, 1322, 1185, 370, 300, 291, 366, 10815, 278, 300, 721, 366, 294, 4017, 16792, 13, 50814, 50814, 400, 370, 291, 393, 360, 309, 294, 257, 3273, 636, 13, 286, 519, 309, 311, 309, 311, 257, 10585, 551, 281, 360, 13, 51014, 51014, 400, 309, 2709, 291, 544, 6687, 570, 291, 458, 300, 291, 600, 5936, 5413, 322, 721, 562, 562, 300, 1322, 1709, 1621, 13, 51314, 51314, 663, 848, 11, 300, 1177, 380, 10815, 300, 2618, 307, 406, 322, 257, 3037, 490, 1036, 1243, 13, 51564, 51564, 865, 11, 411, 264, 1868, 300, 575, 406, 668, 17826, 1939, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.08191376826802238, "compression_ratio": 1.7667844522968197, "no_caption_prob": 3.7635960325133055e-05}, {"id": 418, "seek": 262600, "start": 2639.0, "end": 2645.0, "text": " And it gives you more confidence because you know that you've stopped depending on things when when that build goes live.", "tokens": [50364, 509, 393, 362, 411, 257, 1333, 295, 4514, 4910, 293, 291, 393, 360, 309, 1228, 613, 7512, 294, 428, 1322, 1185, 370, 300, 291, 366, 10815, 278, 300, 721, 366, 294, 4017, 16792, 13, 50814, 50814, 400, 370, 291, 393, 360, 309, 294, 257, 3273, 636, 13, 286, 519, 309, 311, 309, 311, 257, 10585, 551, 281, 360, 13, 51014, 51014, 400, 309, 2709, 291, 544, 6687, 570, 291, 458, 300, 291, 600, 5936, 5413, 322, 721, 562, 562, 300, 1322, 1709, 1621, 13, 51314, 51314, 663, 848, 11, 300, 1177, 380, 10815, 300, 2618, 307, 406, 322, 257, 3037, 490, 1036, 1243, 13, 51564, 51564, 865, 11, 411, 264, 1868, 300, 575, 406, 668, 17826, 1939, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.08191376826802238, "compression_ratio": 1.7667844522968197, "no_caption_prob": 3.7635960325133055e-05}, {"id": 419, "seek": 262600, "start": 2645.0, "end": 2650.0, "text": " That said, that doesn't guarantee that somebody is not on a version from last week.", "tokens": [50364, 509, 393, 362, 411, 257, 1333, 295, 4514, 4910, 293, 291, 393, 360, 309, 1228, 613, 7512, 294, 428, 1322, 1185, 370, 300, 291, 366, 10815, 278, 300, 721, 366, 294, 4017, 16792, 13, 50814, 50814, 400, 370, 291, 393, 360, 309, 294, 257, 3273, 636, 13, 286, 519, 309, 311, 309, 311, 257, 10585, 551, 281, 360, 13, 51014, 51014, 400, 309, 2709, 291, 544, 6687, 570, 291, 458, 300, 291, 600, 5936, 5413, 322, 721, 562, 562, 300, 1322, 1709, 1621, 13, 51314, 51314, 663, 848, 11, 300, 1177, 380, 10815, 300, 2618, 307, 406, 322, 257, 3037, 490, 1036, 1243, 13, 51564, 51564, 865, 11, 411, 264, 1868, 300, 575, 406, 668, 17826, 1939, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.08191376826802238, "compression_ratio": 1.7667844522968197, "no_caption_prob": 3.7635960325133055e-05}, {"id": 420, "seek": 262600, "start": 2650.0, "end": 2654.0, "text": " Yeah, like the front that has not been deployed yet.", "tokens": [50364, 509, 393, 362, 411, 257, 1333, 295, 4514, 4910, 293, 291, 393, 360, 309, 1228, 613, 7512, 294, 428, 1322, 1185, 370, 300, 291, 366, 10815, 278, 300, 721, 366, 294, 4017, 16792, 13, 50814, 50814, 400, 370, 291, 393, 360, 309, 294, 257, 3273, 636, 13, 286, 519, 309, 311, 309, 311, 257, 10585, 551, 281, 360, 13, 51014, 51014, 400, 309, 2709, 291, 544, 6687, 570, 291, 458, 300, 291, 600, 5936, 5413, 322, 721, 562, 562, 300, 1322, 1709, 1621, 13, 51314, 51314, 663, 848, 11, 300, 1177, 380, 10815, 300, 2618, 307, 406, 322, 257, 3037, 490, 1036, 1243, 13, 51564, 51564, 865, 11, 411, 264, 1868, 300, 575, 406, 668, 17826, 1939, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.08191376826802238, "compression_ratio": 1.7667844522968197, "no_caption_prob": 3.7635960325133055e-05}, {"id": 421, "seek": 265400, "start": 2654.0, "end": 2663.0, "text": " So there are different ways to manage that. But I actually I do know for a fact that that some people, you know, will check.", "tokens": [50364, 407, 456, 366, 819, 2098, 281, 3067, 300, 13, 583, 286, 767, 286, 360, 458, 337, 257, 1186, 300, 300, 512, 561, 11, 291, 458, 11, 486, 1520, 13, 50814, 50814, 814, 603, 1520, 264, 17826, 3037, 1970, 264, 6423, 1252, 3037, 13, 51064, 51064, 400, 11, 291, 458, 11, 498, 456, 311, 257, 23220, 852, 11, 550, 291, 393, 11, 291, 458, 11, 25628, 420, 12286, 264, 4195, 420, 456, 366, 819, 2098, 281, 3109, 309, 13, 51414, 51414], "temperature": 0.0, "avg_logprob": -0.08115982427829649, "compression_ratio": 1.6858638743455496, "no_caption_prob": 0.00024152864352799952}, {"id": 422, "seek": 265400, "start": 2663.0, "end": 2668.0, "text": " They'll check the deployed version against the client side version.", "tokens": [50364, 407, 456, 366, 819, 2098, 281, 3067, 300, 13, 583, 286, 767, 286, 360, 458, 337, 257, 1186, 300, 300, 512, 561, 11, 291, 458, 11, 486, 1520, 13, 50814, 50814, 814, 603, 1520, 264, 17826, 3037, 1970, 264, 6423, 1252, 3037, 13, 51064, 51064, 400, 11, 291, 458, 11, 498, 456, 311, 257, 23220, 852, 11, 550, 291, 393, 11, 291, 458, 11, 25628, 420, 12286, 264, 4195, 420, 456, 366, 819, 2098, 281, 3109, 309, 13, 51414, 51414], "temperature": 0.0, "avg_logprob": -0.08115982427829649, "compression_ratio": 1.6858638743455496, "no_caption_prob": 0.00024152864352799952}, {"id": 423, "seek": 265400, "start": 2668.0, "end": 2675.0, "text": " And, you know, if there's a mismatch, then you can, you know, reload or warn the user or there are different ways to approach it.", "tokens": [50364, 407, 456, 366, 819, 2098, 281, 3067, 300, 13, 583, 286, 767, 286, 360, 458, 337, 257, 1186, 300, 300, 512, 561, 11, 291, 458, 11, 486, 1520, 13, 50814, 50814, 814, 603, 1520, 264, 17826, 3037, 1970, 264, 6423, 1252, 3037, 13, 51064, 51064, 400, 11, 291, 458, 11, 498, 456, 311, 257, 23220, 852, 11, 550, 291, 393, 11, 291, 458, 11, 25628, 420, 12286, 264, 4195, 420, 456, 366, 819, 2098, 281, 3109, 309, 13, 51414, 51414], "temperature": 0.0, "avg_logprob": -0.08115982427829649, "compression_ratio": 1.6858638743455496, "no_caption_prob": 0.00024152864352799952}, {"id": 424, "seek": 267500, "start": 2675.0, "end": 2685.0, "text": " You could also keep track. You could increment some version number on your CI anytime you have a breaking GraphQL change.", "tokens": [50364, 509, 727, 611, 1066, 2837, 13, 509, 727, 26200, 512, 3037, 1230, 322, 428, 37777, 13038, 291, 362, 257, 7697, 21884, 13695, 1319, 13, 50864, 50864, 1779, 13, 400, 291, 727, 584, 11, 2264, 11, 321, 500, 380, 643, 281, 21022, 13038, 264, 6423, 293, 7154, 366, 484, 295, 20271, 787, 498, 456, 575, 668, 257, 7697, 1319, 13, 51314, 51314, 400, 370, 291, 727, 1520, 337, 300, 13, 407, 456, 366, 257, 1230, 295, 2098, 281, 2028, 365, 300, 13, 583, 286, 519, 286, 519, 309, 311, 1596, 41183, 13, 51564, 51564, 821, 366, 257, 688, 295, 3873, 412, 428, 26400, 456, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.055982351303100586, "compression_ratio": 1.6564885496183206, "no_caption_prob": 0.0002002274850383401}, {"id": 425, "seek": 267500, "start": 2685.0, "end": 2694.0, "text": " Right. And you could say, OK, we don't need to restart anytime the client and server are out of sync only if there has been a breaking change.", "tokens": [50364, 509, 727, 611, 1066, 2837, 13, 509, 727, 26200, 512, 3037, 1230, 322, 428, 37777, 13038, 291, 362, 257, 7697, 21884, 13695, 1319, 13, 50864, 50864, 1779, 13, 400, 291, 727, 584, 11, 2264, 11, 321, 500, 380, 643, 281, 21022, 13038, 264, 6423, 293, 7154, 366, 484, 295, 20271, 787, 498, 456, 575, 668, 257, 7697, 1319, 13, 51314, 51314, 400, 370, 291, 727, 1520, 337, 300, 13, 407, 456, 366, 257, 1230, 295, 2098, 281, 2028, 365, 300, 13, 583, 286, 519, 286, 519, 309, 311, 1596, 41183, 13, 51564, 51564, 821, 366, 257, 688, 295, 3873, 412, 428, 26400, 456, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.055982351303100586, "compression_ratio": 1.6564885496183206, "no_caption_prob": 0.0002002274850383401}, {"id": 426, "seek": 267500, "start": 2694.0, "end": 2699.0, "text": " And so you could check for that. So there are a number of ways to deal with that. But I think I think it's quite doable.", "tokens": [50364, 509, 727, 611, 1066, 2837, 13, 509, 727, 26200, 512, 3037, 1230, 322, 428, 37777, 13038, 291, 362, 257, 7697, 21884, 13695, 1319, 13, 50864, 50864, 1779, 13, 400, 291, 727, 584, 11, 2264, 11, 321, 500, 380, 643, 281, 21022, 13038, 264, 6423, 293, 7154, 366, 484, 295, 20271, 787, 498, 456, 575, 668, 257, 7697, 1319, 13, 51314, 51314, 400, 370, 291, 727, 1520, 337, 300, 13, 407, 456, 366, 257, 1230, 295, 2098, 281, 2028, 365, 300, 13, 583, 286, 519, 286, 519, 309, 311, 1596, 41183, 13, 51564, 51564, 821, 366, 257, 688, 295, 3873, 412, 428, 26400, 456, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.055982351303100586, "compression_ratio": 1.6564885496183206, "no_caption_prob": 0.0002002274850383401}, {"id": 427, "seek": 267500, "start": 2699.0, "end": 2701.0, "text": " There are a lot of tools at your disposal there.", "tokens": [50364, 509, 727, 611, 1066, 2837, 13, 509, 727, 26200, 512, 3037, 1230, 322, 428, 37777, 13038, 291, 362, 257, 7697, 21884, 13695, 1319, 13, 50864, 50864, 1779, 13, 400, 291, 727, 584, 11, 2264, 11, 321, 500, 380, 643, 281, 21022, 13038, 264, 6423, 293, 7154, 366, 484, 295, 20271, 787, 498, 456, 575, 668, 257, 7697, 1319, 13, 51314, 51314, 400, 370, 291, 727, 1520, 337, 300, 13, 407, 456, 366, 257, 1230, 295, 2098, 281, 2028, 365, 300, 13, 583, 286, 519, 286, 519, 309, 311, 1596, 41183, 13, 51564, 51564, 821, 366, 257, 688, 295, 3873, 412, 428, 26400, 456, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.055982351303100586, "compression_ratio": 1.6564885496183206, "no_caption_prob": 0.0002002274850383401}, {"id": 428, "seek": 270100, "start": 2701.0, "end": 2706.0, "text": " So what about when the server and the front end are not in the same repo?", "tokens": [50364, 407, 437, 466, 562, 264, 7154, 293, 264, 1868, 917, 366, 406, 294, 264, 912, 49040, 30, 50614, 50614, 1144, 291, 550, 853, 281, 5042, 7697, 2962, 293, 362, 264, 34078, 6572, 4079, 689, 264, 1868, 917, 393, 764, 309, 337, 412, 1322, 565, 30, 51064, 51064, 509, 727, 13, 286, 914, 11, 412, 300, 935, 11, 291, 727, 3297, 853, 281, 445, 5042, 7697, 2962, 13, 51364, 51364, 821, 366, 456, 366, 3873, 484, 456, 300, 486, 976, 291, 257, 9164, 498, 291, 652, 257, 7697, 1319, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.0565855836355558, "compression_ratio": 1.7455357142857142, "no_caption_prob": 0.00011591254587983713}, {"id": 429, "seek": 270100, "start": 2706.0, "end": 2715.0, "text": " Do you then try to avoid breaking changes and have the schema published somewhere where the front end can use it for at build time?", "tokens": [50364, 407, 437, 466, 562, 264, 7154, 293, 264, 1868, 917, 366, 406, 294, 264, 912, 49040, 30, 50614, 50614, 1144, 291, 550, 853, 281, 5042, 7697, 2962, 293, 362, 264, 34078, 6572, 4079, 689, 264, 1868, 917, 393, 764, 309, 337, 412, 1322, 565, 30, 51064, 51064, 509, 727, 13, 286, 914, 11, 412, 300, 935, 11, 291, 727, 3297, 853, 281, 445, 5042, 7697, 2962, 13, 51364, 51364, 821, 366, 456, 366, 3873, 484, 456, 300, 486, 976, 291, 257, 9164, 498, 291, 652, 257, 7697, 1319, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.0565855836355558, "compression_ratio": 1.7455357142857142, "no_caption_prob": 0.00011591254587983713}, {"id": 430, "seek": 270100, "start": 2715.0, "end": 2721.0, "text": " You could. I mean, at that point, you could certainly try to just avoid breaking changes.", "tokens": [50364, 407, 437, 466, 562, 264, 7154, 293, 264, 1868, 917, 366, 406, 294, 264, 912, 49040, 30, 50614, 50614, 1144, 291, 550, 853, 281, 5042, 7697, 2962, 293, 362, 264, 34078, 6572, 4079, 689, 264, 1868, 917, 393, 764, 309, 337, 412, 1322, 565, 30, 51064, 51064, 509, 727, 13, 286, 914, 11, 412, 300, 935, 11, 291, 727, 3297, 853, 281, 445, 5042, 7697, 2962, 13, 51364, 51364, 821, 366, 456, 366, 3873, 484, 456, 300, 486, 976, 291, 257, 9164, 498, 291, 652, 257, 7697, 1319, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.0565855836355558, "compression_ratio": 1.7455357142857142, "no_caption_prob": 0.00011591254587983713}, {"id": 431, "seek": 270100, "start": 2721.0, "end": 2726.0, "text": " There are there are tools out there that will give you a warning if you make a breaking change.", "tokens": [50364, 407, 437, 466, 562, 264, 7154, 293, 264, 1868, 917, 366, 406, 294, 264, 912, 49040, 30, 50614, 50614, 1144, 291, 550, 853, 281, 5042, 7697, 2962, 293, 362, 264, 34078, 6572, 4079, 689, 264, 1868, 917, 393, 764, 309, 337, 412, 1322, 565, 30, 51064, 51064, 509, 727, 13, 286, 914, 11, 412, 300, 935, 11, 291, 727, 3297, 853, 281, 445, 5042, 7697, 2962, 13, 51364, 51364, 821, 366, 456, 366, 3873, 484, 456, 300, 486, 976, 291, 257, 9164, 498, 291, 652, 257, 7697, 1319, 13, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.0565855836355558, "compression_ratio": 1.7455357142857142, "no_caption_prob": 0.00011591254587983713}, {"id": 432, "seek": 272600, "start": 2726.0, "end": 2737.0, "text": " So you could at least put in a stopgap that says if there is GraphQL schema breaking change, then maybe it needs to be built with a certain flag or exactly something like that.", "tokens": [50364, 407, 291, 727, 412, 1935, 829, 294, 257, 1590, 70, 569, 300, 1619, 498, 456, 307, 21884, 13695, 34078, 7697, 1319, 11, 550, 1310, 309, 2203, 281, 312, 3094, 365, 257, 1629, 7166, 420, 2293, 746, 411, 300, 13, 50914, 50914, 407, 300, 311, 300, 311, 472, 6532, 412, 428, 26400, 11, 886, 13, 509, 727, 611, 291, 727, 611, 445, 291, 458, 11, 754, 498, 309, 311, 257, 35624, 49040, 11, 754, 498, 309, 311, 406, 257, 35624, 49040, 11, 291, 727, 322, 264, 646, 917, 949, 291, 652, 604, 2962, 281, 264, 34078, 11, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.0758723783493042, "compression_ratio": 1.694915254237288, "no_caption_prob": 0.0002570990764070302}, {"id": 433, "seek": 272600, "start": 2737.0, "end": 2750.0, "text": " So that's that's one technique at your disposal, too. You could also you could also just you know, even if it's a mono repo, even if it's not a mono repo, you could on the back end before you make any changes to the schema,", "tokens": [50364, 407, 291, 727, 412, 1935, 829, 294, 257, 1590, 70, 569, 300, 1619, 498, 456, 307, 21884, 13695, 34078, 7697, 1319, 11, 550, 1310, 309, 2203, 281, 312, 3094, 365, 257, 1629, 7166, 420, 2293, 746, 411, 300, 13, 50914, 50914, 407, 300, 311, 300, 311, 472, 6532, 412, 428, 26400, 11, 886, 13, 509, 727, 611, 291, 727, 611, 445, 291, 458, 11, 754, 498, 309, 311, 257, 35624, 49040, 11, 754, 498, 309, 311, 406, 257, 35624, 49040, 11, 291, 727, 322, 264, 646, 917, 949, 291, 652, 604, 2962, 281, 264, 34078, 11, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.0758723783493042, "compression_ratio": 1.694915254237288, "no_caption_prob": 0.0002570990764070302}, {"id": 434, "seek": 275000, "start": 2750.0, "end": 2758.0, "text": " you could fetch the latest client side code, clone that repo and run Elm make on it and make sure everything's OK.", "tokens": [50364, 291, 727, 23673, 264, 6792, 6423, 1252, 3089, 11, 26506, 300, 49040, 293, 1190, 2699, 76, 652, 322, 309, 293, 652, 988, 1203, 311, 2264, 13, 50764, 50764, 407, 291, 393, 920, 4584, 411, 512, 295, 729, 1333, 295, 10891, 295, 257, 35624, 49040, 11, 754, 498, 309, 311, 406, 12120, 257, 35624, 49040, 13, 51064, 51064, 865, 13, 400, 550, 11, 1338, 11, 309, 311, 5240, 466, 13635, 13, 1743, 445, 562, 291, 360, 33283, 5498, 11, 558, 30, 51414, 51414], "temperature": 0.0, "avg_logprob": -0.11631011962890625, "compression_ratio": 1.5, "no_caption_prob": 6.013892561895773e-05}, {"id": 435, "seek": 275000, "start": 2758.0, "end": 2764.0, "text": " So you can still achieve like some of those sort of characteristics of a mono repo, even if it's not technically a mono repo.", "tokens": [50364, 291, 727, 23673, 264, 6792, 6423, 1252, 3089, 11, 26506, 300, 49040, 293, 1190, 2699, 76, 652, 322, 309, 293, 652, 988, 1203, 311, 2264, 13, 50764, 50764, 407, 291, 393, 920, 4584, 411, 512, 295, 729, 1333, 295, 10891, 295, 257, 35624, 49040, 11, 754, 498, 309, 311, 406, 12120, 257, 35624, 49040, 13, 51064, 51064, 865, 13, 400, 550, 11, 1338, 11, 309, 311, 5240, 466, 13635, 13, 1743, 445, 562, 291, 360, 33283, 5498, 11, 558, 30, 51414, 51414], "temperature": 0.0, "avg_logprob": -0.11631011962890625, "compression_ratio": 1.5, "no_caption_prob": 6.013892561895773e-05}, {"id": 436, "seek": 275000, "start": 2764.0, "end": 2771.0, "text": " Yeah. And then, yeah, it's mostly about discipline. Like just when you do HTTP calls, right?", "tokens": [50364, 291, 727, 23673, 264, 6792, 6423, 1252, 3089, 11, 26506, 300, 49040, 293, 1190, 2699, 76, 652, 322, 309, 293, 652, 988, 1203, 311, 2264, 13, 50764, 50764, 407, 291, 393, 920, 4584, 411, 512, 295, 729, 1333, 295, 10891, 295, 257, 35624, 49040, 11, 754, 498, 309, 311, 406, 12120, 257, 35624, 49040, 13, 51064, 51064, 865, 13, 400, 550, 11, 1338, 11, 309, 311, 5240, 466, 13635, 13, 1743, 445, 562, 291, 360, 33283, 5498, 11, 558, 30, 51414, 51414], "temperature": 0.0, "avg_logprob": -0.11631011962890625, "compression_ratio": 1.5, "no_caption_prob": 6.013892561895773e-05}, {"id": 437, "seek": 277100, "start": 2771.0, "end": 2785.0, "text": " The thing is, it doesn't feel nice because you have Elm GraphQL that promises a lot of type safety and then you have to kind of trust whatever the server is giving you because you might be out of date.", "tokens": [50364, 440, 551, 307, 11, 309, 1177, 380, 841, 1481, 570, 291, 362, 2699, 76, 21884, 13695, 300, 16403, 257, 688, 295, 2010, 4514, 293, 550, 291, 362, 281, 733, 295, 3361, 2035, 264, 7154, 307, 2902, 291, 570, 291, 1062, 312, 484, 295, 4002, 13, 51064, 51064, 400, 550, 291, 483, 729, 13603, 300, 436, 2835, 949, 13, 51214, 51214, 865, 11, 286, 519, 309, 311, 264, 733, 295, 551, 300, 534, 445, 7029, 512, 411, 6896, 6078, 293, 512, 565, 293, 1194, 281, 808, 493, 365, 264, 558, 3827, 337, 428, 2823, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.06483602523803711, "compression_ratio": 1.6641509433962265, "no_caption_prob": 0.0001233889488503337}, {"id": 438, "seek": 277100, "start": 2785.0, "end": 2788.0, "text": " And then you get those errors that they mentioned before.", "tokens": [50364, 440, 551, 307, 11, 309, 1177, 380, 841, 1481, 570, 291, 362, 2699, 76, 21884, 13695, 300, 16403, 257, 688, 295, 2010, 4514, 293, 550, 291, 362, 281, 733, 295, 3361, 2035, 264, 7154, 307, 2902, 291, 570, 291, 1062, 312, 484, 295, 4002, 13, 51064, 51064, 400, 550, 291, 483, 729, 13603, 300, 436, 2835, 949, 13, 51214, 51214, 865, 11, 286, 519, 309, 311, 264, 733, 295, 551, 300, 534, 445, 7029, 512, 411, 6896, 6078, 293, 512, 565, 293, 1194, 281, 808, 493, 365, 264, 558, 3827, 337, 428, 2823, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.06483602523803711, "compression_ratio": 1.6641509433962265, "no_caption_prob": 0.0001233889488503337}, {"id": 439, "seek": 277100, "start": 2788.0, "end": 2798.0, "text": " Yeah, I think it's the kind of thing that really just requires some like infrastructure investment and some time and thought to come up with the right solution for your environment.", "tokens": [50364, 440, 551, 307, 11, 309, 1177, 380, 841, 1481, 570, 291, 362, 2699, 76, 21884, 13695, 300, 16403, 257, 688, 295, 2010, 4514, 293, 550, 291, 362, 281, 733, 295, 3361, 2035, 264, 7154, 307, 2902, 291, 570, 291, 1062, 312, 484, 295, 4002, 13, 51064, 51064, 400, 550, 291, 483, 729, 13603, 300, 436, 2835, 949, 13, 51214, 51214, 865, 11, 286, 519, 309, 311, 264, 733, 295, 551, 300, 534, 445, 7029, 512, 411, 6896, 6078, 293, 512, 565, 293, 1194, 281, 808, 493, 365, 264, 558, 3827, 337, 428, 2823, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.06483602523803711, "compression_ratio": 1.6641509433962265, "no_caption_prob": 0.0001233889488503337}, {"id": 440, "seek": 279800, "start": 2798.0, "end": 2805.0, "text": " But all of these techniques, I think, are tools you can leverage to try to try to make that more robust.", "tokens": [50364, 583, 439, 295, 613, 7512, 11, 286, 519, 11, 366, 3873, 291, 393, 13982, 281, 853, 281, 853, 281, 652, 300, 544, 13956, 13, 50714, 50714, 865, 13, 583, 754, 754, 1553, 300, 11, 309, 486, 312, 709, 15856, 813, 498, 291, 630, 264, 21884, 13695, 420, 33283, 12475, 322, 428, 1065, 13, 51114, 51114, 1779, 13, 7587, 13, 407, 820, 321, 751, 466, 1339, 321, 434, 322, 264, 4829, 295, 2098, 300, 364, 2699, 76, 21884, 13695, 5308, 393, 3061, 30, 51514, 51514, 6454, 321, 751, 466, 661, 2098, 309, 393, 3061, 30, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.0693825896905393, "compression_ratio": 1.5847457627118644, "no_caption_prob": 7.071838808769826e-06}, {"id": 441, "seek": 279800, "start": 2805.0, "end": 2813.0, "text": " Yeah. But even even without that, it will be much safer than if you did the GraphQL or HTTP requests on your own.", "tokens": [50364, 583, 439, 295, 613, 7512, 11, 286, 519, 11, 366, 3873, 291, 393, 13982, 281, 853, 281, 853, 281, 652, 300, 544, 13956, 13, 50714, 50714, 865, 13, 583, 754, 754, 1553, 300, 11, 309, 486, 312, 709, 15856, 813, 498, 291, 630, 264, 21884, 13695, 420, 33283, 12475, 322, 428, 1065, 13, 51114, 51114, 1779, 13, 7587, 13, 407, 820, 321, 751, 466, 1339, 321, 434, 322, 264, 4829, 295, 2098, 300, 364, 2699, 76, 21884, 13695, 5308, 393, 3061, 30, 51514, 51514, 6454, 321, 751, 466, 661, 2098, 309, 393, 3061, 30, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.0693825896905393, "compression_ratio": 1.5847457627118644, "no_caption_prob": 7.071838808769826e-06}, {"id": 442, "seek": 279800, "start": 2813.0, "end": 2821.0, "text": " Right. Exactly. So should we talk about while we're on the topic of ways that an Elm GraphQL request can fail?", "tokens": [50364, 583, 439, 295, 613, 7512, 11, 286, 519, 11, 366, 3873, 291, 393, 13982, 281, 853, 281, 853, 281, 652, 300, 544, 13956, 13, 50714, 50714, 865, 13, 583, 754, 754, 1553, 300, 11, 309, 486, 312, 709, 15856, 813, 498, 291, 630, 264, 21884, 13695, 420, 33283, 12475, 322, 428, 1065, 13, 51114, 51114, 1779, 13, 7587, 13, 407, 820, 321, 751, 466, 1339, 321, 434, 322, 264, 4829, 295, 2098, 300, 364, 2699, 76, 21884, 13695, 5308, 393, 3061, 30, 51514, 51514, 6454, 321, 751, 466, 661, 2098, 309, 393, 3061, 30, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.0693825896905393, "compression_ratio": 1.5847457627118644, "no_caption_prob": 7.071838808769826e-06}, {"id": 443, "seek": 279800, "start": 2821.0, "end": 2824.0, "text": " Should we talk about other ways it can fail?", "tokens": [50364, 583, 439, 295, 613, 7512, 11, 286, 519, 11, 366, 3873, 291, 393, 13982, 281, 853, 281, 853, 281, 652, 300, 544, 13956, 13, 50714, 50714, 865, 13, 583, 754, 754, 1553, 300, 11, 309, 486, 312, 709, 15856, 813, 498, 291, 630, 264, 21884, 13695, 420, 33283, 12475, 322, 428, 1065, 13, 51114, 51114, 1779, 13, 7587, 13, 407, 820, 321, 751, 466, 1339, 321, 434, 322, 264, 4829, 295, 2098, 300, 364, 2699, 76, 21884, 13695, 5308, 393, 3061, 30, 51514, 51514, 6454, 321, 751, 466, 661, 2098, 309, 393, 3061, 30, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.0693825896905393, "compression_ratio": 1.5847457627118644, "no_caption_prob": 7.071838808769826e-06}, {"id": 444, "seek": 282400, "start": 2824.0, "end": 2828.0, "text": " Oh, well, you're getting me curious now. So, yeah. All right.", "tokens": [50364, 876, 11, 731, 11, 291, 434, 1242, 385, 6369, 586, 13, 407, 11, 1338, 13, 1057, 558, 13, 50564, 50564, 1042, 11, 731, 11, 264, 1230, 472, 4009, 295, 7763, 300, 1487, 493, 562, 291, 2845, 364, 2699, 76, 21884, 13695, 5308, 11, 291, 360, 483, 364, 33283, 6713, 7263, 13, 51064, 51064, 407, 300, 300, 311, 2138, 11, 2086, 11, 300, 311, 257, 7763, 300, 2699, 76, 21884, 13695, 393, 380, 854, 291, 484, 365, 886, 709, 13, 51364, 51364, 821, 311, 456, 311, 1071, 2010, 295, 6713, 11, 597, 307, 597, 307, 815, 6446, 420, 18184, 712, 7909, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.08660109383719308, "compression_ratio": 1.5899581589958158, "no_caption_prob": 6.438952368625905e-06}, {"id": 445, "seek": 282400, "start": 2828.0, "end": 2838.0, "text": " Well, well, the number one source of failure that comes up when you send an Elm GraphQL request, you do get an HTTP error potentially.", "tokens": [50364, 876, 11, 731, 11, 291, 434, 1242, 385, 6369, 586, 13, 407, 11, 1338, 13, 1057, 558, 13, 50564, 50564, 1042, 11, 731, 11, 264, 1230, 472, 4009, 295, 7763, 300, 1487, 493, 562, 291, 2845, 364, 2699, 76, 21884, 13695, 5308, 11, 291, 360, 483, 364, 33283, 6713, 7263, 13, 51064, 51064, 407, 300, 300, 311, 2138, 11, 2086, 11, 300, 311, 257, 7763, 300, 2699, 76, 21884, 13695, 393, 380, 854, 291, 484, 365, 886, 709, 13, 51364, 51364, 821, 311, 456, 311, 1071, 2010, 295, 6713, 11, 597, 307, 597, 307, 815, 6446, 420, 18184, 712, 7909, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.08660109383719308, "compression_ratio": 1.5899581589958158, "no_caption_prob": 6.438952368625905e-06}, {"id": 446, "seek": 282400, "start": 2838.0, "end": 2844.0, "text": " So that that's definitely, yes, that's a failure that Elm GraphQL can't help you out with too much.", "tokens": [50364, 876, 11, 731, 11, 291, 434, 1242, 385, 6369, 586, 13, 407, 11, 1338, 13, 1057, 558, 13, 50564, 50564, 1042, 11, 731, 11, 264, 1230, 472, 4009, 295, 7763, 300, 1487, 493, 562, 291, 2845, 364, 2699, 76, 21884, 13695, 5308, 11, 291, 360, 483, 364, 33283, 6713, 7263, 13, 51064, 51064, 407, 300, 300, 311, 2138, 11, 2086, 11, 300, 311, 257, 7763, 300, 2699, 76, 21884, 13695, 393, 380, 854, 291, 484, 365, 886, 709, 13, 51364, 51364, 821, 311, 456, 311, 1071, 2010, 295, 6713, 11, 597, 307, 597, 307, 815, 6446, 420, 18184, 712, 7909, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.08660109383719308, "compression_ratio": 1.5899581589958158, "no_caption_prob": 6.438952368625905e-06}, {"id": 447, "seek": 282400, "start": 2844.0, "end": 2850.0, "text": " There's there's another type of error, which is which is maybes or nullable fields.", "tokens": [50364, 876, 11, 731, 11, 291, 434, 1242, 385, 6369, 586, 13, 407, 11, 1338, 13, 1057, 558, 13, 50564, 50564, 1042, 11, 731, 11, 264, 1230, 472, 4009, 295, 7763, 300, 1487, 493, 562, 291, 2845, 364, 2699, 76, 21884, 13695, 5308, 11, 291, 360, 483, 364, 33283, 6713, 7263, 13, 51064, 51064, 407, 300, 300, 311, 2138, 11, 2086, 11, 300, 311, 257, 7763, 300, 2699, 76, 21884, 13695, 393, 380, 854, 291, 484, 365, 886, 709, 13, 51364, 51364, 821, 311, 456, 311, 1071, 2010, 295, 6713, 11, 597, 307, 597, 307, 815, 6446, 420, 18184, 712, 7909, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.08660109383719308, "compression_ratio": 1.5899581589958158, "no_caption_prob": 6.438952368625905e-06}, {"id": 448, "seek": 285000, "start": 2850.0, "end": 2864.0, "text": " So GraphQL has this concept of a nullable field. And what happens quite often, I sometimes get bug reports of why is my Elm GraphQL code generating a maybe here?", "tokens": [50364, 407, 21884, 13695, 575, 341, 3410, 295, 257, 18184, 712, 2519, 13, 400, 437, 2314, 1596, 2049, 11, 286, 2171, 483, 7426, 7122, 295, 983, 307, 452, 2699, 76, 21884, 13695, 3089, 17746, 257, 1310, 510, 30, 51064, 51064, 400, 286, 362, 257, 309, 311, 309, 311, 452, 881, 12719, 9408, 281, 3541, 295, 264, 19894, 48, 4166, 11, 597, 307, 731, 11, 18349, 562, 561, 366, 411, 516, 281, 746, 411, 2699, 76, 21884, 13695, 11, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.08958524539146895, "compression_ratio": 1.4862385321100917, "no_caption_prob": 1.3630678040499333e-05}, {"id": 449, "seek": 285000, "start": 2864.0, "end": 2875.0, "text": " And I have a it's it's my most commonly linked to section of the FAQ document, which is well, oftentimes when people are like going to something like Elm GraphQL,", "tokens": [50364, 407, 21884, 13695, 575, 341, 3410, 295, 257, 18184, 712, 2519, 13, 400, 437, 2314, 1596, 2049, 11, 286, 2171, 483, 7426, 7122, 295, 983, 307, 452, 2699, 76, 21884, 13695, 3089, 17746, 257, 1310, 510, 30, 51064, 51064, 400, 286, 362, 257, 309, 311, 309, 311, 452, 881, 12719, 9408, 281, 3541, 295, 264, 19894, 48, 4166, 11, 597, 307, 731, 11, 18349, 562, 561, 366, 411, 516, 281, 746, 411, 2699, 76, 21884, 13695, 11, 51614, 51614], "temperature": 0.0, "avg_logprob": -0.08958524539146895, "compression_ratio": 1.4862385321100917, "no_caption_prob": 1.3630678040499333e-05}, {"id": 450, "seek": 287500, "start": 2875.0, "end": 2882.0, "text": " they were consuming that GraphQL schema from an untyped language and so weren't information that they made use of.", "tokens": [50364, 436, 645, 19867, 300, 21884, 13695, 34078, 490, 364, 517, 874, 3452, 2856, 293, 370, 4999, 380, 1589, 300, 436, 1027, 764, 295, 13, 50714, 50714, 400, 370, 436, 445, 632, 18184, 712, 7909, 439, 670, 264, 1081, 570, 309, 311, 264, 7576, 294, 21884, 13695, 13, 51014, 51014, 1133, 291, 6964, 613, 21884, 13695, 3467, 11, 291, 362, 281, 352, 484, 295, 428, 636, 281, 829, 364, 1624, 43233, 935, 281, 584, 341, 307, 406, 18184, 712, 13, 51364, 51364], "temperature": 0.0, "avg_logprob": -0.04958693952445524, "compression_ratio": 1.5961538461538463, "no_caption_prob": 1.0451106390974019e-05}, {"id": 451, "seek": 287500, "start": 2882.0, "end": 2888.0, "text": " And so they just had nullable fields all over the place because it's the default in GraphQL.", "tokens": [50364, 436, 645, 19867, 300, 21884, 13695, 34078, 490, 364, 517, 874, 3452, 2856, 293, 370, 4999, 380, 1589, 300, 436, 1027, 764, 295, 13, 50714, 50714, 400, 370, 436, 445, 632, 18184, 712, 7909, 439, 670, 264, 1081, 570, 309, 311, 264, 7576, 294, 21884, 13695, 13, 51014, 51014, 1133, 291, 6964, 613, 21884, 13695, 3467, 11, 291, 362, 281, 352, 484, 295, 428, 636, 281, 829, 364, 1624, 43233, 935, 281, 584, 341, 307, 406, 18184, 712, 13, 51364, 51364], "temperature": 0.0, "avg_logprob": -0.04958693952445524, "compression_ratio": 1.5961538461538463, "no_caption_prob": 1.0451106390974019e-05}, {"id": 452, "seek": 287500, "start": 2888.0, "end": 2895.0, "text": " When you define these GraphQL types, you have to go out of your way to put an exclamation point to say this is not nullable.", "tokens": [50364, 436, 645, 19867, 300, 21884, 13695, 34078, 490, 364, 517, 874, 3452, 2856, 293, 370, 4999, 380, 1589, 300, 436, 1027, 764, 295, 13, 50714, 50714, 400, 370, 436, 445, 632, 18184, 712, 7909, 439, 670, 264, 1081, 570, 309, 311, 264, 7576, 294, 21884, 13695, 13, 51014, 51014, 1133, 291, 6964, 613, 21884, 13695, 3467, 11, 291, 362, 281, 352, 484, 295, 428, 636, 281, 829, 364, 1624, 43233, 935, 281, 584, 341, 307, 406, 18184, 712, 13, 51364, 51364], "temperature": 0.0, "avg_logprob": -0.04958693952445524, "compression_ratio": 1.5961538461538463, "no_caption_prob": 1.0451106390974019e-05}, {"id": 453, "seek": 289500, "start": 2895.0, "end": 2905.0, "text": " And so you'll even get like a you know, instead of getting a list of IDs, you'll get a list which could be null of IDs, any of which could be null,", "tokens": [50364, 400, 370, 291, 603, 754, 483, 411, 257, 291, 458, 11, 2602, 295, 1242, 257, 1329, 295, 48212, 11, 291, 603, 483, 257, 1329, 597, 727, 312, 18184, 295, 48212, 11, 604, 295, 597, 727, 312, 18184, 11, 50864, 50864, 597, 307, 746, 300, 2314, 2049, 754, 294, 411, 1908, 21884, 13695, 21445, 300, 561, 393, 380, 1969, 13, 51164, 51164, 583, 309, 307, 2049, 406, 437, 437, 436, 645, 1382, 281, 5109, 365, 729, 3467, 13, 51414, 51414, 583, 309, 445, 390, 411, 11, 572, 11, 309, 311, 309, 311, 406, 3442, 281, 312, 18184, 13, 467, 820, 1128, 312, 18184, 13, 583, 321, 600, 658, 281, 909, 729, 3467, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.07314418924265895, "compression_ratio": 1.764, "no_caption_prob": 2.7108142603538e-05}, {"id": 454, "seek": 289500, "start": 2905.0, "end": 2911.0, "text": " which is something that happens often even in like public GraphQL APIs that people can't control.", "tokens": [50364, 400, 370, 291, 603, 754, 483, 411, 257, 291, 458, 11, 2602, 295, 1242, 257, 1329, 295, 48212, 11, 291, 603, 483, 257, 1329, 597, 727, 312, 18184, 295, 48212, 11, 604, 295, 597, 727, 312, 18184, 11, 50864, 50864, 597, 307, 746, 300, 2314, 2049, 754, 294, 411, 1908, 21884, 13695, 21445, 300, 561, 393, 380, 1969, 13, 51164, 51164, 583, 309, 307, 2049, 406, 437, 437, 436, 645, 1382, 281, 5109, 365, 729, 3467, 13, 51414, 51414, 583, 309, 445, 390, 411, 11, 572, 11, 309, 311, 309, 311, 406, 3442, 281, 312, 18184, 13, 467, 820, 1128, 312, 18184, 13, 583, 321, 600, 658, 281, 909, 729, 3467, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.07314418924265895, "compression_ratio": 1.764, "no_caption_prob": 2.7108142603538e-05}, {"id": 455, "seek": 289500, "start": 2911.0, "end": 2916.0, "text": " But it is often not what what they were trying to express with those types.", "tokens": [50364, 400, 370, 291, 603, 754, 483, 411, 257, 291, 458, 11, 2602, 295, 1242, 257, 1329, 295, 48212, 11, 291, 603, 483, 257, 1329, 597, 727, 312, 18184, 295, 48212, 11, 604, 295, 597, 727, 312, 18184, 11, 50864, 50864, 597, 307, 746, 300, 2314, 2049, 754, 294, 411, 1908, 21884, 13695, 21445, 300, 561, 393, 380, 1969, 13, 51164, 51164, 583, 309, 307, 2049, 406, 437, 437, 436, 645, 1382, 281, 5109, 365, 729, 3467, 13, 51414, 51414, 583, 309, 445, 390, 411, 11, 572, 11, 309, 311, 309, 311, 406, 3442, 281, 312, 18184, 13, 467, 820, 1128, 312, 18184, 13, 583, 321, 600, 658, 281, 909, 729, 3467, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.07314418924265895, "compression_ratio": 1.764, "no_caption_prob": 2.7108142603538e-05}, {"id": 456, "seek": 289500, "start": 2916.0, "end": 2922.0, "text": " But it just was like, no, it's it's not supposed to be null. It should never be null. But we've got to add those types.", "tokens": [50364, 400, 370, 291, 603, 754, 483, 411, 257, 291, 458, 11, 2602, 295, 1242, 257, 1329, 295, 48212, 11, 291, 603, 483, 257, 1329, 597, 727, 312, 18184, 295, 48212, 11, 604, 295, 597, 727, 312, 18184, 11, 50864, 50864, 597, 307, 746, 300, 2314, 2049, 754, 294, 411, 1908, 21884, 13695, 21445, 300, 561, 393, 380, 1969, 13, 51164, 51164, 583, 309, 307, 2049, 406, 437, 437, 436, 645, 1382, 281, 5109, 365, 729, 3467, 13, 51414, 51414, 583, 309, 445, 390, 411, 11, 572, 11, 309, 311, 309, 311, 406, 3442, 281, 312, 18184, 13, 467, 820, 1128, 312, 18184, 13, 583, 321, 600, 658, 281, 909, 729, 3467, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.07314418924265895, "compression_ratio": 1.764, "no_caption_prob": 2.7108142603538e-05}, {"id": 457, "seek": 292200, "start": 2922.0, "end": 2926.0, "text": " So that's a server side issue, right? That is a server side issue. And that's not going to be an error.", "tokens": [50364, 407, 300, 311, 257, 7154, 1252, 2734, 11, 558, 30, 663, 307, 257, 7154, 1252, 2734, 13, 400, 300, 311, 406, 516, 281, 312, 364, 6713, 13, 50564, 50564, 2699, 76, 21884, 13695, 307, 445, 516, 281, 11, 291, 458, 11, 4522, 2277, 829, 729, 815, 6446, 294, 5315, 293, 652, 291, 11304, 356, 2028, 365, 552, 13, 50914, 50914, 407, 2699, 76, 21884, 13695, 6417, 364, 7615, 9972, 11, 597, 307, 718, 385, 574, 493, 264, 1315, 370, 286, 500, 380, 483, 309, 18424, 13, 51264, 51264, 286, 1027, 613, 5288, 517, 46408, 4270, 13, 407, 456, 311, 2107, 18184, 420, 3061, 13, 865, 13, 286, 1604, 1580, 1228, 300, 412, 589, 293, 293, 309, 7612, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.0779569109932321, "compression_ratio": 1.6317689530685922, "no_caption_prob": 2.1112260583322495e-05}, {"id": 458, "seek": 292200, "start": 2926.0, "end": 2933.0, "text": " Elm GraphQL is just going to, you know, faithfully put those maybes in everywhere and make you annoyingly deal with them.", "tokens": [50364, 407, 300, 311, 257, 7154, 1252, 2734, 11, 558, 30, 663, 307, 257, 7154, 1252, 2734, 13, 400, 300, 311, 406, 516, 281, 312, 364, 6713, 13, 50564, 50564, 2699, 76, 21884, 13695, 307, 445, 516, 281, 11, 291, 458, 11, 4522, 2277, 829, 729, 815, 6446, 294, 5315, 293, 652, 291, 11304, 356, 2028, 365, 552, 13, 50914, 50914, 407, 2699, 76, 21884, 13695, 6417, 364, 7615, 9972, 11, 597, 307, 718, 385, 574, 493, 264, 1315, 370, 286, 500, 380, 483, 309, 18424, 13, 51264, 51264, 286, 1027, 613, 5288, 517, 46408, 4270, 13, 407, 456, 311, 2107, 18184, 420, 3061, 13, 865, 13, 286, 1604, 1580, 1228, 300, 412, 589, 293, 293, 309, 7612, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.0779569109932321, "compression_ratio": 1.6317689530685922, "no_caption_prob": 2.1112260583322495e-05}, {"id": 459, "seek": 292200, "start": 2933.0, "end": 2940.0, "text": " So Elm GraphQL provides an escape patch, which is let me look up the name so I don't get it incorrect.", "tokens": [50364, 407, 300, 311, 257, 7154, 1252, 2734, 11, 558, 30, 663, 307, 257, 7154, 1252, 2734, 13, 400, 300, 311, 406, 516, 281, 312, 364, 6713, 13, 50564, 50564, 2699, 76, 21884, 13695, 307, 445, 516, 281, 11, 291, 458, 11, 4522, 2277, 829, 729, 815, 6446, 294, 5315, 293, 652, 291, 11304, 356, 2028, 365, 552, 13, 50914, 50914, 407, 2699, 76, 21884, 13695, 6417, 364, 7615, 9972, 11, 597, 307, 718, 385, 574, 493, 264, 1315, 370, 286, 500, 380, 483, 309, 18424, 13, 51264, 51264, 286, 1027, 613, 5288, 517, 46408, 4270, 13, 407, 456, 311, 2107, 18184, 420, 3061, 13, 865, 13, 286, 1604, 1580, 1228, 300, 412, 589, 293, 293, 309, 7612, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.0779569109932321, "compression_ratio": 1.6317689530685922, "no_caption_prob": 2.1112260583322495e-05}, {"id": 460, "seek": 292200, "start": 2940.0, "end": 2950.0, "text": " I made these names unappealing. So there's non null or fail. Yeah. I remember someone using that at work and and it failed.", "tokens": [50364, 407, 300, 311, 257, 7154, 1252, 2734, 11, 558, 30, 663, 307, 257, 7154, 1252, 2734, 13, 400, 300, 311, 406, 516, 281, 312, 364, 6713, 13, 50564, 50564, 2699, 76, 21884, 13695, 307, 445, 516, 281, 11, 291, 458, 11, 4522, 2277, 829, 729, 815, 6446, 294, 5315, 293, 652, 291, 11304, 356, 2028, 365, 552, 13, 50914, 50914, 407, 2699, 76, 21884, 13695, 6417, 364, 7615, 9972, 11, 597, 307, 718, 385, 574, 493, 264, 1315, 370, 286, 500, 380, 483, 309, 18424, 13, 51264, 51264, 286, 1027, 613, 5288, 517, 46408, 4270, 13, 407, 456, 311, 2107, 18184, 420, 3061, 13, 865, 13, 286, 1604, 1580, 1228, 300, 412, 589, 293, 293, 309, 7612, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.0779569109932321, "compression_ratio": 1.6317689530685922, "no_caption_prob": 2.1112260583322495e-05}, {"id": 461, "seek": 295000, "start": 2950.0, "end": 2958.0, "text": " And I definitely went out of my way to say somebody called selection set that non null or fail in the error message and say,", "tokens": [50364, 400, 286, 2138, 1437, 484, 295, 452, 636, 281, 584, 2618, 1219, 9450, 992, 300, 2107, 18184, 420, 3061, 294, 264, 6713, 3636, 293, 584, 11, 50764, 50764, 1767, 915, 11, 291, 458, 11, 1048, 905, 763, 295, 2107, 18184, 420, 3061, 294, 428, 3089, 3096, 13, 407, 286, 500, 380, 483, 7426, 7122, 456, 13, 51064, 51064, 583, 1338, 11, 370, 2107, 18184, 420, 3061, 13, 467, 311, 534, 257, 1036, 19606, 13, 509, 528, 281, 5042, 1228, 309, 13, 51314, 51314, 286, 362, 512, 2531, 854, 433, 337, 337, 257, 1329, 295, 20171, 4959, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.10258607581110284, "compression_ratio": 1.6170212765957446, "no_caption_prob": 0.00048021989641711116}, {"id": 462, "seek": 295000, "start": 2958.0, "end": 2964.0, "text": " please find, you know, invocations of non null or fail in your code base. So I don't get bug reports there.", "tokens": [50364, 400, 286, 2138, 1437, 484, 295, 452, 636, 281, 584, 2618, 1219, 9450, 992, 300, 2107, 18184, 420, 3061, 294, 264, 6713, 3636, 293, 584, 11, 50764, 50764, 1767, 915, 11, 291, 458, 11, 1048, 905, 763, 295, 2107, 18184, 420, 3061, 294, 428, 3089, 3096, 13, 407, 286, 500, 380, 483, 7426, 7122, 456, 13, 51064, 51064, 583, 1338, 11, 370, 2107, 18184, 420, 3061, 13, 467, 311, 534, 257, 1036, 19606, 13, 509, 528, 281, 5042, 1228, 309, 13, 51314, 51314, 286, 362, 512, 2531, 854, 433, 337, 337, 257, 1329, 295, 20171, 4959, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.10258607581110284, "compression_ratio": 1.6170212765957446, "no_caption_prob": 0.00048021989641711116}, {"id": 463, "seek": 295000, "start": 2964.0, "end": 2969.0, "text": " But yeah, so non null or fail. It's really a last resort. You want to avoid using it.", "tokens": [50364, 400, 286, 2138, 1437, 484, 295, 452, 636, 281, 584, 2618, 1219, 9450, 992, 300, 2107, 18184, 420, 3061, 294, 264, 6713, 3636, 293, 584, 11, 50764, 50764, 1767, 915, 11, 291, 458, 11, 1048, 905, 763, 295, 2107, 18184, 420, 3061, 294, 428, 3089, 3096, 13, 407, 286, 500, 380, 483, 7426, 7122, 456, 13, 51064, 51064, 583, 1338, 11, 370, 2107, 18184, 420, 3061, 13, 467, 311, 534, 257, 1036, 19606, 13, 509, 528, 281, 5042, 1228, 309, 13, 51314, 51314, 286, 362, 512, 2531, 854, 433, 337, 337, 257, 1329, 295, 20171, 4959, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.10258607581110284, "compression_ratio": 1.6170212765957446, "no_caption_prob": 0.00048021989641711116}, {"id": 464, "seek": 295000, "start": 2969.0, "end": 2973.0, "text": " I have some similar helpers for for a list of noble elements.", "tokens": [50364, 400, 286, 2138, 1437, 484, 295, 452, 636, 281, 584, 2618, 1219, 9450, 992, 300, 2107, 18184, 420, 3061, 294, 264, 6713, 3636, 293, 584, 11, 50764, 50764, 1767, 915, 11, 291, 458, 11, 1048, 905, 763, 295, 2107, 18184, 420, 3061, 294, 428, 3089, 3096, 13, 407, 286, 500, 380, 483, 7426, 7122, 456, 13, 51064, 51064, 583, 1338, 11, 370, 2107, 18184, 420, 3061, 13, 467, 311, 534, 257, 1036, 19606, 13, 509, 528, 281, 5042, 1228, 309, 13, 51314, 51314, 286, 362, 512, 2531, 854, 433, 337, 337, 257, 1329, 295, 20171, 4959, 13, 51514, 51514], "temperature": 0.0, "avg_logprob": -0.10258607581110284, "compression_ratio": 1.6170212765957446, "no_caption_prob": 0.00048021989641711116}, {"id": 465, "seek": 297300, "start": 2973.0, "end": 2980.0, "text": " And then I have like a more general map or fail. And that allows you to, you know, handle possible errors.", "tokens": [50364, 400, 550, 286, 362, 411, 257, 544, 2674, 4471, 420, 3061, 13, 400, 300, 4045, 291, 281, 11, 291, 458, 11, 4813, 1944, 13603, 13, 50714, 50714, 407, 498, 746, 498, 291, 528, 281, 29562, 512, 1412, 11, 291, 393, 2089, 428, 979, 378, 433, 281, 3061, 1455, 729, 32567, 13, 51064, 51064, 823, 11, 300, 848, 11, 286, 519, 309, 311, 286, 519, 309, 311, 257, 1101, 3124, 281, 2028, 365, 729, 7363, 763, 294, 2375, 39684, 3089, 14368, 13, 51414, 51414, 407, 286, 576, 2748, 9906, 337, 300, 949, 291, 2524, 337, 4471, 420, 3061, 13, 583, 294, 512, 3331, 11, 300, 393, 312, 4420, 11, 886, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.05552105318035996, "compression_ratio": 1.7213740458015268, "no_caption_prob": 5.738557592849247e-05}, {"id": 466, "seek": 297300, "start": 2980.0, "end": 2987.0, "text": " So if something if you want to validate some data, you can allow your decoders to fail making those guarantees.", "tokens": [50364, 400, 550, 286, 362, 411, 257, 544, 2674, 4471, 420, 3061, 13, 400, 300, 4045, 291, 281, 11, 291, 458, 11, 4813, 1944, 13603, 13, 50714, 50714, 407, 498, 746, 498, 291, 528, 281, 29562, 512, 1412, 11, 291, 393, 2089, 428, 979, 378, 433, 281, 3061, 1455, 729, 32567, 13, 51064, 51064, 823, 11, 300, 848, 11, 286, 519, 309, 311, 286, 519, 309, 311, 257, 1101, 3124, 281, 2028, 365, 729, 7363, 763, 294, 2375, 39684, 3089, 14368, 13, 51414, 51414, 407, 286, 576, 2748, 9906, 337, 300, 949, 291, 2524, 337, 4471, 420, 3061, 13, 583, 294, 512, 3331, 11, 300, 393, 312, 4420, 11, 886, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.05552105318035996, "compression_ratio": 1.7213740458015268, "no_caption_prob": 5.738557592849247e-05}, {"id": 467, "seek": 297300, "start": 2987.0, "end": 2994.0, "text": " Now, that said, I think it's I think it's a better practice to deal with those validations in custom scalar codecs.", "tokens": [50364, 400, 550, 286, 362, 411, 257, 544, 2674, 4471, 420, 3061, 13, 400, 300, 4045, 291, 281, 11, 291, 458, 11, 4813, 1944, 13603, 13, 50714, 50714, 407, 498, 746, 498, 291, 528, 281, 29562, 512, 1412, 11, 291, 393, 2089, 428, 979, 378, 433, 281, 3061, 1455, 729, 32567, 13, 51064, 51064, 823, 11, 300, 848, 11, 286, 519, 309, 311, 286, 519, 309, 311, 257, 1101, 3124, 281, 2028, 365, 729, 7363, 763, 294, 2375, 39684, 3089, 14368, 13, 51414, 51414, 407, 286, 576, 2748, 9906, 337, 300, 949, 291, 2524, 337, 4471, 420, 3061, 13, 583, 294, 512, 3331, 11, 300, 393, 312, 4420, 11, 886, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.05552105318035996, "compression_ratio": 1.7213740458015268, "no_caption_prob": 5.738557592849247e-05}, {"id": 468, "seek": 297300, "start": 2994.0, "end": 3000.0, "text": " So I would recommend reaching for that before you reach for map or fail. But in some cases, that can be useful, too.", "tokens": [50364, 400, 550, 286, 362, 411, 257, 544, 2674, 4471, 420, 3061, 13, 400, 300, 4045, 291, 281, 11, 291, 458, 11, 4813, 1944, 13603, 13, 50714, 50714, 407, 498, 746, 498, 291, 528, 281, 29562, 512, 1412, 11, 291, 393, 2089, 428, 979, 378, 433, 281, 3061, 1455, 729, 32567, 13, 51064, 51064, 823, 11, 300, 848, 11, 286, 519, 309, 311, 286, 519, 309, 311, 257, 1101, 3124, 281, 2028, 365, 729, 7363, 763, 294, 2375, 39684, 3089, 14368, 13, 51414, 51414, 407, 286, 576, 2748, 9906, 337, 300, 949, 291, 2524, 337, 4471, 420, 3061, 13, 583, 294, 512, 3331, 11, 300, 393, 312, 4420, 11, 886, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.05552105318035996, "compression_ratio": 1.7213740458015268, "no_caption_prob": 5.738557592849247e-05}, {"id": 469, "seek": 300000, "start": 3000.0, "end": 3004.0, "text": " All right. Have we covered the subject now or are there other?", "tokens": [50364, 1057, 558, 13, 3560, 321, 5343, 264, 3983, 586, 420, 366, 456, 661, 30, 50564, 50564, 286, 519, 300, 311, 1238, 665, 13, 759, 291, 434, 498, 291, 434, 1096, 365, 428, 4930, 11, 4930, 1651, 11, 436, 4999, 380, 436, 4999, 380, 886, 4930, 13, 50764, 50764, 883, 11, 286, 458, 13, 286, 390, 445, 1382, 281, 17185, 291, 13, 865, 13, 865, 13, 663, 390, 29714, 13, 51164, 51164, 1012, 360, 561, 483, 1409, 365, 264, 4295, 30, 51314, 51314], "temperature": 0.0, "avg_logprob": -0.16580070768083846, "compression_ratio": 1.5198019801980198, "no_caption_prob": 7.030890992609784e-05}, {"id": 470, "seek": 300000, "start": 3004.0, "end": 3008.0, "text": " I think that's pretty good. If you're if you're done with your tough, tough questions, they weren't they weren't too tough.", "tokens": [50364, 1057, 558, 13, 3560, 321, 5343, 264, 3983, 586, 420, 366, 456, 661, 30, 50564, 50564, 286, 519, 300, 311, 1238, 665, 13, 759, 291, 434, 498, 291, 434, 1096, 365, 428, 4930, 11, 4930, 1651, 11, 436, 4999, 380, 436, 4999, 380, 886, 4930, 13, 50764, 50764, 883, 11, 286, 458, 13, 286, 390, 445, 1382, 281, 17185, 291, 13, 865, 13, 865, 13, 663, 390, 29714, 13, 51164, 51164, 1012, 360, 561, 483, 1409, 365, 264, 4295, 30, 51314, 51314], "temperature": 0.0, "avg_logprob": -0.16580070768083846, "compression_ratio": 1.5198019801980198, "no_caption_prob": 7.030890992609784e-05}, {"id": 471, "seek": 300000, "start": 3008.0, "end": 3016.0, "text": " No, I know. I was just trying to scare you. Yeah. Yeah. That was intimidating.", "tokens": [50364, 1057, 558, 13, 3560, 321, 5343, 264, 3983, 586, 420, 366, 456, 661, 30, 50564, 50564, 286, 519, 300, 311, 1238, 665, 13, 759, 291, 434, 498, 291, 434, 1096, 365, 428, 4930, 11, 4930, 1651, 11, 436, 4999, 380, 436, 4999, 380, 886, 4930, 13, 50764, 50764, 883, 11, 286, 458, 13, 286, 390, 445, 1382, 281, 17185, 291, 13, 865, 13, 865, 13, 663, 390, 29714, 13, 51164, 51164, 1012, 360, 561, 483, 1409, 365, 264, 4295, 30, 51314, 51314], "temperature": 0.0, "avg_logprob": -0.16580070768083846, "compression_ratio": 1.5198019801980198, "no_caption_prob": 7.030890992609784e-05}, {"id": 472, "seek": 300000, "start": 3016.0, "end": 3019.0, "text": " How do people get started with the graph?", "tokens": [50364, 1057, 558, 13, 3560, 321, 5343, 264, 3983, 586, 420, 366, 456, 661, 30, 50564, 50564, 286, 519, 300, 311, 1238, 665, 13, 759, 291, 434, 498, 291, 434, 1096, 365, 428, 4930, 11, 4930, 1651, 11, 436, 4999, 380, 436, 4999, 380, 886, 4930, 13, 50764, 50764, 883, 11, 286, 458, 13, 286, 390, 445, 1382, 281, 17185, 291, 13, 865, 13, 865, 13, 663, 390, 29714, 13, 51164, 51164, 1012, 360, 561, 483, 1409, 365, 264, 4295, 30, 51314, 51314], "temperature": 0.0, "avg_logprob": -0.16580070768083846, "compression_ratio": 1.5198019801980198, "no_caption_prob": 7.030890992609784e-05}, {"id": 473, "seek": 301900, "start": 3019.0, "end": 3033.0, "text": " The number one place I recommend as a starting point is to just go to the Elm GraphQL package documentation and click the GraphQL dot selection set module.", "tokens": [50364, 440, 1230, 472, 1081, 286, 2748, 382, 257, 2891, 935, 307, 281, 445, 352, 281, 264, 2699, 76, 21884, 13695, 7372, 14333, 293, 2052, 264, 21884, 13695, 5893, 9450, 992, 10088, 13, 51064, 51064, 286, 1333, 295, 1823, 807, 264, 14688, 295, 257, 9450, 992, 13, 400, 498, 291, 1223, 264, 3410, 295, 257, 9450, 992, 534, 731, 11, 550, 291, 434, 516, 281, 312, 294, 665, 3909, 11, 286, 519, 13, 51514, 51514, 407, 411, 257, 9450, 992, 393, 362, 4018, 4754, 13, 509, 393, 362, 472, 3174, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.08075574103822099, "compression_ratio": 1.6428571428571428, "no_caption_prob": 0.00016601916286163032}, {"id": 474, "seek": 301900, "start": 3033.0, "end": 3042.0, "text": " I sort of step through the basics of a selection set. And if you understand the concept of a selection set really well, then you're going to be in good shape, I think.", "tokens": [50364, 440, 1230, 472, 1081, 286, 2748, 382, 257, 2891, 935, 307, 281, 445, 352, 281, 264, 2699, 76, 21884, 13695, 7372, 14333, 293, 2052, 264, 21884, 13695, 5893, 9450, 992, 10088, 13, 51064, 51064, 286, 1333, 295, 1823, 807, 264, 14688, 295, 257, 9450, 992, 13, 400, 498, 291, 1223, 264, 3410, 295, 257, 9450, 992, 534, 731, 11, 550, 291, 434, 516, 281, 312, 294, 665, 3909, 11, 286, 519, 13, 51514, 51514, 407, 411, 257, 9450, 992, 393, 362, 4018, 4754, 13, 509, 393, 362, 472, 3174, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.08075574103822099, "compression_ratio": 1.6428571428571428, "no_caption_prob": 0.00016601916286163032}, {"id": 475, "seek": 301900, "start": 3042.0, "end": 3046.0, "text": " So like a selection set can have zero items. You can have one item.", "tokens": [50364, 440, 1230, 472, 1081, 286, 2748, 382, 257, 2891, 935, 307, 281, 445, 352, 281, 264, 2699, 76, 21884, 13695, 7372, 14333, 293, 2052, 264, 21884, 13695, 5893, 9450, 992, 10088, 13, 51064, 51064, 286, 1333, 295, 1823, 807, 264, 14688, 295, 257, 9450, 992, 13, 400, 498, 291, 1223, 264, 3410, 295, 257, 9450, 992, 534, 731, 11, 550, 291, 434, 516, 281, 312, 294, 665, 3909, 11, 286, 519, 13, 51514, 51514, 407, 411, 257, 9450, 992, 393, 362, 4018, 4754, 13, 509, 393, 362, 472, 3174, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.08075574103822099, "compression_ratio": 1.6428571428571428, "no_caption_prob": 0.00016601916286163032}, {"id": 476, "seek": 304600, "start": 3046.0, "end": 3054.0, "text": " You can map together selection sets. You can treat it, you know, if you're familiar with a fragment in regular GraphQL,", "tokens": [50364, 509, 393, 4471, 1214, 9450, 6352, 13, 509, 393, 2387, 309, 11, 291, 458, 11, 498, 291, 434, 4963, 365, 257, 26424, 294, 3890, 21884, 13695, 11, 50764, 50764, 291, 393, 1322, 613, 10199, 712, 3755, 293, 2890, 552, 1214, 445, 411, 257, 26424, 294, 21884, 13695, 11, 3993, 436, 434, 445, 9450, 6352, 293, 291, 393, 11559, 552, 1214, 13, 51264, 51264, 865, 11, 286, 841, 411, 321, 820, 16500, 293, 341, 1062, 312, 588, 3469, 11, 457, 321, 434, 1417, 466, 28160, 40224, 311, 17330, 2699, 76, 21884, 13695, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.10038291414578755, "compression_ratio": 1.680672268907563, "no_caption_prob": 1.7231346646440215e-05}, {"id": 477, "seek": 304600, "start": 3054.0, "end": 3064.0, "text": " you can build these composable pieces and mix them together just like a fragment in GraphQL, except they're just selection sets and you can mush them together.", "tokens": [50364, 509, 393, 4471, 1214, 9450, 6352, 13, 509, 393, 2387, 309, 11, 291, 458, 11, 498, 291, 434, 4963, 365, 257, 26424, 294, 3890, 21884, 13695, 11, 50764, 50764, 291, 393, 1322, 613, 10199, 712, 3755, 293, 2890, 552, 1214, 445, 411, 257, 26424, 294, 21884, 13695, 11, 3993, 436, 434, 445, 9450, 6352, 293, 291, 393, 11559, 552, 1214, 13, 51264, 51264, 865, 11, 286, 841, 411, 321, 820, 16500, 293, 341, 1062, 312, 588, 3469, 11, 457, 321, 434, 1417, 466, 28160, 40224, 311, 17330, 2699, 76, 21884, 13695, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.10038291414578755, "compression_ratio": 1.680672268907563, "no_caption_prob": 1.7231346646440215e-05}, {"id": 478, "seek": 304600, "start": 3064.0, "end": 3072.0, "text": " Yeah, I feel like we should specify and this might be very late, but we're talking about Dylan Kern's slash Elm GraphQL.", "tokens": [50364, 509, 393, 4471, 1214, 9450, 6352, 13, 509, 393, 2387, 309, 11, 291, 458, 11, 498, 291, 434, 4963, 365, 257, 26424, 294, 3890, 21884, 13695, 11, 50764, 50764, 291, 393, 1322, 613, 10199, 712, 3755, 293, 2890, 552, 1214, 445, 411, 257, 26424, 294, 21884, 13695, 11, 3993, 436, 434, 445, 9450, 6352, 293, 291, 393, 11559, 552, 1214, 13, 51264, 51264, 865, 11, 286, 841, 411, 321, 820, 16500, 293, 341, 1062, 312, 588, 3469, 11, 457, 321, 434, 1417, 466, 28160, 40224, 311, 17330, 2699, 76, 21884, 13695, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.10038291414578755, "compression_ratio": 1.680672268907563, "no_caption_prob": 1.7231346646440215e-05}, {"id": 479, "seek": 307200, "start": 3072.0, "end": 3084.0, "text": " That's fair. There are three others. They work differently and have different purposes, which we will probably not go into considering it's probably the we should be wrapping up now.", "tokens": [50364, 663, 311, 3143, 13, 821, 366, 1045, 2357, 13, 814, 589, 7614, 293, 362, 819, 9932, 11, 597, 321, 486, 1391, 406, 352, 666, 8079, 309, 311, 1391, 264, 321, 820, 312, 21993, 493, 586, 13, 50964, 50964, 865, 11, 286, 576, 584, 286, 519, 286, 2360, 300, 484, 294, 264, 1401, 1398, 13, 51164, 51164, 865, 13, 407, 412, 264, 588, 1192, 295, 264, 1401, 1398, 11, 286, 935, 281, 257, 23938, 7207, 300, 6686, 466, 264, 7300, 1296, 264, 819, 11587, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.10958194732666016, "compression_ratio": 1.6666666666666667, "no_caption_prob": 0.00013551443407777697}, {"id": 480, "seek": 307200, "start": 3084.0, "end": 3088.0, "text": " Yeah, I would say I think I lay that out in the readme.", "tokens": [50364, 663, 311, 3143, 13, 821, 366, 1045, 2357, 13, 814, 589, 7614, 293, 362, 819, 9932, 11, 597, 321, 486, 1391, 406, 352, 666, 8079, 309, 311, 1391, 264, 321, 820, 312, 21993, 493, 586, 13, 50964, 50964, 865, 11, 286, 576, 584, 286, 519, 286, 2360, 300, 484, 294, 264, 1401, 1398, 13, 51164, 51164, 865, 13, 407, 412, 264, 588, 1192, 295, 264, 1401, 1398, 11, 286, 935, 281, 257, 23938, 7207, 300, 6686, 466, 264, 7300, 1296, 264, 819, 11587, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.10958194732666016, "compression_ratio": 1.6666666666666667, "no_caption_prob": 0.00013551443407777697}, {"id": 481, "seek": 307200, "start": 3088.0, "end": 3096.0, "text": " Yeah. So at the very top of the readme, I point to a discourse thread that talks about the differences between the different approaches.", "tokens": [50364, 663, 311, 3143, 13, 821, 366, 1045, 2357, 13, 814, 589, 7614, 293, 362, 819, 9932, 11, 597, 321, 486, 1391, 406, 352, 666, 8079, 309, 311, 1391, 264, 321, 820, 312, 21993, 493, 586, 13, 50964, 50964, 865, 11, 286, 576, 584, 286, 519, 286, 2360, 300, 484, 294, 264, 1401, 1398, 13, 51164, 51164, 865, 13, 407, 412, 264, 588, 1192, 295, 264, 1401, 1398, 11, 286, 935, 281, 257, 23938, 7207, 300, 6686, 466, 264, 7300, 1296, 264, 819, 11587, 13, 51564, 51564], "temperature": 0.0, "avg_logprob": -0.10958194732666016, "compression_ratio": 1.6666666666666667, "no_caption_prob": 0.00013551443407777697}, {"id": 482, "seek": 309600, "start": 3096.0, "end": 3109.0, "text": " But in a nutshell, it's, you know, Dylan Kern's Elm GraphQL is the only one that is type safe, except there's actually one other library that's that's type safe, I believe.", "tokens": [50364, 583, 294, 257, 37711, 11, 309, 311, 11, 291, 458, 11, 28160, 40224, 311, 2699, 76, 21884, 13695, 307, 264, 787, 472, 300, 307, 2010, 3273, 11, 3993, 456, 311, 767, 472, 661, 6405, 300, 311, 300, 311, 2010, 3273, 11, 286, 1697, 13, 51014, 51014, 583, 309, 311, 3094, 926, 264, 3410, 295, 6246, 257, 2167, 21884, 13695, 14581, 666, 364, 2699, 76, 2445, 281, 818, 300, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.07028091117127301, "compression_ratio": 1.5027322404371584, "no_caption_prob": 9.760769899003208e-05}, {"id": 483, "seek": 309600, "start": 3109.0, "end": 3118.0, "text": " But it's built around the concept of turning a single GraphQL query into an Elm function to call that.", "tokens": [50364, 583, 294, 257, 37711, 11, 309, 311, 11, 291, 458, 11, 28160, 40224, 311, 2699, 76, 21884, 13695, 307, 264, 787, 472, 300, 307, 2010, 3273, 11, 3993, 456, 311, 767, 472, 661, 6405, 300, 311, 300, 311, 2010, 3273, 11, 286, 1697, 13, 51014, 51014, 583, 309, 311, 3094, 926, 264, 3410, 295, 6246, 257, 2167, 21884, 13695, 14581, 666, 364, 2699, 76, 2445, 281, 818, 300, 13, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.07028091117127301, "compression_ratio": 1.5027322404371584, "no_caption_prob": 9.760769899003208e-05}, {"id": 484, "seek": 311800, "start": 3118.0, "end": 3136.0, "text": " I'm going to need to look into that, but I'll link to that, too. But Elm GraphQL takes this philosophy of being like a query builder that you can sort of compose together the pieces in Elm code rather than manipulating strings of GraphQL queries.", "tokens": [50364, 286, 478, 516, 281, 643, 281, 574, 666, 300, 11, 457, 286, 603, 2113, 281, 300, 11, 886, 13, 583, 2699, 76, 21884, 13695, 2516, 341, 10675, 295, 885, 411, 257, 14581, 27377, 300, 291, 393, 1333, 295, 35925, 1214, 264, 3755, 294, 2699, 76, 3089, 2831, 813, 40805, 13985, 295, 21884, 13695, 24109, 13, 51264, 51264, 865, 13, 1144, 291, 920, 360, 19162, 926, 2699, 76, 21884, 13695, 30, 51414, 51414], "temperature": 0.0, "avg_logprob": -0.05286500905011151, "compression_ratio": 1.4974874371859297, "no_caption_prob": 9.665931429481134e-06}, {"id": 485, "seek": 311800, "start": 3136.0, "end": 3139.0, "text": " Yeah. Do you still do workshops around Elm GraphQL?", "tokens": [50364, 286, 478, 516, 281, 643, 281, 574, 666, 300, 11, 457, 286, 603, 2113, 281, 300, 11, 886, 13, 583, 2699, 76, 21884, 13695, 2516, 341, 10675, 295, 885, 411, 257, 14581, 27377, 300, 291, 393, 1333, 295, 35925, 1214, 264, 3755, 294, 2699, 76, 3089, 2831, 813, 40805, 13985, 295, 21884, 13695, 24109, 13, 51264, 51264, 865, 13, 1144, 291, 920, 360, 19162, 926, 2699, 76, 21884, 13695, 30, 51414, 51414], "temperature": 0.0, "avg_logprob": -0.05286500905011151, "compression_ratio": 1.4974874371859297, "no_caption_prob": 9.665931429481134e-06}, {"id": 486, "seek": 313900, "start": 3139.0, "end": 3148.0, "text": " I might do another workshop. I have been thinking about maybe making my workshop into a video course and adding some additional content around that.", "tokens": [50364, 286, 1062, 360, 1071, 13541, 13, 286, 362, 668, 1953, 466, 1310, 1455, 452, 13541, 666, 257, 960, 1164, 293, 5127, 512, 4497, 2701, 926, 300, 13, 50814, 50814, 407, 498, 456, 311, 1179, 294, 300, 11, 718, 385, 458, 13, 286, 1116, 959, 281, 959, 281, 1568, 466, 309, 13, 51014, 51014, 865, 13, 400, 550, 661, 813, 300, 11, 286, 519, 3467, 1553, 16287, 2709, 257, 1238, 665, 12897, 281, 1333, 295, 264, 10675, 2261, 309, 13, 51364, 51364, 3013, 307, 257, 3400, 21789, 13, 51414, 51414], "temperature": 0.0, "avg_logprob": -0.08769993205646892, "compression_ratio": 1.6127659574468085, "no_caption_prob": 3.5911169106839225e-05}, {"id": 487, "seek": 313900, "start": 3148.0, "end": 3152.0, "text": " So if there's interest in that, let me know. I'd love to love to hear about it.", "tokens": [50364, 286, 1062, 360, 1071, 13541, 13, 286, 362, 668, 1953, 466, 1310, 1455, 452, 13541, 666, 257, 960, 1164, 293, 5127, 512, 4497, 2701, 926, 300, 13, 50814, 50814, 407, 498, 456, 311, 1179, 294, 300, 11, 718, 385, 458, 13, 286, 1116, 959, 281, 959, 281, 1568, 466, 309, 13, 51014, 51014, 865, 13, 400, 550, 661, 813, 300, 11, 286, 519, 3467, 1553, 16287, 2709, 257, 1238, 665, 12897, 281, 1333, 295, 264, 10675, 2261, 309, 13, 51364, 51364, 3013, 307, 257, 3400, 21789, 13, 51414, 51414], "temperature": 0.0, "avg_logprob": -0.08769993205646892, "compression_ratio": 1.6127659574468085, "no_caption_prob": 3.5911169106839225e-05}, {"id": 488, "seek": 313900, "start": 3152.0, "end": 3159.0, "text": " Yeah. And then other than that, I think types without borders gives a pretty good intro to sort of the philosophy behind it.", "tokens": [50364, 286, 1062, 360, 1071, 13541, 13, 286, 362, 668, 1953, 466, 1310, 1455, 452, 13541, 666, 257, 960, 1164, 293, 5127, 512, 4497, 2701, 926, 300, 13, 50814, 50814, 407, 498, 456, 311, 1179, 294, 300, 11, 718, 385, 458, 13, 286, 1116, 959, 281, 959, 281, 1568, 466, 309, 13, 51014, 51014, 865, 13, 400, 550, 661, 813, 300, 11, 286, 519, 3467, 1553, 16287, 2709, 257, 1238, 665, 12897, 281, 1333, 295, 264, 10675, 2261, 309, 13, 51364, 51364, 3013, 307, 257, 3400, 21789, 13, 51414, 51414], "temperature": 0.0, "avg_logprob": -0.08769993205646892, "compression_ratio": 1.6127659574468085, "no_caption_prob": 3.5911169106839225e-05}, {"id": 489, "seek": 313900, "start": 3159.0, "end": 3160.0, "text": " Which is a comfort stalk.", "tokens": [50364, 286, 1062, 360, 1071, 13541, 13, 286, 362, 668, 1953, 466, 1310, 1455, 452, 13541, 666, 257, 960, 1164, 293, 5127, 512, 4497, 2701, 926, 300, 13, 50814, 50814, 407, 498, 456, 311, 1179, 294, 300, 11, 718, 385, 458, 13, 286, 1116, 959, 281, 959, 281, 1568, 466, 309, 13, 51014, 51014, 865, 13, 400, 550, 661, 813, 300, 11, 286, 519, 3467, 1553, 16287, 2709, 257, 1238, 665, 12897, 281, 1333, 295, 264, 10675, 2261, 309, 13, 51364, 51364, 3013, 307, 257, 3400, 21789, 13, 51414, 51414], "temperature": 0.0, "avg_logprob": -0.08769993205646892, "compression_ratio": 1.6127659574468085, "no_caption_prob": 3.5911169106839225e-05}, {"id": 490, "seek": 316000, "start": 3160.0, "end": 3174.0, "text": " That's a comfort stalk I gave about Elm GraphQL and those ideas. And, you know, look at the Read Me. There are some other good resources there. And as always, there's a very helpful Slack community that you should reach out to if you want to ask questions or talk about best practices.", "tokens": [50364, 663, 311, 257, 3400, 21789, 286, 2729, 466, 2699, 76, 21884, 13695, 293, 729, 3487, 13, 400, 11, 291, 458, 11, 574, 412, 264, 17604, 1923, 13, 821, 366, 512, 661, 665, 3593, 456, 13, 400, 382, 1009, 11, 456, 311, 257, 588, 4961, 37211, 1768, 300, 291, 820, 2524, 484, 281, 498, 291, 528, 281, 1029, 1651, 420, 751, 466, 1151, 7525, 13, 51064, 51064, 865, 13, 1057, 558, 13, 2639, 661, 46607, 2283, 295, 10712, 420, 362, 321, 2212, 561, 1547, 281, 519, 466, 510, 30, 51364, 51364, 509, 820, 764, 9450, 992, 5893, 7754, 13, 51514, 51514, 876, 11, 286, 411, 309, 13, 663, 311, 257, 665, 3637, 281, 917, 322, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.09227090723374311, "compression_ratio": 1.5676567656765676, "no_caption_prob": 0.00010719728743424639}, {"id": 491, "seek": 316000, "start": 3174.0, "end": 3180.0, "text": " Yeah. All right. Any other parting words of wisdom or have we given people enough to think about here?", "tokens": [50364, 663, 311, 257, 3400, 21789, 286, 2729, 466, 2699, 76, 21884, 13695, 293, 729, 3487, 13, 400, 11, 291, 458, 11, 574, 412, 264, 17604, 1923, 13, 821, 366, 512, 661, 665, 3593, 456, 13, 400, 382, 1009, 11, 456, 311, 257, 588, 4961, 37211, 1768, 300, 291, 820, 2524, 484, 281, 498, 291, 528, 281, 1029, 1651, 420, 751, 466, 1151, 7525, 13, 51064, 51064, 865, 13, 1057, 558, 13, 2639, 661, 46607, 2283, 295, 10712, 420, 362, 321, 2212, 561, 1547, 281, 519, 466, 510, 30, 51364, 51364, 509, 820, 764, 9450, 992, 5893, 7754, 13, 51514, 51514, 876, 11, 286, 411, 309, 13, 663, 311, 257, 665, 3637, 281, 917, 322, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.09227090723374311, "compression_ratio": 1.5676567656765676, "no_caption_prob": 0.00010719728743424639}, {"id": 492, "seek": 316000, "start": 3180.0, "end": 3183.0, "text": " You should use selection set dot succeed.", "tokens": [50364, 663, 311, 257, 3400, 21789, 286, 2729, 466, 2699, 76, 21884, 13695, 293, 729, 3487, 13, 400, 11, 291, 458, 11, 574, 412, 264, 17604, 1923, 13, 821, 366, 512, 661, 665, 3593, 456, 13, 400, 382, 1009, 11, 456, 311, 257, 588, 4961, 37211, 1768, 300, 291, 820, 2524, 484, 281, 498, 291, 528, 281, 1029, 1651, 420, 751, 466, 1151, 7525, 13, 51064, 51064, 865, 13, 1057, 558, 13, 2639, 661, 46607, 2283, 295, 10712, 420, 362, 321, 2212, 561, 1547, 281, 519, 466, 510, 30, 51364, 51364, 509, 820, 764, 9450, 992, 5893, 7754, 13, 51514, 51514, 876, 11, 286, 411, 309, 13, 663, 311, 257, 665, 3637, 281, 917, 322, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.09227090723374311, "compression_ratio": 1.5676567656765676, "no_caption_prob": 0.00010719728743424639}, {"id": 493, "seek": 316000, "start": 3183.0, "end": 3188.0, "text": " Oh, I like it. That's a good note to end on.", "tokens": [50364, 663, 311, 257, 3400, 21789, 286, 2729, 466, 2699, 76, 21884, 13695, 293, 729, 3487, 13, 400, 11, 291, 458, 11, 574, 412, 264, 17604, 1923, 13, 821, 366, 512, 661, 665, 3593, 456, 13, 400, 382, 1009, 11, 456, 311, 257, 588, 4961, 37211, 1768, 300, 291, 820, 2524, 484, 281, 498, 291, 528, 281, 1029, 1651, 420, 751, 466, 1151, 7525, 13, 51064, 51064, 865, 13, 1057, 558, 13, 2639, 661, 46607, 2283, 295, 10712, 420, 362, 321, 2212, 561, 1547, 281, 519, 466, 510, 30, 51364, 51364, 509, 820, 764, 9450, 992, 5893, 7754, 13, 51514, 51514, 876, 11, 286, 411, 309, 13, 663, 311, 257, 665, 3637, 281, 917, 322, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.09227090723374311, "compression_ratio": 1.5676567656765676, "no_caption_prob": 0.00010719728743424639}, {"id": 494, "seek": 318800, "start": 3188.0, "end": 3195.0, "text": " Yeah, that's following the footsteps of the Jason episode and the tiny steps episode. Use selection set dot succeed.", "tokens": [50364, 865, 11, 300, 311, 3480, 264, 26883, 295, 264, 11181, 3500, 293, 264, 5870, 4439, 3500, 13, 8278, 9450, 992, 5893, 7754, 13, 50714, 50714, 5490, 818, 3207, 13, 318, 1311, 4357, 307, 264, 2141, 281, 2245, 13, 14724, 13, 1057, 558, 11, 508, 2032, 268, 13, 1042, 11, 3231, 257, 688, 13, 400, 286, 603, 751, 281, 291, 958, 565, 13, 51114, 51114, 3008, 291, 958, 565, 13, 51164], "temperature": 0.0, "avg_logprob": -0.10376840167575413, "compression_ratio": 1.4775280898876404, "no_caption_prob": 3.8224308809731156e-05}, {"id": 495, "seek": 318800, "start": 3195.0, "end": 3203.0, "text": " Nice callback. Succeed is the key to success. Beautiful. All right, Jeroen. Well, thanks a lot. And I'll talk to you next time.", "tokens": [50364, 865, 11, 300, 311, 3480, 264, 26883, 295, 264, 11181, 3500, 293, 264, 5870, 4439, 3500, 13, 8278, 9450, 992, 5893, 7754, 13, 50714, 50714, 5490, 818, 3207, 13, 318, 1311, 4357, 307, 264, 2141, 281, 2245, 13, 14724, 13, 1057, 558, 11, 508, 2032, 268, 13, 1042, 11, 3231, 257, 688, 13, 400, 286, 603, 751, 281, 291, 958, 565, 13, 51114, 51114, 3008, 291, 958, 565, 13, 51164], "temperature": 0.0, "avg_logprob": -0.10376840167575413, "compression_ratio": 1.4775280898876404, "no_caption_prob": 3.8224308809731156e-05}, {"id": 496, "seek": 320300, "start": 3203.0, "end": 3226.0, "text": " See you next time.", "tokens": [50364, 3008, 291, 958, 565, 13, 51514], "temperature": 0.0, "avg_logprob": -0.22211650013923645, "compression_ratio": 0.6923076923076923, "no_caption_prob": 7.5271555033396e-06}], "language": "en"}