{"text": " Hello Jeroen! Hello Dylan! Today we're going to talk about a new project of yours. Yes we are, it's kind of a big day, it's kind of been... things have been leading up to this day for a while, I've been sort of working without announcing things publicly too much, and on the day you're listening to this episode, it's the big announcement day. Although actually when we're recording this, of course, it's not quite there yet. Yeah, and Dylan's gonna stress out for a few weeks before the big release. I've got... it's always the 90 90 rule, the first 90% of the project takes the first 90% of the time, and the other 90% of the project takes the other 90% of the time. So today, like I'm making big quotes with my fingers here, Dylan is releasing Elm TS Interop. That's right. So what is Elm TS Interop? What is Elm TS Interop? Good question. So Elm TS Interop, in a nutshell, the goal of the project is to allow you to wire up your Elm application. So when you say elm.main.init and then you take that resulting value app and you say app.ports.hello.subscribe or whatever it may be, the goal of Elm TS Interop is to give you TypeScript type information about what data will flow in and out of those ports. So in a nutshell, that's what Elm TS Interop does. Now, some listeners may be familiar with the previous project of mine that was called Elm TypeScript Interop. Oh, such a different name. Such a different name. I'm rebranding slightly. I don't know if that's more or less confusing. So maybe we can talk a little bit about what Elm TypeScript Interop was, which I'm now deprecating so that we can contrast that with what Elm TS Interop is. Yeah, that sounds good. So Elm TypeScript Interop used static analysis, which, you know, you know your way around Elm static analysis, I'd say. I've dabbled in it. Yes. So Elm TypeScript Interop, the deprecated project, I think it served its purpose and, you know, I know some users enjoyed it, but it had some limitations. Yeah, so Elm TypeScript Interop had the same goal, basically. Yes, that's right. It had the same goal with a different approach. So the new Elm TS Interop actually doesn't use static analysis at all. It does not look at your Elm syntax tree at all. Okay, so Elm TypeScript Interop did. And so what it would do is it would look through your Elm project and it would scan the source code and it would see all of the declared modules, all of the declared ports. So if you say port hello colon string to command message, so that's a port from Elm to JavaScript that sends a value of type string, then you run Elm TypeScript Interop and what it would do is it would find all of those ports. It would find the hello port that you declared. It would see that the type it was sending was a string and it would say, oh great, hello is going to receive a string. So when you say app.ports.hello.subscribe, it's going to take a function which receives a string value. And that works fairly well, but there are some issues with that approach. One problem is, first of all, this goes against some of the recommended best practices for using ports in Elm, right? Yeah. So Murphy Randall had a talk at ElmConf a few years ago where he advised how to use ports and his recommendation was use one output port and one input port for everything. One port pair. Yeah, exactly right. And that's considered a best practice in some ways. There are a few reasons why that tends to work nicely. But one other important thing is that the old Elm TypeScript interop relied a little bit on a hack, which is that you can serialize JSON types through this sort of describing them with Elm types. And then Elm will automatically describe, Elm will automatically say, oh, this port sends a string. This port sends a record with these fields and it will create a sort of serialization thing that turns it into JSON. Evan actually talks about why he doesn't like this sort of implicit serialization in his vision for data interchange, which we'll link to in the show notes. And I mean, basically the idea is that it locks you into this implicit conversion, which is good until it's not. And then when it's not, you can't break out of it. And if something goes wrong, it's hard to tell what went wrong because there's this implicit thing happening. So that's not great. Also, what happens if you're incorrect about the values that you're receiving from JavaScript or TypeScript through a port? Because TypeScript helps you, but it's not perfect in preventing any incorrect type from flowing through. You mean that you call the Elm ports from TypeScript with the wrong values. Exactly. Exactly. With an incorrect flag shape, or there's a field that is non nullable that it's not a maybe in Elm. So you have flags, data is a maybe string. And so that says that it's nullable and it can be null. But if it's a string, not a maybe string and Elm is expecting to receive that value, but it receives a null there, then what happens? It blows up. Wouldn't the TypeScript compiler tell you about that? Well, it would, but you can ignore it. You can also cast types. And in fact, so I wrote a blog post recently about when can we rely on TypeScript. The post is called TypeScript blind spots. And I kind of walk through the difference between the Elm type system and the TypeScript type system and how we can, you can sort of tell TypeScript, trust me, I know what I'm doing here. And it will allow values to flow through that are actually not the types that you said they were, which Elm prevents that through its design. Oh, TypeScript, you naive compiler. Right. And of course it's, I mean, for its goals, its goals are completely different, but it's, you know, it's something to be aware of. Wouldn't these problems still happen with Elm TS interrupt, which we'll go into later, but you still have the same problems because you can still tell TypeScript this is okay, even when it isn't. Right. So yeah, Elm TS interrupt doesn't change the soundness properties of TypeScript type system, but it does not rely on the implicit serialization. Exactly right. Exactly right. So there's this implicit serialization that happens when you say port hello, and then you have a record to command message or whatever, you know, sort of like low level Elm types. There's an implicit serialization that Elm does for you there. And those can fail if TypeScript sends it some values that it's not expecting in an ugly way. So Elm TS interrupt fixes this because it uses an actual JSON decoder encoder. So the only types of data that flow through with Elm TS interrupt are JSON decode values and JSON encode values, which is the recommended practice in the Elm docs. In general, this is the recommended practice because if you send flags that don't correctly do that automatic implicit deserialization, then your app will just have a runtime exception when it's initialized. But you can gracefully handle incorrect assumptions using Elm TS interrupt. Yeah, even for ports not initialization. When you send invalid data to a port from JavaScript to Elm, you get a big red warning in the console. And if you use an encode value, then you can better handle the error. You can handle it correctly in Elm with showing a beautiful error or something. Exactly, right. You can handle that beautifully in Elm. You have access to the fact that something didn't deserialize as expected in your Elm code, not just an error message in your console. So that's one difference. Another difference with Elm TS interrupt is that you have a single port pair like Murphy recommended in his Importance of Ports talk at Elm Conf. So beautiful talk, yeah. Beautiful pun, beautiful pun. We all love a good pun. So it's a single port pair. Now one of the really cool things about that is when you use Elm TS interrupt to handle your ports coming from Elm to TypeScript, then what you can do is you can do a nice beautiful switch statement that looks a lot like your update function in Elm. Yeah, so if the type of this message coming from Elm is increments blah blah blah, then do this, otherwise do that, blah blah blah. Yes, right, exactly. So it's going to look like typically you're going to have a tag which is a string. So in TypeScript there's this idea of a discriminated union type which is the equivalent of what we're used to in an Elm custom type. Sometimes they're called a tagged union. So just to, you know, for anyone who's not familiar with how union types work in TypeScript, they're what are sometimes called untagged union types, which means in TypeScript you can say type string or number equals string pipe number. And now it's valid if you have a value of that type that is a string or a number. Whereas in Elm that's not valid, you need to have a tag that is sort of like a constructor. So you'd have like a, you know, my, you know, my int constructor and you'd have a my string constructor and now you can have a custom type that can be an int or a string, but it has to be sort of contained within this custom type. Well that's what a discriminated union is like in TypeScript. It's just a convention for using a tag. The tag is something that TypeScript has this notion of which is a literal type and literal types are really cool. Literal types are one of my favorite TypeScript features. Are they kind of like enums in other languages? Is that what it is? TypeScript actually has enums also. So you can enum means a lot of different things in different contexts for languages. You know, you can have a Java enum, which is like a particular thing. You can have a C enum, which is just a number. It's just a number under the hood and you don't specify what the number is, but I guess you can, or you can specify the starting value and you can like create one using the enum value's name or a number directly, which is just kind of weird. So it's not exactly that. It is if you said, you know, type host equals string Dylan or string Yeroon. When you say string Yeroon, you say Yeroon between quotes. Exactly. Yeah. Dylan between quotes, pipe, Yeroon between quotes. You can say that in TypeScript and that is literally saying these are the two valid values for this type. It's these strings and the type checker will actually go through your code and check that it's one of those string literals. Whereas with Elm, there's no such concept, right? You could have a custom type, you know, type host equals Dylan pipe Yeroon. And you could have a from string, which is going to convert one of those values from a string into a custom type. But there's no way to annotate a type and constrain the literal values that something can be. So what it is, is it's saying the type is actually a string. Like you pass in a string to create a value of this type. But if you pass in a string, you know, that says George, that's not a valid host. Yeah. You have to prove to the TypeScript compiler that this is either Dylan or Yeroon. Exactly right. Exactly right. So you could create a function that's like, you know, string input to host that's going to take some user input and check if it's one of those valid options and then create one of those constrained literal types. So literal types are a very cool feature of the TypeScript type checker. I mean, it makes sense, right? Because if you think about the history of TypeScript and its goals, you know, it was created to be a way to gradually add types to JavaScript code bases and enhance it incrementally. And so, you know, what do JavaScript code bases do before TypeScript was around? Well, you're going to have a lot of options that are just strings, right? You know, you user role equals admin, user role equals guest. And now, you know, you have those strings flowing throughout your code and you say, if user role equals equals guest, then do this. Yeah. I guess now you can kind of use symbols for that, but. Okay. So one thing about Elm TS interrupt that makes it work really nicely is that TypeScript type system is extremely expressive when it comes to describing JSON values and what goes through ports, JSON values, right? So it works beautifully. Also, JSON values can be serialized. They can be serialized to local storage. JSON values can be serialized and deserialized for HTTP requests, which is actually another area that I'm exploring with the sort of underlying tooling for Elm TS interrupt. But the basic concept is that TypeScript's type system is very expressive at describing JSON values. So like for example, a TypeScript tuple is similar to a literal type. So a literal type can be any type in TypeScript. Like you can even say, you know, you can have a literal JSON object with fields and concrete values, and you can say, you know, this exact type is a valid option here. Oh, and we kind of, to follow up, to close the thread on this discriminated union idea. So the way a discriminated union works in TypeScript is it uses those literal types. So you can say, if you do a discriminated union of type user equals, then you could do like an object. So type user is an object and you could say, you could have a discriminator. So that would just be a property in your, in that object. So you could say, type user equals JSON object notation, kind colon, and then the string guest. And then you can do pipe or, so another variant of user could be object and then kind the same discriminator field. It's just a property in that object, but for the next one, kind colon, and then the string guest and then the string admin, let's say. Yeah. Is kind of anything special or could it be any property in any value? It's just a convention, but the important thing is that now the TypeScript compiler, if you say switch value dot, you know, switch user dot kind. Now it knows based on the kind, which properties are going to exist on that user. So if guest has no properties, admin has an admin ID and a regular user has a first name, last name, whatever. And now it looks very similar to what we do in Elm. Exactly. Now it looks exactly like an Elm custom type in the sense that you know for this tag, these are the values I have for this tag. So it allows you to express that same sort of, it has the same expressive power as an Elm custom type. So from my understanding, the TypeScript type system is more powerful than Elm's and can do anything that the Elm type system allows you to and more, but it's just that it's less sound because there's a lot of uncertainty in the JavaScript world. Yeah, I think that's an accurate description. So just to reiterate what you just said, the TypeScript type system has strictly more features, but fewer guarantees that the types you have are actually going to be correct information so that it lacks that soundness because the way JavaScript works is dynamic. You can cast things and you can fool the type system, whereas in Elm, you have to prove everything to Elm. And so it's sound in that you can't just say this JSON value has this type, whereas in TypeScript you can say JSON.parse and now the type is any and you can just say, oh yeah, it's a string. Oh, it's this kind of object. Oh, it's a list of numbers and it'll trust you. So yes, the TypeScript type system strictly has more features, even though it's not sound in the sense that Elm is. So this discriminated union feature is what you work with when you're sending a value from Elm to TypeScript with elmts interrupt. So you have a single port. So you have a port called interrupt from Elm. So you would say app.ports.interrupt from Elm. And what elmts interrupt gives you is it generates a TypeScript declaration file that's going to tell TypeScript what types you're going to receive when you're wiring up your Elm application and what types you need to send and that it can accept when you're sending ports from TypeScript. So now when you say app.ports.interrupt from Elm, that's the single port that you use for elmts interrupt to receive an incoming value from Elm. And now you can say in that function, you receive your from Elm payload, your from Elm value, and you can say switch from Elm.tag. And now you're going to have report analytics and it's going to have the payload with whatever analytics information. And that can even be whatever custom type and you know and so on and so on and so on. You can have arbitrarily complex type information expressed there. So the really cool thing is that anything you can describe all sorts of information about these JSON values through the TypeScript type system. So that's the experience you end up getting with elmts interrupt. So let's see, we should probably talk a little bit about how that actually happens and how you end up with TypeScript type information with this new elmts interrupt approach. Because we said that unlike the old deprecated elm typescript interrupt, the new elmts interrupt does not use these implicit serialization, deserialization functions by implicitly describing a port with an elm type. And you mentioned we're using JSON decoders and JSON encoders. That's right. Is that right? Yes. That is, well, yes and no. So elmts interrupt, there are a lot of terms here, but I can tell you from using elmts interrupt, the experience of using it and my sort of goal for the developer experience here is that you sort of tweak a decoder or you tweak an encoder and that type information flows through to TypeScript and you have, you know, it's this sort of types without borders idea I talked about in my elm conf talk, types without borders. That's the goal. So elmts interrupt uses an elm package that I published under the hood and that's what you're writing that gives you the information about the data you're sending and receiving in your ports. So the package is called elmts.json under Dylan Kearns. That's right. Dylan Kearns slash elmts.json. So you can find a link in the show notes. That is the elm package and what that package is is largely it is a drop in replacement for elm.json, json decoders and encoders. All right. So that's pretty boring as some people would like to say. That's right. Yes, it is. Yes, it is extremely boring. In the good way. In the good way. In the good way. It is, it's sort of like a concept. This was one of like my favorite things about coming up with this design was just pulling on thread more and more and seeing that this very simple idea, things just sort of fall into place. So because there's really the underlying idea is not very magical or complex. So the underlying idea is that you have these decoders. So if you say, so instead of saying import json.decode and then saying json.decode.string, right, to get a string decoder in elmts.interop with that package, you would say import or sorry, with elmts.json, which is the elm package, you would import ts.json.decode and then you would say ts.json.decode.string. That so far, it's pretty much exactly the same except the import as a json.decode, right? Yeah. It also gives you a decoder, but from ts.json.decode. That's right. That's right. It gives you, yes, exactly. It gives you the same type of decoder string. So it's going to decode into a string. The difference is with json.decode, you can just run the decoder with ts.json.decode. You can run the decoder and there's actually just a regular elm.json.decode under the hood, but you can also ask that decoder for its TypeScript type. Oh. And there's the magic. There's the magic. That's the only piece of magic. Now, as a user, you don't actually ever do that, but the tooling, so there's this elmts.interop.npm package. And what that does is it leverages that by asking your ts.json.decoders for their type information. I might be going on a tangent here, but I'm curious, how does it do that? How does it go and fetch all those? Right. No, it's a great question. It's not a tangent at all. So yeah, let's talk about that. So what it does is you define a module, Interop definitions. Does it need to have that name? So the way I'm doing it in the CLI, it uses that name by convention, and then you can change the input file using a CLI flag. So, but the main idea is that you define your flags, your elm to JSON ports, and your elm to TypeScript ports and your TypeScript to elm ports. And you define a decoder for the flags and you define a decoder for your elm to JSON ports, for your elm to TypeScript ports. The way it works is you have your Interop definitions module. And in that you just expose a top level record called Interop. And that has a to elm, from elm, and flags. Those three values are just going to be ts.json encoders and ts.json decoders. So for the flags, you need a ts.json decoder because you're decoding values from TypeScript to elm. For the to elm, which is going to be values flowing from TypeScript to elm, you also define a decoder. And those are going to be wired in, of course, with subscriptions. And then for your from elm, which is going to be your ports going from elm to TypeScript, you define an encoder. So those are the three things that you give to your Interop definitions. And what those give you is, so elm ts Interop, the CLI, takes that one module, which contains all of the information about your Interop, your flags, your ports to elm, your ports from elm. And that contains all of the information about the types that will flow in and out through your Interop. And so all it does is it just takes that and it takes the encoders and decoders that you define there, and it creates a little elm app that just imports that value. And then it uses that to generate to ask what the TypeScript types are just using that public API that's part of the ts.json package. So that's all the magic that there is. And then from there, it builds your generated TypeScript declaration file, which gives you the IntelliSense and type safety in your TypeScript code. So that's all it is. And then there's a module that you use to sort of encapsulate that and use that Interop and you send your ports through there. So you don't actually expose your ports. You don't define your own ports. You use these elm ts Interop ports, and it sort of wraps things for you and passes things through those ports. Gotcha. All right. So let's go back to ts.json maybe. Sorry. So you mentioned you have decoders and encoders, which look very similar to json.decode and json.encode. So you gave the example of decode.string. And I'm guessing that you're using the same construction mechanisms. So you can compose them together just like we used to with json.decode and encode. Exactly right. And you can even say, so if you say decode.field first name, decode.string with ts.json, import ts.json.decode as decode. Let's just call it ts.decode as a convention. All right. Then that knows that the TypeScript type you're going to get from that decoder is an object with a field first name that is a string. It knows that, right? I mean, it's not too big of a leap to understand how you could say decode.field. And now the TypeScript type that that will successfully decode is going to be an object with a field of whatever decoder you had. In this case, ts.decode.string. So it's really like it feels magic, but it's actually just this simple idea with it wired up in one place. And this is one of the things that's a big improvement over the old Elm TypeScript interop approach, which is that that static analysis approach would slow down as a code base grew. So some users were reporting performance problems with large code bases. But with Elm TS interop, since there's really no magic here, you're just defining all of your decoders and encoders for interop in a single module. The performance is constant time. It doesn't scale as your code base scales. And it's, I'm guessing, very fast because it's a very small program. Exactly. It's just there's really not that much to it. So it's extremely fast and reliable. I'm guessing you could have tried to do the same thing with static analysis, but the problem with that approach is that sometimes things would get very complex and it would be very, very hard for you to gather the information as reliably as you can with this approach. Oh, you're saying like static analysis of your JSON decoders? No, of the Elm code, sorry. Of which Elm code in particular? So with the Elm TypeScript interop, you would look through the Elm code, you would look for the ports. And then you could see, oh, it uses decoder value. Yes, that's right. Okay, let's look at where that is used. And now let's try to find out what fields are expected in those decoders. Right. So you could do it, but it would be based on how it's like JSON decoder or something. Yeah, that's the thing. And the thing is like if it's complicated for the program, for the tooling to be built that way, then it's complicated to understand because there's this magic that's hard to trace. And if something goes wrong, you don't know where it went wrong or what you're doing wrong. So I really liked the simplicity of this where you're just defining a JSON decoder. Also, it works surprisingly well. So let's talk about a little bit more of the TS JSON API, just to kind of get into where it gets interesting. Because if you're saying tsjson.decode.string, that's cool, but that's not that exciting. It's like, okay, now you know that there's a string going through, you know, and you build up objects by saying decode.field. And now it knows that it's got a field of a particular name of a particular type. That's getting more interesting. You can do that with lists and different data types. But where it gets really cool is one of so now what happens if you say so like, what happens if you say decode.oneof tsd code.oneof and then you have two values in that one of list, you have tsd code.field first tsd code.string and you have tsd code.field first name tsd code.string. So you've just described to you know, maybe you have like backwards compatibility with a different type that you used to send, right? So now, do you know what the TypeScript type annotation would be for that port now? So it would be an object with the first property, which is a string, or it would be an object with first name, which is also a string. Exactly. So it's a union type. It's not a discriminated union like an Elm custom type, but it's just a straight up union of like, it can be these two different types. So that's how you build unions with, you know, the TS JSON decode API. It's just you say one of which is so easy to write and gives you this incredible expressive power. So I really like how that lined up. Now, the other ingredient that I think starts to make it really interesting is the TS JSON decode literal function. Oh, yeah, I've seen that one. So that is to build those type literals, right? So it's Dylan or Yeroon. Exactly, exactly. We talked about the literal type Dylan or Yeroon, which is just two literal strings. So you could do that with, so you would do TS JSON dot one of, and then you would do TS JSON dot literal, and then you give it a JSON encode value. So you could just give it a JSON encode value, JSON dot encode dot string, Dylan, and then you do another TS JSON literal, and you'd give that JSON dot encode dot string, Yeroon. Notice, it's just a JSON encode value. So it could have been any encoded JSON value there, but often it's just going to be strings or ints or something like that, but it can be anything. So now we've just defined that literal type. And also notice that if you wanted to do a discriminated union, that's the building block you have. So now if you wanted to do that discriminated union where you said TS JSON dot, so where we had like a discriminated union user, type user in TypeScript, type user equals object kind colon guest string. Guest is a string. That's a literal string. Or object kind colon admin. And then we also have an admin ID is a number in there, right? So if you wanted to do that, now you could say, you could use TS JSON dot one of, and you would say TS JSON dot field kind, and then you'd use a TS JSON literal of guest. Now you've just defined that guest variant of that discriminated union. And then you do a similar thing for defining the admin type with the admin property. And now you've just told TypeScript that what type it should expect to send or receive there. And you've told Elm what data type it's going to receive as well. Yeah. So if you want to do any kind of union discriminated or not, you use one off, right? Yes. For decoding, that's right. Exactly. If you want to end up with a TypeScript union type, then you use TS JSON dot decode dot one of that's right. So something about using decode one off, or what about discriminated? Oh, but the Elm now knows about the type. That is what it was. Okay. Yeah. So this is like, this is one of the most important points I think about this approach. So with the old Elm TypeScript interop approach, the source of truth source of truth is really important in general with this sort of concept of like types without borders. I'm not sure how much my hashtag types without borders is catching on, but I at least like having that idea in my brain of like, you know, being able to have types that flow through these different boundaries of different languages and runtimes and whatever without losing information about what, what types are passing through. And so in, in this concept of types without borders, there's like a very important point of what is the source of truth? Yeah. With Elm GraphQL, the source of truth is the GraphQL schema. Now actually that's oversimplifying because well, what's the source of truth of that GraphQL schema? The thing that generates that schema. The thing, exactly. So if you're using GraphQL JS or something like that, then you've got like a schema definition language that where you describe the types and then you just send data through your, your endpoints. And hopefully the types match up. And if they don't, the GraphQL JS server will say that something went wrong. So the source of truth is just sort of what you write in that, in that file that describes the schema. If you use, you know, a TypeScript package like Nexus, that's what's called a code first approach to GraphQL. So now you're writing code for, for sending values out and that code is the source of truth for the schema. So sometimes they call this code first, you know, schema first or code first approaches to GraphQL. If you're using a tool like Hasura or PostGraphile, then the source of truth is your Postgres database. And that database, those tools will take your database schema and turn that into the schema. So many layers of indirection. Right. I mean, it works nicely, but yeah. Yeah. You can derive so many things from one thing, which is very nice. Yes. It can also create problems, I guess. Well, that's right. And that's, that's exactly the challenge, right? Is whatever that source of truth is, and this can happen with these sort of database schema driven GraphQL tools is sometimes it can become too low level because you're coupling it to the sort of schema. Now there are ways to avoid that by using sort of higher level tables and having tables that are low level details that don't end up in the public facing API. You can define, you know, you can define Postgres functions and use those as a, a way to do higher level things. But all that to say, if you're lost by the specific GraphQL jargon, that's, that's not the important thing. The important point is what is the source of truth? And this is something I've been thinking about. So with the old Elm TypeScript interop approach, the source of truth was the types that you just, that you wrote in your port. So when you say port, port send user, and then you have a record, well, there's one problem, which is you can't send a custom type through that port because, you know, Elm doesn't have a way to describe, to describe custom types in a serializable way. So you're stuck with records, strings, ints, these basic types. Yeah. So you're over generalizing. Yeah. You could be more precise if you had more knowledge, but you lost it somewhere. Exactly. It's lossy. It doesn't have the full expressive power of the Elm Type system. So that's, that's one problem, but, but that's actually not the problem I'm talking about. The problem I'm talking about is that now what is the, what is the resulting TypeScript type? Well, it's whatever you end up with by automatically serializing that Elm type. So forget the limitations of that automatically serializable Elm type, not being able to represent any Elm type, but now your source of truth is that, that Elm type. And so even if you could describe any Elm type, even if you could, let's just say you could automatically serialize a custom type in Elm using a port. So you could say, you know, you have type user is guest or admin, admin ID, whatever fancy Elm custom type you have. Let's say you could send that through a port directly and Elm auto serializes it. Well, what's the serialization format? Because is that how you want it in TypeScript? So there's the issue. Now your source of truth is the Elm type and that's the first class citizen. But what does that mean for the TypeScript type? It's a second class citizen. That's, that's an inherent problem. So what I've realized is that one way to approach this problem is to make the first class citizen, the serialization or deserialization layer, the sort of adapter. Because if you think about a decoder, what does a decoder describe as the source of truth? Does it, is the source of truth, the Elm type you're going to end up with, or is the source of truth, the JSON data that you're going to receive? The JSON data that you're going to receive. I would argue that the source of truth is the translation layer, which represents both. So that's the really cool thing. Neither one is a second class citizen. You tricked me. I tricked you. That's your question. So, so the, uh, you have not lost the ability to express whatever type information you want from the JSON TypeScript side and whatever information you want to turn that into on the Elm side, you're completely able to express both of those. And you can, because of course you can use your decode dot map helpers and all those fancy things to turn into whatever Elm types. And, and you can use this, uh, TS JSON decode API to expect arbitrary JSON data with very intricate constraints described, like the literal types. You can have object properties, union types, even intersection types. You can, like, you can really constrain your JSON in pretty, pretty powerful ways using, using that type system. So what you end up with is types without borders, where the source of truth is the thing that describes that serialization or deserialization, which means, so if you think about that flow, what that means is, uh, let's say that you change your decoder, right? You change your decoder and then you rerun the Elm TS interrupt CLI tool. Then what's going to happen is you, you're going to end up, you know, you regenerate your TypeScript declaration file with the CLI tool. Now you, you're, you've ended up with different TypeScript types. So now you're going to get a TypeScript error or, you know, or some error in Elm where the types have changed. And so you have, you have to go and fix those, but the source of truth is like the actual thing that's, that's handling that translation. So that's always going to be correct. And it's always telling both sides what, what should happen. It's like, Hey, Elm code, uh, so this decoder just changed and, uh, you're now going to receive this type, right? That's what Elm, Elm's type system gives you, which we love. Well, you get that same effect on the TypeScript side, where you change the expecting TypeScript types and TypeScript is like, Hey, uh, so did you notice that you, you're wiring in the wrong type because the decoder just changed? It's a, it's a lot to wrap your brain around, isn't it? We haven't even talked about encoders. So I'm guessing it's pretty similar in a way. Well, uh, so encoders are similar, but there's one distinction that I, that I want to point out. Cause I think a podcast is a good medium for this. And that is, so notice that it's the type that you have is encoder, not json.encode.value. So, yeah. So in the, in the Elm slash json, we have decoders, but we don't have encoders. Exactly. At most we have a function that takes some data in terms of two, json.encode.value. Exactly right. And so this is like a really, um, I mean, I hope that this concept is helpful for somebody getting started with Elm TS Interop. Um, I think that just having this mental model can help. So just conceptually, if you wanted to get type information about a json.encode.value that you, you do, you know, json.encode.object and then you create a bunch of fields. Well, what, what keys does it have? I mean, what if you do an, a conditional in there and you, you do one key in one case and another key in another case, what if you encode to a string in some cases and an objects in other cases, there's nothing stopping you from doing that. So what's, what, what's the type that is going to result in? You don't know. It's just an encode value. It could represent any type. And you don't, you don't know until you pass a val, an Elm value to encode it. Yeah. And it's totally opaque. Like the only way to extract information is to try and decode it. Exactly. And to do that, you need a value, but what, what value are you going to send through it? It could be an infinite number of values, you know, so that that's not going to work. So that's the, uh, that's the trick with this API is that it's not an encode. It's not a tsjson.encode.value. It's a tsjson.encode.encoder. And that represents a function and it knows what Elm type it's going to receive. And it only handles one particular Elm type. So in the case of, you know, our, uh, our TypeScript discriminated union type user, which is a guest or a regular user or an admin user, we've got, you know, let's say that we're serializing that from a similar Elm type, which is an Elm custom type, the equivalent of that TypeScript discriminated union. So you would write an encoder. I mean, you can imagine writing a plain vanilla Elm, json encode, you know, encode value, a function that takes that Elm user type and encodes it into an encode value. And it's going to say, you know, case user of admin, grab some admin information, encode.object, yada, yada, yada. Well, it's similar with, with a tsjson encoder, except that it's not just by convention that you're making it a function. The encoder itself represents a function. So, uh, so, you know, you can say union, uh, you know, ts, ts encode, let's call it it's import tsjson.encode as ts encode. So now you could say ts encode.union. And the first thing you give it is a function. And in that function, you're going to do a case statement on your user type. Where's the user type coming from? Well, the encoder you're defining represents taking a value and serializing it. So it's not a, it's not an argument that comes from the function you're defining. The thing is that you give it that, you know, probably an anonymous function in that context and describe how to take that thing and turn it into an encode value. Yeah. It looks a lot like the codecs that we talked about during the Elm codec episode. That's right. It does look very similar to the codec. So yeah. So if you're used to that pattern, it's the same. Right. So one of the tricks here, it's worth looking at the docs for this because it might take a little while to wrap your brain around, but I think it's always, you know, this is one thing that we kind of come back to pretty often on this podcast is to understand API design for a particular package in Elm. It's often useful to sort of understand the problem that the API designer was trying to solve with that. Well, I have firsthand experience on this API, so I can give a little insight into the problem that this is solving. So the first one I described, which is how do you get the type of an encode value? You can't, you need an encoder. The second thing is how do you know? So like now you're describing a union encoder. And so union is the word I'm using because it's going to encode it into a TypeScript union type. And so how do you describe that? How do you know the possible things you might encode into? Because now if you say, okay, I have a function case user of, and then you just give it a JSON encode value. Well, now you still have the same problem that you could encode it into any value. However, with the design of this API, and this was inspired by Elm Kotick and Mini Bill Leonardo's work on that, which so big thanks to him. I had some conversations with him and he really helped me kind of have some of these insights for this particular part of the API. And so now you have to, I think of this as like registering the different possible encoders in that union. So now you have to define these different encoders. And so you say, you know, variant, variant literal or variant object, or you can have these different variant types. And that's sort of like registering something that you're going to receive in that anonymous function. And you can use that when you when you say case user of you can use that to, to encode the user. But why can't you just do any JSON encode value? Well, the reason is because you need to, you need to register upfront all the possible things you might encode into so that Elm TS Interop can know those types and create the appropriate union type. Because otherwise, it could be any JSON value, you don't know what it's going to be. So that's a lot to unpack. Yeah. But but overall, the the package looks very similar to JSON to Elm slash JSON, with the additional of some functions to better reflect or better decode the TypeScript possibilities. That's right. Yeah. So also looks a bit like codec in some instances. And the obvious additional feature is that you can get the TypeScript type that you can extract that out of the encoders and decoders. Yes. Yeah, you'll probably get pretty far with this library before you realize where it diverges from the Elm JSON API. Yeah, I mean, chances are, I guess, I guess you might be sending some sophisticated custom types through ports. I mean, that's like one that's one of the main goals of this project was people kept saying with Elm TypeScript Interop, how do I serialize custom types? And I was like, hmm, I've got some very fancy ideas for how I might do that. And they all just felt like, like, okay, I could do that. But yeah, it's like so complicated. And how the developer experience was confusing, because there are all these specific things you have to learn and these conventions you have to rely on. And then not only that, but you have this problem of, you know, which type is the first class citizen. So you have Elm types, and you automatically serialize these things. And what if you have opaque types and all these challenges? So this, I'm a lot happier with this design. So I'm curious, can you use Elm TS JSON in any way without Elm TS Interop? Does it have any value? Yes, that's one of the reasons why I named it Elm TS JSON, not Elm TS Interop. I originally was calling the package itself TS Interop. But first of all, I think that the name reflects what the package does a little bit better, because it's just it's just JSON encoders and decoders, except that they're TS JSON values. So you can ask for the type information. But also, I discovered that I can use it to do a lot more than just Elm TS Interop. So one of the things that I've been exploring also, I'm not quite ready to release this, but hopefully I'll make an announcement soon. I've been playing around with something that allows you to use this same underlying package and similar techniques to have a type safe bridge, this sort of types without borders concept with interacting with serverless functions. So the basic use case would be you have a serverless function, which is just a, it's just a JavaScript function. I mean, you can write them in different languages. And there are, you know, there are some tools out there for using serverless with Elm. And that's, I think, an interesting and useful approach too. But the idea is if you just want to write a serverless function, serverless functions are a really nice way to just like call an NPM package. Like, for example, if you're using Stripe to initiate a payment, or you're using Auth0 to authenticate someone or whatever it may be, you just pull in, you know, you just want to use this Stripe NPM package. And you also want to have like a server secret, which you cannot include in your client code because you don't want them to be able to do payment processing. Yeah. So I'm sure there are some features or some use cases for that. Yeah. Right. I think there might be like fraud. Right. Basic fraud. Yeah. Yeah. I mean, it's really, it's because, I mean, this is the kind of thing, like, if you think about it, it's like ports are really useful for certain cases. But then some cases you just, you need to do it in a secure environment, or you need to do it in an environment where you, you know, the code that's executing submission, that you're not bypassing some client side validations, and you need to have the server as the gatekeeper or whatever, right. So, you know, you want that to be the source of truth. So I actually built this project and have been playing around with it where it uses Elm TS JSON to let you define a layer to perform HTTP requests to a serverless function. In this case, I've been doing it with Netlify because Netlify serverless functions are really easy. You have a folder that has a bunch of dot JS files that export a function called handler, which returns status code 200 or whatever status code comma body, and then a string. And you know, often you want to have that string be JSON string fight or whatever. So I built this layer that keep uses that type safe bridge so that you get Elm functions for making a request and response. And it uses Elm TS JSON to describe an encoder for the request it will receive. So you're in your serverless function code, you know, the TypeScript type you'll end up with that you'll receive from Elm. And then it knows what type you need to send back in TypeScript based on the TS JSON decoder that you write. And if you don't send the right type, TypeScript will yell at you. So I so I another thing I built with this, so the Elm TS JSON package has a function that allows you to get the the TypeScript type. It also has a function that allows you to get the JSON schema type. And so JSON schema is just using JSON values to describe JSON values. Is that weird? It's JSON that describes the shape and is analogous to like using TypeScript to describe the shape of JSON except the format is not a TypeScript string. It's a JSON value in this format. But does it look like TypeScript or is it simpler? I mean, it's uglier because it's JSON in a particular structure. It's like not the best to handwrite. But that's the cool thing, right? Is you can use tooling to do this. But the really cool thing is that I use in this sort of alpha tool that I built that I haven't publicized yet. What happens is it uses the JSON schema values of the encoders and decoders to scrub and validate the server inputs because you don't want to accept server inputs. It could be a security problem to send data that you didn't expect to send and to receive data that's not the types you expected to receive. So it's not enough to just have TypeScript types that sort of tell you what the types are because you want to actually ensure that those types are correct. So you're sending an encoder value? Yeah. But the additional fields that are not necessary are removed from the payload. Exactly. Those will get stripped out. And if you say you're sending a string and you send a list or vice versa, it will give an error instead of calling that serverless function. And the really cool thing is the code to do that is very minimal. It's just sort of a nice wiring for this that leverages that technique. So that's another tool I've been working on. But just the general, I built the TSJSON package for tooling. So that's sort of the point is that it gives tooling a very simple way to sort of introspect the types. Gotcha. I'm wondering, would you use Elm TSJSON instead of Elm JSON for anything? Because it can do the same thing, but it can also do more. Yeah. I would probably pull it in as needed. So I was starting to use it with Elm Pages under the hood because Elm Pages has a fair number of ports that I use to get meta tags and information from the application and then generate the HTML for that. And so I was starting to convert my decoders and encoders to use Elm TS Interop and Elm TSJSON. And it works nicely because if you need a regular JSON encoder or a decoder, you can just turn your TSJSON one into that. Actually, one thing I started doing there was I started to build, it's not quite ready to be published, but I started to build a codec version of TSJSON because it turns out originally I didn't build a codec version of the API because I figured most of the time you're like, hey, TypeScript, here's this data or hey, Elm needs this data from TypeScript and you don't necessarily need to go both ways. But I ended up building it because I realized with Elm Pages, I use Elm program test heavily in Elm Pages. And so with Elm Program Test, you can test your ports. But to test your ports, you need to give a decoder that tells you how to deserialize the JSON that you send through your ports. So I need to go both ways. So I've been using codecs in order to do that and I realized I needed that. I think that will be a nice addition. Yeah, I think so too. It's nearly done. I got most of it pretty easily. It will be in Elm TSJSON also. It would not be a separate library. Exactly. It'll just be part of it. That's one of the really cool things. It's just whatever that library does, the key thing is given an encoder or a decoder, can you get the TS type? And then anything else the API adds or changes, that's the core detail that the tooling around it like Elm TS Interop needs to leverage it. I imagine that we can use the same technique for any kind of format. So you're using it for JSON, but someone could do something similar for Protobuf or XML. I don't know if there's an XML schema. Soap, simple object something something. It's very simple. You'll love it. Yeah. I prefer staying dirty. Let's put it that way. Yeah. But yeah, you can use the same technique. You would just write a different encoder, a different decoder, but you could use the same thing, right? I think so. I think I'm certainly going to be looking for other places to apply this general pattern of... Because this is one of the cool things about Elm APIs is you have all these guarantees as you build things up in Elm APIs. You know somebody's not going to sneak in some value that isn't possible with your API. So you can prove that you're going to have correct TypeScript type information or whatever metadata you want to describe about these values. So I think it's a very cool general concept that I totally agree can be applied to many other areas. So are there any pitfalls that you have seen that you have not been able to avoid using API design? How can people misuse the tools in a way that they did not expect? Do you need to test your decoders or encoders in a specific way? Well, the really cool thing is when you're trying to keep a server and client in sync, there's a whole class of problems there between versioning strategies and all of that. With ports, with interop, you don't have to deal with that class of problems so much because it's just the client. Yeah, you usually ship both the Elm code and the JavaScript code at the same time. Exactly. So you know that they're in sync. There's not this possibility of having to bridge between two different versions and have that compatibility layer. So that whole area of complexity is completely avoided in this area. So that's the cool thing, right? You write your TS JSON encoder and decoder and now you've got them in sync and you address any errors and then the next version of the client you ship is going to be working with those assumptions. Of course, you can still read something from local storage and assume the types of it and that sort of thing. But that's just a general challenge with TypeScript. So I would say probably the biggest pitfall is just that you're working with TypeScript. So TypeScript, I think we could easily fill a whole episode talking about TypeScript. But in a nutshell, I think that TypeScript is extremely well designed for the goals of the project. That said, the goals of the project limit its ability to have a town sound type system and give guarantees in the way that Elm does. Yeah, that is not one goal of TypeScript. Right, right. It's more attempting to fit into existing JavaScript systems and conventions and all of that. And it does a very good job within those constraints, but it means that it can't guarantee as much. And so I wrote a post which I referenced earlier in this episode called TypeScript's blind spots. And that's linked to in the show notes. I think that's worth a read just to understand when you can rely on TypeScript and when you can't, just so you know what to be extra careful with. Also, I think it's important to just make sure that your CI process is set up to make sure you're checking your TypeScript carefully and running it in your build. And also, I kind of talk about this in the TypeScript's blind spots blog post that there are some things that make TypeScript a little bit safer. So for example, you can use a TypeScript ESLint check that will ensure that you're doing exhaustive switch statements. Static analysis. Yeah, yeah. So that's a really good static analysis rule that makes it a lot more robust, especially with Elm TS interop. I'd say that's probably the biggest gotcha. Yeah. I had a few questions or notes. So you mentioned that there's only one output port and one input ports. Can you add several ones? You can have a, maybe you could call it a legacy port. So what Elm TS interop does is it gives you the generated TypeScript declaration file, which is just a format that it's like a header file in C or something where you can describe the type information of a JavaScript file. So the generated Elm JavaScript, it's just describing that. And what that generated TypeScript declaration file from Elm TS interop does is it describes what it knows about the ports that it controls, which is flags, the from Elm, you know, interrupt from Elm. There's a port called interrupt from Elm and there's a port called interrupt to Elm. And it describes those. And, you know, I think those names are unique enough that that won't be an issue for most people. And then it says that the type of the ports is unknown for any other ports. So it's not going to say, oh, those ports definitely don't exist. It's going to say other ports may exist, but I don't know anything about their types. So it uses these unknown types for those. Could you use Elm TS interop several times, one for interrupt definitions, that module that we talked about and a second time with a different interrupt definitions module with different name. What I'm too. Oh, did you have a use case in mind? Cause I've got, I've got. Yeah. My use case would be just gradual migration. So I have plenty of ports and I want to use this approach with Elm TS interop. Yeah. But I need to, I would like to get some of the benefits. Yes. Yeah. I think that is a very good, very good approach. And I definitely, I would do the same myself. So it works pretty nicely with that because those legacy ports, you can migrate off them little by little. So, and then pull things into your interop definitions module. So that's basically what I'll probably write up a little guide on how to do that and included in the show notes. But I think that that's definitely like something that, that is going to work out nicely. My migrating over incrementally. So ports are unknown and you can register, you can keep registering the old ports and move them little by little and that's, that's going to work fine. So like the default with Elm TS interop, you're probably going to be serializing and de serializing union custom types at the top level. And so you just keep adding new custom types for the new values you're going to send. Yeah. Also, we haven't talked about the pricing. And so I wanted to talk about this early on, but there were just so many details to talk about that we kind of didn't, didn't get there yet. Well, we actually didn't even mention that it was a paid product. We did. Right. So it is the core stuff is all free and will always be that is the core stuff. The core stuff is the Elm TS interop Elm package is. Elm TS JSON. Yes. Thank you. The Elm TS JSON Elm package is free and no strings attached. And you can use that for other projects. The so I'm going to release a free version of the CLI at the time we're recording, we're just wrapping up a closed beta. So that free version of the CLI is actually going to do the things that we described on this podcast. So we actually haven't yet talked about any pro features. So fortunately everything that we've talked about so far has been available for free. Yay. Yay. Okay. So, so hopefully nobody's let down because you can do all the things we've talked about so far. The pro version, and this was something very important to me. I wanted to have the pro stuff be like extras for basically, if you get a lot of value from Elm TS interop, if you rely on it for your business and you're like, Oh, this is this is really useful, then you can, you can buy it if you'd like. And I hope, I hope the extra paid features are useful. So the pro features currently include number one, a scaffolding tool, which is a web app that you, you load in your browser, you give it a TypeScript types as input and it generates encoders and decoders, including for discriminated unions. Like the one we talked about, the type user holds discriminated union. It can do a pretty darn good job. Even with some complicated discriminated unions like that, it even generates like Elm types, Elm custom types for you. And that's like starting point. It's the cool thing is you take that scaffolded code as your starting point. You copy it over. So now it's, now it's yours. Now you own it, not the scaffolding tool. And you can change it all you want. And when you change it, the Elm TS interop, you know, generated type definitions are going to reflect the changes you make to your code. So you own it, not the scaffolding tool. Yeah. I've seen it in action and it generates a lot of code. There is value in this tool. Yeah. I can tell. Yeah. It generates and it generates an encoder and a decoder for you. So you can just type a TypeScript type and it gives you, and you can just copy whatever you want from it and use in your code. So yeah, I think it'll be quite handy. Oh, you will need to generate a codec now. I might. Yeah. I might do that too. Yep. Good luck. And maybe I'll add a radio button so you can like pick which ones to generate to reduce the noise. But yeah, it's a, I'm really happy with it. I think it's, I think it's a cool pro feature that you can do without, you can do everything you need to without it, but I hope it is more ergonomic for people who find value in the tool. And the other paid feature is an NPM package, which I give you access to when you, when you pay. And what that does is rather than having a single custom type that it represents your, you know, to Elm values, your from Elm values, you can define top level values in your interop definitions module for encoders and decoders. So just like an Elm test, you can define top level values of type test. The pro NPM package allows you to just expose top level values of type encoder of type TS, JSON dot encode dot encoder and of type TS, JSON dot decode dot decoder. And it'll automatically generate the code that's needed to encode each of those types. So you don't have to do a big case statement yourself and write the top level encoder or decoder. So it's just a little more ergonomic. Yeah. So it writes that complex codec for you. Yeah. Yeah. And it's just a little more ergonomic to add a new one. You just, you know, you don't, and you, you can you can just call. So it's going to give you a function for each for each top level value you define in your interop definitions. It's going to give you a top level function that takes that, that type and, and sends it directly. So you don't need to like build up a custom type and send that through. So it's just a more ergonomic way of using it, but it's, you know, nothing that you can't do without the free version, but I hope people find it useful. Yeah. Do you think you will add additional paid features? I'll probably at some point add some like video material about the, about some of the paid stuff that paid users will get access to. And we'll see, we'll see if there's more, but I think, I think that'll be a lot of, a lot of goodies for, for pro users. Okay. So what is the pricing model? I'm doing it as a single one time fee. You pay for it. It's yours. You're authenticated with your GitHub account. It gives you access to the website. So you just log in with your GitHub account and you get access to the scaffolding tool at elm.ts.interop.com. Link in the show notes. Link in the show notes. And you and then it automatically gives you, you know, sends you instructions for setting up the pro NPM package and gives you access to that. So, yeah, that's the pro package. Very cool. Very cool. So if I, if I want to use this tool at work and I want my, my whole team to use it, will every developer need to buy it? Right. Good question. So the, I went with the simplest model that I could go with to start just just because there, there are so many ways you could go with pricing and all that. And it's, you know, it's a lot for, for me, it's a lot for, for users to think about. So I just wanted to make it really simple. And so it's just one price per user. If you, and if you want to buy more seats, if you want more users to have access to the scaffolding tool, then you buy more licenses. Simple as that. All right. And maybe don't buy one for the intern, I don't know, something like that. Yeah. Hopefully if it's, you know, giving a lot of value, it's you know, I mean, it's, it's not, it's, I think it's priced pretty, pretty fairly for you know, if you're relying on it heavily for your project, I think the pricing is going to be quite fair. And the core features are free. So. That's right. Yeah. Yeah, exactly. So I think the parts that you can rely on as a business are free and what is paid just adds more value, but it is not necessary to work with it or to depend on it. Right? Yes. Yeah, definitely. That sounds very, no strings attached to me. Yeah. That's, that was my goal. And I yeah, it's, so it's very exciting to release actually my first paid product ever. You know, I've done services and, you know, workshops and that sort of thing, but this is the first time I've ever created a paid product. So I'm, I'm really excited to, to try that and see how the community responds. Yeah, me too. Yeah. I'd love to hear what people think. And I mean, I'm excited to see how this goes because I'm hoping that I can just dedicate more time to building projects and, you know, monetizing them directly so that I can build more of them. So. Yeah, because the better it works financially, the more time you can spend building this tool and other tools like it. Exactly. Yeah. I would love to see more of that kind of thing in the Elm community so we can invest more as a community and pushing things forward. I'm very much looking forward to how this turns out. Yeah, me too. All right. So how can people get started with the Elm TS Interop? First go to elm.ts.interop.com. I'll give a nice discount code that you can access, you know, just put in your email and I'll send you a discount code there. I'll have some resources for getting started with both the free and pro tiers. And then other than that, also I, I wrote some blog posts back in December for the functional Christmas that the consulting company Beck does. They do a lot of cool Elm stuff. So check those articles out if you're curious to hear more about my thinking on this general approach to the tool. I wrote one post that we'll link to about combinators and why that word sounds really complicated, but I think is an important idea. And then I wrote a follow up post called Types Without Borders Isn't Enough. And I really enjoyed sort of writing that and thinking about that. I think that I kind of talk about some of the reasons why I think that Elm GraphQL has stood the test of time as a solid approach and Elm TypeScript Interop needed revisiting. And I talk about the reasons why. So, so give it a try and I'd love to hear what people think. And well, until next time, talk to you later. Until next time. Bye bye. Bye.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 6.88, "text": " Hello Jeroen! Hello Dylan! Today we're going to talk about a new project of yours. Yes we are,", "tokens": [50364, 2425, 508, 2032, 268, 0, 2425, 28160, 0, 2692, 321, 434, 516, 281, 751, 466, 257, 777, 1716, 295, 6342, 13, 1079, 321, 366, 11, 50708, 50708, 309, 311, 733, 295, 257, 955, 786, 11, 309, 311, 733, 295, 668, 485, 721, 362, 668, 5775, 493, 281, 341, 786, 337, 257, 1339, 11, 50944, 50944, 286, 600, 668, 1333, 295, 1364, 1553, 28706, 721, 14843, 886, 709, 11, 293, 322, 264, 786, 291, 434, 51272, 51272, 4764, 281, 341, 3500, 11, 309, 311, 264, 955, 12847, 786, 13, 5780, 767, 562, 321, 434, 6613, 341, 11, 51548, 51548, 295, 1164, 11, 309, 311, 406, 1596, 456, 1939, 13, 865, 11, 293, 28160, 311, 799, 4244, 484, 337, 257, 1326, 3259, 949, 51796, 51848], "temperature": 0.0, "avg_logprob": -0.18587020874023438, "compression_ratio": 1.7067137809187278, "no_caption_prob": 0.26517489552497864}, {"id": 1, "seek": 0, "start": 6.88, "end": 11.6, "text": " it's kind of a big day, it's kind of been... things have been leading up to this day for a while,", "tokens": [50364, 2425, 508, 2032, 268, 0, 2425, 28160, 0, 2692, 321, 434, 516, 281, 751, 466, 257, 777, 1716, 295, 6342, 13, 1079, 321, 366, 11, 50708, 50708, 309, 311, 733, 295, 257, 955, 786, 11, 309, 311, 733, 295, 668, 485, 721, 362, 668, 5775, 493, 281, 341, 786, 337, 257, 1339, 11, 50944, 50944, 286, 600, 668, 1333, 295, 1364, 1553, 28706, 721, 14843, 886, 709, 11, 293, 322, 264, 786, 291, 434, 51272, 51272, 4764, 281, 341, 3500, 11, 309, 311, 264, 955, 12847, 786, 13, 5780, 767, 562, 321, 434, 6613, 341, 11, 51548, 51548, 295, 1164, 11, 309, 311, 406, 1596, 456, 1939, 13, 865, 11, 293, 28160, 311, 799, 4244, 484, 337, 257, 1326, 3259, 949, 51796, 51848], "temperature": 0.0, "avg_logprob": -0.18587020874023438, "compression_ratio": 1.7067137809187278, "no_caption_prob": 0.26517489552497864}, {"id": 2, "seek": 0, "start": 11.6, "end": 18.16, "text": " I've been sort of working without announcing things publicly too much, and on the day you're", "tokens": [50364, 2425, 508, 2032, 268, 0, 2425, 28160, 0, 2692, 321, 434, 516, 281, 751, 466, 257, 777, 1716, 295, 6342, 13, 1079, 321, 366, 11, 50708, 50708, 309, 311, 733, 295, 257, 955, 786, 11, 309, 311, 733, 295, 668, 485, 721, 362, 668, 5775, 493, 281, 341, 786, 337, 257, 1339, 11, 50944, 50944, 286, 600, 668, 1333, 295, 1364, 1553, 28706, 721, 14843, 886, 709, 11, 293, 322, 264, 786, 291, 434, 51272, 51272, 4764, 281, 341, 3500, 11, 309, 311, 264, 955, 12847, 786, 13, 5780, 767, 562, 321, 434, 6613, 341, 11, 51548, 51548, 295, 1164, 11, 309, 311, 406, 1596, 456, 1939, 13, 865, 11, 293, 28160, 311, 799, 4244, 484, 337, 257, 1326, 3259, 949, 51796, 51848], "temperature": 0.0, "avg_logprob": -0.18587020874023438, "compression_ratio": 1.7067137809187278, "no_caption_prob": 0.26517489552497864}, {"id": 3, "seek": 0, "start": 18.16, "end": 23.68, "text": " listening to this episode, it's the big announcement day. Although actually when we're recording this,", "tokens": [50364, 2425, 508, 2032, 268, 0, 2425, 28160, 0, 2692, 321, 434, 516, 281, 751, 466, 257, 777, 1716, 295, 6342, 13, 1079, 321, 366, 11, 50708, 50708, 309, 311, 733, 295, 257, 955, 786, 11, 309, 311, 733, 295, 668, 485, 721, 362, 668, 5775, 493, 281, 341, 786, 337, 257, 1339, 11, 50944, 50944, 286, 600, 668, 1333, 295, 1364, 1553, 28706, 721, 14843, 886, 709, 11, 293, 322, 264, 786, 291, 434, 51272, 51272, 4764, 281, 341, 3500, 11, 309, 311, 264, 955, 12847, 786, 13, 5780, 767, 562, 321, 434, 6613, 341, 11, 51548, 51548, 295, 1164, 11, 309, 311, 406, 1596, 456, 1939, 13, 865, 11, 293, 28160, 311, 799, 4244, 484, 337, 257, 1326, 3259, 949, 51796, 51848], "temperature": 0.0, "avg_logprob": -0.18587020874023438, "compression_ratio": 1.7067137809187278, "no_caption_prob": 0.26517489552497864}, {"id": 4, "seek": 0, "start": 23.68, "end": 28.64, "text": " of course, it's not quite there yet. Yeah, and Dylan's gonna stress out for a few weeks before", "tokens": [50364, 2425, 508, 2032, 268, 0, 2425, 28160, 0, 2692, 321, 434, 516, 281, 751, 466, 257, 777, 1716, 295, 6342, 13, 1079, 321, 366, 11, 50708, 50708, 309, 311, 733, 295, 257, 955, 786, 11, 309, 311, 733, 295, 668, 485, 721, 362, 668, 5775, 493, 281, 341, 786, 337, 257, 1339, 11, 50944, 50944, 286, 600, 668, 1333, 295, 1364, 1553, 28706, 721, 14843, 886, 709, 11, 293, 322, 264, 786, 291, 434, 51272, 51272, 4764, 281, 341, 3500, 11, 309, 311, 264, 955, 12847, 786, 13, 5780, 767, 562, 321, 434, 6613, 341, 11, 51548, 51548, 295, 1164, 11, 309, 311, 406, 1596, 456, 1939, 13, 865, 11, 293, 28160, 311, 799, 4244, 484, 337, 257, 1326, 3259, 949, 51796, 51848], "temperature": 0.0, "avg_logprob": -0.18587020874023438, "compression_ratio": 1.7067137809187278, "no_caption_prob": 0.26517489552497864}, {"id": 5, "seek": 2864, "start": 28.64, "end": 38.24, "text": " the big release. I've got... it's always the 90 90 rule, the first 90% of the project takes the", "tokens": [50364, 264, 955, 4374, 13, 286, 600, 658, 485, 309, 311, 1009, 264, 4289, 4289, 4978, 11, 264, 700, 4289, 4, 295, 264, 1716, 2516, 264, 50844, 50844, 700, 4289, 4, 295, 264, 565, 11, 293, 264, 661, 4289, 4, 295, 264, 1716, 2516, 264, 661, 4289, 4, 295, 264, 565, 13, 51124, 51240, 407, 965, 11, 411, 286, 478, 1455, 955, 19963, 365, 452, 7350, 510, 11, 28160, 307, 16327, 2699, 76, 37645, 5751, 404, 13, 51648, 51648], "temperature": 0.0, "avg_logprob": -0.2333916664123535, "compression_ratio": 1.6646706586826348, "no_caption_prob": 0.00016340549336746335}, {"id": 6, "seek": 2864, "start": 38.24, "end": 43.84, "text": " first 90% of the time, and the other 90% of the project takes the other 90% of the time.", "tokens": [50364, 264, 955, 4374, 13, 286, 600, 658, 485, 309, 311, 1009, 264, 4289, 4289, 4978, 11, 264, 700, 4289, 4, 295, 264, 1716, 2516, 264, 50844, 50844, 700, 4289, 4, 295, 264, 565, 11, 293, 264, 661, 4289, 4, 295, 264, 1716, 2516, 264, 661, 4289, 4, 295, 264, 565, 13, 51124, 51240, 407, 965, 11, 411, 286, 478, 1455, 955, 19963, 365, 452, 7350, 510, 11, 28160, 307, 16327, 2699, 76, 37645, 5751, 404, 13, 51648, 51648], "temperature": 0.0, "avg_logprob": -0.2333916664123535, "compression_ratio": 1.6646706586826348, "no_caption_prob": 0.00016340549336746335}, {"id": 7, "seek": 2864, "start": 46.16, "end": 54.32, "text": " So today, like I'm making big quotes with my fingers here, Dylan is releasing Elm TS Interop.", "tokens": [50364, 264, 955, 4374, 13, 286, 600, 658, 485, 309, 311, 1009, 264, 4289, 4289, 4978, 11, 264, 700, 4289, 4, 295, 264, 1716, 2516, 264, 50844, 50844, 700, 4289, 4, 295, 264, 565, 11, 293, 264, 661, 4289, 4, 295, 264, 1716, 2516, 264, 661, 4289, 4, 295, 264, 565, 13, 51124, 51240, 407, 965, 11, 411, 286, 478, 1455, 955, 19963, 365, 452, 7350, 510, 11, 28160, 307, 16327, 2699, 76, 37645, 5751, 404, 13, 51648, 51648], "temperature": 0.0, "avg_logprob": -0.2333916664123535, "compression_ratio": 1.6646706586826348, "no_caption_prob": 0.00016340549336746335}, {"id": 8, "seek": 5432, "start": 54.32, "end": 62.8, "text": " That's right. So what is Elm TS Interop? What is Elm TS Interop? Good question. So Elm TS Interop,", "tokens": [50364, 663, 311, 558, 13, 407, 437, 307, 2699, 76, 37645, 5751, 404, 30, 708, 307, 2699, 76, 37645, 5751, 404, 30, 2205, 1168, 13, 407, 2699, 76, 37645, 5751, 404, 11, 50788, 50788, 294, 257, 37711, 11, 264, 3387, 295, 264, 1716, 307, 281, 2089, 291, 281, 6234, 493, 428, 2699, 76, 3861, 13, 407, 562, 291, 51136, 51136, 584, 806, 76, 13, 49417, 13, 259, 270, 293, 550, 291, 747, 300, 16505, 2158, 724, 293, 291, 584, 724, 13, 17845, 13, 675, 1913, 13, 82, 9493, 51692, 51692], "temperature": 0.0, "avg_logprob": -0.08372283243870997, "compression_ratio": 1.6054054054054054, "no_caption_prob": 0.00011583529703784734}, {"id": 9, "seek": 5432, "start": 62.8, "end": 69.76, "text": " in a nutshell, the goal of the project is to allow you to wire up your Elm application. So when you", "tokens": [50364, 663, 311, 558, 13, 407, 437, 307, 2699, 76, 37645, 5751, 404, 30, 708, 307, 2699, 76, 37645, 5751, 404, 30, 2205, 1168, 13, 407, 2699, 76, 37645, 5751, 404, 11, 50788, 50788, 294, 257, 37711, 11, 264, 3387, 295, 264, 1716, 307, 281, 2089, 291, 281, 6234, 493, 428, 2699, 76, 3861, 13, 407, 562, 291, 51136, 51136, 584, 806, 76, 13, 49417, 13, 259, 270, 293, 550, 291, 747, 300, 16505, 2158, 724, 293, 291, 584, 724, 13, 17845, 13, 675, 1913, 13, 82, 9493, 51692, 51692], "temperature": 0.0, "avg_logprob": -0.08372283243870997, "compression_ratio": 1.6054054054054054, "no_caption_prob": 0.00011583529703784734}, {"id": 10, "seek": 5432, "start": 69.76, "end": 80.88, "text": " say elm.main.init and then you take that resulting value app and you say app.ports.hello.subscribe", "tokens": [50364, 663, 311, 558, 13, 407, 437, 307, 2699, 76, 37645, 5751, 404, 30, 708, 307, 2699, 76, 37645, 5751, 404, 30, 2205, 1168, 13, 407, 2699, 76, 37645, 5751, 404, 11, 50788, 50788, 294, 257, 37711, 11, 264, 3387, 295, 264, 1716, 307, 281, 2089, 291, 281, 6234, 493, 428, 2699, 76, 3861, 13, 407, 562, 291, 51136, 51136, 584, 806, 76, 13, 49417, 13, 259, 270, 293, 550, 291, 747, 300, 16505, 2158, 724, 293, 291, 584, 724, 13, 17845, 13, 675, 1913, 13, 82, 9493, 51692, 51692], "temperature": 0.0, "avg_logprob": -0.08372283243870997, "compression_ratio": 1.6054054054054054, "no_caption_prob": 0.00011583529703784734}, {"id": 11, "seek": 8088, "start": 80.88, "end": 87.19999999999999, "text": " or whatever it may be, the goal of Elm TS Interop is to give you TypeScript type information about", "tokens": [50364, 420, 2035, 309, 815, 312, 11, 264, 3387, 295, 2699, 76, 37645, 5751, 404, 307, 281, 976, 291, 15576, 14237, 2010, 1589, 466, 50680, 50680, 437, 1412, 486, 3095, 294, 293, 484, 295, 729, 18160, 13, 407, 294, 257, 37711, 11, 300, 311, 437, 2699, 76, 37645, 5751, 404, 775, 13, 50980, 50980, 823, 11, 512, 23274, 815, 312, 4963, 365, 264, 3894, 1716, 295, 3892, 300, 390, 1219, 2699, 76, 51232, 51232, 15576, 14237, 5751, 404, 13, 876, 11, 1270, 257, 819, 1315, 13, 9653, 257, 819, 1315, 13, 286, 478, 12970, 3699, 278, 4748, 13, 51532, 51532], "temperature": 0.0, "avg_logprob": -0.05928174575956741, "compression_ratio": 1.6493506493506493, "no_caption_prob": 2.8408652724465355e-05}, {"id": 12, "seek": 8088, "start": 87.19999999999999, "end": 93.19999999999999, "text": " what data will flow in and out of those ports. So in a nutshell, that's what Elm TS Interop does.", "tokens": [50364, 420, 2035, 309, 815, 312, 11, 264, 3387, 295, 2699, 76, 37645, 5751, 404, 307, 281, 976, 291, 15576, 14237, 2010, 1589, 466, 50680, 50680, 437, 1412, 486, 3095, 294, 293, 484, 295, 729, 18160, 13, 407, 294, 257, 37711, 11, 300, 311, 437, 2699, 76, 37645, 5751, 404, 775, 13, 50980, 50980, 823, 11, 512, 23274, 815, 312, 4963, 365, 264, 3894, 1716, 295, 3892, 300, 390, 1219, 2699, 76, 51232, 51232, 15576, 14237, 5751, 404, 13, 876, 11, 1270, 257, 819, 1315, 13, 9653, 257, 819, 1315, 13, 286, 478, 12970, 3699, 278, 4748, 13, 51532, 51532], "temperature": 0.0, "avg_logprob": -0.05928174575956741, "compression_ratio": 1.6493506493506493, "no_caption_prob": 2.8408652724465355e-05}, {"id": 13, "seek": 8088, "start": 93.19999999999999, "end": 98.24, "text": " Now, some listeners may be familiar with the previous project of mine that was called Elm", "tokens": [50364, 420, 2035, 309, 815, 312, 11, 264, 3387, 295, 2699, 76, 37645, 5751, 404, 307, 281, 976, 291, 15576, 14237, 2010, 1589, 466, 50680, 50680, 437, 1412, 486, 3095, 294, 293, 484, 295, 729, 18160, 13, 407, 294, 257, 37711, 11, 300, 311, 437, 2699, 76, 37645, 5751, 404, 775, 13, 50980, 50980, 823, 11, 512, 23274, 815, 312, 4963, 365, 264, 3894, 1716, 295, 3892, 300, 390, 1219, 2699, 76, 51232, 51232, 15576, 14237, 5751, 404, 13, 876, 11, 1270, 257, 819, 1315, 13, 9653, 257, 819, 1315, 13, 286, 478, 12970, 3699, 278, 4748, 13, 51532, 51532], "temperature": 0.0, "avg_logprob": -0.05928174575956741, "compression_ratio": 1.6493506493506493, "no_caption_prob": 2.8408652724465355e-05}, {"id": 14, "seek": 8088, "start": 98.24, "end": 104.24, "text": " TypeScript Interop. Oh, such a different name. Such a different name. I'm rebranding slightly.", "tokens": [50364, 420, 2035, 309, 815, 312, 11, 264, 3387, 295, 2699, 76, 37645, 5751, 404, 307, 281, 976, 291, 15576, 14237, 2010, 1589, 466, 50680, 50680, 437, 1412, 486, 3095, 294, 293, 484, 295, 729, 18160, 13, 407, 294, 257, 37711, 11, 300, 311, 437, 2699, 76, 37645, 5751, 404, 775, 13, 50980, 50980, 823, 11, 512, 23274, 815, 312, 4963, 365, 264, 3894, 1716, 295, 3892, 300, 390, 1219, 2699, 76, 51232, 51232, 15576, 14237, 5751, 404, 13, 876, 11, 1270, 257, 819, 1315, 13, 9653, 257, 819, 1315, 13, 286, 478, 12970, 3699, 278, 4748, 13, 51532, 51532], "temperature": 0.0, "avg_logprob": -0.05928174575956741, "compression_ratio": 1.6493506493506493, "no_caption_prob": 2.8408652724465355e-05}, {"id": 15, "seek": 10424, "start": 104.24, "end": 111.44, "text": " I don't know if that's more or less confusing. So maybe we can talk a little bit about what Elm", "tokens": [50364, 286, 500, 380, 458, 498, 300, 311, 544, 420, 1570, 13181, 13, 407, 1310, 321, 393, 751, 257, 707, 857, 466, 437, 2699, 76, 50724, 50724, 15576, 14237, 5751, 404, 390, 11, 597, 286, 478, 586, 1367, 13867, 990, 370, 300, 321, 393, 8712, 300, 365, 437, 2699, 76, 37645, 51124, 51124, 5751, 404, 307, 13, 865, 11, 300, 3263, 665, 13, 407, 2699, 76, 15576, 14237, 5751, 404, 1143, 13437, 5215, 11, 597, 11, 51472, 51472, 291, 458, 11, 291, 458, 428, 636, 926, 2699, 76, 13437, 5215, 11, 286, 1116, 584, 13, 286, 600, 274, 10797, 1493, 294, 309, 13, 51740, 51820], "temperature": 0.0, "avg_logprob": -0.07229525188230118, "compression_ratio": 1.7230046948356808, "no_caption_prob": 0.00018810793699231}, {"id": 16, "seek": 10424, "start": 111.44, "end": 119.44, "text": " TypeScript Interop was, which I'm now deprecating so that we can contrast that with what Elm TS", "tokens": [50364, 286, 500, 380, 458, 498, 300, 311, 544, 420, 1570, 13181, 13, 407, 1310, 321, 393, 751, 257, 707, 857, 466, 437, 2699, 76, 50724, 50724, 15576, 14237, 5751, 404, 390, 11, 597, 286, 478, 586, 1367, 13867, 990, 370, 300, 321, 393, 8712, 300, 365, 437, 2699, 76, 37645, 51124, 51124, 5751, 404, 307, 13, 865, 11, 300, 3263, 665, 13, 407, 2699, 76, 15576, 14237, 5751, 404, 1143, 13437, 5215, 11, 597, 11, 51472, 51472, 291, 458, 11, 291, 458, 428, 636, 926, 2699, 76, 13437, 5215, 11, 286, 1116, 584, 13, 286, 600, 274, 10797, 1493, 294, 309, 13, 51740, 51820], "temperature": 0.0, "avg_logprob": -0.07229525188230118, "compression_ratio": 1.7230046948356808, "no_caption_prob": 0.00018810793699231}, {"id": 17, "seek": 10424, "start": 119.44, "end": 126.39999999999999, "text": " Interop is. Yeah, that sounds good. So Elm TypeScript Interop used static analysis, which,", "tokens": [50364, 286, 500, 380, 458, 498, 300, 311, 544, 420, 1570, 13181, 13, 407, 1310, 321, 393, 751, 257, 707, 857, 466, 437, 2699, 76, 50724, 50724, 15576, 14237, 5751, 404, 390, 11, 597, 286, 478, 586, 1367, 13867, 990, 370, 300, 321, 393, 8712, 300, 365, 437, 2699, 76, 37645, 51124, 51124, 5751, 404, 307, 13, 865, 11, 300, 3263, 665, 13, 407, 2699, 76, 15576, 14237, 5751, 404, 1143, 13437, 5215, 11, 597, 11, 51472, 51472, 291, 458, 11, 291, 458, 428, 636, 926, 2699, 76, 13437, 5215, 11, 286, 1116, 584, 13, 286, 600, 274, 10797, 1493, 294, 309, 13, 51740, 51820], "temperature": 0.0, "avg_logprob": -0.07229525188230118, "compression_ratio": 1.7230046948356808, "no_caption_prob": 0.00018810793699231}, {"id": 18, "seek": 10424, "start": 126.39999999999999, "end": 131.76, "text": " you know, you know your way around Elm static analysis, I'd say. I've dabbled in it.", "tokens": [50364, 286, 500, 380, 458, 498, 300, 311, 544, 420, 1570, 13181, 13, 407, 1310, 321, 393, 751, 257, 707, 857, 466, 437, 2699, 76, 50724, 50724, 15576, 14237, 5751, 404, 390, 11, 597, 286, 478, 586, 1367, 13867, 990, 370, 300, 321, 393, 8712, 300, 365, 437, 2699, 76, 37645, 51124, 51124, 5751, 404, 307, 13, 865, 11, 300, 3263, 665, 13, 407, 2699, 76, 15576, 14237, 5751, 404, 1143, 13437, 5215, 11, 597, 11, 51472, 51472, 291, 458, 11, 291, 458, 428, 636, 926, 2699, 76, 13437, 5215, 11, 286, 1116, 584, 13, 286, 600, 274, 10797, 1493, 294, 309, 13, 51740, 51820], "temperature": 0.0, "avg_logprob": -0.07229525188230118, "compression_ratio": 1.7230046948356808, "no_caption_prob": 0.00018810793699231}, {"id": 19, "seek": 13176, "start": 131.76, "end": 140.95999999999998, "text": " Yes. So Elm TypeScript Interop, the deprecated project, I think it served its purpose and,", "tokens": [50364, 1079, 13, 407, 2699, 76, 15576, 14237, 5751, 404, 11, 264, 1367, 13867, 770, 1716, 11, 286, 519, 309, 7584, 1080, 4334, 293, 11, 50824, 50824, 291, 458, 11, 286, 458, 512, 5022, 4626, 309, 11, 457, 309, 632, 512, 15705, 13, 51060, 51060, 865, 11, 370, 2699, 76, 15576, 14237, 5751, 404, 632, 264, 912, 3387, 11, 1936, 13, 51308, 51308, 1079, 11, 300, 311, 558, 13, 467, 632, 264, 912, 3387, 365, 257, 819, 3109, 13, 407, 264, 777, 2699, 76, 37645, 5751, 404, 51652, 51652], "temperature": 0.0, "avg_logprob": -0.11745024787055122, "compression_ratio": 1.6020408163265305, "no_caption_prob": 0.00013549227151088417}, {"id": 20, "seek": 13176, "start": 140.95999999999998, "end": 145.67999999999998, "text": " you know, I know some users enjoyed it, but it had some limitations.", "tokens": [50364, 1079, 13, 407, 2699, 76, 15576, 14237, 5751, 404, 11, 264, 1367, 13867, 770, 1716, 11, 286, 519, 309, 7584, 1080, 4334, 293, 11, 50824, 50824, 291, 458, 11, 286, 458, 512, 5022, 4626, 309, 11, 457, 309, 632, 512, 15705, 13, 51060, 51060, 865, 11, 370, 2699, 76, 15576, 14237, 5751, 404, 632, 264, 912, 3387, 11, 1936, 13, 51308, 51308, 1079, 11, 300, 311, 558, 13, 467, 632, 264, 912, 3387, 365, 257, 819, 3109, 13, 407, 264, 777, 2699, 76, 37645, 5751, 404, 51652, 51652], "temperature": 0.0, "avg_logprob": -0.11745024787055122, "compression_ratio": 1.6020408163265305, "no_caption_prob": 0.00013549227151088417}, {"id": 21, "seek": 13176, "start": 145.67999999999998, "end": 150.64, "text": " Yeah, so Elm TypeScript Interop had the same goal, basically.", "tokens": [50364, 1079, 13, 407, 2699, 76, 15576, 14237, 5751, 404, 11, 264, 1367, 13867, 770, 1716, 11, 286, 519, 309, 7584, 1080, 4334, 293, 11, 50824, 50824, 291, 458, 11, 286, 458, 512, 5022, 4626, 309, 11, 457, 309, 632, 512, 15705, 13, 51060, 51060, 865, 11, 370, 2699, 76, 15576, 14237, 5751, 404, 632, 264, 912, 3387, 11, 1936, 13, 51308, 51308, 1079, 11, 300, 311, 558, 13, 467, 632, 264, 912, 3387, 365, 257, 819, 3109, 13, 407, 264, 777, 2699, 76, 37645, 5751, 404, 51652, 51652], "temperature": 0.0, "avg_logprob": -0.11745024787055122, "compression_ratio": 1.6020408163265305, "no_caption_prob": 0.00013549227151088417}, {"id": 22, "seek": 13176, "start": 150.64, "end": 157.51999999999998, "text": " Yes, that's right. It had the same goal with a different approach. So the new Elm TS Interop", "tokens": [50364, 1079, 13, 407, 2699, 76, 15576, 14237, 5751, 404, 11, 264, 1367, 13867, 770, 1716, 11, 286, 519, 309, 7584, 1080, 4334, 293, 11, 50824, 50824, 291, 458, 11, 286, 458, 512, 5022, 4626, 309, 11, 457, 309, 632, 512, 15705, 13, 51060, 51060, 865, 11, 370, 2699, 76, 15576, 14237, 5751, 404, 632, 264, 912, 3387, 11, 1936, 13, 51308, 51308, 1079, 11, 300, 311, 558, 13, 467, 632, 264, 912, 3387, 365, 257, 819, 3109, 13, 407, 264, 777, 2699, 76, 37645, 5751, 404, 51652, 51652], "temperature": 0.0, "avg_logprob": -0.11745024787055122, "compression_ratio": 1.6020408163265305, "no_caption_prob": 0.00013549227151088417}, {"id": 23, "seek": 15752, "start": 157.52, "end": 164.88000000000002, "text": " actually doesn't use static analysis at all. It does not look at your Elm syntax tree at all.", "tokens": [50364, 767, 1177, 380, 764, 13437, 5215, 412, 439, 13, 467, 775, 406, 574, 412, 428, 2699, 76, 28431, 4230, 412, 439, 13, 50732, 50732, 1033, 11, 370, 2699, 76, 15576, 14237, 5751, 404, 630, 13, 400, 370, 437, 309, 576, 360, 307, 309, 576, 574, 807, 428, 2699, 76, 51036, 51036, 1716, 293, 309, 576, 11049, 264, 4009, 3089, 293, 309, 576, 536, 439, 295, 264, 15489, 16679, 11, 51284, 51284, 439, 295, 264, 15489, 18160, 13, 407, 498, 291, 584, 2436, 7751, 8255, 6798, 281, 5622, 3636, 11, 51704, 51704], "temperature": 0.0, "avg_logprob": -0.06674428652691584, "compression_ratio": 1.6869158878504673, "no_caption_prob": 3.7634887121384963e-05}, {"id": 24, "seek": 15752, "start": 164.88000000000002, "end": 170.96, "text": " Okay, so Elm TypeScript Interop did. And so what it would do is it would look through your Elm", "tokens": [50364, 767, 1177, 380, 764, 13437, 5215, 412, 439, 13, 467, 775, 406, 574, 412, 428, 2699, 76, 28431, 4230, 412, 439, 13, 50732, 50732, 1033, 11, 370, 2699, 76, 15576, 14237, 5751, 404, 630, 13, 400, 370, 437, 309, 576, 360, 307, 309, 576, 574, 807, 428, 2699, 76, 51036, 51036, 1716, 293, 309, 576, 11049, 264, 4009, 3089, 293, 309, 576, 536, 439, 295, 264, 15489, 16679, 11, 51284, 51284, 439, 295, 264, 15489, 18160, 13, 407, 498, 291, 584, 2436, 7751, 8255, 6798, 281, 5622, 3636, 11, 51704, 51704], "temperature": 0.0, "avg_logprob": -0.06674428652691584, "compression_ratio": 1.6869158878504673, "no_caption_prob": 3.7634887121384963e-05}, {"id": 25, "seek": 15752, "start": 170.96, "end": 175.92000000000002, "text": " project and it would scan the source code and it would see all of the declared modules,", "tokens": [50364, 767, 1177, 380, 764, 13437, 5215, 412, 439, 13, 467, 775, 406, 574, 412, 428, 2699, 76, 28431, 4230, 412, 439, 13, 50732, 50732, 1033, 11, 370, 2699, 76, 15576, 14237, 5751, 404, 630, 13, 400, 370, 437, 309, 576, 360, 307, 309, 576, 574, 807, 428, 2699, 76, 51036, 51036, 1716, 293, 309, 576, 11049, 264, 4009, 3089, 293, 309, 576, 536, 439, 295, 264, 15489, 16679, 11, 51284, 51284, 439, 295, 264, 15489, 18160, 13, 407, 498, 291, 584, 2436, 7751, 8255, 6798, 281, 5622, 3636, 11, 51704, 51704], "temperature": 0.0, "avg_logprob": -0.06674428652691584, "compression_ratio": 1.6869158878504673, "no_caption_prob": 3.7634887121384963e-05}, {"id": 26, "seek": 15752, "start": 175.92000000000002, "end": 184.32000000000002, "text": " all of the declared ports. So if you say port hello colon string to command message,", "tokens": [50364, 767, 1177, 380, 764, 13437, 5215, 412, 439, 13, 467, 775, 406, 574, 412, 428, 2699, 76, 28431, 4230, 412, 439, 13, 50732, 50732, 1033, 11, 370, 2699, 76, 15576, 14237, 5751, 404, 630, 13, 400, 370, 437, 309, 576, 360, 307, 309, 576, 574, 807, 428, 2699, 76, 51036, 51036, 1716, 293, 309, 576, 11049, 264, 4009, 3089, 293, 309, 576, 536, 439, 295, 264, 15489, 16679, 11, 51284, 51284, 439, 295, 264, 15489, 18160, 13, 407, 498, 291, 584, 2436, 7751, 8255, 6798, 281, 5622, 3636, 11, 51704, 51704], "temperature": 0.0, "avg_logprob": -0.06674428652691584, "compression_ratio": 1.6869158878504673, "no_caption_prob": 3.7634887121384963e-05}, {"id": 27, "seek": 18432, "start": 184.32, "end": 191.84, "text": " so that's a port from Elm to JavaScript that sends a value of type string, then you run", "tokens": [50364, 370, 300, 311, 257, 2436, 490, 2699, 76, 281, 15778, 300, 14790, 257, 2158, 295, 2010, 6798, 11, 550, 291, 1190, 50740, 50792, 2699, 76, 15576, 14237, 5751, 404, 293, 437, 309, 576, 360, 307, 309, 576, 915, 439, 295, 729, 18160, 13, 467, 576, 915, 264, 51040, 51040, 7751, 2436, 300, 291, 15489, 13, 467, 576, 536, 300, 264, 2010, 309, 390, 7750, 390, 257, 6798, 293, 309, 576, 51288, 51288, 584, 11, 1954, 869, 11, 7751, 307, 516, 281, 4774, 257, 6798, 13, 407, 562, 291, 584, 724, 13, 17845, 13, 675, 1913, 13, 82, 9493, 11, 51700, 51700], "temperature": 0.0, "avg_logprob": -0.09795190755603383, "compression_ratio": 1.758139534883721, "no_caption_prob": 1.8631137209013104e-05}, {"id": 28, "seek": 18432, "start": 192.88, "end": 197.84, "text": " Elm TypeScript Interop and what it would do is it would find all of those ports. It would find the", "tokens": [50364, 370, 300, 311, 257, 2436, 490, 2699, 76, 281, 15778, 300, 14790, 257, 2158, 295, 2010, 6798, 11, 550, 291, 1190, 50740, 50792, 2699, 76, 15576, 14237, 5751, 404, 293, 437, 309, 576, 360, 307, 309, 576, 915, 439, 295, 729, 18160, 13, 467, 576, 915, 264, 51040, 51040, 7751, 2436, 300, 291, 15489, 13, 467, 576, 536, 300, 264, 2010, 309, 390, 7750, 390, 257, 6798, 293, 309, 576, 51288, 51288, 584, 11, 1954, 869, 11, 7751, 307, 516, 281, 4774, 257, 6798, 13, 407, 562, 291, 584, 724, 13, 17845, 13, 675, 1913, 13, 82, 9493, 11, 51700, 51700], "temperature": 0.0, "avg_logprob": -0.09795190755603383, "compression_ratio": 1.758139534883721, "no_caption_prob": 1.8631137209013104e-05}, {"id": 29, "seek": 18432, "start": 197.84, "end": 202.79999999999998, "text": " hello port that you declared. It would see that the type it was sending was a string and it would", "tokens": [50364, 370, 300, 311, 257, 2436, 490, 2699, 76, 281, 15778, 300, 14790, 257, 2158, 295, 2010, 6798, 11, 550, 291, 1190, 50740, 50792, 2699, 76, 15576, 14237, 5751, 404, 293, 437, 309, 576, 360, 307, 309, 576, 915, 439, 295, 729, 18160, 13, 467, 576, 915, 264, 51040, 51040, 7751, 2436, 300, 291, 15489, 13, 467, 576, 536, 300, 264, 2010, 309, 390, 7750, 390, 257, 6798, 293, 309, 576, 51288, 51288, 584, 11, 1954, 869, 11, 7751, 307, 516, 281, 4774, 257, 6798, 13, 407, 562, 291, 584, 724, 13, 17845, 13, 675, 1913, 13, 82, 9493, 11, 51700, 51700], "temperature": 0.0, "avg_logprob": -0.09795190755603383, "compression_ratio": 1.758139534883721, "no_caption_prob": 1.8631137209013104e-05}, {"id": 30, "seek": 18432, "start": 202.79999999999998, "end": 211.04, "text": " say, oh great, hello is going to receive a string. So when you say app.ports.hello.subscribe,", "tokens": [50364, 370, 300, 311, 257, 2436, 490, 2699, 76, 281, 15778, 300, 14790, 257, 2158, 295, 2010, 6798, 11, 550, 291, 1190, 50740, 50792, 2699, 76, 15576, 14237, 5751, 404, 293, 437, 309, 576, 360, 307, 309, 576, 915, 439, 295, 729, 18160, 13, 467, 576, 915, 264, 51040, 51040, 7751, 2436, 300, 291, 15489, 13, 467, 576, 536, 300, 264, 2010, 309, 390, 7750, 390, 257, 6798, 293, 309, 576, 51288, 51288, 584, 11, 1954, 869, 11, 7751, 307, 516, 281, 4774, 257, 6798, 13, 407, 562, 291, 584, 724, 13, 17845, 13, 675, 1913, 13, 82, 9493, 11, 51700, 51700], "temperature": 0.0, "avg_logprob": -0.09795190755603383, "compression_ratio": 1.758139534883721, "no_caption_prob": 1.8631137209013104e-05}, {"id": 31, "seek": 21104, "start": 211.04, "end": 217.76, "text": " it's going to take a function which receives a string value. And that works fairly well,", "tokens": [50364, 309, 311, 516, 281, 747, 257, 2445, 597, 20717, 257, 6798, 2158, 13, 400, 300, 1985, 6457, 731, 11, 50700, 50700, 457, 456, 366, 512, 2663, 365, 300, 3109, 13, 1485, 1154, 307, 11, 700, 295, 439, 11, 341, 1709, 1970, 51016, 51016, 512, 295, 264, 9628, 1151, 7525, 337, 1228, 18160, 294, 2699, 76, 11, 558, 30, 51200, 51200, 865, 13, 407, 28549, 23614, 336, 632, 257, 751, 412, 2699, 76, 43874, 257, 1326, 924, 2057, 689, 415, 26269, 577, 281, 764, 51796, 51796], "temperature": 0.0, "avg_logprob": -0.11118096318738215, "compression_ratio": 1.4615384615384615, "no_caption_prob": 1.5206606803985778e-05}, {"id": 32, "seek": 21104, "start": 217.76, "end": 224.07999999999998, "text": " but there are some issues with that approach. One problem is, first of all, this goes against", "tokens": [50364, 309, 311, 516, 281, 747, 257, 2445, 597, 20717, 257, 6798, 2158, 13, 400, 300, 1985, 6457, 731, 11, 50700, 50700, 457, 456, 366, 512, 2663, 365, 300, 3109, 13, 1485, 1154, 307, 11, 700, 295, 439, 11, 341, 1709, 1970, 51016, 51016, 512, 295, 264, 9628, 1151, 7525, 337, 1228, 18160, 294, 2699, 76, 11, 558, 30, 51200, 51200, 865, 13, 407, 28549, 23614, 336, 632, 257, 751, 412, 2699, 76, 43874, 257, 1326, 924, 2057, 689, 415, 26269, 577, 281, 764, 51796, 51796], "temperature": 0.0, "avg_logprob": -0.11118096318738215, "compression_ratio": 1.4615384615384615, "no_caption_prob": 1.5206606803985778e-05}, {"id": 33, "seek": 21104, "start": 224.07999999999998, "end": 227.76, "text": " some of the recommended best practices for using ports in Elm, right?", "tokens": [50364, 309, 311, 516, 281, 747, 257, 2445, 597, 20717, 257, 6798, 2158, 13, 400, 300, 1985, 6457, 731, 11, 50700, 50700, 457, 456, 366, 512, 2663, 365, 300, 3109, 13, 1485, 1154, 307, 11, 700, 295, 439, 11, 341, 1709, 1970, 51016, 51016, 512, 295, 264, 9628, 1151, 7525, 337, 1228, 18160, 294, 2699, 76, 11, 558, 30, 51200, 51200, 865, 13, 407, 28549, 23614, 336, 632, 257, 751, 412, 2699, 76, 43874, 257, 1326, 924, 2057, 689, 415, 26269, 577, 281, 764, 51796, 51796], "temperature": 0.0, "avg_logprob": -0.11118096318738215, "compression_ratio": 1.4615384615384615, "no_caption_prob": 1.5206606803985778e-05}, {"id": 34, "seek": 21104, "start": 227.76, "end": 239.68, "text": " Yeah. So Murphy Randall had a talk at ElmConf a few years ago where he advised how to use", "tokens": [50364, 309, 311, 516, 281, 747, 257, 2445, 597, 20717, 257, 6798, 2158, 13, 400, 300, 1985, 6457, 731, 11, 50700, 50700, 457, 456, 366, 512, 2663, 365, 300, 3109, 13, 1485, 1154, 307, 11, 700, 295, 439, 11, 341, 1709, 1970, 51016, 51016, 512, 295, 264, 9628, 1151, 7525, 337, 1228, 18160, 294, 2699, 76, 11, 558, 30, 51200, 51200, 865, 13, 407, 28549, 23614, 336, 632, 257, 751, 412, 2699, 76, 43874, 257, 1326, 924, 2057, 689, 415, 26269, 577, 281, 764, 51796, 51796], "temperature": 0.0, "avg_logprob": -0.11118096318738215, "compression_ratio": 1.4615384615384615, "no_caption_prob": 1.5206606803985778e-05}, {"id": 35, "seek": 23968, "start": 239.68, "end": 247.04000000000002, "text": " ports and his recommendation was use one output port and one input port for everything.", "tokens": [50364, 18160, 293, 702, 11879, 390, 764, 472, 5598, 2436, 293, 472, 4846, 2436, 337, 1203, 13, 50732, 50732, 1485, 2436, 6119, 13, 865, 11, 2293, 558, 13, 400, 300, 311, 4888, 257, 1151, 3124, 294, 512, 2098, 13, 821, 51188, 51188, 366, 257, 1326, 4112, 983, 300, 12258, 281, 589, 9594, 13, 583, 472, 661, 1021, 551, 307, 300, 264, 1331, 2699, 76, 51552, 51552], "temperature": 0.0, "avg_logprob": -0.153205700774691, "compression_ratio": 1.4736842105263157, "no_caption_prob": 0.000137647773954086}, {"id": 36, "seek": 23968, "start": 247.04000000000002, "end": 256.16, "text": " One port pair. Yeah, exactly right. And that's considered a best practice in some ways. There", "tokens": [50364, 18160, 293, 702, 11879, 390, 764, 472, 5598, 2436, 293, 472, 4846, 2436, 337, 1203, 13, 50732, 50732, 1485, 2436, 6119, 13, 865, 11, 2293, 558, 13, 400, 300, 311, 4888, 257, 1151, 3124, 294, 512, 2098, 13, 821, 51188, 51188, 366, 257, 1326, 4112, 983, 300, 12258, 281, 589, 9594, 13, 583, 472, 661, 1021, 551, 307, 300, 264, 1331, 2699, 76, 51552, 51552], "temperature": 0.0, "avg_logprob": -0.153205700774691, "compression_ratio": 1.4736842105263157, "no_caption_prob": 0.000137647773954086}, {"id": 37, "seek": 23968, "start": 256.16, "end": 263.44, "text": " are a few reasons why that tends to work nicely. But one other important thing is that the old Elm", "tokens": [50364, 18160, 293, 702, 11879, 390, 764, 472, 5598, 2436, 293, 472, 4846, 2436, 337, 1203, 13, 50732, 50732, 1485, 2436, 6119, 13, 865, 11, 2293, 558, 13, 400, 300, 311, 4888, 257, 1151, 3124, 294, 512, 2098, 13, 821, 51188, 51188, 366, 257, 1326, 4112, 983, 300, 12258, 281, 589, 9594, 13, 583, 472, 661, 1021, 551, 307, 300, 264, 1331, 2699, 76, 51552, 51552], "temperature": 0.0, "avg_logprob": -0.153205700774691, "compression_ratio": 1.4736842105263157, "no_caption_prob": 0.000137647773954086}, {"id": 38, "seek": 26344, "start": 263.44, "end": 270.4, "text": " TypeScript interop relied a little bit on a hack, which is that you can serialize JSON types through", "tokens": [50364, 15576, 14237, 728, 404, 35463, 257, 707, 857, 322, 257, 10339, 11, 597, 307, 300, 291, 393, 17436, 1125, 31828, 3467, 807, 50712, 50740, 341, 1333, 295, 16141, 552, 365, 2699, 76, 3467, 13, 400, 550, 2699, 76, 486, 6772, 6786, 11, 51020, 51064, 2699, 76, 486, 6772, 584, 11, 1954, 11, 341, 2436, 14790, 257, 6798, 13, 639, 2436, 14790, 257, 2136, 365, 613, 7909, 51356, 51356, 293, 309, 486, 1884, 257, 1333, 295, 17436, 2144, 551, 300, 4523, 309, 666, 31828, 13, 22613, 767, 6686, 466, 51648, 51648], "temperature": 0.0, "avg_logprob": -0.10208706233812415, "compression_ratio": 1.6652360515021458, "no_caption_prob": 0.0002066021115751937}, {"id": 39, "seek": 26344, "start": 270.96, "end": 276.56, "text": " this sort of describing them with Elm types. And then Elm will automatically describe,", "tokens": [50364, 15576, 14237, 728, 404, 35463, 257, 707, 857, 322, 257, 10339, 11, 597, 307, 300, 291, 393, 17436, 1125, 31828, 3467, 807, 50712, 50740, 341, 1333, 295, 16141, 552, 365, 2699, 76, 3467, 13, 400, 550, 2699, 76, 486, 6772, 6786, 11, 51020, 51064, 2699, 76, 486, 6772, 584, 11, 1954, 11, 341, 2436, 14790, 257, 6798, 13, 639, 2436, 14790, 257, 2136, 365, 613, 7909, 51356, 51356, 293, 309, 486, 1884, 257, 1333, 295, 17436, 2144, 551, 300, 4523, 309, 666, 31828, 13, 22613, 767, 6686, 466, 51648, 51648], "temperature": 0.0, "avg_logprob": -0.10208706233812415, "compression_ratio": 1.6652360515021458, "no_caption_prob": 0.0002066021115751937}, {"id": 40, "seek": 26344, "start": 277.44, "end": 283.28, "text": " Elm will automatically say, oh, this port sends a string. This port sends a record with these fields", "tokens": [50364, 15576, 14237, 728, 404, 35463, 257, 707, 857, 322, 257, 10339, 11, 597, 307, 300, 291, 393, 17436, 1125, 31828, 3467, 807, 50712, 50740, 341, 1333, 295, 16141, 552, 365, 2699, 76, 3467, 13, 400, 550, 2699, 76, 486, 6772, 6786, 11, 51020, 51064, 2699, 76, 486, 6772, 584, 11, 1954, 11, 341, 2436, 14790, 257, 6798, 13, 639, 2436, 14790, 257, 2136, 365, 613, 7909, 51356, 51356, 293, 309, 486, 1884, 257, 1333, 295, 17436, 2144, 551, 300, 4523, 309, 666, 31828, 13, 22613, 767, 6686, 466, 51648, 51648], "temperature": 0.0, "avg_logprob": -0.10208706233812415, "compression_ratio": 1.6652360515021458, "no_caption_prob": 0.0002066021115751937}, {"id": 41, "seek": 26344, "start": 283.28, "end": 289.12, "text": " and it will create a sort of serialization thing that turns it into JSON. Evan actually talks about", "tokens": [50364, 15576, 14237, 728, 404, 35463, 257, 707, 857, 322, 257, 10339, 11, 597, 307, 300, 291, 393, 17436, 1125, 31828, 3467, 807, 50712, 50740, 341, 1333, 295, 16141, 552, 365, 2699, 76, 3467, 13, 400, 550, 2699, 76, 486, 6772, 6786, 11, 51020, 51064, 2699, 76, 486, 6772, 584, 11, 1954, 11, 341, 2436, 14790, 257, 6798, 13, 639, 2436, 14790, 257, 2136, 365, 613, 7909, 51356, 51356, 293, 309, 486, 1884, 257, 1333, 295, 17436, 2144, 551, 300, 4523, 309, 666, 31828, 13, 22613, 767, 6686, 466, 51648, 51648], "temperature": 0.0, "avg_logprob": -0.10208706233812415, "compression_ratio": 1.6652360515021458, "no_caption_prob": 0.0002066021115751937}, {"id": 42, "seek": 28912, "start": 289.12, "end": 296.08, "text": " why he doesn't like this sort of implicit serialization in his vision for data interchange,", "tokens": [50364, 983, 415, 1177, 380, 411, 341, 1333, 295, 26947, 17436, 2144, 294, 702, 5201, 337, 1412, 30358, 11, 50712, 50712, 597, 321, 603, 2113, 281, 294, 264, 855, 5570, 13, 400, 286, 914, 11, 1936, 264, 1558, 307, 300, 309, 20703, 291, 666, 341, 51008, 51008, 26947, 14298, 11, 597, 307, 665, 1826, 309, 311, 406, 13, 400, 550, 562, 309, 311, 406, 11, 291, 393, 380, 1821, 484, 295, 309, 13, 51324, 51324, 400, 498, 746, 1709, 2085, 11, 309, 311, 1152, 281, 980, 437, 1437, 2085, 570, 456, 311, 341, 26947, 51616, 51616], "temperature": 0.0, "avg_logprob": -0.06853549505017467, "compression_ratio": 1.6753246753246753, "no_caption_prob": 0.00011773062578868121}, {"id": 43, "seek": 28912, "start": 296.08, "end": 302.0, "text": " which we'll link to in the show notes. And I mean, basically the idea is that it locks you into this", "tokens": [50364, 983, 415, 1177, 380, 411, 341, 1333, 295, 26947, 17436, 2144, 294, 702, 5201, 337, 1412, 30358, 11, 50712, 50712, 597, 321, 603, 2113, 281, 294, 264, 855, 5570, 13, 400, 286, 914, 11, 1936, 264, 1558, 307, 300, 309, 20703, 291, 666, 341, 51008, 51008, 26947, 14298, 11, 597, 307, 665, 1826, 309, 311, 406, 13, 400, 550, 562, 309, 311, 406, 11, 291, 393, 380, 1821, 484, 295, 309, 13, 51324, 51324, 400, 498, 746, 1709, 2085, 11, 309, 311, 1152, 281, 980, 437, 1437, 2085, 570, 456, 311, 341, 26947, 51616, 51616], "temperature": 0.0, "avg_logprob": -0.06853549505017467, "compression_ratio": 1.6753246753246753, "no_caption_prob": 0.00011773062578868121}, {"id": 44, "seek": 28912, "start": 302.0, "end": 308.32, "text": " implicit conversion, which is good until it's not. And then when it's not, you can't break out of it.", "tokens": [50364, 983, 415, 1177, 380, 411, 341, 1333, 295, 26947, 17436, 2144, 294, 702, 5201, 337, 1412, 30358, 11, 50712, 50712, 597, 321, 603, 2113, 281, 294, 264, 855, 5570, 13, 400, 286, 914, 11, 1936, 264, 1558, 307, 300, 309, 20703, 291, 666, 341, 51008, 51008, 26947, 14298, 11, 597, 307, 665, 1826, 309, 311, 406, 13, 400, 550, 562, 309, 311, 406, 11, 291, 393, 380, 1821, 484, 295, 309, 13, 51324, 51324, 400, 498, 746, 1709, 2085, 11, 309, 311, 1152, 281, 980, 437, 1437, 2085, 570, 456, 311, 341, 26947, 51616, 51616], "temperature": 0.0, "avg_logprob": -0.06853549505017467, "compression_ratio": 1.6753246753246753, "no_caption_prob": 0.00011773062578868121}, {"id": 45, "seek": 28912, "start": 308.32, "end": 314.16, "text": " And if something goes wrong, it's hard to tell what went wrong because there's this implicit", "tokens": [50364, 983, 415, 1177, 380, 411, 341, 1333, 295, 26947, 17436, 2144, 294, 702, 5201, 337, 1412, 30358, 11, 50712, 50712, 597, 321, 603, 2113, 281, 294, 264, 855, 5570, 13, 400, 286, 914, 11, 1936, 264, 1558, 307, 300, 309, 20703, 291, 666, 341, 51008, 51008, 26947, 14298, 11, 597, 307, 665, 1826, 309, 311, 406, 13, 400, 550, 562, 309, 311, 406, 11, 291, 393, 380, 1821, 484, 295, 309, 13, 51324, 51324, 400, 498, 746, 1709, 2085, 11, 309, 311, 1152, 281, 980, 437, 1437, 2085, 570, 456, 311, 341, 26947, 51616, 51616], "temperature": 0.0, "avg_logprob": -0.06853549505017467, "compression_ratio": 1.6753246753246753, "no_caption_prob": 0.00011773062578868121}, {"id": 46, "seek": 31416, "start": 314.16, "end": 319.76000000000005, "text": " thing happening. So that's not great. Also, what happens if you're incorrect about the values that", "tokens": [50364, 551, 2737, 13, 407, 300, 311, 406, 869, 13, 2743, 11, 437, 2314, 498, 291, 434, 18424, 466, 264, 4190, 300, 50644, 50676, 291, 434, 10040, 490, 15778, 420, 15576, 14237, 807, 257, 2436, 30, 1436, 15576, 14237, 3665, 291, 11, 50960, 50960, 457, 309, 311, 406, 2176, 294, 19965, 604, 18424, 2010, 490, 13974, 807, 13, 51232, 51232, 509, 914, 300, 291, 818, 264, 2699, 76, 18160, 490, 15576, 14237, 365, 264, 2085, 4190, 13, 51488, 51488, 7587, 13, 7587, 13, 2022, 364, 18424, 7166, 3909, 11, 420, 456, 311, 257, 2519, 300, 307, 2107, 18184, 712, 51848, 51848], "temperature": 0.0, "avg_logprob": -0.08644499498255112, "compression_ratio": 1.7379032258064515, "no_caption_prob": 0.00027342085377313197}, {"id": 47, "seek": 31416, "start": 320.40000000000003, "end": 326.08000000000004, "text": " you're receiving from JavaScript or TypeScript through a port? Because TypeScript helps you,", "tokens": [50364, 551, 2737, 13, 407, 300, 311, 406, 869, 13, 2743, 11, 437, 2314, 498, 291, 434, 18424, 466, 264, 4190, 300, 50644, 50676, 291, 434, 10040, 490, 15778, 420, 15576, 14237, 807, 257, 2436, 30, 1436, 15576, 14237, 3665, 291, 11, 50960, 50960, 457, 309, 311, 406, 2176, 294, 19965, 604, 18424, 2010, 490, 13974, 807, 13, 51232, 51232, 509, 914, 300, 291, 818, 264, 2699, 76, 18160, 490, 15576, 14237, 365, 264, 2085, 4190, 13, 51488, 51488, 7587, 13, 7587, 13, 2022, 364, 18424, 7166, 3909, 11, 420, 456, 311, 257, 2519, 300, 307, 2107, 18184, 712, 51848, 51848], "temperature": 0.0, "avg_logprob": -0.08644499498255112, "compression_ratio": 1.7379032258064515, "no_caption_prob": 0.00027342085377313197}, {"id": 48, "seek": 31416, "start": 326.08000000000004, "end": 331.52000000000004, "text": " but it's not perfect in preventing any incorrect type from flowing through.", "tokens": [50364, 551, 2737, 13, 407, 300, 311, 406, 869, 13, 2743, 11, 437, 2314, 498, 291, 434, 18424, 466, 264, 4190, 300, 50644, 50676, 291, 434, 10040, 490, 15778, 420, 15576, 14237, 807, 257, 2436, 30, 1436, 15576, 14237, 3665, 291, 11, 50960, 50960, 457, 309, 311, 406, 2176, 294, 19965, 604, 18424, 2010, 490, 13974, 807, 13, 51232, 51232, 509, 914, 300, 291, 818, 264, 2699, 76, 18160, 490, 15576, 14237, 365, 264, 2085, 4190, 13, 51488, 51488, 7587, 13, 7587, 13, 2022, 364, 18424, 7166, 3909, 11, 420, 456, 311, 257, 2519, 300, 307, 2107, 18184, 712, 51848, 51848], "temperature": 0.0, "avg_logprob": -0.08644499498255112, "compression_ratio": 1.7379032258064515, "no_caption_prob": 0.00027342085377313197}, {"id": 49, "seek": 31416, "start": 331.52000000000004, "end": 336.64000000000004, "text": " You mean that you call the Elm ports from TypeScript with the wrong values.", "tokens": [50364, 551, 2737, 13, 407, 300, 311, 406, 869, 13, 2743, 11, 437, 2314, 498, 291, 434, 18424, 466, 264, 4190, 300, 50644, 50676, 291, 434, 10040, 490, 15778, 420, 15576, 14237, 807, 257, 2436, 30, 1436, 15576, 14237, 3665, 291, 11, 50960, 50960, 457, 309, 311, 406, 2176, 294, 19965, 604, 18424, 2010, 490, 13974, 807, 13, 51232, 51232, 509, 914, 300, 291, 818, 264, 2699, 76, 18160, 490, 15576, 14237, 365, 264, 2085, 4190, 13, 51488, 51488, 7587, 13, 7587, 13, 2022, 364, 18424, 7166, 3909, 11, 420, 456, 311, 257, 2519, 300, 307, 2107, 18184, 712, 51848, 51848], "temperature": 0.0, "avg_logprob": -0.08644499498255112, "compression_ratio": 1.7379032258064515, "no_caption_prob": 0.00027342085377313197}, {"id": 50, "seek": 31416, "start": 336.64000000000004, "end": 343.84000000000003, "text": " Exactly. Exactly. With an incorrect flag shape, or there's a field that is non nullable", "tokens": [50364, 551, 2737, 13, 407, 300, 311, 406, 869, 13, 2743, 11, 437, 2314, 498, 291, 434, 18424, 466, 264, 4190, 300, 50644, 50676, 291, 434, 10040, 490, 15778, 420, 15576, 14237, 807, 257, 2436, 30, 1436, 15576, 14237, 3665, 291, 11, 50960, 50960, 457, 309, 311, 406, 2176, 294, 19965, 604, 18424, 2010, 490, 13974, 807, 13, 51232, 51232, 509, 914, 300, 291, 818, 264, 2699, 76, 18160, 490, 15576, 14237, 365, 264, 2085, 4190, 13, 51488, 51488, 7587, 13, 7587, 13, 2022, 364, 18424, 7166, 3909, 11, 420, 456, 311, 257, 2519, 300, 307, 2107, 18184, 712, 51848, 51848], "temperature": 0.0, "avg_logprob": -0.08644499498255112, "compression_ratio": 1.7379032258064515, "no_caption_prob": 0.00027342085377313197}, {"id": 51, "seek": 34384, "start": 343.84, "end": 352.96, "text": " that it's not a maybe in Elm. So you have flags, data is a maybe string. And so that says that", "tokens": [50364, 300, 309, 311, 406, 257, 1310, 294, 2699, 76, 13, 407, 291, 362, 23265, 11, 1412, 307, 257, 1310, 6798, 13, 400, 370, 300, 1619, 300, 50820, 50820, 309, 311, 18184, 712, 293, 309, 393, 312, 18184, 13, 583, 498, 309, 311, 257, 6798, 11, 406, 257, 1310, 6798, 293, 2699, 76, 307, 9650, 51104, 51104, 281, 4774, 300, 2158, 11, 457, 309, 20717, 257, 18184, 456, 11, 550, 437, 2314, 30, 467, 18458, 493, 13, 51328, 51356, 26291, 380, 264, 15576, 14237, 31958, 980, 291, 466, 300, 30, 51512, 51512, 1042, 11, 309, 576, 11, 457, 291, 393, 11200, 309, 13, 509, 393, 611, 4193, 3467, 13, 400, 294, 1186, 11, 51756, 51756], "temperature": 0.0, "avg_logprob": -0.07422104375115757, "compression_ratio": 1.6639344262295082, "no_caption_prob": 9.609755215933546e-05}, {"id": 52, "seek": 34384, "start": 352.96, "end": 358.64, "text": " it's nullable and it can be null. But if it's a string, not a maybe string and Elm is expecting", "tokens": [50364, 300, 309, 311, 406, 257, 1310, 294, 2699, 76, 13, 407, 291, 362, 23265, 11, 1412, 307, 257, 1310, 6798, 13, 400, 370, 300, 1619, 300, 50820, 50820, 309, 311, 18184, 712, 293, 309, 393, 312, 18184, 13, 583, 498, 309, 311, 257, 6798, 11, 406, 257, 1310, 6798, 293, 2699, 76, 307, 9650, 51104, 51104, 281, 4774, 300, 2158, 11, 457, 309, 20717, 257, 18184, 456, 11, 550, 437, 2314, 30, 467, 18458, 493, 13, 51328, 51356, 26291, 380, 264, 15576, 14237, 31958, 980, 291, 466, 300, 30, 51512, 51512, 1042, 11, 309, 576, 11, 457, 291, 393, 11200, 309, 13, 509, 393, 611, 4193, 3467, 13, 400, 294, 1186, 11, 51756, 51756], "temperature": 0.0, "avg_logprob": -0.07422104375115757, "compression_ratio": 1.6639344262295082, "no_caption_prob": 9.609755215933546e-05}, {"id": 53, "seek": 34384, "start": 358.64, "end": 363.12, "text": " to receive that value, but it receives a null there, then what happens? It blows up.", "tokens": [50364, 300, 309, 311, 406, 257, 1310, 294, 2699, 76, 13, 407, 291, 362, 23265, 11, 1412, 307, 257, 1310, 6798, 13, 400, 370, 300, 1619, 300, 50820, 50820, 309, 311, 18184, 712, 293, 309, 393, 312, 18184, 13, 583, 498, 309, 311, 257, 6798, 11, 406, 257, 1310, 6798, 293, 2699, 76, 307, 9650, 51104, 51104, 281, 4774, 300, 2158, 11, 457, 309, 20717, 257, 18184, 456, 11, 550, 437, 2314, 30, 467, 18458, 493, 13, 51328, 51356, 26291, 380, 264, 15576, 14237, 31958, 980, 291, 466, 300, 30, 51512, 51512, 1042, 11, 309, 576, 11, 457, 291, 393, 11200, 309, 13, 509, 393, 611, 4193, 3467, 13, 400, 294, 1186, 11, 51756, 51756], "temperature": 0.0, "avg_logprob": -0.07422104375115757, "compression_ratio": 1.6639344262295082, "no_caption_prob": 9.609755215933546e-05}, {"id": 54, "seek": 34384, "start": 363.67999999999995, "end": 366.79999999999995, "text": " Wouldn't the TypeScript compiler tell you about that?", "tokens": [50364, 300, 309, 311, 406, 257, 1310, 294, 2699, 76, 13, 407, 291, 362, 23265, 11, 1412, 307, 257, 1310, 6798, 13, 400, 370, 300, 1619, 300, 50820, 50820, 309, 311, 18184, 712, 293, 309, 393, 312, 18184, 13, 583, 498, 309, 311, 257, 6798, 11, 406, 257, 1310, 6798, 293, 2699, 76, 307, 9650, 51104, 51104, 281, 4774, 300, 2158, 11, 457, 309, 20717, 257, 18184, 456, 11, 550, 437, 2314, 30, 467, 18458, 493, 13, 51328, 51356, 26291, 380, 264, 15576, 14237, 31958, 980, 291, 466, 300, 30, 51512, 51512, 1042, 11, 309, 576, 11, 457, 291, 393, 11200, 309, 13, 509, 393, 611, 4193, 3467, 13, 400, 294, 1186, 11, 51756, 51756], "temperature": 0.0, "avg_logprob": -0.07422104375115757, "compression_ratio": 1.6639344262295082, "no_caption_prob": 9.609755215933546e-05}, {"id": 55, "seek": 34384, "start": 366.79999999999995, "end": 371.67999999999995, "text": " Well, it would, but you can ignore it. You can also cast types. And in fact,", "tokens": [50364, 300, 309, 311, 406, 257, 1310, 294, 2699, 76, 13, 407, 291, 362, 23265, 11, 1412, 307, 257, 1310, 6798, 13, 400, 370, 300, 1619, 300, 50820, 50820, 309, 311, 18184, 712, 293, 309, 393, 312, 18184, 13, 583, 498, 309, 311, 257, 6798, 11, 406, 257, 1310, 6798, 293, 2699, 76, 307, 9650, 51104, 51104, 281, 4774, 300, 2158, 11, 457, 309, 20717, 257, 18184, 456, 11, 550, 437, 2314, 30, 467, 18458, 493, 13, 51328, 51356, 26291, 380, 264, 15576, 14237, 31958, 980, 291, 466, 300, 30, 51512, 51512, 1042, 11, 309, 576, 11, 457, 291, 393, 11200, 309, 13, 509, 393, 611, 4193, 3467, 13, 400, 294, 1186, 11, 51756, 51756], "temperature": 0.0, "avg_logprob": -0.07422104375115757, "compression_ratio": 1.6639344262295082, "no_caption_prob": 9.609755215933546e-05}, {"id": 56, "seek": 37168, "start": 371.68, "end": 379.28000000000003, "text": " so I wrote a blog post recently about when can we rely on TypeScript. The post is called", "tokens": [50364, 370, 286, 4114, 257, 6968, 2183, 3938, 466, 562, 393, 321, 10687, 322, 15576, 14237, 13, 440, 2183, 307, 1219, 50744, 50744, 15576, 14237, 6865, 10681, 13, 400, 286, 733, 295, 1792, 807, 264, 2649, 1296, 264, 2699, 76, 2010, 1185, 293, 264, 51068, 51096, 15576, 14237, 2010, 1185, 293, 577, 321, 393, 11, 291, 393, 1333, 295, 980, 15576, 14237, 11, 3361, 385, 11, 286, 458, 437, 51392, 51392, 286, 478, 884, 510, 13, 400, 309, 486, 2089, 4190, 281, 3095, 807, 300, 366, 767, 406, 264, 3467, 300, 291, 51672, 51672], "temperature": 0.0, "avg_logprob": -0.09568455344752262, "compression_ratio": 1.6902654867256637, "no_caption_prob": 4.985763371223584e-05}, {"id": 57, "seek": 37168, "start": 379.28000000000003, "end": 385.76, "text": " TypeScript blind spots. And I kind of walk through the difference between the Elm type system and the", "tokens": [50364, 370, 286, 4114, 257, 6968, 2183, 3938, 466, 562, 393, 321, 10687, 322, 15576, 14237, 13, 440, 2183, 307, 1219, 50744, 50744, 15576, 14237, 6865, 10681, 13, 400, 286, 733, 295, 1792, 807, 264, 2649, 1296, 264, 2699, 76, 2010, 1185, 293, 264, 51068, 51096, 15576, 14237, 2010, 1185, 293, 577, 321, 393, 11, 291, 393, 1333, 295, 980, 15576, 14237, 11, 3361, 385, 11, 286, 458, 437, 51392, 51392, 286, 478, 884, 510, 13, 400, 309, 486, 2089, 4190, 281, 3095, 807, 300, 366, 767, 406, 264, 3467, 300, 291, 51672, 51672], "temperature": 0.0, "avg_logprob": -0.09568455344752262, "compression_ratio": 1.6902654867256637, "no_caption_prob": 4.985763371223584e-05}, {"id": 58, "seek": 37168, "start": 386.32, "end": 392.24, "text": " TypeScript type system and how we can, you can sort of tell TypeScript, trust me, I know what", "tokens": [50364, 370, 286, 4114, 257, 6968, 2183, 3938, 466, 562, 393, 321, 10687, 322, 15576, 14237, 13, 440, 2183, 307, 1219, 50744, 50744, 15576, 14237, 6865, 10681, 13, 400, 286, 733, 295, 1792, 807, 264, 2649, 1296, 264, 2699, 76, 2010, 1185, 293, 264, 51068, 51096, 15576, 14237, 2010, 1185, 293, 577, 321, 393, 11, 291, 393, 1333, 295, 980, 15576, 14237, 11, 3361, 385, 11, 286, 458, 437, 51392, 51392, 286, 478, 884, 510, 13, 400, 309, 486, 2089, 4190, 281, 3095, 807, 300, 366, 767, 406, 264, 3467, 300, 291, 51672, 51672], "temperature": 0.0, "avg_logprob": -0.09568455344752262, "compression_ratio": 1.6902654867256637, "no_caption_prob": 4.985763371223584e-05}, {"id": 59, "seek": 37168, "start": 392.24, "end": 397.84000000000003, "text": " I'm doing here. And it will allow values to flow through that are actually not the types that you", "tokens": [50364, 370, 286, 4114, 257, 6968, 2183, 3938, 466, 562, 393, 321, 10687, 322, 15576, 14237, 13, 440, 2183, 307, 1219, 50744, 50744, 15576, 14237, 6865, 10681, 13, 400, 286, 733, 295, 1792, 807, 264, 2649, 1296, 264, 2699, 76, 2010, 1185, 293, 264, 51068, 51096, 15576, 14237, 2010, 1185, 293, 577, 321, 393, 11, 291, 393, 1333, 295, 980, 15576, 14237, 11, 3361, 385, 11, 286, 458, 437, 51392, 51392, 286, 478, 884, 510, 13, 400, 309, 486, 2089, 4190, 281, 3095, 807, 300, 366, 767, 406, 264, 3467, 300, 291, 51672, 51672], "temperature": 0.0, "avg_logprob": -0.09568455344752262, "compression_ratio": 1.6902654867256637, "no_caption_prob": 4.985763371223584e-05}, {"id": 60, "seek": 39784, "start": 397.84, "end": 404.0, "text": " said they were, which Elm prevents that through its design. Oh, TypeScript, you naive compiler.", "tokens": [50364, 848, 436, 645, 11, 597, 2699, 76, 22367, 300, 807, 1080, 1715, 13, 876, 11, 15576, 14237, 11, 291, 29052, 31958, 13, 50672, 50772, 1779, 13, 400, 295, 1164, 309, 311, 11, 286, 914, 11, 337, 1080, 5493, 11, 1080, 5493, 366, 2584, 819, 11, 457, 309, 311, 11, 51056, 51056, 291, 458, 11, 309, 311, 746, 281, 312, 3650, 295, 13, 26291, 380, 613, 2740, 920, 1051, 365, 51244, 51244, 2699, 76, 37645, 12729, 11, 597, 321, 603, 352, 666, 1780, 11, 457, 291, 920, 362, 264, 912, 2740, 570, 51472, 51472, 291, 393, 920, 980, 15576, 14237, 341, 307, 1392, 11, 754, 562, 309, 1943, 380, 13, 51680, 51680], "temperature": 0.0, "avg_logprob": -0.11975417516927804, "compression_ratio": 1.6150943396226416, "no_caption_prob": 2.355224387429189e-05}, {"id": 61, "seek": 39784, "start": 406.0, "end": 411.67999999999995, "text": " Right. And of course it's, I mean, for its goals, its goals are completely different, but it's,", "tokens": [50364, 848, 436, 645, 11, 597, 2699, 76, 22367, 300, 807, 1080, 1715, 13, 876, 11, 15576, 14237, 11, 291, 29052, 31958, 13, 50672, 50772, 1779, 13, 400, 295, 1164, 309, 311, 11, 286, 914, 11, 337, 1080, 5493, 11, 1080, 5493, 366, 2584, 819, 11, 457, 309, 311, 11, 51056, 51056, 291, 458, 11, 309, 311, 746, 281, 312, 3650, 295, 13, 26291, 380, 613, 2740, 920, 1051, 365, 51244, 51244, 2699, 76, 37645, 12729, 11, 597, 321, 603, 352, 666, 1780, 11, 457, 291, 920, 362, 264, 912, 2740, 570, 51472, 51472, 291, 393, 920, 980, 15576, 14237, 341, 307, 1392, 11, 754, 562, 309, 1943, 380, 13, 51680, 51680], "temperature": 0.0, "avg_logprob": -0.11975417516927804, "compression_ratio": 1.6150943396226416, "no_caption_prob": 2.355224387429189e-05}, {"id": 62, "seek": 39784, "start": 411.67999999999995, "end": 415.44, "text": " you know, it's something to be aware of. Wouldn't these problems still happen with", "tokens": [50364, 848, 436, 645, 11, 597, 2699, 76, 22367, 300, 807, 1080, 1715, 13, 876, 11, 15576, 14237, 11, 291, 29052, 31958, 13, 50672, 50772, 1779, 13, 400, 295, 1164, 309, 311, 11, 286, 914, 11, 337, 1080, 5493, 11, 1080, 5493, 366, 2584, 819, 11, 457, 309, 311, 11, 51056, 51056, 291, 458, 11, 309, 311, 746, 281, 312, 3650, 295, 13, 26291, 380, 613, 2740, 920, 1051, 365, 51244, 51244, 2699, 76, 37645, 12729, 11, 597, 321, 603, 352, 666, 1780, 11, 457, 291, 920, 362, 264, 912, 2740, 570, 51472, 51472, 291, 393, 920, 980, 15576, 14237, 341, 307, 1392, 11, 754, 562, 309, 1943, 380, 13, 51680, 51680], "temperature": 0.0, "avg_logprob": -0.11975417516927804, "compression_ratio": 1.6150943396226416, "no_caption_prob": 2.355224387429189e-05}, {"id": 63, "seek": 39784, "start": 415.44, "end": 420.0, "text": " Elm TS interrupt, which we'll go into later, but you still have the same problems because", "tokens": [50364, 848, 436, 645, 11, 597, 2699, 76, 22367, 300, 807, 1080, 1715, 13, 876, 11, 15576, 14237, 11, 291, 29052, 31958, 13, 50672, 50772, 1779, 13, 400, 295, 1164, 309, 311, 11, 286, 914, 11, 337, 1080, 5493, 11, 1080, 5493, 366, 2584, 819, 11, 457, 309, 311, 11, 51056, 51056, 291, 458, 11, 309, 311, 746, 281, 312, 3650, 295, 13, 26291, 380, 613, 2740, 920, 1051, 365, 51244, 51244, 2699, 76, 37645, 12729, 11, 597, 321, 603, 352, 666, 1780, 11, 457, 291, 920, 362, 264, 912, 2740, 570, 51472, 51472, 291, 393, 920, 980, 15576, 14237, 341, 307, 1392, 11, 754, 562, 309, 1943, 380, 13, 51680, 51680], "temperature": 0.0, "avg_logprob": -0.11975417516927804, "compression_ratio": 1.6150943396226416, "no_caption_prob": 2.355224387429189e-05}, {"id": 64, "seek": 39784, "start": 420.0, "end": 424.15999999999997, "text": " you can still tell TypeScript this is okay, even when it isn't.", "tokens": [50364, 848, 436, 645, 11, 597, 2699, 76, 22367, 300, 807, 1080, 1715, 13, 876, 11, 15576, 14237, 11, 291, 29052, 31958, 13, 50672, 50772, 1779, 13, 400, 295, 1164, 309, 311, 11, 286, 914, 11, 337, 1080, 5493, 11, 1080, 5493, 366, 2584, 819, 11, 457, 309, 311, 11, 51056, 51056, 291, 458, 11, 309, 311, 746, 281, 312, 3650, 295, 13, 26291, 380, 613, 2740, 920, 1051, 365, 51244, 51244, 2699, 76, 37645, 12729, 11, 597, 321, 603, 352, 666, 1780, 11, 457, 291, 920, 362, 264, 912, 2740, 570, 51472, 51472, 291, 393, 920, 980, 15576, 14237, 341, 307, 1392, 11, 754, 562, 309, 1943, 380, 13, 51680, 51680], "temperature": 0.0, "avg_logprob": -0.11975417516927804, "compression_ratio": 1.6150943396226416, "no_caption_prob": 2.355224387429189e-05}, {"id": 65, "seek": 42416, "start": 424.16, "end": 430.56, "text": " Right. So yeah, Elm TS interrupt doesn't change the soundness properties of TypeScript type system,", "tokens": [50364, 1779, 13, 407, 1338, 11, 2699, 76, 37645, 12729, 1177, 380, 1319, 264, 1626, 1287, 7221, 295, 15576, 14237, 2010, 1185, 11, 50684, 50684, 457, 309, 775, 406, 10687, 322, 264, 26947, 17436, 2144, 13, 7587, 558, 13, 7587, 558, 13, 407, 456, 311, 341, 51108, 51108, 26947, 17436, 2144, 300, 2314, 562, 291, 584, 2436, 7751, 11, 293, 550, 291, 362, 257, 2136, 281, 51424, 51424, 5622, 3636, 420, 2035, 11, 291, 458, 11, 1333, 295, 411, 2295, 1496, 2699, 76, 3467, 13, 821, 311, 364, 26947, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.09208230350328528, "compression_ratio": 1.6351931330472103, "no_caption_prob": 2.4682247385499068e-05}, {"id": 66, "seek": 42416, "start": 430.56, "end": 439.04, "text": " but it does not rely on the implicit serialization. Exactly right. Exactly right. So there's this", "tokens": [50364, 1779, 13, 407, 1338, 11, 2699, 76, 37645, 12729, 1177, 380, 1319, 264, 1626, 1287, 7221, 295, 15576, 14237, 2010, 1185, 11, 50684, 50684, 457, 309, 775, 406, 10687, 322, 264, 26947, 17436, 2144, 13, 7587, 558, 13, 7587, 558, 13, 407, 456, 311, 341, 51108, 51108, 26947, 17436, 2144, 300, 2314, 562, 291, 584, 2436, 7751, 11, 293, 550, 291, 362, 257, 2136, 281, 51424, 51424, 5622, 3636, 420, 2035, 11, 291, 458, 11, 1333, 295, 411, 2295, 1496, 2699, 76, 3467, 13, 821, 311, 364, 26947, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.09208230350328528, "compression_ratio": 1.6351931330472103, "no_caption_prob": 2.4682247385499068e-05}, {"id": 67, "seek": 42416, "start": 439.04, "end": 445.36, "text": " implicit serialization that happens when you say port hello, and then you have a record to", "tokens": [50364, 1779, 13, 407, 1338, 11, 2699, 76, 37645, 12729, 1177, 380, 1319, 264, 1626, 1287, 7221, 295, 15576, 14237, 2010, 1185, 11, 50684, 50684, 457, 309, 775, 406, 10687, 322, 264, 26947, 17436, 2144, 13, 7587, 558, 13, 7587, 558, 13, 407, 456, 311, 341, 51108, 51108, 26947, 17436, 2144, 300, 2314, 562, 291, 584, 2436, 7751, 11, 293, 550, 291, 362, 257, 2136, 281, 51424, 51424, 5622, 3636, 420, 2035, 11, 291, 458, 11, 1333, 295, 411, 2295, 1496, 2699, 76, 3467, 13, 821, 311, 364, 26947, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.09208230350328528, "compression_ratio": 1.6351931330472103, "no_caption_prob": 2.4682247385499068e-05}, {"id": 68, "seek": 42416, "start": 445.36, "end": 452.16, "text": " command message or whatever, you know, sort of like low level Elm types. There's an implicit", "tokens": [50364, 1779, 13, 407, 1338, 11, 2699, 76, 37645, 12729, 1177, 380, 1319, 264, 1626, 1287, 7221, 295, 15576, 14237, 2010, 1185, 11, 50684, 50684, 457, 309, 775, 406, 10687, 322, 264, 26947, 17436, 2144, 13, 7587, 558, 13, 7587, 558, 13, 407, 456, 311, 341, 51108, 51108, 26947, 17436, 2144, 300, 2314, 562, 291, 584, 2436, 7751, 11, 293, 550, 291, 362, 257, 2136, 281, 51424, 51424, 5622, 3636, 420, 2035, 11, 291, 458, 11, 1333, 295, 411, 2295, 1496, 2699, 76, 3467, 13, 821, 311, 364, 26947, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.09208230350328528, "compression_ratio": 1.6351931330472103, "no_caption_prob": 2.4682247385499068e-05}, {"id": 69, "seek": 45216, "start": 452.16, "end": 458.88000000000005, "text": " serialization that Elm does for you there. And those can fail if TypeScript sends it some values", "tokens": [50364, 17436, 2144, 300, 2699, 76, 775, 337, 291, 456, 13, 400, 729, 393, 3061, 498, 15576, 14237, 14790, 309, 512, 4190, 50700, 50700, 300, 309, 311, 406, 9650, 294, 364, 12246, 636, 13, 407, 2699, 76, 37645, 12729, 32539, 341, 570, 309, 4960, 364, 3539, 51124, 51124, 31828, 979, 19866, 2058, 19866, 13, 407, 264, 787, 3467, 295, 1412, 300, 3095, 807, 365, 2699, 76, 37645, 12729, 366, 31828, 51508, 51508, 979, 1429, 4190, 293, 31828, 2058, 1429, 4190, 11, 597, 307, 264, 9628, 3124, 294, 264, 2699, 76, 45623, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.06352477324636359, "compression_ratio": 1.6266094420600858, "no_caption_prob": 5.738427717005834e-05}, {"id": 70, "seek": 45216, "start": 458.88000000000005, "end": 467.36, "text": " that it's not expecting in an ugly way. So Elm TS interrupt fixes this because it uses an actual", "tokens": [50364, 17436, 2144, 300, 2699, 76, 775, 337, 291, 456, 13, 400, 729, 393, 3061, 498, 15576, 14237, 14790, 309, 512, 4190, 50700, 50700, 300, 309, 311, 406, 9650, 294, 364, 12246, 636, 13, 407, 2699, 76, 37645, 12729, 32539, 341, 570, 309, 4960, 364, 3539, 51124, 51124, 31828, 979, 19866, 2058, 19866, 13, 407, 264, 787, 3467, 295, 1412, 300, 3095, 807, 365, 2699, 76, 37645, 12729, 366, 31828, 51508, 51508, 979, 1429, 4190, 293, 31828, 2058, 1429, 4190, 11, 597, 307, 264, 9628, 3124, 294, 264, 2699, 76, 45623, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.06352477324636359, "compression_ratio": 1.6266094420600858, "no_caption_prob": 5.738427717005834e-05}, {"id": 71, "seek": 45216, "start": 467.36, "end": 475.04, "text": " JSON decoder encoder. So the only types of data that flow through with Elm TS interrupt are JSON", "tokens": [50364, 17436, 2144, 300, 2699, 76, 775, 337, 291, 456, 13, 400, 729, 393, 3061, 498, 15576, 14237, 14790, 309, 512, 4190, 50700, 50700, 300, 309, 311, 406, 9650, 294, 364, 12246, 636, 13, 407, 2699, 76, 37645, 12729, 32539, 341, 570, 309, 4960, 364, 3539, 51124, 51124, 31828, 979, 19866, 2058, 19866, 13, 407, 264, 787, 3467, 295, 1412, 300, 3095, 807, 365, 2699, 76, 37645, 12729, 366, 31828, 51508, 51508, 979, 1429, 4190, 293, 31828, 2058, 1429, 4190, 11, 597, 307, 264, 9628, 3124, 294, 264, 2699, 76, 45623, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.06352477324636359, "compression_ratio": 1.6266094420600858, "no_caption_prob": 5.738427717005834e-05}, {"id": 72, "seek": 45216, "start": 475.04, "end": 480.16, "text": " decode values and JSON encode values, which is the recommended practice in the Elm docs.", "tokens": [50364, 17436, 2144, 300, 2699, 76, 775, 337, 291, 456, 13, 400, 729, 393, 3061, 498, 15576, 14237, 14790, 309, 512, 4190, 50700, 50700, 300, 309, 311, 406, 9650, 294, 364, 12246, 636, 13, 407, 2699, 76, 37645, 12729, 32539, 341, 570, 309, 4960, 364, 3539, 51124, 51124, 31828, 979, 19866, 2058, 19866, 13, 407, 264, 787, 3467, 295, 1412, 300, 3095, 807, 365, 2699, 76, 37645, 12729, 366, 31828, 51508, 51508, 979, 1429, 4190, 293, 31828, 2058, 1429, 4190, 11, 597, 307, 264, 9628, 3124, 294, 264, 2699, 76, 45623, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.06352477324636359, "compression_ratio": 1.6266094420600858, "no_caption_prob": 5.738427717005834e-05}, {"id": 73, "seek": 48016, "start": 480.16, "end": 487.6, "text": " In general, this is the recommended practice because if you send flags that don't", "tokens": [50364, 682, 2674, 11, 341, 307, 264, 9628, 3124, 570, 498, 291, 2845, 23265, 300, 500, 380, 50736, 50736, 8944, 360, 300, 12509, 26947, 730, 260, 831, 2144, 11, 550, 428, 724, 486, 445, 362, 257, 51080, 51080, 34474, 11183, 562, 309, 311, 5883, 1602, 13, 583, 291, 393, 10042, 2277, 4813, 18424, 17695, 51420, 51420, 1228, 2699, 76, 37645, 12729, 13, 865, 11, 754, 337, 18160, 406, 5883, 2144, 13, 1133, 291, 2845, 34702, 1412, 281, 51804, 51804], "temperature": 0.0, "avg_logprob": -0.1137506604194641, "compression_ratio": 1.5258620689655173, "no_caption_prob": 4.0062408515950665e-05}, {"id": 74, "seek": 48016, "start": 487.6, "end": 494.48, "text": " correctly do that automatic implicit deserialization, then your app will just have a", "tokens": [50364, 682, 2674, 11, 341, 307, 264, 9628, 3124, 570, 498, 291, 2845, 23265, 300, 500, 380, 50736, 50736, 8944, 360, 300, 12509, 26947, 730, 260, 831, 2144, 11, 550, 428, 724, 486, 445, 362, 257, 51080, 51080, 34474, 11183, 562, 309, 311, 5883, 1602, 13, 583, 291, 393, 10042, 2277, 4813, 18424, 17695, 51420, 51420, 1228, 2699, 76, 37645, 12729, 13, 865, 11, 754, 337, 18160, 406, 5883, 2144, 13, 1133, 291, 2845, 34702, 1412, 281, 51804, 51804], "temperature": 0.0, "avg_logprob": -0.1137506604194641, "compression_ratio": 1.5258620689655173, "no_caption_prob": 4.0062408515950665e-05}, {"id": 75, "seek": 48016, "start": 494.48, "end": 501.28000000000003, "text": " runtime exception when it's initialized. But you can gracefully handle incorrect assumptions", "tokens": [50364, 682, 2674, 11, 341, 307, 264, 9628, 3124, 570, 498, 291, 2845, 23265, 300, 500, 380, 50736, 50736, 8944, 360, 300, 12509, 26947, 730, 260, 831, 2144, 11, 550, 428, 724, 486, 445, 362, 257, 51080, 51080, 34474, 11183, 562, 309, 311, 5883, 1602, 13, 583, 291, 393, 10042, 2277, 4813, 18424, 17695, 51420, 51420, 1228, 2699, 76, 37645, 12729, 13, 865, 11, 754, 337, 18160, 406, 5883, 2144, 13, 1133, 291, 2845, 34702, 1412, 281, 51804, 51804], "temperature": 0.0, "avg_logprob": -0.1137506604194641, "compression_ratio": 1.5258620689655173, "no_caption_prob": 4.0062408515950665e-05}, {"id": 76, "seek": 48016, "start": 501.28000000000003, "end": 508.96000000000004, "text": " using Elm TS interrupt. Yeah, even for ports not initialization. When you send invalid data to", "tokens": [50364, 682, 2674, 11, 341, 307, 264, 9628, 3124, 570, 498, 291, 2845, 23265, 300, 500, 380, 50736, 50736, 8944, 360, 300, 12509, 26947, 730, 260, 831, 2144, 11, 550, 428, 724, 486, 445, 362, 257, 51080, 51080, 34474, 11183, 562, 309, 311, 5883, 1602, 13, 583, 291, 393, 10042, 2277, 4813, 18424, 17695, 51420, 51420, 1228, 2699, 76, 37645, 12729, 13, 865, 11, 754, 337, 18160, 406, 5883, 2144, 13, 1133, 291, 2845, 34702, 1412, 281, 51804, 51804], "temperature": 0.0, "avg_logprob": -0.1137506604194641, "compression_ratio": 1.5258620689655173, "no_caption_prob": 4.0062408515950665e-05}, {"id": 77, "seek": 50896, "start": 508.96, "end": 519.36, "text": " a port from JavaScript to Elm, you get a big red warning in the console. And if you use an encode", "tokens": [50364, 257, 2436, 490, 15778, 281, 2699, 76, 11, 291, 483, 257, 955, 2182, 9164, 294, 264, 11076, 13, 400, 498, 291, 764, 364, 2058, 1429, 50884, 50884, 2158, 11, 550, 291, 393, 1101, 4813, 264, 6713, 13, 509, 393, 4813, 309, 8944, 294, 2699, 76, 365, 4099, 257, 51216, 51216, 2238, 6713, 420, 746, 13, 7587, 11, 558, 13, 509, 393, 4813, 300, 16525, 294, 2699, 76, 13, 509, 362, 51520, 51520], "temperature": 0.0, "avg_logprob": -0.10745214771580051, "compression_ratio": 1.5944444444444446, "no_caption_prob": 4.069361602887511e-05}, {"id": 78, "seek": 50896, "start": 519.36, "end": 526.0, "text": " value, then you can better handle the error. You can handle it correctly in Elm with showing a", "tokens": [50364, 257, 2436, 490, 15778, 281, 2699, 76, 11, 291, 483, 257, 955, 2182, 9164, 294, 264, 11076, 13, 400, 498, 291, 764, 364, 2058, 1429, 50884, 50884, 2158, 11, 550, 291, 393, 1101, 4813, 264, 6713, 13, 509, 393, 4813, 309, 8944, 294, 2699, 76, 365, 4099, 257, 51216, 51216, 2238, 6713, 420, 746, 13, 7587, 11, 558, 13, 509, 393, 4813, 300, 16525, 294, 2699, 76, 13, 509, 362, 51520, 51520], "temperature": 0.0, "avg_logprob": -0.10745214771580051, "compression_ratio": 1.5944444444444446, "no_caption_prob": 4.069361602887511e-05}, {"id": 79, "seek": 50896, "start": 526.0, "end": 532.0799999999999, "text": " beautiful error or something. Exactly, right. You can handle that beautifully in Elm. You have", "tokens": [50364, 257, 2436, 490, 15778, 281, 2699, 76, 11, 291, 483, 257, 955, 2182, 9164, 294, 264, 11076, 13, 400, 498, 291, 764, 364, 2058, 1429, 50884, 50884, 2158, 11, 550, 291, 393, 1101, 4813, 264, 6713, 13, 509, 393, 4813, 309, 8944, 294, 2699, 76, 365, 4099, 257, 51216, 51216, 2238, 6713, 420, 746, 13, 7587, 11, 558, 13, 509, 393, 4813, 300, 16525, 294, 2699, 76, 13, 509, 362, 51520, 51520], "temperature": 0.0, "avg_logprob": -0.10745214771580051, "compression_ratio": 1.5944444444444446, "no_caption_prob": 4.069361602887511e-05}, {"id": 80, "seek": 53208, "start": 532.08, "end": 538.96, "text": " access to the fact that something didn't deserialize as expected in your Elm code, not just", "tokens": [50364, 2105, 281, 264, 1186, 300, 746, 994, 380, 730, 260, 831, 1125, 382, 5176, 294, 428, 2699, 76, 3089, 11, 406, 445, 50708, 50708, 364, 6713, 3636, 294, 428, 11076, 13, 407, 300, 311, 472, 2649, 13, 3996, 2649, 365, 2699, 76, 37645, 51004, 51004, 12729, 307, 300, 291, 362, 257, 2167, 2436, 6119, 411, 28549, 9628, 294, 702, 26391, 719, 295, 430, 3299, 751, 51384, 51384, 412, 2699, 76, 11701, 13, 407, 2238, 751, 11, 1338, 13, 14724, 4468, 11, 2238, 4468, 13, 492, 439, 959, 257, 665, 4468, 13, 407, 51684, 51716], "temperature": 0.0, "avg_logprob": -0.10779001315434773, "compression_ratio": 1.5857740585774058, "no_caption_prob": 0.00024152798869181424}, {"id": 81, "seek": 53208, "start": 538.96, "end": 544.88, "text": " an error message in your console. So that's one difference. Another difference with Elm TS", "tokens": [50364, 2105, 281, 264, 1186, 300, 746, 994, 380, 730, 260, 831, 1125, 382, 5176, 294, 428, 2699, 76, 3089, 11, 406, 445, 50708, 50708, 364, 6713, 3636, 294, 428, 11076, 13, 407, 300, 311, 472, 2649, 13, 3996, 2649, 365, 2699, 76, 37645, 51004, 51004, 12729, 307, 300, 291, 362, 257, 2167, 2436, 6119, 411, 28549, 9628, 294, 702, 26391, 719, 295, 430, 3299, 751, 51384, 51384, 412, 2699, 76, 11701, 13, 407, 2238, 751, 11, 1338, 13, 14724, 4468, 11, 2238, 4468, 13, 492, 439, 959, 257, 665, 4468, 13, 407, 51684, 51716], "temperature": 0.0, "avg_logprob": -0.10779001315434773, "compression_ratio": 1.5857740585774058, "no_caption_prob": 0.00024152798869181424}, {"id": 82, "seek": 53208, "start": 544.88, "end": 552.48, "text": " interrupt is that you have a single port pair like Murphy recommended in his Importance of Ports talk", "tokens": [50364, 2105, 281, 264, 1186, 300, 746, 994, 380, 730, 260, 831, 1125, 382, 5176, 294, 428, 2699, 76, 3089, 11, 406, 445, 50708, 50708, 364, 6713, 3636, 294, 428, 11076, 13, 407, 300, 311, 472, 2649, 13, 3996, 2649, 365, 2699, 76, 37645, 51004, 51004, 12729, 307, 300, 291, 362, 257, 2167, 2436, 6119, 411, 28549, 9628, 294, 702, 26391, 719, 295, 430, 3299, 751, 51384, 51384, 412, 2699, 76, 11701, 13, 407, 2238, 751, 11, 1338, 13, 14724, 4468, 11, 2238, 4468, 13, 492, 439, 959, 257, 665, 4468, 13, 407, 51684, 51716], "temperature": 0.0, "avg_logprob": -0.10779001315434773, "compression_ratio": 1.5857740585774058, "no_caption_prob": 0.00024152798869181424}, {"id": 83, "seek": 53208, "start": 552.48, "end": 558.48, "text": " at Elm Conf. So beautiful talk, yeah. Beautiful pun, beautiful pun. We all love a good pun. So", "tokens": [50364, 2105, 281, 264, 1186, 300, 746, 994, 380, 730, 260, 831, 1125, 382, 5176, 294, 428, 2699, 76, 3089, 11, 406, 445, 50708, 50708, 364, 6713, 3636, 294, 428, 11076, 13, 407, 300, 311, 472, 2649, 13, 3996, 2649, 365, 2699, 76, 37645, 51004, 51004, 12729, 307, 300, 291, 362, 257, 2167, 2436, 6119, 411, 28549, 9628, 294, 702, 26391, 719, 295, 430, 3299, 751, 51384, 51384, 412, 2699, 76, 11701, 13, 407, 2238, 751, 11, 1338, 13, 14724, 4468, 11, 2238, 4468, 13, 492, 439, 959, 257, 665, 4468, 13, 407, 51684, 51716], "temperature": 0.0, "avg_logprob": -0.10779001315434773, "compression_ratio": 1.5857740585774058, "no_caption_prob": 0.00024152798869181424}, {"id": 84, "seek": 55848, "start": 558.48, "end": 564.88, "text": " it's a single port pair. Now one of the really cool things about that is when you use Elm TS", "tokens": [50364, 309, 311, 257, 2167, 2436, 6119, 13, 823, 472, 295, 264, 534, 1627, 721, 466, 300, 307, 562, 291, 764, 2699, 76, 37645, 50684, 50684, 12729, 281, 4813, 428, 18160, 1348, 490, 2699, 76, 281, 15576, 14237, 11, 550, 437, 291, 393, 360, 307, 291, 393, 360, 51012, 51012, 257, 1481, 2238, 3679, 5629, 300, 1542, 257, 688, 411, 428, 5623, 2445, 294, 2699, 76, 13, 865, 11, 370, 498, 264, 51340, 51340, 2010, 295, 341, 3636, 1348, 490, 2699, 76, 307, 1946, 1117, 12288, 12288, 12288, 11, 550, 360, 341, 11, 5911, 360, 300, 11, 51708, 51708], "temperature": 0.0, "avg_logprob": -0.1319657039642334, "compression_ratio": 1.6666666666666667, "no_caption_prob": 3.7266154322423972e-06}, {"id": 85, "seek": 55848, "start": 564.88, "end": 571.44, "text": " interrupt to handle your ports coming from Elm to TypeScript, then what you can do is you can do", "tokens": [50364, 309, 311, 257, 2167, 2436, 6119, 13, 823, 472, 295, 264, 534, 1627, 721, 466, 300, 307, 562, 291, 764, 2699, 76, 37645, 50684, 50684, 12729, 281, 4813, 428, 18160, 1348, 490, 2699, 76, 281, 15576, 14237, 11, 550, 437, 291, 393, 360, 307, 291, 393, 360, 51012, 51012, 257, 1481, 2238, 3679, 5629, 300, 1542, 257, 688, 411, 428, 5623, 2445, 294, 2699, 76, 13, 865, 11, 370, 498, 264, 51340, 51340, 2010, 295, 341, 3636, 1348, 490, 2699, 76, 307, 1946, 1117, 12288, 12288, 12288, 11, 550, 360, 341, 11, 5911, 360, 300, 11, 51708, 51708], "temperature": 0.0, "avg_logprob": -0.1319657039642334, "compression_ratio": 1.6666666666666667, "no_caption_prob": 3.7266154322423972e-06}, {"id": 86, "seek": 55848, "start": 571.44, "end": 578.0, "text": " a nice beautiful switch statement that looks a lot like your update function in Elm. Yeah, so if the", "tokens": [50364, 309, 311, 257, 2167, 2436, 6119, 13, 823, 472, 295, 264, 534, 1627, 721, 466, 300, 307, 562, 291, 764, 2699, 76, 37645, 50684, 50684, 12729, 281, 4813, 428, 18160, 1348, 490, 2699, 76, 281, 15576, 14237, 11, 550, 437, 291, 393, 360, 307, 291, 393, 360, 51012, 51012, 257, 1481, 2238, 3679, 5629, 300, 1542, 257, 688, 411, 428, 5623, 2445, 294, 2699, 76, 13, 865, 11, 370, 498, 264, 51340, 51340, 2010, 295, 341, 3636, 1348, 490, 2699, 76, 307, 1946, 1117, 12288, 12288, 12288, 11, 550, 360, 341, 11, 5911, 360, 300, 11, 51708, 51708], "temperature": 0.0, "avg_logprob": -0.1319657039642334, "compression_ratio": 1.6666666666666667, "no_caption_prob": 3.7266154322423972e-06}, {"id": 87, "seek": 55848, "start": 578.0, "end": 585.36, "text": " type of this message coming from Elm is increments blah blah blah, then do this, otherwise do that,", "tokens": [50364, 309, 311, 257, 2167, 2436, 6119, 13, 823, 472, 295, 264, 534, 1627, 721, 466, 300, 307, 562, 291, 764, 2699, 76, 37645, 50684, 50684, 12729, 281, 4813, 428, 18160, 1348, 490, 2699, 76, 281, 15576, 14237, 11, 550, 437, 291, 393, 360, 307, 291, 393, 360, 51012, 51012, 257, 1481, 2238, 3679, 5629, 300, 1542, 257, 688, 411, 428, 5623, 2445, 294, 2699, 76, 13, 865, 11, 370, 498, 264, 51340, 51340, 2010, 295, 341, 3636, 1348, 490, 2699, 76, 307, 1946, 1117, 12288, 12288, 12288, 11, 550, 360, 341, 11, 5911, 360, 300, 11, 51708, 51708], "temperature": 0.0, "avg_logprob": -0.1319657039642334, "compression_ratio": 1.6666666666666667, "no_caption_prob": 3.7266154322423972e-06}, {"id": 88, "seek": 58536, "start": 585.36, "end": 592.24, "text": " blah blah blah. Yes, right, exactly. So it's going to look like typically you're going to have a tag", "tokens": [50364, 12288, 12288, 12288, 13, 1079, 11, 558, 11, 2293, 13, 407, 309, 311, 516, 281, 574, 411, 5850, 291, 434, 516, 281, 362, 257, 6162, 50708, 50708, 597, 307, 257, 6798, 13, 407, 294, 15576, 14237, 456, 311, 341, 1558, 295, 257, 20828, 770, 11671, 2010, 597, 307, 264, 51056, 51056, 10344, 295, 437, 321, 434, 1143, 281, 294, 364, 2699, 76, 2375, 2010, 13, 4803, 436, 434, 1219, 257, 40239, 11671, 13, 407, 51324, 51324, 445, 281, 11, 291, 458, 11, 337, 2878, 567, 311, 406, 4963, 365, 577, 11671, 3467, 589, 294, 15576, 14237, 11, 436, 434, 51652, 51652], "temperature": 0.0, "avg_logprob": -0.15538958206917475, "compression_ratio": 1.6808510638297873, "no_caption_prob": 6.921936437720433e-05}, {"id": 89, "seek": 58536, "start": 592.24, "end": 599.2, "text": " which is a string. So in TypeScript there's this idea of a discriminated union type which is the", "tokens": [50364, 12288, 12288, 12288, 13, 1079, 11, 558, 11, 2293, 13, 407, 309, 311, 516, 281, 574, 411, 5850, 291, 434, 516, 281, 362, 257, 6162, 50708, 50708, 597, 307, 257, 6798, 13, 407, 294, 15576, 14237, 456, 311, 341, 1558, 295, 257, 20828, 770, 11671, 2010, 597, 307, 264, 51056, 51056, 10344, 295, 437, 321, 434, 1143, 281, 294, 364, 2699, 76, 2375, 2010, 13, 4803, 436, 434, 1219, 257, 40239, 11671, 13, 407, 51324, 51324, 445, 281, 11, 291, 458, 11, 337, 2878, 567, 311, 406, 4963, 365, 577, 11671, 3467, 589, 294, 15576, 14237, 11, 436, 434, 51652, 51652], "temperature": 0.0, "avg_logprob": -0.15538958206917475, "compression_ratio": 1.6808510638297873, "no_caption_prob": 6.921936437720433e-05}, {"id": 90, "seek": 58536, "start": 599.2, "end": 604.5600000000001, "text": " equivalent of what we're used to in an Elm custom type. Sometimes they're called a tagged union. So", "tokens": [50364, 12288, 12288, 12288, 13, 1079, 11, 558, 11, 2293, 13, 407, 309, 311, 516, 281, 574, 411, 5850, 291, 434, 516, 281, 362, 257, 6162, 50708, 50708, 597, 307, 257, 6798, 13, 407, 294, 15576, 14237, 456, 311, 341, 1558, 295, 257, 20828, 770, 11671, 2010, 597, 307, 264, 51056, 51056, 10344, 295, 437, 321, 434, 1143, 281, 294, 364, 2699, 76, 2375, 2010, 13, 4803, 436, 434, 1219, 257, 40239, 11671, 13, 407, 51324, 51324, 445, 281, 11, 291, 458, 11, 337, 2878, 567, 311, 406, 4963, 365, 577, 11671, 3467, 589, 294, 15576, 14237, 11, 436, 434, 51652, 51652], "temperature": 0.0, "avg_logprob": -0.15538958206917475, "compression_ratio": 1.6808510638297873, "no_caption_prob": 6.921936437720433e-05}, {"id": 91, "seek": 58536, "start": 604.5600000000001, "end": 611.12, "text": " just to, you know, for anyone who's not familiar with how union types work in TypeScript, they're", "tokens": [50364, 12288, 12288, 12288, 13, 1079, 11, 558, 11, 2293, 13, 407, 309, 311, 516, 281, 574, 411, 5850, 291, 434, 516, 281, 362, 257, 6162, 50708, 50708, 597, 307, 257, 6798, 13, 407, 294, 15576, 14237, 456, 311, 341, 1558, 295, 257, 20828, 770, 11671, 2010, 597, 307, 264, 51056, 51056, 10344, 295, 437, 321, 434, 1143, 281, 294, 364, 2699, 76, 2375, 2010, 13, 4803, 436, 434, 1219, 257, 40239, 11671, 13, 407, 51324, 51324, 445, 281, 11, 291, 458, 11, 337, 2878, 567, 311, 406, 4963, 365, 577, 11671, 3467, 589, 294, 15576, 14237, 11, 436, 434, 51652, 51652], "temperature": 0.0, "avg_logprob": -0.15538958206917475, "compression_ratio": 1.6808510638297873, "no_caption_prob": 6.921936437720433e-05}, {"id": 92, "seek": 61112, "start": 611.12, "end": 617.52, "text": " what are sometimes called untagged union types, which means in TypeScript you can say type string", "tokens": [50364, 437, 366, 2171, 1219, 1701, 559, 3004, 11671, 3467, 11, 597, 1355, 294, 15576, 14237, 291, 393, 584, 2010, 6798, 50684, 50684, 420, 1230, 6915, 6798, 11240, 1230, 13, 400, 586, 309, 311, 7363, 498, 291, 362, 257, 2158, 295, 300, 2010, 300, 307, 51108, 51108, 257, 6798, 420, 257, 1230, 13, 13813, 294, 2699, 76, 300, 311, 406, 7363, 11, 291, 643, 281, 362, 257, 6162, 300, 307, 1333, 295, 411, 51428, 51428, 257, 47479, 13, 407, 291, 1116, 362, 411, 257, 11, 291, 458, 11, 452, 11, 291, 458, 11, 452, 560, 47479, 293, 291, 1116, 362, 51732, 51732], "temperature": 0.0, "avg_logprob": -0.12399628092941728, "compression_ratio": 1.7880184331797235, "no_caption_prob": 4.7108815124374814e-06}, {"id": 93, "seek": 61112, "start": 617.52, "end": 626.0, "text": " or number equals string pipe number. And now it's valid if you have a value of that type that is", "tokens": [50364, 437, 366, 2171, 1219, 1701, 559, 3004, 11671, 3467, 11, 597, 1355, 294, 15576, 14237, 291, 393, 584, 2010, 6798, 50684, 50684, 420, 1230, 6915, 6798, 11240, 1230, 13, 400, 586, 309, 311, 7363, 498, 291, 362, 257, 2158, 295, 300, 2010, 300, 307, 51108, 51108, 257, 6798, 420, 257, 1230, 13, 13813, 294, 2699, 76, 300, 311, 406, 7363, 11, 291, 643, 281, 362, 257, 6162, 300, 307, 1333, 295, 411, 51428, 51428, 257, 47479, 13, 407, 291, 1116, 362, 411, 257, 11, 291, 458, 11, 452, 11, 291, 458, 11, 452, 560, 47479, 293, 291, 1116, 362, 51732, 51732], "temperature": 0.0, "avg_logprob": -0.12399628092941728, "compression_ratio": 1.7880184331797235, "no_caption_prob": 4.7108815124374814e-06}, {"id": 94, "seek": 61112, "start": 626.0, "end": 632.4, "text": " a string or a number. Whereas in Elm that's not valid, you need to have a tag that is sort of like", "tokens": [50364, 437, 366, 2171, 1219, 1701, 559, 3004, 11671, 3467, 11, 597, 1355, 294, 15576, 14237, 291, 393, 584, 2010, 6798, 50684, 50684, 420, 1230, 6915, 6798, 11240, 1230, 13, 400, 586, 309, 311, 7363, 498, 291, 362, 257, 2158, 295, 300, 2010, 300, 307, 51108, 51108, 257, 6798, 420, 257, 1230, 13, 13813, 294, 2699, 76, 300, 311, 406, 7363, 11, 291, 643, 281, 362, 257, 6162, 300, 307, 1333, 295, 411, 51428, 51428, 257, 47479, 13, 407, 291, 1116, 362, 411, 257, 11, 291, 458, 11, 452, 11, 291, 458, 11, 452, 560, 47479, 293, 291, 1116, 362, 51732, 51732], "temperature": 0.0, "avg_logprob": -0.12399628092941728, "compression_ratio": 1.7880184331797235, "no_caption_prob": 4.7108815124374814e-06}, {"id": 95, "seek": 61112, "start": 632.4, "end": 638.48, "text": " a constructor. So you'd have like a, you know, my, you know, my int constructor and you'd have", "tokens": [50364, 437, 366, 2171, 1219, 1701, 559, 3004, 11671, 3467, 11, 597, 1355, 294, 15576, 14237, 291, 393, 584, 2010, 6798, 50684, 50684, 420, 1230, 6915, 6798, 11240, 1230, 13, 400, 586, 309, 311, 7363, 498, 291, 362, 257, 2158, 295, 300, 2010, 300, 307, 51108, 51108, 257, 6798, 420, 257, 1230, 13, 13813, 294, 2699, 76, 300, 311, 406, 7363, 11, 291, 643, 281, 362, 257, 6162, 300, 307, 1333, 295, 411, 51428, 51428, 257, 47479, 13, 407, 291, 1116, 362, 411, 257, 11, 291, 458, 11, 452, 11, 291, 458, 11, 452, 560, 47479, 293, 291, 1116, 362, 51732, 51732], "temperature": 0.0, "avg_logprob": -0.12399628092941728, "compression_ratio": 1.7880184331797235, "no_caption_prob": 4.7108815124374814e-06}, {"id": 96, "seek": 63848, "start": 638.48, "end": 643.28, "text": " a my string constructor and now you can have a custom type that can be an int or a string,", "tokens": [50364, 257, 452, 6798, 47479, 293, 586, 291, 393, 362, 257, 2375, 2010, 300, 393, 312, 364, 560, 420, 257, 6798, 11, 50604, 50604, 457, 309, 575, 281, 312, 1333, 295, 16212, 1951, 341, 2375, 2010, 13, 1042, 300, 311, 437, 257, 20828, 770, 50948, 50948, 11671, 307, 411, 294, 15576, 14237, 13, 467, 311, 445, 257, 10286, 337, 1228, 257, 6162, 13, 440, 6162, 307, 746, 51276, 51276, 300, 15576, 14237, 575, 341, 10710, 295, 597, 307, 257, 20411, 2010, 293, 20411, 3467, 366, 534, 1627, 13, 51500, 51500, 16090, 304, 3467, 366, 472, 295, 452, 2954, 15576, 14237, 4122, 13, 2014, 436, 733, 295, 411, 465, 8099, 294, 661, 51744, 51744], "temperature": 0.0, "avg_logprob": -0.09746011098225911, "compression_ratio": 1.7769230769230768, "no_caption_prob": 0.0001420190092176199}, {"id": 97, "seek": 63848, "start": 643.28, "end": 650.16, "text": " but it has to be sort of contained within this custom type. Well that's what a discriminated", "tokens": [50364, 257, 452, 6798, 47479, 293, 586, 291, 393, 362, 257, 2375, 2010, 300, 393, 312, 364, 560, 420, 257, 6798, 11, 50604, 50604, 457, 309, 575, 281, 312, 1333, 295, 16212, 1951, 341, 2375, 2010, 13, 1042, 300, 311, 437, 257, 20828, 770, 50948, 50948, 11671, 307, 411, 294, 15576, 14237, 13, 467, 311, 445, 257, 10286, 337, 1228, 257, 6162, 13, 440, 6162, 307, 746, 51276, 51276, 300, 15576, 14237, 575, 341, 10710, 295, 597, 307, 257, 20411, 2010, 293, 20411, 3467, 366, 534, 1627, 13, 51500, 51500, 16090, 304, 3467, 366, 472, 295, 452, 2954, 15576, 14237, 4122, 13, 2014, 436, 733, 295, 411, 465, 8099, 294, 661, 51744, 51744], "temperature": 0.0, "avg_logprob": -0.09746011098225911, "compression_ratio": 1.7769230769230768, "no_caption_prob": 0.0001420190092176199}, {"id": 98, "seek": 63848, "start": 650.16, "end": 656.72, "text": " union is like in TypeScript. It's just a convention for using a tag. The tag is something", "tokens": [50364, 257, 452, 6798, 47479, 293, 586, 291, 393, 362, 257, 2375, 2010, 300, 393, 312, 364, 560, 420, 257, 6798, 11, 50604, 50604, 457, 309, 575, 281, 312, 1333, 295, 16212, 1951, 341, 2375, 2010, 13, 1042, 300, 311, 437, 257, 20828, 770, 50948, 50948, 11671, 307, 411, 294, 15576, 14237, 13, 467, 311, 445, 257, 10286, 337, 1228, 257, 6162, 13, 440, 6162, 307, 746, 51276, 51276, 300, 15576, 14237, 575, 341, 10710, 295, 597, 307, 257, 20411, 2010, 293, 20411, 3467, 366, 534, 1627, 13, 51500, 51500, 16090, 304, 3467, 366, 472, 295, 452, 2954, 15576, 14237, 4122, 13, 2014, 436, 733, 295, 411, 465, 8099, 294, 661, 51744, 51744], "temperature": 0.0, "avg_logprob": -0.09746011098225911, "compression_ratio": 1.7769230769230768, "no_caption_prob": 0.0001420190092176199}, {"id": 99, "seek": 63848, "start": 656.72, "end": 661.2, "text": " that TypeScript has this notion of which is a literal type and literal types are really cool.", "tokens": [50364, 257, 452, 6798, 47479, 293, 586, 291, 393, 362, 257, 2375, 2010, 300, 393, 312, 364, 560, 420, 257, 6798, 11, 50604, 50604, 457, 309, 575, 281, 312, 1333, 295, 16212, 1951, 341, 2375, 2010, 13, 1042, 300, 311, 437, 257, 20828, 770, 50948, 50948, 11671, 307, 411, 294, 15576, 14237, 13, 467, 311, 445, 257, 10286, 337, 1228, 257, 6162, 13, 440, 6162, 307, 746, 51276, 51276, 300, 15576, 14237, 575, 341, 10710, 295, 597, 307, 257, 20411, 2010, 293, 20411, 3467, 366, 534, 1627, 13, 51500, 51500, 16090, 304, 3467, 366, 472, 295, 452, 2954, 15576, 14237, 4122, 13, 2014, 436, 733, 295, 411, 465, 8099, 294, 661, 51744, 51744], "temperature": 0.0, "avg_logprob": -0.09746011098225911, "compression_ratio": 1.7769230769230768, "no_caption_prob": 0.0001420190092176199}, {"id": 100, "seek": 63848, "start": 661.2, "end": 666.08, "text": " Literal types are one of my favorite TypeScript features. Are they kind of like enums in other", "tokens": [50364, 257, 452, 6798, 47479, 293, 586, 291, 393, 362, 257, 2375, 2010, 300, 393, 312, 364, 560, 420, 257, 6798, 11, 50604, 50604, 457, 309, 575, 281, 312, 1333, 295, 16212, 1951, 341, 2375, 2010, 13, 1042, 300, 311, 437, 257, 20828, 770, 50948, 50948, 11671, 307, 411, 294, 15576, 14237, 13, 467, 311, 445, 257, 10286, 337, 1228, 257, 6162, 13, 440, 6162, 307, 746, 51276, 51276, 300, 15576, 14237, 575, 341, 10710, 295, 597, 307, 257, 20411, 2010, 293, 20411, 3467, 366, 534, 1627, 13, 51500, 51500, 16090, 304, 3467, 366, 472, 295, 452, 2954, 15576, 14237, 4122, 13, 2014, 436, 733, 295, 411, 465, 8099, 294, 661, 51744, 51744], "temperature": 0.0, "avg_logprob": -0.09746011098225911, "compression_ratio": 1.7769230769230768, "no_caption_prob": 0.0001420190092176199}, {"id": 101, "seek": 66608, "start": 666.08, "end": 675.5200000000001, "text": " languages? Is that what it is? TypeScript actually has enums also. So you can enum means a lot of", "tokens": [50364, 8650, 30, 1119, 300, 437, 309, 307, 30, 15576, 14237, 767, 575, 465, 8099, 611, 13, 407, 291, 393, 465, 449, 1355, 257, 688, 295, 50836, 50836, 819, 721, 294, 819, 30628, 337, 8650, 13, 509, 458, 11, 291, 393, 362, 257, 10745, 465, 449, 11, 51088, 51088, 597, 307, 411, 257, 1729, 551, 13, 509, 393, 362, 257, 383, 465, 449, 11, 597, 307, 445, 257, 1230, 13, 467, 311, 445, 257, 1230, 51420, 51420, 833, 264, 13376, 293, 291, 500, 380, 16500, 437, 264, 1230, 307, 11, 457, 286, 2041, 291, 393, 11, 420, 291, 393, 16500, 51676, 51676], "temperature": 0.0, "avg_logprob": -0.15928464722864835, "compression_ratio": 1.7142857142857142, "no_caption_prob": 0.00022691987396683544}, {"id": 102, "seek": 66608, "start": 675.5200000000001, "end": 680.5600000000001, "text": " different things in different contexts for languages. You know, you can have a Java enum,", "tokens": [50364, 8650, 30, 1119, 300, 437, 309, 307, 30, 15576, 14237, 767, 575, 465, 8099, 611, 13, 407, 291, 393, 465, 449, 1355, 257, 688, 295, 50836, 50836, 819, 721, 294, 819, 30628, 337, 8650, 13, 509, 458, 11, 291, 393, 362, 257, 10745, 465, 449, 11, 51088, 51088, 597, 307, 411, 257, 1729, 551, 13, 509, 393, 362, 257, 383, 465, 449, 11, 597, 307, 445, 257, 1230, 13, 467, 311, 445, 257, 1230, 51420, 51420, 833, 264, 13376, 293, 291, 500, 380, 16500, 437, 264, 1230, 307, 11, 457, 286, 2041, 291, 393, 11, 420, 291, 393, 16500, 51676, 51676], "temperature": 0.0, "avg_logprob": -0.15928464722864835, "compression_ratio": 1.7142857142857142, "no_caption_prob": 0.00022691987396683544}, {"id": 103, "seek": 66608, "start": 680.5600000000001, "end": 687.2, "text": " which is like a particular thing. You can have a C enum, which is just a number. It's just a number", "tokens": [50364, 8650, 30, 1119, 300, 437, 309, 307, 30, 15576, 14237, 767, 575, 465, 8099, 611, 13, 407, 291, 393, 465, 449, 1355, 257, 688, 295, 50836, 50836, 819, 721, 294, 819, 30628, 337, 8650, 13, 509, 458, 11, 291, 393, 362, 257, 10745, 465, 449, 11, 51088, 51088, 597, 307, 411, 257, 1729, 551, 13, 509, 393, 362, 257, 383, 465, 449, 11, 597, 307, 445, 257, 1230, 13, 467, 311, 445, 257, 1230, 51420, 51420, 833, 264, 13376, 293, 291, 500, 380, 16500, 437, 264, 1230, 307, 11, 457, 286, 2041, 291, 393, 11, 420, 291, 393, 16500, 51676, 51676], "temperature": 0.0, "avg_logprob": -0.15928464722864835, "compression_ratio": 1.7142857142857142, "no_caption_prob": 0.00022691987396683544}, {"id": 104, "seek": 66608, "start": 687.2, "end": 692.32, "text": " under the hood and you don't specify what the number is, but I guess you can, or you can specify", "tokens": [50364, 8650, 30, 1119, 300, 437, 309, 307, 30, 15576, 14237, 767, 575, 465, 8099, 611, 13, 407, 291, 393, 465, 449, 1355, 257, 688, 295, 50836, 50836, 819, 721, 294, 819, 30628, 337, 8650, 13, 509, 458, 11, 291, 393, 362, 257, 10745, 465, 449, 11, 51088, 51088, 597, 307, 411, 257, 1729, 551, 13, 509, 393, 362, 257, 383, 465, 449, 11, 597, 307, 445, 257, 1230, 13, 467, 311, 445, 257, 1230, 51420, 51420, 833, 264, 13376, 293, 291, 500, 380, 16500, 437, 264, 1230, 307, 11, 457, 286, 2041, 291, 393, 11, 420, 291, 393, 16500, 51676, 51676], "temperature": 0.0, "avg_logprob": -0.15928464722864835, "compression_ratio": 1.7142857142857142, "no_caption_prob": 0.00022691987396683544}, {"id": 105, "seek": 69232, "start": 692.32, "end": 700.32, "text": " the starting value and you can like create one using the enum value's name or a number directly,", "tokens": [50364, 264, 2891, 2158, 293, 291, 393, 411, 1884, 472, 1228, 264, 465, 449, 2158, 311, 1315, 420, 257, 1230, 3838, 11, 50764, 50764, 597, 307, 445, 733, 295, 3657, 13, 407, 309, 311, 406, 2293, 300, 13, 467, 307, 498, 291, 848, 11, 291, 458, 11, 2010, 3975, 51196, 51196, 6915, 6798, 28160, 420, 6798, 398, 2032, 266, 13, 1133, 291, 584, 6798, 398, 2032, 266, 11, 291, 584, 398, 2032, 266, 1296, 19963, 13, 51604, 51604], "temperature": 0.0, "avg_logprob": -0.1708901200113417, "compression_ratio": 1.5265957446808511, "no_caption_prob": 6.70891095069237e-05}, {"id": 106, "seek": 69232, "start": 700.32, "end": 708.96, "text": " which is just kind of weird. So it's not exactly that. It is if you said, you know, type host", "tokens": [50364, 264, 2891, 2158, 293, 291, 393, 411, 1884, 472, 1228, 264, 465, 449, 2158, 311, 1315, 420, 257, 1230, 3838, 11, 50764, 50764, 597, 307, 445, 733, 295, 3657, 13, 407, 309, 311, 406, 2293, 300, 13, 467, 307, 498, 291, 848, 11, 291, 458, 11, 2010, 3975, 51196, 51196, 6915, 6798, 28160, 420, 6798, 398, 2032, 266, 13, 1133, 291, 584, 6798, 398, 2032, 266, 11, 291, 584, 398, 2032, 266, 1296, 19963, 13, 51604, 51604], "temperature": 0.0, "avg_logprob": -0.1708901200113417, "compression_ratio": 1.5265957446808511, "no_caption_prob": 6.70891095069237e-05}, {"id": 107, "seek": 69232, "start": 708.96, "end": 717.12, "text": " equals string Dylan or string Yeroon. When you say string Yeroon, you say Yeroon between quotes.", "tokens": [50364, 264, 2891, 2158, 293, 291, 393, 411, 1884, 472, 1228, 264, 465, 449, 2158, 311, 1315, 420, 257, 1230, 3838, 11, 50764, 50764, 597, 307, 445, 733, 295, 3657, 13, 407, 309, 311, 406, 2293, 300, 13, 467, 307, 498, 291, 848, 11, 291, 458, 11, 2010, 3975, 51196, 51196, 6915, 6798, 28160, 420, 6798, 398, 2032, 266, 13, 1133, 291, 584, 6798, 398, 2032, 266, 11, 291, 584, 398, 2032, 266, 1296, 19963, 13, 51604, 51604], "temperature": 0.0, "avg_logprob": -0.1708901200113417, "compression_ratio": 1.5265957446808511, "no_caption_prob": 6.70891095069237e-05}, {"id": 108, "seek": 71712, "start": 717.12, "end": 724.96, "text": " Exactly. Yeah. Dylan between quotes, pipe, Yeroon between quotes. You can say that in TypeScript", "tokens": [50364, 7587, 13, 865, 13, 28160, 1296, 19963, 11, 11240, 11, 398, 2032, 266, 1296, 19963, 13, 509, 393, 584, 300, 294, 15576, 14237, 50756, 50756, 293, 300, 307, 3736, 1566, 613, 366, 264, 732, 7363, 4190, 337, 341, 2010, 13, 467, 311, 613, 13985, 51072, 51072, 293, 264, 2010, 1520, 260, 486, 767, 352, 807, 428, 3089, 293, 1520, 300, 309, 311, 472, 295, 729, 6798, 51388, 51388, 2733, 1124, 13, 13813, 365, 2699, 76, 11, 456, 311, 572, 1270, 3410, 11, 558, 30, 509, 727, 362, 257, 2375, 2010, 11, 51640, 51640], "temperature": 0.0, "avg_logprob": -0.08234598260176809, "compression_ratio": 1.613733905579399, "no_caption_prob": 4.83232106489595e-05}, {"id": 109, "seek": 71712, "start": 724.96, "end": 731.28, "text": " and that is literally saying these are the two valid values for this type. It's these strings", "tokens": [50364, 7587, 13, 865, 13, 28160, 1296, 19963, 11, 11240, 11, 398, 2032, 266, 1296, 19963, 13, 509, 393, 584, 300, 294, 15576, 14237, 50756, 50756, 293, 300, 307, 3736, 1566, 613, 366, 264, 732, 7363, 4190, 337, 341, 2010, 13, 467, 311, 613, 13985, 51072, 51072, 293, 264, 2010, 1520, 260, 486, 767, 352, 807, 428, 3089, 293, 1520, 300, 309, 311, 472, 295, 729, 6798, 51388, 51388, 2733, 1124, 13, 13813, 365, 2699, 76, 11, 456, 311, 572, 1270, 3410, 11, 558, 30, 509, 727, 362, 257, 2375, 2010, 11, 51640, 51640], "temperature": 0.0, "avg_logprob": -0.08234598260176809, "compression_ratio": 1.613733905579399, "no_caption_prob": 4.83232106489595e-05}, {"id": 110, "seek": 71712, "start": 731.28, "end": 737.6, "text": " and the type checker will actually go through your code and check that it's one of those string", "tokens": [50364, 7587, 13, 865, 13, 28160, 1296, 19963, 11, 11240, 11, 398, 2032, 266, 1296, 19963, 13, 509, 393, 584, 300, 294, 15576, 14237, 50756, 50756, 293, 300, 307, 3736, 1566, 613, 366, 264, 732, 7363, 4190, 337, 341, 2010, 13, 467, 311, 613, 13985, 51072, 51072, 293, 264, 2010, 1520, 260, 486, 767, 352, 807, 428, 3089, 293, 1520, 300, 309, 311, 472, 295, 729, 6798, 51388, 51388, 2733, 1124, 13, 13813, 365, 2699, 76, 11, 456, 311, 572, 1270, 3410, 11, 558, 30, 509, 727, 362, 257, 2375, 2010, 11, 51640, 51640], "temperature": 0.0, "avg_logprob": -0.08234598260176809, "compression_ratio": 1.613733905579399, "no_caption_prob": 4.83232106489595e-05}, {"id": 111, "seek": 71712, "start": 737.6, "end": 742.64, "text": " literals. Whereas with Elm, there's no such concept, right? You could have a custom type,", "tokens": [50364, 7587, 13, 865, 13, 28160, 1296, 19963, 11, 11240, 11, 398, 2032, 266, 1296, 19963, 13, 509, 393, 584, 300, 294, 15576, 14237, 50756, 50756, 293, 300, 307, 3736, 1566, 613, 366, 264, 732, 7363, 4190, 337, 341, 2010, 13, 467, 311, 613, 13985, 51072, 51072, 293, 264, 2010, 1520, 260, 486, 767, 352, 807, 428, 3089, 293, 1520, 300, 309, 311, 472, 295, 729, 6798, 51388, 51388, 2733, 1124, 13, 13813, 365, 2699, 76, 11, 456, 311, 572, 1270, 3410, 11, 558, 30, 509, 727, 362, 257, 2375, 2010, 11, 51640, 51640], "temperature": 0.0, "avg_logprob": -0.08234598260176809, "compression_ratio": 1.613733905579399, "no_caption_prob": 4.83232106489595e-05}, {"id": 112, "seek": 74264, "start": 742.64, "end": 750.24, "text": " you know, type host equals Dylan pipe Yeroon. And you could have a from string, which is going to", "tokens": [50364, 291, 458, 11, 2010, 3975, 6915, 28160, 11240, 398, 2032, 266, 13, 400, 291, 727, 362, 257, 490, 6798, 11, 597, 307, 516, 281, 50744, 50744, 7620, 472, 295, 729, 4190, 490, 257, 6798, 666, 257, 2375, 2010, 13, 583, 456, 311, 572, 636, 281, 25339, 473, 51184, 51184, 257, 2010, 293, 1817, 7146, 264, 20411, 4190, 300, 746, 393, 312, 13, 407, 437, 309, 307, 11, 307, 309, 311, 1566, 51432, 51432, 264, 2010, 307, 767, 257, 6798, 13, 1743, 291, 1320, 294, 257, 6798, 281, 1884, 257, 2158, 295, 341, 2010, 13, 583, 498, 291, 51744, 51744], "temperature": 0.0, "avg_logprob": -0.08254156018247699, "compression_ratio": 1.6508620689655173, "no_caption_prob": 9.460669389227405e-05}, {"id": 113, "seek": 74264, "start": 750.24, "end": 759.04, "text": " convert one of those values from a string into a custom type. But there's no way to annotate", "tokens": [50364, 291, 458, 11, 2010, 3975, 6915, 28160, 11240, 398, 2032, 266, 13, 400, 291, 727, 362, 257, 490, 6798, 11, 597, 307, 516, 281, 50744, 50744, 7620, 472, 295, 729, 4190, 490, 257, 6798, 666, 257, 2375, 2010, 13, 583, 456, 311, 572, 636, 281, 25339, 473, 51184, 51184, 257, 2010, 293, 1817, 7146, 264, 20411, 4190, 300, 746, 393, 312, 13, 407, 437, 309, 307, 11, 307, 309, 311, 1566, 51432, 51432, 264, 2010, 307, 767, 257, 6798, 13, 1743, 291, 1320, 294, 257, 6798, 281, 1884, 257, 2158, 295, 341, 2010, 13, 583, 498, 291, 51744, 51744], "temperature": 0.0, "avg_logprob": -0.08254156018247699, "compression_ratio": 1.6508620689655173, "no_caption_prob": 9.460669389227405e-05}, {"id": 114, "seek": 74264, "start": 759.04, "end": 764.0, "text": " a type and constrain the literal values that something can be. So what it is, is it's saying", "tokens": [50364, 291, 458, 11, 2010, 3975, 6915, 28160, 11240, 398, 2032, 266, 13, 400, 291, 727, 362, 257, 490, 6798, 11, 597, 307, 516, 281, 50744, 50744, 7620, 472, 295, 729, 4190, 490, 257, 6798, 666, 257, 2375, 2010, 13, 583, 456, 311, 572, 636, 281, 25339, 473, 51184, 51184, 257, 2010, 293, 1817, 7146, 264, 20411, 4190, 300, 746, 393, 312, 13, 407, 437, 309, 307, 11, 307, 309, 311, 1566, 51432, 51432, 264, 2010, 307, 767, 257, 6798, 13, 1743, 291, 1320, 294, 257, 6798, 281, 1884, 257, 2158, 295, 341, 2010, 13, 583, 498, 291, 51744, 51744], "temperature": 0.0, "avg_logprob": -0.08254156018247699, "compression_ratio": 1.6508620689655173, "no_caption_prob": 9.460669389227405e-05}, {"id": 115, "seek": 74264, "start": 764.0, "end": 770.24, "text": " the type is actually a string. Like you pass in a string to create a value of this type. But if you", "tokens": [50364, 291, 458, 11, 2010, 3975, 6915, 28160, 11240, 398, 2032, 266, 13, 400, 291, 727, 362, 257, 490, 6798, 11, 597, 307, 516, 281, 50744, 50744, 7620, 472, 295, 729, 4190, 490, 257, 6798, 666, 257, 2375, 2010, 13, 583, 456, 311, 572, 636, 281, 25339, 473, 51184, 51184, 257, 2010, 293, 1817, 7146, 264, 20411, 4190, 300, 746, 393, 312, 13, 407, 437, 309, 307, 11, 307, 309, 311, 1566, 51432, 51432, 264, 2010, 307, 767, 257, 6798, 13, 1743, 291, 1320, 294, 257, 6798, 281, 1884, 257, 2158, 295, 341, 2010, 13, 583, 498, 291, 51744, 51744], "temperature": 0.0, "avg_logprob": -0.08254156018247699, "compression_ratio": 1.6508620689655173, "no_caption_prob": 9.460669389227405e-05}, {"id": 116, "seek": 77024, "start": 770.24, "end": 776.48, "text": " pass in a string, you know, that says George, that's not a valid host. Yeah. You have to prove", "tokens": [50364, 1320, 294, 257, 6798, 11, 291, 458, 11, 300, 1619, 7136, 11, 300, 311, 406, 257, 7363, 3975, 13, 865, 13, 509, 362, 281, 7081, 50676, 50676, 281, 264, 15576, 14237, 31958, 300, 341, 307, 2139, 28160, 420, 398, 2032, 266, 13, 7587, 558, 13, 7587, 558, 13, 50968, 50968, 407, 291, 727, 1884, 257, 2445, 300, 311, 411, 11, 291, 458, 11, 6798, 4846, 281, 3975, 300, 311, 516, 281, 747, 51248, 51248, 512, 4195, 4846, 293, 1520, 498, 309, 311, 472, 295, 729, 7363, 3956, 293, 550, 1884, 472, 295, 729, 51436, 51436, 38901, 20411, 3467, 13, 407, 20411, 3467, 366, 257, 588, 1627, 4111, 295, 264, 15576, 14237, 2010, 1520, 260, 13, 51772, 51772], "temperature": 0.0, "avg_logprob": -0.05350192655034426, "compression_ratio": 1.823076923076923, "no_caption_prob": 4.264609015081078e-05}, {"id": 117, "seek": 77024, "start": 776.48, "end": 782.32, "text": " to the TypeScript compiler that this is either Dylan or Yeroon. Exactly right. Exactly right.", "tokens": [50364, 1320, 294, 257, 6798, 11, 291, 458, 11, 300, 1619, 7136, 11, 300, 311, 406, 257, 7363, 3975, 13, 865, 13, 509, 362, 281, 7081, 50676, 50676, 281, 264, 15576, 14237, 31958, 300, 341, 307, 2139, 28160, 420, 398, 2032, 266, 13, 7587, 558, 13, 7587, 558, 13, 50968, 50968, 407, 291, 727, 1884, 257, 2445, 300, 311, 411, 11, 291, 458, 11, 6798, 4846, 281, 3975, 300, 311, 516, 281, 747, 51248, 51248, 512, 4195, 4846, 293, 1520, 498, 309, 311, 472, 295, 729, 7363, 3956, 293, 550, 1884, 472, 295, 729, 51436, 51436, 38901, 20411, 3467, 13, 407, 20411, 3467, 366, 257, 588, 1627, 4111, 295, 264, 15576, 14237, 2010, 1520, 260, 13, 51772, 51772], "temperature": 0.0, "avg_logprob": -0.05350192655034426, "compression_ratio": 1.823076923076923, "no_caption_prob": 4.264609015081078e-05}, {"id": 118, "seek": 77024, "start": 782.32, "end": 787.92, "text": " So you could create a function that's like, you know, string input to host that's going to take", "tokens": [50364, 1320, 294, 257, 6798, 11, 291, 458, 11, 300, 1619, 7136, 11, 300, 311, 406, 257, 7363, 3975, 13, 865, 13, 509, 362, 281, 7081, 50676, 50676, 281, 264, 15576, 14237, 31958, 300, 341, 307, 2139, 28160, 420, 398, 2032, 266, 13, 7587, 558, 13, 7587, 558, 13, 50968, 50968, 407, 291, 727, 1884, 257, 2445, 300, 311, 411, 11, 291, 458, 11, 6798, 4846, 281, 3975, 300, 311, 516, 281, 747, 51248, 51248, 512, 4195, 4846, 293, 1520, 498, 309, 311, 472, 295, 729, 7363, 3956, 293, 550, 1884, 472, 295, 729, 51436, 51436, 38901, 20411, 3467, 13, 407, 20411, 3467, 366, 257, 588, 1627, 4111, 295, 264, 15576, 14237, 2010, 1520, 260, 13, 51772, 51772], "temperature": 0.0, "avg_logprob": -0.05350192655034426, "compression_ratio": 1.823076923076923, "no_caption_prob": 4.264609015081078e-05}, {"id": 119, "seek": 77024, "start": 787.92, "end": 791.6800000000001, "text": " some user input and check if it's one of those valid options and then create one of those", "tokens": [50364, 1320, 294, 257, 6798, 11, 291, 458, 11, 300, 1619, 7136, 11, 300, 311, 406, 257, 7363, 3975, 13, 865, 13, 509, 362, 281, 7081, 50676, 50676, 281, 264, 15576, 14237, 31958, 300, 341, 307, 2139, 28160, 420, 398, 2032, 266, 13, 7587, 558, 13, 7587, 558, 13, 50968, 50968, 407, 291, 727, 1884, 257, 2445, 300, 311, 411, 11, 291, 458, 11, 6798, 4846, 281, 3975, 300, 311, 516, 281, 747, 51248, 51248, 512, 4195, 4846, 293, 1520, 498, 309, 311, 472, 295, 729, 7363, 3956, 293, 550, 1884, 472, 295, 729, 51436, 51436, 38901, 20411, 3467, 13, 407, 20411, 3467, 366, 257, 588, 1627, 4111, 295, 264, 15576, 14237, 2010, 1520, 260, 13, 51772, 51772], "temperature": 0.0, "avg_logprob": -0.05350192655034426, "compression_ratio": 1.823076923076923, "no_caption_prob": 4.264609015081078e-05}, {"id": 120, "seek": 77024, "start": 791.6800000000001, "end": 798.4, "text": " constrained literal types. So literal types are a very cool feature of the TypeScript type checker.", "tokens": [50364, 1320, 294, 257, 6798, 11, 291, 458, 11, 300, 1619, 7136, 11, 300, 311, 406, 257, 7363, 3975, 13, 865, 13, 509, 362, 281, 7081, 50676, 50676, 281, 264, 15576, 14237, 31958, 300, 341, 307, 2139, 28160, 420, 398, 2032, 266, 13, 7587, 558, 13, 7587, 558, 13, 50968, 50968, 407, 291, 727, 1884, 257, 2445, 300, 311, 411, 11, 291, 458, 11, 6798, 4846, 281, 3975, 300, 311, 516, 281, 747, 51248, 51248, 512, 4195, 4846, 293, 1520, 498, 309, 311, 472, 295, 729, 7363, 3956, 293, 550, 1884, 472, 295, 729, 51436, 51436, 38901, 20411, 3467, 13, 407, 20411, 3467, 366, 257, 588, 1627, 4111, 295, 264, 15576, 14237, 2010, 1520, 260, 13, 51772, 51772], "temperature": 0.0, "avg_logprob": -0.05350192655034426, "compression_ratio": 1.823076923076923, "no_caption_prob": 4.264609015081078e-05}, {"id": 121, "seek": 79840, "start": 798.4, "end": 803.36, "text": " I mean, it makes sense, right? Because if you think about the history of TypeScript and its goals,", "tokens": [50364, 286, 914, 11, 309, 1669, 2020, 11, 558, 30, 1436, 498, 291, 519, 466, 264, 2503, 295, 15576, 14237, 293, 1080, 5493, 11, 50612, 50612, 291, 458, 11, 309, 390, 2942, 281, 312, 257, 636, 281, 13145, 909, 3467, 281, 15778, 3089, 17949, 293, 11985, 309, 50932, 50932, 26200, 379, 13, 400, 370, 11, 291, 458, 11, 437, 360, 15778, 3089, 17949, 360, 949, 15576, 14237, 390, 926, 30, 51236, 51236, 1042, 11, 291, 434, 516, 281, 362, 257, 688, 295, 3956, 300, 366, 445, 13985, 11, 558, 30, 509, 458, 11, 291, 4195, 3090, 51572, 51572], "temperature": 0.0, "avg_logprob": -0.05597207040497751, "compression_ratio": 1.6680851063829787, "no_caption_prob": 0.000273642799584195}, {"id": 122, "seek": 79840, "start": 803.36, "end": 809.76, "text": " you know, it was created to be a way to gradually add types to JavaScript code bases and enhance it", "tokens": [50364, 286, 914, 11, 309, 1669, 2020, 11, 558, 30, 1436, 498, 291, 519, 466, 264, 2503, 295, 15576, 14237, 293, 1080, 5493, 11, 50612, 50612, 291, 458, 11, 309, 390, 2942, 281, 312, 257, 636, 281, 13145, 909, 3467, 281, 15778, 3089, 17949, 293, 11985, 309, 50932, 50932, 26200, 379, 13, 400, 370, 11, 291, 458, 11, 437, 360, 15778, 3089, 17949, 360, 949, 15576, 14237, 390, 926, 30, 51236, 51236, 1042, 11, 291, 434, 516, 281, 362, 257, 688, 295, 3956, 300, 366, 445, 13985, 11, 558, 30, 509, 458, 11, 291, 4195, 3090, 51572, 51572], "temperature": 0.0, "avg_logprob": -0.05597207040497751, "compression_ratio": 1.6680851063829787, "no_caption_prob": 0.000273642799584195}, {"id": 123, "seek": 79840, "start": 809.76, "end": 815.84, "text": " incrementally. And so, you know, what do JavaScript code bases do before TypeScript was around?", "tokens": [50364, 286, 914, 11, 309, 1669, 2020, 11, 558, 30, 1436, 498, 291, 519, 466, 264, 2503, 295, 15576, 14237, 293, 1080, 5493, 11, 50612, 50612, 291, 458, 11, 309, 390, 2942, 281, 312, 257, 636, 281, 13145, 909, 3467, 281, 15778, 3089, 17949, 293, 11985, 309, 50932, 50932, 26200, 379, 13, 400, 370, 11, 291, 458, 11, 437, 360, 15778, 3089, 17949, 360, 949, 15576, 14237, 390, 926, 30, 51236, 51236, 1042, 11, 291, 434, 516, 281, 362, 257, 688, 295, 3956, 300, 366, 445, 13985, 11, 558, 30, 509, 458, 11, 291, 4195, 3090, 51572, 51572], "temperature": 0.0, "avg_logprob": -0.05597207040497751, "compression_ratio": 1.6680851063829787, "no_caption_prob": 0.000273642799584195}, {"id": 124, "seek": 79840, "start": 815.84, "end": 822.56, "text": " Well, you're going to have a lot of options that are just strings, right? You know, you user role", "tokens": [50364, 286, 914, 11, 309, 1669, 2020, 11, 558, 30, 1436, 498, 291, 519, 466, 264, 2503, 295, 15576, 14237, 293, 1080, 5493, 11, 50612, 50612, 291, 458, 11, 309, 390, 2942, 281, 312, 257, 636, 281, 13145, 909, 3467, 281, 15778, 3089, 17949, 293, 11985, 309, 50932, 50932, 26200, 379, 13, 400, 370, 11, 291, 458, 11, 437, 360, 15778, 3089, 17949, 360, 949, 15576, 14237, 390, 926, 30, 51236, 51236, 1042, 11, 291, 434, 516, 281, 362, 257, 688, 295, 3956, 300, 366, 445, 13985, 11, 558, 30, 509, 458, 11, 291, 4195, 3090, 51572, 51572], "temperature": 0.0, "avg_logprob": -0.05597207040497751, "compression_ratio": 1.6680851063829787, "no_caption_prob": 0.000273642799584195}, {"id": 125, "seek": 82256, "start": 822.56, "end": 829.68, "text": " equals admin, user role equals guest. And now, you know, you have those strings flowing throughout", "tokens": [50364, 6915, 24236, 11, 4195, 3090, 6915, 8341, 13, 400, 586, 11, 291, 458, 11, 291, 362, 729, 13985, 13974, 3710, 50720, 50720, 428, 3089, 293, 291, 584, 11, 498, 4195, 3090, 6915, 6915, 8341, 11, 550, 360, 341, 13, 865, 13, 286, 2041, 586, 291, 393, 51064, 51064, 733, 295, 764, 16944, 337, 300, 11, 457, 13, 1033, 13, 407, 472, 551, 466, 2699, 76, 37645, 12729, 300, 1669, 309, 589, 51416, 51416, 534, 9594, 307, 300, 15576, 14237, 2010, 1185, 307, 4664, 40189, 562, 309, 1487, 281, 16141, 51776, 51776], "temperature": 0.0, "avg_logprob": -0.10968016552668745, "compression_ratio": 1.6099585062240664, "no_caption_prob": 3.944154377677478e-05}, {"id": 126, "seek": 82256, "start": 829.68, "end": 836.56, "text": " your code and you say, if user role equals equals guest, then do this. Yeah. I guess now you can", "tokens": [50364, 6915, 24236, 11, 4195, 3090, 6915, 8341, 13, 400, 586, 11, 291, 458, 11, 291, 362, 729, 13985, 13974, 3710, 50720, 50720, 428, 3089, 293, 291, 584, 11, 498, 4195, 3090, 6915, 6915, 8341, 11, 550, 360, 341, 13, 865, 13, 286, 2041, 586, 291, 393, 51064, 51064, 733, 295, 764, 16944, 337, 300, 11, 457, 13, 1033, 13, 407, 472, 551, 466, 2699, 76, 37645, 12729, 300, 1669, 309, 589, 51416, 51416, 534, 9594, 307, 300, 15576, 14237, 2010, 1185, 307, 4664, 40189, 562, 309, 1487, 281, 16141, 51776, 51776], "temperature": 0.0, "avg_logprob": -0.10968016552668745, "compression_ratio": 1.6099585062240664, "no_caption_prob": 3.944154377677478e-05}, {"id": 127, "seek": 82256, "start": 836.56, "end": 843.5999999999999, "text": " kind of use symbols for that, but. Okay. So one thing about Elm TS interrupt that makes it work", "tokens": [50364, 6915, 24236, 11, 4195, 3090, 6915, 8341, 13, 400, 586, 11, 291, 458, 11, 291, 362, 729, 13985, 13974, 3710, 50720, 50720, 428, 3089, 293, 291, 584, 11, 498, 4195, 3090, 6915, 6915, 8341, 11, 550, 360, 341, 13, 865, 13, 286, 2041, 586, 291, 393, 51064, 51064, 733, 295, 764, 16944, 337, 300, 11, 457, 13, 1033, 13, 407, 472, 551, 466, 2699, 76, 37645, 12729, 300, 1669, 309, 589, 51416, 51416, 534, 9594, 307, 300, 15576, 14237, 2010, 1185, 307, 4664, 40189, 562, 309, 1487, 281, 16141, 51776, 51776], "temperature": 0.0, "avg_logprob": -0.10968016552668745, "compression_ratio": 1.6099585062240664, "no_caption_prob": 3.944154377677478e-05}, {"id": 128, "seek": 82256, "start": 843.5999999999999, "end": 850.8, "text": " really nicely is that TypeScript type system is extremely expressive when it comes to describing", "tokens": [50364, 6915, 24236, 11, 4195, 3090, 6915, 8341, 13, 400, 586, 11, 291, 458, 11, 291, 362, 729, 13985, 13974, 3710, 50720, 50720, 428, 3089, 293, 291, 584, 11, 498, 4195, 3090, 6915, 6915, 8341, 11, 550, 360, 341, 13, 865, 13, 286, 2041, 586, 291, 393, 51064, 51064, 733, 295, 764, 16944, 337, 300, 11, 457, 13, 1033, 13, 407, 472, 551, 466, 2699, 76, 37645, 12729, 300, 1669, 309, 589, 51416, 51416, 534, 9594, 307, 300, 15576, 14237, 2010, 1185, 307, 4664, 40189, 562, 309, 1487, 281, 16141, 51776, 51776], "temperature": 0.0, "avg_logprob": -0.10968016552668745, "compression_ratio": 1.6099585062240664, "no_caption_prob": 3.944154377677478e-05}, {"id": 129, "seek": 85080, "start": 850.8, "end": 857.1999999999999, "text": " JSON values and what goes through ports, JSON values, right? So it works beautifully. Also,", "tokens": [50364, 31828, 4190, 293, 437, 1709, 807, 18160, 11, 31828, 4190, 11, 558, 30, 407, 309, 1985, 16525, 13, 2743, 11, 50684, 50776, 31828, 4190, 393, 312, 17436, 1602, 13, 814, 393, 312, 17436, 1602, 281, 2654, 6725, 13, 51000, 51000, 31828, 4190, 393, 312, 17436, 1602, 293, 730, 260, 831, 1602, 337, 33283, 12475, 11, 597, 307, 767, 1071, 1859, 300, 51396, 51396, 286, 478, 12736, 365, 264, 1333, 295, 14217, 46593, 337, 2699, 76, 37645, 12729, 13, 583, 264, 3875, 3410, 307, 51748, 51748], "temperature": 0.0, "avg_logprob": -0.08745252675023572, "compression_ratio": 1.6380090497737556, "no_caption_prob": 6.302379188127816e-05}, {"id": 130, "seek": 85080, "start": 859.04, "end": 863.52, "text": " JSON values can be serialized. They can be serialized to local storage.", "tokens": [50364, 31828, 4190, 293, 437, 1709, 807, 18160, 11, 31828, 4190, 11, 558, 30, 407, 309, 1985, 16525, 13, 2743, 11, 50684, 50776, 31828, 4190, 393, 312, 17436, 1602, 13, 814, 393, 312, 17436, 1602, 281, 2654, 6725, 13, 51000, 51000, 31828, 4190, 393, 312, 17436, 1602, 293, 730, 260, 831, 1602, 337, 33283, 12475, 11, 597, 307, 767, 1071, 1859, 300, 51396, 51396, 286, 478, 12736, 365, 264, 1333, 295, 14217, 46593, 337, 2699, 76, 37645, 12729, 13, 583, 264, 3875, 3410, 307, 51748, 51748], "temperature": 0.0, "avg_logprob": -0.08745252675023572, "compression_ratio": 1.6380090497737556, "no_caption_prob": 6.302379188127816e-05}, {"id": 131, "seek": 85080, "start": 863.52, "end": 871.4399999999999, "text": " JSON values can be serialized and deserialized for HTTP requests, which is actually another area that", "tokens": [50364, 31828, 4190, 293, 437, 1709, 807, 18160, 11, 31828, 4190, 11, 558, 30, 407, 309, 1985, 16525, 13, 2743, 11, 50684, 50776, 31828, 4190, 393, 312, 17436, 1602, 13, 814, 393, 312, 17436, 1602, 281, 2654, 6725, 13, 51000, 51000, 31828, 4190, 393, 312, 17436, 1602, 293, 730, 260, 831, 1602, 337, 33283, 12475, 11, 597, 307, 767, 1071, 1859, 300, 51396, 51396, 286, 478, 12736, 365, 264, 1333, 295, 14217, 46593, 337, 2699, 76, 37645, 12729, 13, 583, 264, 3875, 3410, 307, 51748, 51748], "temperature": 0.0, "avg_logprob": -0.08745252675023572, "compression_ratio": 1.6380090497737556, "no_caption_prob": 6.302379188127816e-05}, {"id": 132, "seek": 85080, "start": 871.4399999999999, "end": 878.4799999999999, "text": " I'm exploring with the sort of underlying tooling for Elm TS interrupt. But the basic concept is", "tokens": [50364, 31828, 4190, 293, 437, 1709, 807, 18160, 11, 31828, 4190, 11, 558, 30, 407, 309, 1985, 16525, 13, 2743, 11, 50684, 50776, 31828, 4190, 393, 312, 17436, 1602, 13, 814, 393, 312, 17436, 1602, 281, 2654, 6725, 13, 51000, 51000, 31828, 4190, 393, 312, 17436, 1602, 293, 730, 260, 831, 1602, 337, 33283, 12475, 11, 597, 307, 767, 1071, 1859, 300, 51396, 51396, 286, 478, 12736, 365, 264, 1333, 295, 14217, 46593, 337, 2699, 76, 37645, 12729, 13, 583, 264, 3875, 3410, 307, 51748, 51748], "temperature": 0.0, "avg_logprob": -0.08745252675023572, "compression_ratio": 1.6380090497737556, "no_caption_prob": 6.302379188127816e-05}, {"id": 133, "seek": 87848, "start": 878.48, "end": 887.04, "text": " that TypeScript's type system is very expressive at describing JSON values. So like for example,", "tokens": [50364, 300, 15576, 14237, 311, 2010, 1185, 307, 588, 40189, 412, 16141, 31828, 4190, 13, 407, 411, 337, 1365, 11, 50792, 50824, 257, 15576, 14237, 2604, 781, 307, 2531, 281, 257, 20411, 2010, 13, 407, 257, 20411, 2010, 393, 312, 604, 2010, 294, 15576, 14237, 13, 51292, 51292, 1743, 291, 393, 754, 584, 11, 291, 458, 11, 291, 393, 362, 257, 20411, 31828, 2657, 365, 7909, 293, 9859, 51640, 51640], "temperature": 0.0, "avg_logprob": -0.08680394669653664, "compression_ratio": 1.5944444444444446, "no_caption_prob": 3.822800499619916e-05}, {"id": 134, "seek": 87848, "start": 887.6800000000001, "end": 897.04, "text": " a TypeScript tuple is similar to a literal type. So a literal type can be any type in TypeScript.", "tokens": [50364, 300, 15576, 14237, 311, 2010, 1185, 307, 588, 40189, 412, 16141, 31828, 4190, 13, 407, 411, 337, 1365, 11, 50792, 50824, 257, 15576, 14237, 2604, 781, 307, 2531, 281, 257, 20411, 2010, 13, 407, 257, 20411, 2010, 393, 312, 604, 2010, 294, 15576, 14237, 13, 51292, 51292, 1743, 291, 393, 754, 584, 11, 291, 458, 11, 291, 393, 362, 257, 20411, 31828, 2657, 365, 7909, 293, 9859, 51640, 51640], "temperature": 0.0, "avg_logprob": -0.08680394669653664, "compression_ratio": 1.5944444444444446, "no_caption_prob": 3.822800499619916e-05}, {"id": 135, "seek": 87848, "start": 897.04, "end": 904.0, "text": " Like you can even say, you know, you can have a literal JSON object with fields and concrete", "tokens": [50364, 300, 15576, 14237, 311, 2010, 1185, 307, 588, 40189, 412, 16141, 31828, 4190, 13, 407, 411, 337, 1365, 11, 50792, 50824, 257, 15576, 14237, 2604, 781, 307, 2531, 281, 257, 20411, 2010, 13, 407, 257, 20411, 2010, 393, 312, 604, 2010, 294, 15576, 14237, 13, 51292, 51292, 1743, 291, 393, 754, 584, 11, 291, 458, 11, 291, 393, 362, 257, 20411, 31828, 2657, 365, 7909, 293, 9859, 51640, 51640], "temperature": 0.0, "avg_logprob": -0.08680394669653664, "compression_ratio": 1.5944444444444446, "no_caption_prob": 3.822800499619916e-05}, {"id": 136, "seek": 90400, "start": 904.0, "end": 910.24, "text": " values, and you can say, you know, this exact type is a valid option here. Oh, and we kind of,", "tokens": [50364, 4190, 11, 293, 291, 393, 584, 11, 291, 458, 11, 341, 1900, 2010, 307, 257, 7363, 3614, 510, 13, 876, 11, 293, 321, 733, 295, 11, 50676, 50720, 281, 1524, 493, 11, 281, 1998, 264, 7207, 322, 341, 20828, 770, 11671, 1558, 13, 407, 264, 636, 257, 50972, 50972, 20828, 770, 11671, 1985, 294, 15576, 14237, 307, 309, 4960, 729, 20411, 3467, 13, 407, 291, 393, 584, 11, 51224, 51272, 498, 291, 360, 257, 20828, 770, 11671, 295, 2010, 4195, 6915, 11, 550, 291, 727, 360, 411, 364, 2657, 13, 407, 51640, 51640], "temperature": 0.0, "avg_logprob": -0.07724160646137439, "compression_ratio": 1.756218905472637, "no_caption_prob": 0.00019714170775841922}, {"id": 137, "seek": 90400, "start": 911.12, "end": 916.16, "text": " to follow up, to close the thread on this discriminated union idea. So the way a", "tokens": [50364, 4190, 11, 293, 291, 393, 584, 11, 291, 458, 11, 341, 1900, 2010, 307, 257, 7363, 3614, 510, 13, 876, 11, 293, 321, 733, 295, 11, 50676, 50720, 281, 1524, 493, 11, 281, 1998, 264, 7207, 322, 341, 20828, 770, 11671, 1558, 13, 407, 264, 636, 257, 50972, 50972, 20828, 770, 11671, 1985, 294, 15576, 14237, 307, 309, 4960, 729, 20411, 3467, 13, 407, 291, 393, 584, 11, 51224, 51272, 498, 291, 360, 257, 20828, 770, 11671, 295, 2010, 4195, 6915, 11, 550, 291, 727, 360, 411, 364, 2657, 13, 407, 51640, 51640], "temperature": 0.0, "avg_logprob": -0.07724160646137439, "compression_ratio": 1.756218905472637, "no_caption_prob": 0.00019714170775841922}, {"id": 138, "seek": 90400, "start": 916.16, "end": 921.2, "text": " discriminated union works in TypeScript is it uses those literal types. So you can say,", "tokens": [50364, 4190, 11, 293, 291, 393, 584, 11, 291, 458, 11, 341, 1900, 2010, 307, 257, 7363, 3614, 510, 13, 876, 11, 293, 321, 733, 295, 11, 50676, 50720, 281, 1524, 493, 11, 281, 1998, 264, 7207, 322, 341, 20828, 770, 11671, 1558, 13, 407, 264, 636, 257, 50972, 50972, 20828, 770, 11671, 1985, 294, 15576, 14237, 307, 309, 4960, 729, 20411, 3467, 13, 407, 291, 393, 584, 11, 51224, 51272, 498, 291, 360, 257, 20828, 770, 11671, 295, 2010, 4195, 6915, 11, 550, 291, 727, 360, 411, 364, 2657, 13, 407, 51640, 51640], "temperature": 0.0, "avg_logprob": -0.07724160646137439, "compression_ratio": 1.756218905472637, "no_caption_prob": 0.00019714170775841922}, {"id": 139, "seek": 90400, "start": 922.16, "end": 929.52, "text": " if you do a discriminated union of type user equals, then you could do like an object. So", "tokens": [50364, 4190, 11, 293, 291, 393, 584, 11, 291, 458, 11, 341, 1900, 2010, 307, 257, 7363, 3614, 510, 13, 876, 11, 293, 321, 733, 295, 11, 50676, 50720, 281, 1524, 493, 11, 281, 1998, 264, 7207, 322, 341, 20828, 770, 11671, 1558, 13, 407, 264, 636, 257, 50972, 50972, 20828, 770, 11671, 1985, 294, 15576, 14237, 307, 309, 4960, 729, 20411, 3467, 13, 407, 291, 393, 584, 11, 51224, 51272, 498, 291, 360, 257, 20828, 770, 11671, 295, 2010, 4195, 6915, 11, 550, 291, 727, 360, 411, 364, 2657, 13, 407, 51640, 51640], "temperature": 0.0, "avg_logprob": -0.07724160646137439, "compression_ratio": 1.756218905472637, "no_caption_prob": 0.00019714170775841922}, {"id": 140, "seek": 92952, "start": 929.52, "end": 934.96, "text": " type user is an object and you could say, you could have a discriminator. So that would just be", "tokens": [50364, 2010, 4195, 307, 364, 2657, 293, 291, 727, 584, 11, 291, 727, 362, 257, 20828, 1639, 13, 407, 300, 576, 445, 312, 50636, 50668, 257, 4707, 294, 428, 11, 294, 300, 2657, 13, 407, 291, 727, 584, 11, 2010, 4195, 6915, 31828, 2657, 24657, 11, 51112, 51152, 733, 8255, 11, 293, 550, 264, 6798, 8341, 13, 400, 550, 291, 393, 360, 11240, 420, 11, 370, 1071, 17501, 295, 4195, 51624, 51624], "temperature": 0.0, "avg_logprob": -0.122374077365823, "compression_ratio": 1.5988700564971752, "no_caption_prob": 8.348744449904189e-05}, {"id": 141, "seek": 92952, "start": 935.6, "end": 944.48, "text": " a property in your, in that object. So you could say, type user equals JSON object notation,", "tokens": [50364, 2010, 4195, 307, 364, 2657, 293, 291, 727, 584, 11, 291, 727, 362, 257, 20828, 1639, 13, 407, 300, 576, 445, 312, 50636, 50668, 257, 4707, 294, 428, 11, 294, 300, 2657, 13, 407, 291, 727, 584, 11, 2010, 4195, 6915, 31828, 2657, 24657, 11, 51112, 51152, 733, 8255, 11, 293, 550, 264, 6798, 8341, 13, 400, 550, 291, 393, 360, 11240, 420, 11, 370, 1071, 17501, 295, 4195, 51624, 51624], "temperature": 0.0, "avg_logprob": -0.122374077365823, "compression_ratio": 1.5988700564971752, "no_caption_prob": 8.348744449904189e-05}, {"id": 142, "seek": 92952, "start": 945.28, "end": 954.72, "text": " kind colon, and then the string guest. And then you can do pipe or, so another variant of user", "tokens": [50364, 2010, 4195, 307, 364, 2657, 293, 291, 727, 584, 11, 291, 727, 362, 257, 20828, 1639, 13, 407, 300, 576, 445, 312, 50636, 50668, 257, 4707, 294, 428, 11, 294, 300, 2657, 13, 407, 291, 727, 584, 11, 2010, 4195, 6915, 31828, 2657, 24657, 11, 51112, 51152, 733, 8255, 11, 293, 550, 264, 6798, 8341, 13, 400, 550, 291, 393, 360, 11240, 420, 11, 370, 1071, 17501, 295, 4195, 51624, 51624], "temperature": 0.0, "avg_logprob": -0.122374077365823, "compression_ratio": 1.5988700564971752, "no_caption_prob": 8.348744449904189e-05}, {"id": 143, "seek": 95472, "start": 954.72, "end": 960.0, "text": " could be object and then kind the same discriminator field. It's just a property in", "tokens": [50364, 727, 312, 2657, 293, 550, 733, 264, 912, 20828, 1639, 2519, 13, 467, 311, 445, 257, 4707, 294, 50628, 50628, 300, 2657, 11, 457, 337, 264, 958, 472, 11, 733, 8255, 11, 293, 550, 264, 6798, 8341, 293, 550, 264, 6798, 24236, 11, 51008, 51008, 718, 311, 584, 13, 865, 13, 1119, 733, 295, 1340, 2121, 420, 727, 309, 312, 604, 4707, 294, 604, 2158, 30, 51304, 51304, 467, 311, 445, 257, 10286, 11, 457, 264, 1021, 551, 307, 300, 586, 264, 15576, 14237, 31958, 11, 498, 291, 584, 51588, 51620], "temperature": 0.0, "avg_logprob": -0.12324327038180444, "compression_ratio": 1.6944444444444444, "no_caption_prob": 6.502489850390702e-05}, {"id": 144, "seek": 95472, "start": 960.0, "end": 967.6, "text": " that object, but for the next one, kind colon, and then the string guest and then the string admin,", "tokens": [50364, 727, 312, 2657, 293, 550, 733, 264, 912, 20828, 1639, 2519, 13, 467, 311, 445, 257, 4707, 294, 50628, 50628, 300, 2657, 11, 457, 337, 264, 958, 472, 11, 733, 8255, 11, 293, 550, 264, 6798, 8341, 293, 550, 264, 6798, 24236, 11, 51008, 51008, 718, 311, 584, 13, 865, 13, 1119, 733, 295, 1340, 2121, 420, 727, 309, 312, 604, 4707, 294, 604, 2158, 30, 51304, 51304, 467, 311, 445, 257, 10286, 11, 457, 264, 1021, 551, 307, 300, 586, 264, 15576, 14237, 31958, 11, 498, 291, 584, 51588, 51620], "temperature": 0.0, "avg_logprob": -0.12324327038180444, "compression_ratio": 1.6944444444444444, "no_caption_prob": 6.502489850390702e-05}, {"id": 145, "seek": 95472, "start": 967.6, "end": 973.52, "text": " let's say. Yeah. Is kind of anything special or could it be any property in any value?", "tokens": [50364, 727, 312, 2657, 293, 550, 733, 264, 912, 20828, 1639, 2519, 13, 467, 311, 445, 257, 4707, 294, 50628, 50628, 300, 2657, 11, 457, 337, 264, 958, 472, 11, 733, 8255, 11, 293, 550, 264, 6798, 8341, 293, 550, 264, 6798, 24236, 11, 51008, 51008, 718, 311, 584, 13, 865, 13, 1119, 733, 295, 1340, 2121, 420, 727, 309, 312, 604, 4707, 294, 604, 2158, 30, 51304, 51304, 467, 311, 445, 257, 10286, 11, 457, 264, 1021, 551, 307, 300, 586, 264, 15576, 14237, 31958, 11, 498, 291, 584, 51588, 51620], "temperature": 0.0, "avg_logprob": -0.12324327038180444, "compression_ratio": 1.6944444444444444, "no_caption_prob": 6.502489850390702e-05}, {"id": 146, "seek": 95472, "start": 973.52, "end": 979.2, "text": " It's just a convention, but the important thing is that now the TypeScript compiler, if you say", "tokens": [50364, 727, 312, 2657, 293, 550, 733, 264, 912, 20828, 1639, 2519, 13, 467, 311, 445, 257, 4707, 294, 50628, 50628, 300, 2657, 11, 457, 337, 264, 958, 472, 11, 733, 8255, 11, 293, 550, 264, 6798, 8341, 293, 550, 264, 6798, 24236, 11, 51008, 51008, 718, 311, 584, 13, 865, 13, 1119, 733, 295, 1340, 2121, 420, 727, 309, 312, 604, 4707, 294, 604, 2158, 30, 51304, 51304, 467, 311, 445, 257, 10286, 11, 457, 264, 1021, 551, 307, 300, 586, 264, 15576, 14237, 31958, 11, 498, 291, 584, 51588, 51620], "temperature": 0.0, "avg_logprob": -0.12324327038180444, "compression_ratio": 1.6944444444444444, "no_caption_prob": 6.502489850390702e-05}, {"id": 147, "seek": 97920, "start": 979.2, "end": 988.88, "text": " switch value dot, you know, switch user dot kind. Now it knows based on the kind, which properties", "tokens": [50364, 3679, 2158, 5893, 11, 291, 458, 11, 3679, 4195, 5893, 733, 13, 823, 309, 3255, 2361, 322, 264, 733, 11, 597, 7221, 50848, 50848, 366, 516, 281, 2514, 322, 300, 4195, 13, 407, 498, 8341, 575, 572, 7221, 11, 24236, 575, 364, 24236, 7348, 293, 257, 3890, 51192, 51192, 4195, 575, 257, 700, 1315, 11, 1036, 1315, 11, 2035, 13, 400, 586, 309, 1542, 588, 2531, 281, 437, 321, 360, 294, 2699, 76, 13, 51468, 51468, 7587, 13, 823, 309, 1542, 2293, 411, 364, 2699, 76, 2375, 2010, 294, 264, 2020, 300, 291, 458, 337, 341, 6162, 11, 51844, 51844], "temperature": 0.0, "avg_logprob": -0.0963281369676777, "compression_ratio": 1.683982683982684, "no_caption_prob": 0.00024921519798226655}, {"id": 148, "seek": 97920, "start": 988.88, "end": 995.76, "text": " are going to exist on that user. So if guest has no properties, admin has an admin ID and a regular", "tokens": [50364, 3679, 2158, 5893, 11, 291, 458, 11, 3679, 4195, 5893, 733, 13, 823, 309, 3255, 2361, 322, 264, 733, 11, 597, 7221, 50848, 50848, 366, 516, 281, 2514, 322, 300, 4195, 13, 407, 498, 8341, 575, 572, 7221, 11, 24236, 575, 364, 24236, 7348, 293, 257, 3890, 51192, 51192, 4195, 575, 257, 700, 1315, 11, 1036, 1315, 11, 2035, 13, 400, 586, 309, 1542, 588, 2531, 281, 437, 321, 360, 294, 2699, 76, 13, 51468, 51468, 7587, 13, 823, 309, 1542, 2293, 411, 364, 2699, 76, 2375, 2010, 294, 264, 2020, 300, 291, 458, 337, 341, 6162, 11, 51844, 51844], "temperature": 0.0, "avg_logprob": -0.0963281369676777, "compression_ratio": 1.683982683982684, "no_caption_prob": 0.00024921519798226655}, {"id": 149, "seek": 97920, "start": 995.76, "end": 1001.2800000000001, "text": " user has a first name, last name, whatever. And now it looks very similar to what we do in Elm.", "tokens": [50364, 3679, 2158, 5893, 11, 291, 458, 11, 3679, 4195, 5893, 733, 13, 823, 309, 3255, 2361, 322, 264, 733, 11, 597, 7221, 50848, 50848, 366, 516, 281, 2514, 322, 300, 4195, 13, 407, 498, 8341, 575, 572, 7221, 11, 24236, 575, 364, 24236, 7348, 293, 257, 3890, 51192, 51192, 4195, 575, 257, 700, 1315, 11, 1036, 1315, 11, 2035, 13, 400, 586, 309, 1542, 588, 2531, 281, 437, 321, 360, 294, 2699, 76, 13, 51468, 51468, 7587, 13, 823, 309, 1542, 2293, 411, 364, 2699, 76, 2375, 2010, 294, 264, 2020, 300, 291, 458, 337, 341, 6162, 11, 51844, 51844], "temperature": 0.0, "avg_logprob": -0.0963281369676777, "compression_ratio": 1.683982683982684, "no_caption_prob": 0.00024921519798226655}, {"id": 150, "seek": 97920, "start": 1001.2800000000001, "end": 1008.8000000000001, "text": " Exactly. Now it looks exactly like an Elm custom type in the sense that you know for this tag,", "tokens": [50364, 3679, 2158, 5893, 11, 291, 458, 11, 3679, 4195, 5893, 733, 13, 823, 309, 3255, 2361, 322, 264, 733, 11, 597, 7221, 50848, 50848, 366, 516, 281, 2514, 322, 300, 4195, 13, 407, 498, 8341, 575, 572, 7221, 11, 24236, 575, 364, 24236, 7348, 293, 257, 3890, 51192, 51192, 4195, 575, 257, 700, 1315, 11, 1036, 1315, 11, 2035, 13, 400, 586, 309, 1542, 588, 2531, 281, 437, 321, 360, 294, 2699, 76, 13, 51468, 51468, 7587, 13, 823, 309, 1542, 2293, 411, 364, 2699, 76, 2375, 2010, 294, 264, 2020, 300, 291, 458, 337, 341, 6162, 11, 51844, 51844], "temperature": 0.0, "avg_logprob": -0.0963281369676777, "compression_ratio": 1.683982683982684, "no_caption_prob": 0.00024921519798226655}, {"id": 151, "seek": 100880, "start": 1008.8, "end": 1015.5999999999999, "text": " these are the values I have for this tag. So it allows you to express that same sort of,", "tokens": [50364, 613, 366, 264, 4190, 286, 362, 337, 341, 6162, 13, 407, 309, 4045, 291, 281, 5109, 300, 912, 1333, 295, 11, 50704, 50756, 309, 575, 264, 912, 40189, 1347, 382, 364, 2699, 76, 2375, 2010, 13, 50924, 50924, 407, 490, 452, 3701, 11, 264, 15576, 14237, 2010, 1185, 307, 544, 4005, 813, 2699, 76, 311, 293, 393, 360, 51280, 51280, 1340, 300, 264, 2699, 76, 2010, 1185, 4045, 291, 281, 293, 544, 11, 457, 309, 311, 445, 300, 309, 311, 1570, 1626, 51552, 51552, 570, 456, 311, 257, 688, 295, 15697, 294, 264, 15778, 1002, 13, 51812, 51812], "temperature": 0.0, "avg_logprob": -0.08912786483764648, "compression_ratio": 1.6853448275862069, "no_caption_prob": 2.3187249098555185e-05}, {"id": 152, "seek": 100880, "start": 1016.64, "end": 1020.0, "text": " it has the same expressive power as an Elm custom type.", "tokens": [50364, 613, 366, 264, 4190, 286, 362, 337, 341, 6162, 13, 407, 309, 4045, 291, 281, 5109, 300, 912, 1333, 295, 11, 50704, 50756, 309, 575, 264, 912, 40189, 1347, 382, 364, 2699, 76, 2375, 2010, 13, 50924, 50924, 407, 490, 452, 3701, 11, 264, 15576, 14237, 2010, 1185, 307, 544, 4005, 813, 2699, 76, 311, 293, 393, 360, 51280, 51280, 1340, 300, 264, 2699, 76, 2010, 1185, 4045, 291, 281, 293, 544, 11, 457, 309, 311, 445, 300, 309, 311, 1570, 1626, 51552, 51552, 570, 456, 311, 257, 688, 295, 15697, 294, 264, 15778, 1002, 13, 51812, 51812], "temperature": 0.0, "avg_logprob": -0.08912786483764648, "compression_ratio": 1.6853448275862069, "no_caption_prob": 2.3187249098555185e-05}, {"id": 153, "seek": 100880, "start": 1020.0, "end": 1027.12, "text": " So from my understanding, the TypeScript type system is more powerful than Elm's and can do", "tokens": [50364, 613, 366, 264, 4190, 286, 362, 337, 341, 6162, 13, 407, 309, 4045, 291, 281, 5109, 300, 912, 1333, 295, 11, 50704, 50756, 309, 575, 264, 912, 40189, 1347, 382, 364, 2699, 76, 2375, 2010, 13, 50924, 50924, 407, 490, 452, 3701, 11, 264, 15576, 14237, 2010, 1185, 307, 544, 4005, 813, 2699, 76, 311, 293, 393, 360, 51280, 51280, 1340, 300, 264, 2699, 76, 2010, 1185, 4045, 291, 281, 293, 544, 11, 457, 309, 311, 445, 300, 309, 311, 1570, 1626, 51552, 51552, 570, 456, 311, 257, 688, 295, 15697, 294, 264, 15778, 1002, 13, 51812, 51812], "temperature": 0.0, "avg_logprob": -0.08912786483764648, "compression_ratio": 1.6853448275862069, "no_caption_prob": 2.3187249098555185e-05}, {"id": 154, "seek": 100880, "start": 1027.12, "end": 1032.56, "text": " anything that the Elm type system allows you to and more, but it's just that it's less sound", "tokens": [50364, 613, 366, 264, 4190, 286, 362, 337, 341, 6162, 13, 407, 309, 4045, 291, 281, 5109, 300, 912, 1333, 295, 11, 50704, 50756, 309, 575, 264, 912, 40189, 1347, 382, 364, 2699, 76, 2375, 2010, 13, 50924, 50924, 407, 490, 452, 3701, 11, 264, 15576, 14237, 2010, 1185, 307, 544, 4005, 813, 2699, 76, 311, 293, 393, 360, 51280, 51280, 1340, 300, 264, 2699, 76, 2010, 1185, 4045, 291, 281, 293, 544, 11, 457, 309, 311, 445, 300, 309, 311, 1570, 1626, 51552, 51552, 570, 456, 311, 257, 688, 295, 15697, 294, 264, 15778, 1002, 13, 51812, 51812], "temperature": 0.0, "avg_logprob": -0.08912786483764648, "compression_ratio": 1.6853448275862069, "no_caption_prob": 2.3187249098555185e-05}, {"id": 155, "seek": 100880, "start": 1032.56, "end": 1037.76, "text": " because there's a lot of uncertainty in the JavaScript world.", "tokens": [50364, 613, 366, 264, 4190, 286, 362, 337, 341, 6162, 13, 407, 309, 4045, 291, 281, 5109, 300, 912, 1333, 295, 11, 50704, 50756, 309, 575, 264, 912, 40189, 1347, 382, 364, 2699, 76, 2375, 2010, 13, 50924, 50924, 407, 490, 452, 3701, 11, 264, 15576, 14237, 2010, 1185, 307, 544, 4005, 813, 2699, 76, 311, 293, 393, 360, 51280, 51280, 1340, 300, 264, 2699, 76, 2010, 1185, 4045, 291, 281, 293, 544, 11, 457, 309, 311, 445, 300, 309, 311, 1570, 1626, 51552, 51552, 570, 456, 311, 257, 688, 295, 15697, 294, 264, 15778, 1002, 13, 51812, 51812], "temperature": 0.0, "avg_logprob": -0.08912786483764648, "compression_ratio": 1.6853448275862069, "no_caption_prob": 2.3187249098555185e-05}, {"id": 156, "seek": 103776, "start": 1037.76, "end": 1043.36, "text": " Yeah, I think that's an accurate description. So just to reiterate what you just said,", "tokens": [50364, 865, 11, 286, 519, 300, 311, 364, 8559, 3855, 13, 407, 445, 281, 33528, 437, 291, 445, 848, 11, 50644, 50644, 264, 15576, 14237, 2010, 1185, 575, 20792, 544, 4122, 11, 457, 13366, 32567, 300, 264, 3467, 51064, 51064, 291, 362, 366, 767, 516, 281, 312, 3006, 1589, 370, 300, 309, 31132, 300, 1626, 1287, 51312, 51312, 570, 264, 636, 15778, 1985, 307, 8546, 13, 509, 393, 4193, 721, 293, 291, 393, 7979, 264, 2010, 1185, 11, 51640, 51640], "temperature": 0.0, "avg_logprob": -0.0657674648143627, "compression_ratio": 1.587719298245614, "no_caption_prob": 4.1333361878059804e-05}, {"id": 157, "seek": 103776, "start": 1043.36, "end": 1051.76, "text": " the TypeScript type system has strictly more features, but fewer guarantees that the types", "tokens": [50364, 865, 11, 286, 519, 300, 311, 364, 8559, 3855, 13, 407, 445, 281, 33528, 437, 291, 445, 848, 11, 50644, 50644, 264, 15576, 14237, 2010, 1185, 575, 20792, 544, 4122, 11, 457, 13366, 32567, 300, 264, 3467, 51064, 51064, 291, 362, 366, 767, 516, 281, 312, 3006, 1589, 370, 300, 309, 31132, 300, 1626, 1287, 51312, 51312, 570, 264, 636, 15778, 1985, 307, 8546, 13, 509, 393, 4193, 721, 293, 291, 393, 7979, 264, 2010, 1185, 11, 51640, 51640], "temperature": 0.0, "avg_logprob": -0.0657674648143627, "compression_ratio": 1.587719298245614, "no_caption_prob": 4.1333361878059804e-05}, {"id": 158, "seek": 103776, "start": 1051.76, "end": 1056.72, "text": " you have are actually going to be correct information so that it lacks that soundness", "tokens": [50364, 865, 11, 286, 519, 300, 311, 364, 8559, 3855, 13, 407, 445, 281, 33528, 437, 291, 445, 848, 11, 50644, 50644, 264, 15576, 14237, 2010, 1185, 575, 20792, 544, 4122, 11, 457, 13366, 32567, 300, 264, 3467, 51064, 51064, 291, 362, 366, 767, 516, 281, 312, 3006, 1589, 370, 300, 309, 31132, 300, 1626, 1287, 51312, 51312, 570, 264, 636, 15778, 1985, 307, 8546, 13, 509, 393, 4193, 721, 293, 291, 393, 7979, 264, 2010, 1185, 11, 51640, 51640], "temperature": 0.0, "avg_logprob": -0.0657674648143627, "compression_ratio": 1.587719298245614, "no_caption_prob": 4.1333361878059804e-05}, {"id": 159, "seek": 103776, "start": 1056.72, "end": 1063.28, "text": " because the way JavaScript works is dynamic. You can cast things and you can fool the type system,", "tokens": [50364, 865, 11, 286, 519, 300, 311, 364, 8559, 3855, 13, 407, 445, 281, 33528, 437, 291, 445, 848, 11, 50644, 50644, 264, 15576, 14237, 2010, 1185, 575, 20792, 544, 4122, 11, 457, 13366, 32567, 300, 264, 3467, 51064, 51064, 291, 362, 366, 767, 516, 281, 312, 3006, 1589, 370, 300, 309, 31132, 300, 1626, 1287, 51312, 51312, 570, 264, 636, 15778, 1985, 307, 8546, 13, 509, 393, 4193, 721, 293, 291, 393, 7979, 264, 2010, 1185, 11, 51640, 51640], "temperature": 0.0, "avg_logprob": -0.0657674648143627, "compression_ratio": 1.587719298245614, "no_caption_prob": 4.1333361878059804e-05}, {"id": 160, "seek": 106328, "start": 1063.28, "end": 1070.8799999999999, "text": " whereas in Elm, you have to prove everything to Elm. And so it's sound in that you can't just say", "tokens": [50364, 9735, 294, 2699, 76, 11, 291, 362, 281, 7081, 1203, 281, 2699, 76, 13, 400, 370, 309, 311, 1626, 294, 300, 291, 393, 380, 445, 584, 50744, 50744, 341, 31828, 2158, 575, 341, 2010, 11, 9735, 294, 15576, 14237, 291, 393, 584, 31828, 13, 2181, 405, 293, 586, 264, 51000, 51000, 2010, 307, 604, 293, 291, 393, 445, 584, 11, 1954, 1338, 11, 309, 311, 257, 6798, 13, 876, 11, 309, 311, 341, 733, 295, 2657, 13, 876, 11, 309, 311, 257, 51228, 51228, 1329, 295, 3547, 293, 309, 603, 3361, 291, 13, 407, 2086, 11, 264, 15576, 14237, 2010, 1185, 20792, 575, 544, 4122, 11, 51568, 51568], "temperature": 0.0, "avg_logprob": -0.11726600473577325, "compression_ratio": 1.6991150442477876, "no_caption_prob": 4.33169370808173e-05}, {"id": 161, "seek": 106328, "start": 1070.8799999999999, "end": 1076.0, "text": " this JSON value has this type, whereas in TypeScript you can say JSON.parse and now the", "tokens": [50364, 9735, 294, 2699, 76, 11, 291, 362, 281, 7081, 1203, 281, 2699, 76, 13, 400, 370, 309, 311, 1626, 294, 300, 291, 393, 380, 445, 584, 50744, 50744, 341, 31828, 2158, 575, 341, 2010, 11, 9735, 294, 15576, 14237, 291, 393, 584, 31828, 13, 2181, 405, 293, 586, 264, 51000, 51000, 2010, 307, 604, 293, 291, 393, 445, 584, 11, 1954, 1338, 11, 309, 311, 257, 6798, 13, 876, 11, 309, 311, 341, 733, 295, 2657, 13, 876, 11, 309, 311, 257, 51228, 51228, 1329, 295, 3547, 293, 309, 603, 3361, 291, 13, 407, 2086, 11, 264, 15576, 14237, 2010, 1185, 20792, 575, 544, 4122, 11, 51568, 51568], "temperature": 0.0, "avg_logprob": -0.11726600473577325, "compression_ratio": 1.6991150442477876, "no_caption_prob": 4.33169370808173e-05}, {"id": 162, "seek": 106328, "start": 1076.0, "end": 1080.56, "text": " type is any and you can just say, oh yeah, it's a string. Oh, it's this kind of object. Oh, it's a", "tokens": [50364, 9735, 294, 2699, 76, 11, 291, 362, 281, 7081, 1203, 281, 2699, 76, 13, 400, 370, 309, 311, 1626, 294, 300, 291, 393, 380, 445, 584, 50744, 50744, 341, 31828, 2158, 575, 341, 2010, 11, 9735, 294, 15576, 14237, 291, 393, 584, 31828, 13, 2181, 405, 293, 586, 264, 51000, 51000, 2010, 307, 604, 293, 291, 393, 445, 584, 11, 1954, 1338, 11, 309, 311, 257, 6798, 13, 876, 11, 309, 311, 341, 733, 295, 2657, 13, 876, 11, 309, 311, 257, 51228, 51228, 1329, 295, 3547, 293, 309, 603, 3361, 291, 13, 407, 2086, 11, 264, 15576, 14237, 2010, 1185, 20792, 575, 544, 4122, 11, 51568, 51568], "temperature": 0.0, "avg_logprob": -0.11726600473577325, "compression_ratio": 1.6991150442477876, "no_caption_prob": 4.33169370808173e-05}, {"id": 163, "seek": 106328, "start": 1080.56, "end": 1087.36, "text": " list of numbers and it'll trust you. So yes, the TypeScript type system strictly has more features,", "tokens": [50364, 9735, 294, 2699, 76, 11, 291, 362, 281, 7081, 1203, 281, 2699, 76, 13, 400, 370, 309, 311, 1626, 294, 300, 291, 393, 380, 445, 584, 50744, 50744, 341, 31828, 2158, 575, 341, 2010, 11, 9735, 294, 15576, 14237, 291, 393, 584, 31828, 13, 2181, 405, 293, 586, 264, 51000, 51000, 2010, 307, 604, 293, 291, 393, 445, 584, 11, 1954, 1338, 11, 309, 311, 257, 6798, 13, 876, 11, 309, 311, 341, 733, 295, 2657, 13, 876, 11, 309, 311, 257, 51228, 51228, 1329, 295, 3547, 293, 309, 603, 3361, 291, 13, 407, 2086, 11, 264, 15576, 14237, 2010, 1185, 20792, 575, 544, 4122, 11, 51568, 51568], "temperature": 0.0, "avg_logprob": -0.11726600473577325, "compression_ratio": 1.6991150442477876, "no_caption_prob": 4.33169370808173e-05}, {"id": 164, "seek": 108736, "start": 1087.36, "end": 1095.04, "text": " even though it's not sound in the sense that Elm is. So this discriminated union feature", "tokens": [50364, 754, 1673, 309, 311, 406, 1626, 294, 264, 2020, 300, 2699, 76, 307, 13, 407, 341, 20828, 770, 11671, 4111, 50748, 50820, 307, 437, 291, 589, 365, 562, 291, 434, 7750, 257, 2158, 490, 2699, 76, 281, 15576, 14237, 365, 806, 76, 1373, 12729, 13, 51236, 51236, 407, 291, 362, 257, 2167, 2436, 13, 407, 291, 362, 257, 2436, 1219, 12729, 490, 2699, 76, 13, 407, 291, 576, 584, 51584, 51584], "temperature": 0.0, "avg_logprob": -0.10111473031239966, "compression_ratio": 1.6058823529411765, "no_caption_prob": 4.832245031138882e-05}, {"id": 165, "seek": 108736, "start": 1096.4799999999998, "end": 1104.8, "text": " is what you work with when you're sending a value from Elm to TypeScript with elmts interrupt.", "tokens": [50364, 754, 1673, 309, 311, 406, 1626, 294, 264, 2020, 300, 2699, 76, 307, 13, 407, 341, 20828, 770, 11671, 4111, 50748, 50820, 307, 437, 291, 589, 365, 562, 291, 434, 7750, 257, 2158, 490, 2699, 76, 281, 15576, 14237, 365, 806, 76, 1373, 12729, 13, 51236, 51236, 407, 291, 362, 257, 2167, 2436, 13, 407, 291, 362, 257, 2436, 1219, 12729, 490, 2699, 76, 13, 407, 291, 576, 584, 51584, 51584], "temperature": 0.0, "avg_logprob": -0.10111473031239966, "compression_ratio": 1.6058823529411765, "no_caption_prob": 4.832245031138882e-05}, {"id": 166, "seek": 108736, "start": 1104.8, "end": 1111.76, "text": " So you have a single port. So you have a port called interrupt from Elm. So you would say", "tokens": [50364, 754, 1673, 309, 311, 406, 1626, 294, 264, 2020, 300, 2699, 76, 307, 13, 407, 341, 20828, 770, 11671, 4111, 50748, 50820, 307, 437, 291, 589, 365, 562, 291, 434, 7750, 257, 2158, 490, 2699, 76, 281, 15576, 14237, 365, 806, 76, 1373, 12729, 13, 51236, 51236, 407, 291, 362, 257, 2167, 2436, 13, 407, 291, 362, 257, 2436, 1219, 12729, 490, 2699, 76, 13, 407, 291, 576, 584, 51584, 51584], "temperature": 0.0, "avg_logprob": -0.10111473031239966, "compression_ratio": 1.6058823529411765, "no_caption_prob": 4.832245031138882e-05}, {"id": 167, "seek": 111176, "start": 1111.76, "end": 1119.12, "text": " app.ports.interrupt from Elm. And what elmts interrupt gives you is it generates a TypeScript", "tokens": [50364, 724, 13, 17845, 13, 5106, 5428, 490, 2699, 76, 13, 400, 437, 806, 76, 1373, 12729, 2709, 291, 307, 309, 23815, 257, 15576, 14237, 50732, 50732, 27606, 3991, 300, 311, 516, 281, 980, 15576, 14237, 437, 3467, 291, 434, 516, 281, 4774, 562, 291, 434, 51104, 51104, 27520, 493, 428, 2699, 76, 3861, 293, 437, 3467, 291, 643, 281, 2845, 293, 300, 309, 393, 3241, 562, 51356, 51356, 291, 434, 7750, 18160, 490, 15576, 14237, 13, 407, 586, 562, 291, 584, 724, 13, 17845, 13, 5106, 5428, 490, 2699, 76, 11, 51732, 51732], "temperature": 0.0, "avg_logprob": -0.0643937211287649, "compression_ratio": 1.8871794871794871, "no_caption_prob": 0.0002779895148705691}, {"id": 168, "seek": 111176, "start": 1119.12, "end": 1126.56, "text": " declaration file that's going to tell TypeScript what types you're going to receive when you're", "tokens": [50364, 724, 13, 17845, 13, 5106, 5428, 490, 2699, 76, 13, 400, 437, 806, 76, 1373, 12729, 2709, 291, 307, 309, 23815, 257, 15576, 14237, 50732, 50732, 27606, 3991, 300, 311, 516, 281, 980, 15576, 14237, 437, 3467, 291, 434, 516, 281, 4774, 562, 291, 434, 51104, 51104, 27520, 493, 428, 2699, 76, 3861, 293, 437, 3467, 291, 643, 281, 2845, 293, 300, 309, 393, 3241, 562, 51356, 51356, 291, 434, 7750, 18160, 490, 15576, 14237, 13, 407, 586, 562, 291, 584, 724, 13, 17845, 13, 5106, 5428, 490, 2699, 76, 11, 51732, 51732], "temperature": 0.0, "avg_logprob": -0.0643937211287649, "compression_ratio": 1.8871794871794871, "no_caption_prob": 0.0002779895148705691}, {"id": 169, "seek": 111176, "start": 1126.56, "end": 1131.6, "text": " wiring up your Elm application and what types you need to send and that it can accept when", "tokens": [50364, 724, 13, 17845, 13, 5106, 5428, 490, 2699, 76, 13, 400, 437, 806, 76, 1373, 12729, 2709, 291, 307, 309, 23815, 257, 15576, 14237, 50732, 50732, 27606, 3991, 300, 311, 516, 281, 980, 15576, 14237, 437, 3467, 291, 434, 516, 281, 4774, 562, 291, 434, 51104, 51104, 27520, 493, 428, 2699, 76, 3861, 293, 437, 3467, 291, 643, 281, 2845, 293, 300, 309, 393, 3241, 562, 51356, 51356, 291, 434, 7750, 18160, 490, 15576, 14237, 13, 407, 586, 562, 291, 584, 724, 13, 17845, 13, 5106, 5428, 490, 2699, 76, 11, 51732, 51732], "temperature": 0.0, "avg_logprob": -0.0643937211287649, "compression_ratio": 1.8871794871794871, "no_caption_prob": 0.0002779895148705691}, {"id": 170, "seek": 111176, "start": 1131.6, "end": 1139.12, "text": " you're sending ports from TypeScript. So now when you say app.ports.interrupt from Elm,", "tokens": [50364, 724, 13, 17845, 13, 5106, 5428, 490, 2699, 76, 13, 400, 437, 806, 76, 1373, 12729, 2709, 291, 307, 309, 23815, 257, 15576, 14237, 50732, 50732, 27606, 3991, 300, 311, 516, 281, 980, 15576, 14237, 437, 3467, 291, 434, 516, 281, 4774, 562, 291, 434, 51104, 51104, 27520, 493, 428, 2699, 76, 3861, 293, 437, 3467, 291, 643, 281, 2845, 293, 300, 309, 393, 3241, 562, 51356, 51356, 291, 434, 7750, 18160, 490, 15576, 14237, 13, 407, 586, 562, 291, 584, 724, 13, 17845, 13, 5106, 5428, 490, 2699, 76, 11, 51732, 51732], "temperature": 0.0, "avg_logprob": -0.0643937211287649, "compression_ratio": 1.8871794871794871, "no_caption_prob": 0.0002779895148705691}, {"id": 171, "seek": 113912, "start": 1139.12, "end": 1145.04, "text": " that's the single port that you use for elmts interrupt to receive an incoming value from Elm.", "tokens": [50364, 300, 311, 264, 2167, 2436, 300, 291, 764, 337, 806, 76, 1373, 12729, 281, 4774, 364, 22341, 2158, 490, 2699, 76, 13, 50660, 50660, 400, 586, 291, 393, 584, 294, 300, 2445, 11, 291, 4774, 428, 490, 2699, 76, 30918, 11, 428, 490, 2699, 76, 2158, 11, 51012, 51012, 293, 291, 393, 584, 3679, 490, 2699, 76, 13, 25030, 13, 400, 586, 291, 434, 516, 281, 362, 2275, 15370, 293, 309, 311, 51364, 51364, 516, 281, 362, 264, 30918, 365, 2035, 15370, 1589, 13, 400, 300, 393, 754, 312, 2035, 2375, 51648, 51648], "temperature": 0.0, "avg_logprob": -0.08849985223067434, "compression_ratio": 1.890547263681592, "no_caption_prob": 2.2827329303254373e-05}, {"id": 172, "seek": 113912, "start": 1145.04, "end": 1152.08, "text": " And now you can say in that function, you receive your from Elm payload, your from Elm value,", "tokens": [50364, 300, 311, 264, 2167, 2436, 300, 291, 764, 337, 806, 76, 1373, 12729, 281, 4774, 364, 22341, 2158, 490, 2699, 76, 13, 50660, 50660, 400, 586, 291, 393, 584, 294, 300, 2445, 11, 291, 4774, 428, 490, 2699, 76, 30918, 11, 428, 490, 2699, 76, 2158, 11, 51012, 51012, 293, 291, 393, 584, 3679, 490, 2699, 76, 13, 25030, 13, 400, 586, 291, 434, 516, 281, 362, 2275, 15370, 293, 309, 311, 51364, 51364, 516, 281, 362, 264, 30918, 365, 2035, 15370, 1589, 13, 400, 300, 393, 754, 312, 2035, 2375, 51648, 51648], "temperature": 0.0, "avg_logprob": -0.08849985223067434, "compression_ratio": 1.890547263681592, "no_caption_prob": 2.2827329303254373e-05}, {"id": 173, "seek": 113912, "start": 1152.08, "end": 1159.12, "text": " and you can say switch from Elm.tag. And now you're going to have report analytics and it's", "tokens": [50364, 300, 311, 264, 2167, 2436, 300, 291, 764, 337, 806, 76, 1373, 12729, 281, 4774, 364, 22341, 2158, 490, 2699, 76, 13, 50660, 50660, 400, 586, 291, 393, 584, 294, 300, 2445, 11, 291, 4774, 428, 490, 2699, 76, 30918, 11, 428, 490, 2699, 76, 2158, 11, 51012, 51012, 293, 291, 393, 584, 3679, 490, 2699, 76, 13, 25030, 13, 400, 586, 291, 434, 516, 281, 362, 2275, 15370, 293, 309, 311, 51364, 51364, 516, 281, 362, 264, 30918, 365, 2035, 15370, 1589, 13, 400, 300, 393, 754, 312, 2035, 2375, 51648, 51648], "temperature": 0.0, "avg_logprob": -0.08849985223067434, "compression_ratio": 1.890547263681592, "no_caption_prob": 2.2827329303254373e-05}, {"id": 174, "seek": 113912, "start": 1159.12, "end": 1164.8, "text": " going to have the payload with whatever analytics information. And that can even be whatever custom", "tokens": [50364, 300, 311, 264, 2167, 2436, 300, 291, 764, 337, 806, 76, 1373, 12729, 281, 4774, 364, 22341, 2158, 490, 2699, 76, 13, 50660, 50660, 400, 586, 291, 393, 584, 294, 300, 2445, 11, 291, 4774, 428, 490, 2699, 76, 30918, 11, 428, 490, 2699, 76, 2158, 11, 51012, 51012, 293, 291, 393, 584, 3679, 490, 2699, 76, 13, 25030, 13, 400, 586, 291, 434, 516, 281, 362, 2275, 15370, 293, 309, 311, 51364, 51364, 516, 281, 362, 264, 30918, 365, 2035, 15370, 1589, 13, 400, 300, 393, 754, 312, 2035, 2375, 51648, 51648], "temperature": 0.0, "avg_logprob": -0.08849985223067434, "compression_ratio": 1.890547263681592, "no_caption_prob": 2.2827329303254373e-05}, {"id": 175, "seek": 116480, "start": 1164.8, "end": 1171.28, "text": " type and you know and so on and so on and so on. You can have arbitrarily complex type information", "tokens": [50364, 2010, 293, 291, 458, 293, 370, 322, 293, 370, 322, 293, 370, 322, 13, 509, 393, 362, 19071, 3289, 3997, 2010, 1589, 50688, 50688, 12675, 456, 13, 407, 264, 534, 1627, 551, 307, 300, 1340, 291, 393, 6786, 439, 7527, 295, 1589, 51112, 51112, 466, 613, 31828, 4190, 807, 264, 15576, 14237, 2010, 1185, 13, 407, 300, 311, 264, 1752, 291, 917, 51416, 51416, 493, 1242, 365, 806, 76, 1373, 12729, 13, 407, 718, 311, 536, 11, 321, 820, 1391, 751, 257, 707, 857, 466, 577, 300, 51728, 51728], "temperature": 0.0, "avg_logprob": -0.09184730445945656, "compression_ratio": 1.6567796610169492, "no_caption_prob": 8.887195872375742e-05}, {"id": 176, "seek": 116480, "start": 1171.28, "end": 1179.76, "text": " expressed there. So the really cool thing is that anything you can describe all sorts of information", "tokens": [50364, 2010, 293, 291, 458, 293, 370, 322, 293, 370, 322, 293, 370, 322, 13, 509, 393, 362, 19071, 3289, 3997, 2010, 1589, 50688, 50688, 12675, 456, 13, 407, 264, 534, 1627, 551, 307, 300, 1340, 291, 393, 6786, 439, 7527, 295, 1589, 51112, 51112, 466, 613, 31828, 4190, 807, 264, 15576, 14237, 2010, 1185, 13, 407, 300, 311, 264, 1752, 291, 917, 51416, 51416, 493, 1242, 365, 806, 76, 1373, 12729, 13, 407, 718, 311, 536, 11, 321, 820, 1391, 751, 257, 707, 857, 466, 577, 300, 51728, 51728], "temperature": 0.0, "avg_logprob": -0.09184730445945656, "compression_ratio": 1.6567796610169492, "no_caption_prob": 8.887195872375742e-05}, {"id": 177, "seek": 116480, "start": 1179.76, "end": 1185.84, "text": " about these JSON values through the TypeScript type system. So that's the experience you end", "tokens": [50364, 2010, 293, 291, 458, 293, 370, 322, 293, 370, 322, 293, 370, 322, 13, 509, 393, 362, 19071, 3289, 3997, 2010, 1589, 50688, 50688, 12675, 456, 13, 407, 264, 534, 1627, 551, 307, 300, 1340, 291, 393, 6786, 439, 7527, 295, 1589, 51112, 51112, 466, 613, 31828, 4190, 807, 264, 15576, 14237, 2010, 1185, 13, 407, 300, 311, 264, 1752, 291, 917, 51416, 51416, 493, 1242, 365, 806, 76, 1373, 12729, 13, 407, 718, 311, 536, 11, 321, 820, 1391, 751, 257, 707, 857, 466, 577, 300, 51728, 51728], "temperature": 0.0, "avg_logprob": -0.09184730445945656, "compression_ratio": 1.6567796610169492, "no_caption_prob": 8.887195872375742e-05}, {"id": 178, "seek": 116480, "start": 1185.84, "end": 1192.08, "text": " up getting with elmts interrupt. So let's see, we should probably talk a little bit about how that", "tokens": [50364, 2010, 293, 291, 458, 293, 370, 322, 293, 370, 322, 293, 370, 322, 13, 509, 393, 362, 19071, 3289, 3997, 2010, 1589, 50688, 50688, 12675, 456, 13, 407, 264, 534, 1627, 551, 307, 300, 1340, 291, 393, 6786, 439, 7527, 295, 1589, 51112, 51112, 466, 613, 31828, 4190, 807, 264, 15576, 14237, 2010, 1185, 13, 407, 300, 311, 264, 1752, 291, 917, 51416, 51416, 493, 1242, 365, 806, 76, 1373, 12729, 13, 407, 718, 311, 536, 11, 321, 820, 1391, 751, 257, 707, 857, 466, 577, 300, 51728, 51728], "temperature": 0.0, "avg_logprob": -0.09184730445945656, "compression_ratio": 1.6567796610169492, "no_caption_prob": 8.887195872375742e-05}, {"id": 179, "seek": 119208, "start": 1192.08, "end": 1198.32, "text": " actually happens and how you end up with TypeScript type information with this new elmts interrupt", "tokens": [50364, 767, 2314, 293, 577, 291, 917, 493, 365, 15576, 14237, 2010, 1589, 365, 341, 777, 806, 76, 1373, 12729, 50676, 50676, 3109, 13, 1436, 321, 848, 300, 8343, 264, 1331, 1367, 13867, 770, 806, 76, 3467, 5944, 12729, 11, 264, 777, 806, 76, 1373, 51052, 51052, 12729, 775, 406, 764, 613, 26947, 17436, 2144, 11, 730, 260, 831, 2144, 6828, 538, 26947, 356, 16141, 51448, 51448, 257, 2436, 365, 364, 806, 76, 2010, 13, 400, 291, 2835, 321, 434, 1228, 31828, 979, 378, 433, 293, 31828, 2058, 378, 433, 13, 51824, 51824], "temperature": 0.0, "avg_logprob": -0.09860019480928461, "compression_ratio": 1.6973684210526316, "no_caption_prob": 2.355234209971968e-05}, {"id": 180, "seek": 119208, "start": 1198.32, "end": 1205.84, "text": " approach. Because we said that unlike the old deprecated elm typescript interrupt, the new elmts", "tokens": [50364, 767, 2314, 293, 577, 291, 917, 493, 365, 15576, 14237, 2010, 1589, 365, 341, 777, 806, 76, 1373, 12729, 50676, 50676, 3109, 13, 1436, 321, 848, 300, 8343, 264, 1331, 1367, 13867, 770, 806, 76, 3467, 5944, 12729, 11, 264, 777, 806, 76, 1373, 51052, 51052, 12729, 775, 406, 764, 613, 26947, 17436, 2144, 11, 730, 260, 831, 2144, 6828, 538, 26947, 356, 16141, 51448, 51448, 257, 2436, 365, 364, 806, 76, 2010, 13, 400, 291, 2835, 321, 434, 1228, 31828, 979, 378, 433, 293, 31828, 2058, 378, 433, 13, 51824, 51824], "temperature": 0.0, "avg_logprob": -0.09860019480928461, "compression_ratio": 1.6973684210526316, "no_caption_prob": 2.355234209971968e-05}, {"id": 181, "seek": 119208, "start": 1205.84, "end": 1213.76, "text": " interrupt does not use these implicit serialization, deserialization functions by implicitly describing", "tokens": [50364, 767, 2314, 293, 577, 291, 917, 493, 365, 15576, 14237, 2010, 1589, 365, 341, 777, 806, 76, 1373, 12729, 50676, 50676, 3109, 13, 1436, 321, 848, 300, 8343, 264, 1331, 1367, 13867, 770, 806, 76, 3467, 5944, 12729, 11, 264, 777, 806, 76, 1373, 51052, 51052, 12729, 775, 406, 764, 613, 26947, 17436, 2144, 11, 730, 260, 831, 2144, 6828, 538, 26947, 356, 16141, 51448, 51448, 257, 2436, 365, 364, 806, 76, 2010, 13, 400, 291, 2835, 321, 434, 1228, 31828, 979, 378, 433, 293, 31828, 2058, 378, 433, 13, 51824, 51824], "temperature": 0.0, "avg_logprob": -0.09860019480928461, "compression_ratio": 1.6973684210526316, "no_caption_prob": 2.355234209971968e-05}, {"id": 182, "seek": 119208, "start": 1213.76, "end": 1221.28, "text": " a port with an elm type. And you mentioned we're using JSON decoders and JSON encoders.", "tokens": [50364, 767, 2314, 293, 577, 291, 917, 493, 365, 15576, 14237, 2010, 1589, 365, 341, 777, 806, 76, 1373, 12729, 50676, 50676, 3109, 13, 1436, 321, 848, 300, 8343, 264, 1331, 1367, 13867, 770, 806, 76, 3467, 5944, 12729, 11, 264, 777, 806, 76, 1373, 51052, 51052, 12729, 775, 406, 764, 613, 26947, 17436, 2144, 11, 730, 260, 831, 2144, 6828, 538, 26947, 356, 16141, 51448, 51448, 257, 2436, 365, 364, 806, 76, 2010, 13, 400, 291, 2835, 321, 434, 1228, 31828, 979, 378, 433, 293, 31828, 2058, 378, 433, 13, 51824, 51824], "temperature": 0.0, "avg_logprob": -0.09860019480928461, "compression_ratio": 1.6973684210526316, "no_caption_prob": 2.355234209971968e-05}, {"id": 183, "seek": 122128, "start": 1221.28, "end": 1232.8, "text": " That's right. Is that right? Yes. That is, well, yes and no. So elmts interrupt, there are a lot of", "tokens": [50364, 663, 311, 558, 13, 1119, 300, 558, 30, 1079, 13, 663, 307, 11, 731, 11, 2086, 293, 572, 13, 407, 806, 76, 1373, 12729, 11, 456, 366, 257, 688, 295, 50940, 50940, 2115, 510, 11, 457, 286, 393, 980, 291, 490, 1228, 806, 76, 1373, 12729, 11, 264, 1752, 295, 1228, 309, 293, 452, 51340, 51340, 1333, 295, 3387, 337, 264, 10754, 1752, 510, 307, 300, 291, 1333, 295, 29879, 257, 979, 19866, 420, 291, 29879, 364, 51644, 51644], "temperature": 0.0, "avg_logprob": -0.1727211563675492, "compression_ratio": 1.6440677966101696, "no_caption_prob": 3.9441059925593436e-05}, {"id": 184, "seek": 122128, "start": 1232.8, "end": 1240.8, "text": " terms here, but I can tell you from using elmts interrupt, the experience of using it and my", "tokens": [50364, 663, 311, 558, 13, 1119, 300, 558, 30, 1079, 13, 663, 307, 11, 731, 11, 2086, 293, 572, 13, 407, 806, 76, 1373, 12729, 11, 456, 366, 257, 688, 295, 50940, 50940, 2115, 510, 11, 457, 286, 393, 980, 291, 490, 1228, 806, 76, 1373, 12729, 11, 264, 1752, 295, 1228, 309, 293, 452, 51340, 51340, 1333, 295, 3387, 337, 264, 10754, 1752, 510, 307, 300, 291, 1333, 295, 29879, 257, 979, 19866, 420, 291, 29879, 364, 51644, 51644], "temperature": 0.0, "avg_logprob": -0.1727211563675492, "compression_ratio": 1.6440677966101696, "no_caption_prob": 3.9441059925593436e-05}, {"id": 185, "seek": 122128, "start": 1240.8, "end": 1246.8799999999999, "text": " sort of goal for the developer experience here is that you sort of tweak a decoder or you tweak an", "tokens": [50364, 663, 311, 558, 13, 1119, 300, 558, 30, 1079, 13, 663, 307, 11, 731, 11, 2086, 293, 572, 13, 407, 806, 76, 1373, 12729, 11, 456, 366, 257, 688, 295, 50940, 50940, 2115, 510, 11, 457, 286, 393, 980, 291, 490, 1228, 806, 76, 1373, 12729, 11, 264, 1752, 295, 1228, 309, 293, 452, 51340, 51340, 1333, 295, 3387, 337, 264, 10754, 1752, 510, 307, 300, 291, 1333, 295, 29879, 257, 979, 19866, 420, 291, 29879, 364, 51644, 51644], "temperature": 0.0, "avg_logprob": -0.1727211563675492, "compression_ratio": 1.6440677966101696, "no_caption_prob": 3.9441059925593436e-05}, {"id": 186, "seek": 124688, "start": 1246.88, "end": 1252.16, "text": " encoder and that type information flows through to TypeScript and you have, you know, it's this sort", "tokens": [50364, 2058, 19866, 293, 300, 2010, 1589, 12867, 807, 281, 15576, 14237, 293, 291, 362, 11, 291, 458, 11, 309, 311, 341, 1333, 50628, 50628, 295, 3467, 1553, 16287, 1558, 286, 2825, 466, 294, 452, 806, 76, 1497, 751, 11, 3467, 1553, 16287, 13, 663, 311, 50888, 50888, 264, 3387, 13, 407, 806, 76, 1373, 12729, 4960, 364, 806, 76, 7372, 300, 286, 6572, 833, 264, 13376, 293, 300, 311, 437, 51248, 51248, 291, 434, 3579, 300, 2709, 291, 264, 1589, 466, 264, 1412, 291, 434, 7750, 293, 10040, 51540, 51540], "temperature": 0.0, "avg_logprob": -0.11624837958294412, "compression_ratio": 1.7022222222222223, "no_caption_prob": 5.3072701120981947e-05}, {"id": 187, "seek": 124688, "start": 1252.16, "end": 1257.3600000000001, "text": " of types without borders idea I talked about in my elm conf talk, types without borders. That's", "tokens": [50364, 2058, 19866, 293, 300, 2010, 1589, 12867, 807, 281, 15576, 14237, 293, 291, 362, 11, 291, 458, 11, 309, 311, 341, 1333, 50628, 50628, 295, 3467, 1553, 16287, 1558, 286, 2825, 466, 294, 452, 806, 76, 1497, 751, 11, 3467, 1553, 16287, 13, 663, 311, 50888, 50888, 264, 3387, 13, 407, 806, 76, 1373, 12729, 4960, 364, 806, 76, 7372, 300, 286, 6572, 833, 264, 13376, 293, 300, 311, 437, 51248, 51248, 291, 434, 3579, 300, 2709, 291, 264, 1589, 466, 264, 1412, 291, 434, 7750, 293, 10040, 51540, 51540], "temperature": 0.0, "avg_logprob": -0.11624837958294412, "compression_ratio": 1.7022222222222223, "no_caption_prob": 5.3072701120981947e-05}, {"id": 188, "seek": 124688, "start": 1257.3600000000001, "end": 1264.5600000000002, "text": " the goal. So elmts interrupt uses an elm package that I published under the hood and that's what", "tokens": [50364, 2058, 19866, 293, 300, 2010, 1589, 12867, 807, 281, 15576, 14237, 293, 291, 362, 11, 291, 458, 11, 309, 311, 341, 1333, 50628, 50628, 295, 3467, 1553, 16287, 1558, 286, 2825, 466, 294, 452, 806, 76, 1497, 751, 11, 3467, 1553, 16287, 13, 663, 311, 50888, 50888, 264, 3387, 13, 407, 806, 76, 1373, 12729, 4960, 364, 806, 76, 7372, 300, 286, 6572, 833, 264, 13376, 293, 300, 311, 437, 51248, 51248, 291, 434, 3579, 300, 2709, 291, 264, 1589, 466, 264, 1412, 291, 434, 7750, 293, 10040, 51540, 51540], "temperature": 0.0, "avg_logprob": -0.11624837958294412, "compression_ratio": 1.7022222222222223, "no_caption_prob": 5.3072701120981947e-05}, {"id": 189, "seek": 124688, "start": 1264.5600000000002, "end": 1270.4, "text": " you're writing that gives you the information about the data you're sending and receiving", "tokens": [50364, 2058, 19866, 293, 300, 2010, 1589, 12867, 807, 281, 15576, 14237, 293, 291, 362, 11, 291, 458, 11, 309, 311, 341, 1333, 50628, 50628, 295, 3467, 1553, 16287, 1558, 286, 2825, 466, 294, 452, 806, 76, 1497, 751, 11, 3467, 1553, 16287, 13, 663, 311, 50888, 50888, 264, 3387, 13, 407, 806, 76, 1373, 12729, 4960, 364, 806, 76, 7372, 300, 286, 6572, 833, 264, 13376, 293, 300, 311, 437, 51248, 51248, 291, 434, 3579, 300, 2709, 291, 264, 1589, 466, 264, 1412, 291, 434, 7750, 293, 10040, 51540, 51540], "temperature": 0.0, "avg_logprob": -0.11624837958294412, "compression_ratio": 1.7022222222222223, "no_caption_prob": 5.3072701120981947e-05}, {"id": 190, "seek": 127040, "start": 1270.4, "end": 1277.2800000000002, "text": " in your ports. So the package is called elmts.json under Dylan Kearns. That's right. Dylan Kearns", "tokens": [50364, 294, 428, 18160, 13, 407, 264, 7372, 307, 1219, 806, 76, 1373, 13, 73, 3015, 833, 28160, 3189, 1083, 82, 13, 663, 311, 558, 13, 28160, 3189, 1083, 82, 50708, 50708, 17330, 806, 76, 1373, 13, 73, 3015, 13, 407, 291, 393, 915, 257, 2113, 294, 264, 855, 5570, 13, 663, 307, 264, 806, 76, 7372, 293, 437, 300, 51088, 51088, 7372, 307, 307, 11611, 309, 307, 257, 3270, 294, 14419, 337, 806, 76, 13, 73, 3015, 11, 361, 3015, 979, 378, 433, 293, 2058, 378, 433, 13, 51572, 51572], "temperature": 0.0, "avg_logprob": -0.13693857192993164, "compression_ratio": 1.64, "no_caption_prob": 0.00014651883975602686}, {"id": 191, "seek": 127040, "start": 1277.2800000000002, "end": 1284.88, "text": " slash elmts.json. So you can find a link in the show notes. That is the elm package and what that", "tokens": [50364, 294, 428, 18160, 13, 407, 264, 7372, 307, 1219, 806, 76, 1373, 13, 73, 3015, 833, 28160, 3189, 1083, 82, 13, 663, 311, 558, 13, 28160, 3189, 1083, 82, 50708, 50708, 17330, 806, 76, 1373, 13, 73, 3015, 13, 407, 291, 393, 915, 257, 2113, 294, 264, 855, 5570, 13, 663, 307, 264, 806, 76, 7372, 293, 437, 300, 51088, 51088, 7372, 307, 307, 11611, 309, 307, 257, 3270, 294, 14419, 337, 806, 76, 13, 73, 3015, 11, 361, 3015, 979, 378, 433, 293, 2058, 378, 433, 13, 51572, 51572], "temperature": 0.0, "avg_logprob": -0.13693857192993164, "compression_ratio": 1.64, "no_caption_prob": 0.00014651883975602686}, {"id": 192, "seek": 127040, "start": 1284.88, "end": 1294.5600000000002, "text": " package is is largely it is a drop in replacement for elm.json, json decoders and encoders.", "tokens": [50364, 294, 428, 18160, 13, 407, 264, 7372, 307, 1219, 806, 76, 1373, 13, 73, 3015, 833, 28160, 3189, 1083, 82, 13, 663, 311, 558, 13, 28160, 3189, 1083, 82, 50708, 50708, 17330, 806, 76, 1373, 13, 73, 3015, 13, 407, 291, 393, 915, 257, 2113, 294, 264, 855, 5570, 13, 663, 307, 264, 806, 76, 7372, 293, 437, 300, 51088, 51088, 7372, 307, 307, 11611, 309, 307, 257, 3270, 294, 14419, 337, 806, 76, 13, 73, 3015, 11, 361, 3015, 979, 378, 433, 293, 2058, 378, 433, 13, 51572, 51572], "temperature": 0.0, "avg_logprob": -0.13693857192993164, "compression_ratio": 1.64, "no_caption_prob": 0.00014651883975602686}, {"id": 193, "seek": 129456, "start": 1294.56, "end": 1301.9199999999998, "text": " All right. So that's pretty boring as some people would like to say. That's right. Yes, it is.", "tokens": [50364, 1057, 558, 13, 407, 300, 311, 1238, 9989, 382, 512, 561, 576, 411, 281, 584, 13, 663, 311, 558, 13, 1079, 11, 309, 307, 13, 50732, 50768, 1079, 11, 309, 307, 4664, 9989, 13, 682, 264, 665, 636, 13, 682, 264, 665, 636, 13, 682, 264, 665, 636, 13, 467, 307, 11, 309, 311, 1333, 295, 51112, 51112, 411, 257, 3410, 13, 639, 390, 472, 295, 411, 452, 2954, 721, 466, 1348, 493, 365, 341, 1715, 390, 445, 51376, 51376, 8407, 322, 7207, 544, 293, 544, 293, 2577, 300, 341, 588, 2199, 1558, 11, 721, 445, 1333, 295, 2100, 51624, 51624], "temperature": 0.0, "avg_logprob": -0.1311340146851771, "compression_ratio": 1.8046511627906976, "no_caption_prob": 5.2250012231525034e-05}, {"id": 194, "seek": 129456, "start": 1302.6399999999999, "end": 1309.52, "text": " Yes, it is extremely boring. In the good way. In the good way. In the good way. It is, it's sort of", "tokens": [50364, 1057, 558, 13, 407, 300, 311, 1238, 9989, 382, 512, 561, 576, 411, 281, 584, 13, 663, 311, 558, 13, 1079, 11, 309, 307, 13, 50732, 50768, 1079, 11, 309, 307, 4664, 9989, 13, 682, 264, 665, 636, 13, 682, 264, 665, 636, 13, 682, 264, 665, 636, 13, 467, 307, 11, 309, 311, 1333, 295, 51112, 51112, 411, 257, 3410, 13, 639, 390, 472, 295, 411, 452, 2954, 721, 466, 1348, 493, 365, 341, 1715, 390, 445, 51376, 51376, 8407, 322, 7207, 544, 293, 544, 293, 2577, 300, 341, 588, 2199, 1558, 11, 721, 445, 1333, 295, 2100, 51624, 51624], "temperature": 0.0, "avg_logprob": -0.1311340146851771, "compression_ratio": 1.8046511627906976, "no_caption_prob": 5.2250012231525034e-05}, {"id": 195, "seek": 129456, "start": 1309.52, "end": 1314.8, "text": " like a concept. This was one of like my favorite things about coming up with this design was just", "tokens": [50364, 1057, 558, 13, 407, 300, 311, 1238, 9989, 382, 512, 561, 576, 411, 281, 584, 13, 663, 311, 558, 13, 1079, 11, 309, 307, 13, 50732, 50768, 1079, 11, 309, 307, 4664, 9989, 13, 682, 264, 665, 636, 13, 682, 264, 665, 636, 13, 682, 264, 665, 636, 13, 467, 307, 11, 309, 311, 1333, 295, 51112, 51112, 411, 257, 3410, 13, 639, 390, 472, 295, 411, 452, 2954, 721, 466, 1348, 493, 365, 341, 1715, 390, 445, 51376, 51376, 8407, 322, 7207, 544, 293, 544, 293, 2577, 300, 341, 588, 2199, 1558, 11, 721, 445, 1333, 295, 2100, 51624, 51624], "temperature": 0.0, "avg_logprob": -0.1311340146851771, "compression_ratio": 1.8046511627906976, "no_caption_prob": 5.2250012231525034e-05}, {"id": 196, "seek": 129456, "start": 1314.8, "end": 1319.76, "text": " pulling on thread more and more and seeing that this very simple idea, things just sort of fall", "tokens": [50364, 1057, 558, 13, 407, 300, 311, 1238, 9989, 382, 512, 561, 576, 411, 281, 584, 13, 663, 311, 558, 13, 1079, 11, 309, 307, 13, 50732, 50768, 1079, 11, 309, 307, 4664, 9989, 13, 682, 264, 665, 636, 13, 682, 264, 665, 636, 13, 682, 264, 665, 636, 13, 467, 307, 11, 309, 311, 1333, 295, 51112, 51112, 411, 257, 3410, 13, 639, 390, 472, 295, 411, 452, 2954, 721, 466, 1348, 493, 365, 341, 1715, 390, 445, 51376, 51376, 8407, 322, 7207, 544, 293, 544, 293, 2577, 300, 341, 588, 2199, 1558, 11, 721, 445, 1333, 295, 2100, 51624, 51624], "temperature": 0.0, "avg_logprob": -0.1311340146851771, "compression_ratio": 1.8046511627906976, "no_caption_prob": 5.2250012231525034e-05}, {"id": 197, "seek": 131976, "start": 1319.76, "end": 1327.36, "text": " into place. So because there's really the underlying idea is not very magical or complex.", "tokens": [50364, 666, 1081, 13, 407, 570, 456, 311, 534, 264, 14217, 1558, 307, 406, 588, 12066, 420, 3997, 13, 50744, 50744, 407, 264, 14217, 1558, 307, 300, 291, 362, 613, 979, 378, 433, 13, 407, 498, 291, 584, 11, 370, 2602, 295, 1566, 51084, 51084, 974, 361, 3015, 13, 1479, 22332, 293, 550, 1566, 361, 3015, 13, 1479, 22332, 13, 37045, 11, 558, 11, 281, 483, 257, 6798, 979, 19866, 294, 806, 76, 1373, 13, 5106, 404, 51524, 51524], "temperature": 0.0, "avg_logprob": -0.11564069986343384, "compression_ratio": 1.680473372781065, "no_caption_prob": 8.092326606856659e-05}, {"id": 198, "seek": 131976, "start": 1327.36, "end": 1334.16, "text": " So the underlying idea is that you have these decoders. So if you say, so instead of saying", "tokens": [50364, 666, 1081, 13, 407, 570, 456, 311, 534, 264, 14217, 1558, 307, 406, 588, 12066, 420, 3997, 13, 50744, 50744, 407, 264, 14217, 1558, 307, 300, 291, 362, 613, 979, 378, 433, 13, 407, 498, 291, 584, 11, 370, 2602, 295, 1566, 51084, 51084, 974, 361, 3015, 13, 1479, 22332, 293, 550, 1566, 361, 3015, 13, 1479, 22332, 13, 37045, 11, 558, 11, 281, 483, 257, 6798, 979, 19866, 294, 806, 76, 1373, 13, 5106, 404, 51524, 51524], "temperature": 0.0, "avg_logprob": -0.11564069986343384, "compression_ratio": 1.680473372781065, "no_caption_prob": 8.092326606856659e-05}, {"id": 199, "seek": 131976, "start": 1334.16, "end": 1342.96, "text": " import json.decode and then saying json.decode.string, right, to get a string decoder in elmts.interop", "tokens": [50364, 666, 1081, 13, 407, 570, 456, 311, 534, 264, 14217, 1558, 307, 406, 588, 12066, 420, 3997, 13, 50744, 50744, 407, 264, 14217, 1558, 307, 300, 291, 362, 613, 979, 378, 433, 13, 407, 498, 291, 584, 11, 370, 2602, 295, 1566, 51084, 51084, 974, 361, 3015, 13, 1479, 22332, 293, 550, 1566, 361, 3015, 13, 1479, 22332, 13, 37045, 11, 558, 11, 281, 483, 257, 6798, 979, 19866, 294, 806, 76, 1373, 13, 5106, 404, 51524, 51524], "temperature": 0.0, "avg_logprob": -0.11564069986343384, "compression_ratio": 1.680473372781065, "no_caption_prob": 8.092326606856659e-05}, {"id": 200, "seek": 134296, "start": 1342.96, "end": 1350.4, "text": " with that package, you would say import or sorry, with elmts.json, which is the elm package, you", "tokens": [50364, 365, 300, 7372, 11, 291, 576, 584, 974, 420, 2597, 11, 365, 806, 76, 1373, 13, 73, 3015, 11, 597, 307, 264, 806, 76, 7372, 11, 291, 50736, 50736, 576, 974, 35492, 13, 73, 3015, 13, 1479, 22332, 293, 550, 291, 576, 584, 35492, 13, 73, 3015, 13, 1479, 22332, 13, 37045, 13, 663, 370, 1400, 11, 309, 311, 51224, 51224, 1238, 709, 2293, 264, 912, 3993, 264, 974, 382, 257, 361, 3015, 13, 1479, 22332, 11, 558, 30, 865, 13, 467, 611, 2709, 291, 257, 51540, 51540], "temperature": 0.0, "avg_logprob": -0.1344233406914605, "compression_ratio": 1.6823529411764706, "no_caption_prob": 3.4807388146873564e-05}, {"id": 201, "seek": 134296, "start": 1350.4, "end": 1360.16, "text": " would import ts.json.decode and then you would say ts.json.decode.string. That so far, it's", "tokens": [50364, 365, 300, 7372, 11, 291, 576, 584, 974, 420, 2597, 11, 365, 806, 76, 1373, 13, 73, 3015, 11, 597, 307, 264, 806, 76, 7372, 11, 291, 50736, 50736, 576, 974, 35492, 13, 73, 3015, 13, 1479, 22332, 293, 550, 291, 576, 584, 35492, 13, 73, 3015, 13, 1479, 22332, 13, 37045, 13, 663, 370, 1400, 11, 309, 311, 51224, 51224, 1238, 709, 2293, 264, 912, 3993, 264, 974, 382, 257, 361, 3015, 13, 1479, 22332, 11, 558, 30, 865, 13, 467, 611, 2709, 291, 257, 51540, 51540], "temperature": 0.0, "avg_logprob": -0.1344233406914605, "compression_ratio": 1.6823529411764706, "no_caption_prob": 3.4807388146873564e-05}, {"id": 202, "seek": 134296, "start": 1360.16, "end": 1366.48, "text": " pretty much exactly the same except the import as a json.decode, right? Yeah. It also gives you a", "tokens": [50364, 365, 300, 7372, 11, 291, 576, 584, 974, 420, 2597, 11, 365, 806, 76, 1373, 13, 73, 3015, 11, 597, 307, 264, 806, 76, 7372, 11, 291, 50736, 50736, 576, 974, 35492, 13, 73, 3015, 13, 1479, 22332, 293, 550, 291, 576, 584, 35492, 13, 73, 3015, 13, 1479, 22332, 13, 37045, 13, 663, 370, 1400, 11, 309, 311, 51224, 51224, 1238, 709, 2293, 264, 912, 3993, 264, 974, 382, 257, 361, 3015, 13, 1479, 22332, 11, 558, 30, 865, 13, 467, 611, 2709, 291, 257, 51540, 51540], "temperature": 0.0, "avg_logprob": -0.1344233406914605, "compression_ratio": 1.6823529411764706, "no_caption_prob": 3.4807388146873564e-05}, {"id": 203, "seek": 136648, "start": 1366.48, "end": 1372.96, "text": " decoder, but from ts.json.decode. That's right. That's right. It gives you, yes, exactly. It gives", "tokens": [50364, 979, 19866, 11, 457, 490, 35492, 13, 73, 3015, 13, 1479, 22332, 13, 663, 311, 558, 13, 663, 311, 558, 13, 467, 2709, 291, 11, 2086, 11, 2293, 13, 467, 2709, 50688, 50688, 291, 264, 912, 2010, 295, 979, 19866, 6798, 13, 407, 309, 311, 516, 281, 979, 1429, 666, 257, 6798, 13, 440, 2649, 307, 365, 50952, 50952, 361, 3015, 13, 1479, 22332, 11, 291, 393, 445, 1190, 264, 979, 19866, 365, 35492, 13, 73, 3015, 13, 1479, 22332, 13, 509, 393, 1190, 264, 979, 19866, 293, 456, 311, 51344, 51344, 767, 445, 257, 3890, 806, 76, 13, 73, 3015, 13, 1479, 22332, 833, 264, 13376, 11, 457, 291, 393, 611, 1029, 300, 979, 19866, 337, 1080, 51684, 51684], "temperature": 0.0, "avg_logprob": -0.08451184288400118, "compression_ratio": 1.912621359223301, "no_caption_prob": 4.4000520574627444e-05}, {"id": 204, "seek": 136648, "start": 1372.96, "end": 1378.24, "text": " you the same type of decoder string. So it's going to decode into a string. The difference is with", "tokens": [50364, 979, 19866, 11, 457, 490, 35492, 13, 73, 3015, 13, 1479, 22332, 13, 663, 311, 558, 13, 663, 311, 558, 13, 467, 2709, 291, 11, 2086, 11, 2293, 13, 467, 2709, 50688, 50688, 291, 264, 912, 2010, 295, 979, 19866, 6798, 13, 407, 309, 311, 516, 281, 979, 1429, 666, 257, 6798, 13, 440, 2649, 307, 365, 50952, 50952, 361, 3015, 13, 1479, 22332, 11, 291, 393, 445, 1190, 264, 979, 19866, 365, 35492, 13, 73, 3015, 13, 1479, 22332, 13, 509, 393, 1190, 264, 979, 19866, 293, 456, 311, 51344, 51344, 767, 445, 257, 3890, 806, 76, 13, 73, 3015, 13, 1479, 22332, 833, 264, 13376, 11, 457, 291, 393, 611, 1029, 300, 979, 19866, 337, 1080, 51684, 51684], "temperature": 0.0, "avg_logprob": -0.08451184288400118, "compression_ratio": 1.912621359223301, "no_caption_prob": 4.4000520574627444e-05}, {"id": 205, "seek": 136648, "start": 1378.24, "end": 1386.08, "text": " json.decode, you can just run the decoder with ts.json.decode. You can run the decoder and there's", "tokens": [50364, 979, 19866, 11, 457, 490, 35492, 13, 73, 3015, 13, 1479, 22332, 13, 663, 311, 558, 13, 663, 311, 558, 13, 467, 2709, 291, 11, 2086, 11, 2293, 13, 467, 2709, 50688, 50688, 291, 264, 912, 2010, 295, 979, 19866, 6798, 13, 407, 309, 311, 516, 281, 979, 1429, 666, 257, 6798, 13, 440, 2649, 307, 365, 50952, 50952, 361, 3015, 13, 1479, 22332, 11, 291, 393, 445, 1190, 264, 979, 19866, 365, 35492, 13, 73, 3015, 13, 1479, 22332, 13, 509, 393, 1190, 264, 979, 19866, 293, 456, 311, 51344, 51344, 767, 445, 257, 3890, 806, 76, 13, 73, 3015, 13, 1479, 22332, 833, 264, 13376, 11, 457, 291, 393, 611, 1029, 300, 979, 19866, 337, 1080, 51684, 51684], "temperature": 0.0, "avg_logprob": -0.08451184288400118, "compression_ratio": 1.912621359223301, "no_caption_prob": 4.4000520574627444e-05}, {"id": 206, "seek": 136648, "start": 1386.08, "end": 1392.88, "text": " actually just a regular elm.json.decode under the hood, but you can also ask that decoder for its", "tokens": [50364, 979, 19866, 11, 457, 490, 35492, 13, 73, 3015, 13, 1479, 22332, 13, 663, 311, 558, 13, 663, 311, 558, 13, 467, 2709, 291, 11, 2086, 11, 2293, 13, 467, 2709, 50688, 50688, 291, 264, 912, 2010, 295, 979, 19866, 6798, 13, 407, 309, 311, 516, 281, 979, 1429, 666, 257, 6798, 13, 440, 2649, 307, 365, 50952, 50952, 361, 3015, 13, 1479, 22332, 11, 291, 393, 445, 1190, 264, 979, 19866, 365, 35492, 13, 73, 3015, 13, 1479, 22332, 13, 509, 393, 1190, 264, 979, 19866, 293, 456, 311, 51344, 51344, 767, 445, 257, 3890, 806, 76, 13, 73, 3015, 13, 1479, 22332, 833, 264, 13376, 11, 457, 291, 393, 611, 1029, 300, 979, 19866, 337, 1080, 51684, 51684], "temperature": 0.0, "avg_logprob": -0.08451184288400118, "compression_ratio": 1.912621359223301, "no_caption_prob": 4.4000520574627444e-05}, {"id": 207, "seek": 139288, "start": 1392.88, "end": 1399.2, "text": " TypeScript type. Oh. And there's the magic. There's the magic. That's the only piece of magic. Now,", "tokens": [50364, 15576, 14237, 2010, 13, 876, 13, 400, 456, 311, 264, 5585, 13, 821, 311, 264, 5585, 13, 663, 311, 264, 787, 2522, 295, 5585, 13, 823, 11, 50680, 50680, 382, 257, 4195, 11, 291, 500, 380, 767, 1562, 360, 300, 11, 457, 264, 46593, 11, 370, 456, 311, 341, 806, 76, 1373, 13, 5106, 404, 13, 77, 14395, 51064, 51064, 7372, 13, 400, 437, 300, 775, 307, 309, 12451, 1660, 300, 538, 3365, 428, 35492, 13, 73, 3015, 13, 1479, 26560, 433, 337, 641, 2010, 51576, 51576, 1589, 13, 286, 1062, 312, 516, 322, 257, 27747, 510, 11, 457, 286, 478, 6369, 11, 577, 775, 309, 360, 300, 30, 1012, 775, 309, 51808, 51808], "temperature": 0.0, "avg_logprob": -0.10494641599984005, "compression_ratio": 1.6483050847457628, "no_caption_prob": 1.3007027519051917e-05}, {"id": 208, "seek": 139288, "start": 1399.2, "end": 1406.88, "text": " as a user, you don't actually ever do that, but the tooling, so there's this elmts.interop.npm", "tokens": [50364, 15576, 14237, 2010, 13, 876, 13, 400, 456, 311, 264, 5585, 13, 821, 311, 264, 5585, 13, 663, 311, 264, 787, 2522, 295, 5585, 13, 823, 11, 50680, 50680, 382, 257, 4195, 11, 291, 500, 380, 767, 1562, 360, 300, 11, 457, 264, 46593, 11, 370, 456, 311, 341, 806, 76, 1373, 13, 5106, 404, 13, 77, 14395, 51064, 51064, 7372, 13, 400, 437, 300, 775, 307, 309, 12451, 1660, 300, 538, 3365, 428, 35492, 13, 73, 3015, 13, 1479, 26560, 433, 337, 641, 2010, 51576, 51576, 1589, 13, 286, 1062, 312, 516, 322, 257, 27747, 510, 11, 457, 286, 478, 6369, 11, 577, 775, 309, 360, 300, 30, 1012, 775, 309, 51808, 51808], "temperature": 0.0, "avg_logprob": -0.10494641599984005, "compression_ratio": 1.6483050847457628, "no_caption_prob": 1.3007027519051917e-05}, {"id": 209, "seek": 139288, "start": 1406.88, "end": 1417.1200000000001, "text": " package. And what that does is it leverages that by asking your ts.json.decoders for their type", "tokens": [50364, 15576, 14237, 2010, 13, 876, 13, 400, 456, 311, 264, 5585, 13, 821, 311, 264, 5585, 13, 663, 311, 264, 787, 2522, 295, 5585, 13, 823, 11, 50680, 50680, 382, 257, 4195, 11, 291, 500, 380, 767, 1562, 360, 300, 11, 457, 264, 46593, 11, 370, 456, 311, 341, 806, 76, 1373, 13, 5106, 404, 13, 77, 14395, 51064, 51064, 7372, 13, 400, 437, 300, 775, 307, 309, 12451, 1660, 300, 538, 3365, 428, 35492, 13, 73, 3015, 13, 1479, 26560, 433, 337, 641, 2010, 51576, 51576, 1589, 13, 286, 1062, 312, 516, 322, 257, 27747, 510, 11, 457, 286, 478, 6369, 11, 577, 775, 309, 360, 300, 30, 1012, 775, 309, 51808, 51808], "temperature": 0.0, "avg_logprob": -0.10494641599984005, "compression_ratio": 1.6483050847457628, "no_caption_prob": 1.3007027519051917e-05}, {"id": 210, "seek": 139288, "start": 1417.1200000000001, "end": 1421.7600000000002, "text": " information. I might be going on a tangent here, but I'm curious, how does it do that? How does it", "tokens": [50364, 15576, 14237, 2010, 13, 876, 13, 400, 456, 311, 264, 5585, 13, 821, 311, 264, 5585, 13, 663, 311, 264, 787, 2522, 295, 5585, 13, 823, 11, 50680, 50680, 382, 257, 4195, 11, 291, 500, 380, 767, 1562, 360, 300, 11, 457, 264, 46593, 11, 370, 456, 311, 341, 806, 76, 1373, 13, 5106, 404, 13, 77, 14395, 51064, 51064, 7372, 13, 400, 437, 300, 775, 307, 309, 12451, 1660, 300, 538, 3365, 428, 35492, 13, 73, 3015, 13, 1479, 26560, 433, 337, 641, 2010, 51576, 51576, 1589, 13, 286, 1062, 312, 516, 322, 257, 27747, 510, 11, 457, 286, 478, 6369, 11, 577, 775, 309, 360, 300, 30, 1012, 775, 309, 51808, 51808], "temperature": 0.0, "avg_logprob": -0.10494641599984005, "compression_ratio": 1.6483050847457628, "no_caption_prob": 1.3007027519051917e-05}, {"id": 211, "seek": 142176, "start": 1421.76, "end": 1427.92, "text": " go and fetch all those? Right. No, it's a great question. It's not a tangent at all. So yeah,", "tokens": [50364, 352, 293, 23673, 439, 729, 30, 1779, 13, 883, 11, 309, 311, 257, 869, 1168, 13, 467, 311, 406, 257, 27747, 412, 439, 13, 407, 1338, 11, 50672, 50672, 718, 311, 751, 466, 300, 13, 407, 437, 309, 775, 307, 291, 6964, 257, 10088, 11, 5751, 404, 21988, 13, 51048, 51048, 4402, 309, 643, 281, 362, 300, 1315, 30, 407, 264, 636, 286, 478, 884, 309, 294, 264, 12855, 40, 11, 51272, 51308, 309, 4960, 300, 1315, 538, 10286, 11, 293, 550, 291, 393, 1319, 264, 4846, 3991, 1228, 257, 12855, 40, 7166, 13, 51664, 51720], "temperature": 0.0, "avg_logprob": -0.09302782525821608, "compression_ratio": 1.5227272727272727, "no_caption_prob": 5.39093634870369e-05}, {"id": 212, "seek": 142176, "start": 1427.92, "end": 1435.44, "text": " let's talk about that. So what it does is you define a module, Interop definitions.", "tokens": [50364, 352, 293, 23673, 439, 729, 30, 1779, 13, 883, 11, 309, 311, 257, 869, 1168, 13, 467, 311, 406, 257, 27747, 412, 439, 13, 407, 1338, 11, 50672, 50672, 718, 311, 751, 466, 300, 13, 407, 437, 309, 775, 307, 291, 6964, 257, 10088, 11, 5751, 404, 21988, 13, 51048, 51048, 4402, 309, 643, 281, 362, 300, 1315, 30, 407, 264, 636, 286, 478, 884, 309, 294, 264, 12855, 40, 11, 51272, 51308, 309, 4960, 300, 1315, 538, 10286, 11, 293, 550, 291, 393, 1319, 264, 4846, 3991, 1228, 257, 12855, 40, 7166, 13, 51664, 51720], "temperature": 0.0, "avg_logprob": -0.09302782525821608, "compression_ratio": 1.5227272727272727, "no_caption_prob": 5.39093634870369e-05}, {"id": 213, "seek": 142176, "start": 1435.44, "end": 1439.92, "text": " Does it need to have that name? So the way I'm doing it in the CLI,", "tokens": [50364, 352, 293, 23673, 439, 729, 30, 1779, 13, 883, 11, 309, 311, 257, 869, 1168, 13, 467, 311, 406, 257, 27747, 412, 439, 13, 407, 1338, 11, 50672, 50672, 718, 311, 751, 466, 300, 13, 407, 437, 309, 775, 307, 291, 6964, 257, 10088, 11, 5751, 404, 21988, 13, 51048, 51048, 4402, 309, 643, 281, 362, 300, 1315, 30, 407, 264, 636, 286, 478, 884, 309, 294, 264, 12855, 40, 11, 51272, 51308, 309, 4960, 300, 1315, 538, 10286, 11, 293, 550, 291, 393, 1319, 264, 4846, 3991, 1228, 257, 12855, 40, 7166, 13, 51664, 51720], "temperature": 0.0, "avg_logprob": -0.09302782525821608, "compression_ratio": 1.5227272727272727, "no_caption_prob": 5.39093634870369e-05}, {"id": 214, "seek": 142176, "start": 1440.64, "end": 1447.76, "text": " it uses that name by convention, and then you can change the input file using a CLI flag.", "tokens": [50364, 352, 293, 23673, 439, 729, 30, 1779, 13, 883, 11, 309, 311, 257, 869, 1168, 13, 467, 311, 406, 257, 27747, 412, 439, 13, 407, 1338, 11, 50672, 50672, 718, 311, 751, 466, 300, 13, 407, 437, 309, 775, 307, 291, 6964, 257, 10088, 11, 5751, 404, 21988, 13, 51048, 51048, 4402, 309, 643, 281, 362, 300, 1315, 30, 407, 264, 636, 286, 478, 884, 309, 294, 264, 12855, 40, 11, 51272, 51308, 309, 4960, 300, 1315, 538, 10286, 11, 293, 550, 291, 393, 1319, 264, 4846, 3991, 1228, 257, 12855, 40, 7166, 13, 51664, 51720], "temperature": 0.0, "avg_logprob": -0.09302782525821608, "compression_ratio": 1.5227272727272727, "no_caption_prob": 5.39093634870369e-05}, {"id": 215, "seek": 144776, "start": 1447.76, "end": 1459.44, "text": " So, but the main idea is that you define your flags, your elm to JSON ports, and your elm to", "tokens": [50364, 407, 11, 457, 264, 2135, 1558, 307, 300, 291, 6964, 428, 23265, 11, 428, 806, 76, 281, 31828, 18160, 11, 293, 428, 806, 76, 281, 50948, 50948, 15576, 14237, 18160, 293, 428, 15576, 14237, 281, 806, 76, 18160, 13, 400, 291, 6964, 257, 979, 19866, 337, 264, 23265, 293, 291, 51312, 51312, 6964, 257, 979, 19866, 337, 428, 806, 76, 281, 31828, 18160, 11, 337, 428, 806, 76, 281, 15576, 14237, 18160, 13, 440, 636, 309, 1985, 307, 51652, 51652], "temperature": 0.0, "avg_logprob": -0.148563175666623, "compression_ratio": 1.993103448275862, "no_caption_prob": 4.3317992094671354e-05}, {"id": 216, "seek": 144776, "start": 1459.44, "end": 1466.72, "text": " TypeScript ports and your TypeScript to elm ports. And you define a decoder for the flags and you", "tokens": [50364, 407, 11, 457, 264, 2135, 1558, 307, 300, 291, 6964, 428, 23265, 11, 428, 806, 76, 281, 31828, 18160, 11, 293, 428, 806, 76, 281, 50948, 50948, 15576, 14237, 18160, 293, 428, 15576, 14237, 281, 806, 76, 18160, 13, 400, 291, 6964, 257, 979, 19866, 337, 264, 23265, 293, 291, 51312, 51312, 6964, 257, 979, 19866, 337, 428, 806, 76, 281, 31828, 18160, 11, 337, 428, 806, 76, 281, 15576, 14237, 18160, 13, 440, 636, 309, 1985, 307, 51652, 51652], "temperature": 0.0, "avg_logprob": -0.148563175666623, "compression_ratio": 1.993103448275862, "no_caption_prob": 4.3317992094671354e-05}, {"id": 217, "seek": 144776, "start": 1466.72, "end": 1473.52, "text": " define a decoder for your elm to JSON ports, for your elm to TypeScript ports. The way it works is", "tokens": [50364, 407, 11, 457, 264, 2135, 1558, 307, 300, 291, 6964, 428, 23265, 11, 428, 806, 76, 281, 31828, 18160, 11, 293, 428, 806, 76, 281, 50948, 50948, 15576, 14237, 18160, 293, 428, 15576, 14237, 281, 806, 76, 18160, 13, 400, 291, 6964, 257, 979, 19866, 337, 264, 23265, 293, 291, 51312, 51312, 6964, 257, 979, 19866, 337, 428, 806, 76, 281, 31828, 18160, 11, 337, 428, 806, 76, 281, 15576, 14237, 18160, 13, 440, 636, 309, 1985, 307, 51652, 51652], "temperature": 0.0, "avg_logprob": -0.148563175666623, "compression_ratio": 1.993103448275862, "no_caption_prob": 4.3317992094671354e-05}, {"id": 218, "seek": 147352, "start": 1473.52, "end": 1480.48, "text": " you have your Interop definitions module. And in that you just expose a top level record called", "tokens": [50364, 291, 362, 428, 5751, 404, 21988, 10088, 13, 400, 294, 300, 291, 445, 19219, 257, 1192, 1496, 2136, 1219, 50712, 50712, 5751, 404, 13, 400, 300, 575, 257, 281, 806, 76, 11, 490, 806, 76, 11, 293, 23265, 13, 3950, 1045, 4190, 366, 445, 516, 281, 312, 51092, 51092, 35492, 13, 73, 3015, 2058, 378, 433, 293, 35492, 13, 73, 3015, 979, 378, 433, 13, 407, 337, 264, 23265, 11, 291, 643, 257, 35492, 13, 73, 3015, 979, 19866, 570, 51552, 51552], "temperature": 0.0, "avg_logprob": -0.12953314327058338, "compression_ratio": 1.6184971098265897, "no_caption_prob": 0.0001007073005894199}, {"id": 219, "seek": 147352, "start": 1480.48, "end": 1488.08, "text": " Interop. And that has a to elm, from elm, and flags. Those three values are just going to be", "tokens": [50364, 291, 362, 428, 5751, 404, 21988, 10088, 13, 400, 294, 300, 291, 445, 19219, 257, 1192, 1496, 2136, 1219, 50712, 50712, 5751, 404, 13, 400, 300, 575, 257, 281, 806, 76, 11, 490, 806, 76, 11, 293, 23265, 13, 3950, 1045, 4190, 366, 445, 516, 281, 312, 51092, 51092, 35492, 13, 73, 3015, 2058, 378, 433, 293, 35492, 13, 73, 3015, 979, 378, 433, 13, 407, 337, 264, 23265, 11, 291, 643, 257, 35492, 13, 73, 3015, 979, 19866, 570, 51552, 51552], "temperature": 0.0, "avg_logprob": -0.12953314327058338, "compression_ratio": 1.6184971098265897, "no_caption_prob": 0.0001007073005894199}, {"id": 220, "seek": 147352, "start": 1488.08, "end": 1497.28, "text": " ts.json encoders and ts.json decoders. So for the flags, you need a ts.json decoder because", "tokens": [50364, 291, 362, 428, 5751, 404, 21988, 10088, 13, 400, 294, 300, 291, 445, 19219, 257, 1192, 1496, 2136, 1219, 50712, 50712, 5751, 404, 13, 400, 300, 575, 257, 281, 806, 76, 11, 490, 806, 76, 11, 293, 23265, 13, 3950, 1045, 4190, 366, 445, 516, 281, 312, 51092, 51092, 35492, 13, 73, 3015, 2058, 378, 433, 293, 35492, 13, 73, 3015, 979, 378, 433, 13, 407, 337, 264, 23265, 11, 291, 643, 257, 35492, 13, 73, 3015, 979, 19866, 570, 51552, 51552], "temperature": 0.0, "avg_logprob": -0.12953314327058338, "compression_ratio": 1.6184971098265897, "no_caption_prob": 0.0001007073005894199}, {"id": 221, "seek": 149728, "start": 1497.28, "end": 1504.8799999999999, "text": " you're decoding values from TypeScript to elm. For the to elm, which is going to be values flowing", "tokens": [50364, 291, 434, 979, 8616, 4190, 490, 15576, 14237, 281, 806, 76, 13, 1171, 264, 281, 806, 76, 11, 597, 307, 516, 281, 312, 4190, 13974, 50744, 50744, 490, 15576, 14237, 281, 806, 76, 11, 291, 611, 6964, 257, 979, 19866, 13, 400, 729, 366, 516, 281, 312, 27415, 294, 11, 295, 1164, 11, 51124, 51124, 365, 44951, 13, 400, 550, 337, 428, 490, 806, 76, 11, 597, 307, 516, 281, 312, 428, 18160, 516, 490, 806, 76, 51412, 51412, 281, 15576, 14237, 11, 291, 6964, 364, 2058, 19866, 13, 407, 729, 366, 264, 1045, 721, 300, 291, 976, 281, 428, 5751, 404, 51752, 51752], "temperature": 0.0, "avg_logprob": -0.05285687266655688, "compression_ratio": 1.916256157635468, "no_caption_prob": 4.683636871050112e-05}, {"id": 222, "seek": 149728, "start": 1504.8799999999999, "end": 1512.48, "text": " from TypeScript to elm, you also define a decoder. And those are going to be wired in, of course,", "tokens": [50364, 291, 434, 979, 8616, 4190, 490, 15576, 14237, 281, 806, 76, 13, 1171, 264, 281, 806, 76, 11, 597, 307, 516, 281, 312, 4190, 13974, 50744, 50744, 490, 15576, 14237, 281, 806, 76, 11, 291, 611, 6964, 257, 979, 19866, 13, 400, 729, 366, 516, 281, 312, 27415, 294, 11, 295, 1164, 11, 51124, 51124, 365, 44951, 13, 400, 550, 337, 428, 490, 806, 76, 11, 597, 307, 516, 281, 312, 428, 18160, 516, 490, 806, 76, 51412, 51412, 281, 15576, 14237, 11, 291, 6964, 364, 2058, 19866, 13, 407, 729, 366, 264, 1045, 721, 300, 291, 976, 281, 428, 5751, 404, 51752, 51752], "temperature": 0.0, "avg_logprob": -0.05285687266655688, "compression_ratio": 1.916256157635468, "no_caption_prob": 4.683636871050112e-05}, {"id": 223, "seek": 149728, "start": 1512.48, "end": 1518.24, "text": " with subscriptions. And then for your from elm, which is going to be your ports going from elm", "tokens": [50364, 291, 434, 979, 8616, 4190, 490, 15576, 14237, 281, 806, 76, 13, 1171, 264, 281, 806, 76, 11, 597, 307, 516, 281, 312, 4190, 13974, 50744, 50744, 490, 15576, 14237, 281, 806, 76, 11, 291, 611, 6964, 257, 979, 19866, 13, 400, 729, 366, 516, 281, 312, 27415, 294, 11, 295, 1164, 11, 51124, 51124, 365, 44951, 13, 400, 550, 337, 428, 490, 806, 76, 11, 597, 307, 516, 281, 312, 428, 18160, 516, 490, 806, 76, 51412, 51412, 281, 15576, 14237, 11, 291, 6964, 364, 2058, 19866, 13, 407, 729, 366, 264, 1045, 721, 300, 291, 976, 281, 428, 5751, 404, 51752, 51752], "temperature": 0.0, "avg_logprob": -0.05285687266655688, "compression_ratio": 1.916256157635468, "no_caption_prob": 4.683636871050112e-05}, {"id": 224, "seek": 149728, "start": 1518.24, "end": 1525.04, "text": " to TypeScript, you define an encoder. So those are the three things that you give to your Interop", "tokens": [50364, 291, 434, 979, 8616, 4190, 490, 15576, 14237, 281, 806, 76, 13, 1171, 264, 281, 806, 76, 11, 597, 307, 516, 281, 312, 4190, 13974, 50744, 50744, 490, 15576, 14237, 281, 806, 76, 11, 291, 611, 6964, 257, 979, 19866, 13, 400, 729, 366, 516, 281, 312, 27415, 294, 11, 295, 1164, 11, 51124, 51124, 365, 44951, 13, 400, 550, 337, 428, 490, 806, 76, 11, 597, 307, 516, 281, 312, 428, 18160, 516, 490, 806, 76, 51412, 51412, 281, 15576, 14237, 11, 291, 6964, 364, 2058, 19866, 13, 407, 729, 366, 264, 1045, 721, 300, 291, 976, 281, 428, 5751, 404, 51752, 51752], "temperature": 0.0, "avg_logprob": -0.05285687266655688, "compression_ratio": 1.916256157635468, "no_caption_prob": 4.683636871050112e-05}, {"id": 225, "seek": 152504, "start": 1525.04, "end": 1532.72, "text": " definitions. And what those give you is, so elm ts Interop, the CLI, takes that one module,", "tokens": [50364, 21988, 13, 400, 437, 729, 976, 291, 307, 11, 370, 806, 76, 35492, 5751, 404, 11, 264, 12855, 40, 11, 2516, 300, 472, 10088, 11, 50748, 50748, 597, 8306, 439, 295, 264, 1589, 466, 428, 5751, 404, 11, 428, 23265, 11, 428, 18160, 281, 806, 76, 11, 51012, 51012, 428, 18160, 490, 806, 76, 13, 400, 300, 8306, 439, 295, 264, 1589, 466, 264, 3467, 300, 486, 3095, 294, 293, 51388, 51388, 484, 807, 428, 5751, 404, 13, 400, 370, 439, 309, 775, 307, 309, 445, 2516, 300, 293, 309, 2516, 264, 2058, 378, 433, 293, 51704, 51704], "temperature": 0.0, "avg_logprob": -0.08176831245422363, "compression_ratio": 1.904040404040404, "no_caption_prob": 2.627432331792079e-05}, {"id": 226, "seek": 152504, "start": 1532.72, "end": 1538.0, "text": " which contains all of the information about your Interop, your flags, your ports to elm,", "tokens": [50364, 21988, 13, 400, 437, 729, 976, 291, 307, 11, 370, 806, 76, 35492, 5751, 404, 11, 264, 12855, 40, 11, 2516, 300, 472, 10088, 11, 50748, 50748, 597, 8306, 439, 295, 264, 1589, 466, 428, 5751, 404, 11, 428, 23265, 11, 428, 18160, 281, 806, 76, 11, 51012, 51012, 428, 18160, 490, 806, 76, 13, 400, 300, 8306, 439, 295, 264, 1589, 466, 264, 3467, 300, 486, 3095, 294, 293, 51388, 51388, 484, 807, 428, 5751, 404, 13, 400, 370, 439, 309, 775, 307, 309, 445, 2516, 300, 293, 309, 2516, 264, 2058, 378, 433, 293, 51704, 51704], "temperature": 0.0, "avg_logprob": -0.08176831245422363, "compression_ratio": 1.904040404040404, "no_caption_prob": 2.627432331792079e-05}, {"id": 227, "seek": 152504, "start": 1538.0, "end": 1545.52, "text": " your ports from elm. And that contains all of the information about the types that will flow in and", "tokens": [50364, 21988, 13, 400, 437, 729, 976, 291, 307, 11, 370, 806, 76, 35492, 5751, 404, 11, 264, 12855, 40, 11, 2516, 300, 472, 10088, 11, 50748, 50748, 597, 8306, 439, 295, 264, 1589, 466, 428, 5751, 404, 11, 428, 23265, 11, 428, 18160, 281, 806, 76, 11, 51012, 51012, 428, 18160, 490, 806, 76, 13, 400, 300, 8306, 439, 295, 264, 1589, 466, 264, 3467, 300, 486, 3095, 294, 293, 51388, 51388, 484, 807, 428, 5751, 404, 13, 400, 370, 439, 309, 775, 307, 309, 445, 2516, 300, 293, 309, 2516, 264, 2058, 378, 433, 293, 51704, 51704], "temperature": 0.0, "avg_logprob": -0.08176831245422363, "compression_ratio": 1.904040404040404, "no_caption_prob": 2.627432331792079e-05}, {"id": 228, "seek": 152504, "start": 1545.52, "end": 1551.84, "text": " out through your Interop. And so all it does is it just takes that and it takes the encoders and", "tokens": [50364, 21988, 13, 400, 437, 729, 976, 291, 307, 11, 370, 806, 76, 35492, 5751, 404, 11, 264, 12855, 40, 11, 2516, 300, 472, 10088, 11, 50748, 50748, 597, 8306, 439, 295, 264, 1589, 466, 428, 5751, 404, 11, 428, 23265, 11, 428, 18160, 281, 806, 76, 11, 51012, 51012, 428, 18160, 490, 806, 76, 13, 400, 300, 8306, 439, 295, 264, 1589, 466, 264, 3467, 300, 486, 3095, 294, 293, 51388, 51388, 484, 807, 428, 5751, 404, 13, 400, 370, 439, 309, 775, 307, 309, 445, 2516, 300, 293, 309, 2516, 264, 2058, 378, 433, 293, 51704, 51704], "temperature": 0.0, "avg_logprob": -0.08176831245422363, "compression_ratio": 1.904040404040404, "no_caption_prob": 2.627432331792079e-05}, {"id": 229, "seek": 155184, "start": 1551.84, "end": 1556.9599999999998, "text": " decoders that you define there, and it creates a little elm app that just imports that value.", "tokens": [50364, 979, 378, 433, 300, 291, 6964, 456, 11, 293, 309, 7829, 257, 707, 806, 76, 724, 300, 445, 41596, 300, 2158, 13, 50620, 50620, 400, 550, 309, 4960, 300, 281, 8460, 281, 1029, 437, 264, 15576, 14237, 3467, 366, 445, 1228, 300, 1908, 9362, 50996, 50996, 300, 311, 644, 295, 264, 35492, 13, 73, 3015, 7372, 13, 407, 300, 311, 439, 264, 5585, 300, 456, 307, 13, 400, 550, 490, 456, 11, 51308, 51308, 309, 15182, 428, 10833, 15576, 14237, 27606, 3991, 11, 597, 2709, 291, 264, 18762, 72, 50, 1288, 293, 2010, 51604, 51604], "temperature": 0.0, "avg_logprob": -0.08754897363407095, "compression_ratio": 1.6872246696035242, "no_caption_prob": 5.064288779976778e-05}, {"id": 230, "seek": 155184, "start": 1556.9599999999998, "end": 1564.48, "text": " And then it uses that to generate to ask what the TypeScript types are just using that public API", "tokens": [50364, 979, 378, 433, 300, 291, 6964, 456, 11, 293, 309, 7829, 257, 707, 806, 76, 724, 300, 445, 41596, 300, 2158, 13, 50620, 50620, 400, 550, 309, 4960, 300, 281, 8460, 281, 1029, 437, 264, 15576, 14237, 3467, 366, 445, 1228, 300, 1908, 9362, 50996, 50996, 300, 311, 644, 295, 264, 35492, 13, 73, 3015, 7372, 13, 407, 300, 311, 439, 264, 5585, 300, 456, 307, 13, 400, 550, 490, 456, 11, 51308, 51308, 309, 15182, 428, 10833, 15576, 14237, 27606, 3991, 11, 597, 2709, 291, 264, 18762, 72, 50, 1288, 293, 2010, 51604, 51604], "temperature": 0.0, "avg_logprob": -0.08754897363407095, "compression_ratio": 1.6872246696035242, "no_caption_prob": 5.064288779976778e-05}, {"id": 231, "seek": 155184, "start": 1564.48, "end": 1570.72, "text": " that's part of the ts.json package. So that's all the magic that there is. And then from there,", "tokens": [50364, 979, 378, 433, 300, 291, 6964, 456, 11, 293, 309, 7829, 257, 707, 806, 76, 724, 300, 445, 41596, 300, 2158, 13, 50620, 50620, 400, 550, 309, 4960, 300, 281, 8460, 281, 1029, 437, 264, 15576, 14237, 3467, 366, 445, 1228, 300, 1908, 9362, 50996, 50996, 300, 311, 644, 295, 264, 35492, 13, 73, 3015, 7372, 13, 407, 300, 311, 439, 264, 5585, 300, 456, 307, 13, 400, 550, 490, 456, 11, 51308, 51308, 309, 15182, 428, 10833, 15576, 14237, 27606, 3991, 11, 597, 2709, 291, 264, 18762, 72, 50, 1288, 293, 2010, 51604, 51604], "temperature": 0.0, "avg_logprob": -0.08754897363407095, "compression_ratio": 1.6872246696035242, "no_caption_prob": 5.064288779976778e-05}, {"id": 232, "seek": 155184, "start": 1570.72, "end": 1576.6399999999999, "text": " it builds your generated TypeScript declaration file, which gives you the IntelliSense and type", "tokens": [50364, 979, 378, 433, 300, 291, 6964, 456, 11, 293, 309, 7829, 257, 707, 806, 76, 724, 300, 445, 41596, 300, 2158, 13, 50620, 50620, 400, 550, 309, 4960, 300, 281, 8460, 281, 1029, 437, 264, 15576, 14237, 3467, 366, 445, 1228, 300, 1908, 9362, 50996, 50996, 300, 311, 644, 295, 264, 35492, 13, 73, 3015, 7372, 13, 407, 300, 311, 439, 264, 5585, 300, 456, 307, 13, 400, 550, 490, 456, 11, 51308, 51308, 309, 15182, 428, 10833, 15576, 14237, 27606, 3991, 11, 597, 2709, 291, 264, 18762, 72, 50, 1288, 293, 2010, 51604, 51604], "temperature": 0.0, "avg_logprob": -0.08754897363407095, "compression_ratio": 1.6872246696035242, "no_caption_prob": 5.064288779976778e-05}, {"id": 233, "seek": 157664, "start": 1576.64, "end": 1582.8000000000002, "text": " safety in your TypeScript code. So that's all it is. And then there's a module that you use to", "tokens": [50364, 4514, 294, 428, 15576, 14237, 3089, 13, 407, 300, 311, 439, 309, 307, 13, 400, 550, 456, 311, 257, 10088, 300, 291, 764, 281, 50672, 50720, 1333, 295, 38745, 5256, 300, 293, 764, 300, 5751, 404, 293, 291, 2845, 428, 18160, 807, 456, 13, 407, 291, 500, 380, 51044, 51044, 767, 19219, 428, 18160, 13, 509, 500, 380, 6964, 428, 1065, 18160, 13, 509, 764, 613, 806, 76, 35492, 5751, 404, 18160, 11, 51384, 51384, 293, 309, 1333, 295, 25831, 721, 337, 291, 293, 11335, 721, 807, 729, 18160, 13, 51592, 51592], "temperature": 0.0, "avg_logprob": -0.07830514299108628, "compression_ratio": 1.793103448275862, "no_caption_prob": 2.0144858353887685e-05}, {"id": 234, "seek": 157664, "start": 1583.76, "end": 1590.24, "text": " sort of encapsulate that and use that Interop and you send your ports through there. So you don't", "tokens": [50364, 4514, 294, 428, 15576, 14237, 3089, 13, 407, 300, 311, 439, 309, 307, 13, 400, 550, 456, 311, 257, 10088, 300, 291, 764, 281, 50672, 50720, 1333, 295, 38745, 5256, 300, 293, 764, 300, 5751, 404, 293, 291, 2845, 428, 18160, 807, 456, 13, 407, 291, 500, 380, 51044, 51044, 767, 19219, 428, 18160, 13, 509, 500, 380, 6964, 428, 1065, 18160, 13, 509, 764, 613, 806, 76, 35492, 5751, 404, 18160, 11, 51384, 51384, 293, 309, 1333, 295, 25831, 721, 337, 291, 293, 11335, 721, 807, 729, 18160, 13, 51592, 51592], "temperature": 0.0, "avg_logprob": -0.07830514299108628, "compression_ratio": 1.793103448275862, "no_caption_prob": 2.0144858353887685e-05}, {"id": 235, "seek": 157664, "start": 1590.24, "end": 1597.0400000000002, "text": " actually expose your ports. You don't define your own ports. You use these elm ts Interop ports,", "tokens": [50364, 4514, 294, 428, 15576, 14237, 3089, 13, 407, 300, 311, 439, 309, 307, 13, 400, 550, 456, 311, 257, 10088, 300, 291, 764, 281, 50672, 50720, 1333, 295, 38745, 5256, 300, 293, 764, 300, 5751, 404, 293, 291, 2845, 428, 18160, 807, 456, 13, 407, 291, 500, 380, 51044, 51044, 767, 19219, 428, 18160, 13, 509, 500, 380, 6964, 428, 1065, 18160, 13, 509, 764, 613, 806, 76, 35492, 5751, 404, 18160, 11, 51384, 51384, 293, 309, 1333, 295, 25831, 721, 337, 291, 293, 11335, 721, 807, 729, 18160, 13, 51592, 51592], "temperature": 0.0, "avg_logprob": -0.07830514299108628, "compression_ratio": 1.793103448275862, "no_caption_prob": 2.0144858353887685e-05}, {"id": 236, "seek": 157664, "start": 1597.0400000000002, "end": 1601.2, "text": " and it sort of wraps things for you and passes things through those ports.", "tokens": [50364, 4514, 294, 428, 15576, 14237, 3089, 13, 407, 300, 311, 439, 309, 307, 13, 400, 550, 456, 311, 257, 10088, 300, 291, 764, 281, 50672, 50720, 1333, 295, 38745, 5256, 300, 293, 764, 300, 5751, 404, 293, 291, 2845, 428, 18160, 807, 456, 13, 407, 291, 500, 380, 51044, 51044, 767, 19219, 428, 18160, 13, 509, 500, 380, 6964, 428, 1065, 18160, 13, 509, 764, 613, 806, 76, 35492, 5751, 404, 18160, 11, 51384, 51384, 293, 309, 1333, 295, 25831, 721, 337, 291, 293, 11335, 721, 807, 729, 18160, 13, 51592, 51592], "temperature": 0.0, "avg_logprob": -0.07830514299108628, "compression_ratio": 1.793103448275862, "no_caption_prob": 2.0144858353887685e-05}, {"id": 237, "seek": 160120, "start": 1601.2, "end": 1609.3600000000001, "text": " Gotcha. All right. So let's go back to ts.json maybe. Sorry. So you mentioned you have decoders", "tokens": [50364, 42109, 13, 1057, 558, 13, 407, 718, 311, 352, 646, 281, 35492, 13, 73, 3015, 1310, 13, 4919, 13, 407, 291, 2835, 291, 362, 979, 378, 433, 50772, 50772, 293, 2058, 378, 433, 11, 597, 574, 588, 2531, 281, 361, 3015, 13, 1479, 22332, 293, 361, 3015, 13, 268, 22332, 13, 407, 291, 2729, 264, 51076, 51076, 1365, 295, 979, 1429, 13, 37045, 13, 400, 286, 478, 17939, 300, 291, 434, 1228, 264, 912, 6435, 15902, 13, 51520, 51520, 407, 291, 393, 35925, 552, 1214, 445, 411, 321, 1143, 281, 365, 361, 3015, 13, 1479, 22332, 293, 2058, 1429, 13, 51760, 51760], "temperature": 0.0, "avg_logprob": -0.12319862842559814, "compression_ratio": 1.6543778801843319, "no_caption_prob": 4.757497299578972e-05}, {"id": 238, "seek": 160120, "start": 1609.3600000000001, "end": 1615.44, "text": " and encoders, which look very similar to json.decode and json.encode. So you gave the", "tokens": [50364, 42109, 13, 1057, 558, 13, 407, 718, 311, 352, 646, 281, 35492, 13, 73, 3015, 1310, 13, 4919, 13, 407, 291, 2835, 291, 362, 979, 378, 433, 50772, 50772, 293, 2058, 378, 433, 11, 597, 574, 588, 2531, 281, 361, 3015, 13, 1479, 22332, 293, 361, 3015, 13, 268, 22332, 13, 407, 291, 2729, 264, 51076, 51076, 1365, 295, 979, 1429, 13, 37045, 13, 400, 286, 478, 17939, 300, 291, 434, 1228, 264, 912, 6435, 15902, 13, 51520, 51520, 407, 291, 393, 35925, 552, 1214, 445, 411, 321, 1143, 281, 365, 361, 3015, 13, 1479, 22332, 293, 2058, 1429, 13, 51760, 51760], "temperature": 0.0, "avg_logprob": -0.12319862842559814, "compression_ratio": 1.6543778801843319, "no_caption_prob": 4.757497299578972e-05}, {"id": 239, "seek": 160120, "start": 1615.44, "end": 1624.32, "text": " example of decode.string. And I'm guessing that you're using the same construction mechanisms.", "tokens": [50364, 42109, 13, 1057, 558, 13, 407, 718, 311, 352, 646, 281, 35492, 13, 73, 3015, 1310, 13, 4919, 13, 407, 291, 2835, 291, 362, 979, 378, 433, 50772, 50772, 293, 2058, 378, 433, 11, 597, 574, 588, 2531, 281, 361, 3015, 13, 1479, 22332, 293, 361, 3015, 13, 268, 22332, 13, 407, 291, 2729, 264, 51076, 51076, 1365, 295, 979, 1429, 13, 37045, 13, 400, 286, 478, 17939, 300, 291, 434, 1228, 264, 912, 6435, 15902, 13, 51520, 51520, 407, 291, 393, 35925, 552, 1214, 445, 411, 321, 1143, 281, 365, 361, 3015, 13, 1479, 22332, 293, 2058, 1429, 13, 51760, 51760], "temperature": 0.0, "avg_logprob": -0.12319862842559814, "compression_ratio": 1.6543778801843319, "no_caption_prob": 4.757497299578972e-05}, {"id": 240, "seek": 160120, "start": 1624.32, "end": 1629.1200000000001, "text": " So you can compose them together just like we used to with json.decode and encode.", "tokens": [50364, 42109, 13, 1057, 558, 13, 407, 718, 311, 352, 646, 281, 35492, 13, 73, 3015, 1310, 13, 4919, 13, 407, 291, 2835, 291, 362, 979, 378, 433, 50772, 50772, 293, 2058, 378, 433, 11, 597, 574, 588, 2531, 281, 361, 3015, 13, 1479, 22332, 293, 361, 3015, 13, 268, 22332, 13, 407, 291, 2729, 264, 51076, 51076, 1365, 295, 979, 1429, 13, 37045, 13, 400, 286, 478, 17939, 300, 291, 434, 1228, 264, 912, 6435, 15902, 13, 51520, 51520, 407, 291, 393, 35925, 552, 1214, 445, 411, 321, 1143, 281, 365, 361, 3015, 13, 1479, 22332, 293, 2058, 1429, 13, 51760, 51760], "temperature": 0.0, "avg_logprob": -0.12319862842559814, "compression_ratio": 1.6543778801843319, "no_caption_prob": 4.757497299578972e-05}, {"id": 241, "seek": 162912, "start": 1629.12, "end": 1636.8799999999999, "text": " Exactly right. And you can even say, so if you say decode.field first name, decode.string", "tokens": [50364, 7587, 558, 13, 400, 291, 393, 754, 584, 11, 370, 498, 291, 584, 979, 1429, 13, 7610, 700, 1315, 11, 979, 1429, 13, 37045, 50752, 50752, 365, 35492, 13, 73, 3015, 11, 974, 35492, 13, 73, 3015, 13, 1479, 22332, 382, 979, 1429, 13, 961, 311, 445, 818, 309, 35492, 13, 1479, 22332, 382, 257, 10286, 13, 51120, 51120, 1057, 558, 13, 51148, 51148, 1396, 300, 3255, 300, 264, 15576, 14237, 2010, 291, 434, 516, 281, 483, 490, 300, 979, 19866, 307, 364, 2657, 365, 51532, 51532, 257, 2519, 700, 1315, 300, 307, 257, 6798, 13, 467, 3255, 300, 11, 558, 30, 286, 914, 11, 309, 311, 406, 886, 955, 295, 257, 19438, 51804, 51804], "temperature": 0.0, "avg_logprob": -0.09109811701326288, "compression_ratio": 1.7066666666666668, "no_caption_prob": 6.814623338868842e-05}, {"id": 242, "seek": 162912, "start": 1636.8799999999999, "end": 1644.2399999999998, "text": " with ts.json, import ts.json.decode as decode. Let's just call it ts.decode as a convention.", "tokens": [50364, 7587, 558, 13, 400, 291, 393, 754, 584, 11, 370, 498, 291, 584, 979, 1429, 13, 7610, 700, 1315, 11, 979, 1429, 13, 37045, 50752, 50752, 365, 35492, 13, 73, 3015, 11, 974, 35492, 13, 73, 3015, 13, 1479, 22332, 382, 979, 1429, 13, 961, 311, 445, 818, 309, 35492, 13, 1479, 22332, 382, 257, 10286, 13, 51120, 51120, 1057, 558, 13, 51148, 51148, 1396, 300, 3255, 300, 264, 15576, 14237, 2010, 291, 434, 516, 281, 483, 490, 300, 979, 19866, 307, 364, 2657, 365, 51532, 51532, 257, 2519, 700, 1315, 300, 307, 257, 6798, 13, 467, 3255, 300, 11, 558, 30, 286, 914, 11, 309, 311, 406, 886, 955, 295, 257, 19438, 51804, 51804], "temperature": 0.0, "avg_logprob": -0.09109811701326288, "compression_ratio": 1.7066666666666668, "no_caption_prob": 6.814623338868842e-05}, {"id": 243, "seek": 162912, "start": 1644.2399999999998, "end": 1644.8, "text": " All right.", "tokens": [50364, 7587, 558, 13, 400, 291, 393, 754, 584, 11, 370, 498, 291, 584, 979, 1429, 13, 7610, 700, 1315, 11, 979, 1429, 13, 37045, 50752, 50752, 365, 35492, 13, 73, 3015, 11, 974, 35492, 13, 73, 3015, 13, 1479, 22332, 382, 979, 1429, 13, 961, 311, 445, 818, 309, 35492, 13, 1479, 22332, 382, 257, 10286, 13, 51120, 51120, 1057, 558, 13, 51148, 51148, 1396, 300, 3255, 300, 264, 15576, 14237, 2010, 291, 434, 516, 281, 483, 490, 300, 979, 19866, 307, 364, 2657, 365, 51532, 51532, 257, 2519, 700, 1315, 300, 307, 257, 6798, 13, 467, 3255, 300, 11, 558, 30, 286, 914, 11, 309, 311, 406, 886, 955, 295, 257, 19438, 51804, 51804], "temperature": 0.0, "avg_logprob": -0.09109811701326288, "compression_ratio": 1.7066666666666668, "no_caption_prob": 6.814623338868842e-05}, {"id": 244, "seek": 162912, "start": 1644.8, "end": 1652.4799999999998, "text": " Then that knows that the TypeScript type you're going to get from that decoder is an object with", "tokens": [50364, 7587, 558, 13, 400, 291, 393, 754, 584, 11, 370, 498, 291, 584, 979, 1429, 13, 7610, 700, 1315, 11, 979, 1429, 13, 37045, 50752, 50752, 365, 35492, 13, 73, 3015, 11, 974, 35492, 13, 73, 3015, 13, 1479, 22332, 382, 979, 1429, 13, 961, 311, 445, 818, 309, 35492, 13, 1479, 22332, 382, 257, 10286, 13, 51120, 51120, 1057, 558, 13, 51148, 51148, 1396, 300, 3255, 300, 264, 15576, 14237, 2010, 291, 434, 516, 281, 483, 490, 300, 979, 19866, 307, 364, 2657, 365, 51532, 51532, 257, 2519, 700, 1315, 300, 307, 257, 6798, 13, 467, 3255, 300, 11, 558, 30, 286, 914, 11, 309, 311, 406, 886, 955, 295, 257, 19438, 51804, 51804], "temperature": 0.0, "avg_logprob": -0.09109811701326288, "compression_ratio": 1.7066666666666668, "no_caption_prob": 6.814623338868842e-05}, {"id": 245, "seek": 162912, "start": 1652.4799999999998, "end": 1657.9199999999998, "text": " a field first name that is a string. It knows that, right? I mean, it's not too big of a leap", "tokens": [50364, 7587, 558, 13, 400, 291, 393, 754, 584, 11, 370, 498, 291, 584, 979, 1429, 13, 7610, 700, 1315, 11, 979, 1429, 13, 37045, 50752, 50752, 365, 35492, 13, 73, 3015, 11, 974, 35492, 13, 73, 3015, 13, 1479, 22332, 382, 979, 1429, 13, 961, 311, 445, 818, 309, 35492, 13, 1479, 22332, 382, 257, 10286, 13, 51120, 51120, 1057, 558, 13, 51148, 51148, 1396, 300, 3255, 300, 264, 15576, 14237, 2010, 291, 434, 516, 281, 483, 490, 300, 979, 19866, 307, 364, 2657, 365, 51532, 51532, 257, 2519, 700, 1315, 300, 307, 257, 6798, 13, 467, 3255, 300, 11, 558, 30, 286, 914, 11, 309, 311, 406, 886, 955, 295, 257, 19438, 51804, 51804], "temperature": 0.0, "avg_logprob": -0.09109811701326288, "compression_ratio": 1.7066666666666668, "no_caption_prob": 6.814623338868842e-05}, {"id": 246, "seek": 165792, "start": 1657.92, "end": 1664.0, "text": " to understand how you could say decode.field. And now the TypeScript type that that will", "tokens": [50364, 281, 1223, 577, 291, 727, 584, 979, 1429, 13, 7610, 13, 400, 586, 264, 15576, 14237, 2010, 300, 300, 486, 50668, 50668, 10727, 979, 1429, 307, 516, 281, 312, 364, 2657, 365, 257, 2519, 295, 2035, 979, 19866, 291, 632, 13, 682, 341, 1389, 11, 51012, 51056, 35492, 13, 1479, 22332, 13, 37045, 13, 407, 309, 311, 534, 411, 309, 3417, 5585, 11, 457, 309, 311, 767, 445, 341, 2199, 1558, 51376, 51376, 365, 309, 27415, 493, 294, 472, 1081, 13, 400, 341, 307, 472, 295, 264, 721, 300, 311, 257, 955, 10444, 670, 264, 1331, 51720, 51720], "temperature": 0.0, "avg_logprob": -0.09015274047851562, "compression_ratio": 1.6118143459915613, "no_caption_prob": 5.390971637098119e-05}, {"id": 247, "seek": 165792, "start": 1664.0, "end": 1670.88, "text": " successfully decode is going to be an object with a field of whatever decoder you had. In this case,", "tokens": [50364, 281, 1223, 577, 291, 727, 584, 979, 1429, 13, 7610, 13, 400, 586, 264, 15576, 14237, 2010, 300, 300, 486, 50668, 50668, 10727, 979, 1429, 307, 516, 281, 312, 364, 2657, 365, 257, 2519, 295, 2035, 979, 19866, 291, 632, 13, 682, 341, 1389, 11, 51012, 51056, 35492, 13, 1479, 22332, 13, 37045, 13, 407, 309, 311, 534, 411, 309, 3417, 5585, 11, 457, 309, 311, 767, 445, 341, 2199, 1558, 51376, 51376, 365, 309, 27415, 493, 294, 472, 1081, 13, 400, 341, 307, 472, 295, 264, 721, 300, 311, 257, 955, 10444, 670, 264, 1331, 51720, 51720], "temperature": 0.0, "avg_logprob": -0.09015274047851562, "compression_ratio": 1.6118143459915613, "no_caption_prob": 5.390971637098119e-05}, {"id": 248, "seek": 165792, "start": 1671.76, "end": 1678.16, "text": " ts.decode.string. So it's really like it feels magic, but it's actually just this simple idea", "tokens": [50364, 281, 1223, 577, 291, 727, 584, 979, 1429, 13, 7610, 13, 400, 586, 264, 15576, 14237, 2010, 300, 300, 486, 50668, 50668, 10727, 979, 1429, 307, 516, 281, 312, 364, 2657, 365, 257, 2519, 295, 2035, 979, 19866, 291, 632, 13, 682, 341, 1389, 11, 51012, 51056, 35492, 13, 1479, 22332, 13, 37045, 13, 407, 309, 311, 534, 411, 309, 3417, 5585, 11, 457, 309, 311, 767, 445, 341, 2199, 1558, 51376, 51376, 365, 309, 27415, 493, 294, 472, 1081, 13, 400, 341, 307, 472, 295, 264, 721, 300, 311, 257, 955, 10444, 670, 264, 1331, 51720, 51720], "temperature": 0.0, "avg_logprob": -0.09015274047851562, "compression_ratio": 1.6118143459915613, "no_caption_prob": 5.390971637098119e-05}, {"id": 249, "seek": 165792, "start": 1678.16, "end": 1685.04, "text": " with it wired up in one place. And this is one of the things that's a big improvement over the old", "tokens": [50364, 281, 1223, 577, 291, 727, 584, 979, 1429, 13, 7610, 13, 400, 586, 264, 15576, 14237, 2010, 300, 300, 486, 50668, 50668, 10727, 979, 1429, 307, 516, 281, 312, 364, 2657, 365, 257, 2519, 295, 2035, 979, 19866, 291, 632, 13, 682, 341, 1389, 11, 51012, 51056, 35492, 13, 1479, 22332, 13, 37045, 13, 407, 309, 311, 534, 411, 309, 3417, 5585, 11, 457, 309, 311, 767, 445, 341, 2199, 1558, 51376, 51376, 365, 309, 27415, 493, 294, 472, 1081, 13, 400, 341, 307, 472, 295, 264, 721, 300, 311, 257, 955, 10444, 670, 264, 1331, 51720, 51720], "temperature": 0.0, "avg_logprob": -0.09015274047851562, "compression_ratio": 1.6118143459915613, "no_caption_prob": 5.390971637098119e-05}, {"id": 250, "seek": 168504, "start": 1685.04, "end": 1690.8, "text": " Elm TypeScript interop approach, which is that that static analysis approach would slow down as", "tokens": [50364, 2699, 76, 15576, 14237, 728, 404, 3109, 11, 597, 307, 300, 300, 13437, 5215, 3109, 576, 2964, 760, 382, 50652, 50652, 257, 3089, 3096, 6109, 13, 407, 512, 5022, 645, 10031, 3389, 2740, 365, 2416, 3089, 17949, 13, 50944, 51052, 583, 365, 2699, 76, 37645, 728, 404, 11, 1670, 456, 311, 534, 572, 5585, 510, 11, 291, 434, 445, 17827, 439, 295, 428, 51364, 51412, 979, 378, 433, 293, 2058, 378, 433, 337, 728, 404, 294, 257, 2167, 10088, 13, 440, 3389, 307, 5754, 565, 13, 467, 51724, 51724], "temperature": 0.0, "avg_logprob": -0.12278140770210015, "compression_ratio": 1.5991379310344827, "no_caption_prob": 0.00010070406278828159}, {"id": 251, "seek": 168504, "start": 1690.8, "end": 1696.6399999999999, "text": " a code base grew. So some users were reporting performance problems with large code bases.", "tokens": [50364, 2699, 76, 15576, 14237, 728, 404, 3109, 11, 597, 307, 300, 300, 13437, 5215, 3109, 576, 2964, 760, 382, 50652, 50652, 257, 3089, 3096, 6109, 13, 407, 512, 5022, 645, 10031, 3389, 2740, 365, 2416, 3089, 17949, 13, 50944, 51052, 583, 365, 2699, 76, 37645, 728, 404, 11, 1670, 456, 311, 534, 572, 5585, 510, 11, 291, 434, 445, 17827, 439, 295, 428, 51364, 51412, 979, 378, 433, 293, 2058, 378, 433, 337, 728, 404, 294, 257, 2167, 10088, 13, 440, 3389, 307, 5754, 565, 13, 467, 51724, 51724], "temperature": 0.0, "avg_logprob": -0.12278140770210015, "compression_ratio": 1.5991379310344827, "no_caption_prob": 0.00010070406278828159}, {"id": 252, "seek": 168504, "start": 1698.8, "end": 1705.04, "text": " But with Elm TS interop, since there's really no magic here, you're just defining all of your", "tokens": [50364, 2699, 76, 15576, 14237, 728, 404, 3109, 11, 597, 307, 300, 300, 13437, 5215, 3109, 576, 2964, 760, 382, 50652, 50652, 257, 3089, 3096, 6109, 13, 407, 512, 5022, 645, 10031, 3389, 2740, 365, 2416, 3089, 17949, 13, 50944, 51052, 583, 365, 2699, 76, 37645, 728, 404, 11, 1670, 456, 311, 534, 572, 5585, 510, 11, 291, 434, 445, 17827, 439, 295, 428, 51364, 51412, 979, 378, 433, 293, 2058, 378, 433, 337, 728, 404, 294, 257, 2167, 10088, 13, 440, 3389, 307, 5754, 565, 13, 467, 51724, 51724], "temperature": 0.0, "avg_logprob": -0.12278140770210015, "compression_ratio": 1.5991379310344827, "no_caption_prob": 0.00010070406278828159}, {"id": 253, "seek": 168504, "start": 1706.0, "end": 1712.24, "text": " decoders and encoders for interop in a single module. The performance is constant time. It", "tokens": [50364, 2699, 76, 15576, 14237, 728, 404, 3109, 11, 597, 307, 300, 300, 13437, 5215, 3109, 576, 2964, 760, 382, 50652, 50652, 257, 3089, 3096, 6109, 13, 407, 512, 5022, 645, 10031, 3389, 2740, 365, 2416, 3089, 17949, 13, 50944, 51052, 583, 365, 2699, 76, 37645, 728, 404, 11, 1670, 456, 311, 534, 572, 5585, 510, 11, 291, 434, 445, 17827, 439, 295, 428, 51364, 51412, 979, 378, 433, 293, 2058, 378, 433, 337, 728, 404, 294, 257, 2167, 10088, 13, 440, 3389, 307, 5754, 565, 13, 467, 51724, 51724], "temperature": 0.0, "avg_logprob": -0.12278140770210015, "compression_ratio": 1.5991379310344827, "no_caption_prob": 0.00010070406278828159}, {"id": 254, "seek": 171224, "start": 1712.24, "end": 1716.72, "text": " doesn't scale as your code base scales. And it's, I'm guessing, very fast because it's a", "tokens": [50364, 1177, 380, 4373, 382, 428, 3089, 3096, 17408, 13, 400, 309, 311, 11, 286, 478, 17939, 11, 588, 2370, 570, 309, 311, 257, 50588, 50588, 588, 1359, 1461, 13, 7587, 13, 467, 311, 445, 456, 311, 534, 406, 300, 709, 281, 309, 13, 407, 309, 311, 4664, 2370, 50848, 50848, 293, 12924, 13, 286, 478, 17939, 291, 727, 362, 3031, 281, 360, 264, 912, 551, 365, 13437, 5215, 11, 51240, 51240, 457, 264, 1154, 365, 300, 3109, 307, 300, 2171, 721, 576, 483, 588, 3997, 293, 309, 51500, 51500, 576, 312, 588, 11, 588, 1152, 337, 291, 281, 5448, 264, 1589, 382, 49927, 382, 291, 393, 365, 341, 51788, 51788], "temperature": 0.0, "avg_logprob": -0.07873648405075073, "compression_ratio": 1.7255639097744362, "no_caption_prob": 3.269848457421176e-05}, {"id": 255, "seek": 171224, "start": 1716.72, "end": 1721.92, "text": " very small program. Exactly. It's just there's really not that much to it. So it's extremely fast", "tokens": [50364, 1177, 380, 4373, 382, 428, 3089, 3096, 17408, 13, 400, 309, 311, 11, 286, 478, 17939, 11, 588, 2370, 570, 309, 311, 257, 50588, 50588, 588, 1359, 1461, 13, 7587, 13, 467, 311, 445, 456, 311, 534, 406, 300, 709, 281, 309, 13, 407, 309, 311, 4664, 2370, 50848, 50848, 293, 12924, 13, 286, 478, 17939, 291, 727, 362, 3031, 281, 360, 264, 912, 551, 365, 13437, 5215, 11, 51240, 51240, 457, 264, 1154, 365, 300, 3109, 307, 300, 2171, 721, 576, 483, 588, 3997, 293, 309, 51500, 51500, 576, 312, 588, 11, 588, 1152, 337, 291, 281, 5448, 264, 1589, 382, 49927, 382, 291, 393, 365, 341, 51788, 51788], "temperature": 0.0, "avg_logprob": -0.07873648405075073, "compression_ratio": 1.7255639097744362, "no_caption_prob": 3.269848457421176e-05}, {"id": 256, "seek": 171224, "start": 1721.92, "end": 1729.76, "text": " and reliable. I'm guessing you could have tried to do the same thing with static analysis,", "tokens": [50364, 1177, 380, 4373, 382, 428, 3089, 3096, 17408, 13, 400, 309, 311, 11, 286, 478, 17939, 11, 588, 2370, 570, 309, 311, 257, 50588, 50588, 588, 1359, 1461, 13, 7587, 13, 467, 311, 445, 456, 311, 534, 406, 300, 709, 281, 309, 13, 407, 309, 311, 4664, 2370, 50848, 50848, 293, 12924, 13, 286, 478, 17939, 291, 727, 362, 3031, 281, 360, 264, 912, 551, 365, 13437, 5215, 11, 51240, 51240, 457, 264, 1154, 365, 300, 3109, 307, 300, 2171, 721, 576, 483, 588, 3997, 293, 309, 51500, 51500, 576, 312, 588, 11, 588, 1152, 337, 291, 281, 5448, 264, 1589, 382, 49927, 382, 291, 393, 365, 341, 51788, 51788], "temperature": 0.0, "avg_logprob": -0.07873648405075073, "compression_ratio": 1.7255639097744362, "no_caption_prob": 3.269848457421176e-05}, {"id": 257, "seek": 171224, "start": 1729.76, "end": 1734.96, "text": " but the problem with that approach is that sometimes things would get very complex and it", "tokens": [50364, 1177, 380, 4373, 382, 428, 3089, 3096, 17408, 13, 400, 309, 311, 11, 286, 478, 17939, 11, 588, 2370, 570, 309, 311, 257, 50588, 50588, 588, 1359, 1461, 13, 7587, 13, 467, 311, 445, 456, 311, 534, 406, 300, 709, 281, 309, 13, 407, 309, 311, 4664, 2370, 50848, 50848, 293, 12924, 13, 286, 478, 17939, 291, 727, 362, 3031, 281, 360, 264, 912, 551, 365, 13437, 5215, 11, 51240, 51240, 457, 264, 1154, 365, 300, 3109, 307, 300, 2171, 721, 576, 483, 588, 3997, 293, 309, 51500, 51500, 576, 312, 588, 11, 588, 1152, 337, 291, 281, 5448, 264, 1589, 382, 49927, 382, 291, 393, 365, 341, 51788, 51788], "temperature": 0.0, "avg_logprob": -0.07873648405075073, "compression_ratio": 1.7255639097744362, "no_caption_prob": 3.269848457421176e-05}, {"id": 258, "seek": 171224, "start": 1734.96, "end": 1740.72, "text": " would be very, very hard for you to gather the information as reliably as you can with this", "tokens": [50364, 1177, 380, 4373, 382, 428, 3089, 3096, 17408, 13, 400, 309, 311, 11, 286, 478, 17939, 11, 588, 2370, 570, 309, 311, 257, 50588, 50588, 588, 1359, 1461, 13, 7587, 13, 467, 311, 445, 456, 311, 534, 406, 300, 709, 281, 309, 13, 407, 309, 311, 4664, 2370, 50848, 50848, 293, 12924, 13, 286, 478, 17939, 291, 727, 362, 3031, 281, 360, 264, 912, 551, 365, 13437, 5215, 11, 51240, 51240, 457, 264, 1154, 365, 300, 3109, 307, 300, 2171, 721, 576, 483, 588, 3997, 293, 309, 51500, 51500, 576, 312, 588, 11, 588, 1152, 337, 291, 281, 5448, 264, 1589, 382, 49927, 382, 291, 393, 365, 341, 51788, 51788], "temperature": 0.0, "avg_logprob": -0.07873648405075073, "compression_ratio": 1.7255639097744362, "no_caption_prob": 3.269848457421176e-05}, {"id": 259, "seek": 174072, "start": 1740.72, "end": 1746.32, "text": " approach. Oh, you're saying like static analysis of your JSON decoders? No, of the Elm code, sorry.", "tokens": [50364, 3109, 13, 876, 11, 291, 434, 1566, 411, 13437, 5215, 295, 428, 31828, 979, 378, 433, 30, 883, 11, 295, 264, 2699, 76, 3089, 11, 2597, 13, 50644, 50644, 2720, 597, 2699, 76, 3089, 294, 1729, 30, 407, 365, 264, 2699, 76, 15576, 14237, 728, 404, 11, 291, 576, 574, 807, 264, 2699, 76, 51012, 51012, 3089, 11, 291, 576, 574, 337, 264, 18160, 13, 400, 550, 291, 727, 536, 11, 1954, 11, 309, 4960, 979, 19866, 2158, 13, 1079, 11, 51428, 51456, 300, 311, 558, 13, 1033, 11, 718, 311, 574, 412, 689, 300, 307, 1143, 13, 400, 586, 718, 311, 853, 281, 915, 484, 437, 7909, 51768, 51768], "temperature": 0.0, "avg_logprob": -0.14554895673479354, "compression_ratio": 1.6260504201680672, "no_caption_prob": 0.00011234819248784333}, {"id": 260, "seek": 174072, "start": 1746.32, "end": 1753.68, "text": " Of which Elm code in particular? So with the Elm TypeScript interop, you would look through the Elm", "tokens": [50364, 3109, 13, 876, 11, 291, 434, 1566, 411, 13437, 5215, 295, 428, 31828, 979, 378, 433, 30, 883, 11, 295, 264, 2699, 76, 3089, 11, 2597, 13, 50644, 50644, 2720, 597, 2699, 76, 3089, 294, 1729, 30, 407, 365, 264, 2699, 76, 15576, 14237, 728, 404, 11, 291, 576, 574, 807, 264, 2699, 76, 51012, 51012, 3089, 11, 291, 576, 574, 337, 264, 18160, 13, 400, 550, 291, 727, 536, 11, 1954, 11, 309, 4960, 979, 19866, 2158, 13, 1079, 11, 51428, 51456, 300, 311, 558, 13, 1033, 11, 718, 311, 574, 412, 689, 300, 307, 1143, 13, 400, 586, 718, 311, 853, 281, 915, 484, 437, 7909, 51768, 51768], "temperature": 0.0, "avg_logprob": -0.14554895673479354, "compression_ratio": 1.6260504201680672, "no_caption_prob": 0.00011234819248784333}, {"id": 261, "seek": 174072, "start": 1753.68, "end": 1762.0, "text": " code, you would look for the ports. And then you could see, oh, it uses decoder value. Yes,", "tokens": [50364, 3109, 13, 876, 11, 291, 434, 1566, 411, 13437, 5215, 295, 428, 31828, 979, 378, 433, 30, 883, 11, 295, 264, 2699, 76, 3089, 11, 2597, 13, 50644, 50644, 2720, 597, 2699, 76, 3089, 294, 1729, 30, 407, 365, 264, 2699, 76, 15576, 14237, 728, 404, 11, 291, 576, 574, 807, 264, 2699, 76, 51012, 51012, 3089, 11, 291, 576, 574, 337, 264, 18160, 13, 400, 550, 291, 727, 536, 11, 1954, 11, 309, 4960, 979, 19866, 2158, 13, 1079, 11, 51428, 51456, 300, 311, 558, 13, 1033, 11, 718, 311, 574, 412, 689, 300, 307, 1143, 13, 400, 586, 718, 311, 853, 281, 915, 484, 437, 7909, 51768, 51768], "temperature": 0.0, "avg_logprob": -0.14554895673479354, "compression_ratio": 1.6260504201680672, "no_caption_prob": 0.00011234819248784333}, {"id": 262, "seek": 174072, "start": 1762.56, "end": 1768.8, "text": " that's right. Okay, let's look at where that is used. And now let's try to find out what fields", "tokens": [50364, 3109, 13, 876, 11, 291, 434, 1566, 411, 13437, 5215, 295, 428, 31828, 979, 378, 433, 30, 883, 11, 295, 264, 2699, 76, 3089, 11, 2597, 13, 50644, 50644, 2720, 597, 2699, 76, 3089, 294, 1729, 30, 407, 365, 264, 2699, 76, 15576, 14237, 728, 404, 11, 291, 576, 574, 807, 264, 2699, 76, 51012, 51012, 3089, 11, 291, 576, 574, 337, 264, 18160, 13, 400, 550, 291, 727, 536, 11, 1954, 11, 309, 4960, 979, 19866, 2158, 13, 1079, 11, 51428, 51456, 300, 311, 558, 13, 1033, 11, 718, 311, 574, 412, 689, 300, 307, 1143, 13, 400, 586, 718, 311, 853, 281, 915, 484, 437, 7909, 51768, 51768], "temperature": 0.0, "avg_logprob": -0.14554895673479354, "compression_ratio": 1.6260504201680672, "no_caption_prob": 0.00011234819248784333}, {"id": 263, "seek": 176880, "start": 1768.8, "end": 1774.08, "text": " are expected in those decoders. Right. So you could do it, but it would be based on how it's", "tokens": [50364, 366, 5176, 294, 729, 979, 378, 433, 13, 1779, 13, 407, 291, 727, 360, 309, 11, 457, 309, 576, 312, 2361, 322, 577, 309, 311, 50628, 50628, 411, 31828, 979, 19866, 420, 746, 13, 865, 11, 300, 311, 264, 551, 13, 400, 264, 551, 307, 411, 498, 309, 311, 6179, 50892, 50892, 337, 264, 1461, 11, 337, 264, 46593, 281, 312, 3094, 300, 636, 11, 550, 309, 311, 6179, 281, 1223, 570, 51192, 51192, 456, 311, 341, 5585, 300, 311, 1152, 281, 13508, 13, 400, 498, 746, 1709, 2085, 11, 291, 500, 380, 458, 689, 309, 1437, 51440, 51440, 2085, 420, 437, 291, 434, 884, 2085, 13, 407, 286, 534, 4501, 264, 25632, 295, 341, 689, 291, 434, 445, 51748, 51748], "temperature": 0.0, "avg_logprob": -0.08594798266403074, "compression_ratio": 1.788104089219331, "no_caption_prob": 4.469274063012563e-05}, {"id": 264, "seek": 176880, "start": 1774.08, "end": 1779.36, "text": " like JSON decoder or something. Yeah, that's the thing. And the thing is like if it's complicated", "tokens": [50364, 366, 5176, 294, 729, 979, 378, 433, 13, 1779, 13, 407, 291, 727, 360, 309, 11, 457, 309, 576, 312, 2361, 322, 577, 309, 311, 50628, 50628, 411, 31828, 979, 19866, 420, 746, 13, 865, 11, 300, 311, 264, 551, 13, 400, 264, 551, 307, 411, 498, 309, 311, 6179, 50892, 50892, 337, 264, 1461, 11, 337, 264, 46593, 281, 312, 3094, 300, 636, 11, 550, 309, 311, 6179, 281, 1223, 570, 51192, 51192, 456, 311, 341, 5585, 300, 311, 1152, 281, 13508, 13, 400, 498, 746, 1709, 2085, 11, 291, 500, 380, 458, 689, 309, 1437, 51440, 51440, 2085, 420, 437, 291, 434, 884, 2085, 13, 407, 286, 534, 4501, 264, 25632, 295, 341, 689, 291, 434, 445, 51748, 51748], "temperature": 0.0, "avg_logprob": -0.08594798266403074, "compression_ratio": 1.788104089219331, "no_caption_prob": 4.469274063012563e-05}, {"id": 265, "seek": 176880, "start": 1779.36, "end": 1785.36, "text": " for the program, for the tooling to be built that way, then it's complicated to understand because", "tokens": [50364, 366, 5176, 294, 729, 979, 378, 433, 13, 1779, 13, 407, 291, 727, 360, 309, 11, 457, 309, 576, 312, 2361, 322, 577, 309, 311, 50628, 50628, 411, 31828, 979, 19866, 420, 746, 13, 865, 11, 300, 311, 264, 551, 13, 400, 264, 551, 307, 411, 498, 309, 311, 6179, 50892, 50892, 337, 264, 1461, 11, 337, 264, 46593, 281, 312, 3094, 300, 636, 11, 550, 309, 311, 6179, 281, 1223, 570, 51192, 51192, 456, 311, 341, 5585, 300, 311, 1152, 281, 13508, 13, 400, 498, 746, 1709, 2085, 11, 291, 500, 380, 458, 689, 309, 1437, 51440, 51440, 2085, 420, 437, 291, 434, 884, 2085, 13, 407, 286, 534, 4501, 264, 25632, 295, 341, 689, 291, 434, 445, 51748, 51748], "temperature": 0.0, "avg_logprob": -0.08594798266403074, "compression_ratio": 1.788104089219331, "no_caption_prob": 4.469274063012563e-05}, {"id": 266, "seek": 176880, "start": 1785.36, "end": 1790.32, "text": " there's this magic that's hard to trace. And if something goes wrong, you don't know where it went", "tokens": [50364, 366, 5176, 294, 729, 979, 378, 433, 13, 1779, 13, 407, 291, 727, 360, 309, 11, 457, 309, 576, 312, 2361, 322, 577, 309, 311, 50628, 50628, 411, 31828, 979, 19866, 420, 746, 13, 865, 11, 300, 311, 264, 551, 13, 400, 264, 551, 307, 411, 498, 309, 311, 6179, 50892, 50892, 337, 264, 1461, 11, 337, 264, 46593, 281, 312, 3094, 300, 636, 11, 550, 309, 311, 6179, 281, 1223, 570, 51192, 51192, 456, 311, 341, 5585, 300, 311, 1152, 281, 13508, 13, 400, 498, 746, 1709, 2085, 11, 291, 500, 380, 458, 689, 309, 1437, 51440, 51440, 2085, 420, 437, 291, 434, 884, 2085, 13, 407, 286, 534, 4501, 264, 25632, 295, 341, 689, 291, 434, 445, 51748, 51748], "temperature": 0.0, "avg_logprob": -0.08594798266403074, "compression_ratio": 1.788104089219331, "no_caption_prob": 4.469274063012563e-05}, {"id": 267, "seek": 176880, "start": 1790.32, "end": 1796.48, "text": " wrong or what you're doing wrong. So I really liked the simplicity of this where you're just", "tokens": [50364, 366, 5176, 294, 729, 979, 378, 433, 13, 1779, 13, 407, 291, 727, 360, 309, 11, 457, 309, 576, 312, 2361, 322, 577, 309, 311, 50628, 50628, 411, 31828, 979, 19866, 420, 746, 13, 865, 11, 300, 311, 264, 551, 13, 400, 264, 551, 307, 411, 498, 309, 311, 6179, 50892, 50892, 337, 264, 1461, 11, 337, 264, 46593, 281, 312, 3094, 300, 636, 11, 550, 309, 311, 6179, 281, 1223, 570, 51192, 51192, 456, 311, 341, 5585, 300, 311, 1152, 281, 13508, 13, 400, 498, 746, 1709, 2085, 11, 291, 500, 380, 458, 689, 309, 1437, 51440, 51440, 2085, 420, 437, 291, 434, 884, 2085, 13, 407, 286, 534, 4501, 264, 25632, 295, 341, 689, 291, 434, 445, 51748, 51748], "temperature": 0.0, "avg_logprob": -0.08594798266403074, "compression_ratio": 1.788104089219331, "no_caption_prob": 4.469274063012563e-05}, {"id": 268, "seek": 179648, "start": 1796.48, "end": 1806.72, "text": " defining a JSON decoder. Also, it works surprisingly well. So let's talk about a little", "tokens": [50364, 17827, 257, 31828, 979, 19866, 13, 2743, 11, 309, 1985, 17600, 731, 13, 407, 718, 311, 751, 466, 257, 707, 50876, 50876, 857, 544, 295, 264, 37645, 31828, 9362, 11, 445, 281, 733, 295, 483, 666, 689, 309, 2170, 1880, 13, 1436, 498, 291, 434, 51160, 51160, 1566, 35492, 73, 3015, 13, 1479, 22332, 13, 37045, 11, 300, 311, 1627, 11, 457, 300, 311, 406, 300, 4670, 13, 467, 311, 411, 11, 1392, 11, 586, 291, 51740, 51740], "temperature": 0.0, "avg_logprob": -0.13772603273391723, "compression_ratio": 1.458762886597938, "no_caption_prob": 7.602215191582218e-05}, {"id": 269, "seek": 179648, "start": 1806.72, "end": 1812.4, "text": " bit more of the TS JSON API, just to kind of get into where it gets interesting. Because if you're", "tokens": [50364, 17827, 257, 31828, 979, 19866, 13, 2743, 11, 309, 1985, 17600, 731, 13, 407, 718, 311, 751, 466, 257, 707, 50876, 50876, 857, 544, 295, 264, 37645, 31828, 9362, 11, 445, 281, 733, 295, 483, 666, 689, 309, 2170, 1880, 13, 1436, 498, 291, 434, 51160, 51160, 1566, 35492, 73, 3015, 13, 1479, 22332, 13, 37045, 11, 300, 311, 1627, 11, 457, 300, 311, 406, 300, 4670, 13, 467, 311, 411, 11, 1392, 11, 586, 291, 51740, 51740], "temperature": 0.0, "avg_logprob": -0.13772603273391723, "compression_ratio": 1.458762886597938, "no_caption_prob": 7.602215191582218e-05}, {"id": 270, "seek": 179648, "start": 1812.4, "end": 1824.0, "text": " saying tsjson.decode.string, that's cool, but that's not that exciting. It's like, okay, now you", "tokens": [50364, 17827, 257, 31828, 979, 19866, 13, 2743, 11, 309, 1985, 17600, 731, 13, 407, 718, 311, 751, 466, 257, 707, 50876, 50876, 857, 544, 295, 264, 37645, 31828, 9362, 11, 445, 281, 733, 295, 483, 666, 689, 309, 2170, 1880, 13, 1436, 498, 291, 434, 51160, 51160, 1566, 35492, 73, 3015, 13, 1479, 22332, 13, 37045, 11, 300, 311, 1627, 11, 457, 300, 311, 406, 300, 4670, 13, 467, 311, 411, 11, 1392, 11, 586, 291, 51740, 51740], "temperature": 0.0, "avg_logprob": -0.13772603273391723, "compression_ratio": 1.458762886597938, "no_caption_prob": 7.602215191582218e-05}, {"id": 271, "seek": 182400, "start": 1824.0, "end": 1829.04, "text": " know that there's a string going through, you know, and you build up objects by saying decode.field.", "tokens": [50364, 458, 300, 456, 311, 257, 6798, 516, 807, 11, 291, 458, 11, 293, 291, 1322, 493, 6565, 538, 1566, 979, 1429, 13, 7610, 13, 50616, 50616, 400, 586, 309, 3255, 300, 309, 311, 658, 257, 2519, 295, 257, 1729, 1315, 295, 257, 1729, 2010, 13, 663, 311, 50852, 50852, 1242, 544, 1880, 13, 509, 393, 360, 300, 365, 14511, 293, 819, 1412, 3467, 13, 583, 689, 309, 2170, 51116, 51116, 534, 1627, 307, 472, 295, 370, 586, 437, 2314, 498, 291, 584, 370, 411, 11, 437, 2314, 498, 291, 584, 979, 1429, 13, 546, 2670, 51504, 51504], "temperature": 0.0, "avg_logprob": -0.11049576961632931, "compression_ratio": 1.711111111111111, "no_caption_prob": 2.3922830223455094e-05}, {"id": 272, "seek": 182400, "start": 1829.04, "end": 1833.76, "text": " And now it knows that it's got a field of a particular name of a particular type. That's", "tokens": [50364, 458, 300, 456, 311, 257, 6798, 516, 807, 11, 291, 458, 11, 293, 291, 1322, 493, 6565, 538, 1566, 979, 1429, 13, 7610, 13, 50616, 50616, 400, 586, 309, 3255, 300, 309, 311, 658, 257, 2519, 295, 257, 1729, 1315, 295, 257, 1729, 2010, 13, 663, 311, 50852, 50852, 1242, 544, 1880, 13, 509, 393, 360, 300, 365, 14511, 293, 819, 1412, 3467, 13, 583, 689, 309, 2170, 51116, 51116, 534, 1627, 307, 472, 295, 370, 586, 437, 2314, 498, 291, 584, 370, 411, 11, 437, 2314, 498, 291, 584, 979, 1429, 13, 546, 2670, 51504, 51504], "temperature": 0.0, "avg_logprob": -0.11049576961632931, "compression_ratio": 1.711111111111111, "no_caption_prob": 2.3922830223455094e-05}, {"id": 273, "seek": 182400, "start": 1833.76, "end": 1839.04, "text": " getting more interesting. You can do that with lists and different data types. But where it gets", "tokens": [50364, 458, 300, 456, 311, 257, 6798, 516, 807, 11, 291, 458, 11, 293, 291, 1322, 493, 6565, 538, 1566, 979, 1429, 13, 7610, 13, 50616, 50616, 400, 586, 309, 3255, 300, 309, 311, 658, 257, 2519, 295, 257, 1729, 1315, 295, 257, 1729, 2010, 13, 663, 311, 50852, 50852, 1242, 544, 1880, 13, 509, 393, 360, 300, 365, 14511, 293, 819, 1412, 3467, 13, 583, 689, 309, 2170, 51116, 51116, 534, 1627, 307, 472, 295, 370, 586, 437, 2314, 498, 291, 584, 370, 411, 11, 437, 2314, 498, 291, 584, 979, 1429, 13, 546, 2670, 51504, 51504], "temperature": 0.0, "avg_logprob": -0.11049576961632931, "compression_ratio": 1.711111111111111, "no_caption_prob": 2.3922830223455094e-05}, {"id": 274, "seek": 182400, "start": 1839.04, "end": 1846.8, "text": " really cool is one of so now what happens if you say so like, what happens if you say decode.oneof", "tokens": [50364, 458, 300, 456, 311, 257, 6798, 516, 807, 11, 291, 458, 11, 293, 291, 1322, 493, 6565, 538, 1566, 979, 1429, 13, 7610, 13, 50616, 50616, 400, 586, 309, 3255, 300, 309, 311, 658, 257, 2519, 295, 257, 1729, 1315, 295, 257, 1729, 2010, 13, 663, 311, 50852, 50852, 1242, 544, 1880, 13, 509, 393, 360, 300, 365, 14511, 293, 819, 1412, 3467, 13, 583, 689, 309, 2170, 51116, 51116, 534, 1627, 307, 472, 295, 370, 586, 437, 2314, 498, 291, 584, 370, 411, 11, 437, 2314, 498, 291, 584, 979, 1429, 13, 546, 2670, 51504, 51504], "temperature": 0.0, "avg_logprob": -0.11049576961632931, "compression_ratio": 1.711111111111111, "no_caption_prob": 2.3922830223455094e-05}, {"id": 275, "seek": 184680, "start": 1846.8, "end": 1857.36, "text": " tsd code.oneof and then you have two values in that one of list, you have tsd code.field first", "tokens": [50364, 35492, 67, 3089, 13, 546, 2670, 293, 550, 291, 362, 732, 4190, 294, 300, 472, 295, 1329, 11, 291, 362, 35492, 67, 3089, 13, 7610, 700, 50892, 50892, 35492, 67, 3089, 13, 37045, 293, 291, 362, 35492, 67, 3089, 13, 7610, 700, 1315, 35492, 67, 3089, 13, 37045, 13, 407, 291, 600, 445, 51296, 51296, 7619, 281, 291, 458, 11, 1310, 291, 362, 411, 12204, 34237, 365, 257, 819, 2010, 51564, 51564, 300, 291, 1143, 281, 2845, 11, 558, 30, 407, 586, 11, 360, 291, 458, 437, 264, 15576, 14237, 2010, 48654, 576, 312, 337, 51840, 51840], "temperature": 0.0, "avg_logprob": -0.1469907182635683, "compression_ratio": 1.7912621359223302, "no_caption_prob": 0.00024154344282578677}, {"id": 276, "seek": 184680, "start": 1857.36, "end": 1865.44, "text": " tsd code.string and you have tsd code.field first name tsd code.string. So you've just", "tokens": [50364, 35492, 67, 3089, 13, 546, 2670, 293, 550, 291, 362, 732, 4190, 294, 300, 472, 295, 1329, 11, 291, 362, 35492, 67, 3089, 13, 7610, 700, 50892, 50892, 35492, 67, 3089, 13, 37045, 293, 291, 362, 35492, 67, 3089, 13, 7610, 700, 1315, 35492, 67, 3089, 13, 37045, 13, 407, 291, 600, 445, 51296, 51296, 7619, 281, 291, 458, 11, 1310, 291, 362, 411, 12204, 34237, 365, 257, 819, 2010, 51564, 51564, 300, 291, 1143, 281, 2845, 11, 558, 30, 407, 586, 11, 360, 291, 458, 437, 264, 15576, 14237, 2010, 48654, 576, 312, 337, 51840, 51840], "temperature": 0.0, "avg_logprob": -0.1469907182635683, "compression_ratio": 1.7912621359223302, "no_caption_prob": 0.00024154344282578677}, {"id": 277, "seek": 184680, "start": 1865.44, "end": 1870.8, "text": " described to you know, maybe you have like backwards compatibility with a different type", "tokens": [50364, 35492, 67, 3089, 13, 546, 2670, 293, 550, 291, 362, 732, 4190, 294, 300, 472, 295, 1329, 11, 291, 362, 35492, 67, 3089, 13, 7610, 700, 50892, 50892, 35492, 67, 3089, 13, 37045, 293, 291, 362, 35492, 67, 3089, 13, 7610, 700, 1315, 35492, 67, 3089, 13, 37045, 13, 407, 291, 600, 445, 51296, 51296, 7619, 281, 291, 458, 11, 1310, 291, 362, 411, 12204, 34237, 365, 257, 819, 2010, 51564, 51564, 300, 291, 1143, 281, 2845, 11, 558, 30, 407, 586, 11, 360, 291, 458, 437, 264, 15576, 14237, 2010, 48654, 576, 312, 337, 51840, 51840], "temperature": 0.0, "avg_logprob": -0.1469907182635683, "compression_ratio": 1.7912621359223302, "no_caption_prob": 0.00024154344282578677}, {"id": 278, "seek": 184680, "start": 1870.8, "end": 1876.32, "text": " that you used to send, right? So now, do you know what the TypeScript type annotation would be for", "tokens": [50364, 35492, 67, 3089, 13, 546, 2670, 293, 550, 291, 362, 732, 4190, 294, 300, 472, 295, 1329, 11, 291, 362, 35492, 67, 3089, 13, 7610, 700, 50892, 50892, 35492, 67, 3089, 13, 37045, 293, 291, 362, 35492, 67, 3089, 13, 7610, 700, 1315, 35492, 67, 3089, 13, 37045, 13, 407, 291, 600, 445, 51296, 51296, 7619, 281, 291, 458, 11, 1310, 291, 362, 411, 12204, 34237, 365, 257, 819, 2010, 51564, 51564, 300, 291, 1143, 281, 2845, 11, 558, 30, 407, 586, 11, 360, 291, 458, 437, 264, 15576, 14237, 2010, 48654, 576, 312, 337, 51840, 51840], "temperature": 0.0, "avg_logprob": -0.1469907182635683, "compression_ratio": 1.7912621359223302, "no_caption_prob": 0.00024154344282578677}, {"id": 279, "seek": 187632, "start": 1876.32, "end": 1882.96, "text": " that port now? So it would be an object with the first property, which is a string, or it would be", "tokens": [50364, 300, 2436, 586, 30, 407, 309, 576, 312, 364, 2657, 365, 264, 700, 4707, 11, 597, 307, 257, 6798, 11, 420, 309, 576, 312, 50696, 50696, 364, 2657, 365, 700, 1315, 11, 597, 307, 611, 257, 6798, 13, 7587, 13, 407, 309, 311, 257, 11671, 2010, 13, 467, 311, 406, 257, 51056, 51056, 20828, 770, 11671, 411, 364, 2699, 76, 2375, 2010, 11, 457, 309, 311, 445, 257, 2997, 493, 11671, 295, 411, 11, 309, 393, 312, 51344, 51344, 613, 732, 819, 3467, 13, 407, 300, 311, 577, 291, 1322, 24914, 365, 11, 291, 458, 11, 264, 37645, 31828, 979, 1429, 9362, 13, 51652, 51652], "temperature": 0.0, "avg_logprob": -0.10809171979672441, "compression_ratio": 1.668103448275862, "no_caption_prob": 3.426809416851029e-05}, {"id": 280, "seek": 187632, "start": 1882.96, "end": 1890.1599999999999, "text": " an object with first name, which is also a string. Exactly. So it's a union type. It's not a", "tokens": [50364, 300, 2436, 586, 30, 407, 309, 576, 312, 364, 2657, 365, 264, 700, 4707, 11, 597, 307, 257, 6798, 11, 420, 309, 576, 312, 50696, 50696, 364, 2657, 365, 700, 1315, 11, 597, 307, 611, 257, 6798, 13, 7587, 13, 407, 309, 311, 257, 11671, 2010, 13, 467, 311, 406, 257, 51056, 51056, 20828, 770, 11671, 411, 364, 2699, 76, 2375, 2010, 11, 457, 309, 311, 445, 257, 2997, 493, 11671, 295, 411, 11, 309, 393, 312, 51344, 51344, 613, 732, 819, 3467, 13, 407, 300, 311, 577, 291, 1322, 24914, 365, 11, 291, 458, 11, 264, 37645, 31828, 979, 1429, 9362, 13, 51652, 51652], "temperature": 0.0, "avg_logprob": -0.10809171979672441, "compression_ratio": 1.668103448275862, "no_caption_prob": 3.426809416851029e-05}, {"id": 281, "seek": 187632, "start": 1890.1599999999999, "end": 1895.9199999999998, "text": " discriminated union like an Elm custom type, but it's just a straight up union of like, it can be", "tokens": [50364, 300, 2436, 586, 30, 407, 309, 576, 312, 364, 2657, 365, 264, 700, 4707, 11, 597, 307, 257, 6798, 11, 420, 309, 576, 312, 50696, 50696, 364, 2657, 365, 700, 1315, 11, 597, 307, 611, 257, 6798, 13, 7587, 13, 407, 309, 311, 257, 11671, 2010, 13, 467, 311, 406, 257, 51056, 51056, 20828, 770, 11671, 411, 364, 2699, 76, 2375, 2010, 11, 457, 309, 311, 445, 257, 2997, 493, 11671, 295, 411, 11, 309, 393, 312, 51344, 51344, 613, 732, 819, 3467, 13, 407, 300, 311, 577, 291, 1322, 24914, 365, 11, 291, 458, 11, 264, 37645, 31828, 979, 1429, 9362, 13, 51652, 51652], "temperature": 0.0, "avg_logprob": -0.10809171979672441, "compression_ratio": 1.668103448275862, "no_caption_prob": 3.426809416851029e-05}, {"id": 282, "seek": 187632, "start": 1895.9199999999998, "end": 1902.08, "text": " these two different types. So that's how you build unions with, you know, the TS JSON decode API.", "tokens": [50364, 300, 2436, 586, 30, 407, 309, 576, 312, 364, 2657, 365, 264, 700, 4707, 11, 597, 307, 257, 6798, 11, 420, 309, 576, 312, 50696, 50696, 364, 2657, 365, 700, 1315, 11, 597, 307, 611, 257, 6798, 13, 7587, 13, 407, 309, 311, 257, 11671, 2010, 13, 467, 311, 406, 257, 51056, 51056, 20828, 770, 11671, 411, 364, 2699, 76, 2375, 2010, 11, 457, 309, 311, 445, 257, 2997, 493, 11671, 295, 411, 11, 309, 393, 312, 51344, 51344, 613, 732, 819, 3467, 13, 407, 300, 311, 577, 291, 1322, 24914, 365, 11, 291, 458, 11, 264, 37645, 31828, 979, 1429, 9362, 13, 51652, 51652], "temperature": 0.0, "avg_logprob": -0.10809171979672441, "compression_ratio": 1.668103448275862, "no_caption_prob": 3.426809416851029e-05}, {"id": 283, "seek": 190208, "start": 1902.08, "end": 1909.28, "text": " It's just you say one of which is so easy to write and gives you this incredible expressive power.", "tokens": [50364, 467, 311, 445, 291, 584, 472, 295, 597, 307, 370, 1858, 281, 2464, 293, 2709, 291, 341, 4651, 40189, 1347, 13, 50724, 50724, 407, 286, 534, 411, 577, 300, 17189, 493, 13, 823, 11, 264, 661, 14751, 300, 286, 519, 3719, 281, 652, 309, 534, 51088, 51088, 1880, 307, 264, 37645, 31828, 979, 1429, 20411, 2445, 13, 876, 11, 1338, 11, 286, 600, 1612, 300, 472, 13, 407, 300, 307, 281, 1322, 51528, 51528], "temperature": 0.0, "avg_logprob": -0.09418421042592902, "compression_ratio": 1.4705882352941178, "no_caption_prob": 3.024091165571008e-05}, {"id": 284, "seek": 190208, "start": 1909.28, "end": 1916.56, "text": " So I really like how that lined up. Now, the other ingredient that I think starts to make it really", "tokens": [50364, 467, 311, 445, 291, 584, 472, 295, 597, 307, 370, 1858, 281, 2464, 293, 2709, 291, 341, 4651, 40189, 1347, 13, 50724, 50724, 407, 286, 534, 411, 577, 300, 17189, 493, 13, 823, 11, 264, 661, 14751, 300, 286, 519, 3719, 281, 652, 309, 534, 51088, 51088, 1880, 307, 264, 37645, 31828, 979, 1429, 20411, 2445, 13, 876, 11, 1338, 11, 286, 600, 1612, 300, 472, 13, 407, 300, 307, 281, 1322, 51528, 51528], "temperature": 0.0, "avg_logprob": -0.09418421042592902, "compression_ratio": 1.4705882352941178, "no_caption_prob": 3.024091165571008e-05}, {"id": 285, "seek": 190208, "start": 1916.56, "end": 1925.36, "text": " interesting is the TS JSON decode literal function. Oh, yeah, I've seen that one. So that is to build", "tokens": [50364, 467, 311, 445, 291, 584, 472, 295, 597, 307, 370, 1858, 281, 2464, 293, 2709, 291, 341, 4651, 40189, 1347, 13, 50724, 50724, 407, 286, 534, 411, 577, 300, 17189, 493, 13, 823, 11, 264, 661, 14751, 300, 286, 519, 3719, 281, 652, 309, 534, 51088, 51088, 1880, 307, 264, 37645, 31828, 979, 1429, 20411, 2445, 13, 876, 11, 1338, 11, 286, 600, 1612, 300, 472, 13, 407, 300, 307, 281, 1322, 51528, 51528], "temperature": 0.0, "avg_logprob": -0.09418421042592902, "compression_ratio": 1.4705882352941178, "no_caption_prob": 3.024091165571008e-05}, {"id": 286, "seek": 192536, "start": 1925.36, "end": 1932.6399999999999, "text": " those type literals, right? So it's Dylan or Yeroon. Exactly, exactly. We talked about the literal type", "tokens": [50364, 729, 2010, 2733, 1124, 11, 558, 30, 407, 309, 311, 28160, 420, 398, 2032, 266, 13, 7587, 11, 2293, 13, 492, 2825, 466, 264, 20411, 2010, 50728, 50728, 28160, 420, 398, 2032, 266, 11, 597, 307, 445, 732, 20411, 13985, 13, 407, 291, 727, 360, 300, 365, 11, 370, 291, 576, 360, 51028, 51028, 37645, 31828, 5893, 472, 295, 11, 293, 550, 291, 576, 360, 37645, 31828, 5893, 20411, 11, 293, 550, 291, 976, 309, 257, 31828, 2058, 1429, 51400, 51400, 2158, 13, 407, 291, 727, 445, 976, 309, 257, 31828, 2058, 1429, 2158, 11, 31828, 5893, 2058, 1429, 5893, 6798, 11, 28160, 11, 293, 550, 51700, 51700], "temperature": 0.0, "avg_logprob": -0.12387386668812145, "compression_ratio": 1.9601990049751243, "no_caption_prob": 0.00021992645633872598}, {"id": 287, "seek": 192536, "start": 1932.6399999999999, "end": 1938.6399999999999, "text": " Dylan or Yeroon, which is just two literal strings. So you could do that with, so you would do", "tokens": [50364, 729, 2010, 2733, 1124, 11, 558, 30, 407, 309, 311, 28160, 420, 398, 2032, 266, 13, 7587, 11, 2293, 13, 492, 2825, 466, 264, 20411, 2010, 50728, 50728, 28160, 420, 398, 2032, 266, 11, 597, 307, 445, 732, 20411, 13985, 13, 407, 291, 727, 360, 300, 365, 11, 370, 291, 576, 360, 51028, 51028, 37645, 31828, 5893, 472, 295, 11, 293, 550, 291, 576, 360, 37645, 31828, 5893, 20411, 11, 293, 550, 291, 976, 309, 257, 31828, 2058, 1429, 51400, 51400, 2158, 13, 407, 291, 727, 445, 976, 309, 257, 31828, 2058, 1429, 2158, 11, 31828, 5893, 2058, 1429, 5893, 6798, 11, 28160, 11, 293, 550, 51700, 51700], "temperature": 0.0, "avg_logprob": -0.12387386668812145, "compression_ratio": 1.9601990049751243, "no_caption_prob": 0.00021992645633872598}, {"id": 288, "seek": 192536, "start": 1938.6399999999999, "end": 1946.08, "text": " TS JSON dot one of, and then you would do TS JSON dot literal, and then you give it a JSON encode", "tokens": [50364, 729, 2010, 2733, 1124, 11, 558, 30, 407, 309, 311, 28160, 420, 398, 2032, 266, 13, 7587, 11, 2293, 13, 492, 2825, 466, 264, 20411, 2010, 50728, 50728, 28160, 420, 398, 2032, 266, 11, 597, 307, 445, 732, 20411, 13985, 13, 407, 291, 727, 360, 300, 365, 11, 370, 291, 576, 360, 51028, 51028, 37645, 31828, 5893, 472, 295, 11, 293, 550, 291, 576, 360, 37645, 31828, 5893, 20411, 11, 293, 550, 291, 976, 309, 257, 31828, 2058, 1429, 51400, 51400, 2158, 13, 407, 291, 727, 445, 976, 309, 257, 31828, 2058, 1429, 2158, 11, 31828, 5893, 2058, 1429, 5893, 6798, 11, 28160, 11, 293, 550, 51700, 51700], "temperature": 0.0, "avg_logprob": -0.12387386668812145, "compression_ratio": 1.9601990049751243, "no_caption_prob": 0.00021992645633872598}, {"id": 289, "seek": 192536, "start": 1946.08, "end": 1952.08, "text": " value. So you could just give it a JSON encode value, JSON dot encode dot string, Dylan, and then", "tokens": [50364, 729, 2010, 2733, 1124, 11, 558, 30, 407, 309, 311, 28160, 420, 398, 2032, 266, 13, 7587, 11, 2293, 13, 492, 2825, 466, 264, 20411, 2010, 50728, 50728, 28160, 420, 398, 2032, 266, 11, 597, 307, 445, 732, 20411, 13985, 13, 407, 291, 727, 360, 300, 365, 11, 370, 291, 576, 360, 51028, 51028, 37645, 31828, 5893, 472, 295, 11, 293, 550, 291, 576, 360, 37645, 31828, 5893, 20411, 11, 293, 550, 291, 976, 309, 257, 31828, 2058, 1429, 51400, 51400, 2158, 13, 407, 291, 727, 445, 976, 309, 257, 31828, 2058, 1429, 2158, 11, 31828, 5893, 2058, 1429, 5893, 6798, 11, 28160, 11, 293, 550, 51700, 51700], "temperature": 0.0, "avg_logprob": -0.12387386668812145, "compression_ratio": 1.9601990049751243, "no_caption_prob": 0.00021992645633872598}, {"id": 290, "seek": 195208, "start": 1952.08, "end": 1959.6, "text": " you do another TS JSON literal, and you'd give that JSON dot encode dot string, Yeroon. Notice, it's", "tokens": [50364, 291, 360, 1071, 37645, 31828, 20411, 11, 293, 291, 1116, 976, 300, 31828, 5893, 2058, 1429, 5893, 6798, 11, 398, 2032, 266, 13, 13428, 11, 309, 311, 50740, 50740, 445, 257, 31828, 2058, 1429, 2158, 13, 407, 309, 727, 362, 668, 604, 2058, 12340, 31828, 2158, 456, 11, 457, 2049, 309, 311, 445, 51012, 51012, 516, 281, 312, 13985, 420, 560, 82, 420, 746, 411, 300, 11, 457, 309, 393, 312, 1340, 13, 407, 586, 321, 600, 445, 51240, 51240, 7642, 300, 20411, 2010, 13, 400, 611, 3449, 300, 498, 291, 1415, 281, 360, 257, 20828, 770, 11671, 11, 51504, 51504, 300, 311, 264, 2390, 3461, 291, 362, 13, 407, 586, 498, 291, 1415, 281, 360, 300, 20828, 770, 11671, 689, 291, 51744, 51744], "temperature": 0.0, "avg_logprob": -0.08347033697461324, "compression_ratio": 1.8643410852713178, "no_caption_prob": 2.4299642973346636e-05}, {"id": 291, "seek": 195208, "start": 1959.6, "end": 1965.04, "text": " just a JSON encode value. So it could have been any encoded JSON value there, but often it's just", "tokens": [50364, 291, 360, 1071, 37645, 31828, 20411, 11, 293, 291, 1116, 976, 300, 31828, 5893, 2058, 1429, 5893, 6798, 11, 398, 2032, 266, 13, 13428, 11, 309, 311, 50740, 50740, 445, 257, 31828, 2058, 1429, 2158, 13, 407, 309, 727, 362, 668, 604, 2058, 12340, 31828, 2158, 456, 11, 457, 2049, 309, 311, 445, 51012, 51012, 516, 281, 312, 13985, 420, 560, 82, 420, 746, 411, 300, 11, 457, 309, 393, 312, 1340, 13, 407, 586, 321, 600, 445, 51240, 51240, 7642, 300, 20411, 2010, 13, 400, 611, 3449, 300, 498, 291, 1415, 281, 360, 257, 20828, 770, 11671, 11, 51504, 51504, 300, 311, 264, 2390, 3461, 291, 362, 13, 407, 586, 498, 291, 1415, 281, 360, 300, 20828, 770, 11671, 689, 291, 51744, 51744], "temperature": 0.0, "avg_logprob": -0.08347033697461324, "compression_ratio": 1.8643410852713178, "no_caption_prob": 2.4299642973346636e-05}, {"id": 292, "seek": 195208, "start": 1965.04, "end": 1969.6, "text": " going to be strings or ints or something like that, but it can be anything. So now we've just", "tokens": [50364, 291, 360, 1071, 37645, 31828, 20411, 11, 293, 291, 1116, 976, 300, 31828, 5893, 2058, 1429, 5893, 6798, 11, 398, 2032, 266, 13, 13428, 11, 309, 311, 50740, 50740, 445, 257, 31828, 2058, 1429, 2158, 13, 407, 309, 727, 362, 668, 604, 2058, 12340, 31828, 2158, 456, 11, 457, 2049, 309, 311, 445, 51012, 51012, 516, 281, 312, 13985, 420, 560, 82, 420, 746, 411, 300, 11, 457, 309, 393, 312, 1340, 13, 407, 586, 321, 600, 445, 51240, 51240, 7642, 300, 20411, 2010, 13, 400, 611, 3449, 300, 498, 291, 1415, 281, 360, 257, 20828, 770, 11671, 11, 51504, 51504, 300, 311, 264, 2390, 3461, 291, 362, 13, 407, 586, 498, 291, 1415, 281, 360, 300, 20828, 770, 11671, 689, 291, 51744, 51744], "temperature": 0.0, "avg_logprob": -0.08347033697461324, "compression_ratio": 1.8643410852713178, "no_caption_prob": 2.4299642973346636e-05}, {"id": 293, "seek": 195208, "start": 1969.6, "end": 1974.8799999999999, "text": " defined that literal type. And also notice that if you wanted to do a discriminated union,", "tokens": [50364, 291, 360, 1071, 37645, 31828, 20411, 11, 293, 291, 1116, 976, 300, 31828, 5893, 2058, 1429, 5893, 6798, 11, 398, 2032, 266, 13, 13428, 11, 309, 311, 50740, 50740, 445, 257, 31828, 2058, 1429, 2158, 13, 407, 309, 727, 362, 668, 604, 2058, 12340, 31828, 2158, 456, 11, 457, 2049, 309, 311, 445, 51012, 51012, 516, 281, 312, 13985, 420, 560, 82, 420, 746, 411, 300, 11, 457, 309, 393, 312, 1340, 13, 407, 586, 321, 600, 445, 51240, 51240, 7642, 300, 20411, 2010, 13, 400, 611, 3449, 300, 498, 291, 1415, 281, 360, 257, 20828, 770, 11671, 11, 51504, 51504, 300, 311, 264, 2390, 3461, 291, 362, 13, 407, 586, 498, 291, 1415, 281, 360, 300, 20828, 770, 11671, 689, 291, 51744, 51744], "temperature": 0.0, "avg_logprob": -0.08347033697461324, "compression_ratio": 1.8643410852713178, "no_caption_prob": 2.4299642973346636e-05}, {"id": 294, "seek": 195208, "start": 1974.8799999999999, "end": 1979.6799999999998, "text": " that's the building block you have. So now if you wanted to do that discriminated union where you", "tokens": [50364, 291, 360, 1071, 37645, 31828, 20411, 11, 293, 291, 1116, 976, 300, 31828, 5893, 2058, 1429, 5893, 6798, 11, 398, 2032, 266, 13, 13428, 11, 309, 311, 50740, 50740, 445, 257, 31828, 2058, 1429, 2158, 13, 407, 309, 727, 362, 668, 604, 2058, 12340, 31828, 2158, 456, 11, 457, 2049, 309, 311, 445, 51012, 51012, 516, 281, 312, 13985, 420, 560, 82, 420, 746, 411, 300, 11, 457, 309, 393, 312, 1340, 13, 407, 586, 321, 600, 445, 51240, 51240, 7642, 300, 20411, 2010, 13, 400, 611, 3449, 300, 498, 291, 1415, 281, 360, 257, 20828, 770, 11671, 11, 51504, 51504, 300, 311, 264, 2390, 3461, 291, 362, 13, 407, 586, 498, 291, 1415, 281, 360, 300, 20828, 770, 11671, 689, 291, 51744, 51744], "temperature": 0.0, "avg_logprob": -0.08347033697461324, "compression_ratio": 1.8643410852713178, "no_caption_prob": 2.4299642973346636e-05}, {"id": 295, "seek": 197968, "start": 1979.68, "end": 1988.24, "text": " said TS JSON dot, so where we had like a discriminated union user, type user in TypeScript,", "tokens": [50364, 848, 37645, 31828, 5893, 11, 370, 689, 321, 632, 411, 257, 20828, 770, 11671, 4195, 11, 2010, 4195, 294, 15576, 14237, 11, 50792, 50792, 2010, 4195, 6915, 2657, 733, 8255, 8341, 6798, 13, 2694, 377, 307, 257, 6798, 13, 663, 311, 257, 20411, 6798, 13, 1610, 51176, 51176, 2657, 733, 8255, 24236, 13, 400, 550, 321, 611, 362, 364, 24236, 7348, 307, 257, 1230, 294, 456, 11, 558, 30, 407, 498, 291, 51536, 51536], "temperature": 0.0, "avg_logprob": -0.1380054323296798, "compression_ratio": 1.548913043478261, "no_caption_prob": 3.21917214023415e-05}, {"id": 296, "seek": 197968, "start": 1988.24, "end": 1995.92, "text": " type user equals object kind colon guest string. Guest is a string. That's a literal string. Or", "tokens": [50364, 848, 37645, 31828, 5893, 11, 370, 689, 321, 632, 411, 257, 20828, 770, 11671, 4195, 11, 2010, 4195, 294, 15576, 14237, 11, 50792, 50792, 2010, 4195, 6915, 2657, 733, 8255, 8341, 6798, 13, 2694, 377, 307, 257, 6798, 13, 663, 311, 257, 20411, 6798, 13, 1610, 51176, 51176, 2657, 733, 8255, 24236, 13, 400, 550, 321, 611, 362, 364, 24236, 7348, 307, 257, 1230, 294, 456, 11, 558, 30, 407, 498, 291, 51536, 51536], "temperature": 0.0, "avg_logprob": -0.1380054323296798, "compression_ratio": 1.548913043478261, "no_caption_prob": 3.21917214023415e-05}, {"id": 297, "seek": 197968, "start": 1995.92, "end": 2003.1200000000001, "text": " object kind colon admin. And then we also have an admin ID is a number in there, right? So if you", "tokens": [50364, 848, 37645, 31828, 5893, 11, 370, 689, 321, 632, 411, 257, 20828, 770, 11671, 4195, 11, 2010, 4195, 294, 15576, 14237, 11, 50792, 50792, 2010, 4195, 6915, 2657, 733, 8255, 8341, 6798, 13, 2694, 377, 307, 257, 6798, 13, 663, 311, 257, 20411, 6798, 13, 1610, 51176, 51176, 2657, 733, 8255, 24236, 13, 400, 550, 321, 611, 362, 364, 24236, 7348, 307, 257, 1230, 294, 456, 11, 558, 30, 407, 498, 291, 51536, 51536], "temperature": 0.0, "avg_logprob": -0.1380054323296798, "compression_ratio": 1.548913043478261, "no_caption_prob": 3.21917214023415e-05}, {"id": 298, "seek": 200312, "start": 2003.12, "end": 2012.8, "text": " wanted to do that, now you could say, you could use TS JSON dot one of, and you would say TS JSON dot", "tokens": [50364, 1415, 281, 360, 300, 11, 586, 291, 727, 584, 11, 291, 727, 764, 37645, 31828, 5893, 472, 295, 11, 293, 291, 576, 584, 37645, 31828, 5893, 50848, 50976, 2519, 733, 11, 293, 550, 291, 1116, 764, 257, 37645, 31828, 20411, 295, 8341, 13, 823, 291, 600, 445, 7642, 300, 8341, 51332, 51332, 17501, 295, 300, 20828, 770, 11671, 13, 400, 550, 291, 360, 257, 2531, 551, 337, 17827, 264, 24236, 2010, 51660, 51660], "temperature": 0.0, "avg_logprob": -0.11566226959228515, "compression_ratio": 1.6685714285714286, "no_caption_prob": 7.030912092886865e-05}, {"id": 299, "seek": 200312, "start": 2015.36, "end": 2022.4799999999998, "text": " field kind, and then you'd use a TS JSON literal of guest. Now you've just defined that guest", "tokens": [50364, 1415, 281, 360, 300, 11, 586, 291, 727, 584, 11, 291, 727, 764, 37645, 31828, 5893, 472, 295, 11, 293, 291, 576, 584, 37645, 31828, 5893, 50848, 50976, 2519, 733, 11, 293, 550, 291, 1116, 764, 257, 37645, 31828, 20411, 295, 8341, 13, 823, 291, 600, 445, 7642, 300, 8341, 51332, 51332, 17501, 295, 300, 20828, 770, 11671, 13, 400, 550, 291, 360, 257, 2531, 551, 337, 17827, 264, 24236, 2010, 51660, 51660], "temperature": 0.0, "avg_logprob": -0.11566226959228515, "compression_ratio": 1.6685714285714286, "no_caption_prob": 7.030912092886865e-05}, {"id": 300, "seek": 200312, "start": 2022.4799999999998, "end": 2029.04, "text": " variant of that discriminated union. And then you do a similar thing for defining the admin type", "tokens": [50364, 1415, 281, 360, 300, 11, 586, 291, 727, 584, 11, 291, 727, 764, 37645, 31828, 5893, 472, 295, 11, 293, 291, 576, 584, 37645, 31828, 5893, 50848, 50976, 2519, 733, 11, 293, 550, 291, 1116, 764, 257, 37645, 31828, 20411, 295, 8341, 13, 823, 291, 600, 445, 7642, 300, 8341, 51332, 51332, 17501, 295, 300, 20828, 770, 11671, 13, 400, 550, 291, 360, 257, 2531, 551, 337, 17827, 264, 24236, 2010, 51660, 51660], "temperature": 0.0, "avg_logprob": -0.11566226959228515, "compression_ratio": 1.6685714285714286, "no_caption_prob": 7.030912092886865e-05}, {"id": 301, "seek": 202904, "start": 2029.04, "end": 2035.52, "text": " with the admin property. And now you've just told TypeScript that what type it should expect to send", "tokens": [50364, 365, 264, 24236, 4707, 13, 400, 586, 291, 600, 445, 1907, 15576, 14237, 300, 437, 2010, 309, 820, 2066, 281, 2845, 50688, 50688, 420, 4774, 456, 13, 400, 291, 600, 1907, 2699, 76, 437, 1412, 2010, 309, 311, 516, 281, 4774, 382, 731, 13, 51004, 51004, 865, 13, 407, 498, 291, 528, 281, 360, 604, 733, 295, 11671, 20828, 770, 420, 406, 11, 291, 764, 472, 766, 11, 558, 30, 51308, 51308, 1079, 13, 1171, 979, 8616, 11, 300, 311, 558, 13, 7587, 13, 759, 291, 528, 281, 917, 493, 365, 257, 15576, 14237, 11671, 2010, 11, 51656, 51656], "temperature": 0.0, "avg_logprob": -0.09076564146740602, "compression_ratio": 1.611353711790393, "no_caption_prob": 1.644233452680055e-05}, {"id": 302, "seek": 202904, "start": 2035.52, "end": 2041.84, "text": " or receive there. And you've told Elm what data type it's going to receive as well.", "tokens": [50364, 365, 264, 24236, 4707, 13, 400, 586, 291, 600, 445, 1907, 15576, 14237, 300, 437, 2010, 309, 820, 2066, 281, 2845, 50688, 50688, 420, 4774, 456, 13, 400, 291, 600, 1907, 2699, 76, 437, 1412, 2010, 309, 311, 516, 281, 4774, 382, 731, 13, 51004, 51004, 865, 13, 407, 498, 291, 528, 281, 360, 604, 733, 295, 11671, 20828, 770, 420, 406, 11, 291, 764, 472, 766, 11, 558, 30, 51308, 51308, 1079, 13, 1171, 979, 8616, 11, 300, 311, 558, 13, 7587, 13, 759, 291, 528, 281, 917, 493, 365, 257, 15576, 14237, 11671, 2010, 11, 51656, 51656], "temperature": 0.0, "avg_logprob": -0.09076564146740602, "compression_ratio": 1.611353711790393, "no_caption_prob": 1.644233452680055e-05}, {"id": 303, "seek": 202904, "start": 2041.84, "end": 2047.92, "text": " Yeah. So if you want to do any kind of union discriminated or not, you use one off, right?", "tokens": [50364, 365, 264, 24236, 4707, 13, 400, 586, 291, 600, 445, 1907, 15576, 14237, 300, 437, 2010, 309, 820, 2066, 281, 2845, 50688, 50688, 420, 4774, 456, 13, 400, 291, 600, 1907, 2699, 76, 437, 1412, 2010, 309, 311, 516, 281, 4774, 382, 731, 13, 51004, 51004, 865, 13, 407, 498, 291, 528, 281, 360, 604, 733, 295, 11671, 20828, 770, 420, 406, 11, 291, 764, 472, 766, 11, 558, 30, 51308, 51308, 1079, 13, 1171, 979, 8616, 11, 300, 311, 558, 13, 7587, 13, 759, 291, 528, 281, 917, 493, 365, 257, 15576, 14237, 11671, 2010, 11, 51656, 51656], "temperature": 0.0, "avg_logprob": -0.09076564146740602, "compression_ratio": 1.611353711790393, "no_caption_prob": 1.644233452680055e-05}, {"id": 304, "seek": 202904, "start": 2047.92, "end": 2054.88, "text": " Yes. For decoding, that's right. Exactly. If you want to end up with a TypeScript union type,", "tokens": [50364, 365, 264, 24236, 4707, 13, 400, 586, 291, 600, 445, 1907, 15576, 14237, 300, 437, 2010, 309, 820, 2066, 281, 2845, 50688, 50688, 420, 4774, 456, 13, 400, 291, 600, 1907, 2699, 76, 437, 1412, 2010, 309, 311, 516, 281, 4774, 382, 731, 13, 51004, 51004, 865, 13, 407, 498, 291, 528, 281, 360, 604, 733, 295, 11671, 20828, 770, 420, 406, 11, 291, 764, 472, 766, 11, 558, 30, 51308, 51308, 1079, 13, 1171, 979, 8616, 11, 300, 311, 558, 13, 7587, 13, 759, 291, 528, 281, 917, 493, 365, 257, 15576, 14237, 11671, 2010, 11, 51656, 51656], "temperature": 0.0, "avg_logprob": -0.09076564146740602, "compression_ratio": 1.611353711790393, "no_caption_prob": 1.644233452680055e-05}, {"id": 305, "seek": 205488, "start": 2054.88, "end": 2063.36, "text": " then you use TS JSON dot decode dot one of that's right. So something about using decode one off,", "tokens": [50364, 550, 291, 764, 37645, 31828, 5893, 979, 1429, 5893, 472, 295, 300, 311, 558, 13, 407, 746, 466, 1228, 979, 1429, 472, 766, 11, 50788, 50788, 420, 437, 466, 20828, 770, 30, 876, 11, 457, 264, 2699, 76, 586, 3255, 466, 264, 2010, 13, 663, 307, 437, 309, 390, 13, 1033, 13, 51124, 51124, 865, 13, 407, 341, 307, 411, 11, 341, 307, 472, 295, 264, 881, 1021, 2793, 286, 519, 466, 341, 3109, 13, 51436, 51436, 407, 365, 264, 1331, 2699, 76, 15576, 14237, 728, 404, 3109, 11, 264, 4009, 295, 3494, 4009, 295, 3494, 307, 534, 51732, 51732], "temperature": 0.0, "avg_logprob": -0.1557140350341797, "compression_ratio": 1.6798245614035088, "no_caption_prob": 1.8924782125395723e-05}, {"id": 306, "seek": 205488, "start": 2063.36, "end": 2070.08, "text": " or what about discriminated? Oh, but the Elm now knows about the type. That is what it was. Okay.", "tokens": [50364, 550, 291, 764, 37645, 31828, 5893, 979, 1429, 5893, 472, 295, 300, 311, 558, 13, 407, 746, 466, 1228, 979, 1429, 472, 766, 11, 50788, 50788, 420, 437, 466, 20828, 770, 30, 876, 11, 457, 264, 2699, 76, 586, 3255, 466, 264, 2010, 13, 663, 307, 437, 309, 390, 13, 1033, 13, 51124, 51124, 865, 13, 407, 341, 307, 411, 11, 341, 307, 472, 295, 264, 881, 1021, 2793, 286, 519, 466, 341, 3109, 13, 51436, 51436, 407, 365, 264, 1331, 2699, 76, 15576, 14237, 728, 404, 3109, 11, 264, 4009, 295, 3494, 4009, 295, 3494, 307, 534, 51732, 51732], "temperature": 0.0, "avg_logprob": -0.1557140350341797, "compression_ratio": 1.6798245614035088, "no_caption_prob": 1.8924782125395723e-05}, {"id": 307, "seek": 205488, "start": 2070.08, "end": 2076.32, "text": " Yeah. So this is like, this is one of the most important points I think about this approach.", "tokens": [50364, 550, 291, 764, 37645, 31828, 5893, 979, 1429, 5893, 472, 295, 300, 311, 558, 13, 407, 746, 466, 1228, 979, 1429, 472, 766, 11, 50788, 50788, 420, 437, 466, 20828, 770, 30, 876, 11, 457, 264, 2699, 76, 586, 3255, 466, 264, 2010, 13, 663, 307, 437, 309, 390, 13, 1033, 13, 51124, 51124, 865, 13, 407, 341, 307, 411, 11, 341, 307, 472, 295, 264, 881, 1021, 2793, 286, 519, 466, 341, 3109, 13, 51436, 51436, 407, 365, 264, 1331, 2699, 76, 15576, 14237, 728, 404, 3109, 11, 264, 4009, 295, 3494, 4009, 295, 3494, 307, 534, 51732, 51732], "temperature": 0.0, "avg_logprob": -0.1557140350341797, "compression_ratio": 1.6798245614035088, "no_caption_prob": 1.8924782125395723e-05}, {"id": 308, "seek": 205488, "start": 2076.32, "end": 2082.2400000000002, "text": " So with the old Elm TypeScript interop approach, the source of truth source of truth is really", "tokens": [50364, 550, 291, 764, 37645, 31828, 5893, 979, 1429, 5893, 472, 295, 300, 311, 558, 13, 407, 746, 466, 1228, 979, 1429, 472, 766, 11, 50788, 50788, 420, 437, 466, 20828, 770, 30, 876, 11, 457, 264, 2699, 76, 586, 3255, 466, 264, 2010, 13, 663, 307, 437, 309, 390, 13, 1033, 13, 51124, 51124, 865, 13, 407, 341, 307, 411, 11, 341, 307, 472, 295, 264, 881, 1021, 2793, 286, 519, 466, 341, 3109, 13, 51436, 51436, 407, 365, 264, 1331, 2699, 76, 15576, 14237, 728, 404, 3109, 11, 264, 4009, 295, 3494, 4009, 295, 3494, 307, 534, 51732, 51732], "temperature": 0.0, "avg_logprob": -0.1557140350341797, "compression_ratio": 1.6798245614035088, "no_caption_prob": 1.8924782125395723e-05}, {"id": 309, "seek": 208224, "start": 2082.24, "end": 2088.16, "text": " important in general with this sort of concept of like types without borders. I'm not sure how much", "tokens": [50364, 1021, 294, 2674, 365, 341, 1333, 295, 3410, 295, 411, 3467, 1553, 16287, 13, 286, 478, 406, 988, 577, 709, 50660, 50660, 452, 20379, 3467, 1553, 16287, 307, 16124, 322, 11, 457, 286, 412, 1935, 411, 1419, 300, 1558, 294, 452, 3567, 50948, 50948, 295, 411, 11, 291, 458, 11, 885, 1075, 281, 362, 3467, 300, 3095, 807, 613, 819, 13180, 295, 51216, 51216, 819, 8650, 293, 49435, 1532, 293, 2035, 1553, 7027, 1589, 466, 437, 11, 437, 3467, 51500, 51500, 366, 8437, 807, 13, 400, 370, 294, 11, 294, 341, 3410, 295, 3467, 1553, 16287, 11, 456, 311, 411, 257, 588, 51784, 51784], "temperature": 0.0, "avg_logprob": -0.07305642793763359, "compression_ratio": 1.8282442748091603, "no_caption_prob": 7.253898365888745e-05}, {"id": 310, "seek": 208224, "start": 2088.16, "end": 2093.9199999999996, "text": " my hashtag types without borders is catching on, but I at least like having that idea in my brain", "tokens": [50364, 1021, 294, 2674, 365, 341, 1333, 295, 3410, 295, 411, 3467, 1553, 16287, 13, 286, 478, 406, 988, 577, 709, 50660, 50660, 452, 20379, 3467, 1553, 16287, 307, 16124, 322, 11, 457, 286, 412, 1935, 411, 1419, 300, 1558, 294, 452, 3567, 50948, 50948, 295, 411, 11, 291, 458, 11, 885, 1075, 281, 362, 3467, 300, 3095, 807, 613, 819, 13180, 295, 51216, 51216, 819, 8650, 293, 49435, 1532, 293, 2035, 1553, 7027, 1589, 466, 437, 11, 437, 3467, 51500, 51500, 366, 8437, 807, 13, 400, 370, 294, 11, 294, 341, 3410, 295, 3467, 1553, 16287, 11, 456, 311, 411, 257, 588, 51784, 51784], "temperature": 0.0, "avg_logprob": -0.07305642793763359, "compression_ratio": 1.8282442748091603, "no_caption_prob": 7.253898365888745e-05}, {"id": 311, "seek": 208224, "start": 2093.9199999999996, "end": 2099.2799999999997, "text": " of like, you know, being able to have types that flow through these different boundaries of", "tokens": [50364, 1021, 294, 2674, 365, 341, 1333, 295, 3410, 295, 411, 3467, 1553, 16287, 13, 286, 478, 406, 988, 577, 709, 50660, 50660, 452, 20379, 3467, 1553, 16287, 307, 16124, 322, 11, 457, 286, 412, 1935, 411, 1419, 300, 1558, 294, 452, 3567, 50948, 50948, 295, 411, 11, 291, 458, 11, 885, 1075, 281, 362, 3467, 300, 3095, 807, 613, 819, 13180, 295, 51216, 51216, 819, 8650, 293, 49435, 1532, 293, 2035, 1553, 7027, 1589, 466, 437, 11, 437, 3467, 51500, 51500, 366, 8437, 807, 13, 400, 370, 294, 11, 294, 341, 3410, 295, 3467, 1553, 16287, 11, 456, 311, 411, 257, 588, 51784, 51784], "temperature": 0.0, "avg_logprob": -0.07305642793763359, "compression_ratio": 1.8282442748091603, "no_caption_prob": 7.253898365888745e-05}, {"id": 312, "seek": 208224, "start": 2099.2799999999997, "end": 2104.9599999999996, "text": " different languages and runtimes and whatever without losing information about what, what types", "tokens": [50364, 1021, 294, 2674, 365, 341, 1333, 295, 3410, 295, 411, 3467, 1553, 16287, 13, 286, 478, 406, 988, 577, 709, 50660, 50660, 452, 20379, 3467, 1553, 16287, 307, 16124, 322, 11, 457, 286, 412, 1935, 411, 1419, 300, 1558, 294, 452, 3567, 50948, 50948, 295, 411, 11, 291, 458, 11, 885, 1075, 281, 362, 3467, 300, 3095, 807, 613, 819, 13180, 295, 51216, 51216, 819, 8650, 293, 49435, 1532, 293, 2035, 1553, 7027, 1589, 466, 437, 11, 437, 3467, 51500, 51500, 366, 8437, 807, 13, 400, 370, 294, 11, 294, 341, 3410, 295, 3467, 1553, 16287, 11, 456, 311, 411, 257, 588, 51784, 51784], "temperature": 0.0, "avg_logprob": -0.07305642793763359, "compression_ratio": 1.8282442748091603, "no_caption_prob": 7.253898365888745e-05}, {"id": 313, "seek": 208224, "start": 2104.9599999999996, "end": 2110.64, "text": " are passing through. And so in, in this concept of types without borders, there's like a very", "tokens": [50364, 1021, 294, 2674, 365, 341, 1333, 295, 3410, 295, 411, 3467, 1553, 16287, 13, 286, 478, 406, 988, 577, 709, 50660, 50660, 452, 20379, 3467, 1553, 16287, 307, 16124, 322, 11, 457, 286, 412, 1935, 411, 1419, 300, 1558, 294, 452, 3567, 50948, 50948, 295, 411, 11, 291, 458, 11, 885, 1075, 281, 362, 3467, 300, 3095, 807, 613, 819, 13180, 295, 51216, 51216, 819, 8650, 293, 49435, 1532, 293, 2035, 1553, 7027, 1589, 466, 437, 11, 437, 3467, 51500, 51500, 366, 8437, 807, 13, 400, 370, 294, 11, 294, 341, 3410, 295, 3467, 1553, 16287, 11, 456, 311, 411, 257, 588, 51784, 51784], "temperature": 0.0, "avg_logprob": -0.07305642793763359, "compression_ratio": 1.8282442748091603, "no_caption_prob": 7.253898365888745e-05}, {"id": 314, "seek": 211064, "start": 2110.64, "end": 2116.8799999999997, "text": " important point of what is the source of truth? Yeah. With Elm GraphQL, the source of truth is", "tokens": [50364, 1021, 935, 295, 437, 307, 264, 4009, 295, 3494, 30, 865, 13, 2022, 2699, 76, 21884, 13695, 11, 264, 4009, 295, 3494, 307, 50676, 50676, 264, 21884, 13695, 34078, 13, 823, 767, 300, 311, 15488, 332, 564, 5489, 570, 731, 11, 437, 311, 264, 4009, 50960, 50960, 295, 3494, 295, 300, 21884, 13695, 34078, 30, 440, 551, 300, 23815, 300, 34078, 13, 440, 551, 11, 2293, 13, 407, 51200, 51232, 498, 291, 434, 1228, 21884, 13695, 33063, 420, 746, 411, 300, 11, 550, 291, 600, 658, 411, 257, 34078, 7123, 2856, 51544, 51544, 300, 689, 291, 6786, 264, 3467, 293, 550, 291, 445, 2845, 1412, 807, 428, 11, 428, 917, 20552, 13, 400, 51828, 51828], "temperature": 0.0, "avg_logprob": -0.09951168451553737, "compression_ratio": 1.7715355805243447, "no_caption_prob": 9.609681001165882e-05}, {"id": 315, "seek": 211064, "start": 2116.8799999999997, "end": 2122.56, "text": " the GraphQL schema. Now actually that's oversimplifying because well, what's the source", "tokens": [50364, 1021, 935, 295, 437, 307, 264, 4009, 295, 3494, 30, 865, 13, 2022, 2699, 76, 21884, 13695, 11, 264, 4009, 295, 3494, 307, 50676, 50676, 264, 21884, 13695, 34078, 13, 823, 767, 300, 311, 15488, 332, 564, 5489, 570, 731, 11, 437, 311, 264, 4009, 50960, 50960, 295, 3494, 295, 300, 21884, 13695, 34078, 30, 440, 551, 300, 23815, 300, 34078, 13, 440, 551, 11, 2293, 13, 407, 51200, 51232, 498, 291, 434, 1228, 21884, 13695, 33063, 420, 746, 411, 300, 11, 550, 291, 600, 658, 411, 257, 34078, 7123, 2856, 51544, 51544, 300, 689, 291, 6786, 264, 3467, 293, 550, 291, 445, 2845, 1412, 807, 428, 11, 428, 917, 20552, 13, 400, 51828, 51828], "temperature": 0.0, "avg_logprob": -0.09951168451553737, "compression_ratio": 1.7715355805243447, "no_caption_prob": 9.609681001165882e-05}, {"id": 316, "seek": 211064, "start": 2122.56, "end": 2127.3599999999997, "text": " of truth of that GraphQL schema? The thing that generates that schema. The thing, exactly. So", "tokens": [50364, 1021, 935, 295, 437, 307, 264, 4009, 295, 3494, 30, 865, 13, 2022, 2699, 76, 21884, 13695, 11, 264, 4009, 295, 3494, 307, 50676, 50676, 264, 21884, 13695, 34078, 13, 823, 767, 300, 311, 15488, 332, 564, 5489, 570, 731, 11, 437, 311, 264, 4009, 50960, 50960, 295, 3494, 295, 300, 21884, 13695, 34078, 30, 440, 551, 300, 23815, 300, 34078, 13, 440, 551, 11, 2293, 13, 407, 51200, 51232, 498, 291, 434, 1228, 21884, 13695, 33063, 420, 746, 411, 300, 11, 550, 291, 600, 658, 411, 257, 34078, 7123, 2856, 51544, 51544, 300, 689, 291, 6786, 264, 3467, 293, 550, 291, 445, 2845, 1412, 807, 428, 11, 428, 917, 20552, 13, 400, 51828, 51828], "temperature": 0.0, "avg_logprob": -0.09951168451553737, "compression_ratio": 1.7715355805243447, "no_caption_prob": 9.609681001165882e-05}, {"id": 317, "seek": 211064, "start": 2128.0, "end": 2134.24, "text": " if you're using GraphQL JS or something like that, then you've got like a schema definition language", "tokens": [50364, 1021, 935, 295, 437, 307, 264, 4009, 295, 3494, 30, 865, 13, 2022, 2699, 76, 21884, 13695, 11, 264, 4009, 295, 3494, 307, 50676, 50676, 264, 21884, 13695, 34078, 13, 823, 767, 300, 311, 15488, 332, 564, 5489, 570, 731, 11, 437, 311, 264, 4009, 50960, 50960, 295, 3494, 295, 300, 21884, 13695, 34078, 30, 440, 551, 300, 23815, 300, 34078, 13, 440, 551, 11, 2293, 13, 407, 51200, 51232, 498, 291, 434, 1228, 21884, 13695, 33063, 420, 746, 411, 300, 11, 550, 291, 600, 658, 411, 257, 34078, 7123, 2856, 51544, 51544, 300, 689, 291, 6786, 264, 3467, 293, 550, 291, 445, 2845, 1412, 807, 428, 11, 428, 917, 20552, 13, 400, 51828, 51828], "temperature": 0.0, "avg_logprob": -0.09951168451553737, "compression_ratio": 1.7715355805243447, "no_caption_prob": 9.609681001165882e-05}, {"id": 318, "seek": 211064, "start": 2134.24, "end": 2139.92, "text": " that where you describe the types and then you just send data through your, your endpoints. And", "tokens": [50364, 1021, 935, 295, 437, 307, 264, 4009, 295, 3494, 30, 865, 13, 2022, 2699, 76, 21884, 13695, 11, 264, 4009, 295, 3494, 307, 50676, 50676, 264, 21884, 13695, 34078, 13, 823, 767, 300, 311, 15488, 332, 564, 5489, 570, 731, 11, 437, 311, 264, 4009, 50960, 50960, 295, 3494, 295, 300, 21884, 13695, 34078, 30, 440, 551, 300, 23815, 300, 34078, 13, 440, 551, 11, 2293, 13, 407, 51200, 51232, 498, 291, 434, 1228, 21884, 13695, 33063, 420, 746, 411, 300, 11, 550, 291, 600, 658, 411, 257, 34078, 7123, 2856, 51544, 51544, 300, 689, 291, 6786, 264, 3467, 293, 550, 291, 445, 2845, 1412, 807, 428, 11, 428, 917, 20552, 13, 400, 51828, 51828], "temperature": 0.0, "avg_logprob": -0.09951168451553737, "compression_ratio": 1.7715355805243447, "no_caption_prob": 9.609681001165882e-05}, {"id": 319, "seek": 213992, "start": 2139.92, "end": 2145.28, "text": " hopefully the types match up. And if they don't, the GraphQL JS server will say that something", "tokens": [50364, 4696, 264, 3467, 2995, 493, 13, 400, 498, 436, 500, 380, 11, 264, 21884, 13695, 33063, 7154, 486, 584, 300, 746, 50632, 50632, 1437, 2085, 13, 407, 264, 4009, 295, 3494, 307, 445, 1333, 295, 437, 291, 2464, 294, 300, 11, 294, 300, 3991, 300, 15626, 50932, 50932, 264, 34078, 13, 759, 291, 764, 11, 291, 458, 11, 257, 15576, 14237, 7372, 411, 46559, 11, 300, 311, 437, 311, 1219, 257, 3089, 51224, 51224, 700, 3109, 281, 21884, 13695, 13, 407, 586, 291, 434, 3579, 3089, 337, 11, 337, 7750, 4190, 484, 293, 300, 3089, 51644, 51644], "temperature": 0.0, "avg_logprob": -0.05861036223594589, "compression_ratio": 1.564516129032258, "no_caption_prob": 1.4510255823552143e-05}, {"id": 320, "seek": 213992, "start": 2145.28, "end": 2151.28, "text": " went wrong. So the source of truth is just sort of what you write in that, in that file that describes", "tokens": [50364, 4696, 264, 3467, 2995, 493, 13, 400, 498, 436, 500, 380, 11, 264, 21884, 13695, 33063, 7154, 486, 584, 300, 746, 50632, 50632, 1437, 2085, 13, 407, 264, 4009, 295, 3494, 307, 445, 1333, 295, 437, 291, 2464, 294, 300, 11, 294, 300, 3991, 300, 15626, 50932, 50932, 264, 34078, 13, 759, 291, 764, 11, 291, 458, 11, 257, 15576, 14237, 7372, 411, 46559, 11, 300, 311, 437, 311, 1219, 257, 3089, 51224, 51224, 700, 3109, 281, 21884, 13695, 13, 407, 586, 291, 434, 3579, 3089, 337, 11, 337, 7750, 4190, 484, 293, 300, 3089, 51644, 51644], "temperature": 0.0, "avg_logprob": -0.05861036223594589, "compression_ratio": 1.564516129032258, "no_caption_prob": 1.4510255823552143e-05}, {"id": 321, "seek": 213992, "start": 2151.28, "end": 2157.12, "text": " the schema. If you use, you know, a TypeScript package like Nexus, that's what's called a code", "tokens": [50364, 4696, 264, 3467, 2995, 493, 13, 400, 498, 436, 500, 380, 11, 264, 21884, 13695, 33063, 7154, 486, 584, 300, 746, 50632, 50632, 1437, 2085, 13, 407, 264, 4009, 295, 3494, 307, 445, 1333, 295, 437, 291, 2464, 294, 300, 11, 294, 300, 3991, 300, 15626, 50932, 50932, 264, 34078, 13, 759, 291, 764, 11, 291, 458, 11, 257, 15576, 14237, 7372, 411, 46559, 11, 300, 311, 437, 311, 1219, 257, 3089, 51224, 51224, 700, 3109, 281, 21884, 13695, 13, 407, 586, 291, 434, 3579, 3089, 337, 11, 337, 7750, 4190, 484, 293, 300, 3089, 51644, 51644], "temperature": 0.0, "avg_logprob": -0.05861036223594589, "compression_ratio": 1.564516129032258, "no_caption_prob": 1.4510255823552143e-05}, {"id": 322, "seek": 213992, "start": 2157.12, "end": 2165.52, "text": " first approach to GraphQL. So now you're writing code for, for sending values out and that code", "tokens": [50364, 4696, 264, 3467, 2995, 493, 13, 400, 498, 436, 500, 380, 11, 264, 21884, 13695, 33063, 7154, 486, 584, 300, 746, 50632, 50632, 1437, 2085, 13, 407, 264, 4009, 295, 3494, 307, 445, 1333, 295, 437, 291, 2464, 294, 300, 11, 294, 300, 3991, 300, 15626, 50932, 50932, 264, 34078, 13, 759, 291, 764, 11, 291, 458, 11, 257, 15576, 14237, 7372, 411, 46559, 11, 300, 311, 437, 311, 1219, 257, 3089, 51224, 51224, 700, 3109, 281, 21884, 13695, 13, 407, 586, 291, 434, 3579, 3089, 337, 11, 337, 7750, 4190, 484, 293, 300, 3089, 51644, 51644], "temperature": 0.0, "avg_logprob": -0.05861036223594589, "compression_ratio": 1.564516129032258, "no_caption_prob": 1.4510255823552143e-05}, {"id": 323, "seek": 216552, "start": 2165.52, "end": 2170.08, "text": " is the source of truth for the schema. So sometimes they call this code first, you know,", "tokens": [50364, 307, 264, 4009, 295, 3494, 337, 264, 34078, 13, 407, 2171, 436, 818, 341, 3089, 700, 11, 291, 458, 11, 50592, 50592, 34078, 700, 420, 3089, 700, 11587, 281, 21884, 13695, 13, 759, 291, 434, 1228, 257, 2290, 411, 8646, 2991, 420, 10223, 38, 2662, 794, 11, 50904, 50904, 550, 264, 4009, 295, 3494, 307, 428, 10223, 45189, 8149, 13, 400, 300, 8149, 11, 729, 3873, 486, 747, 51256, 51256, 428, 8149, 34078, 293, 1261, 300, 666, 264, 34078, 13, 407, 867, 7914, 295, 1016, 621, 882, 13, 1779, 13, 51568, 51596], "temperature": 0.0, "avg_logprob": -0.06723095001058375, "compression_ratio": 1.7110091743119267, "no_caption_prob": 3.555960347512155e-06}, {"id": 324, "seek": 216552, "start": 2170.08, "end": 2176.32, "text": " schema first or code first approaches to GraphQL. If you're using a tool like Hasura or PostGraphile,", "tokens": [50364, 307, 264, 4009, 295, 3494, 337, 264, 34078, 13, 407, 2171, 436, 818, 341, 3089, 700, 11, 291, 458, 11, 50592, 50592, 34078, 700, 420, 3089, 700, 11587, 281, 21884, 13695, 13, 759, 291, 434, 1228, 257, 2290, 411, 8646, 2991, 420, 10223, 38, 2662, 794, 11, 50904, 50904, 550, 264, 4009, 295, 3494, 307, 428, 10223, 45189, 8149, 13, 400, 300, 8149, 11, 729, 3873, 486, 747, 51256, 51256, 428, 8149, 34078, 293, 1261, 300, 666, 264, 34078, 13, 407, 867, 7914, 295, 1016, 621, 882, 13, 1779, 13, 51568, 51596], "temperature": 0.0, "avg_logprob": -0.06723095001058375, "compression_ratio": 1.7110091743119267, "no_caption_prob": 3.555960347512155e-06}, {"id": 325, "seek": 216552, "start": 2176.32, "end": 2183.36, "text": " then the source of truth is your Postgres database. And that database, those tools will take", "tokens": [50364, 307, 264, 4009, 295, 3494, 337, 264, 34078, 13, 407, 2171, 436, 818, 341, 3089, 700, 11, 291, 458, 11, 50592, 50592, 34078, 700, 420, 3089, 700, 11587, 281, 21884, 13695, 13, 759, 291, 434, 1228, 257, 2290, 411, 8646, 2991, 420, 10223, 38, 2662, 794, 11, 50904, 50904, 550, 264, 4009, 295, 3494, 307, 428, 10223, 45189, 8149, 13, 400, 300, 8149, 11, 729, 3873, 486, 747, 51256, 51256, 428, 8149, 34078, 293, 1261, 300, 666, 264, 34078, 13, 407, 867, 7914, 295, 1016, 621, 882, 13, 1779, 13, 51568, 51596], "temperature": 0.0, "avg_logprob": -0.06723095001058375, "compression_ratio": 1.7110091743119267, "no_caption_prob": 3.555960347512155e-06}, {"id": 326, "seek": 216552, "start": 2183.36, "end": 2189.6, "text": " your database schema and turn that into the schema. So many layers of indirection. Right.", "tokens": [50364, 307, 264, 4009, 295, 3494, 337, 264, 34078, 13, 407, 2171, 436, 818, 341, 3089, 700, 11, 291, 458, 11, 50592, 50592, 34078, 700, 420, 3089, 700, 11587, 281, 21884, 13695, 13, 759, 291, 434, 1228, 257, 2290, 411, 8646, 2991, 420, 10223, 38, 2662, 794, 11, 50904, 50904, 550, 264, 4009, 295, 3494, 307, 428, 10223, 45189, 8149, 13, 400, 300, 8149, 11, 729, 3873, 486, 747, 51256, 51256, 428, 8149, 34078, 293, 1261, 300, 666, 264, 34078, 13, 407, 867, 7914, 295, 1016, 621, 882, 13, 1779, 13, 51568, 51596], "temperature": 0.0, "avg_logprob": -0.06723095001058375, "compression_ratio": 1.7110091743119267, "no_caption_prob": 3.555960347512155e-06}, {"id": 327, "seek": 218960, "start": 2189.6, "end": 2196.88, "text": " I mean, it works nicely, but yeah. Yeah. You can derive so many things from one thing,", "tokens": [50364, 286, 914, 11, 309, 1985, 9594, 11, 457, 1338, 13, 865, 13, 509, 393, 28446, 370, 867, 721, 490, 472, 551, 11, 50728, 50728, 597, 307, 588, 1481, 13, 1079, 13, 467, 393, 611, 1884, 2740, 11, 286, 2041, 13, 1042, 11, 300, 311, 558, 13, 400, 300, 311, 11, 50976, 50976, 300, 311, 2293, 264, 3430, 11, 558, 30, 1119, 2035, 300, 4009, 295, 3494, 307, 11, 293, 341, 393, 1051, 365, 51264, 51264, 613, 1333, 295, 8149, 34078, 9555, 21884, 13695, 3873, 307, 2171, 309, 393, 1813, 886, 2295, 1496, 51580, 51580, 570, 291, 434, 37447, 309, 281, 264, 1333, 295, 34078, 13, 823, 456, 366, 2098, 281, 5042, 300, 538, 1228, 1333, 295, 51852], "temperature": 0.0, "avg_logprob": -0.10680766065581505, "compression_ratio": 1.6332179930795847, "no_caption_prob": 0.00014883175026625395}, {"id": 328, "seek": 218960, "start": 2196.88, "end": 2201.8399999999997, "text": " which is very nice. Yes. It can also create problems, I guess. Well, that's right. And that's,", "tokens": [50364, 286, 914, 11, 309, 1985, 9594, 11, 457, 1338, 13, 865, 13, 509, 393, 28446, 370, 867, 721, 490, 472, 551, 11, 50728, 50728, 597, 307, 588, 1481, 13, 1079, 13, 467, 393, 611, 1884, 2740, 11, 286, 2041, 13, 1042, 11, 300, 311, 558, 13, 400, 300, 311, 11, 50976, 50976, 300, 311, 2293, 264, 3430, 11, 558, 30, 1119, 2035, 300, 4009, 295, 3494, 307, 11, 293, 341, 393, 1051, 365, 51264, 51264, 613, 1333, 295, 8149, 34078, 9555, 21884, 13695, 3873, 307, 2171, 309, 393, 1813, 886, 2295, 1496, 51580, 51580, 570, 291, 434, 37447, 309, 281, 264, 1333, 295, 34078, 13, 823, 456, 366, 2098, 281, 5042, 300, 538, 1228, 1333, 295, 51852], "temperature": 0.0, "avg_logprob": -0.10680766065581505, "compression_ratio": 1.6332179930795847, "no_caption_prob": 0.00014883175026625395}, {"id": 329, "seek": 218960, "start": 2201.8399999999997, "end": 2207.6, "text": " that's exactly the challenge, right? Is whatever that source of truth is, and this can happen with", "tokens": [50364, 286, 914, 11, 309, 1985, 9594, 11, 457, 1338, 13, 865, 13, 509, 393, 28446, 370, 867, 721, 490, 472, 551, 11, 50728, 50728, 597, 307, 588, 1481, 13, 1079, 13, 467, 393, 611, 1884, 2740, 11, 286, 2041, 13, 1042, 11, 300, 311, 558, 13, 400, 300, 311, 11, 50976, 50976, 300, 311, 2293, 264, 3430, 11, 558, 30, 1119, 2035, 300, 4009, 295, 3494, 307, 11, 293, 341, 393, 1051, 365, 51264, 51264, 613, 1333, 295, 8149, 34078, 9555, 21884, 13695, 3873, 307, 2171, 309, 393, 1813, 886, 2295, 1496, 51580, 51580, 570, 291, 434, 37447, 309, 281, 264, 1333, 295, 34078, 13, 823, 456, 366, 2098, 281, 5042, 300, 538, 1228, 1333, 295, 51852], "temperature": 0.0, "avg_logprob": -0.10680766065581505, "compression_ratio": 1.6332179930795847, "no_caption_prob": 0.00014883175026625395}, {"id": 330, "seek": 218960, "start": 2207.6, "end": 2213.92, "text": " these sort of database schema driven GraphQL tools is sometimes it can become too low level", "tokens": [50364, 286, 914, 11, 309, 1985, 9594, 11, 457, 1338, 13, 865, 13, 509, 393, 28446, 370, 867, 721, 490, 472, 551, 11, 50728, 50728, 597, 307, 588, 1481, 13, 1079, 13, 467, 393, 611, 1884, 2740, 11, 286, 2041, 13, 1042, 11, 300, 311, 558, 13, 400, 300, 311, 11, 50976, 50976, 300, 311, 2293, 264, 3430, 11, 558, 30, 1119, 2035, 300, 4009, 295, 3494, 307, 11, 293, 341, 393, 1051, 365, 51264, 51264, 613, 1333, 295, 8149, 34078, 9555, 21884, 13695, 3873, 307, 2171, 309, 393, 1813, 886, 2295, 1496, 51580, 51580, 570, 291, 434, 37447, 309, 281, 264, 1333, 295, 34078, 13, 823, 456, 366, 2098, 281, 5042, 300, 538, 1228, 1333, 295, 51852], "temperature": 0.0, "avg_logprob": -0.10680766065581505, "compression_ratio": 1.6332179930795847, "no_caption_prob": 0.00014883175026625395}, {"id": 331, "seek": 221392, "start": 2213.92, "end": 2219.6800000000003, "text": " because you're coupling it to the sort of schema. Now there are ways to avoid that by using sort of", "tokens": [50364, 570, 291, 434, 37447, 309, 281, 264, 1333, 295, 34078, 13, 823, 456, 366, 2098, 281, 5042, 300, 538, 1228, 1333, 295, 50652, 50652, 2946, 1496, 8020, 293, 1419, 8020, 300, 366, 2295, 1496, 4365, 300, 500, 380, 917, 493, 294, 264, 1908, 50944, 50944, 7170, 9362, 13, 509, 393, 6964, 11, 291, 458, 11, 291, 393, 6964, 10223, 45189, 6828, 293, 764, 729, 382, 257, 11, 51252, 51288, 257, 636, 281, 360, 2946, 1496, 721, 13, 583, 439, 300, 281, 584, 11, 498, 291, 434, 2731, 538, 264, 2685, 21884, 13695, 15181, 10660, 11, 51628, 51628, 300, 311, 11, 300, 311, 406, 264, 1021, 551, 13, 440, 1021, 935, 307, 437, 307, 264, 4009, 295, 3494, 30, 51844], "temperature": 0.0, "avg_logprob": -0.07730993160531541, "compression_ratio": 1.7117437722419928, "no_caption_prob": 0.0002868082083296031}, {"id": 332, "seek": 221392, "start": 2219.6800000000003, "end": 2225.52, "text": " higher level tables and having tables that are low level details that don't end up in the public", "tokens": [50364, 570, 291, 434, 37447, 309, 281, 264, 1333, 295, 34078, 13, 823, 456, 366, 2098, 281, 5042, 300, 538, 1228, 1333, 295, 50652, 50652, 2946, 1496, 8020, 293, 1419, 8020, 300, 366, 2295, 1496, 4365, 300, 500, 380, 917, 493, 294, 264, 1908, 50944, 50944, 7170, 9362, 13, 509, 393, 6964, 11, 291, 458, 11, 291, 393, 6964, 10223, 45189, 6828, 293, 764, 729, 382, 257, 11, 51252, 51288, 257, 636, 281, 360, 2946, 1496, 721, 13, 583, 439, 300, 281, 584, 11, 498, 291, 434, 2731, 538, 264, 2685, 21884, 13695, 15181, 10660, 11, 51628, 51628, 300, 311, 11, 300, 311, 406, 264, 1021, 551, 13, 440, 1021, 935, 307, 437, 307, 264, 4009, 295, 3494, 30, 51844], "temperature": 0.0, "avg_logprob": -0.07730993160531541, "compression_ratio": 1.7117437722419928, "no_caption_prob": 0.0002868082083296031}, {"id": 333, "seek": 221392, "start": 2225.52, "end": 2231.6800000000003, "text": " facing API. You can define, you know, you can define Postgres functions and use those as a,", "tokens": [50364, 570, 291, 434, 37447, 309, 281, 264, 1333, 295, 34078, 13, 823, 456, 366, 2098, 281, 5042, 300, 538, 1228, 1333, 295, 50652, 50652, 2946, 1496, 8020, 293, 1419, 8020, 300, 366, 2295, 1496, 4365, 300, 500, 380, 917, 493, 294, 264, 1908, 50944, 50944, 7170, 9362, 13, 509, 393, 6964, 11, 291, 458, 11, 291, 393, 6964, 10223, 45189, 6828, 293, 764, 729, 382, 257, 11, 51252, 51288, 257, 636, 281, 360, 2946, 1496, 721, 13, 583, 439, 300, 281, 584, 11, 498, 291, 434, 2731, 538, 264, 2685, 21884, 13695, 15181, 10660, 11, 51628, 51628, 300, 311, 11, 300, 311, 406, 264, 1021, 551, 13, 440, 1021, 935, 307, 437, 307, 264, 4009, 295, 3494, 30, 51844], "temperature": 0.0, "avg_logprob": -0.07730993160531541, "compression_ratio": 1.7117437722419928, "no_caption_prob": 0.0002868082083296031}, {"id": 334, "seek": 221392, "start": 2232.4, "end": 2239.2000000000003, "text": " a way to do higher level things. But all that to say, if you're lost by the specific GraphQL jargon,", "tokens": [50364, 570, 291, 434, 37447, 309, 281, 264, 1333, 295, 34078, 13, 823, 456, 366, 2098, 281, 5042, 300, 538, 1228, 1333, 295, 50652, 50652, 2946, 1496, 8020, 293, 1419, 8020, 300, 366, 2295, 1496, 4365, 300, 500, 380, 917, 493, 294, 264, 1908, 50944, 50944, 7170, 9362, 13, 509, 393, 6964, 11, 291, 458, 11, 291, 393, 6964, 10223, 45189, 6828, 293, 764, 729, 382, 257, 11, 51252, 51288, 257, 636, 281, 360, 2946, 1496, 721, 13, 583, 439, 300, 281, 584, 11, 498, 291, 434, 2731, 538, 264, 2685, 21884, 13695, 15181, 10660, 11, 51628, 51628, 300, 311, 11, 300, 311, 406, 264, 1021, 551, 13, 440, 1021, 935, 307, 437, 307, 264, 4009, 295, 3494, 30, 51844], "temperature": 0.0, "avg_logprob": -0.07730993160531541, "compression_ratio": 1.7117437722419928, "no_caption_prob": 0.0002868082083296031}, {"id": 335, "seek": 223920, "start": 2239.2, "end": 2244.08, "text": " that's, that's not the important thing. The important point is what is the source of truth?", "tokens": [50364, 300, 311, 11, 300, 311, 406, 264, 1021, 551, 13, 440, 1021, 935, 307, 437, 307, 264, 4009, 295, 3494, 30, 50608, 50608, 400, 341, 307, 746, 286, 600, 668, 1953, 466, 13, 407, 365, 264, 1331, 2699, 76, 15576, 14237, 728, 404, 3109, 11, 50868, 50868, 264, 4009, 295, 3494, 390, 264, 3467, 300, 291, 445, 11, 300, 291, 4114, 294, 428, 2436, 13, 407, 562, 291, 584, 2436, 11, 51140, 51140, 2436, 2845, 4195, 11, 293, 550, 291, 362, 257, 2136, 11, 731, 11, 456, 311, 472, 1154, 11, 597, 307, 291, 393, 380, 2845, 257, 51516, 51516], "temperature": 0.0, "avg_logprob": -0.07868620928596048, "compression_ratio": 1.711111111111111, "no_caption_prob": 0.0004371950635686517}, {"id": 336, "seek": 223920, "start": 2244.08, "end": 2249.2799999999997, "text": " And this is something I've been thinking about. So with the old Elm TypeScript interop approach,", "tokens": [50364, 300, 311, 11, 300, 311, 406, 264, 1021, 551, 13, 440, 1021, 935, 307, 437, 307, 264, 4009, 295, 3494, 30, 50608, 50608, 400, 341, 307, 746, 286, 600, 668, 1953, 466, 13, 407, 365, 264, 1331, 2699, 76, 15576, 14237, 728, 404, 3109, 11, 50868, 50868, 264, 4009, 295, 3494, 390, 264, 3467, 300, 291, 445, 11, 300, 291, 4114, 294, 428, 2436, 13, 407, 562, 291, 584, 2436, 11, 51140, 51140, 2436, 2845, 4195, 11, 293, 550, 291, 362, 257, 2136, 11, 731, 11, 456, 311, 472, 1154, 11, 597, 307, 291, 393, 380, 2845, 257, 51516, 51516], "temperature": 0.0, "avg_logprob": -0.07868620928596048, "compression_ratio": 1.711111111111111, "no_caption_prob": 0.0004371950635686517}, {"id": 337, "seek": 223920, "start": 2249.2799999999997, "end": 2254.72, "text": " the source of truth was the types that you just, that you wrote in your port. So when you say port,", "tokens": [50364, 300, 311, 11, 300, 311, 406, 264, 1021, 551, 13, 440, 1021, 935, 307, 437, 307, 264, 4009, 295, 3494, 30, 50608, 50608, 400, 341, 307, 746, 286, 600, 668, 1953, 466, 13, 407, 365, 264, 1331, 2699, 76, 15576, 14237, 728, 404, 3109, 11, 50868, 50868, 264, 4009, 295, 3494, 390, 264, 3467, 300, 291, 445, 11, 300, 291, 4114, 294, 428, 2436, 13, 407, 562, 291, 584, 2436, 11, 51140, 51140, 2436, 2845, 4195, 11, 293, 550, 291, 362, 257, 2136, 11, 731, 11, 456, 311, 472, 1154, 11, 597, 307, 291, 393, 380, 2845, 257, 51516, 51516], "temperature": 0.0, "avg_logprob": -0.07868620928596048, "compression_ratio": 1.711111111111111, "no_caption_prob": 0.0004371950635686517}, {"id": 338, "seek": 223920, "start": 2254.72, "end": 2262.24, "text": " port send user, and then you have a record, well, there's one problem, which is you can't send a", "tokens": [50364, 300, 311, 11, 300, 311, 406, 264, 1021, 551, 13, 440, 1021, 935, 307, 437, 307, 264, 4009, 295, 3494, 30, 50608, 50608, 400, 341, 307, 746, 286, 600, 668, 1953, 466, 13, 407, 365, 264, 1331, 2699, 76, 15576, 14237, 728, 404, 3109, 11, 50868, 50868, 264, 4009, 295, 3494, 390, 264, 3467, 300, 291, 445, 11, 300, 291, 4114, 294, 428, 2436, 13, 407, 562, 291, 584, 2436, 11, 51140, 51140, 2436, 2845, 4195, 11, 293, 550, 291, 362, 257, 2136, 11, 731, 11, 456, 311, 472, 1154, 11, 597, 307, 291, 393, 380, 2845, 257, 51516, 51516], "temperature": 0.0, "avg_logprob": -0.07868620928596048, "compression_ratio": 1.711111111111111, "no_caption_prob": 0.0004371950635686517}, {"id": 339, "seek": 226224, "start": 2262.24, "end": 2269.2799999999997, "text": " custom type through that port because, you know, Elm doesn't have a way to describe, to describe", "tokens": [50364, 2375, 2010, 807, 300, 2436, 570, 11, 291, 458, 11, 2699, 76, 1177, 380, 362, 257, 636, 281, 6786, 11, 281, 6786, 50716, 50716, 2375, 3467, 294, 257, 17436, 22395, 636, 13, 407, 291, 434, 5541, 365, 7724, 11, 13985, 11, 560, 82, 11, 613, 3875, 3467, 13, 51024, 51024, 865, 13, 407, 291, 434, 670, 2674, 3319, 13, 865, 13, 509, 727, 312, 544, 13600, 498, 291, 632, 544, 3601, 11, 51420, 51420, 457, 291, 2731, 309, 4079, 13, 7587, 13, 467, 311, 4470, 88, 13, 467, 1177, 380, 362, 264, 1577, 40189, 1347, 295, 264, 2699, 76, 51708, 51708], "temperature": 0.0, "avg_logprob": -0.12434812193935357, "compression_ratio": 1.6428571428571428, "no_caption_prob": 0.00012730508751701564}, {"id": 340, "seek": 226224, "start": 2269.2799999999997, "end": 2275.4399999999996, "text": " custom types in a serializable way. So you're stuck with records, strings, ints, these basic types.", "tokens": [50364, 2375, 2010, 807, 300, 2436, 570, 11, 291, 458, 11, 2699, 76, 1177, 380, 362, 257, 636, 281, 6786, 11, 281, 6786, 50716, 50716, 2375, 3467, 294, 257, 17436, 22395, 636, 13, 407, 291, 434, 5541, 365, 7724, 11, 13985, 11, 560, 82, 11, 613, 3875, 3467, 13, 51024, 51024, 865, 13, 407, 291, 434, 670, 2674, 3319, 13, 865, 13, 509, 727, 312, 544, 13600, 498, 291, 632, 544, 3601, 11, 51420, 51420, 457, 291, 2731, 309, 4079, 13, 7587, 13, 467, 311, 4470, 88, 13, 467, 1177, 380, 362, 264, 1577, 40189, 1347, 295, 264, 2699, 76, 51708, 51708], "temperature": 0.0, "avg_logprob": -0.12434812193935357, "compression_ratio": 1.6428571428571428, "no_caption_prob": 0.00012730508751701564}, {"id": 341, "seek": 226224, "start": 2275.4399999999996, "end": 2283.3599999999997, "text": " Yeah. So you're over generalizing. Yeah. You could be more precise if you had more knowledge,", "tokens": [50364, 2375, 2010, 807, 300, 2436, 570, 11, 291, 458, 11, 2699, 76, 1177, 380, 362, 257, 636, 281, 6786, 11, 281, 6786, 50716, 50716, 2375, 3467, 294, 257, 17436, 22395, 636, 13, 407, 291, 434, 5541, 365, 7724, 11, 13985, 11, 560, 82, 11, 613, 3875, 3467, 13, 51024, 51024, 865, 13, 407, 291, 434, 670, 2674, 3319, 13, 865, 13, 509, 727, 312, 544, 13600, 498, 291, 632, 544, 3601, 11, 51420, 51420, 457, 291, 2731, 309, 4079, 13, 7587, 13, 467, 311, 4470, 88, 13, 467, 1177, 380, 362, 264, 1577, 40189, 1347, 295, 264, 2699, 76, 51708, 51708], "temperature": 0.0, "avg_logprob": -0.12434812193935357, "compression_ratio": 1.6428571428571428, "no_caption_prob": 0.00012730508751701564}, {"id": 342, "seek": 226224, "start": 2283.3599999999997, "end": 2289.12, "text": " but you lost it somewhere. Exactly. It's lossy. It doesn't have the full expressive power of the Elm", "tokens": [50364, 2375, 2010, 807, 300, 2436, 570, 11, 291, 458, 11, 2699, 76, 1177, 380, 362, 257, 636, 281, 6786, 11, 281, 6786, 50716, 50716, 2375, 3467, 294, 257, 17436, 22395, 636, 13, 407, 291, 434, 5541, 365, 7724, 11, 13985, 11, 560, 82, 11, 613, 3875, 3467, 13, 51024, 51024, 865, 13, 407, 291, 434, 670, 2674, 3319, 13, 865, 13, 509, 727, 312, 544, 13600, 498, 291, 632, 544, 3601, 11, 51420, 51420, 457, 291, 2731, 309, 4079, 13, 7587, 13, 467, 311, 4470, 88, 13, 467, 1177, 380, 362, 264, 1577, 40189, 1347, 295, 264, 2699, 76, 51708, 51708], "temperature": 0.0, "avg_logprob": -0.12434812193935357, "compression_ratio": 1.6428571428571428, "no_caption_prob": 0.00012730508751701564}, {"id": 343, "seek": 228912, "start": 2289.12, "end": 2293.2799999999997, "text": " Type system. So that's, that's one problem, but, but that's actually not the problem I'm talking", "tokens": [50364, 15576, 1185, 13, 407, 300, 311, 11, 300, 311, 472, 1154, 11, 457, 11, 457, 300, 311, 767, 406, 264, 1154, 286, 478, 1417, 50572, 50572, 466, 13, 440, 1154, 286, 478, 1417, 466, 307, 300, 586, 437, 307, 264, 11, 437, 307, 264, 16505, 15576, 14237, 2010, 30, 50920, 50920, 1042, 11, 309, 311, 2035, 291, 917, 493, 365, 538, 6772, 17436, 3319, 300, 2699, 76, 2010, 13, 407, 2870, 51172, 51172, 264, 15705, 295, 300, 6772, 17436, 22395, 2699, 76, 2010, 11, 406, 885, 1075, 281, 2906, 604, 2699, 76, 2010, 11, 51448, 51448, 457, 586, 428, 4009, 295, 3494, 307, 300, 11, 300, 2699, 76, 2010, 13, 400, 370, 754, 498, 291, 727, 6786, 604, 2699, 76, 51844, 51844], "temperature": 0.0, "avg_logprob": -0.07224402120036463, "compression_ratio": 1.89453125, "no_caption_prob": 7.72168132243678e-05}, {"id": 344, "seek": 228912, "start": 2293.2799999999997, "end": 2300.24, "text": " about. The problem I'm talking about is that now what is the, what is the resulting TypeScript type?", "tokens": [50364, 15576, 1185, 13, 407, 300, 311, 11, 300, 311, 472, 1154, 11, 457, 11, 457, 300, 311, 767, 406, 264, 1154, 286, 478, 1417, 50572, 50572, 466, 13, 440, 1154, 286, 478, 1417, 466, 307, 300, 586, 437, 307, 264, 11, 437, 307, 264, 16505, 15576, 14237, 2010, 30, 50920, 50920, 1042, 11, 309, 311, 2035, 291, 917, 493, 365, 538, 6772, 17436, 3319, 300, 2699, 76, 2010, 13, 407, 2870, 51172, 51172, 264, 15705, 295, 300, 6772, 17436, 22395, 2699, 76, 2010, 11, 406, 885, 1075, 281, 2906, 604, 2699, 76, 2010, 11, 51448, 51448, 457, 586, 428, 4009, 295, 3494, 307, 300, 11, 300, 2699, 76, 2010, 13, 400, 370, 754, 498, 291, 727, 6786, 604, 2699, 76, 51844, 51844], "temperature": 0.0, "avg_logprob": -0.07224402120036463, "compression_ratio": 1.89453125, "no_caption_prob": 7.72168132243678e-05}, {"id": 345, "seek": 228912, "start": 2300.24, "end": 2305.2799999999997, "text": " Well, it's whatever you end up with by automatically serializing that Elm type. So forget", "tokens": [50364, 15576, 1185, 13, 407, 300, 311, 11, 300, 311, 472, 1154, 11, 457, 11, 457, 300, 311, 767, 406, 264, 1154, 286, 478, 1417, 50572, 50572, 466, 13, 440, 1154, 286, 478, 1417, 466, 307, 300, 586, 437, 307, 264, 11, 437, 307, 264, 16505, 15576, 14237, 2010, 30, 50920, 50920, 1042, 11, 309, 311, 2035, 291, 917, 493, 365, 538, 6772, 17436, 3319, 300, 2699, 76, 2010, 13, 407, 2870, 51172, 51172, 264, 15705, 295, 300, 6772, 17436, 22395, 2699, 76, 2010, 11, 406, 885, 1075, 281, 2906, 604, 2699, 76, 2010, 11, 51448, 51448, 457, 586, 428, 4009, 295, 3494, 307, 300, 11, 300, 2699, 76, 2010, 13, 400, 370, 754, 498, 291, 727, 6786, 604, 2699, 76, 51844, 51844], "temperature": 0.0, "avg_logprob": -0.07224402120036463, "compression_ratio": 1.89453125, "no_caption_prob": 7.72168132243678e-05}, {"id": 346, "seek": 228912, "start": 2305.2799999999997, "end": 2310.7999999999997, "text": " the limitations of that automatically serializable Elm type, not being able to represent any Elm type,", "tokens": [50364, 15576, 1185, 13, 407, 300, 311, 11, 300, 311, 472, 1154, 11, 457, 11, 457, 300, 311, 767, 406, 264, 1154, 286, 478, 1417, 50572, 50572, 466, 13, 440, 1154, 286, 478, 1417, 466, 307, 300, 586, 437, 307, 264, 11, 437, 307, 264, 16505, 15576, 14237, 2010, 30, 50920, 50920, 1042, 11, 309, 311, 2035, 291, 917, 493, 365, 538, 6772, 17436, 3319, 300, 2699, 76, 2010, 13, 407, 2870, 51172, 51172, 264, 15705, 295, 300, 6772, 17436, 22395, 2699, 76, 2010, 11, 406, 885, 1075, 281, 2906, 604, 2699, 76, 2010, 11, 51448, 51448, 457, 586, 428, 4009, 295, 3494, 307, 300, 11, 300, 2699, 76, 2010, 13, 400, 370, 754, 498, 291, 727, 6786, 604, 2699, 76, 51844, 51844], "temperature": 0.0, "avg_logprob": -0.07224402120036463, "compression_ratio": 1.89453125, "no_caption_prob": 7.72168132243678e-05}, {"id": 347, "seek": 228912, "start": 2310.7999999999997, "end": 2318.72, "text": " but now your source of truth is that, that Elm type. And so even if you could describe any Elm", "tokens": [50364, 15576, 1185, 13, 407, 300, 311, 11, 300, 311, 472, 1154, 11, 457, 11, 457, 300, 311, 767, 406, 264, 1154, 286, 478, 1417, 50572, 50572, 466, 13, 440, 1154, 286, 478, 1417, 466, 307, 300, 586, 437, 307, 264, 11, 437, 307, 264, 16505, 15576, 14237, 2010, 30, 50920, 50920, 1042, 11, 309, 311, 2035, 291, 917, 493, 365, 538, 6772, 17436, 3319, 300, 2699, 76, 2010, 13, 407, 2870, 51172, 51172, 264, 15705, 295, 300, 6772, 17436, 22395, 2699, 76, 2010, 11, 406, 885, 1075, 281, 2906, 604, 2699, 76, 2010, 11, 51448, 51448, 457, 586, 428, 4009, 295, 3494, 307, 300, 11, 300, 2699, 76, 2010, 13, 400, 370, 754, 498, 291, 727, 6786, 604, 2699, 76, 51844, 51844], "temperature": 0.0, "avg_logprob": -0.07224402120036463, "compression_ratio": 1.89453125, "no_caption_prob": 7.72168132243678e-05}, {"id": 348, "seek": 231872, "start": 2318.72, "end": 2324.0, "text": " type, even if you could, let's just say you could automatically serialize a custom type in Elm", "tokens": [50364, 2010, 11, 754, 498, 291, 727, 11, 718, 311, 445, 584, 291, 727, 6772, 17436, 1125, 257, 2375, 2010, 294, 2699, 76, 50628, 50628, 1228, 257, 2436, 13, 407, 291, 727, 584, 11, 291, 458, 11, 291, 362, 2010, 4195, 307, 8341, 420, 24236, 11, 24236, 7348, 11, 2035, 51012, 51012, 10247, 2699, 76, 2375, 2010, 291, 362, 13, 961, 311, 584, 291, 727, 2845, 300, 807, 257, 2436, 3838, 293, 2699, 76, 51220, 51220, 8399, 17436, 5660, 309, 13, 1042, 11, 437, 311, 264, 17436, 2144, 7877, 30, 1436, 307, 300, 577, 291, 528, 309, 294, 51472, 51472, 15576, 14237, 30, 407, 456, 311, 264, 2734, 13, 823, 428, 4009, 295, 3494, 307, 264, 2699, 76, 2010, 293, 300, 311, 264, 700, 51728, 51728], "temperature": 0.0, "avg_logprob": -0.05611228942871094, "compression_ratio": 1.7732342007434945, "no_caption_prob": 0.00011959292169194669}, {"id": 349, "seek": 231872, "start": 2324.0, "end": 2331.68, "text": " using a port. So you could say, you know, you have type user is guest or admin, admin ID, whatever", "tokens": [50364, 2010, 11, 754, 498, 291, 727, 11, 718, 311, 445, 584, 291, 727, 6772, 17436, 1125, 257, 2375, 2010, 294, 2699, 76, 50628, 50628, 1228, 257, 2436, 13, 407, 291, 727, 584, 11, 291, 458, 11, 291, 362, 2010, 4195, 307, 8341, 420, 24236, 11, 24236, 7348, 11, 2035, 51012, 51012, 10247, 2699, 76, 2375, 2010, 291, 362, 13, 961, 311, 584, 291, 727, 2845, 300, 807, 257, 2436, 3838, 293, 2699, 76, 51220, 51220, 8399, 17436, 5660, 309, 13, 1042, 11, 437, 311, 264, 17436, 2144, 7877, 30, 1436, 307, 300, 577, 291, 528, 309, 294, 51472, 51472, 15576, 14237, 30, 407, 456, 311, 264, 2734, 13, 823, 428, 4009, 295, 3494, 307, 264, 2699, 76, 2010, 293, 300, 311, 264, 700, 51728, 51728], "temperature": 0.0, "avg_logprob": -0.05611228942871094, "compression_ratio": 1.7732342007434945, "no_caption_prob": 0.00011959292169194669}, {"id": 350, "seek": 231872, "start": 2331.68, "end": 2335.8399999999997, "text": " fancy Elm custom type you have. Let's say you could send that through a port directly and Elm", "tokens": [50364, 2010, 11, 754, 498, 291, 727, 11, 718, 311, 445, 584, 291, 727, 6772, 17436, 1125, 257, 2375, 2010, 294, 2699, 76, 50628, 50628, 1228, 257, 2436, 13, 407, 291, 727, 584, 11, 291, 458, 11, 291, 362, 2010, 4195, 307, 8341, 420, 24236, 11, 24236, 7348, 11, 2035, 51012, 51012, 10247, 2699, 76, 2375, 2010, 291, 362, 13, 961, 311, 584, 291, 727, 2845, 300, 807, 257, 2436, 3838, 293, 2699, 76, 51220, 51220, 8399, 17436, 5660, 309, 13, 1042, 11, 437, 311, 264, 17436, 2144, 7877, 30, 1436, 307, 300, 577, 291, 528, 309, 294, 51472, 51472, 15576, 14237, 30, 407, 456, 311, 264, 2734, 13, 823, 428, 4009, 295, 3494, 307, 264, 2699, 76, 2010, 293, 300, 311, 264, 700, 51728, 51728], "temperature": 0.0, "avg_logprob": -0.05611228942871094, "compression_ratio": 1.7732342007434945, "no_caption_prob": 0.00011959292169194669}, {"id": 351, "seek": 231872, "start": 2335.8399999999997, "end": 2340.8799999999997, "text": " auto serializes it. Well, what's the serialization format? Because is that how you want it in", "tokens": [50364, 2010, 11, 754, 498, 291, 727, 11, 718, 311, 445, 584, 291, 727, 6772, 17436, 1125, 257, 2375, 2010, 294, 2699, 76, 50628, 50628, 1228, 257, 2436, 13, 407, 291, 727, 584, 11, 291, 458, 11, 291, 362, 2010, 4195, 307, 8341, 420, 24236, 11, 24236, 7348, 11, 2035, 51012, 51012, 10247, 2699, 76, 2375, 2010, 291, 362, 13, 961, 311, 584, 291, 727, 2845, 300, 807, 257, 2436, 3838, 293, 2699, 76, 51220, 51220, 8399, 17436, 5660, 309, 13, 1042, 11, 437, 311, 264, 17436, 2144, 7877, 30, 1436, 307, 300, 577, 291, 528, 309, 294, 51472, 51472, 15576, 14237, 30, 407, 456, 311, 264, 2734, 13, 823, 428, 4009, 295, 3494, 307, 264, 2699, 76, 2010, 293, 300, 311, 264, 700, 51728, 51728], "temperature": 0.0, "avg_logprob": -0.05611228942871094, "compression_ratio": 1.7732342007434945, "no_caption_prob": 0.00011959292169194669}, {"id": 352, "seek": 231872, "start": 2340.8799999999997, "end": 2346.0, "text": " TypeScript? So there's the issue. Now your source of truth is the Elm type and that's the first", "tokens": [50364, 2010, 11, 754, 498, 291, 727, 11, 718, 311, 445, 584, 291, 727, 6772, 17436, 1125, 257, 2375, 2010, 294, 2699, 76, 50628, 50628, 1228, 257, 2436, 13, 407, 291, 727, 584, 11, 291, 458, 11, 291, 362, 2010, 4195, 307, 8341, 420, 24236, 11, 24236, 7348, 11, 2035, 51012, 51012, 10247, 2699, 76, 2375, 2010, 291, 362, 13, 961, 311, 584, 291, 727, 2845, 300, 807, 257, 2436, 3838, 293, 2699, 76, 51220, 51220, 8399, 17436, 5660, 309, 13, 1042, 11, 437, 311, 264, 17436, 2144, 7877, 30, 1436, 307, 300, 577, 291, 528, 309, 294, 51472, 51472, 15576, 14237, 30, 407, 456, 311, 264, 2734, 13, 823, 428, 4009, 295, 3494, 307, 264, 2699, 76, 2010, 293, 300, 311, 264, 700, 51728, 51728], "temperature": 0.0, "avg_logprob": -0.05611228942871094, "compression_ratio": 1.7732342007434945, "no_caption_prob": 0.00011959292169194669}, {"id": 353, "seek": 234600, "start": 2346.0, "end": 2350.32, "text": " class citizen. But what does that mean for the TypeScript type? It's a second class citizen.", "tokens": [50364, 1508, 13326, 13, 583, 437, 775, 300, 914, 337, 264, 15576, 14237, 2010, 30, 467, 311, 257, 1150, 1508, 13326, 13, 50580, 50580, 663, 311, 11, 300, 311, 364, 26387, 1154, 13, 407, 437, 286, 600, 5334, 307, 300, 472, 636, 281, 3109, 341, 1154, 50932, 50932, 307, 281, 652, 264, 700, 1508, 13326, 11, 264, 17436, 2144, 420, 730, 260, 831, 2144, 4583, 11, 51212, 51212, 264, 1333, 295, 22860, 13, 1436, 498, 291, 519, 466, 257, 979, 19866, 11, 437, 775, 257, 979, 19866, 6786, 382, 264, 51524, 51524, 4009, 295, 3494, 30, 4402, 309, 11, 307, 264, 4009, 295, 3494, 11, 264, 2699, 76, 2010, 291, 434, 516, 281, 917, 493, 365, 11, 420, 307, 51784, 51784], "temperature": 0.0, "avg_logprob": -0.05347595058503698, "compression_ratio": 1.8054474708171206, "no_caption_prob": 4.331831223680638e-05}, {"id": 354, "seek": 234600, "start": 2350.32, "end": 2357.36, "text": " That's, that's an inherent problem. So what I've realized is that one way to approach this problem", "tokens": [50364, 1508, 13326, 13, 583, 437, 775, 300, 914, 337, 264, 15576, 14237, 2010, 30, 467, 311, 257, 1150, 1508, 13326, 13, 50580, 50580, 663, 311, 11, 300, 311, 364, 26387, 1154, 13, 407, 437, 286, 600, 5334, 307, 300, 472, 636, 281, 3109, 341, 1154, 50932, 50932, 307, 281, 652, 264, 700, 1508, 13326, 11, 264, 17436, 2144, 420, 730, 260, 831, 2144, 4583, 11, 51212, 51212, 264, 1333, 295, 22860, 13, 1436, 498, 291, 519, 466, 257, 979, 19866, 11, 437, 775, 257, 979, 19866, 6786, 382, 264, 51524, 51524, 4009, 295, 3494, 30, 4402, 309, 11, 307, 264, 4009, 295, 3494, 11, 264, 2699, 76, 2010, 291, 434, 516, 281, 917, 493, 365, 11, 420, 307, 51784, 51784], "temperature": 0.0, "avg_logprob": -0.05347595058503698, "compression_ratio": 1.8054474708171206, "no_caption_prob": 4.331831223680638e-05}, {"id": 355, "seek": 234600, "start": 2357.36, "end": 2362.96, "text": " is to make the first class citizen, the serialization or deserialization layer,", "tokens": [50364, 1508, 13326, 13, 583, 437, 775, 300, 914, 337, 264, 15576, 14237, 2010, 30, 467, 311, 257, 1150, 1508, 13326, 13, 50580, 50580, 663, 311, 11, 300, 311, 364, 26387, 1154, 13, 407, 437, 286, 600, 5334, 307, 300, 472, 636, 281, 3109, 341, 1154, 50932, 50932, 307, 281, 652, 264, 700, 1508, 13326, 11, 264, 17436, 2144, 420, 730, 260, 831, 2144, 4583, 11, 51212, 51212, 264, 1333, 295, 22860, 13, 1436, 498, 291, 519, 466, 257, 979, 19866, 11, 437, 775, 257, 979, 19866, 6786, 382, 264, 51524, 51524, 4009, 295, 3494, 30, 4402, 309, 11, 307, 264, 4009, 295, 3494, 11, 264, 2699, 76, 2010, 291, 434, 516, 281, 917, 493, 365, 11, 420, 307, 51784, 51784], "temperature": 0.0, "avg_logprob": -0.05347595058503698, "compression_ratio": 1.8054474708171206, "no_caption_prob": 4.331831223680638e-05}, {"id": 356, "seek": 234600, "start": 2362.96, "end": 2369.2, "text": " the sort of adapter. Because if you think about a decoder, what does a decoder describe as the", "tokens": [50364, 1508, 13326, 13, 583, 437, 775, 300, 914, 337, 264, 15576, 14237, 2010, 30, 467, 311, 257, 1150, 1508, 13326, 13, 50580, 50580, 663, 311, 11, 300, 311, 364, 26387, 1154, 13, 407, 437, 286, 600, 5334, 307, 300, 472, 636, 281, 3109, 341, 1154, 50932, 50932, 307, 281, 652, 264, 700, 1508, 13326, 11, 264, 17436, 2144, 420, 730, 260, 831, 2144, 4583, 11, 51212, 51212, 264, 1333, 295, 22860, 13, 1436, 498, 291, 519, 466, 257, 979, 19866, 11, 437, 775, 257, 979, 19866, 6786, 382, 264, 51524, 51524, 4009, 295, 3494, 30, 4402, 309, 11, 307, 264, 4009, 295, 3494, 11, 264, 2699, 76, 2010, 291, 434, 516, 281, 917, 493, 365, 11, 420, 307, 51784, 51784], "temperature": 0.0, "avg_logprob": -0.05347595058503698, "compression_ratio": 1.8054474708171206, "no_caption_prob": 4.331831223680638e-05}, {"id": 357, "seek": 234600, "start": 2369.2, "end": 2374.4, "text": " source of truth? Does it, is the source of truth, the Elm type you're going to end up with, or is", "tokens": [50364, 1508, 13326, 13, 583, 437, 775, 300, 914, 337, 264, 15576, 14237, 2010, 30, 467, 311, 257, 1150, 1508, 13326, 13, 50580, 50580, 663, 311, 11, 300, 311, 364, 26387, 1154, 13, 407, 437, 286, 600, 5334, 307, 300, 472, 636, 281, 3109, 341, 1154, 50932, 50932, 307, 281, 652, 264, 700, 1508, 13326, 11, 264, 17436, 2144, 420, 730, 260, 831, 2144, 4583, 11, 51212, 51212, 264, 1333, 295, 22860, 13, 1436, 498, 291, 519, 466, 257, 979, 19866, 11, 437, 775, 257, 979, 19866, 6786, 382, 264, 51524, 51524, 4009, 295, 3494, 30, 4402, 309, 11, 307, 264, 4009, 295, 3494, 11, 264, 2699, 76, 2010, 291, 434, 516, 281, 917, 493, 365, 11, 420, 307, 51784, 51784], "temperature": 0.0, "avg_logprob": -0.05347595058503698, "compression_ratio": 1.8054474708171206, "no_caption_prob": 4.331831223680638e-05}, {"id": 358, "seek": 237440, "start": 2374.4, "end": 2378.64, "text": " the source of truth, the JSON data that you're going to receive? The JSON data that you're going", "tokens": [50364, 264, 4009, 295, 3494, 11, 264, 31828, 1412, 300, 291, 434, 516, 281, 4774, 30, 440, 31828, 1412, 300, 291, 434, 516, 50576, 50576, 281, 4774, 13, 286, 576, 9695, 300, 264, 4009, 295, 3494, 307, 264, 12853, 4583, 11, 597, 8855, 1293, 13, 50924, 50960, 407, 300, 311, 264, 534, 1627, 551, 13, 23956, 472, 307, 257, 1150, 1508, 13326, 13, 509, 39345, 385, 13, 286, 39345, 51260, 51260, 291, 13, 663, 311, 428, 1168, 13, 407, 11, 370, 264, 11, 2232, 11, 291, 362, 406, 2731, 264, 3485, 281, 5109, 2035, 2010, 51704, 51704], "temperature": 0.0, "avg_logprob": -0.10563088436515963, "compression_ratio": 1.719298245614035, "no_caption_prob": 1.6701231288607232e-05}, {"id": 359, "seek": 237440, "start": 2378.64, "end": 2385.6, "text": " to receive. I would argue that the source of truth is the translation layer, which represents both.", "tokens": [50364, 264, 4009, 295, 3494, 11, 264, 31828, 1412, 300, 291, 434, 516, 281, 4774, 30, 440, 31828, 1412, 300, 291, 434, 516, 50576, 50576, 281, 4774, 13, 286, 576, 9695, 300, 264, 4009, 295, 3494, 307, 264, 12853, 4583, 11, 597, 8855, 1293, 13, 50924, 50960, 407, 300, 311, 264, 534, 1627, 551, 13, 23956, 472, 307, 257, 1150, 1508, 13326, 13, 509, 39345, 385, 13, 286, 39345, 51260, 51260, 291, 13, 663, 311, 428, 1168, 13, 407, 11, 370, 264, 11, 2232, 11, 291, 362, 406, 2731, 264, 3485, 281, 5109, 2035, 2010, 51704, 51704], "temperature": 0.0, "avg_logprob": -0.10563088436515963, "compression_ratio": 1.719298245614035, "no_caption_prob": 1.6701231288607232e-05}, {"id": 360, "seek": 237440, "start": 2386.32, "end": 2392.32, "text": " So that's the really cool thing. Neither one is a second class citizen. You tricked me. I tricked", "tokens": [50364, 264, 4009, 295, 3494, 11, 264, 31828, 1412, 300, 291, 434, 516, 281, 4774, 30, 440, 31828, 1412, 300, 291, 434, 516, 50576, 50576, 281, 4774, 13, 286, 576, 9695, 300, 264, 4009, 295, 3494, 307, 264, 12853, 4583, 11, 597, 8855, 1293, 13, 50924, 50960, 407, 300, 311, 264, 534, 1627, 551, 13, 23956, 472, 307, 257, 1150, 1508, 13326, 13, 509, 39345, 385, 13, 286, 39345, 51260, 51260, 291, 13, 663, 311, 428, 1168, 13, 407, 11, 370, 264, 11, 2232, 11, 291, 362, 406, 2731, 264, 3485, 281, 5109, 2035, 2010, 51704, 51704], "temperature": 0.0, "avg_logprob": -0.10563088436515963, "compression_ratio": 1.719298245614035, "no_caption_prob": 1.6701231288607232e-05}, {"id": 361, "seek": 237440, "start": 2392.32, "end": 2401.2000000000003, "text": " you. That's your question. So, so the, uh, you have not lost the ability to express whatever type", "tokens": [50364, 264, 4009, 295, 3494, 11, 264, 31828, 1412, 300, 291, 434, 516, 281, 4774, 30, 440, 31828, 1412, 300, 291, 434, 516, 50576, 50576, 281, 4774, 13, 286, 576, 9695, 300, 264, 4009, 295, 3494, 307, 264, 12853, 4583, 11, 597, 8855, 1293, 13, 50924, 50960, 407, 300, 311, 264, 534, 1627, 551, 13, 23956, 472, 307, 257, 1150, 1508, 13326, 13, 509, 39345, 385, 13, 286, 39345, 51260, 51260, 291, 13, 663, 311, 428, 1168, 13, 407, 11, 370, 264, 11, 2232, 11, 291, 362, 406, 2731, 264, 3485, 281, 5109, 2035, 2010, 51704, 51704], "temperature": 0.0, "avg_logprob": -0.10563088436515963, "compression_ratio": 1.719298245614035, "no_caption_prob": 1.6701231288607232e-05}, {"id": 362, "seek": 240120, "start": 2401.2, "end": 2407.04, "text": " information you want from the JSON TypeScript side and whatever information you want to turn that", "tokens": [50364, 1589, 291, 528, 490, 264, 31828, 15576, 14237, 1252, 293, 2035, 1589, 291, 528, 281, 1261, 300, 50656, 50656, 666, 322, 264, 2699, 76, 1252, 11, 291, 434, 2584, 1075, 281, 5109, 1293, 295, 729, 13, 400, 291, 393, 11, 570, 295, 50916, 50916, 1164, 291, 393, 764, 428, 979, 1429, 5893, 4471, 854, 433, 293, 439, 729, 10247, 721, 281, 1261, 666, 2035, 51184, 51216, 2699, 76, 3467, 13, 400, 11, 293, 291, 393, 764, 341, 11, 2232, 11, 37645, 31828, 979, 1429, 9362, 281, 2066, 23211, 31828, 1412, 365, 51672, 51672], "temperature": 0.0, "avg_logprob": -0.10248429147820724, "compression_ratio": 1.6916299559471366, "no_caption_prob": 4.133356924285181e-05}, {"id": 363, "seek": 240120, "start": 2407.04, "end": 2412.24, "text": " into on the Elm side, you're completely able to express both of those. And you can, because of", "tokens": [50364, 1589, 291, 528, 490, 264, 31828, 15576, 14237, 1252, 293, 2035, 1589, 291, 528, 281, 1261, 300, 50656, 50656, 666, 322, 264, 2699, 76, 1252, 11, 291, 434, 2584, 1075, 281, 5109, 1293, 295, 729, 13, 400, 291, 393, 11, 570, 295, 50916, 50916, 1164, 291, 393, 764, 428, 979, 1429, 5893, 4471, 854, 433, 293, 439, 729, 10247, 721, 281, 1261, 666, 2035, 51184, 51216, 2699, 76, 3467, 13, 400, 11, 293, 291, 393, 764, 341, 11, 2232, 11, 37645, 31828, 979, 1429, 9362, 281, 2066, 23211, 31828, 1412, 365, 51672, 51672], "temperature": 0.0, "avg_logprob": -0.10248429147820724, "compression_ratio": 1.6916299559471366, "no_caption_prob": 4.133356924285181e-05}, {"id": 364, "seek": 240120, "start": 2412.24, "end": 2417.6, "text": " course you can use your decode dot map helpers and all those fancy things to turn into whatever", "tokens": [50364, 1589, 291, 528, 490, 264, 31828, 15576, 14237, 1252, 293, 2035, 1589, 291, 528, 281, 1261, 300, 50656, 50656, 666, 322, 264, 2699, 76, 1252, 11, 291, 434, 2584, 1075, 281, 5109, 1293, 295, 729, 13, 400, 291, 393, 11, 570, 295, 50916, 50916, 1164, 291, 393, 764, 428, 979, 1429, 5893, 4471, 854, 433, 293, 439, 729, 10247, 721, 281, 1261, 666, 2035, 51184, 51216, 2699, 76, 3467, 13, 400, 11, 293, 291, 393, 764, 341, 11, 2232, 11, 37645, 31828, 979, 1429, 9362, 281, 2066, 23211, 31828, 1412, 365, 51672, 51672], "temperature": 0.0, "avg_logprob": -0.10248429147820724, "compression_ratio": 1.6916299559471366, "no_caption_prob": 4.133356924285181e-05}, {"id": 365, "seek": 240120, "start": 2418.24, "end": 2427.3599999999997, "text": " Elm types. And, and you can use this, uh, TS JSON decode API to expect arbitrary JSON data with", "tokens": [50364, 1589, 291, 528, 490, 264, 31828, 15576, 14237, 1252, 293, 2035, 1589, 291, 528, 281, 1261, 300, 50656, 50656, 666, 322, 264, 2699, 76, 1252, 11, 291, 434, 2584, 1075, 281, 5109, 1293, 295, 729, 13, 400, 291, 393, 11, 570, 295, 50916, 50916, 1164, 291, 393, 764, 428, 979, 1429, 5893, 4471, 854, 433, 293, 439, 729, 10247, 721, 281, 1261, 666, 2035, 51184, 51216, 2699, 76, 3467, 13, 400, 11, 293, 291, 393, 764, 341, 11, 2232, 11, 37645, 31828, 979, 1429, 9362, 281, 2066, 23211, 31828, 1412, 365, 51672, 51672], "temperature": 0.0, "avg_logprob": -0.10248429147820724, "compression_ratio": 1.6916299559471366, "no_caption_prob": 4.133356924285181e-05}, {"id": 366, "seek": 242736, "start": 2427.36, "end": 2433.52, "text": " very intricate constraints described, like the literal types. You can have object properties,", "tokens": [50364, 588, 38015, 18491, 7619, 11, 411, 264, 20411, 3467, 13, 509, 393, 362, 2657, 7221, 11, 50672, 50672, 11671, 3467, 11, 754, 15236, 3467, 13, 509, 393, 11, 411, 11, 291, 393, 534, 1817, 7146, 428, 31828, 294, 1238, 11, 51008, 51048, 1238, 4005, 2098, 1228, 11, 1228, 300, 2010, 1185, 13, 407, 437, 291, 917, 493, 365, 307, 3467, 1553, 16287, 11, 51352, 51352, 689, 264, 4009, 295, 3494, 307, 264, 551, 300, 15626, 300, 17436, 2144, 420, 730, 260, 831, 2144, 11, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.07832967151295055, "compression_ratio": 1.751131221719457, "no_caption_prob": 3.535506402840838e-05}, {"id": 367, "seek": 242736, "start": 2433.52, "end": 2440.2400000000002, "text": " union types, even intersection types. You can, like, you can really constrain your JSON in pretty,", "tokens": [50364, 588, 38015, 18491, 7619, 11, 411, 264, 20411, 3467, 13, 509, 393, 362, 2657, 7221, 11, 50672, 50672, 11671, 3467, 11, 754, 15236, 3467, 13, 509, 393, 11, 411, 11, 291, 393, 534, 1817, 7146, 428, 31828, 294, 1238, 11, 51008, 51048, 1238, 4005, 2098, 1228, 11, 1228, 300, 2010, 1185, 13, 407, 437, 291, 917, 493, 365, 307, 3467, 1553, 16287, 11, 51352, 51352, 689, 264, 4009, 295, 3494, 307, 264, 551, 300, 15626, 300, 17436, 2144, 420, 730, 260, 831, 2144, 11, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.07832967151295055, "compression_ratio": 1.751131221719457, "no_caption_prob": 3.535506402840838e-05}, {"id": 368, "seek": 242736, "start": 2441.04, "end": 2447.1200000000003, "text": " pretty powerful ways using, using that type system. So what you end up with is types without borders,", "tokens": [50364, 588, 38015, 18491, 7619, 11, 411, 264, 20411, 3467, 13, 509, 393, 362, 2657, 7221, 11, 50672, 50672, 11671, 3467, 11, 754, 15236, 3467, 13, 509, 393, 11, 411, 11, 291, 393, 534, 1817, 7146, 428, 31828, 294, 1238, 11, 51008, 51048, 1238, 4005, 2098, 1228, 11, 1228, 300, 2010, 1185, 13, 407, 437, 291, 917, 493, 365, 307, 3467, 1553, 16287, 11, 51352, 51352, 689, 264, 4009, 295, 3494, 307, 264, 551, 300, 15626, 300, 17436, 2144, 420, 730, 260, 831, 2144, 11, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.07832967151295055, "compression_ratio": 1.751131221719457, "no_caption_prob": 3.535506402840838e-05}, {"id": 369, "seek": 242736, "start": 2447.1200000000003, "end": 2453.36, "text": " where the source of truth is the thing that describes that serialization or deserialization,", "tokens": [50364, 588, 38015, 18491, 7619, 11, 411, 264, 20411, 3467, 13, 509, 393, 362, 2657, 7221, 11, 50672, 50672, 11671, 3467, 11, 754, 15236, 3467, 13, 509, 393, 11, 411, 11, 291, 393, 534, 1817, 7146, 428, 31828, 294, 1238, 11, 51008, 51048, 1238, 4005, 2098, 1228, 11, 1228, 300, 2010, 1185, 13, 407, 437, 291, 917, 493, 365, 307, 3467, 1553, 16287, 11, 51352, 51352, 689, 264, 4009, 295, 3494, 307, 264, 551, 300, 15626, 300, 17436, 2144, 420, 730, 260, 831, 2144, 11, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.07832967151295055, "compression_ratio": 1.751131221719457, "no_caption_prob": 3.535506402840838e-05}, {"id": 370, "seek": 245336, "start": 2453.36, "end": 2460.0, "text": " which means, so if you think about that flow, what that means is, uh, let's say that you", "tokens": [50364, 597, 1355, 11, 370, 498, 291, 519, 466, 300, 3095, 11, 437, 300, 1355, 307, 11, 2232, 11, 718, 311, 584, 300, 291, 50696, 50744, 1319, 428, 979, 19866, 11, 558, 30, 509, 1319, 428, 979, 19866, 293, 550, 291, 43819, 409, 264, 2699, 76, 37645, 12729, 12855, 40, 2290, 13, 51028, 51028, 1396, 437, 311, 516, 281, 1051, 307, 291, 11, 291, 434, 516, 281, 917, 493, 11, 291, 458, 11, 291, 26358, 473, 428, 15576, 14237, 51356, 51356, 27606, 3991, 365, 264, 12855, 40, 2290, 13, 823, 291, 11, 291, 434, 11, 291, 600, 4590, 493, 365, 819, 15576, 14237, 51604, 51604], "temperature": 0.0, "avg_logprob": -0.06547321913377294, "compression_ratio": 1.7155555555555555, "no_caption_prob": 0.00012930569937452674}, {"id": 371, "seek": 245336, "start": 2460.96, "end": 2466.6400000000003, "text": " change your decoder, right? You change your decoder and then you rerun the Elm TS interrupt CLI tool.", "tokens": [50364, 597, 1355, 11, 370, 498, 291, 519, 466, 300, 3095, 11, 437, 300, 1355, 307, 11, 2232, 11, 718, 311, 584, 300, 291, 50696, 50744, 1319, 428, 979, 19866, 11, 558, 30, 509, 1319, 428, 979, 19866, 293, 550, 291, 43819, 409, 264, 2699, 76, 37645, 12729, 12855, 40, 2290, 13, 51028, 51028, 1396, 437, 311, 516, 281, 1051, 307, 291, 11, 291, 434, 516, 281, 917, 493, 11, 291, 458, 11, 291, 26358, 473, 428, 15576, 14237, 51356, 51356, 27606, 3991, 365, 264, 12855, 40, 2290, 13, 823, 291, 11, 291, 434, 11, 291, 600, 4590, 493, 365, 819, 15576, 14237, 51604, 51604], "temperature": 0.0, "avg_logprob": -0.06547321913377294, "compression_ratio": 1.7155555555555555, "no_caption_prob": 0.00012930569937452674}, {"id": 372, "seek": 245336, "start": 2466.6400000000003, "end": 2473.2000000000003, "text": " Then what's going to happen is you, you're going to end up, you know, you regenerate your TypeScript", "tokens": [50364, 597, 1355, 11, 370, 498, 291, 519, 466, 300, 3095, 11, 437, 300, 1355, 307, 11, 2232, 11, 718, 311, 584, 300, 291, 50696, 50744, 1319, 428, 979, 19866, 11, 558, 30, 509, 1319, 428, 979, 19866, 293, 550, 291, 43819, 409, 264, 2699, 76, 37645, 12729, 12855, 40, 2290, 13, 51028, 51028, 1396, 437, 311, 516, 281, 1051, 307, 291, 11, 291, 434, 516, 281, 917, 493, 11, 291, 458, 11, 291, 26358, 473, 428, 15576, 14237, 51356, 51356, 27606, 3991, 365, 264, 12855, 40, 2290, 13, 823, 291, 11, 291, 434, 11, 291, 600, 4590, 493, 365, 819, 15576, 14237, 51604, 51604], "temperature": 0.0, "avg_logprob": -0.06547321913377294, "compression_ratio": 1.7155555555555555, "no_caption_prob": 0.00012930569937452674}, {"id": 373, "seek": 245336, "start": 2473.2000000000003, "end": 2478.1600000000003, "text": " declaration file with the CLI tool. Now you, you're, you've ended up with different TypeScript", "tokens": [50364, 597, 1355, 11, 370, 498, 291, 519, 466, 300, 3095, 11, 437, 300, 1355, 307, 11, 2232, 11, 718, 311, 584, 300, 291, 50696, 50744, 1319, 428, 979, 19866, 11, 558, 30, 509, 1319, 428, 979, 19866, 293, 550, 291, 43819, 409, 264, 2699, 76, 37645, 12729, 12855, 40, 2290, 13, 51028, 51028, 1396, 437, 311, 516, 281, 1051, 307, 291, 11, 291, 434, 516, 281, 917, 493, 11, 291, 458, 11, 291, 26358, 473, 428, 15576, 14237, 51356, 51356, 27606, 3991, 365, 264, 12855, 40, 2290, 13, 823, 291, 11, 291, 434, 11, 291, 600, 4590, 493, 365, 819, 15576, 14237, 51604, 51604], "temperature": 0.0, "avg_logprob": -0.06547321913377294, "compression_ratio": 1.7155555555555555, "no_caption_prob": 0.00012930569937452674}, {"id": 374, "seek": 247816, "start": 2478.16, "end": 2484.3199999999997, "text": " types. So now you're going to get a TypeScript error or, you know, or some error in Elm where", "tokens": [50364, 3467, 13, 407, 586, 291, 434, 516, 281, 483, 257, 15576, 14237, 6713, 420, 11, 291, 458, 11, 420, 512, 6713, 294, 2699, 76, 689, 50672, 50672, 264, 3467, 362, 3105, 13, 400, 370, 291, 362, 11, 291, 362, 281, 352, 293, 3191, 729, 11, 457, 264, 4009, 295, 3494, 307, 50984, 50984, 411, 264, 3539, 551, 300, 311, 11, 300, 311, 13175, 300, 12853, 13, 407, 300, 311, 1009, 516, 281, 312, 3006, 13, 51284, 51284, 400, 309, 311, 1009, 3585, 1293, 4881, 437, 11, 437, 820, 1051, 13, 467, 311, 411, 11, 1911, 11, 2699, 76, 3089, 11, 2232, 11, 51540, 51540, 370, 341, 979, 19866, 445, 3105, 293, 11, 2232, 11, 291, 434, 586, 516, 281, 4774, 341, 2010, 11, 558, 30, 663, 311, 437, 2699, 76, 11, 51852, 51852], "temperature": 0.0, "avg_logprob": -0.06809890181929977, "compression_ratio": 1.7572463768115942, "no_caption_prob": 7.843357161618769e-05}, {"id": 375, "seek": 247816, "start": 2484.3199999999997, "end": 2490.56, "text": " the types have changed. And so you have, you have to go and fix those, but the source of truth is", "tokens": [50364, 3467, 13, 407, 586, 291, 434, 516, 281, 483, 257, 15576, 14237, 6713, 420, 11, 291, 458, 11, 420, 512, 6713, 294, 2699, 76, 689, 50672, 50672, 264, 3467, 362, 3105, 13, 400, 370, 291, 362, 11, 291, 362, 281, 352, 293, 3191, 729, 11, 457, 264, 4009, 295, 3494, 307, 50984, 50984, 411, 264, 3539, 551, 300, 311, 11, 300, 311, 13175, 300, 12853, 13, 407, 300, 311, 1009, 516, 281, 312, 3006, 13, 51284, 51284, 400, 309, 311, 1009, 3585, 1293, 4881, 437, 11, 437, 820, 1051, 13, 467, 311, 411, 11, 1911, 11, 2699, 76, 3089, 11, 2232, 11, 51540, 51540, 370, 341, 979, 19866, 445, 3105, 293, 11, 2232, 11, 291, 434, 586, 516, 281, 4774, 341, 2010, 11, 558, 30, 663, 311, 437, 2699, 76, 11, 51852, 51852], "temperature": 0.0, "avg_logprob": -0.06809890181929977, "compression_ratio": 1.7572463768115942, "no_caption_prob": 7.843357161618769e-05}, {"id": 376, "seek": 247816, "start": 2490.56, "end": 2496.56, "text": " like the actual thing that's, that's handling that translation. So that's always going to be correct.", "tokens": [50364, 3467, 13, 407, 586, 291, 434, 516, 281, 483, 257, 15576, 14237, 6713, 420, 11, 291, 458, 11, 420, 512, 6713, 294, 2699, 76, 689, 50672, 50672, 264, 3467, 362, 3105, 13, 400, 370, 291, 362, 11, 291, 362, 281, 352, 293, 3191, 729, 11, 457, 264, 4009, 295, 3494, 307, 50984, 50984, 411, 264, 3539, 551, 300, 311, 11, 300, 311, 13175, 300, 12853, 13, 407, 300, 311, 1009, 516, 281, 312, 3006, 13, 51284, 51284, 400, 309, 311, 1009, 3585, 1293, 4881, 437, 11, 437, 820, 1051, 13, 467, 311, 411, 11, 1911, 11, 2699, 76, 3089, 11, 2232, 11, 51540, 51540, 370, 341, 979, 19866, 445, 3105, 293, 11, 2232, 11, 291, 434, 586, 516, 281, 4774, 341, 2010, 11, 558, 30, 663, 311, 437, 2699, 76, 11, 51852, 51852], "temperature": 0.0, "avg_logprob": -0.06809890181929977, "compression_ratio": 1.7572463768115942, "no_caption_prob": 7.843357161618769e-05}, {"id": 377, "seek": 247816, "start": 2496.56, "end": 2501.68, "text": " And it's always telling both sides what, what should happen. It's like, Hey, Elm code, uh,", "tokens": [50364, 3467, 13, 407, 586, 291, 434, 516, 281, 483, 257, 15576, 14237, 6713, 420, 11, 291, 458, 11, 420, 512, 6713, 294, 2699, 76, 689, 50672, 50672, 264, 3467, 362, 3105, 13, 400, 370, 291, 362, 11, 291, 362, 281, 352, 293, 3191, 729, 11, 457, 264, 4009, 295, 3494, 307, 50984, 50984, 411, 264, 3539, 551, 300, 311, 11, 300, 311, 13175, 300, 12853, 13, 407, 300, 311, 1009, 516, 281, 312, 3006, 13, 51284, 51284, 400, 309, 311, 1009, 3585, 1293, 4881, 437, 11, 437, 820, 1051, 13, 467, 311, 411, 11, 1911, 11, 2699, 76, 3089, 11, 2232, 11, 51540, 51540, 370, 341, 979, 19866, 445, 3105, 293, 11, 2232, 11, 291, 434, 586, 516, 281, 4774, 341, 2010, 11, 558, 30, 663, 311, 437, 2699, 76, 11, 51852, 51852], "temperature": 0.0, "avg_logprob": -0.06809890181929977, "compression_ratio": 1.7572463768115942, "no_caption_prob": 7.843357161618769e-05}, {"id": 378, "seek": 247816, "start": 2501.68, "end": 2507.92, "text": " so this decoder just changed and, uh, you're now going to receive this type, right? That's what Elm,", "tokens": [50364, 3467, 13, 407, 586, 291, 434, 516, 281, 483, 257, 15576, 14237, 6713, 420, 11, 291, 458, 11, 420, 512, 6713, 294, 2699, 76, 689, 50672, 50672, 264, 3467, 362, 3105, 13, 400, 370, 291, 362, 11, 291, 362, 281, 352, 293, 3191, 729, 11, 457, 264, 4009, 295, 3494, 307, 50984, 50984, 411, 264, 3539, 551, 300, 311, 11, 300, 311, 13175, 300, 12853, 13, 407, 300, 311, 1009, 516, 281, 312, 3006, 13, 51284, 51284, 400, 309, 311, 1009, 3585, 1293, 4881, 437, 11, 437, 820, 1051, 13, 467, 311, 411, 11, 1911, 11, 2699, 76, 3089, 11, 2232, 11, 51540, 51540, 370, 341, 979, 19866, 445, 3105, 293, 11, 2232, 11, 291, 434, 586, 516, 281, 4774, 341, 2010, 11, 558, 30, 663, 311, 437, 2699, 76, 11, 51852, 51852], "temperature": 0.0, "avg_logprob": -0.06809890181929977, "compression_ratio": 1.7572463768115942, "no_caption_prob": 7.843357161618769e-05}, {"id": 379, "seek": 250792, "start": 2507.92, "end": 2512.7200000000003, "text": " Elm's type system gives you, which we love. Well, you get that same effect on the TypeScript side,", "tokens": [50364, 2699, 76, 311, 2010, 1185, 2709, 291, 11, 597, 321, 959, 13, 1042, 11, 291, 483, 300, 912, 1802, 322, 264, 15576, 14237, 1252, 11, 50604, 50604, 689, 291, 1319, 264, 9650, 15576, 14237, 3467, 293, 15576, 14237, 307, 411, 11, 1911, 11, 2232, 11, 370, 630, 291, 3449, 50956, 50956, 300, 291, 11, 291, 434, 27520, 294, 264, 2085, 2010, 570, 264, 979, 19866, 445, 3105, 30, 467, 311, 257, 11, 309, 311, 257, 688, 281, 51172, 51172, 7019, 428, 3567, 926, 11, 1943, 380, 309, 30, 492, 2378, 380, 754, 2825, 466, 2058, 378, 433, 13, 407, 286, 478, 17939, 309, 311, 1238, 51544, 51544], "temperature": 0.0, "avg_logprob": -0.0961707491393483, "compression_ratio": 1.6032388663967612, "no_caption_prob": 9.460963337915018e-05}, {"id": 380, "seek": 250792, "start": 2512.7200000000003, "end": 2519.76, "text": " where you change the expecting TypeScript types and TypeScript is like, Hey, uh, so did you notice", "tokens": [50364, 2699, 76, 311, 2010, 1185, 2709, 291, 11, 597, 321, 959, 13, 1042, 11, 291, 483, 300, 912, 1802, 322, 264, 15576, 14237, 1252, 11, 50604, 50604, 689, 291, 1319, 264, 9650, 15576, 14237, 3467, 293, 15576, 14237, 307, 411, 11, 1911, 11, 2232, 11, 370, 630, 291, 3449, 50956, 50956, 300, 291, 11, 291, 434, 27520, 294, 264, 2085, 2010, 570, 264, 979, 19866, 445, 3105, 30, 467, 311, 257, 11, 309, 311, 257, 688, 281, 51172, 51172, 7019, 428, 3567, 926, 11, 1943, 380, 309, 30, 492, 2378, 380, 754, 2825, 466, 2058, 378, 433, 13, 407, 286, 478, 17939, 309, 311, 1238, 51544, 51544], "temperature": 0.0, "avg_logprob": -0.0961707491393483, "compression_ratio": 1.6032388663967612, "no_caption_prob": 9.460963337915018e-05}, {"id": 381, "seek": 250792, "start": 2519.76, "end": 2524.08, "text": " that you, you're wiring in the wrong type because the decoder just changed? It's a, it's a lot to", "tokens": [50364, 2699, 76, 311, 2010, 1185, 2709, 291, 11, 597, 321, 959, 13, 1042, 11, 291, 483, 300, 912, 1802, 322, 264, 15576, 14237, 1252, 11, 50604, 50604, 689, 291, 1319, 264, 9650, 15576, 14237, 3467, 293, 15576, 14237, 307, 411, 11, 1911, 11, 2232, 11, 370, 630, 291, 3449, 50956, 50956, 300, 291, 11, 291, 434, 27520, 294, 264, 2085, 2010, 570, 264, 979, 19866, 445, 3105, 30, 467, 311, 257, 11, 309, 311, 257, 688, 281, 51172, 51172, 7019, 428, 3567, 926, 11, 1943, 380, 309, 30, 492, 2378, 380, 754, 2825, 466, 2058, 378, 433, 13, 407, 286, 478, 17939, 309, 311, 1238, 51544, 51544], "temperature": 0.0, "avg_logprob": -0.0961707491393483, "compression_ratio": 1.6032388663967612, "no_caption_prob": 9.460963337915018e-05}, {"id": 382, "seek": 250792, "start": 2524.08, "end": 2531.52, "text": " wrap your brain around, isn't it? We haven't even talked about encoders. So I'm guessing it's pretty", "tokens": [50364, 2699, 76, 311, 2010, 1185, 2709, 291, 11, 597, 321, 959, 13, 1042, 11, 291, 483, 300, 912, 1802, 322, 264, 15576, 14237, 1252, 11, 50604, 50604, 689, 291, 1319, 264, 9650, 15576, 14237, 3467, 293, 15576, 14237, 307, 411, 11, 1911, 11, 2232, 11, 370, 630, 291, 3449, 50956, 50956, 300, 291, 11, 291, 434, 27520, 294, 264, 2085, 2010, 570, 264, 979, 19866, 445, 3105, 30, 467, 311, 257, 11, 309, 311, 257, 688, 281, 51172, 51172, 7019, 428, 3567, 926, 11, 1943, 380, 309, 30, 492, 2378, 380, 754, 2825, 466, 2058, 378, 433, 13, 407, 286, 478, 17939, 309, 311, 1238, 51544, 51544], "temperature": 0.0, "avg_logprob": -0.0961707491393483, "compression_ratio": 1.6032388663967612, "no_caption_prob": 9.460963337915018e-05}, {"id": 383, "seek": 253152, "start": 2531.52, "end": 2539.28, "text": " similar in a way. Well, uh, so encoders are similar, but there's one distinction that I,", "tokens": [50364, 2531, 294, 257, 636, 13, 1042, 11, 2232, 11, 370, 2058, 378, 433, 366, 2531, 11, 457, 456, 311, 472, 16844, 300, 286, 11, 50752, 50752, 300, 286, 528, 281, 935, 484, 13, 10865, 286, 519, 257, 7367, 307, 257, 665, 6399, 337, 341, 13, 400, 300, 307, 11, 50972, 50972, 370, 3449, 300, 309, 311, 264, 2010, 300, 291, 362, 307, 2058, 19866, 11, 406, 361, 3015, 13, 268, 22332, 13, 29155, 13, 407, 11, 51304, 51384, 1338, 13, 407, 294, 264, 11, 294, 264, 2699, 76, 17330, 361, 3015, 11, 321, 362, 979, 378, 433, 11, 457, 321, 500, 380, 362, 2058, 378, 433, 13, 51676, 51676], "temperature": 0.0, "avg_logprob": -0.13028874268402924, "compression_ratio": 1.6398104265402844, "no_caption_prob": 0.00016864021017681807}, {"id": 384, "seek": 253152, "start": 2539.28, "end": 2543.68, "text": " that I want to point out. Cause I think a podcast is a good medium for this. And that is,", "tokens": [50364, 2531, 294, 257, 636, 13, 1042, 11, 2232, 11, 370, 2058, 378, 433, 366, 2531, 11, 457, 456, 311, 472, 16844, 300, 286, 11, 50752, 50752, 300, 286, 528, 281, 935, 484, 13, 10865, 286, 519, 257, 7367, 307, 257, 665, 6399, 337, 341, 13, 400, 300, 307, 11, 50972, 50972, 370, 3449, 300, 309, 311, 264, 2010, 300, 291, 362, 307, 2058, 19866, 11, 406, 361, 3015, 13, 268, 22332, 13, 29155, 13, 407, 11, 51304, 51384, 1338, 13, 407, 294, 264, 11, 294, 264, 2699, 76, 17330, 361, 3015, 11, 321, 362, 979, 378, 433, 11, 457, 321, 500, 380, 362, 2058, 378, 433, 13, 51676, 51676], "temperature": 0.0, "avg_logprob": -0.13028874268402924, "compression_ratio": 1.6398104265402844, "no_caption_prob": 0.00016864021017681807}, {"id": 385, "seek": 253152, "start": 2543.68, "end": 2550.32, "text": " so notice that it's the type that you have is encoder, not json.encode.value. So,", "tokens": [50364, 2531, 294, 257, 636, 13, 1042, 11, 2232, 11, 370, 2058, 378, 433, 366, 2531, 11, 457, 456, 311, 472, 16844, 300, 286, 11, 50752, 50752, 300, 286, 528, 281, 935, 484, 13, 10865, 286, 519, 257, 7367, 307, 257, 665, 6399, 337, 341, 13, 400, 300, 307, 11, 50972, 50972, 370, 3449, 300, 309, 311, 264, 2010, 300, 291, 362, 307, 2058, 19866, 11, 406, 361, 3015, 13, 268, 22332, 13, 29155, 13, 407, 11, 51304, 51384, 1338, 13, 407, 294, 264, 11, 294, 264, 2699, 76, 17330, 361, 3015, 11, 321, 362, 979, 378, 433, 11, 457, 321, 500, 380, 362, 2058, 378, 433, 13, 51676, 51676], "temperature": 0.0, "avg_logprob": -0.13028874268402924, "compression_ratio": 1.6398104265402844, "no_caption_prob": 0.00016864021017681807}, {"id": 386, "seek": 253152, "start": 2551.92, "end": 2557.7599999999998, "text": " yeah. So in the, in the Elm slash json, we have decoders, but we don't have encoders.", "tokens": [50364, 2531, 294, 257, 636, 13, 1042, 11, 2232, 11, 370, 2058, 378, 433, 366, 2531, 11, 457, 456, 311, 472, 16844, 300, 286, 11, 50752, 50752, 300, 286, 528, 281, 935, 484, 13, 10865, 286, 519, 257, 7367, 307, 257, 665, 6399, 337, 341, 13, 400, 300, 307, 11, 50972, 50972, 370, 3449, 300, 309, 311, 264, 2010, 300, 291, 362, 307, 2058, 19866, 11, 406, 361, 3015, 13, 268, 22332, 13, 29155, 13, 407, 11, 51304, 51384, 1338, 13, 407, 294, 264, 11, 294, 264, 2699, 76, 17330, 361, 3015, 11, 321, 362, 979, 378, 433, 11, 457, 321, 500, 380, 362, 2058, 378, 433, 13, 51676, 51676], "temperature": 0.0, "avg_logprob": -0.13028874268402924, "compression_ratio": 1.6398104265402844, "no_caption_prob": 0.00016864021017681807}, {"id": 387, "seek": 255776, "start": 2557.76, "end": 2563.44, "text": " Exactly. At most we have a function that takes some data in terms of two,", "tokens": [50364, 7587, 13, 1711, 881, 321, 362, 257, 2445, 300, 2516, 512, 1412, 294, 2115, 295, 732, 11, 50648, 50648, 361, 3015, 13, 268, 22332, 13, 29155, 13, 7587, 558, 13, 400, 370, 341, 307, 411, 257, 534, 11, 1105, 11, 286, 914, 11, 286, 1454, 300, 341, 50980, 50980, 3410, 307, 4961, 337, 2618, 1242, 1409, 365, 2699, 76, 37645, 5751, 404, 13, 3301, 11, 286, 519, 300, 445, 1419, 51240, 51240, 341, 4973, 2316, 393, 854, 13, 407, 445, 3410, 671, 11, 498, 291, 1415, 281, 483, 2010, 1589, 466, 257, 51604, 51604], "temperature": 0.0, "avg_logprob": -0.13422897458076477, "compression_ratio": 1.5450643776824033, "no_caption_prob": 1.892438558570575e-05}, {"id": 388, "seek": 255776, "start": 2563.44, "end": 2570.0800000000004, "text": " json.encode.value. Exactly right. And so this is like a really, um, I mean, I hope that this", "tokens": [50364, 7587, 13, 1711, 881, 321, 362, 257, 2445, 300, 2516, 512, 1412, 294, 2115, 295, 732, 11, 50648, 50648, 361, 3015, 13, 268, 22332, 13, 29155, 13, 7587, 558, 13, 400, 370, 341, 307, 411, 257, 534, 11, 1105, 11, 286, 914, 11, 286, 1454, 300, 341, 50980, 50980, 3410, 307, 4961, 337, 2618, 1242, 1409, 365, 2699, 76, 37645, 5751, 404, 13, 3301, 11, 286, 519, 300, 445, 1419, 51240, 51240, 341, 4973, 2316, 393, 854, 13, 407, 445, 3410, 671, 11, 498, 291, 1415, 281, 483, 2010, 1589, 466, 257, 51604, 51604], "temperature": 0.0, "avg_logprob": -0.13422897458076477, "compression_ratio": 1.5450643776824033, "no_caption_prob": 1.892438558570575e-05}, {"id": 389, "seek": 255776, "start": 2570.0800000000004, "end": 2575.28, "text": " concept is helpful for somebody getting started with Elm TS Interop. Um, I think that just having", "tokens": [50364, 7587, 13, 1711, 881, 321, 362, 257, 2445, 300, 2516, 512, 1412, 294, 2115, 295, 732, 11, 50648, 50648, 361, 3015, 13, 268, 22332, 13, 29155, 13, 7587, 558, 13, 400, 370, 341, 307, 411, 257, 534, 11, 1105, 11, 286, 914, 11, 286, 1454, 300, 341, 50980, 50980, 3410, 307, 4961, 337, 2618, 1242, 1409, 365, 2699, 76, 37645, 5751, 404, 13, 3301, 11, 286, 519, 300, 445, 1419, 51240, 51240, 341, 4973, 2316, 393, 854, 13, 407, 445, 3410, 671, 11, 498, 291, 1415, 281, 483, 2010, 1589, 466, 257, 51604, 51604], "temperature": 0.0, "avg_logprob": -0.13422897458076477, "compression_ratio": 1.5450643776824033, "no_caption_prob": 1.892438558570575e-05}, {"id": 390, "seek": 255776, "start": 2575.28, "end": 2582.5600000000004, "text": " this mental model can help. So just conceptually, if you wanted to get type information about a", "tokens": [50364, 7587, 13, 1711, 881, 321, 362, 257, 2445, 300, 2516, 512, 1412, 294, 2115, 295, 732, 11, 50648, 50648, 361, 3015, 13, 268, 22332, 13, 29155, 13, 7587, 558, 13, 400, 370, 341, 307, 411, 257, 534, 11, 1105, 11, 286, 914, 11, 286, 1454, 300, 341, 50980, 50980, 3410, 307, 4961, 337, 2618, 1242, 1409, 365, 2699, 76, 37645, 5751, 404, 13, 3301, 11, 286, 519, 300, 445, 1419, 51240, 51240, 341, 4973, 2316, 393, 854, 13, 407, 445, 3410, 671, 11, 498, 291, 1415, 281, 483, 2010, 1589, 466, 257, 51604, 51604], "temperature": 0.0, "avg_logprob": -0.13422897458076477, "compression_ratio": 1.5450643776824033, "no_caption_prob": 1.892438558570575e-05}, {"id": 391, "seek": 258256, "start": 2582.56, "end": 2588.88, "text": " json.encode.value that you, you do, you know, json.encode.object and then you create a bunch", "tokens": [50364, 361, 3015, 13, 268, 22332, 13, 29155, 300, 291, 11, 291, 360, 11, 291, 458, 11, 361, 3015, 13, 268, 22332, 13, 41070, 293, 550, 291, 1884, 257, 3840, 50680, 50680, 295, 7909, 13, 1042, 11, 437, 11, 437, 9317, 775, 309, 362, 30, 286, 914, 11, 437, 498, 291, 360, 364, 11, 257, 27708, 294, 456, 50980, 50980, 293, 291, 11, 291, 360, 472, 2141, 294, 472, 1389, 293, 1071, 2141, 294, 1071, 1389, 11, 437, 498, 291, 2058, 1429, 281, 257, 6798, 51316, 51316, 294, 512, 3331, 293, 364, 6565, 294, 661, 3331, 11, 456, 311, 1825, 12767, 291, 490, 884, 300, 13, 51556, 51556, 407, 437, 311, 11, 437, 11, 437, 311, 264, 2010, 300, 307, 516, 281, 1874, 294, 30, 509, 500, 380, 458, 13, 467, 311, 445, 364, 2058, 1429, 51780, 51780], "temperature": 0.0, "avg_logprob": -0.08324033064807919, "compression_ratio": 1.9156626506024097, "no_caption_prob": 0.0003052868996746838}, {"id": 392, "seek": 258256, "start": 2588.88, "end": 2594.88, "text": " of fields. Well, what, what keys does it have? I mean, what if you do an, a conditional in there", "tokens": [50364, 361, 3015, 13, 268, 22332, 13, 29155, 300, 291, 11, 291, 360, 11, 291, 458, 11, 361, 3015, 13, 268, 22332, 13, 41070, 293, 550, 291, 1884, 257, 3840, 50680, 50680, 295, 7909, 13, 1042, 11, 437, 11, 437, 9317, 775, 309, 362, 30, 286, 914, 11, 437, 498, 291, 360, 364, 11, 257, 27708, 294, 456, 50980, 50980, 293, 291, 11, 291, 360, 472, 2141, 294, 472, 1389, 293, 1071, 2141, 294, 1071, 1389, 11, 437, 498, 291, 2058, 1429, 281, 257, 6798, 51316, 51316, 294, 512, 3331, 293, 364, 6565, 294, 661, 3331, 11, 456, 311, 1825, 12767, 291, 490, 884, 300, 13, 51556, 51556, 407, 437, 311, 11, 437, 11, 437, 311, 264, 2010, 300, 307, 516, 281, 1874, 294, 30, 509, 500, 380, 458, 13, 467, 311, 445, 364, 2058, 1429, 51780, 51780], "temperature": 0.0, "avg_logprob": -0.08324033064807919, "compression_ratio": 1.9156626506024097, "no_caption_prob": 0.0003052868996746838}, {"id": 393, "seek": 258256, "start": 2594.88, "end": 2601.6, "text": " and you, you do one key in one case and another key in another case, what if you encode to a string", "tokens": [50364, 361, 3015, 13, 268, 22332, 13, 29155, 300, 291, 11, 291, 360, 11, 291, 458, 11, 361, 3015, 13, 268, 22332, 13, 41070, 293, 550, 291, 1884, 257, 3840, 50680, 50680, 295, 7909, 13, 1042, 11, 437, 11, 437, 9317, 775, 309, 362, 30, 286, 914, 11, 437, 498, 291, 360, 364, 11, 257, 27708, 294, 456, 50980, 50980, 293, 291, 11, 291, 360, 472, 2141, 294, 472, 1389, 293, 1071, 2141, 294, 1071, 1389, 11, 437, 498, 291, 2058, 1429, 281, 257, 6798, 51316, 51316, 294, 512, 3331, 293, 364, 6565, 294, 661, 3331, 11, 456, 311, 1825, 12767, 291, 490, 884, 300, 13, 51556, 51556, 407, 437, 311, 11, 437, 11, 437, 311, 264, 2010, 300, 307, 516, 281, 1874, 294, 30, 509, 500, 380, 458, 13, 467, 311, 445, 364, 2058, 1429, 51780, 51780], "temperature": 0.0, "avg_logprob": -0.08324033064807919, "compression_ratio": 1.9156626506024097, "no_caption_prob": 0.0003052868996746838}, {"id": 394, "seek": 258256, "start": 2601.6, "end": 2606.4, "text": " in some cases and an objects in other cases, there's nothing stopping you from doing that.", "tokens": [50364, 361, 3015, 13, 268, 22332, 13, 29155, 300, 291, 11, 291, 360, 11, 291, 458, 11, 361, 3015, 13, 268, 22332, 13, 41070, 293, 550, 291, 1884, 257, 3840, 50680, 50680, 295, 7909, 13, 1042, 11, 437, 11, 437, 9317, 775, 309, 362, 30, 286, 914, 11, 437, 498, 291, 360, 364, 11, 257, 27708, 294, 456, 50980, 50980, 293, 291, 11, 291, 360, 472, 2141, 294, 472, 1389, 293, 1071, 2141, 294, 1071, 1389, 11, 437, 498, 291, 2058, 1429, 281, 257, 6798, 51316, 51316, 294, 512, 3331, 293, 364, 6565, 294, 661, 3331, 11, 456, 311, 1825, 12767, 291, 490, 884, 300, 13, 51556, 51556, 407, 437, 311, 11, 437, 11, 437, 311, 264, 2010, 300, 307, 516, 281, 1874, 294, 30, 509, 500, 380, 458, 13, 467, 311, 445, 364, 2058, 1429, 51780, 51780], "temperature": 0.0, "avg_logprob": -0.08324033064807919, "compression_ratio": 1.9156626506024097, "no_caption_prob": 0.0003052868996746838}, {"id": 395, "seek": 258256, "start": 2606.4, "end": 2610.88, "text": " So what's, what, what's the type that is going to result in? You don't know. It's just an encode", "tokens": [50364, 361, 3015, 13, 268, 22332, 13, 29155, 300, 291, 11, 291, 360, 11, 291, 458, 11, 361, 3015, 13, 268, 22332, 13, 41070, 293, 550, 291, 1884, 257, 3840, 50680, 50680, 295, 7909, 13, 1042, 11, 437, 11, 437, 9317, 775, 309, 362, 30, 286, 914, 11, 437, 498, 291, 360, 364, 11, 257, 27708, 294, 456, 50980, 50980, 293, 291, 11, 291, 360, 472, 2141, 294, 472, 1389, 293, 1071, 2141, 294, 1071, 1389, 11, 437, 498, 291, 2058, 1429, 281, 257, 6798, 51316, 51316, 294, 512, 3331, 293, 364, 6565, 294, 661, 3331, 11, 456, 311, 1825, 12767, 291, 490, 884, 300, 13, 51556, 51556, 407, 437, 311, 11, 437, 11, 437, 311, 264, 2010, 300, 307, 516, 281, 1874, 294, 30, 509, 500, 380, 458, 13, 467, 311, 445, 364, 2058, 1429, 51780, 51780], "temperature": 0.0, "avg_logprob": -0.08324033064807919, "compression_ratio": 1.9156626506024097, "no_caption_prob": 0.0003052868996746838}, {"id": 396, "seek": 261088, "start": 2610.88, "end": 2615.12, "text": " value. It could represent any type. And you don't, you don't know until you pass a val,", "tokens": [50364, 2158, 13, 467, 727, 2906, 604, 2010, 13, 400, 291, 500, 380, 11, 291, 500, 380, 458, 1826, 291, 1320, 257, 1323, 11, 50576, 50576, 364, 2699, 76, 2158, 281, 2058, 1429, 309, 13, 865, 13, 400, 309, 311, 3879, 42687, 13, 1743, 264, 787, 636, 281, 8947, 1589, 50856, 50856, 307, 281, 853, 293, 979, 1429, 309, 13, 7587, 13, 400, 281, 360, 300, 11, 291, 643, 257, 2158, 11, 457, 437, 11, 437, 2158, 366, 291, 51148, 51148, 516, 281, 2845, 807, 309, 30, 467, 727, 312, 364, 13785, 1230, 295, 4190, 11, 291, 458, 11, 370, 300, 300, 311, 406, 51400, 51400, 516, 281, 589, 13, 407, 300, 311, 264, 11, 2232, 11, 300, 311, 264, 4282, 365, 341, 9362, 307, 300, 309, 311, 406, 364, 2058, 1429, 13, 467, 311, 406, 51732, 51732], "temperature": 0.0, "avg_logprob": -0.08399900944112874, "compression_ratio": 1.7463768115942029, "no_caption_prob": 1.892475484055467e-05}, {"id": 397, "seek": 261088, "start": 2615.12, "end": 2620.7200000000003, "text": " an Elm value to encode it. Yeah. And it's totally opaque. Like the only way to extract information", "tokens": [50364, 2158, 13, 467, 727, 2906, 604, 2010, 13, 400, 291, 500, 380, 11, 291, 500, 380, 458, 1826, 291, 1320, 257, 1323, 11, 50576, 50576, 364, 2699, 76, 2158, 281, 2058, 1429, 309, 13, 865, 13, 400, 309, 311, 3879, 42687, 13, 1743, 264, 787, 636, 281, 8947, 1589, 50856, 50856, 307, 281, 853, 293, 979, 1429, 309, 13, 7587, 13, 400, 281, 360, 300, 11, 291, 643, 257, 2158, 11, 457, 437, 11, 437, 2158, 366, 291, 51148, 51148, 516, 281, 2845, 807, 309, 30, 467, 727, 312, 364, 13785, 1230, 295, 4190, 11, 291, 458, 11, 370, 300, 300, 311, 406, 51400, 51400, 516, 281, 589, 13, 407, 300, 311, 264, 11, 2232, 11, 300, 311, 264, 4282, 365, 341, 9362, 307, 300, 309, 311, 406, 364, 2058, 1429, 13, 467, 311, 406, 51732, 51732], "temperature": 0.0, "avg_logprob": -0.08399900944112874, "compression_ratio": 1.7463768115942029, "no_caption_prob": 1.892475484055467e-05}, {"id": 398, "seek": 261088, "start": 2620.7200000000003, "end": 2626.56, "text": " is to try and decode it. Exactly. And to do that, you need a value, but what, what value are you", "tokens": [50364, 2158, 13, 467, 727, 2906, 604, 2010, 13, 400, 291, 500, 380, 11, 291, 500, 380, 458, 1826, 291, 1320, 257, 1323, 11, 50576, 50576, 364, 2699, 76, 2158, 281, 2058, 1429, 309, 13, 865, 13, 400, 309, 311, 3879, 42687, 13, 1743, 264, 787, 636, 281, 8947, 1589, 50856, 50856, 307, 281, 853, 293, 979, 1429, 309, 13, 7587, 13, 400, 281, 360, 300, 11, 291, 643, 257, 2158, 11, 457, 437, 11, 437, 2158, 366, 291, 51148, 51148, 516, 281, 2845, 807, 309, 30, 467, 727, 312, 364, 13785, 1230, 295, 4190, 11, 291, 458, 11, 370, 300, 300, 311, 406, 51400, 51400, 516, 281, 589, 13, 407, 300, 311, 264, 11, 2232, 11, 300, 311, 264, 4282, 365, 341, 9362, 307, 300, 309, 311, 406, 364, 2058, 1429, 13, 467, 311, 406, 51732, 51732], "temperature": 0.0, "avg_logprob": -0.08399900944112874, "compression_ratio": 1.7463768115942029, "no_caption_prob": 1.892475484055467e-05}, {"id": 399, "seek": 261088, "start": 2626.56, "end": 2631.6, "text": " going to send through it? It could be an infinite number of values, you know, so that that's not", "tokens": [50364, 2158, 13, 467, 727, 2906, 604, 2010, 13, 400, 291, 500, 380, 11, 291, 500, 380, 458, 1826, 291, 1320, 257, 1323, 11, 50576, 50576, 364, 2699, 76, 2158, 281, 2058, 1429, 309, 13, 865, 13, 400, 309, 311, 3879, 42687, 13, 1743, 264, 787, 636, 281, 8947, 1589, 50856, 50856, 307, 281, 853, 293, 979, 1429, 309, 13, 7587, 13, 400, 281, 360, 300, 11, 291, 643, 257, 2158, 11, 457, 437, 11, 437, 2158, 366, 291, 51148, 51148, 516, 281, 2845, 807, 309, 30, 467, 727, 312, 364, 13785, 1230, 295, 4190, 11, 291, 458, 11, 370, 300, 300, 311, 406, 51400, 51400, 516, 281, 589, 13, 407, 300, 311, 264, 11, 2232, 11, 300, 311, 264, 4282, 365, 341, 9362, 307, 300, 309, 311, 406, 364, 2058, 1429, 13, 467, 311, 406, 51732, 51732], "temperature": 0.0, "avg_logprob": -0.08399900944112874, "compression_ratio": 1.7463768115942029, "no_caption_prob": 1.892475484055467e-05}, {"id": 400, "seek": 261088, "start": 2631.6, "end": 2638.2400000000002, "text": " going to work. So that's the, uh, that's the trick with this API is that it's not an encode. It's not", "tokens": [50364, 2158, 13, 467, 727, 2906, 604, 2010, 13, 400, 291, 500, 380, 11, 291, 500, 380, 458, 1826, 291, 1320, 257, 1323, 11, 50576, 50576, 364, 2699, 76, 2158, 281, 2058, 1429, 309, 13, 865, 13, 400, 309, 311, 3879, 42687, 13, 1743, 264, 787, 636, 281, 8947, 1589, 50856, 50856, 307, 281, 853, 293, 979, 1429, 309, 13, 7587, 13, 400, 281, 360, 300, 11, 291, 643, 257, 2158, 11, 457, 437, 11, 437, 2158, 366, 291, 51148, 51148, 516, 281, 2845, 807, 309, 30, 467, 727, 312, 364, 13785, 1230, 295, 4190, 11, 291, 458, 11, 370, 300, 300, 311, 406, 51400, 51400, 516, 281, 589, 13, 407, 300, 311, 264, 11, 2232, 11, 300, 311, 264, 4282, 365, 341, 9362, 307, 300, 309, 311, 406, 364, 2058, 1429, 13, 467, 311, 406, 51732, 51732], "temperature": 0.0, "avg_logprob": -0.08399900944112874, "compression_ratio": 1.7463768115942029, "no_caption_prob": 1.892475484055467e-05}, {"id": 401, "seek": 263824, "start": 2638.24, "end": 2648.08, "text": " a tsjson.encode.value. It's a tsjson.encode.encoder. And that represents a function and it knows what", "tokens": [50364, 257, 35492, 73, 3015, 13, 22660, 1429, 13, 29155, 13, 467, 311, 257, 35492, 73, 3015, 13, 22660, 1429, 13, 22660, 19866, 13, 400, 300, 8855, 257, 2445, 293, 309, 3255, 437, 50856, 50856, 2699, 76, 2010, 309, 311, 516, 281, 4774, 13, 400, 309, 787, 18722, 472, 1729, 2699, 76, 2010, 13, 407, 294, 264, 1389, 295, 11, 51160, 51160, 291, 458, 11, 527, 11, 2232, 11, 527, 15576, 14237, 20828, 770, 11671, 2010, 4195, 11, 597, 307, 257, 8341, 420, 257, 3890, 51472, 51472, 4195, 420, 364, 24236, 4195, 11, 321, 600, 658, 11, 291, 458, 11, 718, 311, 584, 300, 321, 434, 17436, 3319, 300, 490, 51736, 51736], "temperature": 0.0, "avg_logprob": -0.07761151811717885, "compression_ratio": 1.6478260869565218, "no_caption_prob": 8.939614417613484e-06}, {"id": 402, "seek": 263824, "start": 2648.08, "end": 2654.16, "text": " Elm type it's going to receive. And it only handles one particular Elm type. So in the case of,", "tokens": [50364, 257, 35492, 73, 3015, 13, 22660, 1429, 13, 29155, 13, 467, 311, 257, 35492, 73, 3015, 13, 22660, 1429, 13, 22660, 19866, 13, 400, 300, 8855, 257, 2445, 293, 309, 3255, 437, 50856, 50856, 2699, 76, 2010, 309, 311, 516, 281, 4774, 13, 400, 309, 787, 18722, 472, 1729, 2699, 76, 2010, 13, 407, 294, 264, 1389, 295, 11, 51160, 51160, 291, 458, 11, 527, 11, 2232, 11, 527, 15576, 14237, 20828, 770, 11671, 2010, 4195, 11, 597, 307, 257, 8341, 420, 257, 3890, 51472, 51472, 4195, 420, 364, 24236, 4195, 11, 321, 600, 658, 11, 291, 458, 11, 718, 311, 584, 300, 321, 434, 17436, 3319, 300, 490, 51736, 51736], "temperature": 0.0, "avg_logprob": -0.07761151811717885, "compression_ratio": 1.6478260869565218, "no_caption_prob": 8.939614417613484e-06}, {"id": 403, "seek": 263824, "start": 2654.16, "end": 2660.3999999999996, "text": " you know, our, uh, our TypeScript discriminated union type user, which is a guest or a regular", "tokens": [50364, 257, 35492, 73, 3015, 13, 22660, 1429, 13, 29155, 13, 467, 311, 257, 35492, 73, 3015, 13, 22660, 1429, 13, 22660, 19866, 13, 400, 300, 8855, 257, 2445, 293, 309, 3255, 437, 50856, 50856, 2699, 76, 2010, 309, 311, 516, 281, 4774, 13, 400, 309, 787, 18722, 472, 1729, 2699, 76, 2010, 13, 407, 294, 264, 1389, 295, 11, 51160, 51160, 291, 458, 11, 527, 11, 2232, 11, 527, 15576, 14237, 20828, 770, 11671, 2010, 4195, 11, 597, 307, 257, 8341, 420, 257, 3890, 51472, 51472, 4195, 420, 364, 24236, 4195, 11, 321, 600, 658, 11, 291, 458, 11, 718, 311, 584, 300, 321, 434, 17436, 3319, 300, 490, 51736, 51736], "temperature": 0.0, "avg_logprob": -0.07761151811717885, "compression_ratio": 1.6478260869565218, "no_caption_prob": 8.939614417613484e-06}, {"id": 404, "seek": 263824, "start": 2660.3999999999996, "end": 2665.68, "text": " user or an admin user, we've got, you know, let's say that we're serializing that from", "tokens": [50364, 257, 35492, 73, 3015, 13, 22660, 1429, 13, 29155, 13, 467, 311, 257, 35492, 73, 3015, 13, 22660, 1429, 13, 22660, 19866, 13, 400, 300, 8855, 257, 2445, 293, 309, 3255, 437, 50856, 50856, 2699, 76, 2010, 309, 311, 516, 281, 4774, 13, 400, 309, 787, 18722, 472, 1729, 2699, 76, 2010, 13, 407, 294, 264, 1389, 295, 11, 51160, 51160, 291, 458, 11, 527, 11, 2232, 11, 527, 15576, 14237, 20828, 770, 11671, 2010, 4195, 11, 597, 307, 257, 8341, 420, 257, 3890, 51472, 51472, 4195, 420, 364, 24236, 4195, 11, 321, 600, 658, 11, 291, 458, 11, 718, 311, 584, 300, 321, 434, 17436, 3319, 300, 490, 51736, 51736], "temperature": 0.0, "avg_logprob": -0.07761151811717885, "compression_ratio": 1.6478260869565218, "no_caption_prob": 8.939614417613484e-06}, {"id": 405, "seek": 266568, "start": 2665.68, "end": 2670.7999999999997, "text": " a similar Elm type, which is an Elm custom type, the equivalent of that TypeScript discriminated", "tokens": [50364, 257, 2531, 2699, 76, 2010, 11, 597, 307, 364, 2699, 76, 2375, 2010, 11, 264, 10344, 295, 300, 15576, 14237, 20828, 770, 50620, 50620, 11671, 13, 407, 291, 576, 2464, 364, 2058, 19866, 13, 286, 914, 11, 291, 393, 3811, 3579, 257, 11121, 17528, 2699, 76, 11, 50972, 50972, 361, 3015, 2058, 1429, 11, 291, 458, 11, 2058, 1429, 2158, 11, 257, 2445, 300, 2516, 300, 2699, 76, 4195, 2010, 293, 2058, 4789, 309, 666, 51384, 51384, 364, 2058, 1429, 2158, 13, 400, 309, 311, 516, 281, 584, 11, 291, 458, 11, 1389, 4195, 295, 24236, 11, 4444, 512, 24236, 1589, 11, 51756, 51756], "temperature": 0.0, "avg_logprob": -0.07891461534320184, "compression_ratio": 1.6623376623376624, "no_caption_prob": 5.92054238950368e-05}, {"id": 406, "seek": 266568, "start": 2670.7999999999997, "end": 2677.8399999999997, "text": " union. So you would write an encoder. I mean, you can imagine writing a plain vanilla Elm,", "tokens": [50364, 257, 2531, 2699, 76, 2010, 11, 597, 307, 364, 2699, 76, 2375, 2010, 11, 264, 10344, 295, 300, 15576, 14237, 20828, 770, 50620, 50620, 11671, 13, 407, 291, 576, 2464, 364, 2058, 19866, 13, 286, 914, 11, 291, 393, 3811, 3579, 257, 11121, 17528, 2699, 76, 11, 50972, 50972, 361, 3015, 2058, 1429, 11, 291, 458, 11, 2058, 1429, 2158, 11, 257, 2445, 300, 2516, 300, 2699, 76, 4195, 2010, 293, 2058, 4789, 309, 666, 51384, 51384, 364, 2058, 1429, 2158, 13, 400, 309, 311, 516, 281, 584, 11, 291, 458, 11, 1389, 4195, 295, 24236, 11, 4444, 512, 24236, 1589, 11, 51756, 51756], "temperature": 0.0, "avg_logprob": -0.07891461534320184, "compression_ratio": 1.6623376623376624, "no_caption_prob": 5.92054238950368e-05}, {"id": 407, "seek": 266568, "start": 2677.8399999999997, "end": 2686.08, "text": " json encode, you know, encode value, a function that takes that Elm user type and encodes it into", "tokens": [50364, 257, 2531, 2699, 76, 2010, 11, 597, 307, 364, 2699, 76, 2375, 2010, 11, 264, 10344, 295, 300, 15576, 14237, 20828, 770, 50620, 50620, 11671, 13, 407, 291, 576, 2464, 364, 2058, 19866, 13, 286, 914, 11, 291, 393, 3811, 3579, 257, 11121, 17528, 2699, 76, 11, 50972, 50972, 361, 3015, 2058, 1429, 11, 291, 458, 11, 2058, 1429, 2158, 11, 257, 2445, 300, 2516, 300, 2699, 76, 4195, 2010, 293, 2058, 4789, 309, 666, 51384, 51384, 364, 2058, 1429, 2158, 13, 400, 309, 311, 516, 281, 584, 11, 291, 458, 11, 1389, 4195, 295, 24236, 11, 4444, 512, 24236, 1589, 11, 51756, 51756], "temperature": 0.0, "avg_logprob": -0.07891461534320184, "compression_ratio": 1.6623376623376624, "no_caption_prob": 5.92054238950368e-05}, {"id": 408, "seek": 266568, "start": 2686.08, "end": 2693.52, "text": " an encode value. And it's going to say, you know, case user of admin, grab some admin information,", "tokens": [50364, 257, 2531, 2699, 76, 2010, 11, 597, 307, 364, 2699, 76, 2375, 2010, 11, 264, 10344, 295, 300, 15576, 14237, 20828, 770, 50620, 50620, 11671, 13, 407, 291, 576, 2464, 364, 2058, 19866, 13, 286, 914, 11, 291, 393, 3811, 3579, 257, 11121, 17528, 2699, 76, 11, 50972, 50972, 361, 3015, 2058, 1429, 11, 291, 458, 11, 2058, 1429, 2158, 11, 257, 2445, 300, 2516, 300, 2699, 76, 4195, 2010, 293, 2058, 4789, 309, 666, 51384, 51384, 364, 2058, 1429, 2158, 13, 400, 309, 311, 516, 281, 584, 11, 291, 458, 11, 1389, 4195, 295, 24236, 11, 4444, 512, 24236, 1589, 11, 51756, 51756], "temperature": 0.0, "avg_logprob": -0.07891461534320184, "compression_ratio": 1.6623376623376624, "no_caption_prob": 5.92054238950368e-05}, {"id": 409, "seek": 269352, "start": 2693.52, "end": 2701.84, "text": " encode.object, yada, yada, yada. Well, it's similar with, with a tsjson encoder, except that", "tokens": [50364, 2058, 1429, 13, 41070, 11, 288, 1538, 11, 288, 1538, 11, 288, 1538, 13, 1042, 11, 309, 311, 2531, 365, 11, 365, 257, 35492, 73, 3015, 2058, 19866, 11, 3993, 300, 50780, 50780, 309, 311, 406, 445, 538, 10286, 300, 291, 434, 1455, 309, 257, 2445, 13, 440, 2058, 19866, 2564, 8855, 257, 51028, 51028, 2445, 13, 407, 11, 2232, 11, 370, 11, 291, 458, 11, 291, 393, 584, 11671, 11, 2232, 11, 291, 458, 11, 35492, 11, 35492, 2058, 1429, 11, 718, 311, 818, 309, 309, 311, 51420, 51420, 974, 35492, 73, 3015, 13, 22660, 1429, 382, 35492, 2058, 1429, 13, 407, 586, 291, 727, 584, 35492, 2058, 1429, 13, 42137, 13, 400, 264, 700, 551, 291, 976, 51836, 51836], "temperature": 0.0, "avg_logprob": -0.09944098557883162, "compression_ratio": 1.775229357798165, "no_caption_prob": 7.368160731857643e-05}, {"id": 410, "seek": 269352, "start": 2701.84, "end": 2706.8, "text": " it's not just by convention that you're making it a function. The encoder itself represents a", "tokens": [50364, 2058, 1429, 13, 41070, 11, 288, 1538, 11, 288, 1538, 11, 288, 1538, 13, 1042, 11, 309, 311, 2531, 365, 11, 365, 257, 35492, 73, 3015, 2058, 19866, 11, 3993, 300, 50780, 50780, 309, 311, 406, 445, 538, 10286, 300, 291, 434, 1455, 309, 257, 2445, 13, 440, 2058, 19866, 2564, 8855, 257, 51028, 51028, 2445, 13, 407, 11, 2232, 11, 370, 11, 291, 458, 11, 291, 393, 584, 11671, 11, 2232, 11, 291, 458, 11, 35492, 11, 35492, 2058, 1429, 11, 718, 311, 818, 309, 309, 311, 51420, 51420, 974, 35492, 73, 3015, 13, 22660, 1429, 382, 35492, 2058, 1429, 13, 407, 586, 291, 727, 584, 35492, 2058, 1429, 13, 42137, 13, 400, 264, 700, 551, 291, 976, 51836, 51836], "temperature": 0.0, "avg_logprob": -0.09944098557883162, "compression_ratio": 1.775229357798165, "no_caption_prob": 7.368160731857643e-05}, {"id": 411, "seek": 269352, "start": 2706.8, "end": 2714.64, "text": " function. So, uh, so, you know, you can say union, uh, you know, ts, ts encode, let's call it it's", "tokens": [50364, 2058, 1429, 13, 41070, 11, 288, 1538, 11, 288, 1538, 11, 288, 1538, 13, 1042, 11, 309, 311, 2531, 365, 11, 365, 257, 35492, 73, 3015, 2058, 19866, 11, 3993, 300, 50780, 50780, 309, 311, 406, 445, 538, 10286, 300, 291, 434, 1455, 309, 257, 2445, 13, 440, 2058, 19866, 2564, 8855, 257, 51028, 51028, 2445, 13, 407, 11, 2232, 11, 370, 11, 291, 458, 11, 291, 393, 584, 11671, 11, 2232, 11, 291, 458, 11, 35492, 11, 35492, 2058, 1429, 11, 718, 311, 818, 309, 309, 311, 51420, 51420, 974, 35492, 73, 3015, 13, 22660, 1429, 382, 35492, 2058, 1429, 13, 407, 586, 291, 727, 584, 35492, 2058, 1429, 13, 42137, 13, 400, 264, 700, 551, 291, 976, 51836, 51836], "temperature": 0.0, "avg_logprob": -0.09944098557883162, "compression_ratio": 1.775229357798165, "no_caption_prob": 7.368160731857643e-05}, {"id": 412, "seek": 269352, "start": 2714.64, "end": 2722.96, "text": " import tsjson.encode as ts encode. So now you could say ts encode.union. And the first thing you give", "tokens": [50364, 2058, 1429, 13, 41070, 11, 288, 1538, 11, 288, 1538, 11, 288, 1538, 13, 1042, 11, 309, 311, 2531, 365, 11, 365, 257, 35492, 73, 3015, 2058, 19866, 11, 3993, 300, 50780, 50780, 309, 311, 406, 445, 538, 10286, 300, 291, 434, 1455, 309, 257, 2445, 13, 440, 2058, 19866, 2564, 8855, 257, 51028, 51028, 2445, 13, 407, 11, 2232, 11, 370, 11, 291, 458, 11, 291, 393, 584, 11671, 11, 2232, 11, 291, 458, 11, 35492, 11, 35492, 2058, 1429, 11, 718, 311, 818, 309, 309, 311, 51420, 51420, 974, 35492, 73, 3015, 13, 22660, 1429, 382, 35492, 2058, 1429, 13, 407, 586, 291, 727, 584, 35492, 2058, 1429, 13, 42137, 13, 400, 264, 700, 551, 291, 976, 51836, 51836], "temperature": 0.0, "avg_logprob": -0.09944098557883162, "compression_ratio": 1.775229357798165, "no_caption_prob": 7.368160731857643e-05}, {"id": 413, "seek": 272296, "start": 2722.96, "end": 2728.0, "text": " it is a function. And in that function, you're going to do a case statement on your user type.", "tokens": [50364, 309, 307, 257, 2445, 13, 400, 294, 300, 2445, 11, 291, 434, 516, 281, 360, 257, 1389, 5629, 322, 428, 4195, 2010, 13, 50616, 50616, 2305, 311, 264, 4195, 2010, 1348, 490, 30, 1042, 11, 264, 2058, 19866, 291, 434, 17827, 8855, 1940, 257, 2158, 50916, 50916, 293, 17436, 3319, 309, 13, 407, 309, 311, 406, 257, 11, 309, 311, 406, 364, 6770, 300, 1487, 490, 264, 2445, 291, 434, 51152, 51152, 17827, 13, 440, 551, 307, 300, 291, 976, 309, 300, 11, 291, 458, 11, 1391, 364, 24932, 2445, 294, 300, 51412, 51412, 4319, 293, 6786, 577, 281, 747, 300, 551, 293, 1261, 309, 666, 364, 2058, 1429, 2158, 13, 865, 13, 467, 1542, 257, 51732, 51732], "temperature": 0.0, "avg_logprob": -0.05557836691538493, "compression_ratio": 1.7706766917293233, "no_caption_prob": 1.670117308094632e-05}, {"id": 414, "seek": 272296, "start": 2728.0, "end": 2734.0, "text": " Where's the user type coming from? Well, the encoder you're defining represents taking a value", "tokens": [50364, 309, 307, 257, 2445, 13, 400, 294, 300, 2445, 11, 291, 434, 516, 281, 360, 257, 1389, 5629, 322, 428, 4195, 2010, 13, 50616, 50616, 2305, 311, 264, 4195, 2010, 1348, 490, 30, 1042, 11, 264, 2058, 19866, 291, 434, 17827, 8855, 1940, 257, 2158, 50916, 50916, 293, 17436, 3319, 309, 13, 407, 309, 311, 406, 257, 11, 309, 311, 406, 364, 6770, 300, 1487, 490, 264, 2445, 291, 434, 51152, 51152, 17827, 13, 440, 551, 307, 300, 291, 976, 309, 300, 11, 291, 458, 11, 1391, 364, 24932, 2445, 294, 300, 51412, 51412, 4319, 293, 6786, 577, 281, 747, 300, 551, 293, 1261, 309, 666, 364, 2058, 1429, 2158, 13, 865, 13, 467, 1542, 257, 51732, 51732], "temperature": 0.0, "avg_logprob": -0.05557836691538493, "compression_ratio": 1.7706766917293233, "no_caption_prob": 1.670117308094632e-05}, {"id": 415, "seek": 272296, "start": 2734.0, "end": 2738.7200000000003, "text": " and serializing it. So it's not a, it's not an argument that comes from the function you're", "tokens": [50364, 309, 307, 257, 2445, 13, 400, 294, 300, 2445, 11, 291, 434, 516, 281, 360, 257, 1389, 5629, 322, 428, 4195, 2010, 13, 50616, 50616, 2305, 311, 264, 4195, 2010, 1348, 490, 30, 1042, 11, 264, 2058, 19866, 291, 434, 17827, 8855, 1940, 257, 2158, 50916, 50916, 293, 17436, 3319, 309, 13, 407, 309, 311, 406, 257, 11, 309, 311, 406, 364, 6770, 300, 1487, 490, 264, 2445, 291, 434, 51152, 51152, 17827, 13, 440, 551, 307, 300, 291, 976, 309, 300, 11, 291, 458, 11, 1391, 364, 24932, 2445, 294, 300, 51412, 51412, 4319, 293, 6786, 577, 281, 747, 300, 551, 293, 1261, 309, 666, 364, 2058, 1429, 2158, 13, 865, 13, 467, 1542, 257, 51732, 51732], "temperature": 0.0, "avg_logprob": -0.05557836691538493, "compression_ratio": 1.7706766917293233, "no_caption_prob": 1.670117308094632e-05}, {"id": 416, "seek": 272296, "start": 2738.7200000000003, "end": 2743.92, "text": " defining. The thing is that you give it that, you know, probably an anonymous function in that", "tokens": [50364, 309, 307, 257, 2445, 13, 400, 294, 300, 2445, 11, 291, 434, 516, 281, 360, 257, 1389, 5629, 322, 428, 4195, 2010, 13, 50616, 50616, 2305, 311, 264, 4195, 2010, 1348, 490, 30, 1042, 11, 264, 2058, 19866, 291, 434, 17827, 8855, 1940, 257, 2158, 50916, 50916, 293, 17436, 3319, 309, 13, 407, 309, 311, 406, 257, 11, 309, 311, 406, 364, 6770, 300, 1487, 490, 264, 2445, 291, 434, 51152, 51152, 17827, 13, 440, 551, 307, 300, 291, 976, 309, 300, 11, 291, 458, 11, 1391, 364, 24932, 2445, 294, 300, 51412, 51412, 4319, 293, 6786, 577, 281, 747, 300, 551, 293, 1261, 309, 666, 364, 2058, 1429, 2158, 13, 865, 13, 467, 1542, 257, 51732, 51732], "temperature": 0.0, "avg_logprob": -0.05557836691538493, "compression_ratio": 1.7706766917293233, "no_caption_prob": 1.670117308094632e-05}, {"id": 417, "seek": 272296, "start": 2743.92, "end": 2750.32, "text": " context and describe how to take that thing and turn it into an encode value. Yeah. It looks a", "tokens": [50364, 309, 307, 257, 2445, 13, 400, 294, 300, 2445, 11, 291, 434, 516, 281, 360, 257, 1389, 5629, 322, 428, 4195, 2010, 13, 50616, 50616, 2305, 311, 264, 4195, 2010, 1348, 490, 30, 1042, 11, 264, 2058, 19866, 291, 434, 17827, 8855, 1940, 257, 2158, 50916, 50916, 293, 17436, 3319, 309, 13, 407, 309, 311, 406, 257, 11, 309, 311, 406, 364, 6770, 300, 1487, 490, 264, 2445, 291, 434, 51152, 51152, 17827, 13, 440, 551, 307, 300, 291, 976, 309, 300, 11, 291, 458, 11, 1391, 364, 24932, 2445, 294, 300, 51412, 51412, 4319, 293, 6786, 577, 281, 747, 300, 551, 293, 1261, 309, 666, 364, 2058, 1429, 2158, 13, 865, 13, 467, 1542, 257, 51732, 51732], "temperature": 0.0, "avg_logprob": -0.05557836691538493, "compression_ratio": 1.7706766917293233, "no_caption_prob": 1.670117308094632e-05}, {"id": 418, "seek": 275032, "start": 2750.32, "end": 2756.1600000000003, "text": " lot like the codecs that we talked about during the Elm codec episode. That's right. It does look", "tokens": [50364, 688, 411, 264, 3089, 14368, 300, 321, 2825, 466, 1830, 264, 2699, 76, 3089, 66, 3500, 13, 663, 311, 558, 13, 467, 775, 574, 50656, 50656, 588, 2531, 281, 264, 3089, 66, 13, 407, 1338, 13, 407, 498, 291, 434, 1143, 281, 300, 5102, 11, 309, 311, 264, 912, 13, 1779, 13, 407, 50932, 50996, 472, 295, 264, 11733, 510, 11, 309, 311, 3163, 1237, 412, 264, 45623, 337, 341, 570, 309, 1062, 747, 257, 707, 1339, 51212, 51212, 281, 7019, 428, 3567, 926, 11, 457, 286, 519, 309, 311, 1009, 11, 291, 458, 11, 341, 307, 472, 551, 300, 321, 733, 295, 808, 51380, 51380, 646, 281, 1238, 2049, 322, 341, 7367, 307, 281, 1223, 9362, 1715, 337, 257, 1729, 7372, 51704, 51704], "temperature": 0.0, "avg_logprob": -0.10085245919606042, "compression_ratio": 1.6609589041095891, "no_caption_prob": 2.2125415853224695e-05}, {"id": 419, "seek": 275032, "start": 2756.1600000000003, "end": 2761.6800000000003, "text": " very similar to the codec. So yeah. So if you're used to that pattern, it's the same. Right. So", "tokens": [50364, 688, 411, 264, 3089, 14368, 300, 321, 2825, 466, 1830, 264, 2699, 76, 3089, 66, 3500, 13, 663, 311, 558, 13, 467, 775, 574, 50656, 50656, 588, 2531, 281, 264, 3089, 66, 13, 407, 1338, 13, 407, 498, 291, 434, 1143, 281, 300, 5102, 11, 309, 311, 264, 912, 13, 1779, 13, 407, 50932, 50996, 472, 295, 264, 11733, 510, 11, 309, 311, 3163, 1237, 412, 264, 45623, 337, 341, 570, 309, 1062, 747, 257, 707, 1339, 51212, 51212, 281, 7019, 428, 3567, 926, 11, 457, 286, 519, 309, 311, 1009, 11, 291, 458, 11, 341, 307, 472, 551, 300, 321, 733, 295, 808, 51380, 51380, 646, 281, 1238, 2049, 322, 341, 7367, 307, 281, 1223, 9362, 1715, 337, 257, 1729, 7372, 51704, 51704], "temperature": 0.0, "avg_logprob": -0.10085245919606042, "compression_ratio": 1.6609589041095891, "no_caption_prob": 2.2125415853224695e-05}, {"id": 420, "seek": 275032, "start": 2762.96, "end": 2767.28, "text": " one of the tricks here, it's worth looking at the docs for this because it might take a little while", "tokens": [50364, 688, 411, 264, 3089, 14368, 300, 321, 2825, 466, 1830, 264, 2699, 76, 3089, 66, 3500, 13, 663, 311, 558, 13, 467, 775, 574, 50656, 50656, 588, 2531, 281, 264, 3089, 66, 13, 407, 1338, 13, 407, 498, 291, 434, 1143, 281, 300, 5102, 11, 309, 311, 264, 912, 13, 1779, 13, 407, 50932, 50996, 472, 295, 264, 11733, 510, 11, 309, 311, 3163, 1237, 412, 264, 45623, 337, 341, 570, 309, 1062, 747, 257, 707, 1339, 51212, 51212, 281, 7019, 428, 3567, 926, 11, 457, 286, 519, 309, 311, 1009, 11, 291, 458, 11, 341, 307, 472, 551, 300, 321, 733, 295, 808, 51380, 51380, 646, 281, 1238, 2049, 322, 341, 7367, 307, 281, 1223, 9362, 1715, 337, 257, 1729, 7372, 51704, 51704], "temperature": 0.0, "avg_logprob": -0.10085245919606042, "compression_ratio": 1.6609589041095891, "no_caption_prob": 2.2125415853224695e-05}, {"id": 421, "seek": 275032, "start": 2767.28, "end": 2770.6400000000003, "text": " to wrap your brain around, but I think it's always, you know, this is one thing that we kind of come", "tokens": [50364, 688, 411, 264, 3089, 14368, 300, 321, 2825, 466, 1830, 264, 2699, 76, 3089, 66, 3500, 13, 663, 311, 558, 13, 467, 775, 574, 50656, 50656, 588, 2531, 281, 264, 3089, 66, 13, 407, 1338, 13, 407, 498, 291, 434, 1143, 281, 300, 5102, 11, 309, 311, 264, 912, 13, 1779, 13, 407, 50932, 50996, 472, 295, 264, 11733, 510, 11, 309, 311, 3163, 1237, 412, 264, 45623, 337, 341, 570, 309, 1062, 747, 257, 707, 1339, 51212, 51212, 281, 7019, 428, 3567, 926, 11, 457, 286, 519, 309, 311, 1009, 11, 291, 458, 11, 341, 307, 472, 551, 300, 321, 733, 295, 808, 51380, 51380, 646, 281, 1238, 2049, 322, 341, 7367, 307, 281, 1223, 9362, 1715, 337, 257, 1729, 7372, 51704, 51704], "temperature": 0.0, "avg_logprob": -0.10085245919606042, "compression_ratio": 1.6609589041095891, "no_caption_prob": 2.2125415853224695e-05}, {"id": 422, "seek": 275032, "start": 2770.6400000000003, "end": 2777.1200000000003, "text": " back to pretty often on this podcast is to understand API design for a particular package", "tokens": [50364, 688, 411, 264, 3089, 14368, 300, 321, 2825, 466, 1830, 264, 2699, 76, 3089, 66, 3500, 13, 663, 311, 558, 13, 467, 775, 574, 50656, 50656, 588, 2531, 281, 264, 3089, 66, 13, 407, 1338, 13, 407, 498, 291, 434, 1143, 281, 300, 5102, 11, 309, 311, 264, 912, 13, 1779, 13, 407, 50932, 50996, 472, 295, 264, 11733, 510, 11, 309, 311, 3163, 1237, 412, 264, 45623, 337, 341, 570, 309, 1062, 747, 257, 707, 1339, 51212, 51212, 281, 7019, 428, 3567, 926, 11, 457, 286, 519, 309, 311, 1009, 11, 291, 458, 11, 341, 307, 472, 551, 300, 321, 733, 295, 808, 51380, 51380, 646, 281, 1238, 2049, 322, 341, 7367, 307, 281, 1223, 9362, 1715, 337, 257, 1729, 7372, 51704, 51704], "temperature": 0.0, "avg_logprob": -0.10085245919606042, "compression_ratio": 1.6609589041095891, "no_caption_prob": 2.2125415853224695e-05}, {"id": 423, "seek": 277712, "start": 2777.12, "end": 2782.48, "text": " in Elm. It's often useful to sort of understand the problem that the API designer was trying to", "tokens": [50364, 294, 2699, 76, 13, 467, 311, 2049, 4420, 281, 1333, 295, 1223, 264, 1154, 300, 264, 9362, 11795, 390, 1382, 281, 50632, 50632, 5039, 365, 300, 13, 1042, 11, 286, 362, 38599, 1752, 322, 341, 9362, 11, 370, 286, 393, 976, 257, 707, 11269, 666, 50952, 50952, 264, 1154, 300, 341, 307, 12606, 13, 407, 264, 700, 472, 286, 7619, 11, 597, 307, 577, 360, 291, 483, 264, 2010, 295, 51200, 51200, 364, 2058, 1429, 2158, 30, 509, 393, 380, 11, 291, 643, 364, 2058, 19866, 13, 440, 1150, 551, 307, 577, 360, 291, 458, 30, 407, 411, 586, 51600, 51680], "temperature": 0.0, "avg_logprob": -0.06874923335695729, "compression_ratio": 1.617283950617284, "no_caption_prob": 4.33162203989923e-05}, {"id": 424, "seek": 277712, "start": 2782.48, "end": 2788.88, "text": " solve with that. Well, I have firsthand experience on this API, so I can give a little insight into", "tokens": [50364, 294, 2699, 76, 13, 467, 311, 2049, 4420, 281, 1333, 295, 1223, 264, 1154, 300, 264, 9362, 11795, 390, 1382, 281, 50632, 50632, 5039, 365, 300, 13, 1042, 11, 286, 362, 38599, 1752, 322, 341, 9362, 11, 370, 286, 393, 976, 257, 707, 11269, 666, 50952, 50952, 264, 1154, 300, 341, 307, 12606, 13, 407, 264, 700, 472, 286, 7619, 11, 597, 307, 577, 360, 291, 483, 264, 2010, 295, 51200, 51200, 364, 2058, 1429, 2158, 30, 509, 393, 380, 11, 291, 643, 364, 2058, 19866, 13, 440, 1150, 551, 307, 577, 360, 291, 458, 30, 407, 411, 586, 51600, 51680], "temperature": 0.0, "avg_logprob": -0.06874923335695729, "compression_ratio": 1.617283950617284, "no_caption_prob": 4.33162203989923e-05}, {"id": 425, "seek": 277712, "start": 2788.88, "end": 2793.8399999999997, "text": " the problem that this is solving. So the first one I described, which is how do you get the type of", "tokens": [50364, 294, 2699, 76, 13, 467, 311, 2049, 4420, 281, 1333, 295, 1223, 264, 1154, 300, 264, 9362, 11795, 390, 1382, 281, 50632, 50632, 5039, 365, 300, 13, 1042, 11, 286, 362, 38599, 1752, 322, 341, 9362, 11, 370, 286, 393, 976, 257, 707, 11269, 666, 50952, 50952, 264, 1154, 300, 341, 307, 12606, 13, 407, 264, 700, 472, 286, 7619, 11, 597, 307, 577, 360, 291, 483, 264, 2010, 295, 51200, 51200, 364, 2058, 1429, 2158, 30, 509, 393, 380, 11, 291, 643, 364, 2058, 19866, 13, 440, 1150, 551, 307, 577, 360, 291, 458, 30, 407, 411, 586, 51600, 51680], "temperature": 0.0, "avg_logprob": -0.06874923335695729, "compression_ratio": 1.617283950617284, "no_caption_prob": 4.33162203989923e-05}, {"id": 426, "seek": 277712, "start": 2793.8399999999997, "end": 2801.8399999999997, "text": " an encode value? You can't, you need an encoder. The second thing is how do you know? So like now", "tokens": [50364, 294, 2699, 76, 13, 467, 311, 2049, 4420, 281, 1333, 295, 1223, 264, 1154, 300, 264, 9362, 11795, 390, 1382, 281, 50632, 50632, 5039, 365, 300, 13, 1042, 11, 286, 362, 38599, 1752, 322, 341, 9362, 11, 370, 286, 393, 976, 257, 707, 11269, 666, 50952, 50952, 264, 1154, 300, 341, 307, 12606, 13, 407, 264, 700, 472, 286, 7619, 11, 597, 307, 577, 360, 291, 483, 264, 2010, 295, 51200, 51200, 364, 2058, 1429, 2158, 30, 509, 393, 380, 11, 291, 643, 364, 2058, 19866, 13, 440, 1150, 551, 307, 577, 360, 291, 458, 30, 407, 411, 586, 51600, 51680], "temperature": 0.0, "avg_logprob": -0.06874923335695729, "compression_ratio": 1.617283950617284, "no_caption_prob": 4.33162203989923e-05}, {"id": 427, "seek": 280184, "start": 2801.84, "end": 2810.6400000000003, "text": " you're describing a union encoder. And so union is the word I'm using because it's going to encode", "tokens": [50364, 291, 434, 16141, 257, 11671, 2058, 19866, 13, 400, 370, 11671, 307, 264, 1349, 286, 478, 1228, 570, 309, 311, 516, 281, 2058, 1429, 50804, 50804, 309, 666, 257, 15576, 14237, 11671, 2010, 13, 400, 370, 577, 360, 291, 6786, 300, 30, 1012, 360, 291, 458, 264, 1944, 51152, 51152, 721, 291, 1062, 2058, 1429, 666, 30, 1436, 586, 498, 291, 584, 11, 1392, 11, 286, 362, 257, 2445, 1389, 4195, 295, 11, 51448, 51448, 293, 550, 291, 445, 976, 309, 257, 31828, 2058, 1429, 2158, 13, 1042, 11, 586, 291, 920, 362, 264, 912, 1154, 300, 51688, 51688], "temperature": 0.0, "avg_logprob": -0.059597855747336205, "compression_ratio": 1.6406926406926408, "no_caption_prob": 1.834241447795648e-05}, {"id": 428, "seek": 280184, "start": 2810.6400000000003, "end": 2817.6000000000004, "text": " it into a TypeScript union type. And so how do you describe that? How do you know the possible", "tokens": [50364, 291, 434, 16141, 257, 11671, 2058, 19866, 13, 400, 370, 11671, 307, 264, 1349, 286, 478, 1228, 570, 309, 311, 516, 281, 2058, 1429, 50804, 50804, 309, 666, 257, 15576, 14237, 11671, 2010, 13, 400, 370, 577, 360, 291, 6786, 300, 30, 1012, 360, 291, 458, 264, 1944, 51152, 51152, 721, 291, 1062, 2058, 1429, 666, 30, 1436, 586, 498, 291, 584, 11, 1392, 11, 286, 362, 257, 2445, 1389, 4195, 295, 11, 51448, 51448, 293, 550, 291, 445, 976, 309, 257, 31828, 2058, 1429, 2158, 13, 1042, 11, 586, 291, 920, 362, 264, 912, 1154, 300, 51688, 51688], "temperature": 0.0, "avg_logprob": -0.059597855747336205, "compression_ratio": 1.6406926406926408, "no_caption_prob": 1.834241447795648e-05}, {"id": 429, "seek": 280184, "start": 2817.6000000000004, "end": 2823.52, "text": " things you might encode into? Because now if you say, okay, I have a function case user of,", "tokens": [50364, 291, 434, 16141, 257, 11671, 2058, 19866, 13, 400, 370, 11671, 307, 264, 1349, 286, 478, 1228, 570, 309, 311, 516, 281, 2058, 1429, 50804, 50804, 309, 666, 257, 15576, 14237, 11671, 2010, 13, 400, 370, 577, 360, 291, 6786, 300, 30, 1012, 360, 291, 458, 264, 1944, 51152, 51152, 721, 291, 1062, 2058, 1429, 666, 30, 1436, 586, 498, 291, 584, 11, 1392, 11, 286, 362, 257, 2445, 1389, 4195, 295, 11, 51448, 51448, 293, 550, 291, 445, 976, 309, 257, 31828, 2058, 1429, 2158, 13, 1042, 11, 586, 291, 920, 362, 264, 912, 1154, 300, 51688, 51688], "temperature": 0.0, "avg_logprob": -0.059597855747336205, "compression_ratio": 1.6406926406926408, "no_caption_prob": 1.834241447795648e-05}, {"id": 430, "seek": 280184, "start": 2823.52, "end": 2828.32, "text": " and then you just give it a JSON encode value. Well, now you still have the same problem that", "tokens": [50364, 291, 434, 16141, 257, 11671, 2058, 19866, 13, 400, 370, 11671, 307, 264, 1349, 286, 478, 1228, 570, 309, 311, 516, 281, 2058, 1429, 50804, 50804, 309, 666, 257, 15576, 14237, 11671, 2010, 13, 400, 370, 577, 360, 291, 6786, 300, 30, 1012, 360, 291, 458, 264, 1944, 51152, 51152, 721, 291, 1062, 2058, 1429, 666, 30, 1436, 586, 498, 291, 584, 11, 1392, 11, 286, 362, 257, 2445, 1389, 4195, 295, 11, 51448, 51448, 293, 550, 291, 445, 976, 309, 257, 31828, 2058, 1429, 2158, 13, 1042, 11, 586, 291, 920, 362, 264, 912, 1154, 300, 51688, 51688], "temperature": 0.0, "avg_logprob": -0.059597855747336205, "compression_ratio": 1.6406926406926408, "no_caption_prob": 1.834241447795648e-05}, {"id": 431, "seek": 282832, "start": 2828.32, "end": 2835.2000000000003, "text": " you could encode it into any value. However, with the design of this API, and this was inspired by", "tokens": [50364, 291, 727, 2058, 1429, 309, 666, 604, 2158, 13, 2908, 11, 365, 264, 1715, 295, 341, 9362, 11, 293, 341, 390, 7547, 538, 50708, 50740, 2699, 76, 30123, 618, 293, 18239, 5477, 36523, 311, 589, 322, 300, 11, 597, 370, 955, 3231, 281, 796, 13, 286, 632, 512, 51052, 51052, 7315, 365, 796, 293, 415, 534, 4254, 385, 733, 295, 362, 512, 295, 613, 14310, 337, 341, 51280, 51280, 1729, 644, 295, 264, 9362, 13, 400, 370, 586, 291, 362, 281, 11, 286, 519, 295, 341, 382, 411, 47329, 264, 819, 51704, 51704], "temperature": 0.0, "avg_logprob": -0.08492921528063323, "compression_ratio": 1.5551020408163265, "no_caption_prob": 6.401515565812588e-05}, {"id": 432, "seek": 282832, "start": 2835.84, "end": 2842.0800000000004, "text": " Elm Kotick and Mini Bill Leonardo's work on that, which so big thanks to him. I had some", "tokens": [50364, 291, 727, 2058, 1429, 309, 666, 604, 2158, 13, 2908, 11, 365, 264, 1715, 295, 341, 9362, 11, 293, 341, 390, 7547, 538, 50708, 50740, 2699, 76, 30123, 618, 293, 18239, 5477, 36523, 311, 589, 322, 300, 11, 597, 370, 955, 3231, 281, 796, 13, 286, 632, 512, 51052, 51052, 7315, 365, 796, 293, 415, 534, 4254, 385, 733, 295, 362, 512, 295, 613, 14310, 337, 341, 51280, 51280, 1729, 644, 295, 264, 9362, 13, 400, 370, 586, 291, 362, 281, 11, 286, 519, 295, 341, 382, 411, 47329, 264, 819, 51704, 51704], "temperature": 0.0, "avg_logprob": -0.08492921528063323, "compression_ratio": 1.5551020408163265, "no_caption_prob": 6.401515565812588e-05}, {"id": 433, "seek": 282832, "start": 2842.0800000000004, "end": 2846.6400000000003, "text": " conversations with him and he really helped me kind of have some of these insights for this", "tokens": [50364, 291, 727, 2058, 1429, 309, 666, 604, 2158, 13, 2908, 11, 365, 264, 1715, 295, 341, 9362, 11, 293, 341, 390, 7547, 538, 50708, 50740, 2699, 76, 30123, 618, 293, 18239, 5477, 36523, 311, 589, 322, 300, 11, 597, 370, 955, 3231, 281, 796, 13, 286, 632, 512, 51052, 51052, 7315, 365, 796, 293, 415, 534, 4254, 385, 733, 295, 362, 512, 295, 613, 14310, 337, 341, 51280, 51280, 1729, 644, 295, 264, 9362, 13, 400, 370, 586, 291, 362, 281, 11, 286, 519, 295, 341, 382, 411, 47329, 264, 819, 51704, 51704], "temperature": 0.0, "avg_logprob": -0.08492921528063323, "compression_ratio": 1.5551020408163265, "no_caption_prob": 6.401515565812588e-05}, {"id": 434, "seek": 282832, "start": 2846.6400000000003, "end": 2855.1200000000003, "text": " particular part of the API. And so now you have to, I think of this as like registering the different", "tokens": [50364, 291, 727, 2058, 1429, 309, 666, 604, 2158, 13, 2908, 11, 365, 264, 1715, 295, 341, 9362, 11, 293, 341, 390, 7547, 538, 50708, 50740, 2699, 76, 30123, 618, 293, 18239, 5477, 36523, 311, 589, 322, 300, 11, 597, 370, 955, 3231, 281, 796, 13, 286, 632, 512, 51052, 51052, 7315, 365, 796, 293, 415, 534, 4254, 385, 733, 295, 362, 512, 295, 613, 14310, 337, 341, 51280, 51280, 1729, 644, 295, 264, 9362, 13, 400, 370, 586, 291, 362, 281, 11, 286, 519, 295, 341, 382, 411, 47329, 264, 819, 51704, 51704], "temperature": 0.0, "avg_logprob": -0.08492921528063323, "compression_ratio": 1.5551020408163265, "no_caption_prob": 6.401515565812588e-05}, {"id": 435, "seek": 285512, "start": 2855.12, "end": 2861.8399999999997, "text": " possible encoders in that union. So now you have to define these different encoders. And so you say,", "tokens": [50364, 1944, 2058, 378, 433, 294, 300, 11671, 13, 407, 586, 291, 362, 281, 6964, 613, 819, 2058, 378, 433, 13, 400, 370, 291, 584, 11, 50700, 50700, 291, 458, 11, 17501, 11, 17501, 20411, 420, 17501, 2657, 11, 420, 291, 393, 362, 613, 819, 17501, 50940, 50940, 3467, 13, 400, 300, 311, 1333, 295, 411, 47329, 746, 300, 291, 434, 516, 281, 4774, 294, 300, 51160, 51160, 24932, 2445, 13, 400, 291, 393, 764, 300, 562, 291, 562, 291, 584, 1389, 4195, 295, 291, 393, 764, 300, 281, 11, 51480, 51480, 281, 2058, 1429, 264, 4195, 13, 583, 983, 393, 380, 291, 445, 360, 604, 31828, 2058, 1429, 2158, 30, 1042, 11, 264, 1778, 307, 570, 51804, 51804], "temperature": 0.0, "avg_logprob": -0.05851027965545654, "compression_ratio": 1.8384615384615384, "no_caption_prob": 3.3736276236595586e-05}, {"id": 436, "seek": 285512, "start": 2861.8399999999997, "end": 2866.64, "text": " you know, variant, variant literal or variant object, or you can have these different variant", "tokens": [50364, 1944, 2058, 378, 433, 294, 300, 11671, 13, 407, 586, 291, 362, 281, 6964, 613, 819, 2058, 378, 433, 13, 400, 370, 291, 584, 11, 50700, 50700, 291, 458, 11, 17501, 11, 17501, 20411, 420, 17501, 2657, 11, 420, 291, 393, 362, 613, 819, 17501, 50940, 50940, 3467, 13, 400, 300, 311, 1333, 295, 411, 47329, 746, 300, 291, 434, 516, 281, 4774, 294, 300, 51160, 51160, 24932, 2445, 13, 400, 291, 393, 764, 300, 562, 291, 562, 291, 584, 1389, 4195, 295, 291, 393, 764, 300, 281, 11, 51480, 51480, 281, 2058, 1429, 264, 4195, 13, 583, 983, 393, 380, 291, 445, 360, 604, 31828, 2058, 1429, 2158, 30, 1042, 11, 264, 1778, 307, 570, 51804, 51804], "temperature": 0.0, "avg_logprob": -0.05851027965545654, "compression_ratio": 1.8384615384615384, "no_caption_prob": 3.3736276236595586e-05}, {"id": 437, "seek": 285512, "start": 2866.64, "end": 2871.04, "text": " types. And that's sort of like registering something that you're going to receive in that", "tokens": [50364, 1944, 2058, 378, 433, 294, 300, 11671, 13, 407, 586, 291, 362, 281, 6964, 613, 819, 2058, 378, 433, 13, 400, 370, 291, 584, 11, 50700, 50700, 291, 458, 11, 17501, 11, 17501, 20411, 420, 17501, 2657, 11, 420, 291, 393, 362, 613, 819, 17501, 50940, 50940, 3467, 13, 400, 300, 311, 1333, 295, 411, 47329, 746, 300, 291, 434, 516, 281, 4774, 294, 300, 51160, 51160, 24932, 2445, 13, 400, 291, 393, 764, 300, 562, 291, 562, 291, 584, 1389, 4195, 295, 291, 393, 764, 300, 281, 11, 51480, 51480, 281, 2058, 1429, 264, 4195, 13, 583, 983, 393, 380, 291, 445, 360, 604, 31828, 2058, 1429, 2158, 30, 1042, 11, 264, 1778, 307, 570, 51804, 51804], "temperature": 0.0, "avg_logprob": -0.05851027965545654, "compression_ratio": 1.8384615384615384, "no_caption_prob": 3.3736276236595586e-05}, {"id": 438, "seek": 285512, "start": 2871.04, "end": 2877.44, "text": " anonymous function. And you can use that when you when you say case user of you can use that to,", "tokens": [50364, 1944, 2058, 378, 433, 294, 300, 11671, 13, 407, 586, 291, 362, 281, 6964, 613, 819, 2058, 378, 433, 13, 400, 370, 291, 584, 11, 50700, 50700, 291, 458, 11, 17501, 11, 17501, 20411, 420, 17501, 2657, 11, 420, 291, 393, 362, 613, 819, 17501, 50940, 50940, 3467, 13, 400, 300, 311, 1333, 295, 411, 47329, 746, 300, 291, 434, 516, 281, 4774, 294, 300, 51160, 51160, 24932, 2445, 13, 400, 291, 393, 764, 300, 562, 291, 562, 291, 584, 1389, 4195, 295, 291, 393, 764, 300, 281, 11, 51480, 51480, 281, 2058, 1429, 264, 4195, 13, 583, 983, 393, 380, 291, 445, 360, 604, 31828, 2058, 1429, 2158, 30, 1042, 11, 264, 1778, 307, 570, 51804, 51804], "temperature": 0.0, "avg_logprob": -0.05851027965545654, "compression_ratio": 1.8384615384615384, "no_caption_prob": 3.3736276236595586e-05}, {"id": 439, "seek": 285512, "start": 2877.44, "end": 2883.92, "text": " to encode the user. But why can't you just do any JSON encode value? Well, the reason is because", "tokens": [50364, 1944, 2058, 378, 433, 294, 300, 11671, 13, 407, 586, 291, 362, 281, 6964, 613, 819, 2058, 378, 433, 13, 400, 370, 291, 584, 11, 50700, 50700, 291, 458, 11, 17501, 11, 17501, 20411, 420, 17501, 2657, 11, 420, 291, 393, 362, 613, 819, 17501, 50940, 50940, 3467, 13, 400, 300, 311, 1333, 295, 411, 47329, 746, 300, 291, 434, 516, 281, 4774, 294, 300, 51160, 51160, 24932, 2445, 13, 400, 291, 393, 764, 300, 562, 291, 562, 291, 584, 1389, 4195, 295, 291, 393, 764, 300, 281, 11, 51480, 51480, 281, 2058, 1429, 264, 4195, 13, 583, 983, 393, 380, 291, 445, 360, 604, 31828, 2058, 1429, 2158, 30, 1042, 11, 264, 1778, 307, 570, 51804, 51804], "temperature": 0.0, "avg_logprob": -0.05851027965545654, "compression_ratio": 1.8384615384615384, "no_caption_prob": 3.3736276236595586e-05}, {"id": 440, "seek": 288392, "start": 2883.92, "end": 2890.48, "text": " you need to, you need to register upfront all the possible things you might encode into so that", "tokens": [50364, 291, 643, 281, 11, 291, 643, 281, 7280, 30264, 439, 264, 1944, 721, 291, 1062, 2058, 1429, 666, 370, 300, 50692, 50692, 2699, 76, 37645, 5751, 404, 393, 458, 729, 3467, 293, 1884, 264, 6854, 11671, 2010, 13, 1436, 5911, 11, 50996, 50996, 309, 727, 312, 604, 31828, 2158, 11, 291, 500, 380, 458, 437, 309, 311, 516, 281, 312, 13, 407, 300, 311, 257, 688, 281, 26699, 13, 51252, 51280, 865, 13, 583, 457, 4787, 11, 264, 264, 7372, 1542, 588, 2531, 281, 31828, 281, 2699, 76, 17330, 31828, 11, 51596, 51656], "temperature": 0.0, "avg_logprob": -0.15174041547273334, "compression_ratio": 1.5485232067510548, "no_caption_prob": 4.832404010812752e-05}, {"id": 441, "seek": 288392, "start": 2890.48, "end": 2896.56, "text": " Elm TS Interop can know those types and create the appropriate union type. Because otherwise,", "tokens": [50364, 291, 643, 281, 11, 291, 643, 281, 7280, 30264, 439, 264, 1944, 721, 291, 1062, 2058, 1429, 666, 370, 300, 50692, 50692, 2699, 76, 37645, 5751, 404, 393, 458, 729, 3467, 293, 1884, 264, 6854, 11671, 2010, 13, 1436, 5911, 11, 50996, 50996, 309, 727, 312, 604, 31828, 2158, 11, 291, 500, 380, 458, 437, 309, 311, 516, 281, 312, 13, 407, 300, 311, 257, 688, 281, 26699, 13, 51252, 51280, 865, 13, 583, 457, 4787, 11, 264, 264, 7372, 1542, 588, 2531, 281, 31828, 281, 2699, 76, 17330, 31828, 11, 51596, 51656], "temperature": 0.0, "avg_logprob": -0.15174041547273334, "compression_ratio": 1.5485232067510548, "no_caption_prob": 4.832404010812752e-05}, {"id": 442, "seek": 288392, "start": 2896.56, "end": 2901.6800000000003, "text": " it could be any JSON value, you don't know what it's going to be. So that's a lot to unpack.", "tokens": [50364, 291, 643, 281, 11, 291, 643, 281, 7280, 30264, 439, 264, 1944, 721, 291, 1062, 2058, 1429, 666, 370, 300, 50692, 50692, 2699, 76, 37645, 5751, 404, 393, 458, 729, 3467, 293, 1884, 264, 6854, 11671, 2010, 13, 1436, 5911, 11, 50996, 50996, 309, 727, 312, 604, 31828, 2158, 11, 291, 500, 380, 458, 437, 309, 311, 516, 281, 312, 13, 407, 300, 311, 257, 688, 281, 26699, 13, 51252, 51280, 865, 13, 583, 457, 4787, 11, 264, 264, 7372, 1542, 588, 2531, 281, 31828, 281, 2699, 76, 17330, 31828, 11, 51596, 51656], "temperature": 0.0, "avg_logprob": -0.15174041547273334, "compression_ratio": 1.5485232067510548, "no_caption_prob": 4.832404010812752e-05}, {"id": 443, "seek": 288392, "start": 2902.2400000000002, "end": 2908.56, "text": " Yeah. But but overall, the the package looks very similar to JSON to Elm slash JSON,", "tokens": [50364, 291, 643, 281, 11, 291, 643, 281, 7280, 30264, 439, 264, 1944, 721, 291, 1062, 2058, 1429, 666, 370, 300, 50692, 50692, 2699, 76, 37645, 5751, 404, 393, 458, 729, 3467, 293, 1884, 264, 6854, 11671, 2010, 13, 1436, 5911, 11, 50996, 50996, 309, 727, 312, 604, 31828, 2158, 11, 291, 500, 380, 458, 437, 309, 311, 516, 281, 312, 13, 407, 300, 311, 257, 688, 281, 26699, 13, 51252, 51280, 865, 13, 583, 457, 4787, 11, 264, 264, 7372, 1542, 588, 2531, 281, 31828, 281, 2699, 76, 17330, 31828, 11, 51596, 51656], "temperature": 0.0, "avg_logprob": -0.15174041547273334, "compression_ratio": 1.5485232067510548, "no_caption_prob": 4.832404010812752e-05}, {"id": 444, "seek": 290856, "start": 2908.56, "end": 2916.08, "text": " with the additional of some functions to better reflect or better decode the TypeScript possibilities.", "tokens": [50364, 365, 264, 4497, 295, 512, 6828, 281, 1101, 5031, 420, 1101, 979, 1429, 264, 15576, 14237, 12178, 13, 50740, 50740, 663, 311, 558, 13, 865, 13, 407, 611, 1542, 257, 857, 411, 3089, 66, 294, 512, 14519, 13, 400, 264, 6322, 4497, 51156, 51156, 4111, 307, 300, 291, 393, 483, 264, 15576, 14237, 2010, 300, 291, 393, 8947, 300, 484, 295, 264, 2058, 378, 433, 51452, 51452, 293, 979, 378, 433, 13, 1079, 13, 865, 11, 291, 603, 1391, 483, 1238, 1400, 365, 341, 6405, 949, 291, 51764, 51796], "temperature": 0.0, "avg_logprob": -0.18008206964849116, "compression_ratio": 1.6725663716814159, "no_caption_prob": 7.843575440347195e-05}, {"id": 445, "seek": 290856, "start": 2916.08, "end": 2924.4, "text": " That's right. Yeah. So also looks a bit like codec in some instances. And the obvious additional", "tokens": [50364, 365, 264, 4497, 295, 512, 6828, 281, 1101, 5031, 420, 1101, 979, 1429, 264, 15576, 14237, 12178, 13, 50740, 50740, 663, 311, 558, 13, 865, 13, 407, 611, 1542, 257, 857, 411, 3089, 66, 294, 512, 14519, 13, 400, 264, 6322, 4497, 51156, 51156, 4111, 307, 300, 291, 393, 483, 264, 15576, 14237, 2010, 300, 291, 393, 8947, 300, 484, 295, 264, 2058, 378, 433, 51452, 51452, 293, 979, 378, 433, 13, 1079, 13, 865, 11, 291, 603, 1391, 483, 1238, 1400, 365, 341, 6405, 949, 291, 51764, 51796], "temperature": 0.0, "avg_logprob": -0.18008206964849116, "compression_ratio": 1.6725663716814159, "no_caption_prob": 7.843575440347195e-05}, {"id": 446, "seek": 290856, "start": 2924.4, "end": 2930.32, "text": " feature is that you can get the TypeScript type that you can extract that out of the encoders", "tokens": [50364, 365, 264, 4497, 295, 512, 6828, 281, 1101, 5031, 420, 1101, 979, 1429, 264, 15576, 14237, 12178, 13, 50740, 50740, 663, 311, 558, 13, 865, 13, 407, 611, 1542, 257, 857, 411, 3089, 66, 294, 512, 14519, 13, 400, 264, 6322, 4497, 51156, 51156, 4111, 307, 300, 291, 393, 483, 264, 15576, 14237, 2010, 300, 291, 393, 8947, 300, 484, 295, 264, 2058, 378, 433, 51452, 51452, 293, 979, 378, 433, 13, 1079, 13, 865, 11, 291, 603, 1391, 483, 1238, 1400, 365, 341, 6405, 949, 291, 51764, 51796], "temperature": 0.0, "avg_logprob": -0.18008206964849116, "compression_ratio": 1.6725663716814159, "no_caption_prob": 7.843575440347195e-05}, {"id": 447, "seek": 290856, "start": 2930.32, "end": 2936.56, "text": " and decoders. Yes. Yeah, you'll probably get pretty far with this library before you", "tokens": [50364, 365, 264, 4497, 295, 512, 6828, 281, 1101, 5031, 420, 1101, 979, 1429, 264, 15576, 14237, 12178, 13, 50740, 50740, 663, 311, 558, 13, 865, 13, 407, 611, 1542, 257, 857, 411, 3089, 66, 294, 512, 14519, 13, 400, 264, 6322, 4497, 51156, 51156, 4111, 307, 300, 291, 393, 483, 264, 15576, 14237, 2010, 300, 291, 393, 8947, 300, 484, 295, 264, 2058, 378, 433, 51452, 51452, 293, 979, 378, 433, 13, 1079, 13, 865, 11, 291, 603, 1391, 483, 1238, 1400, 365, 341, 6405, 949, 291, 51764, 51796], "temperature": 0.0, "avg_logprob": -0.18008206964849116, "compression_ratio": 1.6725663716814159, "no_caption_prob": 7.843575440347195e-05}, {"id": 448, "seek": 293656, "start": 2936.56, "end": 2942.56, "text": " realize where it diverges from the Elm JSON API. Yeah, I mean, chances are, I guess, I guess you", "tokens": [50364, 4325, 689, 309, 18558, 2880, 490, 264, 2699, 76, 31828, 9362, 13, 865, 11, 286, 914, 11, 10486, 366, 11, 286, 2041, 11, 286, 2041, 291, 50664, 50664, 1062, 312, 7750, 512, 16950, 2375, 3467, 807, 18160, 13, 286, 914, 11, 300, 311, 411, 472, 300, 311, 472, 50880, 50880, 295, 264, 2135, 5493, 295, 341, 1716, 390, 561, 4305, 1566, 365, 2699, 76, 15576, 14237, 5751, 404, 11, 577, 360, 286, 51116, 51116, 17436, 1125, 2375, 3467, 30, 400, 286, 390, 411, 11, 16478, 11, 286, 600, 658, 512, 588, 10247, 3487, 337, 577, 286, 1062, 360, 300, 13, 51448, 51448, 400, 436, 439, 445, 2762, 411, 11, 411, 11, 1392, 11, 286, 727, 360, 300, 13, 583, 1338, 11, 309, 311, 411, 370, 6179, 13, 400, 51752, 51752], "temperature": 0.0, "avg_logprob": -0.12431818066221295, "compression_ratio": 1.6576271186440679, "no_caption_prob": 0.00054409314179793}, {"id": 449, "seek": 293656, "start": 2942.56, "end": 2946.88, "text": " might be sending some sophisticated custom types through ports. I mean, that's like one that's one", "tokens": [50364, 4325, 689, 309, 18558, 2880, 490, 264, 2699, 76, 31828, 9362, 13, 865, 11, 286, 914, 11, 10486, 366, 11, 286, 2041, 11, 286, 2041, 291, 50664, 50664, 1062, 312, 7750, 512, 16950, 2375, 3467, 807, 18160, 13, 286, 914, 11, 300, 311, 411, 472, 300, 311, 472, 50880, 50880, 295, 264, 2135, 5493, 295, 341, 1716, 390, 561, 4305, 1566, 365, 2699, 76, 15576, 14237, 5751, 404, 11, 577, 360, 286, 51116, 51116, 17436, 1125, 2375, 3467, 30, 400, 286, 390, 411, 11, 16478, 11, 286, 600, 658, 512, 588, 10247, 3487, 337, 577, 286, 1062, 360, 300, 13, 51448, 51448, 400, 436, 439, 445, 2762, 411, 11, 411, 11, 1392, 11, 286, 727, 360, 300, 13, 583, 1338, 11, 309, 311, 411, 370, 6179, 13, 400, 51752, 51752], "temperature": 0.0, "avg_logprob": -0.12431818066221295, "compression_ratio": 1.6576271186440679, "no_caption_prob": 0.00054409314179793}, {"id": 450, "seek": 293656, "start": 2946.88, "end": 2951.6, "text": " of the main goals of this project was people kept saying with Elm TypeScript Interop, how do I", "tokens": [50364, 4325, 689, 309, 18558, 2880, 490, 264, 2699, 76, 31828, 9362, 13, 865, 11, 286, 914, 11, 10486, 366, 11, 286, 2041, 11, 286, 2041, 291, 50664, 50664, 1062, 312, 7750, 512, 16950, 2375, 3467, 807, 18160, 13, 286, 914, 11, 300, 311, 411, 472, 300, 311, 472, 50880, 50880, 295, 264, 2135, 5493, 295, 341, 1716, 390, 561, 4305, 1566, 365, 2699, 76, 15576, 14237, 5751, 404, 11, 577, 360, 286, 51116, 51116, 17436, 1125, 2375, 3467, 30, 400, 286, 390, 411, 11, 16478, 11, 286, 600, 658, 512, 588, 10247, 3487, 337, 577, 286, 1062, 360, 300, 13, 51448, 51448, 400, 436, 439, 445, 2762, 411, 11, 411, 11, 1392, 11, 286, 727, 360, 300, 13, 583, 1338, 11, 309, 311, 411, 370, 6179, 13, 400, 51752, 51752], "temperature": 0.0, "avg_logprob": -0.12431818066221295, "compression_ratio": 1.6576271186440679, "no_caption_prob": 0.00054409314179793}, {"id": 451, "seek": 293656, "start": 2951.6, "end": 2958.24, "text": " serialize custom types? And I was like, hmm, I've got some very fancy ideas for how I might do that.", "tokens": [50364, 4325, 689, 309, 18558, 2880, 490, 264, 2699, 76, 31828, 9362, 13, 865, 11, 286, 914, 11, 10486, 366, 11, 286, 2041, 11, 286, 2041, 291, 50664, 50664, 1062, 312, 7750, 512, 16950, 2375, 3467, 807, 18160, 13, 286, 914, 11, 300, 311, 411, 472, 300, 311, 472, 50880, 50880, 295, 264, 2135, 5493, 295, 341, 1716, 390, 561, 4305, 1566, 365, 2699, 76, 15576, 14237, 5751, 404, 11, 577, 360, 286, 51116, 51116, 17436, 1125, 2375, 3467, 30, 400, 286, 390, 411, 11, 16478, 11, 286, 600, 658, 512, 588, 10247, 3487, 337, 577, 286, 1062, 360, 300, 13, 51448, 51448, 400, 436, 439, 445, 2762, 411, 11, 411, 11, 1392, 11, 286, 727, 360, 300, 13, 583, 1338, 11, 309, 311, 411, 370, 6179, 13, 400, 51752, 51752], "temperature": 0.0, "avg_logprob": -0.12431818066221295, "compression_ratio": 1.6576271186440679, "no_caption_prob": 0.00054409314179793}, {"id": 452, "seek": 293656, "start": 2958.24, "end": 2964.32, "text": " And they all just felt like, like, okay, I could do that. But yeah, it's like so complicated. And", "tokens": [50364, 4325, 689, 309, 18558, 2880, 490, 264, 2699, 76, 31828, 9362, 13, 865, 11, 286, 914, 11, 10486, 366, 11, 286, 2041, 11, 286, 2041, 291, 50664, 50664, 1062, 312, 7750, 512, 16950, 2375, 3467, 807, 18160, 13, 286, 914, 11, 300, 311, 411, 472, 300, 311, 472, 50880, 50880, 295, 264, 2135, 5493, 295, 341, 1716, 390, 561, 4305, 1566, 365, 2699, 76, 15576, 14237, 5751, 404, 11, 577, 360, 286, 51116, 51116, 17436, 1125, 2375, 3467, 30, 400, 286, 390, 411, 11, 16478, 11, 286, 600, 658, 512, 588, 10247, 3487, 337, 577, 286, 1062, 360, 300, 13, 51448, 51448, 400, 436, 439, 445, 2762, 411, 11, 411, 11, 1392, 11, 286, 727, 360, 300, 13, 583, 1338, 11, 309, 311, 411, 370, 6179, 13, 400, 51752, 51752], "temperature": 0.0, "avg_logprob": -0.12431818066221295, "compression_ratio": 1.6576271186440679, "no_caption_prob": 0.00054409314179793}, {"id": 453, "seek": 296432, "start": 2964.32, "end": 2969.6800000000003, "text": " how the developer experience was confusing, because there are all these specific things you have to", "tokens": [50364, 577, 264, 10754, 1752, 390, 13181, 11, 570, 456, 366, 439, 613, 2685, 721, 291, 362, 281, 50632, 50632, 1466, 293, 613, 33520, 291, 362, 281, 10687, 322, 13, 400, 550, 406, 787, 300, 11, 457, 291, 362, 341, 1154, 50956, 50956, 295, 11, 291, 458, 11, 597, 2010, 307, 264, 700, 1508, 13326, 13, 407, 291, 362, 2699, 76, 3467, 11, 293, 291, 6772, 51196, 51196, 17436, 1125, 613, 721, 13, 400, 437, 498, 291, 362, 42687, 3467, 293, 439, 613, 4759, 30, 407, 341, 11, 51504, 51540], "temperature": 0.0, "avg_logprob": -0.17026064946101263, "compression_ratio": 1.7136563876651982, "no_caption_prob": 0.000503209768794477}, {"id": 454, "seek": 296432, "start": 2969.6800000000003, "end": 2976.1600000000003, "text": " learn and these conventions you have to rely on. And then not only that, but you have this problem", "tokens": [50364, 577, 264, 10754, 1752, 390, 13181, 11, 570, 456, 366, 439, 613, 2685, 721, 291, 362, 281, 50632, 50632, 1466, 293, 613, 33520, 291, 362, 281, 10687, 322, 13, 400, 550, 406, 787, 300, 11, 457, 291, 362, 341, 1154, 50956, 50956, 295, 11, 291, 458, 11, 597, 2010, 307, 264, 700, 1508, 13326, 13, 407, 291, 362, 2699, 76, 3467, 11, 293, 291, 6772, 51196, 51196, 17436, 1125, 613, 721, 13, 400, 437, 498, 291, 362, 42687, 3467, 293, 439, 613, 4759, 30, 407, 341, 11, 51504, 51540], "temperature": 0.0, "avg_logprob": -0.17026064946101263, "compression_ratio": 1.7136563876651982, "no_caption_prob": 0.000503209768794477}, {"id": 455, "seek": 296432, "start": 2976.1600000000003, "end": 2980.96, "text": " of, you know, which type is the first class citizen. So you have Elm types, and you automatically", "tokens": [50364, 577, 264, 10754, 1752, 390, 13181, 11, 570, 456, 366, 439, 613, 2685, 721, 291, 362, 281, 50632, 50632, 1466, 293, 613, 33520, 291, 362, 281, 10687, 322, 13, 400, 550, 406, 787, 300, 11, 457, 291, 362, 341, 1154, 50956, 50956, 295, 11, 291, 458, 11, 597, 2010, 307, 264, 700, 1508, 13326, 13, 407, 291, 362, 2699, 76, 3467, 11, 293, 291, 6772, 51196, 51196, 17436, 1125, 613, 721, 13, 400, 437, 498, 291, 362, 42687, 3467, 293, 439, 613, 4759, 30, 407, 341, 11, 51504, 51540], "temperature": 0.0, "avg_logprob": -0.17026064946101263, "compression_ratio": 1.7136563876651982, "no_caption_prob": 0.000503209768794477}, {"id": 456, "seek": 296432, "start": 2980.96, "end": 2987.1200000000003, "text": " serialize these things. And what if you have opaque types and all these challenges? So this,", "tokens": [50364, 577, 264, 10754, 1752, 390, 13181, 11, 570, 456, 366, 439, 613, 2685, 721, 291, 362, 281, 50632, 50632, 1466, 293, 613, 33520, 291, 362, 281, 10687, 322, 13, 400, 550, 406, 787, 300, 11, 457, 291, 362, 341, 1154, 50956, 50956, 295, 11, 291, 458, 11, 597, 2010, 307, 264, 700, 1508, 13326, 13, 407, 291, 362, 2699, 76, 3467, 11, 293, 291, 6772, 51196, 51196, 17436, 1125, 613, 721, 13, 400, 437, 498, 291, 362, 42687, 3467, 293, 439, 613, 4759, 30, 407, 341, 11, 51504, 51540], "temperature": 0.0, "avg_logprob": -0.17026064946101263, "compression_ratio": 1.7136563876651982, "no_caption_prob": 0.000503209768794477}, {"id": 457, "seek": 298712, "start": 2987.12, "end": 2993.2799999999997, "text": " I'm a lot happier with this design. So I'm curious, can you use Elm TS JSON in any way", "tokens": [50364, 286, 478, 257, 688, 20423, 365, 341, 1715, 13, 407, 286, 478, 6369, 11, 393, 291, 764, 2699, 76, 37645, 31828, 294, 604, 636, 50672, 50672, 1553, 2699, 76, 37645, 5751, 404, 30, 4402, 309, 362, 604, 2158, 30, 1079, 11, 300, 311, 472, 295, 264, 4112, 983, 286, 4926, 309, 51020, 51020, 2699, 76, 37645, 31828, 11, 406, 2699, 76, 37645, 5751, 404, 13, 286, 7993, 390, 5141, 264, 7372, 2564, 37645, 5751, 404, 13, 583, 700, 51332, 51332, 295, 439, 11, 286, 519, 300, 264, 1315, 18926, 437, 264, 7372, 775, 257, 707, 857, 1101, 11, 570, 309, 311, 51600, 51600], "temperature": 0.0, "avg_logprob": -0.11512429373604911, "compression_ratio": 1.5914893617021277, "no_caption_prob": 0.00030058890115469694}, {"id": 458, "seek": 298712, "start": 2993.2799999999997, "end": 3000.24, "text": " without Elm TS Interop? Does it have any value? Yes, that's one of the reasons why I named it", "tokens": [50364, 286, 478, 257, 688, 20423, 365, 341, 1715, 13, 407, 286, 478, 6369, 11, 393, 291, 764, 2699, 76, 37645, 31828, 294, 604, 636, 50672, 50672, 1553, 2699, 76, 37645, 5751, 404, 30, 4402, 309, 362, 604, 2158, 30, 1079, 11, 300, 311, 472, 295, 264, 4112, 983, 286, 4926, 309, 51020, 51020, 2699, 76, 37645, 31828, 11, 406, 2699, 76, 37645, 5751, 404, 13, 286, 7993, 390, 5141, 264, 7372, 2564, 37645, 5751, 404, 13, 583, 700, 51332, 51332, 295, 439, 11, 286, 519, 300, 264, 1315, 18926, 437, 264, 7372, 775, 257, 707, 857, 1101, 11, 570, 309, 311, 51600, 51600], "temperature": 0.0, "avg_logprob": -0.11512429373604911, "compression_ratio": 1.5914893617021277, "no_caption_prob": 0.00030058890115469694}, {"id": 459, "seek": 298712, "start": 3000.24, "end": 3006.48, "text": " Elm TS JSON, not Elm TS Interop. I originally was calling the package itself TS Interop. But first", "tokens": [50364, 286, 478, 257, 688, 20423, 365, 341, 1715, 13, 407, 286, 478, 6369, 11, 393, 291, 764, 2699, 76, 37645, 31828, 294, 604, 636, 50672, 50672, 1553, 2699, 76, 37645, 5751, 404, 30, 4402, 309, 362, 604, 2158, 30, 1079, 11, 300, 311, 472, 295, 264, 4112, 983, 286, 4926, 309, 51020, 51020, 2699, 76, 37645, 31828, 11, 406, 2699, 76, 37645, 5751, 404, 13, 286, 7993, 390, 5141, 264, 7372, 2564, 37645, 5751, 404, 13, 583, 700, 51332, 51332, 295, 439, 11, 286, 519, 300, 264, 1315, 18926, 437, 264, 7372, 775, 257, 707, 857, 1101, 11, 570, 309, 311, 51600, 51600], "temperature": 0.0, "avg_logprob": -0.11512429373604911, "compression_ratio": 1.5914893617021277, "no_caption_prob": 0.00030058890115469694}, {"id": 460, "seek": 298712, "start": 3006.48, "end": 3011.8399999999997, "text": " of all, I think that the name reflects what the package does a little bit better, because it's", "tokens": [50364, 286, 478, 257, 688, 20423, 365, 341, 1715, 13, 407, 286, 478, 6369, 11, 393, 291, 764, 2699, 76, 37645, 31828, 294, 604, 636, 50672, 50672, 1553, 2699, 76, 37645, 5751, 404, 30, 4402, 309, 362, 604, 2158, 30, 1079, 11, 300, 311, 472, 295, 264, 4112, 983, 286, 4926, 309, 51020, 51020, 2699, 76, 37645, 31828, 11, 406, 2699, 76, 37645, 5751, 404, 13, 286, 7993, 390, 5141, 264, 7372, 2564, 37645, 5751, 404, 13, 583, 700, 51332, 51332, 295, 439, 11, 286, 519, 300, 264, 1315, 18926, 437, 264, 7372, 775, 257, 707, 857, 1101, 11, 570, 309, 311, 51600, 51600], "temperature": 0.0, "avg_logprob": -0.11512429373604911, "compression_ratio": 1.5914893617021277, "no_caption_prob": 0.00030058890115469694}, {"id": 461, "seek": 301184, "start": 3011.84, "end": 3018.96, "text": " just it's just JSON encoders and decoders, except that they're TS JSON values. So you can ask for", "tokens": [50364, 445, 309, 311, 445, 31828, 2058, 378, 433, 293, 979, 378, 433, 11, 3993, 300, 436, 434, 37645, 31828, 4190, 13, 407, 291, 393, 1029, 337, 50720, 50720, 264, 2010, 1589, 13, 583, 611, 11, 286, 6941, 300, 286, 393, 764, 309, 281, 360, 257, 688, 544, 813, 445, 2699, 76, 37645, 51052, 51052, 5751, 404, 13, 407, 472, 295, 264, 721, 300, 286, 600, 668, 12736, 611, 11, 286, 478, 406, 1596, 1919, 281, 4374, 51364, 51364, 341, 11, 457, 4696, 286, 603, 652, 364, 12847, 2321, 13, 286, 600, 668, 2433, 926, 365, 746, 51620, 51648], "temperature": 0.0, "avg_logprob": -0.11602630615234374, "compression_ratio": 1.575, "no_caption_prob": 0.0005191739764995873}, {"id": 462, "seek": 301184, "start": 3018.96, "end": 3025.6000000000004, "text": " the type information. But also, I discovered that I can use it to do a lot more than just Elm TS", "tokens": [50364, 445, 309, 311, 445, 31828, 2058, 378, 433, 293, 979, 378, 433, 11, 3993, 300, 436, 434, 37645, 31828, 4190, 13, 407, 291, 393, 1029, 337, 50720, 50720, 264, 2010, 1589, 13, 583, 611, 11, 286, 6941, 300, 286, 393, 764, 309, 281, 360, 257, 688, 544, 813, 445, 2699, 76, 37645, 51052, 51052, 5751, 404, 13, 407, 472, 295, 264, 721, 300, 286, 600, 668, 12736, 611, 11, 286, 478, 406, 1596, 1919, 281, 4374, 51364, 51364, 341, 11, 457, 4696, 286, 603, 652, 364, 12847, 2321, 13, 286, 600, 668, 2433, 926, 365, 746, 51620, 51648], "temperature": 0.0, "avg_logprob": -0.11602630615234374, "compression_ratio": 1.575, "no_caption_prob": 0.0005191739764995873}, {"id": 463, "seek": 301184, "start": 3025.6000000000004, "end": 3031.84, "text": " Interop. So one of the things that I've been exploring also, I'm not quite ready to release", "tokens": [50364, 445, 309, 311, 445, 31828, 2058, 378, 433, 293, 979, 378, 433, 11, 3993, 300, 436, 434, 37645, 31828, 4190, 13, 407, 291, 393, 1029, 337, 50720, 50720, 264, 2010, 1589, 13, 583, 611, 11, 286, 6941, 300, 286, 393, 764, 309, 281, 360, 257, 688, 544, 813, 445, 2699, 76, 37645, 51052, 51052, 5751, 404, 13, 407, 472, 295, 264, 721, 300, 286, 600, 668, 12736, 611, 11, 286, 478, 406, 1596, 1919, 281, 4374, 51364, 51364, 341, 11, 457, 4696, 286, 603, 652, 364, 12847, 2321, 13, 286, 600, 668, 2433, 926, 365, 746, 51620, 51648], "temperature": 0.0, "avg_logprob": -0.11602630615234374, "compression_ratio": 1.575, "no_caption_prob": 0.0005191739764995873}, {"id": 464, "seek": 301184, "start": 3031.84, "end": 3036.96, "text": " this, but hopefully I'll make an announcement soon. I've been playing around with something", "tokens": [50364, 445, 309, 311, 445, 31828, 2058, 378, 433, 293, 979, 378, 433, 11, 3993, 300, 436, 434, 37645, 31828, 4190, 13, 407, 291, 393, 1029, 337, 50720, 50720, 264, 2010, 1589, 13, 583, 611, 11, 286, 6941, 300, 286, 393, 764, 309, 281, 360, 257, 688, 544, 813, 445, 2699, 76, 37645, 51052, 51052, 5751, 404, 13, 407, 472, 295, 264, 721, 300, 286, 600, 668, 12736, 611, 11, 286, 478, 406, 1596, 1919, 281, 4374, 51364, 51364, 341, 11, 457, 4696, 286, 603, 652, 364, 12847, 2321, 13, 286, 600, 668, 2433, 926, 365, 746, 51620, 51648], "temperature": 0.0, "avg_logprob": -0.11602630615234374, "compression_ratio": 1.575, "no_caption_prob": 0.0005191739764995873}, {"id": 465, "seek": 303696, "start": 3036.96, "end": 3042.96, "text": " that allows you to use this same underlying package and similar techniques to have a type", "tokens": [50364, 300, 4045, 291, 281, 764, 341, 912, 14217, 7372, 293, 2531, 7512, 281, 362, 257, 2010, 50664, 50664, 3273, 7283, 11, 341, 1333, 295, 3467, 1553, 16287, 3410, 365, 18017, 365, 7154, 1832, 6828, 13, 51028, 51028, 407, 264, 3875, 764, 1389, 576, 312, 291, 362, 257, 7154, 1832, 2445, 11, 597, 307, 445, 257, 11, 309, 311, 445, 257, 51416, 51416, 15778, 2445, 13, 286, 914, 11, 291, 393, 2464, 552, 294, 819, 8650, 13, 400, 456, 366, 11, 291, 458, 11, 51660, 51692], "temperature": 0.0, "avg_logprob": -0.1546819621119006, "compression_ratio": 1.6085106382978724, "no_caption_prob": 0.0001177336962427944}, {"id": 466, "seek": 303696, "start": 3042.96, "end": 3050.2400000000002, "text": " safe bridge, this sort of types without borders concept with interacting with serverless functions.", "tokens": [50364, 300, 4045, 291, 281, 764, 341, 912, 14217, 7372, 293, 2531, 7512, 281, 362, 257, 2010, 50664, 50664, 3273, 7283, 11, 341, 1333, 295, 3467, 1553, 16287, 3410, 365, 18017, 365, 7154, 1832, 6828, 13, 51028, 51028, 407, 264, 3875, 764, 1389, 576, 312, 291, 362, 257, 7154, 1832, 2445, 11, 597, 307, 445, 257, 11, 309, 311, 445, 257, 51416, 51416, 15778, 2445, 13, 286, 914, 11, 291, 393, 2464, 552, 294, 819, 8650, 13, 400, 456, 366, 11, 291, 458, 11, 51660, 51692], "temperature": 0.0, "avg_logprob": -0.1546819621119006, "compression_ratio": 1.6085106382978724, "no_caption_prob": 0.0001177336962427944}, {"id": 467, "seek": 303696, "start": 3050.2400000000002, "end": 3058.0, "text": " So the basic use case would be you have a serverless function, which is just a, it's just a", "tokens": [50364, 300, 4045, 291, 281, 764, 341, 912, 14217, 7372, 293, 2531, 7512, 281, 362, 257, 2010, 50664, 50664, 3273, 7283, 11, 341, 1333, 295, 3467, 1553, 16287, 3410, 365, 18017, 365, 7154, 1832, 6828, 13, 51028, 51028, 407, 264, 3875, 764, 1389, 576, 312, 291, 362, 257, 7154, 1832, 2445, 11, 597, 307, 445, 257, 11, 309, 311, 445, 257, 51416, 51416, 15778, 2445, 13, 286, 914, 11, 291, 393, 2464, 552, 294, 819, 8650, 13, 400, 456, 366, 11, 291, 458, 11, 51660, 51692], "temperature": 0.0, "avg_logprob": -0.1546819621119006, "compression_ratio": 1.6085106382978724, "no_caption_prob": 0.0001177336962427944}, {"id": 468, "seek": 303696, "start": 3058.0, "end": 3062.88, "text": " JavaScript function. I mean, you can write them in different languages. And there are, you know,", "tokens": [50364, 300, 4045, 291, 281, 764, 341, 912, 14217, 7372, 293, 2531, 7512, 281, 362, 257, 2010, 50664, 50664, 3273, 7283, 11, 341, 1333, 295, 3467, 1553, 16287, 3410, 365, 18017, 365, 7154, 1832, 6828, 13, 51028, 51028, 407, 264, 3875, 764, 1389, 576, 312, 291, 362, 257, 7154, 1832, 2445, 11, 597, 307, 445, 257, 11, 309, 311, 445, 257, 51416, 51416, 15778, 2445, 13, 286, 914, 11, 291, 393, 2464, 552, 294, 819, 8650, 13, 400, 456, 366, 11, 291, 458, 11, 51660, 51692], "temperature": 0.0, "avg_logprob": -0.1546819621119006, "compression_ratio": 1.6085106382978724, "no_caption_prob": 0.0001177336962427944}, {"id": 469, "seek": 306288, "start": 3062.88, "end": 3069.04, "text": " there are some tools out there for using serverless with Elm. And that's, I think, an", "tokens": [50364, 456, 366, 512, 3873, 484, 456, 337, 1228, 7154, 1832, 365, 2699, 76, 13, 400, 300, 311, 11, 286, 519, 11, 364, 50672, 50672, 1880, 293, 4420, 3109, 886, 13, 583, 264, 1558, 307, 498, 291, 445, 528, 281, 2464, 257, 7154, 1832, 2445, 11, 50984, 50984, 7154, 1832, 6828, 366, 257, 534, 1481, 636, 281, 445, 411, 818, 364, 426, 18819, 7372, 13, 1743, 11, 337, 1365, 11, 51252, 51252, 498, 291, 434, 1228, 20390, 494, 281, 31574, 257, 10224, 11, 420, 291, 434, 1228, 40231, 15, 281, 9214, 8700, 1580, 420, 51584, 51584], "temperature": 0.0, "avg_logprob": -0.15057957049497625, "compression_ratio": 1.6223175965665235, "no_caption_prob": 6.921318708918989e-05}, {"id": 470, "seek": 306288, "start": 3069.04, "end": 3075.28, "text": " interesting and useful approach too. But the idea is if you just want to write a serverless function,", "tokens": [50364, 456, 366, 512, 3873, 484, 456, 337, 1228, 7154, 1832, 365, 2699, 76, 13, 400, 300, 311, 11, 286, 519, 11, 364, 50672, 50672, 1880, 293, 4420, 3109, 886, 13, 583, 264, 1558, 307, 498, 291, 445, 528, 281, 2464, 257, 7154, 1832, 2445, 11, 50984, 50984, 7154, 1832, 6828, 366, 257, 534, 1481, 636, 281, 445, 411, 818, 364, 426, 18819, 7372, 13, 1743, 11, 337, 1365, 11, 51252, 51252, 498, 291, 434, 1228, 20390, 494, 281, 31574, 257, 10224, 11, 420, 291, 434, 1228, 40231, 15, 281, 9214, 8700, 1580, 420, 51584, 51584], "temperature": 0.0, "avg_logprob": -0.15057957049497625, "compression_ratio": 1.6223175965665235, "no_caption_prob": 6.921318708918989e-05}, {"id": 471, "seek": 306288, "start": 3075.28, "end": 3080.6400000000003, "text": " serverless functions are a really nice way to just like call an NPM package. Like, for example,", "tokens": [50364, 456, 366, 512, 3873, 484, 456, 337, 1228, 7154, 1832, 365, 2699, 76, 13, 400, 300, 311, 11, 286, 519, 11, 364, 50672, 50672, 1880, 293, 4420, 3109, 886, 13, 583, 264, 1558, 307, 498, 291, 445, 528, 281, 2464, 257, 7154, 1832, 2445, 11, 50984, 50984, 7154, 1832, 6828, 366, 257, 534, 1481, 636, 281, 445, 411, 818, 364, 426, 18819, 7372, 13, 1743, 11, 337, 1365, 11, 51252, 51252, 498, 291, 434, 1228, 20390, 494, 281, 31574, 257, 10224, 11, 420, 291, 434, 1228, 40231, 15, 281, 9214, 8700, 1580, 420, 51584, 51584], "temperature": 0.0, "avg_logprob": -0.15057957049497625, "compression_ratio": 1.6223175965665235, "no_caption_prob": 6.921318708918989e-05}, {"id": 472, "seek": 306288, "start": 3080.6400000000003, "end": 3087.28, "text": " if you're using Stripe to initiate a payment, or you're using Auth0 to authenticate someone or", "tokens": [50364, 456, 366, 512, 3873, 484, 456, 337, 1228, 7154, 1832, 365, 2699, 76, 13, 400, 300, 311, 11, 286, 519, 11, 364, 50672, 50672, 1880, 293, 4420, 3109, 886, 13, 583, 264, 1558, 307, 498, 291, 445, 528, 281, 2464, 257, 7154, 1832, 2445, 11, 50984, 50984, 7154, 1832, 6828, 366, 257, 534, 1481, 636, 281, 445, 411, 818, 364, 426, 18819, 7372, 13, 1743, 11, 337, 1365, 11, 51252, 51252, 498, 291, 434, 1228, 20390, 494, 281, 31574, 257, 10224, 11, 420, 291, 434, 1228, 40231, 15, 281, 9214, 8700, 1580, 420, 51584, 51584], "temperature": 0.0, "avg_logprob": -0.15057957049497625, "compression_ratio": 1.6223175965665235, "no_caption_prob": 6.921318708918989e-05}, {"id": 473, "seek": 308728, "start": 3087.28, "end": 3095.6000000000004, "text": " whatever it may be, you just pull in, you know, you just want to use this Stripe NPM package. And", "tokens": [50364, 2035, 309, 815, 312, 11, 291, 445, 2235, 294, 11, 291, 458, 11, 291, 445, 528, 281, 764, 341, 20390, 494, 426, 18819, 7372, 13, 400, 50780, 50780, 291, 611, 528, 281, 362, 411, 257, 7154, 4054, 11, 597, 291, 2644, 4090, 294, 428, 6423, 3089, 570, 291, 51056, 51056, 500, 380, 528, 552, 281, 312, 1075, 281, 360, 10224, 9007, 13, 865, 13, 407, 286, 478, 988, 456, 366, 512, 4122, 420, 512, 51516, 51516], "temperature": 0.0, "avg_logprob": -0.13390097251305214, "compression_ratio": 1.4975124378109452, "no_caption_prob": 0.000379931996576488}, {"id": 474, "seek": 308728, "start": 3095.6000000000004, "end": 3101.1200000000003, "text": " you also want to have like a server secret, which you cannot include in your client code because you", "tokens": [50364, 2035, 309, 815, 312, 11, 291, 445, 2235, 294, 11, 291, 458, 11, 291, 445, 528, 281, 764, 341, 20390, 494, 426, 18819, 7372, 13, 400, 50780, 50780, 291, 611, 528, 281, 362, 411, 257, 7154, 4054, 11, 597, 291, 2644, 4090, 294, 428, 6423, 3089, 570, 291, 51056, 51056, 500, 380, 528, 552, 281, 312, 1075, 281, 360, 10224, 9007, 13, 865, 13, 407, 286, 478, 988, 456, 366, 512, 4122, 420, 512, 51516, 51516], "temperature": 0.0, "avg_logprob": -0.13390097251305214, "compression_ratio": 1.4975124378109452, "no_caption_prob": 0.000379931996576488}, {"id": 475, "seek": 308728, "start": 3101.1200000000003, "end": 3110.32, "text": " don't want them to be able to do payment processing. Yeah. So I'm sure there are some features or some", "tokens": [50364, 2035, 309, 815, 312, 11, 291, 445, 2235, 294, 11, 291, 458, 11, 291, 445, 528, 281, 764, 341, 20390, 494, 426, 18819, 7372, 13, 400, 50780, 50780, 291, 611, 528, 281, 362, 411, 257, 7154, 4054, 11, 597, 291, 2644, 4090, 294, 428, 6423, 3089, 570, 291, 51056, 51056, 500, 380, 528, 552, 281, 312, 1075, 281, 360, 10224, 9007, 13, 865, 13, 407, 286, 478, 988, 456, 366, 512, 4122, 420, 512, 51516, 51516], "temperature": 0.0, "avg_logprob": -0.13390097251305214, "compression_ratio": 1.4975124378109452, "no_caption_prob": 0.000379931996576488}, {"id": 476, "seek": 311032, "start": 3110.32, "end": 3119.92, "text": " use cases for that. Yeah. Right. I think there might be like fraud. Right. Basic fraud. Yeah.", "tokens": [50364, 764, 3331, 337, 300, 13, 865, 13, 1779, 13, 286, 519, 456, 1062, 312, 411, 14560, 13, 1779, 13, 31598, 14560, 13, 865, 13, 50844, 50844, 865, 13, 286, 914, 11, 309, 311, 534, 11, 309, 311, 570, 11, 286, 914, 11, 341, 307, 264, 733, 295, 551, 11, 411, 11, 498, 291, 519, 51032, 51032, 466, 309, 11, 309, 311, 411, 18160, 366, 534, 4420, 337, 1629, 3331, 13, 583, 550, 512, 3331, 291, 445, 11, 51332, 51332, 291, 643, 281, 360, 309, 294, 257, 7144, 2823, 11, 420, 291, 643, 281, 360, 309, 294, 364, 2823, 689, 291, 11, 51536, 51536], "temperature": 0.0, "avg_logprob": -0.1588540758405413, "compression_ratio": 1.7725118483412323, "no_caption_prob": 0.00010889279656112194}, {"id": 477, "seek": 311032, "start": 3119.92, "end": 3123.6800000000003, "text": " Yeah. I mean, it's really, it's because, I mean, this is the kind of thing, like, if you think", "tokens": [50364, 764, 3331, 337, 300, 13, 865, 13, 1779, 13, 286, 519, 456, 1062, 312, 411, 14560, 13, 1779, 13, 31598, 14560, 13, 865, 13, 50844, 50844, 865, 13, 286, 914, 11, 309, 311, 534, 11, 309, 311, 570, 11, 286, 914, 11, 341, 307, 264, 733, 295, 551, 11, 411, 11, 498, 291, 519, 51032, 51032, 466, 309, 11, 309, 311, 411, 18160, 366, 534, 4420, 337, 1629, 3331, 13, 583, 550, 512, 3331, 291, 445, 11, 51332, 51332, 291, 643, 281, 360, 309, 294, 257, 7144, 2823, 11, 420, 291, 643, 281, 360, 309, 294, 364, 2823, 689, 291, 11, 51536, 51536], "temperature": 0.0, "avg_logprob": -0.1588540758405413, "compression_ratio": 1.7725118483412323, "no_caption_prob": 0.00010889279656112194}, {"id": 478, "seek": 311032, "start": 3123.6800000000003, "end": 3129.6800000000003, "text": " about it, it's like ports are really useful for certain cases. But then some cases you just,", "tokens": [50364, 764, 3331, 337, 300, 13, 865, 13, 1779, 13, 286, 519, 456, 1062, 312, 411, 14560, 13, 1779, 13, 31598, 14560, 13, 865, 13, 50844, 50844, 865, 13, 286, 914, 11, 309, 311, 534, 11, 309, 311, 570, 11, 286, 914, 11, 341, 307, 264, 733, 295, 551, 11, 411, 11, 498, 291, 519, 51032, 51032, 466, 309, 11, 309, 311, 411, 18160, 366, 534, 4420, 337, 1629, 3331, 13, 583, 550, 512, 3331, 291, 445, 11, 51332, 51332, 291, 643, 281, 360, 309, 294, 257, 7144, 2823, 11, 420, 291, 643, 281, 360, 309, 294, 364, 2823, 689, 291, 11, 51536, 51536], "temperature": 0.0, "avg_logprob": -0.1588540758405413, "compression_ratio": 1.7725118483412323, "no_caption_prob": 0.00010889279656112194}, {"id": 479, "seek": 311032, "start": 3129.6800000000003, "end": 3133.76, "text": " you need to do it in a secure environment, or you need to do it in an environment where you,", "tokens": [50364, 764, 3331, 337, 300, 13, 865, 13, 1779, 13, 286, 519, 456, 1062, 312, 411, 14560, 13, 1779, 13, 31598, 14560, 13, 865, 13, 50844, 50844, 865, 13, 286, 914, 11, 309, 311, 534, 11, 309, 311, 570, 11, 286, 914, 11, 341, 307, 264, 733, 295, 551, 11, 411, 11, 498, 291, 519, 51032, 51032, 466, 309, 11, 309, 311, 411, 18160, 366, 534, 4420, 337, 1629, 3331, 13, 583, 550, 512, 3331, 291, 445, 11, 51332, 51332, 291, 643, 281, 360, 309, 294, 257, 7144, 2823, 11, 420, 291, 643, 281, 360, 309, 294, 364, 2823, 689, 291, 11, 51536, 51536], "temperature": 0.0, "avg_logprob": -0.1588540758405413, "compression_ratio": 1.7725118483412323, "no_caption_prob": 0.00010889279656112194}, {"id": 480, "seek": 313376, "start": 3133.76, "end": 3140.4, "text": " you know, the code that's executing submission, that you're not bypassing some client side", "tokens": [50364, 291, 458, 11, 264, 3089, 300, 311, 32368, 23689, 11, 300, 291, 434, 406, 24996, 278, 512, 6423, 1252, 50696, 50696, 7363, 763, 11, 293, 291, 643, 281, 362, 264, 7154, 382, 264, 8539, 23083, 420, 2035, 11, 558, 13, 407, 11, 291, 458, 11, 50952, 50952, 291, 528, 300, 281, 312, 264, 4009, 295, 3494, 13, 407, 286, 767, 3094, 341, 1716, 293, 362, 668, 2433, 51304, 51304, 926, 365, 309, 689, 309, 4960, 2699, 76, 37645, 31828, 281, 718, 291, 6964, 257, 4583, 281, 2042, 33283, 12475, 281, 257, 51784, 51784], "temperature": 0.0, "avg_logprob": -0.11519299557334499, "compression_ratio": 1.5510204081632653, "no_caption_prob": 7.030829146970063e-05}, {"id": 481, "seek": 313376, "start": 3140.4, "end": 3145.5200000000004, "text": " validations, and you need to have the server as the gatekeeper or whatever, right. So, you know,", "tokens": [50364, 291, 458, 11, 264, 3089, 300, 311, 32368, 23689, 11, 300, 291, 434, 406, 24996, 278, 512, 6423, 1252, 50696, 50696, 7363, 763, 11, 293, 291, 643, 281, 362, 264, 7154, 382, 264, 8539, 23083, 420, 2035, 11, 558, 13, 407, 11, 291, 458, 11, 50952, 50952, 291, 528, 300, 281, 312, 264, 4009, 295, 3494, 13, 407, 286, 767, 3094, 341, 1716, 293, 362, 668, 2433, 51304, 51304, 926, 365, 309, 689, 309, 4960, 2699, 76, 37645, 31828, 281, 718, 291, 6964, 257, 4583, 281, 2042, 33283, 12475, 281, 257, 51784, 51784], "temperature": 0.0, "avg_logprob": -0.11519299557334499, "compression_ratio": 1.5510204081632653, "no_caption_prob": 7.030829146970063e-05}, {"id": 482, "seek": 313376, "start": 3145.5200000000004, "end": 3152.5600000000004, "text": " you want that to be the source of truth. So I actually built this project and have been playing", "tokens": [50364, 291, 458, 11, 264, 3089, 300, 311, 32368, 23689, 11, 300, 291, 434, 406, 24996, 278, 512, 6423, 1252, 50696, 50696, 7363, 763, 11, 293, 291, 643, 281, 362, 264, 7154, 382, 264, 8539, 23083, 420, 2035, 11, 558, 13, 407, 11, 291, 458, 11, 50952, 50952, 291, 528, 300, 281, 312, 264, 4009, 295, 3494, 13, 407, 286, 767, 3094, 341, 1716, 293, 362, 668, 2433, 51304, 51304, 926, 365, 309, 689, 309, 4960, 2699, 76, 37645, 31828, 281, 718, 291, 6964, 257, 4583, 281, 2042, 33283, 12475, 281, 257, 51784, 51784], "temperature": 0.0, "avg_logprob": -0.11519299557334499, "compression_ratio": 1.5510204081632653, "no_caption_prob": 7.030829146970063e-05}, {"id": 483, "seek": 313376, "start": 3152.5600000000004, "end": 3162.1600000000003, "text": " around with it where it uses Elm TS JSON to let you define a layer to perform HTTP requests to a", "tokens": [50364, 291, 458, 11, 264, 3089, 300, 311, 32368, 23689, 11, 300, 291, 434, 406, 24996, 278, 512, 6423, 1252, 50696, 50696, 7363, 763, 11, 293, 291, 643, 281, 362, 264, 7154, 382, 264, 8539, 23083, 420, 2035, 11, 558, 13, 407, 11, 291, 458, 11, 50952, 50952, 291, 528, 300, 281, 312, 264, 4009, 295, 3494, 13, 407, 286, 767, 3094, 341, 1716, 293, 362, 668, 2433, 51304, 51304, 926, 365, 309, 689, 309, 4960, 2699, 76, 37645, 31828, 281, 718, 291, 6964, 257, 4583, 281, 2042, 33283, 12475, 281, 257, 51784, 51784], "temperature": 0.0, "avg_logprob": -0.11519299557334499, "compression_ratio": 1.5510204081632653, "no_caption_prob": 7.030829146970063e-05}, {"id": 484, "seek": 316216, "start": 3162.16, "end": 3165.92, "text": " serverless function. In this case, I've been doing it with Netlify because Netlify serverless", "tokens": [50364, 7154, 1832, 2445, 13, 682, 341, 1389, 11, 286, 600, 668, 884, 309, 365, 6188, 75, 2505, 570, 6188, 75, 2505, 7154, 1832, 50552, 50552, 6828, 366, 534, 1858, 13, 509, 362, 257, 10820, 300, 575, 257, 3840, 295, 5893, 33063, 7098, 300, 10725, 257, 50856, 50884, 2445, 1219, 41967, 11, 597, 11247, 6558, 3089, 2331, 420, 2035, 6558, 3089, 22117, 1772, 11, 51240, 51240, 293, 550, 257, 6798, 13, 400, 291, 458, 11, 2049, 291, 528, 281, 362, 300, 6798, 312, 31828, 6798, 2092, 420, 2035, 13, 51612, 51612], "temperature": 0.0, "avg_logprob": -0.13395290789396866, "compression_ratio": 1.6506550218340612, "no_caption_prob": 0.0001355045533273369}, {"id": 485, "seek": 316216, "start": 3165.92, "end": 3172.0, "text": " functions are really easy. You have a folder that has a bunch of dot JS files that export a", "tokens": [50364, 7154, 1832, 2445, 13, 682, 341, 1389, 11, 286, 600, 668, 884, 309, 365, 6188, 75, 2505, 570, 6188, 75, 2505, 7154, 1832, 50552, 50552, 6828, 366, 534, 1858, 13, 509, 362, 257, 10820, 300, 575, 257, 3840, 295, 5893, 33063, 7098, 300, 10725, 257, 50856, 50884, 2445, 1219, 41967, 11, 597, 11247, 6558, 3089, 2331, 420, 2035, 6558, 3089, 22117, 1772, 11, 51240, 51240, 293, 550, 257, 6798, 13, 400, 291, 458, 11, 2049, 291, 528, 281, 362, 300, 6798, 312, 31828, 6798, 2092, 420, 2035, 13, 51612, 51612], "temperature": 0.0, "avg_logprob": -0.13395290789396866, "compression_ratio": 1.6506550218340612, "no_caption_prob": 0.0001355045533273369}, {"id": 486, "seek": 316216, "start": 3172.56, "end": 3179.68, "text": " function called handler, which returns status code 200 or whatever status code comma body,", "tokens": [50364, 7154, 1832, 2445, 13, 682, 341, 1389, 11, 286, 600, 668, 884, 309, 365, 6188, 75, 2505, 570, 6188, 75, 2505, 7154, 1832, 50552, 50552, 6828, 366, 534, 1858, 13, 509, 362, 257, 10820, 300, 575, 257, 3840, 295, 5893, 33063, 7098, 300, 10725, 257, 50856, 50884, 2445, 1219, 41967, 11, 597, 11247, 6558, 3089, 2331, 420, 2035, 6558, 3089, 22117, 1772, 11, 51240, 51240, 293, 550, 257, 6798, 13, 400, 291, 458, 11, 2049, 291, 528, 281, 362, 300, 6798, 312, 31828, 6798, 2092, 420, 2035, 13, 51612, 51612], "temperature": 0.0, "avg_logprob": -0.13395290789396866, "compression_ratio": 1.6506550218340612, "no_caption_prob": 0.0001355045533273369}, {"id": 487, "seek": 316216, "start": 3179.68, "end": 3187.12, "text": " and then a string. And you know, often you want to have that string be JSON string fight or whatever.", "tokens": [50364, 7154, 1832, 2445, 13, 682, 341, 1389, 11, 286, 600, 668, 884, 309, 365, 6188, 75, 2505, 570, 6188, 75, 2505, 7154, 1832, 50552, 50552, 6828, 366, 534, 1858, 13, 509, 362, 257, 10820, 300, 575, 257, 3840, 295, 5893, 33063, 7098, 300, 10725, 257, 50856, 50884, 2445, 1219, 41967, 11, 597, 11247, 6558, 3089, 2331, 420, 2035, 6558, 3089, 22117, 1772, 11, 51240, 51240, 293, 550, 257, 6798, 13, 400, 291, 458, 11, 2049, 291, 528, 281, 362, 300, 6798, 312, 31828, 6798, 2092, 420, 2035, 13, 51612, 51612], "temperature": 0.0, "avg_logprob": -0.13395290789396866, "compression_ratio": 1.6506550218340612, "no_caption_prob": 0.0001355045533273369}, {"id": 488, "seek": 318712, "start": 3187.12, "end": 3194.08, "text": " So I built this layer that keep uses that type safe bridge so that you get Elm functions for", "tokens": [50364, 407, 286, 3094, 341, 4583, 300, 1066, 4960, 300, 2010, 3273, 7283, 370, 300, 291, 483, 2699, 76, 6828, 337, 50712, 50712, 1455, 257, 5308, 293, 4134, 13, 400, 309, 4960, 2699, 76, 37645, 31828, 281, 6786, 364, 2058, 19866, 337, 264, 5308, 309, 51020, 51020, 486, 4774, 13, 407, 291, 434, 294, 428, 7154, 1832, 2445, 3089, 11, 291, 458, 11, 264, 15576, 14237, 2010, 291, 603, 917, 493, 51312, 51312, 365, 300, 291, 603, 4774, 490, 2699, 76, 13, 400, 550, 309, 3255, 437, 2010, 291, 643, 281, 2845, 646, 294, 15576, 14237, 51632, 51632], "temperature": 0.0, "avg_logprob": -0.09332723328561494, "compression_ratio": 1.6810344827586208, "no_caption_prob": 0.000160903568030335}, {"id": 489, "seek": 318712, "start": 3194.08, "end": 3200.24, "text": " making a request and response. And it uses Elm TS JSON to describe an encoder for the request it", "tokens": [50364, 407, 286, 3094, 341, 4583, 300, 1066, 4960, 300, 2010, 3273, 7283, 370, 300, 291, 483, 2699, 76, 6828, 337, 50712, 50712, 1455, 257, 5308, 293, 4134, 13, 400, 309, 4960, 2699, 76, 37645, 31828, 281, 6786, 364, 2058, 19866, 337, 264, 5308, 309, 51020, 51020, 486, 4774, 13, 407, 291, 434, 294, 428, 7154, 1832, 2445, 3089, 11, 291, 458, 11, 264, 15576, 14237, 2010, 291, 603, 917, 493, 51312, 51312, 365, 300, 291, 603, 4774, 490, 2699, 76, 13, 400, 550, 309, 3255, 437, 2010, 291, 643, 281, 2845, 646, 294, 15576, 14237, 51632, 51632], "temperature": 0.0, "avg_logprob": -0.09332723328561494, "compression_ratio": 1.6810344827586208, "no_caption_prob": 0.000160903568030335}, {"id": 490, "seek": 318712, "start": 3200.24, "end": 3206.08, "text": " will receive. So you're in your serverless function code, you know, the TypeScript type you'll end up", "tokens": [50364, 407, 286, 3094, 341, 4583, 300, 1066, 4960, 300, 2010, 3273, 7283, 370, 300, 291, 483, 2699, 76, 6828, 337, 50712, 50712, 1455, 257, 5308, 293, 4134, 13, 400, 309, 4960, 2699, 76, 37645, 31828, 281, 6786, 364, 2058, 19866, 337, 264, 5308, 309, 51020, 51020, 486, 4774, 13, 407, 291, 434, 294, 428, 7154, 1832, 2445, 3089, 11, 291, 458, 11, 264, 15576, 14237, 2010, 291, 603, 917, 493, 51312, 51312, 365, 300, 291, 603, 4774, 490, 2699, 76, 13, 400, 550, 309, 3255, 437, 2010, 291, 643, 281, 2845, 646, 294, 15576, 14237, 51632, 51632], "temperature": 0.0, "avg_logprob": -0.09332723328561494, "compression_ratio": 1.6810344827586208, "no_caption_prob": 0.000160903568030335}, {"id": 491, "seek": 318712, "start": 3206.08, "end": 3212.48, "text": " with that you'll receive from Elm. And then it knows what type you need to send back in TypeScript", "tokens": [50364, 407, 286, 3094, 341, 4583, 300, 1066, 4960, 300, 2010, 3273, 7283, 370, 300, 291, 483, 2699, 76, 6828, 337, 50712, 50712, 1455, 257, 5308, 293, 4134, 13, 400, 309, 4960, 2699, 76, 37645, 31828, 281, 6786, 364, 2058, 19866, 337, 264, 5308, 309, 51020, 51020, 486, 4774, 13, 407, 291, 434, 294, 428, 7154, 1832, 2445, 3089, 11, 291, 458, 11, 264, 15576, 14237, 2010, 291, 603, 917, 493, 51312, 51312, 365, 300, 291, 603, 4774, 490, 2699, 76, 13, 400, 550, 309, 3255, 437, 2010, 291, 643, 281, 2845, 646, 294, 15576, 14237, 51632, 51632], "temperature": 0.0, "avg_logprob": -0.09332723328561494, "compression_ratio": 1.6810344827586208, "no_caption_prob": 0.000160903568030335}, {"id": 492, "seek": 321248, "start": 3212.48, "end": 3218.08, "text": " based on the TS JSON decoder that you write. And if you don't send the right type, TypeScript will", "tokens": [50364, 2361, 322, 264, 37645, 31828, 979, 19866, 300, 291, 2464, 13, 400, 498, 291, 500, 380, 2845, 264, 558, 2010, 11, 15576, 14237, 486, 50644, 50644, 20525, 412, 291, 13, 407, 286, 370, 286, 1071, 551, 286, 3094, 365, 341, 11, 370, 264, 2699, 76, 37645, 31828, 7372, 575, 257, 2445, 51072, 51072, 300, 4045, 291, 281, 483, 264, 264, 15576, 14237, 2010, 13, 467, 611, 575, 257, 2445, 300, 4045, 291, 281, 483, 264, 51352, 51352, 31828, 34078, 2010, 13, 400, 370, 31828, 34078, 307, 445, 1228, 31828, 4190, 281, 6786, 31828, 4190, 13, 1119, 300, 3657, 30, 51736, 51796], "temperature": 0.0, "avg_logprob": -0.09579106673453618, "compression_ratio": 1.7963800904977376, "no_caption_prob": 0.0002570502401795238}, {"id": 493, "seek": 321248, "start": 3218.08, "end": 3226.64, "text": " yell at you. So I so I another thing I built with this, so the Elm TS JSON package has a function", "tokens": [50364, 2361, 322, 264, 37645, 31828, 979, 19866, 300, 291, 2464, 13, 400, 498, 291, 500, 380, 2845, 264, 558, 2010, 11, 15576, 14237, 486, 50644, 50644, 20525, 412, 291, 13, 407, 286, 370, 286, 1071, 551, 286, 3094, 365, 341, 11, 370, 264, 2699, 76, 37645, 31828, 7372, 575, 257, 2445, 51072, 51072, 300, 4045, 291, 281, 483, 264, 264, 15576, 14237, 2010, 13, 467, 611, 575, 257, 2445, 300, 4045, 291, 281, 483, 264, 51352, 51352, 31828, 34078, 2010, 13, 400, 370, 31828, 34078, 307, 445, 1228, 31828, 4190, 281, 6786, 31828, 4190, 13, 1119, 300, 3657, 30, 51736, 51796], "temperature": 0.0, "avg_logprob": -0.09579106673453618, "compression_ratio": 1.7963800904977376, "no_caption_prob": 0.0002570502401795238}, {"id": 494, "seek": 321248, "start": 3226.64, "end": 3232.2400000000002, "text": " that allows you to get the the TypeScript type. It also has a function that allows you to get the", "tokens": [50364, 2361, 322, 264, 37645, 31828, 979, 19866, 300, 291, 2464, 13, 400, 498, 291, 500, 380, 2845, 264, 558, 2010, 11, 15576, 14237, 486, 50644, 50644, 20525, 412, 291, 13, 407, 286, 370, 286, 1071, 551, 286, 3094, 365, 341, 11, 370, 264, 2699, 76, 37645, 31828, 7372, 575, 257, 2445, 51072, 51072, 300, 4045, 291, 281, 483, 264, 264, 15576, 14237, 2010, 13, 467, 611, 575, 257, 2445, 300, 4045, 291, 281, 483, 264, 51352, 51352, 31828, 34078, 2010, 13, 400, 370, 31828, 34078, 307, 445, 1228, 31828, 4190, 281, 6786, 31828, 4190, 13, 1119, 300, 3657, 30, 51736, 51796], "temperature": 0.0, "avg_logprob": -0.09579106673453618, "compression_ratio": 1.7963800904977376, "no_caption_prob": 0.0002570502401795238}, {"id": 495, "seek": 321248, "start": 3232.2400000000002, "end": 3239.92, "text": " JSON schema type. And so JSON schema is just using JSON values to describe JSON values. Is that weird?", "tokens": [50364, 2361, 322, 264, 37645, 31828, 979, 19866, 300, 291, 2464, 13, 400, 498, 291, 500, 380, 2845, 264, 558, 2010, 11, 15576, 14237, 486, 50644, 50644, 20525, 412, 291, 13, 407, 286, 370, 286, 1071, 551, 286, 3094, 365, 341, 11, 370, 264, 2699, 76, 37645, 31828, 7372, 575, 257, 2445, 51072, 51072, 300, 4045, 291, 281, 483, 264, 264, 15576, 14237, 2010, 13, 467, 611, 575, 257, 2445, 300, 4045, 291, 281, 483, 264, 51352, 51352, 31828, 34078, 2010, 13, 400, 370, 31828, 34078, 307, 445, 1228, 31828, 4190, 281, 6786, 31828, 4190, 13, 1119, 300, 3657, 30, 51736, 51796], "temperature": 0.0, "avg_logprob": -0.09579106673453618, "compression_ratio": 1.7963800904977376, "no_caption_prob": 0.0002570502401795238}, {"id": 496, "seek": 323992, "start": 3239.92, "end": 3248.16, "text": " It's JSON that describes the shape and is analogous to like using TypeScript to describe the shape of", "tokens": [50364, 467, 311, 31828, 300, 15626, 264, 3909, 293, 307, 16660, 563, 281, 411, 1228, 15576, 14237, 281, 6786, 264, 3909, 295, 50776, 50776, 31828, 3993, 264, 7877, 307, 406, 257, 15576, 14237, 6798, 13, 467, 311, 257, 31828, 2158, 294, 341, 7877, 13, 51060, 51060, 583, 775, 309, 574, 411, 15576, 14237, 420, 307, 309, 18587, 30, 51256, 51256, 286, 914, 11, 309, 311, 10743, 2753, 570, 309, 311, 31828, 294, 257, 1729, 3877, 13, 467, 311, 411, 406, 264, 1151, 281, 51544, 51544, 1011, 21561, 13, 583, 300, 311, 264, 1627, 551, 11, 558, 30, 1119, 291, 393, 764, 46593, 281, 360, 341, 13, 583, 264, 534, 1627, 551, 51780, 51780], "temperature": 0.0, "avg_logprob": -0.16528111173395524, "compression_ratio": 1.736, "no_caption_prob": 0.00022340162831824273}, {"id": 497, "seek": 323992, "start": 3248.16, "end": 3253.84, "text": " JSON except the format is not a TypeScript string. It's a JSON value in this format.", "tokens": [50364, 467, 311, 31828, 300, 15626, 264, 3909, 293, 307, 16660, 563, 281, 411, 1228, 15576, 14237, 281, 6786, 264, 3909, 295, 50776, 50776, 31828, 3993, 264, 7877, 307, 406, 257, 15576, 14237, 6798, 13, 467, 311, 257, 31828, 2158, 294, 341, 7877, 13, 51060, 51060, 583, 775, 309, 574, 411, 15576, 14237, 420, 307, 309, 18587, 30, 51256, 51256, 286, 914, 11, 309, 311, 10743, 2753, 570, 309, 311, 31828, 294, 257, 1729, 3877, 13, 467, 311, 411, 406, 264, 1151, 281, 51544, 51544, 1011, 21561, 13, 583, 300, 311, 264, 1627, 551, 11, 558, 30, 1119, 291, 393, 764, 46593, 281, 360, 341, 13, 583, 264, 534, 1627, 551, 51780, 51780], "temperature": 0.0, "avg_logprob": -0.16528111173395524, "compression_ratio": 1.736, "no_caption_prob": 0.00022340162831824273}, {"id": 498, "seek": 323992, "start": 3253.84, "end": 3257.76, "text": " But does it look like TypeScript or is it simpler?", "tokens": [50364, 467, 311, 31828, 300, 15626, 264, 3909, 293, 307, 16660, 563, 281, 411, 1228, 15576, 14237, 281, 6786, 264, 3909, 295, 50776, 50776, 31828, 3993, 264, 7877, 307, 406, 257, 15576, 14237, 6798, 13, 467, 311, 257, 31828, 2158, 294, 341, 7877, 13, 51060, 51060, 583, 775, 309, 574, 411, 15576, 14237, 420, 307, 309, 18587, 30, 51256, 51256, 286, 914, 11, 309, 311, 10743, 2753, 570, 309, 311, 31828, 294, 257, 1729, 3877, 13, 467, 311, 411, 406, 264, 1151, 281, 51544, 51544, 1011, 21561, 13, 583, 300, 311, 264, 1627, 551, 11, 558, 30, 1119, 291, 393, 764, 46593, 281, 360, 341, 13, 583, 264, 534, 1627, 551, 51780, 51780], "temperature": 0.0, "avg_logprob": -0.16528111173395524, "compression_ratio": 1.736, "no_caption_prob": 0.00022340162831824273}, {"id": 499, "seek": 323992, "start": 3257.76, "end": 3263.52, "text": " I mean, it's uglier because it's JSON in a particular structure. It's like not the best to", "tokens": [50364, 467, 311, 31828, 300, 15626, 264, 3909, 293, 307, 16660, 563, 281, 411, 1228, 15576, 14237, 281, 6786, 264, 3909, 295, 50776, 50776, 31828, 3993, 264, 7877, 307, 406, 257, 15576, 14237, 6798, 13, 467, 311, 257, 31828, 2158, 294, 341, 7877, 13, 51060, 51060, 583, 775, 309, 574, 411, 15576, 14237, 420, 307, 309, 18587, 30, 51256, 51256, 286, 914, 11, 309, 311, 10743, 2753, 570, 309, 311, 31828, 294, 257, 1729, 3877, 13, 467, 311, 411, 406, 264, 1151, 281, 51544, 51544, 1011, 21561, 13, 583, 300, 311, 264, 1627, 551, 11, 558, 30, 1119, 291, 393, 764, 46593, 281, 360, 341, 13, 583, 264, 534, 1627, 551, 51780, 51780], "temperature": 0.0, "avg_logprob": -0.16528111173395524, "compression_ratio": 1.736, "no_caption_prob": 0.00022340162831824273}, {"id": 500, "seek": 323992, "start": 3263.52, "end": 3268.2400000000002, "text": " handwrite. But that's the cool thing, right? Is you can use tooling to do this. But the really cool thing", "tokens": [50364, 467, 311, 31828, 300, 15626, 264, 3909, 293, 307, 16660, 563, 281, 411, 1228, 15576, 14237, 281, 6786, 264, 3909, 295, 50776, 50776, 31828, 3993, 264, 7877, 307, 406, 257, 15576, 14237, 6798, 13, 467, 311, 257, 31828, 2158, 294, 341, 7877, 13, 51060, 51060, 583, 775, 309, 574, 411, 15576, 14237, 420, 307, 309, 18587, 30, 51256, 51256, 286, 914, 11, 309, 311, 10743, 2753, 570, 309, 311, 31828, 294, 257, 1729, 3877, 13, 467, 311, 411, 406, 264, 1151, 281, 51544, 51544, 1011, 21561, 13, 583, 300, 311, 264, 1627, 551, 11, 558, 30, 1119, 291, 393, 764, 46593, 281, 360, 341, 13, 583, 264, 534, 1627, 551, 51780, 51780], "temperature": 0.0, "avg_logprob": -0.16528111173395524, "compression_ratio": 1.736, "no_caption_prob": 0.00022340162831824273}, {"id": 501, "seek": 326824, "start": 3268.24, "end": 3276.56, "text": " is that I use in this sort of alpha tool that I built that I haven't publicized yet.", "tokens": [50364, 307, 300, 286, 764, 294, 341, 1333, 295, 8961, 2290, 300, 286, 3094, 300, 286, 2378, 380, 1908, 1602, 1939, 13, 50780, 50780, 708, 2314, 307, 309, 4960, 264, 31828, 34078, 4190, 295, 264, 2058, 378, 433, 293, 979, 378, 433, 281, 24163, 293, 29562, 51204, 51204, 264, 7154, 15743, 570, 291, 500, 380, 528, 281, 3241, 7154, 15743, 13, 467, 727, 312, 257, 3825, 1154, 51452, 51452, 281, 2845, 1412, 300, 291, 994, 380, 2066, 281, 2845, 293, 281, 4774, 1412, 300, 311, 406, 264, 3467, 291, 5176, 51788, 51788], "temperature": 0.0, "avg_logprob": -0.07656129201253255, "compression_ratio": 1.7058823529411764, "no_caption_prob": 3.373627259861678e-05}, {"id": 502, "seek": 326824, "start": 3276.56, "end": 3285.04, "text": " What happens is it uses the JSON schema values of the encoders and decoders to scrub and validate", "tokens": [50364, 307, 300, 286, 764, 294, 341, 1333, 295, 8961, 2290, 300, 286, 3094, 300, 286, 2378, 380, 1908, 1602, 1939, 13, 50780, 50780, 708, 2314, 307, 309, 4960, 264, 31828, 34078, 4190, 295, 264, 2058, 378, 433, 293, 979, 378, 433, 281, 24163, 293, 29562, 51204, 51204, 264, 7154, 15743, 570, 291, 500, 380, 528, 281, 3241, 7154, 15743, 13, 467, 727, 312, 257, 3825, 1154, 51452, 51452, 281, 2845, 1412, 300, 291, 994, 380, 2066, 281, 2845, 293, 281, 4774, 1412, 300, 311, 406, 264, 3467, 291, 5176, 51788, 51788], "temperature": 0.0, "avg_logprob": -0.07656129201253255, "compression_ratio": 1.7058823529411764, "no_caption_prob": 3.373627259861678e-05}, {"id": 503, "seek": 326824, "start": 3285.04, "end": 3290.0, "text": " the server inputs because you don't want to accept server inputs. It could be a security problem", "tokens": [50364, 307, 300, 286, 764, 294, 341, 1333, 295, 8961, 2290, 300, 286, 3094, 300, 286, 2378, 380, 1908, 1602, 1939, 13, 50780, 50780, 708, 2314, 307, 309, 4960, 264, 31828, 34078, 4190, 295, 264, 2058, 378, 433, 293, 979, 378, 433, 281, 24163, 293, 29562, 51204, 51204, 264, 7154, 15743, 570, 291, 500, 380, 528, 281, 3241, 7154, 15743, 13, 467, 727, 312, 257, 3825, 1154, 51452, 51452, 281, 2845, 1412, 300, 291, 994, 380, 2066, 281, 2845, 293, 281, 4774, 1412, 300, 311, 406, 264, 3467, 291, 5176, 51788, 51788], "temperature": 0.0, "avg_logprob": -0.07656129201253255, "compression_ratio": 1.7058823529411764, "no_caption_prob": 3.373627259861678e-05}, {"id": 504, "seek": 326824, "start": 3290.0, "end": 3296.72, "text": " to send data that you didn't expect to send and to receive data that's not the types you expected", "tokens": [50364, 307, 300, 286, 764, 294, 341, 1333, 295, 8961, 2290, 300, 286, 3094, 300, 286, 2378, 380, 1908, 1602, 1939, 13, 50780, 50780, 708, 2314, 307, 309, 4960, 264, 31828, 34078, 4190, 295, 264, 2058, 378, 433, 293, 979, 378, 433, 281, 24163, 293, 29562, 51204, 51204, 264, 7154, 15743, 570, 291, 500, 380, 528, 281, 3241, 7154, 15743, 13, 467, 727, 312, 257, 3825, 1154, 51452, 51452, 281, 2845, 1412, 300, 291, 994, 380, 2066, 281, 2845, 293, 281, 4774, 1412, 300, 311, 406, 264, 3467, 291, 5176, 51788, 51788], "temperature": 0.0, "avg_logprob": -0.07656129201253255, "compression_ratio": 1.7058823529411764, "no_caption_prob": 3.373627259861678e-05}, {"id": 505, "seek": 329672, "start": 3296.72, "end": 3301.6, "text": " to receive. So it's not enough to just have TypeScript types that sort of tell you what the", "tokens": [50364, 281, 4774, 13, 407, 309, 311, 406, 1547, 281, 445, 362, 15576, 14237, 3467, 300, 1333, 295, 980, 291, 437, 264, 50608, 50608, 3467, 366, 570, 291, 528, 281, 767, 5586, 300, 729, 3467, 366, 3006, 13, 50860, 50860, 407, 291, 434, 7750, 364, 2058, 19866, 2158, 30, 51012, 51040, 865, 13, 51052, 51088, 583, 264, 4497, 7909, 300, 366, 406, 4818, 366, 7261, 490, 264, 30918, 13, 51360, 51360, 7587, 13, 3950, 486, 483, 33221, 484, 13, 400, 498, 291, 584, 291, 434, 7750, 257, 6798, 293, 291, 2845, 257, 1329, 51604, 51604], "temperature": 0.0, "avg_logprob": -0.1687679886817932, "compression_ratio": 1.6452991452991452, "no_caption_prob": 5.738653999287635e-05}, {"id": 506, "seek": 329672, "start": 3301.6, "end": 3306.64, "text": " types are because you want to actually ensure that those types are correct.", "tokens": [50364, 281, 4774, 13, 407, 309, 311, 406, 1547, 281, 445, 362, 15576, 14237, 3467, 300, 1333, 295, 980, 291, 437, 264, 50608, 50608, 3467, 366, 570, 291, 528, 281, 767, 5586, 300, 729, 3467, 366, 3006, 13, 50860, 50860, 407, 291, 434, 7750, 364, 2058, 19866, 2158, 30, 51012, 51040, 865, 13, 51052, 51088, 583, 264, 4497, 7909, 300, 366, 406, 4818, 366, 7261, 490, 264, 30918, 13, 51360, 51360, 7587, 13, 3950, 486, 483, 33221, 484, 13, 400, 498, 291, 584, 291, 434, 7750, 257, 6798, 293, 291, 2845, 257, 1329, 51604, 51604], "temperature": 0.0, "avg_logprob": -0.1687679886817932, "compression_ratio": 1.6452991452991452, "no_caption_prob": 5.738653999287635e-05}, {"id": 507, "seek": 329672, "start": 3306.64, "end": 3309.68, "text": " So you're sending an encoder value?", "tokens": [50364, 281, 4774, 13, 407, 309, 311, 406, 1547, 281, 445, 362, 15576, 14237, 3467, 300, 1333, 295, 980, 291, 437, 264, 50608, 50608, 3467, 366, 570, 291, 528, 281, 767, 5586, 300, 729, 3467, 366, 3006, 13, 50860, 50860, 407, 291, 434, 7750, 364, 2058, 19866, 2158, 30, 51012, 51040, 865, 13, 51052, 51088, 583, 264, 4497, 7909, 300, 366, 406, 4818, 366, 7261, 490, 264, 30918, 13, 51360, 51360, 7587, 13, 3950, 486, 483, 33221, 484, 13, 400, 498, 291, 584, 291, 434, 7750, 257, 6798, 293, 291, 2845, 257, 1329, 51604, 51604], "temperature": 0.0, "avg_logprob": -0.1687679886817932, "compression_ratio": 1.6452991452991452, "no_caption_prob": 5.738653999287635e-05}, {"id": 508, "seek": 329672, "start": 3310.24, "end": 3310.48, "text": " Yeah.", "tokens": [50364, 281, 4774, 13, 407, 309, 311, 406, 1547, 281, 445, 362, 15576, 14237, 3467, 300, 1333, 295, 980, 291, 437, 264, 50608, 50608, 3467, 366, 570, 291, 528, 281, 767, 5586, 300, 729, 3467, 366, 3006, 13, 50860, 50860, 407, 291, 434, 7750, 364, 2058, 19866, 2158, 30, 51012, 51040, 865, 13, 51052, 51088, 583, 264, 4497, 7909, 300, 366, 406, 4818, 366, 7261, 490, 264, 30918, 13, 51360, 51360, 7587, 13, 3950, 486, 483, 33221, 484, 13, 400, 498, 291, 584, 291, 434, 7750, 257, 6798, 293, 291, 2845, 257, 1329, 51604, 51604], "temperature": 0.0, "avg_logprob": -0.1687679886817932, "compression_ratio": 1.6452991452991452, "no_caption_prob": 5.738653999287635e-05}, {"id": 509, "seek": 329672, "start": 3311.2, "end": 3316.64, "text": " But the additional fields that are not necessary are removed from the payload.", "tokens": [50364, 281, 4774, 13, 407, 309, 311, 406, 1547, 281, 445, 362, 15576, 14237, 3467, 300, 1333, 295, 980, 291, 437, 264, 50608, 50608, 3467, 366, 570, 291, 528, 281, 767, 5586, 300, 729, 3467, 366, 3006, 13, 50860, 50860, 407, 291, 434, 7750, 364, 2058, 19866, 2158, 30, 51012, 51040, 865, 13, 51052, 51088, 583, 264, 4497, 7909, 300, 366, 406, 4818, 366, 7261, 490, 264, 30918, 13, 51360, 51360, 7587, 13, 3950, 486, 483, 33221, 484, 13, 400, 498, 291, 584, 291, 434, 7750, 257, 6798, 293, 291, 2845, 257, 1329, 51604, 51604], "temperature": 0.0, "avg_logprob": -0.1687679886817932, "compression_ratio": 1.6452991452991452, "no_caption_prob": 5.738653999287635e-05}, {"id": 510, "seek": 329672, "start": 3316.64, "end": 3321.52, "text": " Exactly. Those will get stripped out. And if you say you're sending a string and you send a list", "tokens": [50364, 281, 4774, 13, 407, 309, 311, 406, 1547, 281, 445, 362, 15576, 14237, 3467, 300, 1333, 295, 980, 291, 437, 264, 50608, 50608, 3467, 366, 570, 291, 528, 281, 767, 5586, 300, 729, 3467, 366, 3006, 13, 50860, 50860, 407, 291, 434, 7750, 364, 2058, 19866, 2158, 30, 51012, 51040, 865, 13, 51052, 51088, 583, 264, 4497, 7909, 300, 366, 406, 4818, 366, 7261, 490, 264, 30918, 13, 51360, 51360, 7587, 13, 3950, 486, 483, 33221, 484, 13, 400, 498, 291, 584, 291, 434, 7750, 257, 6798, 293, 291, 2845, 257, 1329, 51604, 51604], "temperature": 0.0, "avg_logprob": -0.1687679886817932, "compression_ratio": 1.6452991452991452, "no_caption_prob": 5.738653999287635e-05}, {"id": 511, "seek": 332152, "start": 3321.52, "end": 3327.84, "text": " or vice versa, it will give an error instead of calling that serverless function.", "tokens": [50364, 420, 11964, 25650, 11, 309, 486, 976, 364, 6713, 2602, 295, 5141, 300, 7154, 1832, 2445, 13, 50680, 50776, 400, 264, 534, 1627, 551, 307, 264, 3089, 281, 360, 300, 307, 588, 13206, 13, 467, 311, 445, 1333, 295, 257, 1481, 51092, 51092, 27520, 337, 341, 300, 12451, 1660, 300, 6532, 13, 407, 300, 311, 1071, 2290, 286, 600, 668, 1364, 322, 13, 51364, 51364, 583, 445, 264, 2674, 11, 286, 3094, 264, 37645, 41, 10388, 7372, 337, 46593, 13, 407, 300, 311, 1333, 295, 264, 935, 307, 300, 51760, 51760], "temperature": 0.0, "avg_logprob": -0.12342098195065734, "compression_ratio": 1.6088888888888888, "no_caption_prob": 0.0001634525542613119}, {"id": 512, "seek": 332152, "start": 3329.7599999999998, "end": 3336.08, "text": " And the really cool thing is the code to do that is very minimal. It's just sort of a nice", "tokens": [50364, 420, 11964, 25650, 11, 309, 486, 976, 364, 6713, 2602, 295, 5141, 300, 7154, 1832, 2445, 13, 50680, 50776, 400, 264, 534, 1627, 551, 307, 264, 3089, 281, 360, 300, 307, 588, 13206, 13, 467, 311, 445, 1333, 295, 257, 1481, 51092, 51092, 27520, 337, 341, 300, 12451, 1660, 300, 6532, 13, 407, 300, 311, 1071, 2290, 286, 600, 668, 1364, 322, 13, 51364, 51364, 583, 445, 264, 2674, 11, 286, 3094, 264, 37645, 41, 10388, 7372, 337, 46593, 13, 407, 300, 311, 1333, 295, 264, 935, 307, 300, 51760, 51760], "temperature": 0.0, "avg_logprob": -0.12342098195065734, "compression_ratio": 1.6088888888888888, "no_caption_prob": 0.0001634525542613119}, {"id": 513, "seek": 332152, "start": 3336.08, "end": 3341.52, "text": " wiring for this that leverages that technique. So that's another tool I've been working on.", "tokens": [50364, 420, 11964, 25650, 11, 309, 486, 976, 364, 6713, 2602, 295, 5141, 300, 7154, 1832, 2445, 13, 50680, 50776, 400, 264, 534, 1627, 551, 307, 264, 3089, 281, 360, 300, 307, 588, 13206, 13, 467, 311, 445, 1333, 295, 257, 1481, 51092, 51092, 27520, 337, 341, 300, 12451, 1660, 300, 6532, 13, 407, 300, 311, 1071, 2290, 286, 600, 668, 1364, 322, 13, 51364, 51364, 583, 445, 264, 2674, 11, 286, 3094, 264, 37645, 41, 10388, 7372, 337, 46593, 13, 407, 300, 311, 1333, 295, 264, 935, 307, 300, 51760, 51760], "temperature": 0.0, "avg_logprob": -0.12342098195065734, "compression_ratio": 1.6088888888888888, "no_caption_prob": 0.0001634525542613119}, {"id": 514, "seek": 332152, "start": 3341.52, "end": 3349.44, "text": " But just the general, I built the TSJSON package for tooling. So that's sort of the point is that", "tokens": [50364, 420, 11964, 25650, 11, 309, 486, 976, 364, 6713, 2602, 295, 5141, 300, 7154, 1832, 2445, 13, 50680, 50776, 400, 264, 534, 1627, 551, 307, 264, 3089, 281, 360, 300, 307, 588, 13206, 13, 467, 311, 445, 1333, 295, 257, 1481, 51092, 51092, 27520, 337, 341, 300, 12451, 1660, 300, 6532, 13, 407, 300, 311, 1071, 2290, 286, 600, 668, 1364, 322, 13, 51364, 51364, 583, 445, 264, 2674, 11, 286, 3094, 264, 37645, 41, 10388, 7372, 337, 46593, 13, 407, 300, 311, 1333, 295, 264, 935, 307, 300, 51760, 51760], "temperature": 0.0, "avg_logprob": -0.12342098195065734, "compression_ratio": 1.6088888888888888, "no_caption_prob": 0.0001634525542613119}, {"id": 515, "seek": 334944, "start": 3349.44, "end": 3353.28, "text": " it gives tooling a very simple way to sort of introspect the types.", "tokens": [50364, 309, 2709, 46593, 257, 588, 2199, 636, 281, 1333, 295, 560, 28713, 264, 3467, 13, 50556, 50556, 42109, 13, 286, 478, 6359, 11, 576, 291, 764, 2699, 76, 37645, 41, 10388, 2602, 295, 2699, 76, 31828, 337, 1340, 30, 50856, 50856, 1436, 309, 393, 360, 264, 912, 551, 11, 457, 309, 393, 611, 360, 544, 13, 51052, 51052, 865, 13, 286, 576, 1391, 2235, 309, 294, 382, 2978, 13, 407, 286, 390, 2891, 281, 764, 309, 365, 2699, 76, 430, 1660, 833, 51480, 51480, 264, 13376, 570, 2699, 76, 430, 1660, 575, 257, 3143, 1230, 295, 18160, 300, 286, 764, 281, 483, 19616, 18632, 293, 1589, 51852, 51852], "temperature": 0.0, "avg_logprob": -0.10103429447520863, "compression_ratio": 1.5810276679841897, "no_caption_prob": 3.944166383007541e-05}, {"id": 516, "seek": 334944, "start": 3353.28, "end": 3359.28, "text": " Gotcha. I'm wondering, would you use Elm TSJSON instead of Elm JSON for anything?", "tokens": [50364, 309, 2709, 46593, 257, 588, 2199, 636, 281, 1333, 295, 560, 28713, 264, 3467, 13, 50556, 50556, 42109, 13, 286, 478, 6359, 11, 576, 291, 764, 2699, 76, 37645, 41, 10388, 2602, 295, 2699, 76, 31828, 337, 1340, 30, 50856, 50856, 1436, 309, 393, 360, 264, 912, 551, 11, 457, 309, 393, 611, 360, 544, 13, 51052, 51052, 865, 13, 286, 576, 1391, 2235, 309, 294, 382, 2978, 13, 407, 286, 390, 2891, 281, 764, 309, 365, 2699, 76, 430, 1660, 833, 51480, 51480, 264, 13376, 570, 2699, 76, 430, 1660, 575, 257, 3143, 1230, 295, 18160, 300, 286, 764, 281, 483, 19616, 18632, 293, 1589, 51852, 51852], "temperature": 0.0, "avg_logprob": -0.10103429447520863, "compression_ratio": 1.5810276679841897, "no_caption_prob": 3.944166383007541e-05}, {"id": 517, "seek": 334944, "start": 3359.28, "end": 3363.2000000000003, "text": " Because it can do the same thing, but it can also do more.", "tokens": [50364, 309, 2709, 46593, 257, 588, 2199, 636, 281, 1333, 295, 560, 28713, 264, 3467, 13, 50556, 50556, 42109, 13, 286, 478, 6359, 11, 576, 291, 764, 2699, 76, 37645, 41, 10388, 2602, 295, 2699, 76, 31828, 337, 1340, 30, 50856, 50856, 1436, 309, 393, 360, 264, 912, 551, 11, 457, 309, 393, 611, 360, 544, 13, 51052, 51052, 865, 13, 286, 576, 1391, 2235, 309, 294, 382, 2978, 13, 407, 286, 390, 2891, 281, 764, 309, 365, 2699, 76, 430, 1660, 833, 51480, 51480, 264, 13376, 570, 2699, 76, 430, 1660, 575, 257, 3143, 1230, 295, 18160, 300, 286, 764, 281, 483, 19616, 18632, 293, 1589, 51852, 51852], "temperature": 0.0, "avg_logprob": -0.10103429447520863, "compression_ratio": 1.5810276679841897, "no_caption_prob": 3.944166383007541e-05}, {"id": 518, "seek": 334944, "start": 3363.2000000000003, "end": 3371.76, "text": " Yeah. I would probably pull it in as needed. So I was starting to use it with Elm Pages under", "tokens": [50364, 309, 2709, 46593, 257, 588, 2199, 636, 281, 1333, 295, 560, 28713, 264, 3467, 13, 50556, 50556, 42109, 13, 286, 478, 6359, 11, 576, 291, 764, 2699, 76, 37645, 41, 10388, 2602, 295, 2699, 76, 31828, 337, 1340, 30, 50856, 50856, 1436, 309, 393, 360, 264, 912, 551, 11, 457, 309, 393, 611, 360, 544, 13, 51052, 51052, 865, 13, 286, 576, 1391, 2235, 309, 294, 382, 2978, 13, 407, 286, 390, 2891, 281, 764, 309, 365, 2699, 76, 430, 1660, 833, 51480, 51480, 264, 13376, 570, 2699, 76, 430, 1660, 575, 257, 3143, 1230, 295, 18160, 300, 286, 764, 281, 483, 19616, 18632, 293, 1589, 51852, 51852], "temperature": 0.0, "avg_logprob": -0.10103429447520863, "compression_ratio": 1.5810276679841897, "no_caption_prob": 3.944166383007541e-05}, {"id": 519, "seek": 334944, "start": 3371.76, "end": 3379.2000000000003, "text": " the hood because Elm Pages has a fair number of ports that I use to get meta tags and information", "tokens": [50364, 309, 2709, 46593, 257, 588, 2199, 636, 281, 1333, 295, 560, 28713, 264, 3467, 13, 50556, 50556, 42109, 13, 286, 478, 6359, 11, 576, 291, 764, 2699, 76, 37645, 41, 10388, 2602, 295, 2699, 76, 31828, 337, 1340, 30, 50856, 50856, 1436, 309, 393, 360, 264, 912, 551, 11, 457, 309, 393, 611, 360, 544, 13, 51052, 51052, 865, 13, 286, 576, 1391, 2235, 309, 294, 382, 2978, 13, 407, 286, 390, 2891, 281, 764, 309, 365, 2699, 76, 430, 1660, 833, 51480, 51480, 264, 13376, 570, 2699, 76, 430, 1660, 575, 257, 3143, 1230, 295, 18160, 300, 286, 764, 281, 483, 19616, 18632, 293, 1589, 51852, 51852], "temperature": 0.0, "avg_logprob": -0.10103429447520863, "compression_ratio": 1.5810276679841897, "no_caption_prob": 3.944166383007541e-05}, {"id": 520, "seek": 337920, "start": 3379.2, "end": 3386.08, "text": " from the application and then generate the HTML for that. And so I was starting to convert my", "tokens": [50364, 490, 264, 3861, 293, 550, 8460, 264, 17995, 337, 300, 13, 400, 370, 286, 390, 2891, 281, 7620, 452, 50708, 50708, 979, 378, 433, 293, 2058, 378, 433, 281, 764, 2699, 76, 37645, 5751, 404, 293, 2699, 76, 37645, 41, 10388, 13, 400, 309, 1985, 9594, 570, 498, 291, 51060, 51060, 643, 257, 3890, 31828, 2058, 19866, 420, 257, 979, 19866, 11, 291, 393, 445, 1261, 428, 37645, 41, 10388, 472, 666, 300, 13, 5135, 11, 51472, 51472, 472, 551, 286, 1409, 884, 456, 390, 286, 1409, 281, 1322, 11, 309, 311, 406, 1596, 1919, 281, 312, 6572, 11, 51748, 51748], "temperature": 0.0, "avg_logprob": -0.07687780695054137, "compression_ratio": 1.6127659574468085, "no_caption_prob": 9.313731425208971e-05}, {"id": 521, "seek": 337920, "start": 3386.08, "end": 3393.12, "text": " decoders and encoders to use Elm TS Interop and Elm TSJSON. And it works nicely because if you", "tokens": [50364, 490, 264, 3861, 293, 550, 8460, 264, 17995, 337, 300, 13, 400, 370, 286, 390, 2891, 281, 7620, 452, 50708, 50708, 979, 378, 433, 293, 2058, 378, 433, 281, 764, 2699, 76, 37645, 5751, 404, 293, 2699, 76, 37645, 41, 10388, 13, 400, 309, 1985, 9594, 570, 498, 291, 51060, 51060, 643, 257, 3890, 31828, 2058, 19866, 420, 257, 979, 19866, 11, 291, 393, 445, 1261, 428, 37645, 41, 10388, 472, 666, 300, 13, 5135, 11, 51472, 51472, 472, 551, 286, 1409, 884, 456, 390, 286, 1409, 281, 1322, 11, 309, 311, 406, 1596, 1919, 281, 312, 6572, 11, 51748, 51748], "temperature": 0.0, "avg_logprob": -0.07687780695054137, "compression_ratio": 1.6127659574468085, "no_caption_prob": 9.313731425208971e-05}, {"id": 522, "seek": 337920, "start": 3393.12, "end": 3401.3599999999997, "text": " need a regular JSON encoder or a decoder, you can just turn your TSJSON one into that. Actually,", "tokens": [50364, 490, 264, 3861, 293, 550, 8460, 264, 17995, 337, 300, 13, 400, 370, 286, 390, 2891, 281, 7620, 452, 50708, 50708, 979, 378, 433, 293, 2058, 378, 433, 281, 764, 2699, 76, 37645, 5751, 404, 293, 2699, 76, 37645, 41, 10388, 13, 400, 309, 1985, 9594, 570, 498, 291, 51060, 51060, 643, 257, 3890, 31828, 2058, 19866, 420, 257, 979, 19866, 11, 291, 393, 445, 1261, 428, 37645, 41, 10388, 472, 666, 300, 13, 5135, 11, 51472, 51472, 472, 551, 286, 1409, 884, 456, 390, 286, 1409, 281, 1322, 11, 309, 311, 406, 1596, 1919, 281, 312, 6572, 11, 51748, 51748], "temperature": 0.0, "avg_logprob": -0.07687780695054137, "compression_ratio": 1.6127659574468085, "no_caption_prob": 9.313731425208971e-05}, {"id": 523, "seek": 337920, "start": 3401.3599999999997, "end": 3406.8799999999997, "text": " one thing I started doing there was I started to build, it's not quite ready to be published,", "tokens": [50364, 490, 264, 3861, 293, 550, 8460, 264, 17995, 337, 300, 13, 400, 370, 286, 390, 2891, 281, 7620, 452, 50708, 50708, 979, 378, 433, 293, 2058, 378, 433, 281, 764, 2699, 76, 37645, 5751, 404, 293, 2699, 76, 37645, 41, 10388, 13, 400, 309, 1985, 9594, 570, 498, 291, 51060, 51060, 643, 257, 3890, 31828, 2058, 19866, 420, 257, 979, 19866, 11, 291, 393, 445, 1261, 428, 37645, 41, 10388, 472, 666, 300, 13, 5135, 11, 51472, 51472, 472, 551, 286, 1409, 884, 456, 390, 286, 1409, 281, 1322, 11, 309, 311, 406, 1596, 1919, 281, 312, 6572, 11, 51748, 51748], "temperature": 0.0, "avg_logprob": -0.07687780695054137, "compression_ratio": 1.6127659574468085, "no_caption_prob": 9.313731425208971e-05}, {"id": 524, "seek": 340688, "start": 3406.88, "end": 3412.8, "text": " but I started to build a codec version of TSJSON because it turns out originally I didn't build", "tokens": [50364, 457, 286, 1409, 281, 1322, 257, 3089, 66, 3037, 295, 37645, 41, 10388, 570, 309, 4523, 484, 7993, 286, 994, 380, 1322, 50660, 50660, 257, 3089, 66, 3037, 295, 264, 9362, 570, 286, 8932, 881, 295, 264, 565, 291, 434, 411, 11, 4177, 11, 15576, 14237, 11, 50888, 50888, 510, 311, 341, 1412, 420, 4177, 11, 2699, 76, 2203, 341, 1412, 490, 15576, 14237, 293, 291, 500, 380, 4725, 643, 281, 352, 51140, 51140, 1293, 2098, 13, 583, 286, 4590, 493, 2390, 309, 570, 286, 5334, 365, 2699, 76, 430, 1660, 11, 286, 764, 2699, 76, 1461, 1500, 51460, 51460, 10950, 294, 2699, 76, 430, 1660, 13, 400, 370, 365, 2699, 76, 430, 1660, 11, 365, 2699, 76, 1461, 1500, 11, 291, 393, 1500, 428, 18160, 51848], "temperature": 0.0, "avg_logprob": -0.0773851187654244, "compression_ratio": 1.7916666666666667, "no_caption_prob": 9.16958088055253e-05}, {"id": 525, "seek": 340688, "start": 3412.8, "end": 3417.36, "text": " a codec version of the API because I figured most of the time you're like, hey, TypeScript,", "tokens": [50364, 457, 286, 1409, 281, 1322, 257, 3089, 66, 3037, 295, 37645, 41, 10388, 570, 309, 4523, 484, 7993, 286, 994, 380, 1322, 50660, 50660, 257, 3089, 66, 3037, 295, 264, 9362, 570, 286, 8932, 881, 295, 264, 565, 291, 434, 411, 11, 4177, 11, 15576, 14237, 11, 50888, 50888, 510, 311, 341, 1412, 420, 4177, 11, 2699, 76, 2203, 341, 1412, 490, 15576, 14237, 293, 291, 500, 380, 4725, 643, 281, 352, 51140, 51140, 1293, 2098, 13, 583, 286, 4590, 493, 2390, 309, 570, 286, 5334, 365, 2699, 76, 430, 1660, 11, 286, 764, 2699, 76, 1461, 1500, 51460, 51460, 10950, 294, 2699, 76, 430, 1660, 13, 400, 370, 365, 2699, 76, 430, 1660, 11, 365, 2699, 76, 1461, 1500, 11, 291, 393, 1500, 428, 18160, 51848], "temperature": 0.0, "avg_logprob": -0.0773851187654244, "compression_ratio": 1.7916666666666667, "no_caption_prob": 9.16958088055253e-05}, {"id": 526, "seek": 340688, "start": 3417.36, "end": 3422.4, "text": " here's this data or hey, Elm needs this data from TypeScript and you don't necessarily need to go", "tokens": [50364, 457, 286, 1409, 281, 1322, 257, 3089, 66, 3037, 295, 37645, 41, 10388, 570, 309, 4523, 484, 7993, 286, 994, 380, 1322, 50660, 50660, 257, 3089, 66, 3037, 295, 264, 9362, 570, 286, 8932, 881, 295, 264, 565, 291, 434, 411, 11, 4177, 11, 15576, 14237, 11, 50888, 50888, 510, 311, 341, 1412, 420, 4177, 11, 2699, 76, 2203, 341, 1412, 490, 15576, 14237, 293, 291, 500, 380, 4725, 643, 281, 352, 51140, 51140, 1293, 2098, 13, 583, 286, 4590, 493, 2390, 309, 570, 286, 5334, 365, 2699, 76, 430, 1660, 11, 286, 764, 2699, 76, 1461, 1500, 51460, 51460, 10950, 294, 2699, 76, 430, 1660, 13, 400, 370, 365, 2699, 76, 430, 1660, 11, 365, 2699, 76, 1461, 1500, 11, 291, 393, 1500, 428, 18160, 51848], "temperature": 0.0, "avg_logprob": -0.0773851187654244, "compression_ratio": 1.7916666666666667, "no_caption_prob": 9.16958088055253e-05}, {"id": 527, "seek": 340688, "start": 3422.4, "end": 3428.8, "text": " both ways. But I ended up building it because I realized with Elm Pages, I use Elm program test", "tokens": [50364, 457, 286, 1409, 281, 1322, 257, 3089, 66, 3037, 295, 37645, 41, 10388, 570, 309, 4523, 484, 7993, 286, 994, 380, 1322, 50660, 50660, 257, 3089, 66, 3037, 295, 264, 9362, 570, 286, 8932, 881, 295, 264, 565, 291, 434, 411, 11, 4177, 11, 15576, 14237, 11, 50888, 50888, 510, 311, 341, 1412, 420, 4177, 11, 2699, 76, 2203, 341, 1412, 490, 15576, 14237, 293, 291, 500, 380, 4725, 643, 281, 352, 51140, 51140, 1293, 2098, 13, 583, 286, 4590, 493, 2390, 309, 570, 286, 5334, 365, 2699, 76, 430, 1660, 11, 286, 764, 2699, 76, 1461, 1500, 51460, 51460, 10950, 294, 2699, 76, 430, 1660, 13, 400, 370, 365, 2699, 76, 430, 1660, 11, 365, 2699, 76, 1461, 1500, 11, 291, 393, 1500, 428, 18160, 51848], "temperature": 0.0, "avg_logprob": -0.0773851187654244, "compression_ratio": 1.7916666666666667, "no_caption_prob": 9.16958088055253e-05}, {"id": 528, "seek": 342880, "start": 3428.8, "end": 3437.52, "text": " heavily in Elm Pages. And so with Elm Program Test, you can test your ports. But to test your", "tokens": [50364, 10950, 294, 2699, 76, 430, 1660, 13, 400, 370, 365, 2699, 76, 8338, 9279, 11, 291, 393, 1500, 428, 18160, 13, 583, 281, 1500, 428, 50800, 50800, 18160, 11, 291, 643, 281, 976, 257, 979, 19866, 300, 5112, 291, 577, 281, 730, 260, 831, 1125, 264, 31828, 300, 291, 2845, 807, 51096, 51096, 428, 18160, 13, 407, 286, 643, 281, 352, 1293, 2098, 13, 407, 286, 600, 668, 1228, 3089, 14368, 294, 1668, 281, 360, 300, 293, 286, 5334, 51456, 51456, 286, 2978, 300, 13, 286, 519, 300, 486, 312, 257, 1481, 4500, 13, 865, 11, 286, 519, 370, 886, 13, 467, 311, 6217, 1096, 13, 51808, 51808], "temperature": 0.0, "avg_logprob": -0.09251141981645064, "compression_ratio": 1.6666666666666667, "no_caption_prob": 7.368395017692819e-05}, {"id": 529, "seek": 342880, "start": 3437.52, "end": 3443.44, "text": " ports, you need to give a decoder that tells you how to deserialize the JSON that you send through", "tokens": [50364, 10950, 294, 2699, 76, 430, 1660, 13, 400, 370, 365, 2699, 76, 8338, 9279, 11, 291, 393, 1500, 428, 18160, 13, 583, 281, 1500, 428, 50800, 50800, 18160, 11, 291, 643, 281, 976, 257, 979, 19866, 300, 5112, 291, 577, 281, 730, 260, 831, 1125, 264, 31828, 300, 291, 2845, 807, 51096, 51096, 428, 18160, 13, 407, 286, 643, 281, 352, 1293, 2098, 13, 407, 286, 600, 668, 1228, 3089, 14368, 294, 1668, 281, 360, 300, 293, 286, 5334, 51456, 51456, 286, 2978, 300, 13, 286, 519, 300, 486, 312, 257, 1481, 4500, 13, 865, 11, 286, 519, 370, 886, 13, 467, 311, 6217, 1096, 13, 51808, 51808], "temperature": 0.0, "avg_logprob": -0.09251141981645064, "compression_ratio": 1.6666666666666667, "no_caption_prob": 7.368395017692819e-05}, {"id": 530, "seek": 342880, "start": 3443.44, "end": 3450.6400000000003, "text": " your ports. So I need to go both ways. So I've been using codecs in order to do that and I realized", "tokens": [50364, 10950, 294, 2699, 76, 430, 1660, 13, 400, 370, 365, 2699, 76, 8338, 9279, 11, 291, 393, 1500, 428, 18160, 13, 583, 281, 1500, 428, 50800, 50800, 18160, 11, 291, 643, 281, 976, 257, 979, 19866, 300, 5112, 291, 577, 281, 730, 260, 831, 1125, 264, 31828, 300, 291, 2845, 807, 51096, 51096, 428, 18160, 13, 407, 286, 643, 281, 352, 1293, 2098, 13, 407, 286, 600, 668, 1228, 3089, 14368, 294, 1668, 281, 360, 300, 293, 286, 5334, 51456, 51456, 286, 2978, 300, 13, 286, 519, 300, 486, 312, 257, 1481, 4500, 13, 865, 11, 286, 519, 370, 886, 13, 467, 311, 6217, 1096, 13, 51808, 51808], "temperature": 0.0, "avg_logprob": -0.09251141981645064, "compression_ratio": 1.6666666666666667, "no_caption_prob": 7.368395017692819e-05}, {"id": 531, "seek": 342880, "start": 3450.6400000000003, "end": 3457.6800000000003, "text": " I needed that. I think that will be a nice addition. Yeah, I think so too. It's nearly done.", "tokens": [50364, 10950, 294, 2699, 76, 430, 1660, 13, 400, 370, 365, 2699, 76, 8338, 9279, 11, 291, 393, 1500, 428, 18160, 13, 583, 281, 1500, 428, 50800, 50800, 18160, 11, 291, 643, 281, 976, 257, 979, 19866, 300, 5112, 291, 577, 281, 730, 260, 831, 1125, 264, 31828, 300, 291, 2845, 807, 51096, 51096, 428, 18160, 13, 407, 286, 643, 281, 352, 1293, 2098, 13, 407, 286, 600, 668, 1228, 3089, 14368, 294, 1668, 281, 360, 300, 293, 286, 5334, 51456, 51456, 286, 2978, 300, 13, 286, 519, 300, 486, 312, 257, 1481, 4500, 13, 865, 11, 286, 519, 370, 886, 13, 467, 311, 6217, 1096, 13, 51808, 51808], "temperature": 0.0, "avg_logprob": -0.09251141981645064, "compression_ratio": 1.6666666666666667, "no_caption_prob": 7.368395017692819e-05}, {"id": 532, "seek": 345768, "start": 3457.68, "end": 3463.04, "text": " I got most of it pretty easily. It will be in Elm TSJSON also. It would not be a separate library.", "tokens": [50364, 286, 658, 881, 295, 309, 1238, 3612, 13, 467, 486, 312, 294, 2699, 76, 37645, 41, 10388, 611, 13, 467, 576, 406, 312, 257, 4994, 6405, 13, 50632, 50632, 7587, 13, 467, 603, 445, 312, 644, 295, 309, 13, 663, 311, 472, 295, 264, 534, 1627, 721, 13, 467, 311, 445, 2035, 50824, 50824, 300, 6405, 775, 11, 264, 2141, 551, 307, 2212, 364, 2058, 19866, 420, 257, 979, 19866, 11, 393, 291, 483, 264, 37645, 2010, 30, 51124, 51124, 400, 550, 1340, 1646, 264, 9362, 10860, 420, 2962, 11, 300, 311, 264, 4965, 2607, 300, 264, 46593, 926, 51400, 51400, 309, 411, 2699, 76, 37645, 5751, 404, 2203, 281, 13982, 309, 13, 286, 3811, 300, 321, 393, 764, 264, 912, 6532, 337, 51732, 51732], "temperature": 0.0, "avg_logprob": -0.09506370514396607, "compression_ratio": 1.6643109540636043, "no_caption_prob": 5.144109672983177e-05}, {"id": 533, "seek": 345768, "start": 3463.04, "end": 3466.8799999999997, "text": " Exactly. It'll just be part of it. That's one of the really cool things. It's just whatever", "tokens": [50364, 286, 658, 881, 295, 309, 1238, 3612, 13, 467, 486, 312, 294, 2699, 76, 37645, 41, 10388, 611, 13, 467, 576, 406, 312, 257, 4994, 6405, 13, 50632, 50632, 7587, 13, 467, 603, 445, 312, 644, 295, 309, 13, 663, 311, 472, 295, 264, 534, 1627, 721, 13, 467, 311, 445, 2035, 50824, 50824, 300, 6405, 775, 11, 264, 2141, 551, 307, 2212, 364, 2058, 19866, 420, 257, 979, 19866, 11, 393, 291, 483, 264, 37645, 2010, 30, 51124, 51124, 400, 550, 1340, 1646, 264, 9362, 10860, 420, 2962, 11, 300, 311, 264, 4965, 2607, 300, 264, 46593, 926, 51400, 51400, 309, 411, 2699, 76, 37645, 5751, 404, 2203, 281, 13982, 309, 13, 286, 3811, 300, 321, 393, 764, 264, 912, 6532, 337, 51732, 51732], "temperature": 0.0, "avg_logprob": -0.09506370514396607, "compression_ratio": 1.6643109540636043, "no_caption_prob": 5.144109672983177e-05}, {"id": 534, "seek": 345768, "start": 3466.8799999999997, "end": 3472.8799999999997, "text": " that library does, the key thing is given an encoder or a decoder, can you get the TS type?", "tokens": [50364, 286, 658, 881, 295, 309, 1238, 3612, 13, 467, 486, 312, 294, 2699, 76, 37645, 41, 10388, 611, 13, 467, 576, 406, 312, 257, 4994, 6405, 13, 50632, 50632, 7587, 13, 467, 603, 445, 312, 644, 295, 309, 13, 663, 311, 472, 295, 264, 534, 1627, 721, 13, 467, 311, 445, 2035, 50824, 50824, 300, 6405, 775, 11, 264, 2141, 551, 307, 2212, 364, 2058, 19866, 420, 257, 979, 19866, 11, 393, 291, 483, 264, 37645, 2010, 30, 51124, 51124, 400, 550, 1340, 1646, 264, 9362, 10860, 420, 2962, 11, 300, 311, 264, 4965, 2607, 300, 264, 46593, 926, 51400, 51400, 309, 411, 2699, 76, 37645, 5751, 404, 2203, 281, 13982, 309, 13, 286, 3811, 300, 321, 393, 764, 264, 912, 6532, 337, 51732, 51732], "temperature": 0.0, "avg_logprob": -0.09506370514396607, "compression_ratio": 1.6643109540636043, "no_caption_prob": 5.144109672983177e-05}, {"id": 535, "seek": 345768, "start": 3472.8799999999997, "end": 3478.3999999999996, "text": " And then anything else the API adds or changes, that's the core detail that the tooling around", "tokens": [50364, 286, 658, 881, 295, 309, 1238, 3612, 13, 467, 486, 312, 294, 2699, 76, 37645, 41, 10388, 611, 13, 467, 576, 406, 312, 257, 4994, 6405, 13, 50632, 50632, 7587, 13, 467, 603, 445, 312, 644, 295, 309, 13, 663, 311, 472, 295, 264, 534, 1627, 721, 13, 467, 311, 445, 2035, 50824, 50824, 300, 6405, 775, 11, 264, 2141, 551, 307, 2212, 364, 2058, 19866, 420, 257, 979, 19866, 11, 393, 291, 483, 264, 37645, 2010, 30, 51124, 51124, 400, 550, 1340, 1646, 264, 9362, 10860, 420, 2962, 11, 300, 311, 264, 4965, 2607, 300, 264, 46593, 926, 51400, 51400, 309, 411, 2699, 76, 37645, 5751, 404, 2203, 281, 13982, 309, 13, 286, 3811, 300, 321, 393, 764, 264, 912, 6532, 337, 51732, 51732], "temperature": 0.0, "avg_logprob": -0.09506370514396607, "compression_ratio": 1.6643109540636043, "no_caption_prob": 5.144109672983177e-05}, {"id": 536, "seek": 345768, "start": 3478.3999999999996, "end": 3485.04, "text": " it like Elm TS Interop needs to leverage it. I imagine that we can use the same technique for", "tokens": [50364, 286, 658, 881, 295, 309, 1238, 3612, 13, 467, 486, 312, 294, 2699, 76, 37645, 41, 10388, 611, 13, 467, 576, 406, 312, 257, 4994, 6405, 13, 50632, 50632, 7587, 13, 467, 603, 445, 312, 644, 295, 309, 13, 663, 311, 472, 295, 264, 534, 1627, 721, 13, 467, 311, 445, 2035, 50824, 50824, 300, 6405, 775, 11, 264, 2141, 551, 307, 2212, 364, 2058, 19866, 420, 257, 979, 19866, 11, 393, 291, 483, 264, 37645, 2010, 30, 51124, 51124, 400, 550, 1340, 1646, 264, 9362, 10860, 420, 2962, 11, 300, 311, 264, 4965, 2607, 300, 264, 46593, 926, 51400, 51400, 309, 411, 2699, 76, 37645, 5751, 404, 2203, 281, 13982, 309, 13, 286, 3811, 300, 321, 393, 764, 264, 912, 6532, 337, 51732, 51732], "temperature": 0.0, "avg_logprob": -0.09506370514396607, "compression_ratio": 1.6643109540636043, "no_caption_prob": 5.144109672983177e-05}, {"id": 537, "seek": 348504, "start": 3485.04, "end": 3491.6, "text": " any kind of format. So you're using it for JSON, but someone could do something similar for", "tokens": [50364, 604, 733, 295, 7877, 13, 407, 291, 434, 1228, 309, 337, 31828, 11, 457, 1580, 727, 360, 746, 2531, 337, 50692, 50692, 10019, 996, 2947, 420, 43484, 13, 286, 500, 380, 458, 498, 456, 311, 364, 43484, 34078, 13, 407, 569, 11, 2199, 2657, 746, 746, 13, 51168, 51344, 467, 311, 588, 2199, 13, 509, 603, 959, 309, 13, 865, 13, 51468, 51600], "temperature": 0.0, "avg_logprob": -0.17177090278038612, "compression_ratio": 1.4161490683229814, "no_caption_prob": 4.610925680026412e-05}, {"id": 538, "seek": 348504, "start": 3491.6, "end": 3501.12, "text": " Protobuf or XML. I don't know if there's an XML schema. Soap, simple object something something.", "tokens": [50364, 604, 733, 295, 7877, 13, 407, 291, 434, 1228, 309, 337, 31828, 11, 457, 1580, 727, 360, 746, 2531, 337, 50692, 50692, 10019, 996, 2947, 420, 43484, 13, 286, 500, 380, 458, 498, 456, 311, 364, 43484, 34078, 13, 407, 569, 11, 2199, 2657, 746, 746, 13, 51168, 51344, 467, 311, 588, 2199, 13, 509, 603, 959, 309, 13, 865, 13, 51468, 51600], "temperature": 0.0, "avg_logprob": -0.17177090278038612, "compression_ratio": 1.4161490683229814, "no_caption_prob": 4.610925680026412e-05}, {"id": 539, "seek": 348504, "start": 3504.64, "end": 3507.12, "text": " It's very simple. You'll love it. Yeah.", "tokens": [50364, 604, 733, 295, 7877, 13, 407, 291, 434, 1228, 309, 337, 31828, 11, 457, 1580, 727, 360, 746, 2531, 337, 50692, 50692, 10019, 996, 2947, 420, 43484, 13, 286, 500, 380, 458, 498, 456, 311, 364, 43484, 34078, 13, 407, 569, 11, 2199, 2657, 746, 746, 13, 51168, 51344, 467, 311, 588, 2199, 13, 509, 603, 959, 309, 13, 865, 13, 51468, 51600], "temperature": 0.0, "avg_logprob": -0.17177090278038612, "compression_ratio": 1.4161490683229814, "no_caption_prob": 4.610925680026412e-05}, {"id": 540, "seek": 350712, "start": 3507.12, "end": 3516.64, "text": " I prefer staying dirty. Let's put it that way. Yeah. But yeah, you can use the same technique.", "tokens": [50364, 286, 4382, 7939, 9360, 13, 961, 311, 829, 309, 300, 636, 13, 865, 13, 583, 1338, 11, 291, 393, 764, 264, 912, 6532, 13, 50840, 50840, 509, 576, 445, 2464, 257, 819, 2058, 19866, 11, 257, 819, 979, 19866, 11, 457, 291, 727, 764, 264, 912, 51120, 51120, 551, 11, 558, 30, 286, 519, 370, 13, 286, 519, 286, 478, 3297, 516, 281, 312, 1237, 337, 661, 3190, 281, 3079, 341, 51412, 51412, 2674, 5102, 295, 485, 1436, 341, 307, 472, 295, 264, 1627, 721, 466, 2699, 76, 21445, 307, 291, 362, 439, 613, 51736, 51736], "temperature": 0.0, "avg_logprob": -0.1464248482061892, "compression_ratio": 1.6075949367088607, "no_caption_prob": 6.302521069301292e-05}, {"id": 541, "seek": 350712, "start": 3516.64, "end": 3522.24, "text": " You would just write a different encoder, a different decoder, but you could use the same", "tokens": [50364, 286, 4382, 7939, 9360, 13, 961, 311, 829, 309, 300, 636, 13, 865, 13, 583, 1338, 11, 291, 393, 764, 264, 912, 6532, 13, 50840, 50840, 509, 576, 445, 2464, 257, 819, 2058, 19866, 11, 257, 819, 979, 19866, 11, 457, 291, 727, 764, 264, 912, 51120, 51120, 551, 11, 558, 30, 286, 519, 370, 13, 286, 519, 286, 478, 3297, 516, 281, 312, 1237, 337, 661, 3190, 281, 3079, 341, 51412, 51412, 2674, 5102, 295, 485, 1436, 341, 307, 472, 295, 264, 1627, 721, 466, 2699, 76, 21445, 307, 291, 362, 439, 613, 51736, 51736], "temperature": 0.0, "avg_logprob": -0.1464248482061892, "compression_ratio": 1.6075949367088607, "no_caption_prob": 6.302521069301292e-05}, {"id": 542, "seek": 350712, "start": 3522.24, "end": 3528.08, "text": " thing, right? I think so. I think I'm certainly going to be looking for other places to apply this", "tokens": [50364, 286, 4382, 7939, 9360, 13, 961, 311, 829, 309, 300, 636, 13, 865, 13, 583, 1338, 11, 291, 393, 764, 264, 912, 6532, 13, 50840, 50840, 509, 576, 445, 2464, 257, 819, 2058, 19866, 11, 257, 819, 979, 19866, 11, 457, 291, 727, 764, 264, 912, 51120, 51120, 551, 11, 558, 30, 286, 519, 370, 13, 286, 519, 286, 478, 3297, 516, 281, 312, 1237, 337, 661, 3190, 281, 3079, 341, 51412, 51412, 2674, 5102, 295, 485, 1436, 341, 307, 472, 295, 264, 1627, 721, 466, 2699, 76, 21445, 307, 291, 362, 439, 613, 51736, 51736], "temperature": 0.0, "avg_logprob": -0.1464248482061892, "compression_ratio": 1.6075949367088607, "no_caption_prob": 6.302521069301292e-05}, {"id": 543, "seek": 350712, "start": 3528.08, "end": 3534.56, "text": " general pattern of... Because this is one of the cool things about Elm APIs is you have all these", "tokens": [50364, 286, 4382, 7939, 9360, 13, 961, 311, 829, 309, 300, 636, 13, 865, 13, 583, 1338, 11, 291, 393, 764, 264, 912, 6532, 13, 50840, 50840, 509, 576, 445, 2464, 257, 819, 2058, 19866, 11, 257, 819, 979, 19866, 11, 457, 291, 727, 764, 264, 912, 51120, 51120, 551, 11, 558, 30, 286, 519, 370, 13, 286, 519, 286, 478, 3297, 516, 281, 312, 1237, 337, 661, 3190, 281, 3079, 341, 51412, 51412, 2674, 5102, 295, 485, 1436, 341, 307, 472, 295, 264, 1627, 721, 466, 2699, 76, 21445, 307, 291, 362, 439, 613, 51736, 51736], "temperature": 0.0, "avg_logprob": -0.1464248482061892, "compression_ratio": 1.6075949367088607, "no_caption_prob": 6.302521069301292e-05}, {"id": 544, "seek": 353456, "start": 3534.56, "end": 3539.44, "text": " guarantees as you build things up in Elm APIs. You know somebody's not going to sneak in some", "tokens": [50364, 32567, 382, 291, 1322, 721, 493, 294, 2699, 76, 21445, 13, 509, 458, 2618, 311, 406, 516, 281, 13164, 294, 512, 50608, 50636, 2158, 300, 1943, 380, 1944, 365, 428, 9362, 13, 407, 291, 393, 7081, 300, 291, 434, 516, 281, 362, 3006, 50980, 50980, 15576, 14237, 2010, 1589, 420, 2035, 26603, 291, 528, 281, 6786, 466, 613, 4190, 13, 407, 286, 51284, 51284, 519, 309, 311, 257, 588, 1627, 2674, 3410, 300, 286, 3879, 3986, 393, 312, 6456, 281, 867, 661, 3179, 13, 51584, 51584], "temperature": 0.0, "avg_logprob": -0.06972435387698087, "compression_ratio": 1.5601659751037344, "no_caption_prob": 3.59120276698377e-05}, {"id": 545, "seek": 353456, "start": 3540.0, "end": 3546.88, "text": " value that isn't possible with your API. So you can prove that you're going to have correct", "tokens": [50364, 32567, 382, 291, 1322, 721, 493, 294, 2699, 76, 21445, 13, 509, 458, 2618, 311, 406, 516, 281, 13164, 294, 512, 50608, 50636, 2158, 300, 1943, 380, 1944, 365, 428, 9362, 13, 407, 291, 393, 7081, 300, 291, 434, 516, 281, 362, 3006, 50980, 50980, 15576, 14237, 2010, 1589, 420, 2035, 26603, 291, 528, 281, 6786, 466, 613, 4190, 13, 407, 286, 51284, 51284, 519, 309, 311, 257, 588, 1627, 2674, 3410, 300, 286, 3879, 3986, 393, 312, 6456, 281, 867, 661, 3179, 13, 51584, 51584], "temperature": 0.0, "avg_logprob": -0.06972435387698087, "compression_ratio": 1.5601659751037344, "no_caption_prob": 3.59120276698377e-05}, {"id": 546, "seek": 353456, "start": 3546.88, "end": 3552.96, "text": " TypeScript type information or whatever metadata you want to describe about these values. So I", "tokens": [50364, 32567, 382, 291, 1322, 721, 493, 294, 2699, 76, 21445, 13, 509, 458, 2618, 311, 406, 516, 281, 13164, 294, 512, 50608, 50636, 2158, 300, 1943, 380, 1944, 365, 428, 9362, 13, 407, 291, 393, 7081, 300, 291, 434, 516, 281, 362, 3006, 50980, 50980, 15576, 14237, 2010, 1589, 420, 2035, 26603, 291, 528, 281, 6786, 466, 613, 4190, 13, 407, 286, 51284, 51284, 519, 309, 311, 257, 588, 1627, 2674, 3410, 300, 286, 3879, 3986, 393, 312, 6456, 281, 867, 661, 3179, 13, 51584, 51584], "temperature": 0.0, "avg_logprob": -0.06972435387698087, "compression_ratio": 1.5601659751037344, "no_caption_prob": 3.59120276698377e-05}, {"id": 547, "seek": 353456, "start": 3552.96, "end": 3558.96, "text": " think it's a very cool general concept that I totally agree can be applied to many other areas.", "tokens": [50364, 32567, 382, 291, 1322, 721, 493, 294, 2699, 76, 21445, 13, 509, 458, 2618, 311, 406, 516, 281, 13164, 294, 512, 50608, 50636, 2158, 300, 1943, 380, 1944, 365, 428, 9362, 13, 407, 291, 393, 7081, 300, 291, 434, 516, 281, 362, 3006, 50980, 50980, 15576, 14237, 2010, 1589, 420, 2035, 26603, 291, 528, 281, 6786, 466, 613, 4190, 13, 407, 286, 51284, 51284, 519, 309, 311, 257, 588, 1627, 2674, 3410, 300, 286, 3879, 3986, 393, 312, 6456, 281, 867, 661, 3179, 13, 51584, 51584], "temperature": 0.0, "avg_logprob": -0.06972435387698087, "compression_ratio": 1.5601659751037344, "no_caption_prob": 3.59120276698377e-05}, {"id": 548, "seek": 355896, "start": 3558.96, "end": 3564.88, "text": " So are there any pitfalls that you have seen that you have not been able to avoid using", "tokens": [50364, 407, 366, 456, 604, 10147, 18542, 300, 291, 362, 1612, 300, 291, 362, 406, 668, 1075, 281, 5042, 1228, 50660, 50660, 9362, 1715, 30, 1012, 393, 561, 3346, 438, 264, 3873, 294, 257, 636, 300, 436, 630, 406, 2066, 30, 1144, 291, 643, 281, 51008, 51036, 1500, 428, 979, 378, 433, 420, 2058, 378, 433, 294, 257, 2685, 636, 30, 1042, 11, 264, 534, 1627, 551, 307, 562, 291, 434, 1382, 51396, 51396, 281, 1066, 257, 7154, 293, 6423, 294, 20271, 11, 456, 311, 257, 1379, 1508, 295, 2740, 456, 1296, 3037, 278, 51724, 51724], "temperature": 0.0, "avg_logprob": -0.06983935464288771, "compression_ratio": 1.597457627118644, "no_caption_prob": 4.683774750446901e-05}, {"id": 549, "seek": 355896, "start": 3564.88, "end": 3571.84, "text": " API design? How can people misuse the tools in a way that they did not expect? Do you need to", "tokens": [50364, 407, 366, 456, 604, 10147, 18542, 300, 291, 362, 1612, 300, 291, 362, 406, 668, 1075, 281, 5042, 1228, 50660, 50660, 9362, 1715, 30, 1012, 393, 561, 3346, 438, 264, 3873, 294, 257, 636, 300, 436, 630, 406, 2066, 30, 1144, 291, 643, 281, 51008, 51036, 1500, 428, 979, 378, 433, 420, 2058, 378, 433, 294, 257, 2685, 636, 30, 1042, 11, 264, 534, 1627, 551, 307, 562, 291, 434, 1382, 51396, 51396, 281, 1066, 257, 7154, 293, 6423, 294, 20271, 11, 456, 311, 257, 1379, 1508, 295, 2740, 456, 1296, 3037, 278, 51724, 51724], "temperature": 0.0, "avg_logprob": -0.06983935464288771, "compression_ratio": 1.597457627118644, "no_caption_prob": 4.683774750446901e-05}, {"id": 550, "seek": 355896, "start": 3572.4, "end": 3579.6, "text": " test your decoders or encoders in a specific way? Well, the really cool thing is when you're trying", "tokens": [50364, 407, 366, 456, 604, 10147, 18542, 300, 291, 362, 1612, 300, 291, 362, 406, 668, 1075, 281, 5042, 1228, 50660, 50660, 9362, 1715, 30, 1012, 393, 561, 3346, 438, 264, 3873, 294, 257, 636, 300, 436, 630, 406, 2066, 30, 1144, 291, 643, 281, 51008, 51036, 1500, 428, 979, 378, 433, 420, 2058, 378, 433, 294, 257, 2685, 636, 30, 1042, 11, 264, 534, 1627, 551, 307, 562, 291, 434, 1382, 51396, 51396, 281, 1066, 257, 7154, 293, 6423, 294, 20271, 11, 456, 311, 257, 1379, 1508, 295, 2740, 456, 1296, 3037, 278, 51724, 51724], "temperature": 0.0, "avg_logprob": -0.06983935464288771, "compression_ratio": 1.597457627118644, "no_caption_prob": 4.683774750446901e-05}, {"id": 551, "seek": 355896, "start": 3579.6, "end": 3586.16, "text": " to keep a server and client in sync, there's a whole class of problems there between versioning", "tokens": [50364, 407, 366, 456, 604, 10147, 18542, 300, 291, 362, 1612, 300, 291, 362, 406, 668, 1075, 281, 5042, 1228, 50660, 50660, 9362, 1715, 30, 1012, 393, 561, 3346, 438, 264, 3873, 294, 257, 636, 300, 436, 630, 406, 2066, 30, 1144, 291, 643, 281, 51008, 51036, 1500, 428, 979, 378, 433, 420, 2058, 378, 433, 294, 257, 2685, 636, 30, 1042, 11, 264, 534, 1627, 551, 307, 562, 291, 434, 1382, 51396, 51396, 281, 1066, 257, 7154, 293, 6423, 294, 20271, 11, 456, 311, 257, 1379, 1508, 295, 2740, 456, 1296, 3037, 278, 51724, 51724], "temperature": 0.0, "avg_logprob": -0.06983935464288771, "compression_ratio": 1.597457627118644, "no_caption_prob": 4.683774750446901e-05}, {"id": 552, "seek": 358616, "start": 3586.16, "end": 3591.04, "text": " strategies and all of that. With ports, with interop, you don't have to deal with that class", "tokens": [50364, 9029, 293, 439, 295, 300, 13, 2022, 18160, 11, 365, 728, 404, 11, 291, 500, 380, 362, 281, 2028, 365, 300, 1508, 50608, 50608, 295, 2740, 370, 709, 570, 309, 311, 445, 264, 6423, 13, 865, 11, 291, 2673, 5374, 1293, 264, 2699, 76, 3089, 293, 264, 50952, 50952, 15778, 3089, 412, 264, 912, 565, 13, 7587, 13, 407, 291, 458, 300, 436, 434, 294, 20271, 13, 821, 311, 406, 341, 51212, 51212, 7959, 295, 1419, 281, 7283, 1296, 732, 819, 9606, 293, 362, 300, 34237, 51460, 51460], "temperature": 0.0, "avg_logprob": -0.06798109478420682, "compression_ratio": 1.5537190082644627, "no_caption_prob": 3.591201675590128e-05}, {"id": 553, "seek": 358616, "start": 3591.04, "end": 3597.92, "text": " of problems so much because it's just the client. Yeah, you usually ship both the Elm code and the", "tokens": [50364, 9029, 293, 439, 295, 300, 13, 2022, 18160, 11, 365, 728, 404, 11, 291, 500, 380, 362, 281, 2028, 365, 300, 1508, 50608, 50608, 295, 2740, 370, 709, 570, 309, 311, 445, 264, 6423, 13, 865, 11, 291, 2673, 5374, 1293, 264, 2699, 76, 3089, 293, 264, 50952, 50952, 15778, 3089, 412, 264, 912, 565, 13, 7587, 13, 407, 291, 458, 300, 436, 434, 294, 20271, 13, 821, 311, 406, 341, 51212, 51212, 7959, 295, 1419, 281, 7283, 1296, 732, 819, 9606, 293, 362, 300, 34237, 51460, 51460], "temperature": 0.0, "avg_logprob": -0.06798109478420682, "compression_ratio": 1.5537190082644627, "no_caption_prob": 3.591201675590128e-05}, {"id": 554, "seek": 358616, "start": 3597.92, "end": 3603.12, "text": " JavaScript code at the same time. Exactly. So you know that they're in sync. There's not this", "tokens": [50364, 9029, 293, 439, 295, 300, 13, 2022, 18160, 11, 365, 728, 404, 11, 291, 500, 380, 362, 281, 2028, 365, 300, 1508, 50608, 50608, 295, 2740, 370, 709, 570, 309, 311, 445, 264, 6423, 13, 865, 11, 291, 2673, 5374, 1293, 264, 2699, 76, 3089, 293, 264, 50952, 50952, 15778, 3089, 412, 264, 912, 565, 13, 7587, 13, 407, 291, 458, 300, 436, 434, 294, 20271, 13, 821, 311, 406, 341, 51212, 51212, 7959, 295, 1419, 281, 7283, 1296, 732, 819, 9606, 293, 362, 300, 34237, 51460, 51460], "temperature": 0.0, "avg_logprob": -0.06798109478420682, "compression_ratio": 1.5537190082644627, "no_caption_prob": 3.591201675590128e-05}, {"id": 555, "seek": 358616, "start": 3603.12, "end": 3608.08, "text": " possibility of having to bridge between two different versions and have that compatibility", "tokens": [50364, 9029, 293, 439, 295, 300, 13, 2022, 18160, 11, 365, 728, 404, 11, 291, 500, 380, 362, 281, 2028, 365, 300, 1508, 50608, 50608, 295, 2740, 370, 709, 570, 309, 311, 445, 264, 6423, 13, 865, 11, 291, 2673, 5374, 1293, 264, 2699, 76, 3089, 293, 264, 50952, 50952, 15778, 3089, 412, 264, 912, 565, 13, 7587, 13, 407, 291, 458, 300, 436, 434, 294, 20271, 13, 821, 311, 406, 341, 51212, 51212, 7959, 295, 1419, 281, 7283, 1296, 732, 819, 9606, 293, 362, 300, 34237, 51460, 51460], "temperature": 0.0, "avg_logprob": -0.06798109478420682, "compression_ratio": 1.5537190082644627, "no_caption_prob": 3.591201675590128e-05}, {"id": 556, "seek": 360808, "start": 3608.08, "end": 3616.24, "text": " layer. So that whole area of complexity is completely avoided in this area. So that's the", "tokens": [50364, 4583, 13, 407, 300, 1379, 1859, 295, 14024, 307, 2584, 24890, 294, 341, 1859, 13, 407, 300, 311, 264, 50772, 50772, 1627, 551, 11, 558, 30, 509, 2464, 428, 37645, 31828, 2058, 19866, 293, 979, 19866, 293, 586, 291, 600, 658, 552, 294, 20271, 293, 51228, 51228, 291, 2985, 604, 13603, 293, 550, 264, 958, 3037, 295, 264, 6423, 291, 5374, 307, 516, 281, 312, 1364, 365, 51468, 51468, 729, 17695, 13, 2720, 1164, 11, 291, 393, 920, 1401, 746, 490, 2654, 6725, 293, 6552, 264, 3467, 51720, 51720], "temperature": 0.0, "avg_logprob": -0.10383939219045114, "compression_ratio": 1.5950413223140496, "no_caption_prob": 0.00023410949506796896}, {"id": 557, "seek": 360808, "start": 3616.24, "end": 3625.36, "text": " cool thing, right? You write your TS JSON encoder and decoder and now you've got them in sync and", "tokens": [50364, 4583, 13, 407, 300, 1379, 1859, 295, 14024, 307, 2584, 24890, 294, 341, 1859, 13, 407, 300, 311, 264, 50772, 50772, 1627, 551, 11, 558, 30, 509, 2464, 428, 37645, 31828, 2058, 19866, 293, 979, 19866, 293, 586, 291, 600, 658, 552, 294, 20271, 293, 51228, 51228, 291, 2985, 604, 13603, 293, 550, 264, 958, 3037, 295, 264, 6423, 291, 5374, 307, 516, 281, 312, 1364, 365, 51468, 51468, 729, 17695, 13, 2720, 1164, 11, 291, 393, 920, 1401, 746, 490, 2654, 6725, 293, 6552, 264, 3467, 51720, 51720], "temperature": 0.0, "avg_logprob": -0.10383939219045114, "compression_ratio": 1.5950413223140496, "no_caption_prob": 0.00023410949506796896}, {"id": 558, "seek": 360808, "start": 3625.36, "end": 3630.16, "text": " you address any errors and then the next version of the client you ship is going to be working with", "tokens": [50364, 4583, 13, 407, 300, 1379, 1859, 295, 14024, 307, 2584, 24890, 294, 341, 1859, 13, 407, 300, 311, 264, 50772, 50772, 1627, 551, 11, 558, 30, 509, 2464, 428, 37645, 31828, 2058, 19866, 293, 979, 19866, 293, 586, 291, 600, 658, 552, 294, 20271, 293, 51228, 51228, 291, 2985, 604, 13603, 293, 550, 264, 958, 3037, 295, 264, 6423, 291, 5374, 307, 516, 281, 312, 1364, 365, 51468, 51468, 729, 17695, 13, 2720, 1164, 11, 291, 393, 920, 1401, 746, 490, 2654, 6725, 293, 6552, 264, 3467, 51720, 51720], "temperature": 0.0, "avg_logprob": -0.10383939219045114, "compression_ratio": 1.5950413223140496, "no_caption_prob": 0.00023410949506796896}, {"id": 559, "seek": 360808, "start": 3630.16, "end": 3635.2, "text": " those assumptions. Of course, you can still read something from local storage and assume the types", "tokens": [50364, 4583, 13, 407, 300, 1379, 1859, 295, 14024, 307, 2584, 24890, 294, 341, 1859, 13, 407, 300, 311, 264, 50772, 50772, 1627, 551, 11, 558, 30, 509, 2464, 428, 37645, 31828, 2058, 19866, 293, 979, 19866, 293, 586, 291, 600, 658, 552, 294, 20271, 293, 51228, 51228, 291, 2985, 604, 13603, 293, 550, 264, 958, 3037, 295, 264, 6423, 291, 5374, 307, 516, 281, 312, 1364, 365, 51468, 51468, 729, 17695, 13, 2720, 1164, 11, 291, 393, 920, 1401, 746, 490, 2654, 6725, 293, 6552, 264, 3467, 51720, 51720], "temperature": 0.0, "avg_logprob": -0.10383939219045114, "compression_ratio": 1.5950413223140496, "no_caption_prob": 0.00023410949506796896}, {"id": 560, "seek": 363520, "start": 3635.2, "end": 3641.04, "text": " of it and that sort of thing. But that's just a general challenge with TypeScript. So I would say", "tokens": [50364, 295, 309, 293, 300, 1333, 295, 551, 13, 583, 300, 311, 445, 257, 2674, 3430, 365, 15576, 14237, 13, 407, 286, 576, 584, 50656, 50656, 1391, 264, 3880, 10147, 6691, 307, 445, 300, 291, 434, 1364, 365, 15576, 14237, 13, 407, 15576, 14237, 11, 286, 519, 321, 51000, 51000, 727, 3612, 2836, 257, 1379, 3500, 1417, 466, 15576, 14237, 13, 583, 294, 257, 37711, 11, 286, 519, 300, 51348, 51348, 15576, 14237, 307, 4664, 731, 4761, 337, 264, 5493, 295, 264, 1716, 13, 663, 848, 11, 264, 5493, 295, 264, 1716, 51716, 51716], "temperature": 0.0, "avg_logprob": -0.09656518634996916, "compression_ratio": 1.7863636363636364, "no_caption_prob": 0.00023045629495754838}, {"id": 561, "seek": 363520, "start": 3641.04, "end": 3647.9199999999996, "text": " probably the biggest pitfall is just that you're working with TypeScript. So TypeScript, I think we", "tokens": [50364, 295, 309, 293, 300, 1333, 295, 551, 13, 583, 300, 311, 445, 257, 2674, 3430, 365, 15576, 14237, 13, 407, 286, 576, 584, 50656, 50656, 1391, 264, 3880, 10147, 6691, 307, 445, 300, 291, 434, 1364, 365, 15576, 14237, 13, 407, 15576, 14237, 11, 286, 519, 321, 51000, 51000, 727, 3612, 2836, 257, 1379, 3500, 1417, 466, 15576, 14237, 13, 583, 294, 257, 37711, 11, 286, 519, 300, 51348, 51348, 15576, 14237, 307, 4664, 731, 4761, 337, 264, 5493, 295, 264, 1716, 13, 663, 848, 11, 264, 5493, 295, 264, 1716, 51716, 51716], "temperature": 0.0, "avg_logprob": -0.09656518634996916, "compression_ratio": 1.7863636363636364, "no_caption_prob": 0.00023045629495754838}, {"id": 562, "seek": 363520, "start": 3647.9199999999996, "end": 3654.8799999999997, "text": " could easily fill a whole episode talking about TypeScript. But in a nutshell, I think that", "tokens": [50364, 295, 309, 293, 300, 1333, 295, 551, 13, 583, 300, 311, 445, 257, 2674, 3430, 365, 15576, 14237, 13, 407, 286, 576, 584, 50656, 50656, 1391, 264, 3880, 10147, 6691, 307, 445, 300, 291, 434, 1364, 365, 15576, 14237, 13, 407, 15576, 14237, 11, 286, 519, 321, 51000, 51000, 727, 3612, 2836, 257, 1379, 3500, 1417, 466, 15576, 14237, 13, 583, 294, 257, 37711, 11, 286, 519, 300, 51348, 51348, 15576, 14237, 307, 4664, 731, 4761, 337, 264, 5493, 295, 264, 1716, 13, 663, 848, 11, 264, 5493, 295, 264, 1716, 51716, 51716], "temperature": 0.0, "avg_logprob": -0.09656518634996916, "compression_ratio": 1.7863636363636364, "no_caption_prob": 0.00023045629495754838}, {"id": 563, "seek": 363520, "start": 3654.8799999999997, "end": 3662.24, "text": " TypeScript is extremely well designed for the goals of the project. That said, the goals of the project", "tokens": [50364, 295, 309, 293, 300, 1333, 295, 551, 13, 583, 300, 311, 445, 257, 2674, 3430, 365, 15576, 14237, 13, 407, 286, 576, 584, 50656, 50656, 1391, 264, 3880, 10147, 6691, 307, 445, 300, 291, 434, 1364, 365, 15576, 14237, 13, 407, 15576, 14237, 11, 286, 519, 321, 51000, 51000, 727, 3612, 2836, 257, 1379, 3500, 1417, 466, 15576, 14237, 13, 583, 294, 257, 37711, 11, 286, 519, 300, 51348, 51348, 15576, 14237, 307, 4664, 731, 4761, 337, 264, 5493, 295, 264, 1716, 13, 663, 848, 11, 264, 5493, 295, 264, 1716, 51716, 51716], "temperature": 0.0, "avg_logprob": -0.09656518634996916, "compression_ratio": 1.7863636363636364, "no_caption_prob": 0.00023045629495754838}, {"id": 564, "seek": 366224, "start": 3662.24, "end": 3669.68, "text": " limit its ability to have a town sound type system and give guarantees in the way that Elm does.", "tokens": [50364, 4948, 1080, 3485, 281, 362, 257, 3954, 1626, 2010, 1185, 293, 976, 32567, 294, 264, 636, 300, 2699, 76, 775, 13, 50736, 50736, 865, 11, 300, 307, 406, 472, 3387, 295, 15576, 14237, 13, 1779, 11, 558, 13, 467, 311, 544, 22001, 281, 3318, 666, 6741, 51144, 51144, 15778, 3652, 293, 33520, 293, 439, 295, 300, 13, 400, 309, 775, 257, 588, 665, 1691, 1951, 729, 51456, 51456, 18491, 11, 457, 309, 1355, 300, 309, 393, 380, 10815, 382, 709, 13, 400, 370, 286, 4114, 257, 2183, 597, 286, 32734, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.09976125270762343, "compression_ratio": 1.579591836734694, "no_caption_prob": 3.591164204408415e-05}, {"id": 565, "seek": 366224, "start": 3669.68, "end": 3677.8399999999997, "text": " Yeah, that is not one goal of TypeScript. Right, right. It's more attempting to fit into existing", "tokens": [50364, 4948, 1080, 3485, 281, 362, 257, 3954, 1626, 2010, 1185, 293, 976, 32567, 294, 264, 636, 300, 2699, 76, 775, 13, 50736, 50736, 865, 11, 300, 307, 406, 472, 3387, 295, 15576, 14237, 13, 1779, 11, 558, 13, 467, 311, 544, 22001, 281, 3318, 666, 6741, 51144, 51144, 15778, 3652, 293, 33520, 293, 439, 295, 300, 13, 400, 309, 775, 257, 588, 665, 1691, 1951, 729, 51456, 51456, 18491, 11, 457, 309, 1355, 300, 309, 393, 380, 10815, 382, 709, 13, 400, 370, 286, 4114, 257, 2183, 597, 286, 32734, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.09976125270762343, "compression_ratio": 1.579591836734694, "no_caption_prob": 3.591164204408415e-05}, {"id": 566, "seek": 366224, "start": 3677.8399999999997, "end": 3684.08, "text": " JavaScript systems and conventions and all of that. And it does a very good job within those", "tokens": [50364, 4948, 1080, 3485, 281, 362, 257, 3954, 1626, 2010, 1185, 293, 976, 32567, 294, 264, 636, 300, 2699, 76, 775, 13, 50736, 50736, 865, 11, 300, 307, 406, 472, 3387, 295, 15576, 14237, 13, 1779, 11, 558, 13, 467, 311, 544, 22001, 281, 3318, 666, 6741, 51144, 51144, 15778, 3652, 293, 33520, 293, 439, 295, 300, 13, 400, 309, 775, 257, 588, 665, 1691, 1951, 729, 51456, 51456, 18491, 11, 457, 309, 1355, 300, 309, 393, 380, 10815, 382, 709, 13, 400, 370, 286, 4114, 257, 2183, 597, 286, 32734, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.09976125270762343, "compression_ratio": 1.579591836734694, "no_caption_prob": 3.591164204408415e-05}, {"id": 567, "seek": 366224, "start": 3684.08, "end": 3690.24, "text": " constraints, but it means that it can't guarantee as much. And so I wrote a post which I referenced", "tokens": [50364, 4948, 1080, 3485, 281, 362, 257, 3954, 1626, 2010, 1185, 293, 976, 32567, 294, 264, 636, 300, 2699, 76, 775, 13, 50736, 50736, 865, 11, 300, 307, 406, 472, 3387, 295, 15576, 14237, 13, 1779, 11, 558, 13, 467, 311, 544, 22001, 281, 3318, 666, 6741, 51144, 51144, 15778, 3652, 293, 33520, 293, 439, 295, 300, 13, 400, 309, 775, 257, 588, 665, 1691, 1951, 729, 51456, 51456, 18491, 11, 457, 309, 1355, 300, 309, 393, 380, 10815, 382, 709, 13, 400, 370, 286, 4114, 257, 2183, 597, 286, 32734, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.09976125270762343, "compression_ratio": 1.579591836734694, "no_caption_prob": 3.591164204408415e-05}, {"id": 568, "seek": 369024, "start": 3690.24, "end": 3696.56, "text": " earlier in this episode called TypeScript's blind spots. And that's linked to in the show notes. I", "tokens": [50364, 3071, 294, 341, 3500, 1219, 15576, 14237, 311, 6865, 10681, 13, 400, 300, 311, 9408, 281, 294, 264, 855, 5570, 13, 286, 50680, 50680, 519, 300, 311, 3163, 257, 1401, 445, 281, 1223, 562, 291, 393, 10687, 322, 15576, 14237, 293, 562, 291, 393, 380, 11, 50944, 50944, 445, 370, 291, 458, 437, 281, 312, 2857, 5026, 365, 13, 2743, 11, 286, 519, 309, 311, 1021, 281, 445, 652, 988, 51172, 51172, 300, 428, 37777, 1399, 307, 992, 493, 281, 652, 988, 291, 434, 8568, 428, 15576, 14237, 7500, 293, 2614, 309, 51472, 51472, 294, 428, 1322, 13, 400, 611, 11, 286, 733, 295, 751, 466, 341, 294, 264, 15576, 14237, 311, 6865, 10681, 6968, 2183, 51792, 51792], "temperature": 0.0, "avg_logprob": -0.06921147505442302, "compression_ratio": 1.8333333333333333, "no_caption_prob": 0.00012729728769045323}, {"id": 569, "seek": 369024, "start": 3696.56, "end": 3701.8399999999997, "text": " think that's worth a read just to understand when you can rely on TypeScript and when you can't,", "tokens": [50364, 3071, 294, 341, 3500, 1219, 15576, 14237, 311, 6865, 10681, 13, 400, 300, 311, 9408, 281, 294, 264, 855, 5570, 13, 286, 50680, 50680, 519, 300, 311, 3163, 257, 1401, 445, 281, 1223, 562, 291, 393, 10687, 322, 15576, 14237, 293, 562, 291, 393, 380, 11, 50944, 50944, 445, 370, 291, 458, 437, 281, 312, 2857, 5026, 365, 13, 2743, 11, 286, 519, 309, 311, 1021, 281, 445, 652, 988, 51172, 51172, 300, 428, 37777, 1399, 307, 992, 493, 281, 652, 988, 291, 434, 8568, 428, 15576, 14237, 7500, 293, 2614, 309, 51472, 51472, 294, 428, 1322, 13, 400, 611, 11, 286, 733, 295, 751, 466, 341, 294, 264, 15576, 14237, 311, 6865, 10681, 6968, 2183, 51792, 51792], "temperature": 0.0, "avg_logprob": -0.06921147505442302, "compression_ratio": 1.8333333333333333, "no_caption_prob": 0.00012729728769045323}, {"id": 570, "seek": 369024, "start": 3701.8399999999997, "end": 3706.3999999999996, "text": " just so you know what to be extra careful with. Also, I think it's important to just make sure", "tokens": [50364, 3071, 294, 341, 3500, 1219, 15576, 14237, 311, 6865, 10681, 13, 400, 300, 311, 9408, 281, 294, 264, 855, 5570, 13, 286, 50680, 50680, 519, 300, 311, 3163, 257, 1401, 445, 281, 1223, 562, 291, 393, 10687, 322, 15576, 14237, 293, 562, 291, 393, 380, 11, 50944, 50944, 445, 370, 291, 458, 437, 281, 312, 2857, 5026, 365, 13, 2743, 11, 286, 519, 309, 311, 1021, 281, 445, 652, 988, 51172, 51172, 300, 428, 37777, 1399, 307, 992, 493, 281, 652, 988, 291, 434, 8568, 428, 15576, 14237, 7500, 293, 2614, 309, 51472, 51472, 294, 428, 1322, 13, 400, 611, 11, 286, 733, 295, 751, 466, 341, 294, 264, 15576, 14237, 311, 6865, 10681, 6968, 2183, 51792, 51792], "temperature": 0.0, "avg_logprob": -0.06921147505442302, "compression_ratio": 1.8333333333333333, "no_caption_prob": 0.00012729728769045323}, {"id": 571, "seek": 369024, "start": 3706.3999999999996, "end": 3712.3999999999996, "text": " that your CI process is set up to make sure you're checking your TypeScript carefully and running it", "tokens": [50364, 3071, 294, 341, 3500, 1219, 15576, 14237, 311, 6865, 10681, 13, 400, 300, 311, 9408, 281, 294, 264, 855, 5570, 13, 286, 50680, 50680, 519, 300, 311, 3163, 257, 1401, 445, 281, 1223, 562, 291, 393, 10687, 322, 15576, 14237, 293, 562, 291, 393, 380, 11, 50944, 50944, 445, 370, 291, 458, 437, 281, 312, 2857, 5026, 365, 13, 2743, 11, 286, 519, 309, 311, 1021, 281, 445, 652, 988, 51172, 51172, 300, 428, 37777, 1399, 307, 992, 493, 281, 652, 988, 291, 434, 8568, 428, 15576, 14237, 7500, 293, 2614, 309, 51472, 51472, 294, 428, 1322, 13, 400, 611, 11, 286, 733, 295, 751, 466, 341, 294, 264, 15576, 14237, 311, 6865, 10681, 6968, 2183, 51792, 51792], "temperature": 0.0, "avg_logprob": -0.06921147505442302, "compression_ratio": 1.8333333333333333, "no_caption_prob": 0.00012729728769045323}, {"id": 572, "seek": 369024, "start": 3712.3999999999996, "end": 3718.7999999999997, "text": " in your build. And also, I kind of talk about this in the TypeScript's blind spots blog post", "tokens": [50364, 3071, 294, 341, 3500, 1219, 15576, 14237, 311, 6865, 10681, 13, 400, 300, 311, 9408, 281, 294, 264, 855, 5570, 13, 286, 50680, 50680, 519, 300, 311, 3163, 257, 1401, 445, 281, 1223, 562, 291, 393, 10687, 322, 15576, 14237, 293, 562, 291, 393, 380, 11, 50944, 50944, 445, 370, 291, 458, 437, 281, 312, 2857, 5026, 365, 13, 2743, 11, 286, 519, 309, 311, 1021, 281, 445, 652, 988, 51172, 51172, 300, 428, 37777, 1399, 307, 992, 493, 281, 652, 988, 291, 434, 8568, 428, 15576, 14237, 7500, 293, 2614, 309, 51472, 51472, 294, 428, 1322, 13, 400, 611, 11, 286, 733, 295, 751, 466, 341, 294, 264, 15576, 14237, 311, 6865, 10681, 6968, 2183, 51792, 51792], "temperature": 0.0, "avg_logprob": -0.06921147505442302, "compression_ratio": 1.8333333333333333, "no_caption_prob": 0.00012729728769045323}, {"id": 573, "seek": 371880, "start": 3718.8, "end": 3724.0, "text": " that there are some things that make TypeScript a little bit safer. So for example, you can use", "tokens": [50364, 300, 456, 366, 512, 721, 300, 652, 15576, 14237, 257, 707, 857, 15856, 13, 407, 337, 1365, 11, 291, 393, 764, 50624, 50624, 257, 15576, 14237, 12564, 43, 686, 1520, 300, 486, 5586, 300, 291, 434, 884, 14687, 488, 3679, 12363, 13, 50876, 50916, 745, 2399, 5215, 13, 865, 11, 1338, 13, 407, 300, 311, 257, 534, 665, 13437, 5215, 4978, 300, 1669, 309, 257, 688, 51276, 51276, 544, 13956, 11, 2318, 365, 2699, 76, 37645, 728, 404, 13, 286, 1116, 584, 300, 311, 1391, 264, 3880, 658, 4413, 13, 865, 13, 51644, 51644], "temperature": 0.0, "avg_logprob": -0.10930948456128438, "compression_ratio": 1.609442060085837, "no_caption_prob": 5.3907791880192235e-05}, {"id": 574, "seek": 371880, "start": 3724.0, "end": 3729.04, "text": " a TypeScript ESLint check that will ensure that you're doing exhaustive switch statements.", "tokens": [50364, 300, 456, 366, 512, 721, 300, 652, 15576, 14237, 257, 707, 857, 15856, 13, 407, 337, 1365, 11, 291, 393, 764, 50624, 50624, 257, 15576, 14237, 12564, 43, 686, 1520, 300, 486, 5586, 300, 291, 434, 884, 14687, 488, 3679, 12363, 13, 50876, 50916, 745, 2399, 5215, 13, 865, 11, 1338, 13, 407, 300, 311, 257, 534, 665, 13437, 5215, 4978, 300, 1669, 309, 257, 688, 51276, 51276, 544, 13956, 11, 2318, 365, 2699, 76, 37645, 728, 404, 13, 286, 1116, 584, 300, 311, 1391, 264, 3880, 658, 4413, 13, 865, 13, 51644, 51644], "temperature": 0.0, "avg_logprob": -0.10930948456128438, "compression_ratio": 1.609442060085837, "no_caption_prob": 5.3907791880192235e-05}, {"id": 575, "seek": 371880, "start": 3729.84, "end": 3737.04, "text": " Static analysis. Yeah, yeah. So that's a really good static analysis rule that makes it a lot", "tokens": [50364, 300, 456, 366, 512, 721, 300, 652, 15576, 14237, 257, 707, 857, 15856, 13, 407, 337, 1365, 11, 291, 393, 764, 50624, 50624, 257, 15576, 14237, 12564, 43, 686, 1520, 300, 486, 5586, 300, 291, 434, 884, 14687, 488, 3679, 12363, 13, 50876, 50916, 745, 2399, 5215, 13, 865, 11, 1338, 13, 407, 300, 311, 257, 534, 665, 13437, 5215, 4978, 300, 1669, 309, 257, 688, 51276, 51276, 544, 13956, 11, 2318, 365, 2699, 76, 37645, 728, 404, 13, 286, 1116, 584, 300, 311, 1391, 264, 3880, 658, 4413, 13, 865, 13, 51644, 51644], "temperature": 0.0, "avg_logprob": -0.10930948456128438, "compression_ratio": 1.609442060085837, "no_caption_prob": 5.3907791880192235e-05}, {"id": 576, "seek": 371880, "start": 3737.04, "end": 3744.4, "text": " more robust, especially with Elm TS interop. I'd say that's probably the biggest gotcha. Yeah.", "tokens": [50364, 300, 456, 366, 512, 721, 300, 652, 15576, 14237, 257, 707, 857, 15856, 13, 407, 337, 1365, 11, 291, 393, 764, 50624, 50624, 257, 15576, 14237, 12564, 43, 686, 1520, 300, 486, 5586, 300, 291, 434, 884, 14687, 488, 3679, 12363, 13, 50876, 50916, 745, 2399, 5215, 13, 865, 11, 1338, 13, 407, 300, 311, 257, 534, 665, 13437, 5215, 4978, 300, 1669, 309, 257, 688, 51276, 51276, 544, 13956, 11, 2318, 365, 2699, 76, 37645, 728, 404, 13, 286, 1116, 584, 300, 311, 1391, 264, 3880, 658, 4413, 13, 865, 13, 51644, 51644], "temperature": 0.0, "avg_logprob": -0.10930948456128438, "compression_ratio": 1.609442060085837, "no_caption_prob": 5.3907791880192235e-05}, {"id": 577, "seek": 374440, "start": 3744.4, "end": 3751.6, "text": " I had a few questions or notes. So you mentioned that there's only one output port and one input", "tokens": [50364, 286, 632, 257, 1326, 1651, 420, 5570, 13, 407, 291, 2835, 300, 456, 311, 787, 472, 5598, 2436, 293, 472, 4846, 50724, 50724, 18160, 13, 1664, 291, 909, 2940, 2306, 30, 509, 393, 362, 257, 11, 1310, 291, 727, 818, 309, 257, 11711, 2436, 13, 407, 51068, 51096, 437, 2699, 76, 37645, 728, 404, 775, 307, 309, 2709, 291, 264, 10833, 15576, 14237, 27606, 3991, 11, 597, 307, 51420, 51420, 445, 257, 7877, 300, 309, 311, 411, 257, 23117, 3991, 294, 383, 420, 746, 689, 291, 393, 6786, 264, 2010, 51776, 51776], "temperature": 0.0, "avg_logprob": -0.08205865799112523, "compression_ratio": 1.5477178423236515, "no_caption_prob": 4.832282502320595e-05}, {"id": 578, "seek": 374440, "start": 3751.6, "end": 3758.48, "text": " ports. Can you add several ones? You can have a, maybe you could call it a legacy port. So", "tokens": [50364, 286, 632, 257, 1326, 1651, 420, 5570, 13, 407, 291, 2835, 300, 456, 311, 787, 472, 5598, 2436, 293, 472, 4846, 50724, 50724, 18160, 13, 1664, 291, 909, 2940, 2306, 30, 509, 393, 362, 257, 11, 1310, 291, 727, 818, 309, 257, 11711, 2436, 13, 407, 51068, 51096, 437, 2699, 76, 37645, 728, 404, 775, 307, 309, 2709, 291, 264, 10833, 15576, 14237, 27606, 3991, 11, 597, 307, 51420, 51420, 445, 257, 7877, 300, 309, 311, 411, 257, 23117, 3991, 294, 383, 420, 746, 689, 291, 393, 6786, 264, 2010, 51776, 51776], "temperature": 0.0, "avg_logprob": -0.08205865799112523, "compression_ratio": 1.5477178423236515, "no_caption_prob": 4.832282502320595e-05}, {"id": 579, "seek": 374440, "start": 3759.04, "end": 3765.52, "text": " what Elm TS interop does is it gives you the generated TypeScript declaration file, which is", "tokens": [50364, 286, 632, 257, 1326, 1651, 420, 5570, 13, 407, 291, 2835, 300, 456, 311, 787, 472, 5598, 2436, 293, 472, 4846, 50724, 50724, 18160, 13, 1664, 291, 909, 2940, 2306, 30, 509, 393, 362, 257, 11, 1310, 291, 727, 818, 309, 257, 11711, 2436, 13, 407, 51068, 51096, 437, 2699, 76, 37645, 728, 404, 775, 307, 309, 2709, 291, 264, 10833, 15576, 14237, 27606, 3991, 11, 597, 307, 51420, 51420, 445, 257, 7877, 300, 309, 311, 411, 257, 23117, 3991, 294, 383, 420, 746, 689, 291, 393, 6786, 264, 2010, 51776, 51776], "temperature": 0.0, "avg_logprob": -0.08205865799112523, "compression_ratio": 1.5477178423236515, "no_caption_prob": 4.832282502320595e-05}, {"id": 580, "seek": 374440, "start": 3765.52, "end": 3772.64, "text": " just a format that it's like a header file in C or something where you can describe the type", "tokens": [50364, 286, 632, 257, 1326, 1651, 420, 5570, 13, 407, 291, 2835, 300, 456, 311, 787, 472, 5598, 2436, 293, 472, 4846, 50724, 50724, 18160, 13, 1664, 291, 909, 2940, 2306, 30, 509, 393, 362, 257, 11, 1310, 291, 727, 818, 309, 257, 11711, 2436, 13, 407, 51068, 51096, 437, 2699, 76, 37645, 728, 404, 775, 307, 309, 2709, 291, 264, 10833, 15576, 14237, 27606, 3991, 11, 597, 307, 51420, 51420, 445, 257, 7877, 300, 309, 311, 411, 257, 23117, 3991, 294, 383, 420, 746, 689, 291, 393, 6786, 264, 2010, 51776, 51776], "temperature": 0.0, "avg_logprob": -0.08205865799112523, "compression_ratio": 1.5477178423236515, "no_caption_prob": 4.832282502320595e-05}, {"id": 581, "seek": 377264, "start": 3772.64, "end": 3778.56, "text": " information of a JavaScript file. So the generated Elm JavaScript, it's just describing that. And", "tokens": [50364, 1589, 295, 257, 15778, 3991, 13, 407, 264, 10833, 2699, 76, 15778, 11, 309, 311, 445, 16141, 300, 13, 400, 50660, 50660, 437, 300, 10833, 15576, 14237, 27606, 3991, 490, 2699, 76, 37645, 728, 404, 775, 307, 309, 15626, 437, 309, 51008, 51008, 3255, 466, 264, 18160, 300, 309, 9003, 11, 597, 307, 23265, 11, 264, 490, 2699, 76, 11, 291, 458, 11, 12729, 490, 2699, 76, 13, 51380, 51380, 821, 311, 257, 2436, 1219, 12729, 490, 2699, 76, 293, 456, 311, 257, 2436, 1219, 12729, 281, 2699, 76, 13, 400, 309, 51584, 51584, 15626, 729, 13, 400, 11, 291, 458, 11, 286, 519, 729, 5288, 366, 3845, 1547, 300, 300, 1582, 380, 312, 364, 51812, 51812], "temperature": 0.0, "avg_logprob": -0.08293822633118189, "compression_ratio": 1.904382470119522, "no_caption_prob": 5.064087235950865e-05}, {"id": 582, "seek": 377264, "start": 3778.56, "end": 3785.52, "text": " what that generated TypeScript declaration file from Elm TS interop does is it describes what it", "tokens": [50364, 1589, 295, 257, 15778, 3991, 13, 407, 264, 10833, 2699, 76, 15778, 11, 309, 311, 445, 16141, 300, 13, 400, 50660, 50660, 437, 300, 10833, 15576, 14237, 27606, 3991, 490, 2699, 76, 37645, 728, 404, 775, 307, 309, 15626, 437, 309, 51008, 51008, 3255, 466, 264, 18160, 300, 309, 9003, 11, 597, 307, 23265, 11, 264, 490, 2699, 76, 11, 291, 458, 11, 12729, 490, 2699, 76, 13, 51380, 51380, 821, 311, 257, 2436, 1219, 12729, 490, 2699, 76, 293, 456, 311, 257, 2436, 1219, 12729, 281, 2699, 76, 13, 400, 309, 51584, 51584, 15626, 729, 13, 400, 11, 291, 458, 11, 286, 519, 729, 5288, 366, 3845, 1547, 300, 300, 1582, 380, 312, 364, 51812, 51812], "temperature": 0.0, "avg_logprob": -0.08293822633118189, "compression_ratio": 1.904382470119522, "no_caption_prob": 5.064087235950865e-05}, {"id": 583, "seek": 377264, "start": 3785.52, "end": 3792.96, "text": " knows about the ports that it controls, which is flags, the from Elm, you know, interrupt from Elm.", "tokens": [50364, 1589, 295, 257, 15778, 3991, 13, 407, 264, 10833, 2699, 76, 15778, 11, 309, 311, 445, 16141, 300, 13, 400, 50660, 50660, 437, 300, 10833, 15576, 14237, 27606, 3991, 490, 2699, 76, 37645, 728, 404, 775, 307, 309, 15626, 437, 309, 51008, 51008, 3255, 466, 264, 18160, 300, 309, 9003, 11, 597, 307, 23265, 11, 264, 490, 2699, 76, 11, 291, 458, 11, 12729, 490, 2699, 76, 13, 51380, 51380, 821, 311, 257, 2436, 1219, 12729, 490, 2699, 76, 293, 456, 311, 257, 2436, 1219, 12729, 281, 2699, 76, 13, 400, 309, 51584, 51584, 15626, 729, 13, 400, 11, 291, 458, 11, 286, 519, 729, 5288, 366, 3845, 1547, 300, 300, 1582, 380, 312, 364, 51812, 51812], "temperature": 0.0, "avg_logprob": -0.08293822633118189, "compression_ratio": 1.904382470119522, "no_caption_prob": 5.064087235950865e-05}, {"id": 584, "seek": 377264, "start": 3792.96, "end": 3797.04, "text": " There's a port called interrupt from Elm and there's a port called interrupt to Elm. And it", "tokens": [50364, 1589, 295, 257, 15778, 3991, 13, 407, 264, 10833, 2699, 76, 15778, 11, 309, 311, 445, 16141, 300, 13, 400, 50660, 50660, 437, 300, 10833, 15576, 14237, 27606, 3991, 490, 2699, 76, 37645, 728, 404, 775, 307, 309, 15626, 437, 309, 51008, 51008, 3255, 466, 264, 18160, 300, 309, 9003, 11, 597, 307, 23265, 11, 264, 490, 2699, 76, 11, 291, 458, 11, 12729, 490, 2699, 76, 13, 51380, 51380, 821, 311, 257, 2436, 1219, 12729, 490, 2699, 76, 293, 456, 311, 257, 2436, 1219, 12729, 281, 2699, 76, 13, 400, 309, 51584, 51584, 15626, 729, 13, 400, 11, 291, 458, 11, 286, 519, 729, 5288, 366, 3845, 1547, 300, 300, 1582, 380, 312, 364, 51812, 51812], "temperature": 0.0, "avg_logprob": -0.08293822633118189, "compression_ratio": 1.904382470119522, "no_caption_prob": 5.064087235950865e-05}, {"id": 585, "seek": 377264, "start": 3797.04, "end": 3801.6, "text": " describes those. And, you know, I think those names are unique enough that that won't be an", "tokens": [50364, 1589, 295, 257, 15778, 3991, 13, 407, 264, 10833, 2699, 76, 15778, 11, 309, 311, 445, 16141, 300, 13, 400, 50660, 50660, 437, 300, 10833, 15576, 14237, 27606, 3991, 490, 2699, 76, 37645, 728, 404, 775, 307, 309, 15626, 437, 309, 51008, 51008, 3255, 466, 264, 18160, 300, 309, 9003, 11, 597, 307, 23265, 11, 264, 490, 2699, 76, 11, 291, 458, 11, 12729, 490, 2699, 76, 13, 51380, 51380, 821, 311, 257, 2436, 1219, 12729, 490, 2699, 76, 293, 456, 311, 257, 2436, 1219, 12729, 281, 2699, 76, 13, 400, 309, 51584, 51584, 15626, 729, 13, 400, 11, 291, 458, 11, 286, 519, 729, 5288, 366, 3845, 1547, 300, 300, 1582, 380, 312, 364, 51812, 51812], "temperature": 0.0, "avg_logprob": -0.08293822633118189, "compression_ratio": 1.904382470119522, "no_caption_prob": 5.064087235950865e-05}, {"id": 586, "seek": 380160, "start": 3801.6, "end": 3810.7999999999997, "text": " issue for most people. And then it says that the type of the ports is unknown for any other ports.", "tokens": [50364, 2734, 337, 881, 561, 13, 400, 550, 309, 1619, 300, 264, 2010, 295, 264, 18160, 307, 9841, 337, 604, 661, 18160, 13, 50824, 50824, 407, 309, 311, 406, 516, 281, 584, 11, 1954, 11, 729, 18160, 2138, 500, 380, 2514, 13, 467, 311, 516, 281, 584, 51056, 51056, 661, 18160, 815, 2514, 11, 457, 286, 500, 380, 458, 1340, 466, 641, 3467, 13, 407, 309, 4960, 613, 9841, 3467, 51352, 51352, 337, 729, 13, 7497, 291, 764, 2699, 76, 37645, 728, 404, 2940, 1413, 11, 472, 337, 12729, 21988, 11, 300, 10088, 51672, 51672], "temperature": 0.0, "avg_logprob": -0.06436538696289062, "compression_ratio": 1.7227272727272727, "no_caption_prob": 6.708592263748869e-05}, {"id": 587, "seek": 380160, "start": 3810.7999999999997, "end": 3815.44, "text": " So it's not going to say, oh, those ports definitely don't exist. It's going to say", "tokens": [50364, 2734, 337, 881, 561, 13, 400, 550, 309, 1619, 300, 264, 2010, 295, 264, 18160, 307, 9841, 337, 604, 661, 18160, 13, 50824, 50824, 407, 309, 311, 406, 516, 281, 584, 11, 1954, 11, 729, 18160, 2138, 500, 380, 2514, 13, 467, 311, 516, 281, 584, 51056, 51056, 661, 18160, 815, 2514, 11, 457, 286, 500, 380, 458, 1340, 466, 641, 3467, 13, 407, 309, 4960, 613, 9841, 3467, 51352, 51352, 337, 729, 13, 7497, 291, 764, 2699, 76, 37645, 728, 404, 2940, 1413, 11, 472, 337, 12729, 21988, 11, 300, 10088, 51672, 51672], "temperature": 0.0, "avg_logprob": -0.06436538696289062, "compression_ratio": 1.7227272727272727, "no_caption_prob": 6.708592263748869e-05}, {"id": 588, "seek": 380160, "start": 3815.44, "end": 3821.36, "text": " other ports may exist, but I don't know anything about their types. So it uses these unknown types", "tokens": [50364, 2734, 337, 881, 561, 13, 400, 550, 309, 1619, 300, 264, 2010, 295, 264, 18160, 307, 9841, 337, 604, 661, 18160, 13, 50824, 50824, 407, 309, 311, 406, 516, 281, 584, 11, 1954, 11, 729, 18160, 2138, 500, 380, 2514, 13, 467, 311, 516, 281, 584, 51056, 51056, 661, 18160, 815, 2514, 11, 457, 286, 500, 380, 458, 1340, 466, 641, 3467, 13, 407, 309, 4960, 613, 9841, 3467, 51352, 51352, 337, 729, 13, 7497, 291, 764, 2699, 76, 37645, 728, 404, 2940, 1413, 11, 472, 337, 12729, 21988, 11, 300, 10088, 51672, 51672], "temperature": 0.0, "avg_logprob": -0.06436538696289062, "compression_ratio": 1.7227272727272727, "no_caption_prob": 6.708592263748869e-05}, {"id": 589, "seek": 380160, "start": 3821.36, "end": 3827.7599999999998, "text": " for those. Could you use Elm TS interop several times, one for interrupt definitions, that module", "tokens": [50364, 2734, 337, 881, 561, 13, 400, 550, 309, 1619, 300, 264, 2010, 295, 264, 18160, 307, 9841, 337, 604, 661, 18160, 13, 50824, 50824, 407, 309, 311, 406, 516, 281, 584, 11, 1954, 11, 729, 18160, 2138, 500, 380, 2514, 13, 467, 311, 516, 281, 584, 51056, 51056, 661, 18160, 815, 2514, 11, 457, 286, 500, 380, 458, 1340, 466, 641, 3467, 13, 407, 309, 4960, 613, 9841, 3467, 51352, 51352, 337, 729, 13, 7497, 291, 764, 2699, 76, 37645, 728, 404, 2940, 1413, 11, 472, 337, 12729, 21988, 11, 300, 10088, 51672, 51672], "temperature": 0.0, "avg_logprob": -0.06436538696289062, "compression_ratio": 1.7227272727272727, "no_caption_prob": 6.708592263748869e-05}, {"id": 590, "seek": 382776, "start": 3827.76, "end": 3833.76, "text": " that we talked about and a second time with a different interrupt definitions module with", "tokens": [50364, 300, 321, 2825, 466, 293, 257, 1150, 565, 365, 257, 819, 12729, 21988, 10088, 365, 50664, 50692, 819, 1315, 13, 708, 286, 478, 886, 13, 876, 11, 630, 291, 362, 257, 764, 1389, 294, 1575, 30, 10865, 286, 600, 658, 11, 286, 600, 658, 13, 50920, 50920, 865, 13, 1222, 764, 1389, 576, 312, 445, 32890, 17011, 13, 407, 286, 362, 7140, 295, 18160, 293, 286, 528, 281, 764, 341, 51384, 51384, 3109, 365, 2699, 76, 37645, 728, 404, 13, 865, 13, 583, 286, 643, 281, 11, 286, 576, 411, 281, 483, 512, 295, 264, 5311, 13, 51708, 51708], "temperature": 0.0, "avg_logprob": -0.15274589840728459, "compression_ratio": 1.5495867768595042, "no_caption_prob": 0.00021651280985679477}, {"id": 591, "seek": 382776, "start": 3834.32, "end": 3838.88, "text": " different name. What I'm too. Oh, did you have a use case in mind? Cause I've got, I've got.", "tokens": [50364, 300, 321, 2825, 466, 293, 257, 1150, 565, 365, 257, 819, 12729, 21988, 10088, 365, 50664, 50692, 819, 1315, 13, 708, 286, 478, 886, 13, 876, 11, 630, 291, 362, 257, 764, 1389, 294, 1575, 30, 10865, 286, 600, 658, 11, 286, 600, 658, 13, 50920, 50920, 865, 13, 1222, 764, 1389, 576, 312, 445, 32890, 17011, 13, 407, 286, 362, 7140, 295, 18160, 293, 286, 528, 281, 764, 341, 51384, 51384, 3109, 365, 2699, 76, 37645, 728, 404, 13, 865, 13, 583, 286, 643, 281, 11, 286, 576, 411, 281, 483, 512, 295, 264, 5311, 13, 51708, 51708], "temperature": 0.0, "avg_logprob": -0.15274589840728459, "compression_ratio": 1.5495867768595042, "no_caption_prob": 0.00021651280985679477}, {"id": 592, "seek": 382776, "start": 3838.88, "end": 3848.1600000000003, "text": " Yeah. My use case would be just gradual migration. So I have plenty of ports and I want to use this", "tokens": [50364, 300, 321, 2825, 466, 293, 257, 1150, 565, 365, 257, 819, 12729, 21988, 10088, 365, 50664, 50692, 819, 1315, 13, 708, 286, 478, 886, 13, 876, 11, 630, 291, 362, 257, 764, 1389, 294, 1575, 30, 10865, 286, 600, 658, 11, 286, 600, 658, 13, 50920, 50920, 865, 13, 1222, 764, 1389, 576, 312, 445, 32890, 17011, 13, 407, 286, 362, 7140, 295, 18160, 293, 286, 528, 281, 764, 341, 51384, 51384, 3109, 365, 2699, 76, 37645, 728, 404, 13, 865, 13, 583, 286, 643, 281, 11, 286, 576, 411, 281, 483, 512, 295, 264, 5311, 13, 51708, 51708], "temperature": 0.0, "avg_logprob": -0.15274589840728459, "compression_ratio": 1.5495867768595042, "no_caption_prob": 0.00021651280985679477}, {"id": 593, "seek": 382776, "start": 3848.1600000000003, "end": 3854.6400000000003, "text": " approach with Elm TS interop. Yeah. But I need to, I would like to get some of the benefits.", "tokens": [50364, 300, 321, 2825, 466, 293, 257, 1150, 565, 365, 257, 819, 12729, 21988, 10088, 365, 50664, 50692, 819, 1315, 13, 708, 286, 478, 886, 13, 876, 11, 630, 291, 362, 257, 764, 1389, 294, 1575, 30, 10865, 286, 600, 658, 11, 286, 600, 658, 13, 50920, 50920, 865, 13, 1222, 764, 1389, 576, 312, 445, 32890, 17011, 13, 407, 286, 362, 7140, 295, 18160, 293, 286, 528, 281, 764, 341, 51384, 51384, 3109, 365, 2699, 76, 37645, 728, 404, 13, 865, 13, 583, 286, 643, 281, 11, 286, 576, 411, 281, 483, 512, 295, 264, 5311, 13, 51708, 51708], "temperature": 0.0, "avg_logprob": -0.15274589840728459, "compression_ratio": 1.5495867768595042, "no_caption_prob": 0.00021651280985679477}, {"id": 594, "seek": 385464, "start": 3854.64, "end": 3861.3599999999997, "text": " Yes. Yeah. I think that is a very good, very good approach. And I definitely, I would do the same", "tokens": [50364, 1079, 13, 865, 13, 286, 519, 300, 307, 257, 588, 665, 11, 588, 665, 3109, 13, 400, 286, 2138, 11, 286, 576, 360, 264, 912, 50700, 50700, 2059, 13, 407, 309, 1985, 1238, 9594, 365, 300, 570, 729, 11711, 18160, 11, 291, 393, 31821, 766, 50972, 50972, 552, 707, 538, 707, 13, 407, 11, 293, 550, 2235, 721, 666, 428, 728, 404, 21988, 10088, 13, 407, 300, 311, 51228, 51228, 1936, 437, 286, 603, 1391, 2464, 493, 257, 707, 5934, 322, 577, 281, 360, 300, 293, 5556, 294, 264, 855, 51564, 51564, 5570, 13, 583, 286, 519, 300, 300, 311, 2138, 411, 746, 300, 11, 300, 307, 516, 281, 589, 484, 9594, 13, 51840, 51840], "temperature": 0.0, "avg_logprob": -0.10485779525887252, "compression_ratio": 1.7381818181818183, "no_caption_prob": 0.00020019905059598386}, {"id": 595, "seek": 385464, "start": 3861.3599999999997, "end": 3866.7999999999997, "text": " myself. So it works pretty nicely with that because those legacy ports, you can migrate off", "tokens": [50364, 1079, 13, 865, 13, 286, 519, 300, 307, 257, 588, 665, 11, 588, 665, 3109, 13, 400, 286, 2138, 11, 286, 576, 360, 264, 912, 50700, 50700, 2059, 13, 407, 309, 1985, 1238, 9594, 365, 300, 570, 729, 11711, 18160, 11, 291, 393, 31821, 766, 50972, 50972, 552, 707, 538, 707, 13, 407, 11, 293, 550, 2235, 721, 666, 428, 728, 404, 21988, 10088, 13, 407, 300, 311, 51228, 51228, 1936, 437, 286, 603, 1391, 2464, 493, 257, 707, 5934, 322, 577, 281, 360, 300, 293, 5556, 294, 264, 855, 51564, 51564, 5570, 13, 583, 286, 519, 300, 300, 311, 2138, 411, 746, 300, 11, 300, 307, 516, 281, 589, 484, 9594, 13, 51840, 51840], "temperature": 0.0, "avg_logprob": -0.10485779525887252, "compression_ratio": 1.7381818181818183, "no_caption_prob": 0.00020019905059598386}, {"id": 596, "seek": 385464, "start": 3866.7999999999997, "end": 3871.92, "text": " them little by little. So, and then pull things into your interop definitions module. So that's", "tokens": [50364, 1079, 13, 865, 13, 286, 519, 300, 307, 257, 588, 665, 11, 588, 665, 3109, 13, 400, 286, 2138, 11, 286, 576, 360, 264, 912, 50700, 50700, 2059, 13, 407, 309, 1985, 1238, 9594, 365, 300, 570, 729, 11711, 18160, 11, 291, 393, 31821, 766, 50972, 50972, 552, 707, 538, 707, 13, 407, 11, 293, 550, 2235, 721, 666, 428, 728, 404, 21988, 10088, 13, 407, 300, 311, 51228, 51228, 1936, 437, 286, 603, 1391, 2464, 493, 257, 707, 5934, 322, 577, 281, 360, 300, 293, 5556, 294, 264, 855, 51564, 51564, 5570, 13, 583, 286, 519, 300, 300, 311, 2138, 411, 746, 300, 11, 300, 307, 516, 281, 589, 484, 9594, 13, 51840, 51840], "temperature": 0.0, "avg_logprob": -0.10485779525887252, "compression_ratio": 1.7381818181818183, "no_caption_prob": 0.00020019905059598386}, {"id": 597, "seek": 385464, "start": 3871.92, "end": 3878.64, "text": " basically what I'll probably write up a little guide on how to do that and included in the show", "tokens": [50364, 1079, 13, 865, 13, 286, 519, 300, 307, 257, 588, 665, 11, 588, 665, 3109, 13, 400, 286, 2138, 11, 286, 576, 360, 264, 912, 50700, 50700, 2059, 13, 407, 309, 1985, 1238, 9594, 365, 300, 570, 729, 11711, 18160, 11, 291, 393, 31821, 766, 50972, 50972, 552, 707, 538, 707, 13, 407, 11, 293, 550, 2235, 721, 666, 428, 728, 404, 21988, 10088, 13, 407, 300, 311, 51228, 51228, 1936, 437, 286, 603, 1391, 2464, 493, 257, 707, 5934, 322, 577, 281, 360, 300, 293, 5556, 294, 264, 855, 51564, 51564, 5570, 13, 583, 286, 519, 300, 300, 311, 2138, 411, 746, 300, 11, 300, 307, 516, 281, 589, 484, 9594, 13, 51840, 51840], "temperature": 0.0, "avg_logprob": -0.10485779525887252, "compression_ratio": 1.7381818181818183, "no_caption_prob": 0.00020019905059598386}, {"id": 598, "seek": 385464, "start": 3878.64, "end": 3884.16, "text": " notes. But I think that that's definitely like something that, that is going to work out nicely.", "tokens": [50364, 1079, 13, 865, 13, 286, 519, 300, 307, 257, 588, 665, 11, 588, 665, 3109, 13, 400, 286, 2138, 11, 286, 576, 360, 264, 912, 50700, 50700, 2059, 13, 407, 309, 1985, 1238, 9594, 365, 300, 570, 729, 11711, 18160, 11, 291, 393, 31821, 766, 50972, 50972, 552, 707, 538, 707, 13, 407, 11, 293, 550, 2235, 721, 666, 428, 728, 404, 21988, 10088, 13, 407, 300, 311, 51228, 51228, 1936, 437, 286, 603, 1391, 2464, 493, 257, 707, 5934, 322, 577, 281, 360, 300, 293, 5556, 294, 264, 855, 51564, 51564, 5570, 13, 583, 286, 519, 300, 300, 311, 2138, 411, 746, 300, 11, 300, 307, 516, 281, 589, 484, 9594, 13, 51840, 51840], "temperature": 0.0, "avg_logprob": -0.10485779525887252, "compression_ratio": 1.7381818181818183, "no_caption_prob": 0.00020019905059598386}, {"id": 599, "seek": 388416, "start": 3884.16, "end": 3889.2799999999997, "text": " My migrating over incrementally. So ports are unknown and you can register, you can keep", "tokens": [50364, 1222, 6186, 8754, 670, 26200, 379, 13, 407, 18160, 366, 9841, 293, 291, 393, 7280, 11, 291, 393, 1066, 50620, 50620, 47329, 264, 1331, 18160, 293, 1286, 552, 707, 538, 707, 293, 300, 311, 11, 300, 311, 516, 281, 589, 2489, 13, 407, 50832, 50832, 411, 264, 7576, 365, 2699, 76, 37645, 728, 404, 11, 291, 434, 1391, 516, 281, 312, 17436, 3319, 293, 368, 17436, 3319, 51160, 51160, 11671, 2375, 3467, 412, 264, 1192, 1496, 13, 400, 370, 291, 445, 1066, 5127, 777, 2375, 3467, 337, 264, 777, 51420, 51420, 4190, 291, 434, 516, 281, 2845, 13, 865, 13, 2743, 11, 321, 2378, 380, 2825, 466, 264, 17621, 13, 400, 370, 286, 1415, 281, 751, 51780, 51780], "temperature": 0.0, "avg_logprob": -0.09750759601593018, "compression_ratio": 1.7582417582417582, "no_caption_prob": 0.00020983527065254748}, {"id": 600, "seek": 388416, "start": 3889.2799999999997, "end": 3893.52, "text": " registering the old ports and move them little by little and that's, that's going to work fine. So", "tokens": [50364, 1222, 6186, 8754, 670, 26200, 379, 13, 407, 18160, 366, 9841, 293, 291, 393, 7280, 11, 291, 393, 1066, 50620, 50620, 47329, 264, 1331, 18160, 293, 1286, 552, 707, 538, 707, 293, 300, 311, 11, 300, 311, 516, 281, 589, 2489, 13, 407, 50832, 50832, 411, 264, 7576, 365, 2699, 76, 37645, 728, 404, 11, 291, 434, 1391, 516, 281, 312, 17436, 3319, 293, 368, 17436, 3319, 51160, 51160, 11671, 2375, 3467, 412, 264, 1192, 1496, 13, 400, 370, 291, 445, 1066, 5127, 777, 2375, 3467, 337, 264, 777, 51420, 51420, 4190, 291, 434, 516, 281, 2845, 13, 865, 13, 2743, 11, 321, 2378, 380, 2825, 466, 264, 17621, 13, 400, 370, 286, 1415, 281, 751, 51780, 51780], "temperature": 0.0, "avg_logprob": -0.09750759601593018, "compression_ratio": 1.7582417582417582, "no_caption_prob": 0.00020983527065254748}, {"id": 601, "seek": 388416, "start": 3893.52, "end": 3900.08, "text": " like the default with Elm TS interop, you're probably going to be serializing and de serializing", "tokens": [50364, 1222, 6186, 8754, 670, 26200, 379, 13, 407, 18160, 366, 9841, 293, 291, 393, 7280, 11, 291, 393, 1066, 50620, 50620, 47329, 264, 1331, 18160, 293, 1286, 552, 707, 538, 707, 293, 300, 311, 11, 300, 311, 516, 281, 589, 2489, 13, 407, 50832, 50832, 411, 264, 7576, 365, 2699, 76, 37645, 728, 404, 11, 291, 434, 1391, 516, 281, 312, 17436, 3319, 293, 368, 17436, 3319, 51160, 51160, 11671, 2375, 3467, 412, 264, 1192, 1496, 13, 400, 370, 291, 445, 1066, 5127, 777, 2375, 3467, 337, 264, 777, 51420, 51420, 4190, 291, 434, 516, 281, 2845, 13, 865, 13, 2743, 11, 321, 2378, 380, 2825, 466, 264, 17621, 13, 400, 370, 286, 1415, 281, 751, 51780, 51780], "temperature": 0.0, "avg_logprob": -0.09750759601593018, "compression_ratio": 1.7582417582417582, "no_caption_prob": 0.00020983527065254748}, {"id": 602, "seek": 388416, "start": 3900.08, "end": 3905.2799999999997, "text": " union custom types at the top level. And so you just keep adding new custom types for the new", "tokens": [50364, 1222, 6186, 8754, 670, 26200, 379, 13, 407, 18160, 366, 9841, 293, 291, 393, 7280, 11, 291, 393, 1066, 50620, 50620, 47329, 264, 1331, 18160, 293, 1286, 552, 707, 538, 707, 293, 300, 311, 11, 300, 311, 516, 281, 589, 2489, 13, 407, 50832, 50832, 411, 264, 7576, 365, 2699, 76, 37645, 728, 404, 11, 291, 434, 1391, 516, 281, 312, 17436, 3319, 293, 368, 17436, 3319, 51160, 51160, 11671, 2375, 3467, 412, 264, 1192, 1496, 13, 400, 370, 291, 445, 1066, 5127, 777, 2375, 3467, 337, 264, 777, 51420, 51420, 4190, 291, 434, 516, 281, 2845, 13, 865, 13, 2743, 11, 321, 2378, 380, 2825, 466, 264, 17621, 13, 400, 370, 286, 1415, 281, 751, 51780, 51780], "temperature": 0.0, "avg_logprob": -0.09750759601593018, "compression_ratio": 1.7582417582417582, "no_caption_prob": 0.00020983527065254748}, {"id": 603, "seek": 388416, "start": 3905.2799999999997, "end": 3912.48, "text": " values you're going to send. Yeah. Also, we haven't talked about the pricing. And so I wanted to talk", "tokens": [50364, 1222, 6186, 8754, 670, 26200, 379, 13, 407, 18160, 366, 9841, 293, 291, 393, 7280, 11, 291, 393, 1066, 50620, 50620, 47329, 264, 1331, 18160, 293, 1286, 552, 707, 538, 707, 293, 300, 311, 11, 300, 311, 516, 281, 589, 2489, 13, 407, 50832, 50832, 411, 264, 7576, 365, 2699, 76, 37645, 728, 404, 11, 291, 434, 1391, 516, 281, 312, 17436, 3319, 293, 368, 17436, 3319, 51160, 51160, 11671, 2375, 3467, 412, 264, 1192, 1496, 13, 400, 370, 291, 445, 1066, 5127, 777, 2375, 3467, 337, 264, 777, 51420, 51420, 4190, 291, 434, 516, 281, 2845, 13, 865, 13, 2743, 11, 321, 2378, 380, 2825, 466, 264, 17621, 13, 400, 370, 286, 1415, 281, 751, 51780, 51780], "temperature": 0.0, "avg_logprob": -0.09750759601593018, "compression_ratio": 1.7582417582417582, "no_caption_prob": 0.00020983527065254748}, {"id": 604, "seek": 391248, "start": 3912.48, "end": 3917.2, "text": " about this early on, but there were just so many details to talk about that we kind of didn't,", "tokens": [50364, 466, 341, 2440, 322, 11, 457, 456, 645, 445, 370, 867, 4365, 281, 751, 466, 300, 321, 733, 295, 994, 380, 11, 50600, 50600, 994, 380, 483, 456, 1939, 13, 1042, 11, 321, 767, 994, 380, 754, 2152, 300, 309, 390, 257, 4835, 1674, 13, 50820, 50820, 492, 630, 13, 1779, 13, 407, 309, 307, 264, 4965, 1507, 307, 439, 1737, 293, 486, 1009, 312, 300, 307, 264, 4965, 1507, 13, 51140, 51180, 440, 4965, 1507, 307, 264, 2699, 76, 37645, 728, 404, 2699, 76, 7372, 307, 13, 51400, 51432, 2699, 76, 37645, 31828, 13, 51488, 51488, 1079, 13, 1044, 291, 13, 440, 2699, 76, 37645, 31828, 2699, 76, 7372, 307, 1737, 293, 572, 13985, 8570, 13, 400, 291, 393, 764, 51776, 51776], "temperature": 0.0, "avg_logprob": -0.1345870819091797, "compression_ratio": 1.7611336032388665, "no_caption_prob": 0.0001535474875709042}, {"id": 605, "seek": 391248, "start": 3917.2, "end": 3921.6, "text": " didn't get there yet. Well, we actually didn't even mention that it was a paid product.", "tokens": [50364, 466, 341, 2440, 322, 11, 457, 456, 645, 445, 370, 867, 4365, 281, 751, 466, 300, 321, 733, 295, 994, 380, 11, 50600, 50600, 994, 380, 483, 456, 1939, 13, 1042, 11, 321, 767, 994, 380, 754, 2152, 300, 309, 390, 257, 4835, 1674, 13, 50820, 50820, 492, 630, 13, 1779, 13, 407, 309, 307, 264, 4965, 1507, 307, 439, 1737, 293, 486, 1009, 312, 300, 307, 264, 4965, 1507, 13, 51140, 51180, 440, 4965, 1507, 307, 264, 2699, 76, 37645, 728, 404, 2699, 76, 7372, 307, 13, 51400, 51432, 2699, 76, 37645, 31828, 13, 51488, 51488, 1079, 13, 1044, 291, 13, 440, 2699, 76, 37645, 31828, 2699, 76, 7372, 307, 1737, 293, 572, 13985, 8570, 13, 400, 291, 393, 764, 51776, 51776], "temperature": 0.0, "avg_logprob": -0.1345870819091797, "compression_ratio": 1.7611336032388665, "no_caption_prob": 0.0001535474875709042}, {"id": 606, "seek": 391248, "start": 3921.6, "end": 3928.0, "text": " We did. Right. So it is the core stuff is all free and will always be that is the core stuff.", "tokens": [50364, 466, 341, 2440, 322, 11, 457, 456, 645, 445, 370, 867, 4365, 281, 751, 466, 300, 321, 733, 295, 994, 380, 11, 50600, 50600, 994, 380, 483, 456, 1939, 13, 1042, 11, 321, 767, 994, 380, 754, 2152, 300, 309, 390, 257, 4835, 1674, 13, 50820, 50820, 492, 630, 13, 1779, 13, 407, 309, 307, 264, 4965, 1507, 307, 439, 1737, 293, 486, 1009, 312, 300, 307, 264, 4965, 1507, 13, 51140, 51180, 440, 4965, 1507, 307, 264, 2699, 76, 37645, 728, 404, 2699, 76, 7372, 307, 13, 51400, 51432, 2699, 76, 37645, 31828, 13, 51488, 51488, 1079, 13, 1044, 291, 13, 440, 2699, 76, 37645, 31828, 2699, 76, 7372, 307, 1737, 293, 572, 13985, 8570, 13, 400, 291, 393, 764, 51776, 51776], "temperature": 0.0, "avg_logprob": -0.1345870819091797, "compression_ratio": 1.7611336032388665, "no_caption_prob": 0.0001535474875709042}, {"id": 607, "seek": 391248, "start": 3928.8, "end": 3933.2, "text": " The core stuff is the Elm TS interop Elm package is.", "tokens": [50364, 466, 341, 2440, 322, 11, 457, 456, 645, 445, 370, 867, 4365, 281, 751, 466, 300, 321, 733, 295, 994, 380, 11, 50600, 50600, 994, 380, 483, 456, 1939, 13, 1042, 11, 321, 767, 994, 380, 754, 2152, 300, 309, 390, 257, 4835, 1674, 13, 50820, 50820, 492, 630, 13, 1779, 13, 407, 309, 307, 264, 4965, 1507, 307, 439, 1737, 293, 486, 1009, 312, 300, 307, 264, 4965, 1507, 13, 51140, 51180, 440, 4965, 1507, 307, 264, 2699, 76, 37645, 728, 404, 2699, 76, 7372, 307, 13, 51400, 51432, 2699, 76, 37645, 31828, 13, 51488, 51488, 1079, 13, 1044, 291, 13, 440, 2699, 76, 37645, 31828, 2699, 76, 7372, 307, 1737, 293, 572, 13985, 8570, 13, 400, 291, 393, 764, 51776, 51776], "temperature": 0.0, "avg_logprob": -0.1345870819091797, "compression_ratio": 1.7611336032388665, "no_caption_prob": 0.0001535474875709042}, {"id": 608, "seek": 391248, "start": 3933.84, "end": 3934.96, "text": " Elm TS JSON.", "tokens": [50364, 466, 341, 2440, 322, 11, 457, 456, 645, 445, 370, 867, 4365, 281, 751, 466, 300, 321, 733, 295, 994, 380, 11, 50600, 50600, 994, 380, 483, 456, 1939, 13, 1042, 11, 321, 767, 994, 380, 754, 2152, 300, 309, 390, 257, 4835, 1674, 13, 50820, 50820, 492, 630, 13, 1779, 13, 407, 309, 307, 264, 4965, 1507, 307, 439, 1737, 293, 486, 1009, 312, 300, 307, 264, 4965, 1507, 13, 51140, 51180, 440, 4965, 1507, 307, 264, 2699, 76, 37645, 728, 404, 2699, 76, 7372, 307, 13, 51400, 51432, 2699, 76, 37645, 31828, 13, 51488, 51488, 1079, 13, 1044, 291, 13, 440, 2699, 76, 37645, 31828, 2699, 76, 7372, 307, 1737, 293, 572, 13985, 8570, 13, 400, 291, 393, 764, 51776, 51776], "temperature": 0.0, "avg_logprob": -0.1345870819091797, "compression_ratio": 1.7611336032388665, "no_caption_prob": 0.0001535474875709042}, {"id": 609, "seek": 391248, "start": 3934.96, "end": 3940.72, "text": " Yes. Thank you. The Elm TS JSON Elm package is free and no strings attached. And you can use", "tokens": [50364, 466, 341, 2440, 322, 11, 457, 456, 645, 445, 370, 867, 4365, 281, 751, 466, 300, 321, 733, 295, 994, 380, 11, 50600, 50600, 994, 380, 483, 456, 1939, 13, 1042, 11, 321, 767, 994, 380, 754, 2152, 300, 309, 390, 257, 4835, 1674, 13, 50820, 50820, 492, 630, 13, 1779, 13, 407, 309, 307, 264, 4965, 1507, 307, 439, 1737, 293, 486, 1009, 312, 300, 307, 264, 4965, 1507, 13, 51140, 51180, 440, 4965, 1507, 307, 264, 2699, 76, 37645, 728, 404, 2699, 76, 7372, 307, 13, 51400, 51432, 2699, 76, 37645, 31828, 13, 51488, 51488, 1079, 13, 1044, 291, 13, 440, 2699, 76, 37645, 31828, 2699, 76, 7372, 307, 1737, 293, 572, 13985, 8570, 13, 400, 291, 393, 764, 51776, 51776], "temperature": 0.0, "avg_logprob": -0.1345870819091797, "compression_ratio": 1.7611336032388665, "no_caption_prob": 0.0001535474875709042}, {"id": 610, "seek": 394072, "start": 3940.72, "end": 3948.0, "text": " that for other projects. The so I'm going to release a free version of the CLI at the time", "tokens": [50364, 300, 337, 661, 4455, 13, 440, 370, 286, 478, 516, 281, 4374, 257, 1737, 3037, 295, 264, 12855, 40, 412, 264, 565, 50728, 50728, 321, 434, 6613, 11, 321, 434, 445, 21993, 493, 257, 5395, 9861, 13, 407, 300, 1737, 3037, 295, 264, 12855, 40, 307, 767, 50992, 50992, 516, 281, 360, 264, 721, 300, 321, 7619, 322, 341, 7367, 13, 407, 321, 767, 2378, 380, 1939, 2825, 466, 51196, 51196, 604, 447, 4122, 13, 407, 25511, 1203, 300, 321, 600, 2825, 466, 370, 1400, 575, 668, 2435, 337, 51476, 51476, 1737, 13, 13268, 13, 13268, 13, 1033, 13, 407, 11, 370, 4696, 5079, 311, 718, 760, 570, 291, 393, 360, 439, 264, 721, 321, 600, 51840, 51840], "temperature": 0.0, "avg_logprob": -0.04960318406422933, "compression_ratio": 1.7214285714285715, "no_caption_prob": 0.00023775084991939366}, {"id": 611, "seek": 394072, "start": 3948.0, "end": 3953.2799999999997, "text": " we're recording, we're just wrapping up a closed beta. So that free version of the CLI is actually", "tokens": [50364, 300, 337, 661, 4455, 13, 440, 370, 286, 478, 516, 281, 4374, 257, 1737, 3037, 295, 264, 12855, 40, 412, 264, 565, 50728, 50728, 321, 434, 6613, 11, 321, 434, 445, 21993, 493, 257, 5395, 9861, 13, 407, 300, 1737, 3037, 295, 264, 12855, 40, 307, 767, 50992, 50992, 516, 281, 360, 264, 721, 300, 321, 7619, 322, 341, 7367, 13, 407, 321, 767, 2378, 380, 1939, 2825, 466, 51196, 51196, 604, 447, 4122, 13, 407, 25511, 1203, 300, 321, 600, 2825, 466, 370, 1400, 575, 668, 2435, 337, 51476, 51476, 1737, 13, 13268, 13, 13268, 13, 1033, 13, 407, 11, 370, 4696, 5079, 311, 718, 760, 570, 291, 393, 360, 439, 264, 721, 321, 600, 51840, 51840], "temperature": 0.0, "avg_logprob": -0.04960318406422933, "compression_ratio": 1.7214285714285715, "no_caption_prob": 0.00023775084991939366}, {"id": 612, "seek": 394072, "start": 3953.2799999999997, "end": 3957.3599999999997, "text": " going to do the things that we described on this podcast. So we actually haven't yet talked about", "tokens": [50364, 300, 337, 661, 4455, 13, 440, 370, 286, 478, 516, 281, 4374, 257, 1737, 3037, 295, 264, 12855, 40, 412, 264, 565, 50728, 50728, 321, 434, 6613, 11, 321, 434, 445, 21993, 493, 257, 5395, 9861, 13, 407, 300, 1737, 3037, 295, 264, 12855, 40, 307, 767, 50992, 50992, 516, 281, 360, 264, 721, 300, 321, 7619, 322, 341, 7367, 13, 407, 321, 767, 2378, 380, 1939, 2825, 466, 51196, 51196, 604, 447, 4122, 13, 407, 25511, 1203, 300, 321, 600, 2825, 466, 370, 1400, 575, 668, 2435, 337, 51476, 51476, 1737, 13, 13268, 13, 13268, 13, 1033, 13, 407, 11, 370, 4696, 5079, 311, 718, 760, 570, 291, 393, 360, 439, 264, 721, 321, 600, 51840, 51840], "temperature": 0.0, "avg_logprob": -0.04960318406422933, "compression_ratio": 1.7214285714285715, "no_caption_prob": 0.00023775084991939366}, {"id": 613, "seek": 394072, "start": 3957.3599999999997, "end": 3962.9599999999996, "text": " any pro features. So fortunately everything that we've talked about so far has been available for", "tokens": [50364, 300, 337, 661, 4455, 13, 440, 370, 286, 478, 516, 281, 4374, 257, 1737, 3037, 295, 264, 12855, 40, 412, 264, 565, 50728, 50728, 321, 434, 6613, 11, 321, 434, 445, 21993, 493, 257, 5395, 9861, 13, 407, 300, 1737, 3037, 295, 264, 12855, 40, 307, 767, 50992, 50992, 516, 281, 360, 264, 721, 300, 321, 7619, 322, 341, 7367, 13, 407, 321, 767, 2378, 380, 1939, 2825, 466, 51196, 51196, 604, 447, 4122, 13, 407, 25511, 1203, 300, 321, 600, 2825, 466, 370, 1400, 575, 668, 2435, 337, 51476, 51476, 1737, 13, 13268, 13, 13268, 13, 1033, 13, 407, 11, 370, 4696, 5079, 311, 718, 760, 570, 291, 393, 360, 439, 264, 721, 321, 600, 51840, 51840], "temperature": 0.0, "avg_logprob": -0.04960318406422933, "compression_ratio": 1.7214285714285715, "no_caption_prob": 0.00023775084991939366}, {"id": 614, "seek": 394072, "start": 3962.9599999999996, "end": 3970.24, "text": " free. Yay. Yay. Okay. So, so hopefully nobody's let down because you can do all the things we've", "tokens": [50364, 300, 337, 661, 4455, 13, 440, 370, 286, 478, 516, 281, 4374, 257, 1737, 3037, 295, 264, 12855, 40, 412, 264, 565, 50728, 50728, 321, 434, 6613, 11, 321, 434, 445, 21993, 493, 257, 5395, 9861, 13, 407, 300, 1737, 3037, 295, 264, 12855, 40, 307, 767, 50992, 50992, 516, 281, 360, 264, 721, 300, 321, 7619, 322, 341, 7367, 13, 407, 321, 767, 2378, 380, 1939, 2825, 466, 51196, 51196, 604, 447, 4122, 13, 407, 25511, 1203, 300, 321, 600, 2825, 466, 370, 1400, 575, 668, 2435, 337, 51476, 51476, 1737, 13, 13268, 13, 13268, 13, 1033, 13, 407, 11, 370, 4696, 5079, 311, 718, 760, 570, 291, 393, 360, 439, 264, 721, 321, 600, 51840, 51840], "temperature": 0.0, "avg_logprob": -0.04960318406422933, "compression_ratio": 1.7214285714285715, "no_caption_prob": 0.00023775084991939366}, {"id": 615, "seek": 397024, "start": 3970.24, "end": 3974.72, "text": " talked about so far. The pro version, and this was something very important to me. I wanted to", "tokens": [50364, 2825, 466, 370, 1400, 13, 440, 447, 3037, 11, 293, 341, 390, 746, 588, 1021, 281, 385, 13, 286, 1415, 281, 50588, 50636, 362, 264, 447, 1507, 312, 411, 40961, 337, 1936, 11, 498, 291, 483, 257, 688, 295, 2158, 490, 2699, 76, 37645, 728, 404, 11, 50936, 50936, 498, 291, 10687, 322, 309, 337, 428, 1606, 293, 291, 434, 411, 11, 876, 11, 341, 307, 341, 307, 534, 4420, 11, 550, 291, 51152, 51152, 393, 11, 291, 393, 2256, 309, 498, 291, 1116, 411, 13, 400, 286, 1454, 11, 286, 1454, 264, 2857, 4835, 4122, 366, 4420, 13, 407, 264, 51368, 51408, 447, 4122, 4362, 4090, 1230, 472, 11, 257, 44094, 278, 2290, 11, 597, 307, 257, 3670, 724, 300, 291, 11, 51804, 51804], "temperature": 0.0, "avg_logprob": -0.0818248057928611, "compression_ratio": 1.6701754385964913, "no_caption_prob": 0.00016343100287485868}, {"id": 616, "seek": 397024, "start": 3975.68, "end": 3981.68, "text": " have the pro stuff be like extras for basically, if you get a lot of value from Elm TS interop,", "tokens": [50364, 2825, 466, 370, 1400, 13, 440, 447, 3037, 11, 293, 341, 390, 746, 588, 1021, 281, 385, 13, 286, 1415, 281, 50588, 50636, 362, 264, 447, 1507, 312, 411, 40961, 337, 1936, 11, 498, 291, 483, 257, 688, 295, 2158, 490, 2699, 76, 37645, 728, 404, 11, 50936, 50936, 498, 291, 10687, 322, 309, 337, 428, 1606, 293, 291, 434, 411, 11, 876, 11, 341, 307, 341, 307, 534, 4420, 11, 550, 291, 51152, 51152, 393, 11, 291, 393, 2256, 309, 498, 291, 1116, 411, 13, 400, 286, 1454, 11, 286, 1454, 264, 2857, 4835, 4122, 366, 4420, 13, 407, 264, 51368, 51408, 447, 4122, 4362, 4090, 1230, 472, 11, 257, 44094, 278, 2290, 11, 597, 307, 257, 3670, 724, 300, 291, 11, 51804, 51804], "temperature": 0.0, "avg_logprob": -0.0818248057928611, "compression_ratio": 1.6701754385964913, "no_caption_prob": 0.00016343100287485868}, {"id": 617, "seek": 397024, "start": 3981.68, "end": 3986.0, "text": " if you rely on it for your business and you're like, Oh, this is this is really useful, then you", "tokens": [50364, 2825, 466, 370, 1400, 13, 440, 447, 3037, 11, 293, 341, 390, 746, 588, 1021, 281, 385, 13, 286, 1415, 281, 50588, 50636, 362, 264, 447, 1507, 312, 411, 40961, 337, 1936, 11, 498, 291, 483, 257, 688, 295, 2158, 490, 2699, 76, 37645, 728, 404, 11, 50936, 50936, 498, 291, 10687, 322, 309, 337, 428, 1606, 293, 291, 434, 411, 11, 876, 11, 341, 307, 341, 307, 534, 4420, 11, 550, 291, 51152, 51152, 393, 11, 291, 393, 2256, 309, 498, 291, 1116, 411, 13, 400, 286, 1454, 11, 286, 1454, 264, 2857, 4835, 4122, 366, 4420, 13, 407, 264, 51368, 51408, 447, 4122, 4362, 4090, 1230, 472, 11, 257, 44094, 278, 2290, 11, 597, 307, 257, 3670, 724, 300, 291, 11, 51804, 51804], "temperature": 0.0, "avg_logprob": -0.0818248057928611, "compression_ratio": 1.6701754385964913, "no_caption_prob": 0.00016343100287485868}, {"id": 618, "seek": 397024, "start": 3986.0, "end": 3990.3199999999997, "text": " can, you can buy it if you'd like. And I hope, I hope the extra paid features are useful. So the", "tokens": [50364, 2825, 466, 370, 1400, 13, 440, 447, 3037, 11, 293, 341, 390, 746, 588, 1021, 281, 385, 13, 286, 1415, 281, 50588, 50636, 362, 264, 447, 1507, 312, 411, 40961, 337, 1936, 11, 498, 291, 483, 257, 688, 295, 2158, 490, 2699, 76, 37645, 728, 404, 11, 50936, 50936, 498, 291, 10687, 322, 309, 337, 428, 1606, 293, 291, 434, 411, 11, 876, 11, 341, 307, 341, 307, 534, 4420, 11, 550, 291, 51152, 51152, 393, 11, 291, 393, 2256, 309, 498, 291, 1116, 411, 13, 400, 286, 1454, 11, 286, 1454, 264, 2857, 4835, 4122, 366, 4420, 13, 407, 264, 51368, 51408, 447, 4122, 4362, 4090, 1230, 472, 11, 257, 44094, 278, 2290, 11, 597, 307, 257, 3670, 724, 300, 291, 11, 51804, 51804], "temperature": 0.0, "avg_logprob": -0.0818248057928611, "compression_ratio": 1.6701754385964913, "no_caption_prob": 0.00016343100287485868}, {"id": 619, "seek": 397024, "start": 3991.12, "end": 3999.04, "text": " pro features currently include number one, a scaffolding tool, which is a web app that you,", "tokens": [50364, 2825, 466, 370, 1400, 13, 440, 447, 3037, 11, 293, 341, 390, 746, 588, 1021, 281, 385, 13, 286, 1415, 281, 50588, 50636, 362, 264, 447, 1507, 312, 411, 40961, 337, 1936, 11, 498, 291, 483, 257, 688, 295, 2158, 490, 2699, 76, 37645, 728, 404, 11, 50936, 50936, 498, 291, 10687, 322, 309, 337, 428, 1606, 293, 291, 434, 411, 11, 876, 11, 341, 307, 341, 307, 534, 4420, 11, 550, 291, 51152, 51152, 393, 11, 291, 393, 2256, 309, 498, 291, 1116, 411, 13, 400, 286, 1454, 11, 286, 1454, 264, 2857, 4835, 4122, 366, 4420, 13, 407, 264, 51368, 51408, 447, 4122, 4362, 4090, 1230, 472, 11, 257, 44094, 278, 2290, 11, 597, 307, 257, 3670, 724, 300, 291, 11, 51804, 51804], "temperature": 0.0, "avg_logprob": -0.0818248057928611, "compression_ratio": 1.6701754385964913, "no_caption_prob": 0.00016343100287485868}, {"id": 620, "seek": 399904, "start": 3999.04, "end": 4005.84, "text": " you load in your browser, you give it a TypeScript types as input and it generates encoders and", "tokens": [50364, 291, 3677, 294, 428, 11185, 11, 291, 976, 309, 257, 15576, 14237, 3467, 382, 4846, 293, 309, 23815, 2058, 378, 433, 293, 50704, 50704, 979, 378, 433, 11, 3009, 337, 20828, 770, 24914, 13, 1743, 264, 472, 321, 2825, 466, 11, 264, 2010, 4195, 51004, 51004, 9190, 20828, 770, 11671, 13, 467, 393, 360, 257, 1238, 29063, 665, 1691, 13, 2754, 365, 512, 6179, 20828, 770, 51272, 51272, 24914, 411, 300, 11, 309, 754, 23815, 411, 2699, 76, 3467, 11, 2699, 76, 2375, 3467, 337, 291, 13, 400, 300, 311, 411, 51516, 51560, 2891, 935, 13, 467, 311, 264, 1627, 551, 307, 291, 747, 300, 44094, 292, 3089, 382, 428, 2891, 935, 13, 51848, 51848], "temperature": 0.0, "avg_logprob": -0.12515469901582116, "compression_ratio": 1.788679245283019, "no_caption_prob": 0.0001442416396457702}, {"id": 621, "seek": 399904, "start": 4005.84, "end": 4011.84, "text": " decoders, including for discriminated unions. Like the one we talked about, the type user", "tokens": [50364, 291, 3677, 294, 428, 11185, 11, 291, 976, 309, 257, 15576, 14237, 3467, 382, 4846, 293, 309, 23815, 2058, 378, 433, 293, 50704, 50704, 979, 378, 433, 11, 3009, 337, 20828, 770, 24914, 13, 1743, 264, 472, 321, 2825, 466, 11, 264, 2010, 4195, 51004, 51004, 9190, 20828, 770, 11671, 13, 467, 393, 360, 257, 1238, 29063, 665, 1691, 13, 2754, 365, 512, 6179, 20828, 770, 51272, 51272, 24914, 411, 300, 11, 309, 754, 23815, 411, 2699, 76, 3467, 11, 2699, 76, 2375, 3467, 337, 291, 13, 400, 300, 311, 411, 51516, 51560, 2891, 935, 13, 467, 311, 264, 1627, 551, 307, 291, 747, 300, 44094, 292, 3089, 382, 428, 2891, 935, 13, 51848, 51848], "temperature": 0.0, "avg_logprob": -0.12515469901582116, "compression_ratio": 1.788679245283019, "no_caption_prob": 0.0001442416396457702}, {"id": 622, "seek": 399904, "start": 4011.84, "end": 4017.2, "text": " holds discriminated union. It can do a pretty darn good job. Even with some complicated discriminated", "tokens": [50364, 291, 3677, 294, 428, 11185, 11, 291, 976, 309, 257, 15576, 14237, 3467, 382, 4846, 293, 309, 23815, 2058, 378, 433, 293, 50704, 50704, 979, 378, 433, 11, 3009, 337, 20828, 770, 24914, 13, 1743, 264, 472, 321, 2825, 466, 11, 264, 2010, 4195, 51004, 51004, 9190, 20828, 770, 11671, 13, 467, 393, 360, 257, 1238, 29063, 665, 1691, 13, 2754, 365, 512, 6179, 20828, 770, 51272, 51272, 24914, 411, 300, 11, 309, 754, 23815, 411, 2699, 76, 3467, 11, 2699, 76, 2375, 3467, 337, 291, 13, 400, 300, 311, 411, 51516, 51560, 2891, 935, 13, 467, 311, 264, 1627, 551, 307, 291, 747, 300, 44094, 292, 3089, 382, 428, 2891, 935, 13, 51848, 51848], "temperature": 0.0, "avg_logprob": -0.12515469901582116, "compression_ratio": 1.788679245283019, "no_caption_prob": 0.0001442416396457702}, {"id": 623, "seek": 399904, "start": 4017.2, "end": 4022.08, "text": " unions like that, it even generates like Elm types, Elm custom types for you. And that's like", "tokens": [50364, 291, 3677, 294, 428, 11185, 11, 291, 976, 309, 257, 15576, 14237, 3467, 382, 4846, 293, 309, 23815, 2058, 378, 433, 293, 50704, 50704, 979, 378, 433, 11, 3009, 337, 20828, 770, 24914, 13, 1743, 264, 472, 321, 2825, 466, 11, 264, 2010, 4195, 51004, 51004, 9190, 20828, 770, 11671, 13, 467, 393, 360, 257, 1238, 29063, 665, 1691, 13, 2754, 365, 512, 6179, 20828, 770, 51272, 51272, 24914, 411, 300, 11, 309, 754, 23815, 411, 2699, 76, 3467, 11, 2699, 76, 2375, 3467, 337, 291, 13, 400, 300, 311, 411, 51516, 51560, 2891, 935, 13, 467, 311, 264, 1627, 551, 307, 291, 747, 300, 44094, 292, 3089, 382, 428, 2891, 935, 13, 51848, 51848], "temperature": 0.0, "avg_logprob": -0.12515469901582116, "compression_ratio": 1.788679245283019, "no_caption_prob": 0.0001442416396457702}, {"id": 624, "seek": 399904, "start": 4022.96, "end": 4028.72, "text": " starting point. It's the cool thing is you take that scaffolded code as your starting point.", "tokens": [50364, 291, 3677, 294, 428, 11185, 11, 291, 976, 309, 257, 15576, 14237, 3467, 382, 4846, 293, 309, 23815, 2058, 378, 433, 293, 50704, 50704, 979, 378, 433, 11, 3009, 337, 20828, 770, 24914, 13, 1743, 264, 472, 321, 2825, 466, 11, 264, 2010, 4195, 51004, 51004, 9190, 20828, 770, 11671, 13, 467, 393, 360, 257, 1238, 29063, 665, 1691, 13, 2754, 365, 512, 6179, 20828, 770, 51272, 51272, 24914, 411, 300, 11, 309, 754, 23815, 411, 2699, 76, 3467, 11, 2699, 76, 2375, 3467, 337, 291, 13, 400, 300, 311, 411, 51516, 51560, 2891, 935, 13, 467, 311, 264, 1627, 551, 307, 291, 747, 300, 44094, 292, 3089, 382, 428, 2891, 935, 13, 51848, 51848], "temperature": 0.0, "avg_logprob": -0.12515469901582116, "compression_ratio": 1.788679245283019, "no_caption_prob": 0.0001442416396457702}, {"id": 625, "seek": 402872, "start": 4028.72, "end": 4034.16, "text": " You copy it over. So now it's, now it's yours. Now you own it, not the scaffolding tool. And", "tokens": [50364, 509, 5055, 309, 670, 13, 407, 586, 309, 311, 11, 586, 309, 311, 6342, 13, 823, 291, 1065, 309, 11, 406, 264, 44094, 278, 2290, 13, 400, 50636, 50672, 291, 393, 1319, 309, 439, 291, 528, 13, 400, 562, 291, 1319, 309, 11, 264, 2699, 76, 37645, 728, 404, 11, 291, 458, 11, 10833, 2010, 50964, 50964, 21988, 366, 516, 281, 5031, 264, 2962, 291, 652, 281, 428, 3089, 13, 407, 291, 1065, 309, 11, 406, 264, 51220, 51220, 44094, 278, 2290, 13, 865, 13, 286, 600, 1612, 309, 294, 3069, 293, 309, 23815, 257, 688, 295, 3089, 13, 821, 307, 2158, 51628, 51628], "temperature": 0.0, "avg_logprob": -0.07976639045859282, "compression_ratio": 1.75, "no_caption_prob": 1.2606765267264564e-05}, {"id": 626, "seek": 402872, "start": 4034.8799999999997, "end": 4040.72, "text": " you can change it all you want. And when you change it, the Elm TS interop, you know, generated type", "tokens": [50364, 509, 5055, 309, 670, 13, 407, 586, 309, 311, 11, 586, 309, 311, 6342, 13, 823, 291, 1065, 309, 11, 406, 264, 44094, 278, 2290, 13, 400, 50636, 50672, 291, 393, 1319, 309, 439, 291, 528, 13, 400, 562, 291, 1319, 309, 11, 264, 2699, 76, 37645, 728, 404, 11, 291, 458, 11, 10833, 2010, 50964, 50964, 21988, 366, 516, 281, 5031, 264, 2962, 291, 652, 281, 428, 3089, 13, 407, 291, 1065, 309, 11, 406, 264, 51220, 51220, 44094, 278, 2290, 13, 865, 13, 286, 600, 1612, 309, 294, 3069, 293, 309, 23815, 257, 688, 295, 3089, 13, 821, 307, 2158, 51628, 51628], "temperature": 0.0, "avg_logprob": -0.07976639045859282, "compression_ratio": 1.75, "no_caption_prob": 1.2606765267264564e-05}, {"id": 627, "seek": 402872, "start": 4040.72, "end": 4045.8399999999997, "text": " definitions are going to reflect the changes you make to your code. So you own it, not the", "tokens": [50364, 509, 5055, 309, 670, 13, 407, 586, 309, 311, 11, 586, 309, 311, 6342, 13, 823, 291, 1065, 309, 11, 406, 264, 44094, 278, 2290, 13, 400, 50636, 50672, 291, 393, 1319, 309, 439, 291, 528, 13, 400, 562, 291, 1319, 309, 11, 264, 2699, 76, 37645, 728, 404, 11, 291, 458, 11, 10833, 2010, 50964, 50964, 21988, 366, 516, 281, 5031, 264, 2962, 291, 652, 281, 428, 3089, 13, 407, 291, 1065, 309, 11, 406, 264, 51220, 51220, 44094, 278, 2290, 13, 865, 13, 286, 600, 1612, 309, 294, 3069, 293, 309, 23815, 257, 688, 295, 3089, 13, 821, 307, 2158, 51628, 51628], "temperature": 0.0, "avg_logprob": -0.07976639045859282, "compression_ratio": 1.75, "no_caption_prob": 1.2606765267264564e-05}, {"id": 628, "seek": 402872, "start": 4045.8399999999997, "end": 4054.0, "text": " scaffolding tool. Yeah. I've seen it in action and it generates a lot of code. There is value", "tokens": [50364, 509, 5055, 309, 670, 13, 407, 586, 309, 311, 11, 586, 309, 311, 6342, 13, 823, 291, 1065, 309, 11, 406, 264, 44094, 278, 2290, 13, 400, 50636, 50672, 291, 393, 1319, 309, 439, 291, 528, 13, 400, 562, 291, 1319, 309, 11, 264, 2699, 76, 37645, 728, 404, 11, 291, 458, 11, 10833, 2010, 50964, 50964, 21988, 366, 516, 281, 5031, 264, 2962, 291, 652, 281, 428, 3089, 13, 407, 291, 1065, 309, 11, 406, 264, 51220, 51220, 44094, 278, 2290, 13, 865, 13, 286, 600, 1612, 309, 294, 3069, 293, 309, 23815, 257, 688, 295, 3089, 13, 821, 307, 2158, 51628, 51628], "temperature": 0.0, "avg_logprob": -0.07976639045859282, "compression_ratio": 1.75, "no_caption_prob": 1.2606765267264564e-05}, {"id": 629, "seek": 405400, "start": 4054.0, "end": 4060.72, "text": " in this tool. Yeah. I can tell. Yeah. It generates and it generates an encoder and a decoder for you.", "tokens": [50364, 294, 341, 2290, 13, 865, 13, 286, 393, 980, 13, 865, 13, 467, 23815, 293, 309, 23815, 364, 2058, 19866, 293, 257, 979, 19866, 337, 291, 13, 50700, 50700, 407, 291, 393, 445, 2010, 257, 15576, 14237, 2010, 293, 309, 2709, 291, 11, 293, 291, 393, 445, 5055, 2035, 291, 50980, 50980, 528, 490, 309, 293, 764, 294, 428, 3089, 13, 407, 1338, 11, 286, 519, 309, 603, 312, 1596, 13239, 13, 876, 11, 291, 486, 643, 51172, 51172, 281, 8460, 257, 3089, 66, 586, 13, 286, 1062, 13, 865, 13, 286, 1062, 360, 300, 886, 13, 7010, 13, 2205, 3668, 13, 400, 1310, 286, 603, 909, 257, 51516, 51516, 6477, 2960, 370, 291, 393, 411, 1888, 597, 2306, 281, 8460, 281, 5407, 264, 5658, 13, 583, 1338, 11, 309, 311, 257, 11, 51756, 51756], "temperature": 0.0, "avg_logprob": -0.12073587849192376, "compression_ratio": 1.7740740740740741, "no_caption_prob": 3.882167948177084e-05}, {"id": 630, "seek": 405400, "start": 4060.72, "end": 4066.32, "text": " So you can just type a TypeScript type and it gives you, and you can just copy whatever you", "tokens": [50364, 294, 341, 2290, 13, 865, 13, 286, 393, 980, 13, 865, 13, 467, 23815, 293, 309, 23815, 364, 2058, 19866, 293, 257, 979, 19866, 337, 291, 13, 50700, 50700, 407, 291, 393, 445, 2010, 257, 15576, 14237, 2010, 293, 309, 2709, 291, 11, 293, 291, 393, 445, 5055, 2035, 291, 50980, 50980, 528, 490, 309, 293, 764, 294, 428, 3089, 13, 407, 1338, 11, 286, 519, 309, 603, 312, 1596, 13239, 13, 876, 11, 291, 486, 643, 51172, 51172, 281, 8460, 257, 3089, 66, 586, 13, 286, 1062, 13, 865, 13, 286, 1062, 360, 300, 886, 13, 7010, 13, 2205, 3668, 13, 400, 1310, 286, 603, 909, 257, 51516, 51516, 6477, 2960, 370, 291, 393, 411, 1888, 597, 2306, 281, 8460, 281, 5407, 264, 5658, 13, 583, 1338, 11, 309, 311, 257, 11, 51756, 51756], "temperature": 0.0, "avg_logprob": -0.12073587849192376, "compression_ratio": 1.7740740740740741, "no_caption_prob": 3.882167948177084e-05}, {"id": 631, "seek": 405400, "start": 4066.32, "end": 4070.16, "text": " want from it and use in your code. So yeah, I think it'll be quite handy. Oh, you will need", "tokens": [50364, 294, 341, 2290, 13, 865, 13, 286, 393, 980, 13, 865, 13, 467, 23815, 293, 309, 23815, 364, 2058, 19866, 293, 257, 979, 19866, 337, 291, 13, 50700, 50700, 407, 291, 393, 445, 2010, 257, 15576, 14237, 2010, 293, 309, 2709, 291, 11, 293, 291, 393, 445, 5055, 2035, 291, 50980, 50980, 528, 490, 309, 293, 764, 294, 428, 3089, 13, 407, 1338, 11, 286, 519, 309, 603, 312, 1596, 13239, 13, 876, 11, 291, 486, 643, 51172, 51172, 281, 8460, 257, 3089, 66, 586, 13, 286, 1062, 13, 865, 13, 286, 1062, 360, 300, 886, 13, 7010, 13, 2205, 3668, 13, 400, 1310, 286, 603, 909, 257, 51516, 51516, 6477, 2960, 370, 291, 393, 411, 1888, 597, 2306, 281, 8460, 281, 5407, 264, 5658, 13, 583, 1338, 11, 309, 311, 257, 11, 51756, 51756], "temperature": 0.0, "avg_logprob": -0.12073587849192376, "compression_ratio": 1.7740740740740741, "no_caption_prob": 3.882167948177084e-05}, {"id": 632, "seek": 405400, "start": 4070.16, "end": 4077.04, "text": " to generate a codec now. I might. Yeah. I might do that too. Yep. Good luck. And maybe I'll add a", "tokens": [50364, 294, 341, 2290, 13, 865, 13, 286, 393, 980, 13, 865, 13, 467, 23815, 293, 309, 23815, 364, 2058, 19866, 293, 257, 979, 19866, 337, 291, 13, 50700, 50700, 407, 291, 393, 445, 2010, 257, 15576, 14237, 2010, 293, 309, 2709, 291, 11, 293, 291, 393, 445, 5055, 2035, 291, 50980, 50980, 528, 490, 309, 293, 764, 294, 428, 3089, 13, 407, 1338, 11, 286, 519, 309, 603, 312, 1596, 13239, 13, 876, 11, 291, 486, 643, 51172, 51172, 281, 8460, 257, 3089, 66, 586, 13, 286, 1062, 13, 865, 13, 286, 1062, 360, 300, 886, 13, 7010, 13, 2205, 3668, 13, 400, 1310, 286, 603, 909, 257, 51516, 51516, 6477, 2960, 370, 291, 393, 411, 1888, 597, 2306, 281, 8460, 281, 5407, 264, 5658, 13, 583, 1338, 11, 309, 311, 257, 11, 51756, 51756], "temperature": 0.0, "avg_logprob": -0.12073587849192376, "compression_ratio": 1.7740740740740741, "no_caption_prob": 3.882167948177084e-05}, {"id": 633, "seek": 405400, "start": 4077.04, "end": 4081.84, "text": " radio button so you can like pick which ones to generate to reduce the noise. But yeah, it's a,", "tokens": [50364, 294, 341, 2290, 13, 865, 13, 286, 393, 980, 13, 865, 13, 467, 23815, 293, 309, 23815, 364, 2058, 19866, 293, 257, 979, 19866, 337, 291, 13, 50700, 50700, 407, 291, 393, 445, 2010, 257, 15576, 14237, 2010, 293, 309, 2709, 291, 11, 293, 291, 393, 445, 5055, 2035, 291, 50980, 50980, 528, 490, 309, 293, 764, 294, 428, 3089, 13, 407, 1338, 11, 286, 519, 309, 603, 312, 1596, 13239, 13, 876, 11, 291, 486, 643, 51172, 51172, 281, 8460, 257, 3089, 66, 586, 13, 286, 1062, 13, 865, 13, 286, 1062, 360, 300, 886, 13, 7010, 13, 2205, 3668, 13, 400, 1310, 286, 603, 909, 257, 51516, 51516, 6477, 2960, 370, 291, 393, 411, 1888, 597, 2306, 281, 8460, 281, 5407, 264, 5658, 13, 583, 1338, 11, 309, 311, 257, 11, 51756, 51756], "temperature": 0.0, "avg_logprob": -0.12073587849192376, "compression_ratio": 1.7740740740740741, "no_caption_prob": 3.882167948177084e-05}, {"id": 634, "seek": 408184, "start": 4081.84, "end": 4086.1600000000003, "text": " I'm really happy with it. I think it's, I think it's a cool pro feature that you can do without,", "tokens": [50364, 286, 478, 534, 2055, 365, 309, 13, 286, 519, 309, 311, 11, 286, 519, 309, 311, 257, 1627, 447, 4111, 300, 291, 393, 360, 1553, 11, 50580, 50580, 291, 393, 360, 1203, 291, 643, 281, 1553, 309, 11, 457, 286, 1454, 309, 307, 544, 42735, 21401, 337, 561, 567, 915, 50864, 50864, 2158, 294, 264, 2290, 13, 400, 264, 661, 4835, 4111, 307, 364, 426, 18819, 7372, 11, 597, 286, 976, 291, 2105, 281, 562, 51300, 51300, 291, 11, 562, 291, 1689, 13, 400, 437, 300, 775, 307, 2831, 813, 1419, 257, 2167, 2375, 2010, 300, 309, 8855, 51688, 51688], "temperature": 0.0, "avg_logprob": -0.07500170726402133, "compression_ratio": 1.6781115879828326, "no_caption_prob": 0.0003100931935478002}, {"id": 635, "seek": 408184, "start": 4086.1600000000003, "end": 4091.84, "text": " you can do everything you need to without it, but I hope it is more ergonomic for people who find", "tokens": [50364, 286, 478, 534, 2055, 365, 309, 13, 286, 519, 309, 311, 11, 286, 519, 309, 311, 257, 1627, 447, 4111, 300, 291, 393, 360, 1553, 11, 50580, 50580, 291, 393, 360, 1203, 291, 643, 281, 1553, 309, 11, 457, 286, 1454, 309, 307, 544, 42735, 21401, 337, 561, 567, 915, 50864, 50864, 2158, 294, 264, 2290, 13, 400, 264, 661, 4835, 4111, 307, 364, 426, 18819, 7372, 11, 597, 286, 976, 291, 2105, 281, 562, 51300, 51300, 291, 11, 562, 291, 1689, 13, 400, 437, 300, 775, 307, 2831, 813, 1419, 257, 2167, 2375, 2010, 300, 309, 8855, 51688, 51688], "temperature": 0.0, "avg_logprob": -0.07500170726402133, "compression_ratio": 1.6781115879828326, "no_caption_prob": 0.0003100931935478002}, {"id": 636, "seek": 408184, "start": 4091.84, "end": 4100.56, "text": " value in the tool. And the other paid feature is an NPM package, which I give you access to when", "tokens": [50364, 286, 478, 534, 2055, 365, 309, 13, 286, 519, 309, 311, 11, 286, 519, 309, 311, 257, 1627, 447, 4111, 300, 291, 393, 360, 1553, 11, 50580, 50580, 291, 393, 360, 1203, 291, 643, 281, 1553, 309, 11, 457, 286, 1454, 309, 307, 544, 42735, 21401, 337, 561, 567, 915, 50864, 50864, 2158, 294, 264, 2290, 13, 400, 264, 661, 4835, 4111, 307, 364, 426, 18819, 7372, 11, 597, 286, 976, 291, 2105, 281, 562, 51300, 51300, 291, 11, 562, 291, 1689, 13, 400, 437, 300, 775, 307, 2831, 813, 1419, 257, 2167, 2375, 2010, 300, 309, 8855, 51688, 51688], "temperature": 0.0, "avg_logprob": -0.07500170726402133, "compression_ratio": 1.6781115879828326, "no_caption_prob": 0.0003100931935478002}, {"id": 637, "seek": 408184, "start": 4100.56, "end": 4108.32, "text": " you, when you pay. And what that does is rather than having a single custom type that it represents", "tokens": [50364, 286, 478, 534, 2055, 365, 309, 13, 286, 519, 309, 311, 11, 286, 519, 309, 311, 257, 1627, 447, 4111, 300, 291, 393, 360, 1553, 11, 50580, 50580, 291, 393, 360, 1203, 291, 643, 281, 1553, 309, 11, 457, 286, 1454, 309, 307, 544, 42735, 21401, 337, 561, 567, 915, 50864, 50864, 2158, 294, 264, 2290, 13, 400, 264, 661, 4835, 4111, 307, 364, 426, 18819, 7372, 11, 597, 286, 976, 291, 2105, 281, 562, 51300, 51300, 291, 11, 562, 291, 1689, 13, 400, 437, 300, 775, 307, 2831, 813, 1419, 257, 2167, 2375, 2010, 300, 309, 8855, 51688, 51688], "temperature": 0.0, "avg_logprob": -0.07500170726402133, "compression_ratio": 1.6781115879828326, "no_caption_prob": 0.0003100931935478002}, {"id": 638, "seek": 410832, "start": 4108.32, "end": 4116.08, "text": " your, you know, to Elm values, your from Elm values, you can define top level values in your", "tokens": [50364, 428, 11, 291, 458, 11, 281, 2699, 76, 4190, 11, 428, 490, 2699, 76, 4190, 11, 291, 393, 6964, 1192, 1496, 4190, 294, 428, 50752, 50752, 728, 404, 21988, 10088, 337, 2058, 378, 433, 293, 979, 378, 433, 13, 407, 445, 411, 364, 2699, 76, 1500, 11, 291, 393, 6964, 51096, 51096, 1192, 1496, 4190, 295, 2010, 1500, 13, 440, 447, 426, 18819, 7372, 4045, 291, 281, 445, 19219, 1192, 1496, 51476, 51504], "temperature": 0.0, "avg_logprob": -0.085994873046875, "compression_ratio": 1.7452229299363058, "no_caption_prob": 5.143719681655057e-05}, {"id": 639, "seek": 410832, "start": 4116.08, "end": 4122.96, "text": " interop definitions module for encoders and decoders. So just like an Elm test, you can define", "tokens": [50364, 428, 11, 291, 458, 11, 281, 2699, 76, 4190, 11, 428, 490, 2699, 76, 4190, 11, 291, 393, 6964, 1192, 1496, 4190, 294, 428, 50752, 50752, 728, 404, 21988, 10088, 337, 2058, 378, 433, 293, 979, 378, 433, 13, 407, 445, 411, 364, 2699, 76, 1500, 11, 291, 393, 6964, 51096, 51096, 1192, 1496, 4190, 295, 2010, 1500, 13, 440, 447, 426, 18819, 7372, 4045, 291, 281, 445, 19219, 1192, 1496, 51476, 51504], "temperature": 0.0, "avg_logprob": -0.085994873046875, "compression_ratio": 1.7452229299363058, "no_caption_prob": 5.143719681655057e-05}, {"id": 640, "seek": 410832, "start": 4122.96, "end": 4130.5599999999995, "text": " top level values of type test. The pro NPM package allows you to just expose top level", "tokens": [50364, 428, 11, 291, 458, 11, 281, 2699, 76, 4190, 11, 428, 490, 2699, 76, 4190, 11, 291, 393, 6964, 1192, 1496, 4190, 294, 428, 50752, 50752, 728, 404, 21988, 10088, 337, 2058, 378, 433, 293, 979, 378, 433, 13, 407, 445, 411, 364, 2699, 76, 1500, 11, 291, 393, 6964, 51096, 51096, 1192, 1496, 4190, 295, 2010, 1500, 13, 440, 447, 426, 18819, 7372, 4045, 291, 281, 445, 19219, 1192, 1496, 51476, 51504], "temperature": 0.0, "avg_logprob": -0.085994873046875, "compression_ratio": 1.7452229299363058, "no_caption_prob": 5.143719681655057e-05}, {"id": 641, "seek": 413056, "start": 4130.56, "end": 4138.88, "text": " values of type encoder of type TS, JSON dot encode dot encoder and of type TS, JSON dot decode", "tokens": [50364, 4190, 295, 2010, 2058, 19866, 295, 2010, 37645, 11, 31828, 5893, 2058, 1429, 5893, 2058, 19866, 293, 295, 2010, 37645, 11, 31828, 5893, 979, 1429, 50780, 50780, 5893, 979, 19866, 13, 400, 309, 603, 6772, 8460, 264, 3089, 300, 311, 2978, 281, 2058, 1429, 1184, 295, 729, 3467, 13, 51120, 51120, 407, 291, 500, 380, 362, 281, 360, 257, 955, 1389, 5629, 1803, 293, 2464, 264, 1192, 1496, 2058, 19866, 420, 51344, 51344, 979, 19866, 13, 407, 309, 311, 445, 257, 707, 544, 42735, 21401, 13, 865, 13, 407, 309, 13657, 300, 3997, 3089, 66, 337, 291, 13, 51636, 51636], "temperature": 0.0, "avg_logprob": -0.18084348416795917, "compression_ratio": 1.7453703703703705, "no_caption_prob": 6.0139831475680694e-05}, {"id": 642, "seek": 413056, "start": 4138.88, "end": 4145.68, "text": " dot decoder. And it'll automatically generate the code that's needed to encode each of those types.", "tokens": [50364, 4190, 295, 2010, 2058, 19866, 295, 2010, 37645, 11, 31828, 5893, 2058, 1429, 5893, 2058, 19866, 293, 295, 2010, 37645, 11, 31828, 5893, 979, 1429, 50780, 50780, 5893, 979, 19866, 13, 400, 309, 603, 6772, 8460, 264, 3089, 300, 311, 2978, 281, 2058, 1429, 1184, 295, 729, 3467, 13, 51120, 51120, 407, 291, 500, 380, 362, 281, 360, 257, 955, 1389, 5629, 1803, 293, 2464, 264, 1192, 1496, 2058, 19866, 420, 51344, 51344, 979, 19866, 13, 407, 309, 311, 445, 257, 707, 544, 42735, 21401, 13, 865, 13, 407, 309, 13657, 300, 3997, 3089, 66, 337, 291, 13, 51636, 51636], "temperature": 0.0, "avg_logprob": -0.18084348416795917, "compression_ratio": 1.7453703703703705, "no_caption_prob": 6.0139831475680694e-05}, {"id": 643, "seek": 413056, "start": 4145.68, "end": 4150.160000000001, "text": " So you don't have to do a big case statement yourself and write the top level encoder or", "tokens": [50364, 4190, 295, 2010, 2058, 19866, 295, 2010, 37645, 11, 31828, 5893, 2058, 1429, 5893, 2058, 19866, 293, 295, 2010, 37645, 11, 31828, 5893, 979, 1429, 50780, 50780, 5893, 979, 19866, 13, 400, 309, 603, 6772, 8460, 264, 3089, 300, 311, 2978, 281, 2058, 1429, 1184, 295, 729, 3467, 13, 51120, 51120, 407, 291, 500, 380, 362, 281, 360, 257, 955, 1389, 5629, 1803, 293, 2464, 264, 1192, 1496, 2058, 19866, 420, 51344, 51344, 979, 19866, 13, 407, 309, 311, 445, 257, 707, 544, 42735, 21401, 13, 865, 13, 407, 309, 13657, 300, 3997, 3089, 66, 337, 291, 13, 51636, 51636], "temperature": 0.0, "avg_logprob": -0.18084348416795917, "compression_ratio": 1.7453703703703705, "no_caption_prob": 6.0139831475680694e-05}, {"id": 644, "seek": 413056, "start": 4150.160000000001, "end": 4156.0, "text": " decoder. So it's just a little more ergonomic. Yeah. So it writes that complex codec for you.", "tokens": [50364, 4190, 295, 2010, 2058, 19866, 295, 2010, 37645, 11, 31828, 5893, 2058, 1429, 5893, 2058, 19866, 293, 295, 2010, 37645, 11, 31828, 5893, 979, 1429, 50780, 50780, 5893, 979, 19866, 13, 400, 309, 603, 6772, 8460, 264, 3089, 300, 311, 2978, 281, 2058, 1429, 1184, 295, 729, 3467, 13, 51120, 51120, 407, 291, 500, 380, 362, 281, 360, 257, 955, 1389, 5629, 1803, 293, 2464, 264, 1192, 1496, 2058, 19866, 420, 51344, 51344, 979, 19866, 13, 407, 309, 311, 445, 257, 707, 544, 42735, 21401, 13, 865, 13, 407, 309, 13657, 300, 3997, 3089, 66, 337, 291, 13, 51636, 51636], "temperature": 0.0, "avg_logprob": -0.18084348416795917, "compression_ratio": 1.7453703703703705, "no_caption_prob": 6.0139831475680694e-05}, {"id": 645, "seek": 415600, "start": 4156.0, "end": 4161.68, "text": " Yeah. Yeah. And it's just a little more ergonomic to add a new one. You just, you know, you don't,", "tokens": [50364, 865, 13, 865, 13, 400, 309, 311, 445, 257, 707, 544, 42735, 21401, 281, 909, 257, 777, 472, 13, 509, 445, 11, 291, 458, 11, 291, 500, 380, 11, 50648, 50648, 293, 291, 11, 291, 393, 291, 393, 445, 818, 13, 407, 309, 311, 516, 281, 976, 291, 257, 2445, 337, 1184, 337, 1184, 1192, 1496, 50972, 51004, 2158, 291, 6964, 294, 428, 728, 404, 21988, 13, 467, 311, 516, 281, 976, 291, 257, 1192, 1496, 2445, 51212, 51212, 300, 2516, 300, 11, 300, 2010, 293, 11, 293, 14790, 309, 3838, 13, 407, 291, 500, 380, 643, 281, 411, 1322, 493, 51484, 51484, 257, 2375, 2010, 293, 2845, 300, 807, 13, 407, 309, 311, 445, 257, 544, 42735, 21401, 636, 295, 1228, 309, 11, 457, 309, 311, 11, 51768, 51768], "temperature": 0.0, "avg_logprob": -0.08652325832482541, "compression_ratio": 1.8995983935742973, "no_caption_prob": 0.00018518237629905343}, {"id": 646, "seek": 415600, "start": 4161.68, "end": 4168.16, "text": " and you, you can you can just call. So it's going to give you a function for each for each top level", "tokens": [50364, 865, 13, 865, 13, 400, 309, 311, 445, 257, 707, 544, 42735, 21401, 281, 909, 257, 777, 472, 13, 509, 445, 11, 291, 458, 11, 291, 500, 380, 11, 50648, 50648, 293, 291, 11, 291, 393, 291, 393, 445, 818, 13, 407, 309, 311, 516, 281, 976, 291, 257, 2445, 337, 1184, 337, 1184, 1192, 1496, 50972, 51004, 2158, 291, 6964, 294, 428, 728, 404, 21988, 13, 467, 311, 516, 281, 976, 291, 257, 1192, 1496, 2445, 51212, 51212, 300, 2516, 300, 11, 300, 2010, 293, 11, 293, 14790, 309, 3838, 13, 407, 291, 500, 380, 643, 281, 411, 1322, 493, 51484, 51484, 257, 2375, 2010, 293, 2845, 300, 807, 13, 407, 309, 311, 445, 257, 544, 42735, 21401, 636, 295, 1228, 309, 11, 457, 309, 311, 11, 51768, 51768], "temperature": 0.0, "avg_logprob": -0.08652325832482541, "compression_ratio": 1.8995983935742973, "no_caption_prob": 0.00018518237629905343}, {"id": 647, "seek": 415600, "start": 4168.8, "end": 4172.96, "text": " value you define in your interop definitions. It's going to give you a top level function", "tokens": [50364, 865, 13, 865, 13, 400, 309, 311, 445, 257, 707, 544, 42735, 21401, 281, 909, 257, 777, 472, 13, 509, 445, 11, 291, 458, 11, 291, 500, 380, 11, 50648, 50648, 293, 291, 11, 291, 393, 291, 393, 445, 818, 13, 407, 309, 311, 516, 281, 976, 291, 257, 2445, 337, 1184, 337, 1184, 1192, 1496, 50972, 51004, 2158, 291, 6964, 294, 428, 728, 404, 21988, 13, 467, 311, 516, 281, 976, 291, 257, 1192, 1496, 2445, 51212, 51212, 300, 2516, 300, 11, 300, 2010, 293, 11, 293, 14790, 309, 3838, 13, 407, 291, 500, 380, 643, 281, 411, 1322, 493, 51484, 51484, 257, 2375, 2010, 293, 2845, 300, 807, 13, 407, 309, 311, 445, 257, 544, 42735, 21401, 636, 295, 1228, 309, 11, 457, 309, 311, 11, 51768, 51768], "temperature": 0.0, "avg_logprob": -0.08652325832482541, "compression_ratio": 1.8995983935742973, "no_caption_prob": 0.00018518237629905343}, {"id": 648, "seek": 415600, "start": 4172.96, "end": 4178.4, "text": " that takes that, that type and, and sends it directly. So you don't need to like build up", "tokens": [50364, 865, 13, 865, 13, 400, 309, 311, 445, 257, 707, 544, 42735, 21401, 281, 909, 257, 777, 472, 13, 509, 445, 11, 291, 458, 11, 291, 500, 380, 11, 50648, 50648, 293, 291, 11, 291, 393, 291, 393, 445, 818, 13, 407, 309, 311, 516, 281, 976, 291, 257, 2445, 337, 1184, 337, 1184, 1192, 1496, 50972, 51004, 2158, 291, 6964, 294, 428, 728, 404, 21988, 13, 467, 311, 516, 281, 976, 291, 257, 1192, 1496, 2445, 51212, 51212, 300, 2516, 300, 11, 300, 2010, 293, 11, 293, 14790, 309, 3838, 13, 407, 291, 500, 380, 643, 281, 411, 1322, 493, 51484, 51484, 257, 2375, 2010, 293, 2845, 300, 807, 13, 407, 309, 311, 445, 257, 544, 42735, 21401, 636, 295, 1228, 309, 11, 457, 309, 311, 11, 51768, 51768], "temperature": 0.0, "avg_logprob": -0.08652325832482541, "compression_ratio": 1.8995983935742973, "no_caption_prob": 0.00018518237629905343}, {"id": 649, "seek": 415600, "start": 4178.4, "end": 4184.08, "text": " a custom type and send that through. So it's just a more ergonomic way of using it, but it's,", "tokens": [50364, 865, 13, 865, 13, 400, 309, 311, 445, 257, 707, 544, 42735, 21401, 281, 909, 257, 777, 472, 13, 509, 445, 11, 291, 458, 11, 291, 500, 380, 11, 50648, 50648, 293, 291, 11, 291, 393, 291, 393, 445, 818, 13, 407, 309, 311, 516, 281, 976, 291, 257, 2445, 337, 1184, 337, 1184, 1192, 1496, 50972, 51004, 2158, 291, 6964, 294, 428, 728, 404, 21988, 13, 467, 311, 516, 281, 976, 291, 257, 1192, 1496, 2445, 51212, 51212, 300, 2516, 300, 11, 300, 2010, 293, 11, 293, 14790, 309, 3838, 13, 407, 291, 500, 380, 643, 281, 411, 1322, 493, 51484, 51484, 257, 2375, 2010, 293, 2845, 300, 807, 13, 407, 309, 311, 445, 257, 544, 42735, 21401, 636, 295, 1228, 309, 11, 457, 309, 311, 11, 51768, 51768], "temperature": 0.0, "avg_logprob": -0.08652325832482541, "compression_ratio": 1.8995983935742973, "no_caption_prob": 0.00018518237629905343}, {"id": 650, "seek": 418408, "start": 4184.08, "end": 4187.5199999999995, "text": " you know, nothing that you can't do without the free version, but I hope people find it useful.", "tokens": [50364, 291, 458, 11, 1825, 300, 291, 393, 380, 360, 1553, 264, 1737, 3037, 11, 457, 286, 1454, 561, 915, 309, 4420, 13, 50536, 50536, 865, 13, 1144, 291, 519, 291, 486, 909, 4497, 4835, 4122, 30, 50724, 50768, 286, 603, 1391, 412, 512, 935, 909, 512, 411, 960, 2527, 466, 264, 11, 466, 512, 295, 264, 4835, 1507, 51168, 51168, 300, 4835, 5022, 486, 483, 2105, 281, 13, 400, 321, 603, 536, 11, 321, 603, 536, 498, 456, 311, 544, 11, 457, 286, 519, 11, 51408, 51408, 286, 519, 300, 603, 312, 257, 688, 295, 11, 257, 688, 295, 44072, 337, 11, 337, 447, 5022, 13, 51620, 51620, 1033, 13, 407, 437, 307, 264, 17621, 2316, 30, 51756, 51756], "temperature": 0.0, "avg_logprob": -0.061643328548462925, "compression_ratio": 1.6716981132075472, "no_caption_prob": 0.0002453350753057748}, {"id": 651, "seek": 418408, "start": 4187.5199999999995, "end": 4191.28, "text": " Yeah. Do you think you will add additional paid features?", "tokens": [50364, 291, 458, 11, 1825, 300, 291, 393, 380, 360, 1553, 264, 1737, 3037, 11, 457, 286, 1454, 561, 915, 309, 4420, 13, 50536, 50536, 865, 13, 1144, 291, 519, 291, 486, 909, 4497, 4835, 4122, 30, 50724, 50768, 286, 603, 1391, 412, 512, 935, 909, 512, 411, 960, 2527, 466, 264, 11, 466, 512, 295, 264, 4835, 1507, 51168, 51168, 300, 4835, 5022, 486, 483, 2105, 281, 13, 400, 321, 603, 536, 11, 321, 603, 536, 498, 456, 311, 544, 11, 457, 286, 519, 11, 51408, 51408, 286, 519, 300, 603, 312, 257, 688, 295, 11, 257, 688, 295, 44072, 337, 11, 337, 447, 5022, 13, 51620, 51620, 1033, 13, 407, 437, 307, 264, 17621, 2316, 30, 51756, 51756], "temperature": 0.0, "avg_logprob": -0.061643328548462925, "compression_ratio": 1.6716981132075472, "no_caption_prob": 0.0002453350753057748}, {"id": 652, "seek": 418408, "start": 4192.16, "end": 4200.16, "text": " I'll probably at some point add some like video material about the, about some of the paid stuff", "tokens": [50364, 291, 458, 11, 1825, 300, 291, 393, 380, 360, 1553, 264, 1737, 3037, 11, 457, 286, 1454, 561, 915, 309, 4420, 13, 50536, 50536, 865, 13, 1144, 291, 519, 291, 486, 909, 4497, 4835, 4122, 30, 50724, 50768, 286, 603, 1391, 412, 512, 935, 909, 512, 411, 960, 2527, 466, 264, 11, 466, 512, 295, 264, 4835, 1507, 51168, 51168, 300, 4835, 5022, 486, 483, 2105, 281, 13, 400, 321, 603, 536, 11, 321, 603, 536, 498, 456, 311, 544, 11, 457, 286, 519, 11, 51408, 51408, 286, 519, 300, 603, 312, 257, 688, 295, 11, 257, 688, 295, 44072, 337, 11, 337, 447, 5022, 13, 51620, 51620, 1033, 13, 407, 437, 307, 264, 17621, 2316, 30, 51756, 51756], "temperature": 0.0, "avg_logprob": -0.061643328548462925, "compression_ratio": 1.6716981132075472, "no_caption_prob": 0.0002453350753057748}, {"id": 653, "seek": 418408, "start": 4200.16, "end": 4204.96, "text": " that paid users will get access to. And we'll see, we'll see if there's more, but I think,", "tokens": [50364, 291, 458, 11, 1825, 300, 291, 393, 380, 360, 1553, 264, 1737, 3037, 11, 457, 286, 1454, 561, 915, 309, 4420, 13, 50536, 50536, 865, 13, 1144, 291, 519, 291, 486, 909, 4497, 4835, 4122, 30, 50724, 50768, 286, 603, 1391, 412, 512, 935, 909, 512, 411, 960, 2527, 466, 264, 11, 466, 512, 295, 264, 4835, 1507, 51168, 51168, 300, 4835, 5022, 486, 483, 2105, 281, 13, 400, 321, 603, 536, 11, 321, 603, 536, 498, 456, 311, 544, 11, 457, 286, 519, 11, 51408, 51408, 286, 519, 300, 603, 312, 257, 688, 295, 11, 257, 688, 295, 44072, 337, 11, 337, 447, 5022, 13, 51620, 51620, 1033, 13, 407, 437, 307, 264, 17621, 2316, 30, 51756, 51756], "temperature": 0.0, "avg_logprob": -0.061643328548462925, "compression_ratio": 1.6716981132075472, "no_caption_prob": 0.0002453350753057748}, {"id": 654, "seek": 418408, "start": 4204.96, "end": 4209.2, "text": " I think that'll be a lot of, a lot of goodies for, for pro users.", "tokens": [50364, 291, 458, 11, 1825, 300, 291, 393, 380, 360, 1553, 264, 1737, 3037, 11, 457, 286, 1454, 561, 915, 309, 4420, 13, 50536, 50536, 865, 13, 1144, 291, 519, 291, 486, 909, 4497, 4835, 4122, 30, 50724, 50768, 286, 603, 1391, 412, 512, 935, 909, 512, 411, 960, 2527, 466, 264, 11, 466, 512, 295, 264, 4835, 1507, 51168, 51168, 300, 4835, 5022, 486, 483, 2105, 281, 13, 400, 321, 603, 536, 11, 321, 603, 536, 498, 456, 311, 544, 11, 457, 286, 519, 11, 51408, 51408, 286, 519, 300, 603, 312, 257, 688, 295, 11, 257, 688, 295, 44072, 337, 11, 337, 447, 5022, 13, 51620, 51620, 1033, 13, 407, 437, 307, 264, 17621, 2316, 30, 51756, 51756], "temperature": 0.0, "avg_logprob": -0.061643328548462925, "compression_ratio": 1.6716981132075472, "no_caption_prob": 0.0002453350753057748}, {"id": 655, "seek": 418408, "start": 4209.2, "end": 4211.92, "text": " Okay. So what is the pricing model?", "tokens": [50364, 291, 458, 11, 1825, 300, 291, 393, 380, 360, 1553, 264, 1737, 3037, 11, 457, 286, 1454, 561, 915, 309, 4420, 13, 50536, 50536, 865, 13, 1144, 291, 519, 291, 486, 909, 4497, 4835, 4122, 30, 50724, 50768, 286, 603, 1391, 412, 512, 935, 909, 512, 411, 960, 2527, 466, 264, 11, 466, 512, 295, 264, 4835, 1507, 51168, 51168, 300, 4835, 5022, 486, 483, 2105, 281, 13, 400, 321, 603, 536, 11, 321, 603, 536, 498, 456, 311, 544, 11, 457, 286, 519, 11, 51408, 51408, 286, 519, 300, 603, 312, 257, 688, 295, 11, 257, 688, 295, 44072, 337, 11, 337, 447, 5022, 13, 51620, 51620, 1033, 13, 407, 437, 307, 264, 17621, 2316, 30, 51756, 51756], "temperature": 0.0, "avg_logprob": -0.061643328548462925, "compression_ratio": 1.6716981132075472, "no_caption_prob": 0.0002453350753057748}, {"id": 656, "seek": 421192, "start": 4211.92, "end": 4218.88, "text": " I'm doing it as a single one time fee. You pay for it. It's yours. You're authenticated with", "tokens": [50364, 286, 478, 884, 309, 382, 257, 2167, 472, 565, 12054, 13, 509, 1689, 337, 309, 13, 467, 311, 6342, 13, 509, 434, 9214, 3587, 365, 50712, 50712, 428, 23331, 2696, 13, 467, 2709, 291, 2105, 281, 264, 3144, 13, 407, 291, 445, 3565, 294, 365, 428, 23331, 50980, 50980, 2696, 293, 291, 483, 2105, 281, 264, 44094, 278, 2290, 412, 806, 76, 13, 1373, 13, 5106, 404, 13, 1112, 13, 51288, 51364, 8466, 294, 264, 855, 5570, 13, 51420, 51420, 8466, 294, 264, 855, 5570, 13, 400, 291, 293, 550, 309, 6772, 2709, 291, 11, 291, 458, 11, 51656, 51656], "temperature": 0.0, "avg_logprob": -0.10350933261946135, "compression_ratio": 1.7658536585365854, "no_caption_prob": 5.7380868383916095e-05}, {"id": 657, "seek": 421192, "start": 4218.88, "end": 4224.24, "text": " your GitHub account. It gives you access to the website. So you just log in with your GitHub", "tokens": [50364, 286, 478, 884, 309, 382, 257, 2167, 472, 565, 12054, 13, 509, 1689, 337, 309, 13, 467, 311, 6342, 13, 509, 434, 9214, 3587, 365, 50712, 50712, 428, 23331, 2696, 13, 467, 2709, 291, 2105, 281, 264, 3144, 13, 407, 291, 445, 3565, 294, 365, 428, 23331, 50980, 50980, 2696, 293, 291, 483, 2105, 281, 264, 44094, 278, 2290, 412, 806, 76, 13, 1373, 13, 5106, 404, 13, 1112, 13, 51288, 51364, 8466, 294, 264, 855, 5570, 13, 51420, 51420, 8466, 294, 264, 855, 5570, 13, 400, 291, 293, 550, 309, 6772, 2709, 291, 11, 291, 458, 11, 51656, 51656], "temperature": 0.0, "avg_logprob": -0.10350933261946135, "compression_ratio": 1.7658536585365854, "no_caption_prob": 5.7380868383916095e-05}, {"id": 658, "seek": 421192, "start": 4224.24, "end": 4230.4, "text": " account and you get access to the scaffolding tool at elm.ts.interop.com.", "tokens": [50364, 286, 478, 884, 309, 382, 257, 2167, 472, 565, 12054, 13, 509, 1689, 337, 309, 13, 467, 311, 6342, 13, 509, 434, 9214, 3587, 365, 50712, 50712, 428, 23331, 2696, 13, 467, 2709, 291, 2105, 281, 264, 3144, 13, 407, 291, 445, 3565, 294, 365, 428, 23331, 50980, 50980, 2696, 293, 291, 483, 2105, 281, 264, 44094, 278, 2290, 412, 806, 76, 13, 1373, 13, 5106, 404, 13, 1112, 13, 51288, 51364, 8466, 294, 264, 855, 5570, 13, 51420, 51420, 8466, 294, 264, 855, 5570, 13, 400, 291, 293, 550, 309, 6772, 2709, 291, 11, 291, 458, 11, 51656, 51656], "temperature": 0.0, "avg_logprob": -0.10350933261946135, "compression_ratio": 1.7658536585365854, "no_caption_prob": 5.7380868383916095e-05}, {"id": 659, "seek": 421192, "start": 4231.92, "end": 4233.04, "text": " Link in the show notes.", "tokens": [50364, 286, 478, 884, 309, 382, 257, 2167, 472, 565, 12054, 13, 509, 1689, 337, 309, 13, 467, 311, 6342, 13, 509, 434, 9214, 3587, 365, 50712, 50712, 428, 23331, 2696, 13, 467, 2709, 291, 2105, 281, 264, 3144, 13, 407, 291, 445, 3565, 294, 365, 428, 23331, 50980, 50980, 2696, 293, 291, 483, 2105, 281, 264, 44094, 278, 2290, 412, 806, 76, 13, 1373, 13, 5106, 404, 13, 1112, 13, 51288, 51364, 8466, 294, 264, 855, 5570, 13, 51420, 51420, 8466, 294, 264, 855, 5570, 13, 400, 291, 293, 550, 309, 6772, 2709, 291, 11, 291, 458, 11, 51656, 51656], "temperature": 0.0, "avg_logprob": -0.10350933261946135, "compression_ratio": 1.7658536585365854, "no_caption_prob": 5.7380868383916095e-05}, {"id": 660, "seek": 421192, "start": 4233.04, "end": 4237.76, "text": " Link in the show notes. And you and then it automatically gives you, you know,", "tokens": [50364, 286, 478, 884, 309, 382, 257, 2167, 472, 565, 12054, 13, 509, 1689, 337, 309, 13, 467, 311, 6342, 13, 509, 434, 9214, 3587, 365, 50712, 50712, 428, 23331, 2696, 13, 467, 2709, 291, 2105, 281, 264, 3144, 13, 407, 291, 445, 3565, 294, 365, 428, 23331, 50980, 50980, 2696, 293, 291, 483, 2105, 281, 264, 44094, 278, 2290, 412, 806, 76, 13, 1373, 13, 5106, 404, 13, 1112, 13, 51288, 51364, 8466, 294, 264, 855, 5570, 13, 51420, 51420, 8466, 294, 264, 855, 5570, 13, 400, 291, 293, 550, 309, 6772, 2709, 291, 11, 291, 458, 11, 51656, 51656], "temperature": 0.0, "avg_logprob": -0.10350933261946135, "compression_ratio": 1.7658536585365854, "no_caption_prob": 5.7380868383916095e-05}, {"id": 661, "seek": 423776, "start": 4237.76, "end": 4243.4400000000005, "text": " sends you instructions for setting up the pro NPM package and gives you access to that. So,", "tokens": [50364, 14790, 291, 9415, 337, 3287, 493, 264, 447, 426, 18819, 7372, 293, 2709, 291, 2105, 281, 300, 13, 407, 11, 50648, 50648, 1338, 11, 300, 311, 264, 447, 7372, 13, 50724, 50724, 4372, 1627, 13, 4372, 1627, 13, 407, 498, 286, 11, 498, 286, 528, 281, 764, 341, 2290, 412, 589, 293, 286, 528, 452, 11, 51060, 51092, 452, 1379, 1469, 281, 764, 309, 11, 486, 633, 10754, 643, 281, 2256, 309, 30, 51312, 51312, 1779, 13, 2205, 1168, 13, 407, 264, 11, 286, 1437, 365, 264, 22811, 2316, 300, 286, 727, 352, 365, 281, 722, 51696, 51696], "temperature": 0.0, "avg_logprob": -0.1010919189453125, "compression_ratio": 1.5777777777777777, "no_caption_prob": 0.00011234029079787433}, {"id": 662, "seek": 423776, "start": 4243.4400000000005, "end": 4244.96, "text": " yeah, that's the pro package.", "tokens": [50364, 14790, 291, 9415, 337, 3287, 493, 264, 447, 426, 18819, 7372, 293, 2709, 291, 2105, 281, 300, 13, 407, 11, 50648, 50648, 1338, 11, 300, 311, 264, 447, 7372, 13, 50724, 50724, 4372, 1627, 13, 4372, 1627, 13, 407, 498, 286, 11, 498, 286, 528, 281, 764, 341, 2290, 412, 589, 293, 286, 528, 452, 11, 51060, 51092, 452, 1379, 1469, 281, 764, 309, 11, 486, 633, 10754, 643, 281, 2256, 309, 30, 51312, 51312, 1779, 13, 2205, 1168, 13, 407, 264, 11, 286, 1437, 365, 264, 22811, 2316, 300, 286, 727, 352, 365, 281, 722, 51696, 51696], "temperature": 0.0, "avg_logprob": -0.1010919189453125, "compression_ratio": 1.5777777777777777, "no_caption_prob": 0.00011234029079787433}, {"id": 663, "seek": 423776, "start": 4244.96, "end": 4251.68, "text": " Very cool. Very cool. So if I, if I want to use this tool at work and I want my,", "tokens": [50364, 14790, 291, 9415, 337, 3287, 493, 264, 447, 426, 18819, 7372, 293, 2709, 291, 2105, 281, 300, 13, 407, 11, 50648, 50648, 1338, 11, 300, 311, 264, 447, 7372, 13, 50724, 50724, 4372, 1627, 13, 4372, 1627, 13, 407, 498, 286, 11, 498, 286, 528, 281, 764, 341, 2290, 412, 589, 293, 286, 528, 452, 11, 51060, 51092, 452, 1379, 1469, 281, 764, 309, 11, 486, 633, 10754, 643, 281, 2256, 309, 30, 51312, 51312, 1779, 13, 2205, 1168, 13, 407, 264, 11, 286, 1437, 365, 264, 22811, 2316, 300, 286, 727, 352, 365, 281, 722, 51696, 51696], "temperature": 0.0, "avg_logprob": -0.1010919189453125, "compression_ratio": 1.5777777777777777, "no_caption_prob": 0.00011234029079787433}, {"id": 664, "seek": 423776, "start": 4252.320000000001, "end": 4256.72, "text": " my whole team to use it, will every developer need to buy it?", "tokens": [50364, 14790, 291, 9415, 337, 3287, 493, 264, 447, 426, 18819, 7372, 293, 2709, 291, 2105, 281, 300, 13, 407, 11, 50648, 50648, 1338, 11, 300, 311, 264, 447, 7372, 13, 50724, 50724, 4372, 1627, 13, 4372, 1627, 13, 407, 498, 286, 11, 498, 286, 528, 281, 764, 341, 2290, 412, 589, 293, 286, 528, 452, 11, 51060, 51092, 452, 1379, 1469, 281, 764, 309, 11, 486, 633, 10754, 643, 281, 2256, 309, 30, 51312, 51312, 1779, 13, 2205, 1168, 13, 407, 264, 11, 286, 1437, 365, 264, 22811, 2316, 300, 286, 727, 352, 365, 281, 722, 51696, 51696], "temperature": 0.0, "avg_logprob": -0.1010919189453125, "compression_ratio": 1.5777777777777777, "no_caption_prob": 0.00011234029079787433}, {"id": 665, "seek": 423776, "start": 4256.72, "end": 4264.400000000001, "text": " Right. Good question. So the, I went with the simplest model that I could go with to start", "tokens": [50364, 14790, 291, 9415, 337, 3287, 493, 264, 447, 426, 18819, 7372, 293, 2709, 291, 2105, 281, 300, 13, 407, 11, 50648, 50648, 1338, 11, 300, 311, 264, 447, 7372, 13, 50724, 50724, 4372, 1627, 13, 4372, 1627, 13, 407, 498, 286, 11, 498, 286, 528, 281, 764, 341, 2290, 412, 589, 293, 286, 528, 452, 11, 51060, 51092, 452, 1379, 1469, 281, 764, 309, 11, 486, 633, 10754, 643, 281, 2256, 309, 30, 51312, 51312, 1779, 13, 2205, 1168, 13, 407, 264, 11, 286, 1437, 365, 264, 22811, 2316, 300, 286, 727, 352, 365, 281, 722, 51696, 51696], "temperature": 0.0, "avg_logprob": -0.1010919189453125, "compression_ratio": 1.5777777777777777, "no_caption_prob": 0.00011234029079787433}, {"id": 666, "seek": 426440, "start": 4264.4, "end": 4270.16, "text": " just just because there, there are so many ways you could go with pricing and all that. And it's,", "tokens": [50364, 445, 445, 570, 456, 11, 456, 366, 370, 867, 2098, 291, 727, 352, 365, 17621, 293, 439, 300, 13, 400, 309, 311, 11, 50652, 50652, 291, 458, 11, 309, 311, 257, 688, 337, 11, 337, 385, 11, 309, 311, 257, 688, 337, 11, 337, 5022, 281, 519, 466, 13, 407, 286, 445, 1415, 281, 50912, 50912, 652, 309, 534, 2199, 13, 400, 370, 309, 311, 445, 472, 3218, 680, 4195, 13, 759, 291, 11, 293, 498, 291, 528, 281, 2256, 544, 51296, 51328, 11069, 11, 498, 291, 528, 544, 5022, 281, 362, 2105, 281, 264, 44094, 278, 2290, 11, 550, 291, 2256, 544, 32821, 13, 51628, 51628, 21532, 382, 300, 13, 51668, 51668], "temperature": 0.0, "avg_logprob": -0.0806643942128057, "compression_ratio": 1.791111111111111, "no_caption_prob": 2.8856056815129705e-05}, {"id": 667, "seek": 426440, "start": 4270.16, "end": 4275.36, "text": " you know, it's a lot for, for me, it's a lot for, for users to think about. So I just wanted to", "tokens": [50364, 445, 445, 570, 456, 11, 456, 366, 370, 867, 2098, 291, 727, 352, 365, 17621, 293, 439, 300, 13, 400, 309, 311, 11, 50652, 50652, 291, 458, 11, 309, 311, 257, 688, 337, 11, 337, 385, 11, 309, 311, 257, 688, 337, 11, 337, 5022, 281, 519, 466, 13, 407, 286, 445, 1415, 281, 50912, 50912, 652, 309, 534, 2199, 13, 400, 370, 309, 311, 445, 472, 3218, 680, 4195, 13, 759, 291, 11, 293, 498, 291, 528, 281, 2256, 544, 51296, 51328, 11069, 11, 498, 291, 528, 544, 5022, 281, 362, 2105, 281, 264, 44094, 278, 2290, 11, 550, 291, 2256, 544, 32821, 13, 51628, 51628, 21532, 382, 300, 13, 51668, 51668], "temperature": 0.0, "avg_logprob": -0.0806643942128057, "compression_ratio": 1.791111111111111, "no_caption_prob": 2.8856056815129705e-05}, {"id": 668, "seek": 426440, "start": 4275.36, "end": 4283.04, "text": " make it really simple. And so it's just one price per user. If you, and if you want to buy more", "tokens": [50364, 445, 445, 570, 456, 11, 456, 366, 370, 867, 2098, 291, 727, 352, 365, 17621, 293, 439, 300, 13, 400, 309, 311, 11, 50652, 50652, 291, 458, 11, 309, 311, 257, 688, 337, 11, 337, 385, 11, 309, 311, 257, 688, 337, 11, 337, 5022, 281, 519, 466, 13, 407, 286, 445, 1415, 281, 50912, 50912, 652, 309, 534, 2199, 13, 400, 370, 309, 311, 445, 472, 3218, 680, 4195, 13, 759, 291, 11, 293, 498, 291, 528, 281, 2256, 544, 51296, 51328, 11069, 11, 498, 291, 528, 544, 5022, 281, 362, 2105, 281, 264, 44094, 278, 2290, 11, 550, 291, 2256, 544, 32821, 13, 51628, 51628, 21532, 382, 300, 13, 51668, 51668], "temperature": 0.0, "avg_logprob": -0.0806643942128057, "compression_ratio": 1.791111111111111, "no_caption_prob": 2.8856056815129705e-05}, {"id": 669, "seek": 426440, "start": 4283.679999999999, "end": 4289.679999999999, "text": " seats, if you want more users to have access to the scaffolding tool, then you buy more licenses.", "tokens": [50364, 445, 445, 570, 456, 11, 456, 366, 370, 867, 2098, 291, 727, 352, 365, 17621, 293, 439, 300, 13, 400, 309, 311, 11, 50652, 50652, 291, 458, 11, 309, 311, 257, 688, 337, 11, 337, 385, 11, 309, 311, 257, 688, 337, 11, 337, 5022, 281, 519, 466, 13, 407, 286, 445, 1415, 281, 50912, 50912, 652, 309, 534, 2199, 13, 400, 370, 309, 311, 445, 472, 3218, 680, 4195, 13, 759, 291, 11, 293, 498, 291, 528, 281, 2256, 544, 51296, 51328, 11069, 11, 498, 291, 528, 544, 5022, 281, 362, 2105, 281, 264, 44094, 278, 2290, 11, 550, 291, 2256, 544, 32821, 13, 51628, 51628, 21532, 382, 300, 13, 51668, 51668], "temperature": 0.0, "avg_logprob": -0.0806643942128057, "compression_ratio": 1.791111111111111, "no_caption_prob": 2.8856056815129705e-05}, {"id": 670, "seek": 426440, "start": 4289.679999999999, "end": 4290.48, "text": " Simple as that.", "tokens": [50364, 445, 445, 570, 456, 11, 456, 366, 370, 867, 2098, 291, 727, 352, 365, 17621, 293, 439, 300, 13, 400, 309, 311, 11, 50652, 50652, 291, 458, 11, 309, 311, 257, 688, 337, 11, 337, 385, 11, 309, 311, 257, 688, 337, 11, 337, 5022, 281, 519, 466, 13, 407, 286, 445, 1415, 281, 50912, 50912, 652, 309, 534, 2199, 13, 400, 370, 309, 311, 445, 472, 3218, 680, 4195, 13, 759, 291, 11, 293, 498, 291, 528, 281, 2256, 544, 51296, 51328, 11069, 11, 498, 291, 528, 544, 5022, 281, 362, 2105, 281, 264, 44094, 278, 2290, 11, 550, 291, 2256, 544, 32821, 13, 51628, 51628, 21532, 382, 300, 13, 51668, 51668], "temperature": 0.0, "avg_logprob": -0.0806643942128057, "compression_ratio": 1.791111111111111, "no_caption_prob": 2.8856056815129705e-05}, {"id": 671, "seek": 429048, "start": 4290.48, "end": 4294.48, "text": " All right. And maybe don't buy one for the intern, I don't know, something like that.", "tokens": [50364, 1057, 558, 13, 400, 1310, 500, 380, 2256, 472, 337, 264, 2154, 11, 286, 500, 380, 458, 11, 746, 411, 300, 13, 50564, 50716, 865, 13, 10429, 498, 309, 311, 11, 291, 458, 11, 2902, 257, 688, 295, 2158, 11, 309, 311, 291, 458, 11, 286, 914, 11, 309, 311, 11, 51028, 51028, 309, 311, 406, 11, 309, 311, 11, 286, 519, 309, 311, 30349, 1238, 11, 1238, 6457, 337, 291, 458, 11, 498, 291, 434, 24140, 322, 309, 51320, 51320, 10950, 337, 428, 1716, 11, 286, 519, 264, 17621, 307, 516, 281, 312, 1596, 3143, 13, 51480, 51480, 400, 264, 4965, 4122, 366, 1737, 13, 407, 13, 51596, 51628, 663, 311, 558, 13, 865, 13, 865, 11, 2293, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.12398305246906896, "compression_ratio": 1.7238493723849373, "no_caption_prob": 1.8924620235338807e-05}, {"id": 672, "seek": 429048, "start": 4297.5199999999995, "end": 4303.759999999999, "text": " Yeah. Hopefully if it's, you know, giving a lot of value, it's you know, I mean, it's,", "tokens": [50364, 1057, 558, 13, 400, 1310, 500, 380, 2256, 472, 337, 264, 2154, 11, 286, 500, 380, 458, 11, 746, 411, 300, 13, 50564, 50716, 865, 13, 10429, 498, 309, 311, 11, 291, 458, 11, 2902, 257, 688, 295, 2158, 11, 309, 311, 291, 458, 11, 286, 914, 11, 309, 311, 11, 51028, 51028, 309, 311, 406, 11, 309, 311, 11, 286, 519, 309, 311, 30349, 1238, 11, 1238, 6457, 337, 291, 458, 11, 498, 291, 434, 24140, 322, 309, 51320, 51320, 10950, 337, 428, 1716, 11, 286, 519, 264, 17621, 307, 516, 281, 312, 1596, 3143, 13, 51480, 51480, 400, 264, 4965, 4122, 366, 1737, 13, 407, 13, 51596, 51628, 663, 311, 558, 13, 865, 13, 865, 11, 2293, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.12398305246906896, "compression_ratio": 1.7238493723849373, "no_caption_prob": 1.8924620235338807e-05}, {"id": 673, "seek": 429048, "start": 4303.759999999999, "end": 4309.599999999999, "text": " it's not, it's, I think it's priced pretty, pretty fairly for you know, if you're relying on it", "tokens": [50364, 1057, 558, 13, 400, 1310, 500, 380, 2256, 472, 337, 264, 2154, 11, 286, 500, 380, 458, 11, 746, 411, 300, 13, 50564, 50716, 865, 13, 10429, 498, 309, 311, 11, 291, 458, 11, 2902, 257, 688, 295, 2158, 11, 309, 311, 291, 458, 11, 286, 914, 11, 309, 311, 11, 51028, 51028, 309, 311, 406, 11, 309, 311, 11, 286, 519, 309, 311, 30349, 1238, 11, 1238, 6457, 337, 291, 458, 11, 498, 291, 434, 24140, 322, 309, 51320, 51320, 10950, 337, 428, 1716, 11, 286, 519, 264, 17621, 307, 516, 281, 312, 1596, 3143, 13, 51480, 51480, 400, 264, 4965, 4122, 366, 1737, 13, 407, 13, 51596, 51628, 663, 311, 558, 13, 865, 13, 865, 11, 2293, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.12398305246906896, "compression_ratio": 1.7238493723849373, "no_caption_prob": 1.8924620235338807e-05}, {"id": 674, "seek": 429048, "start": 4309.599999999999, "end": 4312.799999999999, "text": " heavily for your project, I think the pricing is going to be quite fair.", "tokens": [50364, 1057, 558, 13, 400, 1310, 500, 380, 2256, 472, 337, 264, 2154, 11, 286, 500, 380, 458, 11, 746, 411, 300, 13, 50564, 50716, 865, 13, 10429, 498, 309, 311, 11, 291, 458, 11, 2902, 257, 688, 295, 2158, 11, 309, 311, 291, 458, 11, 286, 914, 11, 309, 311, 11, 51028, 51028, 309, 311, 406, 11, 309, 311, 11, 286, 519, 309, 311, 30349, 1238, 11, 1238, 6457, 337, 291, 458, 11, 498, 291, 434, 24140, 322, 309, 51320, 51320, 10950, 337, 428, 1716, 11, 286, 519, 264, 17621, 307, 516, 281, 312, 1596, 3143, 13, 51480, 51480, 400, 264, 4965, 4122, 366, 1737, 13, 407, 13, 51596, 51628, 663, 311, 558, 13, 865, 13, 865, 11, 2293, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.12398305246906896, "compression_ratio": 1.7238493723849373, "no_caption_prob": 1.8924620235338807e-05}, {"id": 675, "seek": 429048, "start": 4312.799999999999, "end": 4315.12, "text": " And the core features are free. So.", "tokens": [50364, 1057, 558, 13, 400, 1310, 500, 380, 2256, 472, 337, 264, 2154, 11, 286, 500, 380, 458, 11, 746, 411, 300, 13, 50564, 50716, 865, 13, 10429, 498, 309, 311, 11, 291, 458, 11, 2902, 257, 688, 295, 2158, 11, 309, 311, 291, 458, 11, 286, 914, 11, 309, 311, 11, 51028, 51028, 309, 311, 406, 11, 309, 311, 11, 286, 519, 309, 311, 30349, 1238, 11, 1238, 6457, 337, 291, 458, 11, 498, 291, 434, 24140, 322, 309, 51320, 51320, 10950, 337, 428, 1716, 11, 286, 519, 264, 17621, 307, 516, 281, 312, 1596, 3143, 13, 51480, 51480, 400, 264, 4965, 4122, 366, 1737, 13, 407, 13, 51596, 51628, 663, 311, 558, 13, 865, 13, 865, 11, 2293, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.12398305246906896, "compression_ratio": 1.7238493723849373, "no_caption_prob": 1.8924620235338807e-05}, {"id": 676, "seek": 429048, "start": 4315.759999999999, "end": 4318.48, "text": " That's right. Yeah. Yeah, exactly.", "tokens": [50364, 1057, 558, 13, 400, 1310, 500, 380, 2256, 472, 337, 264, 2154, 11, 286, 500, 380, 458, 11, 746, 411, 300, 13, 50564, 50716, 865, 13, 10429, 498, 309, 311, 11, 291, 458, 11, 2902, 257, 688, 295, 2158, 11, 309, 311, 291, 458, 11, 286, 914, 11, 309, 311, 11, 51028, 51028, 309, 311, 406, 11, 309, 311, 11, 286, 519, 309, 311, 30349, 1238, 11, 1238, 6457, 337, 291, 458, 11, 498, 291, 434, 24140, 322, 309, 51320, 51320, 10950, 337, 428, 1716, 11, 286, 519, 264, 17621, 307, 516, 281, 312, 1596, 3143, 13, 51480, 51480, 400, 264, 4965, 4122, 366, 1737, 13, 407, 13, 51596, 51628, 663, 311, 558, 13, 865, 13, 865, 11, 2293, 13, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.12398305246906896, "compression_ratio": 1.7238493723849373, "no_caption_prob": 1.8924620235338807e-05}, {"id": 677, "seek": 431848, "start": 4318.48, "end": 4326.08, "text": " So I think the parts that you can rely on as a business are free and what is paid just adds", "tokens": [50364, 407, 286, 519, 264, 3166, 300, 291, 393, 10687, 322, 382, 257, 1606, 366, 1737, 293, 437, 307, 4835, 445, 10860, 50744, 50744, 544, 2158, 11, 457, 309, 307, 406, 4818, 281, 589, 365, 309, 420, 281, 5672, 322, 309, 13, 1779, 30, 51028, 51028, 1079, 13, 865, 11, 2138, 13, 51092, 51092, 663, 3263, 588, 11, 572, 13985, 8570, 281, 385, 13, 51252, 51252, 865, 13, 663, 311, 11, 300, 390, 452, 3387, 13, 400, 286, 1338, 11, 309, 311, 11, 370, 309, 311, 588, 4670, 281, 4374, 767, 452, 700, 51648, 51648], "temperature": 0.0, "avg_logprob": -0.12959192196528116, "compression_ratio": 1.5201793721973094, "no_caption_prob": 0.0001442471839254722}, {"id": 678, "seek": 431848, "start": 4326.08, "end": 4331.759999999999, "text": " more value, but it is not necessary to work with it or to depend on it. Right?", "tokens": [50364, 407, 286, 519, 264, 3166, 300, 291, 393, 10687, 322, 382, 257, 1606, 366, 1737, 293, 437, 307, 4835, 445, 10860, 50744, 50744, 544, 2158, 11, 457, 309, 307, 406, 4818, 281, 589, 365, 309, 420, 281, 5672, 322, 309, 13, 1779, 30, 51028, 51028, 1079, 13, 865, 11, 2138, 13, 51092, 51092, 663, 3263, 588, 11, 572, 13985, 8570, 281, 385, 13, 51252, 51252, 865, 13, 663, 311, 11, 300, 390, 452, 3387, 13, 400, 286, 1338, 11, 309, 311, 11, 370, 309, 311, 588, 4670, 281, 4374, 767, 452, 700, 51648, 51648], "temperature": 0.0, "avg_logprob": -0.12959192196528116, "compression_ratio": 1.5201793721973094, "no_caption_prob": 0.0001442471839254722}, {"id": 679, "seek": 431848, "start": 4331.759999999999, "end": 4333.04, "text": " Yes. Yeah, definitely.", "tokens": [50364, 407, 286, 519, 264, 3166, 300, 291, 393, 10687, 322, 382, 257, 1606, 366, 1737, 293, 437, 307, 4835, 445, 10860, 50744, 50744, 544, 2158, 11, 457, 309, 307, 406, 4818, 281, 589, 365, 309, 420, 281, 5672, 322, 309, 13, 1779, 30, 51028, 51028, 1079, 13, 865, 11, 2138, 13, 51092, 51092, 663, 3263, 588, 11, 572, 13985, 8570, 281, 385, 13, 51252, 51252, 865, 13, 663, 311, 11, 300, 390, 452, 3387, 13, 400, 286, 1338, 11, 309, 311, 11, 370, 309, 311, 588, 4670, 281, 4374, 767, 452, 700, 51648, 51648], "temperature": 0.0, "avg_logprob": -0.12959192196528116, "compression_ratio": 1.5201793721973094, "no_caption_prob": 0.0001442471839254722}, {"id": 680, "seek": 431848, "start": 4333.04, "end": 4336.24, "text": " That sounds very, no strings attached to me.", "tokens": [50364, 407, 286, 519, 264, 3166, 300, 291, 393, 10687, 322, 382, 257, 1606, 366, 1737, 293, 437, 307, 4835, 445, 10860, 50744, 50744, 544, 2158, 11, 457, 309, 307, 406, 4818, 281, 589, 365, 309, 420, 281, 5672, 322, 309, 13, 1779, 30, 51028, 51028, 1079, 13, 865, 11, 2138, 13, 51092, 51092, 663, 3263, 588, 11, 572, 13985, 8570, 281, 385, 13, 51252, 51252, 865, 13, 663, 311, 11, 300, 390, 452, 3387, 13, 400, 286, 1338, 11, 309, 311, 11, 370, 309, 311, 588, 4670, 281, 4374, 767, 452, 700, 51648, 51648], "temperature": 0.0, "avg_logprob": -0.12959192196528116, "compression_ratio": 1.5201793721973094, "no_caption_prob": 0.0001442471839254722}, {"id": 681, "seek": 431848, "start": 4336.24, "end": 4344.16, "text": " Yeah. That's, that was my goal. And I yeah, it's, so it's very exciting to release actually my first", "tokens": [50364, 407, 286, 519, 264, 3166, 300, 291, 393, 10687, 322, 382, 257, 1606, 366, 1737, 293, 437, 307, 4835, 445, 10860, 50744, 50744, 544, 2158, 11, 457, 309, 307, 406, 4818, 281, 589, 365, 309, 420, 281, 5672, 322, 309, 13, 1779, 30, 51028, 51028, 1079, 13, 865, 11, 2138, 13, 51092, 51092, 663, 3263, 588, 11, 572, 13985, 8570, 281, 385, 13, 51252, 51252, 865, 13, 663, 311, 11, 300, 390, 452, 3387, 13, 400, 286, 1338, 11, 309, 311, 11, 370, 309, 311, 588, 4670, 281, 4374, 767, 452, 700, 51648, 51648], "temperature": 0.0, "avg_logprob": -0.12959192196528116, "compression_ratio": 1.5201793721973094, "no_caption_prob": 0.0001442471839254722}, {"id": 682, "seek": 434416, "start": 4344.16, "end": 4349.5199999999995, "text": " paid product ever. You know, I've done services and, you know, workshops and that sort of thing,", "tokens": [50364, 4835, 1674, 1562, 13, 509, 458, 11, 286, 600, 1096, 3328, 293, 11, 291, 458, 11, 19162, 293, 300, 1333, 295, 551, 11, 50632, 50632, 457, 341, 307, 264, 700, 565, 286, 600, 1562, 2942, 257, 4835, 1674, 13, 407, 286, 478, 11, 286, 478, 534, 2919, 281, 11, 50920, 50920, 281, 853, 300, 293, 536, 577, 264, 1768, 27331, 13, 51072, 51072, 865, 11, 385, 886, 13, 865, 13, 51152, 51152, 286, 1116, 959, 281, 1568, 437, 561, 519, 13, 400, 286, 914, 11, 286, 478, 2919, 281, 536, 577, 341, 1709, 570, 286, 478, 51436, 51436, 7159, 300, 286, 393, 445, 30718, 544, 565, 281, 2390, 4455, 293, 11, 291, 458, 11, 15556, 3319, 552, 51760, 51760], "temperature": 0.0, "avg_logprob": -0.08838182244419067, "compression_ratio": 1.7170542635658914, "no_caption_prob": 0.0005970095517113805}, {"id": 683, "seek": 434416, "start": 4349.5199999999995, "end": 4355.28, "text": " but this is the first time I've ever created a paid product. So I'm, I'm really excited to,", "tokens": [50364, 4835, 1674, 1562, 13, 509, 458, 11, 286, 600, 1096, 3328, 293, 11, 291, 458, 11, 19162, 293, 300, 1333, 295, 551, 11, 50632, 50632, 457, 341, 307, 264, 700, 565, 286, 600, 1562, 2942, 257, 4835, 1674, 13, 407, 286, 478, 11, 286, 478, 534, 2919, 281, 11, 50920, 50920, 281, 853, 300, 293, 536, 577, 264, 1768, 27331, 13, 51072, 51072, 865, 11, 385, 886, 13, 865, 13, 51152, 51152, 286, 1116, 959, 281, 1568, 437, 561, 519, 13, 400, 286, 914, 11, 286, 478, 2919, 281, 536, 577, 341, 1709, 570, 286, 478, 51436, 51436, 7159, 300, 286, 393, 445, 30718, 544, 565, 281, 2390, 4455, 293, 11, 291, 458, 11, 15556, 3319, 552, 51760, 51760], "temperature": 0.0, "avg_logprob": -0.08838182244419067, "compression_ratio": 1.7170542635658914, "no_caption_prob": 0.0005970095517113805}, {"id": 684, "seek": 434416, "start": 4355.28, "end": 4358.32, "text": " to try that and see how the community responds.", "tokens": [50364, 4835, 1674, 1562, 13, 509, 458, 11, 286, 600, 1096, 3328, 293, 11, 291, 458, 11, 19162, 293, 300, 1333, 295, 551, 11, 50632, 50632, 457, 341, 307, 264, 700, 565, 286, 600, 1562, 2942, 257, 4835, 1674, 13, 407, 286, 478, 11, 286, 478, 534, 2919, 281, 11, 50920, 50920, 281, 853, 300, 293, 536, 577, 264, 1768, 27331, 13, 51072, 51072, 865, 11, 385, 886, 13, 865, 13, 51152, 51152, 286, 1116, 959, 281, 1568, 437, 561, 519, 13, 400, 286, 914, 11, 286, 478, 2919, 281, 536, 577, 341, 1709, 570, 286, 478, 51436, 51436, 7159, 300, 286, 393, 445, 30718, 544, 565, 281, 2390, 4455, 293, 11, 291, 458, 11, 15556, 3319, 552, 51760, 51760], "temperature": 0.0, "avg_logprob": -0.08838182244419067, "compression_ratio": 1.7170542635658914, "no_caption_prob": 0.0005970095517113805}, {"id": 685, "seek": 434416, "start": 4358.32, "end": 4359.92, "text": " Yeah, me too. Yeah.", "tokens": [50364, 4835, 1674, 1562, 13, 509, 458, 11, 286, 600, 1096, 3328, 293, 11, 291, 458, 11, 19162, 293, 300, 1333, 295, 551, 11, 50632, 50632, 457, 341, 307, 264, 700, 565, 286, 600, 1562, 2942, 257, 4835, 1674, 13, 407, 286, 478, 11, 286, 478, 534, 2919, 281, 11, 50920, 50920, 281, 853, 300, 293, 536, 577, 264, 1768, 27331, 13, 51072, 51072, 865, 11, 385, 886, 13, 865, 13, 51152, 51152, 286, 1116, 959, 281, 1568, 437, 561, 519, 13, 400, 286, 914, 11, 286, 478, 2919, 281, 536, 577, 341, 1709, 570, 286, 478, 51436, 51436, 7159, 300, 286, 393, 445, 30718, 544, 565, 281, 2390, 4455, 293, 11, 291, 458, 11, 15556, 3319, 552, 51760, 51760], "temperature": 0.0, "avg_logprob": -0.08838182244419067, "compression_ratio": 1.7170542635658914, "no_caption_prob": 0.0005970095517113805}, {"id": 686, "seek": 434416, "start": 4359.92, "end": 4365.599999999999, "text": " I'd love to hear what people think. And I mean, I'm excited to see how this goes because I'm", "tokens": [50364, 4835, 1674, 1562, 13, 509, 458, 11, 286, 600, 1096, 3328, 293, 11, 291, 458, 11, 19162, 293, 300, 1333, 295, 551, 11, 50632, 50632, 457, 341, 307, 264, 700, 565, 286, 600, 1562, 2942, 257, 4835, 1674, 13, 407, 286, 478, 11, 286, 478, 534, 2919, 281, 11, 50920, 50920, 281, 853, 300, 293, 536, 577, 264, 1768, 27331, 13, 51072, 51072, 865, 11, 385, 886, 13, 865, 13, 51152, 51152, 286, 1116, 959, 281, 1568, 437, 561, 519, 13, 400, 286, 914, 11, 286, 478, 2919, 281, 536, 577, 341, 1709, 570, 286, 478, 51436, 51436, 7159, 300, 286, 393, 445, 30718, 544, 565, 281, 2390, 4455, 293, 11, 291, 458, 11, 15556, 3319, 552, 51760, 51760], "temperature": 0.0, "avg_logprob": -0.08838182244419067, "compression_ratio": 1.7170542635658914, "no_caption_prob": 0.0005970095517113805}, {"id": 687, "seek": 434416, "start": 4365.599999999999, "end": 4372.08, "text": " hoping that I can just dedicate more time to building projects and, you know, monetizing them", "tokens": [50364, 4835, 1674, 1562, 13, 509, 458, 11, 286, 600, 1096, 3328, 293, 11, 291, 458, 11, 19162, 293, 300, 1333, 295, 551, 11, 50632, 50632, 457, 341, 307, 264, 700, 565, 286, 600, 1562, 2942, 257, 4835, 1674, 13, 407, 286, 478, 11, 286, 478, 534, 2919, 281, 11, 50920, 50920, 281, 853, 300, 293, 536, 577, 264, 1768, 27331, 13, 51072, 51072, 865, 11, 385, 886, 13, 865, 13, 51152, 51152, 286, 1116, 959, 281, 1568, 437, 561, 519, 13, 400, 286, 914, 11, 286, 478, 2919, 281, 536, 577, 341, 1709, 570, 286, 478, 51436, 51436, 7159, 300, 286, 393, 445, 30718, 544, 565, 281, 2390, 4455, 293, 11, 291, 458, 11, 15556, 3319, 552, 51760, 51760], "temperature": 0.0, "avg_logprob": -0.08838182244419067, "compression_ratio": 1.7170542635658914, "no_caption_prob": 0.0005970095517113805}, {"id": 688, "seek": 437208, "start": 4372.08, "end": 4374.88, "text": " directly so that I can build more of them. So.", "tokens": [50364, 3838, 370, 300, 286, 393, 1322, 544, 295, 552, 13, 407, 13, 50504, 50504, 865, 11, 570, 264, 1101, 309, 1985, 20469, 11, 264, 544, 565, 291, 393, 3496, 2390, 341, 2290, 50880, 50880, 293, 661, 3873, 411, 309, 13, 50976, 50976, 7587, 13, 865, 13, 286, 576, 959, 281, 536, 544, 295, 300, 733, 295, 551, 294, 264, 2699, 76, 1768, 370, 321, 393, 51196, 51196, 1963, 544, 382, 257, 1768, 293, 7380, 721, 2128, 13, 51320, 51348, 286, 478, 588, 709, 1237, 2128, 281, 577, 341, 4523, 484, 13, 51504, 51504, 865, 11, 385, 886, 13, 51540, 51568, 1057, 558, 13, 407, 577, 393, 561, 483, 1409, 365, 264, 2699, 76, 37645, 5751, 404, 30, 51728, 51728], "temperature": 0.0, "avg_logprob": -0.08858022611003277, "compression_ratio": 1.6766917293233083, "no_caption_prob": 3.9441110857296735e-05}, {"id": 689, "seek": 437208, "start": 4374.88, "end": 4382.4, "text": " Yeah, because the better it works financially, the more time you can spend building this tool", "tokens": [50364, 3838, 370, 300, 286, 393, 1322, 544, 295, 552, 13, 407, 13, 50504, 50504, 865, 11, 570, 264, 1101, 309, 1985, 20469, 11, 264, 544, 565, 291, 393, 3496, 2390, 341, 2290, 50880, 50880, 293, 661, 3873, 411, 309, 13, 50976, 50976, 7587, 13, 865, 13, 286, 576, 959, 281, 536, 544, 295, 300, 733, 295, 551, 294, 264, 2699, 76, 1768, 370, 321, 393, 51196, 51196, 1963, 544, 382, 257, 1768, 293, 7380, 721, 2128, 13, 51320, 51348, 286, 478, 588, 709, 1237, 2128, 281, 577, 341, 4523, 484, 13, 51504, 51504, 865, 11, 385, 886, 13, 51540, 51568, 1057, 558, 13, 407, 577, 393, 561, 483, 1409, 365, 264, 2699, 76, 37645, 5751, 404, 30, 51728, 51728], "temperature": 0.0, "avg_logprob": -0.08858022611003277, "compression_ratio": 1.6766917293233083, "no_caption_prob": 3.9441110857296735e-05}, {"id": 690, "seek": 437208, "start": 4382.4, "end": 4384.32, "text": " and other tools like it.", "tokens": [50364, 3838, 370, 300, 286, 393, 1322, 544, 295, 552, 13, 407, 13, 50504, 50504, 865, 11, 570, 264, 1101, 309, 1985, 20469, 11, 264, 544, 565, 291, 393, 3496, 2390, 341, 2290, 50880, 50880, 293, 661, 3873, 411, 309, 13, 50976, 50976, 7587, 13, 865, 13, 286, 576, 959, 281, 536, 544, 295, 300, 733, 295, 551, 294, 264, 2699, 76, 1768, 370, 321, 393, 51196, 51196, 1963, 544, 382, 257, 1768, 293, 7380, 721, 2128, 13, 51320, 51348, 286, 478, 588, 709, 1237, 2128, 281, 577, 341, 4523, 484, 13, 51504, 51504, 865, 11, 385, 886, 13, 51540, 51568, 1057, 558, 13, 407, 577, 393, 561, 483, 1409, 365, 264, 2699, 76, 37645, 5751, 404, 30, 51728, 51728], "temperature": 0.0, "avg_logprob": -0.08858022611003277, "compression_ratio": 1.6766917293233083, "no_caption_prob": 3.9441110857296735e-05}, {"id": 691, "seek": 437208, "start": 4384.32, "end": 4388.72, "text": " Exactly. Yeah. I would love to see more of that kind of thing in the Elm community so we can", "tokens": [50364, 3838, 370, 300, 286, 393, 1322, 544, 295, 552, 13, 407, 13, 50504, 50504, 865, 11, 570, 264, 1101, 309, 1985, 20469, 11, 264, 544, 565, 291, 393, 3496, 2390, 341, 2290, 50880, 50880, 293, 661, 3873, 411, 309, 13, 50976, 50976, 7587, 13, 865, 13, 286, 576, 959, 281, 536, 544, 295, 300, 733, 295, 551, 294, 264, 2699, 76, 1768, 370, 321, 393, 51196, 51196, 1963, 544, 382, 257, 1768, 293, 7380, 721, 2128, 13, 51320, 51348, 286, 478, 588, 709, 1237, 2128, 281, 577, 341, 4523, 484, 13, 51504, 51504, 865, 11, 385, 886, 13, 51540, 51568, 1057, 558, 13, 407, 577, 393, 561, 483, 1409, 365, 264, 2699, 76, 37645, 5751, 404, 30, 51728, 51728], "temperature": 0.0, "avg_logprob": -0.08858022611003277, "compression_ratio": 1.6766917293233083, "no_caption_prob": 3.9441110857296735e-05}, {"id": 692, "seek": 437208, "start": 4388.72, "end": 4391.2, "text": " invest more as a community and pushing things forward.", "tokens": [50364, 3838, 370, 300, 286, 393, 1322, 544, 295, 552, 13, 407, 13, 50504, 50504, 865, 11, 570, 264, 1101, 309, 1985, 20469, 11, 264, 544, 565, 291, 393, 3496, 2390, 341, 2290, 50880, 50880, 293, 661, 3873, 411, 309, 13, 50976, 50976, 7587, 13, 865, 13, 286, 576, 959, 281, 536, 544, 295, 300, 733, 295, 551, 294, 264, 2699, 76, 1768, 370, 321, 393, 51196, 51196, 1963, 544, 382, 257, 1768, 293, 7380, 721, 2128, 13, 51320, 51348, 286, 478, 588, 709, 1237, 2128, 281, 577, 341, 4523, 484, 13, 51504, 51504, 865, 11, 385, 886, 13, 51540, 51568, 1057, 558, 13, 407, 577, 393, 561, 483, 1409, 365, 264, 2699, 76, 37645, 5751, 404, 30, 51728, 51728], "temperature": 0.0, "avg_logprob": -0.08858022611003277, "compression_ratio": 1.6766917293233083, "no_caption_prob": 3.9441110857296735e-05}, {"id": 693, "seek": 437208, "start": 4391.76, "end": 4394.88, "text": " I'm very much looking forward to how this turns out.", "tokens": [50364, 3838, 370, 300, 286, 393, 1322, 544, 295, 552, 13, 407, 13, 50504, 50504, 865, 11, 570, 264, 1101, 309, 1985, 20469, 11, 264, 544, 565, 291, 393, 3496, 2390, 341, 2290, 50880, 50880, 293, 661, 3873, 411, 309, 13, 50976, 50976, 7587, 13, 865, 13, 286, 576, 959, 281, 536, 544, 295, 300, 733, 295, 551, 294, 264, 2699, 76, 1768, 370, 321, 393, 51196, 51196, 1963, 544, 382, 257, 1768, 293, 7380, 721, 2128, 13, 51320, 51348, 286, 478, 588, 709, 1237, 2128, 281, 577, 341, 4523, 484, 13, 51504, 51504, 865, 11, 385, 886, 13, 51540, 51568, 1057, 558, 13, 407, 577, 393, 561, 483, 1409, 365, 264, 2699, 76, 37645, 5751, 404, 30, 51728, 51728], "temperature": 0.0, "avg_logprob": -0.08858022611003277, "compression_ratio": 1.6766917293233083, "no_caption_prob": 3.9441110857296735e-05}, {"id": 694, "seek": 437208, "start": 4394.88, "end": 4395.6, "text": " Yeah, me too.", "tokens": [50364, 3838, 370, 300, 286, 393, 1322, 544, 295, 552, 13, 407, 13, 50504, 50504, 865, 11, 570, 264, 1101, 309, 1985, 20469, 11, 264, 544, 565, 291, 393, 3496, 2390, 341, 2290, 50880, 50880, 293, 661, 3873, 411, 309, 13, 50976, 50976, 7587, 13, 865, 13, 286, 576, 959, 281, 536, 544, 295, 300, 733, 295, 551, 294, 264, 2699, 76, 1768, 370, 321, 393, 51196, 51196, 1963, 544, 382, 257, 1768, 293, 7380, 721, 2128, 13, 51320, 51348, 286, 478, 588, 709, 1237, 2128, 281, 577, 341, 4523, 484, 13, 51504, 51504, 865, 11, 385, 886, 13, 51540, 51568, 1057, 558, 13, 407, 577, 393, 561, 483, 1409, 365, 264, 2699, 76, 37645, 5751, 404, 30, 51728, 51728], "temperature": 0.0, "avg_logprob": -0.08858022611003277, "compression_ratio": 1.6766917293233083, "no_caption_prob": 3.9441110857296735e-05}, {"id": 695, "seek": 437208, "start": 4396.16, "end": 4399.36, "text": " All right. So how can people get started with the Elm TS Interop?", "tokens": [50364, 3838, 370, 300, 286, 393, 1322, 544, 295, 552, 13, 407, 13, 50504, 50504, 865, 11, 570, 264, 1101, 309, 1985, 20469, 11, 264, 544, 565, 291, 393, 3496, 2390, 341, 2290, 50880, 50880, 293, 661, 3873, 411, 309, 13, 50976, 50976, 7587, 13, 865, 13, 286, 576, 959, 281, 536, 544, 295, 300, 733, 295, 551, 294, 264, 2699, 76, 1768, 370, 321, 393, 51196, 51196, 1963, 544, 382, 257, 1768, 293, 7380, 721, 2128, 13, 51320, 51348, 286, 478, 588, 709, 1237, 2128, 281, 577, 341, 4523, 484, 13, 51504, 51504, 865, 11, 385, 886, 13, 51540, 51568, 1057, 558, 13, 407, 577, 393, 561, 483, 1409, 365, 264, 2699, 76, 37645, 5751, 404, 30, 51728, 51728], "temperature": 0.0, "avg_logprob": -0.08858022611003277, "compression_ratio": 1.6766917293233083, "no_caption_prob": 3.9441110857296735e-05}, {"id": 696, "seek": 439936, "start": 4399.36, "end": 4405.839999999999, "text": " First go to elm.ts.interop.com. I'll give a nice discount code that you can access,", "tokens": [50364, 2386, 352, 281, 806, 76, 13, 1373, 13, 5106, 404, 13, 1112, 13, 286, 603, 976, 257, 1481, 11635, 3089, 300, 291, 393, 2105, 11, 50688, 50688, 291, 458, 11, 445, 829, 294, 428, 3796, 293, 286, 603, 2845, 291, 257, 11635, 3089, 456, 13, 50848, 50888, 286, 603, 362, 512, 3593, 337, 1242, 1409, 365, 1293, 264, 1737, 293, 447, 40563, 13, 51100, 51184, 400, 550, 661, 813, 300, 11, 611, 286, 11, 286, 4114, 512, 6968, 12300, 646, 294, 7687, 337, 264, 11745, 51540, 51540, 5272, 300, 264, 23682, 2237, 19184, 775, 13, 814, 360, 257, 688, 295, 1627, 2699, 76, 1507, 13, 407, 1520, 729, 51784, 51784], "temperature": 0.0, "avg_logprob": -0.09547496693474906, "compression_ratio": 1.6113207547169812, "no_caption_prob": 5.2246119594201446e-05}, {"id": 697, "seek": 439936, "start": 4405.839999999999, "end": 4409.04, "text": " you know, just put in your email and I'll send you a discount code there.", "tokens": [50364, 2386, 352, 281, 806, 76, 13, 1373, 13, 5106, 404, 13, 1112, 13, 286, 603, 976, 257, 1481, 11635, 3089, 300, 291, 393, 2105, 11, 50688, 50688, 291, 458, 11, 445, 829, 294, 428, 3796, 293, 286, 603, 2845, 291, 257, 11635, 3089, 456, 13, 50848, 50888, 286, 603, 362, 512, 3593, 337, 1242, 1409, 365, 1293, 264, 1737, 293, 447, 40563, 13, 51100, 51184, 400, 550, 661, 813, 300, 11, 611, 286, 11, 286, 4114, 512, 6968, 12300, 646, 294, 7687, 337, 264, 11745, 51540, 51540, 5272, 300, 264, 23682, 2237, 19184, 775, 13, 814, 360, 257, 688, 295, 1627, 2699, 76, 1507, 13, 407, 1520, 729, 51784, 51784], "temperature": 0.0, "avg_logprob": -0.09547496693474906, "compression_ratio": 1.6113207547169812, "no_caption_prob": 5.2246119594201446e-05}, {"id": 698, "seek": 439936, "start": 4409.839999999999, "end": 4414.08, "text": " I'll have some resources for getting started with both the free and pro tiers.", "tokens": [50364, 2386, 352, 281, 806, 76, 13, 1373, 13, 5106, 404, 13, 1112, 13, 286, 603, 976, 257, 1481, 11635, 3089, 300, 291, 393, 2105, 11, 50688, 50688, 291, 458, 11, 445, 829, 294, 428, 3796, 293, 286, 603, 2845, 291, 257, 11635, 3089, 456, 13, 50848, 50888, 286, 603, 362, 512, 3593, 337, 1242, 1409, 365, 1293, 264, 1737, 293, 447, 40563, 13, 51100, 51184, 400, 550, 661, 813, 300, 11, 611, 286, 11, 286, 4114, 512, 6968, 12300, 646, 294, 7687, 337, 264, 11745, 51540, 51540, 5272, 300, 264, 23682, 2237, 19184, 775, 13, 814, 360, 257, 688, 295, 1627, 2699, 76, 1507, 13, 407, 1520, 729, 51784, 51784], "temperature": 0.0, "avg_logprob": -0.09547496693474906, "compression_ratio": 1.6113207547169812, "no_caption_prob": 5.2246119594201446e-05}, {"id": 699, "seek": 439936, "start": 4415.759999999999, "end": 4422.88, "text": " And then other than that, also I, I wrote some blog posts back in December for the functional", "tokens": [50364, 2386, 352, 281, 806, 76, 13, 1373, 13, 5106, 404, 13, 1112, 13, 286, 603, 976, 257, 1481, 11635, 3089, 300, 291, 393, 2105, 11, 50688, 50688, 291, 458, 11, 445, 829, 294, 428, 3796, 293, 286, 603, 2845, 291, 257, 11635, 3089, 456, 13, 50848, 50888, 286, 603, 362, 512, 3593, 337, 1242, 1409, 365, 1293, 264, 1737, 293, 447, 40563, 13, 51100, 51184, 400, 550, 661, 813, 300, 11, 611, 286, 11, 286, 4114, 512, 6968, 12300, 646, 294, 7687, 337, 264, 11745, 51540, 51540, 5272, 300, 264, 23682, 2237, 19184, 775, 13, 814, 360, 257, 688, 295, 1627, 2699, 76, 1507, 13, 407, 1520, 729, 51784, 51784], "temperature": 0.0, "avg_logprob": -0.09547496693474906, "compression_ratio": 1.6113207547169812, "no_caption_prob": 5.2246119594201446e-05}, {"id": 700, "seek": 439936, "start": 4422.88, "end": 4427.759999999999, "text": " Christmas that the consulting company Beck does. They do a lot of cool Elm stuff. So check those", "tokens": [50364, 2386, 352, 281, 806, 76, 13, 1373, 13, 5106, 404, 13, 1112, 13, 286, 603, 976, 257, 1481, 11635, 3089, 300, 291, 393, 2105, 11, 50688, 50688, 291, 458, 11, 445, 829, 294, 428, 3796, 293, 286, 603, 2845, 291, 257, 11635, 3089, 456, 13, 50848, 50888, 286, 603, 362, 512, 3593, 337, 1242, 1409, 365, 1293, 264, 1737, 293, 447, 40563, 13, 51100, 51184, 400, 550, 661, 813, 300, 11, 611, 286, 11, 286, 4114, 512, 6968, 12300, 646, 294, 7687, 337, 264, 11745, 51540, 51540, 5272, 300, 264, 23682, 2237, 19184, 775, 13, 814, 360, 257, 688, 295, 1627, 2699, 76, 1507, 13, 407, 1520, 729, 51784, 51784], "temperature": 0.0, "avg_logprob": -0.09547496693474906, "compression_ratio": 1.6113207547169812, "no_caption_prob": 5.2246119594201446e-05}, {"id": 701, "seek": 442776, "start": 4427.76, "end": 4433.52, "text": " articles out if you're curious to hear more about my thinking on this general approach to the tool.", "tokens": [50364, 11290, 484, 498, 291, 434, 6369, 281, 1568, 544, 466, 452, 1953, 322, 341, 2674, 3109, 281, 264, 2290, 13, 50652, 50712, 286, 4114, 472, 2183, 300, 321, 603, 2113, 281, 466, 38514, 3391, 293, 983, 300, 1349, 3263, 534, 51032, 51032, 6179, 11, 457, 286, 519, 307, 364, 1021, 1558, 13, 400, 550, 286, 4114, 257, 1524, 493, 2183, 1219, 5569, 5190, 51344, 51344, 9129, 363, 10400, 6998, 380, 19401, 13, 400, 286, 534, 4626, 1333, 295, 3579, 300, 293, 1953, 466, 300, 13, 51656, 51656], "temperature": 0.0, "avg_logprob": -0.08855560924229997, "compression_ratio": 1.5932203389830508, "no_caption_prob": 0.00021639253827743232}, {"id": 702, "seek": 442776, "start": 4434.72, "end": 4441.12, "text": " I wrote one post that we'll link to about combinators and why that word sounds really", "tokens": [50364, 11290, 484, 498, 291, 434, 6369, 281, 1568, 544, 466, 452, 1953, 322, 341, 2674, 3109, 281, 264, 2290, 13, 50652, 50712, 286, 4114, 472, 2183, 300, 321, 603, 2113, 281, 466, 38514, 3391, 293, 983, 300, 1349, 3263, 534, 51032, 51032, 6179, 11, 457, 286, 519, 307, 364, 1021, 1558, 13, 400, 550, 286, 4114, 257, 1524, 493, 2183, 1219, 5569, 5190, 51344, 51344, 9129, 363, 10400, 6998, 380, 19401, 13, 400, 286, 534, 4626, 1333, 295, 3579, 300, 293, 1953, 466, 300, 13, 51656, 51656], "temperature": 0.0, "avg_logprob": -0.08855560924229997, "compression_ratio": 1.5932203389830508, "no_caption_prob": 0.00021639253827743232}, {"id": 703, "seek": 442776, "start": 4441.12, "end": 4447.360000000001, "text": " complicated, but I think is an important idea. And then I wrote a follow up post called Types", "tokens": [50364, 11290, 484, 498, 291, 434, 6369, 281, 1568, 544, 466, 452, 1953, 322, 341, 2674, 3109, 281, 264, 2290, 13, 50652, 50712, 286, 4114, 472, 2183, 300, 321, 603, 2113, 281, 466, 38514, 3391, 293, 983, 300, 1349, 3263, 534, 51032, 51032, 6179, 11, 457, 286, 519, 307, 364, 1021, 1558, 13, 400, 550, 286, 4114, 257, 1524, 493, 2183, 1219, 5569, 5190, 51344, 51344, 9129, 363, 10400, 6998, 380, 19401, 13, 400, 286, 534, 4626, 1333, 295, 3579, 300, 293, 1953, 466, 300, 13, 51656, 51656], "temperature": 0.0, "avg_logprob": -0.08855560924229997, "compression_ratio": 1.5932203389830508, "no_caption_prob": 0.00021639253827743232}, {"id": 704, "seek": 442776, "start": 4447.360000000001, "end": 4453.6, "text": " Without Borders Isn't Enough. And I really enjoyed sort of writing that and thinking about that.", "tokens": [50364, 11290, 484, 498, 291, 434, 6369, 281, 1568, 544, 466, 452, 1953, 322, 341, 2674, 3109, 281, 264, 2290, 13, 50652, 50712, 286, 4114, 472, 2183, 300, 321, 603, 2113, 281, 466, 38514, 3391, 293, 983, 300, 1349, 3263, 534, 51032, 51032, 6179, 11, 457, 286, 519, 307, 364, 1021, 1558, 13, 400, 550, 286, 4114, 257, 1524, 493, 2183, 1219, 5569, 5190, 51344, 51344, 9129, 363, 10400, 6998, 380, 19401, 13, 400, 286, 534, 4626, 1333, 295, 3579, 300, 293, 1953, 466, 300, 13, 51656, 51656], "temperature": 0.0, "avg_logprob": -0.08855560924229997, "compression_ratio": 1.5932203389830508, "no_caption_prob": 0.00021639253827743232}, {"id": 705, "seek": 445360, "start": 4453.6, "end": 4458.320000000001, "text": " I think that I kind of talk about some of the reasons why I think that Elm GraphQL has stood", "tokens": [50364, 286, 519, 300, 286, 733, 295, 751, 466, 512, 295, 264, 4112, 983, 286, 519, 300, 2699, 76, 21884, 13695, 575, 9371, 50600, 50600, 264, 1500, 295, 565, 382, 257, 5100, 3109, 293, 2699, 76, 15576, 14237, 5751, 404, 2978, 20767, 1748, 13, 400, 286, 751, 50916, 50916, 466, 264, 4112, 983, 13, 407, 11, 370, 976, 309, 257, 853, 293, 286, 1116, 959, 281, 1568, 437, 561, 519, 13, 400, 51180, 51212, 731, 11, 1826, 958, 565, 11, 751, 281, 291, 1780, 13, 51300, 51300, 9088, 958, 565, 13, 51336, 51336, 4621, 6543, 13, 51364, 51364, 4621, 13, 51388], "temperature": 0.0, "avg_logprob": -0.16802475499171837, "compression_ratio": 1.6214953271028036, "no_caption_prob": 0.00015837475075386465}, {"id": 706, "seek": 445360, "start": 4458.320000000001, "end": 4464.64, "text": " the test of time as a solid approach and Elm TypeScript Interop needed revisiting. And I talk", "tokens": [50364, 286, 519, 300, 286, 733, 295, 751, 466, 512, 295, 264, 4112, 983, 286, 519, 300, 2699, 76, 21884, 13695, 575, 9371, 50600, 50600, 264, 1500, 295, 565, 382, 257, 5100, 3109, 293, 2699, 76, 15576, 14237, 5751, 404, 2978, 20767, 1748, 13, 400, 286, 751, 50916, 50916, 466, 264, 4112, 983, 13, 407, 11, 370, 976, 309, 257, 853, 293, 286, 1116, 959, 281, 1568, 437, 561, 519, 13, 400, 51180, 51212, 731, 11, 1826, 958, 565, 11, 751, 281, 291, 1780, 13, 51300, 51300, 9088, 958, 565, 13, 51336, 51336, 4621, 6543, 13, 51364, 51364, 4621, 13, 51388], "temperature": 0.0, "avg_logprob": -0.16802475499171837, "compression_ratio": 1.6214953271028036, "no_caption_prob": 0.00015837475075386465}, {"id": 707, "seek": 445360, "start": 4464.64, "end": 4469.92, "text": " about the reasons why. So, so give it a try and I'd love to hear what people think. And", "tokens": [50364, 286, 519, 300, 286, 733, 295, 751, 466, 512, 295, 264, 4112, 983, 286, 519, 300, 2699, 76, 21884, 13695, 575, 9371, 50600, 50600, 264, 1500, 295, 565, 382, 257, 5100, 3109, 293, 2699, 76, 15576, 14237, 5751, 404, 2978, 20767, 1748, 13, 400, 286, 751, 50916, 50916, 466, 264, 4112, 983, 13, 407, 11, 370, 976, 309, 257, 853, 293, 286, 1116, 959, 281, 1568, 437, 561, 519, 13, 400, 51180, 51212, 731, 11, 1826, 958, 565, 11, 751, 281, 291, 1780, 13, 51300, 51300, 9088, 958, 565, 13, 51336, 51336, 4621, 6543, 13, 51364, 51364, 4621, 13, 51388], "temperature": 0.0, "avg_logprob": -0.16802475499171837, "compression_ratio": 1.6214953271028036, "no_caption_prob": 0.00015837475075386465}, {"id": 708, "seek": 445360, "start": 4470.56, "end": 4472.320000000001, "text": " well, until next time, talk to you later.", "tokens": [50364, 286, 519, 300, 286, 733, 295, 751, 466, 512, 295, 264, 4112, 983, 286, 519, 300, 2699, 76, 21884, 13695, 575, 9371, 50600, 50600, 264, 1500, 295, 565, 382, 257, 5100, 3109, 293, 2699, 76, 15576, 14237, 5751, 404, 2978, 20767, 1748, 13, 400, 286, 751, 50916, 50916, 466, 264, 4112, 983, 13, 407, 11, 370, 976, 309, 257, 853, 293, 286, 1116, 959, 281, 1568, 437, 561, 519, 13, 400, 51180, 51212, 731, 11, 1826, 958, 565, 11, 751, 281, 291, 1780, 13, 51300, 51300, 9088, 958, 565, 13, 51336, 51336, 4621, 6543, 13, 51364, 51364, 4621, 13, 51388], "temperature": 0.0, "avg_logprob": -0.16802475499171837, "compression_ratio": 1.6214953271028036, "no_caption_prob": 0.00015837475075386465}, {"id": 709, "seek": 445360, "start": 4472.320000000001, "end": 4473.04, "text": " Until next time.", "tokens": [50364, 286, 519, 300, 286, 733, 295, 751, 466, 512, 295, 264, 4112, 983, 286, 519, 300, 2699, 76, 21884, 13695, 575, 9371, 50600, 50600, 264, 1500, 295, 565, 382, 257, 5100, 3109, 293, 2699, 76, 15576, 14237, 5751, 404, 2978, 20767, 1748, 13, 400, 286, 751, 50916, 50916, 466, 264, 4112, 983, 13, 407, 11, 370, 976, 309, 257, 853, 293, 286, 1116, 959, 281, 1568, 437, 561, 519, 13, 400, 51180, 51212, 731, 11, 1826, 958, 565, 11, 751, 281, 291, 1780, 13, 51300, 51300, 9088, 958, 565, 13, 51336, 51336, 4621, 6543, 13, 51364, 51364, 4621, 13, 51388], "temperature": 0.0, "avg_logprob": -0.16802475499171837, "compression_ratio": 1.6214953271028036, "no_caption_prob": 0.00015837475075386465}, {"id": 710, "seek": 445360, "start": 4473.04, "end": 4473.6, "text": " Bye bye.", "tokens": [50364, 286, 519, 300, 286, 733, 295, 751, 466, 512, 295, 264, 4112, 983, 286, 519, 300, 2699, 76, 21884, 13695, 575, 9371, 50600, 50600, 264, 1500, 295, 565, 382, 257, 5100, 3109, 293, 2699, 76, 15576, 14237, 5751, 404, 2978, 20767, 1748, 13, 400, 286, 751, 50916, 50916, 466, 264, 4112, 983, 13, 407, 11, 370, 976, 309, 257, 853, 293, 286, 1116, 959, 281, 1568, 437, 561, 519, 13, 400, 51180, 51212, 731, 11, 1826, 958, 565, 11, 751, 281, 291, 1780, 13, 51300, 51300, 9088, 958, 565, 13, 51336, 51336, 4621, 6543, 13, 51364, 51364, 4621, 13, 51388], "temperature": 0.0, "avg_logprob": -0.16802475499171837, "compression_ratio": 1.6214953271028036, "no_caption_prob": 0.00015837475075386465}, {"id": 711, "seek": 447360, "start": 4473.6, "end": 4485.84, "text": " Bye.", "tokens": [50364, 4621, 13, 50976], "temperature": 0.0, "avg_logprob": -0.4962165832519531, "compression_ratio": 0.3333333333333333, "no_caption_prob": 0.0002817919012159109}], "language": "en"}